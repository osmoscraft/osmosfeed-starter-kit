{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Lea Verou",
  "feed_url": "https://lea.verou.me/feed/",
  "items": [
    {
      "id": "https://lea.verou.me/?p=3392",
      "url": "https://lea.verou.me/2021/11/on-yak-shaving-and-md-block-an-html-element-for-markdown/",
      "title": "On Yak Shaving and , a new HTML element for Markdown",
      "summary": "This week has been Yak Shaving Galore. It went a bit like this: I‚Äôve been working on a web component that I need for the project I‚Äôm working on. More on that later, but let‚Äôs call it <x-foo> for now. Of course that needs to be developed as a separate reusable library and released as [‚Ä¶]",
      "content_html": "<p>This week has been <a href=\"https://americanexpress.io/yak-shaving/\">Yak Shaving</a> Galore. It went a bit like this:</p>\n\n\n\n<ol><li>I&#8217;ve been working on a web component that I need for the project I‚Äôm working on. More on that later, but let‚Äôs call it <code>&lt;x-foo></code> for now.</li><li><em>Of course</em> that needs to be developed as a separate reusable library and released as a separate open source project. No, this is not the titular component, this was only level 1 of my multi-level yak shaving‚Ä¶ <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f926-1f3fd-200d-2640-fe0f.png\" alt=\"ü§¶üèΩ‚Äç‚ôÄÔ∏è\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></li><li>I wanted to showcase various usage examples of that component in its page, so I made another component for these demos: <code>&lt;x-foo-live></code>. This demo component would have markup with editable parts on one side and the live rendering on the other side.</li><li>I wanted the editable parts to autosize as you type. Hey, I‚Äôve written a library for that in the past, it‚Äôs called <a href=\"https://github.com/leaverou/stretchy/\">Stretchy</a>! </li><li>But Stretchy was not written in ESM, nor did it support Shadow DOM. I must rewrite Stretchy in ESM and support Shadow DOM first! Surely it won‚Äôt take more than a half hour, it‚Äôs a tiny library.</li><li><em>(It took more than a half hour)</em></li><li>Ok, now I have a nice lil&#8217; module, but I also need to export IIFE as well, so that it&#8217;s compatible with Stretchy v1. Let&#8217;s switch to Rollup and npm scripts and ditch Gulp.</li><li>Oh look, Stretchy‚Äôs CSS is still written in Sass, even though it doesn‚Äôt really need it now. Let‚Äôs rewrite it to use CSS variables, use PostCSS for nesting, and use <code>conic-gradient()</code> instead of inline SVG data URIs.</li><li>Ok, Stretchy v2 is ready, now I need to update its docs. Oooh, it doesn‚Äôt have a README? I should add one. But I don‚Äôt want to duplicate content between the page and the README. Hmmm, if only‚Ä¶</li><li>I know! I‚Äôll make a web component for rendering both inline and remote Markdown! I have an unfinished one lying around somewhere, surely it won‚Äôt take more than a couple hours to finish it?</li><li><em>(It took almost a day, two with docs, demos etc)</em></li><li><em>Done!</em> Here it is! <a rel=\"noreferrer noopener\" href=\"https://md-block.verou.me/\" target=\"_blank\">https://md-block.verou.m</a><a href=\"https://md-block.verou.me/\">e</a></li><li><em>Great!</em> Now I can update <a href=\"https://stretchy.verou.me/\">Stretchy‚Äôs docs</a> and <a href=\"https://github.com/LeaVerou/stretchy/releases/tag/v2.0.0\">release its v2</a></li><li><em>Great!</em> Now I can use Stretchy in my <code>&lt;x-foo-live></code> component demoing my <code>&lt;x-foo></code> component and be back to only one level of yak shaving!</li><li><em>Wow, it‚Äôs already Friday afternoon?!</em> <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f926-1f3fd-200d-2640-fe0f.png\" alt=\"ü§¶üèΩ‚Äç‚ôÄÔ∏è\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f602.png\" alt=\"üòÇ\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></li></ol>\n\n\n\n<p>Hopefully you find <a href=\"https://md-block.verou.me/\" target=\"_blank\" rel=\"noreferrer noopener\">&lt;md-block></a> useful! Enjoy!</p>",
      "content_text": "This week has been Yak Shaving Galore. It went a bit like this:\n\n\n\nI‚Äôve been working on a web component that I need for the project I‚Äôm working on. More on that later, but let‚Äôs call it <x-foo> for now.Of course that needs to be developed as a separate reusable library and released as a separate open source project. No, this is not the titular component, this was only level 1 of my multi-level yak shaving‚Ä¶ I wanted to showcase various usage examples of that component in its page, so I made another component for these demos: <x-foo-live>. This demo component would have markup with editable parts on one side and the live rendering on the other side.I wanted the editable parts to autosize as you type. Hey, I‚Äôve written a library for that in the past, it‚Äôs called Stretchy! But Stretchy was not written in ESM, nor did it support Shadow DOM. I must rewrite Stretchy in ESM and support Shadow DOM first! Surely it won‚Äôt take more than a half hour, it‚Äôs a tiny library.(It took more than a half hour)Ok, now I have a nice lil‚Äô module, but I also need to export IIFE as well, so that it‚Äôs compatible with Stretchy v1. Let‚Äôs switch to Rollup and npm scripts and ditch Gulp.Oh look, Stretchy‚Äôs CSS is still written in Sass, even though it doesn‚Äôt really need it now. Let‚Äôs rewrite it to use CSS variables, use PostCSS for nesting, and use conic-gradient() instead of inline SVG data URIs.Ok, Stretchy v2 is ready, now I need to update its docs. Oooh, it doesn‚Äôt have a README? I should add one. But I don‚Äôt want to duplicate content between the page and the README. Hmmm, if only‚Ä¶I know! I‚Äôll make a web component for rendering both inline and remote Markdown! I have an unfinished one lying around somewhere, surely it won‚Äôt take more than a couple hours to finish it?(It took almost a day, two with docs, demos etc)Done! Here it is! https://md-block.verou.meGreat! Now I can update Stretchy‚Äôs docs and release its v2Great! Now I can use Stretchy in my <x-foo-live> component demoing my <x-foo> component and be back to only one level of yak shaving!Wow, it‚Äôs already Friday afternoon?! \n\n\n\nHopefully you find <md-block> useful! Enjoy!",
      "date_published": "2021-11-26T16:08:17.000Z",
      "date_modified": "2021-11-26T16:08:17.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3384",
      "url": "https://lea.verou.me/2021/10/custom-properties-with-defaults/",
      "title": "Custom properties with defaults: 3+1 strategies",
      "summary": "When developing customizable components, one often wants to expose various parameters of the styling as custom properties, and form a sort of CSS API. This is still underutlized, but there are libraries, e.g. Shoelace, that already list custom properties alongside other parts of each component‚Äôs API (even CSS parts!). Note: I‚Äôm using ‚Äúcomponent‚Äù here broadly, [‚Ä¶]",
      "content_html": "<p>When developing customizable components, one often wants to expose various parameters of the styling as custom properties, and form a sort of <em>CSS API</em>. This is still underutlized, but there are libraries, e.g. <a href=\"https://shoelace.style/\">Shoelace</a>, that already <a href=\"https://shoelace.style/components/switch?id=css-custom-properties\">list</a> <a href=\"https://shoelace.style/components/progress-ring?id=css-custom-properties\">custom</a> <a href=\"https://shoelace.style/components/image-comparer?id=css-custom-properties\">properties</a> alongside other parts of each component&#8217;s API (even <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::part\">CSS parts</a>!).</p>\n\n\n\n<p><em><strong>Note:</strong> I‚Äôm using &#8220;component&#8221; here broadly, as any reusable chunk of HTML/CSS/JS, not necessarily a web component or framework component. What we are going to discuss applies to reusable chunks of HTML just as much as it does to &#8220;proper&#8221; web components.</em></p>\n\n\n\n<p>Let&#8217;s suppose we are designing a certain button styling, that looks like this:</p>\n\n\n\n<span id=\"more-3384\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img width=\"564\" height=\"140\" src=\"https://lea.verou.me/wp-content/uploads/2021/10/outlined-button.gif\" alt=\"\" class=\"wp-image-3386\"/></figure>\n\n\n\n<p>We want to support a <code>--color</code> custom property for creating color variations by setting multiple things internally:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.fancy-button {\n\tborder: .1em solid var(--color);\n\tbackground: transparent;\n\tcolor: <meta charset=\"utf-8\"/>var(--color);\n}\n\n<meta charset=\"utf-8\"/>.fancy-button:hover {\n\tbackground: <meta charset=\"utf-8\"/>var(--color);\n\tcolor: white;\n}</code></pre>\n\n\n\n<p>Note that with the code above, if no <code>--color</code> is set, the three declarations using it will be <a href=\"https://www.w3.org/TR/css-variables-1/#invalid-at-computed-value-time\">IACVT</a> and thus we&#8217;ll get a nearly unstyled text-only button with no background on hover (<code>transparent</code>), no border on hover, and the default black text color (<code>canvastext</code> to be precise).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"238\" height=\"106\" src=\"https://lea.verou.me/wp-content/uploads/2021/10/image.png\" alt=\"\" class=\"wp-image-3387\"/></figure>\n\n\n\n<p>That&#8217;s no good! IT&#8217;s important that we set defaults. However, using the fallback parameter for this gets tedious, and <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">WET</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.fancy-button {\n\tborder: .1em solid var(--color, black);\n\tbackground: transparent;\n\tcolor: <meta charset=\"utf-8\"/>var(--color, black);\n}\n\n<meta charset=\"utf-8\"/>.fancy-button:hover {\n\tbackground: <meta charset=\"utf-8\"/>var(--color, black);\n\tcolor: white;\n}</code></pre>\n\n\n\n<p>To avoid the repetition and still ensure <code>--color</code> always has a value, many people do this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.fancy-button {\n<meta charset=\"utf-8\"/>\t--color: black;\n\tborder: .1em solid var(--color);\n\tbackground: transparent;\n\tcolor: <meta charset=\"utf-8\"/>var(--color);\n}\n\n<meta charset=\"utf-8\"/>.fancy-button:hover {\n\tbackground: <meta charset=\"utf-8\"/>var(--color);\n\tcolor: white;\n}</code></pre>\n\n\n\n<p>However, this is not ideal for a number of reasons:</p>\n\n\n\n<ul><li>It means that people cannot take advantage of inheritance to set <code>--color</code> on an ancestor.</li><li>It means that people need to use specificity that overrides your own rules to set these properties. In this case this may only be <code>0,1,0</code>, but if your selectors are complex, it could end up being quite annoying (and introduce tight couplings, because developers should not need to know what your selectors are).</li></ul>\n\n\n\n<p>If you insist going that route, <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:where\">:where()</a></code> can be a useful tool to reduce specificity of your selectors while having as fine grained selection criteria as you want. It&#8217;s also one of the features <a href=\"https://github.com/w3c/csswg-drafts/issues/1170\">I proposed</a> for CSS, so I&#8217;m very proud that it&#8217;s now <a href=\"https://caniuse.com/mdn-css_selectors_where\">supported everywhere</a>. <code>:where()</code> won&#8217;t solve the inheritance problem, but at least it will solve the specificity problem.</p>\n\n\n\n<p>What if we still use the fallback parameter and use a variable for the fallback? </p>\n\n\n\n<pre class=\"wp-block-code\"><code>.fancy-button {\n<meta charset=\"utf-8\"/>\t--color-initial: black;\n\tborder: .1em solid var(--color, var(<meta charset=\"utf-8\"/>--color-initial));\n\tbackground: transparent;\n\tcolor: <meta charset=\"utf-8\"/>var(--color, <meta charset=\"utf-8\"/>var(<meta charset=\"utf-8\"/>--color-initial));\n}\n\n<meta charset=\"utf-8\"/>.fancy-button:hover {\n\tbackground: <meta charset=\"utf-8\"/>var(--color, <meta charset=\"utf-8\"/>var(<meta charset=\"utf-8\"/>--color-initial));\n\tcolor: white;\n}</code></pre>\n\n\n\n<p>This works, and it has the advantage that people could even <em>customize your default</em> if they want to (though I cannot think of any use cases for that). But isn&#8217;t it so <em>horribly</em> verbose? What else could we do?</p>\n\n\n\n<p>My preferred solution is what I call <em>pseudo-private custom properties</em>. You use a different property internally than the one you expose, which is set to the one you expose plus the fallback:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.fancy-button {\n<meta charset=\"utf-8\"/>\t--_color: <meta charset=\"utf-8\"/>var(<meta charset=\"utf-8\"/>--color, black);\n\tborder: .1em solid var(--_color);\n\tbackground: transparent;\n\tcolor: <meta charset=\"utf-8\"/><meta charset=\"utf-8\"/>var(--_color);\n}\n\n<meta charset=\"utf-8\"/>.fancy-button:hover {\n\tbackground: <meta charset=\"utf-8\"/><meta charset=\"utf-8\"/>var(--_color);\n\tcolor: white;\n}</code></pre>\n\n\n\n<p>I tend to use the same name prepended with an underscore. Some people may flinch at the idea of private properties that aren&#8217;t really private, but I will remind you that we&#8217;ve done this in JS for over 20 years (we only got real <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">private properties</a> fairly recently).</p>\n\n\n\n<h2>Bonus: Defaults via @property registration</h2>\n\n\n\n<p>If <code>@property</code> is fair game (it&#8217;s <a href=\"https://caniuse.com/mdn-css_at-rules_property\">only supported in Chromium</a>, but these days that still makes it supported in 70% of users&#8217; browsers ‚Äî which is a bit sad, but that&#8217;s another discussion), you could also set defaults that way:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@property --color {\n<meta charset=\"utf-8\"/>\tsyntax: \"&lt;color>\";\n<meta charset=\"utf-8\"/>\tinherits: true;\n<meta charset=\"utf-8\"/>\tinitial-value: black;\n}\n\n.fancy-button {\n<meta charset=\"utf-8\"/>\tborder: .1em solid var(--color);\n\tbackground: transparent;\n\tcolor: <meta charset=\"utf-8\"/><meta charset=\"utf-8\"/>var(--color);\n}\n\n<meta charset=\"utf-8\"/>.fancy-button:hover {\n\tbackground: <meta charset=\"utf-8\"/><meta charset=\"utf-8\"/>var(--color);\n\tcolor: white;\n}</code></pre>\n\n\n\n<p>Registering your property has several benefits (e.g. it makes it animatable), but if you&#8217;re only registering it for the purposes of setting a default, this way has several drawbacks:</p>\n\n\n\n<ul><li>Property registration is global. Your component&#8217;s custom properties may clash with the host page&#8217;s custom properties, which is not great. The consequences of this can be quite dire, because <code>@property</code> fails silently, and the <a href=\"https://codepen.io/leaverou/pen/JjyYgow\">last one wins</a> so you may just get the initial value of the host page&#8217;s property. In this case, that could very likely be <code>transparent</code>, with <a href=\"https://codepen.io/leaverou/pen/JjyYgow\">terrible results</a>. And if your declaration is last and you get your own registered property, that means the rest of the page will also get yours, with equally potentially terrible results.</li><li>With this method you cannot set different initial values per declaration (although you usually don&#8217;t want to).</li><li>Not all custom property <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@property/syntax\">syntaxes</a> can be described via <code>@property</code> yet.</li></ul>\n\n\n\n<h2>Bonus: Customizable single-checkbox pure CSS switch</h2>\n\n\n\n<p class=\"language-markup\">Just for the lulz, I made a switch (styling loosely inspired from <a href=\"https://shoelace.style/components/switch\">Shoelace switch</a>) that is just a regular <code>&lt;input type=checkbox></code> with a pretty extensive custom property API:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoKPQYE\" src=\"//codepen.io/anon/embed/PoKPQYE?height=450&amp;theme-id=1&amp;slug-hash=PoKPQYE&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoKPQYE\" title=\"CodePen Embed PoKPQYE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>It is using the pseudo-private properties approach. Note how another bonus of this method is that there&#8217;s a little self-documentation right there about the component&#8217;s custom property API, even before any actual documentation is written.</p>\n\n\n\n<p>As an aside, things like this switch make me wish it was possible to create web components that subclass existing elements. There is an existing ‚Äî somewhat awkward ‚Äî solution with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is\">the <code>is</code> attribute</a>, but <a href=\"https://bugs.webkit.org/show_bug.cgi?id=182671\">Apple is blocking it</a>. The alternative is to use a web component with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals\">ElementInternals</a> to make it form-associated and accessible and mirror all checkbox methods and properties, but that is way too heavyweight, and prone to breakage in the future, as native checkboxes add more methods. There is also a <a href=\"https://github.com/ungap/custom-elements#readme\">polyfill</a>, but for a simple switch it may be a bit overkill. We really shouldn&#8217;t need to be painstakingly mirroring native elements to subclass them‚Ä¶</p>\n\n\n\n<p><em>Enjoyed this article and want to learn more? I do teach courses on unlocking the full potential of CSS custom properties. You can watch my <a href=\"https://frontendmasters.com/workshops/css-variables/\">Frontend Masters Dynamic CSS course (currently in production)</a>, or <a href=\"https://smashingconf.com/online-workshops/workshops/lea-verou-nov/\">attend my upcoming Smashing workshop</a>.</em></p>",
      "content_text": "When developing customizable components, one often wants to expose various parameters of the styling as custom properties, and form a sort of CSS API. This is still underutlized, but there are libraries, e.g. Shoelace, that already list custom properties alongside other parts of each component‚Äôs API (even CSS parts!).\n\n\n\nNote: I‚Äôm using ‚Äúcomponent‚Äù here broadly, as any reusable chunk of HTML/CSS/JS, not necessarily a web component or framework component. What we are going to discuss applies to reusable chunks of HTML just as much as it does to ‚Äúproper‚Äù web components.\n\n\n\nLet‚Äôs suppose we are designing a certain button styling, that looks like this:\n\n\n\n\n\n\n\n\n\n\n\nWe want to support a --color custom property for creating color variations by setting multiple things internally:\n\n\n\n.fancy-button {\n\tborder: .1em solid var(--color);\n\tbackground: transparent;\n\tcolor: var(--color);\n}\n\n.fancy-button:hover {\n\tbackground: var(--color);\n\tcolor: white;\n}\n\n\n\nNote that with the code above, if no --color is set, the three declarations using it will be IACVT and thus we‚Äôll get a nearly unstyled text-only button with no background on hover (transparent), no border on hover, and the default black text color (canvastext to be precise).\n\n\n\n\n\n\n\nThat‚Äôs no good! IT‚Äôs important that we set defaults. However, using the fallback parameter for this gets tedious, and WET:\n\n\n\n.fancy-button {\n\tborder: .1em solid var(--color, black);\n\tbackground: transparent;\n\tcolor: var(--color, black);\n}\n\n.fancy-button:hover {\n\tbackground: var(--color, black);\n\tcolor: white;\n}\n\n\n\nTo avoid the repetition and still ensure --color always has a value, many people do this:\n\n\n\n.fancy-button {\n\t--color: black;\n\tborder: .1em solid var(--color);\n\tbackground: transparent;\n\tcolor: var(--color);\n}\n\n.fancy-button:hover {\n\tbackground: var(--color);\n\tcolor: white;\n}\n\n\n\nHowever, this is not ideal for a number of reasons:\n\n\n\nIt means that people cannot take advantage of inheritance to set --color on an ancestor.It means that people need to use specificity that overrides your own rules to set these properties. In this case this may only be 0,1,0, but if your selectors are complex, it could end up being quite annoying (and introduce tight couplings, because developers should not need to know what your selectors are).\n\n\n\nIf you insist going that route, :where() can be a useful tool to reduce specificity of your selectors while having as fine grained selection criteria as you want. It‚Äôs also one of the features I proposed for CSS, so I‚Äôm very proud that it‚Äôs now supported everywhere. :where() won‚Äôt solve the inheritance problem, but at least it will solve the specificity problem.\n\n\n\nWhat if we still use the fallback parameter and use a variable for the fallback? \n\n\n\n.fancy-button {\n\t--color-initial: black;\n\tborder: .1em solid var(--color, var(--color-initial));\n\tbackground: transparent;\n\tcolor: var(--color, var(--color-initial));\n}\n\n.fancy-button:hover {\n\tbackground: var(--color, var(--color-initial));\n\tcolor: white;\n}\n\n\n\nThis works, and it has the advantage that people could even customize your default if they want to (though I cannot think of any use cases for that). But isn‚Äôt it so horribly verbose? What else could we do?\n\n\n\nMy preferred solution is what I call pseudo-private custom properties. You use a different property internally than the one you expose, which is set to the one you expose plus the fallback:\n\n\n\n.fancy-button {\n\t--_color: var(--color, black);\n\tborder: .1em solid var(--_color);\n\tbackground: transparent;\n\tcolor: var(--_color);\n}\n\n.fancy-button:hover {\n\tbackground: var(--_color);\n\tcolor: white;\n}\n\n\n\nI tend to use the same name prepended with an underscore. Some people may flinch at the idea of private properties that aren‚Äôt really private, but I will remind you that we‚Äôve done this in JS for over 20 years (we only got real private properties fairly recently).\n\n\n\nBonus: Defaults via @property registration\n\n\n\nIf @property is fair game (it‚Äôs only supported in Chromium, but these days that still makes it supported in 70% of users‚Äô browsers ‚Äî which is a bit sad, but that‚Äôs another discussion), you could also set defaults that way:\n\n\n\n@property --color {\n\tsyntax: \"<color>\";\n\tinherits: true;\n\tinitial-value: black;\n}\n\n.fancy-button {\n\tborder: .1em solid var(--color);\n\tbackground: transparent;\n\tcolor: var(--color);\n}\n\n.fancy-button:hover {\n\tbackground: var(--color);\n\tcolor: white;\n}\n\n\n\nRegistering your property has several benefits (e.g. it makes it animatable), but if you‚Äôre only registering it for the purposes of setting a default, this way has several drawbacks:\n\n\n\nProperty registration is global. Your component‚Äôs custom properties may clash with the host page‚Äôs custom properties, which is not great. The consequences of this can be quite dire, because @property fails silently, and the last one wins so you may just get the initial value of the host page‚Äôs property. In this case, that could very likely be transparent, with terrible results. And if your declaration is last and you get your own registered property, that means the rest of the page will also get yours, with equally potentially terrible results.With this method you cannot set different initial values per declaration (although you usually don‚Äôt want to).Not all custom property syntaxes can be described via @property yet.\n\n\n\nBonus: Customizable single-checkbox pure CSS switch\n\n\n\nJust for the lulz, I made a switch (styling loosely inspired from Shoelace switch) that is just a regular <input type=checkbox> with a pretty extensive custom property API:\n\n\n\nCodePen Embed Fallback\n\n\n\nIt is using the pseudo-private properties approach. Note how another bonus of this method is that there‚Äôs a little self-documentation right there about the component‚Äôs custom property API, even before any actual documentation is written.\n\n\n\nAs an aside, things like this switch make me wish it was possible to create web components that subclass existing elements. There is an existing ‚Äî somewhat awkward ‚Äî solution with the is attribute, but Apple is blocking it. The alternative is to use a web component with ElementInternals to make it form-associated and accessible and mirror all checkbox methods and properties, but that is way too heavyweight, and prone to breakage in the future, as native checkboxes add more methods. There is also a polyfill, but for a simple switch it may be a bit overkill. We really shouldn‚Äôt need to be painstakingly mirroring native elements to subclass them‚Ä¶\n\n\n\nEnjoyed this article and want to learn more? I do teach courses on unlocking the full potential of CSS custom properties. You can watch my Frontend Masters Dynamic CSS course (currently in production), or attend my upcoming Smashing workshop.",
      "date_published": "2021-10-15T11:22:40.000Z",
      "date_modified": "2021-10-15T11:22:40.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3366",
      "url": "https://lea.verou.me/2021/06/inherit-ancestor-font-size-for-fun-and-profit/",
      "title": "Inherit ancestor font-size, for fun and profit",
      "summary": "If you‚Äôve been writing CSS for any length of time, you‚Äôre probably familiar with the em unit, and possibly the other type-relative units. We are going to refer to em for the rest of this post, but anything described works for all type-relative units. As you well know, em resolves to the current font size [‚Ä¶]",
      "content_html": "<p>If you‚Äôve been writing CSS for any length of time, you&#8217;re probably familiar with the <code>em</code> unit, and possibly the other <a href=\"https://drafts.csswg.org/css-values/#font-relative-lengths\">type-relative units</a>. We are going to refer to <code>em</code> for the rest of this post, but anything described works for all type-relative units.</p>\n\n\n\n<p>As you well know, <code>em</code> resolves to the current font size on all properties except <code>font-size</code>, where it resolves to the <em>parent</em> font size. It can be quite useful for making scalable components that adapt to their context size.</p>\n\n\n\n<p>However, I have often come across cases where you actually need to &#8220;circumvent&#8221; one level of this. Either you need to set <code>font-size</code> to the grandparent font size instead of the parent one, or you need to set other properties to the parent font size, not the current one. </p>\n\n\n\n<span id=\"more-3366\"></span>\n\n\n\n<p><em>If you‚Äôre already familiar with the problem and just want <a href=\"#the-solution\">the solution</a>, <a href=\"#the-solution\">skip ahead</a>. The next few paragraphs are for those thinking &#8220;but when would you ever need this?&#8221;</em></p>\n\n\n\n<p>Sometimes, there are workarounds, and it&#8217;s just a matter of keeping DRY. For example, take a look at this speech bubble:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_dyvxGLo\" src=\"//codepen.io/anon/embed/dyvxGLo?height=410&amp;theme-id=1&amp;slug-hash=dyvxGLo&amp;default-tab=result\" height=\"410\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed dyvxGLo\" title=\"CodePen Embed dyvxGLo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Note this in the CSS:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/* This needs to change every time the font-size changes: */\ntop: calc(100% + 1em / 2.5); \nfont-size: 250%;</code></pre>\n\n\n\n<p>Note that every time we change the font size we also need to adjust <code>top</code>. And ok, when they&#8217;re both defined in the same rule we can just delegate this to a variable:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>--m: 2.5;\ntop: calc(100% + 1em / var(--m)); \nfont-size: calc(var(--m) * 100%);</code></pre>\n\n\n\n<p>However, in the general case the font size may be defined elsewhere. For example, a third party author may want to override the emoji size, they shouldn&#8217;t also need to override anything else, our CSS should just adapt.</p>\n\n\n\n<p>In other cases, it is simply not possible to multiply and divide by a factor and restore the ancestor font size. Most notably, when the current (or parent) font-size is set to <code>0</code> and we need to recover what it was one level up.</p>\n\n\n\n<p>I&#8217;ve come across many instances of this in the 16 years I&#8217;ve been writing CSS. Admittedly, there were way more use cases pre-Flexbox and friends, but it&#8217;s still useful, as we will see. In fact, it was the latest one that prompted this post.</p>\n\n\n\n<p>I needed to wrap <code>&lt;option&gt;</code> elements by a generic container for a library I‚Äôm working on. Let me stop you there, no, I could not just set classes on the options, I needed an actual container in the DOM.</p>\n\n\n\n<p>As you can see in <a href=\"https://codepen.io/leaverou/pen/OJpexzE\">this pen</a>, neither <code>&lt;div&gt;</code> nor custom elements work here: when included in the markup they are just discarded by the parser, and when inserted via script they are in the DOM, but the options they contain are not visible. The only <a href=\"https://html.spec.whatwg.org/multipage/form-elements.html#the-select-element\">elements that work inside a <code>&lt;select&gt;</code></a> are: <code>&lt;option&gt;</code>, <code>&lt;optgroup&gt;</code>, and <a href=\"https://html.spec.whatwg.org/multipage/dom.html#script-supporting-elements-2\">script-supporting elements</a> (currently <code>&lt;template&gt;</code> and <code>&lt;script&gt;</code>). Except <code>&lt;optgroup&gt;</code>, none of the rest renders any contents and thus, is not fit for my use case. It had to be <code>&lt;optgroup&gt;</code>, sadly.</p>\n\n\n\n<p>However, using <code>&lt;optgroup&gt;</code>, even without a <code>label</code> attribute inserts an ugly gap in the select menu, where the label would have gone (<a href=\"https://codepen.io/leaverou/pen/vYxoGpZ\">pen</a>):</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"136\" height=\"204\" src=\"https://lea.verou.me/wp-content/uploads/2021/06/image-3.png\" alt=\"\" class=\"wp-image-3370\"/><figcaption>(There were also gaps on the left of the labels, but we applied some CSS to remove them)</figcaption></figure>\n\n\n\n<p>There appears to be <a href=\"https://www.google.com/search?q=remove+optgroup+label+site:stackoverflow.com\">no way to remove</a> said gap.</p>\n\n\n\n<p>Ideally, this should be fixed on the user agent level: Browsers should not generate a label box when there is no label attribute. However, I needed a solution now, not in the far future. There was no pseudo-element for targeting the generated label. The only solution that worked was along these lines (<a href=\"optgroup:not([label]) {\n\tdisplay: contents;\n\tfont-size: 0;\n}\n\noptgroup:not([label])> * {\n\tfont-size: 13.333px;\n}&#8221;>pen</a>):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>optgroup:not(&#91;label]) {\n\tfont-size: 0;\n}\n\noptgroup:not(&#91;label]) &gt; * {\n\tfont-size: 13.333px;\n}</code></pre>\n\n\n\n<p>The weird <code>13.333px</code> value was taken directly from the Chrome UA stylesheet (as inspected). However, it is obviously flimsy, and will break any additional author styling. It would be far better if we could say &#8220;give me whatever <code>1em</code> is on the grandparent&#8221;. Can we?</p>\n\n\n\n<h2>The solution</h2>\n\n\n\n<p>What if we could use custom properties to solve this? Our first attempt might look something like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>select {\n\t--em: 1em;\n}\n\noptgroup:not(&#91;label]) {\n\tfont-size: 0;\n}\n\noptgroup:not(&#91;label]) &gt; * {\n\tfont-size: var(--em);\n}</code></pre>\n\n\n\n<p>However this is <a href=\"https://codepen.io/leaverou/pen/dyvxXyV\">horribly broken</a>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"108\" height=\"206\" src=\"https://lea.verou.me/wp-content/uploads/2021/06/image-1.png\" alt=\"\" class=\"wp-image-3368\"/><figcaption>All the options have disappeared!!</figcaption></figure>\n\n\n\n<p>What on Earth happened here?!</p>\n\n\n\n<p>By default, custom properties are just containers for CSS tokens.When they inherit, they inherit as specified, with only any <code>var()</code> references substituted and no other processing. This means that the <code>1em</code> we specified inherits as the <code>1em</code> <em>token</em>, not as whatever absolute length it happens to resolve to on <code>select</code>. It only becomes an absolute length at the point of usage, and this is whatever <code>1em</code> would be there, i.e. <code>0</code>. So all our options disappeared because we set their font size to <code>0</code>!</p>\n\n\n\n<p>If only we could make <code>1em</code> resolve to an actual absolute length at the point of declaration and inherit as that, just like native properties that accept lengths?</p>\n\n\n\n<p>Well, you‚Äôre in luck, because today we can!</p>\n\n\n\n<p>You may be familiar with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@property\"><code>@property</code> rule</a> as &#8220;the thing that allows us to animate custom properties&#8221;. However, it is useful for so much more than that. </p>\n\n\n\n<p>If we register our custom property as a <code>&lt;length&gt;</code>, this makes the <code>1em</code> resolve on the element we specified it on, and inherit as an absolute length! <a href=\"https://codepen.io/leaverou/pen/KKWOMMK\">Let‚Äôs try this</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@property --em {\n\tsyntax: \"&lt;length&gt;\";\n\tinitial-value: 0;\n\tinherits: true;\n}\n\nselect {\n\t--em: 1em;\n}\n\noptgroup:not(&#91;label]) {\n\tdisplay: contents;\n\tfont-size: 0;\n}\n\noptgroup:not(&#91;label]) &gt; * {\n\tfont-size: var(--em);\n}\n\n/* Remove Chrome gap */\n:where(optgroup:not(&#91;label]) &gt; option)::before {\n\tcontent: \"\";\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKWOMMK\" src=\"//codepen.io/anon/embed/KKWOMMK?height=250&amp;theme-id=1&amp;slug-hash=KKWOMMK&amp;default-tab=css,result\" height=\"250\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKWOMMK\" title=\"CodePen Embed KKWOMMK\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And here is the same technique used for the speech bubble:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XWMZewB\" src=\"//codepen.io/anon/embed/XWMZewB?height=250&amp;theme-id=1&amp;slug-hash=XWMZewB&amp;default-tab=result\" height=\"250\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XWMZewB\" title=\"CodePen Embed XWMZewB\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h2>Fallback</h2>\n\n\n\n<p>This is all fine and dandy for the <a href=\"https://caniuse.com/mdn-css_at-rules_property\">68%  (as of June 2021) of users that are using a browser that supports <code>@property</code></a>, but what happens in the remaining 32%? It&#8217;s not pretty:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"108\" height=\"206\" src=\"https://lea.verou.me/wp-content/uploads/2021/06/image-1.png\" alt=\"\" class=\"wp-image-3368\"/></figure>\n\n\n\n<p>We get the default behavior of an unregistered property, and thus none of our options show up! This is <em>bad</em>.</p>\n\n\n\n<p>We should clearly either provide a fallback or conditionally apply these rules only in browsers that support <code>@property</code>.</p>\n\n\n\n<p>We can easily detect <code>@property</code> support in JS and add a class to our root element:</p>\n\n\n\n<pre class=\"wp-block-code language-javascript\"><code>if (window.CSSPropertyRule) {\n\tlet root = document.documentElement;\n\troot.classList.add(\"supports-atproperty\");\n}</code></pre>\n\n\n\n<p>Then we can just use the descendant combinator:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>:root.supports-atproperty optgroup:not(&#91;label]) {\n\tfont-size: 0;\n}</code></pre>\n\n\n\n<h2>CSS-only fallback for @property</h2>\n\n\n\n<p>While the JS fallback works great, I couldn&#8217;t help but wonder if there&#8217;s a CSS only way.</p>\n\n\n\n<p>My first thought was to use <code>@supports</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@supports (--em: flugelhorn) {\n\t/* Does not support @property */\n}</code></pre>\n\n\n\n<p>The theory was, if a browser supported any value to be assigned on a property registered as a <code>&lt;length&gt;</code>, surely it does not support property registration.</p>\n\n\n\n<p>It turns out, registered properties do not validate their syntax at parse time, and thus are always valid for <code>@supports</code>. This is <a href=\"https://drafts.css-houdini.org/css-properties-values-api-1/#parsing-custom-properties\">explained in the spec</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>When parsing a page‚Äôs CSS, UAs commonly make a number of optimizations to help with both speed and memory.</p><p>One of those optimizations is that they only store the properties that will actually have an effect; they throw away invalid properties, and if you write the same property multiple times in a single declaration block, all but the last valid one will be thrown away. (This is an important part of CSS‚Äôs error-recovery and forward-compatibility behavior.)</p><p>This works fine if the syntax of a property never changes over the lifetime of a page. If a custom property is registered, however, it can change its syntax, so that a property that was previously invalid suddenly becomes valid.</p><p>The only ways to handle this are to either store every declaration, even those that were initially invalid (increasing the memory cost of pages), or to re-parse the entire page‚Äôs CSS with the new syntax rules (increasing the processing cost of registering a custom property). Neither of these are very desirable.</p><p>Further, UA-defined properties have their syntax determined by the version of the UA the user is viewing the page with; this is out of the page author‚Äôs control, which is the entire reason for CSS‚Äôs error-recovery behavior and the practice of writing multiple declarations for varying levels of support. A custom property, on the other hand, has its syntax controlled by the page author, according to whatever stylesheet or script they‚Äôve included in the page; there‚Äôs no unpredictability to be managed. Throwing away syntax-violating custom properties would thus only be, at best, a convenience for the page author, not a necessity like for UA-defined properties.</p></blockquote>\n\n\n\n<p>Ok this is great, and totally makes sense, but what can we do? How can we provide a fallback?</p>\n\n\n\n<p>It turns out that there is a way, but brace yourself, as it‚Äôs quite hacky. I‚Äôm only going to describe it for entertainment purposes, but I think for real usage, the JS way is far more straightforward, and it&#8217;s the one I&#8217;ll be using myself.</p>\n\n\n\n<p>The main idea is to take advantage of the <code>var()</code> fallback argument of a <em>second</em> registered variable, that is registered as non-inheriting. We set it to the fallback value on an ancestor. If <code>@property</code> is supported, then this property will not be defined on the element of interest, since it does not inherit. Any other properties referencing it will be <a href=\"https://drafts.csswg.org/css-variables/#invalid-at-computed-value-time\">invalid at computed value time</a>, and thus any <code>var()</code> fallbacks will apply. If <code>@property</code> is <em>not</em> supported, the property will inherit as normal and thus using it becomes our fallback. </p>\n\n\n\n<p>Here is an <a href=\"https://codepen.io/leaverou/pen/ExWqyzQ\">example</a> with a simple green/red test to illustrate this concept:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@property --test {\n\tsyntax: \"*\";\n\tinherits: false;\n}\n\nhtml {\n\t--test: red;\n}\n\nbody {\n\tbackground: var(--test, green);\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ExWqyzQ\" src=\"//codepen.io/anon/embed/ExWqyzQ?height=250&amp;theme-id=1&amp;slug-hash=ExWqyzQ&amp;default-tab=result\" height=\"250\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ExWqyzQ\" title=\"CodePen Embed ExWqyzQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And here is how we can use the same concept to provide a fallback for the <code>&lt;select&gt;</code> example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@property --test {\n\tsyntax: \"*\";\n\tinherits: false;\n}\n\nselect {\n\t--test: 1em; /* fallback */\n\t--em: 1em;\n}\n\noptgroup:not(&#91;label]) {\n\tfont-size: var(--test, 0);\n}</code></pre>\n\n\n\n<p>Here is the <a href=\"https://codepen.io/leaverou/pen/eYvqdYG\">finished demo</a>.</p>",
      "content_text": "If you‚Äôve been writing CSS for any length of time, you‚Äôre probably familiar with the em unit, and possibly the other type-relative units. We are going to refer to em for the rest of this post, but anything described works for all type-relative units.\n\n\n\nAs you well know, em resolves to the current font size on all properties except font-size, where it resolves to the parent font size. It can be quite useful for making scalable components that adapt to their context size.\n\n\n\nHowever, I have often come across cases where you actually need to ‚Äúcircumvent‚Äù one level of this. Either you need to set font-size to the grandparent font size instead of the parent one, or you need to set other properties to the parent font size, not the current one. \n\n\n\n\n\n\n\nIf you‚Äôre already familiar with the problem and just want the solution, skip ahead. The next few paragraphs are for those thinking ‚Äúbut when would you ever need this?‚Äù\n\n\n\nSometimes, there are workarounds, and it‚Äôs just a matter of keeping DRY. For example, take a look at this speech bubble:\n\n\n\nCodePen Embed Fallback\n\n\n\nNote this in the CSS:\n\n\n\n/* This needs to change every time the font-size changes: */\ntop: calc(100% + 1em / 2.5); \nfont-size: 250%;\n\n\n\nNote that every time we change the font size we also need to adjust top. And ok, when they‚Äôre both defined in the same rule we can just delegate this to a variable:\n\n\n\n--m: 2.5;\ntop: calc(100% + 1em / var(--m)); \nfont-size: calc(var(--m) * 100%);\n\n\n\nHowever, in the general case the font size may be defined elsewhere. For example, a third party author may want to override the emoji size, they shouldn‚Äôt also need to override anything else, our CSS should just adapt.\n\n\n\nIn other cases, it is simply not possible to multiply and divide by a factor and restore the ancestor font size. Most notably, when the current (or parent) font-size is set to 0 and we need to recover what it was one level up.\n\n\n\nI‚Äôve come across many instances of this in the 16 years I‚Äôve been writing CSS. Admittedly, there were way more use cases pre-Flexbox and friends, but it‚Äôs still useful, as we will see. In fact, it was the latest one that prompted this post.\n\n\n\nI needed to wrap <option> elements by a generic container for a library I‚Äôm working on. Let me stop you there, no, I could not just set classes on the options, I needed an actual container in the DOM.\n\n\n\nAs you can see in this pen, neither <div> nor custom elements work here: when included in the markup they are just discarded by the parser, and when inserted via script they are in the DOM, but the options they contain are not visible. The only elements that work inside a <select> are: <option>, <optgroup>, and script-supporting elements (currently <template> and <script>). Except <optgroup>, none of the rest renders any contents and thus, is not fit for my use case. It had to be <optgroup>, sadly.\n\n\n\nHowever, using <optgroup>, even without a label attribute inserts an ugly gap in the select menu, where the label would have gone (pen):\n\n\n\n(There were also gaps on the left of the labels, but we applied some CSS to remove them)\n\n\n\nThere appears to be no way to remove said gap.\n\n\n\nIdeally, this should be fixed on the user agent level: Browsers should not generate a label box when there is no label attribute. However, I needed a solution now, not in the far future. There was no pseudo-element for targeting the generated label. The only solution that worked was along these lines (optgroup:not([label]) {\n\tfont-size: 0;\n}\n\noptgroup:not([label]) > * {\n\tfont-size: 13.333px;\n}\n\n\n\nThe weird 13.333px value was taken directly from the Chrome UA stylesheet (as inspected). However, it is obviously flimsy, and will break any additional author styling. It would be far better if we could say ‚Äúgive me whatever 1em is on the grandparent‚Äù. Can we?\n\n\n\nThe solution\n\n\n\nWhat if we could use custom properties to solve this? Our first attempt might look something like this:\n\n\n\nselect {\n\t--em: 1em;\n}\n\noptgroup:not([label]) {\n\tfont-size: 0;\n}\n\noptgroup:not([label]) > * {\n\tfont-size: var(--em);\n}\n\n\n\nHowever this is horribly broken:\n\n\n\nAll the options have disappeared!!\n\n\n\nWhat on Earth happened here?!\n\n\n\nBy default, custom properties are just containers for CSS tokens.When they inherit, they inherit as specified, with only any var() references substituted and no other processing. This means that the 1em we specified inherits as the 1em token, not as whatever absolute length it happens to resolve to on select. It only becomes an absolute length at the point of usage, and this is whatever 1em would be there, i.e. 0. So all our options disappeared because we set their font size to 0!\n\n\n\nIf only we could make 1em resolve to an actual absolute length at the point of declaration and inherit as that, just like native properties that accept lengths?\n\n\n\nWell, you‚Äôre in luck, because today we can!\n\n\n\nYou may be familiar with the @property rule as ‚Äúthe thing that allows us to animate custom properties‚Äù. However, it is useful for so much more than that. \n\n\n\nIf we register our custom property as a <length>, this makes the 1em resolve on the element we specified it on, and inherit as an absolute length! Let‚Äôs try this:\n\n\n\n@property --em {\n\tsyntax: \"<length>\";\n\tinitial-value: 0;\n\tinherits: true;\n}\n\nselect {\n\t--em: 1em;\n}\n\noptgroup:not([label]) {\n\tdisplay: contents;\n\tfont-size: 0;\n}\n\noptgroup:not([label]) > * {\n\tfont-size: var(--em);\n}\n\n/* Remove Chrome gap */\n:where(optgroup:not([label]) > option)::before {\n\tcontent: \"\";\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nAnd here is the same technique used for the speech bubble:\n\n\n\nCodePen Embed Fallback\n\n\n\nFallback\n\n\n\nThis is all fine and dandy for the 68%  (as of June 2021) of users that are using a browser that supports @property, but what happens in the remaining 32%? It‚Äôs not pretty:\n\n\n\n\n\n\n\nWe get the default behavior of an unregistered property, and thus none of our options show up! This is bad.\n\n\n\nWe should clearly either provide a fallback or conditionally apply these rules only in browsers that support @property.\n\n\n\nWe can easily detect @property support in JS and add a class to our root element:\n\n\n\nif (window.CSSPropertyRule) {\n\tlet root = document.documentElement;\n\troot.classList.add(\"supports-atproperty\");\n}\n\n\n\nThen we can just use the descendant combinator:\n\n\n\n:root.supports-atproperty optgroup:not([label]) {\n\tfont-size: 0;\n}\n\n\n\nCSS-only fallback for @property\n\n\n\nWhile the JS fallback works great, I couldn‚Äôt help but wonder if there‚Äôs a CSS only way.\n\n\n\nMy first thought was to use @supports:\n\n\n\n@supports (--em: flugelhorn) {\n\t/* Does not support @property */\n}\n\n\n\nThe theory was, if a browser supported any value to be assigned on a property registered as a <length>, surely it does not support property registration.\n\n\n\nIt turns out, registered properties do not validate their syntax at parse time, and thus are always valid for @supports. This is explained in the spec:\n\n\n\nWhen parsing a page‚Äôs CSS, UAs commonly make a number of optimizations to help with both speed and memory.One of those optimizations is that they only store the properties that will actually have an effect; they throw away invalid properties, and if you write the same property multiple times in a single declaration block, all but the last valid one will be thrown away. (This is an important part of CSS‚Äôs error-recovery and forward-compatibility behavior.)This works fine if the syntax of a property never changes over the lifetime of a page. If a custom property is registered, however, it can change its syntax, so that a property that was previously invalid suddenly becomes valid.The only ways to handle this are to either store every declaration, even those that were initially invalid (increasing the memory cost of pages), or to re-parse the entire page‚Äôs CSS with the new syntax rules (increasing the processing cost of registering a custom property). Neither of these are very desirable.Further, UA-defined properties have their syntax determined by the version of the UA the user is viewing the page with; this is out of the page author‚Äôs control, which is the entire reason for CSS‚Äôs error-recovery behavior and the practice of writing multiple declarations for varying levels of support. A custom property, on the other hand, has its syntax controlled by the page author, according to whatever stylesheet or script they‚Äôve included in the page; there‚Äôs no unpredictability to be managed. Throwing away syntax-violating custom properties would thus only be, at best, a convenience for the page author, not a necessity like for UA-defined properties.\n\n\n\nOk this is great, and totally makes sense, but what can we do? How can we provide a fallback?\n\n\n\nIt turns out that there is a way, but brace yourself, as it‚Äôs quite hacky. I‚Äôm only going to describe it for entertainment purposes, but I think for real usage, the JS way is far more straightforward, and it‚Äôs the one I‚Äôll be using myself.\n\n\n\nThe main idea is to take advantage of the var() fallback argument of a second registered variable, that is registered as non-inheriting. We set it to the fallback value on an ancestor. If @property is supported, then this property will not be defined on the element of interest, since it does not inherit. Any other properties referencing it will be invalid at computed value time, and thus any var() fallbacks will apply. If @property is not supported, the property will inherit as normal and thus using it becomes our fallback. \n\n\n\nHere is an example with a simple green/red test to illustrate this concept:\n\n\n\n@property --test {\n\tsyntax: \"*\";\n\tinherits: false;\n}\n\nhtml {\n\t--test: red;\n}\n\nbody {\n\tbackground: var(--test, green);\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nAnd here is how we can use the same concept to provide a fallback for the <select> example:\n\n\n\n@property --test {\n\tsyntax: \"*\";\n\tinherits: false;\n}\n\nselect {\n\t--test: 1em; /* fallback */\n\t--em: 1em;\n}\n\noptgroup:not([label]) {\n\tfont-size: var(--test, 0);\n}\n\n\n\nHere is the finished demo.",
      "date_published": "2021-06-24T17:08:50.000Z",
      "date_modified": "2021-06-24T17:08:50.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3357",
      "url": "https://lea.verou.me/2021/05/is-the-current-tab-active/",
      "title": "Is the current tab active?",
      "summary": "Today I ran into an interesting problem. Interesting because it‚Äôs one of those very straightforward, deceptively simple questions, that after a fair amount of digging, does not appear to have a definite answer (though I would love to be wrong!). The problem was to determine if the current tab is active. Yes, as simple as [‚Ä¶]",
      "content_html": "<p>Today I ran into an interesting problem. Interesting because it&#8217;s one of those very straightforward, deceptively simple questions, that after a fair amount of digging, does not appear to have a definite answer (though I would love to be wrong!). </p>\n\n\n\n<p>The problem was to determine <strong>if the current tab is active</strong>. Yes, as simple as that. </p>\n\n\n\n<span id=\"more-3357\"></span>\n\n\n\n<h2>Why? (i.e. my use case)</h2>\n\n\n\n<p>I was working on my slide deck framework, <a href=\"https://github.com/leaverou/inspire.js\" data-type=\"URL\" data-id=\"https://github.com/leaverou/inspire.js\">Inspire.js</a>. There is a <a href=\"https://github.com/LeaVerou/inspire.js/tree/master/plugins/presenter\">presenter mode plugin</a>, which spawns a new window with your slides (&#8220;projector view&#8221;), whereas your current window becomes a &#8220;presenter view&#8221;, with open notes, preview of the next slide, optional progress indicator for time etc.</p>\n\n\n\n<p>However, this plugin was <em>not very good</em>. The two windows are synced, but only if you use presenter view to navigate slides. If you use the projector view to advance slides, the syncing breaks. Why would you use the projector mode? Many reasons, e.g. to interact with a live demo, or even play a video. If you have a live demo heavy presentation, you may even want to mirror your screen and only ever interact with the projector mode, while having the presenter mode on a secondary screen, just to look at.</p>\n\n\n\n<p>The way the plugin worked was that every time the slide changed in the presenter view, it propagated the change in the projector view. To make the syncing bidirectional, it would be good to know if the current window is the active tab, and if so, propagate all slide navigation to the other one, regardless of which one is the projector view and which one is the presenter view.</p>\n\n\n\n<p>And this, my friends, is how I ended up in this rabbit hole.</p>\n\n\n\n<p><em>(Yes, there are other solutions to this particular problem. I could just always propagate regardless and have checks in place to avoid infinite loops. But that&#8217;s beside the point.)</em></p>\n\n\n\n<h2>What about the Visibility API?</h2>\n\n\n\n<p>In most resources around the Web, people were rejoicing about how the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API\">Visibility API</a> makes this problem trivial. &#8220;Just use <code>document.hidden</code>!&#8221; people would gleefully recommend to others. </p>\n\n\n\n<p>Yes, the Visibility API is great, when you want to determine whether the current tab is <em>visible</em>. That is <strong>not</strong> the same as whether it is <em>active</em>.</p>\n\n\n\n<p>You may have two windows side by side, both visible, but only one of them is active. You may even have a window entirely obscuring another window, but you can still tab through to it and make it active. Active and visible are entirely orthogonal states, which are only loosely correlated. </p>\n\n\n\n<p>In my use case, given that both the projector view and presenter view would be visible at all times, this is a no-go that doesn&#8217;t even solve a subset of use cases.</p>\n\n\n\n<h2>What about focus and blur events on window?</h2>\n\n\n\n<p>The other solution that was heavily recommended was using the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/focus_event\">focus</a></code> and <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/blur_event\">blur</a></code> events on <code>window</code>. This does get us partway there. Indeed, when the current tab <em>becomes</em> active, the <code>focus</code> event fires. When another tab becomes active, the <code>blur</code> event fires.</p>\n\n\n\n<p>Notice the emphasis on &#8220;becomes&#8221;. <strong>Events notify us about a state change, but they are no help for determining the <em>current state</em>.</strong> If we get a <code>focus</code> or <code>blur</code> event, we know whether our tab is active or not, but if we don&#8217;t get any, we simply don&#8217;t know. A tab can start off as active or not, and there is no way to tell. </p>\n\n\n\n<p><em>How can a tab possibly start off as inactive</em>? One easy way to reproduce this is to hit Return on the address bar and immediately switch to another window. The tab you just loaded just starts off as inactive and no <code>blur</code> event is ever fired.</p>\n\n\n\n<h2>What about document.activeElement?</h2>\n\n\n\n<p>The <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement\">document.activeElement</a></code> property will always return the currently focused element in a page. Can we use it to determine if a window currently has focus? Nope, cause that would be too easy.</p>\n\n\n\n<p>Run <code>setTimeout(() =&gt; console.log(document.activeElement), 2000)</code> in the console and quickly switch windows. Return &gt;2 seconds later and see what was logged. It&#8217;s the <code>&lt;body&gt;</code> element! </p>\n\n\n\n<p>Wait, maybe we can assume that if the currently focused element is a <code>&lt;body&gt;</code> element then the current window is inactive? Nope, you get the same result in an active tab, if you simply haven&#8217;t focused anywhere.</p>\n\n\n\n<h2>What about document.hasFocus()?</h2>\n\n\n\n<p>When I discovered <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus\">document.hasFocus()</a></code> I thought that was the end of it. Surely, this is exactly what I need?!? <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#dom-document-hasfocus\">The spec</a> made it sound so promising. I quickly switched to my <a href=\"about:blank\">about:blank</a> tab that I use for trying things out, and ran it in the console.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt; document.hasFocus()\n&lt; false</code></pre>\n\n\n\n<p><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f926-1f3fd-200d-2640-fe0f.png\" alt=\"ü§¶üèΩ‚Äç‚ôÄÔ∏è\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f926-1f3fd-200d-2640-fe0f.png\" alt=\"ü§¶üèΩ‚Äç‚ôÄÔ∏è\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f926-1f3fd-200d-2640-fe0f.png\" alt=\"ü§¶üèΩ‚Äç‚ôÄÔ∏è\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<p>Neeeext!</p>\n\n\n\n<p><strong>Edit:</strong> <code>document.hasFocus()</code> may be the solution after all! As <a href=\"https://twitter.com/_AlK/status/1396800328088133633\">pointed</a> <a href=\"https://twitter.com/outofroutine/status/1396800341648318472\">out</a> <a href=\"https://twitter.com/jaffathecake/status/1396802975151054849\">to me</a> on Twitter, the problem above was that unlike I did with <code>document.activeElement</code>, I ran this synchronously in the console and it returned <code>false</code> because the console as the active window. An asynchronous log while I make sure the actual window is focused would do the trick.</p>\n\n\n\n<h2>The anti-climactic conclusion</h2>\n\n\n\n<p><strong>Edit:</strong> I left this section in because the moral is still valid for other cases, but it looks like <code>document.hasFocus()</code> was the solution after all.</p>\n\n\n\n<p>If you&#8217;re expecting this to end with a revelation of an amazing API that I had originally missed and addresses this, you will be disappointed. If there is such a silver bullet, I did not find it. Maybe someone will point it out to me after publishing this blog post, in which case I will update it so that you don‚Äôt struggle like I did.</p>\n\n\n\n<p>But in my case, I simply gave up trying to find a general solution. Instead, I took advantage of the knowledge my code had in this specific situation: I knew what the other window was, and I primarily cared which one of the two (if any) had focus. </p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Track whether presenter or projector is the active window\naddEventListener(\"focus\", _ =&gt; {\n\tInspire.isActive = true;\n\n\t// If this window is focused, no other can be\n\tif (Inspire.projector) {\n\t\tInspire.projector.Inspire.isActive = false;\n\t}\n\telse if (Inspire.presenter) {\n\t\tInspire.presenter.Inspire.isActive = false;\n\t}\n});\n\naddEventListener(\"blur\", _ =&gt; {\n\tInspire.isActive = false;\n\n\t// If this window is not focused,\n\t// we cannot make assumptions about which one is.\n});</code></pre>\n\n\n\n<p>Given that the presenter view calls <code>window.focus()</code> after opening the projector view, in practice this was pretty bulletproof.</p>\n\n\n\n<p>What&#8217;s the moral of this story?</p>\n\n\n\n<ul><li>Sometimes simple questions do not have a good answer when it comes to the Web Platform</li><li>If your code cannot answer the general question correctly in all cases, maybe it can answer a specific one that solves your particular problem, even if that leads to a less elegant solution.</li></ul>\n\n\n\n<p>That‚Äôs it folks. </p>",
      "content_text": "Today I ran into an interesting problem. Interesting because it‚Äôs one of those very straightforward, deceptively simple questions, that after a fair amount of digging, does not appear to have a definite answer (though I would love to be wrong!). \n\n\n\nThe problem was to determine if the current tab is active. Yes, as simple as that. \n\n\n\n\n\n\n\nWhy? (i.e. my use case)\n\n\n\nI was working on my slide deck framework, Inspire.js. There is a presenter mode plugin, which spawns a new window with your slides (‚Äúprojector view‚Äù), whereas your current window becomes a ‚Äúpresenter view‚Äù, with open notes, preview of the next slide, optional progress indicator for time etc.\n\n\n\nHowever, this plugin was not very good. The two windows are synced, but only if you use presenter view to navigate slides. If you use the projector view to advance slides, the syncing breaks. Why would you use the projector mode? Many reasons, e.g. to interact with a live demo, or even play a video. If you have a live demo heavy presentation, you may even want to mirror your screen and only ever interact with the projector mode, while having the presenter mode on a secondary screen, just to look at.\n\n\n\nThe way the plugin worked was that every time the slide changed in the presenter view, it propagated the change in the projector view. To make the syncing bidirectional, it would be good to know if the current window is the active tab, and if so, propagate all slide navigation to the other one, regardless of which one is the projector view and which one is the presenter view.\n\n\n\nAnd this, my friends, is how I ended up in this rabbit hole.\n\n\n\n(Yes, there are other solutions to this particular problem. I could just always propagate regardless and have checks in place to avoid infinite loops. But that‚Äôs beside the point.)\n\n\n\nWhat about the Visibility API?\n\n\n\nIn most resources around the Web, people were rejoicing about how the Visibility API makes this problem trivial. ‚ÄúJust use document.hidden!‚Äù people would gleefully recommend to others. \n\n\n\nYes, the Visibility API is great, when you want to determine whether the current tab is visible. That is not the same as whether it is active.\n\n\n\nYou may have two windows side by side, both visible, but only one of them is active. You may even have a window entirely obscuring another window, but you can still tab through to it and make it active. Active and visible are entirely orthogonal states, which are only loosely correlated. \n\n\n\nIn my use case, given that both the projector view and presenter view would be visible at all times, this is a no-go that doesn‚Äôt even solve a subset of use cases.\n\n\n\nWhat about focus and blur events on window?\n\n\n\nThe other solution that was heavily recommended was using the focus and blur events on window. This does get us partway there. Indeed, when the current tab becomes active, the focus event fires. When another tab becomes active, the blur event fires.\n\n\n\nNotice the emphasis on ‚Äúbecomes‚Äù. Events notify us about a state change, but they are no help for determining the current state. If we get a focus or blur event, we know whether our tab is active or not, but if we don‚Äôt get any, we simply don‚Äôt know. A tab can start off as active or not, and there is no way to tell. \n\n\n\nHow can a tab possibly start off as inactive? One easy way to reproduce this is to hit Return on the address bar and immediately switch to another window. The tab you just loaded just starts off as inactive and no blur event is ever fired.\n\n\n\nWhat about document.activeElement?\n\n\n\nThe document.activeElement property will always return the currently focused element in a page. Can we use it to determine if a window currently has focus? Nope, cause that would be too easy.\n\n\n\nRun setTimeout(() => console.log(document.activeElement), 2000) in the console and quickly switch windows. Return >2 seconds later and see what was logged. It‚Äôs the <body> element! \n\n\n\nWait, maybe we can assume that if the currently focused element is a <body> element then the current window is inactive? Nope, you get the same result in an active tab, if you simply haven‚Äôt focused anywhere.\n\n\n\nWhat about document.hasFocus()?\n\n\n\nWhen I discovered document.hasFocus() I thought that was the end of it. Surely, this is exactly what I need?!? The spec made it sound so promising. I quickly switched to my about:blank tab that I use for trying things out, and ran it in the console.\n\n\n\n> document.hasFocus()\n< false\n\n\n\n\n\n\n\nNeeeext!\n\n\n\nEdit: document.hasFocus() may be the solution after all! As pointed out to me on Twitter, the problem above was that unlike I did with document.activeElement, I ran this synchronously in the console and it returned false because the console as the active window. An asynchronous log while I make sure the actual window is focused would do the trick.\n\n\n\nThe anti-climactic conclusion\n\n\n\nEdit: I left this section in because the moral is still valid for other cases, but it looks like document.hasFocus() was the solution after all.\n\n\n\nIf you‚Äôre expecting this to end with a revelation of an amazing API that I had originally missed and addresses this, you will be disappointed. If there is such a silver bullet, I did not find it. Maybe someone will point it out to me after publishing this blog post, in which case I will update it so that you don‚Äôt struggle like I did.\n\n\n\nBut in my case, I simply gave up trying to find a general solution. Instead, I took advantage of the knowledge my code had in this specific situation: I knew what the other window was, and I primarily cared which one of the two (if any) had focus. \n\n\n\n// Track whether presenter or projector is the active window\naddEventListener(\"focus\", _ => {\n\tInspire.isActive = true;\n\n\t// If this window is focused, no other can be\n\tif (Inspire.projector) {\n\t\tInspire.projector.Inspire.isActive = false;\n\t}\n\telse if (Inspire.presenter) {\n\t\tInspire.presenter.Inspire.isActive = false;\n\t}\n});\n\naddEventListener(\"blur\", _ => {\n\tInspire.isActive = false;\n\n\t// If this window is not focused,\n\t// we cannot make assumptions about which one is.\n});\n\n\n\nGiven that the presenter view calls window.focus() after opening the projector view, in practice this was pretty bulletproof.\n\n\n\nWhat‚Äôs the moral of this story?\n\n\n\nSometimes simple questions do not have a good answer when it comes to the Web PlatformIf your code cannot answer the general question correctly in all cases, maybe it can answer a specific one that solves your particular problem, even if that leads to a less elegant solution.\n\n\n\nThat‚Äôs it folks. ",
      "date_published": "2021-05-24T11:49:17.000Z",
      "date_modified": "2021-05-24T11:49:17.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3347",
      "url": "https://lea.verou.me/2021/05/82-of-developers-get-this-3-line-css-quiz-wrong/",
      "title": "82% of developers get this 3 line CSS quiz wrong",
      "summary": "(I always wanted to do a clickbait title like this and when this chance came along I could not pass it up. üòÖ Sorry!) While putting my ideas into slides for my Dynamic CSS workshop for next week, I was working on a slide explaining how the CSS wide keywords work with custom properties. inherit, [‚Ä¶]",
      "content_html": "<p>(<em>I always wanted to do a clickbait title like this and when this chance came along I could not pass it up. <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f605.png\" alt=\"üòÖ\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> Sorry!</em>)</p>\n\n\n\n<p>While putting my ideas into slides for my <a href=\"https://smashingconf.com/online-workshops/workshops/lea-verou\">Dynamic CSS workshop</a> for next week, I was working on a slide explaining how the CSS wide keywords work with custom properties. <code>inherit</code>, <code>initial</code>, <code>unset</code> I had used numerous times and knew well. But what about <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/revert\">revert</a></code>? How did that work? I had an idea, but quickly coded up a demo to try it out. </p>\n\n\n\n<p>The code was:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>:root {\n    --accent-color: skyblue;\n}\n\ndiv {\n    --accent-color: revert; \n    background: var(--accent-color, orange);\n}</code></pre>\n\n\n\n<p>Phew, I was correct, but the amount of uncertainty I had before seeing the result tipped me that I might be on to something.</p>\n\n\n\n<p>Before you read on, take a moment to think about what you would vote. Warning: Spoilers ahead!</p>\n\n\n\n<span id=\"more-3347\"></span>\n\n\n\n<p><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f914.png\" alt=\"ü§î\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<p><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f914.png\" alt=\"ü§î\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<p><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f914.png\" alt=\"ü§î\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<p><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f914.png\" alt=\"ü§î\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<p>So I posted a quiz on Twitter:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Thursday CSS quiz! <br>Without trying this out, what background do you expect &lt;div&gt; to have?<br><br>:root {<br>&#8211;accent-color: skyblue;<br>}<br><br>div {<br> &#8211;accent-color: revert; <br>background: var(&#8211;accent-color, orange);<br>}</p>&mdash; Lea Verou (@LeaVerou) <a href=\"https://twitter.com/LeaVerou/status/1395379573190168576?ref_src=twsrc%5Etfw\">May 20, 2021</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>These were the results after the 24 hours it ran for:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1174\" height=\"320\" src=\"https://lea.verou.me/wp-content/uploads/2021/05/image.png\" alt=\"\" class=\"wp-image-3349\"/></figure>\n\n\n\n<p><code>orange</code> was the clear winner, and the actual correct answer, <code>skyblue</code> only got 18.1%, nearly the same as <code>transparent</code>!</p>\n\n\n\n<p>If you got it wrong, you‚Äôre in <strong>very</strong> good company: not only did 82% of poll respondents get it wrong as well, but even the editor of the <a href=\"https://drafts.csswg.org/css-variables/\">CSS Variables spec</a> and co-editor of <a href=\"https://drafts.csswg.org/css-cascade/#default\">CSS Cascading and Inheritance</a> (which defines <code>revert</code>), <a href=\"https://xanthir.com/\">Tab Atkins</a>, told me privately that he got it wrong too: he voted for <code>orange</code>! <em>(Yes, I did get his permission to mention this)</em></p>\n\n\n\n<p>So what actually happens? Why do we get <code>skyblue</code>? I will try to explain as best as I can.</p>\n\n\n\n<p>Let&#8217;s start by what <code>revert</code> does: It reverts the cascaded value of the property from its current value to the value the property <em>would have had</em> if no changes had been made by the current style origin to the current element.</p>\n\n\n\n<p>This means it cancels out any author styles, and resets back to whatever value the property would have from the user stylesheet and UA stylesheet. Assuming there is no <code>--accent-color</code> declaration in the user stylesheet, and of course UA stylesheets don&#8217;t set custom properties, then that means the property doesn‚Äôt have a value.</p>\n\n\n\n<p>Since custom properties are inherited properties (unless they are <a href=\"https://drafts.css-houdini.org/css-properties-values-api-1/#registered-custom-property\">registered</a> with <code>inherits: false</code>, but this one is not), this means the inherited value trickles in, which is ‚Äî you guessed it ‚Äî <code>skyblue</code>. You can see for yourself in <a href=\"https://codepen.io/leaverou/pen/zYZZpaY?editors=1100\">this codepen</a>.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYZZpaY\" src=\"//codepen.io/anon/embed/zYZZpaY?height=250&amp;theme-id=1&amp;slug-hash=zYZZpaY&amp;default-tab=result\" height=\"250\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYZZpaY\" title=\"CodePen Embed zYZZpaY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>What if our property were registered as non-inheriting? Would it then be <code>orange</code>? Nice try, but no. When we register a custom property, it is mandatory to provide an initial value. This means that the property always resolves to a value, even <code>--accent-color: initial</code> does not trigger the fallback anymore. You can see this for yourself in <a href=\"https://codepen.io/leaverou/pen/qBrrpKZ?editors=1100\">this codepen</a> (<a href=\"https://caniuse.com/mdn-css_at-rules_property\">Chrome only as of May 2021</a>).</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBrrpKZ\" src=\"//codepen.io/anon/embed/qBrrpKZ?height=250&amp;theme-id=1&amp;slug-hash=qBrrpKZ&amp;default-tab=result\" height=\"250\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBrrpKZ\" title=\"CodePen Embed qBrrpKZ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p><em>Liked this? Then you will love <a href=\"https://smashingconf.com/online-workshops/workshops/lea-verou\">the workshop</a>! There are <a href=\"https://smashingconf.com/online-workshops/workshops/lea-verou\">still a few tickets left</a>!</em></p>",
      "content_text": "(I always wanted to do a clickbait title like this and when this chance came along I could not pass it up.  Sorry!)\n\n\n\nWhile putting my ideas into slides for my Dynamic CSS workshop for next week, I was working on a slide explaining how the CSS wide keywords work with custom properties. inherit, initial, unset I had used numerous times and knew well. But what about revert? How did that work? I had an idea, but quickly coded up a demo to try it out. \n\n\n\nThe code was:\n\n\n\n:root {\n    --accent-color: skyblue;\n}\n\ndiv {\n    --accent-color: revert; \n    background: var(--accent-color, orange);\n}\n\n\n\nPhew, I was correct, but the amount of uncertainty I had before seeing the result tipped me that I might be on to something.\n\n\n\nBefore you read on, take a moment to think about what you would vote. Warning: Spoilers ahead!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSo I posted a quiz on Twitter:\n\n\n\n\nThursday CSS quiz! Without trying this out, what background do you expect <div> to have?:root {‚Äìaccent-color: skyblue;}div { ‚Äìaccent-color: revert; background: var(‚Äìaccent-color, orange);}‚Äî Lea Verou (@LeaVerou) May 20, 2021\n\n\n\n\nThese were the results after the 24 hours it ran for:\n\n\n\n\n\n\n\norange was the clear winner, and the actual correct answer, skyblue only got 18.1%, nearly the same as transparent!\n\n\n\nIf you got it wrong, you‚Äôre in very good company: not only did 82% of poll respondents get it wrong as well, but even the editor of the CSS Variables spec and co-editor of CSS Cascading and Inheritance (which defines revert), Tab Atkins, told me privately that he got it wrong too: he voted for orange! (Yes, I did get his permission to mention this)\n\n\n\nSo what actually happens? Why do we get skyblue? I will try to explain as best as I can.\n\n\n\nLet‚Äôs start by what revert does: It reverts the cascaded value of the property from its current value to the value the property would have had if no changes had been made by the current style origin to the current element.\n\n\n\nThis means it cancels out any author styles, and resets back to whatever value the property would have from the user stylesheet and UA stylesheet. Assuming there is no --accent-color declaration in the user stylesheet, and of course UA stylesheets don‚Äôt set custom properties, then that means the property doesn‚Äôt have a value.\n\n\n\nSince custom properties are inherited properties (unless they are registered with inherits: false, but this one is not), this means the inherited value trickles in, which is ‚Äî you guessed it ‚Äî skyblue. You can see for yourself in this codepen.\n\n\n\nCodePen Embed Fallback\n\n\n\nWhat if our property were registered as non-inheriting? Would it then be orange? Nice try, but no. When we register a custom property, it is mandatory to provide an initial value. This means that the property always resolves to a value, even --accent-color: initial does not trigger the fallback anymore. You can see this for yourself in this codepen (Chrome only as of May 2021).\n\n\n\nCodePen Embed Fallback\n\n\n\nLiked this? Then you will love the workshop! There are still a few tickets left!",
      "date_published": "2021-05-21T15:13:16.000Z",
      "date_modified": "2021-05-21T15:13:16.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3293",
      "url": "https://lea.verou.me/2021/03/inverted-lightness-variables/",
      "title": "Dark mode in 5 minutes, with inverted lightness variables",
      "summary": "By now, you probably know that you can use custom properties for individual color components, to avoid repeating the same color coordinates multiple times throughout your theme. You may even know that you can use the same variable for multiple components, e.g. HSL hue and lightness: Here is a very simple page designed with this [‚Ä¶]",
      "content_html": "<p>By now, you probably know that you can use custom properties for individual color components, to avoid repeating the same color coordinates multiple times throughout your theme. You may even know that you can use the same variable for multiple components, e.g. HSL hue and lightness:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>:root {\n\t--primary-hs: 250 30%;\n}\n\nh1 {\n\tcolor: hsl(var(--primary-hs) 30%);\n}\n\narticle {\n\tbackground: hsl(var(--primary-hs) 90%);\n}\n\narticle h2 {\n\tbackground: hsl(var(--primary-hs) 40%);\n\tcolor: white;\n}</code></pre>\n\n\n\n<p>Here is a <a href=\"https://codepen.io/leaverou/pen/QWdjpEL\">very simple page designed with this technque</a>:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWdjpEL\" src=\"//codepen.io/anon/embed/QWdjpEL?height=500&amp;theme-id=1&amp;slug-hash=QWdjpEL&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWdjpEL\" title=\"CodePen Embed QWdjpEL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Unlike preprocessor variables, you could even locally override the variable, <a href=\"https://codepen.io/leaverou/pen/rNjOypm\">to have blocks with a different accent color</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>:root {\n\t--primary-hs: 250 30%;\n\t--secondary-hs: 190 40%;\n}\n\narticle {\n\tbackground: hsl(var(--primary-hs) 90%);\n}\n\narticle.alt {\n\t--primary-hs: var(--secondary-hs);\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNjOypm\" src=\"//codepen.io/anon/embed/rNjOypm?height=500&amp;theme-id=1&amp;slug-hash=rNjOypm&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNjOypm\" title=\"CodePen Embed rNjOypm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This is all fine and dandy, until dark mode comes into play. The idea of using custom properties to make it easier to adapt a theme to dark mode is not new. However, <a href=\"https://alxgbsn.co.uk/2019/02/08/blog-theming-css-variables/\">in</a> <a href=\"https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/\">every</a> <a href=\"https://dev.to/ananyaneogi/create-a-dark-light-mode-switch-with-css-variables-34l8\">article</a> <a href=\"https://css-irl.info/quick-and-easy-dark-mode-with-css-custom-properties/\">I</a> <a href=\"https://piccalil.li/tutorial/create-a-user-controlled-dark-or-light-mode\">have</a> <a href=\"https://www.digitalocean.com/community/tutorials/css-theming-custom-properties\">seen</a>, the strategy suggested is to create a bunch of custom properties, one for each color, and override them in a media query.</p>\n\n\n\n<p>This is a fine approach, and you&#8217;ll likely want to do that for at least part of your colors eventually. However, even in the most disciplined of designs, not every color is a CSS variable. You often have colors declared inline, especially grays (e.g. the footer color in our example). This means that adding a dark mode is taxing enough that you may put it off for later, especially on side projects.</p>\n\n\n\n<p>The trick I&#8217;m going to show you will make anyone who knows enough about color cringe (sorry Chris!) but it does help you create a dark mode that <em>works</em> in minutes. It won&#8217;t be great, and you should eventually tweak it to create a proper dark mode (also <a href=\"https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/\">dark mode is not just about swapping colors</a>) but it&#8217;s better than nothing and can serve as a base.</p>\n\n\n\n<span id=\"more-3293\"></span>\n\n\n\n<p>The basic idea is to use custom properties for the <em>lightness</em> of colors instead of the entire color. Then, in dark mode, you override these variables with <code>100% - lightness</code>. This generally produces light colors for dark colors, medium colors for medium colors, and dark colors for light colors, and still allows you to define colors inline, instead of forcing you to use a variable for every single color. This is what the code would look like for our example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>root {\n\t--primary-hs: 250 30%;\n\t--secondary-hs: 190 40%;\n\n\t--l-0: 0%;\n\t--l-30: 30%;\n\t--l-40: 40%;\n\t--l-50: 50%;\n\t--l-90: 90%;\n\t--l-100: 100%;\n}\n\n@media (prefers-color-scheme: dark) {\n\t:root {\n\t\t--l-0: 100%;\n\t\t--l-30: 70%;\n\t\t--l-40: 60%;\n\t\t--l-90: 10%;\n\t\t--l-100: 0%;\n\t}\n}\n\n\nbody {\n\tbackground: hsl(0 0% var(--l-100));\n\tcolor: hsl(0 0% var(--l-0));\n}\n\nh1 {\n\tcolor: hsl(var(--primary-hs) var(--l-30));\n}\n\narticle {\n\tbackground: hsl(var(--primary-hs) var(--l-90));\n}\n\narticle h2 {\n\tbackground: hsl(var(--primary-hs) 40%);\n\tcolor: white;\n}\n\nfooter {\n\tcolor: hsl(0 0% var(--l-40));\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYgJyav\" src=\"//codepen.io/anon/embed/eYgJyav?height=500&amp;theme-id=1&amp;slug-hash=eYgJyav&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYgJyav\" title=\"CodePen Embed eYgJyav\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The result looks like this in light &amp; dark mode:</p>\n\n\n\n<div class=\"wp-container-4 wp-block-columns\">\n<div class=\"wp-container-3 wp-block-column\" style=\"flex-basis:100%\">\n<figure class=\"wp-container-2 wp-block-gallery-1 wp-block-gallery columns-2 is-cropped\"><ul class=\"blocks-gallery-grid\"><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" width=\"1548\" height=\"1164\" src=\"https://lea.verou.me/wp-content/uploads/2021/03/hsl-normal.png\" alt=\"\" data-id=\"3316\" data-full-url=\"https://lea.verou.me/wp-content/uploads/2021/03/hsl-normal.png\" data-link=\"https://lea.verou.me/hsl-normal/\" class=\"wp-image-3316\"/></figure></li><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" width=\"1548\" height=\"1164\" src=\"https://lea.verou.me/wp-content/uploads/2021/03/hsl-dm.png\" alt=\"\" data-id=\"3313\" data-full-url=\"https://lea.verou.me/wp-content/uploads/2021/03/hsl-dm.png\" data-link=\"https://lea.verou.me/hsl-dm/\" class=\"wp-image-3313\"/></figure></li></ul><figcaption class=\"blocks-gallery-caption\">The light mode we designed and the auto-generated dark mode, side by side</figcaption></figure>\n</div>\n</div>\n\n\n\n<p>Note that here we indiscriminately replaced all lightnesses with lightness variables. In reality, we don&#8217;t need to be quite as sweeping. For example, the article titles would actually look better and would have better contrast if we just kept them the same:</p>\n\n\n\n<figure class=\"wp-container-6 wp-block-gallery-5 wp-block-gallery columns-2 is-cropped\"><ul class=\"blocks-gallery-grid\"><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" width=\"1548\" height=\"1164\" src=\"https://lea.verou.me/wp-content/uploads/2021/03/hsl-dm.png\" alt=\"\" data-id=\"3313\" data-full-url=\"https://lea.verou.me/wp-content/uploads/2021/03/hsl-dm.png\" data-link=\"https://lea.verou.me/hsl-dm/\" class=\"wp-image-3313\"/></figure></li><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" width=\"1548\" height=\"1164\" src=\"https://lea.verou.me/wp-content/uploads/2021/03/hsl-dm-exception.png\" alt=\"\" data-id=\"3315\" data-full-url=\"https://lea.verou.me/wp-content/uploads/2021/03/hsl-dm-exception.png\" data-link=\"https://lea.verou.me/hsl-dm-exception/\" class=\"wp-image-3315\"/></figure></li></ul><figcaption class=\"blocks-gallery-caption\">Comparison of dark mode with every lightness becoming a variable versus a more refined approach, where we make exceptions as needed (in this case the background and text colors for <code>article &gt; h2</code>).</figcaption></figure>\n\n\n\n<p>These are decisions that are easy to make while you go through your CSS replacing lightness percentages with variables and previewing the result.</p>\n\n\n\n<h2>The problem with HSL</h2>\n\n\n\n<p>But <em>why</em> were the article headers easier to read with their original colors than with inverted lightness? The root cause is that HSL lightness does not actually correspond to what humans perceive as lightness, and the same lightness difference can produce vastly different perceptual differences.</p>\n\n\n\n<p>That is the big problem with this approach: it assumes that HSL lightness actually means something, but <a href=\"https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/#3-lch-lightness-actually-means-something\">as we&#8217;ve discussed before</a>, it does not. Yellow and blue have the same HSL lightness (50%) for crying out loud! Also, you will notice that your dark colors have smaller differences between them than your light colors, because <a href=\"https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/#2-lch-and-lab-is-perceptually-uniform\">HSL is not perceptually uniform</a>. </p>\n\n\n\n<p>Does that mean the technique is not useful for anything other than a placeholder while we develop our <em>real</em> dark mode, if that? </p>\n\n\n\n<p>Well, things are not <em>quite</em> as grim.</p>\n\n\n\n<p>Soon enough, we will get <a href=\"https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/\">LCH colors</a> in the browser. The first browser implementation <a href=\"https://webkit.org/blog/11548/release-notes-for-safari-technology-preview-120/#post-11548:~:text=Added%20support%20for%20lab()%2C%20lch()%2C%20and%20color(lab%20...)%20colors\">just recently shipped in Safari</a> and there is activity in that space among the other browser vendors too.</p>\n\n\n\n<p>LCH is a much better color space for this technique, because its lightness actually means something, not just across different lightnesses of the same color, but across different hues and chromas. </p>\n\n\n\n<p>This next example needs Safari TP 120+ . Compare these two gradients, the top one showing various HSL colors all with lightness 50%, and the bottom various LCH colors, all with lightness 50%. You can even adjust the slider and try different lightnesses:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxgOZQR\" src=\"//codepen.io/anon/embed/xxgOZQR?height=400&amp;theme-id=1&amp;slug-hash=xxgOZQR&amp;default-tab=result\" height=\"400\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxgOZQR\" title=\"CodePen Embed xxgOZQR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here is a screenshot for those of you who don&#8217;t have access to Safari TP 120+:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1610\" height=\"490\" src=\"https://lea.verou.me/wp-content/uploads/2021/03/image.png\" alt=\"\" class=\"wp-image-3324\"/></figure>\n\n\n\n<p>Notice that in HSL, some colors (like yellow and cyan) are much lighter than others. In LCH, all colors at the same lightness are, well, the same lightness.</p>\n\n\n\n<p>Keep in mind that LCH chroma doesn&#8217;t really correspond to HSL lightness, so even though we&#8217;ve set it to the same number, it doesn&#8217;t correspond to the same thing.</p>\n\n\n\n<p>So, how would this technique work with LCH colors? Let&#8217;s try it out!</p>\n\n\n\n<p>I used <a href=\"https://css.land/lch/\">this tool</a> to convert the existing HSL colors to LCH, then tweaked the values manually a bit as the initially converted colors didn&#8217;t look nice across all LCH lightnesses (note that HSL colors with the same hue and saturation may have different hue and chromas in LCH. The opposite would defeat the point!). This is what this technique looks like with LCH colors instead (you will need Safari TP 120 or later to view this):</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_df41d39c06f1b477bd00d57ce9c853ee\" src=\"//codepen.io/anon/embed/df41d39c06f1b477bd00d57ce9c853ee?height=500&amp;theme-id=1&amp;slug-hash=df41d39c06f1b477bd00d57ce9c853ee&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed df41d39c06f1b477bd00d57ce9c853ee\" title=\"CodePen Embed df41d39c06f1b477bd00d57ce9c853ee\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And here is a screenshot:</p>\n\n\n\n<figure class=\"wp-container-8 wp-block-gallery-7 wp-block-gallery columns-2 is-cropped\"><ul class=\"blocks-gallery-grid\"><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" width=\"1548\" height=\"1164\" src=\"https://lea.verou.me/wp-content/uploads/2021/03/lch-normal.png\" alt=\"\" data-id=\"3319\" data-full-url=\"https://lea.verou.me/wp-content/uploads/2021/03/lch-normal.png\" data-link=\"https://lea.verou.me/lch-normal/\" class=\"wp-image-3319\"/></figure></li><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" width=\"1548\" height=\"1164\" src=\"https://lea.verou.me/wp-content/uploads/2021/03/lch-dm.png\" alt=\"\" data-id=\"3318\" data-full-url=\"https://lea.verou.me/wp-content/uploads/2021/03/lch-dm.png\" data-link=\"https://lea.verou.me/lch-dm/\" class=\"wp-image-3318\"/></figure></li></ul><figcaption class=\"blocks-gallery-caption\">Light mode and auto-generated dark mode via inverted lightness variables in LCH. </figcaption></figure>\n\n\n\n<p>Not only does dark mode look a lot better, but even in light mode, our two alternate colors actually look more uniform since they have the same LCH lightness.</p>\n\n\n\n<p>Here is a comparison of the two dark modes:</p>\n\n\n\n<figure class=\"wp-container-10 wp-block-gallery-9 wp-block-gallery columns-2 is-cropped\"><ul class=\"blocks-gallery-grid\"><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" width=\"1548\" height=\"1164\" src=\"https://lea.verou.me/wp-content/uploads/2021/03/hsl-dm.png\" alt=\"\" data-id=\"3313\" data-full-url=\"https://lea.verou.me/wp-content/uploads/2021/03/hsl-dm.png\" data-link=\"https://lea.verou.me/hsl-dm/\" class=\"wp-image-3313\"/></figure></li><li class=\"blocks-gallery-item\"><figure><img loading=\"lazy\" width=\"1548\" height=\"1164\" src=\"https://lea.verou.me/wp-content/uploads/2021/03/lch-dm.png\" alt=\"\" data-id=\"3318\" data-full-url=\"https://lea.verou.me/wp-content/uploads/2021/03/lch-dm.png\" data-link=\"https://lea.verou.me/lch-dm/\" class=\"wp-image-3318\"/></figure></li></ul><figcaption class=\"blocks-gallery-caption\">Comparison of the two auto-generated dark modes, via HSL lightness on the left and LCH lightness on the right.</figcaption></figure>\n\n\n\n<p>Here you can see an animated comparison of them over each other:</p>\n\n\n\n<div class=\"image-comparison\">\n<img src=\"https://lea.verou.me/wp-content/uploads/2021/03/hsl-dm.png\"/>\n<img src=\"https://lea.verou.me/wp-content/uploads/2021/03/lch-dm.png\"/>\n</div>\n\n\n\n<p>Note that in reality, until LCH colors are reliably supported everywhere you&#8217;d need to provide a fallback via <code>@supports</code>, but for brevity, I did not include one in this demo.</p>\n\n\n\n<h2>Automating generation of lightness variables</h2>\n\n\n\n<p>If you are using a preprocessor that supports loops, such as Sass, you can automate the generation of these variables, and make them even more granular, e.g. every 5%:</p>\n\n\n\n<pre class=\"wp-block-code language-scss\"><code>:root {\n    @for $i from 0 through 20 {\n        --l-#{$i * 5}: #{$i * 5}%;\n    }\n}\n\n@media (prefers-color-scheme: dark) {\n    :root {\n        @for $i from 0 through 20 {\n            --l-#{$i * 5}: #{100 - $i * 5}%;\n        }\n    }\n}</code></pre>\n\n\n\n<h2>Can we make lightness variables more DRY?</h2>\n\n\n\n<p>Some of you may have disliked the repetition of values: we need to declare e.g. <code>--l-40</code> as 40%, then set it to 60% in dark mode. Can&#8217;t we derive it somehow, by subtracting the value we already have from 100%?</p>\n\n\n\n<p>Those with experience in programming may try something like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>--l-40: calc(100% - var(--l-40));</code></pre>\n\n\n\n<p>However, this will not work. CSS is not an imperative language. It does not have steps of calculation, where variables have different values before and after each step. There is no such concept of time, all declarations that are currently applied, need to be true at once. It&#8217;s more similar to the reactive evaluation of spreadsheet formulas than to computation in JS and other popular programming languages (there are general purpose <a href=\"https://en.wikipedia.org/wiki/Reactive_programming\">reactive programming</a> languages, but they are less well known). Therefore, declarations like the one above are considered cycles: since <code>--l-40</code> cannot refer to itself, this is an error, and <a href=\"https://drafts.csswg.org/css-variables/#cycles\"><code>--l-40</code> would be set to its initial value</a> as an error recovery mechanism (since CSS cannot throw errors).</p>\n\n\n\n<p>So, is there a way to avoid declaring lightness variables twice, once for light mode and once for dark mode?</p>\n\n\n\n<p>There <em>is</em>, but I wouldn&#8217;t recommend it. It makes the code more convoluted to read and comprehend, for little benefit. But for the sake of intellectual amusement, I&#8217;m going to describe it here.</p>\n\n\n\n<p>Instead of setting <code>--l-40</code> to 40%, we are going to set it in terms of its <em>difference from 50%</em>, i.e. <code>-10%</code>. Then,  <code>calc(50% + var(--l-40))</code> gives us 40% and <code>calc(50% - var(--l-40))</code> gives us 60%, the two values we need. We can therefore declare one variable that is <code>-1</code> in dark mode and <code>1</code> in light mode, and just multiply with that.</p>\n\n\n\n<p>Here is a subset of what our code would be like with this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>:root {\n\t--dm: 1;\n\n\t/* Example declaration: */\n\t--l-40: -10%;\n}\n\n@media (prefers-color-scheme: dark) {\n\t:root {\n\t\t--dm: -1;\n\t}\n}\n\n/* Example usage: */\n\nfooter {\n\tcolor: hsl(0 0% calc(50% + var(--dm) * var(--l-40));\n\t/* Ewww! */\n}</code></pre>\n\n\n\n<p>And hopefully now you can see why I wouldn&#8217;t recommend this: it makes <strong>usage</strong> much more complicated, to DRY up a few declarations that would only be specified once. It&#8217;s this kind of obsessive adherence to DRY that <a href=\"https://lea.verou.me/2020/09/developer-priorities-throughout-their-career/\">programmers eventually realize is counterproductive</a>.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p><em>Liked this article? Sign up for my <a href=\"https://smashingconf.com/online-workshops/workshops/lea-verou\">Smashing Workshop on Dynamic CSS</a> for more content like this!</em></p>",
      "content_text": "By now, you probably know that you can use custom properties for individual color components, to avoid repeating the same color coordinates multiple times throughout your theme. You may even know that you can use the same variable for multiple components, e.g. HSL hue and lightness:\n\n\n\n:root {\n\t--primary-hs: 250 30%;\n}\n\nh1 {\n\tcolor: hsl(var(--primary-hs) 30%);\n}\n\narticle {\n\tbackground: hsl(var(--primary-hs) 90%);\n}\n\narticle h2 {\n\tbackground: hsl(var(--primary-hs) 40%);\n\tcolor: white;\n}\n\n\n\nHere is a very simple page designed with this technque:\n\n\n\nCodePen Embed Fallback\n\n\n\nUnlike preprocessor variables, you could even locally override the variable, to have blocks with a different accent color:\n\n\n\n:root {\n\t--primary-hs: 250 30%;\n\t--secondary-hs: 190 40%;\n}\n\narticle {\n\tbackground: hsl(var(--primary-hs) 90%);\n}\n\narticle.alt {\n\t--primary-hs: var(--secondary-hs);\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nThis is all fine and dandy, until dark mode comes into play. The idea of using custom properties to make it easier to adapt a theme to dark mode is not new. However, in every article I have seen, the strategy suggested is to create a bunch of custom properties, one for each color, and override them in a media query.\n\n\n\nThis is a fine approach, and you‚Äôll likely want to do that for at least part of your colors eventually. However, even in the most disciplined of designs, not every color is a CSS variable. You often have colors declared inline, especially grays (e.g. the footer color in our example). This means that adding a dark mode is taxing enough that you may put it off for later, especially on side projects.\n\n\n\nThe trick I‚Äôm going to show you will make anyone who knows enough about color cringe (sorry Chris!) but it does help you create a dark mode that works in minutes. It won‚Äôt be great, and you should eventually tweak it to create a proper dark mode (also dark mode is not just about swapping colors) but it‚Äôs better than nothing and can serve as a base.\n\n\n\n\n\n\n\nThe basic idea is to use custom properties for the lightness of colors instead of the entire color. Then, in dark mode, you override these variables with 100% - lightness. This generally produces light colors for dark colors, medium colors for medium colors, and dark colors for light colors, and still allows you to define colors inline, instead of forcing you to use a variable for every single color. This is what the code would look like for our example:\n\n\n\nroot {\n\t--primary-hs: 250 30%;\n\t--secondary-hs: 190 40%;\n\n\t--l-0: 0%;\n\t--l-30: 30%;\n\t--l-40: 40%;\n\t--l-50: 50%;\n\t--l-90: 90%;\n\t--l-100: 100%;\n}\n\n@media (prefers-color-scheme: dark) {\n\t:root {\n\t\t--l-0: 100%;\n\t\t--l-30: 70%;\n\t\t--l-40: 60%;\n\t\t--l-90: 10%;\n\t\t--l-100: 0%;\n\t}\n}\n\n\nbody {\n\tbackground: hsl(0 0% var(--l-100));\n\tcolor: hsl(0 0% var(--l-0));\n}\n\nh1 {\n\tcolor: hsl(var(--primary-hs) var(--l-30));\n}\n\narticle {\n\tbackground: hsl(var(--primary-hs) var(--l-90));\n}\n\narticle h2 {\n\tbackground: hsl(var(--primary-hs) 40%);\n\tcolor: white;\n}\n\nfooter {\n\tcolor: hsl(0 0% var(--l-40));\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nThe result looks like this in light & dark mode:\n\n\n\n\n\nThe light mode we designed and the auto-generated dark mode, side by side\n\n\n\n\n\nNote that here we indiscriminately replaced all lightnesses with lightness variables. In reality, we don‚Äôt need to be quite as sweeping. For example, the article titles would actually look better and would have better contrast if we just kept them the same:\n\n\n\nComparison of dark mode with every lightness becoming a variable versus a more refined approach, where we make exceptions as needed (in this case the background and text colors for article > h2).\n\n\n\nThese are decisions that are easy to make while you go through your CSS replacing lightness percentages with variables and previewing the result.\n\n\n\nThe problem with HSL\n\n\n\nBut why were the article headers easier to read with their original colors than with inverted lightness? The root cause is that HSL lightness does not actually correspond to what humans perceive as lightness, and the same lightness difference can produce vastly different perceptual differences.\n\n\n\nThat is the big problem with this approach: it assumes that HSL lightness actually means something, but as we‚Äôve discussed before, it does not. Yellow and blue have the same HSL lightness (50%) for crying out loud! Also, you will notice that your dark colors have smaller differences between them than your light colors, because HSL is not perceptually uniform. \n\n\n\nDoes that mean the technique is not useful for anything other than a placeholder while we develop our real dark mode, if that? \n\n\n\nWell, things are not quite as grim.\n\n\n\nSoon enough, we will get LCH colors in the browser. The first browser implementation just recently shipped in Safari and there is activity in that space among the other browser vendors too.\n\n\n\nLCH is a much better color space for this technique, because its lightness actually means something, not just across different lightnesses of the same color, but across different hues and chromas. \n\n\n\nThis next example needs Safari TP 120+ . Compare these two gradients, the top one showing various HSL colors all with lightness 50%, and the bottom various LCH colors, all with lightness 50%. You can even adjust the slider and try different lightnesses:\n\n\n\nCodePen Embed Fallback\n\n\n\nHere is a screenshot for those of you who don‚Äôt have access to Safari TP 120+:\n\n\n\n\n\n\n\nNotice that in HSL, some colors (like yellow and cyan) are much lighter than others. In LCH, all colors at the same lightness are, well, the same lightness.\n\n\n\nKeep in mind that LCH chroma doesn‚Äôt really correspond to HSL lightness, so even though we‚Äôve set it to the same number, it doesn‚Äôt correspond to the same thing.\n\n\n\nSo, how would this technique work with LCH colors? Let‚Äôs try it out!\n\n\n\nI used this tool to convert the existing HSL colors to LCH, then tweaked the values manually a bit as the initially converted colors didn‚Äôt look nice across all LCH lightnesses (note that HSL colors with the same hue and saturation may have different hue and chromas in LCH. The opposite would defeat the point!). This is what this technique looks like with LCH colors instead (you will need Safari TP 120 or later to view this):\n\n\n\nCodePen Embed Fallback\n\n\n\nAnd here is a screenshot:\n\n\n\nLight mode and auto-generated dark mode via inverted lightness variables in LCH. \n\n\n\nNot only does dark mode look a lot better, but even in light mode, our two alternate colors actually look more uniform since they have the same LCH lightness.\n\n\n\nHere is a comparison of the two dark modes:\n\n\n\nComparison of the two auto-generated dark modes, via HSL lightness on the left and LCH lightness on the right.\n\n\n\nHere you can see an animated comparison of them over each other:\n\n\n\n\n\n\n\n\n\n\nNote that in reality, until LCH colors are reliably supported everywhere you‚Äôd need to provide a fallback via @supports, but for brevity, I did not include one in this demo.\n\n\n\nAutomating generation of lightness variables\n\n\n\nIf you are using a preprocessor that supports loops, such as Sass, you can automate the generation of these variables, and make them even more granular, e.g. every 5%:\n\n\n\n:root {\n    @for $i from 0 through 20 {\n        --l-#{$i * 5}: #{$i * 5}%;\n    }\n}\n\n@media (prefers-color-scheme: dark) {\n    :root {\n        @for $i from 0 through 20 {\n            --l-#{$i * 5}: #{100 - $i * 5}%;\n        }\n    }\n}\n\n\n\nCan we make lightness variables more DRY?\n\n\n\nSome of you may have disliked the repetition of values: we need to declare e.g. --l-40 as 40%, then set it to 60% in dark mode. Can‚Äôt we derive it somehow, by subtracting the value we already have from 100%?\n\n\n\nThose with experience in programming may try something like this:\n\n\n\n--l-40: calc(100% - var(--l-40));\n\n\n\nHowever, this will not work. CSS is not an imperative language. It does not have steps of calculation, where variables have different values before and after each step. There is no such concept of time, all declarations that are currently applied, need to be true at once. It‚Äôs more similar to the reactive evaluation of spreadsheet formulas than to computation in JS and other popular programming languages (there are general purpose reactive programming languages, but they are less well known). Therefore, declarations like the one above are considered cycles: since --l-40 cannot refer to itself, this is an error, and --l-40 would be set to its initial value as an error recovery mechanism (since CSS cannot throw errors).\n\n\n\nSo, is there a way to avoid declaring lightness variables twice, once for light mode and once for dark mode?\n\n\n\nThere is, but I wouldn‚Äôt recommend it. It makes the code more convoluted to read and comprehend, for little benefit. But for the sake of intellectual amusement, I‚Äôm going to describe it here.\n\n\n\nInstead of setting --l-40 to 40%, we are going to set it in terms of its difference from 50%, i.e. -10%. Then,  calc(50% + var(--l-40)) gives us 40% and calc(50% - var(--l-40)) gives us 60%, the two values we need. We can therefore declare one variable that is -1 in dark mode and 1 in light mode, and just multiply with that.\n\n\n\nHere is a subset of what our code would be like with this:\n\n\n\n:root {\n\t--dm: 1;\n\n\t/* Example declaration: */\n\t--l-40: -10%;\n}\n\n@media (prefers-color-scheme: dark) {\n\t:root {\n\t\t--dm: -1;\n\t}\n}\n\n/* Example usage: */\n\nfooter {\n\tcolor: hsl(0 0% calc(50% + var(--dm) * var(--l-40));\n\t/* Ewww! */\n}\n\n\n\nAnd hopefully now you can see why I wouldn‚Äôt recommend this: it makes usage much more complicated, to DRY up a few declarations that would only be specified once. It‚Äôs this kind of obsessive adherence to DRY that programmers eventually realize is counterproductive.\n\n\n\n\n\n\n\nLiked this article? Sign up for my Smashing Workshop on Dynamic CSS for more content like this!",
      "date_published": "2021-03-30T17:40:36.000Z",
      "date_modified": "2021-03-30T17:40:36.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3272",
      "url": "https://lea.verou.me/2021/02/mass-function-overloading-why-and-how/",
      "title": "Mass function overloading: why and how?",
      "summary": "One of the things I‚Äôve been doing for the past few months (on and off‚Äîmore off than on TBH) is rewriting Bliss to use ESM 1. Since Bliss v1 was not using a modular architecture at all, this introduced some interesting challenges. Bliss is essentially a collection of helper functions. Most of these functions have [‚Ä¶]",
      "content_html": "<p>One of the things I&#8217;ve been doing for the past few months (on and off‚Äîmore off than on TBH) is rewriting <a href=\"http://blissfuljs.com/\">Bliss</a> to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">ESM</a> <a href=\"#bliss-v2\"><sup>1</sup></a>. Since Bliss v1 was not using a modular architecture at all, this introduced some interesting challenges.</p>\n\n\n\n<span id=\"more-3272\"></span>\n\n\n\n<p>Bliss is essentially a collection of helper functions. Most of these functions have a number of different <a href=\"https://en.wikipedia.org/wiki/Type_signature#Method_signature\">signatures</a>, to allow for more compact, readable code. The functions can be used for single things (one element, one set of arguments) or they can operate <em>en masse</em> (arrays of elements, object literals with multiple key-value pairs). As you might guess, this practice has been strongly inspired by the heavy use of <a href=\"https://en.wikipedia.org/wiki/Function_overloading\">overloading</a> in jQuery, which was one of the driving factors behind its huge success.</p>\n\n\n\n<p>For example, let&#8217;s take <code><a href=\"https://blissfuljs.com/docs.html#fn-style\">$.style()</a></code>. It can be used to set a single CSS property, on a single element, being a rather thin abstraction over <code>element.style</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$.style(element, \"top\", rect.top);</code></pre>\n\n\n\n<p>It can also be used to set a single CSS property on multiple elements:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$.style($$(\".popup\"), \"top\", rect.top);</code></pre>\n\n\n\n<p>It can also be used to set multiple properties on a single element:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$.style(element, {\n\ttop: rect.top,\n\tright: rect.right,\n\tbottom: rect.bottom,\n\tleft: rect.left\n);</code></pre>\n\n\n\n<p>Or to set multiple properties on multiple elements:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$.style($$(\".popup\"), {\n\ttop: rect.top,\n\tright: rect.right,\n\tbottom: rect.bottom,\n\tleft: rect.left\n});</code></pre>\n\n\n\n<p>I&#8217;m a strong believer in overloading for handling both aggregate operations, as well as singular data. Supporting only aggregate operations would mean that developers have to pointlessly wrap single values in object literals or arrays. E.g. if <code>$.style()</code> only accepted arrays and object literals, our first example would be:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$.style(&#91;element], {top: rect.top});</code></pre>\n\n\n\n<p>Not the end of the world, but certainly annoying and error-prone. Developers would often try setting the pair as separate arguments because it&#8217;s more natural, remember it doesn&#8217;t work, then adjust their code. </p>\n\n\n\n<p>The opposite situation is much worse. If <code>$.style()</code> only supported singular operations, our last example would be:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let values = {\n\ttop: rect.top,\n\tright: rect.right,\n\tbottom: rect.bottom,\n\tleft: rect.left\n};\nfor (let element of $$(\".popup\")) {\n\tfor (let property in values) {\n\t\t$.style(element, property, values&#91;property]);\n\t}\n}</code></pre>\n\n\n\n<p>Yikes! You don&#8217;t need a library for that! Just using <code>element.style</code> and <code>Object.assign()</code> would have actually fared better here:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for (let element of $$(\".popup\")) {\n\tObject.assign(element.style, {\n\t\ttop: rect.top,\n\t\tright: rect.right,\n\t\tbottom: rect.bottom,\n\t\tleft: rect.left\n\t});\n}</code></pre>\n\n\n\n<p><code>$.style()</code> is not unique here: any Bliss function that accepts a main target element (the function&#8217;s <em>subject</em> as it&#8217;s called in the Bliss docs) also accepts arrays of elements. Similarly, any Bliss function that accepts key-value pairs as separate arguments, also accepts object literals with multiple of them.</p>\n\n\n\n<p>In talks about API Design, I have presented this pattern (and overloading in general) as an instance of the <a href=\"https://en.wikipedia.org/wiki/Robustness_principle\">Robustness principle</a> in action: <em>‚ÄúBe liberal in what you accept‚Äù</em> is good practice for designing any user interface, and APIs are no exception. An analog in GUI design would be <a href=\"https://uxdesign.cc/the-bulk-experience-7fcca8080f82\">bulk operations</a>: imagine if e.g. you could only delete emails one by one?</p>\n\n\n\n<p>In JS, overloading is typically implemented by inspecting the types and number of a function&#8217;s arguments in the function, and branching accordingly. However, doing this individually on every function would get quite repetitive. Consider the following, <em>very</em> simplified implementation of <code>$.style()</code> with the overloading logic inlined:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>style(subject, ...args) {\n\tif (Array.isArray(subject)) {\n\t\tsubject.forEach(e =&gt; style(e, ...args));\n\t}\n\telse if ($.type(args&#91;0]) === \"object\" &amp;&amp; args.length = 1) {\n\t\tfor (let p in args&#91;0]) {\n\t\t\tstyle(subject, p, args&#91;0]&#91;p]);\n\t\t}\n\t}\n\telse {\n\t\tsubject.style&#91;args&#91;0]] = args&#91;1];\n\t}\n\n\treturn subject;\n}</code></pre>\n\n\n\n<p>Note that the actual code of this function is only 1 line out of the 13 lines of code it contains. The other 12 are just boilerplate for overloading. What a nightmare for maintainability and readability!</p>\n\n\n\n<p>In Bliss v1, all functions were contained a single file, so they could be defined in their most singular version (one element, a single key-value pair as separate arguments etc), and the aggregate signatures could be automatically generated by looping over all defined functions and wrapping them accordingly.</p>\n\n\n\n<p>However, in Bliss v2, each function is defined in its own module, as a default export. There is also a module pulling them all together and adding them on <code>$</code>, but people <em>should</em> be able to do things like:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import style from \"https://v2.blissfuljs.com/src/dom/style.js\";</code></pre>\n\n\n\n<p>And <code>style()</code> would need to support its full functionality, not be some cut down version allowing only single elements and one property-value pair. What use would that be?</p>\n\n\n\n<p>This means that the overloading needs to happen in the module defining each function. It cannot happen via a loop in the <code>index.js</code> module. How can we do this and still keep our code maintainable, short, and easy to change? I explored several alternatives.</p>\n\n\n\n<p><em>(We are not going to discuss the implementation of <code>overload()</code> in each case below, but if you&#8217;re interested in the current one, it&#8217;s <a href=\"https://github.com/LeaVerou/bliss/blob/v2/src/overload.js\">on Github</a>. Do note that just like everything in Bliss v2, it&#8217;s subject to heavy change before release)</em></p>\n\n\n\n<h4>Option 1: Inside each function</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>export default function style(subject, ...args) {\n\treturn overload(subject, args, (element, property, value) => {\n\t\telement.style&#91;property] = value;\n\t})\n}</code></pre>\n\n\n\n<p>While this at first seems like the most natural way to abstract the inlined code we previously had, it&#8217;s the most verbose and hard to read. Furthermore, it adds extra code that needs to be executed every time the function is called and needs us to pass the current execution context through. It&#8217;s far better to go with a solution that takes the singular function as input, and gives you a modified function that just works. That&#8217;s what the next two options use.</p>\n\n\n\n<h4>Option 2: Wrap with overload()</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>export default overload(function style(element, property, value) {\n\telement.style&#91;property] = value;\n});</code></pre>\n\n\n\n<h4>Option 3: Overload at export</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>function style(element, property, value) {\n\telement.style&#91;property] = value;\n}\n\nexport default overload(style);</code></pre>\n\n\n\n<p>Options 2 and 3 are very similar. I was originally inclined to go with 2 to avoid typing the function name twice, but I eventually concluded that it made the code harder to read, so I went with option 3: Declaring the function, then overloading it &amp; exporting it.</p>\n\n\n\n<p>I wasn&#8217;t super happy with any of these options. Something inside me protested the idea of having to include even a line of boilerplate in every single module, and almost every Bliss function depending on another module. However, in the large scheme of things, I think this boilerplate is as minimal as it gets, and certainly beats the alternatives.</p>\n\n\n\n<p>Have you had to perform a transform on a number of different modules in your code? How did you abstract it away? </p>\n\n\n\n<p id=\"bliss-v2\"><sup>1</sup> You can see the rewrite progress in the <a href=\"https://github.com/LeaVerou/bliss/tree/v2\">v2 branch on Github</a>, and even use <a href=\"https://v2.blissfuljs.com\">v2.blissfuljs.com</a> to import modules from and experiment. Note that at the time of writing, all of the progress is in the code, the docs and tests are still all about v1.</p>",
      "content_text": "One of the things I‚Äôve been doing for the past few months (on and off‚Äîmore off than on TBH) is rewriting Bliss to use ESM 1. Since Bliss v1 was not using a modular architecture at all, this introduced some interesting challenges.\n\n\n\n\n\n\n\nBliss is essentially a collection of helper functions. Most of these functions have a number of different signatures, to allow for more compact, readable code. The functions can be used for single things (one element, one set of arguments) or they can operate en masse (arrays of elements, object literals with multiple key-value pairs). As you might guess, this practice has been strongly inspired by the heavy use of overloading in jQuery, which was one of the driving factors behind its huge success.\n\n\n\nFor example, let‚Äôs take $.style(). It can be used to set a single CSS property, on a single element, being a rather thin abstraction over element.style:\n\n\n\n$.style(element, \"top\", rect.top);\n\n\n\nIt can also be used to set a single CSS property on multiple elements:\n\n\n\n$.style($$(\".popup\"), \"top\", rect.top);\n\n\n\nIt can also be used to set multiple properties on a single element:\n\n\n\n$.style(element, {\n\ttop: rect.top,\n\tright: rect.right,\n\tbottom: rect.bottom,\n\tleft: rect.left\n);\n\n\n\nOr to set multiple properties on multiple elements:\n\n\n\n$.style($$(\".popup\"), {\n\ttop: rect.top,\n\tright: rect.right,\n\tbottom: rect.bottom,\n\tleft: rect.left\n});\n\n\n\nI‚Äôm a strong believer in overloading for handling both aggregate operations, as well as singular data. Supporting only aggregate operations would mean that developers have to pointlessly wrap single values in object literals or arrays. E.g. if $.style() only accepted arrays and object literals, our first example would be:\n\n\n\n$.style([element], {top: rect.top});\n\n\n\nNot the end of the world, but certainly annoying and error-prone. Developers would often try setting the pair as separate arguments because it‚Äôs more natural, remember it doesn‚Äôt work, then adjust their code. \n\n\n\nThe opposite situation is much worse. If $.style() only supported singular operations, our last example would be:\n\n\n\nlet values = {\n\ttop: rect.top,\n\tright: rect.right,\n\tbottom: rect.bottom,\n\tleft: rect.left\n};\nfor (let element of $$(\".popup\")) {\n\tfor (let property in values) {\n\t\t$.style(element, property, values[property]);\n\t}\n}\n\n\n\nYikes! You don‚Äôt need a library for that! Just using element.style and Object.assign() would have actually fared better here:\n\n\n\nfor (let element of $$(\".popup\")) {\n\tObject.assign(element.style, {\n\t\ttop: rect.top,\n\t\tright: rect.right,\n\t\tbottom: rect.bottom,\n\t\tleft: rect.left\n\t});\n}\n\n\n\n$.style() is not unique here: any Bliss function that accepts a main target element (the function‚Äôs subject as it‚Äôs called in the Bliss docs) also accepts arrays of elements. Similarly, any Bliss function that accepts key-value pairs as separate arguments, also accepts object literals with multiple of them.\n\n\n\nIn talks about API Design, I have presented this pattern (and overloading in general) as an instance of the Robustness principle in action: ‚ÄúBe liberal in what you accept‚Äù is good practice for designing any user interface, and APIs are no exception. An analog in GUI design would be bulk operations: imagine if e.g. you could only delete emails one by one?\n\n\n\nIn JS, overloading is typically implemented by inspecting the types and number of a function‚Äôs arguments in the function, and branching accordingly. However, doing this individually on every function would get quite repetitive. Consider the following, very simplified implementation of $.style() with the overloading logic inlined:\n\n\n\nstyle(subject, ...args) {\n\tif (Array.isArray(subject)) {\n\t\tsubject.forEach(e => style(e, ...args));\n\t}\n\telse if ($.type(args[0]) === \"object\" && args.length = 1) {\n\t\tfor (let p in args[0]) {\n\t\t\tstyle(subject, p, args[0][p]);\n\t\t}\n\t}\n\telse {\n\t\tsubject.style[args[0]] = args[1];\n\t}\n\n\treturn subject;\n}\n\n\n\nNote that the actual code of this function is only 1 line out of the 13 lines of code it contains. The other 12 are just boilerplate for overloading. What a nightmare for maintainability and readability!\n\n\n\nIn Bliss v1, all functions were contained a single file, so they could be defined in their most singular version (one element, a single key-value pair as separate arguments etc), and the aggregate signatures could be automatically generated by looping over all defined functions and wrapping them accordingly.\n\n\n\nHowever, in Bliss v2, each function is defined in its own module, as a default export. There is also a module pulling them all together and adding them on $, but people should be able to do things like:\n\n\n\nimport style from \"https://v2.blissfuljs.com/src/dom/style.js\";\n\n\n\nAnd style() would need to support its full functionality, not be some cut down version allowing only single elements and one property-value pair. What use would that be?\n\n\n\nThis means that the overloading needs to happen in the module defining each function. It cannot happen via a loop in the index.js module. How can we do this and still keep our code maintainable, short, and easy to change? I explored several alternatives.\n\n\n\n(We are not going to discuss the implementation of overload() in each case below, but if you‚Äôre interested in the current one, it‚Äôs on Github. Do note that just like everything in Bliss v2, it‚Äôs subject to heavy change before release)\n\n\n\nOption 1: Inside each function\n\n\n\nexport default function style(subject, ...args) {\n\treturn overload(subject, args, (element, property, value) => {\n\t\telement.style[property] = value;\n\t})\n}\n\n\n\nWhile this at first seems like the most natural way to abstract the inlined code we previously had, it‚Äôs the most verbose and hard to read. Furthermore, it adds extra code that needs to be executed every time the function is called and needs us to pass the current execution context through. It‚Äôs far better to go with a solution that takes the singular function as input, and gives you a modified function that just works. That‚Äôs what the next two options use.\n\n\n\nOption 2: Wrap with overload()\n\n\n\nexport default overload(function style(element, property, value) {\n\telement.style[property] = value;\n});\n\n\n\nOption 3: Overload at export\n\n\n\nfunction style(element, property, value) {\n\telement.style[property] = value;\n}\n\nexport default overload(style);\n\n\n\nOptions 2 and 3 are very similar. I was originally inclined to go with 2 to avoid typing the function name twice, but I eventually concluded that it made the code harder to read, so I went with option 3: Declaring the function, then overloading it & exporting it.\n\n\n\nI wasn‚Äôt super happy with any of these options. Something inside me protested the idea of having to include even a line of boilerplate in every single module, and almost every Bliss function depending on another module. However, in the large scheme of things, I think this boilerplate is as minimal as it gets, and certainly beats the alternatives.\n\n\n\nHave you had to perform a transform on a number of different modules in your code? How did you abstract it away? \n\n\n\n1 You can see the rewrite progress in the v2 branch on Github, and even use v2.blissfuljs.com to import modules from and experiment. Note that at the time of writing, all of the progress is in the code, the docs and tests are still all about v1.",
      "date_published": "2021-02-10T18:28:26.000Z",
      "date_modified": "2021-02-10T18:28:26.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3246",
      "url": "https://lea.verou.me/2020/12/writable-getters/",
      "title": "Writable getters",
      "summary": "A pattern that has come up a few times in my code is the following: an object has a property which defaults to an expression based on its other properties unless it‚Äôs explicitly set, in which case it functions like a normal property. Essentially, the expression functions as a default value. Some examples of use [‚Ä¶]",
      "content_html": "<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"557\" src=\"https://lea.verou.me/wp-content/uploads/2020/12/ouroboros.jpg\" alt=\"\" class=\"wp-image-3250\"/><figcaption>Setters removing themselves are reminiscent of <a href=\"https://en.wikipedia.org/wiki/Ouroboros\">Ouroboros</a>, the serpent eating its own tail, an ancient symbol. <a href=\"https://commons.wikimedia.org/wiki/File:The_serpent_Ouroboros,_from_Cyprianus,_18th_C_Wellcome_L0036620.jpg\">Media credit</a></figcaption></figure>\n\n\n\n<p>A pattern that has come up a few times in my code is the following: an object has a property which defaults to an expression based on its other properties <em>unless</em> it&#8217;s explicitly set, in which case it functions like a normal property. Essentially, the expression functions as a default value. </p>\n\n\n\n<span id=\"more-3246\"></span>\n\n\n\n<p>Some examples of use cases:</p>\n\n\n\n<ul><li>An object where a default <code>id</code> is generated from its <code>name</code> or <code>title</code>, but can also have custom ids.</li><li>An object with information about a human, where <code>name</code> can be either specified explicitly or generated from <code>firstName</code> and <code>lastName</code> if not specified.</li><li>An object with parameters for drawing an ellipse, where <code>ry</code> defaults to <code>rx</code> if not explicitly set.</li><li>An object literal with date information, and a <code>readable</code> property which formats the date, but can be overwritten with a custom human-readable format.</li><li>An object representing parts of a Github URL (e.g. username, repo, branch) with an <code>apiCall</code> property which can be either customized or generated from the parts <em>(this is actually the <a href=\"https://github.com/mavoweb/mavo/pull/670#issuecomment-749585736\">example</a> which prompted this blog post)</em></li></ul>\n\n\n\n<p class=\"language-javascript\">Ok, so now that I convinced you about the utility of this pattern, how do we implement it in JS? Our first attempt may look something like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let lea = {\n\tname: \"Lea Verou\",\n\tget id() {\n\t\treturn this.name.toLowerCase().replace(/\\W+/g, \"-\");\n\t}\n}</code></pre>\n\n\n\n<p><em><strong>Note:</strong> We are going to use object literals in this post for simplicity, but the same logic applies to variations using <code>Object.create()</code>, or a class <code>Person</code> of which <code>lea</code> is an instance. </em></p>\n\n\n\n<p>Our first attempt doesn&#8217;t quite work as you might expect:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>lea.id; // \"lea-verou\"\nlea.id = \"lv\";\nlea.id; // Still \"lea-verou\"!</code></pre>\n\n\n\n<p>Why does this happen? The reason is that the presence of the getter turns the property into an <em>accessor</em>, and thus, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Description:~:text=Property%20descriptors%20present%20in%20objects%20come,two%20flavors%3B%20it%20cannot%20be%20both.\">it cannot also hold data</a>. If it doesn&#8217;t have a setter, then simply nothing happens when it is set.</p>\n\n\n\n<p>However, we can have a setter that, when invoked, <em>deletes the accessor and replaces it with a data property</em>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let lea = {\n\tname: \"Lea Verou\",\n\tget id() {\n\t\treturn this.name.toLowerCase().replace(/\\W+/g, \"-\");\n\t},\n\tset id(v) {\n\t\tdelete this.id;\n\t\treturn this.id = v;\n\t}\n}</code></pre>\n\n\n\n<h2>Abstracting the pattern into a helper</h2>\n\n\n\n<p>If we find ourselves needing this pattern in more than one places in our codebase, we could abstract it into a helper:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function writableGetter(o, property, getter, options = {}) {\n\tObject.defineProperty(o, property, {\n\t\tget: getter,\n\t\tset (v) {\n\t\t\tdelete this&#91;property];\n\t\t\treturn this&#91;property] = v;\n\t\t},\n\t\tenumerable: true,\n\t\tconfigurable: true,\n\t\t...options\n\t});\n}</code></pre>\n\n\n\n<p>Note that we used <code>Object.defineProperty()</code> here instead of the succinct <code>get</code>/<code>set</code> syntax. Not only is the former more convenient for augmenting pre-existing objects, but also it allows us to customize enumerability, while the latter just defaults to <code>enumerable: true</code>.</p>\n\n\n\n<p>We&#8217;d use the helper like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let lea = {name: \"Lea Verou\"};\nwritableGetter(lea, \"id\", function() {\n\treturn this.name.toLowerCase().replace(/\\W+/g, \"-\");\n}, {enumerable: false});</code></pre>\n\n\n\n<h2>Overwriting the getter with a <em>different</em> getter</h2>\n\n\n\n<p>This works when we want to overwrite with a static value, but what if we want to overwrite with a <em>different</em> getter? For example, consider the date use case: what if we want to maintain a single source of truth for the date components and only overwrite the format, as a function, so that when the date components change, the formatted date updates accordingly?</p>\n\n\n\n<p>If we are confident that setting the property to an actual function value wouldn&#8217;t make sense, we could handle that case specially, and create a new getter instead of a data property:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function writableGetter(o, property, getter, options = {}) {\n\treturn Object.defineProperty(o, property, {\n\t\tget () {\n\t\t\treturn getter.call(this);\n\t\t},\n\t\tset (v) {\n\t\t\tif (typeof v === \"function\") {\n\t\t\t\tgetter = v;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdelete this&#91;property];\n\t\t\t\treturn this&#91;property] = v;\n\t\t\t}\n\t\t},\n\t\tenumerable: true,\n\t\tconfigurable: true,\n\t\t...options\n\t});\n}</code></pre>\n\n\n\n<p>Do note that if we set the property to a static value, and try to set it to a function after that, it will just be a data property that creates a function, since we&#8217;ve deleted the accessor that handled functions specially. If that is a significant concern, we can maintain the accessor and just update the getter:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function writableGetter(o, property, getter, options = {}) {\n\treturn Object.defineProperty(o, property, {\n\t\tget () {\n\t\t\treturn getter.call(this);\n\t\t},\n\t\tset (v) {\n\t\t\tif (typeof v === \"function\") {\n\t\t\t\tgetter = v;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tgetter = () => v;\n\t\t\t}\n\t\t},\n\t\tenumerable: true,\n\t\tconfigurable: true,\n\t\t...options\n\t});\n}</code></pre>\n\n\n\n<h2>Improving the <abbr title=\"Developer Experience\">DX</abbr> of our helper</h2>\n\n\n\n<p>While this was the most straightforward way to define a helper, it doesn&#8217;t <em>feel</em> very natural to use. Our object definition is now scattered in multiple places, and readability is poor. This is often the case when we start implementing before designing a UI. In this case, writing the helper is the implementation, and its calling code is effectively the UI. </p>\n\n\n\n<p><strong>It&#8217;s always a good practice to start designing functions by writing a call to that function</strong>, as if a tireless elf working for us had already written the implementation of our dreams. </p>\n\n\n\n<p>So how would we <em>prefer</em> to write our object? I&#8217;d actually prefer to use the more readable <code>get()</code> syntax, and have everything in one place, then somehow <em>convert</em> that getter to a writable getter. Something like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let lea = {\n\tname: \"Lea Verou\",\n\tget id() {\n\t\treturn this.name.toLowerCase().replace(/\\W+/g, \"-\");\n\t}\n}\nmakeGetterWritable(lea, \"id\", {enumerable: true});</code></pre>\n\n\n\n<p>Can we implement something like this? Of course. This is JS, we can do anything!</p>\n\n\n\n<p>The main idea is that we read back the descriptor our <code>get</code> syntax created, fiddle with it, then stuff it back in as a new property:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function makeGetterWritable(o, property, options) {\n\tlet d = Object.getOwnPropertyDescriptor(o, property);\n\tlet getter = d.get;\n\n\td.get = function() {\n\t\treturn getter.call(this);\n\t};\n\t\n\td.set = function(v) {\n\t\tif (typeof v === \"function\") {\n\t\t\tgetter = v;\n\t\t}\n\t\telse {\n\t\t\tdelete this&#91;property];\n\t\t\treturn this&#91;property] = v;\n\t\t}\n\t};\n\n\t// Apply any overrides, e.g. enumerable\n\tObject.assign(d, options);\n\n\t// Redefine the property with the new descriptor\n\tObject.defineProperty(o, property, d)\n}</code></pre>\n\n\n\n<h2>Other mixed data-accessor properties</h2>\n\n\n\n<p>While JS is very firm in its distinction of accessor properties and data properties, the reality is that we often need to combine the two in different ways, and conceptually it&#8217;s more of a <em>data-accessor spectrum</em> than two distinct categories. Here are a few more examples where the boundary between data property and accessor property is somewhat &#8230;murky:</p>\n\n\n\n<ul><li><em>&#8220;Live&#8221; data properties</em>: properties which execute code to produce side effects when they are get or set, but still hold data like a regular data property. This can be faked by having a helper that creates a hidden data property. This idea is the core of <code><a href=\"https://blissfuljs.com/docs#fn-live\">Bliss.live()</a></code>. </li><li><em>Lazy evaluation</em>: Properties which are evaluated when they are first read (via a getter), then replace themselves with a regular data property. If they are set before they are read, they function exactly like a writable getter. This idea is the core of <code><a href=\"https://blissfuljs.com/docs#fn-lazy\">Bliss.lazy()</a></code>. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#Smart_self-overwriting_lazy_getters\">MDN mentions this pattern</a> too.</li></ul>\n\n\n\n<p><em><strong>Note:</strong> Please don&#8217;t actually implement id/slug generation with <code>name.toLowerCase().replace(/\\W+/g, \"-\")</code>. That&#8217;s very simplistic, to keep examples short. It privileges English/ASCII over other languages and writing systems, and thus, should be avoided. </em></p>",
      "content_text": "Setters removing themselves are reminiscent of Ouroboros, the serpent eating its own tail, an ancient symbol. Media credit\n\n\n\nA pattern that has come up a few times in my code is the following: an object has a property which defaults to an expression based on its other properties unless it‚Äôs explicitly set, in which case it functions like a normal property. Essentially, the expression functions as a default value. \n\n\n\n\n\n\n\nSome examples of use cases:\n\n\n\nAn object where a default id is generated from its name or title, but can also have custom ids.An object with information about a human, where name can be either specified explicitly or generated from firstName and lastName if not specified.An object with parameters for drawing an ellipse, where ry defaults to rx if not explicitly set.An object literal with date information, and a readable property which formats the date, but can be overwritten with a custom human-readable format.An object representing parts of a Github URL (e.g. username, repo, branch) with an apiCall property which can be either customized or generated from the parts (this is actually the example which prompted this blog post)\n\n\n\nOk, so now that I convinced you about the utility of this pattern, how do we implement it in JS? Our first attempt may look something like this:\n\n\n\nlet lea = {\n\tname: \"Lea Verou\",\n\tget id() {\n\t\treturn this.name.toLowerCase().replace(/\\W+/g, \"-\");\n\t}\n}\n\n\n\nNote: We are going to use object literals in this post for simplicity, but the same logic applies to variations using Object.create(), or a class Person of which lea is an instance. \n\n\n\nOur first attempt doesn‚Äôt quite work as you might expect:\n\n\n\nlea.id; // \"lea-verou\"\nlea.id = \"lv\";\nlea.id; // Still \"lea-verou\"!\n\n\n\nWhy does this happen? The reason is that the presence of the getter turns the property into an accessor, and thus, it cannot also hold data. If it doesn‚Äôt have a setter, then simply nothing happens when it is set.\n\n\n\nHowever, we can have a setter that, when invoked, deletes the accessor and replaces it with a data property:\n\n\n\nlet lea = {\n\tname: \"Lea Verou\",\n\tget id() {\n\t\treturn this.name.toLowerCase().replace(/\\W+/g, \"-\");\n\t},\n\tset id(v) {\n\t\tdelete this.id;\n\t\treturn this.id = v;\n\t}\n}\n\n\n\nAbstracting the pattern into a helper\n\n\n\nIf we find ourselves needing this pattern in more than one places in our codebase, we could abstract it into a helper:\n\n\n\nfunction writableGetter(o, property, getter, options = {}) {\n\tObject.defineProperty(o, property, {\n\t\tget: getter,\n\t\tset (v) {\n\t\t\tdelete this[property];\n\t\t\treturn this[property] = v;\n\t\t},\n\t\tenumerable: true,\n\t\tconfigurable: true,\n\t\t...options\n\t});\n}\n\n\n\nNote that we used Object.defineProperty() here instead of the succinct get/set syntax. Not only is the former more convenient for augmenting pre-existing objects, but also it allows us to customize enumerability, while the latter just defaults to enumerable: true.\n\n\n\nWe‚Äôd use the helper like this:\n\n\n\nlet lea = {name: \"Lea Verou\"};\nwritableGetter(lea, \"id\", function() {\n\treturn this.name.toLowerCase().replace(/\\W+/g, \"-\");\n}, {enumerable: false});\n\n\n\nOverwriting the getter with a different getter\n\n\n\nThis works when we want to overwrite with a static value, but what if we want to overwrite with a different getter? For example, consider the date use case: what if we want to maintain a single source of truth for the date components and only overwrite the format, as a function, so that when the date components change, the formatted date updates accordingly?\n\n\n\nIf we are confident that setting the property to an actual function value wouldn‚Äôt make sense, we could handle that case specially, and create a new getter instead of a data property:\n\n\n\nfunction writableGetter(o, property, getter, options = {}) {\n\treturn Object.defineProperty(o, property, {\n\t\tget () {\n\t\t\treturn getter.call(this);\n\t\t},\n\t\tset (v) {\n\t\t\tif (typeof v === \"function\") {\n\t\t\t\tgetter = v;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdelete this[property];\n\t\t\t\treturn this[property] = v;\n\t\t\t}\n\t\t},\n\t\tenumerable: true,\n\t\tconfigurable: true,\n\t\t...options\n\t});\n}\n\n\n\nDo note that if we set the property to a static value, and try to set it to a function after that, it will just be a data property that creates a function, since we‚Äôve deleted the accessor that handled functions specially. If that is a significant concern, we can maintain the accessor and just update the getter:\n\n\n\nfunction writableGetter(o, property, getter, options = {}) {\n\treturn Object.defineProperty(o, property, {\n\t\tget () {\n\t\t\treturn getter.call(this);\n\t\t},\n\t\tset (v) {\n\t\t\tif (typeof v === \"function\") {\n\t\t\t\tgetter = v;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tgetter = () => v;\n\t\t\t}\n\t\t},\n\t\tenumerable: true,\n\t\tconfigurable: true,\n\t\t...options\n\t});\n}\n\n\n\nImproving the DX of our helper\n\n\n\nWhile this was the most straightforward way to define a helper, it doesn‚Äôt feel very natural to use. Our object definition is now scattered in multiple places, and readability is poor. This is often the case when we start implementing before designing a UI. In this case, writing the helper is the implementation, and its calling code is effectively the UI. \n\n\n\nIt‚Äôs always a good practice to start designing functions by writing a call to that function, as if a tireless elf working for us had already written the implementation of our dreams. \n\n\n\nSo how would we prefer to write our object? I‚Äôd actually prefer to use the more readable get() syntax, and have everything in one place, then somehow convert that getter to a writable getter. Something like this:\n\n\n\nlet lea = {\n\tname: \"Lea Verou\",\n\tget id() {\n\t\treturn this.name.toLowerCase().replace(/\\W+/g, \"-\");\n\t}\n}\nmakeGetterWritable(lea, \"id\", {enumerable: true});\n\n\n\nCan we implement something like this? Of course. This is JS, we can do anything!\n\n\n\nThe main idea is that we read back the descriptor our get syntax created, fiddle with it, then stuff it back in as a new property:\n\n\n\nfunction makeGetterWritable(o, property, options) {\n\tlet d = Object.getOwnPropertyDescriptor(o, property);\n\tlet getter = d.get;\n\n\td.get = function() {\n\t\treturn getter.call(this);\n\t};\n\t\n\td.set = function(v) {\n\t\tif (typeof v === \"function\") {\n\t\t\tgetter = v;\n\t\t}\n\t\telse {\n\t\t\tdelete this[property];\n\t\t\treturn this[property] = v;\n\t\t}\n\t};\n\n\t// Apply any overrides, e.g. enumerable\n\tObject.assign(d, options);\n\n\t// Redefine the property with the new descriptor\n\tObject.defineProperty(o, property, d)\n}\n\n\n\nOther mixed data-accessor properties\n\n\n\nWhile JS is very firm in its distinction of accessor properties and data properties, the reality is that we often need to combine the two in different ways, and conceptually it‚Äôs more of a data-accessor spectrum than two distinct categories. Here are a few more examples where the boundary between data property and accessor property is somewhat ‚Ä¶murky:\n\n\n\n‚ÄúLive‚Äù data properties: properties which execute code to produce side effects when they are get or set, but still hold data like a regular data property. This can be faked by having a helper that creates a hidden data property. This idea is the core of Bliss.live(). Lazy evaluation: Properties which are evaluated when they are first read (via a getter), then replace themselves with a regular data property. If they are set before they are read, they function exactly like a writable getter. This idea is the core of Bliss.lazy(). MDN mentions this pattern too.\n\n\n\nNote: Please don‚Äôt actually implement id/slug generation with name.toLowerCase().replace(/\\W+/g, \"-\"). That‚Äôs very simplistic, to keep examples short. It privileges English/ASCII over other languages and writing systems, and thus, should be avoided. ",
      "date_published": "2020-12-23T13:08:17.000Z",
      "date_modified": "2020-12-23T13:08:17.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3216",
      "url": "https://lea.verou.me/2020/11/tag/",
      "title": "Position Statement for the 2020 W3C TAG Election",
      "summary": "Update: I got elected!! Thank you so much to every W3C member organization who voted for me. üôèüèº Now on to making the Web better, alongside fellow TAG members! Context: I‚Äôm running for one of the four open seats in this year‚Äôs W3C TAG election. The W3C Technical Architecture Group (TAG) is the Working Group [‚Ä¶]",
      "content_html": "<p><strong>Update:</strong> <a href=\"https://www.w3.org/blog/news/archives/8846\">I got elected!!</a> Thank you so much to every W3C member organization who voted for me. <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f64f-1f3fc.png\" alt=\"üôèüèº\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> Now on to making the Web better, alongside fellow TAG members!</p>\n\n\n\n<p><em><strong>Context:</strong> I‚Äôm running for one of the four open seats in this year&#8217;s W3C TAG <a href=\"https://www.w3.org/2020/12/07-tag-nominations\">election</a>. The W3C Technical Architecture Group (TAG) is the Working Group that ensures that Web Platform technologies are usable and follow consistent design principles, whether they are created inside or outside W3C. It advocates for the needs of everyone who uses the Web and everyone who works on the Web. If you work for a company that is a <a href=\"https://www.w3.org/Consortium/Member/List\">W3C Member</a>, please consider encouraging your AC rep to vote for me! My candidate statement follows.</em></p>\n\n\n\n<span id=\"more-3216\"></span>\n\n\n\n<p>Hi, I&#8217;m <a href=\"https://lea.verou.me\">Lea Verou</a>. Equally at home in Web development, the standards process, and programming language design, I bring a rarely-found cross-disciplinary understanding of the full stack of front-end development.&nbsp;</p>\n\n\n\n<p>I have a thorough and fundamental understanding of all the core technologies of the Web Platform: HTML, CSS, JS, DOM, and SVG. I bring the experience and perspective of having worked as a web designer &amp; developer in the trenches ‚Äî not in large corporate systems, but on smaller, independent projects for clients, the type of projects that form the majority of the Web. I have started <a href=\"https://github.com/leaverou/\">many</a> open source projects, used on millions of websites, large and small. <a href=\"https://hacks.mozilla.org/2014/07/event-listeners-popup-media-sidebar-cubic-bezier-editor-more-firefox-developer-tools-episode-33/#content-main:~:text=This%20feature%20used%20open%20source%20code%20from%20Lea%20Verou%E2%80%99s%20cubic%2Dbezier.com\">Some</a> of my work has been incorporated in browser dev tools, and some has helped push CSS implementations forwards.</p>\n\n\n\n<p>However, unlike most web developers, I am experienced in working within W3C, both as a longtime <a href=\"https://www.w3.org/groups/wg/css/participants\">member of the CSS Working Group</a>, as well as a W3C Staff alumnus. This experience has given me a fuller grasp of Web technology development: not just the authoring side, but also the needs and constraints of implementation teams, the kinds of problems that tend to show up in our work, and the design principles we apply. I understand in practice how the standards process at W3C addresses the problems and weighs up the necessary compromises ‚Äî from high-level design changes to minute details ‚Äî to create successful standards for the Web.</p>\n\n\n\n<p>I have spent over six years doing PhD research at MIT on the intersection of programming language design and human-computer interaction. <a href=\"https://lea.verou.me/publications/#research\">My research</a> has been published in top-tier peer-reviewed academic venues.&nbsp; My strong usability background gives me the ability to identify API design pitfalls early on in the design process.</p>\n\n\n\n<p>In addition, I have been teaching web technologies for over a decade, both to professional web developers, through my <a href=\"https://lea.verou.me/speaking\">numerous talks, workshops</a>, and bestselling <a href=\"https://lea.verou.me/publications/#books\">book</a>, and as an <a href=\"http://web.mit.edu/6.813/www/sp18/\">instructor</a> and <a href=\"https://designftw.mit.edu\">course co-creator for MIT</a>. This experience helps me to easily identify aspects of API design that can make a technology difficult to learn and conceptualize.</p>\n\n\n\n<p>If elected, I will work with the rest of the TAG to:</p>\n\n\n\n<ul><li>Ensure that web technologies are not only powerful, but also learnable and approachable, with a smooth ease-of-use to complexity curve.</li><li>Ensure that where possible, commonly needed functionality is available through approachable declarative HTML or CSS syntax and not solely through JS APIs.</li><li>Work towards making the Web platform more extensible, to allow experienced developers to encapsulate complexity and make it available to novice authors, empowering the latter to create compelling content. Steps have been made in this direction with Web Components and the Houdini specifications, but there are still many gaps that need to be addressed.&nbsp;</li><li>Record design principles that are often implicit knowledge in standards groups, passed on but never recorded. Explicit design principles help us keep technologies internally consistent, but also assist library developers who want to design APIs that are consistent with the Web Platform and feel like a natural extension of it. A great start has been made with the initial drafts of the <a href=\"https://w3ctag.github.io/design-principles/\">Design Principles document</a>, but there is still a lot to be done.</li><li>Guide those seeking TAG review, some of whom may be new to the standards process, to improve their specifications.&nbsp;</li></ul>\n\n\n\n<p>Having worn all these hats, I can understand and empathize with the needs of designers and developers, authors and implementers, practitioners and academics, putting me in a unique position to help ensure the Web Platform remains consistent, usable, and inclusive.</p>\n\n\n\n<p><em>I would like to thank <a href=\"https://openjsf.org/\">Open JS Foundation</a> and <a href=\"https://bocoup.com/\">Bocoup</a> for graciously funding my TAG-related travel, in the event that I am elected.</em></p>\n\n\n\n<h2>Selected endorsements</h2>\n\n\n\n<p><a href=\"https://en.wikipedia.org/wiki/Tantek_%C3%87elik\">Tantek √áelik</a>, Mozilla‚Äôs AC representative, longtime CSS WG member, and <a href=\"https://en.wikipedia.org/wiki/Tantek_%C3%87elik\">creator of many popular technologies</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>I have had the privilege of working with Lea in the CSS Working Group, and in the broader web development community for many years. Lea is an expert in the practical real-world-web technologies of the W3C, how they fit together, has put them into practice, has helped contribute to their evolution, directly in specs and in working groups. She&#8217;s also a passionate user &amp; developer advocate, both of which I think are excellent for the TAG.</p><cite><a href=\"https://lists.w3.org/Archives/Member/w3c-ac-forum/2021JanMar/0015.html\">Source</a>: https://lists.w3.org/Archives/Member/w3c-ac-forum/2021JanMar/0015.html</cite></blockquote>\n\n\n\n<p><a href=\"https://florian.rivoal.net/\">Florian Rivoal</a>, CSS WG Invited Expert and editor of <a href=\"https://florian.rivoal.net/cv.html#publications\">several specifications</a>, elected <a href=\"https://www.w3.org/2002/ab/\">W3C AB member</a>, ex-Opera:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/LeaVerou?ref_src=twsrc%5Etfw\">@LeaVerou</a> will be a great addition to the TAG. She&#39;s fantastic at explaining things, which will be very useful given the TAG&#39;s role as a coach for everyone else, and her experience on front-end technologies is both wide and deep. Add strong expertise about usability‚Ä¶ Go Lea! <a href=\"https://t.co/WIc56sCrr7\">https://t.co/WIc56sCrr7</a></p>&mdash; Florian (@frivoal) <a href=\"https://twitter.com/frivoal/status/1336857605063417856?ref_src=twsrc%5Etfw\">December 10, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p><a href=\"http://fantasai.inkedblade.net/\">Elika Etemad aka fantasai</a>, prolific editor of dozens of W3C specifications, CSS WG member for over 16 years, and elected <a href=\"https://www.w3.org/2002/ab/\">W3C AB member</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>One TPAC long ago, several members of the TAG on a recruiting spree went around asking people to run for the TAG. I personally turned them down for multiple reasons (including that I&#8217;m only a very poor substitute for David Baron), but it occurred to me recently that there was a candidate that they do<br />need: Lea Verou.</p><p>Lea is one of those elite developers whose technical expertise ranges across the entire Web platform. She doesn&#8217;t just use HTML, CSS, JS, and SVG, she pushes the boundaries of what they&#8217;re capable of. Meanwhile her authoring experience spans JS libraries to small site design to CSS+HTML print publications, giving her a personal appreciation of a wide variety of use cases.<br />Unlike most other developers in her class, however, Lea also brings her experience working within W3C as a longtime member of the CSS Working Group.</p><p>I&#8217;ve seen firsthand that she is capable of participating at the deep and excruciatingly detailed level that we operate here, and that her attention is not just on the feature at hand but also the system and its usability and coherence as a whole. She knows how the standards process works, how use cases and implementation constraints drive our design decisions, and how participation in the arcane discussions at W3C can make a real difference in the future usability of the Web.</p><p>I&#8217;m recommending her for the TAG because she&#8217;s able to bring a perspective that is needed and frequently missing from our technical discussions which so often revolve around implementers, and because elevating her to TAG would give her both the opportunity and the empowerment to bring that perspective to more of our Web technology development here at W3C and beyond.</p><cite><a href=\"https://lists.w3.org/Archives/Member/w3c-ac-forum/2020OctDec/0055.html\">Source</a>: https://lists.w3.org/Archives/Member/w3c-ac-forum/2020OctDec/0055.html</cite></blockquote>\n\n\n\n<p><a href=\"https://www.brucelawson.co.uk/\">Bruce Lawson</a>, Opera alumni, world renowned accessibility expert, speaker, author:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">I&#39;d vote <a href=\"https://twitter.com/LeaVerou?ref_src=twsrc%5Etfw\">@LeaVerou</a> for <a href=\"https://twitter.com/w3ctag?ref_src=twsrc%5Etfw\">@w3ctag</a> on a ticket that promises &quot;powerful, but also learnable and approachable&quot; web tech and &quot;where possible, functionality is available through approachable declarative HTML or CSS syntax and not solely through JS APIs&quot; <a href=\"https://t.co/MFN2BkgYCD\">https://t.co/MFN2BkgYCD</a></p>&mdash; Bruce Lawson (@brucel) <a href=\"https://twitter.com/brucel/status/1336260046691438594?ref_src=twsrc%5Etfw\">December 8, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>Brian Kardell, AC representative for both Open JS Foundation and Igalia:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The OpenJS Foundation is very pleased to nominate and offer our support for Lea Verou to the W3C TAG. We believe that she brings a fresh perspective, diverse background and several kinds of insight that would be exceptionally useful in the TAG&#8217;s work.&nbsp;</p><cite><a href=\"https://www.w3.org/2020/12/07-tag-nominations#lv\">Source</a>: https://www.w3.org/2020/12/07-tag-nominations#lv</cite></blockquote>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Lea Verou is another easy choice for me. Lea brings a really diverse background, set of perspectives and skills to the table. She&#8217;s worked for the W3C, she&#8217;s a great communicator to developers (this is definitely a great skill in TAG whose outreach is important), she&#8217;s worked with small teams, produced a number of popular libraries and helped drive some interesting standards. The OpenJS Foundation was pleased to nominate her, but Frontiers and several others were also supportive. Lea also deserves &#8220;high marks&#8221;.</p><cite><a href=\"https://bkardell.com/blog/TAG-2021.html\">Source</a>: https://bkardell.com/blog/TAG-2021.html</cite></blockquote>",
      "content_text": "Update: I got elected!! Thank you so much to every W3C member organization who voted for me.  Now on to making the Web better, alongside fellow TAG members!\n\n\n\nContext: I‚Äôm running for one of the four open seats in this year‚Äôs W3C TAG election. The W3C Technical Architecture Group (TAG) is the Working Group that ensures that Web Platform technologies are usable and follow consistent design principles, whether they are created inside or outside W3C. It advocates for the needs of everyone who uses the Web and everyone who works on the Web. If you work for a company that is a W3C Member, please consider encouraging your AC rep to vote for me! My candidate statement follows.\n\n\n\n\n\n\n\nHi, I‚Äôm Lea Verou. Equally at home in Web development, the standards process, and programming language design, I bring a rarely-found cross-disciplinary understanding of the full stack of front-end development.¬†\n\n\n\nI have a thorough and fundamental understanding of all the core technologies of the Web Platform: HTML, CSS, JS, DOM, and SVG. I bring the experience and perspective of having worked as a web designer & developer in the trenches ‚Äî not in large corporate systems, but on smaller, independent projects for clients, the type of projects that form the majority of the Web. I have started many open source projects, used on millions of websites, large and small. Some of my work has been incorporated in browser dev tools, and some has helped push CSS implementations forwards.\n\n\n\nHowever, unlike most web developers, I am experienced in working within W3C, both as a longtime member of the CSS Working Group, as well as a W3C Staff alumnus. This experience has given me a fuller grasp of Web technology development: not just the authoring side, but also the needs and constraints of implementation teams, the kinds of problems that tend to show up in our work, and the design principles we apply. I understand in practice how the standards process at W3C addresses the problems and weighs up the necessary compromises ‚Äî from high-level design changes to minute details ‚Äî to create successful standards for the Web.\n\n\n\nI have spent over six years doing PhD research at MIT on the intersection of programming language design and human-computer interaction. My research has been published in top-tier peer-reviewed academic venues.¬† My strong usability background gives me the ability to identify API design pitfalls early on in the design process.\n\n\n\nIn addition, I have been teaching web technologies for over a decade, both to professional web developers, through my numerous talks, workshops, and bestselling book, and as an instructor and course co-creator for MIT. This experience helps me to easily identify aspects of API design that can make a technology difficult to learn and conceptualize.\n\n\n\nIf elected, I will work with the rest of the TAG to:\n\n\n\nEnsure that web technologies are not only powerful, but also learnable and approachable, with a smooth ease-of-use to complexity curve.Ensure that where possible, commonly needed functionality is available through approachable declarative HTML or CSS syntax and not solely through JS APIs.Work towards making the Web platform more extensible, to allow experienced developers to encapsulate complexity and make it available to novice authors, empowering the latter to create compelling content. Steps have been made in this direction with Web Components and the Houdini specifications, but there are still many gaps that need to be addressed.¬†Record design principles that are often implicit knowledge in standards groups, passed on but never recorded. Explicit design principles help us keep technologies internally consistent, but also assist library developers who want to design APIs that are consistent with the Web Platform and feel like a natural extension of it. A great start has been made with the initial drafts of the Design Principles document, but there is still a lot to be done.Guide those seeking TAG review, some of whom may be new to the standards process, to improve their specifications.¬†\n\n\n\nHaving worn all these hats, I can understand and empathize with the needs of designers and developers, authors and implementers, practitioners and academics, putting me in a unique position to help ensure the Web Platform remains consistent, usable, and inclusive.\n\n\n\nI would like to thank Open JS Foundation and Bocoup for graciously funding my TAG-related travel, in the event that I am elected.\n\n\n\nSelected endorsements\n\n\n\nTantek √áelik, Mozilla‚Äôs AC representative, longtime CSS WG member, and creator of many popular technologies:\n\n\n\nI have had the privilege of working with Lea in the CSS Working Group, and in the broader web development community for many years. Lea is an expert in the practical real-world-web technologies of the W3C, how they fit together, has put them into practice, has helped contribute to their evolution, directly in specs and in working groups. She‚Äôs also a passionate user & developer advocate, both of which I think are excellent for the TAG.Source: https://lists.w3.org/Archives/Member/w3c-ac-forum/2021JanMar/0015.html\n\n\n\nFlorian Rivoal, CSS WG Invited Expert and editor of several specifications, elected W3C AB member, ex-Opera:\n\n\n\n\n@LeaVerou will be a great addition to the TAG. She's fantastic at explaining things, which will be very useful given the TAG's role as a coach for everyone else, and her experience on front-end technologies is both wide and deep. Add strong expertise about usability‚Ä¶ Go Lea! https://t.co/WIc56sCrr7‚Äî Florian (@frivoal) December 10, 2020\n\n\n\n\nElika Etemad aka fantasai, prolific editor of dozens of W3C specifications, CSS WG member for over 16 years, and elected W3C AB member:\n\n\n\nOne TPAC long ago, several members of the TAG on a recruiting spree went around asking people to run for the TAG. I personally turned them down for multiple reasons (including that I‚Äôm only a very poor substitute for David Baron), but it occurred to me recently that there was a candidate that they doneed: Lea Verou.Lea is one of those elite developers whose technical expertise ranges across the entire Web platform. She doesn‚Äôt just use HTML, CSS, JS, and SVG, she pushes the boundaries of what they‚Äôre capable of. Meanwhile her authoring experience spans JS libraries to small site design to CSS+HTML print publications, giving her a personal appreciation of a wide variety of use cases.Unlike most other developers in her class, however, Lea also brings her experience working within W3C as a longtime member of the CSS Working Group.I‚Äôve seen firsthand that she is capable of participating at the deep and excruciatingly detailed level that we operate here, and that her attention is not just on the feature at hand but also the system and its usability and coherence as a whole. She knows how the standards process works, how use cases and implementation constraints drive our design decisions, and how participation in the arcane discussions at W3C can make a real difference in the future usability of the Web.I‚Äôm recommending her for the TAG because she‚Äôs able to bring a perspective that is needed and frequently missing from our technical discussions which so often revolve around implementers, and because elevating her to TAG would give her both the opportunity and the empowerment to bring that perspective to more of our Web technology development here at W3C and beyond.Source: https://lists.w3.org/Archives/Member/w3c-ac-forum/2020OctDec/0055.html\n\n\n\nBruce Lawson, Opera alumni, world renowned accessibility expert, speaker, author:\n\n\n\n\nI'd vote @LeaVerou for @w3ctag on a ticket that promises \"powerful, but also learnable and approachable\" web tech and \"where possible, functionality is available through approachable declarative HTML or CSS syntax and not solely through JS APIs\" https://t.co/MFN2BkgYCD‚Äî Bruce Lawson (@brucel) December 8, 2020\n\n\n\n\nBrian Kardell, AC representative for both Open JS Foundation and Igalia:\n\n\n\nThe OpenJS Foundation is very pleased to nominate and offer our support for Lea Verou to the W3C TAG. We believe that she brings a fresh perspective, diverse background and several kinds of insight that would be exceptionally useful in the TAG‚Äôs work.¬†Source: https://www.w3.org/2020/12/07-tag-nominations#lv\n\n\n\nLea Verou is another easy choice for me. Lea brings a really diverse background, set of perspectives and skills to the table. She‚Äôs worked for the W3C, she‚Äôs a great communicator to developers (this is definitely a great skill in TAG whose outreach is important), she‚Äôs worked with small teams, produced a number of popular libraries and helped drive some interesting standards. The OpenJS Foundation was pleased to nominate her, but Frontiers and several others were also supportive. Lea also deserves ‚Äúhigh marks‚Äù.Source: https://bkardell.com/blog/TAG-2021.html",
      "date_published": "2020-11-30T16:52:00.000Z",
      "date_modified": "2020-11-30T16:52:00.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3199",
      "url": "https://lea.verou.me/2020/11/the-case-for-weak-dependencies-in-js/",
      "title": "The case for Weak Dependencies in JS",
      "summary": "Earlier today, I was briefly entertaining the idea of writing a library to wrap and enhance querySelectorAll in certain ways. I thought I‚Äôd rather not introduce a Parsel dependency out of the box, but only use it to parse selectors properly when it‚Äôs available, and use more crude regex when it‚Äôs not (which would cover [‚Ä¶]",
      "content_html": "<p>Earlier today, I was briefly entertaining the idea of writing a library to wrap and enhance querySelectorAll in certain ways. I thought I&#8217;d rather not introduce a <a href=\"http://projects.verou.me/parsel/\">Parsel</a> dependency out of the box, but only use it to parse selectors properly when it&#8217;s available, and use more crude regex when it&#8217;s not (which would cover most use cases for what I wanted to do).</p>\n\n\n\n<p>In the olden days, where every library introduced a global, I could just do:</p>\n\n\n\n<pre class=\"wp-block-code language-javascript\"><code>if (window.Parsel) {\n\tlet ast = Parsel.parse();\n\t// rewrite selector properly, with AST\n}\nelse {\n\t// crude regex replace\n}</code></pre>\n\n\n\n<p>However, with ESM, there doesn&#8217;t seem to be a way to detect whether a module is imported, without actually importing it yourself.</p>\n\n\n\n<p>I <a href=\"https://twitter.com/LeaVerou/status/1329389035249422336\">tweeted</a> about this‚Ä¶</p>\n\n\n\n<span id=\"more-3199\"></span>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">One issue with ESM (and other module systems) is that you can&#39;t have optional dependencies. <br><br>With globals, you could check if a global existed and branch accordingly. With modules, you can&#39;t check if a module is available/loaded without importing it from somewhere.</p>&mdash; Lea Verou (@LeaVerou) <a href=\"https://twitter.com/LeaVerou/status/1329389035249422336?ref_src=twsrc%5Etfw\">November 19, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>I thought this was a common paradigm, and everyone would understand why this was useful. However, I was surprised to find that most people were baffled about my use case. Most of them thought I was either talking about conditional imports, or error recovery after failed imports.</p>\n\n\n\n<p>I suspect it might be because my primary perspective for writing JS is that of a library author, where I do not control the host environment, whereas for most developers, their primary perspective is that of writing JS for a specific app or website.</p>\n\n\n\n<p>After <a href=\"https://twitter.com/LeaVerou/status/1329389035249422336\">Kyle Simpson asked me to elaborate</a> about the use case, I figured a blog post was in order.</p>\n\n\n\n<p>The use case is essentially <strong>progressive enhancement</strong> (in fact, I toyed with the idea of titling this blog post <em><strong>‚ÄúProgressively Enhanced JS‚Äù</strong></em>). If library X is loaded already by other code, do a more elaborate thing and cover all the edge cases, otherwise do a more basic thing. It&#8217;s for dependencies that are not really <strong>depend</strong>encies, but more like <strong>nice-to-haves</strong>.</p>\n\n\n\n<p>We often see modules that do things really well, but use a ton of dependencies and add a lot of weight, even to the simplest of projects, because they need to cater to all the edge cases that we may not care about. We also see modules that are dependency free, but that&#8217;s because lots of things are implemented more crudely, or certain features are not there.</p>\n\n\n\n<p>This paradigm gives you the best of both worlds: <strong>Dependency free</strong> (or low dependency) modules, that can use what&#8217;s available to improve how they do things with <strong>zero additional impact</strong>. </p>\n\n\n\n<p>Using this paradigm, the <strong>size of these dependencies is not a concern</strong>, because they are <strong>optional peer dependencies</strong>, so one can pick the best library for the job without being affected by bundle size. Or even use multiple! One does not even need to pick one dependency for each thing, they can support bigger, more complete libraries when they&#8217;re available and fall back to micro-libraries when they are not.</p>\n\n\n\n<p>Some examples besides the one in the first paragraph:</p>\n\n\n\n<ul><li>A Markdown to HTML converter that also syntax highlights blocks of code if <a href=\"https://prismjs.com\">Prism</a> is present. Or it could even support multiple different highlighters!</li><li>A code editor that uses <a href=\"https://projects.verou.me/incrementable\">Incrementable</a> to make numbers incrementable via arrow keys, if it&#8217;s present</li><li>A templating library that also uses <a href=\"https://bevacqua.github.io/dragula/\">Dragula</a> to make items rearrangable via drag &amp; drop, if present</li><li>A testing framework that uses <a href=\"https://atomiks.github.io/tippyjs/\">Tippy</a> for nice informational popups, when it&#8217;s available</li><li>A code editor that shows code size (in KB) if a library to measure that is included. Same editor can also show gzipped code size if a gzip library is included.</li><li>A UI library that uses a custom element if it&#8217;s available or the closest native one when it&#8217;s not (e.g. a fancy date picker vs <code>&lt;input type=\"date\"&gt;</code> ) when it isn&#8217;t. Or <a href=\"https://projects.verou.me/awesomplete/\">Awesomplete</a> for autocomplete when it&#8217;s available, and fall back to a simple <code>&lt;datalist&gt;</code> when it isn&#8217;t.</li><li>Code that uses a date formatting library when one is already loaded, and falls back to <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\">Intl.DateTimeFormat</a></code> when it&#8217;s not.</li></ul>\n\n\n\n<p>This pattern can even be <strong>combined with conditional loading</strong>: e.g. we check for all known syntax highlighters and load Prism if none are present.</p>\n\n\n\n<p>To recap, some of the <strong>main benefits</strong> are:</p>\n\n\n\n<ul><li><strong>Performance:</strong> If you&#8217;re loading modules over the network HTTP requests are expensive. If you&#8217;re pre-bundling it increases bundle size. Even if code size is not a concern, runtime performance is affected if you take the slow but always correct path when you don&#8217;t need it and a more crude approach would satisfice.</li><li><strong>Choice:</strong> Instead of picking one library for the thing you need, you can support multiple. E.g. multiple syntax highlighters, multiple Markdown parsers etc. If a library is always needed to do the thing you want, you can load it conditionally, if none of the ones you support are loaded already.</li></ul>\n\n\n\n<h2>Are weak dependencies an antipattern?</h2>\n\n\n\n<p>Since this article was posted, some of the feedback I got was along the lines of <em>&#8220;Weak dependencies are an antipattern because they are unpredictable. What if you have included a library but don&#8217;t want another library to use it? You should instead use parameters to explicitly provide references to these libraries.&#8221;</em></p>\n\n\n\n<p>There are several counterpoints to make here.</p>\n\n\n\n<p>First, if weak dependencies are used well, they are only used to <em>enhance</em> the default/basic behavior, so it&#8217;s highly unlikely that you&#8217;d want to turn that off and fall back to the default behavior.</p>\n\n\n\n<p>Second, weak dependencies and parameter injection are not mutually exclusive. They can work together and complement each other, so that the weak dependencies provide sensible defaults that the parameters can then tweak further (or disable altogether). <em>Only</em> having parameter injection imposes a high upfront cognitive cost for using the library (see <em><a href=\"https://en.wikipedia.org/wiki/Convention_over_configuration\">Convention over Configuration</a></em>). <strong>Good APIs make simple things easy and complex things possible.</strong> The common case is that if you&#8217;ve loaded e.g. a syntax highlighter, you&#8217;d want to use it to syntax highlight, and if you&#8217;ve loaded a parser, you&#8217;d prefer it over parsing with regexes. The obscure edge cases where you wouldn&#8217;t want to highlight or you want to provide a different parser can still be possible via parameters, but should not be the only way.</p>\n\n\n\n<p>Third, the end user-developer may not even be aware of all the libraries that are being loaded, so they may already have a library loaded for a certain task but not know about it. The weak dependencies pattern operates directly on which modules are loaded so it doesn&#8217;t suffer from this problem.</p>\n\n\n\n<h2>How could this work with ESM?</h2>\n\n\n\n<p>Some people (mostly fellow library authors) *did* understand what I was talking about, and expressed some ideas about how this would work.</p>\n\n\n\n<p><strong>Idea 1:</strong> A global module loaded cache could be a low-level way to implement this, and something CJS supports out of the box apparently.</p>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">CommonJS exposes the cache &#8230; maybe ESM could follow, handy also for cache invalidation and code coverage with tests &#8230; indeed my tests are all CommonJS and I *can‚Äôt* change that <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f614.png\" alt=\"üòî\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>&mdash; Andrea Giammarchi <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f365.png\" alt=\"üç•\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> (@WebReflection) <a href=\"https://twitter.com/WebReflection/status/1329396560694796290?ref_src=twsrc%5Etfw\">November 19, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p><strong>Idea 2:</strong> A global registry where modules can register themselves on, either with an identifier, or a SHA hash<br /><strong>Idea 3:</strong> An <code>import.whenDefined(moduleURL)</code> promise, though that makes it difficult to deal with the module not being present at all, which is the whole point.</p>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">an ugly way could be to:<br>globalThis[Symbol.for(moduleName)] = true;<br>in the main module export/file<br><br>another way I use with uce is to pass through customElements.whenDefined(&#39;uce-lib&#39;).then(&#8230;) so that if nobody imports &#39;uce&#39; nothing happens<br><br>import.whenDefined(module).then(&#8230;)?</p>&mdash; Andrea Giammarchi <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f365.png\" alt=\"üç•\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> (@WebReflection) <a href=\"https://twitter.com/WebReflection/status/1329420308491677696?ref_src=twsrc%5Etfw\">November 19, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">If it exported a known SHA. a could be solved</p>&mdash; James Campbell (@jcampbell_05) <a href=\"https://twitter.com/jcampbell_05/status/1329413956474187777?ref_src=twsrc%5Etfw\">November 19, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p><strong>Idea 4:</strong> Monitoring <code>&lt;link rel=\"modulepreload\"&gt;</code>. The problem is that not all modules are loaded this way.</p>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">I had a few things in mind:<br><br>&#8211; if the tag is present in the page, you could assume it&#39;s either present or will be very soon (already loading), so that might/should be a safe enough signal for your use-case<br><br>&#8211; you could also attach a load event handler to the tag to observe it</p>&mdash; getify (@getify) <a href=\"https://twitter.com/getify/status/1329407281797222401?ref_src=twsrc%5Etfw\">November 19, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p><strong>Idea 5:</strong> I was thinking of a function like <code>import()</code> that resolves with the module (same as a regular dynamic import) only when the module is already loaded, or rejects when it&#8217;s not (which can be caught). In fact, it could even use the same functional notation, with a second argument, like so:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import(\"https://cool-library\", {weak: true});</code></pre>\n\n\n\n<p>Nearly all of these proposals suffer from one of the following problems.</p>\n\n\n\n<p>Those that are <strong>URL based</strong> mean that only modules loaded from the same URL would be recognized. The same library loaded over a CDN vs locally would not be recognized as the same library. </p>\n\n\n\n<p>One way around this is to expose a list of URLs, like the first idea, and allow to listen for changes to it. Then these URLs can be inspected and those which <em><strong>might</strong></em> belong to the module we are looking for can be further inspected by dynamically importing and inspecting their exports (importing already imported modules is a pretty cheap operation, the browser does de-duplicate the request).</p>\n\n\n\n<p>Those that are <strong>identifier based</strong>, depend on the module to register itself with an identifier, so only modules that want to be exposed, will be. This is the closest to the old global situation, but would suffer in the transitional period until most modules use it. And of course, there is the potential for clashes. Though the API could take care of that, by essentially using a hashtable and adding all modules that register themselves with the same identifier under the same &#8220;bucket&#8221;. Code reading the registry would then be responsible for filtering.</p>\n\n\n\n<p></p>",
      "content_text": "Earlier today, I was briefly entertaining the idea of writing a library to wrap and enhance querySelectorAll in certain ways. I thought I‚Äôd rather not introduce a Parsel dependency out of the box, but only use it to parse selectors properly when it‚Äôs available, and use more crude regex when it‚Äôs not (which would cover most use cases for what I wanted to do).\n\n\n\nIn the olden days, where every library introduced a global, I could just do:\n\n\n\nif (window.Parsel) {\n\tlet ast = Parsel.parse();\n\t// rewrite selector properly, with AST\n}\nelse {\n\t// crude regex replace\n}\n\n\n\nHowever, with ESM, there doesn‚Äôt seem to be a way to detect whether a module is imported, without actually importing it yourself.\n\n\n\nI tweeted about this‚Ä¶\n\n\n\n\n\n\n\n\nOne issue with ESM (and other module systems) is that you can't have optional dependencies. With globals, you could check if a global existed and branch accordingly. With modules, you can't check if a module is available/loaded without importing it from somewhere.‚Äî Lea Verou (@LeaVerou) November 19, 2020\n\n\n\n\nI thought this was a common paradigm, and everyone would understand why this was useful. However, I was surprised to find that most people were baffled about my use case. Most of them thought I was either talking about conditional imports, or error recovery after failed imports.\n\n\n\nI suspect it might be because my primary perspective for writing JS is that of a library author, where I do not control the host environment, whereas for most developers, their primary perspective is that of writing JS for a specific app or website.\n\n\n\nAfter Kyle Simpson asked me to elaborate about the use case, I figured a blog post was in order.\n\n\n\nThe use case is essentially progressive enhancement (in fact, I toyed with the idea of titling this blog post ‚ÄúProgressively Enhanced JS‚Äù). If library X is loaded already by other code, do a more elaborate thing and cover all the edge cases, otherwise do a more basic thing. It‚Äôs for dependencies that are not really dependencies, but more like nice-to-haves.\n\n\n\nWe often see modules that do things really well, but use a ton of dependencies and add a lot of weight, even to the simplest of projects, because they need to cater to all the edge cases that we may not care about. We also see modules that are dependency free, but that‚Äôs because lots of things are implemented more crudely, or certain features are not there.\n\n\n\nThis paradigm gives you the best of both worlds: Dependency free (or low dependency) modules, that can use what‚Äôs available to improve how they do things with zero additional impact. \n\n\n\nUsing this paradigm, the size of these dependencies is not a concern, because they are optional peer dependencies, so one can pick the best library for the job without being affected by bundle size. Or even use multiple! One does not even need to pick one dependency for each thing, they can support bigger, more complete libraries when they‚Äôre available and fall back to micro-libraries when they are not.\n\n\n\nSome examples besides the one in the first paragraph:\n\n\n\nA Markdown to HTML converter that also syntax highlights blocks of code if Prism is present. Or it could even support multiple different highlighters!A code editor that uses Incrementable to make numbers incrementable via arrow keys, if it‚Äôs presentA templating library that also uses Dragula to make items rearrangable via drag & drop, if presentA testing framework that uses Tippy for nice informational popups, when it‚Äôs availableA code editor that shows code size (in KB) if a library to measure that is included. Same editor can also show gzipped code size if a gzip library is included.A UI library that uses a custom element if it‚Äôs available or the closest native one when it‚Äôs not (e.g. a fancy date picker vs <input type=\"date\"> ) when it isn‚Äôt. Or Awesomplete for autocomplete when it‚Äôs available, and fall back to a simple <datalist> when it isn‚Äôt.Code that uses a date formatting library when one is already loaded, and falls back to Intl.DateTimeFormat when it‚Äôs not.\n\n\n\nThis pattern can even be combined with conditional loading: e.g. we check for all known syntax highlighters and load Prism if none are present.\n\n\n\nTo recap, some of the main benefits are:\n\n\n\nPerformance: If you‚Äôre loading modules over the network HTTP requests are expensive. If you‚Äôre pre-bundling it increases bundle size. Even if code size is not a concern, runtime performance is affected if you take the slow but always correct path when you don‚Äôt need it and a more crude approach would satisfice.Choice: Instead of picking one library for the thing you need, you can support multiple. E.g. multiple syntax highlighters, multiple Markdown parsers etc. If a library is always needed to do the thing you want, you can load it conditionally, if none of the ones you support are loaded already.\n\n\n\nAre weak dependencies an antipattern?\n\n\n\nSince this article was posted, some of the feedback I got was along the lines of ‚ÄúWeak dependencies are an antipattern because they are unpredictable. What if you have included a library but don‚Äôt want another library to use it? You should instead use parameters to explicitly provide references to these libraries.‚Äù\n\n\n\nThere are several counterpoints to make here.\n\n\n\nFirst, if weak dependencies are used well, they are only used to enhance the default/basic behavior, so it‚Äôs highly unlikely that you‚Äôd want to turn that off and fall back to the default behavior.\n\n\n\nSecond, weak dependencies and parameter injection are not mutually exclusive. They can work together and complement each other, so that the weak dependencies provide sensible defaults that the parameters can then tweak further (or disable altogether). Only having parameter injection imposes a high upfront cognitive cost for using the library (see Convention over Configuration). Good APIs make simple things easy and complex things possible. The common case is that if you‚Äôve loaded e.g. a syntax highlighter, you‚Äôd want to use it to syntax highlight, and if you‚Äôve loaded a parser, you‚Äôd prefer it over parsing with regexes. The obscure edge cases where you wouldn‚Äôt want to highlight or you want to provide a different parser can still be possible via parameters, but should not be the only way.\n\n\n\nThird, the end user-developer may not even be aware of all the libraries that are being loaded, so they may already have a library loaded for a certain task but not know about it. The weak dependencies pattern operates directly on which modules are loaded so it doesn‚Äôt suffer from this problem.\n\n\n\nHow could this work with ESM?\n\n\n\nSome people (mostly fellow library authors) *did* understand what I was talking about, and expressed some ideas about how this would work.\n\n\n\nIdea 1: A global module loaded cache could be a low-level way to implement this, and something CJS supports out of the box apparently.\n\n\n\n\nCommonJS exposes the cache ‚Ä¶ maybe ESM could follow, handy also for cache invalidation and code coverage with tests ‚Ä¶ indeed my tests are all CommonJS and I *can‚Äôt* change that ‚Äî Andrea Giammarchi  (@WebReflection) November 19, 2020\n\n\n\n\nIdea 2: A global registry where modules can register themselves on, either with an identifier, or a SHA hashIdea 3: An import.whenDefined(moduleURL) promise, though that makes it difficult to deal with the module not being present at all, which is the whole point.\n\n\n\n\nan ugly way could be to:globalThis[Symbol.for(moduleName)] = true;in the main module export/fileanother way I use with uce is to pass through customElements.whenDefined('uce-lib').then(‚Ä¶) so that if nobody imports 'uce' nothing happensimport.whenDefined(module).then(‚Ä¶)?‚Äî Andrea Giammarchi  (@WebReflection) November 19, 2020\n\n\n\n\n\nIf it exported a known SHA. a could be solved‚Äî James Campbell (@jcampbell_05) November 19, 2020\n\n\n\n\nIdea 4: Monitoring <link rel=\"modulepreload\">. The problem is that not all modules are loaded this way.\n\n\n\n\nI had a few things in mind:‚Äì if the tag is present in the page, you could assume it's either present or will be very soon (already loading), so that might/should be a safe enough signal for your use-case‚Äì you could also attach a load event handler to the tag to observe it‚Äî getify (@getify) November 19, 2020\n\n\n\n\nIdea 5: I was thinking of a function like import() that resolves with the module (same as a regular dynamic import) only when the module is already loaded, or rejects when it‚Äôs not (which can be caught). In fact, it could even use the same functional notation, with a second argument, like so:\n\n\n\nimport(\"https://cool-library\", {weak: true});\n\n\n\nNearly all of these proposals suffer from one of the following problems.\n\n\n\nThose that are URL based mean that only modules loaded from the same URL would be recognized. The same library loaded over a CDN vs locally would not be recognized as the same library. \n\n\n\nOne way around this is to expose a list of URLs, like the first idea, and allow to listen for changes to it. Then these URLs can be inspected and those which might belong to the module we are looking for can be further inspected by dynamically importing and inspecting their exports (importing already imported modules is a pretty cheap operation, the browser does de-duplicate the request).\n\n\n\nThose that are identifier based, depend on the module to register itself with an identifier, so only modules that want to be exposed, will be. This is the closest to the old global situation, but would suffer in the transitional period until most modules use it. And of course, there is the potential for clashes. Though the API could take care of that, by essentially using a hashtable and adding all modules that register themselves with the same identifier under the same ‚Äúbucket‚Äù. Code reading the registry would then be responsible for filtering.\n\n\n\n",
      "date_published": "2020-11-19T16:18:51.000Z",
      "date_modified": "2020-11-19T16:18:51.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3178",
      "url": "https://lea.verou.me/2020/11/simple-pie-charts-with-fallback-today/",
      "title": "Simple pie charts with fallback, today",
      "summary": "Five years ago, I had written this extensive Smashing Magazine article detailing multiple different methods for creating simple pie charts, either with clever use of transforms and pseudo-elements, or with SVG stroke-dasharray. In the end, I mentioned creating pie charts with conic gradients, as a future technique. It was actually a writeup of my ‚ÄúThe [‚Ä¶]",
      "content_html": "<p>Five years ago, I had written <a href=\"https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\">this extensive Smashing Magazine article</a> detailing multiple different methods for creating simple pie charts, either with clever use of transforms and pseudo-elements, or with SVG <code>stroke-dasharray</code>. In the end, I mentioned creating pie charts with conic gradients, as a future technique. It was actually a writeup of <a href=\"https://www.youtube.com/results?search_query=verou+missing+slice&amp;page&amp;utm_source=opensearch\">my &#8220;The Missing Slice&#8221; talk</a>, and an excerpt of my <a href=\"http://www.amazon.com/CSS-Secrets-Lea-Verou/dp/1449372635?tag=leaverou-20\">CSS Secrets book</a>, which had just been published.</p>\n\n\n\n<p>I was reminded of this article today by someone on Twitter:</p>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">So it turns out, building pie charts with pure CSS and HTML is insanely difficult! Here&#39;s how to do it with older browser support: <a href=\"https://t.co/0B4DHmMRU2\">https://t.co/0B4DHmMRU2</a>.<br><br>Thank you <a href=\"https://twitter.com/LeaVerou?ref_src=twsrc%5Etfw\">@LeaVerou</a> for such a genius solution.<a href=\"https://twitter.com/hashtag/frontenddev?src=hash&amp;ref_src=twsrc%5Etfw\">#frontenddev</a> <a href=\"https://twitter.com/hashtag/frontenddevelopment?src=hash&amp;ref_src=twsrc%5Etfw\">#frontenddevelopment</a> <a href=\"https://twitter.com/hashtag/html?src=hash&amp;ref_src=twsrc%5Etfw\">#html</a> <a href=\"https://twitter.com/hashtag/css?src=hash&amp;ref_src=twsrc%5Etfw\">#css</a></p>&mdash; Sam (@sam_kent_) <a href=\"https://twitter.com/sam_kent_/status/1326805431390531584?ref_src=twsrc%5Etfw\">November 12, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>I suggested conic gradients, since they are <a href=\"https://caniuse.com/css-conic-gradients\">now supported in &gt;87% of users&#8217; browsers</a>, but he needed to support IE11. He suggested using <a href=\"https://projects.verou.me/conic-gradient/\">my polyfill</a> from back then, but this is not a very good idea today.</p>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">What kind of IE11 support? &#39;cause I would totally go with conic-gradients and fall back to a simpler progress bar kind of thing for browsers that don&#39;t support it<br>Polyfills can impact performance, and alternative techniques for creating conic gradients are quite hard to maintain</p>&mdash; Facundo Corradini (@fcorradini) <a href=\"https://twitter.com/fcorradini/status/1326880827825905665?ref_src=twsrc%5Etfw\">November 12, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>Indeed, unless you <em>really</em> need to display conic gradients, even I would not recommend using the polyfill on a production facing site. It requires <a href=\"https://projects.verou.me/prefixfree/\">-prefix-free</a>, which re-fetches (albeit from cache) your entire CSS and sticks it in a <code>&lt;style&gt;</code> element, with no sourcemaps since those were not a thing back when -prefix-free was written. If you&#8217;re already using -prefix-free, the polyfill is great, but if not, it&#8217;s way too heavy a dependency.</p>\n\n\n\n<h3>Pie charts with fallback (modern browsers)</h3>\n\n\n\n<p>Instead, what I would recommend is graceful degradation, i.e. to use the same color stops, but in a linear gradient.</p>\n\n\n\n<span id=\"more-3178\"></span>\n\n\n\n<p>We can use <code>@supports</code> and have quite an elaborate progress bar fallback. For example, take a look at this 40% pie chart:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.pie {\n\theight: 20px;\n\tbackground: linear-gradient(to right, deeppink 40%, transparent 0);\n\tbackground-color: gold;\n}\n\n@supports (background: conic-gradient(white, black)) {\n\t.pie {\n\t\twidth: 200px; height: 200px;\n\t\tbackground-image: conic-gradient(deeppink 40%, transparent 0);\n\t\tborder-radius: 50%;\n\t}\n}</code></pre>\n\n\n\n<iframe src=\"https://dabblet.com/gist/9a05fd9dad59b6c0edfb99d49a7a4426\" style=\"border: 0; width: 100%; height: 500px;\"></iframe>\n\n\n\n<p>This is what it looks like in Firefox 82 (conic gradients are scheduled to ship unflagged in Firefox 83) or IE11:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1278\" height=\"76\" src=\"https://lea.verou.me/wp-content/uploads/2020/11/image.png\" alt=\"\" class=\"wp-image-3180\"/></figure>\n\n\n\n<p>Note that because <code>@supports</code> is only used for the pie and not the fallback, the lack of IE11 support for it doesn&#8217;t affect us one iota.</p>\n\n\n\n<p>If relatively modern browsers are all we care about, we could even use CSS variables for the percentage and the color stops, to avoid duplication, and to be able to set the percentage from the markup:</p>\n\n\n\n<pre class=\"wp-block-code language-markup\"><code>&lt;div class=\"pie\" style=\"--p: 40%\">&lt;/div></code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>.pie {\n\theight: 20px;\n\t--stops: deeppink var(--p, 0%), transparent 0;\n\tbackground: linear-gradient(to right, var(--stops));\n\tbackground-color: gold;\n}\n\n@supports (background: conic-gradient(white, black)) {\n\t.pie {\n\t\twidth: 200px; height: 200px;\n\t\tbackground-image: conic-gradient(var(--stops));\n\t\tborder-radius: 50%;\n\t}\n}</code></pre>\n\n\n\n<p>You can use a similar approach for 3 or more segments, or for a vertical bar.</p>\n\n\n\n<p>One issue with this approach is that our layout needs to work well with two charts of completely different proportions. To avoid that, we could just use a square:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.pie {\n\twidth: 200px; \n\theight: 200px;\n\tbackground: linear-gradient(to right, deeppink 40%, transparent 0) gold;\n}\n\n@supports (background: conic-gradient(white, black)) {\n\t.pie {\n\t\tbackground-image: conic-gradient(deeppink 40%, transparent 0);\n\t\tborder-radius: 50%;\n\t}\n}</code></pre>\n\n\n\n<p>which produces this in IE11:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"420\" height=\"416\" src=\"https://lea.verou.me/wp-content/uploads/2020/11/image-8.png\" alt=\"\" class=\"wp-image-3196\"/></figure>\n\n\n\n<p>Granted, a square progress bar is not the same, but it can still convey the same relationship and is easier to design a layout around it since it always has the same aspect ratio.</p>\n\n\n\n<h3>Why not use radial gradients?</h3>\n\n\n\n<p>You might be wondering, why not just use a radial gradient, which could use the same dimensions and rounding. Something like this:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"434\" height=\"430\" src=\"https://lea.verou.me/wp-content/uploads/2020/11/image-4.png\" alt=\"\" class=\"wp-image-3186\"/></figure>\n\n\n\n<p>There are two problems with this. The first one may be obvious: Horizontal or vertical bars are common for showing the proportional difference between two amounts, albeit less good than a pie chart because it&#8217;s harder to compare with 50% at a glance (<em>yes Tufte, pie charts can be better for some things!</em>). Such circular graphs are very uncommon. And for good reason: Drawn naively (e.g. in our case if the radius of the pink circle is 40% of the radius of the yellow circle), their areas do not have the relative relationship we want to depict.</p>\n\n\n\n<p>Why is that? Let <em>r</em> be the radius of the yellow circle. As we know from middle school, the area of the entire circle is œÄ<em>r</em>¬≤, so the area of the yellow ring is œÄ<em>r</em>¬≤ &#8211; (area of pink circle). The area of the pink circle is œÄ(0.4<em>r</em>)¬≤ = 0.16œÄ<em>r</em>¬≤. Therefore, the area of the yellow ring is œÄ<em>r</em>¬≤ &#8211; 0.16œÄ<em>r</em>¬≤ = 0.84œÄ<em>r</em>¬≤ and their relative ratio is 0.16œÄ<em>r</em>¬≤ / 0.84œÄ<em>r</em>¬≤ = 0.16 / 0.84 ‚âÖ 0.19 which is a far cry from the 40/60 (‚âÖ 0.67) we were looking for!</p>\n\n\n\n<p>Instead, if we wanted to draw a similar visualization to depict the correct relationship, we need to start from the ratio and work our way backwards. Let <em>r</em> be the radius of the yellow circle and <em>kr</em> the radius of the pink circle. Their ratio is œÄ(<em>kr</em>)¬≤ / (œÄ<em>r</em>¬≤ &#8211; œÄ(<em>kr</em>)¬≤) = 4/6 ‚áí<br /><em>k</em>¬≤ / (1 &#8211; <em>k</em>¬≤) = 4/6 ‚áí<br />(1 &#8211; <em>k</em>¬≤) / <em>k</em>¬≤ = 6/4 ‚áí<br />1/<em>k</em>¬≤ &#8211; 1 = 6/4 ‚áí<br />1/<em>k</em>¬≤ = 10/4 ‚áí<br />k = 2 / sqrt(10) ‚âÖ .632<br />Therefore, the radius of the pink circle should be around 63.2% of the radius of the yellow circle, and a more correct chart would look like this:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"426\" height=\"434\" src=\"https://lea.verou.me/wp-content/uploads/2020/11/image-7.png\" alt=\"\" class=\"wp-image-3189\"/></figure>\n\n\n\n<p>In the general case where the pink circle is depicting the percentage <em>p</em>, we&#8217;d want the radius of the pink circle to be sqrt(1 / <em>p</em>) the size of the yellow circle. That&#8217;s a fair bit of calculations that we can&#8217;t yet automate (though <a href=\"https://www.w3.org/TR/css-values/#exponent-funcs\"><code>sqrt()</code> is coming</a>!). Moral of the story: use a bar as your fallback!</p>",
      "content_text": "Five years ago, I had written this extensive Smashing Magazine article detailing multiple different methods for creating simple pie charts, either with clever use of transforms and pseudo-elements, or with SVG stroke-dasharray. In the end, I mentioned creating pie charts with conic gradients, as a future technique. It was actually a writeup of my ‚ÄúThe Missing Slice‚Äù talk, and an excerpt of my CSS Secrets book, which had just been published.\n\n\n\nI was reminded of this article today by someone on Twitter:\n\n\n\n\nSo it turns out, building pie charts with pure CSS and HTML is insanely difficult! Here's how to do it with older browser support: https://t.co/0B4DHmMRU2.Thank you @LeaVerou for such a genius solution.#frontenddev #frontenddevelopment #html #css‚Äî Sam (@sam_kent_) November 12, 2020\n\n\n\n\nI suggested conic gradients, since they are now supported in >87% of users‚Äô browsers, but he needed to support IE11. He suggested using my polyfill from back then, but this is not a very good idea today.\n\n\n\n\nWhat kind of IE11 support? 'cause I would totally go with conic-gradients and fall back to a simpler progress bar kind of thing for browsers that don't support itPolyfills can impact performance, and alternative techniques for creating conic gradients are quite hard to maintain‚Äî Facundo Corradini (@fcorradini) November 12, 2020\n\n\n\n\nIndeed, unless you really need to display conic gradients, even I would not recommend using the polyfill on a production facing site. It requires -prefix-free, which re-fetches (albeit from cache) your entire CSS and sticks it in a <style> element, with no sourcemaps since those were not a thing back when -prefix-free was written. If you‚Äôre already using -prefix-free, the polyfill is great, but if not, it‚Äôs way too heavy a dependency.\n\n\n\nPie charts with fallback (modern browsers)\n\n\n\nInstead, what I would recommend is graceful degradation, i.e. to use the same color stops, but in a linear gradient.\n\n\n\n\n\n\n\nWe can use @supports and have quite an elaborate progress bar fallback. For example, take a look at this 40% pie chart:\n\n\n\n.pie {\n\theight: 20px;\n\tbackground: linear-gradient(to right, deeppink 40%, transparent 0);\n\tbackground-color: gold;\n}\n\n@supports (background: conic-gradient(white, black)) {\n\t.pie {\n\t\twidth: 200px; height: 200px;\n\t\tbackground-image: conic-gradient(deeppink 40%, transparent 0);\n\t\tborder-radius: 50%;\n\t}\n}\n\n\n\n\n\n\n\nThis is what it looks like in Firefox 82 (conic gradients are scheduled to ship unflagged in Firefox 83) or IE11:\n\n\n\n\n\n\n\nNote that because @supports is only used for the pie and not the fallback, the lack of IE11 support for it doesn‚Äôt affect us one iota.\n\n\n\nIf relatively modern browsers are all we care about, we could even use CSS variables for the percentage and the color stops, to avoid duplication, and to be able to set the percentage from the markup:\n\n\n\n<div class=\"pie\" style=\"--p: 40%\"></div>\n\n\n\n.pie {\n\theight: 20px;\n\t--stops: deeppink var(--p, 0%), transparent 0;\n\tbackground: linear-gradient(to right, var(--stops));\n\tbackground-color: gold;\n}\n\n@supports (background: conic-gradient(white, black)) {\n\t.pie {\n\t\twidth: 200px; height: 200px;\n\t\tbackground-image: conic-gradient(var(--stops));\n\t\tborder-radius: 50%;\n\t}\n}\n\n\n\nYou can use a similar approach for 3 or more segments, or for a vertical bar.\n\n\n\nOne issue with this approach is that our layout needs to work well with two charts of completely different proportions. To avoid that, we could just use a square:\n\n\n\n.pie {\n\twidth: 200px; \n\theight: 200px;\n\tbackground: linear-gradient(to right, deeppink 40%, transparent 0) gold;\n}\n\n@supports (background: conic-gradient(white, black)) {\n\t.pie {\n\t\tbackground-image: conic-gradient(deeppink 40%, transparent 0);\n\t\tborder-radius: 50%;\n\t}\n}\n\n\n\nwhich produces this in IE11:\n\n\n\n\n\n\n\nGranted, a square progress bar is not the same, but it can still convey the same relationship and is easier to design a layout around it since it always has the same aspect ratio.\n\n\n\nWhy not use radial gradients?\n\n\n\nYou might be wondering, why not just use a radial gradient, which could use the same dimensions and rounding. Something like this:\n\n\n\n\n\n\n\nThere are two problems with this. The first one may be obvious: Horizontal or vertical bars are common for showing the proportional difference between two amounts, albeit less good than a pie chart because it‚Äôs harder to compare with 50% at a glance (yes Tufte, pie charts can be better for some things!). Such circular graphs are very uncommon. And for good reason: Drawn naively (e.g. in our case if the radius of the pink circle is 40% of the radius of the yellow circle), their areas do not have the relative relationship we want to depict.\n\n\n\nWhy is that? Let r be the radius of the yellow circle. As we know from middle school, the area of the entire circle is œÄr¬≤, so the area of the yellow ring is œÄr¬≤ ‚Äì (area of pink circle). The area of the pink circle is œÄ(0.4r)¬≤ = 0.16œÄr¬≤. Therefore, the area of the yellow ring is œÄr¬≤ ‚Äì 0.16œÄr¬≤ = 0.84œÄr¬≤ and their relative ratio is 0.16œÄr¬≤ / 0.84œÄr¬≤ = 0.16 / 0.84 ‚âÖ 0.19 which is a far cry from the 40/60 (‚âÖ 0.67) we were looking for!\n\n\n\nInstead, if we wanted to draw a similar visualization to depict the correct relationship, we need to start from the ratio and work our way backwards. Let r be the radius of the yellow circle and kr the radius of the pink circle. Their ratio is œÄ(kr)¬≤ / (œÄr¬≤ ‚Äì œÄ(kr)¬≤) = 4/6 ‚áík¬≤ / (1 ‚Äì k¬≤) = 4/6 ‚áí(1 ‚Äì k¬≤) / k¬≤ = 6/4 ‚áí1/k¬≤ ‚Äì 1 = 6/4 ‚áí1/k¬≤ = 10/4 ‚áík = 2 / sqrt(10) ‚âÖ .632Therefore, the radius of the pink circle should be around 63.2% of the radius of the yellow circle, and a more correct chart would look like this:\n\n\n\n\n\n\n\nIn the general case where the pink circle is depicting the percentage p, we‚Äôd want the radius of the pink circle to be sqrt(1 / p) the size of the yellow circle. That‚Äôs a fair bit of calculations that we can‚Äôt yet automate (though sqrt() is coming!). Moral of the story: use a bar as your fallback!",
      "date_published": "2020-11-12T14:58:38.000Z",
      "date_modified": "2020-11-12T14:58:38.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3162",
      "url": "https://lea.verou.me/2020/10/the-var-space-hack-to-toggle-multiple-values-with-one-custom-property/",
      "title": "The -‚Äã-var: ; hack to toggle multiple values with one custom property",
      "summary": "What if I told you you could use a single property value to turn multiple different values on and off across multiple different properties and even across multiple CSS rules? What if I told you you could turn this flat button into a glossy skeuomorphic button by just tweaking one custom property --is-raised, and that [‚Ä¶]",
      "content_html": "<p>What if I told you you could use a single property value to turn multiple different values on and off across multiple different properties and even across multiple CSS rules?</p>\n\n\n\n<p>What if I told you you could turn this flat button into a glossy skeuomorphic button by just tweaking one custom property <code>--is-raised</code>, and that would set its border, background image, box and text shadows in one fell swoop?</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"352\" height=\"114\" src=\"https://lea.verou.me/wp-content/uploads/2020/10/image-1.png\" alt=\"\" class=\"wp-image-3164\"/></figure>\n\n\n\n<span id=\"more-3162\"></span>\n\n\n\n<iframe src=\"https://dabblet.com/gist/055d4c1d9590250d6633bdf63e37f9ca\" style=\"border: 0; width: 100%; min-height: 500px\"></iframe>\n\n\n\n<p></p>\n\n\n\n<p><em>How</em>, you may ask?</p>\n\n\n\n<p>The crux of this technique is this: There are two custom property values that work almost everywhere there is a <code>var()</code> call with a fallback.</p>\n\n\n\n<p>The more obvious one that you probably already know is the <code>initial</code> value, which makes the property just apply its fallback. So, in the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>background: var(--foo, linear-gradient(white, transparent)) hsl(220 10% 50%);\nborder: 1px solid var(--foo, rgb(0 0 0 / .1));\ncolor: rgb(0 0 0 var(--foo, / .8));</code></pre>\n\n\n\n<p>We can set <code>--foo</code> to <code>initial</code> to enable these &#8220;fallbacks&#8221; and append these values to the property value, adding a gradient, setting a border-color, and making the text color translucent in one go. But what to do when we want to turn these values <em>off</em>? Any non-initial value for <code>--foo</code> (that doesn&#8217;t create cycles) should work. But is there one that works in all three declarations?</p>\n\n\n\n<p>It turns out there <em>is</em> another value that works everywhere, in every property a <code>var()</code> reference is present, and you&#8217;d likely never guess what it is (unless you have watched any of my CSS variable talks and have a good memory for passing mentions of things).</p>\n\n\n\n<p><em>Intrigued?</em></p>\n\n\n\n<p>It&#8217;s whitespace! <strong>Whitespace is significant in a custom property.</strong> When you write something like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>--foo: ;</code></pre>\n\n\n\n<p>This is <strong>not</strong> an invalid declaration. This is a declaration where the value of <code>--foo</code> is literally one space character. However, whitespace is valid in every CSS property value, everywhere a <code>var()</code> is allowed, and does not affect its computed value in any way. So, we can just set our property to one space (or even a comment) and not affect any other value present in the declaration. E.g. this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>--foo: ;\nbackground: var(--foo, linear-gradient(white, transparent)) hsl(220 10% 50%);</code></pre>\n\n\n\n<p>produces the same result as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>background: hsl(220 10% 50%);</code></pre>\n\n\n\n<p>We can take advantage of this to essentially turn <code>var()</code> into a single-clause <code>if()</code> function and conditionally append values based on a single custom property.</p>\n\n\n\n<p>As a proof of concept, here is the two button demo refactored using this approach:</p>\n\n\n\n<iframe src=\"https://dabblet.com/gist/4524674b9b8c49d88808b10f1d9ce3ec\" style=\"border: 0; width: 100%; min-height: 500px\"></iframe>\n\n\n\n<p></p>\n\n\n\n<h3>Limitations</h3>\n\n\n\n<p>I originally envisioned this as a building block for a <s>technique</s><em> horrible hack</em> to enable &#8220;mixins&#8221; in the browser, since <a href=\"https://www.xanthir.com/b4o00\">@apply is now defunct</a>. However, the big limitation is that this only works for appending values to existing values ‚Äî or setting a property to either a whole value or <code>initial</code>. There is no way to say &#8220;the background should be red if <code>--foo</code> is set and white otherwise&#8221;. Some such conditionals can be emulated with clever use of appending, but not most. </p>\n\n\n\n<p>And of course there&#8217;s a certain readability issue: <code>--foo: ;</code> looks like a mistake and <code>--foo: initial</code> looks pretty weird, unless you&#8217;re aware of this technique. However, that can easily be solved with comments. Or even constants: </p>\n\n\n\n<pre class=\"wp-block-code\"><code>:root {\n\t--ON: initial;\n\t--OFF: ;\n}\n\nbutton {\n\t--is-raised: var(--OFF);\n\t/* ... */\n}\n\n#foo {\n\t--is-raised: var(--ON);\n}</code></pre>\n\n\n\n<p>Also do note that eventually we will get a proper <code>if()</code> and won&#8217;t need such horrible hacks to emulate it, discussions are already underway [<a href=\"https://github.com/w3c/csswg-drafts/issues/5009\">w3c/csswg-drafts#5009</a> <a href=\"https://github.com/w3c/csswg-drafts/issues/4731\">w3c/csswg-drafts#4731</a>].</p>\n\n\n\n<p>So what do you think? Horrible hack, useful technique, or both? <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f600.png\" alt=\"üòÄ\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<h2>Prior art</h2>\n\n\n\n<p>Turns out this was independently discovered by two people before me:</p>\n\n\n\n<ul><li>First, <a href=\"https://twitter.com/anatudor/status/1284160219963170816\">the brilliant Ana Tudor circa 2017</a></li><li>Then <a href=\"https://github.com/propjockey/css-sweeper#css-is-a-programming-language-thanks-to-the-space-toggle-trick\">James0x57 in April 2020</a></li></ul>\n\n\n\n<p>And it was called &#8220;space toggle hack&#8221; in case you want to google it!</p>",
      "content_text": "What if I told you you could use a single property value to turn multiple different values on and off across multiple different properties and even across multiple CSS rules?\n\n\n\nWhat if I told you you could turn this flat button into a glossy skeuomorphic button by just tweaking one custom property --is-raised, and that would set its border, background image, box and text shadows in one fell swoop?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow, you may ask?\n\n\n\nThe crux of this technique is this: There are two custom property values that work almost everywhere there is a var() call with a fallback.\n\n\n\nThe more obvious one that you probably already know is the initial value, which makes the property just apply its fallback. So, in the following code:\n\n\n\nbackground: var(--foo, linear-gradient(white, transparent)) hsl(220 10% 50%);\nborder: 1px solid var(--foo, rgb(0 0 0 / .1));\ncolor: rgb(0 0 0 var(--foo, / .8));\n\n\n\nWe can set --foo to initial to enable these ‚Äúfallbacks‚Äù and append these values to the property value, adding a gradient, setting a border-color, and making the text color translucent in one go. But what to do when we want to turn these values off? Any non-initial value for --foo (that doesn‚Äôt create cycles) should work. But is there one that works in all three declarations?\n\n\n\nIt turns out there is another value that works everywhere, in every property a var() reference is present, and you‚Äôd likely never guess what it is (unless you have watched any of my CSS variable talks and have a good memory for passing mentions of things).\n\n\n\nIntrigued?\n\n\n\nIt‚Äôs whitespace! Whitespace is significant in a custom property. When you write something like this:\n\n\n\n--foo: ;\n\n\n\nThis is not an invalid declaration. This is a declaration where the value of --foo is literally one space character. However, whitespace is valid in every CSS property value, everywhere a var() is allowed, and does not affect its computed value in any way. So, we can just set our property to one space (or even a comment) and not affect any other value present in the declaration. E.g. this:\n\n\n\n--foo: ;\nbackground: var(--foo, linear-gradient(white, transparent)) hsl(220 10% 50%);\n\n\n\nproduces the same result as:\n\n\n\nbackground: hsl(220 10% 50%);\n\n\n\nWe can take advantage of this to essentially turn var() into a single-clause if() function and conditionally append values based on a single custom property.\n\n\n\nAs a proof of concept, here is the two button demo refactored using this approach:\n\n\n\n\n\n\n\n\n\n\n\nLimitations\n\n\n\nI originally envisioned this as a building block for a technique horrible hack to enable ‚Äúmixins‚Äù in the browser, since @apply is now defunct. However, the big limitation is that this only works for appending values to existing values ‚Äî or setting a property to either a whole value or initial. There is no way to say ‚Äúthe background should be red if --foo is set and white otherwise‚Äù. Some such conditionals can be emulated with clever use of appending, but not most. \n\n\n\nAnd of course there‚Äôs a certain readability issue: --foo: ; looks like a mistake and --foo: initial looks pretty weird, unless you‚Äôre aware of this technique. However, that can easily be solved with comments. Or even constants: \n\n\n\n:root {\n\t--ON: initial;\n\t--OFF: ;\n}\n\nbutton {\n\t--is-raised: var(--OFF);\n\t/* ... */\n}\n\n#foo {\n\t--is-raised: var(--ON);\n}\n\n\n\nAlso do note that eventually we will get a proper if() and won‚Äôt need such horrible hacks to emulate it, discussions are already underway [w3c/csswg-drafts#5009 w3c/csswg-drafts#4731].\n\n\n\nSo what do you think? Horrible hack, useful technique, or both? \n\n\n\nPrior art\n\n\n\nTurns out this was independently discovered by two people before me:\n\n\n\nFirst, the brilliant Ana Tudor circa 2017Then James0x57 in April 2020\n\n\n\nAnd it was called ‚Äúspace toggle hack‚Äù in case you want to google it!",
      "date_published": "2020-10-12T15:06:57.000Z",
      "date_modified": "2020-10-12T15:06:57.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3147",
      "url": "https://lea.verou.me/2020/09/the-failed-promise-of-web-components/",
      "title": "The failed promise of Web Components",
      "summary": "Web Components had so much potential to empower HTML to do more, and make web development more accessible to non-programmers and easier for programmers. Remember how exciting it was every time we got new shiny HTML elements that actually do stuff? Remember how exciting it was to be able to do sliders, color pickers, dialogs, [‚Ä¶]",
      "content_html": "<p>Web Components had so much potential to empower HTML to do more, and make web development more accessible to non-programmers and easier for programmers. Remember how exciting it was every time we got new shiny HTML elements that actually <em>do stuff</em>? Remember how exciting it was to be able to do sliders, color pickers, dialogs, disclosure widgets straight in the HTML, without having to include any widget libraries?</p>\n\n\n\n<p>The promise of Web Components was that we&#8217;d get this convenience, but for a much wider range of HTML elements, developed much faster, as nobody needs to wait for the full spec + implementation process. We&#8217;d just include a script, and boom, we have more elements at our disposal!</p>\n\n\n\n<p>Or, that was the idea. Somewhere along the way, the space got flooded by JS frameworks aficionados, who revel in complex APIs, overengineered build processes and dependency graphs that look like the roots of a banyan tree.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://live.staticflickr.com/2025/32441377780_e3acf6de12_b.jpg\" alt=\"\"/><figcaption>This is what the roots of a Banyan tree look like. <a href=\"https://www.flickr.com/photos/79721788@N00/32441377780/\">Photo by David Stanley on Flickr (CC-BY)</a>. </figcaption></figure>\n\n\n\n<span id=\"more-3147\"></span>\n\n\n\n<p>Perusing the components on <a href=\"https://www.webcomponents.org/\">webcomponents.org</a> fills me with anxiety, and I&#8217;m perfectly comfortable writing JS ‚Äî I write JS for a living! What hope do those who can&#8217;t write JS have? Using a custom element from the directory often needs to be preceded by a ritual of npm flugelhorn, import clownshoes, build quux, all completely unapologetically because &#8220;here is my truckload of dependencies, yeah, what&#8221;. Many steps are even omitted, likely because they are &#8220;obvious&#8221;. Often, you wade through the maze only to find the component doesn&#8217;t work anymore, or is not fit for your purpose.</p>\n\n\n\n<p>Besides setup, the main problem is that HTML is not treated with the appropriate respect in the design of these components. They are not designed as closely as possible to standard HTML elements, but <em>expect</em> JS to be written for them to do anything. HTML is simply treated as a shorthand, or worse, as merely a marker to indicate where the element goes in the DOM, with all parameters passed in via JS. I recall <a href=\"https://adactio.com/articles/12839#webcomponents\">a wonderful talk by Jeremy Keith</a> a few years ago about this very phenomenon, where he discussed <a href=\"https://shop.polymer-project.org/\">this e-shop Web components demo by Google</a>, which is the poster child of this practice. These are the entire contents of its <code>&lt;body&gt;</code> element:</p>\n\n\n\n<pre class=\"wp-block-code language-markup\"><code>&lt;body>\n\t&lt;shop-app unresolved=\"\">SHOP&lt;/shop-app>\n\t&lt;script src=\"node_assets/@webcomponents/webcomponentsjs/webcomponents-loader.js\">&lt;/script>\n\t&lt;script type=\"module\" src=\"src/shop-app.js\">&lt;/script>\n\t&lt;script>window.performance&amp;&amp;performance.mark&amp;&amp;performance.mark(\"index.html\");&lt;/script>\n&lt;/body></code></pre>\n\n\n\n<p>If this is how Google is leading the way, how can we hope for contributors to design components that follow established HTML conventions?</p>\n\n\n\n<p>Jeremy criticized this practice from the aspect of backwards compatibility: when JS is broken or not enabled, or the browser doesn&#8217;t support Web Components, the entire website is blank. While this is indeed a serious concern, my primary concern is one of <strong>usability</strong>: <strong>HTML is a lower barrier to entry language</strong>. Far more people can write HTML than JS. Even for those who do eventually write JS, it often comes after spending years writing HTML &amp; CSS.</p>\n\n\n\n<p>If components are designed in a way that requires  JS, this excludes thousands of people from using them. And even for those who <em>can</em> write JS, HTML is often easier: you don&#8217;t see many people rolling their own sliders or using JS-based ones once <code>&lt;input type=\"range\"&gt;</code> became widely supported, right?</p>\n\n\n\n<p>Even when JS is unavoidable, it&#8217;s not black and white. A well designed HTML element can reduce the amount and complexity of JS needed to a minimum. Think of the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog\">&lt;dialog&gt;</a></code> element: it usually does require *some* JS, but it&#8217;s usually rather simple JS. Similarly, the <code>&lt;video&gt;</code> element is perfectly usable just by writing HTML, and has a comprehensive JS API for anyone who wants to do fancy custom things.</p>\n\n\n\n<p>The other day I was looking for a simple, dependency free, tabs component. You know, the canonical example of something that is easy to do with Web Components, the example 50% of tutorials mention. I didn&#8217;t even care what it looked like, it was for a testing interface. I just wanted something that is small and works like a normal HTML element. Yet, it proved so hard I ended up writing my own!</p>\n\n\n\n<h3>Can we fix this?</h3>\n\n\n\n<p>I&#8217;m not sure if this is a design issue, or a documentation issue. Perhaps for many of these web components, there are easier ways to use them. Perhaps there are vanilla web components out there that I just can&#8217;t find. Perhaps I&#8217;m looking in the wrong place and there is another directory somewhere with different goals and a different target audience. </p>\n\n\n\n<p>But if not, and if I&#8217;m not alone in feeling this way, we need a directory of web components with strict inclusion criteria:</p>\n\n\n\n<ul><li><strong>Plug and play.</strong> No dependencies, no setup beyond including one <code>&lt;script&gt;</code> tag. If a dependency is absolutely <em>needed</em> (e.g. in a map component it doesn&#8217;t make sense to draw your own maps), the component loads it automatically if it&#8217;s not already loaded.</li><li>Syntax and API follows <a href=\"https://www.smashingmagazine.com/2017/02/designing-html-apis/\"><strong>conventions established by built-in HTML elements</strong></a> and anything that <em>can</em> be done without the component user writing JS, <em>is</em> doable without JS, per <a href=\"https://www.w3.org/2001/tag/doc/leastPower.html\">the W3C principle of least power</a>.</li><li><strong>Accessible by default</strong> via sensible ARIA defaults, just like normal HTML elements.</li><li><strong>Themable</strong> via <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::part\">::part()</a></code>, selective inheritance and custom properties. Very minimal style by default. Normal CSS properties should just &#8220;work&#8221; to the the extent possible.</li><li><strong>Only one component of a given type</strong> in the directory, that is <strong>flexible</strong> and <strong>extensible</strong> and continuously iterated on and improved by the community. Not 30 different sliders and 15 different tabs that users have to wade through. No branding, no silos of &#8220;component libraries&#8221;. Only elements that are designed as closely as possible to what a browser would implement in every way the current technology allows.</li></ul>\n\n\n\n<p>I would be up for working on this if others feel the same way, since that is not a project for one person to tackle. <em>Who&#8217;s with me?</em></p>\n\n\n\n<p><strong>UPDATE:</strong> Wow this post blew up! Thank you all for your interest in participating in a potential future effort. I&#8217;m currently talking to stakeholders of some of the existing efforts to see if there are any potential collaborations before I go off and create a new one. <a href=\"https://twitter.com/leaverou\">Follow me on Twitter to hear about the outcome</a>!</p>",
      "content_text": "Web Components had so much potential to empower HTML to do more, and make web development more accessible to non-programmers and easier for programmers. Remember how exciting it was every time we got new shiny HTML elements that actually do stuff? Remember how exciting it was to be able to do sliders, color pickers, dialogs, disclosure widgets straight in the HTML, without having to include any widget libraries?\n\n\n\nThe promise of Web Components was that we‚Äôd get this convenience, but for a much wider range of HTML elements, developed much faster, as nobody needs to wait for the full spec + implementation process. We‚Äôd just include a script, and boom, we have more elements at our disposal!\n\n\n\nOr, that was the idea. Somewhere along the way, the space got flooded by JS frameworks aficionados, who revel in complex APIs, overengineered build processes and dependency graphs that look like the roots of a banyan tree.\n\n\n\nThis is what the roots of a Banyan tree look like. Photo by David Stanley on Flickr (CC-BY). \n\n\n\n\n\n\n\nPerusing the components on webcomponents.org fills me with anxiety, and I‚Äôm perfectly comfortable writing JS ‚Äî I write JS for a living! What hope do those who can‚Äôt write JS have? Using a custom element from the directory often needs to be preceded by a ritual of npm flugelhorn, import clownshoes, build quux, all completely unapologetically because ‚Äúhere is my truckload of dependencies, yeah, what‚Äù. Many steps are even omitted, likely because they are ‚Äúobvious‚Äù. Often, you wade through the maze only to find the component doesn‚Äôt work anymore, or is not fit for your purpose.\n\n\n\nBesides setup, the main problem is that HTML is not treated with the appropriate respect in the design of these components. They are not designed as closely as possible to standard HTML elements, but expect JS to be written for them to do anything. HTML is simply treated as a shorthand, or worse, as merely a marker to indicate where the element goes in the DOM, with all parameters passed in via JS. I recall a wonderful talk by Jeremy Keith a few years ago about this very phenomenon, where he discussed this e-shop Web components demo by Google, which is the poster child of this practice. These are the entire contents of its <body> element:\n\n\n\n<body>\n\t<shop-app unresolved=\"\">SHOP</shop-app>\n\t<script src=\"node_assets/@webcomponents/webcomponentsjs/webcomponents-loader.js\"></script>\n\t<script type=\"module\" src=\"src/shop-app.js\"></script>\n\t<script>window.performance&&performance.mark&&performance.mark(\"index.html\");</script>\n</body>\n\n\n\nIf this is how Google is leading the way, how can we hope for contributors to design components that follow established HTML conventions?\n\n\n\nJeremy criticized this practice from the aspect of backwards compatibility: when JS is broken or not enabled, or the browser doesn‚Äôt support Web Components, the entire website is blank. While this is indeed a serious concern, my primary concern is one of usability: HTML is a lower barrier to entry language. Far more people can write HTML than JS. Even for those who do eventually write JS, it often comes after spending years writing HTML & CSS.\n\n\n\nIf components are designed in a way that requires  JS, this excludes thousands of people from using them. And even for those who can write JS, HTML is often easier: you don‚Äôt see many people rolling their own sliders or using JS-based ones once <input type=\"range\"> became widely supported, right?\n\n\n\nEven when JS is unavoidable, it‚Äôs not black and white. A well designed HTML element can reduce the amount and complexity of JS needed to a minimum. Think of the <dialog> element: it usually does require *some* JS, but it‚Äôs usually rather simple JS. Similarly, the <video> element is perfectly usable just by writing HTML, and has a comprehensive JS API for anyone who wants to do fancy custom things.\n\n\n\nThe other day I was looking for a simple, dependency free, tabs component. You know, the canonical example of something that is easy to do with Web Components, the example 50% of tutorials mention. I didn‚Äôt even care what it looked like, it was for a testing interface. I just wanted something that is small and works like a normal HTML element. Yet, it proved so hard I ended up writing my own!\n\n\n\nCan we fix this?\n\n\n\nI‚Äôm not sure if this is a design issue, or a documentation issue. Perhaps for many of these web components, there are easier ways to use them. Perhaps there are vanilla web components out there that I just can‚Äôt find. Perhaps I‚Äôm looking in the wrong place and there is another directory somewhere with different goals and a different target audience. \n\n\n\nBut if not, and if I‚Äôm not alone in feeling this way, we need a directory of web components with strict inclusion criteria:\n\n\n\nPlug and play. No dependencies, no setup beyond including one <script> tag. If a dependency is absolutely needed (e.g. in a map component it doesn‚Äôt make sense to draw your own maps), the component loads it automatically if it‚Äôs not already loaded.Syntax and API follows conventions established by built-in HTML elements and anything that can be done without the component user writing JS, is doable without JS, per the W3C principle of least power.Accessible by default via sensible ARIA defaults, just like normal HTML elements.Themable via ::part(), selective inheritance and custom properties. Very minimal style by default. Normal CSS properties should just ‚Äúwork‚Äù to the the extent possible.Only one component of a given type in the directory, that is flexible and extensible and continuously iterated on and improved by the community. Not 30 different sliders and 15 different tabs that users have to wade through. No branding, no silos of ‚Äúcomponent libraries‚Äù. Only elements that are designed as closely as possible to what a browser would implement in every way the current technology allows.\n\n\n\nI would be up for working on this if others feel the same way, since that is not a project for one person to tackle. Who‚Äôs with me?\n\n\n\nUPDATE: Wow this post blew up! Thank you all for your interest in participating in a potential future effort. I‚Äôm currently talking to stakeholders of some of the existing efforts to see if there are any potential collaborations before I go off and create a new one. Follow me on Twitter to hear about the outcome!",
      "date_published": "2020-09-24T16:28:03.000Z",
      "date_modified": "2020-09-24T16:28:03.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3134",
      "url": "https://lea.verou.me/2020/09/developer-priorities-throughout-their-career/",
      "title": "Developer priorities throughout their career",
      "summary": "I made this chart in the amazing Excalidraw about two weeks ago: It only took me 10 minutes! Shortly after, my laptop broke down into repeated kernel panics, and it spent about 10 days in service (I was in a remote place when it broke, so it took some time to get it to service). [‚Ä¶]",
      "content_html": "<p>I made this chart in the amazing <a href=\"https://excalidraw.com/\">Excalidraw</a> about two weeks ago: </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1491\" height=\"1032\" src=\"https://lea.verou.me/wp-content/uploads/2020/09/image-2.png\" alt=\"\" class=\"wp-image-3141\"/></figure>\n\n\n\n<p>It only took me 10 minutes! Shortly after, my laptop broke down into repeated kernel panics, and it spent about 10 days in service (I was in a remote place when it broke, so it took some time to get it to service). Yesterday, I was finally reunited with it, turned it on, launched Chrome, and saw it again. It gave me a smile, and I realized I never got to post it, so I <a href=\"https://twitter.com/LeaVerou/status/1306001020636540934\">tweeted this</a>:</p>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Developer priorities throughout their career <a href=\"https://t.co/juF4peKXCx\">pic.twitter.com/juF4peKXCx</a></p>&mdash; Lea Verou (@LeaVerou) <a href=\"https://twitter.com/LeaVerou/status/1306001020636540934?ref_src=twsrc%5Etfw\">September 15, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>The tweet kinda blew up! It seems many, <em>many</em> developers identify with it. A few also disagreed with it, especially with the &#8220;Does it actually work?&#8221; line. So I figured I should write a bit about the rationale behind it. I originally <a href=\"https://twitter.com/LeaVerou/status/1306207138931445761\">wrote it in a tweet</a>, but then I realized I should probably post it in a less transient medium, that is more well suited to longer text.</p>\n\n\n\n<span id=\"more-3134\"></span>\n\n\n\n<p>When somebody starts coding, getting the code to work is already difficult enough, so there is no space for other priorities. Learning to formalize one&#8217;s thought to the degree a computer demands, and then serialize this thinking with an unforgiving syntax, is <em>hard</em>. Writing code that works is THE priority, and whether it&#8217;s good code is not even a consideration.</p>\n\n\n\n<p>For more experienced programmers, whether it works is ephemeral: today it works, tomorrow a commit causes a regression, the day after another commit fixes it (yes, even with TDD. No testsuite gets close to 100% coverage). Whereas readability &amp; maintainability do not fluctuate much. If they are not prioritized from the beginning, they are much harder to accomplish when you already have a large codebase full of technical debt.</p>\n\n\n\n<p>Code written by experienced programmers that doesn&#8217;t work, can often be fixed with hours or days of debugging. A nontrivial codebase that is not readable can take months or years to rewrite. So one tends to gravitate towards prioritizing what is easier to fix.</p>\n\n\n\n<h3>The &#8220;peak of drought&#8221; and other over-abstractions </h3>\n\n\n\n<p>Many developers identified with the <em>&#8220;peak of drought&#8221;</em>. Indeed, like other aspects of maintainability, DRY is not even a concern at first. At some point, a programmer learns about the importance of DRY and gradually begins abstracting away duplication. However, you <em>can</em> have too much of a good thing: soon the need to abstract away any duplication becomes all consuming and leads to absurd, awkward abstractions which actually get in the way and produce needless couplings, often to avoid duplicating very little code, once. In my own <em>&#8220;peak of drought&#8221;</em> (which lasted far longer than the graph above suggests), I&#8217;ve written many useless functions, with parameters that make no sense, just to avoid duplicating a few lines of code once. </p>\n\n\n\n<p><a href=\"https://dev.to/jeroendedauw/the-fallacy-of-dry\">Many</a> <a href=\"https://dev.to/wuz/stop-trying-to-be-so-dry-instead-write-everything-twice-wet-5g33\">articles</a> <a href=\"https://medium.com/better-programming/when-dry-doesnt-work-go-wet-6befda0444bf\">have</a> <a href=\"http://joelabrahamsson.com/the-dry-obsession/\">been</a> written about this phenomenon, so I&#8217;m not going to repeat their arguments here. As a programmer accumulates even more experience, they start seeing the downsides of over-abstraction and over-normalization and start favoring a more moderate approach which prioritizes readability over DRY when they are at odds. </p>\n\n\n\n<p>A similar thing happens with <a href=\"https://en.wikipedia.org/wiki/Software_design_pattern\">design patterns</a> too. At some point, a few years in, a developer reads a book or takes a course about design patterns. Soon thereafter, their code becomes so littered with design patterns that it is practically incomprehensible. <em>&#8220;When all you have is a hammer, everything looks like a nail&#8221;</em>. I have a feeling that Java and Java-like languages are particularly accommodating to this ailment, so this phenomenon tends to proliferate in their codebases. At some point, the developer has to go back to their past code, and they realize themselves that it is unreadable. Eventually, they learn to use design patterns when they are actually useful, and favor readability over design patterns when the two are at odds. </p>\n\n\n\n<p>What aspects of your coding practice have changed over the years? How has your perspective shifted? What mistakes of the past did you eventually realize?</p>",
      "content_text": "I made this chart in the amazing Excalidraw about two weeks ago: \n\n\n\n\n\n\n\nIt only took me 10 minutes! Shortly after, my laptop broke down into repeated kernel panics, and it spent about 10 days in service (I was in a remote place when it broke, so it took some time to get it to service). Yesterday, I was finally reunited with it, turned it on, launched Chrome, and saw it again. It gave me a smile, and I realized I never got to post it, so I tweeted this:\n\n\n\n\nDeveloper priorities throughout their career pic.twitter.com/juF4peKXCx‚Äî Lea Verou (@LeaVerou) September 15, 2020\n\n\n\n\nThe tweet kinda blew up! It seems many, many developers identify with it. A few also disagreed with it, especially with the ‚ÄúDoes it actually work?‚Äù line. So I figured I should write a bit about the rationale behind it. I originally wrote it in a tweet, but then I realized I should probably post it in a less transient medium, that is more well suited to longer text.\n\n\n\n\n\n\n\nWhen somebody starts coding, getting the code to work is already difficult enough, so there is no space for other priorities. Learning to formalize one‚Äôs thought to the degree a computer demands, and then serialize this thinking with an unforgiving syntax, is hard. Writing code that works is THE priority, and whether it‚Äôs good code is not even a consideration.\n\n\n\nFor more experienced programmers, whether it works is ephemeral: today it works, tomorrow a commit causes a regression, the day after another commit fixes it (yes, even with TDD. No testsuite gets close to 100% coverage). Whereas readability & maintainability do not fluctuate much. If they are not prioritized from the beginning, they are much harder to accomplish when you already have a large codebase full of technical debt.\n\n\n\nCode written by experienced programmers that doesn‚Äôt work, can often be fixed with hours or days of debugging. A nontrivial codebase that is not readable can take months or years to rewrite. So one tends to gravitate towards prioritizing what is easier to fix.\n\n\n\nThe ‚Äúpeak of drought‚Äù and other over-abstractions \n\n\n\nMany developers identified with the ‚Äúpeak of drought‚Äù. Indeed, like other aspects of maintainability, DRY is not even a concern at first. At some point, a programmer learns about the importance of DRY and gradually begins abstracting away duplication. However, you can have too much of a good thing: soon the need to abstract away any duplication becomes all consuming and leads to absurd, awkward abstractions which actually get in the way and produce needless couplings, often to avoid duplicating very little code, once. In my own ‚Äúpeak of drought‚Äù (which lasted far longer than the graph above suggests), I‚Äôve written many useless functions, with parameters that make no sense, just to avoid duplicating a few lines of code once. \n\n\n\nMany articles have been written about this phenomenon, so I‚Äôm not going to repeat their arguments here. As a programmer accumulates even more experience, they start seeing the downsides of over-abstraction and over-normalization and start favoring a more moderate approach which prioritizes readability over DRY when they are at odds. \n\n\n\nA similar thing happens with design patterns too. At some point, a few years in, a developer reads a book or takes a course about design patterns. Soon thereafter, their code becomes so littered with design patterns that it is practically incomprehensible. ‚ÄúWhen all you have is a hammer, everything looks like a nail‚Äù. I have a feeling that Java and Java-like languages are particularly accommodating to this ailment, so this phenomenon tends to proliferate in their codebases. At some point, the developer has to go back to their past code, and they realize themselves that it is unreadable. Eventually, they learn to use design patterns when they are actually useful, and favor readability over design patterns when the two are at odds. \n\n\n\nWhat aspects of your coding practice have changed over the years? How has your perspective shifted? What mistakes of the past did you eventually realize?",
      "date_published": "2020-09-16T17:17:32.000Z",
      "date_modified": "2020-09-16T17:17:32.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3126",
      "url": "https://lea.verou.me/2020/09/parsel-a-tiny-permissive-css-selector-parser/",
      "title": "Parsel: A tiny, permissive CSS selector parser",
      "summary": "I‚Äôve posted before about my work for the Web Almanac this year. To make it easier to calculate the stats about CSS selectors, we looked to use an existing selector parser, but most were too big and/or had dependencies or didn‚Äôt account for all selectors we wanted to parse, and we‚Äôd need to write our [‚Ä¶]",
      "content_html": "<p>I&#8217;ve <a href=\"https://lea.verou.me/tag/web-almanac-2/\">posted before about my work for the Web Almanac</a> this year. To make it easier to calculate the stats about CSS selectors, we looked to use an existing selector parser, but most were too big and/or had dependencies or didn&#8217;t account for all selectors we wanted to parse, and we&#8217;d need to write our own walk and specificity methods anyway. So I did what I usually do in these cases: I wrote my own!</p>\n\n\n\n<p>You can find it <a href=\"https://projects.verou.me/parsel/\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>: <a href=\"https://projects.verou.me/parsel/\" target=\"_blank\" rel=\"noreferrer noopener\">https://projects.verou.me/parsel/</a> </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2494\" height=\"1760\" src=\"https://lea.verou.me/wp-content/uploads/2020/09/image.png\" alt=\"\" class=\"wp-image-3127\"/></figure>\n\n\n\n<span id=\"more-3126\"></span>\n\n\n\n<p>It not only parses CSS selectors, but also includes methods to walk the AST produced, as well as calculate specificity as an array and convert it to a number for easy comparison.</p>\n\n\n\n<p>It is one of my first libraries released as an ES module, and there are instructions about both using it as a module, and as a global, for those who would rather not deal with ES modules yet, because convenient as ESM are, I wouldn&#8217;t want to exclude those less familiar with modern JS.</p>\n\n\n\n<p>Please try it out and report any bugs! We plan to use it for Almanac stats in the next few days, so if you can spot bugs sooner rather than later, you can help that volunteer effort. I&#8217;m primarily interested in <strong>(realistic) valid selectors that are parsed incorrectly</strong>. I&#8217;m aware there are many invalid selectors that are parsed weirdly, but that&#8217;s not a focus (hence the &#8220;permissive&#8221; aspect, there are many invalid selectors it won&#8217;t throw on, and that&#8217;s by design to keep the code small, the logic simple, and the functionality future-proof).</p>\n\n\n\n<h3>How it works</h3>\n\n\n\n<p>If you&#8217;re just interested in using this selector parser, read no further. This section is about how the parser works, for those interested in this kind of thing. <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png\" alt=\"üôÇ\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<p>I <a href=\"https://github.com/LeaVerou/parsel/blob/master/parsel_aborted.js\">first started by writing a typical parser, with character-by-character gobbling and different modes</a>, with code somewhat inspired by my familiarity with <a href=\"https://ericsmekens.github.io/jsep/\">jsep</a>. I quickly realized that was a more fragile approach for what I wanted to do, and would result in a much larger module. I also missed the ease and flexibility of doing things with regexes. </p>\n\n\n\n<p>However, since CSS selectors include strings and parens that can be nested, parsing them with regexes is a fool&#8217;s errand. <em>Nested structures are not <a href=\"https://en.wikipedia.org/wiki/Regular_language\">regular languages</a></em> as my CS friends know. You cannot use a regex to find the closing parenthesis that corresponds to an opening parenthesis, since you can have other nested parens inside it. And it gets even more complex when there are other tokens that can nest, such as strings or comments. What if you have an opening paren that contains a string with a closing paren, like e.g. <code>(\"foo)\")</code>? A regex would match the closing paren inside the string. In fact, parsing the language of nested parens (strings like <code>(()(()))</code>) with regexes is one of the typical (futile) exercises in a compilers course. Students struggle to do it because it&#8217;s an impossible task, and learn the hard way that not everything can be parsed with regexes.</p>\n\n\n\n<p>Unlike a typical programming language with lots of nested structures however, the language of CSS selectors is more limited. There are only two nested structures: strings and parens, and they only appear in specific types of selectors (namely attribute selectors, pseudo-classes and pseudo-elements).  Once we get those out of the way, everything else can be easily parsed by regexes. So I decided to go with a hybrid approach: The selector is first looked at character-by-character, to extract strings and parens. We only extract top-level parens, since anything inside them can be parsed separately (when it&#8217;s a selector), or not at all. The strings are replaced by a single character, as many times as the length of the string, so that any character offsets do not change, and the strings themselves are stored in a stack. Same with parens. </p>\n\n\n\n<p>After that point, this modified selector language is a regular language that can be parsed with regexes. To do so, I follow an approach inspired by the early days of <a href=\"https://prismjs.com\">Prism</a>: An <a href=\"https://github.com/LeaVerou/parsel/blob/master/parsel.js#L1-L10\">object literal of tokens</a> in the order they should be matched in, and <a href=\"https://github.com/LeaVerou/parsel/blob/master/parsel.js#L49\">a function that tokenizes a string by iteratively matching tokens from an object literal</a>. In fact, this function was taken from an early version of Prism and modified.</p>\n\n\n\n<p>After we have the list of tokens as a flat array, we can restore strings and parens, and then nest them appropriately to create an AST.</p>\n\n\n\n<p>Also note that the token regexes use the new-ish <a href=\"https://2ality.com/2017/05/regexp-named-capture-groups.html\">named capture groups</a> feature in ES2018, since it&#8217;s now <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Browser_compatibility\">supported pretty widely</a> in terms of market share. For wider support, you can transpile <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png\" alt=\"üôÇ\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>",
      "content_text": "I‚Äôve posted before about my work for the Web Almanac this year. To make it easier to calculate the stats about CSS selectors, we looked to use an existing selector parser, but most were too big and/or had dependencies or didn‚Äôt account for all selectors we wanted to parse, and we‚Äôd need to write our own walk and specificity methods anyway. So I did what I usually do in these cases: I wrote my own!\n\n\n\nYou can find it here: https://projects.verou.me/parsel/ \n\n\n\n\n\n\n\n\n\n\n\nIt not only parses CSS selectors, but also includes methods to walk the AST produced, as well as calculate specificity as an array and convert it to a number for easy comparison.\n\n\n\nIt is one of my first libraries released as an ES module, and there are instructions about both using it as a module, and as a global, for those who would rather not deal with ES modules yet, because convenient as ESM are, I wouldn‚Äôt want to exclude those less familiar with modern JS.\n\n\n\nPlease try it out and report any bugs! We plan to use it for Almanac stats in the next few days, so if you can spot bugs sooner rather than later, you can help that volunteer effort. I‚Äôm primarily interested in (realistic) valid selectors that are parsed incorrectly. I‚Äôm aware there are many invalid selectors that are parsed weirdly, but that‚Äôs not a focus (hence the ‚Äúpermissive‚Äù aspect, there are many invalid selectors it won‚Äôt throw on, and that‚Äôs by design to keep the code small, the logic simple, and the functionality future-proof).\n\n\n\nHow it works\n\n\n\nIf you‚Äôre just interested in using this selector parser, read no further. This section is about how the parser works, for those interested in this kind of thing. \n\n\n\nI first started by writing a typical parser, with character-by-character gobbling and different modes, with code somewhat inspired by my familiarity with jsep. I quickly realized that was a more fragile approach for what I wanted to do, and would result in a much larger module. I also missed the ease and flexibility of doing things with regexes. \n\n\n\nHowever, since CSS selectors include strings and parens that can be nested, parsing them with regexes is a fool‚Äôs errand. Nested structures are not regular languages as my CS friends know. You cannot use a regex to find the closing parenthesis that corresponds to an opening parenthesis, since you can have other nested parens inside it. And it gets even more complex when there are other tokens that can nest, such as strings or comments. What if you have an opening paren that contains a string with a closing paren, like e.g. (\"foo)\")? A regex would match the closing paren inside the string. In fact, parsing the language of nested parens (strings like (()(()))) with regexes is one of the typical (futile) exercises in a compilers course. Students struggle to do it because it‚Äôs an impossible task, and learn the hard way that not everything can be parsed with regexes.\n\n\n\nUnlike a typical programming language with lots of nested structures however, the language of CSS selectors is more limited. There are only two nested structures: strings and parens, and they only appear in specific types of selectors (namely attribute selectors, pseudo-classes and pseudo-elements).  Once we get those out of the way, everything else can be easily parsed by regexes. So I decided to go with a hybrid approach: The selector is first looked at character-by-character, to extract strings and parens. We only extract top-level parens, since anything inside them can be parsed separately (when it‚Äôs a selector), or not at all. The strings are replaced by a single character, as many times as the length of the string, so that any character offsets do not change, and the strings themselves are stored in a stack. Same with parens. \n\n\n\nAfter that point, this modified selector language is a regular language that can be parsed with regexes. To do so, I follow an approach inspired by the early days of Prism: An object literal of tokens in the order they should be matched in, and a function that tokenizes a string by iteratively matching tokens from an object literal. In fact, this function was taken from an early version of Prism and modified.\n\n\n\nAfter we have the list of tokens as a flat array, we can restore strings and parens, and then nest them appropriately to create an AST.\n\n\n\nAlso note that the token regexes use the new-ish named capture groups feature in ES2018, since it‚Äôs now supported pretty widely in terms of market share. For wider support, you can transpile ",
      "date_published": "2020-09-07T09:22:39.000Z",
      "date_modified": "2020-09-07T09:22:39.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3109",
      "url": "https://lea.verou.me/2020/07/introspecting-css-via-the-css-om-getting-supported-properties-shorthands-longhands/",
      "title": "Introspecting CSS via the CSS OM: Getting supported properties, shorthands, longhands",
      "summary": "For some of the statistics we are going to study for this year‚Äôs Web Almanac we may end up needing a list of CSS shorthands and their longhands. Now this is typically done by maintaining a data structure by hand or guessing based on property name structure. But I knew that if we were going [‚Ä¶]",
      "content_html": "<p>For <a href=\"https://github.com/LeaVerou/css-almanac/issues/10\">some of the statistics</a> we are going to study for this year&#8217;s Web Almanac we may end up needing a list of CSS shorthands and their longhands. Now this is typically done by <a href=\"https://github.com/LeaVerou/prefixfree/blob/gh-pages/prefixfree.js#L298\">maintaining a data structure by hand</a> or <a href=\"https://github.com/LeaVerou/prefixfree/blob/gh-pages/prefixfree.js#L298\">guessing based on property name structure</a>. But I knew that if we were going to do it by hand, it&#8217;s very easy to miss a few of the less popular ones, and the naming rule where shorthands are a prefix of their longhands <a href=\"https://lists.w3.org/Archives/Public/www-style/2012Apr/0155.html\">has failed to get standardized</a> and now has even more exceptions than it used to. And even if we do an incredibly thorough job, next year the data structure will be inaccurate, because CSS and its implementations evolve fast. The browser knows what the shorthands are, surely we should be able to get the information from it  &#8230;right? Then we could use it directly if this is a client-side library, or in the case of the Almanac, where code needs to be fast because it will run on millions of websites, paste the precomputed result into whatever script we run.</p>\n\n\n\n<span id=\"more-3109\"></span>\n\n\n\n<p>There are essentially two steps for this:</p>\n\n\n\n<ol><li>Get a list of all CSS properties</li><li>Figure out how to test if a given property is a shorthand and how to get its longhands if so.</li></ol>\n\n\n\n<p>I decided to tell this story in the inverse order. In my exploration, I first focused on figuring out shorthands (2), because I had coded getting a list of properties many times before, but since (1) is useful in its own right (and probably in more use cases), I felt it makes more sense to examine that first.</p>\n\n\n\n<p><em><strong>Note:</strong> I‚Äôm using <code>document.body</code> instead of a dummy element in these examples, because I like to experiment in <code>about:blank</code>, and it&#8217;s just there and because this way you can just copy stuff to the console and try it wherever, even right here while reading this post. However, if you use this as part of code that runs on a real website, it goes without saying that you should create and test things on a dummy element instead!</em></p>\n\n\n\n<h2>Getting a list of all CSS properties from the browser</h2>\n\n\n\n<p>In Chrome and Safari, this is as simple as <code>Object.getOwnPropertyNames(document.body.style)</code>. However, in Firefox, this doesn&#8217;t work. Why is that? To understand this (and how to work around it), we need to dig a bit deeper.</p>\n\n\n\n<p>In Chrome and Safari, <code>element.style</code> is a <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration\">CSSStyleDeclaration</a></code> instance. In Firefox however, it is a <code><a href=\"https://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties\">CSS2Properties</a></code> instance, which inherits from <code>CSSStyleDeclaration</code>. <a href=\"https://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties\"><code>CSS2Properties</code></a> is an older interface, defined in <a href=\"https://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties\">the DOM 2 Specification</a>, which is now obsolete. In the <a href=\"https://drafts.csswg.org/cssom/#the-cssstyledeclaration-interface\">current relevant specification</a>, <code>CSS2Properties</code> is gone, and has been merged with <code>CSSStyleDeclaration</code>. However, <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1290786\">Firefox hasn&#8217;t caught up yet</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2142\" height=\"896\" src=\"https://lea.verou.me/wp-content/uploads/2020/07/image-2.png\" alt=\"\" class=\"wp-image-3112\"/><figcaption>Firefox on the left, Safari on the right. Chrome behaves like Safari.</figcaption></figure>\n\n\n\n<p>Since the properties are on <code>CSSStyleDeclaration</code>, they are not own properties of <code>element.style</code>, so <code>Object.getOwnPropertyNames()</code> fails to return them. However, we can extract the <code>CSSStyleDeclaration</code> instance by using <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\">__proto__</a></code> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\">Object.getPrototypeOf()</a>, and then <code>Object.getOwnPropertyNames(Object.getPrototypeOf(document.body.style))</code> gives us what we want! </p>\n\n\n\n<p>So we can combine the two to get a list of properties regardless of browser:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let properties = Object.getOwnPropertyNames(\n\tstyle.hasOwnProperty(\"background\")? \n\tstyle : style.__proto__\n);</code></pre>\n\n\n\n<p>And then, we just drop non-properties, and de-camelCase:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>properties = properties.filter(p => style&#91;p] === \"\") // drop functions etc\n\t.map(prop => { // de-camelCase\n\t\tprop = prop.replace(/&#91;A-Z]/g, function($0) { return '-' + $0.toLowerCase() });\n\n\t\tif (prop.indexOf(\"webkit-\") > -1) {\n\t\t\tprop = \"-\" + prop;\n\t\t}\n\n\t\treturn prop;\n\t});</code></pre>\n\n\n\n<p>You can see a <a href=\"https://codepen.io/leaverou/pen/eYJodjb?editors=0010\">codepen with the result here</a>:</p>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-codepen\"><div class=\"wp-block-embed__wrapper\">\n<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"Dynamically compute list of supported properties\" src=\"https://codepen.io/leaverou/embed/preview/eYJodjb?height=300&#038;slug-hash=eYJodjb&#038;default-tabs=js,result&#038;host=https://codepen.io#?secret=VmHc0jJnNf\" data-secret=\"VmHc0jJnNf\" scrolling=\"no\" frameborder=\"0\" height=\"300\"></iframe>\n</div></figure>\n\n\n\n<h2>Testing if a property is a shorthand and getting a list of longhands</h2>\n\n\n\n<p>The main things to note are:</p>\n\n\n\n<ul><li>When you set a shorthand on an element&#8217;s inline style, you are essentially setting all its longhands.</li><li><code>element.style</code> is actually array-like, with numerical properties and <code>.length</code> that gives you the number of properties set on it. This means you can use the spread operator on it:</li></ul>\n\n\n\n<pre class=\"wp-block-code language-javascript\"><code>> document.body.style.background = \"red\";\n> &#91;...document.body.style] \n&lt; &#91;\n\t\"background-image\", \n\t\"background-position-x\", \n\t\"background-position-y\", \n\t\"background-size\", \n\t\"background-repeat-x\", \n\t\"background-repeat-y\", \n\t\"background-attachment\", \n\t\"background-origin\", \n\t\"background-clip\", \n\t\"background-color\"\n]</code></pre>\n\n\n\n<p>Interestingly, <code>document.body.style.cssText</code> serializes to <code>background: red</code> and not all the longhands.</p>\n\n\n\n<p>There is one exception: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/all\">The <code>all</code> property</a>. In Chrome, it does not quite behave as a shorthand:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>> document.body.style.all = \"inherit\";\n> &#91;...document.body.style]\n&lt; &#91;\"all\"]</code></pre>\n\n\n\n<p>Whereas in Safari and Firefox, it actually returns every single property <em>that is not a shorthand</em>!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1864\" height=\"896\" src=\"https://lea.verou.me/wp-content/uploads/2020/07/image-1.png\" alt=\"\" class=\"wp-image-3111\"/><figcaption>Firefox and Safari expand <code>all</code> to literally all non-shorthand properties.</figcaption></figure>\n\n\n\n<p>While this is interesting from a trivia point of view, it doesn&#8217;t actually matter for our use case, since we don&#8217;t typically care about <code>all</code> when constructing a list of shorthands, and if we do we can always add or remove it manually.</p>\n\n\n\n<p>So, to recap, we can easily get the longhands of a given shorthand:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function getLonghands(property) {\n\tlet style = document.body.style;\n\tstyle&#91;property] = \"inherit\"; // a value that works in every property\n\tlet ret = &#91;...style];\n\tstyle.cssText = \"\"; // clean up\n\treturn ret;\n}</code></pre>\n\n\n\n<h2>Putting the pieces together</h2>\n\n\n\n<p>You can see how all the pieces fit together (and the output!) in <a href=\"https://codepen.io/leaverou/pen/gOPEJxz?editors=0010\">this codepen</a>:</p>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-codepen\"><div class=\"wp-block-embed__wrapper\">\n<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"Dynamically compute shorthands\" src=\"https://codepen.io/leaverou/embed/preview/gOPEJxz?height=300&#038;slug-hash=gOPEJxz&#038;default-tabs=js,result&#038;host=https://codepen.io#?secret=NyYlWE9NwX\" data-secret=\"NyYlWE9NwX\" scrolling=\"no\" frameborder=\"0\" height=\"300\"></iframe>\n</div></figure>\n\n\n\n<p>How many of these shorthands did you already know? </p>",
      "content_text": "For some of the statistics we are going to study for this year‚Äôs Web Almanac we may end up needing a list of CSS shorthands and their longhands. Now this is typically done by maintaining a data structure by hand or guessing based on property name structure. But I knew that if we were going to do it by hand, it‚Äôs very easy to miss a few of the less popular ones, and the naming rule where shorthands are a prefix of their longhands has failed to get standardized and now has even more exceptions than it used to. And even if we do an incredibly thorough job, next year the data structure will be inaccurate, because CSS and its implementations evolve fast. The browser knows what the shorthands are, surely we should be able to get the information from it  ‚Ä¶right? Then we could use it directly if this is a client-side library, or in the case of the Almanac, where code needs to be fast because it will run on millions of websites, paste the precomputed result into whatever script we run.\n\n\n\n\n\n\n\nThere are essentially two steps for this:\n\n\n\nGet a list of all CSS propertiesFigure out how to test if a given property is a shorthand and how to get its longhands if so.\n\n\n\nI decided to tell this story in the inverse order. In my exploration, I first focused on figuring out shorthands (2), because I had coded getting a list of properties many times before, but since (1) is useful in its own right (and probably in more use cases), I felt it makes more sense to examine that first.\n\n\n\nNote: I‚Äôm using document.body instead of a dummy element in these examples, because I like to experiment in about:blank, and it‚Äôs just there and because this way you can just copy stuff to the console and try it wherever, even right here while reading this post. However, if you use this as part of code that runs on a real website, it goes without saying that you should create and test things on a dummy element instead!\n\n\n\nGetting a list of all CSS properties from the browser\n\n\n\nIn Chrome and Safari, this is as simple as Object.getOwnPropertyNames(document.body.style). However, in Firefox, this doesn‚Äôt work. Why is that? To understand this (and how to work around it), we need to dig a bit deeper.\n\n\n\nIn Chrome and Safari, element.style is a CSSStyleDeclaration instance. In Firefox however, it is a CSS2Properties instance, which inherits from CSSStyleDeclaration. CSS2Properties is an older interface, defined in the DOM 2 Specification, which is now obsolete. In the current relevant specification, CSS2Properties is gone, and has been merged with CSSStyleDeclaration. However, Firefox hasn‚Äôt caught up yet.\n\n\n\nFirefox on the left, Safari on the right. Chrome behaves like Safari.\n\n\n\nSince the properties are on CSSStyleDeclaration, they are not own properties of element.style, so Object.getOwnPropertyNames() fails to return them. However, we can extract the CSSStyleDeclaration instance by using __proto__ or Object.getPrototypeOf(), and then Object.getOwnPropertyNames(Object.getPrototypeOf(document.body.style)) gives us what we want! \n\n\n\nSo we can combine the two to get a list of properties regardless of browser:\n\n\n\nlet properties = Object.getOwnPropertyNames(\n\tstyle.hasOwnProperty(\"background\")? \n\tstyle : style.__proto__\n);\n\n\n\nAnd then, we just drop non-properties, and de-camelCase:\n\n\n\nproperties = properties.filter(p => style[p] === \"\") // drop functions etc\n\t.map(prop => { // de-camelCase\n\t\tprop = prop.replace(/[A-Z]/g, function($0) { return '-' + $0.toLowerCase() });\n\n\t\tif (prop.indexOf(\"webkit-\") > -1) {\n\t\t\tprop = \"-\" + prop;\n\t\t}\n\n\t\treturn prop;\n\t});\n\n\n\nYou can see a codepen with the result here:\n\n\n\n\n\n\n\n\n\nTesting if a property is a shorthand and getting a list of longhands\n\n\n\nThe main things to note are:\n\n\n\nWhen you set a shorthand on an element‚Äôs inline style, you are essentially setting all its longhands.element.style is actually array-like, with numerical properties and .length that gives you the number of properties set on it. This means you can use the spread operator on it:\n\n\n\n> document.body.style.background = \"red\";\n> [...document.body.style] \n< [\n\t\"background-image\", \n\t\"background-position-x\", \n\t\"background-position-y\", \n\t\"background-size\", \n\t\"background-repeat-x\", \n\t\"background-repeat-y\", \n\t\"background-attachment\", \n\t\"background-origin\", \n\t\"background-clip\", \n\t\"background-color\"\n]\n\n\n\nInterestingly, document.body.style.cssText serializes to background: red and not all the longhands.\n\n\n\nThere is one exception: The all property. In Chrome, it does not quite behave as a shorthand:\n\n\n\n> document.body.style.all = \"inherit\";\n> [...document.body.style]\n< [\"all\"]\n\n\n\nWhereas in Safari and Firefox, it actually returns every single property that is not a shorthand!\n\n\n\nFirefox and Safari expand all to literally all non-shorthand properties.\n\n\n\nWhile this is interesting from a trivia point of view, it doesn‚Äôt actually matter for our use case, since we don‚Äôt typically care about all when constructing a list of shorthands, and if we do we can always add or remove it manually.\n\n\n\nSo, to recap, we can easily get the longhands of a given shorthand:\n\n\n\nfunction getLonghands(property) {\n\tlet style = document.body.style;\n\tstyle[property] = \"inherit\"; // a value that works in every property\n\tlet ret = [...style];\n\tstyle.cssText = \"\"; // clean up\n\treturn ret;\n}\n\n\n\nPutting the pieces together\n\n\n\nYou can see how all the pieces fit together (and the output!) in this codepen:\n\n\n\n\n\n\n\n\n\nHow many of these shorthands did you already know? ",
      "date_published": "2020-07-27T05:10:13.000Z",
      "date_modified": "2020-07-27T05:10:13.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3092",
      "url": "https://lea.verou.me/2020/07/import-non-esm-libraries-in-es-modules-with-client-side-vanilla-js/",
      "title": "Import non-ESM libraries in ES Modules, with client-side vanilla JS",
      "summary": "In case you haven‚Äôt heard, ECMAScript modules (ESM) are now supported everywhere! While I do have some gripes with them, it‚Äôs too late for any of these things to change, so I‚Äôm embracing the good parts and have cautiously started using them in new projects. I do quite like that I can just use import [‚Ä¶]",
      "content_html": "<p>In case you haven&#8217;t heard, <a href=\"https://caniuse.com/#search=modules\">ECMAScript modules (ESM) are now supported everywhere</a>!</p>\n\n\n\n<p>While I do have <a href=\"#gripes\">some gripes with them</a>, it‚Äôs too late for any of these things to change, so I&#8217;m embracing the good parts and have cautiously started using them in new projects. I do quite like that I can just use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"><code>import</code> statements and dynamic <code>import()</code></a> for dependencies with URLs right from my JS, without module loaders, extra <code>&lt;script></code> tags in my HTML, or hacks with dynamic <code>&lt;script></code> tags and <code>load</code> events (in fact, <a href=\"https://blissfuljs.com/docs.html#fn-include\">Bliss has had a helper for this very thing</a> that I&#8217;ve used extensively in older projects). I love that I don&#8217;t need any libraries for this, and I can use it client-side, anywhere, even in my codepens.</p>\n\n\n\n<p>Once you start using ESM, you realize that most libraries out there are not written in ESM, nor do they include ESM builds. Many are still using globals, and those that target Node.js use CommonJS (CJS). What can we do in that case? Unfortunately, ES Modules are not really designed with any import <em>(pun intended)</em> mechanism for these syntaxes, but, there are some strategies we could employ.</p>\n\n\n\n<span id=\"more-3092\"></span>\n\n\n\n<h2>Libraries using globals</h2>\n\n\n\n<p><strong>Technically, a JS file can be parsed as a module even with no imports or exports.</strong> Therefore, almost any library that uses globals can be fair game, it can just be imported as a module with no exports! How do we do that?</p>\n\n\n\n<p>While you may not see this syntax a lot, you don&#8217;t actually need to name anything in the <code>import</code> statement. There is a syntax to import a module entirely for its side effects:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import \"url/to/library.js\";</code></pre>\n\n\n\n<p>This syntax works fine for libraries that use globals, since declaring a global is essentially a side effect, and all modules share the same global scope. For this to work, the imported library needs to satisfy the following conditions:</p>\n\n\n\n<ul><li>It should declare the global as a property on <code>window</code> (or <code>self</code>), not via <code>var Foo</code> or <code>this</code>. In modules top-level variables are local to the module scope, and <code>this</code> is <code>undefined</code>, so the last two ways would not work.</li><li>Its code should not violate <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict mode</a></li><li>The URL is either same-origin or CORS-enabled. While <code>&lt;script&gt;</code> can run cross-origin resources, <code>import</code> sadly cannot.</li></ul>\n\n\n\n<p>Basically, you are running a library as a module that was never written with the intention to be run as a module. Many are written in a way that also works in a module context, but not all. <a href=\"https://exploringjs.com/es6/ch_modules.html#_browsers-scripts-versus-modules\">ExploringJS has an excellent summary of the differences between the two</a>. For example, here is <a href=\"https://codepen.io/leaverou/pen/dyGQXOo?editors=0011\">a trivial codepen loading jQuery</a> via this method.</p>\n\n\n\n<h2>Libraries using CJS without dependencies</h2>\n\n\n\n<p>I dealt with this today, and it&#8217;s what prompted this post. I was trying to play around with <a href=\"https://github.com/reworkcss/css\">Rework CSS</a>, a CSS parser used by the <a href=\"https://httparchive.org/\">HTTPArchive</a> for analyzing CSS in the wild. However, all its code and documentation assumes Node.js. If I could avoid it, I&#8217;d really rather not have to make a Node.js app to try this out, or have to dive in module loaders to be able to require CJS modules in the browser. Was there anything I could do to just run this in a codepen, no strings attached?</p>\n\n\n\n<p>After a little googling, I found <a href=\"https://github.com/reworkcss/css/issues/117\">this issue</a>. So there was a JS file I could import and get all the parser functionality. Except ‚Ä¶there was one little problem. When you look <a href=\"https://cdn.jsdelivr.net/gh/reworkcss/css@latest/lib/parse/index.js\">at the source</a>, it uses <code>module.exports</code>. If you just <code>import</code> that file, you predictably get an error that <code>module</code> is not defined, not to mention there are no ESM exports.</p>\n\n\n\n<p>My first thought was to stub <code>module</code> as a global variable, import this as a module, and then read <code>module.exports</code> and give it a proper name:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.module = {};\nimport \"https://cdn.jsdelivr.net/gh/reworkcss/css@latest/lib/parse/index.js\";\nconsole.log(module.exports);</code></pre>\n\n\n\n<p>However, I was still getting the error that <code>module</code> was not defined. How was that possible?! They all share the same global context!! <em>*pulls hair out*</em> After some debugging, it dawned on me: <a href=\"https://exploringjs.com/es6/ch_modules.html#_imports-are-hoisted\">static <code>import</code> statements are hoisted</a>; the &#8220;module&#8221; was getting executed before the code that imports it and stubs <code>module</code>.</p>\n\n\n\n<p>Dynamic imports to the rescue! <code>import()</code> is executed exactly where it&#8217;s called, and returns a promise. So this actually works:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.module = {};\nimport(\"https://cdn.jsdelivr.net/gh/reworkcss/css@latest/lib/parse/index.js\").then(_ => {\n\tconsole.log(module.exports);\n});</code></pre>\n\n\n\n<p>We could even turn it into a wee function, which I cheekily called <code>require()</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>async function require(path) {\n\tlet _module = window.module;\n\twindow.module = {};\n\tawait import(path);\n\tlet exports = module.exports;\n\twindow.module = _module; // restore global\n\treturn exports;\n}\n\n(async () => { // top-level await cannot come soon enough‚Ä¶\n\nlet parse = await require(\"https://cdn.jsdelivr.net/gh/reworkcss/css@latest/lib/parse/index.js\");\nconsole.log(parse(\"body { color: red }\"));\n\n})();</code></pre>\n\n\n\n<p>You can fiddle with this code in a <a href=\"https://codepen.io/leaverou/pen/jOWQMzN?editors=0011\">live pen here</a>.</p>\n\n\n\n<p>Do note that this technique will only work if the module you‚Äôre importing doesn‚Äôt import other CJS modules. If it does, you&#8217;d need a more elaborate <code>require()</code> function, which is left as an exercise for the reader. Also, just like the previous technique, the code needs to comply with strict mode and not be cross-origin.</p>\n\n\n\n<p>A similar technique can be used to load AMD modules via <code>import()</code>, just stub <code>define()</code> and you&#8217;re good to go.</p>\n\n\n\n<p>So, with this technique I was able to quickly whip up a <a href=\"https://codepen.io/leaverou/pen/qBbQdGG\">ReworkCSS playground</a>. You just edit the CSS in CodePen and see the resulting <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">AST</a>, and you can even fork it to share a specific AST with others! <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png\" alt=\"üôÇ\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-codepen\"><div class=\"wp-block-embed__wrapper\">\n<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"ReworkCSS parser playground\" src=\"https://codepen.io/leaverou/embed/preview/qBbQdGG?height=300&#038;slug-hash=qBbQdGG&#038;default-tabs=js,result&#038;host=https://codepen.io#?secret=kjia79ol2f\" data-secret=\"kjia79ol2f\" scrolling=\"no\" frameborder=\"0\" height=\"300\"></iframe>\n</div></figure>\n\n\n\n<h2>Update: CJS with static imports</h2>\n\n\n\n<p>After this article was posted, a clever hack was <a href=\"https://twitter.com/justinfagnani/status/1285325206811107329\">pointed out to me on Twitter</a>:</p>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">You can shim the window.module variable without dynamic import() if you do it in a separate module, imported before the library: <a href=\"https://t.co/BIqlHCOdV2\">https://t.co/BIqlHCOdV2</a></p>&mdash; Justin Fagnani (@justinfagnani) <a href=\"https://twitter.com/justinfagnani/status/1285325206811107329?ref_src=twsrc%5Etfw\">July 20, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>While this works great if you can have multiple separate files, it doesn&#8217;t work when you&#8217;re e.g. quickly trying out a pen. Data URIs to the rescue! <a href=\"https://codepen.io/leaverou/pen/XWXoEJq?editors=0010\">Turns out you can <code>import</code> a module from a data URI</a>!</p>\n\n\n\n<p>So let&#8217;s <a href=\"https://codepen.io/leaverou/pen/xxZmWvx\">adapt our Rework example to use this</a>:</p>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-codepen\"><div class=\"wp-block-embed__wrapper\">\n<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"ReworkCSS parser playground\" src=\"https://codepen.io/leaverou/embed/preview/xxZmWvx?height=300&#038;slug-hash=xxZmWvx&#038;default-tabs=js,result&#038;host=https://codepen.io#?secret=kbuz5stF0R\" data-secret=\"kbuz5stF0R\" scrolling=\"no\" frameborder=\"0\" height=\"300\"></iframe>\n</div></figure>\n\n\n\n<h2 id=\"gripes\">Addendum: ESM gripes</h2>\n\n\n\n<p>Since I was bound to get questions about what my gripes are with ESM, I figured I should mention them pre-emptively.</p>\n\n\n\n<p>First off, a little context. Nearly all of the JS I write is for libraries. <a href=\"https://github.com/leaverou\">I write libraries as a hobby</a>, <a href=\"https://mavo.io\">I write libraries as my job</a>, and sometimes <a href=\"https://inspirejs.org\">I write libraries to help me do my job</a>. My job is usability (HCI) research (and specifically making programming easier), so I&#8217;m very sensitive to developer experience issues. I want my libraries to be usable not just by seasoned developers, but by novices too.</p>\n\n\n\n<p>ESM has not been designed with novices in mind. It evolved from the CJS/UMD/AMD ecosystem, in which most voices are seasoned developers. </p>\n\n\n\n<p>My main gripe with them, is how they expect full adoption, and settle for nothing less. There is no way to create a bundle of a library that can be used <em>both</em> traditionally, with a global, or as an ES module. There is also no standard way to import older libraries, or libraries using other module patterns (yes, this very post is about doing that, but essentially these are hacks, and there should be a better way). I understand the benefits of static analysis for imports and exports, but I wish there was a dynamic alternative to <code>export</code>, analogous to the dynamic <code>import()</code>.</p>\n\n\n\n<p>In terms of migrating to ESM, I also dislike how opinionated they are: strict mode is great, but forcing it doesn&#8217;t help people trying to migrate older codebases. Restricting them to cross-origin is also a pain, using <code>&lt;script></code>s from other domains made it possible to quickly experiment with various libraries, and I would love for that to be true for modules too. </p>\n\n\n\n<p>But overall, I‚Äôm excited that JS now natively supports a module mechanism, and I expect any library I release in the future to utilize it.</p>",
      "content_text": "In case you haven‚Äôt heard, ECMAScript modules (ESM) are now supported everywhere!\n\n\n\nWhile I do have some gripes with them, it‚Äôs too late for any of these things to change, so I‚Äôm embracing the good parts and have cautiously started using them in new projects. I do quite like that I can just use import statements and dynamic import() for dependencies with URLs right from my JS, without module loaders, extra <script> tags in my HTML, or hacks with dynamic <script> tags and load events (in fact, Bliss has had a helper for this very thing that I‚Äôve used extensively in older projects). I love that I don‚Äôt need any libraries for this, and I can use it client-side, anywhere, even in my codepens.\n\n\n\nOnce you start using ESM, you realize that most libraries out there are not written in ESM, nor do they include ESM builds. Many are still using globals, and those that target Node.js use CommonJS (CJS). What can we do in that case? Unfortunately, ES Modules are not really designed with any import (pun intended) mechanism for these syntaxes, but, there are some strategies we could employ.\n\n\n\n\n\n\n\nLibraries using globals\n\n\n\nTechnically, a JS file can be parsed as a module even with no imports or exports. Therefore, almost any library that uses globals can be fair game, it can just be imported as a module with no exports! How do we do that?\n\n\n\nWhile you may not see this syntax a lot, you don‚Äôt actually need to name anything in the import statement. There is a syntax to import a module entirely for its side effects:\n\n\n\nimport \"url/to/library.js\";\n\n\n\nThis syntax works fine for libraries that use globals, since declaring a global is essentially a side effect, and all modules share the same global scope. For this to work, the imported library needs to satisfy the following conditions:\n\n\n\nIt should declare the global as a property on window (or self), not via var Foo or this. In modules top-level variables are local to the module scope, and this is undefined, so the last two ways would not work.Its code should not violate strict modeThe URL is either same-origin or CORS-enabled. While <script> can run cross-origin resources, import sadly cannot.\n\n\n\nBasically, you are running a library as a module that was never written with the intention to be run as a module. Many are written in a way that also works in a module context, but not all. ExploringJS has an excellent summary of the differences between the two. For example, here is a trivial codepen loading jQuery via this method.\n\n\n\nLibraries using CJS without dependencies\n\n\n\nI dealt with this today, and it‚Äôs what prompted this post. I was trying to play around with Rework CSS, a CSS parser used by the HTTPArchive for analyzing CSS in the wild. However, all its code and documentation assumes Node.js. If I could avoid it, I‚Äôd really rather not have to make a Node.js app to try this out, or have to dive in module loaders to be able to require CJS modules in the browser. Was there anything I could do to just run this in a codepen, no strings attached?\n\n\n\nAfter a little googling, I found this issue. So there was a JS file I could import and get all the parser functionality. Except ‚Ä¶there was one little problem. When you look at the source, it uses module.exports. If you just import that file, you predictably get an error that module is not defined, not to mention there are no ESM exports.\n\n\n\nMy first thought was to stub module as a global variable, import this as a module, and then read module.exports and give it a proper name:\n\n\n\nwindow.module = {};\nimport \"https://cdn.jsdelivr.net/gh/reworkcss/css@latest/lib/parse/index.js\";\nconsole.log(module.exports);\n\n\n\nHowever, I was still getting the error that module was not defined. How was that possible?! They all share the same global context!! *pulls hair out* After some debugging, it dawned on me: static import statements are hoisted; the ‚Äúmodule‚Äù was getting executed before the code that imports it and stubs module.\n\n\n\nDynamic imports to the rescue! import() is executed exactly where it‚Äôs called, and returns a promise. So this actually works:\n\n\n\nwindow.module = {};\nimport(\"https://cdn.jsdelivr.net/gh/reworkcss/css@latest/lib/parse/index.js\").then(_ => {\n\tconsole.log(module.exports);\n});\n\n\n\nWe could even turn it into a wee function, which I cheekily called require():\n\n\n\nasync function require(path) {\n\tlet _module = window.module;\n\twindow.module = {};\n\tawait import(path);\n\tlet exports = module.exports;\n\twindow.module = _module; // restore global\n\treturn exports;\n}\n\n(async () => { // top-level await cannot come soon enough‚Ä¶\n\nlet parse = await require(\"https://cdn.jsdelivr.net/gh/reworkcss/css@latest/lib/parse/index.js\");\nconsole.log(parse(\"body { color: red }\"));\n\n})();\n\n\n\nYou can fiddle with this code in a live pen here.\n\n\n\nDo note that this technique will only work if the module you‚Äôre importing doesn‚Äôt import other CJS modules. If it does, you‚Äôd need a more elaborate require() function, which is left as an exercise for the reader. Also, just like the previous technique, the code needs to comply with strict mode and not be cross-origin.\n\n\n\nA similar technique can be used to load AMD modules via import(), just stub define() and you‚Äôre good to go.\n\n\n\nSo, with this technique I was able to quickly whip up a ReworkCSS playground. You just edit the CSS in CodePen and see the resulting AST, and you can even fork it to share a specific AST with others! \n\n\n\n\n\n\n\n\n\nUpdate: CJS with static imports\n\n\n\nAfter this article was posted, a clever hack was pointed out to me on Twitter:\n\n\n\n\nYou can shim the window.module variable without dynamic import() if you do it in a separate module, imported before the library: https://t.co/BIqlHCOdV2‚Äî Justin Fagnani (@justinfagnani) July 20, 2020\n\n\n\n\nWhile this works great if you can have multiple separate files, it doesn‚Äôt work when you‚Äôre e.g. quickly trying out a pen. Data URIs to the rescue! Turns out you can import a module from a data URI!\n\n\n\nSo let‚Äôs adapt our Rework example to use this:\n\n\n\n\n\n\n\n\n\nAddendum: ESM gripes\n\n\n\nSince I was bound to get questions about what my gripes are with ESM, I figured I should mention them pre-emptively.\n\n\n\nFirst off, a little context. Nearly all of the JS I write is for libraries. I write libraries as a hobby, I write libraries as my job, and sometimes I write libraries to help me do my job. My job is usability (HCI) research (and specifically making programming easier), so I‚Äôm very sensitive to developer experience issues. I want my libraries to be usable not just by seasoned developers, but by novices too.\n\n\n\nESM has not been designed with novices in mind. It evolved from the CJS/UMD/AMD ecosystem, in which most voices are seasoned developers. \n\n\n\nMy main gripe with them, is how they expect full adoption, and settle for nothing less. There is no way to create a bundle of a library that can be used both traditionally, with a global, or as an ES module. There is also no standard way to import older libraries, or libraries using other module patterns (yes, this very post is about doing that, but essentially these are hacks, and there should be a better way). I understand the benefits of static analysis for imports and exports, but I wish there was a dynamic alternative to export, analogous to the dynamic import().\n\n\n\nIn terms of migrating to ESM, I also dislike how opinionated they are: strict mode is great, but forcing it doesn‚Äôt help people trying to migrate older codebases. Restricting them to cross-origin is also a pain, using <script>s from other domains made it possible to quickly experiment with various libraries, and I would love for that to be true for modules too. \n\n\n\nBut overall, I‚Äôm excited that JS now natively supports a module mechanism, and I expect any library I release in the future to utilize it.",
      "date_published": "2020-07-20T20:43:15.000Z",
      "date_modified": "2020-07-20T20:43:15.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3081",
      "url": "https://lea.verou.me/2020/07/releasing-mavoice-a-free-app-to-vote-on-repo-issues/",
      "title": "Releasing MaVoice: A free app to vote on repo issues",
      "summary": "First off, some news: I agreed to be this year‚Äôs CSS content lead for the Web Almanac! One of the first things to do is to flesh out what statistics we should study to answer the question ‚ÄúWhat is the state of CSS in 2020?‚Äù. You can see last year‚Äôs chapter to get an idea [‚Ä¶]",
      "content_html": "<p>First off, some news: <a href=\"https://github.com/HTTPArchive/almanac.httparchive.org/issues/898\">I agreed to be this year&#8217;s CSS content lead for the Web Almanac</a>! One of the first things to do is to flesh out what statistics we should study to answer the question <em>‚ÄúWhat is the state of CSS in 2020?‚Äù</em>. You can see <a href=\"https://almanac.httparchive.org/en/2019/css\">last year&#8217;s chapter</a> to get an idea of what kind of statistics could help answer that question.</p>\n\n\n\n<p>Of course, my first thought was <em>‚ÄúWe should involve the community! People might have great ideas of statistics we could study!‚Äù</em>. But what should we use to vote on ideas and make them rise to the top?</p>\n\n\n\n<span id=\"more-3081\"></span>\n\n\n\n<p>I wanted to use <a href=\"https://github.com/LeaVerou/css-almanac\">a repo</a> to manage all this, since I like all the conveniences for managing issues. However, there is not much on Github for voting. You can add <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f44d.png\" alt=\"üëç\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> reactions, but not sort by them, and voting itself is tedious: you need to open the comment, click on the reaction, then go back to the list of issues, rinse and repeat. Ideally, I wanted something like UserVoice<img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2122.png\" alt=\"‚Ñ¢\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />, which lets you vote with one click, and sorts proposals by votes.</p>\n\n\n\n<p>And then it dawned on me: I&#8217;ll just build a <a href=\"https://mavo.io\">Mavo</a> app on top of the repo issues, that displays them as proposals to be voted on and sorts by <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f44d.png\" alt=\"üëç\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> reactions, UserVoice<img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2122.png\" alt=\"‚Ñ¢\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />-style but without the UserVoice<img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2122.png\" alt=\"‚Ñ¢\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> price tag. <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f60e.png\" alt=\"üòé\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> In fact, I had started such a Mavo app a couple years ago, and never finished or released it. So, I just dug it up and resurrected it from its ashes! It‚Äôs ‚Äî quite fittingly I think ‚Äî called <em>MaVoice</em>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://leaverou.github.io/mavoice\"><img loading=\"lazy\" width=\"2210\" height=\"1866\" src=\"https://lea.verou.me/wp-content/uploads/2020/07/image.png\" alt=\"\" class=\"wp-image-3082\"/></a></figure>\n\n\n\n<p><strong>You can set it to any repo via the <code>repo</code> URL parameter, and any label via the <code>labels</code> URL param </strong>(defaults to <code>enhancement</code>)<strong> to create a customized URL for any repo you want in seconds!</strong> For example, here&#8217;s the URL for the css-almanac repo, which only displays issues with the label &#8220;proposed stat&#8221;: <a href=\"https://leaverou.github.io/mavoice/?repo=leaverou/css-almanac&amp;labels=proposed%20stat\">https://leaverou.github.io/mavoice/?repo=leaverou/css-almanac&amp;labels=proposed%20stat</a></p>\n\n\n\n<p>While this did need some custom JS, unlike other Mavo apps which need none, I&#8217;m still pretty happy I could spin up this kind of app with <a href=\"https://github.com/LeaVerou/mavoice/blob/master/mavoice.js\">&lt; 100 lines of JS</a> <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png\" alt=\"üôÇ\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<p>Yes, it&#8217;s still rough around the edges, and I&#8217;m sure you can find many things that could be improved, but it does the job for now, and PRs are always welcome <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f937-1f3fd-200d-2640-fe0f.png\" alt=\"ü§∑üèΩ‚Äç‚ôÄÔ∏è\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<p><strong>The main caveat if you decide to use this for your own repo</strong>: Because (to my knowledge) Github API still does not provide a way to sort issues by <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f44d.png\" alt=\"üëç\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> reactions, or even reactions in general (in either the v3 REST API, or the GraphQL API), issues are instead requested sorted by comment count, and are <a href=\"https://github.com/LeaVerou/mavoice/blob/master/mavoice.js#L42\">sorted by <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f44d.png\" alt=\"üëç\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> reactions client-side, right before render</a>. Due to API limitations, <a href=\"https://github.com/LeaVerou/mavoice/blob/master/index.html#L14\">this API call</a> <a href=\"https://developer.github.com/v3/#pagination\">can only fetch the top 100 results</a>. This means that if you have more than 100 issues to display (i.e. more than 100 open issues with the given label), it could potentially be inaccurate, especially if you have issues with many reactions and few comments.</p>\n\n\n\n<p>Another caveat is that <strong>because this is basically reactions on Github issues, there is no limit on how many issues someone can vote on</strong>. In theory, if they&#8217;re a bad actor (or just overexcited), they can just vote on everything. But I suppose that&#8217;s an intrinsic problem with using reactions to vote for things, having a UI for it just reveals the existing issue, it doesn&#8217;t create it.</p>\n\n\n\n<p>Hope you enjoy, and don&#8217;t forget to <a href=\"https://leaverou.github.io/mavoice/?repo=leaverou/css-almanac&amp;labels=proposed%20stat\">vote on which CSS stats we should study</a>!</p>",
      "content_text": "First off, some news: I agreed to be this year‚Äôs CSS content lead for the Web Almanac! One of the first things to do is to flesh out what statistics we should study to answer the question ‚ÄúWhat is the state of CSS in 2020?‚Äù. You can see last year‚Äôs chapter to get an idea of what kind of statistics could help answer that question.\n\n\n\nOf course, my first thought was ‚ÄúWe should involve the community! People might have great ideas of statistics we could study!‚Äù. But what should we use to vote on ideas and make them rise to the top?\n\n\n\n\n\n\n\nI wanted to use a repo to manage all this, since I like all the conveniences for managing issues. However, there is not much on Github for voting. You can add  reactions, but not sort by them, and voting itself is tedious: you need to open the comment, click on the reaction, then go back to the list of issues, rinse and repeat. Ideally, I wanted something like UserVoice, which lets you vote with one click, and sorts proposals by votes.\n\n\n\nAnd then it dawned on me: I‚Äôll just build a Mavo app on top of the repo issues, that displays them as proposals to be voted on and sorts by  reactions, UserVoice-style but without the UserVoice price tag.  In fact, I had started such a Mavo app a couple years ago, and never finished or released it. So, I just dug it up and resurrected it from its ashes! It‚Äôs ‚Äî quite fittingly I think ‚Äî called MaVoice.\n\n\n\n\n\n\n\nYou can set it to any repo via the repo URL parameter, and any label via the labels URL param (defaults to enhancement) to create a customized URL for any repo you want in seconds! For example, here‚Äôs the URL for the css-almanac repo, which only displays issues with the label ‚Äúproposed stat‚Äù: https://leaverou.github.io/mavoice/?repo=leaverou/css-almanac&labels=proposed%20stat\n\n\n\nWhile this did need some custom JS, unlike other Mavo apps which need none, I‚Äôm still pretty happy I could spin up this kind of app with < 100 lines of JS \n\n\n\nYes, it‚Äôs still rough around the edges, and I‚Äôm sure you can find many things that could be improved, but it does the job for now, and PRs are always welcome \n\n\n\nThe main caveat if you decide to use this for your own repo: Because (to my knowledge) Github API still does not provide a way to sort issues by  reactions, or even reactions in general (in either the v3 REST API, or the GraphQL API), issues are instead requested sorted by comment count, and are sorted by  reactions client-side, right before render. Due to API limitations, this API call can only fetch the top 100 results. This means that if you have more than 100 issues to display (i.e. more than 100 open issues with the given label), it could potentially be inaccurate, especially if you have issues with many reactions and few comments.\n\n\n\nAnother caveat is that because this is basically reactions on Github issues, there is no limit on how many issues someone can vote on. In theory, if they‚Äôre a bad actor (or just overexcited), they can just vote on everything. But I suppose that‚Äôs an intrinsic problem with using reactions to vote for things, having a UI for it just reveals the existing issue, it doesn‚Äôt create it.\n\n\n\nHope you enjoy, and don‚Äôt forget to vote on which CSS stats we should study!",
      "date_published": "2020-07-11T22:40:38.000Z",
      "date_modified": "2020-07-11T22:40:38.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3066",
      "url": "https://lea.verou.me/2020/07/the-cicada-principle-revisited-with-css-variables/",
      "title": "The Cicada Principle, revisited with CSS variables",
      "summary": "Many of today‚Äôs web crafters were not writing CSS at the time Alex Walker‚Äôs landmark article The Cicada Principle and Why it Matters to Web Designers was published in 2011. Last I heard of it was in 2016, when it was used in conjunction with blend modes to pseudo-randomize backgrounds even further. So what is [‚Ä¶]",
      "content_html": "<p>Many of today&#8217;s web crafters were not writing CSS at the time Alex Walker&#8217;s landmark article <a href=\"https://www.sitepoint.com/the-cicada-principle-and-why-it-matters-to-web-designers/\">The Cicada Principle and Why it Matters to Web Designers</a> was published in 2011. Last I heard of it was in 2016, when it was <a href=\"https://css-tricks.com/cicada-principle-css/\">used in conjunction with blend modes</a> to pseudo-randomize backgrounds even further.</p>\n\n\n\n<p>So what <em>is</em> the Cicada Principle and how does it relate to web design in a nutshell? It boils down to: when using repeating elements (tiled backgrounds, different effects on multiple elements etc), using prime numbers for the size of the repeating unit maximizes the <em>appearance</em> of organic randomness. Note that this only works when the parameters you set are independent.</p>\n\n\n\n<p>When I <a href=\"https://lea.verou.me/2020/06/new-decade-new-theme/\">recently redesigned my blog</a>, I ended up using a variation of the Cicada principle to pseudo-randomize the angles of code snippets. I didn&#8217;t think much of it until I saw <a href=\"https://twitter.com/StuRobson/status/1273904521132072960\">this tweet</a>:</p>\n\n\n\n<span id=\"more-3066\"></span>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">digging the look of code blocks in <a href=\"https://twitter.com/LeaVerou?ref_src=twsrc%5Etfw\">@LeaVerou</a>‚Äôs redesign:<br><br>(from this article: <a href=\"https://t.co/PAzOuZ1zjW\">https://t.co/PAzOuZ1zjW</a> ) <a href=\"https://t.co/RT4IsWMhyL\">pic.twitter.com/RT4IsWMhyL</a></p>&mdash; From The Book of Saw Robson (@StuRobson) <a href=\"https://twitter.com/StuRobson/status/1273904521132072960?ref_src=twsrc%5Etfw\">June 19, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>This made me think: hey, maybe I should actually write a blog post about the technique. After all, the technique itself is useful for way more than angles on code snippets.</p>\n\n\n\n<p>The main idea is simple: You write your main rule using CSS variables, and then use <code>:nth-of-*()</code> rules to set these variables to something different every N items. If you use enough variables, and choose your Ns for them to be prime numbers, you reach a good appearance of pseudo-randomness with relatively small Ns.</p>\n\n\n\n<p>In the case of code samples, I only have two different top cuts (going up or going down) and two different bottom cuts (same), which produce 2*2 = 4 different shapes. Since I only had four shapes, I wanted to maximize the pseudo-randomness of their order. A first attempt looks like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pre {\n\tclip-path: polygon(var(--clip-top), var(--clip-bottom));\n\t--clip-top: 0 0, 100% 2em;\n\t--clip-bottom: 100% calc(100% - 1.5em), 0 100%;\n}\n\npre:nth-of-type(odd) {\n\t--clip-top: 0 2em, 100% 0;\n}\n\npre:nth-of-type(3n + 1) {\n\t--clip-bottom: 100% 100%, 0 calc(100% - 1.5em);\n}</code></pre>\n\n\n\n<p>This way, the exact sequence of shapes repeats every 2 * 3 = 6 code snippets. Also, the alternative <code>--clip-bottom</code> doesn&#8217;t really get the same visibility as the others, being present only 33.333% of the time. However, if we just add one more selector:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pre {\n\tclip-path: polygon(var(--clip-top), var(--clip-bottom));\n\t--clip-top: 0 0, 100% 2em;\n\t--clip-bottom: 100% calc(100% - 1.5em), 0 100%;\n}\n\npre:nth-of-type(odd) {\n\t--clip-top: 0 2em, 100% 0;\n}\n\npre:nth-of-type(3n + 1),\npre:nth-of-type(5n + 1) {\n\t--clip-bottom: 100% 100%, 0 calc(100% - 1.5em);\n}</code></pre>\n\n\n\n<p>Now the exact same sequence of shapes repeats every 2 * 3 * 5 = 30 code snippets, probably way more than I will have in any article. And it&#8217;s more fair to the alternate <code>--clip-bottom</code>, which now gets 1/3 + 1/5 &#8211; 1/15 = 46.67%, which is almost as much as the alternate <code>--clip-top</code> gets!</p>\n\n\n\n<p>You can explore this effect in <a href=\"https://codepen.io/leaverou/pen/8541bfd3a42551f8845d668f29596ef9?editors=1100\">this codepen</a>:</p>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-codepen\"><div class=\"wp-block-embed__wrapper\">\n<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"Cicada code snippets\" src=\"https://codepen.io/leaverou/embed/preview/GRovwXx?height=300&#038;slug-hash=GRovwXx&#038;default-tabs=css,result&#038;host=https://codepen.io#?secret=MjBmENNL6V\" data-secret=\"MjBmENNL6V\" scrolling=\"no\" frameborder=\"0\" height=\"300\"></iframe>\n</div></figure>\n\n\n\n<p>Or, to better explore how different CSS creates different pseudo-randomness, you can use <a href=\"https://codepen.io/leaverou/pen/NWxaPVx\">this content-less version</a> with three variations:</p>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-codepen\"><div class=\"wp-block-embed__wrapper\">\n<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"Cicada shape pseudo-randomness (order)\" src=\"https://codepen.io/leaverou/embed/preview/NWxaPVx?height=300&#038;slug-hash=NWxaPVx&#038;default-tabs=css,result&#038;host=https://codepen.io#?secret=jEZc8JSFDY\" data-secret=\"jEZc8JSFDY\" scrolling=\"no\" frameborder=\"0\" height=\"300\"></iframe>\n</div></figure>\n\n\n\n<p>Of course, the illusion of randomness is much better with more shapes, e.g. if <a href=\"https://codepen.io/leaverou/pen/dyGmbJJ?editors=1100\">we introduce a third type of edge</a> we get 3 * 3 = 9 possible shapes:</p>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-codepen\"><div class=\"wp-block-embed__wrapper\">\n<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"Cicada shape pseudo-randomness (order) with straight lines too\" src=\"https://codepen.io/leaverou/embed/preview/dyGmbJJ?height=300&#038;slug-hash=dyGmbJJ&#038;default-tabs=css,result&#038;host=https://codepen.io#?secret=AokORmGDq1\" data-secret=\"AokORmGDq1\" scrolling=\"no\" frameborder=\"0\" height=\"300\"></iframe>\n</div></figure>\n\n\n\n<p>I also used primes 7 and 11, so that the sequence repeats every 77 items. In general, the larger primes you use, the better the illusion of randomness, but you need to include more selectors, which can get tedious.</p>\n\n\n\n<h2>Other examples</h2>\n\n\n\n<p>So this got me thinking: What else would this technique be cool on? Especially if we include more values as well, we can pseudo-randomize the result itself better, and not just the order of only 4 different results.</p>\n\n\n\n<p>So I did a few experiments.</p>\n\n\n\n<h4><a href=\"https://codepen.io/leaverou/pen/RwrLPer\" target=\"_blank\" rel=\"noreferrer noopener\">Pseudo-randomized color swatches</a></h4>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-codepen\"><div class=\"wp-block-embed__wrapper\">\n<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"Cicada colors\" src=\"https://codepen.io/leaverou/embed/preview/NWxXQKX?height=300&#038;slug-hash=NWxXQKX&#038;default-tabs=css,result&#038;host=https://codepen.io#?secret=54cduV3nxo\" data-secret=\"54cduV3nxo\" scrolling=\"no\" frameborder=\"0\" height=\"300\"></iframe>\n</div><figcaption>Pseudo-randomized color swatches, with variables for hue, saturation, and lightness.</figcaption></figure>\n\n\n\n<p>And <a href=\"https://codepen.io/leaverou/pen/RwrLPer\" target=\"_blank\" rel=\"noreferrer noopener\">an alternative version</a>:</p>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-codepen\"><div class=\"wp-block-embed__wrapper\">\n<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"Cicada colors\" src=\"https://codepen.io/leaverou/embed/preview/RwrLPer?height=300&#038;slug-hash=RwrLPer&#038;default-tabs=css,result&#038;host=https://codepen.io#?secret=n9pSE5wzd0\" data-secret=\"n9pSE5wzd0\" scrolling=\"no\" frameborder=\"0\" height=\"300\"></iframe>\n</div></figure>\n\n\n\n<p>Which one looks more random? Why do you think that is?</p>\n\n\n\n<h4><a href=\"https://codepen.io/leaverou/pen/ZEQXOrd\" target=\"_blank\" rel=\"noreferrer noopener\">Pseudo-randomized border-radius</a></h4>\n\n\n\n<p>Admittedly, this one can be done with just longhands, but since I realized this after I had already made it, I figured eh, I may as well include it <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f937-1f3fd-200d-2640-fe0f.png\" alt=\"ü§∑üèΩ‚Äç‚ôÄÔ∏è\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-codepen\"><div class=\"wp-block-embed__wrapper\">\n<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"Cicada radii\" src=\"https://codepen.io/leaverou/embed/preview/ZEQXOrd?height=300&#038;slug-hash=ZEQXOrd&#038;default-tabs=css,result&#038;host=https://codepen.io#?secret=GlHagoW97E\" data-secret=\"GlHagoW97E\" scrolling=\"no\" frameborder=\"0\" height=\"300\"></iframe>\n</div></figure>\n\n\n\n<p>It is also really cool when <a href=\"https://codepen.io/leaverou/pen/oNbGzeE\">combined with pseudo-random colors</a> (just hue this time):</p>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-codepen\"><div class=\"wp-block-embed__wrapper\">\n<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"Cicada colorful radii\" src=\"https://codepen.io/leaverou/embed/preview/oNbGzeE?height=300&#038;slug-hash=oNbGzeE&#038;default-tabs=css,result&#038;host=https://codepen.io#?secret=WtzLlOWVCu\" data-secret=\"WtzLlOWVCu\" scrolling=\"no\" frameborder=\"0\" height=\"300\"></iframe>\n</div></figure>\n\n\n\n<h4><a href=\"https://codepen.io/leaverou/pen/YzwrWvV?editors=1100\" target=\"_blank\" rel=\"noreferrer noopener\">Pseudo-randomized snowfall</a></h4>\n\n\n\n<p>Lots of things here:</p>\n\n\n\n<ul><li>Using <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/translate\">translate</a> and transform together to animate them separately without resorting to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSS/RegisterProperty\">CSS.registerPropery()</a></li><li>Pseudo-randomized horizontal offset, animation-delay, font-size</li><li>Technically we don&#8217;t need CSS variables to pseudo-randomize <code>font-size</code>, we can just set the property itself. However, variables enable us to pseudo-randomize it via a multiplier, in order to decouple the base font size from the pseudo-randomness, so we can edit them independently. And then we can use the same multiplier in <code>animation-duration</code> to make smaller snowflakes fall slower!</li></ul>\n\n\n\n<figure class=\"wp-block-embed-wordpress wp-block-embed is-type-wp-embed is-provider-codepen\"><div class=\"wp-block-embed__wrapper\">\n<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"Cicada snowflakes\" src=\"https://codepen.io/leaverou/embed/preview/YzwrWvV?height=300&#038;slug-hash=YzwrWvV&#038;default-tabs=css,result&#038;host=https://codepen.io#?secret=R2RkqKs2pI\" data-secret=\"R2RkqKs2pI\" scrolling=\"no\" frameborder=\"0\" height=\"300\"></iframe>\n</div></figure>\n\n\n\n<h4>Conclusions</h4>\n\n\n\n<p>In general, the larger the primes you use, the better the illusion of randomness. With smaller primes, you will get more variation, but less appearance of randomness. </p>\n\n\n\n<p>There are two main ways to use primes to create the illusion of randomness with <code>:nth-child()</code> selectors: </p>\n\n\n\n<p>The first way is to set each trait on <code>:nth-child(pn + b)</code> where p is a prime that increases with each value and b is constant for each trait, like so:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>:nth-child(3n + 1)  { property1: value11; }\n:nth-child(5n + 1)  { property1: value12; }\n:nth-child(7n + 1)  { property1: value13; }\n:nth-child(11n + 1) { property1: value14; }\n...\n:nth-child(3n + 2)  { property2: value21; }\n:nth-child(5n + 2)  { property2: value22; }\n:nth-child(7n + 2)  { property2: value23; }\n:nth-child(11n + 2) { property2: value24; }\n...</code></pre>\n\n\n\n<p>The benefit of this approach is that you can have as few or as many values as you like. The drawback is that because primes are sparse, and become sparser as we go, you will have a lot of &#8220;holes&#8221; where your base value is applied.</p>\n\n\n\n<p>The second way (which is more on par with the original Cicada principle) is to set each trait on <code>:nth-child(pn + b)</code> where p is constant per trait, and b increases with each value:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>:nth-child(5n + 1) { property1: value11; }\n:nth-child(5n + 2) { property1: value12; }\n:nth-child(5n + 3) { property1: value13; }\n:nth-child(5n + 4) { property1: value14; }\n...\n:nth-child(7n + 1) { property2: value21; }\n:nth-child(7n + 2) { property2: value22; }\n:nth-child(7n + 3) { property2: value23; }\n:nth-child(7n + 4) { property2: value24; }\n...</code></pre>\n\n\n\n<p>This creates a better overall impression of randomness (especially if you order the values in a pseudo-random way too) without &#8220;holes&#8221;, but is more tedious, as you need as many values as the prime you&#8217;re using.</p>\n\n\n\n<p>What other cool examples can you think of?</p>",
      "content_text": "Many of today‚Äôs web crafters were not writing CSS at the time Alex Walker‚Äôs landmark article The Cicada Principle and Why it Matters to Web Designers was published in 2011. Last I heard of it was in 2016, when it was used in conjunction with blend modes to pseudo-randomize backgrounds even further.\n\n\n\nSo what is the Cicada Principle and how does it relate to web design in a nutshell? It boils down to: when using repeating elements (tiled backgrounds, different effects on multiple elements etc), using prime numbers for the size of the repeating unit maximizes the appearance of organic randomness. Note that this only works when the parameters you set are independent.\n\n\n\nWhen I recently redesigned my blog, I ended up using a variation of the Cicada principle to pseudo-randomize the angles of code snippets. I didn‚Äôt think much of it until I saw this tweet:\n\n\n\n\n\n\n\n\ndigging the look of code blocks in @LeaVerou‚Äôs redesign:(from this article: https://t.co/PAzOuZ1zjW ) pic.twitter.com/RT4IsWMhyL‚Äî From The Book of Saw Robson (@StuRobson) June 19, 2020\n\n\n\n\nThis made me think: hey, maybe I should actually write a blog post about the technique. After all, the technique itself is useful for way more than angles on code snippets.\n\n\n\nThe main idea is simple: You write your main rule using CSS variables, and then use :nth-of-*() rules to set these variables to something different every N items. If you use enough variables, and choose your Ns for them to be prime numbers, you reach a good appearance of pseudo-randomness with relatively small Ns.\n\n\n\nIn the case of code samples, I only have two different top cuts (going up or going down) and two different bottom cuts (same), which produce 2*2 = 4 different shapes. Since I only had four shapes, I wanted to maximize the pseudo-randomness of their order. A first attempt looks like this:\n\n\n\npre {\n\tclip-path: polygon(var(--clip-top), var(--clip-bottom));\n\t--clip-top: 0 0, 100% 2em;\n\t--clip-bottom: 100% calc(100% - 1.5em), 0 100%;\n}\n\npre:nth-of-type(odd) {\n\t--clip-top: 0 2em, 100% 0;\n}\n\npre:nth-of-type(3n + 1) {\n\t--clip-bottom: 100% 100%, 0 calc(100% - 1.5em);\n}\n\n\n\nThis way, the exact sequence of shapes repeats every 2 * 3 = 6 code snippets. Also, the alternative --clip-bottom doesn‚Äôt really get the same visibility as the others, being present only 33.333% of the time. However, if we just add one more selector:\n\n\n\npre {\n\tclip-path: polygon(var(--clip-top), var(--clip-bottom));\n\t--clip-top: 0 0, 100% 2em;\n\t--clip-bottom: 100% calc(100% - 1.5em), 0 100%;\n}\n\npre:nth-of-type(odd) {\n\t--clip-top: 0 2em, 100% 0;\n}\n\npre:nth-of-type(3n + 1),\npre:nth-of-type(5n + 1) {\n\t--clip-bottom: 100% 100%, 0 calc(100% - 1.5em);\n}\n\n\n\nNow the exact same sequence of shapes repeats every 2 * 3 * 5 = 30 code snippets, probably way more than I will have in any article. And it‚Äôs more fair to the alternate --clip-bottom, which now gets 1/3 + 1/5 ‚Äì 1/15 = 46.67%, which is almost as much as the alternate --clip-top gets!\n\n\n\nYou can explore this effect in this codepen:\n\n\n\n\n\n\n\n\n\nOr, to better explore how different CSS creates different pseudo-randomness, you can use this content-less version with three variations:\n\n\n\n\n\n\n\n\n\nOf course, the illusion of randomness is much better with more shapes, e.g. if we introduce a third type of edge we get 3 * 3 = 9 possible shapes:\n\n\n\n\n\n\n\n\n\nI also used primes 7 and 11, so that the sequence repeats every 77 items. In general, the larger primes you use, the better the illusion of randomness, but you need to include more selectors, which can get tedious.\n\n\n\nOther examples\n\n\n\nSo this got me thinking: What else would this technique be cool on? Especially if we include more values as well, we can pseudo-randomize the result itself better, and not just the order of only 4 different results.\n\n\n\nSo I did a few experiments.\n\n\n\nPseudo-randomized color swatches\n\n\n\n\n\nPseudo-randomized color swatches, with variables for hue, saturation, and lightness.\n\n\n\nAnd an alternative version:\n\n\n\n\n\n\n\n\n\nWhich one looks more random? Why do you think that is?\n\n\n\nPseudo-randomized border-radius\n\n\n\nAdmittedly, this one can be done with just longhands, but since I realized this after I had already made it, I figured eh, I may as well include it \n\n\n\n\n\n\n\n\n\nIt is also really cool when combined with pseudo-random colors (just hue this time):\n\n\n\n\n\n\n\n\n\nPseudo-randomized snowfall\n\n\n\nLots of things here:\n\n\n\nUsing translate and transform together to animate them separately without resorting to CSS.registerPropery()Pseudo-randomized horizontal offset, animation-delay, font-sizeTechnically we don‚Äôt need CSS variables to pseudo-randomize font-size, we can just set the property itself. However, variables enable us to pseudo-randomize it via a multiplier, in order to decouple the base font size from the pseudo-randomness, so we can edit them independently. And then we can use the same multiplier in animation-duration to make smaller snowflakes fall slower!\n\n\n\n\n\n\n\n\n\nConclusions\n\n\n\nIn general, the larger the primes you use, the better the illusion of randomness. With smaller primes, you will get more variation, but less appearance of randomness. \n\n\n\nThere are two main ways to use primes to create the illusion of randomness with :nth-child() selectors: \n\n\n\nThe first way is to set each trait on :nth-child(pn + b) where p is a prime that increases with each value and b is constant for each trait, like so:\n\n\n\n:nth-child(3n + 1)  { property1: value11; }\n:nth-child(5n + 1)  { property1: value12; }\n:nth-child(7n + 1)  { property1: value13; }\n:nth-child(11n + 1) { property1: value14; }\n...\n:nth-child(3n + 2)  { property2: value21; }\n:nth-child(5n + 2)  { property2: value22; }\n:nth-child(7n + 2)  { property2: value23; }\n:nth-child(11n + 2) { property2: value24; }\n...\n\n\n\nThe benefit of this approach is that you can have as few or as many values as you like. The drawback is that because primes are sparse, and become sparser as we go, you will have a lot of ‚Äúholes‚Äù where your base value is applied.\n\n\n\nThe second way (which is more on par with the original Cicada principle) is to set each trait on :nth-child(pn + b) where p is constant per trait, and b increases with each value:\n\n\n\n:nth-child(5n + 1) { property1: value11; }\n:nth-child(5n + 2) { property1: value12; }\n:nth-child(5n + 3) { property1: value13; }\n:nth-child(5n + 4) { property1: value14; }\n...\n:nth-child(7n + 1) { property2: value21; }\n:nth-child(7n + 2) { property2: value22; }\n:nth-child(7n + 3) { property2: value23; }\n:nth-child(7n + 4) { property2: value24; }\n...\n\n\n\nThis creates a better overall impression of randomness (especially if you order the values in a pseudo-random way too) without ‚Äúholes‚Äù, but is more tedious, as you need as many values as the prime you‚Äôre using.\n\n\n\nWhat other cool examples can you think of?",
      "date_published": "2020-07-07T17:50:11.000Z",
      "date_modified": "2020-07-07T17:50:11.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3054",
      "url": "https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/",
      "title": "Refactoring optional chaining into a large codebase: lessons learned",
      "summary": "Chinese translation by Coink Wang Now that optional chaining is supported across the board, I decided to finally refactor Mavo to use it (yes, yes, we do provide a transpiled version as well for older browsers, settle down). This is a moment I have been waiting for a long time, as I think optional chaining [‚Ä¶]",
      "content_html": "<p><a href=\"https://coink.wang/refactoring-optional-chaining-into-a-large-codebase-lessons-learned-chinese.html\">Chinese translation by Coink Wang</a></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://memegenerator.net/img/instances/400x/80477833/refactor-all-the-things.jpg\" alt=\"\"/></figure>\n\n\n\n<p>Now that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">optional chaining</a> is supported <a href=\"https://caniuse.com/#feat=mdn-javascript_operators_optional_chaining\">across the board</a>, I decided to finally refactor <a href=\"https://mavo.io\">Mavo</a> to use it (yes, yes, we do provide a transpiled version as well for older browsers, settle down). This is a moment I have been waiting for a long time, as I think optional chaining is the single most substantial JS syntax improvement since arrow functions and template strings. Yes, I think it&#8217;s more significant than async/await, just because of the mere frequency of code it improves. Property access is literally <em>everywhere</em>.</p>\n\n\n\n<span id=\"more-3054\"></span>\n\n\n\n<p>First off, what is <em>optional chaining</em>, in case you haven&#8217;t heard of it before?</p>\n\n\n\n<p>You know how you can&#8217;t just do <code>foo.bar.baz()</code> without checking if <code>foo</code> exists, and then if <code>foo.bar</code> exists, and then if <code>foo.bar.baz</code> exists because you&#8217;ll get an error? So you have to do something awkward like:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (foo &amp;&amp; foo.bar &amp;&amp; foo.bar.baz) {\n\tfoo.bar.baz();\n}</code></pre>\n\n\n\n<p>Or even:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>foo &amp;&amp; foo.bar &amp;&amp; foo.bar.baz &amp;&amp; foo.bar.baz();</code></pre>\n\n\n\n<p>Some even <a href=\"https://medium.com/@ismail9k/use-javascript-optional-chaining-today-f0b1d080b3c6\">contort object destructuring to help with this</a>. With optional chaining, you can just do this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>foo?.bar?.baz?.()</code></pre>\n\n\n\n<p>It supports normal property access, brackets (<code>foo?.[bar]</code>), and even function invocation (<code>foo?.()</code>). Sweet, right??</p>\n\n\n\n<p>Yes, <em>mostly.</em> Indeed, there is SO MUCH code that can be simplified with it, it&#8217;s incredible. But there are a few caveats.</p>\n\n\n\n<h2>Patterns to search for</h2>\n\n\n\n<p>Suppose you decided to go ahead and refactor your code as well. What to look for?</p>\n\n\n\n<p>There is of course the obvious <code>foo &amp;&amp; foo.bar</code> that becomes <code>foo?.bar</code>.</p>\n\n\n\n<p>There is also the conditional version of it, that we described in the beginning of this article, which uses <code>if()</code> for some or all of the checks in the chain.</p>\n\n\n\n<p>There are also a few more patterns.</p>\n\n\n\n<h3>Ternary</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>foo? foo.bar : defaultValue</code></pre>\n\n\n\n<p>Which can now be written as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>foo?.bar || defaultValue</code></pre>\n\n\n\n<p>or, using the other awesome new operator, the <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">nullish coalescing operator</a></em>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>foo?.bar ?? defaultValue</code></pre>\n\n\n\n<h3>Array checking</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (foo.length > 3) {\n\tfoo&#91;2]\n}</code></pre>\n\n\n\n<p>which now becomes:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>foo?.&#91;2]</code></pre>\n\n\n\n<p>Note that this is no substitute for a real array check, like the one done by <code>Array.isArray(foo)</code>. Do not go about replacing proper array checking with duck typing because it&#8217;s shorter. We stopped doing that over <a href=\"http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\">a decade ago</a>.</p>\n\n\n\n<h3>Regex match</h3>\n\n\n\n<p>Forget about things like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let match = \"#C0FFEE\".match(/#(&#91;A-Z]+)/i);\nlet hex = match &amp;&amp; match&#91;1];</code></pre>\n\n\n\n<p>Or even things like that:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let hex = (\"#C0FFEE\".match(/#(&#91;A-Z]+)/i) || &#91;,])&#91;1];</code></pre>\n\n\n\n<p>Now it&#8217;s just:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let hex = \"#C0FFEE\".match(/#(&#91;A-Z]+)/i)?.&#91;1];</code></pre>\n\n\n\n<p>In our case, I was able to even remove two utility functions and replace their invocations with this.</p>\n\n\n\n<h3>Feature detection</h3>\n\n\n\n<p>In simple cases, feature detection can be replaced by <code>?.</code>. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (element.prepend) element.prepend(otherElement);</code></pre>\n\n\n\n<p>becomes:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>element.prepend?.(otherElement);</code></pre>\n\n\n\n<h3>Don&#8217;t overdo it</h3>\n\n\n\n<p>While it may be tempting to convert code like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (foo) {\n\tsomething(foo.bar);\n\tsomethingElse(foo.baz);\n\tandOneLastThing(foo.yolo);\n}</code></pre>\n\n\n\n<p>to this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>something(foo?.bar);\nsomethingElse(foo?.baz);\nandOneLastThing(foo?.yolo);</code></pre>\n\n\n\n<p><em>Don&#8217;t</em>. You&#8217;re essentially having the JS runtime check <code>foo</code> three times instead of one. You may argue these things don&#8217;t matter much anymore performance-wise, but it&#8217;s the same repetition for the human reading your code: they have to mentally process the check for <code>foo</code> three times instead of one. And if they need to add another statement using property access on <code>foo</code>, they need to add yet another check, instead of just using the conditional that&#8217;s already there.</p>\n\n\n\n<h2>Caveats</h2>\n\n\n\n<h3>You still need to check before assignment</h3>\n\n\n\n<p>You may be tempted to convert things like:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (foo &amp;&amp; foo.bar) {\n\tfoo.bar.baz = someValue;\n}</code></pre>\n\n\n\n<p>to:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>foo?.bar?.baz = someValue;</code></pre>\n\n\n\n<p>Unfortunately, that&#8217;s not possible and will error. This was an actual snippet from our codebase:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (this.bar &amp;&amp; this.bar.edit) {\n\tthis.bar.edit.textContent = this._(\"edit\");\n}</code></pre>\n\n\n\n<p>Which I happily refactored to:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (this.bar?.edit) {\n\tthis.bar.edit.textContent = this._(\"edit\");\n}</code></pre>\n\n\n\n<p>All good so far, this works nicely. But then I thought, wait a second‚Ä¶ do I need the conditional at all? Maybe I can just do this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.bar?.edit?.textContent = this._(\"edit\");</code></pre>\n\n\n\n<p>Nope. <code>Uncaught SyntaxError: Invalid left-hand side in assignment</code>. Can&#8217;t do that. You still need the conditional. I literally kept doing this, and I&#8217;m glad I had ESLint in my editor to warn me about it without having to actually run the code.</p>\n\n\n\n<h3>It&#8217;s very easy to put the ?. in the wrong place or forget some ?.</h3>\n\n\n\n<p>Note that if you&#8217;re refactoring a long chain with optional chaining, you often need to insert multiple <code>?.</code> after the first one, for every member access that may or may not exist, otherwise you will get errors once the optional chaining returns undefined.</p>\n\n\n\n<p>Or, sometimes you may <em>think</em> you do, because you put the <code>?.</code> in the wrong place.</p>\n\n\n\n<p>Take the following real example. I originally refactored this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.children&#91;index]? this.children&#91;index].element : this.marker</code></pre>\n\n\n\n<p>into this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.children?.&#91;index].element ?? this.marker</code></pre>\n\n\n\n<p>then got a <code>TypeError: Cannot read property 'element' of undefined</code>. Oops! Then I fixed it by adding an additional <code>?.</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.children?.&#91;index]?.element ?? this.marker</code></pre>\n\n\n\n<p>This works, but is superfluous, as pointed out in the comments. I just needed to <em>move</em> the <code>?.</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.children.&#91;index]?.element ?? this.marker</code></pre>\n\n\n\n<p class=\"note\">Note that <a href=\"https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/#comment-4963612068\">as pointed out in the comments</a> be careful about replacing array length checks with optional access to the index. This might be bad for performance, because out-of-bounds access on an array is de-optimizing the code in V8 (as it has to check the prototype chain for such a property too, not only decide that there is no such index in the array).</p>\n\n\n\n<h3>It can introduce bugs if you&#8217;re not careful</h3>\n\n\n\n<p>If, like me, you go on a refactoring spree, it&#8217;s easy after a certain point to just introduce optional chaining in places where it actually ends up <em>changing what your code does</em> and introducing subtle bugs. </p>\n\n\n\n<h4>null vs undefined</h4>\n\n\n\n<p>Possibly the most common pattern is replacing <code>foo &amp;&amp; foo.bar</code> with <code>foo?.bar</code>. While in most cases these work equivalently, this is not true for every case. When <code>foo</code> is <code>null</code>, the former returns <code>null</code>, whereas the latter returns <code>undefined</code>. This can cause bugs to creep up in cases where the distinction matters and is probably the most common way to introduce bugs with this type of refactoring.</p>\n\n\n\n<h4>Equality checks</h4>\n\n\n\n<p>Be careful about converting code like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (foo &amp;&amp; bar &amp;&amp; foo.prop1 === bar.prop2) { /* ... */ }</code></pre>\n\n\n\n<p>to code like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (foo?.prop1 === bar?.prop2) { /* ... */ }</code></pre>\n\n\n\n<p>In the first case, the condition will not be true, unless <em>both</em> <code>foo</code> and <code>bar</code> are truthy. However, in the second case, if <em>both</em> <code>foo</code> and <code>bar</code> are nullish, the conditional will be true, because both operands will return <code>undefined</code>!</p>\n\n\n\n<p>The same bug can creep in even if the second operand doesn&#8217;t include any optional chaining, as long as it could be <code>undefined</code> you can get unintended matches.</p>\n\n\n\n<h4>Operator precedence slips</h4>\n\n\n\n<p>One thing to look out for is that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">optional chaining has higher precedence than <code>&amp;&amp;</code></a>. This becomes particularly significant when you replace an expression using <code>&amp;&amp;</code> that also involves equality checks, since the (in)equality operators are sandwiched between <code>?.</code> and <code>&amp;&amp;</code>, having lower precedence than the former and higher than the latter. </p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (foo &amp;&amp; foo.bar === baz) { /* ... */ }</code></pre>\n\n\n\n<p>What is compared with <code>baz</code> here? <code>foo.bar</code> or <code>foo &amp;&amp; foo.bar</code>? Since <code>&amp;&amp;</code> has lower precedence than <code>===</code>, it&#8217;s as if we had written:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (foo &amp;&amp; (foo.bar === baz)) { /* ... */ }</code></pre>\n\n\n\n<p>Note that the conditional cannot ever be executed if <code>foo</code> is falsy. However, once we refactor it to use optional chaining, it is now as if we were comparing (<code>foo &amp;&amp; foo.bar</code>) to <code>baz</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (foo?.bar === baz) { /* ... */ }</code></pre>\n\n\n\n<p>An obvious case where the different semantics affect execution is when <code>baz</code> is <code>undefined</code>. In that case, we can enter the conditional when <code>foo</code> is nullish, since then optional chaining will return <code>undefined</code>, which is basically the case we described above. In most other cases this doesn&#8217;t make a big difference. It can however be pretty bad when instead of an equality operator, you have an <em>inequality</em> operator, which still has the same precedence. Compare this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (foo &amp;&amp; foo.bar !== baz) { /* ... */ }</code></pre>\n\n\n\n<p>with this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (foo?.bar !== baz) { /* ... */ }</code></pre>\n\n\n\n<p>Now, we are going to enter the conditional every time <code>foo</code> is nullish, as long as <code>baz</code> is not <code>undefined</code>! The difference is not noticeable in an edge case anymore, but in the average case! <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f631.png\" alt=\"üò±\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<h4>Return statements</h4>\n\n\n\n<p>Rather obvious after you think about it, but it&#8217;s easy to forget return statements in the heat of the moment. You cannot replace things like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (foo &amp;&amp; foo.bar) {\n\treturn foo.bar();\n}</code></pre>\n\n\n\n<p>with:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>return foo?.bar?.();</code></pre>\n\n\n\n<p>In the first case, you return conditionally, whereas in the second case you return always. This will not introduce any issues if the conditional is the last statement in your function, but it will change the control flow if it&#8217;s not.</p>\n\n\n\n<h4>Sometimes, it can fix bugs too!</h4>\n\n\n\n<p>Take a look at this code I encountered during my refactoring:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Get the current value of a CSS property on an element\n */\ngetStyle: (element, property) => {\n\tif (element) {\n\t\tvar value = getComputedStyle(element).getPropertyValue(property);\n\n\t\tif (value) {\n\t\t\treturn value.trim();\n\t\t}\n\t}\n},</code></pre>\n\n\n\n<p>Can you spot the bug? If <code>value</code> is an empty string (and given the context, it could very well be), the function will return <code>undefined</code>, because an empty string is falsy! Rewriting it to use optional chaining fixes this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (element) {\n\tvar value = getComputedStyle(element).getPropertyValue(property);\n\n\treturn value?.trim();\n}</code></pre>\n\n\n\n<p>Now, if <code>value</code> is the empty string, it will still return an empty string and it will only return <code>undefined</code> when <code>value</code> is nullish.</p>\n\n\n\n<h4>Finding usages becomes trickier</h4>\n\n\n\n<p>This was pointed out by Razvan Caliman on Twitter:</p>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Thank you for sharing your experience! <br><br>When looking to use the optional chaining operator within Firefox DevTools, one thing we had to consider is how it affects project-wide search results for uses of a method, like `object.destroy()` vs `object.destroy?.()`, when refactoring.</p>&mdash; Razvan Caliman (@razvancaliman) <a href=\"https://twitter.com/razvancaliman/status/1273638529399230464?ref_src=twsrc%5Etfw\">June 18, 2020</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<h2>Bottom line</h2>\n\n\n\n<p>In the end, this refactor made Mavo about 2KB lighter and saved 37  lines of code. It did however make the transpiled version 79 lines and  9KB (!) heavier.</p>\n\n\n\n<p><a href=\"https://github.com/mavoweb/mavo/commit/a8fb2e1f8c478aa7110aaf13ade57a40825ec71e\">Here is the relevant commit</a>, for your perusal. I tried my best to exercise restraint and not introduce any unrelated refactoring in this commit, so that the diff is chock-full of optional chaining examples. It has 104 additions and 141 deletions, so I&#8217;d wager it has about 100 examples of optional chaining in practice. Hope it&#8217;s helpful!</p>",
      "content_text": "Chinese translation by Coink Wang\n\n\n\n\n\n\n\nNow that optional chaining is supported across the board, I decided to finally refactor Mavo to use it (yes, yes, we do provide a transpiled version as well for older browsers, settle down). This is a moment I have been waiting for a long time, as I think optional chaining is the single most substantial JS syntax improvement since arrow functions and template strings. Yes, I think it‚Äôs more significant than async/await, just because of the mere frequency of code it improves. Property access is literally everywhere.\n\n\n\n\n\n\n\nFirst off, what is optional chaining, in case you haven‚Äôt heard of it before?\n\n\n\nYou know how you can‚Äôt just do foo.bar.baz() without checking if foo exists, and then if foo.bar exists, and then if foo.bar.baz exists because you‚Äôll get an error? So you have to do something awkward like:\n\n\n\nif (foo && foo.bar && foo.bar.baz) {\n\tfoo.bar.baz();\n}\n\n\n\nOr even:\n\n\n\nfoo && foo.bar && foo.bar.baz && foo.bar.baz();\n\n\n\nSome even contort object destructuring to help with this. With optional chaining, you can just do this:\n\n\n\nfoo?.bar?.baz?.()\n\n\n\nIt supports normal property access, brackets (foo?.[bar]), and even function invocation (foo?.()). Sweet, right??\n\n\n\nYes, mostly. Indeed, there is SO MUCH code that can be simplified with it, it‚Äôs incredible. But there are a few caveats.\n\n\n\nPatterns to search for\n\n\n\nSuppose you decided to go ahead and refactor your code as well. What to look for?\n\n\n\nThere is of course the obvious foo && foo.bar that becomes foo?.bar.\n\n\n\nThere is also the conditional version of it, that we described in the beginning of this article, which uses if() for some or all of the checks in the chain.\n\n\n\nThere are also a few more patterns.\n\n\n\nTernary\n\n\n\nfoo? foo.bar : defaultValue\n\n\n\nWhich can now be written as:\n\n\n\nfoo?.bar || defaultValue\n\n\n\nor, using the other awesome new operator, the nullish coalescing operator:\n\n\n\nfoo?.bar ?? defaultValue\n\n\n\nArray checking\n\n\n\nif (foo.length > 3) {\n\tfoo[2]\n}\n\n\n\nwhich now becomes:\n\n\n\nfoo?.[2]\n\n\n\nNote that this is no substitute for a real array check, like the one done by Array.isArray(foo). Do not go about replacing proper array checking with duck typing because it‚Äôs shorter. We stopped doing that over a decade ago.\n\n\n\nRegex match\n\n\n\nForget about things like this:\n\n\n\nlet match = \"#C0FFEE\".match(/#([A-Z]+)/i);\nlet hex = match && match[1];\n\n\n\nOr even things like that:\n\n\n\nlet hex = (\"#C0FFEE\".match(/#([A-Z]+)/i) || [,])[1];\n\n\n\nNow it‚Äôs just:\n\n\n\nlet hex = \"#C0FFEE\".match(/#([A-Z]+)/i)?.[1];\n\n\n\nIn our case, I was able to even remove two utility functions and replace their invocations with this.\n\n\n\nFeature detection\n\n\n\nIn simple cases, feature detection can be replaced by ?.. For example:\n\n\n\nif (element.prepend) element.prepend(otherElement);\n\n\n\nbecomes:\n\n\n\nelement.prepend?.(otherElement);\n\n\n\nDon‚Äôt overdo it\n\n\n\nWhile it may be tempting to convert code like this:\n\n\n\nif (foo) {\n\tsomething(foo.bar);\n\tsomethingElse(foo.baz);\n\tandOneLastThing(foo.yolo);\n}\n\n\n\nto this:\n\n\n\nsomething(foo?.bar);\nsomethingElse(foo?.baz);\nandOneLastThing(foo?.yolo);\n\n\n\nDon‚Äôt. You‚Äôre essentially having the JS runtime check foo three times instead of one. You may argue these things don‚Äôt matter much anymore performance-wise, but it‚Äôs the same repetition for the human reading your code: they have to mentally process the check for foo three times instead of one. And if they need to add another statement using property access on foo, they need to add yet another check, instead of just using the conditional that‚Äôs already there.\n\n\n\nCaveats\n\n\n\nYou still need to check before assignment\n\n\n\nYou may be tempted to convert things like:\n\n\n\nif (foo && foo.bar) {\n\tfoo.bar.baz = someValue;\n}\n\n\n\nto:\n\n\n\nfoo?.bar?.baz = someValue;\n\n\n\nUnfortunately, that‚Äôs not possible and will error. This was an actual snippet from our codebase:\n\n\n\nif (this.bar && this.bar.edit) {\n\tthis.bar.edit.textContent = this._(\"edit\");\n}\n\n\n\nWhich I happily refactored to:\n\n\n\nif (this.bar?.edit) {\n\tthis.bar.edit.textContent = this._(\"edit\");\n}\n\n\n\nAll good so far, this works nicely. But then I thought, wait a second‚Ä¶ do I need the conditional at all? Maybe I can just do this:\n\n\n\nthis.bar?.edit?.textContent = this._(\"edit\");\n\n\n\nNope. Uncaught SyntaxError: Invalid left-hand side in assignment. Can‚Äôt do that. You still need the conditional. I literally kept doing this, and I‚Äôm glad I had ESLint in my editor to warn me about it without having to actually run the code.\n\n\n\nIt‚Äôs very easy to put the ?. in the wrong place or forget some ?.\n\n\n\nNote that if you‚Äôre refactoring a long chain with optional chaining, you often need to insert multiple ?. after the first one, for every member access that may or may not exist, otherwise you will get errors once the optional chaining returns undefined.\n\n\n\nOr, sometimes you may think you do, because you put the ?. in the wrong place.\n\n\n\nTake the following real example. I originally refactored this:\n\n\n\nthis.children[index]? this.children[index].element : this.marker\n\n\n\ninto this:\n\n\n\nthis.children?.[index].element ?? this.marker\n\n\n\nthen got a TypeError: Cannot read property 'element' of undefined. Oops! Then I fixed it by adding an additional ?.:\n\n\n\nthis.children?.[index]?.element ?? this.marker\n\n\n\nThis works, but is superfluous, as pointed out in the comments. I just needed to move the ?.:\n\n\n\nthis.children.[index]?.element ?? this.marker\n\n\n\nNote that as pointed out in the comments be careful about replacing array length checks with optional access to the index. This might be bad for performance, because out-of-bounds access on an array is de-optimizing the code in V8 (as it has to check the prototype chain for such a property too, not only decide that there is no such index in the array).\n\n\n\nIt can introduce bugs if you‚Äôre not careful\n\n\n\nIf, like me, you go on a refactoring spree, it‚Äôs easy after a certain point to just introduce optional chaining in places where it actually ends up changing what your code does and introducing subtle bugs. \n\n\n\nnull vs undefined\n\n\n\nPossibly the most common pattern is replacing foo && foo.bar with foo?.bar. While in most cases these work equivalently, this is not true for every case. When foo is null, the former returns null, whereas the latter returns undefined. This can cause bugs to creep up in cases where the distinction matters and is probably the most common way to introduce bugs with this type of refactoring.\n\n\n\nEquality checks\n\n\n\nBe careful about converting code like this:\n\n\n\nif (foo && bar && foo.prop1 === bar.prop2) { /* ... */ }\n\n\n\nto code like this:\n\n\n\nif (foo?.prop1 === bar?.prop2) { /* ... */ }\n\n\n\nIn the first case, the condition will not be true, unless both foo and bar are truthy. However, in the second case, if both foo and bar are nullish, the conditional will be true, because both operands will return undefined!\n\n\n\nThe same bug can creep in even if the second operand doesn‚Äôt include any optional chaining, as long as it could be undefined you can get unintended matches.\n\n\n\nOperator precedence slips\n\n\n\nOne thing to look out for is that optional chaining has higher precedence than &&. This becomes particularly significant when you replace an expression using && that also involves equality checks, since the (in)equality operators are sandwiched between ?. and &&, having lower precedence than the former and higher than the latter. \n\n\n\nif (foo && foo.bar === baz) { /* ... */ }\n\n\n\nWhat is compared with baz here? foo.bar or foo && foo.bar? Since && has lower precedence than ===, it‚Äôs as if we had written:\n\n\n\nif (foo && (foo.bar === baz)) { /* ... */ }\n\n\n\nNote that the conditional cannot ever be executed if foo is falsy. However, once we refactor it to use optional chaining, it is now as if we were comparing (foo && foo.bar) to baz:\n\n\n\nif (foo?.bar === baz) { /* ... */ }\n\n\n\nAn obvious case where the different semantics affect execution is when baz is undefined. In that case, we can enter the conditional when foo is nullish, since then optional chaining will return undefined, which is basically the case we described above. In most other cases this doesn‚Äôt make a big difference. It can however be pretty bad when instead of an equality operator, you have an inequality operator, which still has the same precedence. Compare this:\n\n\n\nif (foo && foo.bar !== baz) { /* ... */ }\n\n\n\nwith this:\n\n\n\nif (foo?.bar !== baz) { /* ... */ }\n\n\n\nNow, we are going to enter the conditional every time foo is nullish, as long as baz is not undefined! The difference is not noticeable in an edge case anymore, but in the average case! \n\n\n\nReturn statements\n\n\n\nRather obvious after you think about it, but it‚Äôs easy to forget return statements in the heat of the moment. You cannot replace things like this:\n\n\n\nif (foo && foo.bar) {\n\treturn foo.bar();\n}\n\n\n\nwith:\n\n\n\nreturn foo?.bar?.();\n\n\n\nIn the first case, you return conditionally, whereas in the second case you return always. This will not introduce any issues if the conditional is the last statement in your function, but it will change the control flow if it‚Äôs not.\n\n\n\nSometimes, it can fix bugs too!\n\n\n\nTake a look at this code I encountered during my refactoring:\n\n\n\n/**\n * Get the current value of a CSS property on an element\n */\ngetStyle: (element, property) => {\n\tif (element) {\n\t\tvar value = getComputedStyle(element).getPropertyValue(property);\n\n\t\tif (value) {\n\t\t\treturn value.trim();\n\t\t}\n\t}\n},\n\n\n\nCan you spot the bug? If value is an empty string (and given the context, it could very well be), the function will return undefined, because an empty string is falsy! Rewriting it to use optional chaining fixes this:\n\n\n\nif (element) {\n\tvar value = getComputedStyle(element).getPropertyValue(property);\n\n\treturn value?.trim();\n}\n\n\n\nNow, if value is the empty string, it will still return an empty string and it will only return undefined when value is nullish.\n\n\n\nFinding usages becomes trickier\n\n\n\nThis was pointed out by Razvan Caliman on Twitter:\n\n\n\n\nThank you for sharing your experience! When looking to use the optional chaining operator within Firefox DevTools, one thing we had to consider is how it affects project-wide search results for uses of a method, like `object.destroy()` vs `object.destroy?.()`, when refactoring.‚Äî Razvan Caliman (@razvancaliman) June 18, 2020\n\n\n\n\nBottom line\n\n\n\nIn the end, this refactor made Mavo about 2KB lighter and saved 37  lines of code. It did however make the transpiled version 79 lines and  9KB (!) heavier.\n\n\n\nHere is the relevant commit, for your perusal. I tried my best to exercise restraint and not introduce any unrelated refactoring in this commit, so that the diff is chock-full of optional chaining examples. It has 104 additions and 141 deletions, so I‚Äôd wager it has about 100 examples of optional chaining in practice. Hope it‚Äôs helpful!",
      "date_published": "2020-06-18T14:56:08.000Z",
      "date_modified": "2020-06-18T14:56:08.000Z"
    },
    {
      "id": "https://lea.verou.me/?p=3034",
      "url": "https://lea.verou.me/2020/06/hybrid-positioning-with-css-variables-and-max/",
      "title": "Hybrid positioning with CSS variables and max()",
      "summary": "One of my side projects these days is a color space agnostic color conversion & manipulation library, which I‚Äôm developing together with my husband, Chris Lilley (you can see a sneak peek of its docs above). He brings his color science expertise to the table, and I bring my JS & API design experience, so [‚Ä¶]",
      "content_html": "<figure class=\"wp-block-video\"><video autoplay loop muted src=\"https://lea.verou.me/wp-content/uploads/2020/06/scrolltop1.mp4\"></video><figcaption>Notice how the navigation on the left behaves wrt scrolling: It&#8217;s like absolute at first that becomes fixed once the header scrolls out of the viewport.</figcaption></figure>\n\n\n\n<p>One of my side projects these days is a color space agnostic color conversion &amp; manipulation library, which I&#8217;m developing together with my husband, <a href=\"https://svgees.us\">Chris Lilley</a> (you can see a sneak peek of its docs above). He brings his color science expertise to the table, and I bring my JS &amp; API design experience, so it&#8217;s a great match and I&#8217;m really excited about it! (<em>if you&#8217;re serious about color and you&#8217;re building a tool or demo that would benefit from it contact me, we need as much early feedback on the API as we can get! </em>)</p>\n\n\n\n<p>For the documentation, I wanted to have the page navigation on the side (when there is enough space), right under the header when scrolled all the way to the top, but I wanted it to scroll with the page (as if it was absolutely positioned) until the header is out of view, and then stay at the top for the rest of the scrolling (as if it used fixed positioning).</p>\n\n\n\n<span id=\"more-3034\"></span>\n\n\n\n<p>It sounds very much like a case for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\"><code>position: sticky</code></a>, doesn&#8217;t it? However, an element with <code>position: sticky</code> behaves like it&#8217;s relatively positioned when it&#8217;s in view and like it&#8217;s using <code>position: fixed</code> when its scrolled out of view but its container is still in view. What I wanted here was different. I basically wanted <code>position: absolute</code> while the header was in view and <code>position: fixed</code> after. Yes, there are ways I could have contorted <code>position: sticky</code> to do what I wanted, but was there another solution?</p>\n\n\n\n<p>In the past, we&#8217;d just go straight to JS, slap <code>position: absolute</code> on our element, calculate the offset in a <code>scroll</code> event listener and set a <code>top</code> CSS property on our element. However, this is flimsy and violates separation of concerns, as we now need to modify Javascript to change styling. Pass!</p>\n\n\n\n<p>What if instead we had access to the scroll offset in CSS? Would that be sufficient to solve our use case? Let&#8217;s find out!</p>\n\n\n\n<p>As I pointed out in my <a href=\"https://increment.com/frontend/a-users-guide-to-css-variables/\">Increment article about CSS Variables</a> last month, and in <a href=\"https://www.youtube.com/results?search_query=lea+verou+%22css+variables%22\">my CSS Variables series of talks a few years ago</a>, we can use JS to set &amp; update CSS variables on the root that describe pure data (mouse position, input values, scroll offset etc), and then use them as-needed throughout our CSS, reaching near-perfect separation of concerns for many common cases. In this case, we write 3 lines of JS to set a <code>--scrolltop</code> variable:</p>\n\n\n\n<pre class=\"wp-block-code language-js\"><code>let root = document.documentElement;\ndocument.addEventListener(\"scroll\", evt => {\n\troot.style.setProperty(\"--scrolltop\", root.scrollTop);\n});</code></pre>\n\n\n\n<p>Then, we can position our navigation absolutely, and subtract <code>var(--scrolltop)</code> to offset any scroll (<code>11rem</code> is our header height):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#toc {\n\tposition: fixed;\n\ttop: calc(11rem - var(--scrolltop) * 1px);\n}</code></pre>\n\n\n\n<p>This works up to a certain point, but once scrolltop exceeds the height of the header, <code>top</code> becomes negative and our navigation starts drifting off screen:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay loop muted src=\"https://lea.verou.me/wp-content/uploads/2020/06/scrolltop2.mp4\"></video><figcaption>Just subtracting <code>--scrolltop</code> essentially implements absolute positioning with <code>position: fixed</code>.</figcaption></figure>\n\n\n\n<p>We&#8217;ve basically re-implemented absolute positioning with <code>position: fixed</code>, which is not very useful! What we <em>really</em> want is to cap the result of the calculation to <code>0</code> so that our navigation always remains visible. Wouldn&#8217;t it be great if there was a <code>max-top</code> attribute, just like <code>max-width</code> so that we could do this?</p>\n\n\n\n<p>One thought might be to change the JS and use <code>Math.max()</code> to cap <code>--scrolltop</code> to a specific number that corresponds to our header height. However, while this would work for this particular case, it means that <code>--scrolltop</code> cannot be used generically anymore, because it&#8217;s tailored to our specific use case and does not correspond to the actual scroll offset. Also, this encodes more about styling in the JS than is ideal, since the clamping we need is presentation-related ‚Äî if our style was different, we may not need it anymore. But how can we do this without resorting to JS?</p>\n\n\n\n<p>Thankfully, we recently got implementations for probably the one feature I was pining for the most in CSS, for years: <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/min\">min()</a></code>, <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/max\">max()</a></code> and <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/clamp\">clamp()</a></code> functions, which bring the power of min/max constraints to any CSS property! And even for <code>width</code> and <code>height</code>, they are strictly more powerful than <code>min/max-*</code> because you can have any number of minimums and maximums, whereas the <code>min/max-*</code> properties limit you to only one.</p>\n\n\n\n<p>While <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/max#Browser_compatibility\">brower compatibility is actually pretty good</a>, we can&#8217;t just use it with no fallback, since this is one of the features where lack of support can be destructive. We will provide a fallback in our base style and use <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@supports\">@supports</a></code> to conditonally override it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#toc {\n\tposition: fixed;\n\ttop: 11em;\n}\n\n@supports (top: max(1em, 1px)) {\n\t#toc {\n\t\ttop: max(0em, 11rem - var(--scrolltop) * 1px);\n\t}\n}</code></pre>\n\n\n\n<p>Aaand that was it, this gives us the result we wanted!</p>\n\n\n\n<p>And because <code>--scrolltop</code> is sufficiently generic, we can re-use it anywhere in our CSS where we need access to the scroll offset. I&#8217;ve actually used exactly the scame <code>--scrolltop</code> setting JS code in my blog, to keep the gradient centerpoint on my logo while maintaining a <code>fixed</code> background attachment, so that various elements can use the same background and having it appear continuous, i.e. not affected by their own background positioning area:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay loop muted src=\"https://lea.verou.me/wp-content/uploads/2020/06/scrolltop-logo-1.mp4\"></video><figcaption>The website header and the post header are actually different element. The background appears continuous because it&#8217;s using <code>background-attachment: fixed</code>, and the scrolltop variable is used to emulate <code>background-attachment: scroll</code> while still using the viewport as the background positioning area for both backgrounds.</figcaption></figure>\n\n\n\n<h3>Appendix: Why didn&#8217;t we just use the cascade?</h3>\n\n\n\n<p>You might wonder, why do we even need <code>@supports</code>? Why not use the cascade, like we&#8217;ve always done to provide fallbacks for values without sufficiently universal support? I.e., why not just do this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#toc {\n\tposition: fixed;\n\ttop: 11em;\n\ttop: max(0em, 11rem - var(--scrolltop) * 1px);\n}</code></pre>\n\n\n\n<p>The reason is that when you use CSS variables, this does not work as expected. The browser doesn&#8217;t know if your property value is valid until the variable is resolved, and by then it has already processed the cascade and has thrown away any potential fallbacks.</p>\n\n\n\n<p>So, what would happen if we went this route and <code>max()</code> was not supported? Once the browser realizes that the second value is invalid due to using an unknown function, it will make the property <em><a href=\"https://www.w3.org/TR/css-variables-1/#invalid-at-computed-value-time\">invalid at computed value time</a></em>, which essentially equates to the <code>initial</code> keyword, and for the <code>top</code> property, the initial value is <code>0</code>. This would mean your navigation would overlap the header when scrolled close to the top, which is <em>terrible</em>!</p>",
      "content_text": "Notice how the navigation on the left behaves wrt scrolling: It‚Äôs like absolute at first that becomes fixed once the header scrolls out of the viewport.\n\n\n\nOne of my side projects these days is a color space agnostic color conversion & manipulation library, which I‚Äôm developing together with my husband, Chris Lilley (you can see a sneak peek of its docs above). He brings his color science expertise to the table, and I bring my JS & API design experience, so it‚Äôs a great match and I‚Äôm really excited about it! (if you‚Äôre serious about color and you‚Äôre building a tool or demo that would benefit from it contact me, we need as much early feedback on the API as we can get! )\n\n\n\nFor the documentation, I wanted to have the page navigation on the side (when there is enough space), right under the header when scrolled all the way to the top, but I wanted it to scroll with the page (as if it was absolutely positioned) until the header is out of view, and then stay at the top for the rest of the scrolling (as if it used fixed positioning).\n\n\n\n\n\n\n\nIt sounds very much like a case for position: sticky, doesn‚Äôt it? However, an element with position: sticky behaves like it‚Äôs relatively positioned when it‚Äôs in view and like it‚Äôs using position: fixed when its scrolled out of view but its container is still in view. What I wanted here was different. I basically wanted position: absolute while the header was in view and position: fixed after. Yes, there are ways I could have contorted position: sticky to do what I wanted, but was there another solution?\n\n\n\nIn the past, we‚Äôd just go straight to JS, slap position: absolute on our element, calculate the offset in a scroll event listener and set a top CSS property on our element. However, this is flimsy and violates separation of concerns, as we now need to modify Javascript to change styling. Pass!\n\n\n\nWhat if instead we had access to the scroll offset in CSS? Would that be sufficient to solve our use case? Let‚Äôs find out!\n\n\n\nAs I pointed out in my Increment article about CSS Variables last month, and in my CSS Variables series of talks a few years ago, we can use JS to set & update CSS variables on the root that describe pure data (mouse position, input values, scroll offset etc), and then use them as-needed throughout our CSS, reaching near-perfect separation of concerns for many common cases. In this case, we write 3 lines of JS to set a --scrolltop variable:\n\n\n\nlet root = document.documentElement;\ndocument.addEventListener(\"scroll\", evt => {\n\troot.style.setProperty(\"--scrolltop\", root.scrollTop);\n});\n\n\n\nThen, we can position our navigation absolutely, and subtract var(--scrolltop) to offset any scroll (11rem is our header height):\n\n\n\n#toc {\n\tposition: fixed;\n\ttop: calc(11rem - var(--scrolltop) * 1px);\n}\n\n\n\nThis works up to a certain point, but once scrolltop exceeds the height of the header, top becomes negative and our navigation starts drifting off screen:\n\n\n\nJust subtracting --scrolltop essentially implements absolute positioning with position: fixed.\n\n\n\nWe‚Äôve basically re-implemented absolute positioning with position: fixed, which is not very useful! What we really want is to cap the result of the calculation to 0 so that our navigation always remains visible. Wouldn‚Äôt it be great if there was a max-top attribute, just like max-width so that we could do this?\n\n\n\nOne thought might be to change the JS and use Math.max() to cap --scrolltop to a specific number that corresponds to our header height. However, while this would work for this particular case, it means that --scrolltop cannot be used generically anymore, because it‚Äôs tailored to our specific use case and does not correspond to the actual scroll offset. Also, this encodes more about styling in the JS than is ideal, since the clamping we need is presentation-related ‚Äî if our style was different, we may not need it anymore. But how can we do this without resorting to JS?\n\n\n\nThankfully, we recently got implementations for probably the one feature I was pining for the most in CSS, for years: min(), max() and clamp() functions, which bring the power of min/max constraints to any CSS property! And even for width and height, they are strictly more powerful than min/max-* because you can have any number of minimums and maximums, whereas the min/max-* properties limit you to only one.\n\n\n\nWhile brower compatibility is actually pretty good, we can‚Äôt just use it with no fallback, since this is one of the features where lack of support can be destructive. We will provide a fallback in our base style and use @supports to conditonally override it:\n\n\n\n#toc {\n\tposition: fixed;\n\ttop: 11em;\n}\n\n@supports (top: max(1em, 1px)) {\n\t#toc {\n\t\ttop: max(0em, 11rem - var(--scrolltop) * 1px);\n\t}\n}\n\n\n\nAaand that was it, this gives us the result we wanted!\n\n\n\nAnd because --scrolltop is sufficiently generic, we can re-use it anywhere in our CSS where we need access to the scroll offset. I‚Äôve actually used exactly the scame --scrolltop setting JS code in my blog, to keep the gradient centerpoint on my logo while maintaining a fixed background attachment, so that various elements can use the same background and having it appear continuous, i.e. not affected by their own background positioning area:\n\n\n\nThe website header and the post header are actually different element. The background appears continuous because it‚Äôs using background-attachment: fixed, and the scrolltop variable is used to emulate background-attachment: scroll while still using the viewport as the background positioning area for both backgrounds.\n\n\n\nAppendix: Why didn‚Äôt we just use the cascade?\n\n\n\nYou might wonder, why do we even need @supports? Why not use the cascade, like we‚Äôve always done to provide fallbacks for values without sufficiently universal support? I.e., why not just do this:\n\n\n\n#toc {\n\tposition: fixed;\n\ttop: 11em;\n\ttop: max(0em, 11rem - var(--scrolltop) * 1px);\n}\n\n\n\nThe reason is that when you use CSS variables, this does not work as expected. The browser doesn‚Äôt know if your property value is valid until the variable is resolved, and by then it has already processed the cascade and has thrown away any potential fallbacks.\n\n\n\nSo, what would happen if we went this route and max() was not supported? Once the browser realizes that the second value is invalid due to using an unknown function, it will make the property invalid at computed value time, which essentially equates to the initial keyword, and for the top property, the initial value is 0. This would mean your navigation would overlap the header when scrolled close to the top, which is terrible!",
      "date_published": "2020-06-05T04:17:23.000Z",
      "date_modified": "2020-06-05T04:17:23.000Z"
    },
    {
      "id": "http://lea.verou.me/?p=3000",
      "url": "https://lea.verou.me/2020/06/new-decade-new-theme/",
      "title": "New decade, new theme",
      "summary": "It has been almost a decade since this blog last saw a redesign. In these 9 years, my life changed dramatically. I joined and left W3C, joined the CSS WG, went to MIT for a PhD, published a book, got married, had a baby, among other things. I designed dozens of websites for dozens of [‚Ä¶]",
      "content_html": "<p>It has been <a href=\"http://lea.verou.me/2011/01/yet-another-redesign/\">almost a decade since this blog last saw a redesign</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img loading=\"lazy\" src=\"https://lea.verou.me/wp-content/uploads/2020/06/image.png\" alt=\"\" class=\"wp-image-3002\" width=\"610\" height=\"413\"/><figcaption>This blog&#8217;s theme 2011 &#8211; 2020. RIP!</figcaption></figure>\n\n\n\n<p>In these 9 years, my life changed dramatically. I <a href=\"http://lea.verou.me/2012/08/lea-at-w3-org/\">joined</a> and <a href=\"http://lea.verou.me/2013/07/leaving-w3c/\">left W3C</a>, <a href=\"https://en.wikipedia.org/wiki/CSS_Working_Group\">joined the CSS WG</a>, <a href=\"http://lea.verou.me/2014/02/im-going-to-mit/\">went to MIT for a PhD</a>, <a href=\"http://www.amazon.com/CSS-Secrets-Lea-Verou/dp/1449372635?tag=leaverou-20\">published a book</a>, <a href=\"https://www.facebook.com/leaverou/posts/10156857680266192\">got married</a>, <a href=\"https://twitter.com/leaverou/status/1153045069286563841\">had a baby</a>, among other things. I designed dozens of websites for dozens of projects, but this theme remained constant, with probably a hasty tweak here and there but nothing more than that. Even its mobile version was a few quick media queries to make it <em>palatable</em> on mobile.</p>\n\n\n\n<span id=\"more-3000\"></span>\n\n\n\n<p>To put this into perspective, when I designed that theme:</p>\n\n\n\n<ul><li>CSS gradients were still cutting edge</li><li>We were still using browser prefixes all over the place</li><li>RSS was still a thing that websites advertised</li><li>Skeuomorphism was all the rage</li><li>Websites were desktop first, and often desktop-only.</li><li>Opera was a browser we tested in.</li><li>IE8 was the latest IE version. It didn&#8217;t support SVG, gradients, border-radius, shadows, web fonts (except .eot), transforms, <code>&lt;video&gt;</code>, <code>&lt;audio&gt;</code>, <code>&lt;canvas&gt;</code></li><li>We were still hacking layout with floats, clearfix and <code>overflow: hidden</code></li></ul>\n\n\n\n<p>Over the course of these years, I kept saying &#8220;I need to update my website&#8217;s theme&#8221;, but never got around to it, there was always something more high priority.</p>\n\n\n\n<p>The stroke that broke the camel&#8217;s back was this Monday. I came up with a nice CSS tip on another website I was working on, and realized I was hesitating to blog about it because <em>I was embarrassed</em> at how my website looked. This is it, I thought. If it has gotten so bad that I avoid blogging because I don&#8217;t want people to be reminded of how old my website looks, I need to get my shit together and fix this, I told myself.</p>\n\n\n\n<p>My plan was to design something entirely from scratch, like I had done the previous time (the previous theme used a blank HTML5 starter theme as its only starting point). However, when I previewed the new WordPress default (<a href=\"https://wordpress.org/themes/twentytwenty/\">Twenty Twenty</a>), I fell in love, especially with its typography: it used <a href=\"https://rsms.me/inter/\">a very Helvetica-esque variable font</a> as its heading typeface, and Hoefler Text for body text. <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f60d.png\" alt=\"üòç\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<p>It would surely be very convenient to be able to adapt an existing theme, but on the other hand, isn&#8217;t it embarrassing to be known for CSS and use the default theme or something close to it?</p>\n\n\n\n<p>In the end, I kept the things I liked about it and it certainly still looks a lot like Twenty Twenty, but I think I&#8217;ve made enough tweaks that it&#8217;s also very <em>Lea</em>. And of course there are animated conic gradients in it, because duh. <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f602.png\" alt=\"üòÇ\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> </p>\n\n\n\n<p>Do keep in mind that this is just a day&#8217;s work, so it will be rough around the edges and still very much a work in progress. Let me know about any issues you find in the comments!</p>\n\n\n\n<p><small>PS: Yes, yes, I will eventually get around to enforcing <code>https://</code>!</small></p>",
      "content_text": "It has been almost a decade since this blog last saw a redesign.\n\n\n\nThis blog‚Äôs theme 2011 ‚Äì 2020. RIP!\n\n\n\nIn these 9 years, my life changed dramatically. I joined and left W3C, joined the CSS WG, went to MIT for a PhD, published a book, got married, had a baby, among other things. I designed dozens of websites for dozens of projects, but this theme remained constant, with probably a hasty tweak here and there but nothing more than that. Even its mobile version was a few quick media queries to make it palatable on mobile.\n\n\n\n\n\n\n\nTo put this into perspective, when I designed that theme:\n\n\n\nCSS gradients were still cutting edgeWe were still using browser prefixes all over the placeRSS was still a thing that websites advertisedSkeuomorphism was all the rageWebsites were desktop first, and often desktop-only.Opera was a browser we tested in.IE8 was the latest IE version. It didn‚Äôt support SVG, gradients, border-radius, shadows, web fonts (except .eot), transforms, <video>, <audio>, <canvas>We were still hacking layout with floats, clearfix and overflow: hidden\n\n\n\nOver the course of these years, I kept saying ‚ÄúI need to update my website‚Äôs theme‚Äù, but never got around to it, there was always something more high priority.\n\n\n\nThe stroke that broke the camel‚Äôs back was this Monday. I came up with a nice CSS tip on another website I was working on, and realized I was hesitating to blog about it because I was embarrassed at how my website looked. This is it, I thought. If it has gotten so bad that I avoid blogging because I don‚Äôt want people to be reminded of how old my website looks, I need to get my shit together and fix this, I told myself.\n\n\n\nMy plan was to design something entirely from scratch, like I had done the previous time (the previous theme used a blank HTML5 starter theme as its only starting point). However, when I previewed the new WordPress default (Twenty Twenty), I fell in love, especially with its typography: it used a very Helvetica-esque variable font as its heading typeface, and Hoefler Text for body text. \n\n\n\nIt would surely be very convenient to be able to adapt an existing theme, but on the other hand, isn‚Äôt it embarrassing to be known for CSS and use the default theme or something close to it?\n\n\n\nIn the end, I kept the things I liked about it and it certainly still looks a lot like Twenty Twenty, but I think I‚Äôve made enough tweaks that it‚Äôs also very Lea. And of course there are animated conic gradients in it, because duh.  \n\n\n\nDo keep in mind that this is just a day‚Äôs work, so it will be rough around the edges and still very much a work in progress. Let me know about any issues you find in the comments!\n\n\n\nPS: Yes, yes, I will eventually get around to enforcing https://!",
      "date_published": "2020-06-03T06:25:12.000Z",
      "date_modified": "2020-06-03T06:25:12.000Z"
    },
    {
      "id": "http://lea.verou.me/?p=2969",
      "url": "https://lea.verou.me/2020/05/todays-javascript-from-an-outsiders-perspective/",
      "title": "Today‚Äôs Javascript, from an outsider‚Äôs perspective",
      "summary": "Today I tried to help a friend who is a great computer scientist, but not a JS person use a JS module he found on Github. Since for the past 6 years my day job is doing usability research & teaching at MIT, I couldn‚Äôt help but cringe at the slog that this was. Lo [‚Ä¶]",
      "content_html": "<p>Today I tried to help a friend who is a great computer scientist, but not a JS person use a JS module he found on Github. Since for the past 6 years my day job is doing usability research &amp; teaching at MIT, I couldn&#8217;t help but cringe at the slog that this was. Lo and behold, a pile of unnecessary error conditions, cryptic errors, and lack of proper feedback. And I don&#8217;t feel I did a good job communicating the frustration he went through in the one hour or so until he gave up. </p>\n\n\n\n<span id=\"more-2969\"></span>\n\n\n\n<p>It went a bit like this‚Ä¶</p>\n\n\n\n<p>Note: N<em>ames of packages and people have been changed to protect their identity. I&#8217;ve also omitted a few issues he faced that were too specific to the package at hand. Some of the errors are reconstructed from memory, so let me know if I got anything wrong!</em></p>\n\n\n\n<p><strong>John:</strong> Hey, I want to try out this algorithm I found on Github, it says to use <code>import functionName from packageName</code> and then call <code>functionName(arguments)</code>. Seems simple enough! I don&#8217;t really need a UI, so I&#8217;m gonna use Node!</p>\n\n\n\n<p><strong>Lea:</strong> Sure, Node seems appropriate for this!</p>\n\n\n\n<p>John <em>runs <code>npm install packageName --save</code> as recommended by the package&#8217;s README</em><br />John <em>runs <code>node index.js</code></em></p>\n\n\n\n<p><strong>Node:</strong></p>\n\n\n\n<pre style=\"font-weight: bold; color: #d00\">Warning: To load an ES module, set \"type\": \"module\" in the package.json or use the .mjs extension.\nSyntaxError: Cannot use import statement outside a module</pre>\n\n\n\n<p><strong>John:</strong> But I don&#8217;t have a package.json‚Ä¶<br /><strong>Lea:</strong> Run <code>npm init</code>, it will generate it for you!</p>\n\n\n\n<p><em>John runs <code>npm init</code>, goes through the wizard, adds <code>type: \"module\"</code></em> manually to the generated package.json.<br />John <em>runs <code>node index.js</code></em></p>\n\n\n\n<p><strong>Node:</strong></p>\n\n\n\n<pre style=\"font-weight: bold; color: #d00\">SyntaxError: Cannot use import statement outside a module</pre>\n\n\n\n<p>Oddly, the error was thrown from an internal module of the project this time. WAT?!</p>\n\n\n\n<p><strong>Lea: </strong>Ok, screw this, just run it in a browser, it&#8217;s an ES6 module and it&#8217;s just a pure JS algorithm that doesn&#8217;t use any Node APIs, it should work.</p>\n\n\n\n<p>John <em>makes a simple index.html with a <code>&lt;script type=\"module\" src=\"index.js\"&gt;</code></em><br />John <em>loads index.html in a browser</em></p>\n\n\n\n<p>Nothing in the console. Nada. Crickets. <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f997.png\" alt=\"ü¶ó\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<p><strong>Lea:</strong> Oh, you need to adjust your module path to import packageName. Node does special stuff to resolve based on <code>node_modules</code>, now you&#8217;re in a browser you need to specify an explicit path yourself.</p>\n\n\n\n<p><em>John looks, at his filesystem, but there was no node_modules directory.</em></p>\n\n\n\n<p><strong>Lea:</strong> Oh, you ran <code>npm install</code> before you had a <code>package.json</code>, that&#8217;s probably it! Try it again!</p>\n\n\n\n<p><em>John runs <code>npm install packageName --save</code> again</em></p>\n\n\n\n<p><strong>John:</strong> Oh yeah, there is a node_modules now!</p>\n\n\n\n<p>John <em>desperately looks in <code>node_modules</code> to find the entry point</em><br />John <em>edits his index.js accordingly, reloads index.html</em></p>\n\n\n\n<p><strong>Firefox:</strong> </p>\n\n\n\n<pre style=\"font-weight: bold; color: #d00\">Incorrect MIME type: text/html</pre>\n\n\n\n<p><strong>Lea:</strong> Oh, you&#8217;re in <code>file://</code>! Dude, what are you doing these days without a localhost? Javascript is severely restricted in <code>file://</code> today.</p>\n\n\n\n<p><strong>John:</strong> But why do I‚Ä¶ ok fine, I&#8217;m going to start a localhost.</p>\n\n\n\n<p>John <em>starts localhost</em>, visits his index.html under http://localhost:80</p>\n\n\n\n<p><strong>Firefox:</strong></p>\n\n\n\n<pre style=\"font-weight: bold; color: #d00\">Incorrect MIME type: text/html</pre>\n\n\n\n<p><strong>John:</strong> Sigh. Do I need to configure my localhost to serve JS files with a <code>text/javascript</code> MIME type?<br /><strong>Lea:</strong> What? No! It knows this. Um‚Ä¶ look at the Networks tab, I suspect it can&#8217;t find your module, so it&#8217;s returning an HTML page for the 404, then it complains because the MIME type of the error page is not <code>text/javascript</code>.</p>\n\n\n\n<p><em>Looks at node_modules again, corrects path. Turns out VS Code collapses folders with only 1 subfolder, which is why we hadn&#8217;t noticed</em>. </p>\n\n\n\n<p>FWIW I do think this is a good usability improvement on VS Code&#8217;s behalf, it improves efficiency, but they need to make it more visible that this is what has happened.</p>\n\n\n\n<p><strong>Firefox:</strong></p>\n\n\n\n<pre style=\"font-weight: bold; color: #d00\">SyntaxError: missing ) after formal parameters</pre>\n\n\n\n<p><strong>Lea: </strong>What? That&#8217;s coming from the package source, it&#8217;s not your fault. I don&#8217;t understand‚Ä¶ can we look at this line?</p>\n\n\n\n<p><em>John clicks at line throwing the error</em></p>\n\n\n\n<p><strong>Lea:</strong> Oh my goodness. This is not Javascript, it&#8217;s Typescript!! With a .js extension!!<br /><strong>John:</strong> I just wanted to run one line of code to test this algorithm‚Ä¶ <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f62d.png\" alt=\"üò≠\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f62d.png\" alt=\"üò≠\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f62d.png\" alt=\"üò≠\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<p><em>John gives up</em>.<em> Concludes never to touch Node, npm, or ES6 modules with a barge pole.</em></p>\n\n\n\n<p>The End.</p>\n\n\n\n<p>Note that John is a computer scientist that knows a fair bit about the Web: He had Node &amp; npm installed, he knew what MIME types are, he could start a localhost when needed. What hope do actual novices have?</p>",
      "content_text": "Today I tried to help a friend who is a great computer scientist, but not a JS person use a JS module he found on Github. Since for the past 6 years my day job is doing usability research & teaching at MIT, I couldn‚Äôt help but cringe at the slog that this was. Lo and behold, a pile of unnecessary error conditions, cryptic errors, and lack of proper feedback. And I don‚Äôt feel I did a good job communicating the frustration he went through in the one hour or so until he gave up. \n\n\n\n\n\n\n\nIt went a bit like this‚Ä¶\n\n\n\nNote: Names of packages and people have been changed to protect their identity. I‚Äôve also omitted a few issues he faced that were too specific to the package at hand. Some of the errors are reconstructed from memory, so let me know if I got anything wrong!\n\n\n\nJohn: Hey, I want to try out this algorithm I found on Github, it says to use import functionName from packageName and then call functionName(arguments). Seems simple enough! I don‚Äôt really need a UI, so I‚Äôm gonna use Node!\n\n\n\nLea: Sure, Node seems appropriate for this!\n\n\n\nJohn runs npm install packageName --save as recommended by the package‚Äôs READMEJohn runs node index.js\n\n\n\nNode:\n\n\n\nWarning: To load an ES module, set \"type\": \"module\" in the package.json or use the .mjs extension.\nSyntaxError: Cannot use import statement outside a module\n\n\n\nJohn: But I don‚Äôt have a package.json‚Ä¶Lea: Run npm init, it will generate it for you!\n\n\n\nJohn runs npm init, goes through the wizard, adds type: \"module\" manually to the generated package.json.John runs node index.js\n\n\n\nNode:\n\n\n\nSyntaxError: Cannot use import statement outside a module\n\n\n\nOddly, the error was thrown from an internal module of the project this time. WAT?!\n\n\n\nLea: Ok, screw this, just run it in a browser, it‚Äôs an ES6 module and it‚Äôs just a pure JS algorithm that doesn‚Äôt use any Node APIs, it should work.\n\n\n\nJohn makes a simple index.html with a <script type=\"module\" src=\"index.js\">John loads index.html in a browser\n\n\n\nNothing in the console. Nada. Crickets. \n\n\n\nLea: Oh, you need to adjust your module path to import packageName. Node does special stuff to resolve based on node_modules, now you‚Äôre in a browser you need to specify an explicit path yourself.\n\n\n\nJohn looks, at his filesystem, but there was no node_modules directory.\n\n\n\nLea: Oh, you ran npm install before you had a package.json, that‚Äôs probably it! Try it again!\n\n\n\nJohn runs npm install packageName --save again\n\n\n\nJohn: Oh yeah, there is a node_modules now!\n\n\n\nJohn desperately looks in node_modules to find the entry pointJohn edits his index.js accordingly, reloads index.html\n\n\n\nFirefox: \n\n\n\nIncorrect MIME type: text/html\n\n\n\nLea: Oh, you‚Äôre in file://! Dude, what are you doing these days without a localhost? Javascript is severely restricted in file:// today.\n\n\n\nJohn: But why do I‚Ä¶ ok fine, I‚Äôm going to start a localhost.\n\n\n\nJohn starts localhost, visits his index.html under http://localhost:80\n\n\n\nFirefox:\n\n\n\nIncorrect MIME type: text/html\n\n\n\nJohn: Sigh. Do I need to configure my localhost to serve JS files with a text/javascript MIME type?Lea: What? No! It knows this. Um‚Ä¶ look at the Networks tab, I suspect it can‚Äôt find your module, so it‚Äôs returning an HTML page for the 404, then it complains because the MIME type of the error page is not text/javascript.\n\n\n\nLooks at node_modules again, corrects path. Turns out VS Code collapses folders with only 1 subfolder, which is why we hadn‚Äôt noticed. \n\n\n\nFWIW I do think this is a good usability improvement on VS Code‚Äôs behalf, it improves efficiency, but they need to make it more visible that this is what has happened.\n\n\n\nFirefox:\n\n\n\nSyntaxError: missing ) after formal parameters\n\n\n\nLea: What? That‚Äôs coming from the package source, it‚Äôs not your fault. I don‚Äôt understand‚Ä¶ can we look at this line?\n\n\n\nJohn clicks at line throwing the error\n\n\n\nLea: Oh my goodness. This is not Javascript, it‚Äôs Typescript!! With a .js extension!!John: I just wanted to run one line of code to test this algorithm‚Ä¶ \n\n\n\nJohn gives up. Concludes never to touch Node, npm, or ES6 modules with a barge pole.\n\n\n\nThe End.\n\n\n\nNote that John is a computer scientist that knows a fair bit about the Web: He had Node & npm installed, he knew what MIME types are, he could start a localhost when needed. What hope do actual novices have?",
      "date_published": "2020-05-25T23:53:44.000Z",
      "date_modified": "2020-05-25T23:53:44.000Z"
    },
    {
      "id": "http://lea.verou.me/?p=2934",
      "url": "https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/",
      "title": "LCH colors in CSS: what, why, and how?",
      "summary": "I was always interested in color science. In 2014, I gave a talk about CSS Color 4 at various conferences around the world called ‚ÄúThe Chroma Zone‚Äù. Even before that, in 2009, I wrote a color picker that used a hidden Java applet to support ICC color profiles to do CMYK properly, a first on [‚Ä¶]",
      "content_html": "<p>I was always interested in color science. In 2014, I gave a talk about CSS Color 4 at various conferences around the world called <em><a href=\"https://www.youtube.com/results?search_query=the+chroma+zone+lea+verou&amp;page=&amp;utm_source=opensearch\">&#8220;The Chroma Zone&#8221;</a></em>. Even before that, in 2009, I wrote a color picker that used a hidden Java applet to support ICC color profiles to do CMYK properly, a first on the Web at the time (to my knowledge). I never released it, but it sparked <a href=\"http://lea.verou.me/2009/03/100-cyan-in-cmyk-is-not-rgb0255255/\">this angry rant</a>.</p>\n\n\n\n<p>Color is also how I originally met my now husband, Chris Lilley: In my first CSS WG meeting in 2012, he approached me to ask a question about CSS and Greek, and once he introduced himself I said <em>&#8220;You&#8217;re Chris Lilley, the color expert?!? I have <strong>questions</strong> for you!&#8221;</em>. I later discovered that he had done even more cool things (he was a co-author of PNG and started SVG <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f92f.png\" alt=\"ü§Ø\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />), but at the time, I only knew of him as &#8220;the W3C color expert&#8221;, that&#8217;s how much into color I was <em>(I got my color questions answered much later, in 2015 that we actually got together)</em>.</p>\n\n\n\n<p>My interest in color science was renewed in 2019, after I became co-editor of <a href=\"http://drafts.csswg.org/css-color-5\">CSS Color 5</a>, with the goal of fleshing out <a href=\"https://drafts.csswg.org/css-color-5/#relative-colors\">my color modification proposal</a>, which aims to allow arbitrary tweaking of color channels to create color variations, and combine it with <a href=\"https://drafts.csswg.org/css-color-5/#coloradjust\">Una&#8217;s color modification proposal</a>. LCH colors in CSS is something I&#8217;m very excited about, and I strongly believe designers would be <strong>outraged</strong> we don&#8217;t have them yet if they knew more about them.</p>\n\n\n\n<span id=\"more-2934\"></span>\n\n\n\n<h2>What is LCH?</h2>\n\n\n\n<p><a href=\"https://www.w3.org/TR/css-color-4/#specifying-lab-lch\">CSS Color 4 defines lch() colors</a>, among other things, and as of recently, all major browsers have started implementing them or are seriously considering it:</p>\n\n\n\n<ul><li><a href=\"https://bugs.webkit.org/show_bug.cgi?id=205675\">Safari is already implementing</a>, </li><li><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1026287\">Chrome is about to</a>,</li><li>and <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1352757\">Firefox is discussing it</a>. </li></ul>\n\n\n\n<p><abbr title=\"Lightness Chroma Hue\">LCH</abbr> is a color space that has several advantages over the RGB/HSL colors we&#8217;re familiar with in CSS. In fact, I&#8217;d go as far as to call it a <strong>game-changer</strong>, and here&#8217;s why.</p>\n\n\n\n<h3>1. <strong>We actually get access to about 50% more colors.</strong></h3>\n\n\n\n<p>This is huge. Currently, every CSS color we can specify, is <a href=\"https://www.w3.org/TR/css-color-3/#rgb-color\">defined</a> to be in the <a href=\"https://en.wikipedia.org/wiki/SRGB\">sRGB color space</a>. This was more than sufficient a few years ago, since all but professional monitors had gamuts smaller than sRGB. However, that&#8217;s not true any more. Today, the gamut (range of possible colors displayed) of most monitors is closer to <a href=\"https://en.wikipedia.org/wiki/DCI-P3\">P3</a>, which has a <a href=\"https://twitter.com/svgeesus/status/1220029106248716288\">50% larger volume than sRGB</a>. CSS right now <strong>cannot access these colors at all</strong>. Let me repeat: <strong>We have no access to one third of the colors in most modern monitors.</strong> And these are not just any colors, but the <strong>most vivid colors the screen can display</strong>. Our websites are washed out because monitor hardware evolved faster than CSS specs and browser implementations.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"3466\" height=\"1323\" src=\"http://lea.verou.me/wp-content/uploads/2020/04/srgb-vs-p3.png\" alt=\"\" class=\"wp-image-2948\"/><figcaption>Gamut volume of sRGB vs P3</figcaption></figure>\n\n\n\n<h3>2. LCH (and Lab) is perceptually uniform</h3>\n\n\n\n<p>In LCH, the same numerical change in coordinates produces the same perceptual color difference. This property of a color space is called &#8220;perceptual uniformity&#8221;. RGB or HSL are not perceptually uniform. A very illustrative <a href=\"https://dabblet.com/gist/48ce387697106b845127d5cef5247a19\">example</a> is the following [<a href=\"https://www.boronine.com/2012/03/26/Color-Spaces-for-Human-Beings/?fbclid=IwAR0ztieCugTlncQH6FB7fqtr1NKaQjuAgwc5YzA75NPbLwH3Z5w1FBsdQQw\">example source</a>]:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://dabblet.com/gist/48ce387697106b845127d5cef5247a19\"><img loading=\"lazy\" width=\"1718\" height=\"542\" src=\"http://lea.verou.me/wp-content/uploads/2020/04/image-3.png\" alt=\"\" class=\"wp-image-2939\"/></a><figcaption>Both the colors in the first row, as well as the colors in the second row, only differ by 20 degrees in hue. Is the perceptual difference between them equal?</figcaption></figure>\n\n\n\n<h3>3. LCH lightness actually means something</h3>\n\n\n\n<p>In HSL, lightness is meaningless. Colors can have the same lightness value, with wildly different perceptual lightness. My favorite examples are yellow and blue. Believe it or not, both have the same HSL lightness!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://dabblet.com/gist/a6eb208ae80780c55b443ddcd4ce842f\"><img loading=\"lazy\" width=\"1672\" height=\"278\" src=\"http://lea.verou.me/wp-content/uploads/2020/04/image-4.png\" alt=\"\" class=\"wp-image-2941\"/></a><figcaption>Both of these colors have a lightness of 50%, but they are most certainly not equally light. What does HSL lightness actually mean then?</figcaption></figure>\n\n\n\n<p>You might argue that at least lightness means something for constant hue and saturation, i.e. for adjustments within the same color. It is true that we do get a lighter color if we increase the HSL lightness and a darker one if we decrease it, but it&#8217;s not necessarily the same color:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1498\" height=\"274\" src=\"http://lea.verou.me/wp-content/uploads/2020/04/image-5.png\" alt=\"\" class=\"wp-image-2942\"/><figcaption>Both of these have the same hue and saturation, but do they really look like darker and lighter variants of the same color?</figcaption></figure>\n\n\n\n<p>With LCH, any colors with the same lightness are equally perceptually light, and any colors with the same chroma are equally perceptually saturated.</p>\n\n\n\n<h2>How does LCH work?</h2>\n\n\n\n<p>LCH stands for &#8220;Lightness Chroma Hue&#8221;. The parameters loosely correspond to HSL&#8217;s, however there are a few crucial differences:</p>\n\n\n\n<p><strong>The hue angles don&#8217;t fully correspond to HSL&#8217;s hues.</strong> E.g. 0 is not red, but more of a magenta and 180 is not turquoise but more of a bluish green, and is exactly complementary. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1210\" height=\"324\" src=\"http://lea.verou.me/wp-content/uploads/2020/04/image-8.png\" alt=\"\" class=\"wp-image-2945\"/><figcaption>Note how these colors, while wildly different in hue, perceptually have the same lightness.</figcaption></figure>\n\n\n\n<p>In HSL, saturation is a neat 0-100 percentage, since it&#8217;s a simple transformation of RGB into polar coordinates. In LCH however, <strong>Chroma is theoretically unbounded</strong>. LCH (like Lab) is designed to be able to represent the entire spectrum of human vision, and not all of these colors can be displayed by a screen, even a P3 screen. Not only is the maximum chroma different depending on screen gamut, it&#8217;s actually different per color. </p>\n\n\n\n<p>This may be better understood with an example. For simplicity, assume you have a screen whose gamut exactly matches the sRGB color space (for comparison, the screen of a 2013 MacBook Air was about 60% of sRGB, although most modern screens are about 150% of sRGB, as discussed above). For L=50 H=180 (the cyan above), the maximum Chroma is only 35! For L=50 H=0 (the magenta above), Chroma can go up to 77 without exceeding the boundaries of sRGB. For L=50 H=320 (the purple above), it can go up to 108!</p>\n\n\n\n<p>While the lack of boundaries can be somewhat unsettling <em>(in people and in color spaces)</em>, don&#8217;t worry: if you specify a color that is not displayable in a given monitor, it will be scaled down so that it becomes visible while preserving its essence. After all, that&#8217;s not new: before monitors got gamuts wider than sRGB, this is what was happening with regular CSS colors when they were displayed in monitors with gamuts smaller than sRGB.</p>\n\n\n\n<h2>An LCH color picker</h2>\n\n\n\n<p>Hopefully, you are now somewhat excited about LCH, but how to visualize it?</p>\n\n\n\n<p>I actually made this a while ago, primarily to help me, <a href=\"https://twitter.com/svgeesus\">Chris</a>, <a href=\"https://twitter.com/argyleink\">Adam</a>, and <a href=\"https://twitter.com/una\">Una</a> in wrapping our heads around LCH sufficiently to edit <a href=\"https://drafts.csswg.org/css-color-5/\">CSS Color 5</a>. It&#8217;s different to know the theory, and it&#8217;s different to be able to play with sliders and see the result. I even bought a domain, <a href=\"https://css.land\">css.land</a>, to host similar demos eventually. We used it a fair bit, and Chris got me to add a few features too, but I never really posted about it, so it was only accessible to us, and anybody that noticed <a href=\"https://github.com/LeaVerou/css.land/\">its Github repo</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://css.land/lch\"><img loading=\"lazy\" width=\"1424\" height=\"2044\" src=\"http://lea.verou.me/wp-content/uploads/2020/04/image-1.png\" alt=\"\" class=\"wp-image-2936\"/></a></figure>\n\n\n\n<p>Why not just use an existing LCH color picker?</p>\n\n\n\n<ul><li>The conversion code for this is written by Chris, and he was confident the math is at least intended to be correct (i.e. if it&#8217;s wrong it&#8217;s a bug in the code, not a gap in understanding)</li><li>The Chroma is not 0-100 like in some color pickers we found</li><li>We wanted to allow inputting arbitrary CSS colors (the &#8220;Import&#8230;&#8221; button above)</li><li>We wanted to allow inputting decimals (the sliders only do integers, but the black number inputs allow any number)</li><li>I wanted to be able to store colors, and see how they interpolate.</li><li>We wanted to be able to see whether the LCH color was within sRGB, P3, (or Rec.2020, an even larger color space).</li><li>We wanted alpha</li><li>And lastly, because it&#8217;s fun! Especially since it&#8217;s implemented with <a href=\"https://mavo.io\">Mavo</a> (and a little bit of JS, this is not a pure Mavo HTML demo).</li></ul>\n\n\n\n<p>Recently, Chris posted it in a <a href=\"https://github.com/whatwg/html/issues/3400?#issuecomment-607976086\">whatwg/html issue thread</a> and many people discovered it, so it nudged me to post about it, so, here it is: <a class=\"view-demo\" href=\"https://css.land/lch\">css.land/lch</a></p>\n\n\n\n<h2>FAQ</h2>\n\n\n\n<p>Based on the questions I got after I posted this article, I should clarify a few common misconceptions.</p>\n\n\n\n<p><strong><em>‚ÄúYou said that these colors are not implemented yet, but I see them in your article‚Äù</em></strong></p>\n\n\n\n<p>All of the colors displayed in this article are within the sRGB gamut, exactly because we can&#8217;t display those outside it yet. sRGB is a color space, not a syntax. E.g. <code>rgb(255 0 0)</code> and <code>lch(54.292% 106.839 40.853)</code> specify the same color.</p>\n\n\n\n<p><strong><em>‚ÄúHow does the LCH picker display colors outside sRGB?‚Äù</em></strong></p>\n\n\n\n<p>It doesn&#8217;t. Neither does any other on the Web (to my knowledge). The color picker is implemented with web technologies, and therefore suffers from the same issues. It has to scale them down to display something similar, that is within sRGB (it used to just clip the RGB components to 0-100%, but thanks to <a href=\"https://github.com/LeaVerou/css.land/pull/3\">this PR</a> from Tab it now uses a far superior algorithm: it just reduces the Chroma until the color is within sRGB). <strong>This is why increasing the Chroma doesn&#8217;t produce a brighter color beyond a certain point: because that color cannot be displayed with CSS right now.</strong></p>\n\n\n\n<p><strong><em>‚ÄúI&#8217;ve noticed that Firefox displays more vivid colors than Chrome and Safari, is that related?‚Äù</em></strong></p>\n\n\n\n<p>Firefox does not implement the spec that restricts CSS colors to sRGB. Instead, it just throws the raw RGB coordinates on the screen, so e.g. <code>rgb(100% 0% 0%)</code> is the brightest red your screen can display. While this may seem like a superior solution, it&#8217;s incredibly inconsistent: specifying a color is approximate at best, since every screen displays it differently. By restricting CSS colors to a known color space (sRGB) we gained device independence. LCH and Lab are also device independent as they are based on actual measured color.</p>\n\n\n\n<p><strong><em>What about color(display-p3 r g b)? Safari supports that since 2017!</em></strong></p>\n\n\n\n<p>I was notified of this after I posted this article. I was aware Safari was implementing this syntax a while ago, but somehow missed that they shipped it. In fact, WebKit published <a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\">an article about this syntax</a> last month!  How exciting!</p>\n\n\n\n<p><code>color(colorspaceid params)</code> is another syntax added by <a href=\"https://www.w3.org/TR/css-color-4/#color-function\">CSS Color 4</a> and is the swiss army knife of color management in CSS: in its full glory it allows specifying an ICC color profile and colors from it (e.g. you want real CMYK colors on a webpage? You want Pantone? With color profiles, you can do that too!). It also supports some predefined color spaces, of which <code>display-p3</code> is one. So, for example, <code>color(display-p3 0 1 0)</code> gives us the brightest green in the P3 color space.  You can use <a href=\"https://dabblet.com/gist/f491f94dba0af1dfccffa24c46e770e5\">this test case</a> to test support: you&#8217;ll see red if <code>color()</code> is not supported and bright green if it is.</p>\n\n\n\n<iframe src=\"https://dabblet.com/gist/f491f94dba0af1dfccffa24c46e770e5\" style=\"width: 100%; height: 400px;\"></iframe>\n\n\n\n<p>Exciting as it may be (and I should tweak the color picker to use it when available!), do note that it only addresses the first issue I mentioned: getting to all gamut colors. However, since it&#8217;s RGB-based, it still suffers from the other issues of RGB. It is not perceptually uniform, and is difficult to create variants (lighter or darker, more or less vivid etc) by tweaking its parameters. </p>\n\n\n\n<p>Furthermore, it&#8217;s a short-term solution. It works now, because screens that can display a wider gamut than P3 are rare. Once hardware advances again, <code>color(display-p3 ...)</code> will have the same problem as sRGB colors have today. LCH and Lab are device independent, and can represent the entire gamut of human vision so they will work regardless of how hardware advances.</p>\n\n\n\n<p><strong><em>How does LCH relate to the Lab color space that I know from Photoshop and other applications?</em></strong></p>\n\n\n\n<p>LCH is the same color space as Lab, just viewed differently! Take a look at the following diagram that I made for my students:</p>\n\n\n\n<object data=\"https://designftw.mit.edu/lectures/color/img/lab.svg\"></object>\n\n\n\n<p>The L in Lab and LCH is exactly the same (perceptual Lightness). For a given lightness L, in Lab, a color has cartesian coordinates (L, a, b) and polar coordinates (L, C, H). Chroma is just the length of the line from 0 to point (a, b) and Hue is the angle of that ray. Therefore, the formulae to convert Lab to LCH are trivial one liners: C is sqrt(a¬≤ + b¬≤) and H is atan(b/a) (with different handling if a = 0). atan() is just the reverse of tan(), i.e. tan(H) = b/a.</p>",
      "content_text": "I was always interested in color science. In 2014, I gave a talk about CSS Color 4 at various conferences around the world called ‚ÄúThe Chroma Zone‚Äù. Even before that, in 2009, I wrote a color picker that used a hidden Java applet to support ICC color profiles to do CMYK properly, a first on the Web at the time (to my knowledge). I never released it, but it sparked this angry rant.\n\n\n\nColor is also how I originally met my now husband, Chris Lilley: In my first CSS WG meeting in 2012, he approached me to ask a question about CSS and Greek, and once he introduced himself I said ‚ÄúYou‚Äôre Chris Lilley, the color expert?!? I have questions for you!‚Äù. I later discovered that he had done even more cool things (he was a co-author of PNG and started SVG ), but at the time, I only knew of him as ‚Äúthe W3C color expert‚Äù, that‚Äôs how much into color I was (I got my color questions answered much later, in 2015 that we actually got together).\n\n\n\nMy interest in color science was renewed in 2019, after I became co-editor of CSS Color 5, with the goal of fleshing out my color modification proposal, which aims to allow arbitrary tweaking of color channels to create color variations, and combine it with Una‚Äôs color modification proposal. LCH colors in CSS is something I‚Äôm very excited about, and I strongly believe designers would be outraged we don‚Äôt have them yet if they knew more about them.\n\n\n\n\n\n\n\nWhat is LCH?\n\n\n\nCSS Color 4 defines lch() colors, among other things, and as of recently, all major browsers have started implementing them or are seriously considering it:\n\n\n\nSafari is already implementing, Chrome is about to,and Firefox is discussing it. \n\n\n\nLCH is a color space that has several advantages over the RGB/HSL colors we‚Äôre familiar with in CSS. In fact, I‚Äôd go as far as to call it a game-changer, and here‚Äôs why.\n\n\n\n1. We actually get access to about 50% more colors.\n\n\n\nThis is huge. Currently, every CSS color we can specify, is defined to be in the sRGB color space. This was more than sufficient a few years ago, since all but professional monitors had gamuts smaller than sRGB. However, that‚Äôs not true any more. Today, the gamut (range of possible colors displayed) of most monitors is closer to P3, which has a 50% larger volume than sRGB. CSS right now cannot access these colors at all. Let me repeat: We have no access to one third of the colors in most modern monitors. And these are not just any colors, but the most vivid colors the screen can display. Our websites are washed out because monitor hardware evolved faster than CSS specs and browser implementations.\n\n\n\nGamut volume of sRGB vs P3\n\n\n\n2. LCH (and Lab) is perceptually uniform\n\n\n\nIn LCH, the same numerical change in coordinates produces the same perceptual color difference. This property of a color space is called ‚Äúperceptual uniformity‚Äù. RGB or HSL are not perceptually uniform. A very illustrative example is the following [example source]:\n\n\n\nBoth the colors in the first row, as well as the colors in the second row, only differ by 20 degrees in hue. Is the perceptual difference between them equal?\n\n\n\n3. LCH lightness actually means something\n\n\n\nIn HSL, lightness is meaningless. Colors can have the same lightness value, with wildly different perceptual lightness. My favorite examples are yellow and blue. Believe it or not, both have the same HSL lightness!\n\n\n\nBoth of these colors have a lightness of 50%, but they are most certainly not equally light. What does HSL lightness actually mean then?\n\n\n\nYou might argue that at least lightness means something for constant hue and saturation, i.e. for adjustments within the same color. It is true that we do get a lighter color if we increase the HSL lightness and a darker one if we decrease it, but it‚Äôs not necessarily the same color:\n\n\n\nBoth of these have the same hue and saturation, but do they really look like darker and lighter variants of the same color?\n\n\n\nWith LCH, any colors with the same lightness are equally perceptually light, and any colors with the same chroma are equally perceptually saturated.\n\n\n\nHow does LCH work?\n\n\n\nLCH stands for ‚ÄúLightness Chroma Hue‚Äù. The parameters loosely correspond to HSL‚Äôs, however there are a few crucial differences:\n\n\n\nThe hue angles don‚Äôt fully correspond to HSL‚Äôs hues. E.g. 0 is not red, but more of a magenta and 180 is not turquoise but more of a bluish green, and is exactly complementary. \n\n\n\nNote how these colors, while wildly different in hue, perceptually have the same lightness.\n\n\n\nIn HSL, saturation is a neat 0-100 percentage, since it‚Äôs a simple transformation of RGB into polar coordinates. In LCH however, Chroma is theoretically unbounded. LCH (like Lab) is designed to be able to represent the entire spectrum of human vision, and not all of these colors can be displayed by a screen, even a P3 screen. Not only is the maximum chroma different depending on screen gamut, it‚Äôs actually different per color. \n\n\n\nThis may be better understood with an example. For simplicity, assume you have a screen whose gamut exactly matches the sRGB color space (for comparison, the screen of a 2013 MacBook Air was about 60% of sRGB, although most modern screens are about 150% of sRGB, as discussed above). For L=50 H=180 (the cyan above), the maximum Chroma is only 35! For L=50 H=0 (the magenta above), Chroma can go up to 77 without exceeding the boundaries of sRGB. For L=50 H=320 (the purple above), it can go up to 108!\n\n\n\nWhile the lack of boundaries can be somewhat unsettling (in people and in color spaces), don‚Äôt worry: if you specify a color that is not displayable in a given monitor, it will be scaled down so that it becomes visible while preserving its essence. After all, that‚Äôs not new: before monitors got gamuts wider than sRGB, this is what was happening with regular CSS colors when they were displayed in monitors with gamuts smaller than sRGB.\n\n\n\nAn LCH color picker\n\n\n\nHopefully, you are now somewhat excited about LCH, but how to visualize it?\n\n\n\nI actually made this a while ago, primarily to help me, Chris, Adam, and Una in wrapping our heads around LCH sufficiently to edit CSS Color 5. It‚Äôs different to know the theory, and it‚Äôs different to be able to play with sliders and see the result. I even bought a domain, css.land, to host similar demos eventually. We used it a fair bit, and Chris got me to add a few features too, but I never really posted about it, so it was only accessible to us, and anybody that noticed its Github repo.\n\n\n\n\n\n\n\nWhy not just use an existing LCH color picker?\n\n\n\nThe conversion code for this is written by Chris, and he was confident the math is at least intended to be correct (i.e. if it‚Äôs wrong it‚Äôs a bug in the code, not a gap in understanding)The Chroma is not 0-100 like in some color pickers we foundWe wanted to allow inputting arbitrary CSS colors (the ‚ÄúImport‚Ä¶‚Äù button above)We wanted to allow inputting decimals (the sliders only do integers, but the black number inputs allow any number)I wanted to be able to store colors, and see how they interpolate.We wanted to be able to see whether the LCH color was within sRGB, P3, (or Rec.2020, an even larger color space).We wanted alphaAnd lastly, because it‚Äôs fun! Especially since it‚Äôs implemented with Mavo (and a little bit of JS, this is not a pure Mavo HTML demo).\n\n\n\nRecently, Chris posted it in a whatwg/html issue thread and many people discovered it, so it nudged me to post about it, so, here it is: css.land/lch\n\n\n\nFAQ\n\n\n\nBased on the questions I got after I posted this article, I should clarify a few common misconceptions.\n\n\n\n‚ÄúYou said that these colors are not implemented yet, but I see them in your article‚Äù\n\n\n\nAll of the colors displayed in this article are within the sRGB gamut, exactly because we can‚Äôt display those outside it yet. sRGB is a color space, not a syntax. E.g. rgb(255 0 0) and lch(54.292% 106.839 40.853) specify the same color.\n\n\n\n‚ÄúHow does the LCH picker display colors outside sRGB?‚Äù\n\n\n\nIt doesn‚Äôt. Neither does any other on the Web (to my knowledge). The color picker is implemented with web technologies, and therefore suffers from the same issues. It has to scale them down to display something similar, that is within sRGB (it used to just clip the RGB components to 0-100%, but thanks to this PR from Tab it now uses a far superior algorithm: it just reduces the Chroma until the color is within sRGB). This is why increasing the Chroma doesn‚Äôt produce a brighter color beyond a certain point: because that color cannot be displayed with CSS right now.\n\n\n\n‚ÄúI‚Äôve noticed that Firefox displays more vivid colors than Chrome and Safari, is that related?‚Äù\n\n\n\nFirefox does not implement the spec that restricts CSS colors to sRGB. Instead, it just throws the raw RGB coordinates on the screen, so e.g. rgb(100% 0% 0%) is the brightest red your screen can display. While this may seem like a superior solution, it‚Äôs incredibly inconsistent: specifying a color is approximate at best, since every screen displays it differently. By restricting CSS colors to a known color space (sRGB) we gained device independence. LCH and Lab are also device independent as they are based on actual measured color.\n\n\n\nWhat about color(display-p3 r g b)? Safari supports that since 2017!\n\n\n\nI was notified of this after I posted this article. I was aware Safari was implementing this syntax a while ago, but somehow missed that they shipped it. In fact, WebKit published an article about this syntax last month!  How exciting!\n\n\n\ncolor(colorspaceid params) is another syntax added by CSS Color 4 and is the swiss army knife of color management in CSS: in its full glory it allows specifying an ICC color profile and colors from it (e.g. you want real CMYK colors on a webpage? You want Pantone? With color profiles, you can do that too!). It also supports some predefined color spaces, of which display-p3 is one. So, for example, color(display-p3 0 1 0) gives us the brightest green in the P3 color space.  You can use this test case to test support: you‚Äôll see red if color() is not supported and bright green if it is.\n\n\n\n\n\n\n\nExciting as it may be (and I should tweak the color picker to use it when available!), do note that it only addresses the first issue I mentioned: getting to all gamut colors. However, since it‚Äôs RGB-based, it still suffers from the other issues of RGB. It is not perceptually uniform, and is difficult to create variants (lighter or darker, more or less vivid etc) by tweaking its parameters. \n\n\n\nFurthermore, it‚Äôs a short-term solution. It works now, because screens that can display a wider gamut than P3 are rare. Once hardware advances again, color(display-p3 ...) will have the same problem as sRGB colors have today. LCH and Lab are device independent, and can represent the entire gamut of human vision so they will work regardless of how hardware advances.\n\n\n\nHow does LCH relate to the Lab color space that I know from Photoshop and other applications?\n\n\n\nLCH is the same color space as Lab, just viewed differently! Take a look at the following diagram that I made for my students:\n\n\n\n\n\n\n\nThe L in Lab and LCH is exactly the same (perceptual Lightness). For a given lightness L, in Lab, a color has cartesian coordinates (L, a, b) and polar coordinates (L, C, H). Chroma is just the length of the line from 0 to point (a, b) and Hue is the angle of that ray. Therefore, the formulae to convert Lab to LCH are trivial one liners: C is sqrt(a¬≤ + b¬≤) and H is atan(b/a) (with different handling if a = 0). atan() is just the reverse of tan(), i.e. tan(H) = b/a.",
      "date_published": "2020-04-04T13:23:31.000Z",
      "date_modified": "2020-04-04T13:23:31.000Z"
    },
    {
      "id": "http://lea.verou.me/?p=2902",
      "url": "https://lea.verou.me/2019/12/issue-closing-stats-for-any-repo/",
      "title": "Issue closing stats for any repo",
      "summary": "tl;dr: If you just want to quickly get stats for a repo, you can find the app here. The rest of this post explains how it‚Äôs built with Mavo HTML, CSS, and 0 lines of JS. Or, if you‚Äôd prefer, you can just View Source ‚Äî it‚Äôs all there! One of the cool things about [‚Ä¶]",
      "content_html": "<p><strong><em>tl;dr:</em></strong><em> If you just want to quickly get stats for a repo, you can find the app </em><a href=\"https://leaverou.github.io/issue-closing/\"><em>here</em></a><em>. The rest of this post explains how it&#8217;s built with Mavo HTML, CSS, and 0 lines of JS.</em> Or, if you&#8217;d prefer, you can just View Source ‚Äî it&#8217;s all there!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://lea.verou.me/wp-content/uploads/2019/12/image.png\" alt=\"\"/><figcaption>The finished app we&#8217;re going to make, find it at <a href=\"https://leaverou.github.io/issue-closing\">https://leaverou.github.io/issue-closing</a></figcaption></figure>\n\n\n\n<p>One of the cool things about <a href=\"https://mavo.io\">Mavo</a> is how it enables one to quickly build apps that utilize the Github API. At some point I wanted to compute stats about how quickly (or rather, slowly&#8230;) Github issues are closed in the <a href=\"https://github.com/mavoweb/mavo\">Mavo repo</a>. And what better way to build this than a Mavo app? It was fairly easy to build a prototype for that.</p>\n\n\n\n<span id=\"more-2902\"></span>\n\n\n\n<h2>Displaying a list of the last 100 closed issues and the time it took to close them</h2>\n\n\n\n<p>To render the last 100 closed issues in the Mavo app, I first looked up <a href=\"https://developer.github.com/v3/issues/#list-issues-for-a-repository\">the appropriate API call in Github&#8217;s API documentation</a>, then used it in the <code>mv-source</code> attribute on the <em>Mavo root</em>, i.e. the element with <code>mv-app</code> that encompasses everything in my app:</p>\n\n\n\n<pre class=\"wp-block-code language-markup\"><code>&lt;div mv-app=\"issueClosing\"\n     mv-source=\"https://api.github.com/repos/mavoweb/mavo/issues?state=closed&amp;sort=updated&amp;per_page=100\"\n     mv-mode=\"read\">\n\t&lt;!-- app here -->\n&lt;/div></code></pre>\n\n\n\n<p> Then, I displayed a list of these issues with:</p>\n\n\n\n<pre class=\"wp-block-code language-markup\"><code>&lt;div mv-multiple property=\"issue\">\n\t&lt;a class=\"issue-number\" href=\"https://github.com/mavoweb/mavo/issues/&#91;number]\" title=\"&#91;title]\" target=\"_blank\">#&#91;number]&lt;/a>\n\ttook &#91;closed_at - created_at] ms\n&lt;/div></code></pre>\n\n\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"leaverou\" data-slug-hash=\"qBEaoPL\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Step 1 - Issue Closing App Tutorial\">\n  <span>See the Pen <a href=\"https://codepen.io/leaverou/pen/qBEaoPL\">\n  Step 1 &#8211; Issue Closing App Tutorial</a> by Lea Verou (<a href=\"https://codepen.io/leaverou\">@leaverou</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p>This would work, but the way it displays results is not very user friendly (e.g. <em>&#8220;#542 took 149627000 ms&#8221;</em>). We need to display the result in a more readable way.</p>\n\n\n\n<p>We can use the <code><a href=\"https://mavo.io/docs/functions/#duration\">duration()</a></code> function to display a readable duration such as &#8220;1 day&#8221;:</p>\n\n\n\n<pre class=\"wp-block-code language-markup\"><code>&lt;div mv-multiple property=\"issue\">\n\t&lt;a class=\"issue-number\" href=\"https://github.com/mavoweb/mavo/issues/&#91;number]\" title=\"&#91;title]\" target=\"_blank\">#&#91;number]&lt;/a>\n\ttook &#91;duration(closed_at - created_at)]\n&lt;/div></code></pre>\n\n\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"leaverou\" data-slug-hash=\"bGbBQwg\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Step 2 - Issue Closing App Tutorial\">\n  <span>See the Pen <a href=\"https://codepen.io/leaverou/pen/bGbBQwg\">\n  Step 2 &#8211; Issue Closing App Tutorial</a> by Lea Verou (<a href=\"https://codepen.io/leaverou\">@leaverou</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Displaying aggregate statistics</h2>\n\n\n\n<p>However, a list of issues is not very easy to process. What&#8217;s the overall picture? Does this repo close issues fast or not? Time for some statistics! We want to calculate average, median, minimum and maximum issue closing time. To calculate these statistics, we need to use the times we have displayed in the previous step.</p>\n\n\n\n<p>First, we need to give our calculation a name, so we can refer to its value in expressions:</p>\n\n\n\n<pre class=\"wp-block-code language-markup\"><code>&lt;span property=\"timeToClose\">&#91;duration(closed_at - created_at)]&lt;/span></code></pre>\n\n\n\n<p>However, as it currently stands, the value of this property is text (e.g. &#8220;1 day&#8221;, &#8220;2 months&#8221; etc). We cannot compute averages and medians on text! We need the property value to be a number. We can hide the actual raw value in an attribute and use the nicely formatted value as the visible content of the element, like so (we use the <code>content</code> attribute here but you can use any, e.g. a <code>data-*</code> attribute would work just as well):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;span property=\"timeToClose\" mv-attribute=\"content\" content=\"&#91;closed_at - created_at]\">&#91;duration(timeToClose)]&lt;/span></code></pre>\n\n\n\n<p><em>Note: There is </em><a href=\"https://github.com/mavoweb/mavo/issues/444\"><em>a data formatting feature in the works</em></a><em> which would simplify this kind of thing by allowing you to separate the raw value and its presentation without having to use separate attributes for them.</em></p>\n\n\n\n<p>We can also add a class to color it red, green, or black depending on whether the time is longer than a month, shorter than a day, or in-between respectively:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;span property=\"timeToClose\" mv-attribute=\"content\" content=\"&#91;closed_at - created_at]\" class=\"&#91;if(timeToClose > month(), 'long', if (timeToClose &lt; day(), 'short'))]\">&#91;duration(timeToClose)]&lt;/span></code></pre>\n\n\n\n<p>Now, on to calculate our statistics! We take advantage of the fact that <code>timeToClose</code> outside the <code>issue</code> collection gives us <strong>all</strong> the times, so we can compute aggregates on them. Therefore, the stats we want to calculate are simply <code>average(timeToClose)</code>, <code>median(timeToClose)</code>, <code>min(timeToclose)</code>, and <code>max(timeToClose)</code>. We put all these in a definition list:</p>\n\n\n\n<pre class=\"wp-block-code language-markup\"><code>&lt;dl>\n\t&lt;dt>Median&lt;/dt>\n\t&lt;dd>&#91;duration(median(timeToClose))]&lt;/dd>\n\t&lt;dt>Average&lt;/dt>\n\t&lt;dd>&#91;duration(average(timeToClose))]&lt;/dd>\n\t&lt;dt>Slowest&lt;/dt>\n\t&lt;dd>&#91;duration(max(timeToClose))]&lt;/dd>\n\t&lt;dt>Fastest&lt;/dt>\n\t&lt;dd>&#91;duration(min(timeToClose))]&lt;/dd>\n&lt;/dl></code></pre>\n\n\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"leaverou\" data-slug-hash=\"jONVQrw\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Step 3 - Issue Closing App Tutorial\">\n  <span>See the Pen <a href=\"https://codepen.io/leaverou/pen/jONVQrw/\">\n  Step 3 &#8211; Issue Closing App Tutorial</a> by Lea Verou (<a href=\"https://codepen.io/leaverou\">@leaverou</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Making repo a variable</h2>\n\n\n\n<p>Now that all the functionality of my app was in place, I realized this could be useful for more repos as well. Why not make the repo a property that can be changed? So I added an input for specifying the repo: <code>&lt;input property=\"repo\" mv-default=\"mavoweb/mavo\"&gt;</code> and then replaced <code>mavoweb/mavo</code> with <code>[repo]</code> everywhere else, i.e. <code>mv-source</code> became <code>https://api.github.com/repos/[repo]/issues?state=closed&amp;sort=updated&amp;per_page=100</code>.</p>\n\n\n\n<h2>Avoid reload on every keystroke</h2>\n\n\n\n<p>This worked, but since Mavo properties are reactive, it kept trying to reload data with every single keystroke, which was annoying and wasteful. Therefore, I needed to do a bit more work so that there is a definite <em>action</em> that submits the change. Enter <a href=\"https://mavo.io/docs/actions\">Mavo Actions</a>!</p>\n\n\n\n<p>I created two properties: <code>repo</code> for the actual repo and <code>repoInput</code> for the input. <code>repoInput</code> still changes on every keystroke, but it&#8217;s <code>repo</code> that is actually being used in the app. I wrapped the input with a <code>&lt;form&gt;</code> and added an action on the form that does this (<code>mv-action=\"set(repo, repoInput)\"</code>). I also added a submit button. Since Mavo actions on forms are triggered when the form is submitted, it doesn&#8217;t matter if I press Enter on the input, or click the Submit button, both work.</p>\n\n\n\n<h2>Setting the repo via a URL parameter</h2>\n\n\n\n<p>Eventually I also wanted to be able to set the repo from the URL, so I also added a hidden <code>repoDefault</code> property: <code>&lt;meta property=\"repoDefault\" content=\"[url('repo') or 'mavoweb/mavo']\"&gt;</code>, and then changed the hardcoded <code>mv-default=\"mavoweb/mavo\"</code> to <code>mv-default=\"[repoDefault]\"</code> on both the <code>repo</code> and the <code>repoInput</code> properties. That way one can link to stats for a specific repo, e.g. <a href=\"https://leaverou.github.io/issue-closing/?repo=prismjs/prism\">https://leaverou.github.io/issue-closing/?repo=prismjs/prism</a></p>\n\n\n\n<p>Why a <code>repoDefault</code> property and not just <code>mv-default=\"[url('repo') or 'mavoweb/mavo']</code>? Just keeping things <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY</a> and avoiding having to repeat the same expression twice.</p>\n\n\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"leaverou\" data-slug-hash=\"bGbBGXM\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Step 5 - Issue Closing App Tutorial\">\n  <span>See the Pen <a href=\"https://codepen.io/leaverou/pen/bGbBGXM/\">\n  Step 5 &#8211; Issue Closing App Tutorial</a> by Lea Verou (<a href=\"https://codepen.io/leaverou\">@leaverou</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Filtering by label</h2>\n\n\n\n<p>At some point I wondered: What would the issue closing times be if we only counted bugs? What if we only counted enhancements? Surely these would be different: When looking at issue closing times for a repo, one primarily cares about how fast bugs are fixed, not how quickly every random feature suggestion is implemented. Wouldn&#8217;t it be cool to also have a label filter?</p>\n\n\n\n<p>For that, I added a series of radio buttons:</p>\n\n\n\n<pre class=\"wp-block-code language-markup\"><code>Show:\n&lt;label>&lt;input type=\"radio\" property=\"labels\" name=\"labels\" checked value=\"\"> All&lt;/label>\n&lt;label>&lt;input type=\"radio\" name=\"labels\" value=\"bug\"> Bugs only&lt;/label>\n&lt;label>&lt;input type=\"radio\" name=\"labels\" value=\"enhancement\"> Enhancements only&lt;/label></code></pre>\n\n\n\n<p>Then, I modified <code>mv-source</code> to also use this value in its API call: <code>mv-source=\"https://api.github.com/repos/[repo]/issues?state=closed&amp;sort=updated&amp;labels=[labels]&amp;per_page=100\"</code>.</p>\n\n\n\n<p>Note that when turning radio buttons into a Mavo property you only use the <code>property</code> attribute on the first one. This is important because Mavo has special handling when you use the <code>property</code> attribute with the same name multiple times in the same group, which we don&#8217;t want here. You can add the <code>property</code> attribute on any of the radio buttons, it doesn&#8217;t have to be the first. Just make sure it&#8217;s only one of them.</p>\n\n\n\n<p>Then I became greedy: Why not also allow filtering by custom labels too? So I added another radio with an input:</p>\n\n\n\n<pre class=\"wp-block-code language-markup\"><code>Show:\n&lt;label>&lt;input type=\"radio\" property=\"labels\" name=\"labels\" checked value=\"\"> All&lt;/label>\n&lt;label>&lt;input type=\"radio\" name=\"labels\" value=\"bug\"> Bugs only&lt;/label>\n&lt;label>&lt;input type=\"radio\" name=\"labels\" value=\"enhancement\"> Enhancements only&lt;/label>\n&lt;label>&lt;input type=\"radio\" name=\"labels\" value=\"&#91;customLabel]\"> Label &lt;input property=\"customLabel\">&lt;/label></code></pre>\n\n\n\n<p>Note that since this is a text field, when the last value is selected, we&#8217;d have the same problem as we did with the repo input: Every keystroke would fire a new request. We can solve this in the same way as we solved it for the <code>repo</code> property, by having an intermediate property and only setting <code>labels</code> when the form is actually submitted:</p>\n\n\n\n<pre class=\"wp-block-code language-markup\"><code>Show:\n&lt;label>&lt;input type=\"radio\" property=\"labelFilter\" name=\"labels\" checked value=\"\"> All&lt;/label>\n&lt;label>&lt;input type=\"radio\" name=\"labels\" value=\"bug\"> Bugs only&lt;/label>\n&lt;label>&lt;input type=\"radio\" name=\"labels\" value=\"enhancement\"> Enhancements only&lt;/label>\n&lt;label>&lt;input type=\"radio\" name=\"labels\" value=\"&#91;customLabel]\"> Label &lt;input property=\"customLabel\">&lt;/label>\n&lt;meta property=\"labels\" content=\"\"></code></pre>\n\n\n\n<h2>Adding label autocomplete</h2>\n\n\n\n<p>Since we now allow filtering by a custom label, wouldn&#8217;t it be cool to allow autocomplete too? HTML allows us to offer autocomplete in our forms via <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist\">&lt;datalist&gt;</a></code> and we can use Mavo to populate the contents!</p>\n\n\n\n<p>First, we add a <code>&lt;datalist&gt;</code> and link it with our custom label input, like so:</p>\n\n\n\n<pre class=\"wp-block-code language-markup\"><code>&lt;label>&lt;input type=\"radio\" name=\"labels\" value=\"&#91;customLabel]\"> Label &lt;input property=\"customLabel\" list=\"label-suggestions\">&lt;/label>\n&lt;datalist id=\"label-suggestions\">\n&lt;/datalist></code></pre>\n\n\n\n<p>Currently, our suggestion list is empty. How do we populate it with the labels that have actually been used in this repo? Looking at the <a href=\"https://developer.github.com/v3/issues/#response-1\">API documentation</a>, we see that each returned issue has a <code>labels</code> field with its labels as an object, and each of these objects has a <code>name</code> field with the textual label. This means that if we use <code>issue.labels.name</code> in Mavo outside of the issues collection, we get a list with <strong>all</strong> of these values, which we can then use to populate our <code>&lt;datalist&gt;</code> by passing it on to <code><a href=\"https://mavo.io/docs/expressions/#mv-value\">mv-value</a></code> which allows us to create dynamic collections:</p>\n\n\n\n<pre class=\"wp-block-code language-markup\"><code>&lt;label>&lt;input type=\"radio\" name=\"labels\" value=\"&#91;customLabel]\"> Label &lt;input property=\"customLabel\" list=\"label-suggestions\">&lt;/label>\n&lt;datalist id=\"label-suggestions\">\n\t&lt;option mv-multiple mv-value=\"unique(issue.labels.name)\">&lt;/option>\n&lt;/datalist></code></pre>\n\n\n\n<p>Note that we also used <code><a href=\"https://mavo.io/docs/functions/#unique\">unique()</a></code> to eliminate duplicates, since otherwise each label would appear as many times as it is used.</p>\n\n\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"leaverou\" data-slug-hash=\"QWLGWXV\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Issue Closing App - Tutorial Step 6\">\n  <span>See the Pen <a href=\"https://codepen.io/leaverou/pen/QWLGWXV/\">\n  Issue Closing App &#8211; Tutorial Step 6</a> by Lea Verou (<a href=\"https://codepen.io/leaverou\">@leaverou</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Adding a visual summary graphic</h2>\n\n\n\n<p>Now that we got the functionality down, we can be a little playful and add some visual flourish. How about a bar chart that summarizes the proportion of long vs short vs normal closing times? We start by setting the CSS variables we are going to need for our graphic, i.e. the number of issues in each category:</p>\n\n\n\n<pre class=\"wp-block-code language-markup\"><code>&lt;summary style=\"--short: &#91;count(timeToClose &lt; day())]; --long: &#91;count(timeToClose > month())]; --total: &#91;count(issue)];\">\n\tBased on &#91;count(issue)] most recently updated issues\n&lt;/summary></code></pre>\n\n\n\n<p>Then, we draw our graphic:</p>\n\n\n\n<pre class=\"wp-block-code language-css\"><code>summary::before {\n\tcontent: \"\";\n\tposition: fixed;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n\tz-index: 1;\n\theight: 5px;\n\tbackground: linear-gradient(to right, var(--short-color) calc(var(--short, 0) / var(--total) * 100%), hsl(220, 10%, 75%) 0, hsl(220, 10%, 75%) calc(100% - var(--long, 0) / var(--total) * 100%), var(--long-color) 0) bottom / auto 100% no-repeat border-box;\n}</code></pre>\n\n\n\n<p>Now, wouldn&#8217;t it be cool to also show a small pie chart next to the heading, if conic gradients are supported so we can draw it? The color stops would be the same, so we define a <code>--summary-stops</code> variable on <code>summary</code>, so we can reuse them across both gradients:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>summary {\n\t--summary-stops: var(--short-color) calc(var(--short, 0) / var(--total) * 100%), hsl(220, 10%, 75%) 0, hsl(220, 10%, 75%) calc(100% - var(--long, 0) / var(--total) * 100%), var(--long-color) 0;\n}\n\n\tsummary::before {\n\t\tcontent: \"\";\n\t\tposition: fixed;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tz-index: 1;\n\t\theight: 5px;\n\t\tbackground: linear-gradient(to right, var(--summary-stops)) bottom / auto 100% no-repeat border-box;\n\t}\n\n\t@supports (background: conic-gradient(red, red)) {\n\t\tsummary::after {\n\t\t\tcontent: \"\";\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: middle;\n\t\t\twidth: 1.2em;\n\t\t\theight: 1.2em;\n\t\t\tmargin-left: .3em;\n\t\t\tborder-radius: 50%;\n\t\t\tbackground: conic-gradient(var(--summary-stops));\n\t\t}\n\t}</code></pre>\n\n\n\n<p class=\"codepen\" data-height=\"471\" data-theme-id=\"light\" data-default-tab=\"html,result\" data-user=\"leaverou\" data-slug-hash=\"QWLGWzx\" style=\"height: 471px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Issue Closing App - Tutorial Step 7\">\n  <span>See the Pen <a href=\"https://codepen.io/leaverou/pen/QWLGWzx/\">\n  Issue Closing App &#8211; Tutorial Step 7</a> by Lea Verou (<a href=\"https://codepen.io/leaverou\">@leaverou</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://static.codepen.io/assets/embed/ei.js\"></script>",
      "content_text": "tl;dr: If you just want to quickly get stats for a repo, you can find the app here. The rest of this post explains how it‚Äôs built with Mavo HTML, CSS, and 0 lines of JS. Or, if you‚Äôd prefer, you can just View Source ‚Äî it‚Äôs all there!\n\n\n\nThe finished app we‚Äôre going to make, find it at https://leaverou.github.io/issue-closing\n\n\n\nOne of the cool things about Mavo is how it enables one to quickly build apps that utilize the Github API. At some point I wanted to compute stats about how quickly (or rather, slowly‚Ä¶) Github issues are closed in the Mavo repo. And what better way to build this than a Mavo app? It was fairly easy to build a prototype for that.\n\n\n\n\n\n\n\nDisplaying a list of the last 100 closed issues and the time it took to close them\n\n\n\nTo render the last 100 closed issues in the Mavo app, I first looked up the appropriate API call in Github‚Äôs API documentation, then used it in the mv-source attribute on the Mavo root, i.e. the element with mv-app that encompasses everything in my app:\n\n\n\n<div mv-app=\"issueClosing\"\n     mv-source=\"https://api.github.com/repos/mavoweb/mavo/issues?state=closed&sort=updated&per_page=100\"\n     mv-mode=\"read\">\n\t<!-- app here -->\n</div>\n\n\n\n Then, I displayed a list of these issues with:\n\n\n\n<div mv-multiple property=\"issue\">\n\t<a class=\"issue-number\" href=\"https://github.com/mavoweb/mavo/issues/[number]\" title=\"[title]\" target=\"_blank\">#[number]</a>\n\ttook [closed_at - created_at] ms\n</div>\n\n\n\n\n  See the Pen \n  Step 1 ‚Äì Issue Closing App Tutorial by Lea Verou (@leaverou)\n  on CodePen.\n\n\n\n\n\nThis would work, but the way it displays results is not very user friendly (e.g. ‚Äú#542 took 149627000 ms‚Äù). We need to display the result in a more readable way.\n\n\n\nWe can use the duration() function to display a readable duration such as ‚Äú1 day‚Äù:\n\n\n\n<div mv-multiple property=\"issue\">\n\t<a class=\"issue-number\" href=\"https://github.com/mavoweb/mavo/issues/[number]\" title=\"[title]\" target=\"_blank\">#[number]</a>\n\ttook [duration(closed_at - created_at)]\n</div>\n\n\n\n\n  See the Pen \n  Step 2 ‚Äì Issue Closing App Tutorial by Lea Verou (@leaverou)\n  on CodePen.\n\n\n\n\n\nDisplaying aggregate statistics\n\n\n\nHowever, a list of issues is not very easy to process. What‚Äôs the overall picture? Does this repo close issues fast or not? Time for some statistics! We want to calculate average, median, minimum and maximum issue closing time. To calculate these statistics, we need to use the times we have displayed in the previous step.\n\n\n\nFirst, we need to give our calculation a name, so we can refer to its value in expressions:\n\n\n\n<span property=\"timeToClose\">[duration(closed_at - created_at)]</span>\n\n\n\nHowever, as it currently stands, the value of this property is text (e.g. ‚Äú1 day‚Äù, ‚Äú2 months‚Äù etc). We cannot compute averages and medians on text! We need the property value to be a number. We can hide the actual raw value in an attribute and use the nicely formatted value as the visible content of the element, like so (we use the content attribute here but you can use any, e.g. a data-* attribute would work just as well):\n\n\n\n<span property=\"timeToClose\" mv-attribute=\"content\" content=\"[closed_at - created_at]\">[duration(timeToClose)]</span>\n\n\n\nNote: There is a data formatting feature in the works which would simplify this kind of thing by allowing you to separate the raw value and its presentation without having to use separate attributes for them.\n\n\n\nWe can also add a class to color it red, green, or black depending on whether the time is longer than a month, shorter than a day, or in-between respectively:\n\n\n\n<span property=\"timeToClose\" mv-attribute=\"content\" content=\"[closed_at - created_at]\" class=\"[if(timeToClose > month(), 'long', if (timeToClose < day(), 'short'))]\">[duration(timeToClose)]</span>\n\n\n\nNow, on to calculate our statistics! We take advantage of the fact that timeToClose outside the issue collection gives us all the times, so we can compute aggregates on them. Therefore, the stats we want to calculate are simply average(timeToClose), median(timeToClose), min(timeToclose), and max(timeToClose). We put all these in a definition list:\n\n\n\n<dl>\n\t<dt>Median</dt>\n\t<dd>[duration(median(timeToClose))]</dd>\n\t<dt>Average</dt>\n\t<dd>[duration(average(timeToClose))]</dd>\n\t<dt>Slowest</dt>\n\t<dd>[duration(max(timeToClose))]</dd>\n\t<dt>Fastest</dt>\n\t<dd>[duration(min(timeToClose))]</dd>\n</dl>\n\n\n\n\n  See the Pen \n  Step 3 ‚Äì Issue Closing App Tutorial by Lea Verou (@leaverou)\n  on CodePen.\n\n\n\n\n\nMaking repo a variable\n\n\n\nNow that all the functionality of my app was in place, I realized this could be useful for more repos as well. Why not make the repo a property that can be changed? So I added an input for specifying the repo: <input property=\"repo\" mv-default=\"mavoweb/mavo\"> and then replaced mavoweb/mavo with [repo] everywhere else, i.e. mv-source became https://api.github.com/repos/[repo]/issues?state=closed&sort=updated&per_page=100.\n\n\n\nAvoid reload on every keystroke\n\n\n\nThis worked, but since Mavo properties are reactive, it kept trying to reload data with every single keystroke, which was annoying and wasteful. Therefore, I needed to do a bit more work so that there is a definite action that submits the change. Enter Mavo Actions!\n\n\n\nI created two properties: repo for the actual repo and repoInput for the input. repoInput still changes on every keystroke, but it‚Äôs repo that is actually being used in the app. I wrapped the input with a <form> and added an action on the form that does this (mv-action=\"set(repo, repoInput)\"). I also added a submit button. Since Mavo actions on forms are triggered when the form is submitted, it doesn‚Äôt matter if I press Enter on the input, or click the Submit button, both work.\n\n\n\nSetting the repo via a URL parameter\n\n\n\nEventually I also wanted to be able to set the repo from the URL, so I also added a hidden repoDefault property: <meta property=\"repoDefault\" content=\"[url('repo') or 'mavoweb/mavo']\">, and then changed the hardcoded mv-default=\"mavoweb/mavo\" to mv-default=\"[repoDefault]\" on both the repo and the repoInput properties. That way one can link to stats for a specific repo, e.g. https://leaverou.github.io/issue-closing/?repo=prismjs/prism\n\n\n\nWhy a repoDefault property and not just mv-default=\"[url('repo') or 'mavoweb/mavo']? Just keeping things DRY and avoiding having to repeat the same expression twice.\n\n\n\n\n  See the Pen \n  Step 5 ‚Äì Issue Closing App Tutorial by Lea Verou (@leaverou)\n  on CodePen.\n\n\n\n\n\nFiltering by label\n\n\n\nAt some point I wondered: What would the issue closing times be if we only counted bugs? What if we only counted enhancements? Surely these would be different: When looking at issue closing times for a repo, one primarily cares about how fast bugs are fixed, not how quickly every random feature suggestion is implemented. Wouldn‚Äôt it be cool to also have a label filter?\n\n\n\nFor that, I added a series of radio buttons:\n\n\n\nShow:\n<label><input type=\"radio\" property=\"labels\" name=\"labels\" checked value=\"\"> All</label>\n<label><input type=\"radio\" name=\"labels\" value=\"bug\"> Bugs only</label>\n<label><input type=\"radio\" name=\"labels\" value=\"enhancement\"> Enhancements only</label>\n\n\n\nThen, I modified mv-source to also use this value in its API call: mv-source=\"https://api.github.com/repos/[repo]/issues?state=closed&sort=updated&labels=[labels]&per_page=100\".\n\n\n\nNote that when turning radio buttons into a Mavo property you only use the property attribute on the first one. This is important because Mavo has special handling when you use the property attribute with the same name multiple times in the same group, which we don‚Äôt want here. You can add the property attribute on any of the radio buttons, it doesn‚Äôt have to be the first. Just make sure it‚Äôs only one of them.\n\n\n\nThen I became greedy: Why not also allow filtering by custom labels too? So I added another radio with an input:\n\n\n\nShow:\n<label><input type=\"radio\" property=\"labels\" name=\"labels\" checked value=\"\"> All</label>\n<label><input type=\"radio\" name=\"labels\" value=\"bug\"> Bugs only</label>\n<label><input type=\"radio\" name=\"labels\" value=\"enhancement\"> Enhancements only</label>\n<label><input type=\"radio\" name=\"labels\" value=\"[customLabel]\"> Label <input property=\"customLabel\"></label>\n\n\n\nNote that since this is a text field, when the last value is selected, we‚Äôd have the same problem as we did with the repo input: Every keystroke would fire a new request. We can solve this in the same way as we solved it for the repo property, by having an intermediate property and only setting labels when the form is actually submitted:\n\n\n\nShow:\n<label><input type=\"radio\" property=\"labelFilter\" name=\"labels\" checked value=\"\"> All</label>\n<label><input type=\"radio\" name=\"labels\" value=\"bug\"> Bugs only</label>\n<label><input type=\"radio\" name=\"labels\" value=\"enhancement\"> Enhancements only</label>\n<label><input type=\"radio\" name=\"labels\" value=\"[customLabel]\"> Label <input property=\"customLabel\"></label>\n<meta property=\"labels\" content=\"\">\n\n\n\nAdding label autocomplete\n\n\n\nSince we now allow filtering by a custom label, wouldn‚Äôt it be cool to allow autocomplete too? HTML allows us to offer autocomplete in our forms via <datalist> and we can use Mavo to populate the contents!\n\n\n\nFirst, we add a <datalist> and link it with our custom label input, like so:\n\n\n\n<label><input type=\"radio\" name=\"labels\" value=\"[customLabel]\"> Label <input property=\"customLabel\" list=\"label-suggestions\"></label>\n<datalist id=\"label-suggestions\">\n</datalist>\n\n\n\nCurrently, our suggestion list is empty. How do we populate it with the labels that have actually been used in this repo? Looking at the API documentation, we see that each returned issue has a labels field with its labels as an object, and each of these objects has a name field with the textual label. This means that if we use issue.labels.name in Mavo outside of the issues collection, we get a list with all of these values, which we can then use to populate our <datalist> by passing it on to mv-value which allows us to create dynamic collections:\n\n\n\n<label><input type=\"radio\" name=\"labels\" value=\"[customLabel]\"> Label <input property=\"customLabel\" list=\"label-suggestions\"></label>\n<datalist id=\"label-suggestions\">\n\t<option mv-multiple mv-value=\"unique(issue.labels.name)\"></option>\n</datalist>\n\n\n\nNote that we also used unique() to eliminate duplicates, since otherwise each label would appear as many times as it is used.\n\n\n\n\n  See the Pen \n  Issue Closing App ‚Äì Tutorial Step 6 by Lea Verou (@leaverou)\n  on CodePen.\n\n\n\n\n\nAdding a visual summary graphic\n\n\n\nNow that we got the functionality down, we can be a little playful and add some visual flourish. How about a bar chart that summarizes the proportion of long vs short vs normal closing times? We start by setting the CSS variables we are going to need for our graphic, i.e. the number of issues in each category:\n\n\n\n<summary style=\"--short: [count(timeToClose < day())]; --long: [count(timeToClose > month())]; --total: [count(issue)];\">\n\tBased on [count(issue)] most recently updated issues\n</summary>\n\n\n\nThen, we draw our graphic:\n\n\n\nsummary::before {\n\tcontent: \"\";\n\tposition: fixed;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n\tz-index: 1;\n\theight: 5px;\n\tbackground: linear-gradient(to right, var(--short-color) calc(var(--short, 0) / var(--total) * 100%), hsl(220, 10%, 75%) 0, hsl(220, 10%, 75%) calc(100% - var(--long, 0) / var(--total) * 100%), var(--long-color) 0) bottom / auto 100% no-repeat border-box;\n}\n\n\n\nNow, wouldn‚Äôt it be cool to also show a small pie chart next to the heading, if conic gradients are supported so we can draw it? The color stops would be the same, so we define a --summary-stops variable on summary, so we can reuse them across both gradients:\n\n\n\nsummary {\n\t--summary-stops: var(--short-color) calc(var(--short, 0) / var(--total) * 100%), hsl(220, 10%, 75%) 0, hsl(220, 10%, 75%) calc(100% - var(--long, 0) / var(--total) * 100%), var(--long-color) 0;\n}\n\n\tsummary::before {\n\t\tcontent: \"\";\n\t\tposition: fixed;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tz-index: 1;\n\t\theight: 5px;\n\t\tbackground: linear-gradient(to right, var(--summary-stops)) bottom / auto 100% no-repeat border-box;\n\t}\n\n\t@supports (background: conic-gradient(red, red)) {\n\t\tsummary::after {\n\t\t\tcontent: \"\";\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: middle;\n\t\t\twidth: 1.2em;\n\t\t\theight: 1.2em;\n\t\t\tmargin-left: .3em;\n\t\t\tborder-radius: 50%;\n\t\t\tbackground: conic-gradient(var(--summary-stops));\n\t\t}\n\t}\n\n\n\n\n  See the Pen \n  Issue Closing App ‚Äì Tutorial Step 7 by Lea Verou (@leaverou)\n  on CodePen.\n\n",
      "date_published": "2019-12-13T23:05:38.000Z",
      "date_modified": "2019-12-13T23:05:38.000Z"
    },
    {
      "id": "http://lea.verou.me/?p=2895",
      "url": "https://lea.verou.me/2019/05/utility-convert-svg-path-to-all-relative-or-all-absolute-commands/",
      "title": "Utility: Convert SVG path to all-relative or all-absolute commands",
      "summary": "I like hand-editing my SVGs. Often I will create an initial version in Illustrator, and then export and continue with hand editing. Not only is it a bit of a meditative experience and it satisfies my obsessive-compulsive tendencies to clean up the code, it has actual practical benefits when you need to make certain changes [‚Ä¶]",
      "content_html": "<p>I like hand-editing my SVGs. Often I will create an initial version in Illustrator, and then export and continue with hand editing. Not only is it a bit of a meditative experience and it satisfies my obsessive-compulsive tendencies to clean up the code, it has actual practical benefits when you need to make certain changes or introduce animation. Some things are easier to do in a GUI, and others are easier to do in code, and I like having the flexibility to pick which one fits my use case best.</p>\n\n\n\n<p>However, there was always a thing that was a PITA: modifying paths. Usually if I need anything more complicated than just moving them, I&#8217;d do it in Illustrator, but even moving them can be painful if they are not all relative (and no, I don&#8217;t like introducing pointless transforms for things that should really be in the <code>d</code> attribute). </p>\n\n\n\n<p>For example, this was today&#8217;s result of trying to move an exported &#8220;a&#8221; glyph from <a href=\"https://fonts.google.com/specimen/Raleway\">Raleway Bold</a> by modifying its first <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#MoveTo_path_commands\">M</a> command:</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"604\" height=\"522\" src=\"http://lea.verou.me/wp-content/uploads/2019/05/image.png\" alt=\"\" class=\"wp-image-2896\" srcset=\"https://lea.verou.me/wp-content/uploads/2019/05/image.png 604w, https://lea.verou.me/wp-content/uploads/2019/05/image-300x259.png 300w\" sizes=\"(max-width: 604px) 100vw, 604px\" /><figcaption>Trying to move a path by changing its first M command when not all of its commands are relative.</figcaption></figure>\n\n\n\n<p>This happened because even though <em>most</em> commands were exported as relative, several were not and I had not noticed. I have no idea why some commands were exported as absolute, it seems kind of random.</p>\n\n\n\n<p>When all commands are relative, moving a path is as simple as manipulating its initial <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#MoveTo_path_commands\">M command</a> and the rest just adapts, because <strong>that&#8217;s the whole point of relative commands</strong>. Same with manipulating every other part of the path, the rest of it just adapts. It&#8217;s beautiful. I honestly have no idea why anybody would favor absolute commands. And yet, googling &#8220;convert SVG path to relative&#8221; yields <a href=\"https://stackoverflow.com/questions/14179333/convert-svg-path-to-relative-commands\">one result</a>, whereas there are plenty of results about converting paths to absolute. No idea why that&#8217;s even desirable, ever (?).</p>\n\n\n\n<p>I remembered I had come across that result before. Thankfully, there&#8217;s also a <a href=\"http://jsfiddle.net/MC53K/\">fiddle</a> to go with it, which I had used in the past to convert my path. I love it, it uses this library called <a href=\"http://snapsvg.io/\">Snap.svg</a> which supports converting paths to relative as a <em>just-add-water</em> <a href=\"http://snapsvg.io/docs/#Snap.path.toRelative\">utility method</a>. However, that fiddle is a quick demo to answer a StackOverflow question, so the UI is not super pleasant to use (there is no UI: you just manipulate the path in the SVG and wait for the fiddle to run). This time around, I needed to convert multiple paths, so I needed a more efficient UI.</p>\n\n\n\n<p>So I created <a href=\"https://codepen.io/leaverou/full/RmwzKv\">this demo</a> which is also based on Snap.svg, but has a slightly more efficient UI. You just paste your path in a textarea and it both displays it and instantly converts it to all-relative and all-absolute paths (also using Snap.svg). It also displays both your original path and the two converted ones, so you can make sure they still look the same. It even follows a pending-delete pattern so you can just focus on the output textarea and hit Cmd-C in one fell swoop.</p>\n\n\n\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"1024\" height=\"238\" src=\"http://lea.verou.me/wp-content/uploads/2019/05/image-1-1024x238.png\" alt=\"\" class=\"wp-image-2897\" srcset=\"https://lea.verou.me/wp-content/uploads/2019/05/image-1-1024x238.png 1024w, https://lea.verou.me/wp-content/uploads/2019/05/image-1-300x70.png 300w, https://lea.verou.me/wp-content/uploads/2019/05/image-1-768x178.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>I wasn&#8217;t sure about posting this or just tweeting it (it literally took less than 30 minutes ‚Äî including this blog post ‚Äî and I tend to only post small things like that on <a href=\"https://twitter.com/leaverou\">my twitter</a>), but I thought it might be useful to others googling the same thing, so I may as well post it here for posterity. Enjoy!</p>\n\n\n\n<span id=\"more-2895\"></span>\n\n\n\n<iframe loading=\"lazy\" src=\"https://codepen.io/leaverou/full/RmwzKv\" width=\"100%\" height=\"600\" style=\"border: none\"></iframe>",
      "content_text": "I like hand-editing my SVGs. Often I will create an initial version in Illustrator, and then export and continue with hand editing. Not only is it a bit of a meditative experience and it satisfies my obsessive-compulsive tendencies to clean up the code, it has actual practical benefits when you need to make certain changes or introduce animation. Some things are easier to do in a GUI, and others are easier to do in code, and I like having the flexibility to pick which one fits my use case best.\n\n\n\nHowever, there was always a thing that was a PITA: modifying paths. Usually if I need anything more complicated than just moving them, I‚Äôd do it in Illustrator, but even moving them can be painful if they are not all relative (and no, I don‚Äôt like introducing pointless transforms for things that should really be in the d attribute). \n\n\n\nFor example, this was today‚Äôs result of trying to move an exported ‚Äúa‚Äù glyph from Raleway Bold by modifying its first M command:\n\n\n\nTrying to move a path by changing its first M command when not all of its commands are relative.\n\n\n\nThis happened because even though most commands were exported as relative, several were not and I had not noticed. I have no idea why some commands were exported as absolute, it seems kind of random.\n\n\n\nWhen all commands are relative, moving a path is as simple as manipulating its initial M command and the rest just adapts, because that‚Äôs the whole point of relative commands. Same with manipulating every other part of the path, the rest of it just adapts. It‚Äôs beautiful. I honestly have no idea why anybody would favor absolute commands. And yet, googling ‚Äúconvert SVG path to relative‚Äù yields one result, whereas there are plenty of results about converting paths to absolute. No idea why that‚Äôs even desirable, ever (?).\n\n\n\nI remembered I had come across that result before. Thankfully, there‚Äôs also a fiddle to go with it, which I had used in the past to convert my path. I love it, it uses this library called Snap.svg which supports converting paths to relative as a just-add-water utility method. However, that fiddle is a quick demo to answer a StackOverflow question, so the UI is not super pleasant to use (there is no UI: you just manipulate the path in the SVG and wait for the fiddle to run). This time around, I needed to convert multiple paths, so I needed a more efficient UI.\n\n\n\nSo I created this demo which is also based on Snap.svg, but has a slightly more efficient UI. You just paste your path in a textarea and it both displays it and instantly converts it to all-relative and all-absolute paths (also using Snap.svg). It also displays both your original path and the two converted ones, so you can make sure they still look the same. It even follows a pending-delete pattern so you can just focus on the output textarea and hit Cmd-C in one fell swoop.\n\n\n\n\n\n\n\nI wasn‚Äôt sure about posting this or just tweeting it (it literally took less than 30 minutes ‚Äî including this blog post ‚Äî and I tend to only post small things like that on my twitter), but I thought it might be useful to others googling the same thing, so I may as well post it here for posterity. Enjoy!\n\n\n\n\n\n\n\n",
      "date_published": "2019-05-06T10:19:19.000Z",
      "date_modified": "2019-05-06T10:19:19.000Z"
    },
    {
      "id": "http://lea.verou.me/?p=2863",
      "url": "https://lea.verou.me/2018/12/referenceerror-x-is-not-defined/",
      "title": "ReferenceError: x is not defined?",
      "summary": "Today for a bit of code I was writing, I needed to be able to distinguish ‚Äúx is not defined‚Äù ReferenceErrors from any other error within a try...catch block and handle them differently. Now I know what you‚Äôre thinking. Trying to figure out exactly what kind of error you have programmatically is a well-known fool‚Äôs [‚Ä¶]",
      "content_html": "<p>Today for a bit of code I was writing, I needed to be able to distinguish &#8220;x is not defined&#8221; <code>ReferenceError</code>s from any other error within a <code>try...catch</code> block and handle them differently.</p>\n\n\n\n<p>Now I know what you&#8217;re thinking. Trying to figure out exactly what kind of error you have programmatically is a well-known fool&#8217;s errand. If you express a desire to engage in such a risky endeavor, any JS veteran in sight will shake their head in remembrance of their early days, but have the wisdom to refrain from trying to convince you otherwise; they know that failing will teach you what it taught them when they were young and foolish enough to attempt such a thing.</p>\n\n\n\n<p>Despite writing JS for 13 years, today I was feeling adventurous. &#8220;But what if, just this once, I could get it to work? It&#8217;s a pretty standard error message! What if I tested in so many browsers that I would be confident I&#8217;ve covered all cases?&#8221;</p>\n\n\n\n<p>I made <a href=\"https://codepen.io/leaverou/pen/aPdGeN?editors=0110#0\">a simple page on my server that just prints out the error message</a>¬†written in a way that would maximize older browser coverage. Armed with that, I started visiting every browser in my <a href=\"https://browserstack.com\">BrowserStack</a> account. Here are my findings for anyone interested:</p>\n\n\n\n<ul><li>Chrome (all versions, including mobile): <code>x is not defined</code></li><li>Firefox (all versions, including mobile): <code>x is not defined</code></li><li>Safari 4-12 :¬†<code>Can't find variable: x</code></li><li>Edge (16 &#8211; 18): <code>'x' is not defined</code></li><li>Edge 15: <code>'x' is undefined</code></li><li>IE6-11 and Windows Phone IE: <code>'x' is undefined</code></li><li>UC Browser (all versions): <code>x is not defined</code></li><li>Samsung browser (all versions): <code>x is not defined</code></li><li>Opera Mini and Pre-Chromium Opera: <code>Undefined variable: x</code></li></ul>\n\n\n\n<p>Even if you, dear reader, are wise enough to never try and detect this error, I thought you may find the variety (or lack thereof) above interesting.</p>\n\n\n\n<p>I also did a little bit of testing with a different UI language (I picked Greek), but it didn&#8217;t seem to localize the error messages. If you&#8217;re using a different UI language, please open the page above and if the message is not in English, let me know!</p>\n\n\n\n<p>In the end, I decided to go ahead with it, and time will tell if it was foolish to do so. For anyone wishing to also dabble in such dangerous waters, this was my checking code:</p>\n\n\n\n<pre class=\"wp-block-code language-javascript\"><code>if (e instanceof ReferenceError \n    &amp;&amp; /is (not |un)defined$|^(Can't find|Undefined) variable/.test(e.message)) {\n    // do stuff\n}</code></pre>\n\n\n\n<p>Found any cases I missed? Or perhaps you found a different <code>ReferenceError</code> that would erroneously match the regex above? Let me know in the comments!</p>\n\n\n\n<p>One thing that&#8217;s important to note is that even if the code above is bulletproof for today&#8217;s browser landscape,<strong> the more developers that do things like this, the harder it is for browser makers to improve these error messages</strong>. However, until there&#8217;s a better way to do this, pointing fingers at developers for wanting to do perfectly reasonable things, is not the solution. <strong>This is why HTTP has status codes</strong>, so we don&#8217;t have to string match on the text. Imagine having to string match &#8220;Not Found&#8221; to figure out if a request was found or not! Similarly, many other technologies have error codes, so that different types of errors can be distinguished without resulting to flimsy string matching. I&#8217;m hoping that one day JS will also have a better way to distinguish errors more precisely than the general error categories of today, and we&#8217;ll look back to posts like this with a nostalgic smile, being so glad we don&#8217;t have to do crap like this ever again.</p>",
      "content_text": "Today for a bit of code I was writing, I needed to be able to distinguish ‚Äúx is not defined‚Äù ReferenceErrors from any other error within a try...catch block and handle them differently.\n\n\n\nNow I know what you‚Äôre thinking. Trying to figure out exactly what kind of error you have programmatically is a well-known fool‚Äôs errand. If you express a desire to engage in such a risky endeavor, any JS veteran in sight will shake their head in remembrance of their early days, but have the wisdom to refrain from trying to convince you otherwise; they know that failing will teach you what it taught them when they were young and foolish enough to attempt such a thing.\n\n\n\nDespite writing JS for 13 years, today I was feeling adventurous. ‚ÄúBut what if, just this once, I could get it to work? It‚Äôs a pretty standard error message! What if I tested in so many browsers that I would be confident I‚Äôve covered all cases?‚Äù\n\n\n\nI made a simple page on my server that just prints out the error message¬†written in a way that would maximize older browser coverage. Armed with that, I started visiting every browser in my BrowserStack account. Here are my findings for anyone interested:\n\n\n\nChrome (all versions, including mobile): x is not definedFirefox (all versions, including mobile): x is not definedSafari 4-12 :¬†Can't find variable: xEdge (16 ‚Äì 18): 'x' is not definedEdge 15: 'x' is undefinedIE6-11 and Windows Phone IE: 'x' is undefinedUC Browser (all versions): x is not definedSamsung browser (all versions): x is not definedOpera Mini and Pre-Chromium Opera: Undefined variable: x\n\n\n\nEven if you, dear reader, are wise enough to never try and detect this error, I thought you may find the variety (or lack thereof) above interesting.\n\n\n\nI also did a little bit of testing with a different UI language (I picked Greek), but it didn‚Äôt seem to localize the error messages. If you‚Äôre using a different UI language, please open the page above and if the message is not in English, let me know!\n\n\n\nIn the end, I decided to go ahead with it, and time will tell if it was foolish to do so. For anyone wishing to also dabble in such dangerous waters, this was my checking code:\n\n\n\nif (e instanceof ReferenceError \n    && /is (not |un)defined$|^(Can't find|Undefined) variable/.test(e.message)) {\n    // do stuff\n}\n\n\n\nFound any cases I missed? Or perhaps you found a different ReferenceError that would erroneously match the regex above? Let me know in the comments!\n\n\n\nOne thing that‚Äôs important to note is that even if the code above is bulletproof for today‚Äôs browser landscape, the more developers that do things like this, the harder it is for browser makers to improve these error messages. However, until there‚Äôs a better way to do this, pointing fingers at developers for wanting to do perfectly reasonable things, is not the solution. This is why HTTP has status codes, so we don‚Äôt have to string match on the text. Imagine having to string match ‚ÄúNot Found‚Äù to figure out if a request was found or not! Similarly, many other technologies have error codes, so that different types of errors can be distinguished without resulting to flimsy string matching. I‚Äôm hoping that one day JS will also have a better way to distinguish errors more precisely than the general error categories of today, and we‚Äôll look back to posts like this with a nostalgic smile, being so glad we don‚Äôt have to do crap like this ever again.",
      "date_published": "2018-12-14T05:46:25.000Z",
      "date_modified": "2018-12-14T05:46:25.000Z"
    },
    {
      "id": "http://lea.verou.me/?p=2838",
      "url": "https://lea.verou.me/2018/09/refresh-css-bookmarklet-v2/",
      "title": "Refresh CSS Bookmarklet v2",
      "summary": "Almost 11 years ago, Paul Irish posted this brilliant bookmarklet to refresh all stylesheets on the current page. Despite the amount of tools, plugins, servers to live reload that have been released over the years, I‚Äôve always kept coming back to it. It‚Äôs incredibly elegant in its simplicity. It works everywhere: locally or remotely, on [‚Ä¶]",
      "content_html": "<p>Almost 11 years ago, <a href=\"https://www.paulirish.com/2008/how-to-iterate-quickly-when-debugging-css/\">Paul Irish posted this brilliant bookmarklet</a> to refresh all stylesheets on the current page. Despite the amount of tools, plugins, servers to live reload that have been released over the years, I&#8217;ve always kept coming back to it. It&#8217;s incredibly elegant in its simplicity. It works everywhere: locally or remotely, on any domain and protocol. No need to set up anything, no need to alter my process in any way, no need to use a specific local server or tool. It quietly just accepts your preferences and workflow instead of trying to change them. Sure, it doesn&#8217;t automatically detect changes and reload, but in most cases, I don‚Äôt want it to.</p>\n<p>I&#8217;ve been using this almost daily for a decade and there&#8217;s always been one thing that bothered me: It doesn&#8217;t work with iframes. If the stylesheet you‚Äôre editing is inside an iframe, tough luck. If you can open the frame in a new tab, that works, but often that&#8217;s nontrivial (e.g. the frame is dynamically generated). After dealing with this issue today once more, I thought &#8220;this is just a few lines of JS, why not fix it?&#8221;.</p>\n<p>The first step was to get Paul‚Äôs code in a readable format, since the bookmarklet is heavily minified:</p>\n<pre class=\"language-javascript\"><code>(function() {\n\tvar links = document.getElementsByTagName('link');\n\tfor (var i = 0; i &lt; links.length; i++) {\n\t\tvar link = links[i];\n\t\tif (link.rel.toLowerCase().match(/stylesheet/) &amp;&amp; link.href) {\n\t\t\tvar href = link.href.replace(/(&amp;|%5C?)forceReload=\\d+/, '');\n\t\t\tlink.href = href + (href.match(/\\?/) ? '&amp;' : '?') + 'forceReload=' + (new Date().valueOf())\n\t\t}\n\t}\n})()</code></pre>\n<p>Once I did that, it became obvious to me that this could be shortened a lot; the last 10 years have been wonderful for JS evolution!</p>\n<pre class=\"language-javascript\"><code>(()=>{\n\tfor (let link of Array.from(document.querySelectorAll(\"link[rel=stylesheet][href]\"))) {\n\t\tvar href = new URL(link.href, location);\n\t\thref.searchParams.set(\"forceReload\", Date.now());\n\t\tlink.href = href;\n\t}\n})()</code></pre>\n<p>Sure, this reduces browser support a bit (most notably it excludes IE11), but since this is a local development tool, that&#8217;s not such a big problem.</p>\n<p>Now, let‚Äôs extend this to support iframes as well:</p>\n<pre class=\"language-javascript\"><code>{\n\tlet $$ = (selector, root = document) => Array.from(root.querySelectorAll(selector));\n\t\n\tlet refresh = (document) => {\n\t\tfor (let link of $$(\"link[rel=stylesheet][href]\", document)) {\n\t\t\tlet href = new URL(link.href);\n\t\t\thref.searchParams.set(\"forceReload\", Date.now());\n\t\t\tlink.href = href;\n\t\t}\n\n\t\tfor (let iframe of $$(\"iframe\", document)) {\n\t\t\tiframe.contentDocument && refresh(iframe.contentDocument);\n\t\t}\n\t}\n\n\trefresh();\n}</code></pre>\n<p>That‚Äôs it! Do keep in mind that this will not work with cross-origin iframes, but then again, you probably don‚Äôt expect it to in that case.</p>\n<p>Now all we need to do to turn it into a bookmarklet is to prepend it with <code>javascript:</code> and minify the code. Here you go:</p>\n<pre><a href=\"javascript:{let e=(e,t=document)=>Array.from(t.querySelectorAll(e)),t=r=>{for(let t of e('link[rel=stylesheet][href]',r)){let e=new URL(t.href);e.searchParams.set('forceReload',Date.now()),t.href=e}for(let o of e('iframe',r))o.contentDocument&&t(o.contentDocument)};t()}\" class=\"view-demo\">Refresh CSS</a></pre>\n<p>Hope this is useful to someone else as well <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png\" alt=\"üôÇ\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /><br />\nAny improvements are always welcome!</p>\n<h4>Credits</h4>\n<ul>\n<li>Paul Irish, for the original bookmarklet</li>\n<li>Maur√≠cio Kishi, for making the iframe traversal recursive (<a href=\"http://lea.verou.me/2018/09/refresh-css-bookmarklet-v2/#comment-4102700684\">comment</a>)</li>\n</ul>",
      "content_text": "Almost 11 years ago, Paul Irish posted this brilliant bookmarklet to refresh all stylesheets on the current page. Despite the amount of tools, plugins, servers to live reload that have been released over the years, I‚Äôve always kept coming back to it. It‚Äôs incredibly elegant in its simplicity. It works everywhere: locally or remotely, on any domain and protocol. No need to set up anything, no need to alter my process in any way, no need to use a specific local server or tool. It quietly just accepts your preferences and workflow instead of trying to change them. Sure, it doesn‚Äôt automatically detect changes and reload, but in most cases, I don‚Äôt want it to.\nI‚Äôve been using this almost daily for a decade and there‚Äôs always been one thing that bothered me: It doesn‚Äôt work with iframes. If the stylesheet you‚Äôre editing is inside an iframe, tough luck. If you can open the frame in a new tab, that works, but often that‚Äôs nontrivial (e.g. the frame is dynamically generated). After dealing with this issue today once more, I thought ‚Äúthis is just a few lines of JS, why not fix it?‚Äù.\nThe first step was to get Paul‚Äôs code in a readable format, since the bookmarklet is heavily minified:\n(function() {\n\tvar links = document.getElementsByTagName('link');\n\tfor (var i = 0; i < links.length; i++) {\n\t\tvar link = links[i];\n\t\tif (link.rel.toLowerCase().match(/stylesheet/) && link.href) {\n\t\t\tvar href = link.href.replace(/(&|%5C?)forceReload=\\d+/, '');\n\t\t\tlink.href = href + (href.match(/\\?/) ? '&' : '?') + 'forceReload=' + (new Date().valueOf())\n\t\t}\n\t}\n})()\nOnce I did that, it became obvious to me that this could be shortened a lot; the last 10 years have been wonderful for JS evolution!\n(()=>{\n\tfor (let link of Array.from(document.querySelectorAll(\"link[rel=stylesheet][href]\"))) {\n\t\tvar href = new URL(link.href, location);\n\t\thref.searchParams.set(\"forceReload\", Date.now());\n\t\tlink.href = href;\n\t}\n})()\nSure, this reduces browser support a bit (most notably it excludes IE11), but since this is a local development tool, that‚Äôs not such a big problem.\nNow, let‚Äôs extend this to support iframes as well:\n{\n\tlet $$ = (selector, root = document) => Array.from(root.querySelectorAll(selector));\n\t\n\tlet refresh = (document) => {\n\t\tfor (let link of $$(\"link[rel=stylesheet][href]\", document)) {\n\t\t\tlet href = new URL(link.href);\n\t\t\thref.searchParams.set(\"forceReload\", Date.now());\n\t\t\tlink.href = href;\n\t\t}\n\n\t\tfor (let iframe of $$(\"iframe\", document)) {\n\t\t\tiframe.contentDocument && refresh(iframe.contentDocument);\n\t\t}\n\t}\n\n\trefresh();\n}\nThat‚Äôs it! Do keep in mind that this will not work with cross-origin iframes, but then again, you probably don‚Äôt expect it to in that case.\nNow all we need to do to turn it into a bookmarklet is to prepend it with javascript: and minify the code. Here you go:\nRefresh CSS\nHope this is useful to someone else as well \nAny improvements are always welcome!\nCredits\n\nPaul Irish, for the original bookmarklet\nMaur√≠cio Kishi, for making the iframe traversal recursive (comment)\n",
      "date_published": "2018-09-18T19:07:40.000Z",
      "date_modified": "2018-09-18T19:07:40.000Z"
    },
    {
      "id": "http://lea.verou.me/?p=2817",
      "url": "https://lea.verou.me/2018/06/easy-dynamic-regular-expressions-with-tagged-template-literals-and-proxies/",
      "title": "Easy Dynamic Regular Expressions with Tagged Template Literals and Proxies",
      "summary": "If you use regular expressions a lot, you probably also create them from existing strings that you first need to escape in case they contain special characters that need to be matched literally, like $ or +. Usually, a helper function is defined (hopefully this will soon change as RegExp.escape() is coming!) that basically looks [‚Ä¶]",
      "content_html": "<p>If you use regular expressions a lot, you probably also create them from existing strings that you first need to escape in case they contain special characters that need to be matched literally, like <code>$</code> or <code>+</code>. Usually, a helper function is defined (hopefully this will soon change as <a href=\"https://github.com/benjamingr/RegExp.escape/\">RegExp.escape()</a> is coming!) that basically looks like this:</p>\n<pre><code class=\"language-js\">var¬†escapeRegExp = s =&gt; s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&amp;\");</code></pre>\n<p>and then regexps are created by escaping the static strings and concatenating them with the rest of the regex like this:</p>\n<pre><code class=\"language-js\">var regex = RegExp(escapeRegExp(start) + '([\\\\S\\\\s]+?)' + escapeRegExp(end), \"gi\")</code></pre>\n<p>or, with ES6 template literals, like this:</p>\n<pre><code class=\"language-js\">var regex = RegExp(`${escapeRegExp(start)}([\\\\S\\\\s]+?)${escapeRegExp(end)}`, \"gi\")</code></pre>\n<p>(In case you were wondering, this regex is taken directly from the <a href=\"https://github.com/mavoweb/mavo/blob/master/src/expression.js#L48\">Mavo source code</a>)</p>\n<p>Isn&#8217;t this horribly verbose? What if we could define a regex with just a template literal (<code class=\"language-js\">`${start}([\\\\S\\\\s]+?)${end}`</code> for the regex above) and it just worked? Well, it turns out we can! If you haven&#8217;t seen <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates\">tagged template literals</a> before, I suggest you click that MDN link and read up. Basically, you can prepend an ES6 template literal with a reference to a function and the function accepts the static parts of the string and the dynamic parts separately, allowing you to operate on them!<span id=\"more-2817\"></span></p>\n<p>So, what if we defined such a function that returns a RegExp object and escapes the dynamic parts? Let&#8217;s try to do that:</p>\n<pre><code class=\"language-js\">var regexp = (strings, ...values) =&gt; {\n\treturn RegExp(strings[0] + values.map((v, i) =&gt; escapeRegExp(v) + strings[i+1]).join(\"\"))\n};</code></pre>\n<p>And now we can try it in the console:</p>\n<pre><code class=\"language-js\">&gt; regexp`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n&lt; /^\\/\\*([\\S\\s]+?)\\*\\//</code></pre>\n<h3>Won‚Äôt somebody, please, think of the flags?!</h3>\n<p>This is all fine and dandy, but how do we specify flags? Note that the original regexp had flags (&#8220;gi&#8221;). The tagged template syntax doesn&#8217;t really allow us to pass in any additional parameters. However, thanks to functions being first-class objects in JS, we can have a function that takes the flags in as parameters and returns a function that generates regexps with the right flags:</p>\n<pre><code class=\"language-js\">var regexp = flags =&gt; {\n\treturn (strings, ...values) =&gt; {\n\t\tvar pattern = strings[0] + values.map((v, i) =&gt; escapeRegExp(v) + strings[i+1]).join(\"\")\n\t\treturn RegExp(pattern, flags);\n\t}\n};</code></pre>\n<p>And now we can try it in the console:</p>\n<pre><code class=\"language-js\">&gt; regexp(\"gi\")`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n&lt; /^\\/\\*([\\S\\s]+?)\\*\\//gi</code></pre>\n<p>This works nice, but now even if we don&#8217;t want any flags, we can&#8217;t use the nice simple syntax we had earlier, we need to include a pair of empty parens:</p>\n<pre><code class=\"language-js\">&gt; regexp()`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n&lt; /^\\/\\*([\\S\\s]+?)\\*\\//</code></pre>\n<p>Can we have our cake and eat it too? Can we have the short parenthesis-less syntax when we have no flags, and still be able to specify flags? Of course! We can check the arguments we have and either return a function, or call the function. If our function is used as a tag, the first argument will be an array (<a href=\"http://lea.verou.me/2018/06/easy-dynamic-regular-expressions-with-tagged-template-literals-and-proxies/#comment-3930513790\">thanks Roman!</a>). If we&#8217;re expecting it to return a function, the first argument would be a string: the flags. So, let&#8217;s try this approach!</p>\n<pre><code class=\"language-js\">var regexp = (...args) =&gt; {\n\tvar ret = (flags, strings, ...values) =&gt; {\n\t\tvar pattern = strings[0] + values.map((v, i) =&gt; escapeRegExp(v) + strings[i+1]).join(\"\");\n\t\treturn RegExp(pattern, flags);\n\t};\n\n\tif (Array.isArray(args[0])) {\n\t\t// Used as a template tag\n\t\treturn ret(\"\", ...args);\n\t}\n\n\treturn ret.bind(undefined, args[0]);\n};</code></pre>\n<p>And now we can try it in the console and verify that both syntaxes work:</p>\n<pre><code class=\"language-js\">&gt; regexp(\"gi\")`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n&lt; /^\\/\\*([\\S\\s]+?)\\*\\//gi\nregexp`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n&lt; /^\\/\\*([\\S\\s]+?)\\*\\//</code></pre>\n<h3>Even nicer syntax, with proxies!</h3>\n<p>Is there a better way? If this is not super critical for performance, we could use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">proxies</a> to return the right function with a template tag like <code>regexp.gi</code>, no parentheses or quotes needed and the code is actually shorter too:</p>\n<pre><code class=\"language-js\">var _regexp = (flags, strings, ...values) =&gt; {\n\tvar pattern = strings[0] + values.map((v, i) =&gt; escapeRegExp(v) + strings[i+1]).join(\"\");\n\treturn RegExp(pattern, flags);\n};\nvar regexp = new Proxy(_regexp.bind(undefined, \"\"), {\n\tget: (t, property) =&gt; _regexp.bind(undefined, property)\n});</code></pre>\n<p>And now we can try it in the console, both with and without flags!</p>\n<pre><code class=\"language-js\">&gt; regexp.gi`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n&lt; /^\\/\\*([\\S\\s]+?)\\*\\//gi\n&gt; regexp`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n&lt; /^\\/\\*([\\S\\s]+?)\\*\\//</code></pre>\n<p>That&#8217;s some beauty right there! ?</p>\n<p><em>PS: If you liked this, take a look at <a href=\"http://2ality.com/2017/07/re-template-tag.html\">this mini-library</a> by Dr. Axel Rauschmayer that uses a similar idea and turns it into a library that does more than just escaping strings (different syntax for flags though, they become part of the template string, like in PHP)</em></p>",
      "content_text": "If you use regular expressions a lot, you probably also create them from existing strings that you first need to escape in case they contain special characters that need to be matched literally, like $ or +. Usually, a helper function is defined (hopefully this will soon change as RegExp.escape() is coming!) that basically looks like this:\nvar¬†escapeRegExp = s => s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\nand then regexps are created by escaping the static strings and concatenating them with the rest of the regex like this:\nvar regex = RegExp(escapeRegExp(start) + '([\\\\S\\\\s]+?)' + escapeRegExp(end), \"gi\")\nor, with ES6 template literals, like this:\nvar regex = RegExp(`${escapeRegExp(start)}([\\\\S\\\\s]+?)${escapeRegExp(end)}`, \"gi\")\n(In case you were wondering, this regex is taken directly from the Mavo source code)\nIsn‚Äôt this horribly verbose? What if we could define a regex with just a template literal (`${start}([\\\\S\\\\s]+?)${end}` for the regex above) and it just worked? Well, it turns out we can! If you haven‚Äôt seen tagged template literals before, I suggest you click that MDN link and read up. Basically, you can prepend an ES6 template literal with a reference to a function and the function accepts the static parts of the string and the dynamic parts separately, allowing you to operate on them!\nSo, what if we defined such a function that returns a RegExp object and escapes the dynamic parts? Let‚Äôs try to do that:\nvar regexp = (strings, ...values) => {\n\treturn RegExp(strings[0] + values.map((v, i) => escapeRegExp(v) + strings[i+1]).join(\"\"))\n};\nAnd now we can try it in the console:\n> regexp`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n< /^\\/\\*([\\S\\s]+?)\\*\\//\nWon‚Äôt somebody, please, think of the flags?!\nThis is all fine and dandy, but how do we specify flags? Note that the original regexp had flags (‚Äúgi‚Äù). The tagged template syntax doesn‚Äôt really allow us to pass in any additional parameters. However, thanks to functions being first-class objects in JS, we can have a function that takes the flags in as parameters and returns a function that generates regexps with the right flags:\nvar regexp = flags => {\n\treturn (strings, ...values) => {\n\t\tvar pattern = strings[0] + values.map((v, i) => escapeRegExp(v) + strings[i+1]).join(\"\")\n\t\treturn RegExp(pattern, flags);\n\t}\n};\nAnd now we can try it in the console:\n> regexp(\"gi\")`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n< /^\\/\\*([\\S\\s]+?)\\*\\//gi\nThis works nice, but now even if we don‚Äôt want any flags, we can‚Äôt use the nice simple syntax we had earlier, we need to include a pair of empty parens:\n> regexp()`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n< /^\\/\\*([\\S\\s]+?)\\*\\//\nCan we have our cake and eat it too? Can we have the short parenthesis-less syntax when we have no flags, and still be able to specify flags? Of course! We can check the arguments we have and either return a function, or call the function. If our function is used as a tag, the first argument will be an array (thanks Roman!). If we‚Äôre expecting it to return a function, the first argument would be a string: the flags. So, let‚Äôs try this approach!\nvar regexp = (...args) => {\n\tvar ret = (flags, strings, ...values) => {\n\t\tvar pattern = strings[0] + values.map((v, i) => escapeRegExp(v) + strings[i+1]).join(\"\");\n\t\treturn RegExp(pattern, flags);\n\t};\n\n\tif (Array.isArray(args[0])) {\n\t\t// Used as a template tag\n\t\treturn ret(\"\", ...args);\n\t}\n\n\treturn ret.bind(undefined, args[0]);\n};\nAnd now we can try it in the console and verify that both syntaxes work:\n> regexp(\"gi\")`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n< /^\\/\\*([\\S\\s]+?)\\*\\//gi\nregexp`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n< /^\\/\\*([\\S\\s]+?)\\*\\//\nEven nicer syntax, with proxies!\nIs there a better way? If this is not super critical for performance, we could use proxies to return the right function with a template tag like regexp.gi, no parentheses or quotes needed and the code is actually shorter too:\nvar _regexp = (flags, strings, ...values) => {\n\tvar pattern = strings[0] + values.map((v, i) => escapeRegExp(v) + strings[i+1]).join(\"\");\n\treturn RegExp(pattern, flags);\n};\nvar regexp = new Proxy(_regexp.bind(undefined, \"\"), {\n\tget: (t, property) => _regexp.bind(undefined, property)\n});\nAnd now we can try it in the console, both with and without flags!\n> regexp.gi`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n< /^\\/\\*([\\S\\s]+?)\\*\\//gi\n> regexp`^${'/*'}([\\\\S\\\\s]+?)${'*/'}`;\n< /^\\/\\*([\\S\\s]+?)\\*\\//\nThat‚Äôs some beauty right there! ?\nPS: If you liked this, take a look at this mini-library by Dr. Axel Rauschmayer that uses a similar idea and turns it into a library that does more than just escaping strings (different syntax for flags though, they become part of the template string, like in PHP)",
      "date_published": "2018-06-04T19:47:55.000Z",
      "date_modified": "2018-06-04T19:47:55.000Z"
    },
    {
      "id": "http://lea.verou.me/?p=2801",
      "url": "https://lea.verou.me/2018/05/never-forget-typebutton-on-generated-buttons/",
      "title": "Never forget type=‚Äùbutton‚Äù on generated buttons!",
      "summary": "I just dealt with one of the weirdest bugs and thought you may find it amusing too. In one of my slides for my upcoming talk ‚ÄúEven More CSS Secrets‚Äù, I had a Mavo app on a <form>, and the app included a collection to quickly create a UI to manage pairs of values for [‚Ä¶]",
      "content_html": "<p><img class=\"alignright\" style=\"width: 300px;\" src=\"https://i.imgflip.com/2am9er.jpg\" /> I just dealt with one of the weirdest bugs and thought you may find it amusing too.</p>\n<p>In one of my slides for my upcoming talk &#8220;Even More CSS Secrets&#8221;, I had a <a href=\"https://mavo.io\">Mavo</a> app on a &lt;form&gt;, and the app included a collection to quickly create a UI to manage pairs of values for something I wanted to calculate in one of my live demos. A Mavo collection is a repeatable HTML element with affordances to add items, delete items, move items etc. Many of these affordances are implemented via <code>&lt;button&gt;</code> elements generated by Mavo.</p>\n<p>Normally, hitting Enter inside a text field within a collection adds a new item, as one would expect. However, I noticed that when I hit Enter inside any item, not only no item was added, but an item was being <strong>deleted</strong>, with the usual &#8220;Item deleted [Undo]&#8221; UI and everything!</p>\n<p>At first I thought it was a bug with the part of Mavo code that adds items on Enter and deletes empty items on backspace, so I commented that out. Nope, still happening. I was already very puzzled, since I couldn&#8217;t remember any other part of the codebase that deletes items in response to keyboard events.</p>\n<p>So, I added breakpoints on the <code>delete(item)</code> method of <code>Mavo.Collection</code> to inspect the call stack and see how execution got there. Turned out, it got there via a normal &#8230;<code>click</code> event on the actual delete button! What fresh hell was this? I never clicked any delete button!</p>\n<p>And then it dawned on me: <strong><a href=\"https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element\"><code>&lt;button&gt;</code> elements with no <code>type</code> attribute set are submit buttons by default</a>! </strong>Quote from spec: <em>The missing value default and invalid value default are the Submit Button state.</em>. This makes no difference in most cases, <strong>UNLESS</strong> you&#8217;re inside a form. The delete button of the first item had been turned into the de facto default submit button just because it was the first button in that form and it had no type!</p>\n<p>I also remembered that <strong>regardless of how you submit a form (e.g. by hitting Enter on a single-line text field) it¬†also fires a click event on the default submit button</strong>, because people often listen to that instead of the form&#8217;s submit event.¬†Ironically, I was cancelling the form&#8217;s submit event in my code, but it still generated that fake click event, making it even harder to track down as no form submission was actually happening.</p>\n<p>The solution was of course to <a href=\"https://github.com/mavoweb/mavo/commit/9c1e6fcd31a52bc10f1f08f4d1ebf47eac72ac3b\">go through every part of the Mavo code that generates buttons and add type=&#8221;button&#8221; to them</a>. I would recommend this to everyone who is writing libraries that will operate in unfamiliar HTML code. Most of the time a type-less &lt;button&gt; will work just fine, but when it doesn&#8217;t, things get <em>really weird</em>.</p>",
      "content_text": " I just dealt with one of the weirdest bugs and thought you may find it amusing too.\nIn one of my slides for my upcoming talk ‚ÄúEven More CSS Secrets‚Äù, I had a Mavo app on a <form>, and the app included a collection to quickly create a UI to manage pairs of values for something I wanted to calculate in one of my live demos. A Mavo collection is a repeatable HTML element with affordances to add items, delete items, move items etc. Many of these affordances are implemented via <button> elements generated by Mavo.\nNormally, hitting Enter inside a text field within a collection adds a new item, as one would expect. However, I noticed that when I hit Enter inside any item, not only no item was added, but an item was being deleted, with the usual ‚ÄúItem deleted [Undo]‚Äù UI and everything!\nAt first I thought it was a bug with the part of Mavo code that adds items on Enter and deletes empty items on backspace, so I commented that out. Nope, still happening. I was already very puzzled, since I couldn‚Äôt remember any other part of the codebase that deletes items in response to keyboard events.\nSo, I added breakpoints on the delete(item) method of Mavo.Collection to inspect the call stack and see how execution got there. Turned out, it got there via a normal ‚Ä¶click event on the actual delete button! What fresh hell was this? I never clicked any delete button!\nAnd then it dawned on me: <button> elements with no type attribute set are submit buttons by default! Quote from spec: The missing value default and invalid value default are the Submit Button state.. This makes no difference in most cases, UNLESS you‚Äôre inside a form. The delete button of the first item had been turned into the de facto default submit button just because it was the first button in that form and it had no type!\nI also remembered that regardless of how you submit a form (e.g. by hitting Enter on a single-line text field) it¬†also fires a click event on the default submit button, because people often listen to that instead of the form‚Äôs submit event.¬†Ironically, I was cancelling the form‚Äôs submit event in my code, but it still generated that fake click event, making it even harder to track down as no form submission was actually happening.\nThe solution was of course to go through every part of the Mavo code that generates buttons and add type=‚Äùbutton‚Äù to them. I would recommend this to everyone who is writing libraries that will operate in unfamiliar HTML code. Most of the time a type-less <button> will work just fine, but when it doesn‚Äôt, things get really weird.",
      "date_published": "2018-05-19T21:40:20.000Z",
      "date_modified": "2018-05-19T21:40:20.000Z"
    }
  ],
  "description": "Life at the bleeding edge (of web standards)",
  "home_page_url": "https://lea.verou.me"
}