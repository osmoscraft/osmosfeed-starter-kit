{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "WebKit",
  "feed_url": "https://webkit.org/feed/atom/",
  "items": [
    {
      "id": "https://webkit.org/?p=12960",
      "url": "https://webkit.org/blog/12960/release-notes-for-safari-technology-preview-147-with-safari-16-features/",
      "title": "Release Notes for Safari Technology Preview 147 with Safari 16 Features",
      "summary": "Safari Technology Preview Release 147 is now available for download for macOS Monterey 12.3 or later and macOS Ventura beta.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 147 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Monterey 12.3 or later and macOS Ventura beta. Updates to Safari Technology Preview are no longer available for macOS Big Sur. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS Monterey, or System Settings under General → Software Update on macOS Ventura.</p>\n<p><strong>Note:</strong> Shared Tab Groups and syncing for Tab Groups, Website Settings, and Web Extensions are not enabled in this release.</p>\n<p>Many of the new Safari 16 features are now available in Safari Technology Preview 147:</p>\n<p><strong>Live Text.</strong> Select and interact with text in videos or translate text in images on the web in macOS Ventura beta on Apple Silicon-based Macs.</p>\n<p><strong>Web technologies.</strong> Experience and test the HTML, CSS, JavaScript, and other web technologies that are <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-16-release-notes\">available in Safari 16 Beta</a> and included in <a href=\"https://webkit.org/blog/category/safari-technology-preview/\">previous Safari Technology Preview releases</a>.</p>\n<p><strong>Web Push.</strong> Send notifications to people who opt-in on your website or web app with Safari Technology Preview on macOS Ventura beta.</p>\n<p><strong>Passkeys.</strong> Preview the new type of phishing-resistant credential that makes signing in to websites safer and easier. Available through Safari’s WebAuthn platform authenticator. To learn more about passkeys, see <a href=\"https://developer.apple.com/videos/play/wwdc2022/10092/\">Meet passkeys</a>.</p>\n<p><strong>Improved Safari Web Extensions.</strong> Test out API improvements including the ability to open a Safari Web Extension popover programmatically.</p>\n<p><strong>Web Inspector Extensions.</strong> Build custom tooling or convert existing developer tools extensions to use in Web Inspector.</p>\n<p><strong>Flexbox Inspector.</strong> Use the new visualization overlay in Web Inspector to help you more quickly and easily understand the layout of elements with Flexbox. It marks both the free space and gaps between flex items to reveal how they affect the result.</p>\n<p>If you see bugs or unexpected behavior with the interface of Safari Technology Preview, please file feedback with Apple’s <a href=\"https://feedbackassistant.apple.com/\">Feedback Assistant</a>. If you come across an implementation bug in web technology, Web Inspector, or have a request, please file a ticket on the <a href=\"https://bugs.webkit.org/\">WebKit bug tracker</a>.</p>",
      "content_text": "Safari Technology Preview Release 147 is now available for download for macOS Monterey 12.3 or later and macOS Ventura beta. Updates to Safari Technology Preview are no longer available for macOS Big Sur. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS Monterey, or System Settings under General → Software Update on macOS Ventura.\nNote: Shared Tab Groups and syncing for Tab Groups, Website Settings, and Web Extensions are not enabled in this release.\nMany of the new Safari 16 features are now available in Safari Technology Preview 147:\nLive Text. Select and interact with text in videos or translate text in images on the web in macOS Ventura beta on Apple Silicon-based Macs.\nWeb technologies. Experience and test the HTML, CSS, JavaScript, and other web technologies that are available in Safari 16 Beta and included in previous Safari Technology Preview releases.\nWeb Push. Send notifications to people who opt-in on your website or web app with Safari Technology Preview on macOS Ventura beta.\nPasskeys. Preview the new type of phishing-resistant credential that makes signing in to websites safer and easier. Available through Safari’s WebAuthn platform authenticator. To learn more about passkeys, see Meet passkeys.\nImproved Safari Web Extensions. Test out API improvements including the ability to open a Safari Web Extension popover programmatically.\nWeb Inspector Extensions. Build custom tooling or convert existing developer tools extensions to use in Web Inspector.\nFlexbox Inspector. Use the new visualization overlay in Web Inspector to help you more quickly and easily understand the layout of elements with Flexbox. It marks both the free space and gaps between flex items to reveal how they affect the result.\nIf you see bugs or unexpected behavior with the interface of Safari Technology Preview, please file feedback with Apple’s Feedback Assistant. If you come across an implementation bug in web technology, Web Inspector, or have a request, please file a ticket on the WebKit bug tracker.",
      "date_published": "2022-06-21T20:40:45.000Z",
      "date_modified": "2022-06-21T20:50:24.000Z"
    },
    {
      "id": "https://webkit.org/?p=12945",
      "url": "https://webkit.org/blog/12945/meet-web-push/",
      "title": "Meet Web Push",
      "summary": "Websites have many reasons to notify their users of time-sensitive or high-priority events, even if the user does not currently have the site open.",
      "content_html": "<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/WebPush-1024x576.png\" alt=\"a push notification on macOS\" width=\"1024\" height=\"576\" class=\"aligncenter size-large wp-image-12900\" srcset=\"https://webkit.org/wp-content/uploads/WebPush-1024x576.png 1024w, https://webkit.org/wp-content/uploads/WebPush-300x169.png 300w, https://webkit.org/wp-content/uploads/WebPush-768x432.png 768w, https://webkit.org/wp-content/uploads/WebPush-1536x864.png 1536w, https://webkit.org/wp-content/uploads/WebPush.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n<p>Websites have many reasons to notify their users of time-sensitive or high-priority events, even if the user does not currently have the site open. This feature is called Web Push, and is enabled by the W3C standards for <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Push_API\">Push API</a>,  <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API\">Notifications API</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\">Service Workers</a>, all working together. WebKit now supports the relevant parts of those standards to enable Web Push.</p>\n<p>Apple has made changes to macOS that deeply integrate with WebKit’s support to provide a great user experience, and we’re excited to announce that Web Push is supported in Safari 16 on macOS Ventura.</p>\n<p>Keep an eye out for Web Push on iOS and iPadOS in 2023.</p>\n<p>As long as you’ve coded your web application to the standards you will be able to reach Safari 16 users on macOS Ventura. You don’t need to join the Apple Developer Program to send Web Push notifications.</p>\n<p>If you exclude Safari through browser detection, now would be a great time to switch to feature detection, which lets you take advantage of new features as soon as they’re supported. Additionally, if you tightly manage push end points on your server, be sure to allow URLs from any subdomain of push.apple.com.</p>\n<p>All of this and more is covered in <a href=\"https://developer.apple.com/videos/play/wwdc2022/10098/\">Meet Web Push</a> (15 minute video) at WWDC22.</p>\n<h2>Standards overview</h2>\n<p>Most features of the web platform are described in a single web standard. Web Push is an exception, with multiple standards describing implementation requirements.</p>\n<p>There are many resources on the web to help web application authors get up and running with these standards. But to further cover how WebKit’s support works, it is useful to cover the web standards at a high level.</p>\n<p>The Push API standard is the most directly relevant to start with. It describes the JavaScript interface that allows a website to register a push subscription. That subscription enables sending push messages to your user’s browser using a push service.</p>\n<p>The ServiceWorker API is extended to support these push messages. Once a push message is received from a domain, that domain’s registered service worker script receives an event representing the push message.</p>\n<p>The Notifications API is extended to allow service worker scripts to post a notification even without an open browser tab.</p>\n<p>When a web application registers a push subscription, they promise that pushes will always be user visible. When the service worker handles a push message, it is required to use the Notifications API to display a user visible notification. Finally, when the user activates that notification, the service worker is sent an event representing the notification activation.</p>\n<h2>Power and privacy</h2>\n<p>Both the WebKit open source project and Apple treat privacy as a fundamental human right. As with other privileged features of the web platform, requesting a push subscription requires an explicit user gesture. It also requires you set the <code>userVisibleOnly</code> flag to true, and fulfill that promise by always showing a notification in response to a push message.</p>\n<p>The Web Push API is not an invitation for silent background runtime, as that would both violate a user’s trust and impact a user’s battery life.</p>\n<p>Violations of the <code>userVisibleOnly</code> promise will result in a push subscription being revoked.</p>\n<h2>A little bit about WebKit</h2>\n<p>Some of you are interested in the implementation details of Web Push in WebKit.</p>\n<p>One goal of the WebKit open source project is to make it easy to deliver a modern browser engine that integrates well with any modern platform.</p>\n<p>Many web-facing features are implemented entirely within WebKit, and the maintainers of a given WebKit port do not have to do any additional work to add support on their platforms.</p>\n<p>Occasionally features require relatively deep integration with a platform. That means a WebKit port needs to write a lot of custom code inside WebKit or integrate with platform specific libraries. For example, to support the HTML <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code> elements, Apple’s port leverages Apple’s Core Media framework, whereas the GTK port uses the GStreamer project.</p>\n<p>A feature might also require deep enough customization on a per-Application basis that WebKit can’t do the work itself.</p>\n<p>For example web content might call <code>window.alert()</code>. In a general purpose web browser like Safari, the browser wants to control the presentation of the alert itself. But an e-book reader that displays web content might want to suppress alerts altogether.</p>\n<p>From WebKit’s perspective, supporting Web Push requires deep per-platform and per-application customization.</p>\n<h2>Web Push in Apple’s WebKit port</h2>\n<p>Apple’s WebKit port includes a new daemon called <code>webpushd</code>. It is installed as a LaunchAgent in macOS Ventura to support Web Push. This daemon takes push subscription requests from webpages in Safari 16 and turns them into actual push subscriptions with the Apple Push Notification service.</p>\n<p>Incoming pushes to the system are delivered to <code>webpushd</code>, which then wakes the appropriate application to hand off any pending push messages to a service worker.</p>\n<p>The promise of Web Push is that you can reach your users even if they don’t have your website open in a browser tab. Because of how we integrated <code>webpushd</code> with built-in push support in macOS Ventura, Safari doesn’t even need to be running for a push message to be delivered.</p>\n<p>The requirement to display user visible notifications is another platform specific point. Different browsers might implement Notifications API support in different ways. Safari has always supported local notifications by relying on the macOS Notification Center and has made additional changes to handle activating these notifications when Safari is not running.</p>\n<p>Integrating Apple Push Notification service’s new Web Push support with <code>webpushd</code> and supporting notifications while Safari isn’t running are both system-level changes, making our implementation require macOS Ventura and later.</p>\n<h2>More resources</h2>\n<p>Apple has a few more resources to learn more about Web Push support in Safari 16 on macOS Ventura:</p>\n<ul>\n<li>Read <a href=\"https://developer.apple.com/documentation/usernotifications/sending_web_push_notifications_in_safari_and_other_browsers\">Sending web push notifications in Safari and other browsers</a></li>\n<li>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2022/10098/\">Meet Web Push for Safari</a> (15 minutes)</li>\n</ul>\n<p>MDN has some great resources on Web Push. You should start out with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices\">Web Push API Notifications best practices</a>.</p>\n<p>And of course you can always reference the W3C standards directly:</p>\n<ul>\n<li><a href=\"https://www.w3.org/TR/push-api/\">Push API</a></li>\n<li><a href=\"https://notifications.spec.whatwg.org/\">Notifications API</a></li>\n<li><a href=\"https://w3c.github.io/ServiceWorker/\">ServiceWorker API</a></li>\n</ul>",
      "content_text": "\nWebsites have many reasons to notify their users of time-sensitive or high-priority events, even if the user does not currently have the site open. This feature is called Web Push, and is enabled by the W3C standards for Push API,  Notifications API, and Service Workers, all working together. WebKit now supports the relevant parts of those standards to enable Web Push.\nApple has made changes to macOS that deeply integrate with WebKit’s support to provide a great user experience, and we’re excited to announce that Web Push is supported in Safari 16 on macOS Ventura.\nKeep an eye out for Web Push on iOS and iPadOS in 2023.\nAs long as you’ve coded your web application to the standards you will be able to reach Safari 16 users on macOS Ventura. You don’t need to join the Apple Developer Program to send Web Push notifications.\nIf you exclude Safari through browser detection, now would be a great time to switch to feature detection, which lets you take advantage of new features as soon as they’re supported. Additionally, if you tightly manage push end points on your server, be sure to allow URLs from any subdomain of push.apple.com.\nAll of this and more is covered in Meet Web Push (15 minute video) at WWDC22.\nStandards overview\nMost features of the web platform are described in a single web standard. Web Push is an exception, with multiple standards describing implementation requirements.\nThere are many resources on the web to help web application authors get up and running with these standards. But to further cover how WebKit’s support works, it is useful to cover the web standards at a high level.\nThe Push API standard is the most directly relevant to start with. It describes the JavaScript interface that allows a website to register a push subscription. That subscription enables sending push messages to your user’s browser using a push service.\nThe ServiceWorker API is extended to support these push messages. Once a push message is received from a domain, that domain’s registered service worker script receives an event representing the push message.\nThe Notifications API is extended to allow service worker scripts to post a notification even without an open browser tab.\nWhen a web application registers a push subscription, they promise that pushes will always be user visible. When the service worker handles a push message, it is required to use the Notifications API to display a user visible notification. Finally, when the user activates that notification, the service worker is sent an event representing the notification activation.\nPower and privacy\nBoth the WebKit open source project and Apple treat privacy as a fundamental human right. As with other privileged features of the web platform, requesting a push subscription requires an explicit user gesture. It also requires you set the userVisibleOnly flag to true, and fulfill that promise by always showing a notification in response to a push message.\nThe Web Push API is not an invitation for silent background runtime, as that would both violate a user’s trust and impact a user’s battery life.\nViolations of the userVisibleOnly promise will result in a push subscription being revoked.\nA little bit about WebKit\nSome of you are interested in the implementation details of Web Push in WebKit.\nOne goal of the WebKit open source project is to make it easy to deliver a modern browser engine that integrates well with any modern platform.\nMany web-facing features are implemented entirely within WebKit, and the maintainers of a given WebKit port do not have to do any additional work to add support on their platforms.\nOccasionally features require relatively deep integration with a platform. That means a WebKit port needs to write a lot of custom code inside WebKit or integrate with platform specific libraries. For example, to support the HTML <audio> and <video> elements, Apple’s port leverages Apple’s Core Media framework, whereas the GTK port uses the GStreamer project.\nA feature might also require deep enough customization on a per-Application basis that WebKit can’t do the work itself.\nFor example web content might call window.alert(). In a general purpose web browser like Safari, the browser wants to control the presentation of the alert itself. But an e-book reader that displays web content might want to suppress alerts altogether.\nFrom WebKit’s perspective, supporting Web Push requires deep per-platform and per-application customization.\nWeb Push in Apple’s WebKit port\nApple’s WebKit port includes a new daemon called webpushd. It is installed as a LaunchAgent in macOS Ventura to support Web Push. This daemon takes push subscription requests from webpages in Safari 16 and turns them into actual push subscriptions with the Apple Push Notification service.\nIncoming pushes to the system are delivered to webpushd, which then wakes the appropriate application to hand off any pending push messages to a service worker.\nThe promise of Web Push is that you can reach your users even if they don’t have your website open in a browser tab. Because of how we integrated webpushd with built-in push support in macOS Ventura, Safari doesn’t even need to be running for a push message to be delivered.\nThe requirement to display user visible notifications is another platform specific point. Different browsers might implement Notifications API support in different ways. Safari has always supported local notifications by relying on the macOS Notification Center and has made additional changes to handle activating these notifications when Safari is not running.\nIntegrating Apple Push Notification service’s new Web Push support with webpushd and supporting notifications while Safari isn’t running are both system-level changes, making our implementation require macOS Ventura and later.\nMore resources\nApple has a few more resources to learn more about Web Push support in Safari 16 on macOS Ventura:\n\nRead Sending web push notifications in Safari and other browsers\nWatch Meet Web Push for Safari (15 minutes)\n\nMDN has some great resources on Web Push. You should start out with Web Push API Notifications best practices.\nAnd of course you can always reference the W3C standards directly:\n\nPush API\nNotifications API\nServiceWorker API\n",
      "date_published": "2022-06-07T15:00:55.000Z",
      "date_modified": "2022-06-06T23:27:26.000Z"
    },
    {
      "id": "https://webkit.org/?p=12840",
      "url": "https://webkit.org/blog/12840/web-platform-and-web-extensions-features-highlighted-at-wwdc22/",
      "title": "Web technology sessions at WWDC22",
      "summary": "WWDC22 is here, and with it, a host of announcements of new web technology shipping in WebKit on macOS, iOS and iPadOS, including advancements in privacy and security – plus new features for Safari, Web Inspector and Safari Web Extensions.",
      "content_html": "<p>WWDC22 is here, and with it, a host of announcements of new web technology shipping in WebKit on macOS, iOS and iPadOS, including advancements in privacy and security – plus new features for Safari, Web Inspector and Safari Web Extensions. Much of the news was announced on Monday during <a href=\"https://developer.apple.com/wwdc22/\">this year’s keynote</a>, is listed in the <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-16-release-notes\">Safari 16 Beta Release Notes</a>, and is described in <a href=\"https://webkit.org/blog/12824/news-from-wwdc-webkit-features-in-safari-16-beta/\">News from WWDC: WebKit Features in Safari 16 Beta</a>. But that’s not all.</p>\n<p>Ten sessions at WWDC22 go into greater detail, demonstrating new technology directly relevant to web developers. New videos will be released each day this week. You can watch them on the <a href=\"https://developer.apple.com/wwdc22/\">WWDC22 website</a>, or in the <a href=\"https://apps.apple.com/us/app/apple-developer/id640199958\">Apple Developer app</a> for macOS, iOS, iPadOS, and tvOS.</p>\n<p>Be part of the conversation during WWDC on the <a href=\"https://developer.apple.com/forums/search/?tags=webkit%2Csafari+and+web%2Cweb+inspector%2CHTML%2CCSS%2CJavaScript&amp;condition=ANY&amp;page=1&amp;sortBy=newest\">Apple Developer Forums</a>, or share your thoughts with <a href=\"https://twitter.com/webkit\">@WebKit</a> on Twitter.</p>\n<h2>Tuesday, June 7</h2>\n<figure class=\"preserve-color\"><a href=\"https://developer.apple.com/videos/play/wwdc2022/10048/\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/6541_wide_900x506_3x-1024x576.jpg\" alt=\"\" width=\"1024\" height=\"576\" class=\"aligncenter size-large wp-image-12927\" srcset=\"https://webkit.org/wp-content/uploads/6541_wide_900x506_3x-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/6541_wide_900x506_3x-300x169.jpg 300w, https://webkit.org/wp-content/uploads/6541_wide_900x506_3x-768x432.jpg 768w, https://webkit.org/wp-content/uploads/6541_wide_900x506_3x-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/6541_wide_900x506_3x-2048x1151.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></figure>\n<h3><a href=\"https://developer.apple.com/videos/play/wwdc2022/10048/\">What’s new in Safari and WebKit</a></h3>\n<p>Explore the latest features in Safari and WebKit and learn how you can make better and more powerful websites. We’ll take you on a tour through the latest updates to HTML, CSS enhancements, Web Inspector tooling, Web APIs, and more.</p>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2022/10048/\">What’s new in Safari and WebKit</a> starting on Tuesday, June 7.</p>\n<hr />\n<figure class=\"preserve-color\"><a href=\"https://developer.apple.com/videos/play/wwdc2022/10098/\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/6592_wide_900x506_2x-1024x576.jpg\" alt=\"\" width=\"1024\" height=\"576\" class=\"aligncenter size-large wp-image-12928\" srcset=\"https://webkit.org/wp-content/uploads/6592_wide_900x506_2x-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/6592_wide_900x506_2x-300x169.jpg 300w, https://webkit.org/wp-content/uploads/6592_wide_900x506_2x-768x432.jpg 768w, https://webkit.org/wp-content/uploads/6592_wide_900x506_2x-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/6592_wide_900x506_2x.jpg 1800w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></figure>\n<h3><a href=\"https://developer.apple.com/videos/play/wwdc2022/10098/\">Meet Web Push for Safari</a></h3>\n<p>Bring better notifications to your websites and web apps in Safari on macOS with Web Push. We’ll show you how you can remotely send notifications to people through the web standards-based combination of Push API, Notifications API, and Service Workers.</p>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2022/10098/\">Meet Web Push for Safari</a> starting on Tuesday, June 7.</p>\n<hr />\n<figure class=\"preserve-color\"><a href=\"https://developer.apple.com/videos/play/wwdc2022/10092/\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/6586_wide_900x506_3x-1024x576.jpg\" alt=\"\" width=\"1024\" height=\"576\" class=\"aligncenter size-large wp-image-12930\" srcset=\"https://webkit.org/wp-content/uploads/6586_wide_900x506_3x-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/6586_wide_900x506_3x-300x169.jpg 300w, https://webkit.org/wp-content/uploads/6586_wide_900x506_3x-768x432.jpg 768w, https://webkit.org/wp-content/uploads/6586_wide_900x506_3x-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/6586_wide_900x506_3x-2048x1151.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></figure>\n<h3><a href=\"https://developer.apple.com/videos/play/wwdc2022/10092/\">Meet Passkeys</a></h3>\n<p>It’s time for a security upgrade: Learn how to add support for passkeys to create a quick and easy sign in experience for people, all while offering a radical increase to account security. Passkeys are simple and strong credentials built to eliminate phishing attacks. We’ll share how passkeys are designed with security in mind, show you how people will use them, go over how to integrate passkeys in your log in flow, and explore the platform and web APIs you need to adopt this feature.</p>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2022/10092/\">Meet Passkeys</a> starting on Tuesday, June 7.</p>\n<hr />\n<h2>Wednesday, June 8</h2>\n<figure class=\"preserve-color\"><a href=\"https://developer.apple.com/videos/play/wwdc2022/10099/\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/6593_wide_900x506_3x-1024x576.jpg\" alt=\"\" width=\"1024\" height=\"576\" class=\"aligncenter size-large wp-image-12931\" srcset=\"https://webkit.org/wp-content/uploads/6593_wide_900x506_3x-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/6593_wide_900x506_3x-300x169.jpg 300w, https://webkit.org/wp-content/uploads/6593_wide_900x506_3x-768x432.jpg 768w, https://webkit.org/wp-content/uploads/6593_wide_900x506_3x-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/6593_wide_900x506_3x-2048x1151.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></figure>\n<h3><a href=\"https://developer.apple.com/videos/play/wwdc2022/10099/\">What’s new in Safari Web Extensions</a></h3>\n<p>Learn how you can use the latest improvements to Safari Web Extensions to create even better experiences for people browsing the web. We’ll show you how to upgrade to manifest version 3, adopt the latest APIs for Web Extensions, and sync extensions across devices.</p>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2022/10099/\">What’s new in Safari Web Extensions</a> starting on Wednesday, June 8.</p>\n<hr />\n<figure class=\"preserve-color\"><a href=\"https://developer.apple.com/videos/play/wwdc2022/10077/\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/6571_wide_900x506_3x-1024x576.jpg\" alt=\"\" width=\"1024\" height=\"576\" class=\"aligncenter size-large wp-image-12933\" srcset=\"https://webkit.org/wp-content/uploads/6571_wide_900x506_3x-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/6571_wide_900x506_3x-300x169.jpg 300w, https://webkit.org/wp-content/uploads/6571_wide_900x506_3x-768x432.jpg 768w, https://webkit.org/wp-content/uploads/6571_wide_900x506_3x-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/6571_wide_900x506_3x-2048x1151.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></figure>\n<h3><a href=\"https://developer.apple.com/videos/play/wwdc2022/10077/\">Replace CAPTCHAs with Private Access Tokens</a></h3>\n<p>Don’t be captured by CAPTCHAs! Private Access Tokens are a powerful alternative that help you identify HTTP requests from legitimate devices and people without compromising their identity or personal information. We’ll show you how your app and server can take advantage of this tool to add confidence to your online transactions and preserve privacy.</p>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2022/10077/\">Replace CAPTCHAs with Private Access Tokens</a> starting on Wednesday, June 8.</p>\n<hr />\n<h2>Thursday, June 9</h2>\n<figure class=\"preserve-color\"><a href=\"https://developer.apple.com/videos/play/wwdc2022/10100/\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/6594_wide_900x506_3x-1024x576.jpg\" alt=\"\" width=\"1024\" height=\"576\" class=\"aligncenter size-large wp-image-12934\" srcset=\"https://webkit.org/wp-content/uploads/6594_wide_900x506_3x-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/6594_wide_900x506_3x-300x169.jpg 300w, https://webkit.org/wp-content/uploads/6594_wide_900x506_3x-768x432.jpg 768w, https://webkit.org/wp-content/uploads/6594_wide_900x506_3x-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/6594_wide_900x506_3x-2048x1151.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></figure>\n<h3><a href=\"https://developer.apple.com/videos/play/wwdc2022/10100/\">Create Safari Web Inspector Extensions</a></h3>\n<p>Learn how to add your own tools directly into Web Inspector using the latest Web Extensions APIs. We’ll show you how to create your own tab in Web Inspector, evaluate JavaScript in the inspected page, and use the result to help you troubleshoot and identify potential problems.</p>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2022/10100/\">Create Safari Web Inspector Extensions</a> starting on Thursday, June 9.</p>\n<hr />\n<figure class=\"preserve-color\"><a href=\"https://developer.apple.com/videos/play/wwdc2022/10153/\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/6652_wide_900x506_3x-1024x576.jpg\" alt=\"\" width=\"1024\" height=\"576\" class=\"aligncenter size-large wp-image-12936\" srcset=\"https://webkit.org/wp-content/uploads/6652_wide_900x506_3x-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/6652_wide_900x506_3x-300x169.jpg 300w, https://webkit.org/wp-content/uploads/6652_wide_900x506_3x-768x432.jpg 768w, https://webkit.org/wp-content/uploads/6652_wide_900x506_3x-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/6652_wide_900x506_3x-2048x1151.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></figure>\n<h3><a href=\"https://developer.apple.com/videos/play/wwdc2022/10153/\">What’s new in web accessibility</a></h3>\n<p>Discover techniques for building rich, accessible web apps with custom controls, SSML, and the dialog element. We’ll discuss different assistive technologies and help you learn how to use them when testing the accessibility of your web apps.</p>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2022/10153/\">What’s new in web accessibility</a> starting on Thursday, June 9.</p>\n<hr />\n<figure class=\"preserve-color\"><a href=\"https://developer.apple.com/videos/play/wwdc2022/10122/\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/6618_wide_900x506_3x-1024x576.jpg\" alt=\"\" width=\"1024\" height=\"576\" class=\"aligncenter size-large wp-image-12937\" srcset=\"https://webkit.org/wp-content/uploads/6618_wide_900x506_3x-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/6618_wide_900x506_3x-300x169.jpg 300w, https://webkit.org/wp-content/uploads/6618_wide_900x506_3x-768x432.jpg 768w, https://webkit.org/wp-content/uploads/6618_wide_900x506_3x-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/6618_wide_900x506_3x-2048x1151.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></figure>\n<h3><a href=\"https://developer.apple.com/videos/play/wwdc2022/10122/\">Enhance your Sign in with Apple experience</a></h3>\n<p>Learn how you can provide safe and fast authentication in your app using Sign in with Apple. We’ll show you how you can upgrade password-based accounts into secure, single-tap login credentials, and explore how you can seamlessly handle changes to user sessions in your app. We’ll also help you take advantage of Sign In with Apple across the web and on other platforms. To get the most out of this session, we recommend having familiarity with Sign In with Apple and REST API. We’d also recommend having a basic understanding of JavaScript.</p>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2022/10122/\">Enhance your Sign in with Apple experience</a> starting on Thursday, June 9.</p>\n<hr />\n<h2>Friday, June 10</h2>\n<figure class=\"preserve-color\"><a href=\"https://developer.apple.com/videos/play/wwdc2022/10049/\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/6542_wide_900x506_3x-1024x576.jpg\" alt=\"\" width=\"1024\" height=\"576\" class=\"aligncenter size-large wp-image-12938\" srcset=\"https://webkit.org/wp-content/uploads/6542_wide_900x506_3x-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/6542_wide_900x506_3x-300x169.jpg 300w, https://webkit.org/wp-content/uploads/6542_wide_900x506_3x-768x432.jpg 768w, https://webkit.org/wp-content/uploads/6542_wide_900x506_3x-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/6542_wide_900x506_3x-2048x1151.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></figure>\n<h3><a href=\"https://developer.apple.com/videos/play/wwdc2022/10049/\">What’s new in WKWebView</a></h3>\n<p>Explore the latest updates to WKWebView, our framework for incorporating web content into your app’s interface. We’ll show you how to use the JavaScript fullscreen API, explore CSS viewport units, and learn more about find interactions. We’ll also take you through refinements to content blocking controls, embedding encrypted media, and using the Web Inspector.</p>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2022/10049/\">What’s new in WKWebView</a> starting on Friday, June 10.</p>\n<hr />\n<figure class=\"preserve-color\"><a href=\"https://developer.apple.com/videos/play/wwdc2022/10079/\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/6573_wide_900x506_3x-1024x576.jpg\" alt=\"\" width=\"1024\" height=\"576\" class=\"aligncenter size-large wp-image-12939\" srcset=\"https://webkit.org/wp-content/uploads/6573_wide_900x506_3x-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/6573_wide_900x506_3x-300x169.jpg 300w, https://webkit.org/wp-content/uploads/6573_wide_900x506_3x-768x432.jpg 768w, https://webkit.org/wp-content/uploads/6573_wide_900x506_3x-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/6573_wide_900x506_3x-2048x1151.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></figure>\n<h3><a href=\"https://developer.apple.com/videos/play/wwdc2022/10079/\">Improve DNS security for apps and servers</a></h3>\n<p>Discover the latest ways to ensure that DNS — the foundation of internet addressing — is secure within your app. Learn how to authenticate DNS responses in your app with DNSSEC and enable DNS encryption automatically with Discovery of Designated Resolvers (DDR).</p>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2022/10079/\">Improve DNS security for apps and servers</a> starting on Friday, June 10.</p>",
      "content_text": "WWDC22 is here, and with it, a host of announcements of new web technology shipping in WebKit on macOS, iOS and iPadOS, including advancements in privacy and security – plus new features for Safari, Web Inspector and Safari Web Extensions. Much of the news was announced on Monday during this year’s keynote, is listed in the Safari 16 Beta Release Notes, and is described in News from WWDC: WebKit Features in Safari 16 Beta. But that’s not all.\nTen sessions at WWDC22 go into greater detail, demonstrating new technology directly relevant to web developers. New videos will be released each day this week. You can watch them on the WWDC22 website, or in the Apple Developer app for macOS, iOS, iPadOS, and tvOS.\nBe part of the conversation during WWDC on the Apple Developer Forums, or share your thoughts with @WebKit on Twitter.\nTuesday, June 7\n\nWhat’s new in Safari and WebKit\nExplore the latest features in Safari and WebKit and learn how you can make better and more powerful websites. We’ll take you on a tour through the latest updates to HTML, CSS enhancements, Web Inspector tooling, Web APIs, and more.\nWatch What’s new in Safari and WebKit starting on Tuesday, June 7.\n\n\nMeet Web Push for Safari\nBring better notifications to your websites and web apps in Safari on macOS with Web Push. We’ll show you how you can remotely send notifications to people through the web standards-based combination of Push API, Notifications API, and Service Workers.\nWatch Meet Web Push for Safari starting on Tuesday, June 7.\n\n\nMeet Passkeys\nIt’s time for a security upgrade: Learn how to add support for passkeys to create a quick and easy sign in experience for people, all while offering a radical increase to account security. Passkeys are simple and strong credentials built to eliminate phishing attacks. We’ll share how passkeys are designed with security in mind, show you how people will use them, go over how to integrate passkeys in your log in flow, and explore the platform and web APIs you need to adopt this feature.\nWatch Meet Passkeys starting on Tuesday, June 7.\n\nWednesday, June 8\n\nWhat’s new in Safari Web Extensions\nLearn how you can use the latest improvements to Safari Web Extensions to create even better experiences for people browsing the web. We’ll show you how to upgrade to manifest version 3, adopt the latest APIs for Web Extensions, and sync extensions across devices.\nWatch What’s new in Safari Web Extensions starting on Wednesday, June 8.\n\n\nReplace CAPTCHAs with Private Access Tokens\nDon’t be captured by CAPTCHAs! Private Access Tokens are a powerful alternative that help you identify HTTP requests from legitimate devices and people without compromising their identity or personal information. We’ll show you how your app and server can take advantage of this tool to add confidence to your online transactions and preserve privacy.\nWatch Replace CAPTCHAs with Private Access Tokens starting on Wednesday, June 8.\n\nThursday, June 9\n\nCreate Safari Web Inspector Extensions\nLearn how to add your own tools directly into Web Inspector using the latest Web Extensions APIs. We’ll show you how to create your own tab in Web Inspector, evaluate JavaScript in the inspected page, and use the result to help you troubleshoot and identify potential problems.\nWatch Create Safari Web Inspector Extensions starting on Thursday, June 9.\n\n\nWhat’s new in web accessibility\nDiscover techniques for building rich, accessible web apps with custom controls, SSML, and the dialog element. We’ll discuss different assistive technologies and help you learn how to use them when testing the accessibility of your web apps.\nWatch What’s new in web accessibility starting on Thursday, June 9.\n\n\nEnhance your Sign in with Apple experience\nLearn how you can provide safe and fast authentication in your app using Sign in with Apple. We’ll show you how you can upgrade password-based accounts into secure, single-tap login credentials, and explore how you can seamlessly handle changes to user sessions in your app. We’ll also help you take advantage of Sign In with Apple across the web and on other platforms. To get the most out of this session, we recommend having familiarity with Sign In with Apple and REST API. We’d also recommend having a basic understanding of JavaScript.\nWatch Enhance your Sign in with Apple experience starting on Thursday, June 9.\n\nFriday, June 10\n\nWhat’s new in WKWebView\nExplore the latest updates to WKWebView, our framework for incorporating web content into your app’s interface. We’ll show you how to use the JavaScript fullscreen API, explore CSS viewport units, and learn more about find interactions. We’ll also take you through refinements to content blocking controls, embedding encrypted media, and using the Web Inspector.\nWatch What’s new in WKWebView starting on Friday, June 10.\n\n\nImprove DNS security for apps and servers\nDiscover the latest ways to ensure that DNS — the foundation of internet addressing — is secure within your app. Learn how to authenticate DNS responses in your app with DNSSEC and enable DNS encryption automatically with Discovery of Designated Resolvers (DDR).\nWatch Improve DNS security for apps and servers starting on Friday, June 10.",
      "date_published": "2022-06-06T21:30:55.000Z",
      "date_modified": "2022-06-06T21:55:01.000Z"
    },
    {
      "id": "https://webkit.org/?p=12824",
      "url": "https://webkit.org/blog/12824/news-from-wwdc-webkit-features-in-safari-16-beta/",
      "title": "News from WWDC22: WebKit Features in Safari 16 Beta",
      "summary": "WebKit has had a big year, with over 162 new features and improvements shipping in WebKit browsers — including Safari 15.2, Safari 15.4, and Safari 15.5.",
      "content_html": "<p>WebKit has had a big year, with over 162 new features and improvements shipping in WebKit browsers — including <a href=\"https://webkit.org/blog/12140/new-webkit-features-in-safari-15-2/\">Safari 15.2</a>, <a href=\"https://webkit.org/blog/12445/new-webkit-features-in-safari-15-4/\">Safari 15.4</a>, and <a href=\"https://webkit.org/blog/12669/new-webkit-features-in-safari-15-5/\">Safari 15.5</a>. Features from earlier this year include <a href=\"https://webkit.org/blog/12209/introducing-the-dialog-element/\">dialog element</a>, lazy loading, inert, :has() pseudo-class, new viewport units, Cascade Layers, <a href=\"https://webkit.org/blog/12179/the-focus-indicated-pseudo-class-focus-visible/\">focus visible</a>, accent color, appearance, <a href=\"https://webkit.org/blog/12662/customizing-color-fonts-on-the-web/\">font palettes</a> for color fonts, BroadcastChannel, Web Locks API, <a href=\"https://webkit.org/blog/12257/the-file-system-access-api-with-origin-private-file-system/\">File System Access API</a>, enhancements to WebAssembly, support for <a href=\"https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/\">Display-P3 in canvas</a>, additions to COOP and COEP, <a href=\"https://webkit.org/blog/12303/css-variables-web-inspector/\">improved CSS autocompletion and new CSS variable tooling</a> in Web Inspector, and much, <em>much</em> more.</p>\n<p>We’re excited to announce today the major web technologies shipping in Safari 16 beta.</p>\n<p>If you are an <a href=\"https://developer.apple.com/programs/\">Apple Developer program</a> member, you can test Safari 16 today by installing the <a href=\"https://developer.apple.com/news/releases/\">developer betas</a> of macOS Ventura, iOS or iPadOS 16.</p>\n<h2><a name=\"web-inspector-extensions\"></a>Web Inspector Extensions</h2>\n<p>Safari 16 brings support for Web Inspector Extensions, so you can enhance Safari’s built-in browser developer tools. This can be especially helpful when using powerful third-party frameworks and services — perhaps your team uses React, Angular, Vue, or Ember; or maybe a popular test suite or another developer service. Now with Safari Web Inspector Extensions, you’ll be able install developer tools extensions from those frameworks and services to make your job developing with them faster and easier. Look for such extensions in the App Store this fall.</p>\n<p>Extensions for popular third-party frameworks and services aren’t the only exciting use of Web Inspector Extensions. Often, a small enhancement to developer tools can make a huge difference in workflow. You might be the best person to imagine and create such an extension. Web extensions are made from HTML, CSS, and JS — a perfect project for web developers. To learn the basics of building a <a href=\"https://developer.apple.com/documentation/safariservices/safari_web_extensions\">Safari Web Extension</a>, either from a quick-start template or by converting an existing extension to work with Safari, along with how to package it for the App Store, watch the Tech Talk <a href=\"https://developer.apple.com/videos/play/tech-talks/110148/\">Build and deploy Safari Extensions</a>.</p>\n<p><a href=\"https://developer.apple.com/documentation/safariservices/safari_web_extensions/adding_a_web_development_tool_to_safari_web_inspector\">Safari Web Inspector Extensions</a> are made with the same <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API\">JavaScript APIs</a>  as the developer tools extensions in other browsers. This makes it possible for the creators of your favorite developer tools extensions to easily <a href=\"https://developer.apple.com/documentation/safariservices/safari_web_extensions/converting_a_web_extension_for_safari\">port them to Safari</a>.</p>\n<p>Web Inspector Extensions join other improvements to Safari Web Extensions, including the ability to sync which extensions are enabled across iOS, iPadOS, and macOS.</p>\n<h2><a name=\"container-queries\"></a>Container Queries</h2>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/CQ-1024x576.png\" alt=\"\" width=\"1024\" height=\"576\" class=\"aligncenter size-large wp-image-12827\" srcset=\"https://webkit.org/wp-content/uploads/CQ-1024x576.png 1024w, https://webkit.org/wp-content/uploads/CQ-300x169.png 300w, https://webkit.org/wp-content/uploads/CQ-768x432.png 768w, https://webkit.org/wp-content/uploads/CQ-1536x864.png 1536w, https://webkit.org/wp-content/uploads/CQ.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n<p>After years of collaboration by engineers working on various browsers to figure out whether or not they would even be possible, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries\">Container Queries</a> are finally here. Similar to Media Queries, Container Queries allow you to adjust the layout or styling of a particular item on your web page based on the size of its container rather than the size of the viewport. They&#8217;ll be an invaluable tool for creating reusable components in a design system.</p>\n<p>Safari 16 supports <a href=\"https://drafts.csswg.org/css-contain-3/#container-queries\">size queries</a> and <a href=\"https://drafts.csswg.org/css-contain-3/#container-lengths\">container query units</a>. “Size queries” are what web developers imagine when they talk about container queries — the opportunity to write CSS that only applies if a container is a certain size. Other ideas for <a href=\"https://drafts.csswg.org/css-contain-3/#style-container\">style queries</a> are also being discussed as part of Container Queries as something for the future.</p>\n<p>Container query units are similar to viewport units, but they specify a length relative to the dimensions of a query container instead of the viewport.</p>\n<table>\n<thead>\n<tr>\n<th>unit</th>\n<th>relative to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cqw</td>\n<td>1% of a query container’s width</td>\n</tr>\n<tr>\n<td>cqh</td>\n<td>1% of a query container’s height</td>\n</tr>\n<tr>\n<td>cqi</td>\n<td>1% of a query container’s inline size</td>\n</tr>\n<tr>\n<td>cqb</td>\n<td>1% of a query container’s block size</td>\n</tr>\n<tr>\n<td>cqmin</td>\n<td>The smaller value of cqi or cqb</td>\n</tr>\n<tr>\n<td>cqmax</td>\n<td>The larger value of cqi or cqb</td>\n</tr>\n</tbody>\n</table>\n<h2><a name=\"web-push-for-macos\"></a>Web Push for macOS</h2>\n<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/WebPush-1024x576.png\" alt=\"a push notification on macOS\" width=\"1024\" height=\"576\" class=\"aligncenter size-large wp-image-12900\" srcset=\"https://webkit.org/wp-content/uploads/WebPush-1024x576.png 1024w, https://webkit.org/wp-content/uploads/WebPush-300x169.png 300w, https://webkit.org/wp-content/uploads/WebPush-768x432.png 768w, https://webkit.org/wp-content/uploads/WebPush-1536x864.png 1536w, https://webkit.org/wp-content/uploads/WebPush.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n<p>Web Push is coming to Safari 16 on macOS Ventura. This lets you remotely send notifications to users of your websites and web apps — and deliver those notifications even when Safari isn’t running. It uses the same combination of web standards you may be familiar with from other browsers: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Push_API\">Push API</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API\">Notifications API</a>, along with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\">Service Worker</a>.</p>\n<p>Users opt into notifications by first indicating interest through a user gesture — such as clicking a button. Then, they’ll be prompted to give permission for your site or app to send notifications. Users will be able to view and manage notifications in Notifications Center, and customize styles and turn notifications off per website in Notifications Settings.</p>\n<p>If you’ve already implemented Web Push for your web app or website using industry best practices, it will automatically work in Safari. Although, if you’ve excluded Safari through browser detection, you’ll need to switch to feature detection to get it working.</p>\n<p>Web Push in Safari uses the same Apple Push Notification service that powers native push on all Macs and iOS devices. If you tightly manage push endpoints on your server, be sure you allow URLs from any subdomain of push.apple.com. You do not need to be an Apple Developer Program member.</p>\n<p>And look for Web Push for iOS and iPadOS in 2023.</p>\n<h2><a name=\"subgrid\"></a>Subgrid</h2>\n<figure><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://webkit.org/wp-content/uploads/subgrid-dark-1024x606.png 2x\" class=\"aligncenter size-large wp-image-12866\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/subgrid-light-1024x606.png\" alt=\"\" width=\"1024\" height=\"606\" class=\"aligncenter size-large  wp-image-12833\" srcset=\"https://webkit.org/wp-content/uploads/subgrid-light-1024x606.png 1024w, https://webkit.org/wp-content/uploads/subgrid-light-300x178.png 300w, https://webkit.org/wp-content/uploads/subgrid-light-768x454.png 768w, https://webkit.org/wp-content/uploads/subgrid-light-1536x909.png 1536w, https://webkit.org/wp-content/uploads/subgrid-light-2048x1212.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></picture></figure>\n<p>CSS Grid shipped over five years ago, in March 2017, revolutionizing what’s possible in layout design on the web. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid\">Subgrid</a> takes Grid to another level, providing an easy way to put grandchildren of a grid container on that grid. It makes it possible to line up items across complex layouts without being constrained by the HTML structure. And Safari’s <a href=\"https://webkit.org/blog/11588/introducing-css-grid-inspector/\">Grid Inspector</a> lets you turn on the overlays for as many grids as you want — which is especially helpful when coding subgrid.</p>\n<h2><a name=\"flexbox-inspector\"></a>Flexbox Inspector</h2>\n<figure><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://webkit.org/wp-content/uploads/flexbox-inspector-dark-1024x606.png 2x\" class=\"aligncenter size-large wp-image-12865\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/flexbox-inspector-light-1024x606.png\" alt=\"\" width=\"1024\" height=\"606\" class=\"aligncenter size-large wp-image-12837\" srcset=\"https://webkit.org/wp-content/uploads/flexbox-inspector-light-1024x606.png 1024w, https://webkit.org/wp-content/uploads/flexbox-inspector-light-300x178.png 300w, https://webkit.org/wp-content/uploads/flexbox-inspector-light-768x454.png 768w, https://webkit.org/wp-content/uploads/flexbox-inspector-light-1536x909.png 1536w, https://webkit.org/wp-content/uploads/flexbox-inspector-light-2048x1212.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></picture></figure>\n<p>Following last year’s <a href=\"https://webkit.org/blog/11588/introducing-css-grid-inspector/\">Grid Inspector</a>, Safari 16 adds a Flexbox Inspector. It pairs perfectly with the addition of the <a href=\"https://webkit.org/blog/12445/new-webkit-features-in-safari-15-4/#web-inspector\">Alignment Editor</a> in Safari 15.4.</p>\n<p>Overlays for Flexbox containers make it easier to visualize the effects your CSS has on Flexbox containers. The new overlay helps you visually distinguish between free space and gaps. It also shows the bounds of items revealing how they are distributed both on the main axis and cross axis of your Flexbox containers. The toggle-able “Order Numbers” option helps show the layout order of elements in the container, which can be helpful when using the <code>order</code> CSS property for items. And, just like our overlays for Grid last year, you can turn on as many Flexbox overlays as you need, without impacting performance.</p>\n<h2><a name=\"accessibility-improvements\"></a>Accessibility Improvements</h2>\n<p>Safari 16 introduces a re-architecture of WebKit’s accessibility support on macOS that delivers improved performance and increased responsiveness. This change allows WebKit to service more accessibility requests from clients like VoiceOver in less time than before. On some complex webpages, we’ve measured twice the number of accessibility requests served in twenty-five percent less time.</p>\n<p>This release also greatly improves accessibility support for elements with <code>display:contents</code> by ensuring they are properly represented in the accessibility tree.</p>\n<h2><a name=\"animation-improvements\"></a>Animation Improvements</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Motion_Path\">CSS Offset Path</a> (also known as Motion Path) provides web developers a way to animate things along a custom path of any shape. The <code>offset-path</code> property let’s you define a geometrical path along which to animate. The <code>offset-anchor</code>, <code>offset-distance</code>, <code>offset-position</code>, and <code>offset-rotate</code> properties give you additional abilities to refine the exact movement of the object being animated. While the <code>offset</code> property acts as a shorthand for combining these properties.</p>\n<p>With Safari 16, you can now animate a CSS Grid. That means changes in the size of rows and/or columns can be animated, opening up a whole <a href=\"https://blog.bitsrc.io/animating-css-grid-rows-and-columns-4b3b0997d06a\">new set</a> of <a href=\"https://css-irl.info/animating-css-grid/\">possibilities</a> for movement on a page.</p>\n<p>Safari 16 also adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/composite\">composite</a> operations, resolving how an element&#8217;s animation impacts its underlying property values. And it adds support for discrete animation to thirty-nine CSS properties — see the full list in the <a href=\"https://webkit.org/blog/12563/release-notes-for-safari-technology-preview-143/\">Safari Technology Preview 143 release notes</a>.</p>\n<h2><a name=\"overscroll-behavior\"></a>Overscroll Behavior</h2>\n<p>CSS <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior\">Overscroll Behavior</a> determines what happens when a user scrolls and reaches the boundary of a scrolling area. It’s useful when you want to stop scroll chaining — when a user scrolls inside a box and hits the end, you now have control over stopping or allowing scrolling on the rest of the page.</p>\n<h2><a name=\"shared-worker\"></a>Shared Worker</h2>\n<p>Just when you thought there weren’t enough different kinds of workers, there’s a new type of worker in Safari — <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker\">Shared Worker</a>.  Like Service Worker, a Shared Worker runs JavaScript in the background, but its lifetime is slightly different.  Your Shared Worker runs as long as the user has any tab open to your domain, and all the tabs open to the same domain can share the same Shared Worker.  So, if you want to do something like have one WebSocket connection open to a server that communicates on behalf of multiple tabs, try out Shared Worker.</p>\n<h2><a name=\"and-more\"></a>And more</h2>\n<p>There’s much more, including fixes and improvements to form controls as well as support for <code>&lt;form&gt;.requestSubmit()</code> and the <code>showPicker()</code> method for HTML input elements. Plus support for Shadow Realms, as well as support for the <code>worker-src</code> Content Security Policy directive.</p>\n<p>To learn more about what’s in Safari 16 for web developers, including a list of bug fixes, read the <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-16-release-notes\">Safari 16 beta release notes</a>.</p>\n<h2><a name=\"feedback\"></a>Feedback</h2>\n<p>We love hearing from you. Send a tweet to <a href=\"https://twitter.com/webkit\">@webkit</a>, <a href=\"https://twitter.com/jensimmons\">@jensimmons</a>, or <a href=\"https://twitter.com/jonathandavis\">@jonathandavis</a> to share your thoughts on this release. What technology from Safari 16 are you most excited about? What features or fixes do you want to see next? If you run into any issues, we welcome your <a href=\"https://feedbackassistant.apple.com/\">feedback</a> on Safari UI, or your <a href=\"https://bugs.webkit.org/\">WebKit bug report</a> about web technology or Web Inspector. Filing issues really does make a difference.</p>\n<p>Download the latest <a href=\"https://developer.apple.com/safari/download/\">Safari Technology Preview</a> to stay at the forefront of the web platform and to use the latest Web Inspector features. You can also use the <a href=\"https://webkit.org/status\">WebKit Feature Status</a> page to watch for new information about the web features that interest you the most.</p>",
      "content_text": "WebKit has had a big year, with over 162 new features and improvements shipping in WebKit browsers — including Safari 15.2, Safari 15.4, and Safari 15.5. Features from earlier this year include dialog element, lazy loading, inert, :has() pseudo-class, new viewport units, Cascade Layers, focus visible, accent color, appearance, font palettes for color fonts, BroadcastChannel, Web Locks API, File System Access API, enhancements to WebAssembly, support for Display-P3 in canvas, additions to COOP and COEP, improved CSS autocompletion and new CSS variable tooling in Web Inspector, and much, much more.\nWe’re excited to announce today the major web technologies shipping in Safari 16 beta.\nIf you are an Apple Developer program member, you can test Safari 16 today by installing the developer betas of macOS Ventura, iOS or iPadOS 16.\nWeb Inspector Extensions\nSafari 16 brings support for Web Inspector Extensions, so you can enhance Safari’s built-in browser developer tools. This can be especially helpful when using powerful third-party frameworks and services — perhaps your team uses React, Angular, Vue, or Ember; or maybe a popular test suite or another developer service. Now with Safari Web Inspector Extensions, you’ll be able install developer tools extensions from those frameworks and services to make your job developing with them faster and easier. Look for such extensions in the App Store this fall.\nExtensions for popular third-party frameworks and services aren’t the only exciting use of Web Inspector Extensions. Often, a small enhancement to developer tools can make a huge difference in workflow. You might be the best person to imagine and create such an extension. Web extensions are made from HTML, CSS, and JS — a perfect project for web developers. To learn the basics of building a Safari Web Extension, either from a quick-start template or by converting an existing extension to work with Safari, along with how to package it for the App Store, watch the Tech Talk Build and deploy Safari Extensions.\nSafari Web Inspector Extensions are made with the same JavaScript APIs  as the developer tools extensions in other browsers. This makes it possible for the creators of your favorite developer tools extensions to easily port them to Safari.\nWeb Inspector Extensions join other improvements to Safari Web Extensions, including the ability to sync which extensions are enabled across iOS, iPadOS, and macOS.\nContainer Queries\n\nAfter years of collaboration by engineers working on various browsers to figure out whether or not they would even be possible, Container Queries are finally here. Similar to Media Queries, Container Queries allow you to adjust the layout or styling of a particular item on your web page based on the size of its container rather than the size of the viewport. They’ll be an invaluable tool for creating reusable components in a design system.\nSafari 16 supports size queries and container query units. “Size queries” are what web developers imagine when they talk about container queries — the opportunity to write CSS that only applies if a container is a certain size. Other ideas for style queries are also being discussed as part of Container Queries as something for the future.\nContainer query units are similar to viewport units, but they specify a length relative to the dimensions of a query container instead of the viewport.\n\n\n\nunit\nrelative to\n\n\n\n\ncqw\n1% of a query container’s width\n\n\ncqh\n1% of a query container’s height\n\n\ncqi\n1% of a query container’s inline size\n\n\ncqb\n1% of a query container’s block size\n\n\ncqmin\nThe smaller value of cqi or cqb\n\n\ncqmax\nThe larger value of cqi or cqb\n\n\n\nWeb Push for macOS\n\nWeb Push is coming to Safari 16 on macOS Ventura. This lets you remotely send notifications to users of your websites and web apps — and deliver those notifications even when Safari isn’t running. It uses the same combination of web standards you may be familiar with from other browsers: Push API and Notifications API, along with Service Worker.\nUsers opt into notifications by first indicating interest through a user gesture — such as clicking a button. Then, they’ll be prompted to give permission for your site or app to send notifications. Users will be able to view and manage notifications in Notifications Center, and customize styles and turn notifications off per website in Notifications Settings.\nIf you’ve already implemented Web Push for your web app or website using industry best practices, it will automatically work in Safari. Although, if you’ve excluded Safari through browser detection, you’ll need to switch to feature detection to get it working.\nWeb Push in Safari uses the same Apple Push Notification service that powers native push on all Macs and iOS devices. If you tightly manage push endpoints on your server, be sure you allow URLs from any subdomain of push.apple.com. You do not need to be an Apple Developer Program member.\nAnd look for Web Push for iOS and iPadOS in 2023.\nSubgrid\n\nCSS Grid shipped over five years ago, in March 2017, revolutionizing what’s possible in layout design on the web. Subgrid takes Grid to another level, providing an easy way to put grandchildren of a grid container on that grid. It makes it possible to line up items across complex layouts without being constrained by the HTML structure. And Safari’s Grid Inspector lets you turn on the overlays for as many grids as you want — which is especially helpful when coding subgrid.\nFlexbox Inspector\n\nFollowing last year’s Grid Inspector, Safari 16 adds a Flexbox Inspector. It pairs perfectly with the addition of the Alignment Editor in Safari 15.4.\nOverlays for Flexbox containers make it easier to visualize the effects your CSS has on Flexbox containers. The new overlay helps you visually distinguish between free space and gaps. It also shows the bounds of items revealing how they are distributed both on the main axis and cross axis of your Flexbox containers. The toggle-able “Order Numbers” option helps show the layout order of elements in the container, which can be helpful when using the order CSS property for items. And, just like our overlays for Grid last year, you can turn on as many Flexbox overlays as you need, without impacting performance.\nAccessibility Improvements\nSafari 16 introduces a re-architecture of WebKit’s accessibility support on macOS that delivers improved performance and increased responsiveness. This change allows WebKit to service more accessibility requests from clients like VoiceOver in less time than before. On some complex webpages, we’ve measured twice the number of accessibility requests served in twenty-five percent less time.\nThis release also greatly improves accessibility support for elements with display:contents by ensuring they are properly represented in the accessibility tree.\nAnimation Improvements\nCSS Offset Path (also known as Motion Path) provides web developers a way to animate things along a custom path of any shape. The offset-path property let’s you define a geometrical path along which to animate. The offset-anchor, offset-distance, offset-position, and offset-rotate properties give you additional abilities to refine the exact movement of the object being animated. While the offset property acts as a shorthand for combining these properties.\nWith Safari 16, you can now animate a CSS Grid. That means changes in the size of rows and/or columns can be animated, opening up a whole new set of possibilities for movement on a page.\nSafari 16 also adds support for composite operations, resolving how an element’s animation impacts its underlying property values. And it adds support for discrete animation to thirty-nine CSS properties — see the full list in the Safari Technology Preview 143 release notes.\nOverscroll Behavior\nCSS Overscroll Behavior determines what happens when a user scrolls and reaches the boundary of a scrolling area. It’s useful when you want to stop scroll chaining — when a user scrolls inside a box and hits the end, you now have control over stopping or allowing scrolling on the rest of the page.\nShared Worker\nJust when you thought there weren’t enough different kinds of workers, there’s a new type of worker in Safari — Shared Worker.  Like Service Worker, a Shared Worker runs JavaScript in the background, but its lifetime is slightly different.  Your Shared Worker runs as long as the user has any tab open to your domain, and all the tabs open to the same domain can share the same Shared Worker.  So, if you want to do something like have one WebSocket connection open to a server that communicates on behalf of multiple tabs, try out Shared Worker.\nAnd more\nThere’s much more, including fixes and improvements to form controls as well as support for <form>.requestSubmit() and the showPicker() method for HTML input elements. Plus support for Shadow Realms, as well as support for the worker-src Content Security Policy directive.\nTo learn more about what’s in Safari 16 for web developers, including a list of bug fixes, read the Safari 16 beta release notes.\nFeedback\nWe love hearing from you. Send a tweet to @webkit, @jensimmons, or @jonathandavis to share your thoughts on this release. What technology from Safari 16 are you most excited about? What features or fixes do you want to see next? If you run into any issues, we welcome your feedback on Safari UI, or your WebKit bug report about web technology or Web Inspector. Filing issues really does make a difference.\nDownload the latest Safari Technology Preview to stay at the forefront of the web platform and to use the latest Web Inspector features. You can also use the WebKit Feature Status page to watch for new information about the web features that interest you the most.",
      "date_published": "2022-06-06T19:00:23.000Z",
      "date_modified": "2022-06-06T22:13:48.000Z"
    },
    {
      "id": "https://webkit.org/?p=12733",
      "url": "https://webkit.org/blog/12733/happy-birthday-wpe-webkit/",
      "title": "Happy birthday, WPE WebKit!",
      "summary": "WebKit is the purring engine of Safari, it’s true, but it has numerous ports and many contributors.",
      "content_html": "<p><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/Screen-Shot-2022-05-24-at-1.18.57-PM-1024x701.png\" alt=\"\" width=\"1024\" height=\"701\" class=\"aligncenter size-large wp-image-12741\" srcset=\"https://webkit.org/wp-content/uploads/Screen-Shot-2022-05-24-at-1.18.57-PM-1024x701.png 1024w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-05-24-at-1.18.57-PM-300x205.png 300w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-05-24-at-1.18.57-PM-768x525.png 768w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-05-24-at-1.18.57-PM-1536x1051.png 1536w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-05-24-at-1.18.57-PM.png 1640w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n<p>WebKit is the purring engine of Safari, it’s true, but it has numerous ports and many contributors. These ports are used for all sorts of things, from powering Sony PlayStations to driving millions of embedded devices all over the world. Embedded use cases like smart home appliances, digital signage, and automotive displays are largely possible thanks to <a href=\"https://wpewebkit.org/\">WPE WebKit</a>, the official port of WebKit specifically optimized for embedded devices. That port is maintained by <a href=\"https://igalia.com/\">Igalia</a>, an open-source consultancy headquartered in Spain. Their work on WPE WebKit goes a long way toward explaining why Igalia is the most prolific external contributor to the WebKit codebase, accounting for almost 17% of all commits in 2021.</p>\n<p>Igalia recently celebrated the fifth birthday of WPE WebKit with <a href=\"https://wpewebkit.org/blog/01-happy-birthday-wpe.html\">a blog post</a> on their WPE web site, covering its evolution from a fork of <a href=\"https://webkitgtk.org/\">WebKitGTK</a> to a <a href=\"https://wayland.freedesktop.org/\">Wayland</a>-based renderer to a framework compatible with almost any rendering backend before its public launch on 21 April 2017. They also promise a series of articles to come profiling the people who work on WPE WebKit and talking about some of the technical aspects of advancing such a project. You can <a href=\"https://wpewebkit.org/blog/01-happy-birthday-wpe.html\">read more about it in their post</a>. Happy 5th birthday, WPE!</p>",
      "content_text": "\nWebKit is the purring engine of Safari, it’s true, but it has numerous ports and many contributors. These ports are used for all sorts of things, from powering Sony PlayStations to driving millions of embedded devices all over the world. Embedded use cases like smart home appliances, digital signage, and automotive displays are largely possible thanks to WPE WebKit, the official port of WebKit specifically optimized for embedded devices. That port is maintained by Igalia, an open-source consultancy headquartered in Spain. Their work on WPE WebKit goes a long way toward explaining why Igalia is the most prolific external contributor to the WebKit codebase, accounting for almost 17% of all commits in 2021.\nIgalia recently celebrated the fifth birthday of WPE WebKit with a blog post on their WPE web site, covering its evolution from a fork of WebKitGTK to a Wayland-based renderer to a framework compatible with almost any rendering backend before its public launch on 21 April 2017. They also promise a series of articles to come profiling the people who work on WPE WebKit and talking about some of the technical aspects of advancing such a project. You can read more about it in their post. Happy 5th birthday, WPE!",
      "date_published": "2022-05-31T16:00:40.000Z",
      "date_modified": "2022-05-31T16:36:32.000Z"
    },
    {
      "id": "https://webkit.org/?p=12745",
      "url": "https://webkit.org/blog/12745/release-notes-for-safari-technology-preview-146/",
      "title": "Release Notes for Safari Technology Preview 146",
      "summary": "Safari Technology Preview Release 146 is now available for download for macOS Big Sur and of macOS Monterey 12.3 or later.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 146 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and of macOS Monterey 12.3 or later. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=293023&amp;rev=293745&amp;limit=722\">293023-293745</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Fixed hovering over a node in the Layout panel to now highlight it on the page (<a href=\"https://trac.webkit.org/changeset/293189/webkit/\">r293189</a>)</li>\n<li>Fixed <code>&lt;button&gt;</code> and <code>&lt;select&gt;</code> elements appearing in the list of Flex containers (<a href=\"https://trac.webkit.org/changeset/293565/webkit/\">r293565</a>)</li>\n</ul>\n</li>\n<li>Sources Tab\n<ul>\n<li>Added ability for local overrides to entirely block a request (<a href=\"https://trac.webkit.org/changeset/293409/webkit/\">r293409</a>)</li>\n</ul>\n</li>\n<li>Timelines Tab\n<ul>\n<li>Fixed importing a timeline leaves the overview non-scrollable/non-zoomable until windows is resized (<a href=\"https://trac.webkit.org/changeset/293727/webkit/\">r293727</a>)</li>\n</ul>\n</li>\n<li>Graphics Tab\n<ul>\n<li>Improved display of GLenums and GLbitfield in WebGL canvas recordings (<a href=\"https://trac.webkit.org/changeset/293541/webkit/\">r293541</a>, <a href=\"https://trac.webkit.org/changeset/293706/webkit/\">r293706</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Fixed <code>::first-letter</code> when used in shadow content (<a href=\"https://trac.webkit.org/changeset/293497/webkit/\">r293497</a>)</li>\n<li>Fixed <code>revert-layer</code> in shadow tree contexts (<a href=\"https://trac.webkit.org/changeset/293725/webkit/\">r293725</a>)</li>\n<li>Fixed cascade rollback for deferred properties (<a href=\"https://trac.webkit.org/changeset/293485/webkit/\">r293485</a>)</li>\n<li>Related properties sharing a computed value (<a href=\"https://trac.webkit.org/changeset/293602/webkit/\">r293602</a>)</li>\n<li>Made <code>word-wrap</code> CSS property an alias of <code>overflow-wrap</code> (<a href=\"https://trac.webkit.org/changeset/293521/webkit/\">r293521</a>)</li>\n<li>Made <code>-webkit-transform-style</code> an alias of <code>transform-style</code> (<a href=\"https://trac.webkit.org/changeset/293524/webkit/\">r293524</a>)</li>\n<li>Unprefixed the <code>-webkit-user-select</code> CSS property (<a href=\"https://trac.webkit.org/changeset/293089/webkit/\">r293089</a>)</li>\n<li>Removed some unimplemented <code>-webkit-appearance</code> keywords (<a href=\"https://trac.webkit.org/changeset/293511/webkit/\">r293511</a>)</li>\n<li>Updated the user-agent stylesheet to include <code>table { text-indent: initial }</code> to conform with the HTML standard (<a href=\"https://trac.webkit.org/changeset/293322/webkit/\">r293322</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Added ISO8601 based <code>Temporal.PlainDate</code> getters behind a flag (<a href=\"https://trac.webkit.org/changeset/293708/webkit/\">r293708</a>)</li>\n<li>Enabled change-array-by-copy (<a href=\"https://trac.webkit.org/changeset/293348/webkit/\">r293348</a>)</li>\n<li>Fixed WASM to throw consistent exceptions for <code>memory.init</code> and <code>memory.copy</code> (<a href=\"https://trac.webkit.org/changeset/293252/webkit/\">r293252</a>)</li>\n<li>Fixed JS stack traces to report the correct column number in CR-LF line ending style HTML files (<a href=\"https://trac.webkit.org/changeset/293672/webkit/\">r293672</a>)</li>\n</ul>\n<h3>Forms</h3>\n<ul>\n<li>Fixed setting the correct selection range for <code>textarea</code> when updating the default value (<a href=\"https://trac.webkit.org/changeset/293673/webkit/\">r293673</a>)</li>\n<li>Fixed constructed FormData object to not contain an entry for the submit button that was used to submit the form (<a href=\"https://trac.webkit.org/changeset/293444/webkit/\">r293444</a>)</li>\n<li>Fixed <code>user-select: none</code> to have no effect on editability (<a href=\"https://trac.webkit.org/changeset/293028/webkit/\">r293028</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed the media controls overflow button flickering sometimes (<a href=\"https://trac.webkit.org/changeset/293658/webkit/\">r293658</a>)</li>\n<li>Fixed HTMLMediaElement getting multiple interruptions for invisible autoplay (<a href=\"https://trac.webkit.org/changeset/293609/webkit/\">r293609</a>)</li>\n<li>Fixed <code>MediaSession.setPositionState()</code> (<a href=\"https://trac.webkit.org/changeset/293488/webkit/\">r293488</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Fixed the quirk to only stretch the percent height body when it is the document element&#8217;s child (<a href=\"https://trac.webkit.org/changeset/293647/webkit/\">r293647</a>)</li>\n<li>Made <code>contain: layout</code> on the <code>html</code> element change  <code>position: fixed</code> behavior (<a href=\"https://trac.webkit.org/changeset/293209/webkit/\">r293209</a>)</li>\n</ul>\n<h3>Scrolling</h3>\n<ul>\n<li>Fixed smooth scrolling behavior when focusing a scroll container before beginning to scroll (<a href=\"https://trac.webkit.org/changeset/293260/webkit/\">r293260</a>)</li>\n</ul>\n<h3>HTML</h3>\n<ul>\n<li>Fixed <code>&lt;link rel=preconnect&gt;</code> always sending credentials to a different origin, ignoring <code>crossorigin=anonymous</code> (<a href=\"https://trac.webkit.org/changeset/293503/webkit/\">r293503</a>)</li>\n</ul>\n<h3>Shared Worker</h3>\n<ul>\n<li>Fixed resuming a suspended remote shared worker when a new SharedWorker object is created (<a href=\"https://trac.webkit.org/changeset/293173/webkit/\">r293173</a>)</li>\n</ul>\n<h3>Service Worker</h3>\n<ul>\n<li>Fixed Service Worker loads to not expose some ResourceTiming information (<a href=\"https://trac.webkit.org/changeset/293418/webkit/\">r293418</a>)</li>\n<li>Fixed Service Worker update to refresh imported scripts in addition to the main script (<a href=\"https://trac.webkit.org/changeset/293506/webkit/\">r293506</a>)</li>\n<li>Fixed Service Worker to not intercept embed- or object-related loads (<a href=\"https://trac.webkit.org/changeset/293417/webkit/\">r293417</a>)</li>\n<li>Fixed ServiceWorkerRegistration updates to fail if called from an installing Service Worker context (<a href=\"https://trac.webkit.org/changeset/293719/webkit/\">r293719</a>)</li>\n<li>Fixed <code>URL.createObjectURL</code> to not be exposed in Service Worker contexts (<a href=\"https://trac.webkit.org/changeset/293717/webkit/\">r293717</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Fixed Web Locks held in a Worker not getting released on page refresh or exit (<a href=\"https://trac.webkit.org/changeset/293329/webkit/\">r293329</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Changed to not expose ARIA <code>roleDescription</code> value on &#8220;generic&#8221; elements (e.g. div and span) unless an explicit role value is also defined (<a href=\"https://trac.webkit.org/changeset/293345/webkit/\">r293345</a>)</li>\n</ul>\n<h3>Security</h3>\n<ul>\n<li>Fixed mixing <code>strict-dynamic</code> and <code>unsafe-inline</code> Content Security Policies (<a href=\"https://trac.webkit.org/changeset/293603/webkit/\">r293603</a>)</li>\n<li>Set top origin of CORS preflight requests (<a href=\"https://trac.webkit.org/changeset/293591/webkit/\">r293591</a>)</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 146 is now available for download for macOS Big Sur and of macOS Monterey 12.3 or later. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 293023-293745.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nElements Tab\n\nFixed hovering over a node in the Layout panel to now highlight it on the page (r293189)\nFixed <button> and <select> elements appearing in the list of Flex containers (r293565)\n\n\nSources Tab\n\nAdded ability for local overrides to entirely block a request (r293409)\n\n\nTimelines Tab\n\nFixed importing a timeline leaves the overview non-scrollable/non-zoomable until windows is resized (r293727)\n\n\nGraphics Tab\n\nImproved display of GLenums and GLbitfield in WebGL canvas recordings (r293541, r293706)\n\n\n\nCSS\n\nFixed ::first-letter when used in shadow content (r293497)\nFixed revert-layer in shadow tree contexts (r293725)\nFixed cascade rollback for deferred properties (r293485)\nRelated properties sharing a computed value (r293602)\nMade word-wrap CSS property an alias of overflow-wrap (r293521)\nMade -webkit-transform-style an alias of transform-style (r293524)\nUnprefixed the -webkit-user-select CSS property (r293089)\nRemoved some unimplemented -webkit-appearance keywords (r293511)\nUpdated the user-agent stylesheet to include table { text-indent: initial } to conform with the HTML standard (r293322)\n\nJavaScript\n\nAdded ISO8601 based Temporal.PlainDate getters behind a flag (r293708)\nEnabled change-array-by-copy (r293348)\nFixed WASM to throw consistent exceptions for memory.init and memory.copy (r293252)\nFixed JS stack traces to report the correct column number in CR-LF line ending style HTML files (r293672)\n\nForms\n\nFixed setting the correct selection range for textarea when updating the default value (r293673)\nFixed constructed FormData object to not contain an entry for the submit button that was used to submit the form (r293444)\nFixed user-select: none to have no effect on editability (r293028)\n\nMedia\n\nFixed the media controls overflow button flickering sometimes (r293658)\nFixed HTMLMediaElement getting multiple interruptions for invisible autoplay (r293609)\nFixed MediaSession.setPositionState() (r293488)\n\nRendering\n\nFixed the quirk to only stretch the percent height body when it is the document element’s child (r293647)\nMade contain: layout on the html element change  position: fixed behavior (r293209)\n\nScrolling\n\nFixed smooth scrolling behavior when focusing a scroll container before beginning to scroll (r293260)\n\nHTML\n\nFixed <link rel=preconnect> always sending credentials to a different origin, ignoring crossorigin=anonymous (r293503)\n\nShared Worker\n\nFixed resuming a suspended remote shared worker when a new SharedWorker object is created (r293173)\n\nService Worker\n\nFixed Service Worker loads to not expose some ResourceTiming information (r293418)\nFixed Service Worker update to refresh imported scripts in addition to the main script (r293506)\nFixed Service Worker to not intercept embed- or object-related loads (r293417)\nFixed ServiceWorkerRegistration updates to fail if called from an installing Service Worker context (r293719)\nFixed URL.createObjectURL to not be exposed in Service Worker contexts (r293717)\n\nWeb API\n\nFixed Web Locks held in a Worker not getting released on page refresh or exit (r293329)\n\nAccessibility\n\nChanged to not expose ARIA roleDescription value on “generic” elements (e.g. div and span) unless an explicit role value is also defined (r293345)\n\nSecurity\n\nFixed mixing strict-dynamic and unsafe-inline Content Security Policies (r293603)\nSet top origin of CORS preflight requests (r293591)\n",
      "date_published": "2022-05-25T20:43:31.000Z",
      "date_modified": "2022-05-25T22:21:41.000Z"
    },
    {
      "id": "https://webkit.org/?p=12662",
      "url": "https://webkit.org/blog/12662/customizing-color-fonts-on-the-web/",
      "title": "Customizing Color Fonts on the Web",
      "summary": "Color fonts provide a way to add richness to your designs without sacrificing any of the many benefits of using plain text.",
      "content_html": "<p class=\"hero-holder\"><img src=\"https://webkit.org/wp-content/uploads/palettes.png\" class=\"hero\"/></p>\n<p>Color fonts provide a way to add richness to your designs without sacrificing any of the many benefits of using plain text. Regardless of how decorative a color font is, the underlying text is always searchable, copy/paste-able, scalable, translatable, and compatible with screen readers.</p>\n<p>WebKit now supports CSS <a href=\"https://drafts.csswg.org/css-fonts-4/#font-palette-values\"><code>@font-palette-values</code></a>. With this at-rule, you can access predefined color palettes provided by the font designer, and you can customize them in order to make the color font a perfect match for the colors in your designs.</p>\n<figure class=\"\">\n<section id=\"one\">\n<p class=\"drop\">ONCE upon a time in the middle of winter, when the flakes of snow were falling like feathers from the clouds, a Queen sat at her palace window, which had an ebony black frame, stitching her husband&#8217;s shirts. While she was thus engaged and looking out at the snow she pricked her finger, and three drops of blood fell upon the snow. Now the red looked so well upon the white that she thought to herself, “Oh, that I had a child as white as this snow, as red as this blood, and as black as the wood of this frame!” Soon afterwards a little daughter came to her, who was as white as snow, and with cheeks as red as blood, and with hair as black as ebony, and from this she was named &#8220;Snow-White.&#8221; And at the same time her mother died.</p>\n</section>\n<section id=\"two\">\n<p class=\"drop\">THIS answer so angered the Queen that she became quite yellow with envy. From that hour, whenever she saw Snow-White, her heart was hardened against her, and she hated the little girl. Her envy and jealousy increased so that she had no rest day or night, and she said to a Huntsman, &#8220;Take the child away into the forest. I will never look upon her again. You must kill her, and bring me her heart and tongue for a token.&#8221; The Huntsman listened and took the maiden away, but when he drew out his knife to kill her, she began to cry, saying, &#8220;Ah, dear Huntsman, give me my life! I will run into the wild forest, and never come home again.&#8221;</p>\n</section>\n<div id=\"tryitout\">You can try out @font-palette-values today in Safari 15.4 or later.</div>\n</figure>\n<p>Color palettes work great in WebKit with the <code>COLRv0</code> font file format, and we are investigating other formats like <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/svg\">SVG</a>.</p>\n<h3>Background on the font above</h3>\n<p>The font in this demo is a <a href=\"https://djr.com/notes/bradley-djr-font-of-the-month\">revival of Bradley</a>, a “fairytale blackletter” originally released in 1895. The typeface came with a special set of <a href=\"https://archive.org/details/specimensofprint00amerrich/page/n325/mode/2up\">ornate Initial caps</a> meant for drop caps (<a href=\"https://www.w3.org/TR/css-inline/#initial-letter-styling\">see also <code>::initial-letter</code></a>) and other titling uses, which David <a href=\"https://djr.com/notes/bradley-initials-font-of-the-month\">digitized this past December</a> for his <a href=\"https://fontofthemonth.club/\">Font of the Month Club</a>, just in time for the holidays.</p>\n<p>Each glyph is made up of a handful of distinct layers (letterform, backdrop, ornate linework, letter outline, and border). Making the layers different-yet-coordinated colors adds depth to the design, taking it beyond what a simple foreground/background can provide. It felt like the perfect use case for a color font with multiple color palettes, and a unique opportunity for a 127-year-old font to play a small part in an emerging font technology.</p>\n<h3>Palettes in CSS</h3>\n<p>Fonts can define one or more of their own color palettes inside the <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/cpal\">CPAL</a> table inside the font file. The palettes are ordered, and so they are identified by index. For example, a font might define color palette #3 that uses blues and greens, but another palette #5 might use reds and oranges. Colors within a palette inside the font are also identified by index &#8211; all palettes contain the same number of colors within themselves.</p>\n<p>These color palettes can be tweaked or overridden in CSS using <code>font-palette-values</code>. An example looks like this:</p>\n<pre><code>@font-palette-values --lilac-blossom {\n    font-family: \"Bradley Initials DJR Web\";\n    base-palette: 7;\n    override-colors: 0 #fff, 1 #F3B0EB;\n}</code></pre>\n<p>This example means “Make a color palette named Lilac Blossom, that, when applied to Bradley Initials DJR Web, is just like the 7th palette in the font, but overrides color #0 in that palette to be white, and color #1 in the palette to be <code>#F3B0EB</code>.” If you don’t want to override any colors, that’s no problem &#8211; just delete the entire override-colors descriptor.</p>\n<p>You can then apply this color palette by simply supplying it to the font-palette property like this:</p>\n<pre><code>font-palette: --lilac-blossom;</code></pre>\n<section id=\"three\">\n<figure><span class=\"drop\">T</span>he <span class=\"drop\">R</span>ound <span class=\"drop\">T</span>able</figure>\n</section>\n<p style=\"font-size: 0px;\">&nbsp;</p>\n<h3>Progressive Enhancement</h3>\n<p>If you&#8217;re using an older version of Safari, or a different browser which doesn&#8217;t understand the <code>font-palette</code> property, it will render the default (<code>0</code>th) color palette in the font. Here&#8217;s what the above example would look like in such a browser:</p>\n<section id=\"threeprogressiveenhancement\">\n<figure><span class=\"drop\">T</span>he <span class=\"drop\">R</span>ound <span class=\"drop\">T</span>able</figure>\n</section>\n<p style=\"font-size: 0px;\">&nbsp;</p>\n<p>If the fallback behavior is undesirable for your particular font, you can detect browsers that understand CSS color palettes in your stylesheet by using the <code>@supports</code> media query, like so:</p>\n<pre><code>@supports (font-palette: --lilac-blossom) {\n    .lilacblossom {\n        font-palette: --lilac-blossom;\n    }\n}\n\n@font-palette-values --lilac-blossom {\n    font-family: \"Bradley Initials DJR Web\";\n    base-palette: 7;\n    override-colors: 0 #fff, 1 #F3B0EB;\n}</code></pre>\n<h3>Dark Mode</h3>\n<p>Not all color palettes are clearly visible on all backgrounds. Without color fonts, the color used to render text was entirely determined by the CSS author, but now that fonts can have color palettes defined inside them, it’s up to CSS authors to pick or create a color palette that is legible on the background it’s being rendered on. This can be particularly tricky when font fallback occurs, or when the user has blocked some fonts from loading.</p>\n<p>Fonts such as Bradley Initials DJR Web have an extra tool for helping with this, though. Fonts <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/cpal#palette-type-array\">can indicate</a> that certain palettes inside them are usable with light backgrounds or usable with dark backgrounds, and these palettes are hooked up to the <code>font-palette</code> property. You don’t even have to use <code>@font-palette-values</code>!</p>\n<p>So, if you want to use a color palette on a dark background, you can simply say <code>font-palette: dark</code>, like this:</p>\n<figure>\n<section id=\"four\">\n<figure>ABCDEFG</figure>\n</section>\n</figure>\n<p>And the same thing for a light background: <code>font-palette: light</code>:</p>\n<figure>\n<section id=\"five\">\n<figure>ABCDEFG</figure>\n</section>\n</figure>\n<p>Because the <code>font-palette</code> property has no effect on non-color fonts, it’s safe to set it in conjunction with the <code>prefers-color-scheme</code> media query, like this:</p>\n<pre><code>@media (prefers-color-scheme: dark) {\n    :root {\n        background: black;\n        color: white;\n        font-palette: dark;\n    }\n}</code></pre>\n<h3>Fallback</h3>\n<p>Because <code>@font-palette-values</code> blocks are scoped to a specific font, you can make multiple of them that share a name. This is really powerful &#8211; it means you can define a single color palette name, and have it applied differently to whatever font happens to be rendered with it. Here’s an example:</p>\n<pre><code>@font-palette-values --lilac-blossom {\n    font-family: \"Bradley Initials DJR Web\";\n    base-palette: 1;\n}\n\n@font-palette-values --lilac-blossom {\n    font-family: \"Megabase\";\n    base-palette: 2;\n}\n\n&lt;div style=\"font-palette: --lilac-blossom;\"&gt;\n    &lt;div style=\"font-family: 'Bradley Initials DJR Web';\"&gt;Pizza is amazing!&lt;/div&gt;\n    &lt;div style=\"font-family: 'Megabase Web';\"&gt;Is there any food better than pizza?&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<p>This will have Bradley Initials DJR Web’s Lilac Blossom palette applied to Bradley Initials DJR Web, and Megabase’s Lilac Blossom palette applied to Megabase. And you only had to specify the font-palette property once!</p>\n<h3>Contextual color</h3>\n<p>In addition to pulling colors from palettes, some color fonts set aside special shapes that are connected to the foreground color of the current element. This makes them extra flexible, but it also means that these shapes operate independently from <code>font-palette</code>. In these cases, you can simply use the <code>color</code> property to change their color, like in this demo using <a href=\"https://djr.com/notes/megabase-font-of-the-month\">Megabase</a>.</p>\n<pre><code>&lt;div style=\"font-family: 'Megabase Web';\"&gt;\n    &lt;div style=\"color: black;\"&gt;They were just pushed into space.&lt;/div&gt;\n    &lt;div style=\"color: blue;\"&gt;As much as I care about you.&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<figure>\n<section id=\"six\">\n<p class=\"u\">They were just pushed into space.</p>\n<p class=\"a\">As much as I care about you.</p>\n</section>\n</figure>\n<h3>Conclusion</h3>\n<p>Of course, with power comes responsibility; just because you can change colors, doesn’t mean you always should. Often the colors in a palette are coordinated to harmonize aesthetically, so it’s good to have a sense of how they are meant to relate to one another. You can look at the font’s predefined color palettes to see how the font designer assigned the roles for each color in the palette, <a href=\"https://webaim.org/resources/contrastchecker/\">and tweak accordingly</a>.</p>\n<p>It is also important to choose colors that contrast strongly against the background in order to <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html\">keep your text readable and your webpage accessible</a>. Colors in the palette that are used to form the base of the letters should typically “pop” against the background, while supporting layers like shadows, outlines, and decorative elements might contrast less in order to keep them from overpowering the letterforms.</p>\n<p>Color fonts are a great improvement over graphic images, because they work by default with screen readers, copy/paste, and find-in-page. Also, they gracefully show fallback text if the font somehow fails to load, and they reflow if the browser window resizes. Not only that, color fonts are more flexible than graphic images, because they can incorporate the foreground color of the element using them into the design of the font.</p>\n<p>Color fonts are not meant to take the place of single-color fonts. But used in moderation, at a big enough size in the right circumstance, they can be the perfect icing on the cake!</p>\n<footer>You can contact Myles C. Maxfield at <a href=\"mailto:mmaxfield@apple.com\">mmaxfield@apple.com</a> or <a href=\"https://twitter.com/Litherum\">@Litherum</a>, and you can contact David Jonathan Ross at <a href=\"mailto:david@djr.com\">david@djr.com</a> or <a href=\"https://twitter.com/djrrb\">@djrrb</a>, and you can find David&#8217;s work at <a href=\"https://djr.com\">djr.com</a>.</footer>",
      "content_text": "\nColor fonts provide a way to add richness to your designs without sacrificing any of the many benefits of using plain text. Regardless of how decorative a color font is, the underlying text is always searchable, copy/paste-able, scalable, translatable, and compatible with screen readers.\nWebKit now supports CSS @font-palette-values. With this at-rule, you can access predefined color palettes provided by the font designer, and you can customize them in order to make the color font a perfect match for the colors in your designs.\n\n\nONCE upon a time in the middle of winter, when the flakes of snow were falling like feathers from the clouds, a Queen sat at her palace window, which had an ebony black frame, stitching her husband’s shirts. While she was thus engaged and looking out at the snow she pricked her finger, and three drops of blood fell upon the snow. Now the red looked so well upon the white that she thought to herself, “Oh, that I had a child as white as this snow, as red as this blood, and as black as the wood of this frame!” Soon afterwards a little daughter came to her, who was as white as snow, and with cheeks as red as blood, and with hair as black as ebony, and from this she was named “Snow-White.” And at the same time her mother died.\n\n\nTHIS answer so angered the Queen that she became quite yellow with envy. From that hour, whenever she saw Snow-White, her heart was hardened against her, and she hated the little girl. Her envy and jealousy increased so that she had no rest day or night, and she said to a Huntsman, “Take the child away into the forest. I will never look upon her again. You must kill her, and bring me her heart and tongue for a token.” The Huntsman listened and took the maiden away, but when he drew out his knife to kill her, she began to cry, saying, “Ah, dear Huntsman, give me my life! I will run into the wild forest, and never come home again.”\n\nYou can try out @font-palette-values today in Safari 15.4 or later.\n\nColor palettes work great in WebKit with the COLRv0 font file format, and we are investigating other formats like SVG.\nBackground on the font above\nThe font in this demo is a revival of Bradley, a “fairytale blackletter” originally released in 1895. The typeface came with a special set of ornate Initial caps meant for drop caps (see also ::initial-letter) and other titling uses, which David digitized this past December for his Font of the Month Club, just in time for the holidays.\nEach glyph is made up of a handful of distinct layers (letterform, backdrop, ornate linework, letter outline, and border). Making the layers different-yet-coordinated colors adds depth to the design, taking it beyond what a simple foreground/background can provide. It felt like the perfect use case for a color font with multiple color palettes, and a unique opportunity for a 127-year-old font to play a small part in an emerging font technology.\nPalettes in CSS\nFonts can define one or more of their own color palettes inside the CPAL table inside the font file. The palettes are ordered, and so they are identified by index. For example, a font might define color palette #3 that uses blues and greens, but another palette #5 might use reds and oranges. Colors within a palette inside the font are also identified by index – all palettes contain the same number of colors within themselves.\nThese color palettes can be tweaked or overridden in CSS using font-palette-values. An example looks like this:\n@font-palette-values --lilac-blossom {\n    font-family: \"Bradley Initials DJR Web\";\n    base-palette: 7;\n    override-colors: 0 #fff, 1 #F3B0EB;\n}\nThis example means “Make a color palette named Lilac Blossom, that, when applied to Bradley Initials DJR Web, is just like the 7th palette in the font, but overrides color #0 in that palette to be white, and color #1 in the palette to be #F3B0EB.” If you don’t want to override any colors, that’s no problem – just delete the entire override-colors descriptor.\nYou can then apply this color palette by simply supplying it to the font-palette property like this:\nfont-palette: --lilac-blossom;\n\nThe Round Table\n\n \nProgressive Enhancement\nIf you’re using an older version of Safari, or a different browser which doesn’t understand the font-palette property, it will render the default (0th) color palette in the font. Here’s what the above example would look like in such a browser:\n\nThe Round Table\n\n \nIf the fallback behavior is undesirable for your particular font, you can detect browsers that understand CSS color palettes in your stylesheet by using the @supports media query, like so:\n@supports (font-palette: --lilac-blossom) {\n    .lilacblossom {\n        font-palette: --lilac-blossom;\n    }\n}\n\n@font-palette-values --lilac-blossom {\n    font-family: \"Bradley Initials DJR Web\";\n    base-palette: 7;\n    override-colors: 0 #fff, 1 #F3B0EB;\n}\nDark Mode\nNot all color palettes are clearly visible on all backgrounds. Without color fonts, the color used to render text was entirely determined by the CSS author, but now that fonts can have color palettes defined inside them, it’s up to CSS authors to pick or create a color palette that is legible on the background it’s being rendered on. This can be particularly tricky when font fallback occurs, or when the user has blocked some fonts from loading.\nFonts such as Bradley Initials DJR Web have an extra tool for helping with this, though. Fonts can indicate that certain palettes inside them are usable with light backgrounds or usable with dark backgrounds, and these palettes are hooked up to the font-palette property. You don’t even have to use @font-palette-values!\nSo, if you want to use a color palette on a dark background, you can simply say font-palette: dark, like this:\n\n\nABCDEFG\n\n\nAnd the same thing for a light background: font-palette: light:\n\n\nABCDEFG\n\n\nBecause the font-palette property has no effect on non-color fonts, it’s safe to set it in conjunction with the prefers-color-scheme media query, like this:\n@media (prefers-color-scheme: dark) {\n    :root {\n        background: black;\n        color: white;\n        font-palette: dark;\n    }\n}\nFallback\nBecause @font-palette-values blocks are scoped to a specific font, you can make multiple of them that share a name. This is really powerful – it means you can define a single color palette name, and have it applied differently to whatever font happens to be rendered with it. Here’s an example:\n@font-palette-values --lilac-blossom {\n    font-family: \"Bradley Initials DJR Web\";\n    base-palette: 1;\n}\n\n@font-palette-values --lilac-blossom {\n    font-family: \"Megabase\";\n    base-palette: 2;\n}\n\n<div style=\"font-palette: --lilac-blossom;\">\n    <div style=\"font-family: 'Bradley Initials DJR Web';\">Pizza is amazing!</div>\n    <div style=\"font-family: 'Megabase Web';\">Is there any food better than pizza?</div>\n</div>\nThis will have Bradley Initials DJR Web’s Lilac Blossom palette applied to Bradley Initials DJR Web, and Megabase’s Lilac Blossom palette applied to Megabase. And you only had to specify the font-palette property once!\nContextual color\nIn addition to pulling colors from palettes, some color fonts set aside special shapes that are connected to the foreground color of the current element. This makes them extra flexible, but it also means that these shapes operate independently from font-palette. In these cases, you can simply use the color property to change their color, like in this demo using Megabase.\n<div style=\"font-family: 'Megabase Web';\">\n    <div style=\"color: black;\">They were just pushed into space.</div>\n    <div style=\"color: blue;\">As much as I care about you.</div>\n</div>\n\n\nThey were just pushed into space.\nAs much as I care about you.\n\n\nConclusion\nOf course, with power comes responsibility; just because you can change colors, doesn’t mean you always should. Often the colors in a palette are coordinated to harmonize aesthetically, so it’s good to have a sense of how they are meant to relate to one another. You can look at the font’s predefined color palettes to see how the font designer assigned the roles for each color in the palette, and tweak accordingly.\nIt is also important to choose colors that contrast strongly against the background in order to keep your text readable and your webpage accessible. Colors in the palette that are used to form the base of the letters should typically “pop” against the background, while supporting layers like shadows, outlines, and decorative elements might contrast less in order to keep them from overpowering the letterforms.\nColor fonts are a great improvement over graphic images, because they work by default with screen readers, copy/paste, and find-in-page. Also, they gracefully show fallback text if the font somehow fails to load, and they reflow if the browser window resizes. Not only that, color fonts are more flexible than graphic images, because they can incorporate the foreground color of the element using them into the design of the font.\nColor fonts are not meant to take the place of single-color fonts. But used in moderation, at a big enough size in the right circumstance, they can be the perfect icing on the cake!\nYou can contact Myles C. Maxfield at mmaxfield@apple.com or @Litherum, and you can contact David Jonathan Ross at david@djr.com or @djrrb, and you can find David’s work at djr.com.",
      "date_published": "2022-05-25T14:00:27.000Z",
      "date_modified": "2022-05-25T13:56:39.000Z"
    },
    {
      "id": "https://webkit.org/?p=12669",
      "url": "https://webkit.org/blog/12669/new-webkit-features-in-safari-15-5/",
      "title": "New WebKit Features in Safari 15.5",
      "summary": "After the feature-packed release of Safari 15.4 two months ago, WebKit’s work for this version of Safari focused predominately on polishing existing features and fixing bugs.",
      "content_html": "<p>After the feature-packed release of <a href=\"https://webkit.org/blog/12445/new-webkit-features-in-safari-15-4/\">Safari 15.4</a> two months ago, WebKit’s work for this version of Safari focused predominately on polishing existing features and fixing bugs.</p>\n<p>Safari 15.5 does contain three new technologies for web developers — support for the <code>inert</code> property in HTML; support for the <code>worker-src</code> Content Security Policy directive; and the new <code>minimumViewportInset</code> and <code>maximumViewportInset</code> APIs for implementing new CSS Viewport Units in WKWebView-based apps.</p>\n<p>Safari 15.5 is available for macOS Monterey 12.4, macOS Big Sur, macOS Catalina, iPadOS 15.5, and iOS 15.5. You can update to Safari 15.5 on macOS Big Sur and macOS Catalina by going to System Preferences → Software Update → More info, and choosing to update Safari.</p>\n<h2>Developer Features</h2>\n<p>Let’s look first at the HTML <code>inert</code> attribute. When set on an element, the attribute makes that element non-interactive by preventing mouse and keyboard focus, clicks, edits or text selection. It also hides the element from assistive technologies. For more information about <code>inert</code>, including a demo showing how inert can make the partially-offscreen content in a carousel visible, but inactive, read <a href=\"https://webkit.org/blog/12578/non-interactive-elements-with-the-inert-attribute/\">Non-interactive Elements with the <code>inert</code> Attribute</a>.</p>\n<p>Next, let’s look at support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/worker-src\"><code>worker-src</code></a> from Content Security Policy Level 3. The <code>worker-src</code> directive provides web developers a way to restrict which URLs are allowed to be sources for worker scripts (Worker, SharedWorker, or ServiceWorker). This can be used to prevent already loaded scripts from loading more scripts in the form of workers, a situation that has potential to be susceptible to malicious attack through using excessive CPU for computation. We also updated Content Security Policy console logging in Web Inspector.</p>\n<p>And last, we’ve added the <code>minimumViewportInset</code> and <code>maximumViewportInset</code> APIs to WKWebView so app developers can add support for all of the new CSS Viewport Units to their browser or other application on iOS, iPadOS and macOS. The <code>minimumViewportInset</code> corresponds to the large measurement, and <code>maximumViewportInset</code> corresponds to the small measurement. The new CSS Viewport Units, which shipped in Safari 15.4, include small (<code>svw</code>, <code>svh</code>, <code>svi</code>, <code>svb</code>, <code>svmin</code>, <code>svmax</code>), large (<code>lvw</code>, <code>lvh</code>, <code>lvi</code>, <code>lvb</code>, <code>lvmin</code>, <code>lvmax</code>), dynamic (<code>dvw</code>, <code>dvh</code>, <code>dvi</code>, <code>dvb</code>, <code>dvmin</code>, <code>dvmax</code>), and logical (<code>vi</code>, <code>vb</code>) units.</p>\n<h2>Fixes and Polish</h2>\n<p>Now, let’s get to the list of bug fixes and feature polish.</p>\n<h3>HTML</h3>\n<ul>\n<li>Fixed SVG tags behind modal dialogs to not be clickable</li>\n<li>Fixed the Dialog element only animating once</li>\n<li>Fixed rendering a USDZ loaded as the main resource</li>\n<li>Fixed uploading “.pages” files to file inputs accepting “.pages” and “.jpeg” files</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Prevented BroadcastChannel from communicating across distinct opaque origins</li>\n<li>Fixed respecting website policies during COOP-based process swap</li>\n<li>Fixed <code>PointerEvent.movementX</code> always 0</li>\n<li>Fixed resolving a fetch promise when a page enters page cache</li>\n<li>Fixed pointer events to perform a hit test only if there is not a pointer capture target override</li>\n<li>Fixed computing the site for cookies when the document is created by <code>window.open</code></li>\n<li>Fixed <code>Element.focus({preventScroll: true})</code> to correctly prevent scrolling on iOS</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Fixed scrolling <code>background-attachement: fixed</code></li>\n<li>Fixed <code>background-clip: text</code> to work with <code>display: flex</code></li>\n<li>Fixed rendering for many <code>position: sticky</code> elements</li>\n<li>Fixed <code>position: sticky</code> elements moving incorrectly while scrolling</li>\n<li>Fixed text contents in <code>&lt;span&gt;</code> with opacity not updating when a sibling element has <code>will-change: transform</code></li>\n<li>Fixed <code>:focus-visible</code> matching on the wrong element when focused via script</li>\n<li>Fixed <code>text-shadow</code> getting clipped</li>\n<li>Fixed behavior of a <code>position: sticky</code> element within <code>contain: paint</code></li>\n<li>Fixed <code>aspect-ratio</code> with percentage widths</li>\n<li>Fixed returning the default computed style for elements without the <code>transition</code> or <code>animation</code> shorthands</li>\n</ul>\n<h3>Authentication</h3>\n<ul>\n<li>Aligned WebAuthn implementation to match specifications to use the default <code>pubKeyCredParams</code> list if the list in <code>makeCredential</code> is empty</li>\n</ul>\n<h3>Content Security Policy</h3>\n<ul>\n<li>Fixed blocking image content in object elements</li>\n<li>Fixed sending violation reports to the document for a detached element</li>\n<li>Improved nonce hiding from the DOM</li>\n<li>Updated Content Security Policy handling of JavaScript URLs</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed key rotation for single key audio in modern EME paired with a native HLS player</li>\n<li>Fixed disabled Control Center spatial control when playing a video in Safari</li>\n<li>Fixed loading a model in QuickLook when passing extra parameters</li>\n<li>Fixed muted video that sometimes becomes paused when taken to fullscreen</li>\n<li>Fixed video playback on iPhone 7</li>\n<li>Fixed video playback for HEVC content encodings that generate many b-frames with a wide sliding window</li>\n<li>Fixed HLS stream currentTime sometimes jumping backwards</li>\n<li>Fixed clicking on the progress bar often pausing a YouTube video</li>\n<li>Fixed blob videos slowing to pause</li>\n<li>Fixed audio echo after the camera us paused or unpaused</li>\n<li>Fixed playback of HTML5 embedded audio with unbounded range requests</li>\n<li>Fixed the video poster disappearing prematurely on play, leaving a transparent video element</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Fixed incorrect label returned by getUserMedia regardless of language selected</li>\n<li>Reduced perceived audio latency</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Fixed text wrapping for windows that exceed a certain width</li>\n<li>Fixed a Korean webfont rendering issue</li>\n<li>Fixed an issue where a transform change sometimes resulted in bad rendering</li>\n<li>Fixed a flash of missing text content with transform-related animations</li>\n<li>Changed to use <code>colgroup</code> for table sizing when it comes after <code>thead</code>, <code>tbody</code>, <code>tfoot</code>, or <code>tr</code> elements</li>\n<li>Fixed two bopomofo tone marks to move to the correct place in vertical text with a particular bopomofo font</li>\n</ul>\n<h3>Apple Pay</h3>\n<ul>\n<li>Fixed the Apple Pay Sheet to return <code>billingContact</code> on iOS</li>\n</ul>\n<h3>WebGL</h3>\n<ul>\n<li>Fixed WebGL rendering when using <code>preserveDrawingBuffer</code> on iOS</li>\n<li>Fixed a number of issues related to multisampling that were breaking a lot of WebGL content</li>\n<li>Fixed handling TypedArray with AllowShared to be accepted</li>\n<li>Fixed WEBGL_multi_draw validation</li>\n</ul>\n<h3>Web Inspector</h3>\n<ul>\n<li>Fixed large message handling from remote devices</li>\n<li>Fixed repeated opening and closing</li>\n</ul>\n<h3>Compatibility</h3>\n<ul>\n<li>Fixed launching Microsoft Teams from Safari</li>\n</ul>\n<h3>SFSafariViewController</h3>\n<ul>\n<li>Fixed a noticeable delay in playback when rotating a full screen YouTube video</li>\n</ul>\n<h3>Safari Extensions</h3>\n<ul>\n<li>Fixed a crash clicking on Safari App Extension toolbar items</li>\n<li>Fixed an issue where <code>SFContentBlockerManager.getStateOfContentBlocker()</code>  could return an incorrect value on iOS</li>\n<li>Added support for <code>optional_host_permissions</code> for Safari Web Extensions</li>\n</ul>\n<h2>Feedback</h2>\n<p>We love hearing from you. Send a tweet to <a href=\"https://twitter.com/webkit\">@webkit</a>, <a href=\"https://twitter.com/jensimmons\">@jensimmons</a> or <a href=\"https://twitter.com/jonathandavis\">@jonathandavis</a> to share your thoughts on this release. If you run into any issues, we welcome your <a href=\"https://feedbackassistant.apple.com/\">feedback</a> on the Safari UI or your <a href=\"https://bugs.webkit.org/\">WebKit bug report</a> about web technology. Filing issues really does make a difference.</p>\n<p>Download the latest <a href=\"https://developer.apple.com/safari/download/\">Safari Technology Preview</a> to stay at the forefront of the web platform and to use the latest Web Inspector features. You can also use the <a href=\"https://webkit.org/status\">WebKit Feature Status</a> page to watch for new information about the web features that interest you the most.</p>\n<h2>And More</h2>\n<p>For more information on what’s in WebKit for Safari 15.5, read the <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-15_5-release-notes\">Safari 15.5 release notes</a>.</p>\n<p>These features were first released in Safari Technology Preview: <a href=\"https://webkit.org/blog/12255/release-notes-for-safari-technology-preview-140/\">140</a>, <a href=\"https://webkit.org/blog/12434/release-notes-for-safari-technology-preview-141/\">141</a>, <a href=\"https://webkit.org/blog/12522/release-notes-for-safari-technology-preview-142/\">142</a>, <a href=\"https://webkit.org/blog/12563/release-notes-for-safari-technology-preview-143/\">143</a>, <a href=\"https://webkit.org/blog/12621/release-notes-for-safari-technology-preview-144/\">144</a>, and <a href=\"https://webkit.org/blog/12629/release-notes-for-safari-technology-preview-145/\">145</a>.</p>",
      "content_text": "After the feature-packed release of Safari 15.4 two months ago, WebKit’s work for this version of Safari focused predominately on polishing existing features and fixing bugs.\nSafari 15.5 does contain three new technologies for web developers — support for the inert property in HTML; support for the worker-src Content Security Policy directive; and the new minimumViewportInset and maximumViewportInset APIs for implementing new CSS Viewport Units in WKWebView-based apps.\nSafari 15.5 is available for macOS Monterey 12.4, macOS Big Sur, macOS Catalina, iPadOS 15.5, and iOS 15.5. You can update to Safari 15.5 on macOS Big Sur and macOS Catalina by going to System Preferences → Software Update → More info, and choosing to update Safari.\nDeveloper Features\nLet’s look first at the HTML inert attribute. When set on an element, the attribute makes that element non-interactive by preventing mouse and keyboard focus, clicks, edits or text selection. It also hides the element from assistive technologies. For more information about inert, including a demo showing how inert can make the partially-offscreen content in a carousel visible, but inactive, read Non-interactive Elements with the inert Attribute.\nNext, let’s look at support for worker-src from Content Security Policy Level 3. The worker-src directive provides web developers a way to restrict which URLs are allowed to be sources for worker scripts (Worker, SharedWorker, or ServiceWorker). This can be used to prevent already loaded scripts from loading more scripts in the form of workers, a situation that has potential to be susceptible to malicious attack through using excessive CPU for computation. We also updated Content Security Policy console logging in Web Inspector.\nAnd last, we’ve added the minimumViewportInset and maximumViewportInset APIs to WKWebView so app developers can add support for all of the new CSS Viewport Units to their browser or other application on iOS, iPadOS and macOS. The minimumViewportInset corresponds to the large measurement, and maximumViewportInset corresponds to the small measurement. The new CSS Viewport Units, which shipped in Safari 15.4, include small (svw, svh, svi, svb, svmin, svmax), large (lvw, lvh, lvi, lvb, lvmin, lvmax), dynamic (dvw, dvh, dvi, dvb, dvmin, dvmax), and logical (vi, vb) units.\nFixes and Polish\nNow, let’s get to the list of bug fixes and feature polish.\nHTML\n\nFixed SVG tags behind modal dialogs to not be clickable\nFixed the Dialog element only animating once\nFixed rendering a USDZ loaded as the main resource\nFixed uploading “.pages” files to file inputs accepting “.pages” and “.jpeg” files\n\nWeb API\n\nPrevented BroadcastChannel from communicating across distinct opaque origins\nFixed respecting website policies during COOP-based process swap\nFixed PointerEvent.movementX always 0\nFixed resolving a fetch promise when a page enters page cache\nFixed pointer events to perform a hit test only if there is not a pointer capture target override\nFixed computing the site for cookies when the document is created by window.open\nFixed Element.focus({preventScroll: true}) to correctly prevent scrolling on iOS\n\nCSS\n\nFixed scrolling background-attachement: fixed\nFixed background-clip: text to work with display: flex\nFixed rendering for many position: sticky elements\nFixed position: sticky elements moving incorrectly while scrolling\nFixed text contents in <span> with opacity not updating when a sibling element has will-change: transform\nFixed :focus-visible matching on the wrong element when focused via script\nFixed text-shadow getting clipped\nFixed behavior of a position: sticky element within contain: paint\nFixed aspect-ratio with percentage widths\nFixed returning the default computed style for elements without the transition or animation shorthands\n\nAuthentication\n\nAligned WebAuthn implementation to match specifications to use the default pubKeyCredParams list if the list in makeCredential is empty\n\nContent Security Policy\n\nFixed blocking image content in object elements\nFixed sending violation reports to the document for a detached element\nImproved nonce hiding from the DOM\nUpdated Content Security Policy handling of JavaScript URLs\n\nMedia\n\nFixed key rotation for single key audio in modern EME paired with a native HLS player\nFixed disabled Control Center spatial control when playing a video in Safari\nFixed loading a model in QuickLook when passing extra parameters\nFixed muted video that sometimes becomes paused when taken to fullscreen\nFixed video playback on iPhone 7\nFixed video playback for HEVC content encodings that generate many b-frames with a wide sliding window\nFixed HLS stream currentTime sometimes jumping backwards\nFixed clicking on the progress bar often pausing a YouTube video\nFixed blob videos slowing to pause\nFixed audio echo after the camera us paused or unpaused\nFixed playback of HTML5 embedded audio with unbounded range requests\nFixed the video poster disappearing prematurely on play, leaving a transparent video element\n\nWebRTC\n\nFixed incorrect label returned by getUserMedia regardless of language selected\nReduced perceived audio latency\n\nRendering\n\nFixed text wrapping for windows that exceed a certain width\nFixed a Korean webfont rendering issue\nFixed an issue where a transform change sometimes resulted in bad rendering\nFixed a flash of missing text content with transform-related animations\nChanged to use colgroup for table sizing when it comes after thead, tbody, tfoot, or tr elements\nFixed two bopomofo tone marks to move to the correct place in vertical text with a particular bopomofo font\n\nApple Pay\n\nFixed the Apple Pay Sheet to return billingContact on iOS\n\nWebGL\n\nFixed WebGL rendering when using preserveDrawingBuffer on iOS\nFixed a number of issues related to multisampling that were breaking a lot of WebGL content\nFixed handling TypedArray with AllowShared to be accepted\nFixed WEBGL_multi_draw validation\n\nWeb Inspector\n\nFixed large message handling from remote devices\nFixed repeated opening and closing\n\nCompatibility\n\nFixed launching Microsoft Teams from Safari\n\nSFSafariViewController\n\nFixed a noticeable delay in playback when rotating a full screen YouTube video\n\nSafari Extensions\n\nFixed a crash clicking on Safari App Extension toolbar items\nFixed an issue where SFContentBlockerManager.getStateOfContentBlocker()  could return an incorrect value on iOS\nAdded support for optional_host_permissions for Safari Web Extensions\n\nFeedback\nWe love hearing from you. Send a tweet to @webkit, @jensimmons or @jonathandavis to share your thoughts on this release. If you run into any issues, we welcome your feedback on the Safari UI or your WebKit bug report about web technology. Filing issues really does make a difference.\nDownload the latest Safari Technology Preview to stay at the forefront of the web platform and to use the latest Web Inspector features. You can also use the WebKit Feature Status page to watch for new information about the web features that interest you the most.\nAnd More\nFor more information on what’s in WebKit for Safari 15.5, read the Safari 15.5 release notes.\nThese features were first released in Safari Technology Preview: 140, 141, 142, 143, 144, and 145.",
      "date_published": "2022-05-16T17:30:06.000Z",
      "date_modified": "2022-05-16T17:46:24.000Z"
    },
    {
      "id": "https://webkit.org/?p=12629",
      "url": "https://webkit.org/blog/12629/release-notes-for-safari-technology-preview-145/",
      "title": "Release Notes for Safari Technology Preview 145",
      "summary": "Safari Technology Preview Release 145 is now available for download for macOS Big Sur and of macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 145 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=291957&amp;rev=293023&amp;limit=1066\">291957-293023</a>. This release of Safari Technology Preview does not support versions of macOS Monterey prior to 12.3. Please update to macOS Monterey 12.3 or later to continue using Safari Technology Preview.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Sources tab\n<ul>\n<li>Allowed Response Local Overrides to map to a file on disk (<a href=\"https://trac.webkit.org/changeset/292084/webkit/\">r292084</a>, <a href=\"https://trac.webkit.org/changeset/292120/webkit/\">r292120</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>:has() pseudo-class</h3>\n<ul>\n<li>Added invalidation support for the pseudo-classes <code>:autofill</code> (<a href=\"https://trac.webkit.org/changeset/292531/webkit/\">r292531</a>); <code>:placeholder-shown</code> (<a href=\"https://trac.webkit.org/changeset/292523/webkit/\">r292523</a>); <code>:indeterminate</code>,  <code>:read-only</code>, <code>:read-write</code>, <code>:required</code> and <code>:optional</code> (<a href=\"https://trac.webkit.org/changeset/292466/webkit/\">r292466</a>, <a href=\"http://commits.webkit.org/r292582\">r292582</a>)</li>\n</ul>\n<h3>Container Queries and Containment</h3>\n<ul>\n<li>Added CSSOM support (<a href=\"https://trac.webkit.org/changeset/292045/webkit/\">r292045</a>)</li>\n<li>Added support for <code>contain: inline-size</code> (<a href=\"https://trac.webkit.org/changeset/292394/webkit/\">r292394</a>, <a href=\"https://trac.webkit.org/changeset/292416/webkit/\">r292416</a>, <a href=\"https://trac.webkit.org/changeset/292465/webkit/\">r292465</a>)</li>\n<li>Added support for containment to disable the special handling of the HTML body element for overflow viewport propagation (<a href=\"https://trac.webkit.org/changeset/292127/webkit/\">r292127</a>, <a href=\"https://trac.webkit.org/changeset/292157/webkit/\">r292157</a>)</li>\n<li>Corrected container selection for pseudo-elements (<a href=\"https://trac.webkit.org/changeset/292819/webkit/\">r292819</a>)</li>\n<li>Corrected container selection for <code>::slotted</code> and <code>::part</code> rules (<a href=\"https://trac.webkit.org/changeset/292635/webkit/\">r292635</a>)</li>\n<li>Disallowed invalid query range syntax (<a href=\"https://trac.webkit.org/changeset/292816/webkit/\">r292816</a>)</li>\n<li>Updated container shorthand order (<a href=\"https://trac.webkit.org/changeset/292759/webkit/\">r292759</a>)</li>\n</ul>\n<h3>CSS Grid</h3>\n<ul>\n<li>Added support for transitions and animations on <code>grid-template-columns</code> and <code>grid-template-rows</code> (<a href=\"https://trac.webkit.org/changeset/292432/webkit/\">r292432</a>)</li>\n<li>Fixed grid items that establish an independent formatting context to not be subgrids (<a href=\"https://trac.webkit.org/changeset/292524/webkit/\">r292524</a>)</li>\n<li>Implemented support for aligning baselines through subgrids (<a href=\"https://trac.webkit.org/changeset/292973/webkit/\">r292973</a>)</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li><code>calc()</code> functions\n<ul>\n<li>Added NaN propagation for <code>min</code>, <code>max</code>, <code>clamp</code>, and <code>hypot</code> (<a href=\"https://trac.webkit.org/changeset/292732/webkit/\">r292732</a>)</li>\n<li>Serialized top level <code>min</code>, <code>max</code>, <code>hypot</code> as <code>calc()</code> (<a href=\"https://trac.webkit.org/changeset/292893/webkit/\">r292893</a>)</li>\n</ul>\n</li>\n<li><code>resize</code> property\n<ul>\n<li>Added support for <code>block</code>/<code>inline</code> CSS values (<a href=\"https://trac.webkit.org/changeset/292222/webkit/\">r292222</a>)</li>\n<li>Corrected minimum size computation to allow resizing below initial size (<a href=\"https://trac.webkit.org/changeset/292559/webkit/\">r292559</a>)</li>\n</ul>\n</li>\n<li>Added support for rendering <code>url()</code>, CSS basic shapes other than <code>path()</code>, and <code>coord-box</code> for <code>offset-path</code> (<a href=\"https://trac.webkit.org/changeset/292382/webkit/\">r292382</a>)</li>\n<li>Fixed <code>scrollIntoView</code> with <code>scroll-snap-type</code> on root element (<a href=\"https://trac.webkit.org/changeset/292812/webkit/\">r292812</a>)</li>\n<li>Fixed <code>drop-shadow</code> filter to work correctly in tiled backing layer (<a href=\"https://trac.webkit.org/changeset/292059/webkit/\">r292059</a>)</li>\n<li>Fixed issue with <code>position: sticky</code> within <code>contain: paint</code> (<a href=\"https://trac.webkit.org/changeset/292155/webkit/\">r292155</a>)</li>\n<li>Implemented units for CSS Typed OM (<a href=\"https://trac.webkit.org/changeset/292150/webkit/\">r292150</a>)</li>\n</ul>\n<h3>Dialog Element</h3>\n<ul>\n<li>Dialog element now adapts to dark mode by default (<a href=\"https://trac.webkit.org/changeset/292029/webkit/\">r292029</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Allowed Wasm import from a JS Worker module behind the feature flag (<a href=\"https://trac.webkit.org/changeset/292799/webkit/\">r292799</a>)</li>\n<li>Changed ShadowRealm global object to have a mutable prototype (<a href=\"https://trac.webkit.org/changeset/292895/webkit/\">r292895</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed full screen video progress bar flickering after dragging it (<a href=\"https://trac.webkit.org/changeset/292572/webkit/\">r292572</a>)</li>\n<li>Fixed MSE video not drawing onto canvas (<a href=\"https://trac.webkit.org/changeset/292811/webkit/\">r292811</a>)</li>\n<li>Fixed muted video that sometimes becomes paused when entering fullscreen (<a href=\"https://trac.webkit.org/changeset/292049/webkit/\">r292049</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Added support for all CTAP transports and remove gesture requirement for virtual authenticators (<a href=\"https://trac.webkit.org/changeset/292593/webkit/\">r292593</a>)</li>\n<li>Implemented <code>getTransports()</code> and <code>getAuthenticatorData()</code> (<a href=\"https://trac.webkit.org/changeset/292913/webkit/\">r292913</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Removed the 1ms minimum for <code>setTimeout</code> (<a href=\"https://trac.webkit.org/changeset/291998/webkit/\">r291998</a>)</li>\n</ul>\n<h3>Content Security Policy</h3>\n<ul>\n<li>Improved compatibility of source matching (<a href=\"https://trac.webkit.org/changeset/292266/webkit/\">r292266</a>)</li>\n<li>Fixed WASM failing to execute after <code>window.open</code> (<a href=\"https://trac.webkit.org/changeset/292229/webkit/\">r292229</a>)</li>\n</ul>\n<h3>Security</h3>\n<ul>\n<li>Fixed incorrect CORP and COEP check in 304 responses (<a href=\"https://trac.webkit.org/changeset/292595/webkit/\">r292595</a>)</li>\n</ul>\n<h3>Service Workers</h3>\n<ul>\n<li>Added support for <code>ServiceWorkerClients.openWindow</code> (<a href=\"https://trac.webkit.org/changeset/291979/webkit/\">r291979</a>)</li>\n<li>Implemented <code>ServiceWorkerWindowClient.navigate</code> (<a href=\"https://trac.webkit.org/changeset/292459/webkit/\">r292459</a>)</li>\n<li>Exposed workers as service worker clients and implemented registration matching for dedicated workers (<a href=\"https://trac.webkit.org/changeset/292861/webkit/\">r292861</a>)</li>\n<li>Fixed ensuring the document gets controlled by its matching service worker registration during a COOP-based process swap (<a href=\"https://trac.webkit.org/changeset/292468/webkit/\">r292468</a>)</li>\n<li>Fixed <code>Service-Worker-Navigation-Preload</code> header not being sent when Navigation Preload is enabled (<a href=\"https://trac.webkit.org/changeset/292296/webkit/\">r292296</a>)</li>\n<li>Fixed <code>ServiceWorker.postMessage()</code> not working from inside iframes (<a href=\"https://trac.webkit.org/changeset/292905/webkit/\">r292905</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Reduced perceived audio latency on streaming via WebRTC (<a href=\"https://trac.webkit.org/changeset/292563/webkit/\">r292563</a>)</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 145 is now available for download for macOS Big Sur and of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 291957-293023. This release of Safari Technology Preview does not support versions of macOS Monterey prior to 12.3. Please update to macOS Monterey 12.3 or later to continue using Safari Technology Preview.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nSources tab\n\nAllowed Response Local Overrides to map to a file on disk (r292084, r292120)\n\n\n\n:has() pseudo-class\n\nAdded invalidation support for the pseudo-classes :autofill (r292531); :placeholder-shown (r292523); :indeterminate,  :read-only, :read-write, :required and :optional (r292466, r292582)\n\nContainer Queries and Containment\n\nAdded CSSOM support (r292045)\nAdded support for contain: inline-size (r292394, r292416, r292465)\nAdded support for containment to disable the special handling of the HTML body element for overflow viewport propagation (r292127, r292157)\nCorrected container selection for pseudo-elements (r292819)\nCorrected container selection for ::slotted and ::part rules (r292635)\nDisallowed invalid query range syntax (r292816)\nUpdated container shorthand order (r292759)\n\nCSS Grid\n\nAdded support for transitions and animations on grid-template-columns and grid-template-rows (r292432)\nFixed grid items that establish an independent formatting context to not be subgrids (r292524)\nImplemented support for aligning baselines through subgrids (r292973)\n\nCSS\n\ncalc() functions\n\nAdded NaN propagation for min, max, clamp, and hypot (r292732)\nSerialized top level min, max, hypot as calc() (r292893)\n\n\nresize property\n\nAdded support for block/inline CSS values (r292222)\nCorrected minimum size computation to allow resizing below initial size (r292559)\n\n\nAdded support for rendering url(), CSS basic shapes other than path(), and coord-box for offset-path (r292382)\nFixed scrollIntoView with scroll-snap-type on root element (r292812)\nFixed drop-shadow filter to work correctly in tiled backing layer (r292059)\nFixed issue with position: sticky within contain: paint (r292155)\nImplemented units for CSS Typed OM (r292150)\n\nDialog Element\n\nDialog element now adapts to dark mode by default (r292029)\n\nJavaScript\n\nAllowed Wasm import from a JS Worker module behind the feature flag (r292799)\nChanged ShadowRealm global object to have a mutable prototype (r292895)\n\nMedia\n\nFixed full screen video progress bar flickering after dragging it (r292572)\nFixed MSE video not drawing onto canvas (r292811)\nFixed muted video that sometimes becomes paused when entering fullscreen (r292049)\n\nWebAuthn\n\nAdded support for all CTAP transports and remove gesture requirement for virtual authenticators (r292593)\nImplemented getTransports() and getAuthenticatorData() (r292913)\n\nWeb API\n\nRemoved the 1ms minimum for setTimeout (r291998)\n\nContent Security Policy\n\nImproved compatibility of source matching (r292266)\nFixed WASM failing to execute after window.open (r292229)\n\nSecurity\n\nFixed incorrect CORP and COEP check in 304 responses (r292595)\n\nService Workers\n\nAdded support for ServiceWorkerClients.openWindow (r291979)\nImplemented ServiceWorkerWindowClient.navigate (r292459)\nExposed workers as service worker clients and implemented registration matching for dedicated workers (r292861)\nFixed ensuring the document gets controlled by its matching service worker registration during a COOP-based process swap (r292468)\nFixed Service-Worker-Navigation-Preload header not being sent when Navigation Preload is enabled (r292296)\nFixed ServiceWorker.postMessage() not working from inside iframes (r292905)\n\nWebRTC\n\nReduced perceived audio latency on streaming via WebRTC (r292563)\n",
      "date_published": "2022-05-11T09:24:44.000Z",
      "date_modified": "2022-05-16T17:50:42.000Z"
    },
    {
      "id": "https://webkit.org/?p=12621",
      "url": "https://webkit.org/blog/12621/release-notes-for-safari-technology-preview-144/",
      "title": "Release Notes for Safari Technology Preview 144",
      "summary": "Safari Technology Preview Release 144 is now available for download for macOS Big Sur and of macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 144 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=291506&amp;rev=291957&amp;limit=451\">291506-291957</a>. This release of Safari Technology Preview does not support versions of macOS Monterey prior to 12.3. Please update to macOS Monterey 12.3 or later to continue using Safari Technology Preview.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Fixed page reloading and showing an empty inspector on pages with container queries (<a href=\"https://trac.webkit.org/changeset/291824/webkit/\">r291824</a>)</li>\n<li>Elements Tab\n<ul>\n<li>Fixed <code>$0</code> not being displayed for the selected node after switching to another tab (<a href=\"https://trac.webkit.org/changeset/291729/webkit/\">r291729</a>)</li>\n<li>Fixed unwanted extra dash when autocompleting CSS variable names in the Styles panel (<a href=\"https://trac.webkit.org/changeset/291740/webkit/\">r291740</a>)</li>\n<li>Fixed inline swatch popovers not being hidden when the inline swatch is removed (<a href=\"https://trac.webkit.org/changeset/291628/webkit/\">r291628</a>)</li>\n</ul>\n</li>\n<li>Console Tab\n<ul>\n<li>Fixed <code>console.screenshot</code> to no longer have extra transparent pixels at the bottom of viewport screenshots (<a href=\"https://trac.webkit.org/changeset/291519/webkit\">r291519</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Added Typed OM support for container units (<a href=\"https://trac.webkit.org/changeset/291524/webkit/\">r291524</a>)</li>\n<li>Fixed CSS cascade regarding logical properties (<a href=\"https://trac.webkit.org/changeset/291546/webkit/\">r291546</a>)</li>\n<li>Fixed incorrect handling of NaN inside <code>calc()</code> for top-level calculation (<a href=\"https://trac.webkit.org/changeset/291911/webkit/\">r291911</a>)</li>\n<li>Let <code>revert-layer</code> roll back to presentational hints (<a href=\"https://trac.webkit.org/changeset/291594/webkit/\">r291594</a>)</li>\n<li>Implemented <code>border-image</code> serialization (<a href=\"https://trac.webkit.org/changeset/291537/webkit/\">r291537</a>)</li>\n<li>Preserved <code>repeat()</code> notation when serializing grid-templates (<a href=\"https://trac.webkit.org/changeset/291956/webkit/\">r291956</a>)</li>\n<li>Reduce memory usage for large, sparse grids (<a href=\"https://trac.webkit.org/changeset/291952/webkit/\">r291952</a>)</li>\n<li>Handled finite value with infinite step in <code>round()</code> for <code>calc()</code> (<a href=\"https://trac.webkit.org/changeset/291841/webkit/\">r291841</a>)</li>\n<li>Fixed incorrect resolution of percentage grid-gaps within subgrids (<a href=\"https://trac.webkit.org/changeset/291953/webkit/\">r291953</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Enabled support for mutable timelines by default (<a href=\"https://trac.webkit.org/changeset/291868/webkit/\">r291868</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Changed <code>Date.parse</code> to stop returning numbers with fractional part (<a href=\"https://trac.webkit.org/changeset/291603/webkit/\">r291603</a>)</li>\n<li>Fixed class field initializer with extra parentheses (<a href=\"https://trac.webkit.org/changeset/291577/webkit/\">r291577</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Added <code>getAssertion</code> support for virtual HID authenticators (<a href=\"https://trac.webkit.org/changeset/291624/webkit/\">r291624</a>)</li>\n<li>Specified correct <code>ASCPublicKeyCredentialKind</code> in <code>configureAssertionOptions</code> (<a href=\"https://trac.webkit.org/changeset/291761/webkit/\">r291761</a>)</li>\n<li>Updated to pass along timeout to ASA and ignore timeout for conditional mediation requests (<a href=\"https://trac.webkit.org/changeset/291625/webkit/\">r291625</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added support for focused and visible ServiceWorkerWindowClient states (<a href=\"https://trac.webkit.org/changeset/291888/webkit/\">r291888</a>)</li>\n<li>Added a check for whether the origin can access storage in the Storage API (<a href=\"https://trac.webkit.org/changeset/291726/webkit/\">r291726</a>)</li>\n<li>Disabled custom storage paths for IndexedDB and LocalStorage by default (<a href=\"https://trac.webkit.org/changeset/291909/webkit/\">r291909</a>)</li>\n<li>Fixed <code>PointerEvent.movementX</code> to not always be 0 (<a href=\"https://trac.webkit.org/changeset/291886/webkit/\">r291886</a>)</li>\n<li>Fixed Context2D <code>drawImage(img, x, y, w, h)</code> to not throw <code>IndexSizeError</code> when width or height are 0 (<a href=\"https://trac.webkit.org/changeset/291748/webkit/\">r291748</a>)</li>\n<li>Fixed fetching a Blob URL with an unbounded Range header to correctly generate a <code>Content-Range</code> response header (<a href=\"https://trac.webkit.org/changeset/291622/webkit/\">r291622</a>)</li>\n<li>Implemented <code>CSSNumericValue.mul</code>, <code>CSSNumericValue.div</code>, <code>CSSNumericValue.add</code>, <code>CSSNumericValue.sub</code>, <code>CSSNumericValue.max</code>, and <code>CSSNumericValue.min</code> (<a href=\"https://trac.webkit.org/changeset/291597/webkit/\">r291597</a>)</li>\n<li>Implemented <code>ServiceWorkerWindowClient.focus</code> (<a href=\"https://trac.webkit.org/changeset/291938/webkit/\">r291938</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Included initial accessibility support for <code>display: contents</code> (<a href=\"https://trac.webkit.org/changeset/291570/webkit/\">r291570</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed a bug where clicking anywhere on the progress bar pauses some MSE video implementations (<a href=\"https://trac.webkit.org/changeset/291629/webkit/\">r291629</a>)</li>\n<li>Fixed video playback for HEVC-encoded video with a lot of b-frames and a wide sliding window (<a href=\"https://trac.webkit.org/changeset/291813/webkit/\">r291813</a>)</li>\n</ul>\n<h3>Security Policy</h3>\n<ul>\n<li>Fixed website policies not being respected when doing COOP-based process swap (<a href=\"https://trac.webkit.org/changeset/291606/webkit/\">r291606</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Fixed a crash clicking on Safari App Extension toolbar items</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 144 is now available for download for macOS Big Sur and of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 291506-291957. This release of Safari Technology Preview does not support versions of macOS Monterey prior to 12.3. Please update to macOS Monterey 12.3 or later to continue using Safari Technology Preview.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nFixed page reloading and showing an empty inspector on pages with container queries (r291824)\nElements Tab\n\nFixed $0 not being displayed for the selected node after switching to another tab (r291729)\nFixed unwanted extra dash when autocompleting CSS variable names in the Styles panel (r291740)\nFixed inline swatch popovers not being hidden when the inline swatch is removed (r291628)\n\n\nConsole Tab\n\nFixed console.screenshot to no longer have extra transparent pixels at the bottom of viewport screenshots (r291519)\n\n\n\nCSS\n\nAdded Typed OM support for container units (r291524)\nFixed CSS cascade regarding logical properties (r291546)\nFixed incorrect handling of NaN inside calc() for top-level calculation (r291911)\nLet revert-layer roll back to presentational hints (r291594)\nImplemented border-image serialization (r291537)\nPreserved repeat() notation when serializing grid-templates (r291956)\nReduce memory usage for large, sparse grids (r291952)\nHandled finite value with infinite step in round() for calc() (r291841)\nFixed incorrect resolution of percentage grid-gaps within subgrids (r291953)\n\nWeb Animations\n\nEnabled support for mutable timelines by default (r291868)\n\nJavaScript\n\nChanged Date.parse to stop returning numbers with fractional part (r291603)\nFixed class field initializer with extra parentheses (r291577)\n\nWebAuthn\n\nAdded getAssertion support for virtual HID authenticators (r291624)\nSpecified correct ASCPublicKeyCredentialKind in configureAssertionOptions (r291761)\nUpdated to pass along timeout to ASA and ignore timeout for conditional mediation requests (r291625)\n\nWeb API\n\nAdded support for focused and visible ServiceWorkerWindowClient states (r291888)\nAdded a check for whether the origin can access storage in the Storage API (r291726)\nDisabled custom storage paths for IndexedDB and LocalStorage by default (r291909)\nFixed PointerEvent.movementX to not always be 0 (r291886)\nFixed Context2D drawImage(img, x, y, w, h) to not throw IndexSizeError when width or height are 0 (r291748)\nFixed fetching a Blob URL with an unbounded Range header to correctly generate a Content-Range response header (r291622)\nImplemented CSSNumericValue.mul, CSSNumericValue.div, CSSNumericValue.add, CSSNumericValue.sub, CSSNumericValue.max, and CSSNumericValue.min (r291597)\nImplemented ServiceWorkerWindowClient.focus (r291938)\n\nAccessibility\n\nIncluded initial accessibility support for display: contents (r291570)\n\nMedia\n\nFixed a bug where clicking anywhere on the progress bar pauses some MSE video implementations (r291629)\nFixed video playback for HEVC-encoded video with a lot of b-frames and a wide sliding window (r291813)\n\nSecurity Policy\n\nFixed website policies not being respected when doing COOP-based process swap (r291606)\n\nWeb Extensions\n\nFixed a crash clicking on Safari App Extension toolbar items\n",
      "date_published": "2022-05-02T20:19:11.000Z",
      "date_modified": "2022-05-02T21:28:51.000Z"
    }
  ],
  "description": "Open Source Web Browser Engine",
  "home_page_url": "https://webkit.org"
}