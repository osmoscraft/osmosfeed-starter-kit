{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Go Make Things",
  "feed_url": "https://gomakethings.com/feed/index.xml",
  "items": [
    {
      "id": "https://gomakethings.com/how-to-start-an-ordered-list-with-a-number-other-than-one/",
      "url": "https://gomakethings.com/how-to-start-an-ordered-list-with-a-number-other-than-one/",
      "title": "How to start an ordered list with a number other than one",
      "summary": "This week, Marcus Herrmann reminded me of one of my favorite HTML tricks.\nIf you have an ordered list (ol) and want it to start with a number other than one, you can add the start attribute with the desired first number as its value.\n<ol start=\"4\"> <li>Merlin</li> <li>Ursula</li> <li>Radgast</li> </ol> The example above would start with the number four. Here‚Äôs a demo.\nThis is particularly useful if you have a list split across a few columns and want to keep them consistently numbered.",
      "content_html": "<p>This week, <a href=\"https://twitter.com/_marcusherrmann/status/1539918792964579328\">Marcus Herrmann reminded me of one of my favorite HTML tricks</a>.</p>\n\n<p>If you have an ordered list (<code>ol</code>) and want it to start with a number other than one, you can add the <code>start</code> attribute with the desired first number as its value.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">ol</span> <span class=\"na\">start</span><span class=\"o\">=</span><span class=\"s\">&#34;4&#34;</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Merlin<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Ursula<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Radgast<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ol</span><span class=\"p\">&gt;</span></code></pre></div>\n<p>The example above would start with the number four. <a href=\"https://codepen.io/cferdinandi/pen/KKQOgmP\">Here&rsquo;s a demo.</a></p>\n\n<p>This is particularly useful if you have a list split across a few columns and want to keep them consistently numbered. Here, the first <code>.column</code> would run from one to three, and the second would go from four to six.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;row&#34;</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;column&#34;</span><span class=\"p\">&gt;</span>\n\t\t<span class=\"p\">&lt;</span><span class=\"nt\">ol</span><span class=\"p\">&gt;</span>\n\t\t\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Neville<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n\t\t\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Hermione<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n\t\t\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Cedric<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n\t\t<span class=\"p\">&lt;/</span><span class=\"nt\">ol</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;column&#34;</span><span class=\"p\">&gt;</span>\n\t\t<span class=\"p\">&lt;</span><span class=\"nt\">ol</span> <span class=\"na\">start</span><span class=\"o\">=</span><span class=\"s\">&#34;4&#34;</span><span class=\"p\">&gt;</span>\n\t\t\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Merlin<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n\t\t\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Ursula<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n\t\t\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Radgast<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n\t\t<span class=\"p\">&lt;/</span><span class=\"nt\">ol</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span></code></pre></div><p>‚è∞ü¶â <em><strong>Early Bird Sale!</strong> Today through Monday, get 40% off <a href=\"https://vanillajsacademy.com\">registration in the next session of the Vanilla JS Academy</a>.</em></p>",
      "content_text": "This week, Marcus Herrmann reminded me of one of my favorite HTML tricks.\n\nIf you have an ordered list (ol) and want it to start with a number other than one, you can add the start attribute with the desired first number as its value.\n<ol start=\"4\">\n\t<li>Merlin</li>\n\t<li>Ursula</li>\n\t<li>Radgast</li>\n</ol>\nThe example above would start with the number four. Here‚Äôs a demo.\n\nThis is particularly useful if you have a list split across a few columns and want to keep them consistently numbered. Here, the first .column would run from one to three, and the second would go from four to six.\n<div class=\"row\">\n\t<div class=\"column\">\n\t\t<ol>\n\t\t\t<li>Neville</li>\n\t\t\t<li>Hermione</li>\n\t\t\t<li>Cedric</li>\n\t\t</ol>\n\t</div>\n\t<div class=\"column\">\n\t\t<ol start=\"4\">\n\t\t\t<li>Merlin</li>\n\t\t\t<li>Ursula</li>\n\t\t\t<li>Radgast</li>\n\t\t</ol>\n\t</div>\n</div>‚è∞ü¶â Early Bird Sale! Today through Monday, get 40% off registration in the next session of the Vanilla JS Academy.",
      "date_published": "2022-06-24T14:30:00.000Z",
      "date_modified": "2022-06-24T14:30:00.000Z"
    },
    {
      "id": "https://gomakethings.com/how-i-create-my-javascript-books-and-courses/",
      "url": "https://gomakethings.com/how-i-create-my-javascript-books-and-courses/",
      "title": "How I create my JavaScript books and courses",
      "summary": "Over the last two weeks, I release a new course on accessible components and a new course on native web components, and completely redid my course on writing JavaScript libraries.\nToday, I wanted to talk about how I create my courses and ebooks.\nThis article is focused on the actual content and finished books/videos. If you want to learn more about how I sell and deliver them, I wrote about the tech behind my learning platform a few years ago.",
      "content_html": "<p>Over the last two weeks, I release <a href=\"https://vanillajsguides.com/accessible-components/\">a new course on accessible components</a> and <a href=\"https://vanillajsguides.com/web-components/\">a new course on native web components</a>, and <a href=\"https://vanillajsguides.com/writing-js-libraries/\">completely redid my course on writing JavaScript libraries</a>.</p>\n\n<p>Today, I wanted to talk about how I create my courses and ebooks.</p>\n\n<p>This article is focused on the actual content and finished books/videos. If you want to learn more about how I sell and deliver them, I wrote about <a href=\"https://gomakethings.com/the-tech-behind-my-javascript-education-platform/\">the tech behind my learning platform</a> a few years ago.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-process\">The process</h2>\n\n<p>Every pocket guide I create follows the same process&hellip;</p>\n\n<ol>\n<li>Learn how to do a thing</li>\n<li>Outline the stuff you need to know: the basics, some advanced topics, and weird gotchas or edge cases that most tutorials miss</li>\n<li>Write the ebook</li>\n<li>Create source code from the ebook</li>\n<li>Use the source code to create the video course</li>\n<li>Create the book cover and course image</li>\n<li>Convert the ebook into PDF, EPUB, MOBI, and HTML formats</li>\n<li>Upload the videos to a streaming service and get them captioned</li>\n<li>Sell the course!</li>\n</ol>\n\n<p>Let&rsquo;s look at each step in more detail.</p>\n\n<h2 id=\"learn-how-to-do-a-thing\">Learn how to do a thing</h2>\n\n<p><a href=\"https://vanillajsguides.com\">My pocket guides</a> are short and focused. Every one starts off as a narrow topic that I&rsquo;m personally interested in or learning about.</p>\n\n<p>My code base was getting unruly, so <a href=\"https://vanillajsguides.com/es-modules/\">I learned about ES modules</a>. I wanted to improve the resilience and offline capabilities of my sites, so <a href=\"https://vanillajsguides.com/service-workers/\">I learned about Service Workers</a>.</p>\n\n<p>The process for me always starts by Duck Duck Going a whole bunch, reading a bunch of tutorials, and trying to implement what I&rsquo;ve read into a simple working project.</p>\n\n<p>There&rsquo;s almost always a bunch of assumed knowledge in the tutorials, or edge cases they don&rsquo;t mention, or gotchas or weird bugs that pop up that weren&rsquo;t discussed. This is the kind of stuff that makes self-taught learning so hard, and one of the reasons I started creating courses in the first place.</p>\n\n<p>After I&rsquo;ve built a few small projects, I have a pretty good grasp on how things work. But I&rsquo;m also close enough to &ldquo;being a new learner&rdquo; that the pain points and &ldquo;oh, I wish someone had told me that!&rdquo; stuff is still really fresh in my mind.</p>\n\n<p>This is the perfect time to start actually writing the course.</p>\n\n<h2 id=\"outline-the-stuff-that-you-need-to-know\">Outline the stuff that you need to know</h2>\n\n<p>I find most tutorials on the web fall into one of two categories:</p>\n\n<ol>\n<li>Hand wave over some essential knowledge and jump right into the interesting stuff.</li>\n<li>Go into way too much detail about every aspect of a topic.</li>\n</ol>\n\n<p>Both approaches suck, for different reasons.</p>\n\n<p>The <em>hand-wavy tutorials</em> are impossible for beginners, because you can never get started. There&rsquo;s all this stuff you need to know first that&rsquo;s not mentioned or covered.</p>\n\n<p>The <em>too much detail</em> tutorials can be confusing and overwhelming. They often cover stuff that&rsquo;s not likely to come up, or not important at first (but good to know later). They&rsquo;re hard for beginners, too, mostly because they overload you with information.</p>\n\n<p>I like to break my outline into a few common parts:</p>\n\n<ol>\n<li>The essential stuff you need to start doing the thing.</li>\n<li>Advanced topics. After you&rsquo;ve got the essentials down, <em>now</em> lets talk about those advanced features, edge-cases, and so on.</li>\n<li>A project. I&rsquo;ve found that for most folks, learning doesn&rsquo;t really stick until you apply it. I include a project in every course, because it dramatically improves learning retention.</li>\n</ol>\n\n<h2 id=\"writing-the-ebook\">Writing the ebook</h2>\n\n<p>I start with the ebook, because it&rsquo;s easier for me to write and edit and clarify my thoughts in text first.</p>\n\n<p>I write my ebooks as a collection of markdown files. Each chapter gets its own file.</p>\n\n<p>Markdown works really well for me because my books include a lot of code snippets, and being able to create highlighted code blocks is much easier in markdown than with other tools I&rsquo;ve tried (like MS Word or Apple Pages).</p>\n\n<p>There&rsquo;s no real trick here.</p>\n\n<p>I tend to write like I talk, and I talk very directly. That seems to work well for a lot of people. I&rsquo;ve also got years of experience writing about technical topics, so I&rsquo;ve become really efficient at it.</p>\n\n<h2 id=\"creating-source-code-from-the-ebook\">Creating source code from the ebook</h2>\n\n<p>Next, I got through every chapter of the ebook and create source code from it.</p>\n\n<p>Every chapter gets its own directory, and every section or snippet gets its own HTML file with the code able to be run live in a browser.</p>\n\n<p>When I&rsquo;m done, the entire directory gets put up on GitHub for easy access and version control. Yes, that means anyone can view it. I don&rsquo;t think it&rsquo;s nearly as useful without the explanations around it, so I&rsquo;m not particularly worried.</p>\n\n<h2 id=\"using-the-source-code-to-create-the-video-course\">Using the source code to create the video course</h2>\n\n<p>The video course versions of my pocket guides are me talking about and explaining the source code.</p>\n\n<p>I copy/paste the text from the ebook into an email and pull it up on my phone as rough notes about the topics I&rsquo;m supposed to follow. I used to try to follow a very precise script, but found students like it better when I&rsquo;m a bit more casual in my videos.</p>\n\n<p>So now, I pull up the source code and record myself explaining how it works. <a href=\"https://www.telestream.net/screenflow/overview.htm\">I use Screenflow for this.</a></p>\n\n<p>Occasionally, I&rsquo;ll have a section that doesn&rsquo;t have any code.</p>\n\n<p>When that&rsquo;s the case, I grab <a href=\"https://unsplash.com/\">a few relevant images from Unsplash</a> or put one or two big, relevant words on a slide in Keynote. Then I use Screenflow to record myself giving a short presentation.</p>\n\n<p>My videos are typically two to five minutes in length.</p>\n\n<h2 id=\"creating-the-book-cover-and-course-image\">Creating the book cover and course image</h2>\n\n<p>I use the same cover for every book&hellip; almost.</p>\n\n<p>Every pocket guide cover has the same exact layout. I use a different background color based on the bundle the book is part of (blue for beginner, greenish for advanced, and purple for expert).</p>\n\n<p>I also include a nautical creature or artifact of some kind on the cover. I try to make it somewhat relevant, when I can. For example, the <a href=\"https://vanillajsguides.com/accessible-components/\">accessible components guide</a> has a starfish, which looks a little bit like the &ldquo;arms out person&rdquo; icon often used as the A11Y logo.</p>\n\n<p><a href=\"https://thenounproject.com/\">I get the icons from the Noun Project.</a> I purchase the one-time, royalty-free license.</p>\n\n<p>Even though everyone&rsquo;s moved on to Figma or whatever, I still <a href=\"https://www.sketch.com/\">design my covers in Sketch</a>. I also use Sketch and the cover image to create the graphic that appears at the top of the sales page for the course on the website.</p>\n\n<h2 id=\"converting-the-ebook-into-pdf-epub-mobi-and-html-formats\">Converting the ebook into PDF, EPUB, MOBI, and HTML formats</h2>\n\n<p>So, I&rsquo;ve got a bunch of markdown files, and I&rsquo;ve got a cover image. How do I make them into an actual ebook?</p>\n\n<p>I built my own command line tool using <a href=\"http://pandoc.org/\">Pandoc</a>, <a href=\"http://wkhtmltopdf.org/\">wkhtmltopdf</a>, and <a href=\"https://calibre-ebook.com/\">Calibre</a>. <a href=\"https://github.com/cferdinandi/ebook-boilerplate\">I have an open sourced version of it available here</a> (it&rsquo;s probably in need of some dependency updates).</p>\n\n<p>The version I use is customized a bit to reuse certain files (like my &ldquo;about the author&rdquo; page) across all of the books, and can batch compile multiple books at once.</p>\n\n<h2 id=\"uploading-the-videos-to-a-streaming-service-and-get-them-captioned\">Uploading the videos to a streaming service and get them captioned</h2>\n\n<p><a href=\"https://vimeo.com/professionals\">I host my videos on Vimeo Pro.</a></p>\n\n<p>Vimeo handles bandwidth aware streaming far better than I ever could. They let me customize the appearance of the embedded video player. They let me control where my videos can be embedded. They support closed captions. They support downloading.</p>\n\n<p>Vimeo is one of the easiest no-brainer business expenses I have.</p>\n\n<p>They have a cheaper &ldquo;Vimeo Plus&rdquo; plan with many of the same features, but it doesn&rsquo;t support business users. If you&rsquo;re selling paid content or creating business content, you need at least a Pro subscription.</p>\n\n<p><a href=\"https://www.rev.com/\">I use Rev for my captions.</a></p>\n\n<p>They&rsquo;re affordable, have a quick turnaround, and are relatively accurate. Best of all for me, they have Vimeo API integration.</p>\n\n<p>This means I can log in to Rev and just select the videos I want captioned from a list. Rev automatically uploads and activates the captions to the videos for me. I used to have to manually upload each file to the matching video, and that sucked.</p>\n\n<h2 id=\"selling-the-course\">Selling the course!</h2>\n\n<p>Honestly, for me, the marketing aspect of an education business is far harder than the course creation.</p>\n\n<p>I spend a lot of my time writing articles like this, answering questions on Twitter, chatting with students, and appearing on podcasts. I don&rsquo;t &ldquo;buy ads.&rdquo; I think that&rsquo;s a waste of money.</p>\n\n<p>Most of my sales come from people who subscribe to my newsletter, like what I have to say, and eventually buy a course or ten.</p>\n<p>‚è∞ü¶â <em><strong>Early Bird Sale!</strong> Today through Monday, get 40% off <a href=\"https://vanillajsacademy.com\">registration in the next session of the Vanilla JS Academy</a>.</em></p>",
      "content_text": "Over the last two weeks, I release a new course on accessible components and a new course on native web components, and completely redid my course on writing JavaScript libraries.\n\nToday, I wanted to talk about how I create my courses and ebooks.\n\nThis article is focused on the actual content and finished books/videos. If you want to learn more about how I sell and deliver them, I wrote about the tech behind my learning platform a few years ago.\n\nLet‚Äôs dig in!\n\nThe process\n\nEvery pocket guide I create follows the same process‚Ä¶\n\n\nLearn how to do a thing\nOutline the stuff you need to know: the basics, some advanced topics, and weird gotchas or edge cases that most tutorials miss\nWrite the ebook\nCreate source code from the ebook\nUse the source code to create the video course\nCreate the book cover and course image\nConvert the ebook into PDF, EPUB, MOBI, and HTML formats\nUpload the videos to a streaming service and get them captioned\nSell the course!\n\n\nLet‚Äôs look at each step in more detail.\n\nLearn how to do a thing\n\nMy pocket guides are short and focused. Every one starts off as a narrow topic that I‚Äôm personally interested in or learning about.\n\nMy code base was getting unruly, so I learned about ES modules. I wanted to improve the resilience and offline capabilities of my sites, so I learned about Service Workers.\n\nThe process for me always starts by Duck Duck Going a whole bunch, reading a bunch of tutorials, and trying to implement what I‚Äôve read into a simple working project.\n\nThere‚Äôs almost always a bunch of assumed knowledge in the tutorials, or edge cases they don‚Äôt mention, or gotchas or weird bugs that pop up that weren‚Äôt discussed. This is the kind of stuff that makes self-taught learning so hard, and one of the reasons I started creating courses in the first place.\n\nAfter I‚Äôve built a few small projects, I have a pretty good grasp on how things work. But I‚Äôm also close enough to ‚Äúbeing a new learner‚Äù that the pain points and ‚Äúoh, I wish someone had told me that!‚Äù stuff is still really fresh in my mind.\n\nThis is the perfect time to start actually writing the course.\n\nOutline the stuff that you need to know\n\nI find most tutorials on the web fall into one of two categories:\n\n\nHand wave over some essential knowledge and jump right into the interesting stuff.\nGo into way too much detail about every aspect of a topic.\n\n\nBoth approaches suck, for different reasons.\n\nThe hand-wavy tutorials are impossible for beginners, because you can never get started. There‚Äôs all this stuff you need to know first that‚Äôs not mentioned or covered.\n\nThe too much detail tutorials can be confusing and overwhelming. They often cover stuff that‚Äôs not likely to come up, or not important at first (but good to know later). They‚Äôre hard for beginners, too, mostly because they overload you with information.\n\nI like to break my outline into a few common parts:\n\n\nThe essential stuff you need to start doing the thing.\nAdvanced topics. After you‚Äôve got the essentials down, now lets talk about those advanced features, edge-cases, and so on.\nA project. I‚Äôve found that for most folks, learning doesn‚Äôt really stick until you apply it. I include a project in every course, because it dramatically improves learning retention.\n\n\nWriting the ebook\n\nI start with the ebook, because it‚Äôs easier for me to write and edit and clarify my thoughts in text first.\n\nI write my ebooks as a collection of markdown files. Each chapter gets its own file.\n\nMarkdown works really well for me because my books include a lot of code snippets, and being able to create highlighted code blocks is much easier in markdown than with other tools I‚Äôve tried (like MS Word or Apple Pages).\n\nThere‚Äôs no real trick here.\n\nI tend to write like I talk, and I talk very directly. That seems to work well for a lot of people. I‚Äôve also got years of experience writing about technical topics, so I‚Äôve become really efficient at it.\n\nCreating source code from the ebook\n\nNext, I got through every chapter of the ebook and create source code from it.\n\nEvery chapter gets its own directory, and every section or snippet gets its own HTML file with the code able to be run live in a browser.\n\nWhen I‚Äôm done, the entire directory gets put up on GitHub for easy access and version control. Yes, that means anyone can view it. I don‚Äôt think it‚Äôs nearly as useful without the explanations around it, so I‚Äôm not particularly worried.\n\nUsing the source code to create the video course\n\nThe video course versions of my pocket guides are me talking about and explaining the source code.\n\nI copy/paste the text from the ebook into an email and pull it up on my phone as rough notes about the topics I‚Äôm supposed to follow. I used to try to follow a very precise script, but found students like it better when I‚Äôm a bit more casual in my videos.\n\nSo now, I pull up the source code and record myself explaining how it works. I use Screenflow for this.\n\nOccasionally, I‚Äôll have a section that doesn‚Äôt have any code.\n\nWhen that‚Äôs the case, I grab a few relevant images from Unsplash or put one or two big, relevant words on a slide in Keynote. Then I use Screenflow to record myself giving a short presentation.\n\nMy videos are typically two to five minutes in length.\n\nCreating the book cover and course image\n\nI use the same cover for every book‚Ä¶ almost.\n\nEvery pocket guide cover has the same exact layout. I use a different background color based on the bundle the book is part of (blue for beginner, greenish for advanced, and purple for expert).\n\nI also include a nautical creature or artifact of some kind on the cover. I try to make it somewhat relevant, when I can. For example, the accessible components guide has a starfish, which looks a little bit like the ‚Äúarms out person‚Äù icon often used as the A11Y logo.\n\nI get the icons from the Noun Project. I purchase the one-time, royalty-free license.\n\nEven though everyone‚Äôs moved on to Figma or whatever, I still design my covers in Sketch. I also use Sketch and the cover image to create the graphic that appears at the top of the sales page for the course on the website.\n\nConverting the ebook into PDF, EPUB, MOBI, and HTML formats\n\nSo, I‚Äôve got a bunch of markdown files, and I‚Äôve got a cover image. How do I make them into an actual ebook?\n\nI built my own command line tool using Pandoc, wkhtmltopdf, and Calibre. I have an open sourced version of it available here (it‚Äôs probably in need of some dependency updates).\n\nThe version I use is customized a bit to reuse certain files (like my ‚Äúabout the author‚Äù page) across all of the books, and can batch compile multiple books at once.\n\nUploading the videos to a streaming service and get them captioned\n\nI host my videos on Vimeo Pro.\n\nVimeo handles bandwidth aware streaming far better than I ever could. They let me customize the appearance of the embedded video player. They let me control where my videos can be embedded. They support closed captions. They support downloading.\n\nVimeo is one of the easiest no-brainer business expenses I have.\n\nThey have a cheaper ‚ÄúVimeo Plus‚Äù plan with many of the same features, but it doesn‚Äôt support business users. If you‚Äôre selling paid content or creating business content, you need at least a Pro subscription.\n\nI use Rev for my captions.\n\nThey‚Äôre affordable, have a quick turnaround, and are relatively accurate. Best of all for me, they have Vimeo API integration.\n\nThis means I can log in to Rev and just select the videos I want captioned from a list. Rev automatically uploads and activates the captions to the videos for me. I used to have to manually upload each file to the matching video, and that sucked.\n\nSelling the course!\n\nHonestly, for me, the marketing aspect of an education business is far harder than the course creation.\n\nI spend a lot of my time writing articles like this, answering questions on Twitter, chatting with students, and appearing on podcasts. I don‚Äôt ‚Äúbuy ads.‚Äù I think that‚Äôs a waste of money.\n\nMost of my sales come from people who subscribe to my newsletter, like what I have to say, and eventually buy a course or ten.\n‚è∞ü¶â Early Bird Sale! Today through Monday, get 40% off registration in the next session of the Vanilla JS Academy.",
      "date_published": "2022-06-23T14:30:00.000Z",
      "date_modified": "2022-06-23T14:30:00.000Z"
    },
    {
      "id": "https://gomakethings.com/inclusive-design-and-post-it-notes/",
      "url": "https://gomakethings.com/inclusive-design-and-post-it-notes/",
      "title": "Inclusive design and post-it notes",
      "summary": "In my last real job before I started teaching JavaScript full time, the company I worked for sold API management software.\nCustomers would get access to a white-label CMS they could use to document their APIs, register developers, and manage access to different endpoints.\nMy job was to make that CMS look like their rest of their brand.\nImagine something like WordPress or Squarespace, but with way fewer DIY hooks. I‚Äôd add their logo and brand colors and typeface, and create a homepage they were happy with.",
      "content_html": "<p>In my last real job before I started teaching JavaScript full time, the company I worked for sold API management software.</p>\n\n<p>Customers would get access to a white-label CMS they could use to document their APIs, register developers, and manage access to different endpoints.</p>\n\n<p><strong>My job was to make that CMS look like their rest of their brand.</strong></p>\n\n<p>Imagine something like WordPress or Squarespace, but with way fewer DIY hooks. I&rsquo;d add their logo and brand colors and typeface, and create a homepage they were happy with.</p>\n\n<p><strong>But one time, we had a customer who <em>insisted</em> on using a black background with white text and red links.</strong></p>\n\n<p>If you&rsquo;ve ever seen this combination, the links are hard to read for people with normal vision, and create real problems with people with colorblindness and other vision issues.</p>\n\n<p>I pointed this out to them.</p>\n\n<blockquote>\n<p>We don&rsquo;t care. Our CEO prefers dark backgrounds.</p>\n</blockquote>\n\n<p>I pulled up their CEO&rsquo;s own person website, and showed them that it in fact used a white background, not dark. &ldquo;It doesn&rsquo;t seem like he minds all that much.&rdquo;</p>\n\n<blockquote>\n<p>We don&rsquo;t care. Just do the dark background.</p>\n</blockquote>\n\n<p>I pulled in data about lawsuits related to accessibility issues under the Americans with Disabilities Act (ADA).</p>\n\n<blockquote>\n<p>Just do it for now and we&rsquo;ll fix it later. We just need the CEO to sign off on it.</p>\n</blockquote>\n\n<p>I ended up fighting with my boss at the time about it (<em>he was an exceedingly kind person, so it wasn&rsquo;t much of a fight</em>).</p>\n\n<p>He was very much a &ldquo;just do what the customer asks&rdquo; type customer-oriented person. I was viewing it as an ethical and professional obligation. As a professional web developer, I&rsquo;m obligated to build things that are inclusive.</p>\n\n<p>A construction company can&rsquo;t ignore the fire code just because a CEO doesn&rsquo;t like the look of fire alarms. Why is what we do any different?</p>\n\n<p>I ultimately lost, and we shipped a dark and inaccessible background with a promise it would be fixed later. It never was.</p>\n\n<p><strong>I wish I&rsquo;d had <a href=\"https://twitter.com/JuliannaRowsell/status/1538666270316548103\">this gem from Julianna Roswell</a> in my back pocket at the time&hellip;</strong></p>\n\n<blockquote>\n<p>Okay, just so we‚Äôre clear let‚Äôs write down who your willing to exclude with that decision.</p>\n\n<p>I‚Äôve been using this approach to accessibility and inclusive design. I ask stakeholders to put it down in writing even if it‚Äôs on a post-it note which individual, group or community they are willing to exclude based on a decision they are making. I found it has a profound effect.</p>\n</blockquote>\n\n<p>There&rsquo;s something powerful about making people put in words exactly who they&rsquo;re willing to say &ldquo;fuck off&rdquo; to.</p>\n\n<p>I&rsquo;ll be holding on to this trick for the next time I run into an issue like this.</p>\n<p>‚è∞ü¶â <em><strong>Early Bird Sale!</strong> Today through Monday, get 40% off <a href=\"https://vanillajsacademy.com\">registration in the next session of the Vanilla JS Academy</a>.</em></p>",
      "content_text": "In my last real job before I started teaching JavaScript full time, the company I worked for sold API management software.\n\nCustomers would get access to a white-label CMS they could use to document their APIs, register developers, and manage access to different endpoints.\n\nMy job was to make that CMS look like their rest of their brand.\n\nImagine something like WordPress or Squarespace, but with way fewer DIY hooks. I‚Äôd add their logo and brand colors and typeface, and create a homepage they were happy with.\n\nBut one time, we had a customer who insisted on using a black background with white text and red links.\n\nIf you‚Äôve ever seen this combination, the links are hard to read for people with normal vision, and create real problems with people with colorblindness and other vision issues.\n\nI pointed this out to them.\n\n\nWe don‚Äôt care. Our CEO prefers dark backgrounds.\n\n\nI pulled up their CEO‚Äôs own person website, and showed them that it in fact used a white background, not dark. ‚ÄúIt doesn‚Äôt seem like he minds all that much.‚Äù\n\n\nWe don‚Äôt care. Just do the dark background.\n\n\nI pulled in data about lawsuits related to accessibility issues under the Americans with Disabilities Act (ADA).\n\n\nJust do it for now and we‚Äôll fix it later. We just need the CEO to sign off on it.\n\n\nI ended up fighting with my boss at the time about it (he was an exceedingly kind person, so it wasn‚Äôt much of a fight).\n\nHe was very much a ‚Äújust do what the customer asks‚Äù type customer-oriented person. I was viewing it as an ethical and professional obligation. As a professional web developer, I‚Äôm obligated to build things that are inclusive.\n\nA construction company can‚Äôt ignore the fire code just because a CEO doesn‚Äôt like the look of fire alarms. Why is what we do any different?\n\nI ultimately lost, and we shipped a dark and inaccessible background with a promise it would be fixed later. It never was.\n\nI wish I‚Äôd had this gem from Julianna Roswell in my back pocket at the time‚Ä¶\n\n\nOkay, just so we‚Äôre clear let‚Äôs write down who your willing to exclude with that decision.\n\nI‚Äôve been using this approach to accessibility and inclusive design. I ask stakeholders to put it down in writing even if it‚Äôs on a post-it note which individual, group or community they are willing to exclude based on a decision they are making. I found it has a profound effect.\n\n\nThere‚Äôs something powerful about making people put in words exactly who they‚Äôre willing to say ‚Äúfuck off‚Äù to.\n\nI‚Äôll be holding on to this trick for the next time I run into an issue like this.\n‚è∞ü¶â Early Bird Sale! Today through Monday, get 40% off registration in the next session of the Vanilla JS Academy.",
      "date_published": "2022-06-22T14:30:00.000Z",
      "date_modified": "2022-06-22T14:30:00.000Z"
    },
    {
      "id": "https://gomakethings.com/pirates-projects-and-the-best-damn-javascript-workshop-on-the-interweb/",
      "url": "https://gomakethings.com/pirates-projects-and-the-best-damn-javascript-workshop-on-the-interweb/",
      "title": "Pirates, projects, and the best damn JavaScript workshop on the interweb",
      "summary": "One of the hardest things about learning how to code is being able to actually put all of your learning together to build a thing.\nYou can memorize JavaScript methods and browser API and understand the fundamentals, but building a project from scratch is hard.\nSo, a few years ago, I put together the Vanilla JS Academy, an online JavaScript workshop.\nA new session starts on July 18, and enrollment opens up on Monday.",
      "content_html": "<p>One of the hardest things about learning how to code is being able to actually put all of your learning together to <em>build a thing</em>.</p>\n\n<p>You can memorize JavaScript methods and browser API and understand the fundamentals, but building a project from scratch is hard.</p>\n\n<p><strong>So, a few years ago, I put together <a href=\"https://vanillajsacademy.com\">the Vanilla JS Academy, an online JavaScript workshop</a>.</strong></p>\n\n<p>A new session starts on July 18, and enrollment opens up on Monday. A lot&rsquo;s changed with the program over the last year, and today, I wanted to tell you about it.</p>\n\n<h2 id=\"how-it-works\">How it works</h2>\n\n<p>Over the course of the 6-week workshop, you&rsquo;ll get access to over 70 lessons and work on 18 projects.</p>\n\n<ul>\n<li><strong>Every other day, you get a project to work on,</strong> 1-3 short lessons that provide some background, and a template to help you get started.</li>\n<li><strong>On the in-between days,</strong> I share my approach to the project and some of the common challenges and ‚Äúgotchas‚Äù that students often run into.</li>\n</ul>\n\n<p>If you get stuck, there‚Äôs a private Slack channel exclusively for students. I hold live video office hours every two weeks, where you can ask me questions in real time, share code, and work through bigger challenges.</p>\n\n<h2 id=\"two-different-workshops\">Two different workshops</h2>\n\n<p>When Academy started, it was just a single workshop. Today, there are two different programs.</p>\n\n<ol>\n<li><strong><a href=\"https://vanillajsacademy.com/essentials/\">Vanilla JS Essentials.</a></strong> Learn the fundamentals of DOM manipulation and injection, working with APIs and asynchronous JavaScript, managing data with arrays and objects, and saving state with browser storage.</li>\n<li><strong><a href=\"https://vanillajsacademy.com/advanced/\">Structure &amp; Scale.</a></strong> Learn how to structure and organize your code as your projects grow and scale. Dig into concepts like utility libraries, object-oriented programing, JavaScript classes, web components, ES modules, and service workers.</li>\n</ol>\n\n<p>The workshops run concurrently, and are designed to be taken one at a time.</p>\n\n<p>I&rsquo;ve had students sign up for both at the same time and it never works out well. The stuff you do in <em>Structure &amp; Scale</em> assumes you&rsquo;ve already have the skills you&rsquo;d learn in <em>Essentials</em>, and the volume of work is just too high to take both together.</p>\n\n<h2 id=\"structure-scale-has-been-completely-redesigned\"><em>Structure &amp; Scale</em> has been completely redesigned</h2>\n\n<p>The <em>Structure &amp; Scale</em> workshop is relatively new.</p>\n\n<p>Based on feedback from past participants, I completely redesigned the program for the upcoming session. It has new projects, new lessons, and a stronger focus on how to actually manage code bases as they get bigger.</p>\n\n<p>This session is <em>very</em> pirate themed. You&rsquo;ll build&hellip;</p>\n\n<ul>\n<li>A JS library for rolling dice of different sizes</li>\n<li>A <em>Treasure Chest</em> library for managing all of your loot</li>\n<li>A web component for adding digital dice to a UI with just an HTML element</li>\n<li><em>Seven Seas</em>, an offline-ready travel app for pirates</li>\n</ul>\n\n<p>You&rsquo;ll also learn&hellip;</p>\n\n<ul>\n<li>How to more easily write libraries with JS classes</li>\n<li>How to modularize a growing code base</li>\n<li>How to add hooks other developers can use to extend the functionality of your code</li>\n<li>How to improve performance and reliability with Service Workers</li>\n<li>How to use build tools to bundle your code</li>\n</ul>\n\n<p>If you&rsquo;re growing into a more senior role (or looking to make the jump), this is an awesome program to level-up your skills!</p>\n\n<h2 id=\"people-seem-to-like-it\">People seem to like it</h2>\n\n<p>Here&rsquo;s some of the nice things students have said about the program&hellip;</p>\n\n<div class=\"margin-bottom\"><div class=\"row\">\n\t<figure class=\"grid-third\">\n\t\t<img class=\"img-center margin-bottom-small img-circle\" height=\"150\" width=\"150\" src=\"https://cdn.gomakethings.com/testimonials/laura-kalbag.jpg\">\n\t</figure>\n\t<blockquote class=\"grid-two-thirds\">\n\t\tMaking myself a little web tool and using a whole range of stuff that Chris Ferdinandi‚Äôs Vanilla JS Academy taught me.<br><br>I struggled with JavaScript for a decade so I really would recommend it for anyone who needs a big friendly confidence-booster.<cite>- <a href=\"https://twitter.com/LauraKalbag/status/1293946967702282240\">Laura Kalbag</a></cite></blockquote>\n</div></div>\n<div class=\"margin-bottom\"><div class=\"row\">\n\t<figure class=\"grid-third\">\n\t\t<img class=\"img-center margin-bottom-small img-circle\" height=\"150\" width=\"150\" src=\"https://cdn.gomakethings.com/testimonials/ben-rudolph.jpg\">\n\t</figure>\n\t<blockquote class=\"grid-two-thirds\">\n\t\tTired of tutorials? Want to really dig in and work with other developers on how to become a vanilla JS badass? I can't tell you how much I've learned from Chris Ferdinandi and his Vanilla JS Academy.<cite>- <a href=\"https://twitter.com/PoorOldRu/status/1058378836646125569\">Ben Rudolph</a></cite></blockquote>\n</div></div>\n<div class=\"margin-bottom\"><div class=\"row\">\n\t<figure class=\"grid-third\">\n\t\t<img class=\"img-center margin-bottom-small img-circle\" height=\"150\" width=\"150\" src=\"https://cdn.gomakethings.com/testimonials/leticia-oneill.jpg\">\n\t</figure>\n\t<blockquote class=\"grid-two-thirds\">\n\t\tI was confident that I'd get something valuable from the Academy. The only only hesitation I felt was from knowing how many false starts I had with JS in the past and questioning my own commitment.<br><br>With Academy, something finally clicked in regards to both my ability to understand and write JavaScript.<br><br>I now feel pretty confident in reading other's scripts and figuring out what's going on. That's in large part due to your clear bite-sized lessons and the active discussions in Slack that quickly surfaced questions and issues that I was also experiencing. Seeing how the same problem was solved by so many others was also helpful in letting go of the pressure to get things right and shift my focus on getting things to work and adjusting later as needed.<br><br>I really liked how the lessons were broken up into quickly consumable chunks. I loved having a clean, unopinionated project file to start from that I could wreak design havoc on. :)<br><br>The Slack community was priceless.<br><br>I've taken other online classes that include a slack community and never found them to be quite as welcoming and my involvement felt much more transactional. In this community, I enjoyed seeing everyone's dedication and investment in each other. It was welcoming, inclusive, helpful, and encouraging. That made a huge difference.<cite>- <a href=\"https://twitter.com/leti_oneill\">Leticia O&#39;Neill</a></cite></blockquote>\n</div></div>\n<div class=\"margin-bottom\"><div class=\"row\">\n\t<figure class=\"grid-third\">\n\t\t<img class=\"img-center margin-bottom-small img-circle\" height=\"150\" width=\"150\" src=\"https://cdn.gomakethings.com/testimonials/walter-jenkins.jpg\">\n\t</figure>\n\t<blockquote class=\"grid-two-thirds\">\n\t\tBest investment and course I have taken. If you want a bite sized course that will hold you accountable take this course. I have reduced the amount I Google and use Stackexchange by 50% and actually feel like I understand what I am coding.<cite>- <a href=\"https://twitter.com/AvidDabbler/status/1200499438759895046\">Walter Jenkins</a></cite></blockquote>\n</div></div>\n<div class=\"margin-bottom\"><div class=\"row\">\n\t<figure class=\"grid-third\">\n\t\t<img class=\"img-center margin-bottom-small img-circle\" height=\"150\" width=\"150\" src=\"https://cdn.gomakethings.com/testimonials/maria-blair.jpg\">\n\t</figure>\n\t<blockquote class=\"grid-two-thirds\">\n\t\tI'm not a beginner in JavaScript but I'm really loving the Academy because I still learn new things and best practices. I think knowing best practices distinguishes a mid-level dev from a senior web dev.<cite>- <a href=\"https://www.linkedin.com/in/mariaklachkoblair/\">Maria Blair</a></cite></blockquote>\n</div></div>\n\n<h2 id=\"how-can-you-sign-up\">How can you sign up?</h2>\n\n<p><strong><a href=\"https://vanillajsacademy.com\">Registration opens up on Monday, June 27.</a></strong></p>\n\n<p>The first week of registration, I run an Early Bird Sale, with 40-percent off registration. If you&rsquo;re thinking about joining, next week is definitely the week to do it.</p>\n<p>‚è∞ü¶â <em><strong>Early Bird Sale!</strong> Today through Monday, get 40% off <a href=\"https://vanillajsacademy.com\">registration in the next session of the Vanilla JS Academy</a>.</em></p>",
      "content_text": "One of the hardest things about learning how to code is being able to actually put all of your learning together to build a thing.\n\nYou can memorize JavaScript methods and browser API and understand the fundamentals, but building a project from scratch is hard.\n\nSo, a few years ago, I put together the Vanilla JS Academy, an online JavaScript workshop.\n\nA new session starts on July 18, and enrollment opens up on Monday. A lot‚Äôs changed with the program over the last year, and today, I wanted to tell you about it.\n\nHow it works\n\nOver the course of the 6-week workshop, you‚Äôll get access to over 70 lessons and work on 18 projects.\n\n\nEvery other day, you get a project to work on, 1-3 short lessons that provide some background, and a template to help you get started.\nOn the in-between days, I share my approach to the project and some of the common challenges and ‚Äúgotchas‚Äù that students often run into.\n\n\nIf you get stuck, there‚Äôs a private Slack channel exclusively for students. I hold live video office hours every two weeks, where you can ask me questions in real time, share code, and work through bigger challenges.\n\nTwo different workshops\n\nWhen Academy started, it was just a single workshop. Today, there are two different programs.\n\n\nVanilla JS Essentials. Learn the fundamentals of DOM manipulation and injection, working with APIs and asynchronous JavaScript, managing data with arrays and objects, and saving state with browser storage.\nStructure & Scale. Learn how to structure and organize your code as your projects grow and scale. Dig into concepts like utility libraries, object-oriented programing, JavaScript classes, web components, ES modules, and service workers.\n\n\nThe workshops run concurrently, and are designed to be taken one at a time.\n\nI‚Äôve had students sign up for both at the same time and it never works out well. The stuff you do in Structure & Scale assumes you‚Äôve already have the skills you‚Äôd learn in Essentials, and the volume of work is just too high to take both together.\n\nStructure & Scale has been completely redesigned\n\nThe Structure & Scale workshop is relatively new.\n\nBased on feedback from past participants, I completely redesigned the program for the upcoming session. It has new projects, new lessons, and a stronger focus on how to actually manage code bases as they get bigger.\n\nThis session is very pirate themed. You‚Äôll build‚Ä¶\n\n\nA JS library for rolling dice of different sizes\nA Treasure Chest library for managing all of your loot\nA web component for adding digital dice to a UI with just an HTML element\nSeven Seas, an offline-ready travel app for pirates\n\n\nYou‚Äôll also learn‚Ä¶\n\n\nHow to more easily write libraries with JS classes\nHow to modularize a growing code base\nHow to add hooks other developers can use to extend the functionality of your code\nHow to improve performance and reliability with Service Workers\nHow to use build tools to bundle your code\n\n\nIf you‚Äôre growing into a more senior role (or looking to make the jump), this is an awesome program to level-up your skills!\n\nPeople seem to like it\n\nHere‚Äôs some of the nice things students have said about the program‚Ä¶\n\n\n\t\n\t\t\n\t\n\t\n\t\tMaking myself a little web tool and using a whole range of stuff that Chris Ferdinandi‚Äôs Vanilla JS Academy taught me.I struggled with JavaScript for a decade so I really would recommend it for anyone who needs a big friendly confidence-booster.- Laura Kalbag\n\n\n\t\n\t\t\n\t\n\t\n\t\tTired of tutorials? Want to really dig in and work with other developers on how to become a vanilla JS badass? I can't tell you how much I've learned from Chris Ferdinandi and his Vanilla JS Academy.- Ben Rudolph\n\n\n\t\n\t\t\n\t\n\t\n\t\tI was confident that I'd get something valuable from the Academy. The only only hesitation I felt was from knowing how many false starts I had with JS in the past and questioning my own commitment.With Academy, something finally clicked in regards to both my ability to understand and write JavaScript.I now feel pretty confident in reading other's scripts and figuring out what's going on. That's in large part due to your clear bite-sized lessons and the active discussions in Slack that quickly surfaced questions and issues that I was also experiencing. Seeing how the same problem was solved by so many others was also helpful in letting go of the pressure to get things right and shift my focus on getting things to work and adjusting later as needed.I really liked how the lessons were broken up into quickly consumable chunks. I loved having a clean, unopinionated project file to start from that I could wreak design havoc on. :)The Slack community was priceless.I've taken other online classes that include a slack community and never found them to be quite as welcoming and my involvement felt much more transactional. In this community, I enjoyed seeing everyone's dedication and investment in each other. It was welcoming, inclusive, helpful, and encouraging. That made a huge difference.- Leticia O'Neill\n\n\n\t\n\t\t\n\t\n\t\n\t\tBest investment and course I have taken. If you want a bite sized course that will hold you accountable take this course. I have reduced the amount I Google and use Stackexchange by 50% and actually feel like I understand what I am coding.- Walter Jenkins\n\n\n\t\n\t\t\n\t\n\t\n\t\tI'm not a beginner in JavaScript but I'm really loving the Academy because I still learn new things and best practices. I think knowing best practices distinguishes a mid-level dev from a senior web dev.- Maria Blair\n\n\nHow can you sign up?\n\nRegistration opens up on Monday, June 27.\n\nThe first week of registration, I run an Early Bird Sale, with 40-percent off registration. If you‚Äôre thinking about joining, next week is definitely the week to do it.\n‚è∞ü¶â Early Bird Sale! Today through Monday, get 40% off registration in the next session of the Vanilla JS Academy.",
      "date_published": "2022-06-21T14:30:00.000Z",
      "date_modified": "2022-06-21T14:30:00.000Z"
    },
    {
      "id": "https://gomakethings.com/it-just-works/",
      "url": "https://gomakethings.com/it-just-works/",
      "title": "It just works",
      "summary": "Last week, Mads Stoumann tweeted‚Ä¶\n Today I opened a 10-year old vanilla-js app ‚Äî and it just worked! No node/npm woes ‚Ä¶\n This kind of thing continues to be one of my biggest attractions to a more browser-native experience.\nI have so many projects I built just a few years ago using Gulp that are littered with broken dependencies. If I need to make any updates, I first need to patch a bunch of out-of-date NPM dependencies.",
      "content_html": "<p>Last week, <a href=\"https://twitter.com/madsstoumann/status/1536036070416080896\">Mads Stoumann tweeted&hellip;</a></p>\n\n<blockquote>\n<p>Today I opened a 10-year old vanilla-js app ‚Äî and it just worked! No node/npm woes &hellip;</p>\n</blockquote>\n\n<p>This kind of thing continues to be one of my biggest attractions to a more browser-native experience.</p>\n\n<p>I have <em>so many</em> projects I built just a few years ago using Gulp that are littered with broken dependencies. If I need to make any updates, I first need to patch a bunch of out-of-date NPM dependencies.</p>\n\n<p>Often, that involves replacing at least one or two that have been deprecated, or rewriting my build setup because of a breaking major version change.</p>\n\n<p>That&rsquo;s not to say I don&rsquo;t use any build tools. I do. <a href=\"https://gomakethings.com/my-build-tool-boilerplate-goes-v2/\">But I built my own to be as close-to-the-metal as possible.</a></p>\n\n<p>The goal with vanilla JS or <a href=\"https://leanweb.dev\">the lean web</a> is <em>not</em> to completely shun tooling or write every line of code yourself.</p>\n\n<p>It&rsquo;s to lean heavily on what the platform gives you out of the box as a strategy for delivery a better user experience with fewer long-term maintenance issues.</p>\n\n<p>Where most people look at robust tooling as an asset, I often see a long-term liability that creates more headaches down the road.</p>\n<p>‚è∞ü¶â <em><strong>Early Bird Sale!</strong> Today through Monday, get 40% off <a href=\"https://vanillajsacademy.com\">registration in the next session of the Vanilla JS Academy</a>.</em></p>",
      "content_text": "Last week, Mads Stoumann tweeted‚Ä¶\n\n\nToday I opened a 10-year old vanilla-js app ‚Äî and it just worked! No node/npm woes ‚Ä¶\n\n\nThis kind of thing continues to be one of my biggest attractions to a more browser-native experience.\n\nI have so many projects I built just a few years ago using Gulp that are littered with broken dependencies. If I need to make any updates, I first need to patch a bunch of out-of-date NPM dependencies.\n\nOften, that involves replacing at least one or two that have been deprecated, or rewriting my build setup because of a breaking major version change.\n\nThat‚Äôs not to say I don‚Äôt use any build tools. I do. But I built my own to be as close-to-the-metal as possible.\n\nThe goal with vanilla JS or the lean web is not to completely shun tooling or write every line of code yourself.\n\nIt‚Äôs to lean heavily on what the platform gives you out of the box as a strategy for delivery a better user experience with fewer long-term maintenance issues.\n\nWhere most people look at robust tooling as an asset, I often see a long-term liability that creates more headaches down the road.\n‚è∞ü¶â Early Bird Sale! Today through Monday, get 40% off registration in the next session of the Vanilla JS Academy.",
      "date_published": "2022-06-20T14:30:00.000Z",
      "date_modified": "2022-06-20T14:30:00.000Z"
    },
    {
      "id": "https://gomakethings.com/how-to-add-interactivity-to-browser-native-web-components-with-vanilla-js/",
      "url": "https://gomakethings.com/how-to-add-interactivity-to-browser-native-web-components-with-vanilla-js/",
      "title": "How to add interactivity to browser native web components with vanilla JS",
      "summary": "On Wednesday, we learned what web components are and when and why you might want to use them. Yesterday, we at looked at how to create web components from custom elements.\nToday, we‚Äôre going to wrap up the series by adding interactivity to our component. Let‚Äôs dig in!\nToday‚Äôs article is an excerpt from my new course and ebook on web components with vanilla JS.\nLifecycle callback hooks Using web component lifecycle hooks and traditional DOM manipulation techniques, we can add built-in interactivity to our web components.",
      "content_html": "<p>On Wednesday, we learned <a href=\"https://gomakethings.com/what-are-browser-native-web-components/\">what web components are</a> and when and why you might want to use them. Yesterday, we at looked at <a href=\"https://gomakethings.com/how-to-create-a-web-component-with-vanilla-js/\">how to create web components from custom elements</a>.</p>\n\n<p>Today, we&rsquo;re going to wrap up the series by adding interactivity to our component. Let&rsquo;s dig in!</p>\n\n<p><em>Today‚Äôs article is an excerpt from my <a href=\"https://vanillajsguides.com/web-components/\">new course and ebook on web components with vanilla JS</a>.</em></p>\n\n<h2 id=\"lifecycle-callback-hooks\">Lifecycle callback hooks</h2>\n\n<p>Using web component lifecycle hooks and traditional DOM manipulation techniques, we can add built-in interactivity to our web components.</p>\n\n<p>As a best practice, event listeners for web components should be added inside the <code>connectedCallback()</code> function, since this method runs when the element is actually injected into the DOM.</p>\n\n<p>Inside our <code>connectedCallback()</code> method, let&rsquo;s use the <code>Element.querySelector()</code> method on the custom element, <code>this</code>, to get the <code>button</code> inside our component.</p>\n\n<p>If the <code>btn</code> exists, we&rsquo;ll attach a <code>click</code> event listener to it.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Runs each time the element is appended to or moved in the DOM\n</span><span class=\"cm\"> */</span>\n<span class=\"nx\">connectedCallback</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Attach a click event listener to the button\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;button&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">btn</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"c1\">// ...\n</span><span class=\"c1\"></span>\t<span class=\"p\">});</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Inside the event listener callback function, <code>this</code> is the element that was clicked, <em>not</em> the custom element.</p>\n\n<p>When the button is clicked, we&rsquo;ll use the <code>Element.closest()</code> method to get the parent <code>greeting-message</code> element, and assign it to the <code>host</code> variable. Then, we&rsquo;ll use the <code>Element.querySelector()</code> method to search for the <code>.message</code> element inside it.</p>\n\n<p>If no <code>target</code> element to display the message in is found, we&rsquo;ll use the <code>return</code> operator to end the callback function early.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Runs each time the element is appended to or moved in the DOM\n</span><span class=\"cm\"> */</span>\n<span class=\"nx\">connectedCallback</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Attach a click event listener to the button\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;button&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">btn</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t\t<span class=\"c1\">// Get the host component\n</span><span class=\"c1\"></span>\t\t<span class=\"kd\">let</span> <span class=\"nx\">host</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">closest</span><span class=\"p\">(</span><span class=\"s1\">&#39;greeting-message&#39;</span><span class=\"p\">);</span>\n\n\t\t<span class=\"c1\">// Get the message element\n</span><span class=\"c1\"></span>\t\t<span class=\"kd\">let</span> <span class=\"nx\">target</span> <span class=\"o\">=</span> <span class=\"nx\">host</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;.message&#39;</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n\t<span class=\"p\">});</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Otherwise, we&rsquo;ll use the <code>Element.textContent</code> property to show a message in the <code>target</code> element.</p>\n\n<p>Then, we&rsquo;ll use the <code>setTimeout()</code> method to clear the message out after <code>5000</code> milliseconds (or 5 seconds) so that the user can click the button again if they want.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Get the host component\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">host</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">closest</span><span class=\"p\">(</span><span class=\"s1\">&#39;greeting-message&#39;</span><span class=\"p\">);</span>\n\n\t<span class=\"c1\">// Get the message element\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">target</span> <span class=\"o\">=</span> <span class=\"nx\">host</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;.message&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n\t<span class=\"c1\">// Inject the message into the UI\n</span><span class=\"c1\"></span>\t<span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"sb\">`Hi there, friend! Hope you&#39;re having a great day!`</span><span class=\"p\">;</span>\n\n\t<span class=\"c1\">// Clear the message after 5 seconds\n</span><span class=\"c1\"></span>\t<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n\t<span class=\"p\">},</span> <span class=\"mi\">5000</span><span class=\"p\">);</span>\n\n<span class=\"p\">});</span>\n</code></pre></div>\n<h2 id=\"customizing-interactivity-with-html-attributes\">Customizing interactivity with HTML attributes</h2>\n\n<p>Just like with the <code>button</code> itself, we can use attributes to customize the behavior here.</p>\n\n<p>For example, let&rsquo;s say we wanted to customize the greeting with the user&rsquo;s name. We could add a <code>[name]</code> attribute to the <code>greeting-message</code> element.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">greeting-message</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;Merlin&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">greeting-message</span><span class=\"p\">&gt;</span></code></pre></div>\n<p>Inside the event listener, we can use the <code>Element.getAttribute()</code> method to get the value of the <code>[name]</code> attribute. Then, we can use a ternary operator to use the provided <code>name</code> if there is one, or <code>friend</code> if there&rsquo;s not.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Get the host component\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">host</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">closest</span><span class=\"p\">(</span><span class=\"s1\">&#39;greeting-message&#39;</span><span class=\"p\">);</span>\n\n\t<span class=\"c1\">// Get the message element\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">target</span> <span class=\"o\">=</span> <span class=\"nx\">host</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;.message&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n\t<span class=\"c1\">// Inject the message into the UI\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">host</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">);</span>\n\t<span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"sb\">`Hi there, </span><span class=\"si\">${</span><span class=\"nx\">name</span> <span class=\"o\">?</span> <span class=\"nx\">name</span> <span class=\"o\">:</span> <span class=\"s1\">&#39;friend&#39;</span><span class=\"si\">}</span><span class=\"sb\">! Hope you&#39;re having a great day!`</span><span class=\"p\">;</span>\n\n\t<span class=\"c1\">// Clear the message after 5 seconds\n</span><span class=\"c1\"></span>\t<span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n\t<span class=\"p\">},</span> <span class=\"mi\">5000</span><span class=\"p\">);</span>\n\n<span class=\"p\">});</span>\n</code></pre></div>\n<h2 id=\"removing-interactivity-when-the-web-component-is-disconnected\">Removing interactivity when the web component is disconnected</h2>\n\n<p>As a best practice, you should remove any attached event listeners whenever the <code>disconnectedCallback()</code> function runs.</p>\n\n<p>This helps prevent events that are no longer needed from taking up space in the browser&rsquo;s memory.</p>\n\n<p>We can do this using the <code>Element.removeEventListener()</code> method. But to do so, the callback function needs to be a named function in the same scope as both the <code>connectedCallback()</code> and <code>disconnectedCallback()</code> functions.</p>\n\n<p>To start, let&rsquo;s first move the event listener callback function out as a class function.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Handle click events on the button\n</span><span class=\"cm\"> */</span>\n<span class=\"nx\">clickHandler</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Get the host component\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">host</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">closest</span><span class=\"p\">(</span><span class=\"s1\">&#39;greeting-message&#39;</span><span class=\"p\">);</span>\n\n\t<span class=\"c1\">// ...\n</span><span class=\"c1\"></span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Then, inside the <code>connectedCallback()</code> function, we&rsquo;ll pass <code>this.clickHandler</code> in as the callback argument instead of using our anonymous function.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Runs each time the element is appended to or moved in the DOM\n</span><span class=\"cm\"> */</span>\n<span class=\"nx\">connectedCallback</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Attach a click event listener to the button\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;button&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">btn</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">clickHandler</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Finally, inside the <code>disconnectedCallback()</code> function, we can repeat the process.</p>\n\n<p>We&rsquo;ll use the <code>Element.querySelector()</code> method to get the <code>button</code>. Then, we&rsquo;ll call the <code>btn.removeEventListener()</code>, again passing in <code>click</code> and <code>this.clickHandler</code> as arguments.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Runs when the element is removed from the DOM\n</span><span class=\"cm\"> */</span>\n<span class=\"nx\">disconnectedCallback</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Remove the click event listener from the button\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;button&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">btn</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">removeEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">clickHandler</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now, whenever our web component is injected into the DOM, an event listener will be added, and whenever its removed, the event listener will be, too.</p>\n\n<h2 id=\"detecting-changes-to-web-component-attributes\">Detecting changes to web component attributes</h2>\n\n<p>The web component lifecycle includes an additional function, <code>attributeChangedCallback()</code>, that runs when attributes on a custom element are added, removed, or changed in value.</p>\n\n<p>You can use it to detect attribute changes and run code in response.</p>\n\n<p>For our <code>greeting-message</code> element, let&rsquo;s detect when the <code>logout</code> attribute is added to the element. When that happens, we want to remove the <code>button</code> from our web component and show a &ldquo;goodbye&rdquo; message.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"c\">&lt;!-- The user is logged out --&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">greeting-message</span> <span class=\"na\">logout</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;message&#34;</span> <span class=\"na\">aria-live</span><span class=\"o\">=</span><span class=\"s\">&#34;polite&#34;</span><span class=\"p\">&gt;</span>\n\t\tBye, friend! See you next time.\n\t<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">greeting-message</span><span class=\"p\">&gt;</span></code></pre></div>\n<p>First, we need to create a static getter method named <code>observedAttributes()</code>.</p>\n\n<p>This function needs to return an array of attributes to watch. Only attributes listed in this array will be observed by the <code>attributeChangedCallback()</code> function.</p>\n\n<p>We&rsquo;ll return an array with the <code>logout</code> attribute.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Create a list of attributes to observe\n</span><span class=\"cm\"> */</span>\n<span class=\"kr\">static</span> <span class=\"nx\">get</span> <span class=\"nx\">observedAttributes</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s1\">&#39;logout&#39;</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Next, we&rsquo;ll add an <code>attributeChangedCallback()</code> function.</p>\n\n<p>It accepts three arguments: the <code>name</code> of the attribute that&rsquo;s been changed, its <code>oldValue</code>, and its <code>newValue</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Runs when the value of an attribute is changed on the component\n</span><span class=\"cm\"> * @param  {String} name     The attribute name\n</span><span class=\"cm\"> * @param  {String} oldValue The old attribute value\n</span><span class=\"cm\"> * @param  {String} newValue The new attribute value\n</span><span class=\"cm\"> */</span>\n<span class=\"nx\">attributeChangedCallback</span> <span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">oldValue</span><span class=\"p\">,</span> <span class=\"nx\">newValue</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;changed&#39;</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">oldValue</span><span class=\"p\">,</span> <span class=\"nx\">newValue</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>At this point, if we add the <code>logout</code> attribute to our <code>greeting-message</code> element, the <code>attributeChangedCallback()</code> will log some stuff into the console.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;greeting-message&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Nothing will happen here, because we&#39;re not watching this attribute\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;you&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// logs &#34;changed&#34;, &#34;logout&#34;, null, &#34;true&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;logout&#39;</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>If we were observing more than one attribute, we would want to first check what the <code>name</code> was before doing anything in the <code>attributeChangedCallback()</code> function.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Runs when the value of an attribute is changed on the component\n</span><span class=\"cm\"> * @param  {String} name     The attribute name\n</span><span class=\"cm\"> * @param  {String} oldValue The old attribute value\n</span><span class=\"cm\"> * @param  {String} newValue The new attribute value\n</span><span class=\"cm\"> */</span>\n<span class=\"nx\">attributeChangedCallback</span> <span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">oldValue</span><span class=\"p\">,</span> <span class=\"nx\">newValue</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Of tje logout attribute\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">name</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;logout&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"c1\">// ...\n</span><span class=\"c1\"></span>\t<span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>For this web component, though, the function only runs for the <code>logout</code> attribute, so we don&rsquo;t have to check the <code>name</code>, nor do we have to worry about the <code>oldValue</code> or <code>newValue</code>.</p>\n\n<p>First, we&rsquo;ll use the <code>Element.querySelector()</code> method to get the <code>button</code> inside our web component, and assign it to the <code>btn</code> variable.</p>\n\n<p>If a <code>btn</code> is found, we&rsquo;ll use the <code>Element.removeEventListener()</code> method to remove the <code>click</code> event on the button. Then, we&rsquo;ll use the <code>Element.remove()</code> method to remove the <code>btn</code> from the DOM.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Runs when the value of an attribute is changed on the component\n</span><span class=\"cm\"> */</span>\n<span class=\"nx\">attributeChangedCallback</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Remove the button\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;button&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">btn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">removeEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">clickHandler</span><span class=\"p\">);</span>\n\t\t<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">();</span>\n\t<span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Next, we&rsquo;ll look for the <code>.message</code> element, and assign it to the <code>target</code> variable.</p>\n\n<p>If a <code>target</code> is found, we&rsquo;ll use the <code>Element.getAttribute()</code> method to get the value of the <code>[name]</code> attribute on the web component. Then, we&rsquo;ll use the <code>Element.textContent</code> property to display a goodbye message in the <code>target</code>.</p>\n\n<p>If there&rsquo;s a <code>name</code>, we&rsquo;ll use it. Otherwise, we&rsquo;ll use <code>friend</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Runs when the value of an attribute is changed on the component\n</span><span class=\"cm\"> */</span>\n<span class=\"nx\">attributeChangedCallback</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Remove the button\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;button&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">btn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">removeEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">clickHandler</span><span class=\"p\">);</span>\n\t\t<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">();</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"c1\">// Get the message element\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">target</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;.message&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t\t<span class=\"c1\">// Inject the message into the UI\n</span><span class=\"c1\"></span>\t\t<span class=\"kd\">let</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">);</span>\n\t\t<span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"sb\">`Bye, </span><span class=\"si\">${</span><span class=\"nx\">name</span> <span class=\"o\">?</span> <span class=\"nx\">name</span> <span class=\"o\">:</span> <span class=\"s1\">&#39;friend&#39;</span><span class=\"si\">}</span><span class=\"sb\">! See you next time.`</span><span class=\"p\">;</span>\n\n\t<span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now, when we add the <code>logout</code> attribute to our custom element, the button is removed and a message is shown in the UI.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/ZErPgxx\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"what-s-next-the-shadow-dom\">What&rsquo;s next? The shadow DOM.</h2>\n\n<p>The <em>Shadow DOM</em> is a special, hidden DOM, separate from the main DOM.</p>\n\n<p>Web components can use the Shadow DOM to <em>encapsulate</em> elements and avoid the naming collisions and unintended side effects that sometimes happen when code is used by teams or across projects.</p>\n\n<p>If you want to keep learning about native web components, <a href=\"https://vanillajsguides.com/web-components/\">click here to check out my new course and ebook</a>.</p>\n<p>‚è∞ü¶â <em><strong>Early Bird Sale!</strong> Today through Monday, get 40% off <a href=\"https://vanillajsacademy.com\">registration in the next session of the Vanilla JS Academy</a>.</em></p>",
      "content_text": "On Wednesday, we learned what web components are and when and why you might want to use them. Yesterday, we at looked at how to create web components from custom elements.\n\nToday, we‚Äôre going to wrap up the series by adding interactivity to our component. Let‚Äôs dig in!\n\nToday‚Äôs article is an excerpt from my new course and ebook on web components with vanilla JS.\n\nLifecycle callback hooks\n\nUsing web component lifecycle hooks and traditional DOM manipulation techniques, we can add built-in interactivity to our web components.\n\nAs a best practice, event listeners for web components should be added inside the connectedCallback() function, since this method runs when the element is actually injected into the DOM.\n\nInside our connectedCallback() method, let‚Äôs use the Element.querySelector() method on the custom element, this, to get the button inside our component.\n\nIf the btn exists, we‚Äôll attach a click event listener to it.\n/**\n * Runs each time the element is appended to or moved in the DOM\n */\nconnectedCallback () {\n\n\t// Attach a click event listener to the button\n\tlet btn = this.querySelector('button');\n\tif (!btn) return;\n\tbtn.addEventListener('click', function (event) {\n\t\t// ...\n\t});\n\n}\n\nInside the event listener callback function, this is the element that was clicked, not the custom element.\n\nWhen the button is clicked, we‚Äôll use the Element.closest() method to get the parent greeting-message element, and assign it to the host variable. Then, we‚Äôll use the Element.querySelector() method to search for the .message element inside it.\n\nIf no target element to display the message in is found, we‚Äôll use the return operator to end the callback function early.\n/**\n * Runs each time the element is appended to or moved in the DOM\n */\nconnectedCallback () {\n\n\t// Attach a click event listener to the button\n\tlet btn = this.querySelector('button');\n\tif (!btn) return;\n\tbtn.addEventListener('click', function (event) {\n\n\t\t// Get the host component\n\t\tlet host = event.target.closest('greeting-message');\n\n\t\t// Get the message element\n\t\tlet target = host.querySelector('.message');\n\t\tif (!target) return;\n\n\t});\n\n}\n\nOtherwise, we‚Äôll use the Element.textContent property to show a message in the target element.\n\nThen, we‚Äôll use the setTimeout() method to clear the message out after 5000 milliseconds (or 5 seconds) so that the user can click the button again if they want.\nbtn.addEventListener('click', function (event) {\n\n\t// Get the host component\n\tlet host = event.target.closest('greeting-message');\n\n\t// Get the message element\n\tlet target = host.querySelector('.message');\n\tif (!target) return;\n\n\t// Inject the message into the UI\n\ttarget.textContent = `Hi there, friend! Hope you're having a great day!`;\n\n\t// Clear the message after 5 seconds\n\tsetTimeout(function () {\n\t\ttarget.textContent = '';\n\t}, 5000);\n\n});\n\nCustomizing interactivity with HTML attributes\n\nJust like with the button itself, we can use attributes to customize the behavior here.\n\nFor example, let‚Äôs say we wanted to customize the greeting with the user‚Äôs name. We could add a [name] attribute to the greeting-message element.\n<greeting-message name=\"Merlin\"></greeting-message>\nInside the event listener, we can use the Element.getAttribute() method to get the value of the [name] attribute. Then, we can use a ternary operator to use the provided name if there is one, or friend if there‚Äôs not.\nbtn.addEventListener('click', function (event) {\n\n\t// Get the host component\n\tlet host = event.target.closest('greeting-message');\n\n\t// Get the message element\n\tlet target = host.querySelector('.message');\n\tif (!target) return;\n\n\t// Inject the message into the UI\n\tlet name = host.getAttribute('name');\n\ttarget.textContent = `Hi there, ${name ? name : 'friend'}! Hope you're having a great day!`;\n\n\t// Clear the message after 5 seconds\n\tsetTimeout(function () {\n\t\ttarget.textContent = '';\n\t}, 5000);\n\n});\n\nRemoving interactivity when the web component is disconnected\n\nAs a best practice, you should remove any attached event listeners whenever the disconnectedCallback() function runs.\n\nThis helps prevent events that are no longer needed from taking up space in the browser‚Äôs memory.\n\nWe can do this using the Element.removeEventListener() method. But to do so, the callback function needs to be a named function in the same scope as both the connectedCallback() and disconnectedCallback() functions.\n\nTo start, let‚Äôs first move the event listener callback function out as a class function.\n/**\n * Handle click events on the button\n */\nclickHandler (event) {\n\n\t// Get the host component\n\tlet host = event.target.closest('greeting-message');\n\n\t// ...\n\n}\n\nThen, inside the connectedCallback() function, we‚Äôll pass this.clickHandler in as the callback argument instead of using our anonymous function.\n/**\n * Runs each time the element is appended to or moved in the DOM\n */\nconnectedCallback () {\n\n\t// Attach a click event listener to the button\n\tlet btn = this.querySelector('button');\n\tif (!btn) return;\n\tbtn.addEventListener('click', this.clickHandler);\n\n}\n\nFinally, inside the disconnectedCallback() function, we can repeat the process.\n\nWe‚Äôll use the Element.querySelector() method to get the button. Then, we‚Äôll call the btn.removeEventListener(), again passing in click and this.clickHandler as arguments.\n/**\n * Runs when the element is removed from the DOM\n */\ndisconnectedCallback () {\n\n\t// Remove the click event listener from the button\n\tlet btn = this.querySelector('button');\n\tif (!btn) return;\n\tbtn.removeEventListener('click', this.clickHandler);\n\n}\n\nNow, whenever our web component is injected into the DOM, an event listener will be added, and whenever its removed, the event listener will be, too.\n\nDetecting changes to web component attributes\n\nThe web component lifecycle includes an additional function, attributeChangedCallback(), that runs when attributes on a custom element are added, removed, or changed in value.\n\nYou can use it to detect attribute changes and run code in response.\n\nFor our greeting-message element, let‚Äôs detect when the logout attribute is added to the element. When that happens, we want to remove the button from our web component and show a ‚Äúgoodbye‚Äù message.\n<!-- The user is logged out -->\n<greeting-message logout>\n\t<div class=\"message\" aria-live=\"polite\">\n\t\tBye, friend! See you next time.\n\t</div>\n</greeting-message>\nFirst, we need to create a static getter method named observedAttributes().\n\nThis function needs to return an array of attributes to watch. Only attributes listed in this array will be observed by the attributeChangedCallback() function.\n\nWe‚Äôll return an array with the logout attribute.\n/**\n * Create a list of attributes to observe\n */\nstatic get observedAttributes () {\n\treturn ['logout'];\n}\n\nNext, we‚Äôll add an attributeChangedCallback() function.\n\nIt accepts three arguments: the name of the attribute that‚Äôs been changed, its oldValue, and its newValue.\n/**\n * Runs when the value of an attribute is changed on the component\n * @param  {String} name     The attribute name\n * @param  {String} oldValue The old attribute value\n * @param  {String} newValue The new attribute value\n */\nattributeChangedCallback (name, oldValue, newValue) {\n\tconsole.log('changed', name, oldValue, newValue, this);\n}\n\nAt this point, if we add the logout attribute to our greeting-message element, the attributeChangedCallback() will log some stuff into the console.\nlet greeting = document.querySelector('greeting-message');\n\n// Nothing will happen here, because we're not watching this attribute\ngreeting.setAttribute('hello', 'you');\n\n// logs \"changed\", \"logout\", null, \"true\"\ngreeting.setAttribute('logout', true);\n\nIf we were observing more than one attribute, we would want to first check what the name was before doing anything in the attributeChangedCallback() function.\n/**\n * Runs when the value of an attribute is changed on the component\n * @param  {String} name     The attribute name\n * @param  {String} oldValue The old attribute value\n * @param  {String} newValue The new attribute value\n */\nattributeChangedCallback (name, oldValue, newValue) {\n\n\t// Of tje logout attribute\n\tif (name === 'logout') {\n\t\t// ...\n\t}\n\n}\n\nFor this web component, though, the function only runs for the logout attribute, so we don‚Äôt have to check the name, nor do we have to worry about the oldValue or newValue.\n\nFirst, we‚Äôll use the Element.querySelector() method to get the button inside our web component, and assign it to the btn variable.\n\nIf a btn is found, we‚Äôll use the Element.removeEventListener() method to remove the click event on the button. Then, we‚Äôll use the Element.remove() method to remove the btn from the DOM.\n/**\n * Runs when the value of an attribute is changed on the component\n */\nattributeChangedCallback () {\n\n\t// Remove the button\n\tlet btn = this.querySelector('button');\n\tif (btn) {\n\t\tbtn.removeEventListener('click', this.clickHandler);\n\t\tbtn.remove();\n\t}\n\n}\n\nNext, we‚Äôll look for the .message element, and assign it to the target variable.\n\nIf a target is found, we‚Äôll use the Element.getAttribute() method to get the value of the [name] attribute on the web component. Then, we‚Äôll use the Element.textContent property to display a goodbye message in the target.\n\nIf there‚Äôs a name, we‚Äôll use it. Otherwise, we‚Äôll use friend.\n/**\n * Runs when the value of an attribute is changed on the component\n */\nattributeChangedCallback () {\n\n\t// Remove the button\n\tlet btn = this.querySelector('button');\n\tif (btn) {\n\t\tbtn.removeEventListener('click', this.clickHandler);\n\t\tbtn.remove();\n\t}\n\n\t// Get the message element\n\tlet target = this.querySelector('.message');\n\tif (target) {\n\n\t\t// Inject the message into the UI\n\t\tlet name = this.getAttribute('name');\n\t\ttarget.textContent = `Bye, ${name ? name : 'friend'}! See you next time.`;\n\n\t}\n\n}\n\nNow, when we add the logout attribute to our custom element, the button is removed and a message is shown in the UI.\n\nHere‚Äôs a demo.\n\nWhat‚Äôs next? The shadow DOM.\n\nThe Shadow DOM is a special, hidden DOM, separate from the main DOM.\n\nWeb components can use the Shadow DOM to encapsulate elements and avoid the naming collisions and unintended side effects that sometimes happen when code is used by teams or across projects.\n\nIf you want to keep learning about native web components, click here to check out my new course and ebook.\n‚è∞ü¶â Early Bird Sale! Today through Monday, get 40% off registration in the next session of the Vanilla JS Academy.",
      "date_published": "2022-06-17T14:30:00.000Z",
      "date_modified": "2022-06-17T14:30:00.000Z"
    },
    {
      "id": "https://gomakethings.com/how-to-create-a-web-component-with-vanilla-js/",
      "url": "https://gomakethings.com/how-to-create-a-web-component-with-vanilla-js/",
      "title": "How to create a web component with vanilla JS",
      "summary": "Yesterday, we looked at what web components are. Today, I wanted to share how to actually create one.\nLet‚Äôs dig in!\nToday‚Äôs article is an excerpt from my new course and ebook on web components with vanilla JS.\nCreating a web component To help make the concepts in this guide tangible, we‚Äôre going to build a really simple web component: greeting-message.\n<greeting-message></greeting-message> When we‚Äôre done, the component will load a button into the UI, and display a welcome message when the button is clicked.",
      "content_html": "<p>Yesterday, we looked at <a href=\"https://gomakethings.com/what-are-browser-native-web-components/\">what web components are</a>. Today, I wanted to share how to actually create one.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<p><em>Today&rsquo;s article is an excerpt from <a href=\"https://vanillajsguides.com/web-components/\">my new course and ebook on web components with vanilla JS</a>.</em></p>\n\n<h2 id=\"creating-a-web-component\">Creating a web component</h2>\n\n<p>To help make the concepts in this guide tangible, we&rsquo;re going to build a really simple web component: <code>greeting-message</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">greeting-message</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">greeting-message</span><span class=\"p\">&gt;</span></code></pre></div>\n<p>When we&rsquo;re done, the component will load a <code>button</code> into the UI, and display a welcome message when the <code>button</code> is clicked. If a <code>logout</code> attribute is added to it, the <code>button</code> gets removed from the UI, and a &ldquo;goodbye message&rdquo; is shown.</p>\n\n<p>We&rsquo;ll also include some custom styling, and add some hooks that developers can use to customize it a bit (without breaking things).</p>\n\n<h2 id=\"registering-a-web-component\">Registering a web component</h2>\n\n<p>To create a web component, the first thing you have to do is register it with JavaScript.</p>\n\n<p>To do that, we&rsquo;ll first use a JavaScript class to extend the <code>HTMLElement</code> object. Just like with a traditional constructor pattern, our class name should be in <em>Title Case</em>.</p>\n\n<p>Let&rsquo;s call this one <code>GreetingMessage</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Extend the HTMLElement class to create the web component\n</span><span class=\"c1\"></span><span class=\"k\">class</span> <span class=\"nx\">GreetingMessage</span> <span class=\"k\">extends</span> <span class=\"nx\">HTMLElement</span> <span class=\"p\">{</span>\n\t<span class=\"c1\">// We&#39;ll create our web component here\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div>\n<p>After we create our new class, we need to define our component using the <code>CustomElementRegistry.define()</code> method.</p>\n\n<p>The first argument is the <code>name</code> of the element. This is the name of the actual element itself in your HTML. It must include at least one dash (<code>-</code>). Single-word web components are not allowed.</p>\n\n<p>The second argument is the <code>constructor</code>, the new class that you create for your web component.</p>\n\n<p>(<em>As a best practice, we should make sure that <code>customElements</code> exist as an object in the <code>window</code> first.</em>)</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Extend the HTMLElement class to create the web component\n</span><span class=\"c1\"></span><span class=\"k\">class</span> <span class=\"nx\">GreetingMessage</span> <span class=\"k\">extends</span> <span class=\"nx\">HTMLElement</span> <span class=\"p\">{</span>\n\t<span class=\"c1\">// We&#39;ll create our web component here\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n\n<span class=\"c1\">// Define the new web component\n</span><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"s1\">&#39;customElements&#39;</span> <span class=\"k\">in</span> <span class=\"nb\">window</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">customElements</span><span class=\"p\">.</span><span class=\"nx\">define</span><span class=\"p\">(</span><span class=\"s1\">&#39;greeting-message&#39;</span><span class=\"p\">,</span> <span class=\"nx\">GreetingMessage</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now, we&rsquo;ve registered a new web component. It doesn&rsquo;t do anything yet, but it exists!</p>\n\n<h2 id=\"the-web-component-lifecycle\">The web component lifecycle</h2>\n\n<p>As the browser parses and renders your web component into the DOM, there are a few lifecycle callback functions that run at various times.</p>\n\n<ul>\n<li>The <code>constructor()</code> method is run when the element is created, before its injected into the UI.</li>\n<li>The <code>connectedCallback()</code> method is run when the element is injected into the DOM, and again whenever it&rsquo;s moved or appended elsewhere.</li>\n<li>The <code>disconnectedCallback()</code> method is run whenever the element is removed from the DOM.</li>\n</ul>\n\n<p>We can include functions that run on each of these events inside our web component class.</p>\n\n<p>Because we&rsquo;re extending an existing class, the <code>constructor()</code> function needs to include the <code>super()</code> method, which provides access to the parent class&rsquo;s properties and methods.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Extend the HTMLElement class to create the web component\n</span><span class=\"c1\"></span><span class=\"k\">class</span> <span class=\"nx\">GreetingMessage</span> <span class=\"k\">extends</span> <span class=\"nx\">HTMLElement</span> <span class=\"p\">{</span>\n\n\t<span class=\"cm\">/**\n</span><span class=\"cm\">\t * The class constructor object\n</span><span class=\"cm\">\t */</span>\n\t<span class=\"nx\">constructor</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n\t\t<span class=\"c1\">// Always call super first in constructor\n</span><span class=\"c1\"></span>\t\t<span class=\"k\">super</span><span class=\"p\">();</span>\n\n\t\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Constructed&#39;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n\n\t<span class=\"p\">}</span>\n\n\t<span class=\"cm\">/**\n</span><span class=\"cm\">\t * Runs each time the element is appended to or moved in the DOM\n</span><span class=\"cm\">\t */</span>\n\t<span class=\"nx\">connectedCallback</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;connected!&#39;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"cm\">/**\n</span><span class=\"cm\">\t * Runs when the element is removed from the DOM\n</span><span class=\"cm\">\t */</span>\n\t<span class=\"nx\">disconnectedCallback</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;disconnected&#39;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>If you include a web component in the UI and do nothing else on the page, the <code>constructor()</code> method will run, followed by the <code>connectedCallback()</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// On page load, the browser would log...\n</span><span class=\"c1\">// &#34;Constructed&#34; &lt;greeting-message&gt;&lt;/greeting-message&gt;\n</span><span class=\"c1\">// &#34;connected!&#34; &lt;greeting-message&gt;&lt;/greeting-message&gt;\n</span></code></pre></div>\n<p>If you were to move your element using something like the <code>Element.append()</code> method, the <code>disconnectedCallback()</code> function would run, followed by the <code>connectedCallback()</code> function.</p>\n\n<p>If you removed it with the <code>Element.remove()</code> method, just the <code>disconnectedCallback()</code> function would run.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;greeting-message&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// The console logs...\n</span><span class=\"c1\">// &#34;disconnected&#34; &lt;greeting-message&gt;&lt;/greeting-message&gt;\n</span><span class=\"c1\">// &#34;connected!&#34; &lt;greeting-message&gt;&lt;/greeting-message&gt;\n</span><span class=\"c1\"></span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">greeting</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// The console logs...\n</span><span class=\"c1\">// &#34;disconnected&#34; &lt;greeting-message&gt;&lt;/greeting-message&gt;\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">();</span>\n</code></pre></div>\n<h2 id=\"generating-the-web-component-html\">Generating the web component HTML</h2>\n\n<p>Now that we have a registered web component, we need to generate some actual HTML in the UI.</p>\n\n<p>Inside the <code>constructor()</code> function, we can use the <code>Element.innerHTML</code> property to set the HTML inside <code>this</code>, the current instance of the web component element.</p>\n\n<p>In our case, let&rsquo;s add a <code>p</code> with a <code>button</code> inside it. We&rsquo;ll also add a <code>.message</code> element, with an ARIA live region on it. We&rsquo;ll be injecting a greeting in there when the user clicks the button.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * The class constructor object\n</span><span class=\"cm\"> */</span>\n<span class=\"nx\">constructor</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Always call super first in constructor\n</span><span class=\"c1\"></span>\t<span class=\"k\">super</span><span class=\"p\">();</span>\n\n\t<span class=\"c1\">// Render HTML\n</span><span class=\"c1\"></span>\t<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span>\n\t\t<span class=\"sb\">`&lt;p&gt;\n</span><span class=\"sb\">\t\t\t&lt;button&gt;Hi there!&lt;/button&gt;\n</span><span class=\"sb\">\t\t&lt;/p&gt;\n</span><span class=\"sb\">\t\t&lt;div class=&#34;message&#34; aria-live=&#34;polite&#34;&gt;&lt;/div&gt;`</span><span class=\"p\">;</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now, when the web component is loaded, this is what&rsquo;s displayed in the DOM.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">greeting-message</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n\t\t<span class=\"p\">&lt;</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>Hi there!<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;message&#34;</span> <span class=\"na\">aria-live</span><span class=\"o\">=</span><span class=\"s\">&#34;polite&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">greeting-message</span><span class=\"p\">&gt;</span></code></pre></div>\n<p>Now we&rsquo;ve got a basic web component in place and rendering HTML into the UI. <a href=\"https://codepen.io/cferdinandi/pen/ZErPGME\">Here&rsquo;s a demo.</a></p>\n\n<p>Tomorrow, we&rsquo;ll look at how to add interactivity.</p>\n<p>‚è∞ü¶â <em><strong>Early Bird Sale!</strong> Today through Monday, get 40% off <a href=\"https://vanillajsacademy.com\">registration in the next session of the Vanilla JS Academy</a>.</em></p>",
      "content_text": "Yesterday, we looked at what web components are. Today, I wanted to share how to actually create one.\n\nLet‚Äôs dig in!\n\nToday‚Äôs article is an excerpt from my new course and ebook on web components with vanilla JS.\n\nCreating a web component\n\nTo help make the concepts in this guide tangible, we‚Äôre going to build a really simple web component: greeting-message.\n<greeting-message></greeting-message>\nWhen we‚Äôre done, the component will load a button into the UI, and display a welcome message when the button is clicked. If a logout attribute is added to it, the button gets removed from the UI, and a ‚Äúgoodbye message‚Äù is shown.\n\nWe‚Äôll also include some custom styling, and add some hooks that developers can use to customize it a bit (without breaking things).\n\nRegistering a web component\n\nTo create a web component, the first thing you have to do is register it with JavaScript.\n\nTo do that, we‚Äôll first use a JavaScript class to extend the HTMLElement object. Just like with a traditional constructor pattern, our class name should be in Title Case.\n\nLet‚Äôs call this one GreetingMessage.\n// Extend the HTMLElement class to create the web component\nclass GreetingMessage extends HTMLElement {\n\t// We'll create our web component here\n}\n\nAfter we create our new class, we need to define our component using the CustomElementRegistry.define() method.\n\nThe first argument is the name of the element. This is the name of the actual element itself in your HTML. It must include at least one dash (-). Single-word web components are not allowed.\n\nThe second argument is the constructor, the new class that you create for your web component.\n\n(As a best practice, we should make sure that customElements exist as an object in the window first.)\n// Extend the HTMLElement class to create the web component\nclass GreetingMessage extends HTMLElement {\n\t// We'll create our web component here\n}\n\n// Define the new web component\nif ('customElements' in window) {\n\tcustomElements.define('greeting-message', GreetingMessage);\n}\n\nNow, we‚Äôve registered a new web component. It doesn‚Äôt do anything yet, but it exists!\n\nThe web component lifecycle\n\nAs the browser parses and renders your web component into the DOM, there are a few lifecycle callback functions that run at various times.\n\n\nThe constructor() method is run when the element is created, before its injected into the UI.\nThe connectedCallback() method is run when the element is injected into the DOM, and again whenever it‚Äôs moved or appended elsewhere.\nThe disconnectedCallback() method is run whenever the element is removed from the DOM.\n\n\nWe can include functions that run on each of these events inside our web component class.\n\nBecause we‚Äôre extending an existing class, the constructor() function needs to include the super() method, which provides access to the parent class‚Äôs properties and methods.\n// Extend the HTMLElement class to create the web component\nclass GreetingMessage extends HTMLElement {\n\n\t/**\n\t * The class constructor object\n\t */\n\tconstructor () {\n\n\t\t// Always call super first in constructor\n\t\tsuper();\n\n\t\tconsole.log('Constructed', this);\n\n\t}\n\n\t/**\n\t * Runs each time the element is appended to or moved in the DOM\n\t */\n\tconnectedCallback () {\n\t\tconsole.log('connected!', this);\n\t}\n\n\t/**\n\t * Runs when the element is removed from the DOM\n\t */\n\tdisconnectedCallback () {\n\t\tconsole.log('disconnected', this);\n\t}\n\n}\n\nIf you include a web component in the UI and do nothing else on the page, the constructor() method will run, followed by the connectedCallback().\n// On page load, the browser would log...\n// \"Constructed\" <greeting-message></greeting-message>\n// \"connected!\" <greeting-message></greeting-message>\n\nIf you were to move your element using something like the Element.append() method, the disconnectedCallback() function would run, followed by the connectedCallback() function.\n\nIf you removed it with the Element.remove() method, just the disconnectedCallback() function would run.\nlet greeting = document.querySelector('greeting-message');\n\n// The console logs...\n// \"disconnected\" <greeting-message></greeting-message>\n// \"connected!\" <greeting-message></greeting-message>\ndocument.body.append(greeting);\n\n// The console logs...\n// \"disconnected\" <greeting-message></greeting-message>\ngreeting.remove();\n\nGenerating the web component HTML\n\nNow that we have a registered web component, we need to generate some actual HTML in the UI.\n\nInside the constructor() function, we can use the Element.innerHTML property to set the HTML inside this, the current instance of the web component element.\n\nIn our case, let‚Äôs add a p with a button inside it. We‚Äôll also add a .message element, with an ARIA live region on it. We‚Äôll be injecting a greeting in there when the user clicks the button.\n/**\n * The class constructor object\n */\nconstructor () {\n\n\t// Always call super first in constructor\n\tsuper();\n\n\t// Render HTML\n\tthis.innerHTML =\n\t\t`<p>\n\t\t\t<button>Hi there!</button>\n\t\t</p>\n\t\t<div class=\"message\" aria-live=\"polite\"></div>`;\n\n}\n\nNow, when the web component is loaded, this is what‚Äôs displayed in the DOM.\n<greeting-message>\n\t<p>\n\t\t<button>Hi there!</button>\n\t</p>\n\t<div class=\"message\" aria-live=\"polite\"></div>\n</greeting-message>\nNow we‚Äôve got a basic web component in place and rendering HTML into the UI. Here‚Äôs a demo.\n\nTomorrow, we‚Äôll look at how to add interactivity.\n‚è∞ü¶â Early Bird Sale! Today through Monday, get 40% off registration in the next session of the Vanilla JS Academy.",
      "date_published": "2022-06-16T14:30:00.000Z",
      "date_modified": "2022-06-16T14:30:00.000Z"
    }
  ],
  "description": "A simpler, more resilient way to make things for the web.",
  "home_page_url": "https://gomakethings.com"
}