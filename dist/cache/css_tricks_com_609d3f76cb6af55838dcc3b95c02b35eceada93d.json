{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "CSS-Tricks",
  "feed_url": "https://css-tricks.com/feed/",
  "items": [
    {
      "id": "https://css-tricks.com/?p=366526",
      "url": "https://css-tricks.com/single-element-loaders-the-bars/",
      "title": "Single Element Loaders: The Bars",
      "summary": "We’ve looked at spinners. We’ve looked at dots. Now we’re going to tackle another common pattern for loaders: bars. And we’re going to do the same thing in this third article of the series as we have the others …\n\nSingle Element Loaders: The Bars originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">We’ve looked at spinners.</a> <a href=\"https://css-tricks.com/single-element-loaders-the-dots/\">We’ve looked at dots.</a> Now we’re going to tackle another common pattern for loaders: <strong>bars</strong>. And we’re going to do the same thing in this third article of the series as we have the others by making it with only one element and with flexible CSS that makes it easy to create variations.</p>\n\n\n\n<span id=\"more-366526\"></span>\n\n\n\n<div class=\"wp-container-3 wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container\">\n<h4>Article series</h4>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">Single Element Loaders: The Spinner</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-dots/\">Single Element Loaders: The Dots</a></li><li>Single Element Loaders: The Bars — <em>you are here</em></li><li>Single Element Loaders: Going 3D — <em>coming July 1</em></li></ul>\n</div></div>\n\n\n\n<p>Let’s start with not one, not two, but 20 examples of bar loaders.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdWVOrR\" src=\"//codepen.io/anon/embed/preview/mdWVOrR?height=450&amp;theme-id=1&amp;slug-hash=mdWVOrR&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdWVOrR\" title=\"CodePen Embed mdWVOrR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYZppdN\" src=\"//codepen.io/anon/embed/preview/zYZppdN?height=450&amp;theme-id=1&amp;slug-hash=zYZppdN&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYZppdN\" title=\"CodePen Embed zYZppdN\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What?! Are you going to detail each one of them? That’s too much for an article!</p></blockquote>\n\n\n\n<p>It might seem like that at first glance! But all of them rely on the same code structure and we only update a few values to create variations. That’s all the power of CSS. We don’t learn how to create one loader, but we learn different techniques that allow us to create as much loader as we want using merely the same code structure.</p>\n\n\n\n<h3>Let’s make some bars!</h3>\n\n\n\n<p>We start by defining the dimensions for them using <code>width</code> (or <code>height</code>) with <a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\"><code>aspect-ratio</code></a> to maintain proportion:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.bars {\n  width: 45px;\n  aspect-ratio: 1;\n}</code></pre>\n\n\n\n<p>We sort of “fake” three bars with a linear gradient on the background — very similar to how we created dot loaders in Part 2 of this series.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.bars {\n  width: 45px;\n  aspect-ratio: 1;\n  --c: no-repeat linear-gradient(#000 0 0); /* we define the color here */\n  background: \n    var(--c) 0%   50%,\n    var(--c) 50%  50%,\n    var(--c) 100% 50%;\n  background-size: 20% 100%; /* 20% * (3 bars + 2 spaces) = 100% */\n}</code></pre>\n\n\n\n<p>The above code will give us the following result:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"486\" height=\"424\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651523850750_image.png?resize=486%2C424&#038;ssl=1\" alt=\"\" class=\"wp-image-366527\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651523850750_image.png?w=486&amp;ssl=1 486w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651523850750_image.png?resize=300%2C262&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Like the other articles in this series, we are going to deal with a lot of <code>background</code> trickery. So, if you ever feel like we’re jumping around too fast or feel you need a little more detail, please do check those out. You can also read my <a href=\"https://stackoverflow.com/a/51734530/8620333\" rel=\"noopener\">Stack Overflow answer where I give</a> <a href=\"https://stackoverflow.com/a/51734530/8620333\" rel=\"noopener\">a detailed explanation</a> on how all this works.</p>\n\n\n\n<h3>Animating the bars</h3>\n\n\n\n<p>We either animate the element’s size or position to create the bar loader. Let’s animate the size by defining the following animation keyframes:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@keyframes load {\n  0%   { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 1 */\n  33%  { background-size: 20% 10% , 20% 100%, 20% 100%; }  /* 2 */\n  50%  { background-size: 20% 100%, 20% 10% , 20% 100%; }  /* 3 */\n  66%  { background-size: 20% 100%, 20% 100%, 20% 10%;  }  /* 4 */\n  100% { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 5 */\n}</code></pre>\n\n\n\n<p>See what’s happening there? Between 0% and 100%, the animation changes the <code>background-size</code> of the element’s background gradient. Each keyframe sets three background sizes (one for each gradient).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"911\" height=\"176\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651524284295_image.png?resize=911%2C176&#038;ssl=1\" alt=\"\" class=\"wp-image-366528\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651524284295_image.png?w=911&amp;ssl=1 911w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651524284295_image.png?resize=300%2C58&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651524284295_image.png?resize=768%2C148&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>And here’s what we get:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ZErYBPd\" src=\"//codepen.io/anon/embed/ZErYBPd?height=450&amp;theme-id=1&amp;slug-hash=ZErYBPd&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ZErYBPd\" title=\"CodePen Embed ZErYBPd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Can you start to imagine all the possible variations we can get by playing with different animation configurations for the sizes or the positions?</p>\n\n\n\n<p>Let’s fix the size to <code>20% 50%</code> and update the positions this time:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  width: 45px;\n  aspect-ratio: .75;\n  --c: no-repeat linear-gradient(#000 0 0);\n  background: \n    var(--c),\n    var(--c),\n    var(--c);\n  background-size: 20% 50%;\n  animation: load 1s infinite linear;\n}\n@keyframes load {\n  0%   { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 1 */\n  20%  { background-position: 0% 50% , 50% 100%, 100% 100%; } /* 2 */\n  40%  { background-position: 0% 0%  , 50% 50% , 100% 100%; } /* 3 */\n  60%  { background-position: 0% 100%, 50% 0%  , 100% 50%;  } /* 4 */\n  80%  { background-position: 0% 100%, 50% 100%, 100% 0%;   } /* 5 */ \n  100% { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 6 */\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"923\" height=\"215\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651525274479_image.png?resize=923%2C215&#038;ssl=1\" alt=\"\" class=\"wp-image-366529\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651525274479_image.png?w=923&amp;ssl=1 923w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651525274479_image.png?resize=300%2C70&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651525274479_image.png?resize=768%2C179&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>…which gets us another loader!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOvbgpe\" src=\"//codepen.io/anon/embed/gOvbgpe?height=450&amp;theme-id=1&amp;slug-hash=gOvbgpe&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOvbgpe\" title=\"CodePen Embed gOvbgpe\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>You’ve probably got the trick by now. All you need is to define a timeline that you translate into a keyframe. By animating the size, the position — or both! — there’s an infinite number of loader possibilities at our fingertips.</p>\n\n\n\n<p>And once we get comfortable with such a technique we can go further and use a more complex gradient to create even <em>more</em> loaders.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vYxvxrV\" src=\"//codepen.io/anon/embed/preview/vYxvxrV?height=450&amp;theme-id=1&amp;slug-hash=vYxvxrV&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vYxvxrV\" title=\"CodePen Embed vYxvxrV\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Expect for the last two examples in that demo, all of the bar loaders use the same underlying markup and styles and different combinations of animations. Open the code and try to visualize each frame independently; you’ll see how relatively trivial it is to make dozens — <a href=\"https://dev.to/afif/i-made-100-css-loaders-for-your-next-project-4eje\" rel=\"noopener\">if not hundreds</a> — of variations.</p>\n\n\n\n<h3>Getting fancy</h3>\n\n\n\n<p>Did you remember the mask trick we did with the dot loaders in <a href=\"https://css-tricks.com/single-element-loaders-the-dots\">the second article of this series</a>? We can do the same here!</p>\n\n\n\n<p>If we apply all the above logic inside the <code>mask</code> property we can use any background configuration to add a fancy coloration to our loaders.</p>\n\n\n\n<p>Let’s take one demo and update it:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_BaYqggw\" src=\"//codepen.io/anon/embed/BaYqggw?height=450&amp;theme-id=1&amp;slug-hash=BaYqggw&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed BaYqggw\" title=\"CodePen Embed BaYqggw\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>All I did is updating all the <code>background-*</code> with <code>mask-*</code> and I added a gradient coloration. As simple as that and yet we get another cool loader.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>So there is no difference between the dots and the bars?</p></blockquote>\n\n\n\n<p>No difference! I wrote two different articles to cover as many examples as possible but in both, I am relying on the same techniques:</p>\n\n\n\n<ol><li>Gradients to create the shapes (dots or bars or maybe something else)</li><li>Animating <code>background-size</code> and/or <code>background-position</code> to create the loader animation</li><li>Adding mask to add a touch of colors</li></ol>\n\n\n\n<h3>Rounding the bars</h3>\n\n\n\n<p>Let’s try something different this time where we can round the edges of our bars.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoEeMYO\" src=\"//codepen.io/anon/embed/preview/PoEeMYO?height=450&amp;theme-id=1&amp;slug-hash=PoEeMYO&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoEeMYO\" title=\"CodePen Embed PoEeMYO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Using one element and its <code>::before</code> and <code>::after</code> pseudos, we define three identical bars:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  --s: 100px; /* control the size */\n\n  display: grid;\n  place-items: center;\n  place-content: center;\n  margin: 0 calc(var(--s) / 2); /* 50px */\n}\n.loader::before,\n.loader::after {\n  content: \"\";\n  grid-area: 1/1;\n}\n.loader,\n.loader::before,\n.loader::after {\n  height: var(--s);\n  width: calc(var(--s) / 5); /* 20px */\n  border-radius: var(--s);\n  transform: translate(calc(var(--_i, 0) * 200%));\n}\n.loader::before { --_i: -1; }\n.loader::after { --_i:  1; }</code></pre>\n\n\n\n<p>That gives us three bars, this time without relying on a linear gradient:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"448\" height=\"553\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651609226578_image.png?resize=448%2C553&#038;ssl=1\" alt=\"\" class=\"wp-image-366530\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651609226578_image.png?w=448&amp;ssl=1 448w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651609226578_image.png?resize=243%2C300&amp;ssl=1 243w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now the trick is to fill in those bars with a lovely gradient. To simulate a continuous gradient, we need to play with <code>background</code> properties. In the above figure, the green area defines the area covered by the loader. That area should be the size of the gradient and, if we do the math, it’s equal to multiplying both sides labeled <code>S</code> in the diagram, or <code>background-size: var(--s) var(--s)</code>.</p>\n\n\n\n<p>Since our elements are individually placed, we need to update the position of the gradient inside each one to make sure all of them overlap. This way, we’re simulating one continuous gradient even though it’s really three of them.</p>\n\n\n\n<p>For the main element (placed at the center), the background needs to be at the center. We use the following:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  /* etc. */\n  background: linear-gradient() 50% / var(--s) var(--s);\n}</code></pre>\n\n\n\n<p>For the pseudo-element on the left, we need the background on the left</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader::before {\n  /* etc. */\n  background: linear-gradient() 0% / var(--s) var(--s);\n}</code></pre>\n\n\n\n<p>And for the pseudo on the right, the background needs to be positioned to the right:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader::after {\n  background: linear-gradient() 100% / var(--s) var(--s);\n}</code></pre>\n\n\n\n<p>Using the same CSS variable, <code>--_i</code>, that we used for the translate, we can write the code like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"3,20\"><code markup=\"tt\">.loader {\n  --s: 100px; /* control the size */\n  --c: linear-gradient(/* etc. */); /* control the coloration */\n\n  display: grid;\n  place-items: center;\n  place-content: center;\n}\n.loader::before,\n.loader::after{\n  content: \"\";\n  grid-area: 1/1;\n}\n.loader,\n.loader::before,\n.loader::after{\n  height: var(--s);\n  width: calc(var(--s) / 5);\n  border-radius: var(--s);\n  background: var(--c) calc(50% + var(--_i, 0) * 50%) / var(--s) var(--s);\n  transform: translate(calc(var(--_i, 0) * 200%));\n}\n.loader::before { --_i: -1; }\n.loader::after  { --_i:  1; }</code></pre>\n\n\n\n<p>Now, all we have to do is to animate the height and add some delays! Here are three examples where all that’s different are the colors and sizes:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBxEzeV/bdae7decca2724c24e7dc97c534d7847\" src=\"//codepen.io/anon/embed/preview/qBxEzeV/bdae7decca2724c24e7dc97c534d7847?height=450&amp;theme-id=1&amp;slug-hash=qBxEzeV/bdae7decca2724c24e7dc97c534d7847&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBxEzeV/bdae7decca2724c24e7dc97c534d7847\" title=\"CodePen Embed qBxEzeV/bdae7decca2724c24e7dc97c534d7847\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Wrapping up</h3>\n\n\n\n<p>I hope so far you are feeling super encouraged by all the powers you have to make complex-looking loading animations. All we need is one element, either gradients or pseudos to draw the bars, then some keyframes to move things around. That’s the entire recipe for getting an endless number of possibilities, so go out and starting cooking up some neat stuff!</p>\n\n\n\n<p>Until the next article, I will leave you with a funny collection of loaders where I am combining <strong>the dots</strong> and <strong>the bars</strong>!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOmooGQ\" src=\"//codepen.io/anon/embed/preview/gOmooGQ?height=450&amp;theme-id=1&amp;slug-hash=gOmooGQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOmooGQ\" title=\"CodePen Embed gOmooGQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBrLrMo\" src=\"//codepen.io/anon/embed/preview/qBrLrMo?height=450&amp;theme-id=1&amp;slug-hash=qBrLrMo&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBrLrMo\" title=\"CodePen Embed qBrLrMo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-container-4 wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container\">\n<h4>Article series</h4>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">Single Element Loaders: The Spinner</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-dots/\">Single Element Loaders: The Dots</a></li><li>Single Element Loaders: The Bars — <em>you are here</em></li><li>Single Element Loaders: Going 3D — <em>coming July 1</em></li></ul>\n</div></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/single-element-loaders-the-bars/\">Single Element Loaders: The Bars</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "We’ve looked at spinners. We’ve looked at dots. Now we’re going to tackle another common pattern for loaders: bars. And we’re going to do the same thing in this third article of the series as we have the others by making it with only one element and with flexible CSS that makes it easy to create variations.\n\n\n\n\n\n\n\n\nArticle series\n\n\n\nSingle Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The Bars — you are hereSingle Element Loaders: Going 3D — coming July 1\n\n\n\n\nLet’s start with not one, not two, but 20 examples of bar loaders.\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nWhat?! Are you going to detail each one of them? That’s too much for an article!\n\n\n\nIt might seem like that at first glance! But all of them rely on the same code structure and we only update a few values to create variations. That’s all the power of CSS. We don’t learn how to create one loader, but we learn different techniques that allow us to create as much loader as we want using merely the same code structure.\n\n\n\nLet’s make some bars!\n\n\n\nWe start by defining the dimensions for them using width (or height) with aspect-ratio to maintain proportion:\n\n\n\n.bars {\n  width: 45px;\n  aspect-ratio: 1;\n}\n\n\n\nWe sort of “fake” three bars with a linear gradient on the background — very similar to how we created dot loaders in Part 2 of this series.\n\n\n\n.bars {\n  width: 45px;\n  aspect-ratio: 1;\n  --c: no-repeat linear-gradient(#000 0 0); /* we define the color here */\n  background: \n    var(--c) 0%   50%,\n    var(--c) 50%  50%,\n    var(--c) 100% 50%;\n  background-size: 20% 100%; /* 20% * (3 bars + 2 spaces) = 100% */\n}\n\n\n\nThe above code will give us the following result:\n\n\n\n\n\n\n\nLike the other articles in this series, we are going to deal with a lot of background trickery. So, if you ever feel like we’re jumping around too fast or feel you need a little more detail, please do check those out. You can also read my Stack Overflow answer where I give a detailed explanation on how all this works.\n\n\n\nAnimating the bars\n\n\n\nWe either animate the element’s size or position to create the bar loader. Let’s animate the size by defining the following animation keyframes:\n\n\n\n@keyframes load {\n  0%   { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 1 */\n  33%  { background-size: 20% 10% , 20% 100%, 20% 100%; }  /* 2 */\n  50%  { background-size: 20% 100%, 20% 10% , 20% 100%; }  /* 3 */\n  66%  { background-size: 20% 100%, 20% 100%, 20% 10%;  }  /* 4 */\n  100% { background-size: 20% 100%, 20% 100%, 20% 100%; }  /* 5 */\n}\n\n\n\nSee what’s happening there? Between 0% and 100%, the animation changes the background-size of the element’s background gradient. Each keyframe sets three background sizes (one for each gradient).\n\n\n\n\n\n\n\nAnd here’s what we get:\n\n\n\nCodePen Embed Fallback\n\n\n\nCan you start to imagine all the possible variations we can get by playing with different animation configurations for the sizes or the positions?\n\n\n\nLet’s fix the size to 20% 50% and update the positions this time:\n\n\n\n.loader {\n  width: 45px;\n  aspect-ratio: .75;\n  --c: no-repeat linear-gradient(#000 0 0);\n  background: \n    var(--c),\n    var(--c),\n    var(--c);\n  background-size: 20% 50%;\n  animation: load 1s infinite linear;\n}\n@keyframes load {\n  0%   { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 1 */\n  20%  { background-position: 0% 50% , 50% 100%, 100% 100%; } /* 2 */\n  40%  { background-position: 0% 0%  , 50% 50% , 100% 100%; } /* 3 */\n  60%  { background-position: 0% 100%, 50% 0%  , 100% 50%;  } /* 4 */\n  80%  { background-position: 0% 100%, 50% 100%, 100% 0%;   } /* 5 */ \n  100% { background-position: 0% 100%, 50% 100%, 100% 100%; } /* 6 */\n}\n\n\n\n\n\n\n\n…which gets us another loader!\n\n\n\nCodePen Embed Fallback\n\n\n\nYou’ve probably got the trick by now. All you need is to define a timeline that you translate into a keyframe. By animating the size, the position — or both! — there’s an infinite number of loader possibilities at our fingertips.\n\n\n\nAnd once we get comfortable with such a technique we can go further and use a more complex gradient to create even more loaders.\n\n\n\nCodePen Embed Fallback\n\n\n\nExpect for the last two examples in that demo, all of the bar loaders use the same underlying markup and styles and different combinations of animations. Open the code and try to visualize each frame independently; you’ll see how relatively trivial it is to make dozens — if not hundreds — of variations.\n\n\n\nGetting fancy\n\n\n\nDid you remember the mask trick we did with the dot loaders in the second article of this series? We can do the same here!\n\n\n\nIf we apply all the above logic inside the mask property we can use any background configuration to add a fancy coloration to our loaders.\n\n\n\nLet’s take one demo and update it:\n\n\n\nCodePen Embed Fallback\n\n\n\nAll I did is updating all the background-* with mask-* and I added a gradient coloration. As simple as that and yet we get another cool loader.\n\n\n\nSo there is no difference between the dots and the bars?\n\n\n\nNo difference! I wrote two different articles to cover as many examples as possible but in both, I am relying on the same techniques:\n\n\n\nGradients to create the shapes (dots or bars or maybe something else)Animating background-size and/or background-position to create the loader animationAdding mask to add a touch of colors\n\n\n\nRounding the bars\n\n\n\nLet’s try something different this time where we can round the edges of our bars.\n\n\n\nCodePen Embed Fallback\n\n\n\nUsing one element and its ::before and ::after pseudos, we define three identical bars:\n\n\n\n.loader {\n  --s: 100px; /* control the size */\n\n  display: grid;\n  place-items: center;\n  place-content: center;\n  margin: 0 calc(var(--s) / 2); /* 50px */\n}\n.loader::before,\n.loader::after {\n  content: \"\";\n  grid-area: 1/1;\n}\n.loader,\n.loader::before,\n.loader::after {\n  height: var(--s);\n  width: calc(var(--s) / 5); /* 20px */\n  border-radius: var(--s);\n  transform: translate(calc(var(--_i, 0) * 200%));\n}\n.loader::before { --_i: -1; }\n.loader::after { --_i:  1; }\n\n\n\nThat gives us three bars, this time without relying on a linear gradient:\n\n\n\n\n\n\n\nNow the trick is to fill in those bars with a lovely gradient. To simulate a continuous gradient, we need to play with background properties. In the above figure, the green area defines the area covered by the loader. That area should be the size of the gradient and, if we do the math, it’s equal to multiplying both sides labeled S in the diagram, or background-size: var(--s) var(--s).\n\n\n\nSince our elements are individually placed, we need to update the position of the gradient inside each one to make sure all of them overlap. This way, we’re simulating one continuous gradient even though it’s really three of them.\n\n\n\nFor the main element (placed at the center), the background needs to be at the center. We use the following:\n\n\n\n.loader {\n  /* etc. */\n  background: linear-gradient() 50% / var(--s) var(--s);\n}\n\n\n\nFor the pseudo-element on the left, we need the background on the left\n\n\n\n.loader::before {\n  /* etc. */\n  background: linear-gradient() 0% / var(--s) var(--s);\n}\n\n\n\nAnd for the pseudo on the right, the background needs to be positioned to the right:\n\n\n\n.loader::after {\n  background: linear-gradient() 100% / var(--s) var(--s);\n}\n\n\n\nUsing the same CSS variable, --_i, that we used for the translate, we can write the code like this:\n\n\n\n.loader {\n  --s: 100px; /* control the size */\n  --c: linear-gradient(/* etc. */); /* control the coloration */\n\n  display: grid;\n  place-items: center;\n  place-content: center;\n}\n.loader::before,\n.loader::after{\n  content: \"\";\n  grid-area: 1/1;\n}\n.loader,\n.loader::before,\n.loader::after{\n  height: var(--s);\n  width: calc(var(--s) / 5);\n  border-radius: var(--s);\n  background: var(--c) calc(50% + var(--_i, 0) * 50%) / var(--s) var(--s);\n  transform: translate(calc(var(--_i, 0) * 200%));\n}\n.loader::before { --_i: -1; }\n.loader::after  { --_i:  1; }\n\n\n\nNow, all we have to do is to animate the height and add some delays! Here are three examples where all that’s different are the colors and sizes:\n\n\n\nCodePen Embed Fallback\n\n\n\nWrapping up\n\n\n\nI hope so far you are feeling super encouraged by all the powers you have to make complex-looking loading animations. All we need is one element, either gradients or pseudos to draw the bars, then some keyframes to move things around. That’s the entire recipe for getting an endless number of possibilities, so go out and starting cooking up some neat stuff!\n\n\n\nUntil the next article, I will leave you with a funny collection of loaders where I am combining the dots and the bars!\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\n\nArticle series\n\n\n\nSingle Element Loaders: The SpinnerSingle Element Loaders: The DotsSingle Element Loaders: The Bars — you are hereSingle Element Loaders: Going 3D — coming July 1\n\n\nSingle Element Loaders: The Bars originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-06-24T20:00:29.000Z",
      "date_modified": "2022-06-24T20:00:29.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366452",
      "url": "https://css-tricks.com/different-ways-to-write-css-in-react/",
      "title": "Different Ways to Write CSS in React",
      "summary": "We’re all familiar with the standard way of linking up a stylesheet to the <head> of an HTML doc, right? That’s just one of several ways we’re able to write CSS. But what does it look like to style things …\n\nDifferent Ways to Write CSS in React originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>We’re all familiar with the standard way of <a href=\"https://css-tricks.com/css-basics-second-s-css/\">linking up a stylesheet</a> to the <code>&lt;head&gt;</code> of an HTML doc, right? That’s just one of several ways we’re able to write CSS. But what does it look like to style things in a single-page application (SPA), say in a React project?</p>\n\n\n\n<p>Turns out there are several ways to go about styling a React application. Some overlap with traditional styling, others not so much. But let’s count all the ways we can do it.</p>\n\n\n\n<span id=\"more-366452\"></span>\n\n\n\n<h3>Importing external stylesheets</h3>\n\n\n\n<p>As the name suggests, React can import CSS files. The process is similar to how we link up CSS file in the HTML <code>&lt;head&gt;</code>:</p>\n\n\n\n<ol><li>Create a new CSS file in your project directory.</li><li>Write CSS.</li><li>Import it into the React file.</li></ol>\n\n\n\n<p>Like this:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">import \"./style.css\";</code></pre>\n\n\n\n<p>That usually goes at the top of the file where other imports happen:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"1\"><code markup=\"tt\">import { React } from \"react\";\nimport \"./Components/css/App.css\";\nfunction App() {\n  return (\n    &lt;div className=\"main\">\n    &lt;/div>\n  );\n}\nexport default App;</code></pre>\n\n\n\n<p>In this example, a CSS file is imported into an <code>App.js</code> from the <code>/Components/css</code> folder.</p>\n\n\n\n<h3>Write inline styles</h3>\n\n\n\n<p>You may be used to hearing that inline styling isn’t all that great for maintainability and whatnot, but there are definitely situations (<a href=\"https://css-tricks.com/want-to-write-a-hover-effect-with-inline-css-use-css-variables/\">here’s one!</a>) where it makes sense. And maintainability is less of an issue in React, as the CSS often already sits inside the same file anyway.</p>\n\n\n\n<p>This is a super simple example of inline styling in React:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">&lt;div className=\"main\" style={{color:\"red\"}}></code></pre>\n\n\n\n<p>A better approach, though, is to use objects:</p>\n\n\n\n<ol><li>First, create an object that contains styles for different elements.</li><li>Then add it to an element using the <code>style</code> attribute and then select the property to style.</li></ol>\n\n\n\n<p>Let’s see that in context:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"3,14,15,16\"><code markup=\"tt\">import { React } from \"react\";\nfunction App() {\n  const styles = {\n    main: {\n      backgroundColor: \"#f1f1f1\",\n      width: \"100%\",\n    },\n    inputText: {\n      padding: \"10px\",\n      color: \"red\",\n    },\n  };\n  return (\n    &lt;div className=\"main\" style={styles.main}>\n      &lt;input type=\"text\" style={styles.inputText}>&lt;/input>\n    &lt;/div>\n  );\n}\nexport default App;</code></pre>\n\n\n\n<p>This example contains a <code>styles</code> object containing two more objects, one for the <code>.main</code> class and the other for a text input, which contain style rules similar to what we’d expect to see in an external stylesheet. Those objects are then applied to the <code>style</code> attribute of elements that are in the returned markup.</p>\n\n\n\n<p>Note that curly brackets are used when referencing styles rather than the quotation marks we’d normally use in plain HTML.</p>\n\n\n\n<h3>Use CSS Modules</h3>\n\n\n\n<p><a href=\"https://css-tricks.com/css-modules-part-1-need/\">CSS Modules</a>… what the heck happened to those, right? They have the benefit of locally scoped variables and can be used right alongside React. But what are they, again, exactly?</p>\n\n\n\n<p>Quoting the <a href=\"https://github.com/css-modules/css-modules/blob/master/docs/get-started.md\" rel=\"noopener\">repo’s documentation</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>CSS Modules works by compiling individual CSS files into both CSS and data. The CSS output is normal, global CSS, which can be injected directly into the browser or concatenated together and written to a file for production use. The data is used to map the human-readable names you&#8217;ve used in the files to the globally-safe output CSS.</p></blockquote>\n\n\n\n<p>In simpler terms, CSS Modules allows us to use the same class name in multiple files without clashes since each class name is given a unique programmatic name. This is especially useful in larger applications. Every class name is scoped locally to the specific component in which it is being imported.</p>\n\n\n\n<p>A CSS Module stylesheet is similar to a regular stylesheet, only with a different extension (e.g. <code>styles.module.css</code>). Here’s how they’re set up:</p>\n\n\n\n<ol><li>Create a file with <code>.module.css</code> as the extension.</li><li>Import that module into the React app (like we saw earlier)</li><li>Add a <code>className</code> to an element or component and reference the particular style from the imported styles.</li></ol>\n\n\n\n<p>Super simple example:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">/* styles.module.css */\n.font {\n  color: #f00;\n  font-size: 20px;\n}\n\nimport { React } from \"react\";\nimport styles from \"./styles.module.css\";\nfunction App() {\n  return (\n    &lt;h1 className={styles.heading}>Hello World&lt;/h1>\n  );\n}\nexport default App;</code></pre>\n\n\n\n<h3>Use styled-components</h3>\n\n\n\n<p>Have you used <a href=\"https://styled-components.com/docs/basics\" rel=\"noopener\">styled-components</a>? It’s quite popular and allows you to build custom components using actual CSS in your JavaScript. A styled-component is basically a React component with — get ready for it — styles. Some of the features include unique class names, dynamic styling and better management of the CSS as each component has its own separate styles.</p>\n\n\n\n<p>Install the styled-components npm package in the command line:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npm install styled-components</code></pre>\n\n\n\n<p>Next up, import it into the React app:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">import styled from 'styled-components'</code></pre>\n\n\n\n<p>Create a component and assign a styled property to it. Note the use of template literals denoted by backticks in the <code>Wrapper</code> object:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">import { React } from \"react\";\nimport styled from \"styled-components\";\nfunction App() {\n  const Wrapper = styled.div`\n    width: 100%;\n    height: 100px;\n    background-color: red;\n    display: block;\n  `;\n  return &lt;Wrapper />;\n}\nexport default App;</code></pre>\n\n\n\n<p>The above <code>Wrapper</code> component will be rendered as a div that contains those styles.</p>\n\n\n\n<h3>Conditional styling</h3>\n\n\n\n<p>One of the advantages of styled-components is that the components themselves are functional, as in you can use props within the CSS. This opens the door up to conditional statements and changing styles based on a state or prop.</p>\n\n\n\n<p>Here’s a demo showing that off:</p>\n\n\n\n<iframe src=\"https://codesandbox.io/embed/conditional-styling-158h7n?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:300px; border:0; border-radius: 4px; overflow:hidden; margin-block-end: 1.5rem;\" title=\"Conditional Styling\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n\n<p>Here, we are manipulating the div’s <code>display</code> property on the display state. This state is controlled by a button that toggles the div’s state when clicked. This, in turn, toggles between the styles of two different states.</p>\n\n\n\n<p>In inline <code>if</code> statements, we use a <code>?</code> instead of the usual <code>if</code>/<code>else</code> syntax. The <code>else</code> part is after the semicolon. And remember to always call or use the state after it has been initialized. In that last demo, for example, the state should be above the <code>Wrapper</code> component’s styles.</p>\n\n\n\n<h3>Happy React styling!</h3>\n\n\n\n<p>That’s a wrap, folks! We looked at a handful of different ways to write styles in a React application. And it’s not like one is any better than the rest; the approach you use depends on the situation, of course. Hopefully now you’ve got a good understanding of them and know that you have a bunch of tools in your React styling arsenal.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/different-ways-to-write-css-in-react/\">Different Ways to Write CSS in React</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "We’re all familiar with the standard way of linking up a stylesheet to the <head> of an HTML doc, right? That’s just one of several ways we’re able to write CSS. But what does it look like to style things in a single-page application (SPA), say in a React project?\n\n\n\nTurns out there are several ways to go about styling a React application. Some overlap with traditional styling, others not so much. But let’s count all the ways we can do it.\n\n\n\n\n\n\n\nImporting external stylesheets\n\n\n\nAs the name suggests, React can import CSS files. The process is similar to how we link up CSS file in the HTML <head>:\n\n\n\nCreate a new CSS file in your project directory.Write CSS.Import it into the React file.\n\n\n\nLike this:\n\n\n\nimport \"./style.css\";\n\n\n\nThat usually goes at the top of the file where other imports happen:\n\n\n\nimport { React } from \"react\";\nimport \"./Components/css/App.css\";\nfunction App() {\n  return (\n    <div className=\"main\">\n    </div>\n  );\n}\nexport default App;\n\n\n\nIn this example, a CSS file is imported into an App.js from the /Components/css folder.\n\n\n\nWrite inline styles\n\n\n\nYou may be used to hearing that inline styling isn’t all that great for maintainability and whatnot, but there are definitely situations (here’s one!) where it makes sense. And maintainability is less of an issue in React, as the CSS often already sits inside the same file anyway.\n\n\n\nThis is a super simple example of inline styling in React:\n\n\n\n<div className=\"main\" style={{color:\"red\"}}>\n\n\n\nA better approach, though, is to use objects:\n\n\n\nFirst, create an object that contains styles for different elements.Then add it to an element using the style attribute and then select the property to style.\n\n\n\nLet’s see that in context:\n\n\n\nimport { React } from \"react\";\nfunction App() {\n  const styles = {\n    main: {\n      backgroundColor: \"#f1f1f1\",\n      width: \"100%\",\n    },\n    inputText: {\n      padding: \"10px\",\n      color: \"red\",\n    },\n  };\n  return (\n    <div className=\"main\" style={styles.main}>\n      <input type=\"text\" style={styles.inputText}></input>\n    </div>\n  );\n}\nexport default App;\n\n\n\nThis example contains a styles object containing two more objects, one for the .main class and the other for a text input, which contain style rules similar to what we’d expect to see in an external stylesheet. Those objects are then applied to the style attribute of elements that are in the returned markup.\n\n\n\nNote that curly brackets are used when referencing styles rather than the quotation marks we’d normally use in plain HTML.\n\n\n\nUse CSS Modules\n\n\n\nCSS Modules… what the heck happened to those, right? They have the benefit of locally scoped variables and can be used right alongside React. But what are they, again, exactly?\n\n\n\nQuoting the repo’s documentation:\n\n\n\nCSS Modules works by compiling individual CSS files into both CSS and data. The CSS output is normal, global CSS, which can be injected directly into the browser or concatenated together and written to a file for production use. The data is used to map the human-readable names you’ve used in the files to the globally-safe output CSS.\n\n\n\nIn simpler terms, CSS Modules allows us to use the same class name in multiple files without clashes since each class name is given a unique programmatic name. This is especially useful in larger applications. Every class name is scoped locally to the specific component in which it is being imported.\n\n\n\nA CSS Module stylesheet is similar to a regular stylesheet, only with a different extension (e.g. styles.module.css). Here’s how they’re set up:\n\n\n\nCreate a file with .module.css as the extension.Import that module into the React app (like we saw earlier)Add a className to an element or component and reference the particular style from the imported styles.\n\n\n\nSuper simple example:\n\n\n\n/* styles.module.css */\n.font {\n  color: #f00;\n  font-size: 20px;\n}\n\nimport { React } from \"react\";\nimport styles from \"./styles.module.css\";\nfunction App() {\n  return (\n    <h1 className={styles.heading}>Hello World</h1>\n  );\n}\nexport default App;\n\n\n\nUse styled-components\n\n\n\nHave you used styled-components? It’s quite popular and allows you to build custom components using actual CSS in your JavaScript. A styled-component is basically a React component with — get ready for it — styles. Some of the features include unique class names, dynamic styling and better management of the CSS as each component has its own separate styles.\n\n\n\nInstall the styled-components npm package in the command line:\n\n\n\nnpm install styled-components\n\n\n\nNext up, import it into the React app:\n\n\n\nimport styled from 'styled-components'\n\n\n\nCreate a component and assign a styled property to it. Note the use of template literals denoted by backticks in the Wrapper object:\n\n\n\nimport { React } from \"react\";\nimport styled from \"styled-components\";\nfunction App() {\n  const Wrapper = styled.div`\n    width: 100%;\n    height: 100px;\n    background-color: red;\n    display: block;\n  `;\n  return <Wrapper />;\n}\nexport default App;\n\n\n\nThe above Wrapper component will be rendered as a div that contains those styles.\n\n\n\nConditional styling\n\n\n\nOne of the advantages of styled-components is that the components themselves are functional, as in you can use props within the CSS. This opens the door up to conditional statements and changing styles based on a state or prop.\n\n\n\nHere’s a demo showing that off:\n\n\n\n\n\n\n\nHere, we are manipulating the div’s display property on the display state. This state is controlled by a button that toggles the div’s state when clicked. This, in turn, toggles between the styles of two different states.\n\n\n\nIn inline if statements, we use a ? instead of the usual if/else syntax. The else part is after the semicolon. And remember to always call or use the state after it has been initialized. In that last demo, for example, the state should be above the Wrapper component’s styles.\n\n\n\nHappy React styling!\n\n\n\nThat’s a wrap, folks! We looked at a handful of different ways to write styles in a React application. And it’s not like one is any better than the rest; the approach you use depends on the situation, of course. Hopefully now you’ve got a good understanding of them and know that you have a bunch of tools in your React styling arsenal.\n\nDifferent Ways to Write CSS in React originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-06-22T14:24:37.000Z",
      "date_modified": "2022-06-22T14:24:37.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366342",
      "url": "https://css-tricks.com/single-element-loaders-the-dots/",
      "title": "Single Element Loaders: The Dots",
      "summary": "We’re looking at loaders in this series. More than that, we’re breaking down some common loader patterns and how to re-create them with nothing more than a single div. So far, we’ve picked apart the classic spinning loader. Now, …\n\nSingle Element Loaders: The Dots originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>We’re looking at loaders in this series. More than that, we’re breaking down some common loader patterns and how to re-create them with nothing more than a single div. So far, we’ve picked apart <a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">the classic spinning loader</a>. Now, let’s look at another one you’re likely well aware of: <strong>the dots.</strong></p>\n\n\n\n<p>Dot loaders are all over the place. They’re neat because they usually consist of three dots that sort of look like a text ellipsis (…) that dances around.</p>\n\n\n\n<span id=\"more-366342\"></span>\n\n\n\n<div class=\"wp-container-7 wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container\">\n<h4>Article series</h4>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">Single Element Loaders: The Spinner</a></li><li>Single Element Loaders: The Dots — <em>you are here</em></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-bars/\">Single Element Loaders: The Bars</a></li><li>Single Element Loaders: Going 3D — <em>coming July 1</em></li></ul>\n</div></div>\n\n\n\n<p>Our goal here is to make this same thing out of a single div element. In other words, there is no one div per dot or individual animations for each dot.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxpyoqL\" src=\"//codepen.io/anon/embed/xxpyoqL?height=450&amp;theme-id=1&amp;slug-hash=xxpyoqL&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxpyoqL\" title=\"CodePen Embed xxpyoqL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>That example of a loader up above is made with a single div element, a few CSS declarations, and no pseudo-elements. I am combining two techniques using CSS <code>background</code> and <code>mask</code>. And when we’re done, we’ll see how animating a background gradient helps create the illusion of each dot changing colors as they move up and down in succession.</p>\n\n\n\n<h3>The background animation</h3>\n\n\n\n<p>Let’s start with the background animation:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  width: 180px; /* this controls the size */\n  aspect-ratio: 8/5; /* maintain the scale */\n  background: \n    conic-gradient(red   50%, blue   0) no-repeat, /* top colors */\n    conic-gradient(green 50%, purple 0) no-repeat; /* bottom colors */\n  background-size: 200% 50%; \n  animation: back 4s infinite linear; /* applies the animation */\n}\n\n/* define the animation */\n@keyframes back {\n  0%,                       /* X   Y , X     Y */\n  100% { background-position: 0%   0%, 0%   100%; }\n  25%  { background-position: 100% 0%, 0%   100%; }\n  50%  { background-position: 100% 0%, 100% 100%; }\n  75%  { background-position: 0%   0%, 100% 100%; }\n}</code></pre>\n\n\n\n<p>I hope this looks pretty straightforward. What we’ve got is a <code>180px</code>-wide <code>.loader</code> element that shows two conic gradients sporting hard color stops between two colors each — the first gradient is red and blue along the top half of the <code>.loader</code>, and the second gradient is green and purple along the bottom half.</p>\n\n\n\n<p>The way the loader’s background is sized (<code>200%</code> wide), we only see one of those colors in each half at a time. Then we have this little animation that pushes the position of those background gradients left, right, and back again forever and ever.</p>\n\n\n\n<p>When dealing with background properties — especially <code>background-position</code> — I always refer to my <a href=\"https://stackoverflow.com/a/51734530/8620333\" rel=\"noopener\">Stack Overflow answer where I am giving a detailed explanation</a> on how all this works. If you are uncomfortable with CSS background trickery, I highly recommend reading that answer to help with what comes next.</p>\n\n\n\n<p>In the animation, notice that the first layer is <code>Y=0%</code> (placed at the top) while <code>X</code> is changes from <code>0%</code> to <code>100%.</code> For the second layer, we have the same for <code>X</code> but <code>Y=100%</code> (placed at the bottom).</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOvOjZy\" src=\"//codepen.io/anon/embed/gOvOjZy?height=450&amp;theme-id=1&amp;slug-hash=gOvOjZy&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOvOjZy\" title=\"CodePen Embed gOvOjZy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Why using a <code>conic-gradient()</code> instead of <code>linear-gradient()</code>?</p></blockquote>\n\n\n\n<p>Good question! Intuitively, we should use a linear gradient to create a two-color gradients like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">linear-gradient(90deg, red 50%, blue 0)</code></pre>\n\n\n\n<p>But we can also reach for the same using a <code>conic-gradient()</code> — and with less of code. We reduce the code and also learn a new trick in the process!</p>\n\n\n\n<p>Sliding the colors left and right is a nice way to make it look like we’re changing colors, but it might be better if we instantly change colors instead — that way, there’s no chance of a loader dot flashing two colors at the same time. To do this, let&#8217;s change the <code>animation</code>&#8216;s timing function from <code>linear</code> to <code>steps(1)</code></p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKQKBYM\" src=\"//codepen.io/anon/embed/KKQKBYM?height=450&amp;theme-id=1&amp;slug-hash=KKQKBYM&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKQKBYM\" title=\"CodePen Embed KKQKBYM\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>The loader dots</h3>\n\n\n\n<p>If you followed along with the <a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">first article in this series</a>, I bet you know what comes next: <strong>CSS masks!</strong> What makes masks so great is that they let us sort of <a href=\"https://css-tricks.com/clipping-masking-css/\">“cut out” parts of a background</a> in the shape of another element. So, in this case, we want to make a few dots, show the background gradients through the dots, and cut out any parts of the background that are not part of a dot.</p>\n\n\n\n<p>We are going to use <code>radial-gradient()</code> for this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4,5,6,7,8,9\"><code markup=\"tt\">.loader {\n  width: 180px;\n  aspect-ratio: 8/5;\n  mask:\n    radial-gradient(#000 68%, #0000 71%) no-repeat,\n    radial-gradient(#000 68%, #0000 71%) no-repeat,\n    radial-gradient(#000 68%, #0000 71%) no-repeat;\n  mask-size: 25% 40%; /* the size of our dots */\n}</code></pre>\n\n\n\n<p>There&#8217;s some duplicated code in there, so let&#8217;s make a CSS variable to slim things down:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4\"><code markup=\"tt\">.loader {\n  width: 180px;\n  aspect-ratio: 8/5;\n  --_g: radial-gradient(#000 68%, #0000 71%) no-repeat;\n  mask: var(--_g),var(--_g),var(--_g);\n  mask-size: 25% 40%;\n}</code></pre>\n\n\n\n<p>Cool cool. But now we need a new animation that helps move the dots up and down between the animated gradients.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  /* same as before */\n  animation: load 2s infinite;\n}\n\n@keyframes load {      /* X  Y,     X   Y,    X   Y */\n  0%     { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */\n  16.67% { mask-position: 0% 100%, 50% 0%  , 100% 0%; }\n  33.33% { mask-position: 0% 100%, 50% 100%, 100% 0%; }\n  50%    { mask-position: 0% 100%, 50% 100%, 100% 100%; } /* all of them at the bottom */\n  66.67% { mask-position: 0% 0%  , 50% 100%, 100% 100%; }\n  83.33% { mask-position: 0% 0%  , 50% 0%  , 100% 100%; }\n  100%   { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */\n}</code></pre>\n\n\n\n<p>Yes, that’s a total of three radial gradients in there, all with the same configuration and the same size — the animation will update the position of each one. Note that the <code>X</code> coordinate of each dot is fixed. The <code>mask-position</code> is defined such that the first dot is at the left (<code>0%</code>), the second one at the center (<code>50%</code>), and the third one at the right (<code>100%</code>). We only update the <code>Y</code> coordinate from <code>0%</code> to <code>100%</code> to make the dots dance.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"523\" height=\"362\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651441844341_image.png?resize=523%2C362&#038;ssl=1\" alt=\"Dot loader dots with labels showing their changing positions.\" class=\"wp-image-366345\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651441844341_image.png?w=523&amp;ssl=1 523w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651441844341_image.png?resize=300%2C208&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Here’s what we get:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abqbamK\" src=\"//codepen.io/anon/embed/abqbamK?height=450&amp;theme-id=1&amp;slug-hash=abqbamK&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abqbamK\" title=\"CodePen Embed abqbamK\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now, combine this with our gradient animation and magic starts to happen:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vYdYzxq\" src=\"//codepen.io/anon/embed/vYdYzxq?height=450&amp;theme-id=1&amp;slug-hash=vYdYzxq&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vYdYzxq\" title=\"CodePen Embed vYdYzxq\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Dot loader variations</h3>\n\n\n\n<p>The CSS variable we made in the last example makes it all that much easier to swap in new colors and create more variations of the same loader. For example, different colors and sizes:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poaoOww\" src=\"//codepen.io/anon/embed/poaoOww?height=450&amp;theme-id=1&amp;slug-hash=poaoOww&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poaoOww\" title=\"CodePen Embed poaoOww\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>What about another movement for our dots?</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoQLQXe\" src=\"//codepen.io/anon/embed/PoQLQXe?height=450&amp;theme-id=1&amp;slug-hash=PoQLQXe&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoQLQXe\" title=\"CodePen Embed PoQLQXe\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here, all I did was update the animation to consider different positions, and we get another loader with the same code structure!</p>\n\n\n\n<p>The animation technique I used for the mask layers can also be used with background layers to create a lot of different loaders with a single color. <a href=\"https://dev.to/afif/build-your-css-loader-with-only-one-div-the-dots-3882\" rel=\"noopener\">I wrote a detailed article about this.</a> You will see that from the same code structure we can create different variations by simply changing a few values. I am sharing a few examples at the end of the article.</p>\n\n\n\n<p>Why not a loader with one dot?</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_JjpWdoQ\" src=\"//codepen.io/anon/embed/preview/JjpWdoQ?height=450&amp;theme-id=1&amp;slug-hash=JjpWdoQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed JjpWdoQ\" title=\"CodePen Embed JjpWdoQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This one should be fairly easy to grok as I am using the same technique but with a more simple logic:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWyOdgv\" src=\"//codepen.io/anon/embed/preview/NWyOdgv?height=450&amp;theme-id=1&amp;slug-hash=NWyOdgv&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWyOdgv\" title=\"CodePen Embed NWyOdgv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here is another example of loader where I am also animating <code>radial-gradient</code> combined with <a href=\"https://css-tricks.com/almanac/properties/f/filter/\">CSS filters</a> and <a href=\"https://css-tricks.com/almanac/properties/m/mix-blend-mode/\"><code>mix-blend-mode</code></a> to create a blobby effect:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWrXvMa\" src=\"//codepen.io/anon/embed/preview/MWrXvMa?height=450&amp;theme-id=1&amp;slug-hash=MWrXvMa&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWrXvMa\" title=\"CodePen Embed MWrXvMa\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If you check the code, you will see that all I am really doing there is animating the <code>background-position</code>, exactly like we did with the previous loader, but adding a dash of <code>background-size</code> to make it look like the blob gets bigger as it absorbs dots.</p>\n\n\n\n<p class=\"is-style-explanation\">If you want to understand the magic behind that blob effect, you can refer to <a href=\"https://codepen.io/thebabydino/project/full/ZjwjBe\" rel=\"noopener\">these interactive slides</a> (Chrome only) by <a href=\"https://twitter.com/anatudor\" rel=\"noopener\">Ana Tudor</a> because she covers the topic so well!</p>\n\n\n\n<p>Here is another dot loader idea, this time using a different technique:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwrWLVb\" src=\"//codepen.io/anon/embed/VwrWLVb?height=450&amp;theme-id=1&amp;slug-hash=VwrWLVb&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwrWLVb\" title=\"CodePen Embed VwrWLVb\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This one is only 10 CSS declarations and a keyframe. The main element and its two pseudo-elements have the same background configuration with one radial gradient. Each one creates one dot, for a total of three. The animation moves the gradient from top to bottom by using different delays for each dot..</p>\n\n\n\n<p>Oh, and take note how this demo uses CSS Grid. This allows us to leverage the grid’s default <code>stretch</code> alignment so that both pseudo-elements cover the whole area of their parent. No need for sizing! Push the around a little with <code>translate()</code> and we’re all set.</p>\n\n\n\n<h3>More examples!</h3>\n\n\n\n<p>Just to drive the point home, I want to leave you with a bunch of additional examples that are really variations of what we’ve looked at. As you view the demos, you’ll see that the approaches we’ve covered here are super flexible and open up tons of design possibilities.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWpKbez\" src=\"//codepen.io/anon/embed/preview/MWpKbez?height=450&amp;theme-id=1&amp;slug-hash=MWpKbez&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWpKbez\" title=\"CodePen Embed MWpKbez\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwpWZBr\" src=\"//codepen.io/anon/embed/preview/VwpWZBr?height=450&amp;theme-id=1&amp;slug-hash=VwpWZBr&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwpWZBr\" title=\"CodePen Embed VwpWZBr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdWppmj\" src=\"//codepen.io/anon/embed/preview/mdWppmj?height=450&amp;theme-id=1&amp;slug-hash=mdWppmj&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdWppmj\" title=\"CodePen Embed mdWppmj\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBrLrox\" src=\"//codepen.io/anon/embed/preview/qBrLrox?height=450&amp;theme-id=1&amp;slug-hash=qBrLrox&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBrLrox\" title=\"CodePen Embed qBrLrox\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNmNqwr\" src=\"//codepen.io/anon/embed/preview/rNmNqwr?height=450&amp;theme-id=1&amp;slug-hash=rNmNqwr&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNmNqwr\" title=\"CodePen Embed rNmNqwr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Next up…</h3>\n\n\n\n<p>OK, so we covered dot loaders in this article and spinners in the last one. In the next article of this four-part series, we’ll turn our attention to another common type of loader: <strong>the bars.</strong> We’ll take a lot of what we learned so far and see how we can extend them to create yet another single element loader with as little code and as much flexibility as possible.</p>\n\n\n\n<div class=\"wp-container-8 wp-block-group ticss-ad1a3c1b\"><div class=\"wp-block-group__inner-container\">\n<h4>Article series</h4>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">Single Element Loaders: The Spinner</a></li><li>Single Element Loaders: The Dots — <em>you are here</em></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-bars/\">Single Element Loaders: The Bars</a></li><li>Single Element Loaders: Going 3D — <em>coming July 1</em></li></ul>\n</div></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/single-element-loaders-the-dots/\">Single Element Loaders: The Dots</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "We’re looking at loaders in this series. More than that, we’re breaking down some common loader patterns and how to re-create them with nothing more than a single div. So far, we’ve picked apart the classic spinning loader. Now, let’s look at another one you’re likely well aware of: the dots.\n\n\n\nDot loaders are all over the place. They’re neat because they usually consist of three dots that sort of look like a text ellipsis (…) that dances around.\n\n\n\n\n\n\n\n\nArticle series\n\n\n\nSingle Element Loaders: The SpinnerSingle Element Loaders: The Dots — you are hereSingle Element Loaders: The BarsSingle Element Loaders: Going 3D — coming July 1\n\n\n\n\nOur goal here is to make this same thing out of a single div element. In other words, there is no one div per dot or individual animations for each dot.\n\n\n\nCodePen Embed Fallback\n\n\n\nThat example of a loader up above is made with a single div element, a few CSS declarations, and no pseudo-elements. I am combining two techniques using CSS background and mask. And when we’re done, we’ll see how animating a background gradient helps create the illusion of each dot changing colors as they move up and down in succession.\n\n\n\nThe background animation\n\n\n\nLet’s start with the background animation:\n\n\n\n.loader {\n  width: 180px; /* this controls the size */\n  aspect-ratio: 8/5; /* maintain the scale */\n  background: \n    conic-gradient(red   50%, blue   0) no-repeat, /* top colors */\n    conic-gradient(green 50%, purple 0) no-repeat; /* bottom colors */\n  background-size: 200% 50%; \n  animation: back 4s infinite linear; /* applies the animation */\n}\n\n/* define the animation */\n@keyframes back {\n  0%,                       /* X   Y , X     Y */\n  100% { background-position: 0%   0%, 0%   100%; }\n  25%  { background-position: 100% 0%, 0%   100%; }\n  50%  { background-position: 100% 0%, 100% 100%; }\n  75%  { background-position: 0%   0%, 100% 100%; }\n}\n\n\n\nI hope this looks pretty straightforward. What we’ve got is a 180px-wide .loader element that shows two conic gradients sporting hard color stops between two colors each — the first gradient is red and blue along the top half of the .loader, and the second gradient is green and purple along the bottom half.\n\n\n\nThe way the loader’s background is sized (200% wide), we only see one of those colors in each half at a time. Then we have this little animation that pushes the position of those background gradients left, right, and back again forever and ever.\n\n\n\nWhen dealing with background properties — especially background-position — I always refer to my Stack Overflow answer where I am giving a detailed explanation on how all this works. If you are uncomfortable with CSS background trickery, I highly recommend reading that answer to help with what comes next.\n\n\n\nIn the animation, notice that the first layer is Y=0% (placed at the top) while X is changes from 0% to 100%. For the second layer, we have the same for X but Y=100% (placed at the bottom).\n\n\n\nCodePen Embed Fallback\n\n\n\nWhy using a conic-gradient() instead of linear-gradient()?\n\n\n\nGood question! Intuitively, we should use a linear gradient to create a two-color gradients like this:\n\n\n\nlinear-gradient(90deg, red 50%, blue 0)\n\n\n\nBut we can also reach for the same using a conic-gradient() — and with less of code. We reduce the code and also learn a new trick in the process!\n\n\n\nSliding the colors left and right is a nice way to make it look like we’re changing colors, but it might be better if we instantly change colors instead — that way, there’s no chance of a loader dot flashing two colors at the same time. To do this, let’s change the animation‘s timing function from linear to steps(1)\n\n\n\nCodePen Embed Fallback\n\n\n\nThe loader dots\n\n\n\nIf you followed along with the first article in this series, I bet you know what comes next: CSS masks! What makes masks so great is that they let us sort of “cut out” parts of a background in the shape of another element. So, in this case, we want to make a few dots, show the background gradients through the dots, and cut out any parts of the background that are not part of a dot.\n\n\n\nWe are going to use radial-gradient() for this:\n\n\n\n.loader {\n  width: 180px;\n  aspect-ratio: 8/5;\n  mask:\n    radial-gradient(#000 68%, #0000 71%) no-repeat,\n    radial-gradient(#000 68%, #0000 71%) no-repeat,\n    radial-gradient(#000 68%, #0000 71%) no-repeat;\n  mask-size: 25% 40%; /* the size of our dots */\n}\n\n\n\nThere’s some duplicated code in there, so let’s make a CSS variable to slim things down:\n\n\n\n.loader {\n  width: 180px;\n  aspect-ratio: 8/5;\n  --_g: radial-gradient(#000 68%, #0000 71%) no-repeat;\n  mask: var(--_g),var(--_g),var(--_g);\n  mask-size: 25% 40%;\n}\n\n\n\nCool cool. But now we need a new animation that helps move the dots up and down between the animated gradients.\n\n\n\n.loader {\n  /* same as before */\n  animation: load 2s infinite;\n}\n\n@keyframes load {      /* X  Y,     X   Y,    X   Y */\n  0%     { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */\n  16.67% { mask-position: 0% 100%, 50% 0%  , 100% 0%; }\n  33.33% { mask-position: 0% 100%, 50% 100%, 100% 0%; }\n  50%    { mask-position: 0% 100%, 50% 100%, 100% 100%; } /* all of them at the bottom */\n  66.67% { mask-position: 0% 0%  , 50% 100%, 100% 100%; }\n  83.33% { mask-position: 0% 0%  , 50% 0%  , 100% 100%; }\n  100%   { mask-position: 0% 0%  , 50% 0%  , 100% 0%; } /* all of them at the top */\n}\n\n\n\nYes, that’s a total of three radial gradients in there, all with the same configuration and the same size — the animation will update the position of each one. Note that the X coordinate of each dot is fixed. The mask-position is defined such that the first dot is at the left (0%), the second one at the center (50%), and the third one at the right (100%). We only update the Y coordinate from 0% to 100% to make the dots dance.\n\n\n\n\n\n\n\nHere’s what we get:\n\n\n\nCodePen Embed Fallback\n\n\n\nNow, combine this with our gradient animation and magic starts to happen:\n\n\n\nCodePen Embed Fallback\n\n\n\nDot loader variations\n\n\n\nThe CSS variable we made in the last example makes it all that much easier to swap in new colors and create more variations of the same loader. For example, different colors and sizes:\n\n\n\nCodePen Embed Fallback\n\n\n\nWhat about another movement for our dots?\n\n\n\nCodePen Embed Fallback\n\n\n\nHere, all I did was update the animation to consider different positions, and we get another loader with the same code structure!\n\n\n\nThe animation technique I used for the mask layers can also be used with background layers to create a lot of different loaders with a single color. I wrote a detailed article about this. You will see that from the same code structure we can create different variations by simply changing a few values. I am sharing a few examples at the end of the article.\n\n\n\nWhy not a loader with one dot?\n\n\n\nCodePen Embed Fallback\n\n\n\nThis one should be fairly easy to grok as I am using the same technique but with a more simple logic:\n\n\n\nCodePen Embed Fallback\n\n\n\nHere is another example of loader where I am also animating radial-gradient combined with CSS filters and mix-blend-mode to create a blobby effect:\n\n\n\nCodePen Embed Fallback\n\n\n\nIf you check the code, you will see that all I am really doing there is animating the background-position, exactly like we did with the previous loader, but adding a dash of background-size to make it look like the blob gets bigger as it absorbs dots.\n\n\n\nIf you want to understand the magic behind that blob effect, you can refer to these interactive slides (Chrome only) by Ana Tudor because she covers the topic so well!\n\n\n\nHere is another dot loader idea, this time using a different technique:\n\n\n\nCodePen Embed Fallback\n\n\n\nThis one is only 10 CSS declarations and a keyframe. The main element and its two pseudo-elements have the same background configuration with one radial gradient. Each one creates one dot, for a total of three. The animation moves the gradient from top to bottom by using different delays for each dot..\n\n\n\nOh, and take note how this demo uses CSS Grid. This allows us to leverage the grid’s default stretch alignment so that both pseudo-elements cover the whole area of their parent. No need for sizing! Push the around a little with translate() and we’re all set.\n\n\n\nMore examples!\n\n\n\nJust to drive the point home, I want to leave you with a bunch of additional examples that are really variations of what we’ve looked at. As you view the demos, you’ll see that the approaches we’ve covered here are super flexible and open up tons of design possibilities.\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nNext up…\n\n\n\nOK, so we covered dot loaders in this article and spinners in the last one. In the next article of this four-part series, we’ll turn our attention to another common type of loader: the bars. We’ll take a lot of what we learned so far and see how we can extend them to create yet another single element loader with as little code and as much flexibility as possible.\n\n\n\n\nArticle series\n\n\n\nSingle Element Loaders: The SpinnerSingle Element Loaders: The Dots — you are hereSingle Element Loaders: The BarsSingle Element Loaders: Going 3D — coming July 1\n\n\nSingle Element Loaders: The Dots originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-06-17T14:47:55.000Z",
      "date_modified": "2022-06-17T14:47:55.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366252",
      "url": "https://css-tricks.com/conditionally-styling-selected-elements-in-a-grid-container/",
      "title": "Conditionally Styling Selected Elements in a Grid Container",
      "summary": "Calendars, shopping carts, galleries, file explorers, and online libraries are some situations where selectable items are shown in grids (i.e. square lattices). You know, even those security checks that ask you to select all images with crosswalks or whatever.\n🧐…\n\nConditionally Styling Selected Elements in a Grid Container originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Calendars, shopping carts, galleries, file explorers, and online libraries are some situations where selectable items are shown in grids (i.e. square lattices). You know, even those security checks that ask you to select all images with crosswalks or whatever.</p>\n\n\n\n<span id=\"more-366252\"></span>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/catpcha-crosswalks.png?resize=302%2C461&#038;ssl=1\" alt=\"\" class=\"wp-image-366253\" width=\"302\" height=\"461\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/catpcha-crosswalks.png?w=402&amp;ssl=1 402w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/catpcha-crosswalks.png?resize=196%2C300&amp;ssl=1 196w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>&#x1f9d0;</figcaption></figure>\n\n\n\n<p>I found a neat way to display selectable options in a grid. No, not recreating that reCAPTCHA, but simply being able to select multiple items. And when two or more adjoining items are selected, we can use clever <code>:nth-of-type</code> combinators, pseudo elements, and the <code>:checked</code> pseudo-class to style them in a way where they look grouped together.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwQzWqP\" src=\"//codepen.io/anon/embed/VwQzWqP?height=550&amp;theme-id=1&amp;slug-hash=VwQzWqP&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwQzWqP\" title=\"CodePen Embed VwQzWqP\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The whole idea of combinators and pseudos to get the rounded checkboxes came from a <a href=\"https://css-tricks.com/fun-times-styling-checkbox-states/\">previous article I wrote</a>. It was a simple single-column design:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdwbXga\" src=\"//codepen.io/anon/embed/mdwbXga?height=550&amp;theme-id=1&amp;slug-hash=mdwbXga&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdwbXga\" title=\"CodePen Embed mdwbXga\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This time, however, the rounding effect is applied to elements along both the vertical and horizontal axes on a grid. You don’t have to have read my last article on checkbox styling for this since I’m going to cover everything you need to know here. But if you’re interested in a slimmed down take on what we’re doing in this article, then that one is worth checking out.</p>\n\n\n\n<h3>Before we start…</h3>\n\n\n\n<p>It’ll be useful for you to take note of a few things. For example, I’m using static HTML and CSS in my demo for the sake of simplicity. Depending on your application you might have to generate the grid and the items in it dynamically. I’m leaving out practical checks for accessibility in order to focus on the effect, but you would definitely want to consider that sort of thing in a production environment.</p>\n\n\n\n<p>Also, I’m using CSS Grid for the layout. I’d recommend the same but, of course, it’s only a personal preference and your mileage may vary. For me, using grid allows me to easily use sibling-selectors to target an item’s <code>::before</code> and <code>::after</code> pseudos.</p>\n\n\n\n<p>Hence, whatever layout standard you might want to use in your application, make sure the pseudos can still be targeted in CSS and ensure the layout stays in tact across different browsers and screens.</p>\n\n\n\n<h3>Let’s get started now</h3>\n\n\n\n<p>As you may have noticed in the earlier demo, checking and unchecking a checkbox element modifies the design of the boxes, depending on the selection state of the other checkboxes around it. This is possible because I styled each box using the pseudo-elements of its adjacent elements instead of its own element.</p>\n\n\n\n<p>The following figure shows how the <code>::before</code> pseudo-elements of boxes in each <em>column</em> (except the first column) overlap the boxes to their left, and how the <code>::after</code> pseudo-elements of boxes in each <em>row</em> (except the first row) overlap the boxes above.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1360\" height=\"994\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654436553993_diagram.png?resize=1360%2C994&#038;ssl=1\" alt=\"Two grids of checkboxes showing the placement of before and after pseudos.\" class=\"wp-image-366254\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654436553993_diagram.png?w=1360&amp;ssl=1 1360w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654436553993_diagram.png?resize=300%2C219&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654436553993_diagram.png?resize=1024%2C748&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654436553993_diagram.png?resize=768%2C561&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3>Here’s the base code</h3>\n\n\n\n<p>The markup is pretty straightforward:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;main>\n  &lt;input type=checkbox> \n  &lt;input type=checkbox> \n  &lt;input type=checkbox>\n  &lt;!-- more boxes -->\n&lt;/main></code></pre>\n\n\n\n<p>There’s a little more going on in the initial CSS. But, first, the grid itself:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* The grid */\nmain {\n  display: grid;\n  grid:  repeat(5, 60px) / repeat(4, 85px);\n  align-items: center;\n  justify-items: center;\n  margin: 0;\n}</code></pre>\n\n\n\n<p>That’s a grid of five rows and four columns that contain checkboxes. I decided to wipe out the default appearance of the checkboxes, then give them my own light gray background and super rounded borders:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* all checkboxes */\ninput {\n  -webkit-appearance: none;\n  appearance: none;\n  background: #ddd;\n  border-radius: 20px;\n  cursor: pointer;\n  display: grid;\n  height: 40px;\n  width: 60px;\n  margin: 0;\n}</code></pre>\n\n\n\n<p>Notice, too, that the checkboxes themselves are grids. That’s key for placing their <code>::before</code> and <code>::after</code> pseudo-elements. Speaking of which, let’s do that now:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* pseudo-elements except for the first column and first row */\ninput:not(:nth-of-type(4n+1))::before,\ninput:nth-of-type(n+5)::after {\n  content: '';        \n  border-radius: 20px;\n  grid-area: 1 / 1;\n  pointer-events: none;\n}</code></pre>\n\n\n\n<p>We’re only selecting the pseudo-elements of checkboxes that are not in the first column or the first row of the grid. <code>input:not(:nth-of-type(4n+1))</code> starts at the first checkbox, then selects the <code>::before</code> of every fourth item from there. But notice we’re saying <code>:not()</code>, so really what we’re doing is <em>skipping</em> the <code>::before</code> pseudo-element of every fourth checkbox, starting at the first. Then we’re applying styles to the <code>::after</code> pseudo of every checkbox from the fifth one.</p>\n\n\n\n<p>Now we can style both the <code>::before</code> and <code>::after</code> pseudos for each checkbox that is not in the first column or row of the grid, so that they are moved left or up, respectively, hiding them by default.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* pseudo-elements other than the first column */\ninput:not(:nth-of-type(4n+1))::before { \n  transform: translatex(-85px);\n}\n\n/* pseudo-elements other than the first row */\ninput:nth-of-type(n+5)::after {\n transform: translatey(-60px); \n}</code></pre>\n\n\n\n<h3>Styling the <code>:checked</code> state</h3>\n\n\n\n<p>Now comes styling the checkboxes when they are in a <code>:checked</code> state. First, let’s give them a color, say a <code>limegreen</code> background:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">input:checked { background: limegreen; }</code></pre>\n\n\n\n<p>A checked box should be able to re-style all of its adjacent checked boxes. In other words, if we select the eleventh checkbox in the grid, we should also be able to style the boxes surrounding it at the top, bottom, left, and right.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1242\" height=\"694\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654511257743_grid.png?resize=1242%2C694&#038;ssl=1\" alt=\"A four-by-five grid of squares numbered one through 20. 11 is selected and 7, 10, 12, and 15 are highlighted.\" class=\"wp-image-366255\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654511257743_grid.png?w=1242&amp;ssl=1 1242w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654511257743_grid.png?resize=300%2C168&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654511257743_grid.png?resize=1024%2C572&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_C6C1FBE60A3624B876B34697BF3BE9266CAA9E9CFB20B11CDBDE5D32FDF0FD18_1654511257743_grid.png?resize=768%2C429&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>This is done by targeting the correct pseudo-elements. How do we do that? Well, it depends on the actual number of columns in the grid. Here’s the CSS if two adjacent boxes are checked in a 5⨉4 grid:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* a checked box's right borders (if the element to its right is checked) */\ninput:not(:nth-of-type(4n)):checked + input:checked::before { \n  border-top-right-radius: 0; \n  border-bottom-right-radius: 0; \n  background: limegreen;\n}\n/* a checked box's bottom borders (if the element below is checked) */\ninput:nth-last-of-type(n+5):checked + * + * + * + input:checked::after {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n  background: limegreen;\n}\n/* a checked box's adjacent (right side) checked box's left borders */\ninput:not(:nth-of-type(4n)):checked + input:checked + input::before {         \n  border-top-left-radius: 0; \n  border-bottom-left-radius: 0; \n  background: limegreen;\n}\n/* a checked box's adjacent (below) checked box's top borders */\ninput:not(:nth-of-type(4n)):checked + * + * + * +  input:checked + input::before { \n  border-top-left-radius: 0; \n  border-top-right-radius: 0; \n  background: limegreen;\n}</code></pre>\n\n\n\n<p>If you prefer you can generate the above code dynamically. However, a typical grid, say an image gallery, the number of columns will be small and likely a fixed number of items, whereas the rows might keep increasing. Especially if designed for mobile screens. That’s why this approach is still an efficient way to go. If for some reason your application happens to have limited rows and expanding columns, then consider rotating the grid sideways because, with a stream of items, CSS Grid arranges them left-to-right and top-to-bottom (i.e. row by row).</p>\n\n\n\n<p>We also need to add styling for the last checkboxes in the grid — they’re not all covered by pseudo-elements as they are the last items in each axis.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* a checked box's (in last column) left borders */\ninput:nth-of-type(4n-1):checked + input:checked {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n/* a checked box's (in last column) adjacent (below) checked box's top borders */\ninput:nth-of-type(4n):checked + * + * + * + input:checked {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}</code></pre>\n\n\n\n<p>Those are some tricky selectors! The first one…</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">input:nth-of-type(4n-1):checked + input:checked</code></pre>\n\n\n\n<p>…is basically saying this:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>A checked <code>&lt;input&gt;</code> element next to a checked <code>&lt;input&gt;</code> in the second last column.</p></blockquote>\n\n\n\n<p>And the <code>nth-of-type</code> is calculated like this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">4(0) - 1 = no match\n4(1) - 1 = 3rd item\n4(2) - 1 = 7th item\n4(3) - 1 = 11th item\netc.</code></pre>\n\n\n\n<p>So, we’re starting at the third checkbox and selecting every fourth one from there. And if a checkbox in that sequence is checked, then we style the checkboxes adjacent, too, if they are also checked.</p>\n\n\n\n<p>And this line:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">input:nth-of-type(4n):checked + * + * + * + input:checked</code></pre>\n\n\n\n<p>Is saying this:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>An <code>&lt;input&gt;</code> element provided that is checked, is directly adjacent to an element, which is directly adjacent to another element, which is also directly adjacent to another element, which, in turn, is directly adjacent to an <code>&lt;input&gt;</code> element that is in a checked state.</p></blockquote>\n\n\n\n<p>What that means is we’re selecting every fourth checkbox that is checked. And if a checkbox in that sequence is checked, then we style the next fourth checkbox from that checkbox if it, too, is checked.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwQzWqP\" src=\"//codepen.io/anon/embed/VwQzWqP?height=550&amp;theme-id=1&amp;slug-hash=VwQzWqP&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwQzWqP\" title=\"CodePen Embed VwQzWqP\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Putting it to use</h3>\n\n\n\n<p>What we just looked at is the general principle and logic behind the design. Again, how useful it is in your application will depend on the grid design.</p>\n\n\n\n<p>I used rounded borders, but you can try other shapes or even experiment with background effects (<a href=\"https://css-tricks.com/css-hover-effects-background-masks-3d/\">Temani has you covered for ideas</a>). Now that you know how the formula works, the rest is totally up to your imagination.</p>\n\n\n\n<p>Here’s an instance of how it might look in a simple calendar:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poaZQNx\" src=\"//codepen.io/anon/embed/poaZQNx?height=550&amp;theme-id=1&amp;slug-hash=poaZQNx&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poaZQNx\" title=\"CodePen Embed poaZQNx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Again, this is merely a rough prototype using static markup. And, there would be lots and lots of accessibility considerations to consider in a calendar feature.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>That’s a wrap! Pretty neat, right? I mean, there’s nothing exactly “new” about what’s happening. But it’s a good example of <em>selecting things</em> in CSS. If we have a handle on more advanced selecting techniques that use combinators and pseudos, then our styling powers can reach far beyond the styling one item — as we saw, we can conditionally style items based on the state of another element.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/conditionally-styling-selected-elements-in-a-grid-container/\">Conditionally Styling Selected Elements in a Grid Container</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Calendars, shopping carts, galleries, file explorers, and online libraries are some situations where selectable items are shown in grids (i.e. square lattices). You know, even those security checks that ask you to select all images with crosswalks or whatever.\n\n\n\n\n\n\n\n🧐\n\n\n\nI found a neat way to display selectable options in a grid. No, not recreating that reCAPTCHA, but simply being able to select multiple items. And when two or more adjoining items are selected, we can use clever :nth-of-type combinators, pseudo elements, and the :checked pseudo-class to style them in a way where they look grouped together.\n\n\n\nCodePen Embed Fallback\n\n\n\nThe whole idea of combinators and pseudos to get the rounded checkboxes came from a previous article I wrote. It was a simple single-column design:\n\n\n\nCodePen Embed Fallback\n\n\n\nThis time, however, the rounding effect is applied to elements along both the vertical and horizontal axes on a grid. You don’t have to have read my last article on checkbox styling for this since I’m going to cover everything you need to know here. But if you’re interested in a slimmed down take on what we’re doing in this article, then that one is worth checking out.\n\n\n\nBefore we start…\n\n\n\nIt’ll be useful for you to take note of a few things. For example, I’m using static HTML and CSS in my demo for the sake of simplicity. Depending on your application you might have to generate the grid and the items in it dynamically. I’m leaving out practical checks for accessibility in order to focus on the effect, but you would definitely want to consider that sort of thing in a production environment.\n\n\n\nAlso, I’m using CSS Grid for the layout. I’d recommend the same but, of course, it’s only a personal preference and your mileage may vary. For me, using grid allows me to easily use sibling-selectors to target an item’s ::before and ::after pseudos.\n\n\n\nHence, whatever layout standard you might want to use in your application, make sure the pseudos can still be targeted in CSS and ensure the layout stays in tact across different browsers and screens.\n\n\n\nLet’s get started now\n\n\n\nAs you may have noticed in the earlier demo, checking and unchecking a checkbox element modifies the design of the boxes, depending on the selection state of the other checkboxes around it. This is possible because I styled each box using the pseudo-elements of its adjacent elements instead of its own element.\n\n\n\nThe following figure shows how the ::before pseudo-elements of boxes in each column (except the first column) overlap the boxes to their left, and how the ::after pseudo-elements of boxes in each row (except the first row) overlap the boxes above.\n\n\n\n\n\n\n\nHere’s the base code\n\n\n\nThe markup is pretty straightforward:\n\n\n\n<main>\n  <input type=checkbox> \n  <input type=checkbox> \n  <input type=checkbox>\n  <!-- more boxes -->\n</main>\n\n\n\nThere’s a little more going on in the initial CSS. But, first, the grid itself:\n\n\n\n/* The grid */\nmain {\n  display: grid;\n  grid:  repeat(5, 60px) / repeat(4, 85px);\n  align-items: center;\n  justify-items: center;\n  margin: 0;\n}\n\n\n\nThat’s a grid of five rows and four columns that contain checkboxes. I decided to wipe out the default appearance of the checkboxes, then give them my own light gray background and super rounded borders:\n\n\n\n/* all checkboxes */\ninput {\n  -webkit-appearance: none;\n  appearance: none;\n  background: #ddd;\n  border-radius: 20px;\n  cursor: pointer;\n  display: grid;\n  height: 40px;\n  width: 60px;\n  margin: 0;\n}\n\n\n\nNotice, too, that the checkboxes themselves are grids. That’s key for placing their ::before and ::after pseudo-elements. Speaking of which, let’s do that now:\n\n\n\n/* pseudo-elements except for the first column and first row */\ninput:not(:nth-of-type(4n+1))::before,\ninput:nth-of-type(n+5)::after {\n  content: '';        \n  border-radius: 20px;\n  grid-area: 1 / 1;\n  pointer-events: none;\n}\n\n\n\nWe’re only selecting the pseudo-elements of checkboxes that are not in the first column or the first row of the grid. input:not(:nth-of-type(4n+1)) starts at the first checkbox, then selects the ::before of every fourth item from there. But notice we’re saying :not(), so really what we’re doing is skipping the ::before pseudo-element of every fourth checkbox, starting at the first. Then we’re applying styles to the ::after pseudo of every checkbox from the fifth one.\n\n\n\nNow we can style both the ::before and ::after pseudos for each checkbox that is not in the first column or row of the grid, so that they are moved left or up, respectively, hiding them by default.\n\n\n\n/* pseudo-elements other than the first column */\ninput:not(:nth-of-type(4n+1))::before { \n  transform: translatex(-85px);\n}\n\n/* pseudo-elements other than the first row */\ninput:nth-of-type(n+5)::after {\n transform: translatey(-60px); \n}\n\n\n\nStyling the :checked state\n\n\n\nNow comes styling the checkboxes when they are in a :checked state. First, let’s give them a color, say a limegreen background:\n\n\n\ninput:checked { background: limegreen; }\n\n\n\nA checked box should be able to re-style all of its adjacent checked boxes. In other words, if we select the eleventh checkbox in the grid, we should also be able to style the boxes surrounding it at the top, bottom, left, and right.\n\n\n\n\n\n\n\nThis is done by targeting the correct pseudo-elements. How do we do that? Well, it depends on the actual number of columns in the grid. Here’s the CSS if two adjacent boxes are checked in a 5⨉4 grid:\n\n\n\n/* a checked box's right borders (if the element to its right is checked) */\ninput:not(:nth-of-type(4n)):checked + input:checked::before { \n  border-top-right-radius: 0; \n  border-bottom-right-radius: 0; \n  background: limegreen;\n}\n/* a checked box's bottom borders (if the element below is checked) */\ninput:nth-last-of-type(n+5):checked + * + * + * + input:checked::after {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n  background: limegreen;\n}\n/* a checked box's adjacent (right side) checked box's left borders */\ninput:not(:nth-of-type(4n)):checked + input:checked + input::before {         \n  border-top-left-radius: 0; \n  border-bottom-left-radius: 0; \n  background: limegreen;\n}\n/* a checked box's adjacent (below) checked box's top borders */\ninput:not(:nth-of-type(4n)):checked + * + * + * +  input:checked + input::before { \n  border-top-left-radius: 0; \n  border-top-right-radius: 0; \n  background: limegreen;\n}\n\n\n\nIf you prefer you can generate the above code dynamically. However, a typical grid, say an image gallery, the number of columns will be small and likely a fixed number of items, whereas the rows might keep increasing. Especially if designed for mobile screens. That’s why this approach is still an efficient way to go. If for some reason your application happens to have limited rows and expanding columns, then consider rotating the grid sideways because, with a stream of items, CSS Grid arranges them left-to-right and top-to-bottom (i.e. row by row).\n\n\n\nWe also need to add styling for the last checkboxes in the grid — they’re not all covered by pseudo-elements as they are the last items in each axis.\n\n\n\n/* a checked box's (in last column) left borders */\ninput:nth-of-type(4n-1):checked + input:checked {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n/* a checked box's (in last column) adjacent (below) checked box's top borders */\ninput:nth-of-type(4n):checked + * + * + * + input:checked {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n\n\nThose are some tricky selectors! The first one…\n\n\n\ninput:nth-of-type(4n-1):checked + input:checked\n\n\n\n…is basically saying this:\n\n\n\nA checked <input> element next to a checked <input> in the second last column.\n\n\n\nAnd the nth-of-type is calculated like this:\n\n\n\n4(0) - 1 = no match\n4(1) - 1 = 3rd item\n4(2) - 1 = 7th item\n4(3) - 1 = 11th item\netc.\n\n\n\nSo, we’re starting at the third checkbox and selecting every fourth one from there. And if a checkbox in that sequence is checked, then we style the checkboxes adjacent, too, if they are also checked.\n\n\n\nAnd this line:\n\n\n\ninput:nth-of-type(4n):checked + * + * + * + input:checked\n\n\n\nIs saying this:\n\n\n\nAn <input> element provided that is checked, is directly adjacent to an element, which is directly adjacent to another element, which is also directly adjacent to another element, which, in turn, is directly adjacent to an <input> element that is in a checked state.\n\n\n\nWhat that means is we’re selecting every fourth checkbox that is checked. And if a checkbox in that sequence is checked, then we style the next fourth checkbox from that checkbox if it, too, is checked.\n\n\n\nCodePen Embed Fallback\n\n\n\nPutting it to use\n\n\n\nWhat we just looked at is the general principle and logic behind the design. Again, how useful it is in your application will depend on the grid design.\n\n\n\nI used rounded borders, but you can try other shapes or even experiment with background effects (Temani has you covered for ideas). Now that you know how the formula works, the rest is totally up to your imagination.\n\n\n\nHere’s an instance of how it might look in a simple calendar:\n\n\n\nCodePen Embed Fallback\n\n\n\nAgain, this is merely a rough prototype using static markup. And, there would be lots and lots of accessibility considerations to consider in a calendar feature.\n\n\n\n\n\n\n\nThat’s a wrap! Pretty neat, right? I mean, there’s nothing exactly “new” about what’s happening. But it’s a good example of selecting things in CSS. If we have a handle on more advanced selecting techniques that use combinators and pseudos, then our styling powers can reach far beyond the styling one item — as we saw, we can conditionally style items based on the state of another element.\n\nConditionally Styling Selected Elements in a Grid Container originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-06-15T14:15:50.000Z",
      "date_modified": "2022-06-15T14:15:50.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366388",
      "url": "https://css-tricks.com/de-mystifying-indieweb-on-a-wordpress-site/",
      "title": "De-Mystifying IndieWeb on a WordPress Site",
      "summary": "Well, sheesh. I opened a little can of worms when sharing Miriam’s “Am I on the IndieWeb yet?” with a short post bemoaning my own trouble getting on the IndieWeb train. But it’s a good can of worms.\nI think …\n\nDe-Mystifying IndieWeb on a WordPress Site originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Well, sheesh. I opened a little can of worms when sharing Miriam&#8217;s <a href=\"https://www.miriamsuzanne.com/2022/06/04/indiweb/\" rel=\"noopener\">&#8220;Am I on the IndieWeb yet?&#8221;</a> with a <a href=\"https://css-tricks.com/am-i-on-the-indieweb-yet/\">short post bemoaning my own trouble</a> getting on the IndieWeb train. But it&#8217;s a good can of worms.</p>\n\n\n\n<p>I think it was something like the next day after publishing that short post that <a href=\"https://david.shanske.com\" rel=\"noopener\">David Shanske</a> reached out and offered to help wrap my head around IndieWeb and the components that it comprises. And gosh dang if it wasn&#8217;t ridiculously helpful! So much so that I&#8217;d like to <a href=\"https://david.shanske.com/2022/06/12/indiewebifying-a-wordpress-site-2022-edition/\" rel=\"noopener\">link you up to a new post David wrote after we talked</a>, then summarize things here as best as I can because (1) it&#8217;s helpful to write things down and (2) have a reference for later.</p>\n\n\n\n<span id=\"more-366388\"></span>\n\n\n\n<h3>Yes, IndieWeb is confusing.</h3>\n\n\n\n<p>David had actually helped someone get their WordPress site all set up with IndieWeb powers. That person, too, was struggling to understand how the various pieces fit together. So, David already had this top of mind when Miriam and I were writing.</p>\n\n\n\n<p>&#8220;IndieWeb&#8221; is a new term for many folks and that&#8217;s where a lot of confusion breeds. Is it a framework? A philosophy? A set of standards? Depending on which one it is, the expectations shift as far as what it looks like to be a part of it.</p>\n\n\n\n<p>It&#8217;s sort of all of the above. And that needs to be solidified a bit. There&#8217;s nothing inherently confusing about IndieWeb itself once you view it through those different lenses. After reading David&#8217;s post my understanding is that IndieWeb is more of a set of protocols. Sorta like working with structured data or OpenGraph in markup. There&#8217;s nothing to install per se, but there are standards for how to integrate them into your work.</p>\n\n\n\n<p>Your identity powers IndieWeb. In other words, your site establishes your identity and can be used to do lots of things, like:</p>\n\n\n\n<ul><li>Notify other IndieWeb-supported sites when they are mentioned</li><li>Receive notifications from other IndieWeb sites when you are mentioned</li><li>Fetch information from a mention and format it for display</li><li>Authenticate your identity through your own website (a là a Google sign-in button but connected to your site)</li><li>&#8230;among other things.</li></ul>\n\n\n\n<p>If that sorta sounds like pingbacks, well, it sorta is. But much more robust and maintained.</p>\n\n\n\n<h3>It&#8217;s different (and perhaps easier) to implement IndieWeb features on WordPress than it is a static site.</h3>\n\n\n\n<p>The big difference is that WordPress provides a lot of the requirements needed to do IndieWeb-y things. I like how David explains it:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The IndieWeb implementation on WordPress is a [series] of building blocks that you can or cannot choose to use, which is what makes it wonderful, but sometimes confusing. WordPress has a philosophy of decisions, not options. But the IndieWeb is all about options…about building the features that are right for you.</p></blockquote>\n\n\n\n<p>Those building blocks are plugins that you install to add IndieWeb protocols and technologies to WordPress. It&#8217;s awesome those are readily available because that takes a a lot of the work out of things. Running a static site, though, you&#8217;re on the hook for establishing most of that yourself.</p>\n\n\n\n<p>David&#8217;s post is 100% focused on the WordPress implementation. Your mileage may vary, but you will certainly walk away with a better idea of what protocols are available and how they fit together after reading his post — and hopefully this one as well.</p>\n\n\n\n<h3>The IndieWeb WordPress plugin establishes your identity.</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"332\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1.png?resize=1024%2C332&#038;ssl=1\" alt=\"\" class=\"wp-image-366396\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1.png?resize=1024%2C332&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1.png?resize=300%2C97&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1.png?resize=768%2C249&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1.png?resize=1536%2C497&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1.png?w=1544&amp;ssl=1 1544w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I thought it was doing so much stuff behind the scenes, but it&#8217;s a lot more simple than that:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The plugin by itself handles establishing your identity as the IndieWeb sees it. It offers an h-card template and widget. H-Card is the markup for marking up information about a person or place. So, this is an element many people opt to put on their site anyway.</p></blockquote>\n\n\n\n<p>So, really, it&#8217;s possible to get the same sort of thing by correctly marking up a WordPress theme. The convenience here is that you get a handy little template that&#8217;s marked up to support the <a href=\"https://microformats.org/wiki/h-card\" rel=\"noopener\"><code>h-card</code> open format</a> and a widget to drop it into a theme&#8217;s widget area.</p>\n\n\n\n<p>Here&#8217;s a super detailed example of the <code>h-card</code> markup pulled from the <a href=\"https://microformats.org/wiki/h-card#Example\" rel=\"noopener\">documentation for Microformats2</a>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"h-card\">\n  &lt;img class=\"u-photo\" alt=\"photo of Mitchell\"\n       src=\"https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg\"/>\n  &lt;a class=\"p-name u-url\"\n     href=\"http://blog.lizardwrangler.com/\" \n    >Mitchell Baker&lt;/a>\n (&lt;a class=\"u-url\" \n     href=\"https://twitter.com/MitchellBaker\"\n    >@MitchellBaker&lt;/a>)\n  &lt;span class=\"p-org\">Mozilla Foundation&lt;/span>\n  &lt;p class=\"p-note\">\n    Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.\n  &lt;/p>\n  &lt;span class=\"p-category\">Strategy&lt;/span>\n  &lt;span class=\"p-category\">Leadership&lt;/span>\n&lt;/div></code></pre>\n\n\n\n<p>See those class names? Classes like <code>.h-card</code>, <code>u-photo</code>, <code>p-name</code>, etc. all provide contextual meaning for a person&#8217;s identity which it then parsed as JSON:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"items\": [{ \n    \"type\": [\"h-card\"],\n    \"properties\": {\n      \"photo\": [\"https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg\"],\n      \"name\": [\"Mitchell Baker\"],\n      \"url\": [\n        \"http://blog.lizardwrangler.com/\",\n        \"https://twitter.com/MitchellBaker\"\n      ],\n      \"org\": [\"Mozilla Foundation\"],\n      \"note\": [\"Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.\"],\n      \"category\": [\n        \"Strategy\",\n        \"Leadership\"\n      ]\n    }\n  }]\n}</code></pre>\n\n\n\n<p>The plugin isn&#8217;t doing the sending, receiving, or parsing. Instead, it provides a WordPress site with a way to verify your identity in the markup.</p>\n\n\n\n<h3>Not all WordPress themes support Microformats</h3>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1544\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1-1.png?resize=1544%2C500&#038;ssl=1\" alt=\"\" class=\"wp-image-366397\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1-1.png?w=1544&amp;ssl=1 1544w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1-1.png?resize=300%2C97&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1-1.png?resize=1024%2C332&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1-1.png?resize=768%2C249&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-1544x500-1-1.png?resize=1536%2C497&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you scratched your head first time you saw &#8220;Microformats&#8221; like I did, David defines it nicely:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>[&#8230;] Microformats…a way of marking up HTML to allow elements to be identified. It is one of several ways of doing this, but is a very simple and readable one, which is why it is popular in the IndieWeb community.</p></blockquote>\n\n\n\n<p>The problem, as David continues, is that many themes aren&#8217;t marked up in a Microformats-friendly way — which is what the <a href=\"https://wordpress.org/plugins/wp-uf2/\" rel=\"noopener\">Microformats2 plugin</a> is designed to fix.  That said, David is quick to call out that the plugin is extremely limited in how it accomplishes this, and he recommends instead marking up a theme by hand.</p>\n\n\n\n<p>According to David, the next major release of the Webmention plugin will likely include smarter ways of detecting content and images it can use and formatting them for Microformats2 support.</p>\n\n\n\n<h2>Webmentions send and receive notifications.</h2>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"772\" height=\"250\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.jpg?resize=772%2C250&#038;ssl=1\" alt=\"\" class=\"wp-image-366400\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.jpg?w=772&amp;ssl=1 772w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.jpg?resize=300%2C97&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.jpg?resize=768%2C249&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>OK, so if you&#8217;ve established your identity through your site so you are discoverable, and your site is marked up for <code>h-card</code> support using Microformats2. Great! You still need something in the middle working as an operator that sends and receives notifications. In other words, when another site mentions you — called a Webmention — the site mentioning you needs a way to support sending that mention to you, and your site needs a way to accept it (or vice versa).</p>\n\n\n\n<p>That&#8217;s what the <a href=\"https://wordpress.org/plugins/webmention/\" rel=\"noopener\">Webmention plugin</a> is for. It&#8217;s also probably the source of most of my IndieWeb confusion. I thought it was formatting data and needed an additional service to send and receive it. Nope! It&#8217;s actually sending and receiving the data rather than creating the mention. Back to David:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Back when it was built, the plugin handled only the business of receiving and sending webmentions, not handling display to any degree. Semantic Linkbacks, a separate plugin handled that for not only webmentions, but the older pingback and trackback protocols.</p></blockquote>\n\n\n\n<p>So, the Webmention plugin is communicating notifications. Meanwhile, another plugin called Semantic Linkbacks is what handles the data. And what the heck are Semantic Linkbacks?</p>\n\n\n\n<h2>Semantic Linkbacks fetch and handle data.</h2>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"772\" height=\"250\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.png?resize=772%2C250&#038;ssl=1\" alt=\"\" class=\"wp-image-366402\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.png?w=772&amp;ssl=1 772w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.png?resize=300%2C97&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/banner-772x250-1.png?resize=768%2C249&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><a href=\"https://wordpress.org/plugins/semantic-linkbacks/\" rel=\"noopener\">Semantic Linkbacks</a> is another plugin that handles another piece of the process. There&#8217;s no way I can explain it better than David already does:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Semantic Linkbacks takes a webmention, which is a notification that another site has linked to something on your site, fetches the other site, and tries to render a display of the information. How that is done can vary from just a profile photo (if it can find one), to interpreting it as a full comment.</p><p>It does this using Microformats.</p></blockquote>\n\n\n\n<p>I expected that the main IndieWeb plugin was already doing this since it handles other markup. But it only provides the template and widget to get your identity on your site. Once the Semantic Linkbacks plugin fetches an incoming webmention, it takes the data, formats it, then attempts to display it.</p>\n\n\n\n<p>Sounds like the plugin will be somewhat merged with (or replaced by) an upcoming version of the Webmention plugin:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Since many people are not inclined, or not comfortable modifying a theme, the new version of Webmentions will include several different alternative ways to try to find an image or summary to display…from OpenGraph (which Facebook and Twitter use to display URLs provided to it) to detecting the WordPress REST API version of a page and using that to get the author name and profile image. None of them will provided as much context as Microformats, but the experience will still be something worth installing.</p></blockquote>\n\n\n\n<p>That&#8217;s certainly nice as it taps into the WordPress REST API for the JSON response and formats that for display.</p>\n\n\n\n<h3>Brid.gy is a service to help display interactions.</h3>\n\n\n\n<p>A Webmention can be an interaction, say someone likes your post on Twitter or retweets it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1690\" height=\"998\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/webmentions-likes.png?resize=1690%2C998&#038;ssl=1\" alt=\"\" class=\"wp-image-366405\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/webmentions-likes.png?w=1690&amp;ssl=1 1690w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/webmentions-likes.png?resize=300%2C177&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/webmentions-likes.png?resize=1024%2C605&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/webmentions-likes.png?resize=768%2C454&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/webmentions-likes.png?resize=1536%2C907&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Differentiating a like from a repost from a comment from a whatever needs to happen, and you&#8217;d need to implement the Twitter (or whatever) API to draw those distinctions.</p>\n\n\n\n<p>That&#8217;s something you can certainly do! But if you&#8217;d rather plug and play, one of the IndieWeb community members made a service called <a href=\"https://brid.gy\" rel=\"noopener\">Brid.gy</a>. You create an account, hook up your site, and give app permissions to the service&#8230; then you&#8217;re done!</p>\n\n\n\n<p>What Brid.gy has done is essentially implement the APIs for Twitter, Facebook, Instagram, and others, so that when it detects that a post in those services that interacts with your syndicated post, a Webmention is sent to your site and goes through the process of publishing on your own site.</p>\n\n\n\n<h2>There&#8217;s so much more!</h2>\n\n\n\n<p>Quick hits:</p>\n\n\n\n<ul><li><strong>IndieAuth:</strong> This is a protocol based on OAuth 2. <a href=\"https://wordpress.org/plugins/indieauth/\" rel=\"noopener\">The plugin</a> establishes an endpoint in the WordPress REST API that can be used to authenticate your identity through your own self-hosted site — essentially your own Google sign-in button but without establishing that endpoint yourself or needing to rely on a separate hosted API.</li><li><strong>Micropub:</strong> For those who use WordPress but prefer a different editor can install the <a href=\"https://wordpress.org/plugins/micropub/\" rel=\"noopener\">Micropub plugin</a>. This <a href=\"https://micropub.spec.indieweb.org\" rel=\"noopener\">adds an endpoint</a> that allows you to publish content to your site and using a Micropub-supported editor create items in a Microformats2 feed, giving you way more options for writing content outside of the WordPress Block Editor.</li><li><strong>Simple Location:</strong> <a href=\"https://wordpress.org/plugins/simple-location/\" rel=\"noopener\">David wrote this plugin</a> and I was super impressed when he demoed it for me. The idea is it pulls in data from your current location that can used for everything from displaying the weather at the time you wrote a post, to creating an entire archive of posts on an embedded map based on the post location. I&#8217;d honestly love to see something like this baked directly into WordPress.</li></ul>\n\n\n\n<h3>The updated flow</h3>\n\n\n\n<p>I attempted to make an illustration that outlines the various pieces in my last post, but let&#8217;s try again with an updated understanding of what&#8217;s happening:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2478\" height=\"1048\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?resize=2478%2C1048&#038;ssl=1\" alt=\"Outlining the flow between an IndieWeb enabled site and a site that mentions it.\" class=\"wp-image-366419\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?w=2478&amp;ssl=1 2478w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?resize=300%2C127&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?resize=1024%2C433&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?resize=768%2C325&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?resize=1536%2C650&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg?resize=2048%2C866&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>(<a href=\"https://css-tricks.com/wp-content/uploads/2022/06/indieweb-wp.jpg\">Full size</a>)</figcaption></figure>\n\n\n\n<h2>Is this all making sense?</h2>\n\n\n\n<p>High fives to David for both reaching out and taking the time to show me what it looks like to implement IndieWeb on WordPress. I can&#8217;t claim I fully understand all the nuances, but I at least feel like I have a decent grasp of the pieces — the philosophy, protocols, and tech — that are required to make it happen.</p>\n\n\n\n<p>I&#8217;d like to turn it around to you! Does this help clarify things for you? Is there anything you&#8217;re struggling to understand? Think you&#8217;re able to configure a WordPress site with IndieWeb features now? Let&#8217;s take it to the comments!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/de-mystifying-indieweb-on-a-wordpress-site/\">De-Mystifying IndieWeb on a WordPress Site</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Well, sheesh. I opened a little can of worms when sharing Miriam’s “Am I on the IndieWeb yet?” with a short post bemoaning my own trouble getting on the IndieWeb train. But it’s a good can of worms.\n\n\n\nI think it was something like the next day after publishing that short post that David Shanske reached out and offered to help wrap my head around IndieWeb and the components that it comprises. And gosh dang if it wasn’t ridiculously helpful! So much so that I’d like to link you up to a new post David wrote after we talked, then summarize things here as best as I can because (1) it’s helpful to write things down and (2) have a reference for later.\n\n\n\n\n\n\n\nYes, IndieWeb is confusing.\n\n\n\nDavid had actually helped someone get their WordPress site all set up with IndieWeb powers. That person, too, was struggling to understand how the various pieces fit together. So, David already had this top of mind when Miriam and I were writing.\n\n\n\n“IndieWeb” is a new term for many folks and that’s where a lot of confusion breeds. Is it a framework? A philosophy? A set of standards? Depending on which one it is, the expectations shift as far as what it looks like to be a part of it.\n\n\n\nIt’s sort of all of the above. And that needs to be solidified a bit. There’s nothing inherently confusing about IndieWeb itself once you view it through those different lenses. After reading David’s post my understanding is that IndieWeb is more of a set of protocols. Sorta like working with structured data or OpenGraph in markup. There’s nothing to install per se, but there are standards for how to integrate them into your work.\n\n\n\nYour identity powers IndieWeb. In other words, your site establishes your identity and can be used to do lots of things, like:\n\n\n\nNotify other IndieWeb-supported sites when they are mentionedReceive notifications from other IndieWeb sites when you are mentionedFetch information from a mention and format it for displayAuthenticate your identity through your own website (a là a Google sign-in button but connected to your site)…among other things.\n\n\n\nIf that sorta sounds like pingbacks, well, it sorta is. But much more robust and maintained.\n\n\n\nIt’s different (and perhaps easier) to implement IndieWeb features on WordPress than it is a static site.\n\n\n\nThe big difference is that WordPress provides a lot of the requirements needed to do IndieWeb-y things. I like how David explains it:\n\n\n\nThe IndieWeb implementation on WordPress is a [series] of building blocks that you can or cannot choose to use, which is what makes it wonderful, but sometimes confusing. WordPress has a philosophy of decisions, not options. But the IndieWeb is all about options…about building the features that are right for you.\n\n\n\nThose building blocks are plugins that you install to add IndieWeb protocols and technologies to WordPress. It’s awesome those are readily available because that takes a a lot of the work out of things. Running a static site, though, you’re on the hook for establishing most of that yourself.\n\n\n\nDavid’s post is 100% focused on the WordPress implementation. Your mileage may vary, but you will certainly walk away with a better idea of what protocols are available and how they fit together after reading his post — and hopefully this one as well.\n\n\n\nThe IndieWeb WordPress plugin establishes your identity.\n\n\n\n\n\n\n\nI thought it was doing so much stuff behind the scenes, but it’s a lot more simple than that:\n\n\n\nThe plugin by itself handles establishing your identity as the IndieWeb sees it. It offers an h-card template and widget. H-Card is the markup for marking up information about a person or place. So, this is an element many people opt to put on their site anyway.\n\n\n\nSo, really, it’s possible to get the same sort of thing by correctly marking up a WordPress theme. The convenience here is that you get a handy little template that’s marked up to support the h-card open format and a widget to drop it into a theme’s widget area.\n\n\n\nHere’s a super detailed example of the h-card markup pulled from the documentation for Microformats2:\n\n\n\n<div class=\"h-card\">\n  <img class=\"u-photo\" alt=\"photo of Mitchell\"\n       src=\"https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg\"/>\n  <a class=\"p-name u-url\"\n     href=\"http://blog.lizardwrangler.com/\" \n    >Mitchell Baker</a>\n (<a class=\"u-url\" \n     href=\"https://twitter.com/MitchellBaker\"\n    >@MitchellBaker</a>)\n  <span class=\"p-org\">Mozilla Foundation</span>\n  <p class=\"p-note\">\n    Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.\n  </p>\n  <span class=\"p-category\">Strategy</span>\n  <span class=\"p-category\">Leadership</span>\n</div>\n\n\n\nSee those class names? Classes like .h-card, u-photo, p-name, etc. all provide contextual meaning for a person’s identity which it then parsed as JSON:\n\n\n\n{\n  \"items\": [{ \n    \"type\": [\"h-card\"],\n    \"properties\": {\n      \"photo\": [\"https://webfwd.org/content/about-experts/300.mitchellbaker/mentor_mbaker.jpg\"],\n      \"name\": [\"Mitchell Baker\"],\n      \"url\": [\n        \"http://blog.lizardwrangler.com/\",\n        \"https://twitter.com/MitchellBaker\"\n      ],\n      \"org\": [\"Mozilla Foundation\"],\n      \"note\": [\"Mitchell is responsible for setting the direction and scope of the Mozilla Foundation and its activities.\"],\n      \"category\": [\n        \"Strategy\",\n        \"Leadership\"\n      ]\n    }\n  }]\n}\n\n\n\nThe plugin isn’t doing the sending, receiving, or parsing. Instead, it provides a WordPress site with a way to verify your identity in the markup.\n\n\n\nNot all WordPress themes support Microformats\n\n\n\n\n\n\n\nIf you scratched your head first time you saw “Microformats” like I did, David defines it nicely:\n\n\n\n[…] Microformats…a way of marking up HTML to allow elements to be identified. It is one of several ways of doing this, but is a very simple and readable one, which is why it is popular in the IndieWeb community.\n\n\n\nThe problem, as David continues, is that many themes aren’t marked up in a Microformats-friendly way — which is what the Microformats2 plugin is designed to fix.  That said, David is quick to call out that the plugin is extremely limited in how it accomplishes this, and he recommends instead marking up a theme by hand.\n\n\n\nAccording to David, the next major release of the Webmention plugin will likely include smarter ways of detecting content and images it can use and formatting them for Microformats2 support.\n\n\n\nWebmentions send and receive notifications.\n\n\n\n\n\n\n\nOK, so if you’ve established your identity through your site so you are discoverable, and your site is marked up for h-card support using Microformats2. Great! You still need something in the middle working as an operator that sends and receives notifications. In other words, when another site mentions you — called a Webmention — the site mentioning you needs a way to support sending that mention to you, and your site needs a way to accept it (or vice versa).\n\n\n\nThat’s what the Webmention plugin is for. It’s also probably the source of most of my IndieWeb confusion. I thought it was formatting data and needed an additional service to send and receive it. Nope! It’s actually sending and receiving the data rather than creating the mention. Back to David:\n\n\n\nBack when it was built, the plugin handled only the business of receiving and sending webmentions, not handling display to any degree. Semantic Linkbacks, a separate plugin handled that for not only webmentions, but the older pingback and trackback protocols.\n\n\n\nSo, the Webmention plugin is communicating notifications. Meanwhile, another plugin called Semantic Linkbacks is what handles the data. And what the heck are Semantic Linkbacks?\n\n\n\nSemantic Linkbacks fetch and handle data.\n\n\n\n\n\n\n\nSemantic Linkbacks is another plugin that handles another piece of the process. There’s no way I can explain it better than David already does:\n\n\n\nSemantic Linkbacks takes a webmention, which is a notification that another site has linked to something on your site, fetches the other site, and tries to render a display of the information. How that is done can vary from just a profile photo (if it can find one), to interpreting it as a full comment.It does this using Microformats.\n\n\n\nI expected that the main IndieWeb plugin was already doing this since it handles other markup. But it only provides the template and widget to get your identity on your site. Once the Semantic Linkbacks plugin fetches an incoming webmention, it takes the data, formats it, then attempts to display it.\n\n\n\nSounds like the plugin will be somewhat merged with (or replaced by) an upcoming version of the Webmention plugin:\n\n\n\nSince many people are not inclined, or not comfortable modifying a theme, the new version of Webmentions will include several different alternative ways to try to find an image or summary to display…from OpenGraph (which Facebook and Twitter use to display URLs provided to it) to detecting the WordPress REST API version of a page and using that to get the author name and profile image. None of them will provided as much context as Microformats, but the experience will still be something worth installing.\n\n\n\nThat’s certainly nice as it taps into the WordPress REST API for the JSON response and formats that for display.\n\n\n\nBrid.gy is a service to help display interactions.\n\n\n\nA Webmention can be an interaction, say someone likes your post on Twitter or retweets it.\n\n\n\n\n\n\n\nDifferentiating a like from a repost from a comment from a whatever needs to happen, and you’d need to implement the Twitter (or whatever) API to draw those distinctions.\n\n\n\nThat’s something you can certainly do! But if you’d rather plug and play, one of the IndieWeb community members made a service called Brid.gy. You create an account, hook up your site, and give app permissions to the service… then you’re done!\n\n\n\nWhat Brid.gy has done is essentially implement the APIs for Twitter, Facebook, Instagram, and others, so that when it detects that a post in those services that interacts with your syndicated post, a Webmention is sent to your site and goes through the process of publishing on your own site.\n\n\n\nThere’s so much more!\n\n\n\nQuick hits:\n\n\n\nIndieAuth: This is a protocol based on OAuth 2. The plugin establishes an endpoint in the WordPress REST API that can be used to authenticate your identity through your own self-hosted site — essentially your own Google sign-in button but without establishing that endpoint yourself or needing to rely on a separate hosted API.Micropub: For those who use WordPress but prefer a different editor can install the Micropub plugin. This adds an endpoint that allows you to publish content to your site and using a Micropub-supported editor create items in a Microformats2 feed, giving you way more options for writing content outside of the WordPress Block Editor.Simple Location: David wrote this plugin and I was super impressed when he demoed it for me. The idea is it pulls in data from your current location that can used for everything from displaying the weather at the time you wrote a post, to creating an entire archive of posts on an embedded map based on the post location. I’d honestly love to see something like this baked directly into WordPress.\n\n\n\nThe updated flow\n\n\n\nI attempted to make an illustration that outlines the various pieces in my last post, but let’s try again with an updated understanding of what’s happening:\n\n\n\n(Full size)\n\n\n\nIs this all making sense?\n\n\n\nHigh fives to David for both reaching out and taking the time to show me what it looks like to implement IndieWeb on WordPress. I can’t claim I fully understand all the nuances, but I at least feel like I have a decent grasp of the pieces — the philosophy, protocols, and tech — that are required to make it happen.\n\n\n\nI’d like to turn it around to you! Does this help clarify things for you? Is there anything you’re struggling to understand? Think you’re able to configure a WordPress site with IndieWeb features now? Let’s take it to the comments!\n\nDe-Mystifying IndieWeb on a WordPress Site originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-06-14T16:48:34.000Z",
      "date_modified": "2022-06-14T16:48:34.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366260",
      "url": "https://css-tricks.com/useful-tools-for-visualizing-databases-on-a-budget/",
      "title": "Useful Tools for Visualizing Databases on a Budget",
      "summary": "A diagram is a graphical representation of information that depicts the structure, relationship, or operation of anything. Diagrams enable your audience to visually grasp hidden information and engage with them in ways that words alone cannot. Depending on the type …\n\nUseful Tools for Visualizing Databases on a Budget originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>A diagram is a graphical representation of information that depicts the structure, relationship, or operation of anything. Diagrams enable your audience to visually grasp hidden information and engage with them in ways that words alone cannot. Depending on the type of project, there are numerous ways to use diagrams. For example, if you want to depict the relationship between distinct pieces, we usually use an Entity Relationship Diagram (ERD). There are many great tools that can help you sketch out your database designs beautifully.</p>\n\n\n\n<p>In this article, I will be sharing some of my favorite tools that I use to curate my data structures and bring my ideas to life.</p>\n\n\n\n<span id=\"more-366260\"></span>\n\n\n\n<h3><strong>Google Docs Draw</strong>ing</h3>\n\n\n\n<p>The drawing function in <a href=\"https://docs.google.com/\" rel=\"noopener\">Google Docs</a> allows you to add illustrations to your pages. You can add custom shapes, charts, graphs, infographics, and text boxes to your document with the built-in drawing tool.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"801\" height=\"400\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs.png?resize=801%2C400&#038;ssl=1\" alt=\"Screenshot of database entity relationships using Google Docs.\" class=\"wp-image-366302\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs.png?w=801&amp;ssl=1 801w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs.png?resize=768%2C384&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h4><strong>Sketching with Google Docs</strong></h4>\n\n\n\n<p>Although it is simple to add a graphic to your Google Docs, the procedure is not totally visible. Here&#8217;s how:</p>\n\n\n\n<p>1 . Open a new document on Google Docs.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1000\" height=\"403\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-1.jpg?resize=1000%2C403&#038;ssl=1\" alt=\"Screenshot of a new document in Google Docs.\" class=\"wp-image-366323\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-1.jpg?w=1000&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-1.jpg?resize=300%2C121&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-1.jpg?resize=768%2C310&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>2 . Click on the insert button and select <strong>Drawing</strong> . Then, from the drop-down option, choose <strong>New</strong> to open the drawing screen.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1000\" height=\"414\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-2.jpg?resize=1000%2C414&#038;ssl=1\" alt=\"Screenshot of adding a new Drawing in Google Docs.\" class=\"wp-image-366324\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-2.jpg?w=1000&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-2.jpg?resize=300%2C124&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-2.jpg?resize=768%2C318&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>3 . You can use the toolbox on this screen to add text boxes, select lines, and shapes, and modify the colors of your drawing.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1000\" height=\"429\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-3.jpg?resize=1000%2C429&#038;ssl=1\" alt=\"Screenshot of selecting an Arrow in Google Docs.\" class=\"wp-image-366325\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-3.jpg?w=1000&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-3.jpg?resize=300%2C129&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-3.jpg?resize=768%2C329&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>4 . You may also use the cursor to adjust the size of your drawings and the color of your designs by using the toolbox at the top of your screen.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1000\" height=\"432\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-4.jpg?resize=1000%2C432&#038;ssl=1\" alt=\"Screenshot of customizing a drawing in Google Docs.\" class=\"wp-image-366326\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-4.jpg?w=1000&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-4.jpg?resize=300%2C130&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-gdocs-4.jpg?resize=768%2C332&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>5 . When finished, click the <strong>Save</strong> and close button. You can click on the &#8220;<strong>File</strong>&#8221; toolbar displayed on the top of your screen to download your document.</p>\n\n\n\n<h4>Features</h4>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Cost</td><td>Free.</td></tr><tr><td>CLI? GUI? Online?</td><td>Online.</td></tr><tr><td>Requires an Account?</td><td>Yes, a Google account is required.</td></tr><tr><td>Collaborative Editing?</td><td>Yes, with Google Drive sharing.</td></tr><tr><td>Import SQL</td><td>Not Applicable.</td></tr><tr><td>Export SQL</td><td>Not Applicable.</td></tr><tr><td>Export Formats</td><td>.doc, .pdf, .rtf, .odt, .txt, .html, .epub</td></tr><tr><td>Generate Shareable URL</td><td>Yes.</td></tr></tbody></table></figure>\n\n\n\n<p>Google Docs offers amazing convenience. However, diagramming databases is not something it was intended for. You may find yourself frustrated with redrawing arrows and relationships if you are making frequent edits to your model.</p>\n\n\n\n<h3>Graphviz</h3>\n\n\n\n<p><a href=\"https://graphviz.org/\" rel=\"noopener\">Graphviz</a> is a free graph visualization software that allows us to express information diagrammatically.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"683\" height=\"422\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-graphviz.png?resize=683%2C422&#038;ssl=1\" alt=\"Screenshot of database entity relationships using Graphviz.\" class=\"wp-image-366301\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-graphviz.png?w=683&amp;ssl=1 683w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-graphviz.png?resize=300%2C185&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Graphviz implements the DOT language. The DOT language is an abstract grammar that makes use of terminals, non terminals, parentheses, square brackets, and vertical bars. More information about the DOT language can be found in its <a href=\"https://graphviz.org/doc/info/lang.html\" rel=\"noopener\">documentation</a>.</p>\n\n\n\n<h4>Features</h4>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Cost</td><td>Free.</td></tr><tr><td>CLI? GUI? Online?</td><td>CLI.<br><a href=\"https://graphviz.org/resources/#editor-plugins\" rel=\"noopener\">Visual Studio Code, Eclipse, and Notepad++</a>.<br><a href=\"https://graphviz.org/resources/#graphical-interfaces\" rel=\"noopener\">Graphical Interfaces</a>.</td></tr><tr><td>Requires an Account?</td><td>No.</td></tr><tr><td>Collaborative Editing?</td><td>Not Applicable.</td></tr><tr><td>Import SQL</td><td>Yes, using SQL Graphviz.</td></tr><tr><td>Export SQL</td><td>Yes, using SQL Graphviz.</td></tr><tr><td>Export Formats</td><td><a href=\"https://graphviz.org/docs/outputs/\" rel=\"noopener\">.gif, .png, .jpeg, .json, .pdf</a> and more</td></tr><tr><td>Generate Shareable URL</td><td>Not Applicable.</td></tr></tbody></table></figure>\n\n\n\n<p>Graphviz has an impressive and supportive community. However, a high level of SQL support is only available when you install additional third-party software. This overhead may make it less approachable to users that are not comfortable setting up their computer to support these tools.</p>\n\n\n\n<h2>ERDPlus</h2>\n\n\n\n<p><a href=\"https://erdplus.com/\" rel=\"noopener\">ERDPlus</a> is a database modeling tool that allows you to create Entity Relationship Diagrams, Relational Schemas, Star Schemas, and SQL DDL statements.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"800\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-erdplus.png?resize=800%2C500&#038;ssl=1\" alt=\"Screenshot of database entity relationships using ERDPlus.\" class=\"wp-image-366300\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-erdplus.png?w=800&amp;ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-erdplus.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-erdplus.png?resize=768%2C480&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It includes a brief guide on how to create your ER diagrams, which is especially useful for beginners. You can also easily convert your created ER diagrams to relation schemas.</p>\n\n\n\n<h4>Features</h4>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Cost</td><td>Free.</td></tr><tr><td>CLI? GUI? Online?</td><td>Online.</td></tr><tr><td>Requires an Account?</td><td>Not required, but recommended for saving.</td></tr><tr><td>Collaborative Editing?</td><td>Not Applicable.</td></tr><tr><td>Import SQL</td><td>No.</td></tr><tr><td>Export SQL</td><td>Yes, with the support of SQL DDL statements.</td></tr><tr><td>Export Formats</td><td>.png</td></tr><tr><td>Generate Shareable URL</td><td>Not Applicable.</td></tr></tbody></table></figure>\n\n\n\n<p>ERDPlus is suited for SQL. It does lack additional export formats and ability to share with teams, but these features are not necessary with import and export.</p>\n\n\n\n<h3>Diagrams.net</h3>\n\n\n\n<p><a href=\"https://www.diagrams.net/\" rel=\"noopener\">Diagrams.net</a> (previously Draw.io) is a free online diagramming tool that can be used to create flowcharts, UML diagrams, database models, and other types of diagrams.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"486\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-diagrams.png?resize=1024%2C486&#038;ssl=1\" alt=\"Screenshot of database entity relationships using Diagrams.net.\" class=\"wp-image-366299\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-diagrams.png?resize=1024%2C486&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-diagrams.png?resize=300%2C142&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-diagrams.png?resize=768%2C364&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/dbviz-diagrams.png?w=1136&amp;ssl=1 1136w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h4>Features</h4>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Cost</td><td>Free.</td></tr><tr><td>CLI? GUI? Online?</td><td>Desktop and Online.</td></tr><tr><td>Requires an Account?</td><td>Not required, but recommended for saving.</td></tr><tr><td>Collaborative Editing?</td><td>Sharing requires Google Drive or OneDrive.</td></tr><tr><td>Import SQL</td><td><a href=\"https://www.diagrams.net/doc/faq/sql-plugin\" rel=\"noopener\">Yes</a>.</td></tr><tr><td>Export SQL</td><td>No.</td></tr><tr><td>Export Formats</td><td><a href=\"https://www.diagrams.net/doc/faq/export-diagram\" rel=\"noopener\">.png, .jpeg, .svg, .pdf, .html</a> and more.</td></tr><tr><td>Generate Shareable URL</td><td><a href=\"https://www.diagrams.net/doc/faq/publish-diagram-as-link\" rel=\"noopener\">Yes, export as URL an option</a>.</td></tr></tbody></table></figure>\n\n\n\n<p>Diagrams.net is designed to support many different workflows. Its ability to easily integrate with third-party integrations such as Trello, Quip, Notion, and others distinguishes it from the other options. The ability to share and collaborate may make it work well for collaborative teams.</p>\n\n\n\n<h3>Conclusion</h3>\n\n\n\n<p>This article is based on using free database tools that could help visualize your ideas and their capabilities with limitations to great details on how to use these tools.</p>\n\n\n\n<p>In my research, I also came across other excellent tools with free trials available for creating database diagrams like Lucidchart, EDrawMax, and, DrawSQL. However, these free trials have limitations which may make them less suited for developers working on multiple projects.</p>\n\n\n\n<p>I strongly recommend that you read the documentation for each of these tools to determine what works best for you and, most importantly, to avoid any difficulties in using these tools.</p>\n\n\n\n<p>Thank you for taking the time to read this far, and I hope you found what you were looking for. Have a wonderful day!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/useful-tools-for-visualizing-databases-on-a-budget/\">Useful Tools for Visualizing Databases on a Budget</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "A diagram is a graphical representation of information that depicts the structure, relationship, or operation of anything. Diagrams enable your audience to visually grasp hidden information and engage with them in ways that words alone cannot. Depending on the type of project, there are numerous ways to use diagrams. For example, if you want to depict the relationship between distinct pieces, we usually use an Entity Relationship Diagram (ERD). There are many great tools that can help you sketch out your database designs beautifully.\n\n\n\nIn this article, I will be sharing some of my favorite tools that I use to curate my data structures and bring my ideas to life.\n\n\n\n\n\n\n\nGoogle Docs Drawing\n\n\n\nThe drawing function in Google Docs allows you to add illustrations to your pages. You can add custom shapes, charts, graphs, infographics, and text boxes to your document with the built-in drawing tool.\n\n\n\n\n\n\n\nSketching with Google Docs\n\n\n\nAlthough it is simple to add a graphic to your Google Docs, the procedure is not totally visible. Here’s how:\n\n\n\n1 . Open a new document on Google Docs.\n\n\n\n\n\n\n\n2 . Click on the insert button and select Drawing . Then, from the drop-down option, choose New to open the drawing screen.\n\n\n\n\n\n\n\n3 . You can use the toolbox on this screen to add text boxes, select lines, and shapes, and modify the colors of your drawing.\n\n\n\n\n\n\n\n4 . You may also use the cursor to adjust the size of your drawings and the color of your designs by using the toolbox at the top of your screen.\n\n\n\n\n\n\n\n5 . When finished, click the Save and close button. You can click on the “File” toolbar displayed on the top of your screen to download your document.\n\n\n\nFeatures\n\n\n\nCostFree.CLI? GUI? Online?Online.Requires an Account?Yes, a Google account is required.Collaborative Editing?Yes, with Google Drive sharing.Import SQLNot Applicable.Export SQLNot Applicable.Export Formats.doc, .pdf, .rtf, .odt, .txt, .html, .epubGenerate Shareable URLYes.\n\n\n\nGoogle Docs offers amazing convenience. However, diagramming databases is not something it was intended for. You may find yourself frustrated with redrawing arrows and relationships if you are making frequent edits to your model.\n\n\n\nGraphviz\n\n\n\nGraphviz is a free graph visualization software that allows us to express information diagrammatically.\n\n\n\n\n\n\n\nGraphviz implements the DOT language. The DOT language is an abstract grammar that makes use of terminals, non terminals, parentheses, square brackets, and vertical bars. More information about the DOT language can be found in its documentation.\n\n\n\nFeatures\n\n\n\nCostFree.CLI? GUI? Online?CLI.Visual Studio Code, Eclipse, and Notepad++.Graphical Interfaces.Requires an Account?No.Collaborative Editing?Not Applicable.Import SQLYes, using SQL Graphviz.Export SQLYes, using SQL Graphviz.Export Formats.gif, .png, .jpeg, .json, .pdf and moreGenerate Shareable URLNot Applicable.\n\n\n\nGraphviz has an impressive and supportive community. However, a high level of SQL support is only available when you install additional third-party software. This overhead may make it less approachable to users that are not comfortable setting up their computer to support these tools.\n\n\n\nERDPlus\n\n\n\nERDPlus is a database modeling tool that allows you to create Entity Relationship Diagrams, Relational Schemas, Star Schemas, and SQL DDL statements.\n\n\n\n\n\n\n\nIt includes a brief guide on how to create your ER diagrams, which is especially useful for beginners. You can also easily convert your created ER diagrams to relation schemas.\n\n\n\nFeatures\n\n\n\nCostFree.CLI? GUI? Online?Online.Requires an Account?Not required, but recommended for saving.Collaborative Editing?Not Applicable.Import SQLNo.Export SQLYes, with the support of SQL DDL statements.Export Formats.pngGenerate Shareable URLNot Applicable.\n\n\n\nERDPlus is suited for SQL. It does lack additional export formats and ability to share with teams, but these features are not necessary with import and export.\n\n\n\nDiagrams.net\n\n\n\nDiagrams.net (previously Draw.io) is a free online diagramming tool that can be used to create flowcharts, UML diagrams, database models, and other types of diagrams.\n\n\n\n\n\n\n\nFeatures\n\n\n\nCostFree.CLI? GUI? Online?Desktop and Online.Requires an Account?Not required, but recommended for saving.Collaborative Editing?Sharing requires Google Drive or OneDrive.Import SQLYes.Export SQLNo.Export Formats.png, .jpeg, .svg, .pdf, .html and more.Generate Shareable URLYes, export as URL an option.\n\n\n\nDiagrams.net is designed to support many different workflows. Its ability to easily integrate with third-party integrations such as Trello, Quip, Notion, and others distinguishes it from the other options. The ability to share and collaborate may make it work well for collaborative teams.\n\n\n\nConclusion\n\n\n\nThis article is based on using free database tools that could help visualize your ideas and their capabilities with limitations to great details on how to use these tools.\n\n\n\nIn my research, I also came across other excellent tools with free trials available for creating database diagrams like Lucidchart, EDrawMax, and, DrawSQL. However, these free trials have limitations which may make them less suited for developers working on multiple projects.\n\n\n\nI strongly recommend that you read the documentation for each of these tools to determine what works best for you and, most importantly, to avoid any difficulties in using these tools.\n\n\n\nThank you for taking the time to read this far, and I hope you found what you were looking for. Have a wonderful day!\n\nUseful Tools for Visualizing Databases on a Budget originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-06-13T19:15:26.000Z",
      "date_modified": "2022-06-13T19:15:26.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366266",
      "url": "https://css-tricks.com/single-element-loaders-the-spinner/",
      "title": "Single Element Loaders: The Spinner",
      "summary": "Making CSS-only loaders is one of my favorite tasks. It’s always satisfying to look at those infinite animations. And, of course, there are lots of techniques and approaches to make them — no need to look further than CodePen to …\n\nSingle Element Loaders: The Spinner originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Making CSS-only loaders is one of my favorite tasks. It’s always satisfying to look at those infinite animations. And, of course, there are <em>lots</em> of techniques and approaches to make them — no need to <a href=\"https://codepen.io/collection/KLDEaD\" rel=\"noopener\">look further than CodePen</a> to see just how many. In this article, though, we will see how to make a single element loader writing as little code as possible.</p>\n\n\n\n<span id=\"more-366266\"></span>\n\n\n\n<p>I have <a href=\"https://dev.to/afif/i-made-100-css-loaders-for-your-next-project-4eje\" rel=\"noopener\">made a collection of more than 500 single div loaders</a> and in this four-part series, I am going to share the tricks I used to create many of them. We will cover a huge number of examples, showing how small adjustments can lead to fun variations, and how little code we need to write to make it all happen!</p>\n\n\n\n<div class=\"wp-container-11 wp-block-group ticss-c35bb282\"><div class=\"wp-block-group__inner-container\">\n<h4 id=\"h-advanced-git-series\">Single-Element Loaders series:</h4>\n\n\n\n<ol><li>Single Element Loaders: The Spinner — <em>you are here</em></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-dots/\">Single Element Loaders: The Dots</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-bars/\">Single Element Loaders: The Bars</a></li><li>Single Element Loaders: Going 3D — <em>coming July 1</em></li></ol>\n</div></div>\n\n\n\n<p>For this first article, we are going to create a one of the more common loader patterns: spinning bars:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNpbMvM\" src=\"//codepen.io/anon/embed/rNpbMvM?height=450&amp;theme-id=1&amp;slug-hash=rNpbMvM&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNpbMvM\" title=\"CodePen Embed rNpbMvM\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Here’s the approach</h3>\n\n\n\n<p>A trivial implementation for this loader is to create one element for each bar wrapped inside a parent element (for nine total elements), then play with <code>opacity</code> and <code>transform</code> to get the spinning effect.</p>\n\n\n\n<p>My implementation, though, requires only one element:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"loader\">&lt;/div></code></pre>\n\n\n\n<p>&#8230;and 10 CSS declarations:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  width: 150px; /* control the size */\n  aspect-ratio: 1;\n  display: grid;\n  mask: conic-gradient(from 22deg, #0003, #000);\n  animation: load 1s steps(8) infinite;\n}\n.loader,\n.loader:before {\n  --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */\n  background: \n    var(--_g)/34% 8%  space no-repeat,\n    var(--_g)/8%  34% no-repeat space;\n}\n.loader:before {\n  content: \"\";\n  transform: rotate(45deg);\n}\n@keyframes load {\n  to { transform: rotate(1turn); }\n}</code></pre>\n\n\n\n<h3>Let’s break that down</h3>\n\n\n\n<p>At first glance, the code may look strange but you will see that it’s more simple than what you might think. The first step is to define the dimension of the element. In our case, it’s a <code>150px</code> square. We can put <a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\"><code>aspect-ratio</code></a> to use so the element stays square no matter what.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  width: 150px; /* control the size */\n  aspect-ratio: 1; /* make height equal to width */\n}</code></pre>\n\n\n\n<p>When building CSS loaders, I always try to have one value for controlling the overall size. In this case, it’s the <code>width</code> and all the calculations we cover will refer to that value. This allows me to change a single value to control the loader. It’s always important to be able to easily adjust the size of our loaders without the need to adjust a lot of additional values.</p>\n\n\n\n<p>Next, we will use gradients to create the bars. This is the trickiest part! Let’s use <em>one</em> gradient to create <em>two</em> bars like the below:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">background: linear-gradient(#17177c 0 0) 50%/34% 8% space no-repeat;</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"577\" height=\"340\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651414613507_image.png?resize=577%2C340&#038;ssl=1\" alt=\"Showing a space between two gradient lines for a single element loader.\" class=\"wp-image-366269\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651414613507_image.png?w=577&amp;ssl=1 577w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651414613507_image.png?resize=300%2C177&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Our gradient is defined with one color and two color stops. The result is a solid color with no fading or transitions. The size is equal to <code>34%</code> wide and <code>8%</code> tall. It’s also placed in the center (<code>50%</code>). The trick is the use of the keyword value <code>space</code> — this duplicates the gradient, giving us two total bars.</p>\n\n\n\n<p>From <a href=\"https://www.w3.org/TR/css-backgrounds-3/#valdef-background-repeat-space\" rel=\"noopener\">the specification</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The image is repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area. The first and last images touch the edges of the area.</p></blockquote>\n\n\n\n<p>I am using a width equal to <code>34%</code> which means we cannot have more than two bars (<code>3*34%</code> is greater than <code>100%</code>) but with two bars we will have empty spaces (<code>100% - 2 * 34% = 32%</code>). That space is placed in the center between the two bars. In other words, we use a width for the gradient that is between <code>33%</code> and <code>50%</code> to make sure we have at least two bars with a little bit of space between them. The value <code>space</code> is what correctly places them for us.</p>\n\n\n\n<p>We do the same and make a second similar gradient to get two more bars at the top and bottom, which give us a <code>background</code> property value of:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">background: \n linear-gradient(#17177c 0 0) 50%/34% 8%  space no-repeat,\n linear-gradient(#17177c 0 0) 50%/8%  34% no-repeat space;</code></pre>\n\n\n\n<p>We can optimize that using a CSS variable to avoid repetition:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */\nbackground: \n var(--_g)/34% 8%  space no-repeat,\n var(--_g)/8%  34% no-repeat space;</code></pre>\n\n\n\n<p>So, now we have four bars and, thanks to CSS variables, we can write the color value once which makes it easy to update later (like we did with the size of the loader).</p>\n\n\n\n<p>To create the remaining bars, let’s tap into the <code>.loader</code> element and its <code>::before</code> pseudo-element to get four more bars for a grand total of eight in all.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  width: 150px; /* control the size */\n  aspect-ratio: 1;\n  display: grid;\n}\n.loader,\n.loader::before {\n  --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */\n  background: \n    var(--_g)/34% 8%  space no-repeat,\n    var(--_g)/8%  34% no-repeat space;\n}\n.loader::before {\n  content: \"\";\n  transform: rotate(45deg);\n}</code></pre>\n\n\n\n<p>Note the use of <code>display: grid</code>. This allows us to rely on the grid’s default <code>stretch</code> alignment to make the pseudo-element cover the whole area of its parent; thus there’s no need to specify a dimension on it — another trick that reduces the code and avoid us to deal with a lot of values!</p>\n\n\n\n<p>Now let’s rotate the pseudo-element by <code>45deg</code> to position the remaining bars. Hover the following demo to see the trick:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWQWQOV\" src=\"//codepen.io/anon/embed/QWQWQOV?height=450&amp;theme-id=1&amp;slug-hash=QWQWQOV&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWQWQOV\" title=\"CodePen Embed QWQWQOV\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Setting opacity</h3>\n\n\n\n<p>What we’re trying to do is create the impression that there is one bar that leaves a trail of fading bars behind it as it travels a circular path. What we need now is to play with the transparency of our bars to make that trail, which we are going to do with CSS <code>mask</code> combined with a conic-gradient as follows:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask: conic-gradient(from 22deg,#0003,#000);</code></pre>\n\n\n\n<p>To better see the trick, let’s apply this to a full-colored box:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYQYQdZ\" src=\"//codepen.io/anon/embed/LYQYQdZ?height=450&amp;theme-id=1&amp;slug-hash=LYQYQdZ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYQYQdZ\" title=\"CodePen Embed LYQYQdZ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The transparency of the red color is gradually increasing clockwise. We apply this to our loader and we have the bars with different opacity:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"827\" height=\"278\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651416594508_image.png?resize=827%2C278&#038;ssl=1\" alt=\"Radial gradient plus, spinner bars equals spinner bars with gradients.\" class=\"wp-image-366270\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651416594508_image.png?w=827&amp;ssl=1 827w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651416594508_image.png?resize=300%2C101&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_98F21CD3C1C7899779F98C6C3E6075E37A8E660CF4703968B4D3A7A973FF0FA6_1651416594508_image.png?resize=768%2C258&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In reality, each bar appears to fade because it’s masked by a gradient and falls between two semi-transparent colors. It’s hardly noticeable when this runs, so it’s sort of like being able to say that all the bars have the same color with a different level of opacity.</p>\n\n\n\n<h3>The rotation</h3>\n\n\n\n<p>Let’s apply a rotation animation to get our loader. Note, that we need a stepped animation and not a continuous one that’s why I am using <code>steps(8)</code>. <code>8</code> is nothing but the number of the bars, so that value can be changed depending on how many bars are in use.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.loader {\n  animation: load 3s steps(8) infinite;\n}\n\n/* Same as before: */\n@keyframes load {\n  to { transform: rotate(1turn) }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_Yzezemr\" src=\"//codepen.io/anon/embed/preview/Yzezemr?height=450&amp;theme-id=1&amp;slug-hash=Yzezemr&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed Yzezemr\" title=\"CodePen Embed Yzezemr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>That’s it! We have our loader with only one element and a few lines of CSS. We can easily control its size and color by adjusting one value.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYRYWOq\" src=\"//codepen.io/anon/embed/preview/zYRYWOq?height=450&amp;theme-id=1&amp;slug-hash=zYRYWOq&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYRYWOq\" title=\"CodePen Embed zYRYWOq\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Since we only used the <code>::before</code> pseudo-element, we can add four more bars by using <code>::after</code> to end with 12 bars in total and almost the same code:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWQWmWP\" src=\"//codepen.io/anon/embed/preview/QWQWmWP?height=450&amp;theme-id=1&amp;slug-hash=QWQWmWP&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWQWmWP\" title=\"CodePen Embed QWQWmWP\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We update the rotation of our pseudo-elements to consider <code>30deg</code> and <code>60deg</code> instead of <code>45deg</code> while using an twelve-step animation, rather than eight. I also decreased the height to <code>5%</code> instead of <code>8%</code> to make the bars a little thinner.</p>\n\n\n\n<p>Notice, too, that we have <code>grid-area: 1/1</code> on the pseudo-elements. This allows us to place them in the same area as one another, stacked on top of each other.</p>\n\n\n\n<p>Guess what? We can reach for the same loader using another implementation:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJQzbzr\" src=\"//codepen.io/anon/embed/preview/OJQzbzr?height=450&amp;theme-id=1&amp;slug-hash=OJQzbzr&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJQzbzr\" title=\"CodePen Embed OJQzbzr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Can you figure out the logic behind the code? Here is a hint: the opacity is no longer handled with a CSS <code>mask</code> but inside the gradient and is also using the <code>opacity</code> property.</p>\n\n\n\n<h3>Why not dots instead?</h3>\n\n\n\n<p>We can totally do that:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwQyzmY\" src=\"//codepen.io/anon/embed/RwQyzmY?height=450&amp;theme-id=1&amp;slug-hash=RwQyzmY&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwQyzmY\" title=\"CodePen Embed RwQyzmY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If you check the code, you will see that we’re now working with a radial gradient instead of a linear one. Otherwise, the concept is exactly the same where the mask creates the impression of opacity, but we made the shapes as circles instead of lines.</p>\n\n\n\n<p>Below is a figure to illustrate the new gradient configuration:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"693\" height=\"293\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1654551247592_image.png?resize=693%2C293&#038;ssl=1\" alt=\"Showing placement of dots in the single-element loader.\" class=\"wp-image-366271\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1654551247592_image.png?w=693&amp;ssl=1 693w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1654551247592_image.png?resize=300%2C127&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you&#8217;re using Safari, note that the demo may be buggy. That&#8217;s because Safari currently lacks support for the <code>at</code> syntax in radial gradients. But we can reconfigure the gradient a bit to overcome that:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"6,12\"><code markup=\"tt\">.loader,\n.loader:before,\n.loader:after {\n  background:\n    radial-gradient(\n      circle closest-side,\n      currentColor 90%,\n      #0000 98%\n    ) \n    50% -150%/20% 80% repeat-y,\n    radial-gradient(\n      circle closest-side,\n      currentColor 90%,\n      #0000 98%\n    ) \n    -150% 50%/80% 20% repeat-x;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYVLKOv/555436ef8e29838fff4872caa1dcf8d9\" src=\"//codepen.io/anon/embed/preview/eYVLKOv/555436ef8e29838fff4872caa1dcf8d9?height=450&amp;theme-id=1&amp;slug-hash=eYVLKOv/555436ef8e29838fff4872caa1dcf8d9&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYVLKOv/555436ef8e29838fff4872caa1dcf8d9\" title=\"CodePen Embed eYVLKOv/555436ef8e29838fff4872caa1dcf8d9\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>More loader examples</h3>\n\n\n\n<p>Here is another idea for a spinner loader similar to the previous one.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoJyaNy\" src=\"//codepen.io/anon/embed/PoJyaNy?height=450&amp;theme-id=1&amp;slug-hash=PoJyaNy&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoJyaNy\" title=\"CodePen Embed PoJyaNy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>For this one, I am only relying on <code>background</code> and <code>mask</code> to create the shape (no pseudo-elements needed). I am also defining the configuration with CSS variables to be able to create a lot of variations from the same code — another example of just the powers of CSS variables. <a href=\"https://www.freecodecamp.org/news/how-to-create-a-css-only-loader/\" rel=\"noopener\">I wrote another article about this technique</a> if you want to more details.</p>\n\n\n\n<p class=\"is-style-explanation\">Note that some browsers still rely on a <code>-webkit-</code> prefix for <code>mask-composite</code> with its own set of values, and will not display the spinner in the demo. <a href=\"https://codepen.io/t_afif/pen/wvyYLpJ\" rel=\"noopener\">Here is a way to do it</a> without <code>mast-composite</code> for more browser support.</p>\n\n\n\n<p>I have another one for you:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYPqMgq\" src=\"//codepen.io/anon/embed/preview/zYPqMgq?height=450&amp;theme-id=1&amp;slug-hash=zYPqMgq&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYPqMgq\" title=\"CodePen Embed zYPqMgq\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>For this one, I am using a <code>background-color</code> to control the color, and use <code>mask</code> and <code>mask-composite</code> to create the final shape:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1653920041342_image.png?resize=858%2C312&#038;ssl=1\" alt=\"Different steps for applying a master to a element in the shape of a circle.\" class=\"wp-image-366272\" width=\"858\" height=\"312\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1653920041342_image.png?w=858&amp;ssl=1 858w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1653920041342_image.png?resize=300%2C109&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/s_B3DCAAF1BD4EF695C8E8E4733CA6E3BD909E614220F68B297B62285B12C652E5_1653920041342_image.png?resize=768%2C279&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Before we end, here are some more spinning loaders I made a while back. I am relying on different techniques but still using gradients, masks, pseudo-element, etc. It could be a good exercise to figure out the logic of each one and learn new tricks at the same time. This said, if you have any question about them, the comment section is down below.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poegNEO\" src=\"//codepen.io/anon/embed/preview/poegNEO?height=450&amp;theme-id=1&amp;slug-hash=poegNEO&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poegNEO\" title=\"CodePen Embed poegNEO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLMXBRL\" src=\"//codepen.io/anon/embed/preview/yLMXBRL?height=450&amp;theme-id=1&amp;slug-hash=yLMXBRL&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLMXBRL\" title=\"CodePen Embed yLMXBRL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ZEevvXW\" src=\"//codepen.io/anon/embed/preview/ZEevvXW?height=450&amp;theme-id=1&amp;slug-hash=ZEevvXW&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ZEevvXW\" title=\"CodePen Embed ZEevvXW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Wrapping up</h3>\n\n\n\n<p>See, there’s so much we can do in CSS with nothing but a single div, a couple of gradients, pseudo-elements, variables. It seems like we created a whole bunch of different spinning loaders, but they’re all basically the same thing with slight modifications.</p>\n\n\n\n<p>This is only the the beginning. In this series, we will be looking at more ideas and advanced concepts for creating CSS loaders.</p>\n\n\n\n<div class=\"wp-container-12 wp-block-group ticss-c35bb282\"><div class=\"wp-block-group__inner-container\">\n<h4 id=\"h-advanced-git-series\">Single-Element Loaders series:</h4>\n\n\n\n<ol><li>Single Element Loaders: The Spinner — <em>you are here</em></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-dots/\">Single Element Loaders: The Dots</a></li><li><a href=\"https://css-tricks.com/single-element-loaders-the-bars/\">Single Element Loaders: The Bars</a></li><li>Single Element Loaders: Going 3D — <em>coming July 1</em></li></ol>\n</div></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/single-element-loaders-the-spinner/\">Single Element Loaders: The Spinner</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Making CSS-only loaders is one of my favorite tasks. It’s always satisfying to look at those infinite animations. And, of course, there are lots of techniques and approaches to make them — no need to look further than CodePen to see just how many. In this article, though, we will see how to make a single element loader writing as little code as possible.\n\n\n\n\n\n\n\nI have made a collection of more than 500 single div loaders and in this four-part series, I am going to share the tricks I used to create many of them. We will cover a huge number of examples, showing how small adjustments can lead to fun variations, and how little code we need to write to make it all happen!\n\n\n\n\nSingle-Element Loaders series:\n\n\n\nSingle Element Loaders: The Spinner — you are hereSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D — coming July 1\n\n\n\n\nFor this first article, we are going to create a one of the more common loader patterns: spinning bars:\n\n\n\nCodePen Embed Fallback\n\n\n\nHere’s the approach\n\n\n\nA trivial implementation for this loader is to create one element for each bar wrapped inside a parent element (for nine total elements), then play with opacity and transform to get the spinning effect.\n\n\n\nMy implementation, though, requires only one element:\n\n\n\n<div class=\"loader\"></div>\n\n\n\n…and 10 CSS declarations:\n\n\n\n.loader {\n  width: 150px; /* control the size */\n  aspect-ratio: 1;\n  display: grid;\n  mask: conic-gradient(from 22deg, #0003, #000);\n  animation: load 1s steps(8) infinite;\n}\n.loader,\n.loader:before {\n  --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */\n  background: \n    var(--_g)/34% 8%  space no-repeat,\n    var(--_g)/8%  34% no-repeat space;\n}\n.loader:before {\n  content: \"\";\n  transform: rotate(45deg);\n}\n@keyframes load {\n  to { transform: rotate(1turn); }\n}\n\n\n\nLet’s break that down\n\n\n\nAt first glance, the code may look strange but you will see that it’s more simple than what you might think. The first step is to define the dimension of the element. In our case, it’s a 150px square. We can put aspect-ratio to use so the element stays square no matter what.\n\n\n\n.loader {\n  width: 150px; /* control the size */\n  aspect-ratio: 1; /* make height equal to width */\n}\n\n\n\nWhen building CSS loaders, I always try to have one value for controlling the overall size. In this case, it’s the width and all the calculations we cover will refer to that value. This allows me to change a single value to control the loader. It’s always important to be able to easily adjust the size of our loaders without the need to adjust a lot of additional values.\n\n\n\nNext, we will use gradients to create the bars. This is the trickiest part! Let’s use one gradient to create two bars like the below:\n\n\n\nbackground: linear-gradient(#17177c 0 0) 50%/34% 8% space no-repeat;\n\n\n\n\n\n\n\nOur gradient is defined with one color and two color stops. The result is a solid color with no fading or transitions. The size is equal to 34% wide and 8% tall. It’s also placed in the center (50%). The trick is the use of the keyword value space — this duplicates the gradient, giving us two total bars.\n\n\n\nFrom the specification:\n\n\n\nThe image is repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area. The first and last images touch the edges of the area.\n\n\n\nI am using a width equal to 34% which means we cannot have more than two bars (3*34% is greater than 100%) but with two bars we will have empty spaces (100% - 2 * 34% = 32%). That space is placed in the center between the two bars. In other words, we use a width for the gradient that is between 33% and 50% to make sure we have at least two bars with a little bit of space between them. The value space is what correctly places them for us.\n\n\n\nWe do the same and make a second similar gradient to get two more bars at the top and bottom, which give us a background property value of:\n\n\n\nbackground: \n linear-gradient(#17177c 0 0) 50%/34% 8%  space no-repeat,\n linear-gradient(#17177c 0 0) 50%/8%  34% no-repeat space;\n\n\n\nWe can optimize that using a CSS variable to avoid repetition:\n\n\n\n--_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */\nbackground: \n var(--_g)/34% 8%  space no-repeat,\n var(--_g)/8%  34% no-repeat space;\n\n\n\nSo, now we have four bars and, thanks to CSS variables, we can write the color value once which makes it easy to update later (like we did with the size of the loader).\n\n\n\nTo create the remaining bars, let’s tap into the .loader element and its ::before pseudo-element to get four more bars for a grand total of eight in all.\n\n\n\n.loader {\n  width: 150px; /* control the size */\n  aspect-ratio: 1;\n  display: grid;\n}\n.loader,\n.loader::before {\n  --_g: linear-gradient(#17177c 0 0) 50%; /* update the color here */\n  background: \n    var(--_g)/34% 8%  space no-repeat,\n    var(--_g)/8%  34% no-repeat space;\n}\n.loader::before {\n  content: \"\";\n  transform: rotate(45deg);\n}\n\n\n\nNote the use of display: grid. This allows us to rely on the grid’s default stretch alignment to make the pseudo-element cover the whole area of its parent; thus there’s no need to specify a dimension on it — another trick that reduces the code and avoid us to deal with a lot of values!\n\n\n\nNow let’s rotate the pseudo-element by 45deg to position the remaining bars. Hover the following demo to see the trick:\n\n\n\nCodePen Embed Fallback\n\n\n\nSetting opacity\n\n\n\nWhat we’re trying to do is create the impression that there is one bar that leaves a trail of fading bars behind it as it travels a circular path. What we need now is to play with the transparency of our bars to make that trail, which we are going to do with CSS mask combined with a conic-gradient as follows:\n\n\n\nmask: conic-gradient(from 22deg,#0003,#000);\n\n\n\nTo better see the trick, let’s apply this to a full-colored box:\n\n\n\nCodePen Embed Fallback\n\n\n\nThe transparency of the red color is gradually increasing clockwise. We apply this to our loader and we have the bars with different opacity:\n\n\n\n\n\n\n\nIn reality, each bar appears to fade because it’s masked by a gradient and falls between two semi-transparent colors. It’s hardly noticeable when this runs, so it’s sort of like being able to say that all the bars have the same color with a different level of opacity.\n\n\n\nThe rotation\n\n\n\nLet’s apply a rotation animation to get our loader. Note, that we need a stepped animation and not a continuous one that’s why I am using steps(8). 8 is nothing but the number of the bars, so that value can be changed depending on how many bars are in use.\n\n\n\n.loader {\n  animation: load 3s steps(8) infinite;\n}\n\n/* Same as before: */\n@keyframes load {\n  to { transform: rotate(1turn) }\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nThat’s it! We have our loader with only one element and a few lines of CSS. We can easily control its size and color by adjusting one value.\n\n\n\nCodePen Embed Fallback\n\n\n\nSince we only used the ::before pseudo-element, we can add four more bars by using ::after to end with 12 bars in total and almost the same code:\n\n\n\nCodePen Embed Fallback\n\n\n\nWe update the rotation of our pseudo-elements to consider 30deg and 60deg instead of 45deg while using an twelve-step animation, rather than eight. I also decreased the height to 5% instead of 8% to make the bars a little thinner.\n\n\n\nNotice, too, that we have grid-area: 1/1 on the pseudo-elements. This allows us to place them in the same area as one another, stacked on top of each other.\n\n\n\nGuess what? We can reach for the same loader using another implementation:\n\n\n\nCodePen Embed Fallback\n\n\n\nCan you figure out the logic behind the code? Here is a hint: the opacity is no longer handled with a CSS mask but inside the gradient and is also using the opacity property.\n\n\n\nWhy not dots instead?\n\n\n\nWe can totally do that:\n\n\n\nCodePen Embed Fallback\n\n\n\nIf you check the code, you will see that we’re now working with a radial gradient instead of a linear one. Otherwise, the concept is exactly the same where the mask creates the impression of opacity, but we made the shapes as circles instead of lines.\n\n\n\nBelow is a figure to illustrate the new gradient configuration:\n\n\n\n\n\n\n\nIf you’re using Safari, note that the demo may be buggy. That’s because Safari currently lacks support for the at syntax in radial gradients. But we can reconfigure the gradient a bit to overcome that:\n\n\n\n.loader,\n.loader:before,\n.loader:after {\n  background:\n    radial-gradient(\n      circle closest-side,\n      currentColor 90%,\n      #0000 98%\n    ) \n    50% -150%/20% 80% repeat-y,\n    radial-gradient(\n      circle closest-side,\n      currentColor 90%,\n      #0000 98%\n    ) \n    -150% 50%/80% 20% repeat-x;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nMore loader examples\n\n\n\nHere is another idea for a spinner loader similar to the previous one.\n\n\n\nCodePen Embed Fallback\n\n\n\nFor this one, I am only relying on background and mask to create the shape (no pseudo-elements needed). I am also defining the configuration with CSS variables to be able to create a lot of variations from the same code — another example of just the powers of CSS variables. I wrote another article about this technique if you want to more details.\n\n\n\nNote that some browsers still rely on a -webkit- prefix for mask-composite with its own set of values, and will not display the spinner in the demo. Here is a way to do it without mast-composite for more browser support.\n\n\n\nI have another one for you:\n\n\n\nCodePen Embed Fallback\n\n\n\nFor this one, I am using a background-color to control the color, and use mask and mask-composite to create the final shape:\n\n\n\n\n\n\n\nBefore we end, here are some more spinning loaders I made a while back. I am relying on different techniques but still using gradients, masks, pseudo-element, etc. It could be a good exercise to figure out the logic of each one and learn new tricks at the same time. This said, if you have any question about them, the comment section is down below.\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nCodePen Embed Fallback\n\n\n\nWrapping up\n\n\n\nSee, there’s so much we can do in CSS with nothing but a single div, a couple of gradients, pseudo-elements, variables. It seems like we created a whole bunch of different spinning loaders, but they’re all basically the same thing with slight modifications.\n\n\n\nThis is only the the beginning. In this series, we will be looking at more ideas and advanced concepts for creating CSS loaders.\n\n\n\n\nSingle-Element Loaders series:\n\n\n\nSingle Element Loaders: The Spinner — you are hereSingle Element Loaders: The DotsSingle Element Loaders: The BarsSingle Element Loaders: Going 3D — coming July 1\n\n\nSingle Element Loaders: The Spinner originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-06-10T14:26:06.000Z",
      "date_modified": "2022-06-10T14:26:06.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366286",
      "url": "https://css-tricks.com/am-i-on-the-indieweb-yet/",
      "title": "Am I on the IndieWeb yet?",
      "summary": "Can’t smash the Like button hard enough for what Miriam Suzanne has to say on the challenging technical hurdles of implementing Webmentions:\n\nThe first round required several online services along with HTML & JS changes to my static site, just to verify my \n\n…\n\nAm I on the IndieWeb yet? originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Can&#8217;t smash the Like button hard enough for what <a href=\"https://www.miriamsuzanne.com/2022/06/04/indiweb/\" rel=\"noopener\">Miriam Suzanne has to say</a> on the challenging technical hurdles of implementing Webmentions:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The first round required several online services along with&nbsp;HTML&nbsp;&amp;&nbsp;JS changes to my static site, just to verify my indieweb identity. Then more changes to the site and more online services to help fetch any mentions&nbsp;<s>(so far, nothing to see, but that’s probably expected)</s>. It seems the only way to test the setup is to launch all those changes publicly, and then ask for other devs to send you&nbsp;mentions.</p><p>[&#8230;]</p><p>I’m an experienced web developer, and I can figure it out. But the steps aren’t simple, and most of my friends&nbsp;<em>are not web developers</em>. So, to me, this all feels like the prototype of an idea – a proof of&nbsp;concept.</p></blockquote>\n\n\n\n<p>A proof of concept for sure. And one that has been around for quite some time. The <a href=\"https://indieweb.org\" rel=\"noopener\">IndieWeb</a> idea of owning your own data and using your website as a social hub is right up my alley — and likely yours, too, as someone working on the front end.</p>\n\n\n\n<span id=\"more-366286\"></span>\n\n\n\n<p class=\"is-style-explanation\"><strong>Update!</strong> David Shanske is one of the developers of the WordPress plugins that support IndieWeb features and he not only published a wonderful explanation of <a href=\"https://david.shanske.com/2022/06/12/indiewebifying-a-wordpress-site-2022-edition/\" rel=\"noopener\">how everything fits together</a>, but also reached out directly and <a href=\"https://css-tricks.com/de-mystifying-indieweb-on-a-wordpress-site/\">helped me wrap it all around my head</a>.</p>\n\n\n\n<p>Yet, I&#8217;ve tinkered on and off with it — specifically <a href=\"https://indieweb.org/Webmention\" rel=\"noopener\">Webmentions</a> — over the past like three years with little to show for it. The problem isn&#8217;t so much the documentation of getting started because <a href=\"https://indieweb.org/Getting_Started\" rel=\"noopener\">it&#8217;s all there</a>. It&#8217;s more a combination of things&#8230;</p>\n\n\n\n<ul><li><strong>The wiki is confusing.</strong> Wikis are super cool in general, but the non-linear nature of it makes it tough to know where to start and where to end.</li><li><strong>The plugin ecosystem is complex.</strong> My personal site is on WordPress and there&#8217;s a plugin designed to make it easy to integrate IndieWeb features on it. Except that it&#8217;s really one plugin that steers you to install several others, each one introducing a technology that I honestly struggle to understand.</li><li><strong>There&#8217;s a bunch of terms to learn.</strong> I mean, &#8220;IndieWeb&#8221; and &#8220;Webmention&#8221; are already difficult to grok. Toss in things like &#8220;Micropub,&#8221; &#8220;Microformats,&#8221; &#8220;IndieAuth,&#8221; and &#8220;Semantic Linkbacks,&#8221; and suddenly it feels like a bunch of puzzle pieces from different puzzles trying to fit together.</li><li><strong>Some middleware seems necessary?</strong> For example, I had to give a service called <a href=\"https://brid.gy\" rel=\"noopener\">Bridgy</a> access to my Twitter to get that activity going. It <a href=\"https://indieweb.org/rel-me#Twitter\" rel=\"noopener\">apparently</a> has something to do with Twitter&#8217;s shortened <code>t.co</code> URLs and making them play well with microformats.</li></ul>\n\n\n\n<p>But, like Miriam, I struggled my way through it and got something working in the end. This is the sort of visual I wish I had when I was first getting started, and maybe it&#8217;ll help you too.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1670\" height=\"1092\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/wp-indieweb-webmentions.jpg?resize=1670%2C1092&#038;ssl=1\" alt=\"Diagram of IndieWeb integration on a WordPress site.\" class=\"wp-image-366287\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/wp-indieweb-webmentions.jpg?w=1670&amp;ssl=1 1670w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/wp-indieweb-webmentions.jpg?resize=300%2C196&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/wp-indieweb-webmentions.jpg?resize=1024%2C670&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/wp-indieweb-webmentions.jpg?resize=768%2C502&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/wp-indieweb-webmentions.jpg?resize=1536%2C1004&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Feels like a lot to get Webmentions going, but maybe that&#8217;s only because I have such a light grasp of the tech and how it all fits together. All the pieces are there, though, and even with the initial struggle, I love the IndieWeb concept, er prototype.</p>\n<p><a href=\"https://www.miriamsuzanne.com/2022/06/04/indiweb/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/am-i-on-the-indieweb-yet/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/am-i-on-the-indieweb-yet/\">Am I on the IndieWeb yet?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Can’t smash the Like button hard enough for what Miriam Suzanne has to say on the challenging technical hurdles of implementing Webmentions:\n\n\n\nThe first round required several online services along with HTML & JS changes to my static site, just to verify my indieweb identity. Then more changes to the site and more online services to help fetch any mentions (so far, nothing to see, but that’s probably expected). It seems the only way to test the setup is to launch all those changes publicly, and then ask for other devs to send you mentions.[…]I’m an experienced web developer, and I can figure it out. But the steps aren’t simple, and most of my friends are not web developers. So, to me, this all feels like the prototype of an idea – a proof of concept.\n\n\n\nA proof of concept for sure. And one that has been around for quite some time. The IndieWeb idea of owning your own data and using your website as a social hub is right up my alley — and likely yours, too, as someone working on the front end.\n\n\n\n\n\n\n\nUpdate! David Shanske is one of the developers of the WordPress plugins that support IndieWeb features and he not only published a wonderful explanation of how everything fits together, but also reached out directly and helped me wrap it all around my head.\n\n\n\nYet, I’ve tinkered on and off with it — specifically Webmentions — over the past like three years with little to show for it. The problem isn’t so much the documentation of getting started because it’s all there. It’s more a combination of things…\n\n\n\nThe wiki is confusing. Wikis are super cool in general, but the non-linear nature of it makes it tough to know where to start and where to end.The plugin ecosystem is complex. My personal site is on WordPress and there’s a plugin designed to make it easy to integrate IndieWeb features on it. Except that it’s really one plugin that steers you to install several others, each one introducing a technology that I honestly struggle to understand.There’s a bunch of terms to learn. I mean, “IndieWeb” and “Webmention” are already difficult to grok. Toss in things like “Micropub,” “Microformats,” “IndieAuth,” and “Semantic Linkbacks,” and suddenly it feels like a bunch of puzzle pieces from different puzzles trying to fit together.Some middleware seems necessary? For example, I had to give a service called Bridgy access to my Twitter to get that activity going. It apparently has something to do with Twitter’s shortened t.co URLs and making them play well with microformats.\n\n\n\nBut, like Miriam, I struggled my way through it and got something working in the end. This is the sort of visual I wish I had when I was first getting started, and maybe it’ll help you too.\n\n\n\n\n\n\n\nFeels like a lot to get Webmentions going, but maybe that’s only because I have such a light grasp of the tech and how it all fits together. All the pieces are there, though, and even with the initial struggle, I love the IndieWeb concept, er prototype.\nTo Shared Link — Permalink on CSS-Tricks\nAm I on the IndieWeb yet? originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-06-09T15:32:50.000Z",
      "date_modified": "2022-06-09T15:32:50.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366147",
      "url": "https://css-tricks.com/lets-make-a-qr-code-generator-with-a-serverless-function/",
      "title": "Let’s Make a QR Code Generator With a Serverless Function!",
      "summary": "QR codes are funny, right? We love them, then hate them, then love them again. Anyways, they’ve lately been popping up again and it got me thinking about how they’re made. There are like a gazillion QR code generators out …\n\nLet’s Make a QR Code Generator With a Serverless Function! originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>QR codes are funny, right? We love them, then hate them, then love them again. Anyways, they&#8217;ve lately been popping up again and it got me thinking about how they&#8217;re made. There are like a gazillion QR code generators out there, but say it&#8217;s something you need to do on your own website. <a href=\"https://github.com/soldair/node-qrcode\" rel=\"noopener\">This package</a> can do that. But it&#8217;s also weighs in at a hefty 180 KB for everything it needs to generate stuff. You wouldn&#8217;t want to serve all that along with the rest of your scripts.</p>\n\n\n\n<p>Now, I&#8217;m relatively new to the concept of cloud functions, but I hear that&#8217;s the bee&#8217;s knees for something just like this. That way, the function lives somewhere on a server that can be called when it&#8217;s needed. Sorta like a little API to run the function.</p>\n\n\n\n<p>Some hosts offer some sort of cloud function feature. <a href=\"https://www.digitalocean.com/products/functions\" rel=\"noopener\">DigitalOcean happens to be one of them!</a> And, like Droplets, functions are pretty easy to deploy.</p>\n\n\n\n<span id=\"more-366147\"></span>\n\n\n\n<h3>Create a functions folder locally</h3>\n\n\n\n<p>DigitalOcean has a CLI that with a command that&#8217;ll scaffold things for us, so <code>cd</code> wherever you want to set things up and run:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">doctl serverless init --language js qr-generator</code></pre>\n\n\n\n<p class=\"is-style-explanation\">Notice the language is explicitly declared. DigitalOcean functions also support PHP and Python.</p>\n\n\n\n<p>We get a nice clean project called <code>qr-generator</code> with a <code>/packages</code> folder that holds all the project&#8217;s functions. There&#8217;s a sample function in there, but we can overlook it for now and create a <code>qr</code> folder right next to it:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/step-1.png?resize=934%2C467&#038;ssl=1\" alt=\"\" class=\"wp-image-366149\" width=\"934\" height=\"467\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/step-1.png?w=1868&amp;ssl=1 1868w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/step-1.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/step-1.png?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/step-1.png?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/step-1.png?resize=1536%2C768&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>That folder is where both the <code>qrcode</code> package and our <code>qr.js</code> function are going to live. So, let&#8217;s <code>cd</code> into <code>packages/sample/qr</code> and install the package:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm install --save qrcode</code></pre>\n\n\n\n<p>Now we can write the function in a new <code>qr.js</code> file:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const qrcode = require('qrcode')\n\nexports.main = (args) => {\n  return qrcode.toDataURL(args.text).then(res => ({\n    headers:  { 'content-type': 'text/html; charset=UTF-8' },\n    body: args.img == undefined ? res : `&lt;img src=\"${res}\">`\n  }))\n}\n\nif (process.env.TEST) exports.main({text:\"hello\"}).then(console.log)</code></pre>\n\n\n\n<p>All that&#8217;s doing is requiring the the <code>qrcode</code> package and exporting a function that basically generates an <code>&lt;img&gt;</code> tag with the a base64 PNG for the source. We can even test it out in the terminal:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">doctl serverless functions invoke sample/qr -p \"text:css-tricks.com\"</code></pre>\n\n\n\n<h3>Check the config file</h3>\n\n\n\n<p>There is one extra step we need here. When the project was scaffolded, we got this little <code>project.yml</code> file and it configures the function with some information about it. This is what&#8217;s in there by default:</p>\n\n\n\n<pre rel=\"YML\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"4,9\"><code markup=\"tt\">targetNamespace: ''\nparameters: {}\npackages:\n  - name: sample\n    environment: {}\n    parameters: {}\n    annotations: {}\n    actions:\n      - name: hello\n        binary: false\n        main: ''\n        runtime: 'nodejs:default'\n        web: true\n        parameters: {}\n        environment: {}\n        annotations: {}\n        limits: {}</code></pre>\n\n\n\n<p>See those highlighted lines? The <code>packages: name</code> property is where in the <code>packages</code> folder the function lives, which is a folder called <code>sample</code> in this case. The <code>actions/ name</code> property is the name of the function itself, which is the name of the file. It&#8217;s <code>hello</code> by default when we spin up the project, but we named ours <code>qr.js</code>, so we oughta change that line from <code>hello</code> to <code>qr</code> before moving on.</p>\n\n\n\n<h3>Deploy the function</h3>\n\n\n\n<p>We can do it straight from the command line! First, we connect to the DigitalOcean sandbox environment so we have a live URL for testing:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">## You will need an DO API key handy\ndoctl sandbox connect</code></pre>\n\n\n\n<p>Now we can deploy the function:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">doctl sandbox deploy qr-generator</code></pre>\n\n\n\n<p>Once deployed, we can access the function at a URL. What&#8217;s the URL? There&#8217;s a command for that:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">doctl sbx fn get sample/qr --url\nhttps://faas-nyc1-2ef2e6cc.doserverless.co/api/v1/web/fn-10a937cb-1f12-427b-aadd-f43d0b08d64a/sample/qr</code></pre>\n\n\n\n<p>Heck yeah! No more need to ship that entire package with the rest of the scripts! We can hit that URL and generate the QR code from there.</p>\n\n\n\n<h3>Demo</h3>\n\n\n\n<p>We <code>fetch</code> the API and that&#8217;s really all there is to it!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYQzMwz\" src=\"//codepen.io/anon/embed/LYQzMwz?height=450&amp;theme-id=1&amp;slug-hash=LYQzMwz&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYQzMwz\" title=\"CodePen Embed LYQzMwz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/lets-make-a-qr-code-generator-with-a-serverless-function/\">Let&#8217;s Make a QR Code Generator With a Serverless Function!</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "QR codes are funny, right? We love them, then hate them, then love them again. Anyways, they’ve lately been popping up again and it got me thinking about how they’re made. There are like a gazillion QR code generators out there, but say it’s something you need to do on your own website. This package can do that. But it’s also weighs in at a hefty 180 KB for everything it needs to generate stuff. You wouldn’t want to serve all that along with the rest of your scripts.\n\n\n\nNow, I’m relatively new to the concept of cloud functions, but I hear that’s the bee’s knees for something just like this. That way, the function lives somewhere on a server that can be called when it’s needed. Sorta like a little API to run the function.\n\n\n\nSome hosts offer some sort of cloud function feature. DigitalOcean happens to be one of them! And, like Droplets, functions are pretty easy to deploy.\n\n\n\n\n\n\n\nCreate a functions folder locally\n\n\n\nDigitalOcean has a CLI that with a command that’ll scaffold things for us, so cd wherever you want to set things up and run:\n\n\n\ndoctl serverless init --language js qr-generator\n\n\n\nNotice the language is explicitly declared. DigitalOcean functions also support PHP and Python.\n\n\n\nWe get a nice clean project called qr-generator with a /packages folder that holds all the project’s functions. There’s a sample function in there, but we can overlook it for now and create a qr folder right next to it:\n\n\n\n\n\n\n\nThat folder is where both the qrcode package and our qr.js function are going to live. So, let’s cd into packages/sample/qr and install the package:\n\n\n\nnpm install --save qrcode\n\n\n\nNow we can write the function in a new qr.js file:\n\n\n\nconst qrcode = require('qrcode')\n\nexports.main = (args) => {\n  return qrcode.toDataURL(args.text).then(res => ({\n    headers:  { 'content-type': 'text/html; charset=UTF-8' },\n    body: args.img == undefined ? res : `<img src=\"${res}\">`\n  }))\n}\n\nif (process.env.TEST) exports.main({text:\"hello\"}).then(console.log)\n\n\n\nAll that’s doing is requiring the the qrcode package and exporting a function that basically generates an <img> tag with the a base64 PNG for the source. We can even test it out in the terminal:\n\n\n\ndoctl serverless functions invoke sample/qr -p \"text:css-tricks.com\"\n\n\n\nCheck the config file\n\n\n\nThere is one extra step we need here. When the project was scaffolded, we got this little project.yml file and it configures the function with some information about it. This is what’s in there by default:\n\n\n\ntargetNamespace: ''\nparameters: {}\npackages:\n  - name: sample\n    environment: {}\n    parameters: {}\n    annotations: {}\n    actions:\n      - name: hello\n        binary: false\n        main: ''\n        runtime: 'nodejs:default'\n        web: true\n        parameters: {}\n        environment: {}\n        annotations: {}\n        limits: {}\n\n\n\nSee those highlighted lines? The packages: name property is where in the packages folder the function lives, which is a folder called sample in this case. The actions/ name property is the name of the function itself, which is the name of the file. It’s hello by default when we spin up the project, but we named ours qr.js, so we oughta change that line from hello to qr before moving on.\n\n\n\nDeploy the function\n\n\n\nWe can do it straight from the command line! First, we connect to the DigitalOcean sandbox environment so we have a live URL for testing:\n\n\n\n## You will need an DO API key handy\ndoctl sandbox connect\n\n\n\nNow we can deploy the function:\n\n\n\ndoctl sandbox deploy qr-generator\n\n\n\nOnce deployed, we can access the function at a URL. What’s the URL? There’s a command for that:\n\n\n\ndoctl sbx fn get sample/qr --url\nhttps://faas-nyc1-2ef2e6cc.doserverless.co/api/v1/web/fn-10a937cb-1f12-427b-aadd-f43d0b08d64a/sample/qr\n\n\n\nHeck yeah! No more need to ship that entire package with the rest of the scripts! We can hit that URL and generate the QR code from there.\n\n\n\nDemo\n\n\n\nWe fetch the API and that’s really all there is to it!\n\n\n\nCodePen Embed Fallback\n\nLet’s Make a QR Code Generator With a Serverless Function! originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-06-08T14:30:53.000Z",
      "date_modified": "2022-06-08T14:30:53.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366222",
      "url": "https://css-tricks.com/building-interoperable-web-components-react/",
      "title": "Building Interoperable Web Components That Even Work With React",
      "summary": "Those of us who’ve been web developers more than a few years have probably written code using more than one JavaScript framework. With all the choices out there — React, Svelte, Vue, Angular, Solid — it’s all but inevitable. One …\n\nBuilding Interoperable Web Components That Even Work With React originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Those of us who&#8217;ve been web developers more than a few years have probably written code using more than one JavaScript framework. With all the choices out there — React, Svelte, Vue, Angular, Solid — it&#8217;s all but inevitable. One of the more frustrating things we have to deal with when working across frameworks is re-creating all those low-level UI components: buttons, tabs, dropdowns, etc. What&#8217;s particularly frustrating is that we&#8217;ll typically have them defined in one framework, say React, but then need to rewrite them if we want to build something in Svelte. Or Vue. Or Solid. And so on.</p>\n\n\n\n<p>Wouldn&#8217;t it be better if we could define these low-level UI components once, in a framework-agnostic way, and then re-use them between frameworks? Of course it would! And we can; web components are the way. This post will show you how.</p>\n\n\n\n<span id=\"more-366222\"></span>\n\n\n\n<p class=\"is-style-explanation\">As of now, the SSR story for web components is a bit lacking. Declarative shadow DOM (DSD) is how a web component is server-side rendered, but, as of this writing, it&#8217;s not integrated with your favorite application frameworks like Next, Remix or SvelteKit. If that&#8217;s a requirement for you, be sure to check the latest status of DSD. But otherwise, if SSR isn&#8217;t something you&#8217;re using, read on.</p>\n\n\n\n<h3>First, some context</h3>\n\n\n\n<p>Web Components are essentially HTML elements that you define yourself, like <code>&lt;yummy-pizza&gt;</code> or whatever, from the ground up. They&#8217;re covered all over here at CSS-Tricks (including <a href=\"https://css-tricks.com/an-introduction-to-web-components/\">an extensive series by Caleb Williams</a> and <a href=\"https://css-tricks.com/web-components-are-easier-than-you-think/\">one by John Rhea</a>) but we&#8217;ll briefly walk through the process. Essentially, you define a JavaScript class, inherit it from <code>HTMLElement</code>, and then define whatever properties, attributes and styles the web component has and, of course, the markup it will ultimately render to your users.</p>\n\n\n\n<p>Being able to define custom HTML elements that aren&#8217;t bound to any particular component is exciting. But this freedom is also a limitation. Existing independently of any JavaScript framework means you can&#8217;t really interact with those JavaScript frameworks. Think of a React component which fetches some data and then renders some <em>other</em> React component, passing along the data. This wouldn&#8217;t really work as a web component, since a web component doesn&#8217;t know how to render a React component.</p>\n\n\n\n<p>Web components particularly excel as <strong>leaf components</strong>. <dfn id=\"leaf\">Leaf components</dfn> are the last thing to be rendered in a component tree. These are the components which receive some props, and render some <abbr>UI</abbr>. These are <em>not</em> the components sitting in the middle of your component tree, passing data along, setting context, etc. — just pure pieces of <abbr>UI</abbr> that will look the same, no matter which JavaScript framework is powering the rest of the app.</p>\n\n\n\n<h3>The web component we&#8217;re building</h3>\n\n\n\n<p>Rather than build something boring (and common), like a button, let&#8217;s build something a little bit different. In my <a href=\"https://css-tricks.com/inline-image-previews-with-sharp-blurhash-and-lambda-functions/\">last post</a> we looked at using blurry image previews to prevent content reflow, and provide a decent UI for users while our images load. We looked at base64 encoding a blurry, degraded versions of our images, and showing that in our UI while the real image loaded. We also looked at generating incredibly compact, blurry previews using a tool called <a href=\"https://blurha.sh/\" rel=\"noopener\">Blurhash</a>.</p>\n\n\n\n<p>That post showed you how to generate those previews and use them in a React project. This post will show you how to use those previews from a web component so they can be used by <em>any</em> JavaScript framework.</p>\n\n\n\n<p>But we need to walk before we can run, so we&#8217;ll walk through something trivial and silly first to see exactly how web components work.</p>\n\n\n\n<p>Everything in this post will build vanilla web components without any tooling. That means the code will have a bit of boilerplate, but should be relatively easy to follow. Tools like <a href=\"https://lit.dev\" rel=\"noopener\">Lit</a> or <a href=\"https://stenciljs.com\" rel=\"noopener\">Stencil</a> are designed for building web components and can be used to remove much of this boilerplate. I urge you to check them out! But for this post, I&#8217;ll prefer a little more boilerplate in exchange for not having to introduce and teach another dependency.</p>\n\n\n\n<h3>A simple counter component</h3>\n\n\n\n<p>Let&#8217;s build the classic &#8220;Hello World&#8221; of JavaScript components: a counter. We&#8217;ll render a value, and a button that increments that value. Simple and boring, but it&#8217;ll let us look at the simplest possible web component.</p>\n\n\n\n<p>In order to build a web component, the first step is to make a JavaScript class, which inherits from <code>HTMLElement</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">class Counter extends HTMLElement {}</code></pre>\n\n\n\n<p>The last step is to register the web component, but only if we haven&#8217;t registered it already:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">if (!customElements.get(\"counter-wc\")) {\n  customElements.define(\"counter-wc\", Counter);\n}</code></pre>\n\n\n\n<p>And, of course, render it:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;counter-wc>&lt;/counter-wc></code></pre>\n\n\n\n<p>And everything in between is us making the web component do whatever we want it to. One common lifecycle method is <code>connectedCallback</code>, which fires when our web component is added to the DOM. We could use that method to render whatever content we&#8217;d like. Remember, this is a JS class inheriting from <code>HTMLElement</code>, which means our <code>this</code> value is the web component element itself, with all the normal DOM manipulation methods you already know and love.</p>\n\n\n\n<p>At it&#8217;s most simple, we could do this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">class Counter extends HTMLElement {\n  connectedCallback() {\n    this.innerHTML = \"&lt;div style='color: green'>Hey&lt;/div>\";\n  }\n}\n\nif (!customElements.get(\"counter-wc\")) {\n  customElements.define(\"counter-wc\", Counter);\n}</code></pre>\n\n\n\n<p>&#8230;which will work just fine.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"160\" height=\"116\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/img1.jpg?resize=160%2C116&#038;ssl=1\" alt=\"The word &quot;hey&quot; in green.\" class=\"wp-image-366223\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<h4>Adding real content</h4>\n\n\n\n<p>Let&#8217;s add some useful, interactive content. We need a <code>&lt;span&gt;</code> to hold the current number value and a <code>&lt;button&gt;</code> to increment the counter. For now, we&#8217;ll create this content in our constructor and append it when the web component is actually in the DOM:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">constructor() {\n  super();\n  const container = document.createElement('div');\n\n  this.valSpan = document.createElement('span');\n\n  const increment = document.createElement('button');\n  increment.innerText = 'Increment';\n  increment.addEventListener('click', () => {\n    this.#value = this.#currentValue + 1;\n  });\n\n  container.appendChild(this.valSpan);\n  container.appendChild(document.createElement('br'));\n  container.appendChild(increment);\n\n  this.container = container;\n}\n\nconnectedCallback() {\n  this.appendChild(this.container);\n  this.update();\n}</code></pre>\n\n\n\n<p>If you&#8217;re really grossed out by the manual DOM creation, remember you can set <code>innerHTML</code>, or even create a template element once as a static property of your web component class, clone it, and insert the contents for new web component instances. There&#8217;s probably some other options I&#8217;m not thinking of, or you can always use a web component framework like <a href=\"https://lit.dev\" rel=\"noopener\">Lit</a> or <a href=\"https://stenciljs.com\" rel=\"noopener\">Stencil</a>. But for this post, we&#8217;ll continue to keep it simple.</p>\n\n\n\n<p>Moving on, we need a settable JavaScript class property named <code>value</code></p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">#currentValue = 0;\n\nset #value(val) {\n  this.#currentValue = val;\n  this.update();\n}</code></pre>\n\n\n\n<p>It&#8217;s just a standard class property with a setter, along with a second property to hold the value. One fun twist is that I&#8217;m using the private JavaScript class property syntax for these values. That means nobody outside our web component can ever touch these values. This is standard JavaScript <a href=\"https://caniuse.com/mdn-javascript_classes_private_class_fields\" rel=\"noopener\">that&#8217;s supported in all modern browsers</a>, so don&#8217;t be afraid to use it.</p>\n\n\n\n<p>Or feel free to call it <code>_value</code> if you prefer. And, lastly, our <code>update</code> method:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">update() {\n  this.valSpan.innerText = this.#currentValue;\n}</code></pre>\n\n\n\n<p>It works!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"276\" height=\"156\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/img3.jpg?resize=276%2C156&#038;ssl=1\" alt=\"The counter web component.\" class=\"wp-image-366225\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>Obviously this is not code you&#8217;d want to maintain at scale. Here&#8217;s a full <a href=\"https://stackblitz.com/edit/vitejs-vite-7f6brw?file=counter-wc.js\" rel=\"noopener\">working example</a> if you&#8217;d like a closer look. As I&#8217;ve said, tools like Lit and Stencil are designed to make this simpler.</p>\n\n\n\n<h4>Adding some more functionality</h4>\n\n\n\n<p>This post is not a deep dive into web components. We won&#8217;t cover all the APIs and lifecycles; we won&#8217;t even cover <a href=\"https://css-tricks.com/extracting-text-from-content-using-html-slot-html-template-and-shadow-dom/\">shadow roots or slots</a>. There&#8217;s endless content on those topics. My goal here is to provide a decent enough introduction to spark some interest, along with some useful guidance on actually <em>using</em> web components with the popular JavaScript frameworks you already know and love.</p>\n\n\n\n<p>To that end, let&#8217;s enhance our counter web component a bit. Let&#8217;s have it accept a <code>color</code> attribute, to control the color of the value that&#8217;s displayed. And let&#8217;s also have it accept an <code>increment</code> property, so consumers of this web component can have it increment by 2, 3, 4 at a time. And to drive these state changes, let&#8217;s use our new counter in a Svelte sandbox — we&#8217;ll get to React in a bit.</p>\n\n\n\n<p>We&#8217;ll start with the same web component as before and add a color attribute. To configure our web component to accept and respond to an attribute, we add a static <code>observedAttributes</code> property that returns the attributes that our web component listens for.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">static observedAttributes = [\"color\"];</code></pre>\n\n\n\n<p>With that in place, we can add a <code>attributeChangedCallback</code> lifecycle method, which will run whenever any of the attributes listed in <code>observedAttributes</code> are set, or updated.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">attributeChangedCallback(name, oldValue, newValue) {\n  if (name === \"color\") {\n    this.update();\n  }\n}</code></pre>\n\n\n\n<p>Now we update our <code>update</code> method to actually use it:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">update() {\n  this.valSpan.innerText = this._currentValue;\n  this.valSpan.style.color = this.getAttribute(\"color\") || \"black\";\n}</code></pre>\n\n\n\n<p>Lastly, let&#8217;s add our <code>increment</code> property:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">increment = 1;</code></pre>\n\n\n\n<p>Simple and humble.</p>\n\n\n\n<h3>Using the counter component in Svelte</h3>\n\n\n\n<p>Let&#8217;s use what we just made. We&#8217;ll go into our Svelte app component and add something like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  let color = \"red\";\n&lt;/script>\n\n&lt;style>\n  main {\n    text-align: center;\n  }\n&lt;/style>\n\n&lt;main>\n  &lt;select bind:value={color}>\n    &lt;option value=\"red\">Red&lt;/option>\n    &lt;option value=\"green\">Green&lt;/option>\n    &lt;option value=\"blue\">Blue&lt;/option>\n  &lt;/select>\n\n  &lt;counter-wc color={color}>&lt;/counter-wc>\n&lt;/main></code></pre>\n\n\n\n<p>And it works! Our counter renders, increments, and the dropdown updates the color. As you can see, we render the color attribute in our Svelte template and, when the value changes, Svelte handles the legwork of calling <code>setAttribute</code> on our underlying web component instance. There&#8217;s nothing special here: this is the same thing it already does for the attributes of <em>any</em> HTML element.</p>\n\n\n\n<p>Things get a little bit interesting with the <code>increment</code> prop. This is <em>not</em> an attribute on our web component; it&#8217;s a prop on the web component&#8217;s class. That means it needs to be set on the web component&#8217;s instance. Bear with me, as things will wind up much simpler in a bit.</p>\n\n\n\n<p>First, we&#8217;ll add some variables to our Svelte component:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let increment = 1;\nlet wcInstance;</code></pre>\n\n\n\n<p>Our powerhouse of a counter component will let you increment by 1, or by 2:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button on:click={() => increment = 1}>Increment 1&lt;/button>\n&lt;button on:click={() => increment = 2}>Increment 2&lt;/button></code></pre>\n\n\n\n<p>But, <em>in theory</em>, we need to get the actual instance of our web component. This is the same thing we always do anytime we add a <code>ref</code> with React. With Svelte, it&#8217;s a simple <code>bind:this</code> directive:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;counter-wc bind:this={wcInstance} color={color}>&lt;/counter-wc></code></pre>\n\n\n\n<p>Now, in our Svelte template, we listen for changes to our component&#8217;s increment variable and set the underlying web component property.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$: {\n  if (wcInstance) {\n    wcInstance.increment = increment;\n  }\n}</code></pre>\n\n\n\n<p>You can test it out <a href=\"https://stackblitz.com/edit/vitejs-vite-smjw4o?file=src/App.svelte\" rel=\"noopener\">over at this live demo</a>.</p>\n\n\n\n<p>We obviously don&#8217;t want to do this for every web component or prop we need to manage. Wouldn&#8217;t it be nice if we could just set <code>increment</code> right on our web component, in markup, like we normally do for component props, and have it, you know, <em>just work</em>? In other words, it&#8217;d be nice if we could delete all usages of <code>wcInstance</code> and use this simpler code instead:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;counter-wc increment={increment} color={color}>&lt;/counter-wc></code></pre>\n\n\n\n<p>It turns out we can. This code works; Svelte handles all that legwork for us. <a href=\"https://stackblitz.com/edit/vitejs-vite-ucexzq?file=src/App.svelte\" rel=\"noopener\">Check it out in this demo.</a> This is standard behavior for pretty much all JavaScript frameworks.</p>\n\n\n\n<p>So why did I show you the manual way of setting the web component&#8217;s prop? Two reasons: it&#8217;s useful to understand how these things work and, a moment ago, I said this works for &#8220;pretty much&#8221; all JavaScript frameworks. But there&#8217;s one framework which, maddeningly, does not support web component prop setting like we just saw.</p>\n\n\n\n<h3>React is a different beast</h3>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/react-logo.png?resize=375%2C176&#038;ssl=1\" alt=\"\" class=\"wp-image-366226\" width=\"375\" height=\"176\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/react-logo.png?w=500&amp;ssl=1 500w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/06/react-logo.png?resize=300%2C140&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>React. The most popular JavaScript framework on the planet does not support basic interop with web components. This is a well-known problem that&#8217;s unique to React. Interestingly, this is actually fixed in React&#8217;s experimental branch, but for some reason wasn&#8217;t merged into version 18. That said, we can still <a href=\"https://custom-elements-everywhere.com/\" rel=\"noopener\">track the progress of it</a>. And you can try this yourself with a <a href=\"https://stackblitz.com/edit/react-ydpj3u?file=src/App.js\" rel=\"noopener\">live demo</a>.</p>\n\n\n\n<p>The solution, of course, is to use a <code>ref</code>, grab the web component instance, and manually set <code>increment</code> when that value changes. It looks like this:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">import React, { useState, useRef, useEffect } from 'react';\nimport './counter-wc';\n\nexport default function App() {\n  const [increment, setIncrement] = useState(1);\n  const [color, setColor] = useState('red');\n  const wcRef = useRef(null);\n\n  useEffect(() => {\n    wcRef.current.increment = increment;\n  }, [increment]);\n\n  return (\n    &lt;div>\n      &lt;div className=\"increment-container\">\n        &lt;button onClick={() => setIncrement(1)}>Increment by 1&lt;/button>\n        &lt;button onClick={() => setIncrement(2)}>Increment by 2&lt;/button>\n      &lt;/div>\n\n      &lt;select value={color} onChange={(e) => setColor(e.target.value)}>\n        &lt;option value=\"red\">Red&lt;/option>\n        &lt;option value=\"green\">Green&lt;/option>\n        &lt;option value=\"blue\">Blue&lt;/option>\n      &lt;/select>\n\n      &lt;counter-wc ref={wcRef} increment={increment} color={color}>&lt;/counter-wc>\n    &lt;/div>\n  );\n}</code></pre>\n\n\n\n<div class=\"wp-container-14 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://stackblitz.com/edit/react-y43odj?file=src%252FApp.js\" rel=\"noopener\">Live demo</a></div>\n</div>\n\n\n\n<p>As we discussed, coding this up manually for every web component property is simply not scalable. But all is not lost because we have a couple of options.</p>\n\n\n\n<h4>Option 1: Use attributes everywhere</h4>\n\n\n\n<p>We have attributes. If you clicked the React demo above, the <code>increment</code> prop wasn&#8217;t working, but the color correctly changed. Can&#8217;t we code everything with attributes? Sadly, no. Attribute values can only be strings. That&#8217;s good enough here, and we&#8217;d be able to get somewhat far with this approach. Numbers like <code>increment</code> can be converted to and from strings. We could even JSON stringify/parse objects. But eventually we&#8217;ll need to pass a function into a web component, and at that point we&#8217;d be out of options.</p>\n\n\n\n<h4>Option 2: Wrap it</h4>\n\n\n\n<p>There&#8217;s an old saying that you can solve any problem in computer science by adding a level of indirection (except the problem of too many levels of indirection). The code to set these props is pretty predictable and simple. What if we hide it in a library? The smart folks behind Lit <a href=\"https://www.npmjs.com/package/@lit-labs/react\" rel=\"noopener\">have one solution</a>. This library creates a new React component for you after you give it a web component, and list out the properties it needs. While clever, I&#8217;m not a fan of this approach.</p>\n\n\n\n<p>Rather than have a one-to-one mapping of web components to manually-created React components, what I prefer is just <em>one</em> React component that we pass our web component <em>tag name</em> to (<code>counter-wc</code> in our case) — along with all the attributes and properties — and for this component to render our web component, add the <code>ref</code>, then figure out what is a prop and what is an attribute. That&#8217;s the ideal solution in my opinion. I don&#8217;t know of a library that does this, but it should be straightforward to create. Let&#8217;s give it a shot!</p>\n\n\n\n<p>This is the <em>usage</em> we&#8217;re looking for:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;WcWrapper wcTag=\"counter-wc\" increment={increment} color={color} /></code></pre>\n\n\n\n<p><code>wcTag</code> is the web component tag name; the rest are the properties and attributes we want passed along.</p>\n\n\n\n<p>Here&#8217;s what my implementation looks like:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import React, { createElement, useRef, useLayoutEffect, memo } from 'react';\n\nconst _WcWrapper = (props) => {\n  const { wcTag, children, ...restProps } = props;\n  const wcRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const wc = wcRef.current;\n\n    for (const [key, value] of Object.entries(restProps)) {\n      if (key in wc) {\n        if (wc[key] !== value) {\n          wc[key] = value;\n        }\n      } else {\n        if (wc.getAttribute(key) !== value) {\n          wc.setAttribute(key, value);\n        }\n      }\n    }\n  });\n\n  return createElement(wcTag, { ref: wcRef });\n};\n\nexport const WcWrapper = memo(_WcWrapper);</code></pre>\n\n\n\n<p>The most interesting line is at the end:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">return createElement(wcTag, { ref: wcRef });</code></pre>\n\n\n\n<p>This is how we create an element in React with a dynamic name. In fact, this is what React normally transpiles JSX into. All our divs are converted to <code>createElement(\"div\")</code> calls. We don&#8217;t normally need to call this API directly but it&#8217;s there when we need it.</p>\n\n\n\n<p>Beyond that, we want to run a layout effect and loop through every prop that we&#8217;ve passed to our component. We loop through all of them and check to see if it&#8217;s a property with an <code>in</code> check that checks the web component instance object as well as its prototype chain, which will catch any getters/setters that wind up on the class prototype. If no such property exists, it&#8217;s assumed to be an attribute. In either case, we only set it if the value has actually changed.</p>\n\n\n\n<p>If you&#8217;re wondering why we use <code>useLayoutEffect</code> instead of <code>useEffect</code>, it&#8217;s because we want to immediately run these updates before our content is rendered. Also, note that we have no dependency array to our <code>useLayoutEffect</code>; this means we want to run this update on <em>every render</em>. This can be risky since React tends to re-render <em>a lot</em>. I ameliorate this by wrapping the whole thing in <code>React.memo</code>. This is essentially the modern version of <code>React.PureComponent</code>, which means the component will only re-render if any of its actual props have changed — and it checks whether that&#8217;s happened via a simple equality check.</p>\n\n\n\n<p>The only risk here is that if you&#8217;re passing an object prop that you&#8217;re mutating directly without re-assigning, then you won&#8217;t see the updates. But this is highly discouraged, especially in the React community, so I wouldn&#8217;t worry about it.</p>\n\n\n\n<p>Before moving on, I&#8217;d like to call out one last thing. You might not be happy with how the usage looks. Again, this component is used like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;WcWrapper wcTag=\"counter-wc\" increment={increment} color={color} /></code></pre>\n\n\n\n<p>Specifically, you might not like passing the web component tag name to the <code>&lt;WcWrapper&gt;</code> component and prefer instead the <code>@lit-labs/react</code> package above, which creates a new individual React component for each web component. That&#8217;s totally fair and I&#8217;d encourage you to use whatever you&#8217;re most comfortable with. But for me, one advantage with this approach is that it&#8217;s easy to <em>delete</em>. If by some miracle React merges proper web component handling from their experimental branch into <code>main</code> tomorrow, you&#8217;d be able to change the above code from this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;WcWrapper wcTag=\"counter-wc\" increment={increment} color={color} /></code></pre>\n\n\n\n<p>&#8230;to this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;counter-wc ref={wcRef} increment={increment} color={color} /></code></pre>\n\n\n\n<p>You could probably even write a single codemod to do that everywhere, and then delete <code>&lt;WcWrapper&gt;</code> altogether. Actually, scratch that: a global search and replace with a RegEx would probably work.</p>\n\n\n\n<h3>The implementation</h3>\n\n\n\n<p>I know, it seems like it took a journey to get here. If you recall, our original goal was to take the image preview code we looked at in my <a href=\"https://css-tricks.com/inline-image-previews-with-sharp-blurhash-and-lambda-functions/\">last post</a>, and move it to a web component so it can be used in any JavaScript framework. React&#8217;s lack of proper interop added a lot of detail to the mix. But now that we have a decent handle on how to create a web component, and use it, the implementation will almost be anti-climactic.</p>\n\n\n\n<p>I&#8217;ll drop the entire web component here and call out some of the interesting bits. If you&#8217;d like to see it in action, here&#8217;s a <a href=\"https://stackblitz.com/edit/vitejs-vite-tt8yns?file=src/book-cover-wc.js\" rel=\"noopener\">working demo</a>. It&#8217;ll switch between my three favorite books on my three favorite programming languages. The URL for each book will be unique each time, so you can see the preview, though you&#8217;ll likely want to throttle things in your DevTools Network tab to really see things taking place.</p>\n\n\n\n<details >\n  <summary>\n          View entire code      </summary>\n  \n\n<pre rel=\"View full code\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">class BookCover extends HTMLElement {\n  static observedAttributes = ['url'];\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'url') {\n      this.createMainImage(newValue);\n    }\n  }\n\n  set preview(val) {\n    this.previewEl = this.createPreview(val);\n    this.render();\n  }\n\n  createPreview(val) {\n    if (typeof val === 'string') {\n      return base64Preview(val);\n    } else {\n      return blurHashPreview(val);\n    }\n  }\n\n  createMainImage(url) {\n    this.loaded = false;\n    const img = document.createElement('img');\n    img.alt = 'Book cover';\n    img.addEventListener('load', () =&amp;gt; {\n      if (img === this.imageEl) {\n        this.loaded = true;\n        this.render();\n      }\n    });\n    img.src = url;\n    this.imageEl = img;\n  }\n\n  connectedCallback() {\n    this.render();\n  }\n\n  render() {\n    const elementMaybe = this.loaded ? this.imageEl : this.previewEl;\n    syncSingleChild(this, elementMaybe);\n  }\n}</code></pre>\n\n\n</details>\n\n\n<p>First, we register the attribute we&#8217;re interested in and react when it changes:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">static observedAttributes = ['url'];\n\nattributeChangedCallback(name, oldValue, newValue) {\n  if (name === 'url') {\n    this.createMainImage(newValue);\n  }\n}</code></pre>\n\n\n\n<p>This causes our image component to be created, which will show only when loaded:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">createMainImage(url) {\n  this.loaded = false;\n  const img = document.createElement('img');\n  img.alt = 'Book cover';\n  img.addEventListener('load', () => {\n    if (img === this.imageEl) {\n      this.loaded = true;\n      this.render();\n    }\n  });\n  img.src = url;\n  this.imageEl = img;\n}</code></pre>\n\n\n\n<p>Next we have our preview property, which can either be our base64 preview string, or our <code>blurhash</code> packet:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">set preview(val) {\n  this.previewEl = this.createPreview(val);\n  this.render();\n}\n\ncreatePreview(val) {\n  if (typeof val === 'string') {\n    return base64Preview(val);\n  } else {\n    return blurHashPreview(val);\n  }\n}</code></pre>\n\n\n\n<p>This defers to whichever helper function we need:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function base64Preview(val) {\n  const img = document.createElement('img');\n  img.src = val;\n  return img;\n}\n\nfunction blurHashPreview(preview) {\n  const canvasEl = document.createElement('canvas');\n  const { w: width, h: height } = preview;\n\n  canvasEl.width = width;\n  canvasEl.height = height;\n\n  const pixels = decode(preview.blurhash, width, height);\n  const ctx = canvasEl.getContext('2d');\n  const imageData = ctx.createImageData(width, height);\n  imageData.data.set(pixels);\n  ctx.putImageData(imageData, 0, 0);\n\n  return canvasEl;\n}</code></pre>\n\n\n\n<p>And, lastly, our <code>render</code> method:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">connectedCallback() {\n  this.render();\n}\n\nrender() {\n  const elementMaybe = this.loaded ? this.imageEl : this.previewEl;\n  syncSingleChild(this, elementMaybe);\n}</code></pre>\n\n\n\n<p>And a few helpers methods to tie everything together:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export function syncSingleChild(container, child) {\n  const currentChild = container.firstElementChild;\n  if (currentChild !== child) {\n    clearContainer(container);\n    if (child) {\n      container.appendChild(child);\n    }\n  }\n}\n\nexport function clearContainer(el) {\n  let child;\n\n  while ((child = el.firstElementChild)) {\n    el.removeChild(child);\n  }\n}</code></pre>\n\n\n\n<p>It&#8217;s a little bit more boilerplate than we&#8217;d need if we build this in a framework, but the upside is that we can re-use this in any framework we&#8217;d like — although React will need a wrapper for now, as we discussed.</p>\n\n\n\n<h4>Odds and ends</h4>\n\n\n\n<p>I&#8217;ve already mentioned Lit&#8217;s React wrapper. But if you find yourself using Stencil, it actually supports a <a href=\"https://stenciljs.com/docs/react\" rel=\"noopener\">separate output pipeline just for React</a>. And the good folks at Microsoft have also <a href=\"https://www.npmjs.com/package/@microsoft/fast-react-wrapper\" rel=\"noopener\">created something similar to Lit&#8217;s wrapper</a>, attached to the Fast web component library.</p>\n\n\n\n<p>As I mentioned, all frameworks not named React will handle setting web component properties for you. Just note that some have some special flavors of syntax. For example, with Solid.js, <code>&lt;your-wc value={12}&gt;</code> always assumes that <code>value</code> is a property, which you can override with an <code>attr</code> prefix, like <code>&lt;your-wc attr:value={12}&gt;</code>.</p>\n\n\n\n<h3>Wrapping up</h3>\n\n\n\n<p>Web components are an interesting, often underused part of the web development landscape. They can help reduce your dependence on any single JavaScript framework by managing your UI, or &#8220;leaf&#8221; components. While creating these as web components — as opposed to Svelte or React components — won&#8217;t be as ergonomic, the upside is that they&#8217;ll be widely reusable.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/building-interoperable-web-components-react/\">Building Interoperable Web Components That Even Work With React</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Those of us who’ve been web developers more than a few years have probably written code using more than one JavaScript framework. With all the choices out there — React, Svelte, Vue, Angular, Solid — it’s all but inevitable. One of the more frustrating things we have to deal with when working across frameworks is re-creating all those low-level UI components: buttons, tabs, dropdowns, etc. What’s particularly frustrating is that we’ll typically have them defined in one framework, say React, but then need to rewrite them if we want to build something in Svelte. Or Vue. Or Solid. And so on.\n\n\n\nWouldn’t it be better if we could define these low-level UI components once, in a framework-agnostic way, and then re-use them between frameworks? Of course it would! And we can; web components are the way. This post will show you how.\n\n\n\n\n\n\n\nAs of now, the SSR story for web components is a bit lacking. Declarative shadow DOM (DSD) is how a web component is server-side rendered, but, as of this writing, it’s not integrated with your favorite application frameworks like Next, Remix or SvelteKit. If that’s a requirement for you, be sure to check the latest status of DSD. But otherwise, if SSR isn’t something you’re using, read on.\n\n\n\nFirst, some context\n\n\n\nWeb Components are essentially HTML elements that you define yourself, like <yummy-pizza> or whatever, from the ground up. They’re covered all over here at CSS-Tricks (including an extensive series by Caleb Williams and one by John Rhea) but we’ll briefly walk through the process. Essentially, you define a JavaScript class, inherit it from HTMLElement, and then define whatever properties, attributes and styles the web component has and, of course, the markup it will ultimately render to your users.\n\n\n\nBeing able to define custom HTML elements that aren’t bound to any particular component is exciting. But this freedom is also a limitation. Existing independently of any JavaScript framework means you can’t really interact with those JavaScript frameworks. Think of a React component which fetches some data and then renders some other React component, passing along the data. This wouldn’t really work as a web component, since a web component doesn’t know how to render a React component.\n\n\n\nWeb components particularly excel as leaf components. Leaf components are the last thing to be rendered in a component tree. These are the components which receive some props, and render some UI. These are not the components sitting in the middle of your component tree, passing data along, setting context, etc. — just pure pieces of UI that will look the same, no matter which JavaScript framework is powering the rest of the app.\n\n\n\nThe web component we’re building\n\n\n\nRather than build something boring (and common), like a button, let’s build something a little bit different. In my last post we looked at using blurry image previews to prevent content reflow, and provide a decent UI for users while our images load. We looked at base64 encoding a blurry, degraded versions of our images, and showing that in our UI while the real image loaded. We also looked at generating incredibly compact, blurry previews using a tool called Blurhash.\n\n\n\nThat post showed you how to generate those previews and use them in a React project. This post will show you how to use those previews from a web component so they can be used by any JavaScript framework.\n\n\n\nBut we need to walk before we can run, so we’ll walk through something trivial and silly first to see exactly how web components work.\n\n\n\nEverything in this post will build vanilla web components without any tooling. That means the code will have a bit of boilerplate, but should be relatively easy to follow. Tools like Lit or Stencil are designed for building web components and can be used to remove much of this boilerplate. I urge you to check them out! But for this post, I’ll prefer a little more boilerplate in exchange for not having to introduce and teach another dependency.\n\n\n\nA simple counter component\n\n\n\nLet’s build the classic “Hello World” of JavaScript components: a counter. We’ll render a value, and a button that increments that value. Simple and boring, but it’ll let us look at the simplest possible web component.\n\n\n\nIn order to build a web component, the first step is to make a JavaScript class, which inherits from HTMLElement:\n\n\n\nclass Counter extends HTMLElement {}\n\n\n\nThe last step is to register the web component, but only if we haven’t registered it already:\n\n\n\nif (!customElements.get(\"counter-wc\")) {\n  customElements.define(\"counter-wc\", Counter);\n}\n\n\n\nAnd, of course, render it:\n\n\n\n<counter-wc></counter-wc>\n\n\n\nAnd everything in between is us making the web component do whatever we want it to. One common lifecycle method is connectedCallback, which fires when our web component is added to the DOM. We could use that method to render whatever content we’d like. Remember, this is a JS class inheriting from HTMLElement, which means our this value is the web component element itself, with all the normal DOM manipulation methods you already know and love.\n\n\n\nAt it’s most simple, we could do this:\n\n\n\nclass Counter extends HTMLElement {\n  connectedCallback() {\n    this.innerHTML = \"<div style='color: green'>Hey</div>\";\n  }\n}\n\nif (!customElements.get(\"counter-wc\")) {\n  customElements.define(\"counter-wc\", Counter);\n}\n\n\n\n…which will work just fine.\n\n\n\n\n\n\n\nAdding real content\n\n\n\nLet’s add some useful, interactive content. We need a <span> to hold the current number value and a <button> to increment the counter. For now, we’ll create this content in our constructor and append it when the web component is actually in the DOM:\n\n\n\nconstructor() {\n  super();\n  const container = document.createElement('div');\n\n  this.valSpan = document.createElement('span');\n\n  const increment = document.createElement('button');\n  increment.innerText = 'Increment';\n  increment.addEventListener('click', () => {\n    this.#value = this.#currentValue + 1;\n  });\n\n  container.appendChild(this.valSpan);\n  container.appendChild(document.createElement('br'));\n  container.appendChild(increment);\n\n  this.container = container;\n}\n\nconnectedCallback() {\n  this.appendChild(this.container);\n  this.update();\n}\n\n\n\nIf you’re really grossed out by the manual DOM creation, remember you can set innerHTML, or even create a template element once as a static property of your web component class, clone it, and insert the contents for new web component instances. There’s probably some other options I’m not thinking of, or you can always use a web component framework like Lit or Stencil. But for this post, we’ll continue to keep it simple.\n\n\n\nMoving on, we need a settable JavaScript class property named value\n\n\n\n#currentValue = 0;\n\nset #value(val) {\n  this.#currentValue = val;\n  this.update();\n}\n\n\n\nIt’s just a standard class property with a setter, along with a second property to hold the value. One fun twist is that I’m using the private JavaScript class property syntax for these values. That means nobody outside our web component can ever touch these values. This is standard JavaScript that’s supported in all modern browsers, so don’t be afraid to use it.\n\n\n\nOr feel free to call it _value if you prefer. And, lastly, our update method:\n\n\n\nupdate() {\n  this.valSpan.innerText = this.#currentValue;\n}\n\n\n\nIt works!\n\n\n\n\n\n\n\nObviously this is not code you’d want to maintain at scale. Here’s a full working example if you’d like a closer look. As I’ve said, tools like Lit and Stencil are designed to make this simpler.\n\n\n\nAdding some more functionality\n\n\n\nThis post is not a deep dive into web components. We won’t cover all the APIs and lifecycles; we won’t even cover shadow roots or slots. There’s endless content on those topics. My goal here is to provide a decent enough introduction to spark some interest, along with some useful guidance on actually using web components with the popular JavaScript frameworks you already know and love.\n\n\n\nTo that end, let’s enhance our counter web component a bit. Let’s have it accept a color attribute, to control the color of the value that’s displayed. And let’s also have it accept an increment property, so consumers of this web component can have it increment by 2, 3, 4 at a time. And to drive these state changes, let’s use our new counter in a Svelte sandbox — we’ll get to React in a bit.\n\n\n\nWe’ll start with the same web component as before and add a color attribute. To configure our web component to accept and respond to an attribute, we add a static observedAttributes property that returns the attributes that our web component listens for.\n\n\n\nstatic observedAttributes = [\"color\"];\n\n\n\nWith that in place, we can add a attributeChangedCallback lifecycle method, which will run whenever any of the attributes listed in observedAttributes are set, or updated.\n\n\n\nattributeChangedCallback(name, oldValue, newValue) {\n  if (name === \"color\") {\n    this.update();\n  }\n}\n\n\n\nNow we update our update method to actually use it:\n\n\n\nupdate() {\n  this.valSpan.innerText = this._currentValue;\n  this.valSpan.style.color = this.getAttribute(\"color\") || \"black\";\n}\n\n\n\nLastly, let’s add our increment property:\n\n\n\nincrement = 1;\n\n\n\nSimple and humble.\n\n\n\nUsing the counter component in Svelte\n\n\n\nLet’s use what we just made. We’ll go into our Svelte app component and add something like this:\n\n\n\n<script>\n  let color = \"red\";\n</script>\n\n<style>\n  main {\n    text-align: center;\n  }\n</style>\n\n<main>\n  <select bind:value={color}>\n    <option value=\"red\">Red</option>\n    <option value=\"green\">Green</option>\n    <option value=\"blue\">Blue</option>\n  </select>\n\n  <counter-wc color={color}></counter-wc>\n</main>\n\n\n\nAnd it works! Our counter renders, increments, and the dropdown updates the color. As you can see, we render the color attribute in our Svelte template and, when the value changes, Svelte handles the legwork of calling setAttribute on our underlying web component instance. There’s nothing special here: this is the same thing it already does for the attributes of any HTML element.\n\n\n\nThings get a little bit interesting with the increment prop. This is not an attribute on our web component; it’s a prop on the web component’s class. That means it needs to be set on the web component’s instance. Bear with me, as things will wind up much simpler in a bit.\n\n\n\nFirst, we’ll add some variables to our Svelte component:\n\n\n\nlet increment = 1;\nlet wcInstance;\n\n\n\nOur powerhouse of a counter component will let you increment by 1, or by 2:\n\n\n\n<button on:click={() => increment = 1}>Increment 1</button>\n<button on:click={() => increment = 2}>Increment 2</button>\n\n\n\nBut, in theory, we need to get the actual instance of our web component. This is the same thing we always do anytime we add a ref with React. With Svelte, it’s a simple bind:this directive:\n\n\n\n<counter-wc bind:this={wcInstance} color={color}></counter-wc>\n\n\n\nNow, in our Svelte template, we listen for changes to our component’s increment variable and set the underlying web component property.\n\n\n\n$: {\n  if (wcInstance) {\n    wcInstance.increment = increment;\n  }\n}\n\n\n\nYou can test it out over at this live demo.\n\n\n\nWe obviously don’t want to do this for every web component or prop we need to manage. Wouldn’t it be nice if we could just set increment right on our web component, in markup, like we normally do for component props, and have it, you know, just work? In other words, it’d be nice if we could delete all usages of wcInstance and use this simpler code instead:\n\n\n\n<counter-wc increment={increment} color={color}></counter-wc>\n\n\n\nIt turns out we can. This code works; Svelte handles all that legwork for us. Check it out in this demo. This is standard behavior for pretty much all JavaScript frameworks.\n\n\n\nSo why did I show you the manual way of setting the web component’s prop? Two reasons: it’s useful to understand how these things work and, a moment ago, I said this works for “pretty much” all JavaScript frameworks. But there’s one framework which, maddeningly, does not support web component prop setting like we just saw.\n\n\n\nReact is a different beast\n\n\n\n\n\n\n\nReact. The most popular JavaScript framework on the planet does not support basic interop with web components. This is a well-known problem that’s unique to React. Interestingly, this is actually fixed in React’s experimental branch, but for some reason wasn’t merged into version 18. That said, we can still track the progress of it. And you can try this yourself with a live demo.\n\n\n\nThe solution, of course, is to use a ref, grab the web component instance, and manually set increment when that value changes. It looks like this:\n\n\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './counter-wc';\n\nexport default function App() {\n  const [increment, setIncrement] = useState(1);\n  const [color, setColor] = useState('red');\n  const wcRef = useRef(null);\n\n  useEffect(() => {\n    wcRef.current.increment = increment;\n  }, [increment]);\n\n  return (\n    <div>\n      <div className=\"increment-container\">\n        <button onClick={() => setIncrement(1)}>Increment by 1</button>\n        <button onClick={() => setIncrement(2)}>Increment by 2</button>\n      </div>\n\n      <select value={color} onChange={(e) => setColor(e.target.value)}>\n        <option value=\"red\">Red</option>\n        <option value=\"green\">Green</option>\n        <option value=\"blue\">Blue</option>\n      </select>\n\n      <counter-wc ref={wcRef} increment={increment} color={color}></counter-wc>\n    </div>\n  );\n}\n\n\n\n\nLive demo\n\n\n\n\nAs we discussed, coding this up manually for every web component property is simply not scalable. But all is not lost because we have a couple of options.\n\n\n\nOption 1: Use attributes everywhere\n\n\n\nWe have attributes. If you clicked the React demo above, the increment prop wasn’t working, but the color correctly changed. Can’t we code everything with attributes? Sadly, no. Attribute values can only be strings. That’s good enough here, and we’d be able to get somewhat far with this approach. Numbers like increment can be converted to and from strings. We could even JSON stringify/parse objects. But eventually we’ll need to pass a function into a web component, and at that point we’d be out of options.\n\n\n\nOption 2: Wrap it\n\n\n\nThere’s an old saying that you can solve any problem in computer science by adding a level of indirection (except the problem of too many levels of indirection). The code to set these props is pretty predictable and simple. What if we hide it in a library? The smart folks behind Lit have one solution. This library creates a new React component for you after you give it a web component, and list out the properties it needs. While clever, I’m not a fan of this approach.\n\n\n\nRather than have a one-to-one mapping of web components to manually-created React components, what I prefer is just one React component that we pass our web component tag name to (counter-wc in our case) — along with all the attributes and properties — and for this component to render our web component, add the ref, then figure out what is a prop and what is an attribute. That’s the ideal solution in my opinion. I don’t know of a library that does this, but it should be straightforward to create. Let’s give it a shot!\n\n\n\nThis is the usage we’re looking for:\n\n\n\n<WcWrapper wcTag=\"counter-wc\" increment={increment} color={color} />\n\n\n\nwcTag is the web component tag name; the rest are the properties and attributes we want passed along.\n\n\n\nHere’s what my implementation looks like:\n\n\n\nimport React, { createElement, useRef, useLayoutEffect, memo } from 'react';\n\nconst _WcWrapper = (props) => {\n  const { wcTag, children, ...restProps } = props;\n  const wcRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const wc = wcRef.current;\n\n    for (const [key, value] of Object.entries(restProps)) {\n      if (key in wc) {\n        if (wc[key] !== value) {\n          wc[key] = value;\n        }\n      } else {\n        if (wc.getAttribute(key) !== value) {\n          wc.setAttribute(key, value);\n        }\n      }\n    }\n  });\n\n  return createElement(wcTag, { ref: wcRef });\n};\n\nexport const WcWrapper = memo(_WcWrapper);\n\n\n\nThe most interesting line is at the end:\n\n\n\nreturn createElement(wcTag, { ref: wcRef });\n\n\n\nThis is how we create an element in React with a dynamic name. In fact, this is what React normally transpiles JSX into. All our divs are converted to createElement(\"div\") calls. We don’t normally need to call this API directly but it’s there when we need it.\n\n\n\nBeyond that, we want to run a layout effect and loop through every prop that we’ve passed to our component. We loop through all of them and check to see if it’s a property with an in check that checks the web component instance object as well as its prototype chain, which will catch any getters/setters that wind up on the class prototype. If no such property exists, it’s assumed to be an attribute. In either case, we only set it if the value has actually changed.\n\n\n\nIf you’re wondering why we use useLayoutEffect instead of useEffect, it’s because we want to immediately run these updates before our content is rendered. Also, note that we have no dependency array to our useLayoutEffect; this means we want to run this update on every render. This can be risky since React tends to re-render a lot. I ameliorate this by wrapping the whole thing in React.memo. This is essentially the modern version of React.PureComponent, which means the component will only re-render if any of its actual props have changed — and it checks whether that’s happened via a simple equality check.\n\n\n\nThe only risk here is that if you’re passing an object prop that you’re mutating directly without re-assigning, then you won’t see the updates. But this is highly discouraged, especially in the React community, so I wouldn’t worry about it.\n\n\n\nBefore moving on, I’d like to call out one last thing. You might not be happy with how the usage looks. Again, this component is used like this:\n\n\n\n<WcWrapper wcTag=\"counter-wc\" increment={increment} color={color} />\n\n\n\nSpecifically, you might not like passing the web component tag name to the <WcWrapper> component and prefer instead the @lit-labs/react package above, which creates a new individual React component for each web component. That’s totally fair and I’d encourage you to use whatever you’re most comfortable with. But for me, one advantage with this approach is that it’s easy to delete. If by some miracle React merges proper web component handling from their experimental branch into main tomorrow, you’d be able to change the above code from this:\n\n\n\n<WcWrapper wcTag=\"counter-wc\" increment={increment} color={color} />\n\n\n\n…to this:\n\n\n\n<counter-wc ref={wcRef} increment={increment} color={color} />\n\n\n\nYou could probably even write a single codemod to do that everywhere, and then delete <WcWrapper> altogether. Actually, scratch that: a global search and replace with a RegEx would probably work.\n\n\n\nThe implementation\n\n\n\nI know, it seems like it took a journey to get here. If you recall, our original goal was to take the image preview code we looked at in my last post, and move it to a web component so it can be used in any JavaScript framework. React’s lack of proper interop added a lot of detail to the mix. But now that we have a decent handle on how to create a web component, and use it, the implementation will almost be anti-climactic.\n\n\n\nI’ll drop the entire web component here and call out some of the interesting bits. If you’d like to see it in action, here’s a working demo. It’ll switch between my three favorite books on my three favorite programming languages. The URL for each book will be unique each time, so you can see the preview, though you’ll likely want to throttle things in your DevTools Network tab to really see things taking place.\n\n\n\n\n  \n          View entire code      \n  \n\nclass BookCover extends HTMLElement {\n  static observedAttributes = ['url'];\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'url') {\n      this.createMainImage(newValue);\n    }\n  }\n\n  set preview(val) {\n    this.previewEl = this.createPreview(val);\n    this.render();\n  }\n\n  createPreview(val) {\n    if (typeof val === 'string') {\n      return base64Preview(val);\n    } else {\n      return blurHashPreview(val);\n    }\n  }\n\n  createMainImage(url) {\n    this.loaded = false;\n    const img = document.createElement('img');\n    img.alt = 'Book cover';\n    img.addEventListener('load', () =&gt; {\n      if (img === this.imageEl) {\n        this.loaded = true;\n        this.render();\n      }\n    });\n    img.src = url;\n    this.imageEl = img;\n  }\n\n  connectedCallback() {\n    this.render();\n  }\n\n  render() {\n    const elementMaybe = this.loaded ? this.imageEl : this.previewEl;\n    syncSingleChild(this, elementMaybe);\n  }\n}\n\n\n\n\n\nFirst, we register the attribute we’re interested in and react when it changes:\n\n\n\nstatic observedAttributes = ['url'];\n\nattributeChangedCallback(name, oldValue, newValue) {\n  if (name === 'url') {\n    this.createMainImage(newValue);\n  }\n}\n\n\n\nThis causes our image component to be created, which will show only when loaded:\n\n\n\ncreateMainImage(url) {\n  this.loaded = false;\n  const img = document.createElement('img');\n  img.alt = 'Book cover';\n  img.addEventListener('load', () => {\n    if (img === this.imageEl) {\n      this.loaded = true;\n      this.render();\n    }\n  });\n  img.src = url;\n  this.imageEl = img;\n}\n\n\n\nNext we have our preview property, which can either be our base64 preview string, or our blurhash packet:\n\n\n\nset preview(val) {\n  this.previewEl = this.createPreview(val);\n  this.render();\n}\n\ncreatePreview(val) {\n  if (typeof val === 'string') {\n    return base64Preview(val);\n  } else {\n    return blurHashPreview(val);\n  }\n}\n\n\n\nThis defers to whichever helper function we need:\n\n\n\nfunction base64Preview(val) {\n  const img = document.createElement('img');\n  img.src = val;\n  return img;\n}\n\nfunction blurHashPreview(preview) {\n  const canvasEl = document.createElement('canvas');\n  const { w: width, h: height } = preview;\n\n  canvasEl.width = width;\n  canvasEl.height = height;\n\n  const pixels = decode(preview.blurhash, width, height);\n  const ctx = canvasEl.getContext('2d');\n  const imageData = ctx.createImageData(width, height);\n  imageData.data.set(pixels);\n  ctx.putImageData(imageData, 0, 0);\n\n  return canvasEl;\n}\n\n\n\nAnd, lastly, our render method:\n\n\n\nconnectedCallback() {\n  this.render();\n}\n\nrender() {\n  const elementMaybe = this.loaded ? this.imageEl : this.previewEl;\n  syncSingleChild(this, elementMaybe);\n}\n\n\n\nAnd a few helpers methods to tie everything together:\n\n\n\nexport function syncSingleChild(container, child) {\n  const currentChild = container.firstElementChild;\n  if (currentChild !== child) {\n    clearContainer(container);\n    if (child) {\n      container.appendChild(child);\n    }\n  }\n}\n\nexport function clearContainer(el) {\n  let child;\n\n  while ((child = el.firstElementChild)) {\n    el.removeChild(child);\n  }\n}\n\n\n\nIt’s a little bit more boilerplate than we’d need if we build this in a framework, but the upside is that we can re-use this in any framework we’d like — although React will need a wrapper for now, as we discussed.\n\n\n\nOdds and ends\n\n\n\nI’ve already mentioned Lit’s React wrapper. But if you find yourself using Stencil, it actually supports a separate output pipeline just for React. And the good folks at Microsoft have also created something similar to Lit’s wrapper, attached to the Fast web component library.\n\n\n\nAs I mentioned, all frameworks not named React will handle setting web component properties for you. Just note that some have some special flavors of syntax. For example, with Solid.js, <your-wc value={12}> always assumes that value is a property, which you can override with an attr prefix, like <your-wc attr:value={12}>.\n\n\n\nWrapping up\n\n\n\nWeb components are an interesting, often underused part of the web development landscape. They can help reduce your dependence on any single JavaScript framework by managing your UI, or “leaf” components. While creating these as web components — as opposed to Svelte or React components — won’t be as ergonomic, the upside is that they’ll be widely reusable.\n\nBuilding Interoperable Web Components That Even Work With React originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-06-07T13:57:57.000Z",
      "date_modified": "2022-06-07T13:57:57.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366202",
      "url": "https://css-tricks.com/please-give-me-some-space/",
      "title": "Please Give Me Some Space",
      "summary": "There’s all kinds of ways to do that. Some more advisable and better-suited for certain situations than others, of course.\nWe could do it directly in HTML:\n<pWe go from one line...<br<brdown a couple more.</p\nBut that’s …\n\nPlease Give Me Some Space originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>There&#8217;s all kinds of ways to do that. Some more advisable and better-suited for certain situations than others, of course.</p>\n\n\n\n<span id=\"more-366202\"></span>\n\n\n\n<p>We could do it directly in HTML:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;p>We go from one line...&lt;br>&lt;br> down a couple more.&lt;/p></code></pre>\n\n\n\n<p>But that&#8217;s what CSS is really for:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;p>We go from one line...&lt;span>down a couple more.&lt;/span>&lt;/p></code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">span {\n  display: block;\n  margin-block-start: 1.5rem;\n}</code></pre>\n\n\n\n<p>Line height can also give us extra breathing room between lines of text:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">p {\n  line-height: 1.35;\n}</code></pre>\n\n\n\n<p>Since we&#8217;re talking text, there&#8217;s also <code><a href=\"https://css-tricks.com/almanac/properties/l/letter-spacing/\">letter-spacing</a></code> and <code><a href=\"https://css-tricks.com/almanac/properties/w/word-spacing/\">word-spacing</a></code>, not to mention <code><a href=\"https://css-tricks.com/almanac/properties/t/text-indent/\">text-indent</a></code>:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ZErRBzr\" src=\"//codepen.io/anon/embed/ZErRBzr?height=250&amp;theme-id=1&amp;slug-hash=ZErRBzr&amp;default-tab=css,result\" height=\"250\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ZErRBzr\" title=\"CodePen Embed ZErRBzr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But let&#8217;s talk boxes instead of text. Say we have two simple divs:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div>Twiddle Dee&lt;/div>\n&lt;div>Twiddle Dum&lt;/div></code></pre>\n\n\n\n<p>Those are block-level so they&#8217;re already on different lines. We can reach for <code>margin</code> again. Or we could create the impression of space with <code>padding</code>. I suppose we could <code>translate</code> those suckers in either direction:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div:nth-child(2) {\n  transform: translateY(100px);\n}</code></pre>\n\n\n\n<p>But maybe those elements are <a href=\"https://css-tricks.com/absolute-relative-fixed-positioining-how-do-they-differ/\">absolutely positioned</a> so we can use physical offsets:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div {\n  position: absolute;\n}\ndiv:nth-child(1) {\n  inset: 0;\n}\ndiv:nth-child(2) {\n  inset-inline-start: 100px; /* or top: 100px; */\n}</code></pre>\n\n\n\n<p>If we&#8217;re working in a grid container, <a href=\"https://css-tricks.com/minding-the-gap/\">then we get <code>gap</code>-age</a>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;section>\n  &lt;div>Twiddle Dee&lt;/div>\n  &lt;div>Twiddle Dum&lt;/div>\n&lt;/section></code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">section {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 100px;\n}</code></pre>\n\n\n\n<p><a href=\"https://css-tricks.com/gaps-gasp/\">Same deal</a> with a flexible container:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">section {\n  display: flex;\n  gap: 100px;\n}</code></pre>\n\n\n\n<p>While we&#8217;re working in grid and flexible containers, we could call on any alignment property to generate space.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">section {\n  display: flex;\n  align-items: space-between;\n  justify-content: space-between;\n}</code></pre>\n\n\n\n<p>There are tables, of course:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;table cellspacing=\"100\">\n  &lt;!-- etc.  -->\n  &lt;tbody>\n    &lt;tr>\n      &lt;td>Twiddle Dee&lt;/td>\n      &lt;td>Twiddle Dum&lt;/td>\n    &lt;/tr>\n  &lt;/tbody>\n&lt;/table></code></pre>\n\n\n\n<p>Or the CSS-y approach:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* We could use `display: table` if we're not working in a table element. */\ntable {\n  border-spacing: 100px;\n}</code></pre>\n\n\n\n<p>Let&#8217;s go deeper into left field. We can make one element look like two using a linear gradient with a hard color stop:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div {\n  background-image:\n    linear-gradient(\n      to right,\n      rgb(255 105 0 / 1) 50%,\n      rgb(207 46 46 / 1) 50%,\n      rgb(207 46 46 / 1) 100%\n    );\n}</code></pre>\n\n\n\n<p>Then we do a head fake and insert a hard transparent color stop between the two colors:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNMyQLq\" src=\"//codepen.io/anon/embed/WNMyQLq?height=450&amp;theme-id=1&amp;slug-hash=WNMyQLq&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNMyQLq\" title=\"CodePen Embed WNMyQLq\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>As long as we&#8217;re fakin&#8217; bacon here, might as well toss in the ol&#8217; &#8220;transparent&#8221; border trick:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvyXGoJ\" src=\"//codepen.io/anon/embed/wvyXGoJ?height=450&amp;theme-id=1&amp;slug-hash=wvyXGoJ&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvyXGoJ\" title=\"CodePen Embed wvyXGoJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Let&#8217;s go back to text for a moment. Maybe we&#8217;re floating an element and want text to wrap around it&#8230; in the shape of the floated element while leaving some space between the two. We have <code><a href=\"https://css-tricks.com/almanac/properties/s/shape-margin/\">shape-margin</a></code> for that:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvyXMVz\" src=\"//codepen.io/anon/embed/wvyXMVz?height=550&amp;theme-id=1&amp;slug-hash=wvyXMVz&amp;default-tab=css,result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvyXMVz\" title=\"CodePen Embed wvyXMVz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Dare I even mention the <a href=\"https://en.wikipedia.org/wiki/Spacer_GIF\" rel=\"noopener\"><code>spacer.gif</code> days</a>?</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div>Twiddle Dee&lt;/div>\n&lt;img src=\"spacer.gif\"> &lt;!-- &#x1f922; -->\n&lt;div>Twiddle Dum&lt;/div></code></pre>\n\n\n\n<h2>There&#8217;s gotta be more</h2>\n\n\n\n<p>You&#8217;re all a smart bunch with great ideas. Have at it!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/please-give-me-some-space/\">Please Give Me Some Space</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "There’s all kinds of ways to do that. Some more advisable and better-suited for certain situations than others, of course.\n\n\n\n\n\n\n\nWe could do it directly in HTML:\n\n\n\n<p>We go from one line...<br><br> down a couple more.</p>\n\n\n\nBut that’s what CSS is really for:\n\n\n\n<p>We go from one line...<span>down a couple more.</span></p>\n\n\n\nspan {\n  display: block;\n  margin-block-start: 1.5rem;\n}\n\n\n\nLine height can also give us extra breathing room between lines of text:\n\n\n\np {\n  line-height: 1.35;\n}\n\n\n\nSince we’re talking text, there’s also letter-spacing and word-spacing, not to mention text-indent:\n\n\n\nCodePen Embed Fallback\n\n\n\nBut let’s talk boxes instead of text. Say we have two simple divs:\n\n\n\n<div>Twiddle Dee</div>\n<div>Twiddle Dum</div>\n\n\n\nThose are block-level so they’re already on different lines. We can reach for margin again. Or we could create the impression of space with padding. I suppose we could translate those suckers in either direction:\n\n\n\ndiv:nth-child(2) {\n  transform: translateY(100px);\n}\n\n\n\nBut maybe those elements are absolutely positioned so we can use physical offsets:\n\n\n\ndiv {\n  position: absolute;\n}\ndiv:nth-child(1) {\n  inset: 0;\n}\ndiv:nth-child(2) {\n  inset-inline-start: 100px; /* or top: 100px; */\n}\n\n\n\nIf we’re working in a grid container, then we get gap-age:\n\n\n\n<section>\n  <div>Twiddle Dee</div>\n  <div>Twiddle Dum</div>\n</section>\n\n\n\nsection {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 100px;\n}\n\n\n\nSame deal with a flexible container:\n\n\n\nsection {\n  display: flex;\n  gap: 100px;\n}\n\n\n\nWhile we’re working in grid and flexible containers, we could call on any alignment property to generate space.\n\n\n\nsection {\n  display: flex;\n  align-items: space-between;\n  justify-content: space-between;\n}\n\n\n\nThere are tables, of course:\n\n\n\n<table cellspacing=\"100\">\n  <!-- etc.  -->\n  <tbody>\n    <tr>\n      <td>Twiddle Dee</td>\n      <td>Twiddle Dum</td>\n    </tr>\n  </tbody>\n</table>\n\n\n\nOr the CSS-y approach:\n\n\n\n/* We could use `display: table` if we're not working in a table element. */\ntable {\n  border-spacing: 100px;\n}\n\n\n\nLet’s go deeper into left field. We can make one element look like two using a linear gradient with a hard color stop:\n\n\n\ndiv {\n  background-image:\n    linear-gradient(\n      to right,\n      rgb(255 105 0 / 1) 50%,\n      rgb(207 46 46 / 1) 50%,\n      rgb(207 46 46 / 1) 100%\n    );\n}\n\n\n\nThen we do a head fake and insert a hard transparent color stop between the two colors:\n\n\n\nCodePen Embed Fallback\n\n\n\nAs long as we’re fakin’ bacon here, might as well toss in the ol’ “transparent” border trick:\n\n\n\nCodePen Embed Fallback\n\n\n\nLet’s go back to text for a moment. Maybe we’re floating an element and want text to wrap around it… in the shape of the floated element while leaving some space between the two. We have shape-margin for that:\n\n\n\nCodePen Embed Fallback\n\n\n\nDare I even mention the spacer.gif days?\n\n\n\n<div>Twiddle Dee</div>\n<img src=\"spacer.gif\"> <!-- 🤢 -->\n<div>Twiddle Dum</div>\n\n\n\nThere’s gotta be more\n\n\n\nYou’re all a smart bunch with great ideas. Have at it!\n\nPlease Give Me Some Space originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-06-03T14:39:11.000Z",
      "date_modified": "2022-06-03T14:39:11.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=365841",
      "url": "https://css-tricks.com/how-to-create-block-theme-patterns-in-wordpress-6-0/",
      "title": "How to Create Block Theme Patterns in WordPress 6.0",
      "summary": "Block patterns, also frequently referred to as sections, were introduced in WordPress 5.5 to allow users to build and share predefined block layouts in the pattern directory. The directory is the home of a wide range of …\n\nHow to Create Block Theme Patterns in WordPress 6.0 originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><a href=\"https://wordpress.org/support/article/block-pattern/\" rel=\"noopener\">Block patterns</a>, also frequently referred to as <em>sections</em>, were introduced in <a href=\"https://make.wordpress.org/core/2020/07/16/block-patterns-in-wordpress-5-5/\" rel=\"noopener\">WordPress 5.5</a> to allow users to build and share predefined block layouts in the <a href=\"https://wordpress.org/patterns/\" rel=\"noopener\">pattern directory</a>. The directory is the home of a wide range of curated patterns designed by the WordPress community. These patterns are available in simple copy and paste format, require no coding knowledge and thus are a big time saver for users.</p>\n\n\n\n<p>Despite many articles on patterns, there is a lack of comprehensive and up-to-date articles on pattern creation covering the latest enhanced features. This article aims to fill the gap with a focus on the recent enhanced features like creating patterns without registration and offer an up-to-date step-by-step guide to create and use them in block themes for novices and experienced authors.</p>\n\n\n\n<span id=\"more-365841\"></span>\n\n\n\n<p>Since the launch of <a href=\"https://wordpress.org/news/2022/01/josephine/\" rel=\"noopener\">WordPress 5.9</a> and the <a href=\"https://wordpress.org/themes/twentytwentytwo/\" rel=\"noopener\">Twenty Twenty-Two</a> (TT2) default theme, the use of block patterns in block themes has proliferated. I have been a big fan of <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/\" rel=\"noopener\">block patterns</a> and have created and used them in my block themes.</p>\n\n\n\n<p>The new <a href=\"https://make.wordpress.org/core/2022/05/03/wordpress-6-0-field-guide/\" rel=\"noopener\">WordPress 6.0</a> offers <a href=\"https://make.wordpress.org/core/2022/05/02/new-features-for-working-with-patterns-and-themes-in-wordpress-6-0/\" rel=\"noopener\">three major patterns feature enhancements to authors</a>:</p>\n\n\n\n<ul><li>Allowing pattern registration through <code>/patterns</code> folder (similar to <code>/parts</code>, <code>/templates</code>, and <code>/styles</code> registration).</li><li>Registering patterns from the public patterns directory using the <code>theme.json</code>.</li><li>Adding patterns that can be offered to the user when creating a new page.</li></ul>\n\n\n\n<p>In an introductory <a href=\"https://www.youtube.com/watch?v=abaaVKl-beM\" rel=\"noopener\">Exploring WordPress 6.0 video</a>, Automattic product liaison Ann McCathy highlights some newly enhanced patterns features (starting at 15:00) and discusses future patterns enhancement plans — which include <a href=\"https://github.com/WordPress/gutenberg/issues/39281\" rel=\"noopener\">patterns as sectioning elements</a>, providing options to <a href=\"https://github.com/WordPress/gutenberg/pull/40034\" rel=\"noopener\">pick pattern on page creation</a>, integrating pattern directory search, and more.</p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"Exploring WordPress 6.0: Style Variations, Block Locking UI, Writing Improvements, &amp; more\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/abaaVKl-beM?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<h3>Prerequisites</h3>\n\n\n\n<p>The article assumes that readers have basic knowledge of WordPress full site editing (FSE) interface and block themes. The <a href=\"https://developer.wordpress.org/block-editor/getting-started/full-site-editing/\" rel=\"noopener\">Block Editor Handbook</a> and <a href=\"https://fullsiteediting.com/\" rel=\"noopener\">Full Site Editing</a> website provide the most up-to-date tutorial guides to learn all FSE features, including block themes and patterns discussed in this article.</p>\n\n\n\n<h3>Section 1: Evolving approaches to creating block patterns</h3>\n\n\n\n<p>The initial approach to creating block patterns required the use of block pattern API either as a custom plugin or directly registered in the <code>functions.php</code> file to bundle with a block theme. The newly launched WordPress 6.0 introduced several new and enhanced features working with patterns and themes, including pattern registration via a <code>/patterns</code> folder and a <a href=\"https://make.wordpress.org/core/2022/05/03/page-creation-patterns-in-wordpress-6-0/\" rel=\"noopener\">page creation pattern modal</a>.</p>\n\n\n\n<p>For background, let&#8217;s first briefly overview how the pattern registration workflow evolved from using the register pattern API to directly loading without registration.</p>\n\n\n\n<h4>Use case example 1: Twenty Twenty-One</h4>\n\n\n\n<p>The default <a href=\"https://github.com/WordPress/theme-experiments/blob/master/tt1-blocks/inc/block-patterns.php\" rel=\"noopener\">Twenty Twenty-One theme</a> (TT1) and <a href=\"https://wordpress.org/themes/tt1-blocks/\" rel=\"noopener\">TT1 Blocks theme</a> (a sibling of TT1) showcase how block patterns can be registered in the theme’s <code>functions.php</code>. In the TT1 Blocks experimental-theme, this single <a href=\"https://github.com/WordPress/theme-experiments/blob/master/tt1-blocks/inc/block-patterns.php\" rel=\"noopener\">block-pattern.php</a> file containing <em>eight</em> block patterns is added to the <code>functions.php</code> as an <a href=\"https://github.com/WordPress/theme-experiments/blob/master/tt1-blocks/functions.php#L91\" rel=\"noopener\"><code>include</code> as shown here</a>.</p>\n\n\n\n<p>A custom block pattern <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/#register_block_pattern\" rel=\"noopener\">needs to be registered</a> using the <code>register_block_pattern</code> function, which receives two arguments — <code>title</code> (name of the patterns) and <code>properties</code> (an array describing properties of the pattern).</p>\n\n\n\n<p>Here is an example of registering a simple &#8220;Hello World&#8221; paragraph pattern from this <a href=\"https://themeshaper.com/2020/04/08/adding-block-patterns-to-your-theme/\" rel=\"noopener\">Theme Shaper article</a>:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">register_block_pattern(\n    'my-plugin/hello-world',\n    array(\n        'title'   => __( 'Hello World', 'my-plugin' ),\n        'content' => \"&lt;!-- wp:paragraph -->\\n&lt;p>Hello World&lt;/p>\\n&lt;!-- /wp:paragraph -->\",\n    )\n);</code></pre>\n\n\n\n<p>After registration, the <code>register_block_pattern()</code> function should be called from a handler attached to the <code>init</code> hook as described <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/#register_block_pattern\" rel=\"noopener\">here</a>.</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\"> function my_plugin_register_my_patterns() {\n    register_block_pattern( ... );\n  }\n\n  add_action( 'init', 'my_plugin_register_my_patterns' );</code></pre>\n\n\n\n<p>Once block patterns are registered they are visible in the block editor. More detailed documentation is found in this <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/#register_block_pattern\" rel=\"noopener\">Block Pattern Registration.</a></p>\n\n\n\n<p><em><strong>Block pattern properties</strong></em></p>\n\n\n\n<p>In addition to required <code>title</code> and <code>content</code> properties, the <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/\" rel=\"noopener\">block editor handbook</a> lists the following optional <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/#register_block_pattern\" rel=\"noopener\">pattern properties</a>:</p>\n\n\n\n<ul><li><code>title</code> <em>(required)</em>: A human-readable title for the pattern.</li><li><code>content</code> <em>(required)</em>: Block HTML Markup for the pattern.</li><li><code>description</code> <em>(optional)</em>: A visually hidden text used to describe the pattern in the inserter. A description is optional but it is strongly encouraged when the title does not fully describe what the pattern does. The description will help users discover the pattern while searching.</li><li><code>categories</code> <em>(optional)</em>: An array of registered pattern categories used to group block patterns. Block patterns can be shown on multiple categories. A category must be registered separately in order to be used here.</li><li><code>keywords</code> <em>(optional)</em>: An array of aliases or keywords that help users discover the pattern while searching.</li><li><code>viewportWidth</code> <em>(optional)</em>: An integer specifying the intended width of the pattern to allow for a scaled preview of the pattern in the inserter.</li><li><code>blockTypes</code> <em>(optional)</em>: An array of block types that the pattern is intended to be used with. Each value needs to be the declared block’s <code>name</code>.</li><li><code>inserter</code> <em>(optional)</em>: By default, all patterns will appear in the inserter. To hide a pattern so that it can only be inserted programmatically, set the <code>inserter</code> to <code>false</code>.</li></ul>\n\n\n\n<p>The following is an example of a quote pattern plugin code snippets taken from the <a href=\"https://wordpress.org/news/2021/03/so-you-want-to-make-block-patterns/\" rel=\"noopener\">WordPress blog</a>.</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">/*\nPlugin Name: Quote Pattern Example Plugin\n*/\n\nregister_block_pattern(\n    'my-plugin/my-quote-pattern',\n     array(\n      'title'       => __( 'Quote with Avatar', 'my-plugin' ),\n      'categories'  => array( 'text' ),\n      'description' => _x( 'A big quote with an avatar\".', 'Block pattern description', 'my-plugin' ),\n      'content'     => '&lt;!-- wp:group -->&lt;div class=\"wp-block-group\">&lt;div class=\"wp-block-group__inner-container\">&lt;!-- wp:separator {\"className\":\"is-style-default\"} -->&lt;hr class=\"wp-block-separator is-style-default\"/>&lt;!-- /wp:separator -->&lt;!-- wp:image {\"align\":\"center\",\"id\":553,\"width\":150,\"height\":150,\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"is-style-rounded\"} -->&lt;div class=\"wp-block-image is-style-rounded\">&lt;figure class=\"aligncenter size-large is-resized\">&lt;img src=\"https://blockpatterndesigns.mystagingwebsite.com/wp-content/uploads/2021/02/StockSnap_HQR8BJFZID-1.jpg\" alt=\"\" class=\"wp-image-553\" width=\"150\" height=\"150\"/>&lt;/figure>&lt;/div>&lt;!-- /wp:image -->&lt;!-- wp:quote {\"align\":\"center\",\"className\":\"is-style-large\"} -->&lt;blockquote class=\"wp-block-quote has-text-align-center is-style-large\">&lt;p>\"Contributing makes me feel like I\\'m being useful to the planet.\"&lt;/p>&lt;cite>— Anna Wong, &lt;em>Volunteer&lt;/em>&lt;/cite>&lt;/blockquote>&lt;!-- /wp:quote -->&lt;!-- wp:separator {\"className\":\"is-style-default\"} -->&lt;hr class=\"wp-block-separator is-style-default\"/>&lt;!-- /wp:separator -->&lt;/div>&lt;/div>&lt;!-- /wp:group -->',\n      )\n);</code></pre>\n\n\n\n<p><em><strong>Using patterns in a template file</strong></em></p>\n\n\n\n<p>Once patterns are created, they can be used in a theme template file with the following block markup:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- wp:pattern {\"slug\":\"prefix/pattern-slug\"} /--></code></pre>\n\n\n\n<p>An example from <a href=\"https://github.com/tinjure20/TT2-gopher-blocks/blob/main/parts/footer.html#L3\" rel=\"noopener\">this GitHub repository</a> shows the use of “<code>footer-with-background</code>” pattern slug with “<code>tt2gopher</code>” prefix in TT2 Gopher blocks theme.</p>\n\n\n\n<p>Early adopters of block themes and Gutenberg plugin took advantage of patterns in classic themes as well. The default <a href=\"https://themes.trac.wordpress.org/browser/twentytwenty/1.6/inc/block-patterns.php\" rel=\"noopener\">Twenty Twenty</a> and my favorite Eksell themes (a <a href=\"https://andersnoren.se/themes/eksell/\" rel=\"noopener\">demo site</a> here) are good examples that showcase how pattern features can be added to classic themes.</p>\n\n\n\n<h4>Use case example 2: Twenty Twenty-Two</h4>\n\n\n\n<p>If a theme includes only a few patterns, the development and maintenance are fairly manageable. However, if a block theme includes many patterns, like in TT2 theme, then the <code>pattern.php</code> file becomes very large and hard to read. The default TT2 theme, which bundles <a href=\"https://github.com/WordPress/twentytwentytwo/blob/trunk/inc/block-patterns.php\" rel=\"noopener\">more than 60 patterns</a>, showcases a refactored pattern registration workflow <a href=\"https://github.com/WordPress/twentytwentytwo/tree/trunk/inc\" rel=\"noopener\">structure</a> that is easier to read and maintain.</p>\n\n\n\n<p>Taking examples from the TT2 theme, let&#8217;s briefly discuss how this simplified workflow works.</p>\n\n\n\n<p><em><strong>2.1: Registering Patterns Categories</strong></em></p>\n\n\n\n<p>For demonstration purposes, I created a TT2 child theme and set it up on my local test site with some dummy content. Following TT2, I registered <code>footer-with-background</code> and added to the following pattern categories array list in its <code>block-patterns.php</code> file.</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"24,25,26,28,29,30,31,32\"><code markup=\"tt\">/**\n* Registers block patterns and categories.\n*/\nfunction twentytwentytwo_register_block_patterns() {\n\t$block_pattern_categories = array(\n\t\t'footer'   => array( 'label' => __( 'Footers', 'twentytwentytwo' ) ),\n\t\t'header'   => array( 'label' => __( 'Headers', 'twentytwentytwo' ) ),\n\t\t'pages'    => array( 'label' => __( 'Pages', 'twentytwentytwo' ) ),\n                // ...\n\t);\n\n\t/**\n\t * Filters the theme block pattern categories.\n\t */\n\t$block_pattern_categories = apply_filters( 'twentytwentytwo_block_pattern_categories', $block_pattern_categories );\n\n\tforeach ( $block_pattern_categories as $name => $properties ) {\n\t\tif ( ! WP_Block_Pattern_Categories_Registry::get_instance()->is_registered( $name ) ) {\n\t\t\tregister_block_pattern_category( $name, $properties );\n\t\t}\n\t}\n\n\t$block_patterns = array(\n\t\t'footer-default',\n\t\t'footer-dark',\n\t\t'footer-with-background',\n\t\t//...\n\t\t'header-default',\n\t\t'header-large-dark',\n\t\t'header-small-dark',\n\t\t'hidden-404',\n\t\t'hidden-bird',\n\t\t//...\n\t);\n\n\t/**\n\t * Filters the theme block patterns.\n\t */\n\t$block_patterns = apply_filters( 'twentytwentytwo_block_patterns', $block_patterns );\n\n\tforeach ( $block_patterns as $block_pattern ) {\n\t\t$pattern_file = get_theme_file_path( '/inc/patterns/' . $block_pattern . '.php' );\n\n\t\tregister_block_pattern(\n\t\t\t'twentytwentytwo/' . $block_pattern,\n\t\t\trequire $pattern_file\n\t\t);\n\t}\n}\nadd_action( 'init', 'twentytwentytwo_register_block_patterns', 9 );</code></pre>\n\n\n\n<p>In this code example, each pattern listed in the <code>$block_patterns = array()</code> is called by <code>foreach()</code> function which <code>require</code>s a <code>patterns</code> directory file with the listed pattern name in the array which we will add in the next step.</p>\n\n\n\n<p><em><strong>2.2: Adding a pattern file to the <code>/inc/patterns</code> folder</strong></em></p>\n\n\n\n<p>Next, we should have all the listed patterns files in the <code>$block_patterns = array()</code>. Here is an example of one of the pattern files, <code>footer-with-background.php</code>:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">/**\n * Dark footer wtih title and citation\n */\nreturn array(\n\t'title'      => __( 'Footer with background', 'twentytwentytwo' ),\n\t'categories' => array( 'footer' ),\n\t'blockTypes' => array( 'core/template-part/footer' ),\n  'content'    => '&lt;!-- wp:group {\"align\":\"full\",\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|background\"}}},\"spacing\":{\"padding\":{\"top\":\"var(--wp--custom--spacing--small, 1.25rem)\",\"bottom\":\"var(--wp--custom--spacing--small, 1.25rem)\"}}},\"backgroundColor\":\"background-header\",\"textColor\":\"background\",\"layout\":{\"inherit\":true}} -->\n      &lt;div class=\"wp-block-group alignfull has-background-color has-background-header-background-color has-text-color has-background has-link-color\" style=\"padding-top:var(--wp--custom--spacing--small, 1.25rem);padding-bottom:var(--wp--custom--spacing--small, 1.25rem)\">&lt;!-- wp:paragraph {\"align\":\"center\"} -->\n      &lt;p class=\"has-text-align-center\">' .\n      sprintf(\n        /* Translators: WordPress link. */\n        esc_html__( 'Proudly powered by %s', 'twentytwentytwo' ),\n        '&lt;a href=\"' . esc_url( __( 'https://wordpress.org', 'twentytwentytwo' ) ) . '\" rel=\"nofollow\">WordPress&lt;/a> | a modified TT2 theme.'\n      ) . '&lt;/p>\n      &lt;!-- /wp:paragraph -->&lt;/div>\n          &lt;!-- /wp:group -->',\n);</code></pre>\n\n\n\n<p>Let’s reference the pattern in the <code>footer.html</code> template part:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- wp:template-part {\"slug\":\"footer\"} /--></code></pre>\n\n\n\n<p>This is similar to adding heading or footer parts in a template file.</p>\n\n\n\n<p>The patterns can similarly be added to the <code>parts/footer.html</code> template by modifying it to refer to <code>slug</code> of the theme’s pattern file (<code>footer-with-background</code>):</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- wp:pattern {\"slug\":\"twentytwentytwo/footer-with-background\"} /--></code></pre>\n\n\n\n<p>Now, if we visit the patterns inserter of the block editor, the <code>Footer with background</code> should be available for our use:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"267\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-background.png?resize=1024%2C267&#038;ssl=1\" alt=\"Screenshot of the pattern for Footer with background.\" class=\"wp-image-365873\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-background.png?resize=1024%2C267&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-background.png?resize=300%2C78&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-background.png?resize=768%2C200&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-background.png?w=1100&amp;ssl=1 1100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The following screenshot shows the newly created footer with background pattern on the front-end.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"66\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer.png?resize=1024%2C66&#038;ssl=1\" alt=\"Screenshot of the footer background as it appears rendered on the site.\" class=\"wp-image-365874\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer.png?resize=1024%2C66&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer.png?resize=300%2C19&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer.png?resize=768%2C50&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer.png?w=1294&amp;ssl=1 1294w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now that patterns have become the integral part of block theme, many patterns are bundled in block themes — like <a href=\"https://wordpress.org/themes/quadrat/\" rel=\"noopener\">Quadrat</a>, <a href=\"https://wordpress.org/themes/seedlet-blocks/\" rel=\"noopener\">Seedlet</a>, <a href=\"https://wordpress.org/themes/mayland-blocks/\" rel=\"noopener\">Mayland</a>, <a href=\"https://wordpress.org/themes/zoologist/\" rel=\"noopener\">Zoologist</a>, <a href=\"https://wordpress.org/themes/geologist/\" rel=\"noopener\">Geologist</a> — following the workflow discussed above. Here is an example of the Quadrat theme <code><a href=\"https://github.com/Automattic/themes/tree/trunk/quadrat/inc\" rel=\"noopener\">/inc/patterns</a></code> folder with a <a href=\"https://github.com/Automattic/themes/blob/trunk/quadrat/inc/block-patterns.php\" rel=\"noopener\">block-pattern registration</a> file and <a href=\"https://github.com/Automattic/themes/tree/trunk/quadrat/inc/patterns\" rel=\"noopener\">list of files</a> with content source and required pattern header <a href=\"https://github.com/Automattic/themes/blob/trunk/quadrat/inc/patterns/cover-with-heading.php\" rel=\"noopener\">within <code>return array()</code> function</a>.</p>\n\n\n\n<h3 id=\"section2creatingandloadingpatternswithoutregistration\">Section 2: Creating and loading patterns without registration</h3>\n\n\n\n<p class=\"is-style-explanation\">Please note that this feature requires the installation of WordPress 6.0 or Gutenberg plugin 13.0 or above in your site.</p>\n\n\n\n<p>This <a href=\"https://make.wordpress.org/core/2022/05/02/new-features-for-working-with-patterns-and-themes-in-wordpress-6-0/\" rel=\"noopener\">new WordPress 6.0 feature</a> allows pattern registration via standard files and folders &#8211; <code>/patterns</code>, bringing similar conventions like <code>/parts</code>, <code>/templates</code>, and <code>/styles</code>.</p>\n\n\n\n<p>The process, as also described in <a href=\"https://wptavern.com/gutenberg-12-9-adds-block-locking-ui-automatic-pattern-registration-and-full-theme-exports\" rel=\"noopener\">this WP Tavern</a> article, involves the following three steps:</p>\n\n\n\n<ul><li>creating a patterns folder at the theme’s root</li><li>adding plugin style pattern header</li><li>pattern source content</li></ul>\n\n\n\n<p>A typical pattern header markup, taken from the article is shown below:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;?php\n/**\n* Title: A Pattern Title\n* Slug: namespace/slug\n* Description: A human-friendly description.\n* Viewport Width: 1024\n* Categories: comma, separated, values\n* Keywords: comma, separated, values\n* Block Types: comma, separated, values\n* Inserter: yes|no\n*/\n?></code></pre>\n\n\n\n<p>As described in the previous section, only <code>Title</code> and <code>Slug</code> fields are required and other fields are optional.</p>\n\n\n\n<p>Referencing examples from recently released themes, I refactored pattern registration in <a href=\"https://github.com/tinjure20/TT2-gopher-blocks\" rel=\"noopener\">this TT2 Gopher Blocks</a> demo theme, prepared for <a href=\"https://css-tricks.com/creating-style-variations-in-wordpress-block-themes/\">a previous article on the CSS-Tricks</a>.</p>\n\n\n\n<p>In the following steps, let&#8217;s explore how a <code>footer-with-background.php</code> pattern <a href=\"https://github.com/tinjure20/TT2-gopher-blocks/blob/main/inc/patterns/footer-with-background.php\" rel=\"noopener\">registered with PHP</a> and used in a <code>footer.html</code> template is refactored.</p>\n\n\n\n<p><em><strong>2.1: Create a <code>/patterns</code> folder at the root of the theme</strong></em></p>\n\n\n\n<p>The first step is to create a <code>/patterns</code> folder at TT2 Gopher theme’s root and move the <code>footer-with-background.php</code> pattern file to <code>/patterns</code> folder and refactor.</p>\n\n\n\n<p><em><strong>2.2: Add pattern data to the file header</strong></em></p>\n\n\n\n<p>Next, create the following pattern header registration fields.</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;?php\n/**\n* Title: Footer with background\n* Slug: tt2gopher/footer-with-background\n* Categories: tt2gopher-footer\n* Viewport Width: 1280\n* Block Types: core/parts/footer\n* Inserter: yes\n*/\n?>\n&lt;!-- some-block-content /--></code></pre>\n\n\n\n<p>A pattern file has a top title field written as PHP comments. Followed by the <em>block-content</em> written in HTML format.</p>\n\n\n\n<p><em><strong>2.3: Add Pattern Content to the file</strong></em></p>\n\n\n\n<p>For the content section, let&#8217;s copy the code snippets within <a href=\"https://github.com/WordPress/twentytwentytwo/blob/trunk/inc/patterns/footer-dark.php#L9-L22\" rel=\"noopener\">single quotes</a> (e.g., <code>'...'</code>) from the content section of the <code>footer-with-background</code> and replace the <code>&lt;!-- some-block-content /--&gt;</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- wp:group {\"align\":\"full\",\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|foreground\"}}},\"spacing\":{\"padding\":{\"top\":\"35px\",\"bottom\":\"30px\"}}},\"backgroundColor\":\"background-header\",\"textColor\":\"foreground\",\"className\":\"has-foreground\",\"layout\":{\"inherit\":true}} -->\n    &lt;div class=\"wp-block-group alignfull has-foreground has-foreground-color has-background-header-background-color has-text-color has-background has-link-color\" style=\"padding-top:35px;padding-bottom:30px\">&lt;!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"small\"} -->\n    &lt;p class=\"has-text-align-center has-small-font-size\">Powered by WordPress | TT2 Gopher, a modified TT2 theme&lt;/p>\n    &lt;!-- /wp:paragraph -->&lt;/div>\n&lt;!-- /wp:group --></code></pre>\n\n\n\n<p>The entire code snippet of the <code>patterns/footer-with-background.php</code> file can be viewed <a href=\"https://github.com/tinjure20/TT2-gopher-blocks/blob/main/patterns/footer-with-background.php\" rel=\"noopener\">here on the GitHub</a>.</p>\n\n\n\n<p class=\"is-style-explanation\">Please note that the <code>/inc/patterns</code> and <code>block-patterns.php</code> are <em>extras</em>, not required in WordPress 6.0, and included only for demo purposes.</p>\n\n\n\n<p><em><strong>2.4: Referencing the patterns slug in the template</strong></em></p>\n\n\n\n<p>Adding the above refactored <code>footer-with-background.php</code> pattern to <code>footer.html</code> template is exactly the same as described in the previous section (Section 1, 2.2).</p>\n\n\n\n<p>Now, if we view the site&#8217;s footer part in a block editor or front-end of our site in a browser, the footer section is displayed.</p>\n\n\n\n<h3 id=\"patterncategoriesandtypesregistrationoptional\">Pattern categories and types Registration (optional)</h3>\n\n\n\n<p>To categorize block patterns, the pattern categories and types should be registered in theme’s <code>functions.php</code> file.</p>\n\n\n\n<p>Let&#8217;s consider an example of <a href=\"https://github.com/tinjure20/TT2-gopher-blocks/blob/main/functions.php#L141-L164\" rel=\"noopener\">registering block pattern categories</a> from the TT2 Gopher theme.</p>\n\n\n\n<p>After the registration, the patterns are displayed in the pattern inserter together with the core default patterns. To add theme specific category labels in the patterns inserter, we should modify the previous snippets by adding theme namespace:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">/**\n* Registers block categories, and type.\n*/\n\nfunction tt2gopher_register_block_pattern_categories() {\n\n$block_pattern_categories = array(\n  'tt2gopher-header' => array( 'label' => __( 'TT2 Gopher - Headers', 'tt2gopher' ) ),\n  'tt2gopher-footer' => array( 'label' => __( 'TT2 Gopher - Footers', 'tt2gopher' ) ),\n  'tt2gopher-page' => array( 'label' => __( 'TT2 Gopher - Page', 'tt2gopher' ) ),\n  // ...\n);\n\n/**\n* Filters the theme block pattern categories.\n*/\n$block_pattern_categories = apply_filters( 'tt2gopher_block_pattern_categories', $block_pattern_categories );\n\nforeach ( $block_pattern_categories as $name => $properties ) {\n  if ( ! WP_Block_Pattern_Categories_Registry::get_instance()->is_registered( $name ) ) {\n    register_block_pattern_category( $name, $properties );\n  }\n}\nadd_action( 'init', 'tt2gopher_register_block_pattern_categories', 9 );</code></pre>\n\n\n\n<p>The <code>footer-with-background</code> pattern is visible in the patterns inserted with its preview (if selected):</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"323\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-pattern.png?resize=1024%2C323&#038;ssl=1\" alt=\"Screenshot showing pattern category displayed in patterns inserter (left panel) and corresponding default footer pattern displayed in the editor (right panel).\" class=\"wp-image-365875\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-pattern.png?resize=1024%2C323&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-pattern.png?resize=300%2C95&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-pattern.png?resize=768%2C242&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-pattern.png?w=1100&amp;ssl=1 1100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>This process greatly simplifies creating and displaying block patterns in block themes. It is available in WordPress 6.0 without using the Gutenberg plugin.</p>\n\n\n\n<h4>Examples of themes without patterns registration</h4>\n\n\n\n<p>Early adopters have already started using this feature in their block themes. A few examples of the themes, that are available from the <a href=\"https://wordpress.org/themes/tags/full-site-editing/\" rel=\"noopener\">theme directory</a>, that load patterns without registration are listed below:</p>\n\n\n\n<ul><li><a href=\"https://wordpress.org/themes/archeo/\" rel=\"noopener\">Archeo</a> – 12 patterns</li><li><a href=\"https://wordpress.org/themes/pendant/\" rel=\"noopener\">Pendant</a> – 13 patterns</li><li><a href=\"https://wordpress.org/themes/remote/\" rel=\"noopener\">Remote</a> – 11 patterns</li><li><a href=\"https://wordpress.org/themes/skatepark/\" rel=\"noopener\">Skatepark</a> – 10 patterns</li><li><a href=\"https://wordpress.org/themes/stewart/\" rel=\"noopener\">Stewart</a> – 17 patterns</li><li><a href=\"https://wordpress.org/themes/livro/\" rel=\"noopener\">Livro</a> – 16 patterns</li><li><a href=\"https://wordpress.org/themes/avant-garde/\" rel=\"noopener\">Avant-Garde</a> – 14 patterns</li></ul>\n\n\n\n<h3>Section 3: Creating and using patterns with low-code</h3>\n\n\n\n<p>The <a href=\"https://wordpress.org/patterns/\" rel=\"noopener\">official patterns directory</a> contains community-contributed creative designs, which can be copied and customized as desired to create content. Using patterns with a block editor has never been so easier!</p>\n\n\n\n<p>Any patterns from the ever-growing directory can also be added to block themes just by simple “copy and paste” or include in the <code>theme.json</code> file by referring to their directory <em>pattern slug</em>. Next, I will go through briefly how easily this can be accomplished with very limited coding.</p>\n\n\n\n<h4>Adding and customizing patterns from patterns directory</h4>\n\n\n\n<p><em><strong>3.1: Copy pattern from directory into a page</strong></em></p>\n\n\n\n<p>Here, I am using <a href=\"https://wordpress.org/patterns/pattern/footer-section-design-with-3-column-description-social-media-contact-and-newsletter/\" rel=\"noopener\">this footer section pattern</a> by FirstWebGeek from the patterns directory. Copied the pattern by selecting the “Copy Pattern” button and directly pasted it in a new page.</p>\n\n\n\n<p><em><strong>3.2: Make desired customization</strong></em>s</p>\n\n\n\n<p>I made only a few changes to the color of the fonts and button background. Then copied the entire code from the <em>code editor</em> over to a clipboard.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"253\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-editor-1024x253.png?resize=1024%2C253&#038;ssl=1\" alt=\"Screenshot showing modified pattern (left panel) and corresponding code in code editor (right panel)\" class=\"wp-image-365876\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-editor.png?resize=1024%2C253&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-editor.png?resize=300%2C74&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-editor.png?resize=768%2C190&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-editor.png?w=1354&amp;ssl=1 1354w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you are not familiar with using the code editor, go to options (with three dots, top right), click the Code editor button, and copy the entire code from here.</p>\n\n\n\n<p><em><strong>3.3: Create a new file in /patterns folder</strong></em></p>\n\n\n\n<p>First, let&#8217;s create a new <code>/patterns/footer-pattern-test.php</code> file and add the required pattern header section. Then paste the entire code (step 3, above). The pattern is categorized in the footer area (lines: 5), we can view the newly added in the pattern inserter.</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;?php\n /**\n * Title: Footer pattern from patterns library\n * Slug: tt2gopher/footer-pattern-test\n * Categories: tt2gopher-footer\n * Viewport Width: 1280\n * Block Types: core/template-part/footer\n * Inserter: yes\n */\n?>\n\n&lt;!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"100px\",\"bottom\":\"70px\",\"right\":\"30px\",\"left\":\"30px\"}}},\"backgroundColor\":\"black\",\"layout\":{\"contentSize\":\"1280px\"}} -->\n&lt;div class=\"wp-block-group alignfull has-black-background-color has-background\" style=\"padding-top:100px;padding-right:30px;padding-bottom:70px;padding-left:30px\">&lt;!-- wp:columns -->\n&lt;div class=\"wp-block-columns\">&lt;!-- wp:column -->\n&lt;div class=\"wp-block-column\">&lt;!-- wp:heading {\"style\":{\"typography\":{\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"textTransform\":\"uppercase\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n&lt;h2 class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-style:normal;font-weight:700;text-transform:uppercase\">lorem&lt;/h2>\n&lt;!-- /wp:heading -->\n\n&lt;!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"16px\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n&lt;p class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:16px\">One of the main benefits of using Lorem Ipsum is that it can be easily generated, and it takes the pressure off designers to create meaningful text. Instead, they can focus on crafting the best website data.&lt;/p>\n&lt;!-- /wp:paragraph -->\n\n&lt;!-- wp:social-links {\"iconColor\":\"vivid-cyan-blue\",\"iconColorValue\":\"#0693e3\",\"openInNewTab\":true,\"className\":\"is-style-logos-only\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"15px\",\"left\":\"15px\"}}}} -->\n&lt;ul class=\"wp-block-social-links has-icon-color is-style-logos-only\">&lt;!-- wp:social-link {\"url\":\"#\",\"service\":\"facebook\"} /-->\n\n&lt;!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n&lt;!-- wp:social-link {\"url\":\"#\",\"service\":\"instagram\"} /-->\n\n&lt;!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /-->&lt;/ul>\n&lt;!-- /wp:social-links -->&lt;/div>\n&lt;!-- /wp:column -->\n\n&lt;!-- wp:column -->\n&lt;div class=\"wp-block-column\">&lt;!-- wp:heading {\"level\":4,\"style\":{\"typography\":{\"textTransform\":\"capitalize\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"fontSize\":\"30px\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n&lt;h4 class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:30px;font-style:normal;font-weight:700;text-transform:capitalize\">Contact Us&lt;/h4>\n&lt;!-- /wp:heading -->\n\n&lt;!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"16px\",\"lineHeight\":\"1.2\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n&lt;p class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:16px;line-height:1.2\">123 BD Lorem, Ipsum&lt;br>&lt;br>+123-456-7890&lt;/p>\n&lt;!-- /wp:paragraph -->\n\n&lt;!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"16px\",\"lineHeight\":\"1\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n&lt;p class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:16px;line-height:1\">sample@gmail.com&lt;/p>\n&lt;!-- /wp:paragraph -->\n\n&lt;!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"16px\",\"lineHeight\":\"1\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n&lt;p class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:16px;line-height:1\">Opening Hours: 10:00 - 18:00&lt;/p>\n&lt;!-- /wp:paragraph -->&lt;/div>\n&lt;!-- /wp:column -->\n\n&lt;!-- wp:column -->\n&lt;div class=\"wp-block-column\">&lt;!-- wp:heading {\"level\":4,\"style\":{\"typography\":{\"fontSize\":\"30px\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"textTransform\":\"capitalize\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n&lt;h4 class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:30px;font-style:normal;font-weight:700;text-transform:capitalize\">Newsletter&lt;/h4>\n&lt;!-- /wp:heading -->\n\n&lt;!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"16px\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n&lt;p class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:16px\">Lorem ipsum dolor sit amet, consectetur ut labore et dolore magna aliqua ipsum dolor sit&lt;/p>\n&lt;!-- /wp:paragraph -->\n\n&lt;!-- wp:search {\"label\":\"\",\"placeholder\":\"Enter Your Email...\",\"buttonText\":\"Subscribe\",\"buttonPosition\":\"button-inside\",\"style\":{\"border\":{\"width\":\"1px\"}},\"borderColor\":\"tertiary\",\"backgroundColor\":\"background-header\",\"textColor\":\"background\"} /-->&lt;/div>\n&lt;!-- /wp:column -->&lt;/div>\n&lt;!-- /wp:columns -->&lt;/div>\n&lt;!-- /wp:group --></code></pre>\n\n\n\n<p><em><strong>3.4: View the new pattern in the inserter</strong></em></p>\n\n\n\n<p>To view the newly added <code>Footer pattern from patterns library</code> pattern, go to any post or page and select the inserter icon (blue plus symbol, top left), and then select “TT2 Gopher – Footer” categories. The newly added pattern is shown on the left panel, together with other footer patterns and its preview on the right (if selected):</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1000\" height=\"425\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-inserter.png?resize=1000%2C425&#038;ssl=1\" alt=\"Screenshot showing new footer pattern (left panel) and its preview (right panel).\" class=\"wp-image-365877\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-inserter.png?w=1000&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-inserter.png?resize=300%2C128&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/wp-block-pattern-footer-inserter.png?resize=768%2C326&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h4>Registering patterns directly in <code>theme.json</code> file</h4>\n\n\n\n<p>In WordPress 6.0, it is possible to register any desired patterns from the pattern directory with <code>theme.json</code> file with the following syntax. The <a href=\"https://make.wordpress.org/core/2022/05/02/new-features-for-working-with-patterns-and-themes-in-wordpress-6-0/\" rel=\"noopener\">6.0 dev note states</a>, “the patterns field is an array of [<em>pattern slugs</em>] from the Pattern Directory. Pattern slugs can be extracted by the [URL] in single pattern view at the Pattern Directory.”</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">{\n    \"version\": 2,\n    \"patterns\": [\"short-text\", \"patterns-slug\"]\n}</code></pre>\n\n\n\n<p>This <a href=\"https://www.youtube.com/watch?v=09affdqg0-E\" rel=\"noopener\">short WordPress 6.0 features video</a> demonstrates how patterns are registered in the <code>/patterns</code> folder (at 3:53) and registering the desired patterns from the pattern director in a <code>theme.json</code> file (at 3:13).</p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"WordPress 6.0 features in 4mins - be upgrade ready\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/09affdqg0-E?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p>Then, the registered pattern is available in the patterns inserter search box, which is then available for use just like theme-bundled patterns library.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">{\n  \"version\": 2,\n  \"patterns\": [ \"footer-from-directory\", \"footer-section-design-with-3-column-description-social-media-contact-and-newsletter\" ]\n}</code></pre>\n\n\n\n<p>In this example, the pattern slug <code>footer-section-design-with-3-column-description-social-media-contact-and-newsletter</code> from the <a href=\"https://wordpress.org/patterns/pattern/footer-section-design-with-3-column-description-social-media-contact-and-newsletter/\" rel=\"noopener\">earlier example</a> is registered via <code>theme.json</code>.</p>\n\n\n\n<h4>Page creation pattern model</h4>\n\n\n\n<p>As part of “<a href=\"https://github.com/WordPress/gutenberg/issues/38529\" rel=\"noopener\">building with patterns</a>” initiatives, WordPress 6.0 <a href=\"https://make.wordpress.org/core/2022/05/03/page-creation-patterns-in-wordpress-6-0/\" rel=\"noopener\">offers a pattern modal option</a> to theme authors to add page layout patterns into block theme, allowing site users to select page layout patterns (e.g., an about page, a contact page, a team page, etc.) while creating a page. The following is an example taken from <a href=\"https://make.wordpress.org/core/2022/05/03/page-creation-patterns-in-wordpress-6-0/\" rel=\"noopener\">the dev note</a>:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">register_block_pattern(\n    'my-plugin/about-page',\n    array(\n        'title'      => __( 'About page', 'my-plugin' ),\n        'blockTypes' => array( 'core/post-content' ),\n        'content'    => '&lt;!-- wp:paragraph {\"backgroundColor\":\"black\",\"textColor\":\"white\"} -->\n        &lt;p class=\"has-white-color has-black-background-color has-text-color has-background\">Write you about page here, feel free to use any block&lt;/p>\n        &lt;!-- /wp:paragraph -->',\n    )\n);</code></pre>\n\n\n\n<p class=\"is-style-explanation\">This feature is currently <a href=\"https://github.com/WordPress/gutenberg/issues/38787#issuecomment-1110843422\" rel=\"noopener\">limited to Page Post Type</a> only and not for “Posts Post Type”, yet.</p>\n\n\n\n<p>The <em>page creation pattern modal</em> can also be disabled completely by removing the post-content block type of all the patterns. An example sample code <a href=\"https://make.wordpress.org/core/2022/05/03/page-creation-patterns-in-wordpress-6-0/\" rel=\"noopener\">is available here</a>.</p>\n\n\n\n<p class=\"is-style-explanation\">You can follow and participate in GitHub’s discussion from the links listed under the resource section below.</p>\n\n\n\n<h4>Using patterns directory to build page</h4>\n\n\n\n<p>Patterns from the directory can also be used to create the desired post or page layout, similar to page builders. The <a href=\"https://gutenberghub.com/\" rel=\"noopener\">GutenbergHub</a> team has created <a href=\"https://builder.gutenberghub.com/\" rel=\"noopener\">an experimental online page builder app</a> using patterns directly from the directory (<a href=\"https://youtu.be/tFaq6lqSURo\" rel=\"noopener\">introductory video</a>). Then the codes from the app can be copied and pasted in a site, which greatly simplifies the building complex page layout process without coding.</p>\n\n\n\n<p>In <a href=\"https://www.youtube.com/watch?v=5Qw2SNWwirI\" rel=\"noopener\">this short video</a>, Jamie Marsland demonstrates (at 1:30) how the app can be used to create an entire page layout similar to page builder using desired page sections of the directory.</p>\n\n\n\n<h3>Wrapping up</h3>\n\n\n\n<p>Patterns allow users to recreate their commonly used content layout (e.g., hero page, call out, etc.) in any page and lower the barriers to presenting content in styles, which were previously not possible without coding skills. Just like the <a href=\"https://wordpress.org/plugins/\" rel=\"noopener\">plugins</a> and <a href=\"https://wordpress.org/themes/\" rel=\"noopener\">themes</a> directories, the new <a href=\"https://wordpress.org/patterns/\" rel=\"noopener\">patterns</a> directory offers users options to use a wide range of patterns of their choices from the pattern directory, and write and display content in style.</p>\n\n\n\n<p>Indeed, <a href=\"https://wptavern.com/block-patterns-will-change-everything\" rel=\"noopener\">block patterns will change everything</a> and surely this is a <a href=\"https://richtabor.com/block-patterns/\" rel=\"noopener\">game changer</a> feature in the WordPress theme landscape. When the full potential of <a href=\"https://github.com/WordPress/gutenberg/issues/38529\" rel=\"noopener\">building with patterns</a> effort becomes available, this is going to change the way we design block themes and create beautiful content even with low-code knowledge. For many creative designers, the patterns directory may also provide an appropriate avenue to showcase their <a href=\"https://wordpress.org/news/2021/03/so-you-want-to-make-block-patterns/\" rel=\"noopener\">creativity</a>.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Resources</h3>\n\n\n\n<h4>WordPress 6.0</h4>\n\n\n\n<ul><li><a href=\"https://make.wordpress.org/core/2022/05/03/wordpress-6-0-field-guide/\" rel=\"noopener\">WordPress 6.0 Field Guide</a> (WordPress Core)</li><li><a href=\"https://www.youtube.com/watch?v=abaaVKl-beM\" rel=\"noopener\">Exploring WordPress 6.0: Style Variations, Block Locking UI, Writing Improvements</a> – 22 min video (Anne McCarthy)</li><li><a href=\"https://www.youtube.com/watch?v=09affdqg0-E\" rel=\"noopener\">WordPress 6.0 features in 4mins</a> (Dave Smith)</li><li><a href=\"https://kinsta.com/blog/wordpress-6-0/\" rel=\"noopener\">What’s New in WordPress 6.0: New Blocks, Style Switching, Template Editing, Webfonts API, and Much More</a> (Kinsta)</li></ul>\n\n\n\n<h4>Creating patterns</h4>\n\n\n\n<ul><li><a href=\"https://fullsiteediting.com/lessons/introduction-to-block-patterns/\" rel=\"noopener\">Introduction to block patterns</a> (Full Site Editing)</li><li><a href=\"https://learn.wordpress.org/workshop/intro-to-block-patterns/\" rel=\"noopener\">Introduction to Block Patterns video</a>, 14 mins (Learn WordPress)</li><li><a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/\" rel=\"noopener\">Block Patterns</a> (Block Editor Handbook)</li><li><a href=\"https://wordpress.org/news/2021/03/so-you-want-to-make-block-patterns/\" rel=\"noopener\">So you want to make block patterns?</a> (WordPress Blog)</li><li><a href=\"https://www.godaddy.com/garage/how-to-create-low-code-block-patterns-in-wordpress/\" rel=\"noopener\">How to create and share low-code Block Patterns in WordPress</a> (GoDaddy)</li></ul>\n\n\n\n<h4>Patterns enhancement (GitHub)</h4>\n\n\n\n<ul><li><a href=\"https://github.com/WordPress/gutenberg/issues/38529\" rel=\"noopener\">Building with Patterns #38529</a></li><li><a href=\"https://github.com/WordPress/gutenberg/issues/39281\" rel=\"noopener\">Patterns as Sectioning Elements #39281</a></li><li><a href=\"https://github.com/WordPress/gutenberg/pull/40034\" rel=\"noopener\">Add: Option to pick a pattern on page creation. #40034</a></li><li><a href=\"https://github.com/WordPress/gutenberg/issues/38787\" rel=\"noopener\">Block Patterns for page creation. #38787</a></li><li><a href=\"https://github.com/WordPress/gutenberg/pull/39147\" rel=\"noopener\">Add: Page start options (templates and patterns) #39147</a></li></ul>\n\n\n\n<h4>Blog articles</h4>\n\n\n\n<ul><li><a href=\"https://richtabor.com/block-patterns/\" rel=\"noopener\">Gutenberg Patterns: The Future of Page Building in WordPress</a> (Rich Tabor)</li><li><a href=\"https://www.godaddy.com/garage/using-block-patterns-to-speed-up-wordpress-site-builds/\" rel=\"noopener\">Using Block Patterns to speed up WordPress site builds</a> (GoDaddy)</li><li><a href=\"https://wptavern.com/block-patterns-will-change-everything\" rel=\"noopener\">Block Patterns Will Change Everything</a> (WP Tavern)</li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-create-block-theme-patterns-in-wordpress-6-0/\">How to Create Block Theme Patterns in WordPress 6.0</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Block patterns, also frequently referred to as sections, were introduced in WordPress 5.5 to allow users to build and share predefined block layouts in the pattern directory. The directory is the home of a wide range of curated patterns designed by the WordPress community. These patterns are available in simple copy and paste format, require no coding knowledge and thus are a big time saver for users.\n\n\n\nDespite many articles on patterns, there is a lack of comprehensive and up-to-date articles on pattern creation covering the latest enhanced features. This article aims to fill the gap with a focus on the recent enhanced features like creating patterns without registration and offer an up-to-date step-by-step guide to create and use them in block themes for novices and experienced authors.\n\n\n\n\n\n\n\nSince the launch of WordPress 5.9 and the Twenty Twenty-Two (TT2) default theme, the use of block patterns in block themes has proliferated. I have been a big fan of block patterns and have created and used them in my block themes.\n\n\n\nThe new WordPress 6.0 offers three major patterns feature enhancements to authors:\n\n\n\nAllowing pattern registration through /patterns folder (similar to /parts, /templates, and /styles registration).Registering patterns from the public patterns directory using the theme.json.Adding patterns that can be offered to the user when creating a new page.\n\n\n\nIn an introductory Exploring WordPress 6.0 video, Automattic product liaison Ann McCathy highlights some newly enhanced patterns features (starting at 15:00) and discusses future patterns enhancement plans — which include patterns as sectioning elements, providing options to pick pattern on page creation, integrating pattern directory search, and more.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\nThe article assumes that readers have basic knowledge of WordPress full site editing (FSE) interface and block themes. The Block Editor Handbook and Full Site Editing website provide the most up-to-date tutorial guides to learn all FSE features, including block themes and patterns discussed in this article.\n\n\n\nSection 1: Evolving approaches to creating block patterns\n\n\n\nThe initial approach to creating block patterns required the use of block pattern API either as a custom plugin or directly registered in the functions.php file to bundle with a block theme. The newly launched WordPress 6.0 introduced several new and enhanced features working with patterns and themes, including pattern registration via a /patterns folder and a page creation pattern modal.\n\n\n\nFor background, let’s first briefly overview how the pattern registration workflow evolved from using the register pattern API to directly loading without registration.\n\n\n\nUse case example 1: Twenty Twenty-One\n\n\n\nThe default Twenty Twenty-One theme (TT1) and TT1 Blocks theme (a sibling of TT1) showcase how block patterns can be registered in the theme’s functions.php. In the TT1 Blocks experimental-theme, this single block-pattern.php file containing eight block patterns is added to the functions.php as an include as shown here.\n\n\n\nA custom block pattern needs to be registered using the register_block_pattern function, which receives two arguments — title (name of the patterns) and properties (an array describing properties of the pattern).\n\n\n\nHere is an example of registering a simple “Hello World” paragraph pattern from this Theme Shaper article:\n\n\n\nregister_block_pattern(\n    'my-plugin/hello-world',\n    array(\n        'title'   => __( 'Hello World', 'my-plugin' ),\n        'content' => \"<!-- wp:paragraph -->\\n<p>Hello World</p>\\n<!-- /wp:paragraph -->\",\n    )\n);\n\n\n\nAfter registration, the register_block_pattern() function should be called from a handler attached to the init hook as described here.\n\n\n\n function my_plugin_register_my_patterns() {\n    register_block_pattern( ... );\n  }\n\n  add_action( 'init', 'my_plugin_register_my_patterns' );\n\n\n\nOnce block patterns are registered they are visible in the block editor. More detailed documentation is found in this Block Pattern Registration.\n\n\n\nBlock pattern properties\n\n\n\nIn addition to required title and content properties, the block editor handbook lists the following optional pattern properties:\n\n\n\ntitle (required): A human-readable title for the pattern.content (required): Block HTML Markup for the pattern.description (optional): A visually hidden text used to describe the pattern in the inserter. A description is optional but it is strongly encouraged when the title does not fully describe what the pattern does. The description will help users discover the pattern while searching.categories (optional): An array of registered pattern categories used to group block patterns. Block patterns can be shown on multiple categories. A category must be registered separately in order to be used here.keywords (optional): An array of aliases or keywords that help users discover the pattern while searching.viewportWidth (optional): An integer specifying the intended width of the pattern to allow for a scaled preview of the pattern in the inserter.blockTypes (optional): An array of block types that the pattern is intended to be used with. Each value needs to be the declared block’s name.inserter (optional): By default, all patterns will appear in the inserter. To hide a pattern so that it can only be inserted programmatically, set the inserter to false.\n\n\n\nThe following is an example of a quote pattern plugin code snippets taken from the WordPress blog.\n\n\n\n/*\nPlugin Name: Quote Pattern Example Plugin\n*/\n\nregister_block_pattern(\n    'my-plugin/my-quote-pattern',\n     array(\n      'title'       => __( 'Quote with Avatar', 'my-plugin' ),\n      'categories'  => array( 'text' ),\n      'description' => _x( 'A big quote with an avatar\".', 'Block pattern description', 'my-plugin' ),\n      'content'     => '<!-- wp:group --><div class=\"wp-block-group\"><div class=\"wp-block-group__inner-container\"><!-- wp:separator {\"className\":\"is-style-default\"} --><hr class=\"wp-block-separator is-style-default\"/><!-- /wp:separator --><!-- wp:image {\"align\":\"center\",\"id\":553,\"width\":150,\"height\":150,\"sizeSlug\":\"large\",\"linkDestination\":\"none\",\"className\":\"is-style-rounded\"} --><div class=\"wp-block-image is-style-rounded\"><figure class=\"aligncenter size-large is-resized\"><img src=\"https://blockpatterndesigns.mystagingwebsite.com/wp-content/uploads/2021/02/StockSnap_HQR8BJFZID-1.jpg\" alt=\"\" class=\"wp-image-553\" width=\"150\" height=\"150\"/></figure></div><!-- /wp:image --><!-- wp:quote {\"align\":\"center\",\"className\":\"is-style-large\"} --><blockquote class=\"wp-block-quote has-text-align-center is-style-large\"><p>\"Contributing makes me feel like I\\'m being useful to the planet.\"</p><cite>— Anna Wong, <em>Volunteer</em></cite></blockquote><!-- /wp:quote --><!-- wp:separator {\"className\":\"is-style-default\"} --><hr class=\"wp-block-separator is-style-default\"/><!-- /wp:separator --></div></div><!-- /wp:group -->',\n      )\n);\n\n\n\nUsing patterns in a template file\n\n\n\nOnce patterns are created, they can be used in a theme template file with the following block markup:\n\n\n\n<!-- wp:pattern {\"slug\":\"prefix/pattern-slug\"} /-->\n\n\n\nAn example from this GitHub repository shows the use of “footer-with-background” pattern slug with “tt2gopher” prefix in TT2 Gopher blocks theme.\n\n\n\nEarly adopters of block themes and Gutenberg plugin took advantage of patterns in classic themes as well. The default Twenty Twenty and my favorite Eksell themes (a demo site here) are good examples that showcase how pattern features can be added to classic themes.\n\n\n\nUse case example 2: Twenty Twenty-Two\n\n\n\nIf a theme includes only a few patterns, the development and maintenance are fairly manageable. However, if a block theme includes many patterns, like in TT2 theme, then the pattern.php file becomes very large and hard to read. The default TT2 theme, which bundles more than 60 patterns, showcases a refactored pattern registration workflow structure that is easier to read and maintain.\n\n\n\nTaking examples from the TT2 theme, let’s briefly discuss how this simplified workflow works.\n\n\n\n2.1: Registering Patterns Categories\n\n\n\nFor demonstration purposes, I created a TT2 child theme and set it up on my local test site with some dummy content. Following TT2, I registered footer-with-background and added to the following pattern categories array list in its block-patterns.php file.\n\n\n\n/**\n* Registers block patterns and categories.\n*/\nfunction twentytwentytwo_register_block_patterns() {\n\t$block_pattern_categories = array(\n\t\t'footer'   => array( 'label' => __( 'Footers', 'twentytwentytwo' ) ),\n\t\t'header'   => array( 'label' => __( 'Headers', 'twentytwentytwo' ) ),\n\t\t'pages'    => array( 'label' => __( 'Pages', 'twentytwentytwo' ) ),\n                // ...\n\t);\n\n\t/**\n\t * Filters the theme block pattern categories.\n\t */\n\t$block_pattern_categories = apply_filters( 'twentytwentytwo_block_pattern_categories', $block_pattern_categories );\n\n\tforeach ( $block_pattern_categories as $name => $properties ) {\n\t\tif ( ! WP_Block_Pattern_Categories_Registry::get_instance()->is_registered( $name ) ) {\n\t\t\tregister_block_pattern_category( $name, $properties );\n\t\t}\n\t}\n\n\t$block_patterns = array(\n\t\t'footer-default',\n\t\t'footer-dark',\n\t\t'footer-with-background',\n\t\t//...\n\t\t'header-default',\n\t\t'header-large-dark',\n\t\t'header-small-dark',\n\t\t'hidden-404',\n\t\t'hidden-bird',\n\t\t//...\n\t);\n\n\t/**\n\t * Filters the theme block patterns.\n\t */\n\t$block_patterns = apply_filters( 'twentytwentytwo_block_patterns', $block_patterns );\n\n\tforeach ( $block_patterns as $block_pattern ) {\n\t\t$pattern_file = get_theme_file_path( '/inc/patterns/' . $block_pattern . '.php' );\n\n\t\tregister_block_pattern(\n\t\t\t'twentytwentytwo/' . $block_pattern,\n\t\t\trequire $pattern_file\n\t\t);\n\t}\n}\nadd_action( 'init', 'twentytwentytwo_register_block_patterns', 9 );\n\n\n\nIn this code example, each pattern listed in the $block_patterns = array() is called by foreach() function which requires a patterns directory file with the listed pattern name in the array which we will add in the next step.\n\n\n\n2.2: Adding a pattern file to the /inc/patterns folder\n\n\n\nNext, we should have all the listed patterns files in the $block_patterns = array(). Here is an example of one of the pattern files, footer-with-background.php:\n\n\n\n/**\n * Dark footer wtih title and citation\n */\nreturn array(\n\t'title'      => __( 'Footer with background', 'twentytwentytwo' ),\n\t'categories' => array( 'footer' ),\n\t'blockTypes' => array( 'core/template-part/footer' ),\n  'content'    => '<!-- wp:group {\"align\":\"full\",\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|background\"}}},\"spacing\":{\"padding\":{\"top\":\"var(--wp--custom--spacing--small, 1.25rem)\",\"bottom\":\"var(--wp--custom--spacing--small, 1.25rem)\"}}},\"backgroundColor\":\"background-header\",\"textColor\":\"background\",\"layout\":{\"inherit\":true}} -->\n      <div class=\"wp-block-group alignfull has-background-color has-background-header-background-color has-text-color has-background has-link-color\" style=\"padding-top:var(--wp--custom--spacing--small, 1.25rem);padding-bottom:var(--wp--custom--spacing--small, 1.25rem)\"><!-- wp:paragraph {\"align\":\"center\"} -->\n      <p class=\"has-text-align-center\">' .\n      sprintf(\n        /* Translators: WordPress link. */\n        esc_html__( 'Proudly powered by %s', 'twentytwentytwo' ),\n        '<a href=\"' . esc_url( __( 'https://wordpress.org', 'twentytwentytwo' ) ) . '\" rel=\"nofollow\">WordPress</a> | a modified TT2 theme.'\n      ) . '</p>\n      <!-- /wp:paragraph --></div>\n          <!-- /wp:group -->',\n);\n\n\n\nLet’s reference the pattern in the footer.html template part:\n\n\n\n<!-- wp:template-part {\"slug\":\"footer\"} /-->\n\n\n\nThis is similar to adding heading or footer parts in a template file.\n\n\n\nThe patterns can similarly be added to the parts/footer.html template by modifying it to refer to slug of the theme’s pattern file (footer-with-background):\n\n\n\n<!-- wp:pattern {\"slug\":\"twentytwentytwo/footer-with-background\"} /-->\n\n\n\nNow, if we visit the patterns inserter of the block editor, the Footer with background should be available for our use:\n\n\n\n\n\n\n\nThe following screenshot shows the newly created footer with background pattern on the front-end.\n\n\n\n\n\n\n\nNow that patterns have become the integral part of block theme, many patterns are bundled in block themes — like Quadrat, Seedlet, Mayland, Zoologist, Geologist — following the workflow discussed above. Here is an example of the Quadrat theme /inc/patterns folder with a block-pattern registration file and list of files with content source and required pattern header within return array() function.\n\n\n\nSection 2: Creating and loading patterns without registration\n\n\n\nPlease note that this feature requires the installation of WordPress 6.0 or Gutenberg plugin 13.0 or above in your site.\n\n\n\nThis new WordPress 6.0 feature allows pattern registration via standard files and folders – /patterns, bringing similar conventions like /parts, /templates, and /styles.\n\n\n\nThe process, as also described in this WP Tavern article, involves the following three steps:\n\n\n\ncreating a patterns folder at the theme’s rootadding plugin style pattern headerpattern source content\n\n\n\nA typical pattern header markup, taken from the article is shown below:\n\n\n\n<?php\n/**\n* Title: A Pattern Title\n* Slug: namespace/slug\n* Description: A human-friendly description.\n* Viewport Width: 1024\n* Categories: comma, separated, values\n* Keywords: comma, separated, values\n* Block Types: comma, separated, values\n* Inserter: yes|no\n*/\n?>\n\n\n\nAs described in the previous section, only Title and Slug fields are required and other fields are optional.\n\n\n\nReferencing examples from recently released themes, I refactored pattern registration in this TT2 Gopher Blocks demo theme, prepared for a previous article on the CSS-Tricks.\n\n\n\nIn the following steps, let’s explore how a footer-with-background.php pattern registered with PHP and used in a footer.html template is refactored.\n\n\n\n2.1: Create a /patterns folder at the root of the theme\n\n\n\nThe first step is to create a /patterns folder at TT2 Gopher theme’s root and move the footer-with-background.php pattern file to /patterns folder and refactor.\n\n\n\n2.2: Add pattern data to the file header\n\n\n\nNext, create the following pattern header registration fields.\n\n\n\n<?php\n/**\n* Title: Footer with background\n* Slug: tt2gopher/footer-with-background\n* Categories: tt2gopher-footer\n* Viewport Width: 1280\n* Block Types: core/parts/footer\n* Inserter: yes\n*/\n?>\n<!-- some-block-content /-->\n\n\n\nA pattern file has a top title field written as PHP comments. Followed by the block-content written in HTML format.\n\n\n\n2.3: Add Pattern Content to the file\n\n\n\nFor the content section, let’s copy the code snippets within single quotes (e.g., '...') from the content section of the footer-with-background and replace the <!-- some-block-content /-->:\n\n\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|foreground\"}}},\"spacing\":{\"padding\":{\"top\":\"35px\",\"bottom\":\"30px\"}}},\"backgroundColor\":\"background-header\",\"textColor\":\"foreground\",\"className\":\"has-foreground\",\"layout\":{\"inherit\":true}} -->\n    <div class=\"wp-block-group alignfull has-foreground has-foreground-color has-background-header-background-color has-text-color has-background has-link-color\" style=\"padding-top:35px;padding-bottom:30px\"><!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"small\"} -->\n    <p class=\"has-text-align-center has-small-font-size\">Powered by WordPress | TT2 Gopher, a modified TT2 theme</p>\n    <!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n\n\n\nThe entire code snippet of the patterns/footer-with-background.php file can be viewed here on the GitHub.\n\n\n\nPlease note that the /inc/patterns and block-patterns.php are extras, not required in WordPress 6.0, and included only for demo purposes.\n\n\n\n2.4: Referencing the patterns slug in the template\n\n\n\nAdding the above refactored footer-with-background.php pattern to footer.html template is exactly the same as described in the previous section (Section 1, 2.2).\n\n\n\nNow, if we view the site’s footer part in a block editor or front-end of our site in a browser, the footer section is displayed.\n\n\n\nPattern categories and types Registration (optional)\n\n\n\nTo categorize block patterns, the pattern categories and types should be registered in theme’s functions.php file.\n\n\n\nLet’s consider an example of registering block pattern categories from the TT2 Gopher theme.\n\n\n\nAfter the registration, the patterns are displayed in the pattern inserter together with the core default patterns. To add theme specific category labels in the patterns inserter, we should modify the previous snippets by adding theme namespace:\n\n\n\n/**\n* Registers block categories, and type.\n*/\n\nfunction tt2gopher_register_block_pattern_categories() {\n\n$block_pattern_categories = array(\n  'tt2gopher-header' => array( 'label' => __( 'TT2 Gopher - Headers', 'tt2gopher' ) ),\n  'tt2gopher-footer' => array( 'label' => __( 'TT2 Gopher - Footers', 'tt2gopher' ) ),\n  'tt2gopher-page' => array( 'label' => __( 'TT2 Gopher - Page', 'tt2gopher' ) ),\n  // ...\n);\n\n/**\n* Filters the theme block pattern categories.\n*/\n$block_pattern_categories = apply_filters( 'tt2gopher_block_pattern_categories', $block_pattern_categories );\n\nforeach ( $block_pattern_categories as $name => $properties ) {\n  if ( ! WP_Block_Pattern_Categories_Registry::get_instance()->is_registered( $name ) ) {\n    register_block_pattern_category( $name, $properties );\n  }\n}\nadd_action( 'init', 'tt2gopher_register_block_pattern_categories', 9 );\n\n\n\nThe footer-with-background pattern is visible in the patterns inserted with its preview (if selected):\n\n\n\n\n\n\n\nThis process greatly simplifies creating and displaying block patterns in block themes. It is available in WordPress 6.0 without using the Gutenberg plugin.\n\n\n\nExamples of themes without patterns registration\n\n\n\nEarly adopters have already started using this feature in their block themes. A few examples of the themes, that are available from the theme directory, that load patterns without registration are listed below:\n\n\n\nArcheo – 12 patternsPendant – 13 patternsRemote – 11 patternsSkatepark – 10 patternsStewart – 17 patternsLivro – 16 patternsAvant-Garde – 14 patterns\n\n\n\nSection 3: Creating and using patterns with low-code\n\n\n\nThe official patterns directory contains community-contributed creative designs, which can be copied and customized as desired to create content. Using patterns with a block editor has never been so easier!\n\n\n\nAny patterns from the ever-growing directory can also be added to block themes just by simple “copy and paste” or include in the theme.json file by referring to their directory pattern slug. Next, I will go through briefly how easily this can be accomplished with very limited coding.\n\n\n\nAdding and customizing patterns from patterns directory\n\n\n\n3.1: Copy pattern from directory into a page\n\n\n\nHere, I am using this footer section pattern by FirstWebGeek from the patterns directory. Copied the pattern by selecting the “Copy Pattern” button and directly pasted it in a new page.\n\n\n\n3.2: Make desired customizations\n\n\n\nI made only a few changes to the color of the fonts and button background. Then copied the entire code from the code editor over to a clipboard.\n\n\n\n\n\n\n\nIf you are not familiar with using the code editor, go to options (with three dots, top right), click the Code editor button, and copy the entire code from here.\n\n\n\n3.3: Create a new file in /patterns folder\n\n\n\nFirst, let’s create a new /patterns/footer-pattern-test.php file and add the required pattern header section. Then paste the entire code (step 3, above). The pattern is categorized in the footer area (lines: 5), we can view the newly added in the pattern inserter.\n\n\n\n<?php\n /**\n * Title: Footer pattern from patterns library\n * Slug: tt2gopher/footer-pattern-test\n * Categories: tt2gopher-footer\n * Viewport Width: 1280\n * Block Types: core/template-part/footer\n * Inserter: yes\n */\n?>\n\n<!-- wp:group {\"align\":\"full\",\"style\":{\"spacing\":{\"padding\":{\"top\":\"100px\",\"bottom\":\"70px\",\"right\":\"30px\",\"left\":\"30px\"}}},\"backgroundColor\":\"black\",\"layout\":{\"contentSize\":\"1280px\"}} -->\n<div class=\"wp-block-group alignfull has-black-background-color has-background\" style=\"padding-top:100px;padding-right:30px;padding-bottom:70px;padding-left:30px\"><!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:heading {\"style\":{\"typography\":{\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"textTransform\":\"uppercase\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n<h2 class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-style:normal;font-weight:700;text-transform:uppercase\">lorem</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"16px\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n<p class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:16px\">One of the main benefits of using Lorem Ipsum is that it can be easily generated, and it takes the pressure off designers to create meaningful text. Instead, they can focus on crafting the best website data.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:social-links {\"iconColor\":\"vivid-cyan-blue\",\"iconColorValue\":\"#0693e3\",\"openInNewTab\":true,\"className\":\"is-style-logos-only\",\"style\":{\"spacing\":{\"blockGap\":{\"top\":\"15px\",\"left\":\"15px\"}}}} -->\n<ul class=\"wp-block-social-links has-icon-color is-style-logos-only\"><!-- wp:social-link {\"url\":\"#\",\"service\":\"facebook\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"twitter\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"instagram\"} /-->\n\n<!-- wp:social-link {\"url\":\"#\",\"service\":\"linkedin\"} /--></ul>\n<!-- /wp:social-links --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:heading {\"level\":4,\"style\":{\"typography\":{\"textTransform\":\"capitalize\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"fontSize\":\"30px\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n<h4 class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:30px;font-style:normal;font-weight:700;text-transform:capitalize\">Contact Us</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"16px\",\"lineHeight\":\"1.2\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n<p class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:16px;line-height:1.2\">123 BD Lorem, Ipsum<br><br>+123-456-7890</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"16px\",\"lineHeight\":\"1\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n<p class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:16px;line-height:1\">sample@gmail.com</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"16px\",\"lineHeight\":\"1\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n<p class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:16px;line-height:1\">Opening Hours: 10:00 - 18:00</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:heading {\"level\":4,\"style\":{\"typography\":{\"fontSize\":\"30px\",\"fontStyle\":\"normal\",\"fontWeight\":\"700\",\"textTransform\":\"capitalize\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n<h4 class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:30px;font-style:normal;font-weight:700;text-transform:capitalize\">Newsletter</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"style\":{\"typography\":{\"fontSize\":\"16px\"}},\"textColor\":\"cyan-bluish-gray\"} -->\n<p class=\"has-cyan-bluish-gray-color has-text-color\" style=\"font-size:16px\">Lorem ipsum dolor sit amet, consectetur ut labore et dolore magna aliqua ipsum dolor sit</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:search {\"label\":\"\",\"placeholder\":\"Enter Your Email...\",\"buttonText\":\"Subscribe\",\"buttonPosition\":\"button-inside\",\"style\":{\"border\":{\"width\":\"1px\"}},\"borderColor\":\"tertiary\",\"backgroundColor\":\"background-header\",\"textColor\":\"background\"} /--></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns --></div>\n<!-- /wp:group -->\n\n\n\n3.4: View the new pattern in the inserter\n\n\n\nTo view the newly added Footer pattern from patterns library pattern, go to any post or page and select the inserter icon (blue plus symbol, top left), and then select “TT2 Gopher – Footer” categories. The newly added pattern is shown on the left panel, together with other footer patterns and its preview on the right (if selected):\n\n\n\n\n\n\n\nRegistering patterns directly in theme.json file\n\n\n\nIn WordPress 6.0, it is possible to register any desired patterns from the pattern directory with theme.json file with the following syntax. The 6.0 dev note states, “the patterns field is an array of [pattern slugs] from the Pattern Directory. Pattern slugs can be extracted by the [URL] in single pattern view at the Pattern Directory.”\n\n\n\n{\n    \"version\": 2,\n    \"patterns\": [\"short-text\", \"patterns-slug\"]\n}\n\n\n\nThis short WordPress 6.0 features video demonstrates how patterns are registered in the /patterns folder (at 3:53) and registering the desired patterns from the pattern director in a theme.json file (at 3:13).\n\n\n\n\n\n\n\n\n\nThen, the registered pattern is available in the patterns inserter search box, which is then available for use just like theme-bundled patterns library.\n\n\n\n{\n  \"version\": 2,\n  \"patterns\": [ \"footer-from-directory\", \"footer-section-design-with-3-column-description-social-media-contact-and-newsletter\" ]\n}\n\n\n\nIn this example, the pattern slug footer-section-design-with-3-column-description-social-media-contact-and-newsletter from the earlier example is registered via theme.json.\n\n\n\nPage creation pattern model\n\n\n\nAs part of “building with patterns” initiatives, WordPress 6.0 offers a pattern modal option to theme authors to add page layout patterns into block theme, allowing site users to select page layout patterns (e.g., an about page, a contact page, a team page, etc.) while creating a page. The following is an example taken from the dev note:\n\n\n\nregister_block_pattern(\n    'my-plugin/about-page',\n    array(\n        'title'      => __( 'About page', 'my-plugin' ),\n        'blockTypes' => array( 'core/post-content' ),\n        'content'    => '<!-- wp:paragraph {\"backgroundColor\":\"black\",\"textColor\":\"white\"} -->\n        <p class=\"has-white-color has-black-background-color has-text-color has-background\">Write you about page here, feel free to use any block</p>\n        <!-- /wp:paragraph -->',\n    )\n);\n\n\n\nThis feature is currently limited to Page Post Type only and not for “Posts Post Type”, yet.\n\n\n\nThe page creation pattern modal can also be disabled completely by removing the post-content block type of all the patterns. An example sample code is available here.\n\n\n\nYou can follow and participate in GitHub’s discussion from the links listed under the resource section below.\n\n\n\nUsing patterns directory to build page\n\n\n\nPatterns from the directory can also be used to create the desired post or page layout, similar to page builders. The GutenbergHub team has created an experimental online page builder app using patterns directly from the directory (introductory video). Then the codes from the app can be copied and pasted in a site, which greatly simplifies the building complex page layout process without coding.\n\n\n\nIn this short video, Jamie Marsland demonstrates (at 1:30) how the app can be used to create an entire page layout similar to page builder using desired page sections of the directory.\n\n\n\nWrapping up\n\n\n\nPatterns allow users to recreate their commonly used content layout (e.g., hero page, call out, etc.) in any page and lower the barriers to presenting content in styles, which were previously not possible without coding skills. Just like the plugins and themes directories, the new patterns directory offers users options to use a wide range of patterns of their choices from the pattern directory, and write and display content in style.\n\n\n\nIndeed, block patterns will change everything and surely this is a game changer feature in the WordPress theme landscape. When the full potential of building with patterns effort becomes available, this is going to change the way we design block themes and create beautiful content even with low-code knowledge. For many creative designers, the patterns directory may also provide an appropriate avenue to showcase their creativity.\n\n\n\n\n\n\n\nResources\n\n\n\nWordPress 6.0\n\n\n\nWordPress 6.0 Field Guide (WordPress Core)Exploring WordPress 6.0: Style Variations, Block Locking UI, Writing Improvements – 22 min video (Anne McCarthy)WordPress 6.0 features in 4mins (Dave Smith)What’s New in WordPress 6.0: New Blocks, Style Switching, Template Editing, Webfonts API, and Much More (Kinsta)\n\n\n\nCreating patterns\n\n\n\nIntroduction to block patterns (Full Site Editing)Introduction to Block Patterns video, 14 mins (Learn WordPress)Block Patterns (Block Editor Handbook)So you want to make block patterns? (WordPress Blog)How to create and share low-code Block Patterns in WordPress (GoDaddy)\n\n\n\nPatterns enhancement (GitHub)\n\n\n\nBuilding with Patterns #38529Patterns as Sectioning Elements #39281Add: Option to pick a pattern on page creation. #40034Block Patterns for page creation. #38787Add: Page start options (templates and patterns) #39147\n\n\n\nBlog articles\n\n\n\nGutenberg Patterns: The Future of Page Building in WordPress (Rich Tabor)Using Block Patterns to speed up WordPress site builds (GoDaddy)Block Patterns Will Change Everything (WP Tavern)\n\nHow to Create Block Theme Patterns in WordPress 6.0 originally published on CSS-Tricks. You should get the newsletter.",
      "image": "https://css-tricks.com/wp-content/uploads/2022/05/maxresdefault-1.jpg",
      "date_published": "2022-06-01T15:30:15.000Z",
      "date_modified": "2022-06-01T15:30:15.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366175",
      "url": "https://css-tricks.com/spas-shared-element-transitions-and-re-evaluating-technology/",
      "title": "SPAs, Shared Element Transitions, and Re-Evaluating Technology",
      "summary": "Nolan Lawson sparked some discussion when he described a noticeable shift away from single-page applications (SPAs):\n\nHip new frameworks like Astro, Qwik, and Elder.js are touting their MPA [multi-page application] with “0kB JavaScript by default.” \n\n…\n\nSPAs, Shared Element Transitions, and Re-Evaluating Technology originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Nolan Lawson sparked some discussion when he <a href=\"https://nolanlawson.com/2022/05/21/the-balance-has-shifted-away-from-spas/\" rel=\"noopener\">described a noticeable shift away from single-page applications (<abbr>SPA</abbr>s)</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Hip new frameworks like <a href=\"https://astro.build/\" rel=\"noopener\">Astro</a>, <a href=\"https://qwik.builder.io/docs/overview\" rel=\"noopener\">Qwik</a>, and <a href=\"https://elderguide.com/tech/elderjs/\" rel=\"noopener\">Elder.js</a> are touting their <abbr title=\"muliti-page- application\">MPA</abbr> [multi-page application] with “0kB JavaScript by default.” Blog posts are making the rounds listing <a href=\"https://dev.to/tigt/routing-im-not-smart-enough-for-a-spa-5hki\" rel=\"noopener\">all the challenges</a> with <abbr title=\"single page application\">SPA</abbr>s: history, focus management, scroll restoration, Cmd/Ctrl-click, memory leaks, etc. <a href=\"https://williamkennedy.ninja/javascript/2022/05/03/in-defence-of-the-single-page-application/\" rel=\"noopener\">Gleeful potshots</a> are being taken against SPAs.</p><p>I think what’s less discussed, though, is how the context has changed in recent years to give <abbr title=\"multi-page application\">MPA</abbr>s more of an upper hand against <abbr>SPAs</abbr>.</p></blockquote>\n\n\n\n<p>It seems a number of folks really clung to that first part because Nolan published a <a href=\"https://nolanlawson.com/2022/05/25/more-thoughts-on-spas/\" rel=\"noopener\">follow-up</a> to clarify that <abbr>SPA</abbr>s are far from doomed:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>[T]he point of my post wasn’t to bury <abbr>SPA</abbr>s and dance on their grave. I think <abbr>SPA</abbr>s are great, I’ve worked on many of them, and I think they have a bright future ahead of them. My main point was: if the only reason you’re using an <abbr>SPA</abbr> is because “it makes navigations faster,” then maybe it’s time to re-evaluate that.</p></blockquote>\n\n\n\n<p>And there&#8217;s good reason he says that. In fact, the first article specifically points to work being done on <a href=\"https://github.com/WICG/shared-element-transitions/\" rel=\"noopener\">Shared Element Transitions</a>. If they move forward, we&#8217;ll have an API for animating/transitioning/sizing/positioning elements on page entrance and exist. Jake Archibald demonstrated how it works at Google I/O 2022 and <a href=\"https://www.youtube.com/watch?v=JCJUPJ_zDQ4\" rel=\"noopener\">the video is a gem</a>.</p>\n\n\n\n<span id=\"more-366175\"></span>\n\n\n\n<p>If you&#8217;re wondering how one page can transition into another, the browser takes screenshots of the outgoing page and the incoming page, then transitions between those. So, it&#8217;s not so much one page becoming another as much as it is the browser holding onto two images so it can animate one in while the other animates out. Jake says what&#8217;s happening behind the scene is a DOM structure is created out of pseudo-elements containing the page images:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;transition-container>\n  &lt;image-wrapper>\n    &lt;outgoing-image />\n    &lt;incoming-image />\n  &lt;/>\n&lt;/></code></pre>\n\n\n\n<p>We can &#8220;screenshot&#8221; a specific element if we want to isolate it and apply a different animation from the rest of the page:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.site-header {\n  page-transition-tag: site-header;\n  contain: paint;\n}</code></pre>\n\n\n\n<p>And we get pseudo-elements we can hook into and assign custom <code>@keyframe</code> animations:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- ::page-transition=container(root)  -->\n&lt;transition-container>\n  &lt;!-- ::page-transition-image-wrapper(root)  -->\n  &lt;image-wrapper>\n    &lt;!-- ::page-transition-outgoing-image(root) -->\n    &lt;outgoing-image />\n    &lt;!-- ::page-transition-incoming-image(root) -->\n    &lt;incoming-image />\n  &lt;/>\n&lt;/></code></pre>\n\n\n\n<p>Dang, that&#8217;s clever as heck!</p>\n\n\n\n<p>It&#8217;s also proof in the pudding of just how much HTML, CSS, and JavaScript continue to evolve and improve. So much so that Jeremy Keith suggests it&#8217;s high time we <a href=\"https://adactio.com/journal/19125\" rel=\"noopener\">re-evaluate our past judgment of some technologies</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you weren’t aware of changes over the past few years, it would be easy to still think that single page apps offer some unique advantages that in fact no longer hold true. [&#8230;] But developers remain suspicious, still prefering to trust third-party libraries over native browser features. They made a decision about those libraries in the past. They evaluated the state of browser support in the past. I wish they would re-evaluate those decisions.</p></blockquote>\n\n\n\n<p>The ingredients for SPAs specifically:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>In recent years in particular it feels like the web has come on in leaps and bounds: service workers, native JavaScript APIs, and an astonishing boost in what you can do with CSS. Most important of all, the interoperability between browsers is getting better and better. Universal support for new web standards arrives at a faster rate than ever before.</p></blockquote>\n\n\n\n<p>HTML, CSS, and JavaScript: it’s still <a href=\"https://css-tricks.com/the-best-cocktail-in-town/\">the best cocktail in town</a>. Even if it takes a minute for it to catch up.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/spas-shared-element-transitions-and-re-evaluating-technology/\">SPAs, Shared Element Transitions, and Re-Evaluating Technology</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Nolan Lawson sparked some discussion when he described a noticeable shift away from single-page applications (SPAs):\n\n\n\nHip new frameworks like Astro, Qwik, and Elder.js are touting their MPA [multi-page application] with “0kB JavaScript by default.” Blog posts are making the rounds listing all the challenges with SPAs: history, focus management, scroll restoration, Cmd/Ctrl-click, memory leaks, etc. Gleeful potshots are being taken against SPAs.I think what’s less discussed, though, is how the context has changed in recent years to give MPAs more of an upper hand against SPAs.\n\n\n\nIt seems a number of folks really clung to that first part because Nolan published a follow-up to clarify that SPAs are far from doomed:\n\n\n\n[T]he point of my post wasn’t to bury SPAs and dance on their grave. I think SPAs are great, I’ve worked on many of them, and I think they have a bright future ahead of them. My main point was: if the only reason you’re using an SPA is because “it makes navigations faster,” then maybe it’s time to re-evaluate that.\n\n\n\nAnd there’s good reason he says that. In fact, the first article specifically points to work being done on Shared Element Transitions. If they move forward, we’ll have an API for animating/transitioning/sizing/positioning elements on page entrance and exist. Jake Archibald demonstrated how it works at Google I/O 2022 and the video is a gem.\n\n\n\n\n\n\n\nIf you’re wondering how one page can transition into another, the browser takes screenshots of the outgoing page and the incoming page, then transitions between those. So, it’s not so much one page becoming another as much as it is the browser holding onto two images so it can animate one in while the other animates out. Jake says what’s happening behind the scene is a DOM structure is created out of pseudo-elements containing the page images:\n\n\n\n<transition-container>\n  <image-wrapper>\n    <outgoing-image />\n    <incoming-image />\n  </>\n</>\n\n\n\nWe can “screenshot” a specific element if we want to isolate it and apply a different animation from the rest of the page:\n\n\n\n.site-header {\n  page-transition-tag: site-header;\n  contain: paint;\n}\n\n\n\nAnd we get pseudo-elements we can hook into and assign custom @keyframe animations:\n\n\n\n<!-- ::page-transition=container(root)  -->\n<transition-container>\n  <!-- ::page-transition-image-wrapper(root)  -->\n  <image-wrapper>\n    <!-- ::page-transition-outgoing-image(root) -->\n    <outgoing-image />\n    <!-- ::page-transition-incoming-image(root) -->\n    <incoming-image />\n  </>\n</>\n\n\n\nDang, that’s clever as heck!\n\n\n\nIt’s also proof in the pudding of just how much HTML, CSS, and JavaScript continue to evolve and improve. So much so that Jeremy Keith suggests it’s high time we re-evaluate our past judgment of some technologies:\n\n\n\nIf you weren’t aware of changes over the past few years, it would be easy to still think that single page apps offer some unique advantages that in fact no longer hold true. […] But developers remain suspicious, still prefering to trust third-party libraries over native browser features. They made a decision about those libraries in the past. They evaluated the state of browser support in the past. I wish they would re-evaluate those decisions.\n\n\n\nThe ingredients for SPAs specifically:\n\n\n\nIn recent years in particular it feels like the web has come on in leaps and bounds: service workers, native JavaScript APIs, and an astonishing boost in what you can do with CSS. Most important of all, the interoperability between browsers is getting better and better. Universal support for new web standards arrives at a faster rate than ever before.\n\n\n\nHTML, CSS, and JavaScript: it’s still the best cocktail in town. Even if it takes a minute for it to catch up.\n\nSPAs, Shared Element Transitions, and Re-Evaluating Technology originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-06-01T14:12:25.000Z",
      "date_modified": "2022-06-01T14:12:25.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366068",
      "url": "https://css-tricks.com/just-how-long-should-alt-text-be/",
      "title": "Just How Long Should Alt Text Be?",
      "summary": "I teach a class over at the local college here in Long Beach and a majority of the content is hosted on the Canvas LMS so students can access it online. And, naturally, I want the content to be as …\n\nJust How Long Should Alt Text Be? originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>I teach a class over at the local college here in Long Beach and a majority of the content is hosted on the Canvas LMS so students can access it online. And, naturally, I want the content to be as accessible as possible, so thank goodness Canvas has <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility\" rel=\"noopener\">a11y</a> tooling built right into it.</p>\n\n\n\n<p>But it ain&#8217;t all that rosy. It makes assumptions like all other a11y tooling and adheres to guidelines that were programmed into it. It&#8217;s not like the <a href=\"https://www.w3.org/WAI/standards-guidelines/wcag/\" rel=\"noopener\">WCAG</a> is baked right in and updated when it updates.</p>\n\n\n\n<span id=\"more-366068\"></span>\n\n\n\n<p>The reason this is even on my mind is that Jeremy <a href=\"https://adactio.com/journal/19106\" rel=\"noopener\">yesterday</a> described his love for writing image descriptions:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>I enjoy writing <code>alt</code> text. I recently described how I updated my posting interface here on my own site to put a <code>textarea</code> for <code>alt</code> text front and centre for my notes with photos. Since then I’ve been enjoying the creative challenge of writing useful—but also evocative—<code>alt</code> text.</p></blockquote>\n\n\n\n<p>I buy into that! Writing <code>alt</code> text is a challenge that requires a delicate dance between the technical and the creative. It&#8217;s both an opportunity to make content more accessible and enhance the user experience.</p>\n\n\n\n<p>One of those programmed guidelines in the Canvas tool is a cap of 120 characters on <code>alt</code> text. Why 120? I dunno, I couldn&#8217;t find any supporting guideline or rule for that exact number. <a href=\"https://blog.hubspot.com/marketing/image-alt-text\" rel=\"noopener\">One answer</a> is that screen readers stop announcing text after 125 characters, but <a href=\"https://yatil.net/blog/there-is-no-character-limit-for-alt-text\" rel=\"noopener\">that&#8217;s apparently untrue</a>, at least today. The general advice for how long <code>alt</code> text should be comes in varying degrees:</p>\n\n\n\n<ul><li>Jake Archibald talks of length <a href=\"https://jakearchibald.com/2021/great-alt-text/\" rel=\"noopener\">in terms of emotion</a>. Detail is great, but too much detail might distort the focal point, which makes total sense.</li><li>Dave sees them as <a href=\"https://daverupert.com/2020/09/alt-attributes-like-paragraphs/\" rel=\"noopener\">short, succinct paragraphs</a>.</li><li>Carrie Fisher suggests a 150-character limit not because screen readers will truncate them but more as a mental note that maybe things are getting <em>too</em> descriptive.</li><li>Daniel Göransson says in <a href=\"https://axesslab.com/alt-texts/\" rel=\"noopener\">this 2017 guide</a> that it comes down to context and knowing when certain details of an image are worth additional explanation. But he generally errs on the side of conciseness.</li></ul>\n\n\n\n<p>So, how long should <code>alt</code> text be? The general consensus here is that there is no hard limit, but more of a contextual awareness of what purpose the image serves and adapting to it accordingly.</p>\n\n\n\n<p>Which gets me back to Jeremy&#8217;s article. He was writing <code>alt</code> text for a group of speaker headshots and realized the text was all starting to sound the same. He paused, thought about the experience, compared it to the experience of a sighted user, and created parity between them:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The more speakers were added to the line-up, the more I felt like I was repeating myself with the <code>alt</code> text. [&#8230;] The experience of a sighted person looking at a page full of speakers is that after a while the images kind of blend together. So if the <code>alt</code> text also starts to sound a bit repetitive after a while, maybe that’s not such a bad thing. A screen reader user would be getting an equivalent experience.</p></blockquote>\n\n\n\n<p>I dig that. So if you&#8217;re looking for a hard and fast rule on character counts, sorry to disappoint. Like so many other things, context is king and that&#8217;s the sort of thing that can&#8217;t be codified, or even <a href=\"https://www.a11yproject.com/posts/alternate-text-and-automation/\" rel=\"noopener\">automated for that matter</a>.</p>\n\n\n\n<p>And while we&#8217;re on the topic, just noticed that Twitter has UI to display <code>alt</code> text:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1023\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/twitter-alt-text.jpg?resize=1023%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-366120\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/twitter-alt-text.jpg?w=1023&amp;ssl=1 1023w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/twitter-alt-text.jpg?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/twitter-alt-text.jpg?resize=768%2C567&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Now if only there was more contrast between that text and the background&#8230; a11y is hard.</figcaption></figure>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/just-how-long-should-alt-text-be/\">Just How Long Should Alt Text Be?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "I teach a class over at the local college here in Long Beach and a majority of the content is hosted on the Canvas LMS so students can access it online. And, naturally, I want the content to be as accessible as possible, so thank goodness Canvas has a11y tooling built right into it.\n\n\n\nBut it ain’t all that rosy. It makes assumptions like all other a11y tooling and adheres to guidelines that were programmed into it. It’s not like the WCAG is baked right in and updated when it updates.\n\n\n\n\n\n\n\nThe reason this is even on my mind is that Jeremy yesterday described his love for writing image descriptions:\n\n\n\nI enjoy writing alt text. I recently described how I updated my posting interface here on my own site to put a textarea for alt text front and centre for my notes with photos. Since then I’ve been enjoying the creative challenge of writing useful—but also evocative—alt text.\n\n\n\nI buy into that! Writing alt text is a challenge that requires a delicate dance between the technical and the creative. It’s both an opportunity to make content more accessible and enhance the user experience.\n\n\n\nOne of those programmed guidelines in the Canvas tool is a cap of 120 characters on alt text. Why 120? I dunno, I couldn’t find any supporting guideline or rule for that exact number. One answer is that screen readers stop announcing text after 125 characters, but that’s apparently untrue, at least today. The general advice for how long alt text should be comes in varying degrees:\n\n\n\nJake Archibald talks of length in terms of emotion. Detail is great, but too much detail might distort the focal point, which makes total sense.Dave sees them as short, succinct paragraphs.Carrie Fisher suggests a 150-character limit not because screen readers will truncate them but more as a mental note that maybe things are getting too descriptive.Daniel Göransson says in this 2017 guide that it comes down to context and knowing when certain details of an image are worth additional explanation. But he generally errs on the side of conciseness.\n\n\n\nSo, how long should alt text be? The general consensus here is that there is no hard limit, but more of a contextual awareness of what purpose the image serves and adapting to it accordingly.\n\n\n\nWhich gets me back to Jeremy’s article. He was writing alt text for a group of speaker headshots and realized the text was all starting to sound the same. He paused, thought about the experience, compared it to the experience of a sighted user, and created parity between them:\n\n\n\nThe more speakers were added to the line-up, the more I felt like I was repeating myself with the alt text. […] The experience of a sighted person looking at a page full of speakers is that after a while the images kind of blend together. So if the alt text also starts to sound a bit repetitive after a while, maybe that’s not such a bad thing. A screen reader user would be getting an equivalent experience.\n\n\n\nI dig that. So if you’re looking for a hard and fast rule on character counts, sorry to disappoint. Like so many other things, context is king and that’s the sort of thing that can’t be codified, or even automated for that matter.\n\n\n\nAnd while we’re on the topic, just noticed that Twitter has UI to display alt text:\n\n\n\nNow if only there was more contrast between that text and the background… a11y is hard.\n\nJust How Long Should Alt Text Be? originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-05-27T14:25:39.000Z",
      "date_modified": "2022-05-27T14:25:39.000Z"
    },
    {
      "id": "https://css-tricks.com/?p=366107",
      "url": "https://css-tricks.com/beautify-github-profile/",
      "title": "Beautify GitHub Profile",
      "summary": "It wasn’t long ago that Nick Sypteras showed us how to make custom badges for a GitHub repo. Well, Reza Shakeri put Beautify GitHub Profile together and it’s a huuuuuuge repo of different badges that pulls lots of examples …\n\nBeautify GitHub Profile originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>It wasn&#8217;t long ago that Nick Sypteras showed us how to <a href=\"https://css-tricks.com/adding-custom-github-badges-to-your-repo/\">make custom badges for a GitHub repo</a>. Well, <a href=\"http://barnamenevisi.io/\" rel=\"noopener\">Reza Shakeri</a> put <a href=\"https://github.com/rzashakeri/beautify-github-profile\" rel=\"noopener\">Beautify GitHub Profile </a>together and it&#8217;s a huuuuuuge repo of different badges that pulls lots of examples together with direct links to the repos you can use to create them.</p>\n\n\n\n<p>And it doesn&#8217;t stop there! If you&#8217;re looking for some sort of embeddable widget, there&#8217;s everything from GitHub repo stats and contribution visualizations, all the way to embedded PageSpeed Insights and Spotify playlists. Basically, a big ol&#8217; spot to get some inspiration.</p>\n\n\n\n<span id=\"more-366107\"></span>\n\n\n\n<p>Some things are simply wild!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1280\" height=\"850\" src=\"https://css-tricks.com/wp-content/uploads/2022/05/profile-green-animate.svg\" alt=\"3D chart of commit history from the Beautify GitHub Profile repo.\" class=\"wp-image-366112\"/><figcaption>I bet <a href=\"https://css-tricks.com/author/jheytompkins/\">Jhey</a> would like to get his hands on those <a href=\"https://css-tricks.com/css-in-3d-learning-to-think-in-cubes-instead-of-boxes/\">cuboids</a>!</figcaption></figure>\n\n\n\n<p>Just scrolling through the repo gives me flashes of the GeoCities days, though. All it needs is a sparkly unicorn and a tiled background image to complete the outfit. &#x1f454;</p>\n<p><a href=\"https://github.com/rzashakeri/beautify-github-profile\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/beautify-github-profile/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/beautify-github-profile/\">Beautify GitHub Profile</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "It wasn’t long ago that Nick Sypteras showed us how to make custom badges for a GitHub repo. Well, Reza Shakeri put Beautify GitHub Profile together and it’s a huuuuuuge repo of different badges that pulls lots of examples together with direct links to the repos you can use to create them.\n\n\n\nAnd it doesn’t stop there! If you’re looking for some sort of embeddable widget, there’s everything from GitHub repo stats and contribution visualizations, all the way to embedded PageSpeed Insights and Spotify playlists. Basically, a big ol’ spot to get some inspiration.\n\n\n\n\n\n\n\nSome things are simply wild!\n\n\n\nI bet Jhey would like to get his hands on those cuboids!\n\n\n\nJust scrolling through the repo gives me flashes of the GeoCities days, though. All it needs is a sparkly unicorn and a tiled background image to complete the outfit. 👔\nTo Shared Link — Permalink on CSS-Tricks\nBeautify GitHub Profile originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-05-26T18:13:28.000Z",
      "date_modified": "2022-05-26T18:13:28.000Z"
    }
  ],
  "description": "Tips, Tricks, and Techniques on using Cascading Style Sheets.",
  "home_page_url": "https://css-tricks.com",
  "icon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=32%2C32&ssl=1",
  "_extGeneratorVersion": "0.0.3"
}