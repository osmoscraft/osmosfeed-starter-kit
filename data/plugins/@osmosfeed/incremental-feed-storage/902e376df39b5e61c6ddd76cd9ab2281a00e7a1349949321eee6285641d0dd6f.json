{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Codrops",
  "feed_url": "https://tympanus.net/codrops/feed/",
  "items": [
    {
      "id": "https://tympanus.net/codrops/?p=58318",
      "url": "https://tympanus.net/codrops/2022/01/12/pixel-distortion-effect-with-three-js/",
      "title": "Pixel Distortion Effect with Three.js",
      "summary": "An interactive WebGL pixel distortion effect with lots of possibilities based on the effect seen on the website for \"Infinite Bad Guy\".\nThe post Pixel Distortion Effect with Three.js appeared first on Codrops.",
      "content_html": "<p>The creative coder’s dream is to rule pixels on their screen. To arrange them in beautiful patterns and do whatever you want with them. Well, this is exactly what we are going to do with this demo. Let&#8217;s distort and rule pixels with the power of our mouse cursor, just like the developers of the amazing <a href=\"https://billie.withyoutube.com/\">Infinite Bad Guy website</a> did!</p>\n\n\n\n<h2>Setup</h2>\n\n\n\n<p>The scene is the usual, we just create a fullscreen image on a screen, so it preserves the aspect ratio, and has its “background-size: cover” applied through the glsl shader. In the end, we have a geometry stretched for the whole viewport, and a little shader like this:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">vec2 newUV = (vUv - vec2(0.5))*aspect + vec2(0.5);\n    gl_FragColor = texture2D(uTexture,newUV);\n    </pre>\n\n\n\n<p>The whole thing just shows the image, no distortions yet.</p>\n\n\n\n<h2>The Magnificent Data Texture</h2>\n\n\n\n<p>I hope by this time you know that any texture in WebGL is basically just numbers corresponding to each pixel’s color.</p>\n\n\n\n<p>Three.js has a specific API to create your own textures pixel by pixel. It is called, no surprise, <a href=\"https://threejs.org/docs/#api/en/textures/DataTexture\">DataTexture</a>. So let&#8217;s create another texture for our demo, with random numbers:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">    const size = rows * columns;\n    const data = new Float32Array(3 * size);\n\n    for(let i = 0; i &lt; size; i++) {\n          const stride = i * 3;\n          let r = Math.random() * 255 ;\n          let r1 = Math.random() * 255 ;\n\n          data[stride] = r; // red, and also X\n          data[stride + 1] = r1; // green, and also Y\n          data[stride + 2] = 0; // blue\n        }\n    this.texture = new THREE.DataTexture(data, width, height, THREE.RGBFormat, THREE.FloatType);\n    </pre>\n\n\n\n<p>This is heavily based on the default example from the documentation. The only difference is, we are using FloatType texture, so we are not bound to only integer numbers. One of the interesting things is, that numbers should be between 0 and 255, even though, in the GLSL it will be 0..1 range anyway. You should just keep that in mind, so you are using correct number ranges.</p>\n\n\n\n<p>What is also an interesting idea, is that GLSL doesn&#8217;t really care what the numbers mean in your data structures. It could be both color.rgb, and color.xyz. And that&#8217;s precisely what we will use here, we don&#8217;t care about exact color of this texture, we will use it as a distortion for our demo! Just as a nice data structure for GLSL.</p>\n\n\n\n<p>But, just to understand better, this is what the texture will look like when you want to preview it:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"494\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/grid-800x494.jpg\" alt=\"\" class=\"wp-image-58320\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/grid-800x494.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/grid-400x247.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/grid-768x475.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/grid.jpg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>You see those big rectangles because i picked something like 25&#215;35 DataTexture size, which is really low-res.<br>Also, it has colors because im using two different random numbers for XY(Red-Green) variables, which results in this.</p>\n\n\n\n<p>So now, we could already use this texture as a distortion in our fragment shader:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">    vec4 color = texture2D(uTexture,newUV);\n    vec4 offset = texture2D(uDataTexture,vUv);\n    // we are distorting UVs with new texture values\n    gl_FragColor = texture2D(uTexture,newUV - 0.02*offset.rg);\n    </pre>\n\n\n\n<h2>The Mouse and its power</h2>\n\n\n\n<p>So now, let’s make it dynamic! We will need a couple of things. First, we need the mouse position and speed. And also, the mouse radius, meaning, at what distance would the mouse distort our image.</p>\n\n\n\n<p>A short explanation: On each step of the animation, I will loop through my grid cells aka pixels of DataTexture. And assign some values based on mouse position and speed. Second, im going to relax the distortion. This needs to be done, if the user stops moving mouse, the distortion should come to 0.</p>\n\n\n\n<p>So, now the code looks like this, simplified a bit, for better understanding the concept:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">    let data = DataTexture.image.data;\n    // loop through all the pixels of DataTexture\n    for (let i = 0; i &lt; rows; i++) {\n    for (let j = 0; j &lt; cols; j++) {\n        // get distance between mouse, and current DataTexture pixel\n      let distance = distanceBetween(mouse, [i,j])\n      if (distance &lt; maxDistance) {\n\n        let index = 3 * (i + this.size * j); // get the pixel coordinate on screen\n        data[index] = this.mouse.vX ; // mouse speed\n        data[index + 1] =  this.mouse.vY ; // mouse speed\n      }\n    }\n    // slowly move system towards 0 distortion\n    for (let i = 0; i &lt; data.length; i += 3) {\n      data[i] *= 0.9\n      data[i + 1] *= 0.9\n    }\n    DataTexture.needsUpdate = true;</pre>\n\n\n\n<p>A couple of things are added to make it look better, but the concept is here. If you ever worked with particle systems, this is exactly that concept, except our particles never move, we just change some values of the particles (distortion inside each big pixel).</p>\n\n\n\n<h2>Result</h2>\n\n\n\n<p>I left the settings open in the <a href=\"http://tympanus.net/Development/DistortedPixels/index4.html\">last demo</a>, so you can play with parameters and come up with your own unique feel of the animation. Let me know what it inspired you to create!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"550\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/result-800x550.jpg\" alt=\"\" class=\"wp-image-58321\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/result-800x550.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/result-400x275.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/result-768x528.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/result.jpg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2022/01/12/pixel-distortion-effect-with-three-js/\">Pixel Distortion Effect with Three.js</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>",
      "content_text": "The creative coder’s dream is to rule pixels on their screen. To arrange them in beautiful patterns and do whatever you want with them. Well, this is exactly what we are going to do with this demo. Let’s distort and rule pixels with the power of our mouse cursor, just like the developers of the amazing Infinite Bad Guy website did!\n\n\n\nSetup\n\n\n\nThe scene is the usual, we just create a fullscreen image on a screen, so it preserves the aspect ratio, and has its “background-size: cover” applied through the glsl shader. In the end, we have a geometry stretched for the whole viewport, and a little shader like this:\n\n\n\nvec2 newUV = (vUv - vec2(0.5))*aspect + vec2(0.5);\n    gl_FragColor = texture2D(uTexture,newUV);\n    \n\n\n\nThe whole thing just shows the image, no distortions yet.\n\n\n\nThe Magnificent Data Texture\n\n\n\nI hope by this time you know that any texture in WebGL is basically just numbers corresponding to each pixel’s color.\n\n\n\nThree.js has a specific API to create your own textures pixel by pixel. It is called, no surprise, DataTexture. So let’s create another texture for our demo, with random numbers:\n\n\n\n    const size = rows * columns;\n    const data = new Float32Array(3 * size);\n\n    for(let i = 0; i < size; i++) {\n          const stride = i * 3;\n          let r = Math.random() * 255 ;\n          let r1 = Math.random() * 255 ;\n\n          data[stride] = r; // red, and also X\n          data[stride + 1] = r1; // green, and also Y\n          data[stride + 2] = 0; // blue\n        }\n    this.texture = new THREE.DataTexture(data, width, height, THREE.RGBFormat, THREE.FloatType);\n    \n\n\n\nThis is heavily based on the default example from the documentation. The only difference is, we are using FloatType texture, so we are not bound to only integer numbers. One of the interesting things is, that numbers should be between 0 and 255, even though, in the GLSL it will be 0..1 range anyway. You should just keep that in mind, so you are using correct number ranges.\n\n\n\nWhat is also an interesting idea, is that GLSL doesn’t really care what the numbers mean in your data structures. It could be both color.rgb, and color.xyz. And that’s precisely what we will use here, we don’t care about exact color of this texture, we will use it as a distortion for our demo! Just as a nice data structure for GLSL.\n\n\n\nBut, just to understand better, this is what the texture will look like when you want to preview it:\n\n\n\n\n\n\n\nYou see those big rectangles because i picked something like 25×35 DataTexture size, which is really low-res.Also, it has colors because im using two different random numbers for XY(Red-Green) variables, which results in this.\n\n\n\nSo now, we could already use this texture as a distortion in our fragment shader:\n\n\n\n    vec4 color = texture2D(uTexture,newUV);\n    vec4 offset = texture2D(uDataTexture,vUv);\n    // we are distorting UVs with new texture values\n    gl_FragColor = texture2D(uTexture,newUV - 0.02*offset.rg);\n    \n\n\n\nThe Mouse and its power\n\n\n\nSo now, let’s make it dynamic! We will need a couple of things. First, we need the mouse position and speed. And also, the mouse radius, meaning, at what distance would the mouse distort our image.\n\n\n\nA short explanation: On each step of the animation, I will loop through my grid cells aka pixels of DataTexture. And assign some values based on mouse position and speed. Second, im going to relax the distortion. This needs to be done, if the user stops moving mouse, the distortion should come to 0.\n\n\n\nSo, now the code looks like this, simplified a bit, for better understanding the concept:\n\n\n\n    let data = DataTexture.image.data;\n    // loop through all the pixels of DataTexture\n    for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n        // get distance between mouse, and current DataTexture pixel\n      let distance = distanceBetween(mouse, [i,j])\n      if (distance < maxDistance) {\n\n        let index = 3 * (i + this.size * j); // get the pixel coordinate on screen\n        data[index] = this.mouse.vX ; // mouse speed\n        data[index + 1] =  this.mouse.vY ; // mouse speed\n      }\n    }\n    // slowly move system towards 0 distortion\n    for (let i = 0; i < data.length; i += 3) {\n      data[i] *= 0.9\n      data[i + 1] *= 0.9\n    }\n    DataTexture.needsUpdate = true;\n\n\n\nA couple of things are added to make it look better, but the concept is here. If you ever worked with particle systems, this is exactly that concept, except our particles never move, we just change some values of the particles (distortion inside each big pixel).\n\n\n\nResult\n\n\n\nI left the settings open in the last demo, so you can play with parameters and come up with your own unique feel of the animation. Let me know what it inspired you to create!\n\n\n\n\nThe post Pixel Distortion Effect with Three.js appeared first on Codrops.",
      "date_published": "2022-01-12T11:19:22.000Z",
      "date_modified": "2022-01-12T11:19:22.000Z",
      "_plugin": {
        "pageFilename": "21d025622963436203fd8628eb7d14505a779e77a57bda99ba7e36013dae3dce.html"
      }
    },
    {
      "id": "https://tympanus.net/codrops/?p=58298",
      "url": "https://tympanus.net/codrops/2022/01/11/10-best-wordpress-themes-to-use-in-2022/",
      "title": "10 Best WordPress Themes to Use in 2022",
      "summary": "A collection of top WordPress themes going into 2022 to help you find the perfect fit for your project.\nThe post 10 Best WordPress Themes to Use in 2022 appeared first on Codrops.",
      "content_html": "<p>The online world is increasing exponentially, or so it seems, as roughly one thousand new websites come online every hour of the day.</p>\n\n\n\n<p>No matter the size of your business niche, your competition is only going to increase with time. An attractive website won’t be as productive the future as it may have been in the past.</p>\n\n\n\n<p>And if your website isn’t fully responsive it won’t be very productive at all, no matter how attractive it is.</p>\n\n\n\n<p>When we say fully responsive, we mean flawlessly responsive. When you choose one of the best WordPress themes to build or remake a website you need to know how to find one that will get the job done.</p>\n\n\n\n<p>With thousands of popular WordPress themes to choose from, finding the right one could take time. That is precisely why we’ve compiled this list of the top WordPress themes going into 2022. It’s designed to save you time and help you make the right choice.</p>\n\n\n\n<h2><strong>1. </strong><a href=\"http://be-theme.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"sponsored nofollow\"><strong>BeTheme – <strong>The Biggest Multipurpose WordPress Theme with 650+ pre-built websites</strong></strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"http://be-theme.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-800x332.png\" alt=\"\" class=\"wp-image-58299\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-800x332.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-400x166.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-768x319.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image.png 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>BeTheme is the biggest WordPress and WooCommerce theme of them all with its more than 650 pre-built websites, tons of design aids and options in its 40+ core features, and its more than 240,000 customers.</p>\n\n\n\n<p>A BeTheme-built website will be flawlessly responsive, SEO friendly, and super attractive as well.</p>\n\n\n\n<ul><li>Be’s 650+ pre-built websites are responsive, customizable, and can be configured to address any website type, style, or niche</li><li>The Live Builder is fast, it features an ergonomically-designed UI, and it has incredibly powerful page building capabilities that include live content editing, and autosave, update, and backup options</li><li>The WooCommerce Builder features template-building tools, Single Product layouts, product wish lists, carts, and other customer-centric functions and elements</li><li>Other tools include a Live Search function and Muffin and Header builders, plus BeTheme is Mobile-ready and Elementor-ready.</li></ul>\n\n\n\n<p>BeTheme is always kept up to date and offers free lifetime updates. Click on the banner to learn more about this powerful website-building tool.</p>\n\n\n\n<h2><strong>2. </strong><a href=\"https://total.wpexplorer.com/?utm_source=baw&amp;utm_medium=blog&amp;utm_campaign=top152022\" rel=\"sponsored nofollow\"><strong>Total WordPress Theme</strong></a><strong>&nbsp;</strong></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://total.wpexplorer.com/?utm_source=baw&amp;utm_medium=blog&amp;utm_campaign=top152022\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-800x332.jpeg\" alt=\"\" class=\"wp-image-58300\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>As its name implies, Total is a complete WordPress theme that enables you to create stunning, fully responsive WordPress-powered websites with ease.</p>\n\n\n\n<p>Totals’s 48,000+ users have easy access to the following:</p>\n\n\n\n<ul><li>An extended version of the popular WPBakery page builder with more than 100 builder elements to use in creating layouts</li><li>A new template library with 90+ quick-start section templates and 45+ quick import demos</li><li>Live customizer settings to change colors, fonts, widths and other main settings plus a dynamic template function for creating custom layouts for post types, advanced page setting features, and more</li><li>Local scroll, full screen rows and sliders for building impressive one page sites and landing pages</li><li>Total is developer-friendly with a library of action hooks, custom code snippets, filters, and more</li></ul>\n\n\n\n<p>Click on the banner to learn more about everything Total can accomplish for you.</p>\n\n\n\n<h2><strong>3. </strong><a href=\"https://avada-theme.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"sponsored nofollow\"><strong>Avada Theme</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large wp-img-border\"><a href=\"https://avada-theme.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-800x332.jpeg\" alt=\"\" class=\"wp-image-58301\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>Avada has become the #1 bestselling popular theme of all time for several reasons, the main one being that it allows you to design and build anything that goes through your mind, build it the way you want it, and build it without writing a single line of code.&nbsp;</p>\n\n\n\n<p>This website-building machine is built around three core pillars: Fusion Theme Options, Fusion Page Options, and Fusion Builder. What these three features offer will make you feel like the proverbial kid in the candy store.</p>\n\n\n\n<p>A few examples –</p>\n\n\n\n<ul><li>40+ one-click importable demos and 50+ design elements with hundreds of options</li><li>A Drag and Drop page builder</li><li>$200 worth of tools and premium plugins</li><li>A tried and tested responsive framework that adapts to <em>every </em>screen size</li><li>WooCommerce design tools</li></ul>\n\n\n\n<p>Click on the banner to find out more about what Avada’s 450,000+ satisfied customers already know.</p>\n\n\n\n<h2><strong>4. </strong><a href=\"https://codex-themes.com/thegem/meta-splash/?utm_source=baw&amp;utm_medium=post&amp;utm_campaign=top-themes-2022\" rel=\"sponsored nofollow\"><strong>TheGem – Creative Multi-Purpose &amp; WooCommerce WordPress Theme</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://codex-themes.com/thegem/meta-splash/?utm_source=baw&amp;utm_medium=post&amp;utm_campaign=top-themes-2022\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-2-800x332.jpeg\" alt=\"\" class=\"wp-image-58302\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-2-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-2-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-2-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-2.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>This ThemeForest best seller offers such an amazing multiplicity of website-building tools that it has been called the Swiss Army knife of WordPress Themes.</p>\n\n\n\n<ul><li>For starters, TheGem theme features 400+ customizable creative pre-built one page and multipage websites and templates plus 300+ unique pre-made page sections, all insertable and combinable with just few clicks&nbsp;</li><li>For professionals, TheGem theme offers extended set of customization tools allowing to achieve any imaginable design results in a very fast and easy way&nbsp;</li><li>TheGem is fully compatible with and available for WPBakery and Elementor page builders and features extended WooCommerce site-building tools as well</li><li>It offers very high performance, fast loading speed and includes premium plugins like WP Rocket and Revolution Slider &#8211; all in one package&nbsp;</li></ul>\n\n\n\n<p>TheGem is 5-star rated and trusted by 60,000 customers.</p>\n\n\n\n<h2><strong>5. </strong><a href=\"https://undsgn.com/uncode/?utm_source=adv&amp;utm_medium=baw&amp;utm_campaign=topwpthemes22a\" rel=\"sponsored nofollow\"><strong><strong>Uncode &#8211; Creative &amp; WooCommerce WordPress Theme</strong></strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://undsgn.com/uncode/?utm_source=adv&amp;utm_medium=baw&amp;utm_campaign=topwpthemes22a\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-800x332.png\" alt=\"\" class=\"wp-image-58305\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-800x332.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-400x166.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-768x319.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1.png 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>Uncode is a pixel-perfect creative theme that lets you create websites that exhibit the same characteristics that are embedded in the theme itself.</p>\n\n\n\n<ul><li>It is an excellent choice for building WooCommerce, portfolio, magazine, and blog sites</li><li>Key components include 450+ Wireframes section templates, a juiced-up Frontend Editor, and the WooCommerce Custom Builder</li></ul>\n\n\n\n<p>Uncode has enjoyed more than 90.000 sales to date.</p>\n\n\n\n<h2><strong>6.</strong><a href=\"https://woodmart.xtemos.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"sponsored nofollow\"><strong> WoodMart</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://woodmart.xtemos.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-3-800x332.jpeg\" alt=\"\" class=\"wp-image-58303\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-3-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-3-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-3-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-3.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>The Woodmart WooCommerce multipurpose theme is an excellent choice for creating any type of corporate or business-related website.</p>\n\n\n\n<p>With its unlimited customizations, Woodmart is the best-rated eCommerce theme on ThemeForest. Among its many site-building features you’ll find &#8211;</p>\n\n\n\n<ul><li>75+ pre-made websites, a library of 400+ high-quality templates, and multiple Product and Shop options</li><li>A full drag and drop builder, an intuitive setup wizard, and full AJAX shop filters</li></ul>\n\n\n\n<p>Woodmart is performance and SEO optimized.</p>\n\n\n\n<h2><a href=\"https://reytheme.com/?utm_source=bm012022&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"sponsored nofollow\"><strong>7. Rey Theme for WooCommerce</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://reytheme.com/?utm_source=bm012022&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-4-800x332.jpeg\" alt=\"\" class=\"wp-image-58304\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-4-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-4-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-4-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-4.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>With Rey you can take your design efforts to the next level thanks to this theme’s powerful integrations into WooCommerce, Elementor, WordPress’s sophisticated engine itself.</p>\n\n\n\n<p>Features include &#8211;</p>\n\n\n\n<ul><li>Ajax navigation, filtering, search, and presentation capabilities</li><li>Powerful Elementor extensions that provide unlimited flexibility</li><li>Google and Adobe fonts integration</li></ul>\n\n\n\n<p>Rey is performance oriented, SEO and developer friendly, and (naturally) responsive.</p>\n\n\n\n<h2><a href=\"https://xstore.8theme.com/\" rel=\"sponsored nofollow\"><strong>8. XStore &#8211; Best Premium WordPress WooCommerce Theme for eCommerce</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://xstore.8theme.com/\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-5-800x332.jpeg\" alt=\"\" class=\"wp-image-58306\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-5-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-5-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-5-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-5.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>You can build virtually any type of online shop when you have a ton of tools and design options to work with; exactly what XStore provides.</p>\n\n\n\n<p>Features include –</p>\n\n\n\n<ul><li>Full support for Elementor and WPBakery page builders, a Header builder, and a Single Product page builder</li><li>Design aids include 500+ pre-built blocks, 100+ ready-to-customize shops, $500 worth of premium plugins, and a Live Ajax theme option</li><li>Product options including product hovers and 360 degree product view</li></ul>\n\n\n\n<h2><strong>9. </strong><a href=\"https://bit.ly/30Qsoh2\" rel=\"sponsored nofollow\"><strong>Impeka – Creative Multipurpose WordPress Theme</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://bit.ly/30Qsoh2\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-6-800x332.jpeg\" alt=\"\" class=\"wp-image-58307\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-6-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-6-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-6-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-6.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>Impeka guarantees your website will be fast, optimized for SEO, and fully responsive.</p>\n\n\n\n<p>Impeka is WooCommerce ready, and you don’t need any design or coding skills to work with it.</p>\n\n\n\n<p>You get to choose among 3 popular page builders –</p>\n\n\n\n<ul><li>WPBakery with 53+ handcrafted elements</li><li>Elementor with 50+ handcrafted widgets</li><li>Gutenberg with 10 handcrafted blocks</li></ul>\n\n\n\n<p>Impeka is ideal for beginners and full of potential for advanced users.</p>\n\n\n\n<h2><strong>10. </strong><a href=\"http://litho.themezaa.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"sponsored nofollow\"><strong>Litho – Multipurpose Elementor WordPress Theme</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"http://litho.themezaa.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-7-800x332.jpeg\" alt=\"\" class=\"wp-image-58308\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-7-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-7-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-7-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-7.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>While Litho can be used to create virtually any type of website, it is especially suited for building portfolio, blog, eCommerce, and business niche sites.</p>\n\n\n\n<p>Litho’s site-building features include –</p>\n\n\n\n<ul><li>The Slider Revolution premium plugin</li><li>Cool selections of home pages, templates, and creative design elements</li><li>Fully compatible and built with Elementor, the world’s #1 page builder</li></ul>\n\n\n\n<p>Litho also gives your site fast loading speeds and healthy SEO results.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Existing cool WordPress themes number in the millions. Unless you have plenty of time to spare, you don’t want to get involved in searching for the best fit for your needs.</p>\n\n\n\n<p>You don’t want to “take a chance” either.</p>\n\n\n\n<p>The best approach is to leave it up to the experts to determine what the top WordPress themes are as we enter 2022. That is what we’ve done here. It may take some thought to find the best theme to fit your needs, but there’s not a bad or wrong choice in the bunch.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2022/01/11/10-best-wordpress-themes-to-use-in-2022/\">10 Best WordPress Themes to Use in 2022</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>",
      "content_text": "The online world is increasing exponentially, or so it seems, as roughly one thousand new websites come online every hour of the day.\n\n\n\nNo matter the size of your business niche, your competition is only going to increase with time. An attractive website won’t be as productive the future as it may have been in the past.\n\n\n\nAnd if your website isn’t fully responsive it won’t be very productive at all, no matter how attractive it is.\n\n\n\nWhen we say fully responsive, we mean flawlessly responsive. When you choose one of the best WordPress themes to build or remake a website you need to know how to find one that will get the job done.\n\n\n\nWith thousands of popular WordPress themes to choose from, finding the right one could take time. That is precisely why we’ve compiled this list of the top WordPress themes going into 2022. It’s designed to save you time and help you make the right choice.\n\n\n\n1. BeTheme – The Biggest Multipurpose WordPress Theme with 650+ pre-built websites\n\n\n\n\n\n\n\nBeTheme is the biggest WordPress and WooCommerce theme of them all with its more than 650 pre-built websites, tons of design aids and options in its 40+ core features, and its more than 240,000 customers.\n\n\n\nA BeTheme-built website will be flawlessly responsive, SEO friendly, and super attractive as well.\n\n\n\nBe’s 650+ pre-built websites are responsive, customizable, and can be configured to address any website type, style, or nicheThe Live Builder is fast, it features an ergonomically-designed UI, and it has incredibly powerful page building capabilities that include live content editing, and autosave, update, and backup optionsThe WooCommerce Builder features template-building tools, Single Product layouts, product wish lists, carts, and other customer-centric functions and elementsOther tools include a Live Search function and Muffin and Header builders, plus BeTheme is Mobile-ready and Elementor-ready.\n\n\n\nBeTheme is always kept up to date and offers free lifetime updates. Click on the banner to learn more about this powerful website-building tool.\n\n\n\n2. Total WordPress Theme \n\n\n\n\n\n\n\nAs its name implies, Total is a complete WordPress theme that enables you to create stunning, fully responsive WordPress-powered websites with ease.\n\n\n\nTotals’s 48,000+ users have easy access to the following:\n\n\n\nAn extended version of the popular WPBakery page builder with more than 100 builder elements to use in creating layoutsA new template library with 90+ quick-start section templates and 45+ quick import demosLive customizer settings to change colors, fonts, widths and other main settings plus a dynamic template function for creating custom layouts for post types, advanced page setting features, and moreLocal scroll, full screen rows and sliders for building impressive one page sites and landing pagesTotal is developer-friendly with a library of action hooks, custom code snippets, filters, and more\n\n\n\nClick on the banner to learn more about everything Total can accomplish for you.\n\n\n\n3. Avada Theme\n\n\n\n\n\n\n\nAvada has become the #1 bestselling popular theme of all time for several reasons, the main one being that it allows you to design and build anything that goes through your mind, build it the way you want it, and build it without writing a single line of code. \n\n\n\nThis website-building machine is built around three core pillars: Fusion Theme Options, Fusion Page Options, and Fusion Builder. What these three features offer will make you feel like the proverbial kid in the candy store.\n\n\n\nA few examples –\n\n\n\n40+ one-click importable demos and 50+ design elements with hundreds of optionsA Drag and Drop page builder$200 worth of tools and premium pluginsA tried and tested responsive framework that adapts to every screen sizeWooCommerce design tools\n\n\n\nClick on the banner to find out more about what Avada’s 450,000+ satisfied customers already know.\n\n\n\n4. TheGem – Creative Multi-Purpose & WooCommerce WordPress Theme\n\n\n\n\n\n\n\nThis ThemeForest best seller offers such an amazing multiplicity of website-building tools that it has been called the Swiss Army knife of WordPress Themes.\n\n\n\nFor starters, TheGem theme features 400+ customizable creative pre-built one page and multipage websites and templates plus 300+ unique pre-made page sections, all insertable and combinable with just few clicks For professionals, TheGem theme offers extended set of customization tools allowing to achieve any imaginable design results in a very fast and easy way TheGem is fully compatible with and available for WPBakery and Elementor page builders and features extended WooCommerce site-building tools as wellIt offers very high performance, fast loading speed and includes premium plugins like WP Rocket and Revolution Slider – all in one package \n\n\n\nTheGem is 5-star rated and trusted by 60,000 customers.\n\n\n\n5. Uncode – Creative & WooCommerce WordPress Theme\n\n\n\n\n\n\n\nUncode is a pixel-perfect creative theme that lets you create websites that exhibit the same characteristics that are embedded in the theme itself.\n\n\n\nIt is an excellent choice for building WooCommerce, portfolio, magazine, and blog sitesKey components include 450+ Wireframes section templates, a juiced-up Frontend Editor, and the WooCommerce Custom Builder\n\n\n\nUncode has enjoyed more than 90.000 sales to date.\n\n\n\n6. WoodMart\n\n\n\n\n\n\n\nThe Woodmart WooCommerce multipurpose theme is an excellent choice for creating any type of corporate or business-related website.\n\n\n\nWith its unlimited customizations, Woodmart is the best-rated eCommerce theme on ThemeForest. Among its many site-building features you’ll find –\n\n\n\n75+ pre-made websites, a library of 400+ high-quality templates, and multiple Product and Shop optionsA full drag and drop builder, an intuitive setup wizard, and full AJAX shop filters\n\n\n\nWoodmart is performance and SEO optimized.\n\n\n\n7. Rey Theme for WooCommerce\n\n\n\n\n\n\n\nWith Rey you can take your design efforts to the next level thanks to this theme’s powerful integrations into WooCommerce, Elementor, WordPress’s sophisticated engine itself.\n\n\n\nFeatures include –\n\n\n\nAjax navigation, filtering, search, and presentation capabilitiesPowerful Elementor extensions that provide unlimited flexibilityGoogle and Adobe fonts integration\n\n\n\nRey is performance oriented, SEO and developer friendly, and (naturally) responsive.\n\n\n\n8. XStore – Best Premium WordPress WooCommerce Theme for eCommerce\n\n\n\n\n\n\n\nYou can build virtually any type of online shop when you have a ton of tools and design options to work with; exactly what XStore provides.\n\n\n\nFeatures include –\n\n\n\nFull support for Elementor and WPBakery page builders, a Header builder, and a Single Product page builderDesign aids include 500+ pre-built blocks, 100+ ready-to-customize shops, $500 worth of premium plugins, and a Live Ajax theme optionProduct options including product hovers and 360 degree product view\n\n\n\n9. Impeka – Creative Multipurpose WordPress Theme\n\n\n\n\n\n\n\nImpeka guarantees your website will be fast, optimized for SEO, and fully responsive.\n\n\n\nImpeka is WooCommerce ready, and you don’t need any design or coding skills to work with it.\n\n\n\nYou get to choose among 3 popular page builders –\n\n\n\nWPBakery with 53+ handcrafted elementsElementor with 50+ handcrafted widgetsGutenberg with 10 handcrafted blocks\n\n\n\nImpeka is ideal for beginners and full of potential for advanced users.\n\n\n\n10. Litho – Multipurpose Elementor WordPress Theme\n\n\n\n\n\n\n\nWhile Litho can be used to create virtually any type of website, it is especially suited for building portfolio, blog, eCommerce, and business niche sites.\n\n\n\nLitho’s site-building features include –\n\n\n\nThe Slider Revolution premium pluginCool selections of home pages, templates, and creative design elementsFully compatible and built with Elementor, the world’s #1 page builder\n\n\n\nLitho also gives your site fast loading speeds and healthy SEO results.\n\n\n\n\n\n\n\nExisting cool WordPress themes number in the millions. Unless you have plenty of time to spare, you don’t want to get involved in searching for the best fit for your needs.\n\n\n\nYou don’t want to “take a chance” either.\n\n\n\nThe best approach is to leave it up to the experts to determine what the top WordPress themes are as we enter 2022. That is what we’ve done here. It may take some thought to find the best theme to fit your needs, but there’s not a bad or wrong choice in the bunch.\nThe post 10 Best WordPress Themes to Use in 2022 appeared first on Codrops.",
      "date_published": "2022-01-11T09:36:45.000Z",
      "date_modified": "2022-01-11T09:36:45.000Z",
      "_plugin": {
        "pageFilename": "818b8cac642cb0298bd110311547f536038030e15f91fe0cb5ddf21707bf59f0.html"
      }
    },
    {
      "id": "https://tympanus.net/codrops/?p=58116",
      "url": "https://tympanus.net/codrops/2022/01/05/crafting-scroll-based-animations-in-three-js/",
      "title": "Crafting Scroll Based Animations in Three.js",
      "summary": "Learn how to create a scroll based animation in WebGL with Three.js.\nThe post Crafting Scroll Based Animations in Three.js appeared first on Codrops.",
      "content_html": "<p>Having an experience composed of only WebGL is great, but sometimes, you&#8217;ll want the experience to be part of a classic website.</p>\n\n\n\n<p>The experience can be in the background to add some beauty to the page, but then, you&#8217;ll want that experience to integrate properly with the HTML content.</p>\n\n\n\n<p>In this tutorial, we will:</p>\n\n\n\n<ul><li>learn how to use Three.js as a background of a classic HTML page</li><li>make the camera translate to follow the scroll</li><li>discover some tricks to make the scrolling more immersive</li><li>add a cool parallax effect based on the cursor position</li><li>trigger some animations when arriving at the corresponding sections</li></ul>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/00-1.mp4\"></video><figcaption><a href=\"https://threejs-journey.com/resources/codrops/threejs-scroll-based-animation/\" target=\"_blank\" rel=\"noreferrer noopener\">See the live version</a></figcaption></figure>\n\n\n\n<div class=\"wp-block-group box-offer\"><div class=\"wp-block-group__inner-container\">\n<p><strong>This tutorial is part of the 39 lessons available in the <a href=\"https://threejs-journey.com/\">Three.js Journey</a> course.</strong></p>\n\n\n\n<p><a href=\"https://threejs-journey.com/\">Three.js Journey</a> is the ultimate course to learn WebGL with Three.js. Once you&#8217;ve subscribed, you get access to 45 hours of videos also available as text version. First, you&#8217;ll start with the basics like the reasons to use Three.js and how to setup a simple scene. Then, you&#8217;ll start animating it, creating cool environments, interacting with it, creating your own models in Blender. To finish, you will learn advanced techniques like physics, shaders, realistic renders, code structuring, baking, etc.</p>\n\n\n\n<p>As a member of the Three.js Journey community, you will also get access to a members-only Discord server.</p>\n\n\n\n<p><strong>Use the code <a href=\"https://threejs-journey.com/join/codrops1\">CODROPS1</a> for a 20% discount.</strong></p>\n</div></div>\n\n\n\n<h2>Starter</h2>\n\n\n\n<p>This tutorial is intended for beginners but with some basic knowledge of Three.js.</p>\n\n\n\n<h3><strong>Installation</strong></h3>\n\n\n\n<p>For this tutorial, a <code>starter.zip</code> file is provided.</p>\n\n\n\n<ul><li>Download the starter <a href=\"https://threejs-journey.com/resources/codrops/threejs-scroll-based-animation/starter.zip\">https://threejs-journey.com/resources/codrops/threejs-scroll-based-animation/starter.zip</a></li><li>Unzip it</li><li>Open the <code>index.html</code> file in your favorite browser</li></ul>\n\n\n\n<p>You should see a red cube at the center with &#8220;My Portfolio&#8221; written on it:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/01-800x450.png\" alt=\"\" class=\"wp-image-58121\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/01-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/01-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/01-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/01-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/01.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>The libraries are loaded as plain <code>&lt;script&gt;</code> to keep things simple and accessible for everyone:</p>\n\n\n\n<ul><li>Three.js in version <code>0.136.0</code></li><li>GSAP in version <code>3.9.1</code></li></ul>\n\n\n\n<p>For specific techniques like Three.js controls or texture loading, you are going to need a development server, but we are not going to use those here.</p>\n\n\n\n<h3>Setup</h3>\n\n\n\n<p>We already have a basic Three.js setup.</p>\n\n\n\n<p>Here’s a quick explaination of what each part of the setup does, but if you want to learn more, everything is explained in the <a href=\"https://threejs-journey.com/\">Three.js Journey</a> course:</p>\n\n\n\n<h4>index.html</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;canvas class=&quot;webgl&quot;&gt;&lt;/canvas&gt;</code></pre>\n\n\n\n<p>Creates a <code>&lt;canvas&gt;</code> in which we are going to draw the WebGL renders.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;section class=&quot;section&quot;&gt;\n    &lt;h1&gt;My Portfolio&lt;/h1&gt;\n&lt;/section&gt;\n&lt;section class=&quot;section&quot;&gt;\n    &lt;h2&gt;My projects&lt;/h2&gt;\n&lt;/section&gt;\n&lt;section class=&quot;section&quot;&gt;\n    &lt;h2&gt;Contact me&lt;/h2&gt;\n&lt;/section&gt;</code></pre>\n\n\n\n<p>Creates some sections with a simple title in them. You can add whatever you want in these.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src=&quot;./three.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;./gsap.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;./script.js&quot;&gt;&lt;/script&gt;</code></pre>\n\n\n\n<p>Loads the Three.js library, the GSAP library, and to finish, our JavaScript file.</p>\n\n\n\n<h4>style.css</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>*\n{\n    margin: 0;\n    padding: 0;\n}</code></pre>\n\n\n\n<p>Resets any <code>margin</code> or <code>padding</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.webgl\n{\n    position: fixed;\n    top: 0;\n    left: 0;\n}</code></pre>\n\n\n\n<p>Makes the WebGL <code>&lt;canvas&gt;</code> fit the viewport and stay fixed while scrolling.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.section\n{\n    display: flex;\n    align-items: center;\n    height: 100vh;\n    position: relative;\n    font-family: &#039;Cabin&#039;, sans-serif;\n    color: #ffeded;\n    text-transform: uppercase;\n    font-size: 7vmin;\n    padding-left: 10%;\n    padding-right: 10%;\n}\n\nsection:nth-child(odd)\n{\n    justify-content: flex-end;\n}</code></pre>\n\n\n\n<p>Centers the sections. Also centers the text vertically and aligns it on the right for one out of two sections.</p>\n\n\n\n<h4>script.js</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector(&#039;canvas.webgl&#039;)\n\n// Scene\nconst scene = new THREE.Scene()\n</code></pre>\n\n\n\n<p>Retrieves the canvas from the HTML and create a Three.js <a href=\"https://threejs.org/docs/#api/en/scenes/Scene\">Scene</a>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Test cube\n */\nconst cube = new THREE.Mesh(\n    new THREE.BoxGeometry(1, 1, 1),\n    new THREE.MeshBasicMaterial({ color: &#039;#ff0000&#039; })\n)\nscene.add(cube)\n</code></pre>\n\n\n\n<p>Creates the red cube that we can see at the center. We are going to remove it shortly.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener(&#039;resize&#039;, () =&gt;\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n</code></pre>\n\n\n\n<p>Saves the size of the viewport in a <code>sizes</code> variable, updates that variable when a <code>resize</code> event occurs and updates the <code>camera</code> and <code>renderer</code> at the same time (more about these two right after).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(35, sizes.width / sizes.height, 0.1, 100)\ncamera.position.z = 6\nscene.add(camera)\n</code></pre>\n\n\n\n<p>Creates a <a href=\"https://threejs.org/docs/#api/en/cameras/PerspectiveCamera\">PerspectiveCamera</a> and moves it backward on the positive <code>z</code> axis.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n</code></pre>\n\n\n\n<p>Creates the <a href=\"https://threejs.org/docs/?q=WebGLRenderer#api/en/renderers/WebGLRenderer\">WebGLRenderer</a> that will render the <code>scene</code> seen from the <code>camera</code> and updates its size and pixel ratio with a maximum of <code>2</code> to prevent performance issues.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst tick = () =&gt;\n{\n    const elapsedTime = clock.getElapsedTime()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()\n</code></pre>\n\n\n\n<p>Starts a loop with a classic <a href=\"https://developer.mozilla.org/fr/docs/Web/API/Window/requestAnimationFrame\">requestAnimationFrame</a> to call the <code>tick</code> function on each frame and animates our experience. In that <code>tick</code> function, we do a render of the <code>scene</code> from the <code>camera</code> on each frame.</p>\n\n\n\n<p>The <a href=\"https://threejs.org/docs/?q=clock#api/en/core/Clock\">Clock</a> lets us retrieve the elapsed time that we save in the <code>elapsedTime</code> variable for later use.</p>\n\n\n\n<h2>HTML Scroll</h2>\n\n\n\n<h3>Fix the elastic scroll</h3>\n\n\n\n<p>In some environments, you might notice that, if you scroll too far, you get a kind of elastic animation when the page goes beyond the limit:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/02-1.mp4\"></video></figure>\n\n\n\n<p>While this is a cool feature, by default, the back of the page is white and doesn&#8217;t match our experience.</p>\n\n\n\n<p>We want to keep that elastic effect for those who have it, but make the white parts the same color as the renderer.</p>\n\n\n\n<p>We could have set the <code>background-color</code> of the page to the same color as the <code>clearColor</code> of the <code>renderer</code>. But instead, we are going to make the <code>clearColor</code> transparent and only set the <code>background-color</code> on the page so that the background color is set at one place only.</p>\n\n\n\n<p>To do that, in <code>/script.js</code>, you need to set the <code>alpha</code> property to <code>true</code> on the <code>WebGLRenderer</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    alpha: true\n})</code></pre>\n\n\n\n<p>By default, the clear alpha value is <code>0</code> which is why we didn&#8217;t have to set it ourselves. Telling the renderer to handle alpha is enough. But if you want to change that value, you can do it with <code>setClearAlpha</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>renderer.setClearAlpha(0)</code></pre>\n\n\n\n<p>We can now see the back of the page which is white:</p>\n\n\n\n<figure class=\"wp-block-image size-large wp-img-border\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/03-800x450.png\" alt=\"\" class=\"wp-image-58125\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/03-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/03-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/03-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/03-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/03.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>In <code>/style.css</code>, add a <code>background-color</code> to the <code>html</code> in CSS:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n{\n    background: #1e1a20;\n}</code></pre>\n\n\n\n<p>We get a nice uniform background color and the elastic scroll isn&#8217;t an issue anymore:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/04-1.mp4\"></video></figure>\n\n\n\n<h2>Objects</h2>\n\n\n\n<p>We are going to create an object for each section to illustrate each of them.</p>\n\n\n\n<p>To keep things simple, we will use Three.js primitives, but you can create whatever you want or even import custom models into the scene.</p>\n\n\n\n<p>In <code>/script.js</code>, remove the code for the cube. In its place, create three <a href=\"https://threejs.org/docs/index.html?q=mesh#api/en/objects/Mesh\">Meshes</a> using a <a href=\"https://threejs.org/docs/index.html?q=torus#api/en/geometries/TorusGeometry\">TorusGeometry</a>, a <a href=\"https://threejs.org/docs/index.html?q=ConeGeometry#api/en/geometries/ConeGeometry\">ConeGeometry</a> and a <a href=\"https://threejs.org/docs/index.html?q=torusk#api/en/geometries/TorusKnotGeometry\">TorusKnotGeometry</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Objects\n */\n// Meshes\nconst mesh1 = new THREE.Mesh(\n    new THREE.TorusGeometry(1, 0.4, 16, 60),\n    new THREE.MeshBasicMaterial({ color: &#039;#ff0000&#039; })\n)\nconst mesh2 = new THREE.Mesh(\n    new THREE.ConeGeometry(1, 2, 32),\n    new THREE.MeshBasicMaterial({ color: &#039;#ff0000&#039; })\n)\nconst mesh3 = new THREE.Mesh(\n    new THREE.TorusKnotGeometry(0.8, 0.35, 100, 16),\n    new THREE.MeshBasicMaterial({ color: &#039;#ff0000&#039; })\n)\n\nscene.add(mesh1, mesh2, mesh3)</code></pre>\n\n\n\n<p>All the objects should be on top of each other (we will fix that later):</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/05-800x450.png\" alt=\"\" class=\"wp-image-58127\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/05-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/05-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/05-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/05-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/05.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>In order to keep things simple, our code will be a bit redundant. But don&#8217;t hesitate to use arrays or other code structuring solutions if you have more sections.</p>\n\n\n\n<h3>Material</h3>\n\n\n\n<h4>Base material</h4>\n\n\n\n<p>We are going to use the <a href=\"https://threejs.org/docs/index.html?q=toon#api/en/materials/MeshToonMaterial\">MeshToonMaterial</a> for the objects and are going to create one instance of the material and use it for all three <a href=\"https://threejs.org/docs/index.html?q=mesh#api/en/objects/Mesh\">Meshes</a>.</p>\n\n\n\n<p>When creating the <a href=\"https://threejs.org/docs/index.html?q=toon#api/en/materials/MeshToonMaterial\">MeshToonMaterial</a>, use <code>&#039;#ffeded&#039;</code> for the <code>color</code> property and apply it to all 3 <a href=\"https://threejs.org/docs/index.html?q=mesh#api/en/objects/Mesh\">Meshes</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Material\nconst material = new THREE.MeshToonMaterial({ color: &#039;#ffeded&#039; })\n\n// Meshes\nconst mesh1 = new THREE.Mesh(\n    new THREE.TorusGeometry(1, 0.4, 16, 60),\n    material\n)\nconst mesh2 = new THREE.Mesh(\n    new THREE.ConeGeometry(1, 2, 32),\n    material\n)\nconst mesh3 = new THREE.Mesh(\n    new THREE.TorusKnotGeometry(0.8, 0.35, 100, 16),\n    material\n)\n\nscene.add(mesh1, mesh2, mesh3)</code></pre>\n\n\n\n<p>Unfortunately, it seems that the objects are now black:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/06-800x450.png\" alt=\"\" class=\"wp-image-58128\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/06-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/06-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/06-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/06-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/06.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>The reason is that the <a href=\"https://threejs.org/docs/index.html?q=toon#api/en/materials/MeshToonMaterial\">MeshToonMaterial</a> is one of the Three.js materials that appears only when there is light.</p>\n\n\n\n<h4>Light</h4>\n\n\n\n<p>Add one <a href=\"https://threejs.org/docs/index.html?q=Direc#api/en/lights/DirectionalLight\">DirectionalLight</a> to the scene:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Lights\n */\nconst directionalLight = new THREE.DirectionalLight(&#039;#ffffff&#039;, 1)\ndirectionalLight.position.set(1, 1, 0)\nscene.add(directionalLight)</code></pre>\n\n\n\n<p>You should now see your objects:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/07-800x450.png\" alt=\"\" class=\"wp-image-58129\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/07-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/07-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/07-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/07-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/07.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<h3>Position</h3>\n\n\n\n<p>By default, in Three.js, the field of view is vertical. This means that if you put one object on the top part of the render and one object on the bottom part of the render and then you resize the window, you&#8217;ll notice that the objects stay put at the top and at the bottom.</p>\n\n\n\n<p>To illustrate this, temporarily add this code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mesh1.position.y = 2\nmesh1.scale.set(0.5, 0.5, 0.5)\n\nmesh2.visible = false\n\nmesh3.position.y = - 2\nmesh3.scale.set(0.5, 0.5, 0.5)</code></pre>\n\n\n\n<p>The torus stays at the top and the torus knot stays at the bottom:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/08-1.mp4\"></video></figure>\n\n\n\n<p>When you&#8217;re done, remove the code above.</p>\n\n\n\n<p>This is good because it means that we only need to make sure that each object is far enough away from the other on the <code>y</code> axis, so that we don&#8217;t see them together.</p>\n\n\n\n<p>Create an <code>objectsDistance</code> variable and choose a random value like <code>2</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const objectsDistance = 2</code></pre>\n\n\n\n<p>Use that variable to position the meshes on the <code>y</code> axis. The values must be negative so that the objects go down:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mesh1.position.y = - objectsDistance * 0\nmesh2.position.y = - objectsDistance * 1\nmesh3.position.y = - objectsDistance * 2</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/09-800x450.png\" alt=\"\" class=\"wp-image-58132\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/09-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/09-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/09-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/09-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/09.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>Increase the <code>objectsDistance</code> until the objects are far enough apart. A good amount should be <code>4</code>, but you can go back to change that value later.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const objectsDistance = 4</code></pre>\n\n\n\n<p>Now, we can only see the first object:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/10-800x450.png\" alt=\"\" class=\"wp-image-58133\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/10-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/10-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/10-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/10-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/10.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>The two others will be below. We will position them horizontally once we move the camera with the scroll and they appear again.</p>\n\n\n\n<p>The <code>objectsDistance</code> will get handy a bit later, which is why we saved the value in a variable.</p>\n\n\n\n<h3>Permanent rotation</h3>\n\n\n\n<p>To give more life to the experience, we are going to add a permanent rotation to the objects.</p>\n\n\n\n<p>First, add the objects to a <code>sectionMeshes</code> array:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const sectionMeshes = &#091; mesh1, mesh2, mesh3 ]</code></pre>\n\n\n\n<p>Then, in the <code>tick</code> function, loop through the <code>sectionMeshes</code> array and apply a slow rotation by using the <code>elapsedTime</code> already available:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    const elapsedTime = clock.getElapsedTime()\n\n    // Animate meshes\n    for(const mesh of sectionMeshes)\n    {\n        mesh.rotation.x = elapsedTime * 0.1\n        mesh.rotation.y = elapsedTime * 0.12\n    }\n\n    // ...\n}</code></pre>\n\n\n\n<p>All the meshes (though we can see only one here) should slowly rotate:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/11-1.mp4\"></video></figure>\n\n\n\n<h2>Camera</h2>\n\n\n\n<h3>Scroll</h3>\n\n\n\n<p>It&#8217;s time to make the camera move with the scroll.</p>\n\n\n\n<p>First, we need to retrieve the scroll value. This can be done with the <code>window.scrollY</code> property.</p>\n\n\n\n<p>Create a <code>scrollY</code> variable and assign it <code>window.scrollY</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Scroll\n */\nlet scrollY = window.scrollY\n</code></pre>\n\n\n\n<p>But then, we need to update that value when the user scrolls. To do that, listen to the <code>&#039;scroll&#039;</code> event on <code>window</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;scroll&#039;, () =&gt;\n{\n    scrollY = window.scrollY\n\n    console.log(scrollY)\n})\n</code></pre>\n\n\n\n<p>You should see the scroll value in the logs. Remove the <code>console.log</code>.</p>\n\n\n\n<p>In the <code>tick</code> function, use <code>scrollY</code> to make the camera move (before doing the render):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    // ...\n\n    // Animate camera\n    camera.position.y = scrollY\n\n    // ...\n}\n</code></pre>\n\n\n\n<p>Not quite right yet:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/12-1.mp4\"></video></figure>\n\n\n\n<p>The camera is way too sensitive and going in the wrong direction. We need to work a little on that value.</p>\n\n\n\n<p><code>scrollY</code> is positive when scrolling down, but the camera should go down on the <code>y</code> axis. Let&#8217;s invert the value:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>camera.position.y = - scrollY</code></pre>\n\n\n\n<p>Better, but still too sensitive:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/13-1.mp4\"></video></figure>\n\n\n\n<p><code>scrollY</code> contains the amount of pixels that have been scrolled. If we scroll 1000 pixels (which is not that much), the camera will go down of 1000 units in the scene (which is a lot).</p>\n\n\n\n<p>Each section has exactly the same size as the viewport. This means that when we scroll the distance of one viewport height, the camera should reach the next object.</p>\n\n\n\n<p>To do that, we need to divide <code>scrollY</code> by the height of the viewport which is <code>sizes.height</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>camera.position.y = - scrollY / sizes.height</code></pre>\n\n\n\n<p>The camera is now going down of <code>1</code> unit for each section scrolled. But the objects are currently separated by <code>4</code> units which is the <code>objectsDistance</code> variable:</p>\n\n\n\n<p>We need to multiply the value by <code>objectsDistance</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>camera.position.y = - scrollY / sizes.height * objectsDistance</code></pre>\n\n\n\n<p>To put it in a nutshell, if the user scrolls down one section, then the camera will move down to the next object:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/14-1.mp4\"></video></figure>\n\n\n\n<h3>Position object horizontally</h3>\n\n\n\n<p>Now is a good time to position the objects left and right to match the titles:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mesh1.position.x = 2\nmesh2.position.x = - 2\nmesh3.position.x = 2</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/15-1.mp4\"></video></figure>\n\n\n\n<h3>Parallax</h3>\n\n\n\n<p>We call parallax the action of seeing one object through different observation points. This is done naturally by our eyes and it&#8217;s how we feel the depth of things.</p>\n\n\n\n<p>To make our experience more immersive, we are going to apply this parallax effect by making the camera move horizontally and vertically according to the mouse movements. It will create a natural interaction, and help the user feel the depth.</p>\n\n\n\n<h4>Cursor</h4>\n\n\n\n<p>First, we need to retrieve the cursor position.</p>\n\n\n\n<p>To do that, create a <code>cursor</code> object with <code>x</code> and <code>y</code> properties:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Cursor\n */\nconst cursor = {}\ncursor.x = 0\ncursor.y = 0</code></pre>\n\n\n\n<p>Then, listen to the <code>mousemove</code> event on <code>window</code> and update those values:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;mousemove&#039;, (event) =&gt;\n{\n    cursor.x = event.clientX\n    cursor.y = event.clientY\n\n    console.log(cursor)\n})</code></pre>\n\n\n\n<p>You should get the pixel positions of the cursor in the console:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/16-1.mp4\"></video></figure>\n\n\n\n<p>While we could use those values directly, it&#8217;s always better to adapt them to the context.</p>\n\n\n\n<p>First, the amplitude depends on the size of the viewport and users with different screen resolutions will have different results. We can normalize the value (from <code>0</code> to <code>1</code>) by dividing them by the size of the viewport:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;mousemove&#039;, (event) =&gt;\n{\n    cursor.x = event.clientX / sizes.width\n    cursor.y = event.clientY / sizes.height\n\n    console.log(cursor)\n})</code></pre>\n\n\n\n<p>While this is better already, we can do even more.</p>\n\n\n\n<p>We know that the camera will be able to go as much on the left as on the right. This is why, instead of a value going from <code>0</code> to <code>1</code> it&#8217;s better to have a value going from <code>-0.5</code> to <code>0.5</code>.</p>\n\n\n\n<p>To do that, subtract <code>0.5</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;mousemove&#039;, (event) =&gt;\n{\n    cursor.x = event.clientX / sizes.width - 0.5\n    cursor.y = event.clientY / sizes.height - 0.5\n\n    console.log(cursor)\n})</code></pre>\n\n\n\n<p>Here is a clean value adapted to the context:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/17-1.mp4\"></video></figure>\n\n\n\n<p>Remove the <code>console.log</code>.</p>\n\n\n\n<p>We can now use the cursor values in the <code>tick</code> function. Create a <code>parallaxX</code> and a <code>parallaxY</code> variable and put the <code>cursor.x</code> and <code>cursor.y</code> in them:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    // ...\n\n    // Animate camera\n    camera.position.y = - scrollY / sizes.height * objectsDistance\n\n    const parallaxX = cursor.x\n    const parallaxY = cursor.y\n    camera.position.x = parallaxX\n    camera.position.y = parallaxY\n\n    // ...\n}</code></pre>\n\n\n\n<p>Unfortunately, we have two issues.</p>\n\n\n\n<p>The <code>x</code> and <code>y</code> axes don&#8217;t seem synchronized in terms of direction. And, the camera scroll doesn&#8217;t work anymore:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/18-1.mp4\"></video></figure>\n\n\n\n<p>Let&#8217;s fix the first issue. When we move the cursor to the left, the camera seems to go to the left. Same thing for the right. But when we move the cursor up, the camera seems to move down and the opposite when moving the cursor down.</p>\n\n\n\n<p>To fix that weird feeling, invert the <code>cursor.y</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    const parallaxX = cursor.x\n    const parallaxY = - cursor.y\n    camera.position.x = parallaxX\n    camera.position.y = parallaxY</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/19-1.mp4\"></video></figure>\n\n\n\n<p>For the second issue, the problem is that we update the <code>camera.position.y</code> twice and the second one will replace the first one.</p>\n\n\n\n<p>To fix that, we are going to put the camera in a <a href=\"https://threejs.org/docs/index.html?q=group#api/en/objects/Group\">Group</a> and apply the parallax on the group and not the camera itself.</p>\n\n\n\n<p>Right before instantiating the <code>camera</code>, create the <a href=\"https://threejs.org/docs/index.html?q=group#api/en/objects/Group\">Group</a>, add it to the scene and add the <code>camera</code> to the <a href=\"https://threejs.org/docs/index.html?q=group#api/en/objects/Group\">Group</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Camera\n */\n// Group\nconst cameraGroup = new THREE.Group()\nscene.add(cameraGroup)\n\n// Base camera\nconst camera = new THREE.PerspectiveCamera(35, sizes.width / sizes.height, 0.1, 100)\ncamera.position.z = 6\ncameraGroup.add(camera)</code></pre>\n\n\n\n<p>This shouldn&#8217;t change the result, but now, the camera is inside a group.</p>\n\n\n\n<p>In the <code>tick</code> function, instead of applying the parallax on the camera, apply it on the <code>cameraGroup</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    // ...\n\n    // Animate camera\n    camera.position.y = - scrollY / sizes.height * objectsDistance\n\n    const parallaxX = cursor.x\n    const parallaxY = - cursor.y\n    \n    cameraGroup.position.x = parallaxX\n    cameraGroup.position.y = parallaxY\n\n    // ...\n}</code></pre>\n\n\n\n<p>The scroll animation and parallax animation are now mixed together nicely:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/20-1.mp4\"></video></figure>\n\n\n\n<p>But we can do even better.</p>\n\n\n\n<h4>Easing</h4>\n\n\n\n<p>The parallax animation is a good start, but it feels a bit too mechanic. Having such a linear animation is impossible in real life for a number of reasons: the camera has weight, there is friction with the air and surfaces, muscles can&#8217;t make such a linear movement, etc. This is why the movement feels a bit wrong. We are going to add some &#8220;easing&#8221; (also called &#8220;smoothing&#8221; or &#8220;lerping&#8221;) and we are going to use a well-known formula.</p>\n\n\n\n<p>The idea behind the formula is that, on each frame, instead of moving the camera straight to the target, we are going to move it (let&#8217;s say) a 10th closer to the destination. Then, on the next frame, another 10th closer. Then, on the next frame, another 10th closer.</p>\n\n\n\n<p>On each frame, the camera will get a little closer to the destination. But, the closer it gets, the slower it moves because it&#8217;s always a 10th of the actual position toward the target position.</p>\n\n\n\n<p>First, we need to change the <code>=</code> to <code>+=</code> because we are adding to the actual position:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    cameraGroup.position.x += parallaxX\n    cameraGroup.position.y += parallaxY</code></pre>\n\n\n\n<p>Then, we need to calculate the distance from the actual position to the destination:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    cameraGroup.position.x += (parallaxX - cameraGroup.position.x)\n    cameraGroup.position.y += (parallaxY - cameraGroup.position.y)</code></pre>\n\n\n\n<p>Finally, we only want a 10th of that distance:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    cameraGroup.position.x += (parallaxX - cameraGroup.position.x) * 0.1\n    cameraGroup.position.y += (parallaxY - cameraGroup.position.y) * 0.1</code></pre>\n\n\n\n<p>The animation feels a lot smoother:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/21-1.mp4\"></video></figure>\n\n\n\n<p>But there is still a problem that some of you might have noticed.</p>\n\n\n\n<p>If you test the experience on a high frequency screen, the <code>tick</code> function will be called more often and the camera will move faster toward the target. While this is not a big issue, it&#8217;s not accurate and it&#8217;s preferable to have the same result across devices as much as possible.</p>\n\n\n\n<p>To fix that, we need to use the time spent between each frame.</p>\n\n\n\n<p>Right after instantiating the <a href=\"https://threejs.org/docs/index.html?q=clock#api/en/core/Clock\">Clock</a>, create a <code>previousTime</code> variable:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const clock = new THREE.Clock()\nlet previousTime = 0</code></pre>\n\n\n\n<p>At the beginning of the <code>tick</code> function, right after setting the <code>elapsedTime</code>, calculate the <code>deltaTime</code> by subtracting the <code>previousTime</code> from the <code>elapsedTime</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    const elapsedTime = clock.getElapsedTime()\n    const deltaTime = elapsedTime - previousTime\n\n    // ...\n}</code></pre>\n\n\n\n<p>And then, update the <code>previousTime</code> to be used on the next frame:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    const elapsedTime = clock.getElapsedTime()\n    const deltaTime = elapsedTime - previousTime\n    previousTime = elapsedTime\n\n    console.log(deltaTime)\n\n    // ...\n}</code></pre>\n\n\n\n<p>You now have the time spent between the current frame and the previous frame in seconds. For high frequency screens, the value will be smaller because less time was needed.</p>\n\n\n\n<p>We can now use that <code>deltaTime</code> on the parallax, but, because the <code>deltaTime</code> is in seconds, the value will be very small (around <code>0.016</code> for most common screens running at 60fps). Consequently, the effect will be very slow.</p>\n\n\n\n<p>To fix that, we can change <code>0.1</code> to something like <code>5</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    cameraGroup.position.x += (parallaxX - cameraGroup.position.x) * 5 * deltaTime\n    cameraGroup.position.y += (parallaxY - cameraGroup.position.y) * 5 * deltaTime</code></pre>\n\n\n\n<p>We now have a nice easing that will feel the same across different screen frequencies:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/22-1.mp4\"></video></figure>\n\n\n\n<p>Finally, now that we have the animation set properly, we can lower the amplitude of the effect:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    const parallaxX = cursor.x * 0.5\n    const parallaxY = - cursor.y * 0.5\n</code></pre>\n\n\n\n<h2>Particles</h2>\n\n\n\n<p>A good way to make the experience more immersive and to help the user feel the depth is to add particles.</p>\n\n\n\n<p>We are going to create very simple square particles and spread them around the scene.</p>\n\n\n\n<p>Because we need to position the particles ourselves, we are going to create a custom <a href=\"https://threejs.org/docs/index.html?q=bufferG#api/en/core/BufferGeometry\">BufferGeometry</a>.</p>\n\n\n\n<p>Create a <code>particlesCount</code> variable and a <code>positions</code> variable using a <code>Float32Array</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Particles\n */\n// Geometry\nconst particlesCount = 200\nconst positions = new Float32Array(particlesCount * 3)</code></pre>\n\n\n\n<p>Create a loop and add random coordinates to the <code>positions</code> array:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for(let i = 0; i &lt; particlesCount; i++)\n{\n    positions&#091;i * 3 + 0] = Math.random()\n    positions&#091;i * 3 + 1] = Math.random()\n    positions&#091;i * 3 + 2] = Math.random()\n}</code></pre>\n\n\n\n<p>We will change the positions later, but for now, let&#8217;s keep things simple and make sure that our geometry is working.</p>\n\n\n\n<p>Instantiate the <a href=\"https://threejs.org/docs/index.html?q=bufferG#api/en/core/BufferGeometry\">BufferGeometry</a> and set the <code>position</code> attribute:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const particlesGeometry = new THREE.BufferGeometry()\nparticlesGeometry.setAttribute(&#039;position&#039;, new THREE.BufferAttribute(positions, 3))</code></pre>\n\n\n\n<p>Create the material using <a href=\"https://threejs.org/docs/index.html?q=PointsMaterial#api/en/materials/PointsMaterial\">PointsMaterial</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Material\nconst particlesMaterial = new THREE.PointsMaterial({\n    color: &#039;#ffeded&#039;,\n    sizeAttenuation: true,\n    size: 0.03\n})</code></pre>\n\n\n\n<p>Create the particles using <a href=\"https://threejs.org/docs/index.html?q=points#api/en/objects/Points\">Points</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Points\nconst particles = new THREE.Points(particlesGeometry, particlesMaterial)\nscene.add(particles)</code></pre>\n\n\n\n<p>You should get a bunch of particles spread around in a cube:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/23-800x450.png\" alt=\"\" class=\"wp-image-58146\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/23-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/23-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/23-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/23-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/23.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>We can now position the particles on the three axes.</p>\n\n\n\n<p>For the <code>x</code> (horizontal) and <code>z</code> (depth), we can use random values that can be as much positive as they are negative:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for(let i = 0; i &lt; particlesCount; i++)\n{\n    positions&#091;i * 3 + 0] = (Math.random() - 0.5) * 10\n    positions&#091;i * 3 + 1] = Math.random()\n    positions&#091;i * 3 + 2] = (Math.random() - 0.5) * 10\n}</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/24-1.mp4\"></video></figure>\n\n\n\n<p>For the <code>y</code> (vertical) it&#8217;s a bit more tricky. We need to make the particles start high enough and then spread far enough below so that we reach the end with the scroll.</p>\n\n\n\n<p>To do that, we can use the <code>objectsDistance</code> variable and multiply by the number of objects which is the <code>length</code> of the <code>sectionMeshes</code> array:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for(let i = 0; i &lt; particlesCount; i++)\n{\n    positions&#091;i * 3 + 0] = (Math.random() - 0.5) * 10\n    positions&#091;i * 3 + 1] = objectsDistance * 0.5 - Math.random() * objectsDistance * sectionMeshes.length\n    positions&#091;i * 3 + 2] = (Math.random() - 0.5) * 10\n}</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/25-1.mp4\"></video></figure>\n\n\n\n<p>That&#8217;s all for the particles, but you can improve them with random sizes, random alpha. And, we can even animate them.</p>\n\n\n\n<h2>Triggered rotations</h2>\n\n\n\n<p>As a final feature and to make the exercise just a bit harder, we are going to make the objects do a little spin when we arrive at the corresponding section in addition to the permanent rotation.</p>\n\n\n\n<h3>Knowing when to trigger the animation</h3>\n\n\n\n<p>First, we need a way to know when we reach a section. There are plenty of ways of doing that and we could even use a library, but in our case, we can use the <code>scrollY</code> value and do some math to find the current section.</p>\n\n\n\n<p>After creating the <code>scrollY</code> variable, create a <code>currentSection</code> variable and set it to <code>0</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let scrollY = window.scrollY\nlet currentSection = 0</code></pre>\n\n\n\n<p>In the <code>&#039;scroll&#039;</code> event callback function, calculate the current section by dividing the <code>scrollY</code> by <code>sizes.height</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;scroll&#039;, () =&gt;\n{\n    scrollY = window.scrollY\n\n    const newSection = scrollY / sizes.height\n    \n    console.log(newSection)\n})</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/26-1.mp4\"></video></figure>\n\n\n\n<p>This works because each section is exactly one height of the viewport.</p>\n\n\n\n<p>To get the exact section instead of that float value, we can use <code>Math.round()</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;scroll&#039;, () =&gt;\n{\n    scrollY = window.scrollY\n\n    const newSection = Math.round(scrollY / sizes.height)\n    \n    console.log(newSection)\n})</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/27-1.mp4\"></video></figure>\n\n\n\n<p>We can now test if <code>newSection</code> is different from <code>currentSection</code>. If so, that means we changed the section and we can update the <code>currentSection</code> in order to do our animation:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;scroll&#039;, () =&gt;\n{\n    scrollY = window.scrollY\n    const newSection = Math.round(scrollY / sizes.height)\n\n    if(newSection != currentSection)\n    {\n        currentSection = newSection\n\n        console.log(&#039;changed&#039;, currentSection)\n    }\n})</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/28-1.mp4\"></video></figure>\n\n\n\n<h3>Animating the meshes</h3>\n\n\n\n<p>We can now animate the meshes and, to do that, we are going to use <a href=\"https://greensock.com/gsap/\">GSAP</a>.</p>\n\n\n\n<p>The <a href=\"https://greensock.com/gsap/\">GSAP</a> library is already loaded from the HTML file as we did for Three.js.</p>\n\n\n\n<p>Then, in the <code>if</code> statement we did earlier, we can do the animation with <code>gsap.to()</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;scroll&#039;, () =&gt;\n{\n    // ...\n    \n    if(newSection != currentSection)\n    {\n        // ...\n\n        gsap.to(\n            sectionMeshes&#091;currentSection].rotation,\n            {\n                duration: 1.5,\n                ease: &#039;power2.inOut&#039;,\n                x: &#039;+=6&#039;,\n                y: &#039;+=3&#039;\n            }\n        )\n    }\n})</code></pre>\n\n\n\n<p>While this code is valid, it will unfortunately not work. The reason is that, on each frame, we are already updating the <code>rotation.x</code> and <code>rotation.y</code> of each mesh with the <code>elapsedTime</code>.</p>\n\n\n\n<p>To fix that, in the tick function, instead of setting a very specific rotation based on the <code>elapsedTime</code>, we are going to add the <code>deltaTime</code> to the current rotation:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    // ...\n\n    for(const mesh of sectionMeshes)\n    {\n        mesh.rotation.x += deltaTime * 0.1\n        mesh.rotation.y += deltaTime * 0.12\n    }\n\n    // ...\n}</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/29-1.mp4\"></video></figure>\n\n\n\n<h2>Final code</h2>\n\n\n\n<p>You can download the final project here <a href=\"https://threejs-journey.com/resources/codrops/threejs-scroll-based-animation/final.zip\">https://threejs-journey.com/resources/codrops/threejs-scroll-based-animation/final.zip</a></p>\n\n\n\n<h2>Go further</h2>\n\n\n\n<p>We kept things really simple on purpose, but you can for sure go much further!</p>\n\n\n\n<ul><li>Add more content to the HTML</li><li>Animate other properties like the material</li><li>Animate the HTML texts</li><li>Improve the particles</li><li>Add more tweaks to the Debug UI</li><li>Test other colors</li><li>Add mobile and touch support</li><li>Etc.</li></ul>\n\n\n\n<p>If you liked this tutorial or want to learn more about WebGL and Three.js, join the <a href=\"https://threejs-journey.com/\">Three.js Journey</a> course!</p>\n\n\n\n<p>As a reminder, here’s a 20% discount <a href=\"https://threejs-journey.com/join/codrops1\">CODROPS1</a> for you <img src=\"https://s.w.org/images/core/emoji/13.0.1/72x72/1f609.png\" alt=\"😉\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2022/01/05/crafting-scroll-based-animations-in-three-js/\">Crafting Scroll Based Animations in Three.js</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>",
      "content_text": "Having an experience composed of only WebGL is great, but sometimes, you’ll want the experience to be part of a classic website.\n\n\n\nThe experience can be in the background to add some beauty to the page, but then, you’ll want that experience to integrate properly with the HTML content.\n\n\n\nIn this tutorial, we will:\n\n\n\nlearn how to use Three.js as a background of a classic HTML pagemake the camera translate to follow the scrolldiscover some tricks to make the scrolling more immersiveadd a cool parallax effect based on the cursor positiontrigger some animations when arriving at the corresponding sections\n\n\n\nSee the live version\n\n\n\n\nThis tutorial is part of the 39 lessons available in the Three.js Journey course.\n\n\n\nThree.js Journey is the ultimate course to learn WebGL with Three.js. Once you’ve subscribed, you get access to 45 hours of videos also available as text version. First, you’ll start with the basics like the reasons to use Three.js and how to setup a simple scene. Then, you’ll start animating it, creating cool environments, interacting with it, creating your own models in Blender. To finish, you will learn advanced techniques like physics, shaders, realistic renders, code structuring, baking, etc.\n\n\n\nAs a member of the Three.js Journey community, you will also get access to a members-only Discord server.\n\n\n\nUse the code CODROPS1 for a 20% discount.\n\n\n\n\nStarter\n\n\n\nThis tutorial is intended for beginners but with some basic knowledge of Three.js.\n\n\n\nInstallation\n\n\n\nFor this tutorial, a starter.zip file is provided.\n\n\n\nDownload the starter https://threejs-journey.com/resources/codrops/threejs-scroll-based-animation/starter.zipUnzip itOpen the index.html file in your favorite browser\n\n\n\nYou should see a red cube at the center with “My Portfolio” written on it:\n\n\n\n\n\n\n\nThe libraries are loaded as plain <script> to keep things simple and accessible for everyone:\n\n\n\nThree.js in version 0.136.0GSAP in version 3.9.1\n\n\n\nFor specific techniques like Three.js controls or texture loading, you are going to need a development server, but we are not going to use those here.\n\n\n\nSetup\n\n\n\nWe already have a basic Three.js setup.\n\n\n\nHere’s a quick explaination of what each part of the setup does, but if you want to learn more, everything is explained in the Three.js Journey course:\n\n\n\nindex.html\n\n\n\n<canvas class=\"webgl\"></canvas>\n\n\n\nCreates a <canvas> in which we are going to draw the WebGL renders.\n\n\n\n<section class=\"section\">\n    <h1>My Portfolio</h1>\n</section>\n<section class=\"section\">\n    <h2>My projects</h2>\n</section>\n<section class=\"section\">\n    <h2>Contact me</h2>\n</section>\n\n\n\nCreates some sections with a simple title in them. You can add whatever you want in these.\n\n\n\n<script src=\"./three.min.js\"></script>\n<script src=\"./gsap.min.js\"></script>\n<script src=\"./script.js\"></script>\n\n\n\nLoads the Three.js library, the GSAP library, and to finish, our JavaScript file.\n\n\n\nstyle.css\n\n\n\n*\n{\n    margin: 0;\n    padding: 0;\n}\n\n\n\nResets any margin or padding.\n\n\n\n.webgl\n{\n    position: fixed;\n    top: 0;\n    left: 0;\n}\n\n\n\nMakes the WebGL <canvas> fit the viewport and stay fixed while scrolling.\n\n\n\n.section\n{\n    display: flex;\n    align-items: center;\n    height: 100vh;\n    position: relative;\n    font-family: 'Cabin', sans-serif;\n    color: #ffeded;\n    text-transform: uppercase;\n    font-size: 7vmin;\n    padding-left: 10%;\n    padding-right: 10%;\n}\n\nsection:nth-child(odd)\n{\n    justify-content: flex-end;\n}\n\n\n\nCenters the sections. Also centers the text vertically and aligns it on the right for one out of two sections.\n\n\n\nscript.js\n\n\n\n/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n\n\n\nRetrieves the canvas from the HTML and create a Three.js Scene.\n\n\n\n/**\n * Test cube\n */\nconst cube = new THREE.Mesh(\n    new THREE.BoxGeometry(1, 1, 1),\n    new THREE.MeshBasicMaterial({ color: '#ff0000' })\n)\nscene.add(cube)\n\n\n\n\nCreates the red cube that we can see at the center. We are going to remove it shortly.\n\n\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n\n\n\nSaves the size of the viewport in a sizes variable, updates that variable when a resize event occurs and updates the camera and renderer at the same time (more about these two right after).\n\n\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(35, sizes.width / sizes.height, 0.1, 100)\ncamera.position.z = 6\nscene.add(camera)\n\n\n\n\nCreates a PerspectiveCamera and moves it backward on the positive z axis.\n\n\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n\n\n\nCreates the WebGLRenderer that will render the scene seen from the camera and updates its size and pixel ratio with a maximum of 2 to prevent performance issues.\n\n\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()\n\n\n\n\nStarts a loop with a classic requestAnimationFrame to call the tick function on each frame and animates our experience. In that tick function, we do a render of the scene from the camera on each frame.\n\n\n\nThe Clock lets us retrieve the elapsed time that we save in the elapsedTime variable for later use.\n\n\n\nHTML Scroll\n\n\n\nFix the elastic scroll\n\n\n\nIn some environments, you might notice that, if you scroll too far, you get a kind of elastic animation when the page goes beyond the limit:\n\n\n\n\n\n\n\nWhile this is a cool feature, by default, the back of the page is white and doesn’t match our experience.\n\n\n\nWe want to keep that elastic effect for those who have it, but make the white parts the same color as the renderer.\n\n\n\nWe could have set the background-color of the page to the same color as the clearColor of the renderer. But instead, we are going to make the clearColor transparent and only set the background-color on the page so that the background color is set at one place only.\n\n\n\nTo do that, in /script.js, you need to set the alpha property to true on the WebGLRenderer:\n\n\n\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    alpha: true\n})\n\n\n\nBy default, the clear alpha value is 0 which is why we didn’t have to set it ourselves. Telling the renderer to handle alpha is enough. But if you want to change that value, you can do it with setClearAlpha:\n\n\n\nrenderer.setClearAlpha(0)\n\n\n\nWe can now see the back of the page which is white:\n\n\n\n\n\n\n\nIn /style.css, add a background-color to the html in CSS:\n\n\n\nhtml\n{\n    background: #1e1a20;\n}\n\n\n\nWe get a nice uniform background color and the elastic scroll isn’t an issue anymore:\n\n\n\n\n\n\n\nObjects\n\n\n\nWe are going to create an object for each section to illustrate each of them.\n\n\n\nTo keep things simple, we will use Three.js primitives, but you can create whatever you want or even import custom models into the scene.\n\n\n\nIn /script.js, remove the code for the cube. In its place, create three Meshes using a TorusGeometry, a ConeGeometry and a TorusKnotGeometry:\n\n\n\n/**\n * Objects\n */\n// Meshes\nconst mesh1 = new THREE.Mesh(\n    new THREE.TorusGeometry(1, 0.4, 16, 60),\n    new THREE.MeshBasicMaterial({ color: '#ff0000' })\n)\nconst mesh2 = new THREE.Mesh(\n    new THREE.ConeGeometry(1, 2, 32),\n    new THREE.MeshBasicMaterial({ color: '#ff0000' })\n)\nconst mesh3 = new THREE.Mesh(\n    new THREE.TorusKnotGeometry(0.8, 0.35, 100, 16),\n    new THREE.MeshBasicMaterial({ color: '#ff0000' })\n)\n\nscene.add(mesh1, mesh2, mesh3)\n\n\n\nAll the objects should be on top of each other (we will fix that later):\n\n\n\n\n\n\n\nIn order to keep things simple, our code will be a bit redundant. But don’t hesitate to use arrays or other code structuring solutions if you have more sections.\n\n\n\nMaterial\n\n\n\nBase material\n\n\n\nWe are going to use the MeshToonMaterial for the objects and are going to create one instance of the material and use it for all three Meshes.\n\n\n\nWhen creating the MeshToonMaterial, use '#ffeded' for the color property and apply it to all 3 Meshes:\n\n\n\n// Material\nconst material = new THREE.MeshToonMaterial({ color: '#ffeded' })\n\n// Meshes\nconst mesh1 = new THREE.Mesh(\n    new THREE.TorusGeometry(1, 0.4, 16, 60),\n    material\n)\nconst mesh2 = new THREE.Mesh(\n    new THREE.ConeGeometry(1, 2, 32),\n    material\n)\nconst mesh3 = new THREE.Mesh(\n    new THREE.TorusKnotGeometry(0.8, 0.35, 100, 16),\n    material\n)\n\nscene.add(mesh1, mesh2, mesh3)\n\n\n\nUnfortunately, it seems that the objects are now black:\n\n\n\n\n\n\n\nThe reason is that the MeshToonMaterial is one of the Three.js materials that appears only when there is light.\n\n\n\nLight\n\n\n\nAdd one DirectionalLight to the scene:\n\n\n\n/**\n * Lights\n */\nconst directionalLight = new THREE.DirectionalLight('#ffffff', 1)\ndirectionalLight.position.set(1, 1, 0)\nscene.add(directionalLight)\n\n\n\nYou should now see your objects:\n\n\n\n\n\n\n\nPosition\n\n\n\nBy default, in Three.js, the field of view is vertical. This means that if you put one object on the top part of the render and one object on the bottom part of the render and then you resize the window, you’ll notice that the objects stay put at the top and at the bottom.\n\n\n\nTo illustrate this, temporarily add this code:\n\n\n\nmesh1.position.y = 2\nmesh1.scale.set(0.5, 0.5, 0.5)\n\nmesh2.visible = false\n\nmesh3.position.y = - 2\nmesh3.scale.set(0.5, 0.5, 0.5)\n\n\n\nThe torus stays at the top and the torus knot stays at the bottom:\n\n\n\n\n\n\n\nWhen you’re done, remove the code above.\n\n\n\nThis is good because it means that we only need to make sure that each object is far enough away from the other on the y axis, so that we don’t see them together.\n\n\n\nCreate an objectsDistance variable and choose a random value like 2:\n\n\n\nconst objectsDistance = 2\n\n\n\nUse that variable to position the meshes on the y axis. The values must be negative so that the objects go down:\n\n\n\nmesh1.position.y = - objectsDistance * 0\nmesh2.position.y = - objectsDistance * 1\nmesh3.position.y = - objectsDistance * 2\n\n\n\n\n\n\n\nIncrease the objectsDistance until the objects are far enough apart. A good amount should be 4, but you can go back to change that value later.\n\n\n\nconst objectsDistance = 4\n\n\n\nNow, we can only see the first object:\n\n\n\n\n\n\n\nThe two others will be below. We will position them horizontally once we move the camera with the scroll and they appear again.\n\n\n\nThe objectsDistance will get handy a bit later, which is why we saved the value in a variable.\n\n\n\nPermanent rotation\n\n\n\nTo give more life to the experience, we are going to add a permanent rotation to the objects.\n\n\n\nFirst, add the objects to a sectionMeshes array:\n\n\n\nconst sectionMeshes = [ mesh1, mesh2, mesh3 ]\n\n\n\nThen, in the tick function, loop through the sectionMeshes array and apply a slow rotation by using the elapsedTime already available:\n\n\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime()\n\n    // Animate meshes\n    for(const mesh of sectionMeshes)\n    {\n        mesh.rotation.x = elapsedTime * 0.1\n        mesh.rotation.y = elapsedTime * 0.12\n    }\n\n    // ...\n}\n\n\n\nAll the meshes (though we can see only one here) should slowly rotate:\n\n\n\n\n\n\n\nCamera\n\n\n\nScroll\n\n\n\nIt’s time to make the camera move with the scroll.\n\n\n\nFirst, we need to retrieve the scroll value. This can be done with the window.scrollY property.\n\n\n\nCreate a scrollY variable and assign it window.scrollY:\n\n\n\n/**\n * Scroll\n */\nlet scrollY = window.scrollY\n\n\n\n\nBut then, we need to update that value when the user scrolls. To do that, listen to the 'scroll' event on window:\n\n\n\nwindow.addEventListener('scroll', () =>\n{\n    scrollY = window.scrollY\n\n    console.log(scrollY)\n})\n\n\n\n\nYou should see the scroll value in the logs. Remove the console.log.\n\n\n\nIn the tick function, use scrollY to make the camera move (before doing the render):\n\n\n\nconst tick = () =>\n{\n    // ...\n\n    // Animate camera\n    camera.position.y = scrollY\n\n    // ...\n}\n\n\n\n\nNot quite right yet:\n\n\n\n\n\n\n\nThe camera is way too sensitive and going in the wrong direction. We need to work a little on that value.\n\n\n\nscrollY is positive when scrolling down, but the camera should go down on the y axis. Let’s invert the value:\n\n\n\ncamera.position.y = - scrollY\n\n\n\nBetter, but still too sensitive:\n\n\n\n\n\n\n\nscrollY contains the amount of pixels that have been scrolled. If we scroll 1000 pixels (which is not that much), the camera will go down of 1000 units in the scene (which is a lot).\n\n\n\nEach section has exactly the same size as the viewport. This means that when we scroll the distance of one viewport height, the camera should reach the next object.\n\n\n\nTo do that, we need to divide scrollY by the height of the viewport which is sizes.height:\n\n\n\ncamera.position.y = - scrollY / sizes.height\n\n\n\nThe camera is now going down of 1 unit for each section scrolled. But the objects are currently separated by 4 units which is the objectsDistance variable:\n\n\n\nWe need to multiply the value by objectsDistance:\n\n\n\ncamera.position.y = - scrollY / sizes.height * objectsDistance\n\n\n\nTo put it in a nutshell, if the user scrolls down one section, then the camera will move down to the next object:\n\n\n\n\n\n\n\nPosition object horizontally\n\n\n\nNow is a good time to position the objects left and right to match the titles:\n\n\n\nmesh1.position.x = 2\nmesh2.position.x = - 2\nmesh3.position.x = 2\n\n\n\n\n\n\n\nParallax\n\n\n\nWe call parallax the action of seeing one object through different observation points. This is done naturally by our eyes and it’s how we feel the depth of things.\n\n\n\nTo make our experience more immersive, we are going to apply this parallax effect by making the camera move horizontally and vertically according to the mouse movements. It will create a natural interaction, and help the user feel the depth.\n\n\n\nCursor\n\n\n\nFirst, we need to retrieve the cursor position.\n\n\n\nTo do that, create a cursor object with x and y properties:\n\n\n\n/**\n * Cursor\n */\nconst cursor = {}\ncursor.x = 0\ncursor.y = 0\n\n\n\nThen, listen to the mousemove event on window and update those values:\n\n\n\nwindow.addEventListener('mousemove', (event) =>\n{\n    cursor.x = event.clientX\n    cursor.y = event.clientY\n\n    console.log(cursor)\n})\n\n\n\nYou should get the pixel positions of the cursor in the console:\n\n\n\n\n\n\n\nWhile we could use those values directly, it’s always better to adapt them to the context.\n\n\n\nFirst, the amplitude depends on the size of the viewport and users with different screen resolutions will have different results. We can normalize the value (from 0 to 1) by dividing them by the size of the viewport:\n\n\n\nwindow.addEventListener('mousemove', (event) =>\n{\n    cursor.x = event.clientX / sizes.width\n    cursor.y = event.clientY / sizes.height\n\n    console.log(cursor)\n})\n\n\n\nWhile this is better already, we can do even more.\n\n\n\nWe know that the camera will be able to go as much on the left as on the right. This is why, instead of a value going from 0 to 1 it’s better to have a value going from -0.5 to 0.5.\n\n\n\nTo do that, subtract 0.5:\n\n\n\nwindow.addEventListener('mousemove', (event) =>\n{\n    cursor.x = event.clientX / sizes.width - 0.5\n    cursor.y = event.clientY / sizes.height - 0.5\n\n    console.log(cursor)\n})\n\n\n\nHere is a clean value adapted to the context:\n\n\n\n\n\n\n\nRemove the console.log.\n\n\n\nWe can now use the cursor values in the tick function. Create a parallaxX and a parallaxY variable and put the cursor.x and cursor.y in them:\n\n\n\nconst tick = () =>\n{\n    // ...\n\n    // Animate camera\n    camera.position.y = - scrollY / sizes.height * objectsDistance\n\n    const parallaxX = cursor.x\n    const parallaxY = cursor.y\n    camera.position.x = parallaxX\n    camera.position.y = parallaxY\n\n    // ...\n}\n\n\n\nUnfortunately, we have two issues.\n\n\n\nThe x and y axes don’t seem synchronized in terms of direction. And, the camera scroll doesn’t work anymore:\n\n\n\n\n\n\n\nLet’s fix the first issue. When we move the cursor to the left, the camera seems to go to the left. Same thing for the right. But when we move the cursor up, the camera seems to move down and the opposite when moving the cursor down.\n\n\n\nTo fix that weird feeling, invert the cursor.y:\n\n\n\n    const parallaxX = cursor.x\n    const parallaxY = - cursor.y\n    camera.position.x = parallaxX\n    camera.position.y = parallaxY\n\n\n\n\n\n\n\nFor the second issue, the problem is that we update the camera.position.y twice and the second one will replace the first one.\n\n\n\nTo fix that, we are going to put the camera in a Group and apply the parallax on the group and not the camera itself.\n\n\n\nRight before instantiating the camera, create the Group, add it to the scene and add the camera to the Group:\n\n\n\n/**\n * Camera\n */\n// Group\nconst cameraGroup = new THREE.Group()\nscene.add(cameraGroup)\n\n// Base camera\nconst camera = new THREE.PerspectiveCamera(35, sizes.width / sizes.height, 0.1, 100)\ncamera.position.z = 6\ncameraGroup.add(camera)\n\n\n\nThis shouldn’t change the result, but now, the camera is inside a group.\n\n\n\nIn the tick function, instead of applying the parallax on the camera, apply it on the cameraGroup:\n\n\n\nconst tick = () =>\n{\n    // ...\n\n    // Animate camera\n    camera.position.y = - scrollY / sizes.height * objectsDistance\n\n    const parallaxX = cursor.x\n    const parallaxY = - cursor.y\n    \n    cameraGroup.position.x = parallaxX\n    cameraGroup.position.y = parallaxY\n\n    // ...\n}\n\n\n\nThe scroll animation and parallax animation are now mixed together nicely:\n\n\n\n\n\n\n\nBut we can do even better.\n\n\n\nEasing\n\n\n\nThe parallax animation is a good start, but it feels a bit too mechanic. Having such a linear animation is impossible in real life for a number of reasons: the camera has weight, there is friction with the air and surfaces, muscles can’t make such a linear movement, etc. This is why the movement feels a bit wrong. We are going to add some “easing” (also called “smoothing” or “lerping”) and we are going to use a well-known formula.\n\n\n\nThe idea behind the formula is that, on each frame, instead of moving the camera straight to the target, we are going to move it (let’s say) a 10th closer to the destination. Then, on the next frame, another 10th closer. Then, on the next frame, another 10th closer.\n\n\n\nOn each frame, the camera will get a little closer to the destination. But, the closer it gets, the slower it moves because it’s always a 10th of the actual position toward the target position.\n\n\n\nFirst, we need to change the = to += because we are adding to the actual position:\n\n\n\n    cameraGroup.position.x += parallaxX\n    cameraGroup.position.y += parallaxY\n\n\n\nThen, we need to calculate the distance from the actual position to the destination:\n\n\n\n    cameraGroup.position.x += (parallaxX - cameraGroup.position.x)\n    cameraGroup.position.y += (parallaxY - cameraGroup.position.y)\n\n\n\nFinally, we only want a 10th of that distance:\n\n\n\n    cameraGroup.position.x += (parallaxX - cameraGroup.position.x) * 0.1\n    cameraGroup.position.y += (parallaxY - cameraGroup.position.y) * 0.1\n\n\n\nThe animation feels a lot smoother:\n\n\n\n\n\n\n\nBut there is still a problem that some of you might have noticed.\n\n\n\nIf you test the experience on a high frequency screen, the tick function will be called more often and the camera will move faster toward the target. While this is not a big issue, it’s not accurate and it’s preferable to have the same result across devices as much as possible.\n\n\n\nTo fix that, we need to use the time spent between each frame.\n\n\n\nRight after instantiating the Clock, create a previousTime variable:\n\n\n\nconst clock = new THREE.Clock()\nlet previousTime = 0\n\n\n\nAt the beginning of the tick function, right after setting the elapsedTime, calculate the deltaTime by subtracting the previousTime from the elapsedTime:\n\n\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime()\n    const deltaTime = elapsedTime - previousTime\n\n    // ...\n}\n\n\n\nAnd then, update the previousTime to be used on the next frame:\n\n\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime()\n    const deltaTime = elapsedTime - previousTime\n    previousTime = elapsedTime\n\n    console.log(deltaTime)\n\n    // ...\n}\n\n\n\nYou now have the time spent between the current frame and the previous frame in seconds. For high frequency screens, the value will be smaller because less time was needed.\n\n\n\nWe can now use that deltaTime on the parallax, but, because the deltaTime is in seconds, the value will be very small (around 0.016 for most common screens running at 60fps). Consequently, the effect will be very slow.\n\n\n\nTo fix that, we can change 0.1 to something like 5:\n\n\n\n    cameraGroup.position.x += (parallaxX - cameraGroup.position.x) * 5 * deltaTime\n    cameraGroup.position.y += (parallaxY - cameraGroup.position.y) * 5 * deltaTime\n\n\n\nWe now have a nice easing that will feel the same across different screen frequencies:\n\n\n\n\n\n\n\nFinally, now that we have the animation set properly, we can lower the amplitude of the effect:\n\n\n\n    const parallaxX = cursor.x * 0.5\n    const parallaxY = - cursor.y * 0.5\n\n\n\n\nParticles\n\n\n\nA good way to make the experience more immersive and to help the user feel the depth is to add particles.\n\n\n\nWe are going to create very simple square particles and spread them around the scene.\n\n\n\nBecause we need to position the particles ourselves, we are going to create a custom BufferGeometry.\n\n\n\nCreate a particlesCount variable and a positions variable using a Float32Array:\n\n\n\n/**\n * Particles\n */\n// Geometry\nconst particlesCount = 200\nconst positions = new Float32Array(particlesCount * 3)\n\n\n\nCreate a loop and add random coordinates to the positions array:\n\n\n\nfor(let i = 0; i < particlesCount; i++)\n{\n    positions[i * 3 + 0] = Math.random()\n    positions[i * 3 + 1] = Math.random()\n    positions[i * 3 + 2] = Math.random()\n}\n\n\n\nWe will change the positions later, but for now, let’s keep things simple and make sure that our geometry is working.\n\n\n\nInstantiate the BufferGeometry and set the position attribute:\n\n\n\nconst particlesGeometry = new THREE.BufferGeometry()\nparticlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n\n\n\nCreate the material using PointsMaterial:\n\n\n\n// Material\nconst particlesMaterial = new THREE.PointsMaterial({\n    color: '#ffeded',\n    sizeAttenuation: true,\n    size: 0.03\n})\n\n\n\nCreate the particles using Points:\n\n\n\n// Points\nconst particles = new THREE.Points(particlesGeometry, particlesMaterial)\nscene.add(particles)\n\n\n\nYou should get a bunch of particles spread around in a cube:\n\n\n\n\n\n\n\nWe can now position the particles on the three axes.\n\n\n\nFor the x (horizontal) and z (depth), we can use random values that can be as much positive as they are negative:\n\n\n\nfor(let i = 0; i < particlesCount; i++)\n{\n    positions[i * 3 + 0] = (Math.random() - 0.5) * 10\n    positions[i * 3 + 1] = Math.random()\n    positions[i * 3 + 2] = (Math.random() - 0.5) * 10\n}\n\n\n\n\n\n\n\nFor the y (vertical) it’s a bit more tricky. We need to make the particles start high enough and then spread far enough below so that we reach the end with the scroll.\n\n\n\nTo do that, we can use the objectsDistance variable and multiply by the number of objects which is the length of the sectionMeshes array:\n\n\n\nfor(let i = 0; i < particlesCount; i++)\n{\n    positions[i * 3 + 0] = (Math.random() - 0.5) * 10\n    positions[i * 3 + 1] = objectsDistance * 0.5 - Math.random() * objectsDistance * sectionMeshes.length\n    positions[i * 3 + 2] = (Math.random() - 0.5) * 10\n}\n\n\n\n\n\n\n\nThat’s all for the particles, but you can improve them with random sizes, random alpha. And, we can even animate them.\n\n\n\nTriggered rotations\n\n\n\nAs a final feature and to make the exercise just a bit harder, we are going to make the objects do a little spin when we arrive at the corresponding section in addition to the permanent rotation.\n\n\n\nKnowing when to trigger the animation\n\n\n\nFirst, we need a way to know when we reach a section. There are plenty of ways of doing that and we could even use a library, but in our case, we can use the scrollY value and do some math to find the current section.\n\n\n\nAfter creating the scrollY variable, create a currentSection variable and set it to 0:\n\n\n\nlet scrollY = window.scrollY\nlet currentSection = 0\n\n\n\nIn the 'scroll' event callback function, calculate the current section by dividing the scrollY by sizes.height:\n\n\n\nwindow.addEventListener('scroll', () =>\n{\n    scrollY = window.scrollY\n\n    const newSection = scrollY / sizes.height\n    \n    console.log(newSection)\n})\n\n\n\n\n\n\n\nThis works because each section is exactly one height of the viewport.\n\n\n\nTo get the exact section instead of that float value, we can use Math.round():\n\n\n\nwindow.addEventListener('scroll', () =>\n{\n    scrollY = window.scrollY\n\n    const newSection = Math.round(scrollY / sizes.height)\n    \n    console.log(newSection)\n})\n\n\n\n\n\n\n\nWe can now test if newSection is different from currentSection. If so, that means we changed the section and we can update the currentSection in order to do our animation:\n\n\n\nwindow.addEventListener('scroll', () =>\n{\n    scrollY = window.scrollY\n    const newSection = Math.round(scrollY / sizes.height)\n\n    if(newSection != currentSection)\n    {\n        currentSection = newSection\n\n        console.log('changed', currentSection)\n    }\n})\n\n\n\n\n\n\n\nAnimating the meshes\n\n\n\nWe can now animate the meshes and, to do that, we are going to use GSAP.\n\n\n\nThe GSAP library is already loaded from the HTML file as we did for Three.js.\n\n\n\nThen, in the if statement we did earlier, we can do the animation with gsap.to():\n\n\n\nwindow.addEventListener('scroll', () =>\n{\n    // ...\n    \n    if(newSection != currentSection)\n    {\n        // ...\n\n        gsap.to(\n            sectionMeshes[currentSection].rotation,\n            {\n                duration: 1.5,\n                ease: 'power2.inOut',\n                x: '+=6',\n                y: '+=3'\n            }\n        )\n    }\n})\n\n\n\nWhile this code is valid, it will unfortunately not work. The reason is that, on each frame, we are already updating the rotation.x and rotation.y of each mesh with the elapsedTime.\n\n\n\nTo fix that, in the tick function, instead of setting a very specific rotation based on the elapsedTime, we are going to add the deltaTime to the current rotation:\n\n\n\nconst tick = () =>\n{\n    // ...\n\n    for(const mesh of sectionMeshes)\n    {\n        mesh.rotation.x += deltaTime * 0.1\n        mesh.rotation.y += deltaTime * 0.12\n    }\n\n    // ...\n}\n\n\n\n\n\n\n\nFinal code\n\n\n\nYou can download the final project here https://threejs-journey.com/resources/codrops/threejs-scroll-based-animation/final.zip\n\n\n\nGo further\n\n\n\nWe kept things really simple on purpose, but you can for sure go much further!\n\n\n\nAdd more content to the HTMLAnimate other properties like the materialAnimate the HTML textsImprove the particlesAdd more tweaks to the Debug UITest other colorsAdd mobile and touch supportEtc.\n\n\n\nIf you liked this tutorial or want to learn more about WebGL and Three.js, join the Three.js Journey course!\n\n\n\nAs a reminder, here’s a 20% discount CODROPS1 for you \nThe post Crafting Scroll Based Animations in Three.js appeared first on Codrops.",
      "date_published": "2022-01-05T11:09:24.000Z",
      "date_modified": "2022-01-05T11:09:24.000Z",
      "_plugin": {
        "pageFilename": "3d84e7856f8c2846f3bd6592623716523a115868d715d73d42908556b91ca487.html"
      }
    },
    {
      "id": "https://tympanus.net/codrops/?p=58011",
      "url": "https://tympanus.net/codrops/2022/01/03/building-a-scrollable-and-draggable-timeline-with-gsap/",
      "title": "Building a Scrollable and Draggable Timeline with GSAP",
      "summary": "Learn how to build a scrollable and draggable horizontal timeline using GSAP's ScrollTrigger and Draggable plugins.\nThe post Building a Scrollable and Draggable Timeline with GSAP appeared first on Codrops.",
      "content_html": "<p>The Greensock animation library’s ScrollTrigger and Draggable plugins can help us create some very cool effects that respond to user interaction. In this tutorial we’ll look at how to use them together, to create an interactive timeline that’s both scrollable <em>and</em> draggable.</p>\n\n\n\n<p>We’re going to build a timeline showing albums released by the rock band Radiohead. The subject of our timeline doesn’t really matter — the main thing is a series of events that happen over a number of dates — so feel free to pick your own subject matter to make it more personal to you!</p>\n\n\n\n<p>We’ll have a timeline along the top of our webpage showing our dates, and a number of full-width sections where our content for each of those dates will live. Dragging the horizontal timeline should scroll the page to the appropriate place in the content, and likewise scrolling the page will cause our timeline to update. Additionally, clicking any of the links in the timeline will allow the user to jump straight to the relevant section. This means we have three different methods for navigating our page — and they all have to sync perfectly with one another.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"800\" height=\"199\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/gsap-scroll-drag_small.png\" alt=\"Three stages showing the horizontal timeline moving from right to left while the page itself is scrolled vertically\" class=\"wp-image-58047\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/gsap-scroll-drag_small.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/gsap-scroll-drag_small-400x100.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/gsap-scroll-drag_small-768x191.png 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>We’re going to walk through the steps for creating our timeline. Feel free to jump straight to <a href=\"https://codepen.io/michellebarker/full/597a468071d4dce3f7bf0ce80d6cb8d3\">the final demo</a> if you want to get stuck into the code, or use <a href=\"https://codepen.io/michellebarker/pen/b6b3ffc832941e2509a17a48ab683e05\">this starter Codepen</a>, which includes some simple initial styles so you can concentrate on the JS.</p>\n\n\n\n<h2>Markup</h2>\n\n\n\n<p>Let’s start with our HTML. As this is going to be our main page navigation, we’ll use the <code>&lt;nav&gt;</code> element. Inside this, we have a marker, which we’ll style with CSS to indicate the position on the timeline. We also have a <code>&lt;div&gt;</code> with a class of <code>nav__track</code>, which will be our draggable trigger. It houses our list of navigation links.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;nav&gt;\n\t&lt;!--Shows our position on the timeline--&gt;\n\t&lt;div class=&quot;marker&quot;&gt;&lt;/div&gt;\n\t\n\t&lt;!--Draggable element--&gt;\n\t&lt;div class=&quot;nav__track&quot; data-draggable&gt;\n\t\t&lt;ul class=&quot;nav__list&quot;&gt;\n\t\t\t&lt;li&gt;\n\t\t\t\t&lt;a href=&quot;#section_1&quot; class=&quot;nav__link&quot; data-link&gt;&lt;span&gt;1993&lt;/span&gt;&lt;/a&gt;\n\t\t\t&lt;/li&gt;\n\t\t\t&lt;li&gt;\n\t\t\t\t&lt;a href=&quot;#section_2&quot; class=&quot;nav__link&quot; data-link&gt;&lt;span&gt;1995&lt;/span&gt;&lt;/a&gt;\n\t\t\t&lt;/li&gt;\n\t\t\t&lt;li&gt;\n\t\t\t\t&lt;a href=&quot;#section_3&quot; class=&quot;nav__link&quot; data-link&gt;&lt;span&gt;1997&lt;/span&gt;&lt;/a&gt;\n\t\t\t&lt;/li&gt;\n\t\t\t&lt;!--More list items go here--&gt;\n\t\t&lt;/ul&gt;\n\t&lt;/div&gt;\n&lt;/nav&gt;</code></pre>\n\n\n\n<p>Below our nav, we have the main content of our page, which includes a number of sections. We’ll give each one an <code>id</code> that corresponds to one of the links in the navigation. That way, when a user clicks a link they’ll be scrolled to the relevant place in the content — no JS required.</p>\n\n\n\n<p>We’ll also set each one a custom property corresponding to the section’s index. This is optional, but can be useful for styling. We won’t worry about the content of our sections for now.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;main&gt;\n\t&lt;section id=&quot;section_1&quot; style=&quot;--i: 0&quot;&gt;&lt;/section&gt;\n\t&lt;section id=&quot;section_2&quot; style=&quot;--i: 1&quot;&gt;&lt;/section&gt;\n\t&lt;section id=&quot;section_3&quot; style=&quot;--i: 2&quot;&gt;&lt;/section&gt;\n\t&lt;!--More list sections go here--&gt;\n&lt;/main&gt;</code></pre>\n\n\n\n<h2>CSS</h2>\n\n\n\n<p>Next we’ll move onto our basic layout. We’ll give each section a <code>min-height</code> of <code>100vh</code>. We can also give them a background color, to make it obvious when we’re scrolling through the sections. We can use the custom property we set in the last step in combination with the <code>hsl()</code> color function to give each one a unique hue:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">section {\n\t--h: calc(var(--i) * 30);\n\t\n\tmin-height: 100vh;\n\tbackground-color: hsl(var(--h, 0) 75% 50%);\n}</code></pre>\n\n\n\n<p>We’ll position our nav along the top of the page and give it a fixed position.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">nav {\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n}</code></pre>\n\n\n\n<p>While the nav itself will be fixed (to ensure it remains visible as the user scrolls), the track inside it will be draggable. This will need to be wider than the viewport, as we want the user to be able to drag it all the way along. It also needs some padding, as we’ll need the user to be able to drag on the area <em>after</em> our items have ended, so that they can move the track all the way along. To ensure our track has a suitable width at all viewport sizes, we can use the <code>max()</code> function. This returns the largest of two comma-separated values. At narrow viewport widths our track will be a minimum of 200rem wide, ensuring that our items retain a pleasing distance from one another. At larger viewport widths the track will be 200% wide which, accounting for the padding, means our items will be dispersed evenly along the width of the viewport when position them with flexbox.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">.nav__track {\n\tposition: relative;\n\tmin-width: max(200rem, 200%);\n\tpadding: 1.5rem max(100rem, 100%) 0 0;\n\theight: 6rem;\n}\n\n.nav__list {\n\t/* Remove default list styles */\n\tlist-style: none;\n\tmargin: 0;\n\tpadding: 0;\n\t\n\t/* Position items horizontally */\n\tdisplay: flex;\n\tjustify-content: space-between;\n}</code></pre>\n\n\n\n<p>We can also style our marker, which will show the user the current position on the timeline. For now we’ll add a simple dot, which we’ll position 4rem from the left. If we also set a width of 4rem on our navigation items, this should center the first navigation item below the marker on the left of the viewport.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">.marker {\n\tposition: fixed;\n\ttop: 1.75rem;\n\tleft: 4rem;\n\twidth: 1rem;\n\theight: 1rem;\n\ttransform: translate3d(-50%, 0, 0);\n\tbackground: blue;\n\tborder-radius: 100%;\n\tz-index: 2000;\n}\n\n.nav__link {\n\tposition: relative;\n\tdisplay: block;\n\tmin-width: 8rem;\n\ttext-align: center;\n}</code></pre>\n\n\n\n<p>You might want to add some custom styling to the track like I’ve done in the demo, but this should be enough for us to move onto the next step.</p>\n\n\n\n<h2>The JavaScript</h2>\n\n\n\n<h3>Installing plugins</h3>\n\n\n\n<p>We’ll be using the GSAP (Greensock) core package and its ScrollTrigger and Draggable plugins. There are many ways to install GSAP — check out <a href=\"https://greensock.com/docs/v3/Installation\">this page</a> for options. If you go for the NPM option, you’ll’ll need to import the modules at the top of the JS file, and register the plugins:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">import gsap from &#039;gsap&#039;\nimport ScrollTrigger from &#039;gsap/ScrollTrigger&#039;\nimport Draggable from &#039;gsap/Draggable&#039;\n\ngsap.registerPlugin(ScrollTrigger, Draggable)</code></pre>\n\n\n\n<h3>Creating the animation timeline</h3>\n\n\n\n<p>We want the track to move horizontally when the user scrolls the page or drags the timeline itself. We <em>could</em> allow the user to drag the marker instead, but this wouldn’t work well if we had more navigation items than would fit horizontally in the viewport. If we keep the marker stationary while moving the track, it gives us a lot more flexibility.</p>\n\n\n\n<p>The first thing we’ll do is create an animation <a href=\"https://greensock.com/docs/v3/GSAP/Timeline\">timeline</a> with GSAP. Our timeline is quite simple: it will include just a single tween to move the track to the left, until the last item is just below the marker we positioned earlier. We’ll need to use the width of the last nav item in some other places, so we’ll create a function we can call whenever we need this value. We can use GSAP’s <code>toArray</code> <a href=\"https://greensock.com/docs/v3/GSAP/gsap.utils\">utility function</a> to set an array of our nav links as a variable:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const navLinks = gsap.utils.toArray(&#039;[data-link]&#039;)\n\nconst lastItemWidth = () =&gt; navLinks[navLinks.length - 1].offsetWidth</code></pre>\n\n\n\n<p>Now we can use that to calculate the <em>x</em> value in our tween:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const track = document.querySelector(&#039;[data-draggable]&#039;)\n\nconst tl = gsap.timeline()\n\t.to(track, {\n\t\tx: () =&gt; {\n\t\t\treturn ((track.offsetWidth * 0.5) - lastItemWidth()) * -1\n\t\t},\n\t\tease: &#039;none&#039; // important!\n\t})</code></pre>\n\n\n\n<h4>Easing</h4>\n\n\n\n<p>We’re also removing the easing on our timeline tween. This is very important, as the movement will be tied to the scroll position, and easing would play havoc with our calculations later on!</p>\n\n\n\n<h3>Creating the ScrollTrigger instance</h3>\n\n\n\n<p>We’re going to create a ScrollTrigger instance, which will trigger the timeline animation. We’ll set the <code>scrub</code> value as <code>0</code>. This will cause our animation to play at the rate the user scrolls. A value other than <code>0</code> creates a lag between the scroll action and the animation, which can work nicely in some instances, but won’t serve us well here.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const st = ScrollTrigger.create({\n\tanimation: tl,\n\tscrub: 0\n})</code></pre>\n\n\n\n<p>Our animation timeline will start playing as soon as the user starts scrolling from the top of the page, and end when the page is scrolled all the way to the bottom. If you need anything different, you’ll need to specify <code>start</code> and <code>end</code> values on the ScrollTrigger instance too. (See the <a href=\"https://greensock.com/docs/v3/Plugins/ScrollTrigger\">ScrollTrigger documentation</a> for more details).</p>\n\n\n\n<h3>Creating the Draggable instance</h3>\n\n\n\n<p>Now we’ll create a Draggable instance. We’ll pass in our track as the first argument (the element we want to make draggable). In our options (the second argument) we’ll specify <code>&lt;em&gt;x&lt;/em&gt;</code> for the type, as we only want it to be dragged horizontally. We can also set <code>inertia</code> to <code>true</code>. This is optional, as it requires the <a href=\"https://greensock.com/docs/v3/Plugins/InertiaPlugin\">Inertia plugin</a>, a premium plugin for Greensock members (but free to use on Codepen). Using Inertia mean that when the user lets go after dragging the element, it will glide to a stop in a more naturalistic way. It’s not strictly necessary for this demo, but I prefer the effect.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const draggableInstance = Draggable.create(track, {\n\ttype: &#039;x&#039;,\n\tinertia: true\n})</code></pre>\n\n\n\n<p>Next we want to set the <code>bounds</code>, otherwise there’s a danger the element could be dragged right off the screen. We’ll set the minimum and maximum values the element can be dragged. We don’t want it to be dragged any further to the right than its current start position, so we’ll set <code>minX</code> as <em>0</em>. The <code>maxX</code> value will in fact need to be the same value as used in our timeline tween — so how about we make a function for that:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const getDraggableWidth = () =&gt; {\n\treturn (track.offsetWidth * 0.5) - lastItemWidth()\n}\n\nconst draggableInstance = Draggable.create(track, {\n\ttype: &#039;x&#039;,\n\tinertia: true,\n\tbounds: {\n\t\tminX: 0,\n\t\tmaxX: getDraggableWidth() * -1\n\t},\n\tedgeResistance: 1 // Don’t allow any dragging beyond the bounds\n})</code></pre>\n\n\n\n<p>We’ll need to set <code>edgeResistance</code> to <code>1</code>, which will prevent any dragging at all beyond our specified bounds.</p>\n\n\n\n<h3>Putting them together</h3>\n\n\n\n<p>Now, for the technical part! We’re going to programmatically scroll the page when the user drags the element. The first thing to do is to disable the ScrollTrigger instance when the user starts dragging the track, and re-enable it when the drag ends. We can use the <code>onDragStart</code> and <code>onDragEnd</code> options on our Draggable instance to do that:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const draggableInstance = Draggable.create(track, {\n\ttype: &#039;x&#039;,\n\tinertia: true,\n\tbounds: {\n\t\tminX: 0,\n\t\tmaxX: getDraggableWidth() * -1\n\t},\n\tedgeResistance: 1,\n\tonDragStart: () =&gt; st.disable(),\n\tonDragEnd: () =&gt; st.enable()\n})</code></pre>\n\n\n\n<p>Then we’ll write a function that gets called on drag. We’ll get the offset position of our draggable element (using <code>getBoundingClientRect()</code>). We’ll also need to know the total scrollable height of the page, which will be the document height minus the viewport height. Let’s create a function for this, to keep it tidy.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const getUseableHeight = () =&gt; document.documentElement.offsetHeight - window.innerHeight</code></pre>\n\n\n\n<p>We’ll use GSAP’s <code>mapRange()</code> utility function to find the relative scroll position (<a href=\"https://greensock.com/docs/v3/GSAP/UtilityMethods/mapRange()\">see the documentation</a>), and call the <code>scroll()</code> method on the ScrollTrigger instance to update the scroll position on drag:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">const draggableInstance = Draggable.create(track, {\n\ttype: &#039;x&#039;,\n\tinertia: true,\n\tbounds: {\n\t\tminX: 0,\n\t\tmaxX: getDraggableWidth() * -1\n\t},\n\tedgeResistance: 1,\n\tonDragStart: () =&gt; st.disable(),\n\tonDragEnd: () =&gt; st.enable(),\n\tonDrag: () =&gt; {\n\t\tconst left = track.getBoundingClientRect().left * -1\n\t\tconst width = getDraggableWidth()\n\t\tconst useableHeight = getUseableHeight()\n\t\tconst y = gsap.utils.mapRange(0, width, 0, useableHeight, left)\n\t\t\n    st.scroll(y)\n  }\n})</code></pre>\n\n\n\n<p>As we’re using the Inertia plugin, we’ll want to call the same function during the “throw” part of the interaction — after the user lets go of the element, but while it retains momentum. So let’s write it as a separate function we can call for both:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const updatePosition = () =&gt; {\n\tconst left = track.getBoundingClientRect().left * -1\n\tconst width = getDraggableWidth()\n\tconst useableHeight = getUseableHeight()\n\tconst y = gsap.utils.mapRange(0, width, 0, useableHeight, left)\n\n\tst.scroll(y)\n}\n\nconst draggableInstance = Draggable.create(track, {\n\ttype: &#039;x&#039;,\n\tinertia: true,\n\tbounds: {\n\t\tminX: 0,\n\t\tmaxX: getDraggableWidth() * -1\n\t},\n\tedgeResistance: 1,\n\tonDragStart: () =&gt; st.disable(),\n\tonDragEnd: () =&gt; st.enable(),\n\tonDrag: updatePosition,\n\tonThrowUpdate: updatePosition\n})</code></pre>\n\n\n\n<p>Now our scroll position and timeline track should be perfectly in sync when we scroll the page <em>or</em> drag the track.</p>\n\n\n\n<h2>Navigating on click</h2>\n\n\n\n<p>We also want users to be able to scroll to the desired section by clicking on any of the timeline links. We <em>could</em> do this with JS, but we don’t necessarily need to: CSS has a property that allows smooth scrolling within the page, and it’s supported in most modern browsers (Safari is currently the exception). All we need is this one line of CSS, and our users will be scrolled smoothly to the desired section on click:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">html {\n\tscroll-behavior: smooth;\n}</code></pre>\n\n\n\n<h3>Accessibility</h3>\n\n\n\n<p>It’s good practice to consider users who may be sensitive to motion, so let’s include a <code>prefers-reduced-motion</code> media query to ensure that users who have specified a system-level preference for reduced motion will be jumped straight to the relevant section instead:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">@media (prefers-reduced-motion: no-preference) {\n\thtml {\n\t\tscroll-behavior: smooth;\n\t}\n}</code></pre>\n\n\n\n<p>Our navigation currently presents a problem for users who navigate using a keyboard. When our nav overflows the viewport, some of our nav links are hidden from view, as they are offscreen. When the user tabs through the links, we need those links to be brought into view. We can attach an event listener to our track to get the scroll position of the corresponding section, and call <code>scroll()</code> on the ScrollTrigger instance, which will have the effect of moving the timeline too (keeping them both in sync):</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">track.addEventListener(&#039;keyup&#039;, (e) =&gt; {\n\tconst id = e.target.getAttribute(&#039;href&#039;)\n\t\n\t/* Return if no section href or the user isn’t using the tab key */\n\tif (!id || e.key !== &#039;Tab&#039;) return\n\t\n\tconst section = document.querySelector(id)\n\t\n\t/* Get the scroll position of the section */\n\tconst y = section.getBoundingClientRect().top + window.scrollY\n\t\n\t/* Use the ScrollTrigger to scroll the window */\n\tst.scroll(y)\n})</code></pre>\n\n\n\n<p>Calling <code>scroll()</code> also respects our users’ motion preferences — users with a reduced-motion preference will be jumped to the section instead of smoothly scrolled.</p>\n\n\n<p class='codepen'  data-height='502' data-theme-id='0' data-slug-hash='d9557b8a3d864e6be3d37b1b1eb0d6df' data-default-tab='result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href=\"https://codepen.io/michellebarker/pen/d9557b8a3d864e6be3d37b1b1eb0d6df\"><br />\n  GSAP Draggable and ScrollTrigger timeline [Simple 1]</a> by Michelle Barker (<a href=\"https://codepen.io/michellebarker\">@michellebarker</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.0</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Animating the sections</h2>\n\n\n\n<p>Our timeline should work pretty well now, but we don’t yet have any content. Let’s add a heading and image for each section, and animate them when the come into view. Here’s an example of the HTML for one section, which we can repeat for the other (adjusting the content as needed):</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;main&gt;\n\t&lt;section id=&quot;section_1&quot; style=&quot;--i: 0&quot;&gt;\n\t\t&lt;div class=&quot;container&quot;&gt;\n\t\t\t&lt;h2 class=&quot;section__heading&quot;&gt;\n\t\t\t\t&lt;span&gt;1993&lt;/span&gt;\n\t\t\t\t&lt;span&gt;Pablo Honey&lt;/span&gt;\n\t\t\t&lt;/h2&gt;\n\t\t\t&lt;div class=&quot;section__image&quot;&gt;\n\t\t\t\t&lt;img src=&quot;https://assets.codepen.io/85648/radiohead_pablo-honey.jpg&quot; width=&quot;1200&quot; height=&quot;1200&quot; /&gt;\n\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\t&lt;/section&gt;\n\t&lt;!--more sections--&gt;\n&lt;/main&gt;</code></pre>\n\n\n\n<p>I’m using <code>display: grid</code> to position the heading and image in a pleasing arrangement — but feel free to position them as you like. We’ll just concentrate on the JS for this part.</p>\n\n\n\n<h3>Creating the timelines with GSAP</h3>\n\n\n\n<p>We’ll create a function called <code>initSectionAnimation()</code>. The first thing we’ll do is return early if our users prefer reduced motion. We can used a <code>prefers-reduced-motion</code> media query using the <code>matchMedia</code> method:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const prefersReducedMotion = window.matchMedia(&#039;(prefers-reduced-motion: reduce)&#039;)\n\nconst initSectionAnimation = () =&gt; {\n\t/* Do nothing if user prefers reduced motion */\n\tif (prefersReducedMotion.matches) return\n}\n\ninitSectionAnimation()</code></pre>\n\n\n\n<p>Next we’ll set our animation start state for each section:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const initSectionAnimation = () =&gt; {\n\t/* Do nothing if user prefers reduced motion */\n\tif (prefersReducedMotion.matches) return\n\t\n\tsections.forEach((section, index) =&gt; {\n\t\tconst heading = section.querySelector(&#039;h2&#039;)\n\t\tconst image = section.querySelector(&#039;.section__image&#039;)\n\t\t\n\t\t/* Set animation start state */\n\t\tgsap.set(heading, {\n\t\t\topacity: 0,\n\t\t\ty: 50\n\t\t})\n\t\tgsap.set(image, {\n\t\t\topacity: 0,\n\t\t\trotateY: 15\n\t\t})\n\t}\n}</code></pre>\n\n\n\n<p>Then we’ll create a new timeline for each section, adding ScrollTrigger to the timeline itself to control when the animation is played. We can do this directly this time, rather than creating a separate ScrollTrigger instance, as we don’t need this timeline to be connected to a draggable element. (This code is all within the <code>forEach</code> loop.) We’ll add some tweens to the timeline to animate the heading and image into view.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">/* In the `forEach` loop: */\n\n/* Create the section timeline */\nconst sectionTl = gsap.timeline({\n\tscrollTrigger: {\n\t\ttrigger: section,\n\t\tstart: () =&gt; &#039;top center&#039;,\n\t\tend: () =&gt; `+=${window.innerHeight}`,\n\t\ttoggleActions: &#039;play reverse play reverse&#039;\n\t}\n})\n\n/* Add tweens to the timeline */\nsectionTl.to(image, {\n\topacity: 1,\n\trotateY: -5,\n\tduration: 6,\n\tease: &#039;elastic&#039;\n})\n.to(heading, {\n\topacity: 1,\n\ty: 0,\n\tduration: 2\n}, 0.5) // the heading tween will play 0.5 seconds from the start</code></pre>\n\n\n\n<p>By default our tweens will play one after the other. But I’m using the <a href=\"https://greensock.com/position-parameter\">position parameter</a> to specify that the heading tween should play 0.5 seconds from the beginning of the timeline, so our animations overlap.</p>\n\n\n\n<p>Here’s the complete demo in action:</p>\n\n\n<p class='codepen'  data-height='636' data-theme-id='0' data-slug-hash='597a468071d4dce3f7bf0ce80d6cb8d3' data-default-tab='result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href=\"https://codepen.io/michellebarker/pen/597a468071d4dce3f7bf0ce80d6cb8d3\"><br />\n  GSAP Draggable and ScrollTrigger timeline [FINAL]</a> by Michelle Barker (<a href=\"https://codepen.io/michellebarker\">@michellebarker</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.0</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p></p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2022/01/03/building-a-scrollable-and-draggable-timeline-with-gsap/\">Building a Scrollable and Draggable Timeline with GSAP</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>",
      "content_text": "The Greensock animation library’s ScrollTrigger and Draggable plugins can help us create some very cool effects that respond to user interaction. In this tutorial we’ll look at how to use them together, to create an interactive timeline that’s both scrollable and draggable.\n\n\n\nWe’re going to build a timeline showing albums released by the rock band Radiohead. The subject of our timeline doesn’t really matter — the main thing is a series of events that happen over a number of dates — so feel free to pick your own subject matter to make it more personal to you!\n\n\n\nWe’ll have a timeline along the top of our webpage showing our dates, and a number of full-width sections where our content for each of those dates will live. Dragging the horizontal timeline should scroll the page to the appropriate place in the content, and likewise scrolling the page will cause our timeline to update. Additionally, clicking any of the links in the timeline will allow the user to jump straight to the relevant section. This means we have three different methods for navigating our page — and they all have to sync perfectly with one another.\n\n\n\n\n\n\n\nWe’re going to walk through the steps for creating our timeline. Feel free to jump straight to the final demo if you want to get stuck into the code, or use this starter Codepen, which includes some simple initial styles so you can concentrate on the JS.\n\n\n\nMarkup\n\n\n\nLet’s start with our HTML. As this is going to be our main page navigation, we’ll use the <nav> element. Inside this, we have a marker, which we’ll style with CSS to indicate the position on the timeline. We also have a <div> with a class of nav__track, which will be our draggable trigger. It houses our list of navigation links.\n\n\n\n<nav>\n\t<!--Shows our position on the timeline-->\n\t<div class=\"marker\"></div>\n\t\n\t<!--Draggable element-->\n\t<div class=\"nav__track\" data-draggable>\n\t\t<ul class=\"nav__list\">\n\t\t\t<li>\n\t\t\t\t<a href=\"#section_1\" class=\"nav__link\" data-link><span>1993</span></a>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a href=\"#section_2\" class=\"nav__link\" data-link><span>1995</span></a>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<a href=\"#section_3\" class=\"nav__link\" data-link><span>1997</span></a>\n\t\t\t</li>\n\t\t\t<!--More list items go here-->\n\t\t</ul>\n\t</div>\n</nav>\n\n\n\nBelow our nav, we have the main content of our page, which includes a number of sections. We’ll give each one an id that corresponds to one of the links in the navigation. That way, when a user clicks a link they’ll be scrolled to the relevant place in the content — no JS required.\n\n\n\nWe’ll also set each one a custom property corresponding to the section’s index. This is optional, but can be useful for styling. We won’t worry about the content of our sections for now.\n\n\n\n<main>\n\t<section id=\"section_1\" style=\"--i: 0\"></section>\n\t<section id=\"section_2\" style=\"--i: 1\"></section>\n\t<section id=\"section_3\" style=\"--i: 2\"></section>\n\t<!--More list sections go here-->\n</main>\n\n\n\nCSS\n\n\n\nNext we’ll move onto our basic layout. We’ll give each section a min-height of 100vh. We can also give them a background color, to make it obvious when we’re scrolling through the sections. We can use the custom property we set in the last step in combination with the hsl() color function to give each one a unique hue:\n\n\n\nsection {\n\t--h: calc(var(--i) * 30);\n\t\n\tmin-height: 100vh;\n\tbackground-color: hsl(var(--h, 0) 75% 50%);\n}\n\n\n\nWe’ll position our nav along the top of the page and give it a fixed position.\n\n\n\nnav {\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n}\n\n\n\nWhile the nav itself will be fixed (to ensure it remains visible as the user scrolls), the track inside it will be draggable. This will need to be wider than the viewport, as we want the user to be able to drag it all the way along. It also needs some padding, as we’ll need the user to be able to drag on the area after our items have ended, so that they can move the track all the way along. To ensure our track has a suitable width at all viewport sizes, we can use the max() function. This returns the largest of two comma-separated values. At narrow viewport widths our track will be a minimum of 200rem wide, ensuring that our items retain a pleasing distance from one another. At larger viewport widths the track will be 200% wide which, accounting for the padding, means our items will be dispersed evenly along the width of the viewport when position them with flexbox.\n\n\n\n.nav__track {\n\tposition: relative;\n\tmin-width: max(200rem, 200%);\n\tpadding: 1.5rem max(100rem, 100%) 0 0;\n\theight: 6rem;\n}\n\n.nav__list {\n\t/* Remove default list styles */\n\tlist-style: none;\n\tmargin: 0;\n\tpadding: 0;\n\t\n\t/* Position items horizontally */\n\tdisplay: flex;\n\tjustify-content: space-between;\n}\n\n\n\nWe can also style our marker, which will show the user the current position on the timeline. For now we’ll add a simple dot, which we’ll position 4rem from the left. If we also set a width of 4rem on our navigation items, this should center the first navigation item below the marker on the left of the viewport.\n\n\n\n.marker {\n\tposition: fixed;\n\ttop: 1.75rem;\n\tleft: 4rem;\n\twidth: 1rem;\n\theight: 1rem;\n\ttransform: translate3d(-50%, 0, 0);\n\tbackground: blue;\n\tborder-radius: 100%;\n\tz-index: 2000;\n}\n\n.nav__link {\n\tposition: relative;\n\tdisplay: block;\n\tmin-width: 8rem;\n\ttext-align: center;\n}\n\n\n\nYou might want to add some custom styling to the track like I’ve done in the demo, but this should be enough for us to move onto the next step.\n\n\n\nThe JavaScript\n\n\n\nInstalling plugins\n\n\n\nWe’ll be using the GSAP (Greensock) core package and its ScrollTrigger and Draggable plugins. There are many ways to install GSAP — check out this page for options. If you go for the NPM option, you’ll’ll need to import the modules at the top of the JS file, and register the plugins:\n\n\n\nimport gsap from 'gsap'\nimport ScrollTrigger from 'gsap/ScrollTrigger'\nimport Draggable from 'gsap/Draggable'\n\ngsap.registerPlugin(ScrollTrigger, Draggable)\n\n\n\nCreating the animation timeline\n\n\n\nWe want the track to move horizontally when the user scrolls the page or drags the timeline itself. We could allow the user to drag the marker instead, but this wouldn’t work well if we had more navigation items than would fit horizontally in the viewport. If we keep the marker stationary while moving the track, it gives us a lot more flexibility.\n\n\n\nThe first thing we’ll do is create an animation timeline with GSAP. Our timeline is quite simple: it will include just a single tween to move the track to the left, until the last item is just below the marker we positioned earlier. We’ll need to use the width of the last nav item in some other places, so we’ll create a function we can call whenever we need this value. We can use GSAP’s toArray utility function to set an array of our nav links as a variable:\n\n\n\nconst navLinks = gsap.utils.toArray('[data-link]')\n\nconst lastItemWidth = () => navLinks[navLinks.length - 1].offsetWidth\n\n\n\nNow we can use that to calculate the x value in our tween:\n\n\n\nconst track = document.querySelector('[data-draggable]')\n\nconst tl = gsap.timeline()\n\t.to(track, {\n\t\tx: () => {\n\t\t\treturn ((track.offsetWidth * 0.5) - lastItemWidth()) * -1\n\t\t},\n\t\tease: 'none' // important!\n\t})\n\n\n\nEasing\n\n\n\nWe’re also removing the easing on our timeline tween. This is very important, as the movement will be tied to the scroll position, and easing would play havoc with our calculations later on!\n\n\n\nCreating the ScrollTrigger instance\n\n\n\nWe’re going to create a ScrollTrigger instance, which will trigger the timeline animation. We’ll set the scrub value as 0. This will cause our animation to play at the rate the user scrolls. A value other than 0 creates a lag between the scroll action and the animation, which can work nicely in some instances, but won’t serve us well here.\n\n\n\nconst st = ScrollTrigger.create({\n\tanimation: tl,\n\tscrub: 0\n})\n\n\n\nOur animation timeline will start playing as soon as the user starts scrolling from the top of the page, and end when the page is scrolled all the way to the bottom. If you need anything different, you’ll need to specify start and end values on the ScrollTrigger instance too. (See the ScrollTrigger documentation for more details).\n\n\n\nCreating the Draggable instance\n\n\n\nNow we’ll create a Draggable instance. We’ll pass in our track as the first argument (the element we want to make draggable). In our options (the second argument) we’ll specify <em>x</em> for the type, as we only want it to be dragged horizontally. We can also set inertia to true. This is optional, as it requires the Inertia plugin, a premium plugin for Greensock members (but free to use on Codepen). Using Inertia mean that when the user lets go after dragging the element, it will glide to a stop in a more naturalistic way. It’s not strictly necessary for this demo, but I prefer the effect.\n\n\n\nconst draggableInstance = Draggable.create(track, {\n\ttype: 'x',\n\tinertia: true\n})\n\n\n\nNext we want to set the bounds, otherwise there’s a danger the element could be dragged right off the screen. We’ll set the minimum and maximum values the element can be dragged. We don’t want it to be dragged any further to the right than its current start position, so we’ll set minX as 0. The maxX value will in fact need to be the same value as used in our timeline tween — so how about we make a function for that:\n\n\n\nconst getDraggableWidth = () => {\n\treturn (track.offsetWidth * 0.5) - lastItemWidth()\n}\n\nconst draggableInstance = Draggable.create(track, {\n\ttype: 'x',\n\tinertia: true,\n\tbounds: {\n\t\tminX: 0,\n\t\tmaxX: getDraggableWidth() * -1\n\t},\n\tedgeResistance: 1 // Don’t allow any dragging beyond the bounds\n})\n\n\n\nWe’ll need to set edgeResistance to 1, which will prevent any dragging at all beyond our specified bounds.\n\n\n\nPutting them together\n\n\n\nNow, for the technical part! We’re going to programmatically scroll the page when the user drags the element. The first thing to do is to disable the ScrollTrigger instance when the user starts dragging the track, and re-enable it when the drag ends. We can use the onDragStart and onDragEnd options on our Draggable instance to do that:\n\n\n\nconst draggableInstance = Draggable.create(track, {\n\ttype: 'x',\n\tinertia: true,\n\tbounds: {\n\t\tminX: 0,\n\t\tmaxX: getDraggableWidth() * -1\n\t},\n\tedgeResistance: 1,\n\tonDragStart: () => st.disable(),\n\tonDragEnd: () => st.enable()\n})\n\n\n\nThen we’ll write a function that gets called on drag. We’ll get the offset position of our draggable element (using getBoundingClientRect()). We’ll also need to know the total scrollable height of the page, which will be the document height minus the viewport height. Let’s create a function for this, to keep it tidy.\n\n\n\nconst getUseableHeight = () => document.documentElement.offsetHeight - window.innerHeight\n\n\n\nWe’ll use GSAP’s mapRange() utility function to find the relative scroll position (see the documentation), and call the scroll() method on the ScrollTrigger instance to update the scroll position on drag:\n\n\n\nconst draggableInstance = Draggable.create(track, {\n\ttype: 'x',\n\tinertia: true,\n\tbounds: {\n\t\tminX: 0,\n\t\tmaxX: getDraggableWidth() * -1\n\t},\n\tedgeResistance: 1,\n\tonDragStart: () => st.disable(),\n\tonDragEnd: () => st.enable(),\n\tonDrag: () => {\n\t\tconst left = track.getBoundingClientRect().left * -1\n\t\tconst width = getDraggableWidth()\n\t\tconst useableHeight = getUseableHeight()\n\t\tconst y = gsap.utils.mapRange(0, width, 0, useableHeight, left)\n\t\t\n    st.scroll(y)\n  }\n})\n\n\n\nAs we’re using the Inertia plugin, we’ll want to call the same function during the “throw” part of the interaction — after the user lets go of the element, but while it retains momentum. So let’s write it as a separate function we can call for both:\n\n\n\nconst updatePosition = () => {\n\tconst left = track.getBoundingClientRect().left * -1\n\tconst width = getDraggableWidth()\n\tconst useableHeight = getUseableHeight()\n\tconst y = gsap.utils.mapRange(0, width, 0, useableHeight, left)\n\n\tst.scroll(y)\n}\n\nconst draggableInstance = Draggable.create(track, {\n\ttype: 'x',\n\tinertia: true,\n\tbounds: {\n\t\tminX: 0,\n\t\tmaxX: getDraggableWidth() * -1\n\t},\n\tedgeResistance: 1,\n\tonDragStart: () => st.disable(),\n\tonDragEnd: () => st.enable(),\n\tonDrag: updatePosition,\n\tonThrowUpdate: updatePosition\n})\n\n\n\nNow our scroll position and timeline track should be perfectly in sync when we scroll the page or drag the track.\n\n\n\nNavigating on click\n\n\n\nWe also want users to be able to scroll to the desired section by clicking on any of the timeline links. We could do this with JS, but we don’t necessarily need to: CSS has a property that allows smooth scrolling within the page, and it’s supported in most modern browsers (Safari is currently the exception). All we need is this one line of CSS, and our users will be scrolled smoothly to the desired section on click:\n\n\n\nhtml {\n\tscroll-behavior: smooth;\n}\n\n\n\nAccessibility\n\n\n\nIt’s good practice to consider users who may be sensitive to motion, so let’s include a prefers-reduced-motion media query to ensure that users who have specified a system-level preference for reduced motion will be jumped straight to the relevant section instead:\n\n\n\n@media (prefers-reduced-motion: no-preference) {\n\thtml {\n\t\tscroll-behavior: smooth;\n\t}\n}\n\n\n\nOur navigation currently presents a problem for users who navigate using a keyboard. When our nav overflows the viewport, some of our nav links are hidden from view, as they are offscreen. When the user tabs through the links, we need those links to be brought into view. We can attach an event listener to our track to get the scroll position of the corresponding section, and call scroll() on the ScrollTrigger instance, which will have the effect of moving the timeline too (keeping them both in sync):\n\n\n\ntrack.addEventListener('keyup', (e) => {\n\tconst id = e.target.getAttribute('href')\n\t\n\t/* Return if no section href or the user isn’t using the tab key */\n\tif (!id || e.key !== 'Tab') return\n\t\n\tconst section = document.querySelector(id)\n\t\n\t/* Get the scroll position of the section */\n\tconst y = section.getBoundingClientRect().top + window.scrollY\n\t\n\t/* Use the ScrollTrigger to scroll the window */\n\tst.scroll(y)\n})\n\n\n\nCalling scroll() also respects our users’ motion preferences — users with a reduced-motion preference will be jumped to the section instead of smoothly scrolled.\n\n\n\nSee the Pen \n  GSAP Draggable and ScrollTrigger timeline [Simple 1] by Michelle Barker (@michellebarker)\n  on CodePen.0\n\n\n\n\nAnimating the sections\n\n\n\nOur timeline should work pretty well now, but we don’t yet have any content. Let’s add a heading and image for each section, and animate them when the come into view. Here’s an example of the HTML for one section, which we can repeat for the other (adjusting the content as needed):\n\n\n\n<main>\n\t<section id=\"section_1\" style=\"--i: 0\">\n\t\t<div class=\"container\">\n\t\t\t<h2 class=\"section__heading\">\n\t\t\t\t<span>1993</span>\n\t\t\t\t<span>Pablo Honey</span>\n\t\t\t</h2>\n\t\t\t<div class=\"section__image\">\n\t\t\t\t<img src=\"https://assets.codepen.io/85648/radiohead_pablo-honey.jpg\" width=\"1200\" height=\"1200\" />\n\t\t\t</div>\n\t\t</div>\n\t</section>\n\t<!--more sections-->\n</main>\n\n\n\nI’m using display: grid to position the heading and image in a pleasing arrangement — but feel free to position them as you like. We’ll just concentrate on the JS for this part.\n\n\n\nCreating the timelines with GSAP\n\n\n\nWe’ll create a function called initSectionAnimation(). The first thing we’ll do is return early if our users prefer reduced motion. We can used a prefers-reduced-motion media query using the matchMedia method:\n\n\n\nconst prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)')\n\nconst initSectionAnimation = () => {\n\t/* Do nothing if user prefers reduced motion */\n\tif (prefersReducedMotion.matches) return\n}\n\ninitSectionAnimation()\n\n\n\nNext we’ll set our animation start state for each section:\n\n\n\nconst initSectionAnimation = () => {\n\t/* Do nothing if user prefers reduced motion */\n\tif (prefersReducedMotion.matches) return\n\t\n\tsections.forEach((section, index) => {\n\t\tconst heading = section.querySelector('h2')\n\t\tconst image = section.querySelector('.section__image')\n\t\t\n\t\t/* Set animation start state */\n\t\tgsap.set(heading, {\n\t\t\topacity: 0,\n\t\t\ty: 50\n\t\t})\n\t\tgsap.set(image, {\n\t\t\topacity: 0,\n\t\t\trotateY: 15\n\t\t})\n\t}\n}\n\n\n\nThen we’ll create a new timeline for each section, adding ScrollTrigger to the timeline itself to control when the animation is played. We can do this directly this time, rather than creating a separate ScrollTrigger instance, as we don’t need this timeline to be connected to a draggable element. (This code is all within the forEach loop.) We’ll add some tweens to the timeline to animate the heading and image into view.\n\n\n\n/* In the `forEach` loop: */\n\n/* Create the section timeline */\nconst sectionTl = gsap.timeline({\n\tscrollTrigger: {\n\t\ttrigger: section,\n\t\tstart: () => 'top center',\n\t\tend: () => `+=${window.innerHeight}`,\n\t\ttoggleActions: 'play reverse play reverse'\n\t}\n})\n\n/* Add tweens to the timeline */\nsectionTl.to(image, {\n\topacity: 1,\n\trotateY: -5,\n\tduration: 6,\n\tease: 'elastic'\n})\n.to(heading, {\n\topacity: 1,\n\ty: 0,\n\tduration: 2\n}, 0.5) // the heading tween will play 0.5 seconds from the start\n\n\n\nBy default our tweens will play one after the other. But I’m using the position parameter to specify that the heading tween should play 0.5 seconds from the beginning of the timeline, so our animations overlap.\n\n\n\nHere’s the complete demo in action:\n\n\n\nSee the Pen \n  GSAP Draggable and ScrollTrigger timeline [FINAL] by Michelle Barker (@michellebarker)\n  on CodePen.0\n\n\n\n\n\nThe post Building a Scrollable and Draggable Timeline with GSAP appeared first on Codrops.",
      "date_published": "2022-01-03T11:44:41.000Z",
      "date_modified": "2022-01-03T11:44:41.000Z",
      "_plugin": {
        "pageFilename": "f555571788e4cb3b0a2c7e58b186100b57d1f78677b79a49dff7c835d55881d6.html"
      }
    },
    {
      "id": "https://tympanus.net/codrops/?p=58199",
      "url": "https://tympanus.net/codrops/2021/12/31/a-look-back-at-2021-roundup-of-codrops-resources/",
      "title": "A Look Back at 2021: Roundup of Codrops Resources",
      "summary": "The countdown to the new year is already running! Join us for a look back at our favorite posts from 2021.\nThe post A Look Back at 2021: Roundup of Codrops Resources appeared first on Codrops.",
      "content_html": "<p>Another year has past, and oh boy, what a ride it was! </p>\n\n\n\n<p><strong>A gigantic &#8216;thank you&#8217; to all our readers, supporters, writers and sponsors! </strong></p>\n\n\n\n<p>I hope you enjoy this <a href=\"https://tympanus.net/codrops2021\">selection</a> of Codrops articles, tutorials and experiments that were written and coded this year! </p>\n\n\n\n<p>Happy 2022!</p>\n\n\n\n<p><em>Your Codrops team </em></p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/31/a-look-back-at-2021-roundup-of-codrops-resources/\">A Look Back at 2021: Roundup of Codrops Resources</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>",
      "content_text": "Another year has past, and oh boy, what a ride it was! \n\n\n\nA gigantic ‘thank you’ to all our readers, supporters, writers and sponsors! \n\n\n\nI hope you enjoy this selection of Codrops articles, tutorials and experiments that were written and coded this year! \n\n\n\nHappy 2022!\n\n\n\nYour Codrops team \nThe post A Look Back at 2021: Roundup of Codrops Resources appeared first on Codrops.",
      "date_published": "2021-12-31T18:33:54.000Z",
      "date_modified": "2021-12-31T18:33:54.000Z",
      "_plugin": {
        "pageFilename": "09f1c8e18db9052c3089b9a8854feaf4bf64f1d3b49f47eafe9ea2eac9b9e13a.html"
      }
    },
    {
      "id": "https://tympanus.net/codrops/?post_type=collective&p=58162",
      "url": "https://tympanus.net/codrops/collective/collective-693/",
      "title": "Collective #693",
      "summary": "Typejuice * PrinceJS * CSS in 2022 * React Native Skia * Smoothly Reverting CSS Animations\nThe post Collective #693 appeared first on Codrops.",
      "content_html": "<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://virtual.plus-ex.com/\"><img loading=\"lazy\" width=\"350\" height=\"219\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_wotw.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58177\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://virtual.plus-ex.com/\">Inspirational Website of the Week: Plus X Virtual Showroom</a></h2>\n<p class=\"ct-coll-p\">Sharp, bold and slick. This website sets their own unique style and provides a fresh and fast experience.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://virtual.plus-ex.com/\">Get inspired</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n        <a class=\"ct-coll-thumb\" href=\"https://www.elegantthemes.com/affiliates/idevaffiliate.php?id=17972_5_1_19\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\"><img loading=\"lazy\" width=\"350\" height=\"236\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/Divi_new.jpg\" alt=\"Collective 668 image\" class=\"wp-image-54591\"></a></p>\n<div class=\"ct-coll-sponsorship\">Our Sponsor</div>\n<h2><a href=\"https://www.elegantthemes.com/affiliates/idevaffiliate.php?id=17972_5_1_19\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\">Instant websites for your clients with Divi Layout Packs</a></h2>\n<p class=\"ct-coll-p\">With the Divi Layout Packs you&#8217;ll get world-class designs ready to be used for your client projects.</p>\n<p>        <a class=\"ct-coll-link\" href=\"https://www.elegantthemes.com/affiliates/idevaffiliate.php?id=17972_5_1_19\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.techradar.com/news/the-story-of-the-fight-to-archive-the-internet\"><img loading=\"lazy\" width=\"350\" height=\"247\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_archive.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58184\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.techradar.com/news/the-story-of-the-fight-to-archive-the-internet\">The story of the fight to archive the internet</a></h2>\n<p class=\"ct-coll-p\">Learn why the founder of the Internet Archive says his project is under threat.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.techradar.com/news/the-story-of-the-fight-to-archive-the-internet\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.bram.us/2021/12/21/the-css-has-selector-is-way-more-than-a-parent-selector/\"><img loading=\"lazy\" width=\"350\" height=\"252\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_has.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58165\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.bram.us/2021/12/21/the-css-has-selector-is-way-more-than-a-parent-selector/\">The CSS :has() selector is way more than a “Parent Selector”</a></h2>\n<p class=\"ct-coll-p\">Bramus on the new and powerful :has() selector.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.bram.us/2021/12/21/the-css-has-selector-is-way-more-than-a-parent-selector/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://dmitripavlutin.com/javascript-array-group/\"><img loading=\"lazy\" width=\"350\" height=\"193\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_grouping.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58169\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://dmitripavlutin.com/javascript-array-group/\">Array Grouping in JavaScript</a></h2>\n<p class=\"ct-coll-p\">Learn about the new array.groupBy() and array.groupByToMap() methods that let you group an array by a certain criteria.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://dmitripavlutin.com/javascript-array-group/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.eff.org/deeplinks/2021/12/chrome-users-beware-manifest-v3-deceitful-and-threatening\"><img loading=\"lazy\" width=\"350\" height=\"177\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_google.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58167\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.eff.org/deeplinks/2021/12/chrome-users-beware-manifest-v3-deceitful-and-threatening\">Chrome Users Beware: Manifest V3 is Deceitful and Threatening</a></h2>\n<p class=\"ct-coll-p\">Like FLoC and Privacy Sandbox before it, Google Chrome’s Manifest V3 is another example of the inherent conflict of interest that comes from Google controlling both the dominant web browser and one of the largest internet advertising networks.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.eff.org/deeplinks/2021/12/chrome-users-beware-manifest-v3-deceitful-and-threatening\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://github.com/nolanlawson/fuite\"><img loading=\"lazy\" width=\"350\" height=\"226\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_fuite.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58185\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://github.com/nolanlawson/fuite\">Fuite</a></h2>\n<p class=\"ct-coll-p\">Fuite is a tool for finding memory leaks in web apps. By Nolan Lawson.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://github.com/nolanlawson/fuite\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://edgeandnode.com/blog/defining-the-web3-stack\"><img loading=\"lazy\" width=\"350\" height=\"285\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_web3.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58172\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://edgeandnode.com/blog/defining-the-web3-stack\">Defining the web3 stack</a></h2>\n<p class=\"ct-coll-p\">Nader Dabit identifies the building blocks of the web3 technology stack in an introductory guide.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://edgeandnode.com/blog/defining-the-web3-stack\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://blog.openreplay.com/is-it-time-for-the-javascript-temporal-api\"><img loading=\"lazy\" width=\"350\" height=\"196\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_temporal.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58180\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://blog.openreplay.com/is-it-time-for-the-javascript-temporal-api\">Is It Time for the JavaScript Temporal API?</a></h2>\n<p class=\"ct-coll-p\">Craig Buckler&#8217;s introduction to the Temporal API, a proposal that is already in stage 3 of approval.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://blog.openreplay.com/is-it-time-for-the-javascript-temporal-api\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/shuding_/status/1475916082875666441\"><img loading=\"lazy\" width=\"350\" height=\"282\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_globe.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58175\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://twitter.com/shuding_/status/1475916082875666441\">Globe Lib</a></h2>\n<p class=\"ct-coll-p\">Shu Ding&#8217;s thread where he explains how he made a tiny globe library called <a href=\"https://github.com/shuding/cobe\">Cobe</a> with WebGL and shaders.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/shuding_/status/1475916082875666441\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://vplayground.netlify.app/\"><img loading=\"lazy\" width=\"350\" height=\"320\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_playground.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58189\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_playground.jpg 350w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_playground-328x300.jpg 328w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://vplayground.netlify.app/\">#Playground</a></h2>\n<p class=\"ct-coll-p\">A beautiful and playful 3D world made by Achmat Fauzi.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://vplayground.netlify.app/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://gnikoloff.github.io/webgpu-dojo/\"><img loading=\"lazy\" width=\"350\" height=\"195\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_dojo.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58179\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://gnikoloff.github.io/webgpu-dojo/\">WebGPU Sketch Dojo</a></h2>\n<p class=\"ct-coll-p\">A collection of experiments with the emerging WebGPU API. Created by Georgi Nikolov.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://gnikoloff.github.io/webgpu-dojo/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://css-tricks.com/consistent-fluidly-scaling-type-and-spacing/\"><img loading=\"lazy\" width=\"350\" height=\"210\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_typescale.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58168\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://css-tricks.com/consistent-fluidly-scaling-type-and-spacing/\">Consistent, Fluidly Scaling Type and Spacing</a></h2>\n<p class=\"ct-coll-p\">Andy Bell on using a sizing scale and fluid type for making a website better.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://css-tricks.com/consistent-fluidly-scaling-type-and-spacing/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://dragonman225.js.org/curved-arrows.html\"><img loading=\"lazy\" width=\"350\" height=\"178\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_arrows.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58163\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://dragonman225.js.org/curved-arrows.html\">How to Draw S-Curved Arrows Between Boxes / Rectangles</a></h2>\n<p class=\"ct-coll-p\">Alexander Wang shares how he went about drawing arrows between blocks for mind maps, flowcharts, etc.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://dragonman225.js.org/curved-arrows.html\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://pragmaticpineapple.com/smoothly-reverting-css-animations/\"><img loading=\"lazy\" width=\"350\" height=\"232\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_reverse.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58170\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://pragmaticpineapple.com/smoothly-reverting-css-animations/\">Smoothly Reverting CSS Animations</a></h2>\n<p class=\"ct-coll-p\">A great technique on how to revert a CSS transition when hover is over. By Nikola Đuza.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://pragmaticpineapple.com/smoothly-reverting-css-animations/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://shopify.github.io/react-native-skia/\"><img loading=\"lazy\" width=\"350\" height=\"196\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_skia.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58171\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://shopify.github.io/react-native-skia/\">React Native Skia (alpha)</a></h2>\n<p class=\"ct-coll-p\">React Native Skia brings the <a href=\"https://skia.org/\">Skia Graphics Library</a> to React Native.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://shopify.github.io/react-native-skia/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.bram.us/2021/12/27/css-in-2022/\"><img loading=\"lazy\" width=\"350\" height=\"241\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_css2022.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58166\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.bram.us/2021/12/27/css-in-2022/\">CSS in 2022</a></h2>\n<p class=\"ct-coll-p\">Bramus shares this great list of personal predictions for CSS in 2022.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.bram.us/2021/12/27/css-in-2022/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://princejs.com/\"><img loading=\"lazy\" width=\"350\" height=\"209\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_prince.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58176\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://princejs.com/\">PrinceJS</a></h2>\n<p class=\"ct-coll-p\">An amazing &#8220;Prince of Persia&#8221; reimplementation written in HTML5/JavaScript. Check out the <a href=\"https://github.com/ultrabolido/PrinceJS\">GitHub repo</a>.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://princejs.com/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://glitchyimage.com/\"><img loading=\"lazy\" width=\"350\" height=\"277\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_glitch.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58188\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://glitchyimage.com/\">Glitch Image Generator</a></h2>\n<p class=\"ct-coll-p\">Generate and save unique glitchy images. Made by Adam Fuhrer.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://glitchyimage.com/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://github.com/galvez/typejuice\"><img loading=\"lazy\" width=\"350\" height=\"205\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_docs.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58174\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://github.com/galvez/typejuice\">Typejuice</a></h2>\n<p class=\"ct-coll-p\">Typejuice is a documentation generator for TypeScript Declaration Files inspired by godoc.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://github.com/galvez/typejuice\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://lynnandtonic.com/\"><img loading=\"lazy\" width=\"350\" height=\"252\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_lynn.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58178\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://lynnandtonic.com/\">Lynn Fisher</a></h2>\n<p class=\"ct-coll-p\">Lynn Fisher&#8217;s epic annual portfolio refresh! Try resizing your browser.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://lynnandtonic.com/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.jayfreestone.com/writing/wrappping-text-inside-svg-css/\"><img loading=\"lazy\" width=\"350\" height=\"249\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_svg.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58173\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.jayfreestone.com/writing/wrappping-text-inside-svg-css/\">Wrapping text inside an SVG using CSS</a></h2>\n<p class=\"ct-coll-p\">Jay Freestone explains how to use two SVGs and `shape-outside` to wrap text inside a shape.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.jayfreestone.com/writing/wrappping-text-inside-svg-css/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fluttermix.com/\"><img loading=\"lazy\" width=\"350\" height=\"258\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_mix.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58164\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.fluttermix.com/\">Mix</a></h2>\n<p class=\"ct-coll-p\">Mix is an expressive way to effortlessly build design systems in Flutter.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fluttermix.com/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/\"><img loading=\"lazy\" width=\"350\" height=\"262\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_column.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58186\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/\">Alternate Column Scroll Animation</a></h2>\n<p class=\"ct-coll-p\">A grid layout with columns that scroll in opposite directions and a content preview animation for the image.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/27/three-js-animation-with-k-d-christmas-tree-algorithm/\"><img loading=\"lazy\" width=\"350\" height=\"248\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_akella.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58183\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/12/27/three-js-animation-with-k-d-christmas-tree-algorithm/\">Three.js Animation with K-d (Christmas) Tree Algorithm</a></h2>\n<p class=\"ct-coll-p\">In this coding tutorial, you&#8217;ll learn how to recreate the animation seen on the website of ONE-OFF in Three.js using the K-d tree algorithm.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/27/three-js-animation-with-k-d-christmas-tree-algorithm/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/28/adding-a-persistence-effect-to-three-js-scenes/\"><img loading=\"lazy\" width=\"350\" height=\"261\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_persistence.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58187\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/12/28/adding-a-persistence-effect-to-three-js-scenes/\">Adding a Persistence Effect to Three.js Scenes</a></h2>\n<p class=\"ct-coll-p\">Learn how to enhance your Three.js scenes with postprocessing via framebuffers.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/28/adding-a-persistence-effect-to-three-js-scenes/\">Check it out</a><br />\n</article>\n</div>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/collective/collective-693/\">Collective #693</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>",
      "content_text": "\n\n\n \nInspirational Website of the Week: Plus X Virtual Showroom\nSharp, bold and slick. This website sets their own unique style and provides a fresh and fast experience.\nGet inspired\n\n\n\n\n\n        \nOur Sponsor\nInstant websites for your clients with Divi Layout Packs\nWith the Divi Layout Packs you’ll get world-class designs ready to be used for your client projects.\n        Check it out\n\n\n\n\n\n \nThe story of the fight to archive the internet\nLearn why the founder of the Internet Archive says his project is under threat.\nCheck it out\n\n\n\n\n\n \nThe CSS :has() selector is way more than a “Parent Selector”\nBramus on the new and powerful :has() selector.\nRead it\n\n\n\n\n\n \nArray Grouping in JavaScript\nLearn about the new array.groupBy() and array.groupByToMap() methods that let you group an array by a certain criteria.\nRead it\n\n\n\n\n\n \nChrome Users Beware: Manifest V3 is Deceitful and Threatening\nLike FLoC and Privacy Sandbox before it, Google Chrome’s Manifest V3 is another example of the inherent conflict of interest that comes from Google controlling both the dominant web browser and one of the largest internet advertising networks.\nCheck it out\n\n\n\n\n\n \nFuite\nFuite is a tool for finding memory leaks in web apps. By Nolan Lawson.\nCheck it out\n\n\n\n\n\n \nDefining the web3 stack\nNader Dabit identifies the building blocks of the web3 technology stack in an introductory guide.\nRead it\n\n\n\n\n\n \nIs It Time for the JavaScript Temporal API?\nCraig Buckler’s introduction to the Temporal API, a proposal that is already in stage 3 of approval.\nRead it\n\n\n\n\n\n \nGlobe Lib\nShu Ding’s thread where he explains how he made a tiny globe library called Cobe with WebGL and shaders.\nCheck it out\n\n\n\n\n\n \n#Playground\nA beautiful and playful 3D world made by Achmat Fauzi.\nCheck it out\n\n\n\n\n\n \nWebGPU Sketch Dojo\nA collection of experiments with the emerging WebGPU API. Created by Georgi Nikolov.\nCheck it out\n\n\n\n\n\n \nConsistent, Fluidly Scaling Type and Spacing\nAndy Bell on using a sizing scale and fluid type for making a website better.\nRead it\n\n\n\n\n\n \nHow to Draw S-Curved Arrows Between Boxes / Rectangles\nAlexander Wang shares how he went about drawing arrows between blocks for mind maps, flowcharts, etc.\nCheck it out\n\n\n\n\n\n \nSmoothly Reverting CSS Animations\nA great technique on how to revert a CSS transition when hover is over. By Nikola Đuza.\nCheck it out\n\n\n\n\n\n \nReact Native Skia (alpha)\nReact Native Skia brings the Skia Graphics Library to React Native.\nCheck it out\n\n\n\n\n\n \nCSS in 2022\nBramus shares this great list of personal predictions for CSS in 2022.\nCheck it out\n\n\n\n\n\n \nPrinceJS\nAn amazing “Prince of Persia” reimplementation written in HTML5/JavaScript. Check out the GitHub repo.\nCheck it out\n\n\n\n\n\n \nGlitch Image Generator\nGenerate and save unique glitchy images. Made by Adam Fuhrer.\nCheck it out\n\n\n\n\n\n \nTypejuice\nTypejuice is a documentation generator for TypeScript Declaration Files inspired by godoc.\nCheck it out\n\n\n\n\n\n \nLynn Fisher\nLynn Fisher’s epic annual portfolio refresh! Try resizing your browser.\nCheck it out\n\n\n\n\n\n \nWrapping text inside an SVG using CSS\nJay Freestone explains how to use two SVGs and `shape-outside` to wrap text inside a shape.\nCheck it out\n\n\n\n\n\n \nMix\nMix is an expressive way to effortlessly build design systems in Flutter.\nCheck it out\n\n\n\n\n\n \nFrom Our Blog\nAlternate Column Scroll Animation\nA grid layout with columns that scroll in opposite directions and a content preview animation for the image.\nCheck it out\n\n\n\n\n\n \nFrom Our Blog\nThree.js Animation with K-d (Christmas) Tree Algorithm\nIn this coding tutorial, you’ll learn how to recreate the animation seen on the website of ONE-OFF in Three.js using the K-d tree algorithm.\nCheck it out\n\n\n\n\n\n \nFrom Our Blog\nAdding a Persistence Effect to Three.js Scenes\nLearn how to enhance your Three.js scenes with postprocessing via framebuffers.\nCheck it out\n\n\nThe post Collective #693 appeared first on Codrops.",
      "date_published": "2021-12-30T12:03:39.000Z",
      "date_modified": "2021-12-30T12:03:39.000Z",
      "_plugin": {
        "pageFilename": "d2e36d079ed0d87354d791f8b034b89b3026db0dbc4496d3105a6c2d0bb399e4.html"
      }
    },
    {
      "id": "https://tympanus.net/codrops/?p=57993",
      "url": "https://tympanus.net/codrops/2021/12/28/adding-a-persistence-effect-to-three-js-scenes/",
      "title": "Adding a Persistence Effect to Three.js Scenes",
      "summary": "Learn how to enhance your Three.js scenes with postprocessing via framebuffers.\nThe post Adding a Persistence Effect to Three.js Scenes appeared first on Codrops.",
      "content_html": "<p>If you have written any WebGL applications in the past, be it using the vanilla API or a helper library such as Three.js, you know that you set up the things you want to render, perhaps include different types of cameras, animations and fancy lighting and voilà, the results are rendered to the <strong>default WebGL framebuffer</strong>, which is the device screen.</p>\n\n\n\n<p>Framebuffers are a key feature in WebGL when it comes to creating advanced graphical effects such as depth-of-field, bloom, film grain or various types of anti-aliasing. They allow us to “post-process” our scenes, applying different effects on them once rendered.</p>\n\n\n\n<p><strong>This article assumes some intermediate knowledge of WebGL with Three.js. The core ideas behind framebuffers have already been covered in-depth in <a href=\"https://tympanus.net/codrops/2021/07/21/creating-a-typography-motion-trail-effect-with-three-js/\">this article</a> here on Codrops. Please make sure to read it first, as the persistence effect we will be achieving directly builds on top of these ideas.</strong></p>\n\n\n\n<h2>Persistence effect in a nutshell</h2>\n\n\n\n<p>I call it persistence, yet am not really sure if it&#8217;s the best name for this effect and I am simply unaware of the proper way to call it. What is it useful for?</p>\n\n\n\n<p>We can use it subtly to blend each previous and current animation frame together or perhaps a bit less subtly to hide bad framerate. Looking at video games like Grand Theft Auto, we can simulate our characters getting drunk. Another thing that comes to mind is rendering the view from the cockpit of a spacecraft when traveling at supersonic speed. Or, since the effect is just so good looking in my opinion, use it for all kinds of audio visualisers, cool website effects and so on.</p>\n\n\n\n<p>To achieve it, first we would need to create 2 WebGL framebuffers. Since we will be using threejs for this demo, we would have to use <a href=\"https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget\">THREE.WebGLRenderTarget</a>. We will call them <strong>Framebuffer 1</strong> and <strong>Framebuffer 2</strong> from now on and they will have the same dimensions as the size of the canvas we are rendering to.</p>\n\n\n\n<p>To draw one frame of our animation with persistence, we will need to:</p>\n\n\n\n<ol><li><span style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen-Sans, Ubuntu, Cantarell, &quot;Helvetica Neue&quot;, sans-serif;\">Render the contents of <strong>Framebuffer 1 </strong>to <strong>Framebuffer 2</strong></span> with a shader that fades to a certain color. For the purposes of our demo, we will use a pure black color with full opacity</li><li>Render our threejs scene that holds the actual meshes we want to show on the screen to <strong>Framebuffer 2</strong> as well</li><li>Render the contents of <strong>Framebuffer 2</strong> to the <strong>Default WebGL framebuffer (device screen)</strong></li><li>Swap <strong>Framebuffer 1</strong> with <strong>Framebuffer 2</strong></li></ol>\n\n\n\n<p>Afterwards, for each new animation frame, we will need to repeat the above steps. Let&#8217;s illustrate each step:</p>\n\n\n\n<p>Here is a visualisation of our framebuffers. WebGL gives us the <strong>Default framebuffer</strong>, represented by the device screen, automatically. It&#8217;s up to us as developers to manually create <strong>Framebuffer 1</strong> and <strong>Framebuffer 2.</strong> No animation or rendering has happened yet, so the pixel contents of all 3 framebuffers are empty.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-1-800x556.png\" alt=\"\" class=\"wp-image-57994\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-1-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-1-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-1-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-1.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Our 2 manually created framebuffers on the left, the default device screen framebuffer on the right. Nothing has been drawn yet.</figcaption></figure>\n\n\n\n<p><strong>Step 1</strong>: we need to render the contents of <strong>Framebuffer 1 </strong>to <strong>Framebuffer 2</strong> with a shader that fades to a certain color. As said, we will use a black color, but for illustration purposes I am fading out to transparent white color with opacity 0.2. As <strong>Framebuffer 1 </strong>is empty, this will result in empty <strong>Framebuffer 2</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-2-800x556.png\" alt=\"\" class=\"wp-image-57996\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-2-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-2-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-2-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-2.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Even though we have rendered Framebuffer 1 to Framebuffer 2, at this point we still have framebuffers with empty pixel contents.</figcaption></figure>\n\n\n\n<p><strong>Step 2</strong>: we need to render our threejs scene that holds our meshes / cameras / lighting / etc to <strong>Framebuffer 2</strong>. <strong>Please notice that both Step 1 and Step 2 render <strong>on top of each other</strong> to Framebuffer 2.</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-3-800x556.png\" alt=\"\" class=\"wp-image-57997\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-3-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-3-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-3-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-3.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Our threejs scene rendered to Framebuffer 2.</figcaption></figure>\n\n\n\n<p><strong>Step 3</strong>: After we have successfully rendered <strong>Step 1</strong> and <strong>Step 2</strong> to <strong>Framebuffer 2</strong>, we need to render <strong>Framebuffer 2</strong> itself to the <strong>Default framebuffer</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-4-800x556.png\" alt=\"\" class=\"wp-image-57998\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-4-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-4-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-4-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-4.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Final result rendered to the device screen.</figcaption></figure>\n\n\n\n<p><strong>Step 4</strong>: Now we need to swap <strong>Framebuffer 1</strong> with <strong>Framebuffer 2</strong>. We then clear <strong>Framebuffer 1</strong> and the <strong>Default framebuffer</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-5-1-800x556.png\" alt=\"\" class=\"wp-image-58000\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-5-1-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-5-1-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-5-1-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-5-1.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Framebuffer 1 and Framebuffer 2 swapped.</figcaption></figure>\n\n\n\n<p>Now comes the interesting part, since <strong>Framebuffer 1</strong> is no longer empty. Let&#8217;s go over each step once again:</p>\n\n\n\n<p><strong>Step 1</strong>: we need to render the contents of <strong>Framebuffer 1 </strong>to <strong>Framebuffer 2</strong> with a shader that fades to a certain color. Let&#8217;s assume a transparent white color with <strong>0.2 opacity</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-6-800x556.png\" alt=\"\" class=\"wp-image-58001\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-6-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-6-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-6-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-6.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>We have rendered and faded out the pixel contents of Framebuffer 1 to Framebuffer 2 by a factor of 0.2.</figcaption></figure>\n\n\n\n<p><strong>Step 2</strong>: we need to render our threejs scene to <strong>Framebuffer 2</strong>. For illustration purposes, let&#8217;s assume we have an animation that slowly moves our 3D cube to the right, meaning that now it will be a few pixels to the right:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-7-800x556.png\" alt=\"\" class=\"wp-image-58002\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-7-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-7-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-7-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-7.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Once again, we render both Framebuffer 1 and our threejs scene to Framebuffer 2. Notice how the threejs scene is rendered on top of the faded out contents of Framebuffer 1.</figcaption></figure>\n\n\n\n<p><strong>Step 3</strong>: After we have successfully rendered <strong>Step 1</strong> and <strong>Step 2</strong> to <strong>Framebuffer 2</strong>, we need to render <strong>Framebuffer 2</strong> itself to the <strong>Default framebuffer</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-8-800x556.png\" alt=\"\" class=\"wp-image-58003\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-8-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-8-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-8-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-8.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>The pixel contents of Framebuffer 2 copied over to the device screen.</figcaption></figure>\n\n\n\n<p><strong>Step 4</strong>: Now we need to swap <strong>Framebuffer 1</strong> with <strong>Framebuffer 2</strong>. We then clear <strong>Framebuffer 1</strong> and the <strong>Default framebuffer</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-9-800x556.png\" alt=\"\" class=\"wp-image-58005\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-9-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-9-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-9-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-9.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Rinse and repeat. Back to Step 1.</figcaption></figure>\n\n\n\n<p>I hope you can see a pattern emerging. If we repeat this process enough times, we will start accumulating each new frame to the previous faded one. Here is how it would look if we repeat enough times:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-10-800x556.png\" alt=\"\" class=\"wp-image-58006\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-10-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-10-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-10-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-10.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Postprocessing on our threejs scene</figcaption></figure>\n\n\n\n<p>Here is the demo we will build in this article. The result of the repeated enough times process above is evident:</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"611\" height=\"600\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/exercise-preview-611x600.png\" alt=\"\" class=\"wp-image-58028\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/exercise-preview-611x600.png 611w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/exercise-preview-306x300.png 306w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/exercise-preview.png 745w\" sizes=\"(max-width: 611px) 100vw, 611px\" /><figcaption>Notice the accumulated trails. At every animation loop, we are repeating step 1 to 4.</figcaption></figure></div>\n\n\n\n<p>So with this theory out of the way, let&#8217;s create this effect with threejs!</p>\n\n\n\n<h2>Our skeleton app</h2>\n\n\n\n<p>Let&#8217;s write a simple threejs app that will animate a bunch of objects around the screen and use perspective camera to look at them. I will not explain the code for my example here, as it does not really matter what we render, as long as there is some animation present so things move and we can observe the persistence.</p>\n\n\n\n<p>I encourage you to disregard my example and draw something else yourself. Even the most basic spinning cube that moves around the screen will be enough. That being said, here is my scene:</p>\n\n\n\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"js,result\" data-slug-hash=\"abLJrEX\" data-user=\"gbnikolov\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/gbnikolov/pen/abLJrEX\">\n  1. Skeleton app</a> by Georgi Nikoloff (<a href=\"https://codepen.io/gbnikolov\">@gbnikolov</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p>The important thing to keep in mind here is that this demo renders to the default framebuffer, represented by the device screen, that WebGL automatically gives us. There are no extra framebuffers involved in this demo up to this point.</p>\n\n\n\n<h2>Achieving the persistence</h2>\n\n\n\n<p>Let&#8217;s add the code needed to achieve actual persistence. We will start by introducing a <a href=\"https://threejs.org/docs/?q=orthogr#api/en/cameras/OrthographicCamera\">THREE.OrthographicCamera</a>.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Orthographic camera can be useful for rendering 2D scenes and UI elements, amongst other things.</p><cite><a href=\"https://threejs.org/docs/?q=orth#api/en/cameras/OrthographicCamera\">threejs docs</a></cite></blockquote>\n\n\n\n<p>Remember, framebuffers allow us to render to image buffers in the video card’s memory instead of the device screen. These image buffers are represented by the <a href=\"https://threejs.org/docs/?q=Texture#api/en/textures/Texture\">THREE.Texture</a> class and are automatically created for us when we create our <strong>Framebuffer 1</strong> and <strong>Framebuffer 2</strong> by instantiating a new <a href=\"https://threejs.org/docs/?q=webglre#api/en/renderers/WebGLRenderTarget\">THREE.WebGLRenderTarget</a>. In order to display these textures back to the device screen, we need to create two 2D fullscreen quads that span the width and height of our monitor. Since these quads will be 2D, THREE.OrthographicCamera is best suited to display them.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const leftScreenBorder = -innerWidth / 2\nconst rightScreenBorder = innerWidth / 2\nconst topScreenBorder = -innerHeight / 2\nconst bottomScreenBorder = innerHeight / 2\nconst near = -100\nconst far = 100\nconst orthoCamera = new THREE.OrthographicCamera(\n  leftScreenBorder,\n  rightScreenBorder,\n  topScreenBorder,\n  bottomScreenBorder,\n  near,\n  far\n)\northoCamera.position.z = -10\northoCamera.lookAt(new THREE.Vector3(0, 0, 0))</code></pre>\n\n\n\n<p>As a next step, let&#8217;s create a fullscreen quad geometry using <a href=\"https://threejs.org/docs/?q=PlaneG#api/en/geometries/PlaneGeometry\">THREE.PlaneGeometry</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const fullscreenQuadGeometry = new THREE.PlaneGeometry(innerWidth, innerHeight)</code></pre>\n\n\n\n<p>Using our newly created 2D quad geometry, let&#8217;s create two fullscreen planes. I will call them <code>fadePlane</code> and <code>resultPlane</code>. They will use <a href=\"https://threejs.org/docs/?q=ShaderMaterial#api/en/materials/ShaderMaterial\">THREE.ShaderMaterial</a> and <a href=\"https://threejs.org/docs/?q=MeshBasicMaterial#api/en/materials/MeshBasicMaterial\">THREE.MeshBasicMaterial</a> respectively:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// To achieve the fading out to black, we will use THREE.ShaderMaterial\nconst fadeMaterial = new THREE.ShaderMaterial({\n  // Pass the texture result of our rendering to Framebuffer 1 as uniform variable\n  uniforms: {\n    inputTexture: { value: null }\n  },\n  vertexShader: `\n    // Declare a varying variable for texture coordinates\n    varying vec2 vUv;\n\n    void main () {\n      // Set each vertex position according to the\n      // orthographic camera position and projection\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  \n      // Pass the plane texture coordinates as interpolated varying\n      // variable to the fragment shader\n      vUv = uv;\n    }\n  `,\n  fragmentShader: `\n    // Pass the texture from Framebuffer 1\n    uniform sampler2D inputTexture;\n\n    // Consume the interpolated texture coordinates\n    varying vec2 vUv;\n\n    void main () {\n      // Get pixel color from texture\n      vec4 texColor = texture2D(inputTexture, vUv);\n\n      // Our fade-out color\n      vec4 fadeColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n      // this step achieves the actual fading out\n      // mix texColor into fadeColor by a factor of 0.05\n      // you can change the value of the factor and see\n      // the result will change accordingly\n      gl_FragColor = mix(texColor, fadeColor, 0.05);\n    }\n  `\n})\n\n// Create our fadePlane\nconst fadePlane = new THREE.Mesh(\n  fullscreenQuadGeometry,\n  fadeMaterial\n)\n\n// create our resultPlane\n// Please notice we don&#039;t use fancy shader materials for resultPlane\n// We will use it simply to copy the contents of fadePlane to the device screen\n// So we can just use the .map property of THREE.MeshBasicMaterial\nconst resultMaterial = new THREE.MeshBasicMaterial({ map: null })\nconst resultPlane = new THREE.Mesh(\n  fullscreenQuadGeometry,\n  resultMaterial\n)</code></pre>\n\n\n\n<p>We will use <code>fadePlane</code> to perform <strong>step 1</strong> and <strong>step 2</strong> from the list above (rendering the previous frame represented by <strong>Framebuffer 1</strong>, fading it out to black color and finally rendering our original threejs scene on top). We will render to <strong>Framebuffer 2</strong> and update its corresponding <code>THREE.Texture</code>.</p>\n\n\n\n<p>We will use the resulting texture of <strong>Framebuffer 2</strong> as an input to <code>&lt;strong&gt;resultPlane&lt;/strong&gt;</code>. This time, we will render to the  device screen. We will essentially copy the contents of <strong>Framebuffer 2 </strong>to the <strong>Default Framebuffer</strong> <strong>(device screen)</strong>, thus achieving <strong>step 3</strong>.</p>\n\n\n\n<p>Up next, let&#8217;s actually create our <strong>Framebuffer 1</strong> and <strong>Framebuffer</strong> <strong>2</strong>. They are represented by <a href=\"https://threejs.org/docs/?q=webglrend#api/en/renderers/WebGLRenderTarget\">THREE.WebGLRenderTarget</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Create two extra framebuffers manually\n// It is important we use let instead of const variables,\n// as we will need to swap them as discussed in Step 4!\nlet framebuffer1 = new THREE.WebGLRenderTarget(innerWidth, innerHeight)\nlet framebuffer2 = new THREE.WebGLRenderTarget(innerWidth, innerHeight)\n\n// Before we start using these framebuffers by rendering to them,\n// let&#039;s explicitly clear their pixel contents to #111111\n// If we don&#039;t do this, our persistence effect will end up wrong,\n// due to how accumulation between step 1 and 3 works. \n// The first frame will never fade out when we mix Framebuffer 1 to\n// Framebuffer 2 and will be always visible.\n// This bug is better observed, rather then explained, so please\n// make sure to comment out these lines and see the change for yourself.\nrenderer.setClearColor(0x111111)\nrenderer.setRenderTarget(framebuffer1)\nrenderer.clearColor()\nrenderer.setRenderTarget(framebuffer2)\nrenderer.clearColor()</code></pre>\n\n\n\n<p>As you might have guessed already, we will achieve <strong>step 4</strong> as described above by swapping <code>framebuffer1</code> and <code>framebuffer2</code> at the end of each animation frame.</p>\n\n\n\n<p>At this point we have everything ready and initialised: our THREE.OrthographicCamera, our 2 quads that will fade out and copy the contents of our framebuffers to the device screens and, of course, the framebuffers themselves. It should be noted that up until this point we did not change our animation loop code and logic, rather we just created these new things at the initialisation step of our program. Let&#8217;s now put them to practice in our rendering loop.</p>\n\n\n\n<p>Here is how my function that is executed on each animation frame looks like right now. Taken directly from the codepen example above:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function drawFrame (timeElapsed) {\n  for (let i = 0; i &lt; meshes.length; i++) {\n     const mesh = meshes&#091;i]\n     // some animation logic that moves each mesh around the screen\n     // with different radius, offset and speed\n     // ...\n  }\n  // Render our entire scene to the device screen, represented by\n  // the default WebGL framebuffer\n  renderer.render(scene, perspectiveCamera)\n}</code></pre>\n\n\n\n<p>If you have written any threejs code before, this <code>drawFrame</code> method should not be any news to you. We apply some animation logic to our meshes and then render them to the device screen by calling <code>renderer.render()</code> on the whole scene with the appropriate camera.</p>\n\n\n\n<p>Let&#8217;s incorporate our steps 1 to 4 from above and achieve our persistence:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function drawFrame (timeElapsed) {\n  // The for loop remains unchanged from the previous snippet\n  for (let i = 0; i &lt; meshes.length; i++) {\n     // ...\n  }\n\n  // By default, threejs clears the pixel color buffer when\n  // calling renderer.render()\n  // We want to disable it explicitly, since both step 1 and step 2 render\n  // to Framebuffer 2 accumulatively\n  renderer.autoClearColor = false\n\n  // Set Framebuffer 2 as active WebGL framebuffer to render to\n  renderer.setRenderTarget(framebuffer2)\n\n  // &lt;strong&gt;Step 1&lt;/strong&gt;\n  // Render the image buffer associated with Framebuffer 1 to Framebuffer 2\n  // fading it out to pure black by a factor of 0.05 in the fadeMaterial\n  // fragment shader\n  fadePlane.material.uniforms.inputTexture.value = framebuffer1.texture\n  renderer.render(fadePlane, orthoCamera)\n\n  // &lt;strong&gt;Step 2&lt;/strong&gt;\n  // Render our entire scene to Framebuffer 2, on top of the faded out \n  // texture of Framebuffer 1.\n  renderer.render(scene, perspectiveCamera)\n\n  // Set the Default Framebuffer (device screen) represented by null as active WebGL framebuffer to render to.\n  renderer.setRenderTarget(null)\n  \n  // &lt;strong&gt;Step 3&lt;/strong&gt;\n  // Copy the pixel contents of Framebuffer 2 by passing them as a texture\n  // to resultPlane and rendering it to the Default Framebuffer (device screen)\n  resultPlane.material.map = framebuffer2.texture\n  renderer.render(resultPlane, orthoCamera)\n\n  // &lt;strong&gt;Step 4&lt;/strong&gt;\n  // Swap Framebuffer 1 and Framebuffer 2\n  const swap = framebuffer1\n  framebuffer1 = framebuffer2\n  framebuffer2 = swap\n\n  // End of the effect\n  // When the next animation frame is executed, the meshes will be animated\n  // and the whole process will repeat\n}</code></pre>\n\n\n\n<p>And with these changes out of the way, here is our updated example using persistence:</p>\n\n\n\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"js,result\" data-slug-hash=\"eYGvwBw\" data-user=\"gbnikolov\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/gbnikolov/pen/eYGvwBw\">\n  2. Persistence</a> by Georgi Nikoloff (<a href=\"https://codepen.io/gbnikolov\">@gbnikolov</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Applying texture transformations</h2>\n\n\n\n<p>Now that we have our effect properly working, we can get more creative and expand on top of it.</p>\n\n\n\n<p>You might remember this snippet from the fragment shader code where we faded out the contents of <strong>Framebuffer  1 </strong>to <strong>Framebuffer 2</strong>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main () {\n   // Get pixel color from texture\n   vec4 texColor = texture2D(inputTexture, vUv);\n\n   // Our fade-out color\n   vec4 fadeColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n   // mix texColor into fadeColor by a factor of 0.05\n   gl_FragColor = mix(texColor, fadeColor, 0.05);\n}</code></pre>\n\n\n\n<p>When we sample from our <code>inputTexture</code>, we can upscale our texture coordinates by a factor of 0.0075 like so:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>vec4 texColor = texture2D(inputTexture, vUv * 0.9925);</code></pre>\n\n\n\n<p>With this transformation applied to our texture coordinates, here is our updated example:</p>\n\n\n\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"js,result\" data-slug-hash=\"JjrNajE\" data-user=\"gbnikolov\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/gbnikolov/pen/JjrNajE\">\n  3. Peristence with upscaled texture coords</a> by Georgi Nikoloff (<a href=\"https://codepen.io/gbnikolov\">@gbnikolov</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p>Or how about increasing our fade factor from 0.05 to 0.2?</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gl_FragColor = mix(texColor, fadeColor, 0.2);</code></pre>\n\n\n\n<p>This will intensify the effect of <code>fadeColor</code> by a magnitude of four, thus decreasing our persistence effect:</p>\n\n\n\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"js,result\" data-slug-hash=\"YzrVOQL\" data-user=\"gbnikolov\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/gbnikolov/pen/YzrVOQL\">\n  4. Reduced persistence</a> by Georgi Nikoloff (<a href=\"https://codepen.io/gbnikolov\">@gbnikolov</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p>But why stop there? Here is a final demo that provides you with UI controls to tweak the scale, rotation and fade factor parameters in the demo. It uses <a href=\"https://threejs.org/docs/?q=matrix3#api/en/math/Matrix3\">THREE.Matrix3</a> and more specifically its <a href=\"https://threejs.org/docs/?q=matrix3#api/en/math/Matrix3.setUvTransform\">setUvTransform</a> method that allows us to express the translation, scale and rotation of our texture coordinates as a 3&#215;3 matrix.</p>\n\n\n\n<p>We can then pass this 3&#215;3 as another uniform to our vertex shader and apply it to the texture coordinates. Here is the updated <code>fragmentShader</code> property of our <code>fadeMaterial</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// pass the texture coordinate matrix as another uniform variable\nuniform mat3 uvMatrix;\nvarying vec2 vUv;\nvoid main () {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  // Since our texture coordinates, represented by uv, are a vector with\n  // 2 floats and our matrix holds 9 floats, we need to temporarily\n  // add extra dimension to the texture coordinates to make the\n  // multiplication possible.\n  // In the end, we simply grab the .xy of the final result, thus\n  // transforming it back to vec2\n  vUv = (uvMatrix * vec3(uv, 1.0)).xy;\n}</code></pre>\n\n\n\n<p>And here is the result. I also added controls for the different parameters:</p>\n\n\n\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"js,result\" data-slug-hash=\"OJxmojd\" data-user=\"gbnikolov\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/gbnikolov/pen/OJxmojd\">\n  5. Parameterised persistence</a> by Georgi Nikoloff (<a href=\"https://codepen.io/gbnikolov\">@gbnikolov</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>Framebuffers are a powerful tool in WebGL that allows us to greatly enhance our scenes via post-processing and achieve all kinds of cool effects. Some techniques require more then one framebuffer as we saw and it is up to us as developers to mix and match them however we need to achieve our desired visuals.</p>\n\n\n\n<p>Further readings:</p>\n\n\n\n<ul><li><a href=\"https://threejs.org/docs/#manual/en/introduction/How-to-use-post-processing\">How to use post-processing in threejs</a></li><li><a href=\"https://github.com/mattdesl/lwjgl-basics/wiki/ShaderLesson5\">Gaussian blur post-processing by Matt DesLauriers</a></li></ul>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/28/adding-a-persistence-effect-to-three-js-scenes/\">Adding a Persistence Effect to Three.js Scenes</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>",
      "content_text": "If you have written any WebGL applications in the past, be it using the vanilla API or a helper library such as Three.js, you know that you set up the things you want to render, perhaps include different types of cameras, animations and fancy lighting and voilà, the results are rendered to the default WebGL framebuffer, which is the device screen.\n\n\n\nFramebuffers are a key feature in WebGL when it comes to creating advanced graphical effects such as depth-of-field, bloom, film grain or various types of anti-aliasing. They allow us to “post-process” our scenes, applying different effects on them once rendered.\n\n\n\nThis article assumes some intermediate knowledge of WebGL with Three.js. The core ideas behind framebuffers have already been covered in-depth in this article here on Codrops. Please make sure to read it first, as the persistence effect we will be achieving directly builds on top of these ideas.\n\n\n\nPersistence effect in a nutshell\n\n\n\nI call it persistence, yet am not really sure if it’s the best name for this effect and I am simply unaware of the proper way to call it. What is it useful for?\n\n\n\nWe can use it subtly to blend each previous and current animation frame together or perhaps a bit less subtly to hide bad framerate. Looking at video games like Grand Theft Auto, we can simulate our characters getting drunk. Another thing that comes to mind is rendering the view from the cockpit of a spacecraft when traveling at supersonic speed. Or, since the effect is just so good looking in my opinion, use it for all kinds of audio visualisers, cool website effects and so on.\n\n\n\nTo achieve it, first we would need to create 2 WebGL framebuffers. Since we will be using threejs for this demo, we would have to use THREE.WebGLRenderTarget. We will call them Framebuffer 1 and Framebuffer 2 from now on and they will have the same dimensions as the size of the canvas we are rendering to.\n\n\n\nTo draw one frame of our animation with persistence, we will need to:\n\n\n\nRender the contents of Framebuffer 1 to Framebuffer 2 with a shader that fades to a certain color. For the purposes of our demo, we will use a pure black color with full opacityRender our threejs scene that holds the actual meshes we want to show on the screen to Framebuffer 2 as wellRender the contents of Framebuffer 2 to the Default WebGL framebuffer (device screen)Swap Framebuffer 1 with Framebuffer 2\n\n\n\nAfterwards, for each new animation frame, we will need to repeat the above steps. Let’s illustrate each step:\n\n\n\nHere is a visualisation of our framebuffers. WebGL gives us the Default framebuffer, represented by the device screen, automatically. It’s up to us as developers to manually create Framebuffer 1 and Framebuffer 2. No animation or rendering has happened yet, so the pixel contents of all 3 framebuffers are empty.\n\n\n\nOur 2 manually created framebuffers on the left, the default device screen framebuffer on the right. Nothing has been drawn yet.\n\n\n\nStep 1: we need to render the contents of Framebuffer 1 to Framebuffer 2 with a shader that fades to a certain color. As said, we will use a black color, but for illustration purposes I am fading out to transparent white color with opacity 0.2. As Framebuffer 1 is empty, this will result in empty Framebuffer 2:\n\n\n\nEven though we have rendered Framebuffer 1 to Framebuffer 2, at this point we still have framebuffers with empty pixel contents.\n\n\n\nStep 2: we need to render our threejs scene that holds our meshes / cameras / lighting / etc to Framebuffer 2. Please notice that both Step 1 and Step 2 render on top of each other to Framebuffer 2.\n\n\n\nOur threejs scene rendered to Framebuffer 2.\n\n\n\nStep 3: After we have successfully rendered Step 1 and Step 2 to Framebuffer 2, we need to render Framebuffer 2 itself to the Default framebuffer:\n\n\n\nFinal result rendered to the device screen.\n\n\n\nStep 4: Now we need to swap Framebuffer 1 with Framebuffer 2. We then clear Framebuffer 1 and the Default framebuffer:\n\n\n\nFramebuffer 1 and Framebuffer 2 swapped.\n\n\n\nNow comes the interesting part, since Framebuffer 1 is no longer empty. Let’s go over each step once again:\n\n\n\nStep 1: we need to render the contents of Framebuffer 1 to Framebuffer 2 with a shader that fades to a certain color. Let’s assume a transparent white color with 0.2 opacity.\n\n\n\nWe have rendered and faded out the pixel contents of Framebuffer 1 to Framebuffer 2 by a factor of 0.2.\n\n\n\nStep 2: we need to render our threejs scene to Framebuffer 2. For illustration purposes, let’s assume we have an animation that slowly moves our 3D cube to the right, meaning that now it will be a few pixels to the right:\n\n\n\nOnce again, we render both Framebuffer 1 and our threejs scene to Framebuffer 2. Notice how the threejs scene is rendered on top of the faded out contents of Framebuffer 1.\n\n\n\nStep 3: After we have successfully rendered Step 1 and Step 2 to Framebuffer 2, we need to render Framebuffer 2 itself to the Default framebuffer:\n\n\n\nThe pixel contents of Framebuffer 2 copied over to the device screen.\n\n\n\nStep 4: Now we need to swap Framebuffer 1 with Framebuffer 2. We then clear Framebuffer 1 and the Default framebuffer:\n\n\n\nRinse and repeat. Back to Step 1.\n\n\n\nI hope you can see a pattern emerging. If we repeat this process enough times, we will start accumulating each new frame to the previous faded one. Here is how it would look if we repeat enough times:\n\n\n\nPostprocessing on our threejs scene\n\n\n\nHere is the demo we will build in this article. The result of the repeated enough times process above is evident:\n\n\n\nNotice the accumulated trails. At every animation loop, we are repeating step 1 to 4.\n\n\n\nSo with this theory out of the way, let’s create this effect with threejs!\n\n\n\nOur skeleton app\n\n\n\nLet’s write a simple threejs app that will animate a bunch of objects around the screen and use perspective camera to look at them. I will not explain the code for my example here, as it does not really matter what we render, as long as there is some animation present so things move and we can observe the persistence.\n\n\n\nI encourage you to disregard my example and draw something else yourself. Even the most basic spinning cube that moves around the screen will be enough. That being said, here is my scene:\n\n\n\n\n  See the Pen \n  1. Skeleton app by Georgi Nikoloff (@gbnikolov)\n  on CodePen.\n\n\n\n\n\nThe important thing to keep in mind here is that this demo renders to the default framebuffer, represented by the device screen, that WebGL automatically gives us. There are no extra framebuffers involved in this demo up to this point.\n\n\n\nAchieving the persistence\n\n\n\nLet’s add the code needed to achieve actual persistence. We will start by introducing a THREE.OrthographicCamera.\n\n\n\nOrthographic camera can be useful for rendering 2D scenes and UI elements, amongst other things.threejs docs\n\n\n\nRemember, framebuffers allow us to render to image buffers in the video card’s memory instead of the device screen. These image buffers are represented by the THREE.Texture class and are automatically created for us when we create our Framebuffer 1 and Framebuffer 2 by instantiating a new THREE.WebGLRenderTarget. In order to display these textures back to the device screen, we need to create two 2D fullscreen quads that span the width and height of our monitor. Since these quads will be 2D, THREE.OrthographicCamera is best suited to display them.\n\n\n\nconst leftScreenBorder = -innerWidth / 2\nconst rightScreenBorder = innerWidth / 2\nconst topScreenBorder = -innerHeight / 2\nconst bottomScreenBorder = innerHeight / 2\nconst near = -100\nconst far = 100\nconst orthoCamera = new THREE.OrthographicCamera(\n  leftScreenBorder,\n  rightScreenBorder,\n  topScreenBorder,\n  bottomScreenBorder,\n  near,\n  far\n)\northoCamera.position.z = -10\northoCamera.lookAt(new THREE.Vector3(0, 0, 0))\n\n\n\nAs a next step, let’s create a fullscreen quad geometry using THREE.PlaneGeometry:\n\n\n\nconst fullscreenQuadGeometry = new THREE.PlaneGeometry(innerWidth, innerHeight)\n\n\n\nUsing our newly created 2D quad geometry, let’s create two fullscreen planes. I will call them fadePlane and resultPlane. They will use THREE.ShaderMaterial and THREE.MeshBasicMaterial respectively:\n\n\n\n// To achieve the fading out to black, we will use THREE.ShaderMaterial\nconst fadeMaterial = new THREE.ShaderMaterial({\n  // Pass the texture result of our rendering to Framebuffer 1 as uniform variable\n  uniforms: {\n    inputTexture: { value: null }\n  },\n  vertexShader: `\n    // Declare a varying variable for texture coordinates\n    varying vec2 vUv;\n\n    void main () {\n      // Set each vertex position according to the\n      // orthographic camera position and projection\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  \n      // Pass the plane texture coordinates as interpolated varying\n      // variable to the fragment shader\n      vUv = uv;\n    }\n  `,\n  fragmentShader: `\n    // Pass the texture from Framebuffer 1\n    uniform sampler2D inputTexture;\n\n    // Consume the interpolated texture coordinates\n    varying vec2 vUv;\n\n    void main () {\n      // Get pixel color from texture\n      vec4 texColor = texture2D(inputTexture, vUv);\n\n      // Our fade-out color\n      vec4 fadeColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n      // this step achieves the actual fading out\n      // mix texColor into fadeColor by a factor of 0.05\n      // you can change the value of the factor and see\n      // the result will change accordingly\n      gl_FragColor = mix(texColor, fadeColor, 0.05);\n    }\n  `\n})\n\n// Create our fadePlane\nconst fadePlane = new THREE.Mesh(\n  fullscreenQuadGeometry,\n  fadeMaterial\n)\n\n// create our resultPlane\n// Please notice we don't use fancy shader materials for resultPlane\n// We will use it simply to copy the contents of fadePlane to the device screen\n// So we can just use the .map property of THREE.MeshBasicMaterial\nconst resultMaterial = new THREE.MeshBasicMaterial({ map: null })\nconst resultPlane = new THREE.Mesh(\n  fullscreenQuadGeometry,\n  resultMaterial\n)\n\n\n\nWe will use fadePlane to perform step 1 and step 2 from the list above (rendering the previous frame represented by Framebuffer 1, fading it out to black color and finally rendering our original threejs scene on top). We will render to Framebuffer 2 and update its corresponding THREE.Texture.\n\n\n\nWe will use the resulting texture of Framebuffer 2 as an input to <strong>resultPlane</strong>. This time, we will render to the  device screen. We will essentially copy the contents of Framebuffer 2 to the Default Framebuffer (device screen), thus achieving step 3.\n\n\n\nUp next, let’s actually create our Framebuffer 1 and Framebuffer 2. They are represented by THREE.WebGLRenderTarget:\n\n\n\n// Create two extra framebuffers manually\n// It is important we use let instead of const variables,\n// as we will need to swap them as discussed in Step 4!\nlet framebuffer1 = new THREE.WebGLRenderTarget(innerWidth, innerHeight)\nlet framebuffer2 = new THREE.WebGLRenderTarget(innerWidth, innerHeight)\n\n// Before we start using these framebuffers by rendering to them,\n// let's explicitly clear their pixel contents to #111111\n// If we don't do this, our persistence effect will end up wrong,\n// due to how accumulation between step 1 and 3 works. \n// The first frame will never fade out when we mix Framebuffer 1 to\n// Framebuffer 2 and will be always visible.\n// This bug is better observed, rather then explained, so please\n// make sure to comment out these lines and see the change for yourself.\nrenderer.setClearColor(0x111111)\nrenderer.setRenderTarget(framebuffer1)\nrenderer.clearColor()\nrenderer.setRenderTarget(framebuffer2)\nrenderer.clearColor()\n\n\n\nAs you might have guessed already, we will achieve step 4 as described above by swapping framebuffer1 and framebuffer2 at the end of each animation frame.\n\n\n\nAt this point we have everything ready and initialised: our THREE.OrthographicCamera, our 2 quads that will fade out and copy the contents of our framebuffers to the device screens and, of course, the framebuffers themselves. It should be noted that up until this point we did not change our animation loop code and logic, rather we just created these new things at the initialisation step of our program. Let’s now put them to practice in our rendering loop.\n\n\n\nHere is how my function that is executed on each animation frame looks like right now. Taken directly from the codepen example above:\n\n\n\nfunction drawFrame (timeElapsed) {\n  for (let i = 0; i < meshes.length; i++) {\n     const mesh = meshes[i]\n     // some animation logic that moves each mesh around the screen\n     // with different radius, offset and speed\n     // ...\n  }\n  // Render our entire scene to the device screen, represented by\n  // the default WebGL framebuffer\n  renderer.render(scene, perspectiveCamera)\n}\n\n\n\nIf you have written any threejs code before, this drawFrame method should not be any news to you. We apply some animation logic to our meshes and then render them to the device screen by calling renderer.render() on the whole scene with the appropriate camera.\n\n\n\nLet’s incorporate our steps 1 to 4 from above and achieve our persistence:\n\n\n\nfunction drawFrame (timeElapsed) {\n  // The for loop remains unchanged from the previous snippet\n  for (let i = 0; i < meshes.length; i++) {\n     // ...\n  }\n\n  // By default, threejs clears the pixel color buffer when\n  // calling renderer.render()\n  // We want to disable it explicitly, since both step 1 and step 2 render\n  // to Framebuffer 2 accumulatively\n  renderer.autoClearColor = false\n\n  // Set Framebuffer 2 as active WebGL framebuffer to render to\n  renderer.setRenderTarget(framebuffer2)\n\n  // <strong>Step 1</strong>\n  // Render the image buffer associated with Framebuffer 1 to Framebuffer 2\n  // fading it out to pure black by a factor of 0.05 in the fadeMaterial\n  // fragment shader\n  fadePlane.material.uniforms.inputTexture.value = framebuffer1.texture\n  renderer.render(fadePlane, orthoCamera)\n\n  // <strong>Step 2</strong>\n  // Render our entire scene to Framebuffer 2, on top of the faded out \n  // texture of Framebuffer 1.\n  renderer.render(scene, perspectiveCamera)\n\n  // Set the Default Framebuffer (device screen) represented by null as active WebGL framebuffer to render to.\n  renderer.setRenderTarget(null)\n  \n  // <strong>Step 3</strong>\n  // Copy the pixel contents of Framebuffer 2 by passing them as a texture\n  // to resultPlane and rendering it to the Default Framebuffer (device screen)\n  resultPlane.material.map = framebuffer2.texture\n  renderer.render(resultPlane, orthoCamera)\n\n  // <strong>Step 4</strong>\n  // Swap Framebuffer 1 and Framebuffer 2\n  const swap = framebuffer1\n  framebuffer1 = framebuffer2\n  framebuffer2 = swap\n\n  // End of the effect\n  // When the next animation frame is executed, the meshes will be animated\n  // and the whole process will repeat\n}\n\n\n\nAnd with these changes out of the way, here is our updated example using persistence:\n\n\n\n\n  See the Pen \n  2. Persistence by Georgi Nikoloff (@gbnikolov)\n  on CodePen.\n\n\n\n\n\nApplying texture transformations\n\n\n\nNow that we have our effect properly working, we can get more creative and expand on top of it.\n\n\n\nYou might remember this snippet from the fragment shader code where we faded out the contents of Framebuffer  1 to Framebuffer 2:\n\n\n\nvoid main () {\n   // Get pixel color from texture\n   vec4 texColor = texture2D(inputTexture, vUv);\n\n   // Our fade-out color\n   vec4 fadeColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n   // mix texColor into fadeColor by a factor of 0.05\n   gl_FragColor = mix(texColor, fadeColor, 0.05);\n}\n\n\n\nWhen we sample from our inputTexture, we can upscale our texture coordinates by a factor of 0.0075 like so:\n\n\n\nvec4 texColor = texture2D(inputTexture, vUv * 0.9925);\n\n\n\nWith this transformation applied to our texture coordinates, here is our updated example:\n\n\n\n\n  See the Pen \n  3. Peristence with upscaled texture coords by Georgi Nikoloff (@gbnikolov)\n  on CodePen.\n\n\n\n\n\nOr how about increasing our fade factor from 0.05 to 0.2?\n\n\n\ngl_FragColor = mix(texColor, fadeColor, 0.2);\n\n\n\nThis will intensify the effect of fadeColor by a magnitude of four, thus decreasing our persistence effect:\n\n\n\n\n  See the Pen \n  4. Reduced persistence by Georgi Nikoloff (@gbnikolov)\n  on CodePen.\n\n\n\n\n\nBut why stop there? Here is a final demo that provides you with UI controls to tweak the scale, rotation and fade factor parameters in the demo. It uses THREE.Matrix3 and more specifically its setUvTransform method that allows us to express the translation, scale and rotation of our texture coordinates as a 3×3 matrix.\n\n\n\nWe can then pass this 3×3 as another uniform to our vertex shader and apply it to the texture coordinates. Here is the updated fragmentShader property of our fadeMaterial:\n\n\n\n// pass the texture coordinate matrix as another uniform variable\nuniform mat3 uvMatrix;\nvarying vec2 vUv;\nvoid main () {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  // Since our texture coordinates, represented by uv, are a vector with\n  // 2 floats and our matrix holds 9 floats, we need to temporarily\n  // add extra dimension to the texture coordinates to make the\n  // multiplication possible.\n  // In the end, we simply grab the .xy of the final result, thus\n  // transforming it back to vec2\n  vUv = (uvMatrix * vec3(uv, 1.0)).xy;\n}\n\n\n\nAnd here is the result. I also added controls for the different parameters:\n\n\n\n\n  See the Pen \n  5. Parameterised persistence by Georgi Nikoloff (@gbnikolov)\n  on CodePen.\n\n\n\n\n\nConclusion\n\n\n\nFramebuffers are a powerful tool in WebGL that allows us to greatly enhance our scenes via post-processing and achieve all kinds of cool effects. Some techniques require more then one framebuffer as we saw and it is up to us as developers to mix and match them however we need to achieve our desired visuals.\n\n\n\nFurther readings:\n\n\n\nHow to use post-processing in threejsGaussian blur post-processing by Matt DesLauriers\nThe post Adding a Persistence Effect to Three.js Scenes appeared first on Codrops.",
      "date_published": "2021-12-28T10:53:59.000Z",
      "date_modified": "2021-12-28T10:53:59.000Z",
      "_plugin": {
        "pageFilename": "7d02f157eaa3b5202a67dad12db96437f826a9ece6351cb3de85ed5e5b0d9242.html"
      }
    },
    {
      "id": "https://tympanus.net/codrops/?p=58101",
      "url": "https://tympanus.net/codrops/2021/12/27/three-js-animation-with-k-d-christmas-tree-algorithm/",
      "title": "Three.js Animation with K-d (Christmas) Tree Algorithm",
      "summary": "In this coding tutorial, you'll learn how to recreate the animation seen on the website of ONE-OFF in Three.js using the K-d tree algorithm.\nThe post Three.js Animation with K-d (Christmas) Tree Algorithm appeared first on Codrops.",
      "content_html": "<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"KD Christmas trees to implement three.js animation #17\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/JSVtOPEB1Fs?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p>In this festive <a href=\"https://www.youtube.com/user/flintyara/featured\">ALL YOUR HTML</a> coding session we&#8217;ll decompile the animation seen on the website of <a href=\"http://one-off.it/\">ONE-OFF</a> using the K-d tree algorithm and Three.js shape creation. We&#8217;ll also be using GLSL to create the visuals.</p>\n\n\n\n<p>This coding session was streamed live on December 26, 2021.</p>\n\n\n\n<!--div class=\"box-highlight\"><p><strong>Check out the <a href=\"https://dnacapitalreplica.netlify.app/\">live demo</a>.</strong></p></div-->\n\n\n\n<p>Support: <a href=\"https://www.patreon.com/allyourhtml\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.patreon.com/allyourhtml</a> </p>\n\n\n\n<p>Setup: <a href=\"https://gist.github.com/akella/a19954c9ee42e3ae85b76d0e06977535\" target=\"_blank\" rel=\"noreferrer noopener\">https://gist.github.com/akella/a19954&#8230;</a> </p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/27/three-js-animation-with-k-d-christmas-tree-algorithm/\">Three.js Animation with K-d (Christmas) Tree Algorithm</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>",
      "content_text": "\n\n\n\n\n\nIn this festive ALL YOUR HTML coding session we’ll decompile the animation seen on the website of ONE-OFF using the K-d tree algorithm and Three.js shape creation. We’ll also be using GLSL to create the visuals.\n\n\n\nThis coding session was streamed live on December 26, 2021.\n\n\n\n\n\n\n\nSupport: https://www.patreon.com/allyourhtml \n\n\n\nSetup: https://gist.github.com/akella/a19954… \nThe post Three.js Animation with K-d (Christmas) Tree Algorithm appeared first on Codrops.",
      "date_published": "2021-12-27T10:44:34.000Z",
      "date_modified": "2021-12-27T10:44:34.000Z",
      "_plugin": {
        "pageFilename": "36001da44f34a5ce64aa086a49a441a19be03c94b81bab7fc73b79898cd86ff1.html"
      }
    },
    {
      "id": "https://tympanus.net/codrops/?p=57959",
      "url": "https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/",
      "title": "Alternate Column Scroll Animation",
      "summary": "A grid layout with columns that scroll in opposite directions and a content preview animation.\nThe post Alternate Column Scroll Animation appeared first on Codrops.",
      "content_html": "<p>Grids are truly magical. There&#8217;s so many different kind of things we can do with them; layout-wise and scroll-wise. Some time ago, I came across <a href=\"https://giuliatonon.it/\">Giulia Tonon&#8217;s amazing website</a>. It was made by the amazing duo of <a href=\"https://e-t.studio/\">ET Studio</a>. The unique design is enhanced by the exquisite motion of the columns: while scrolling, the middle column scrolls one way, while the outer ones scroll the other way. </p>\n\n\n\n<p>This is something that I thought would be interesting to build upon using <a href=\"https://locomotivemtl.github.io/locomotive-scroll/\">Locomotive Scroll</a> and combine it with a little idea of flying grid items. Once we click on a grid item, it animates to the center of the screen while scaling up. The other grid items move to their respective positions in the row of thumbnails beneath the main image. This kind of animation is highly inspired by the work of <a href=\"https://twitter.com/AriBenoist\">Aristide Benoist</a> who is <em>the</em> master of delicate view switching motions and unique layout animations. </p>\n\n\n\n<p>This is the initial view:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"500\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll1.jpg\" alt=\"\" class=\"wp-image-58066\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll1.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll1-400x250.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll1-768x480.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>When clicking on a image, we move it to the center and animate all other images in the viewport to the little thumbnail navigation:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"500\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll2.jpg\" alt=\"\" class=\"wp-image-58068\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll2.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll2-400x250.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll2-768x480.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>And this is how all the motion flow looks like:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columns1_opt.mp4\"></video></figure>\n\n\n\n<p>Please be aware that this experiment is mostly a mockup (no &#8220;real&#8221; thumbnail navigation for this one)!</p>\n\n\n\n<p>I really hope you find this inspirational! Thank you for checking by!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/\">Alternate Column Scroll Animation</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>",
      "content_text": "Grids are truly magical. There’s so many different kind of things we can do with them; layout-wise and scroll-wise. Some time ago, I came across Giulia Tonon’s amazing website. It was made by the amazing duo of ET Studio. The unique design is enhanced by the exquisite motion of the columns: while scrolling, the middle column scrolls one way, while the outer ones scroll the other way. \n\n\n\nThis is something that I thought would be interesting to build upon using Locomotive Scroll and combine it with a little idea of flying grid items. Once we click on a grid item, it animates to the center of the screen while scaling up. The other grid items move to their respective positions in the row of thumbnails beneath the main image. This kind of animation is highly inspired by the work of Aristide Benoist who is the master of delicate view switching motions and unique layout animations. \n\n\n\nThis is the initial view:\n\n\n\n\n\n\n\nWhen clicking on a image, we move it to the center and animate all other images in the viewport to the little thumbnail navigation:\n\n\n\n\n\n\n\nAnd this is how all the motion flow looks like:\n\n\n\n\n\n\n\nPlease be aware that this experiment is mostly a mockup (no “real” thumbnail navigation for this one)!\n\n\n\nI really hope you find this inspirational! Thank you for checking by!\nThe post Alternate Column Scroll Animation appeared first on Codrops.",
      "date_published": "2021-12-21T11:22:09.000Z",
      "date_modified": "2021-12-21T11:22:09.000Z",
      "_plugin": {
        "pageFilename": "ff4cf2eaca79c3753a8ddd7eaee94e6647c7d0d978fc8d7a27fbdaa843ac503c.html"
      }
    },
    {
      "id": "https://tympanus.net/codrops/?p=57829",
      "url": "https://tympanus.net/codrops/2021/12/17/8-design-tips-to-make-your-blog-or-shop-stand-out/",
      "title": "8 Design Tips to Make Your Blog or Shop Stand Out",
      "summary": "Using the popular and number one rated Zeen theme as a reference, we'll show you eight modern ways to take your website to the next level. \nThe post 8 Design Tips to Make Your Blog or Shop Stand Out appeared first on Codrops.",
      "content_html": "<p>You probably don’t need us to tell you that there’s a lot of competition on the internet. Your users have near-limitless options for where they can spend their time online. Because of that variety, finding a way to stand out can feel like an impossible task.&nbsp;</p>\n\n\n\n<p>Fortunately, a little bit of creative design can go a long way. By learning a few top-tier strategies, you can help your website become a must-see destination for your target audience.</p>\n\n\n\n<p>Using <a href=\"https://codetipi.com\" target=\"_blank\" rel=\"noreferrer noopener\">Codetipi&#8217;s</a> popular and number one rated <a href=\"https://themeforest.net/item/zeen-next-generation-magazine-wordpress-theme/22709856?utm_source=t1&amp;utm_medium=blog\" target=\"_blank\" rel=\"noreferrer noopener\">Zeen theme</a> as a reference, we&#8217;ll show you eight modern ways to take your website to the next level. Let’s get straight to it:</p>\n\n\n\n<h2>#1. Attract Attention With a Marquee Block</h2>\n\n\n\n<p>A marquee block is a section of your site that features moving text which helps draw your visitors’ eyes toward whatever information you’re trying to highlight. It was wildly popular on websites in the 90s and has recently made a roaring comeback to breathe new life and interactivity to modern websites:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop muted src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/blog-theme-wordpress-marquee.mp4\"></video><figcaption><a href=\"https://demos.codetipi.com/zeen-undo/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s lovely Marquee block</a> in action</figcaption></figure>\n\n\n\n<p>The slow speed gives users a chance to read the text. However, the fact that it flows slowly from right to left also helps to engage readers. This feature can also effectively guide your audience’s eyes across the rest of the screen, similar to a <a href=\"https://tympanus.net/codrops/2021/11/17/slideshow-with-filter-reveal-effect/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">slideshow feature</a>.</p>\n\n\n\n<p>Themes that stay up to date with the latest trends, such as <a href=\"https://themeforest.net/item/zeen-next-generation-magazine-wordpress-theme/22709856?utm_source=t1&amp;utm_medium=blog\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen</a>, make it easy to create marquee blocks. However, there are some factors to keep in mind to maximise the effectiveness of your marquee.&nbsp;</p>\n\n\n\n<p>Firstly, try not to include too much text. Shorter sentences help make sure that you don’t exceed a visitor’s attention span. Moreover, they can also avoid creating a rushed feeling.&nbsp;</p>\n\n\n\n<p>Secondly, pause the animation when hovering over it with a mouse. Zeen&#8217;s Marquee implementation does this, which is very needed to give visitors a sense of control over the site. This setting can help make sure that your message gets across and also further boosts the website&#8217;s overall interactivity feel.</p>\n\n\n\n<p>Finally, we recommend that you try to include clickable Calls To Action (CTAs) in the text. A brief and clear directive can take advantage of this active design element.&nbsp;In <a href=\"https://demos.codetipi.com/zeen-undo/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s demo site</a>, the marquee links to a featured product category.</p>\n\n\n\n<h2>#2. Dark Mode</h2>\n\n\n\n<p>You probably put a lot of time and effort into choosing a color scheme for your website. Nevertheless, brighter designs may be off-putting to certain users. That’s why offering a darker alternative can be a stand-out and welcome feature.</p>\n\n\n\n<p>Most people find that dark mode is a bit easier on the eyes, particularly when surfing the net at night. This is even more true if users want to read long-form articles.</p>\n\n\n\n<p>Fortunately, you don’t have to design an entire site around a calming color palette or create a dark site. Instead, you can help your users toggle between contrasting shades at will via a Reading Mode feature:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop muted src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-dark-mode.mp4\"></video><figcaption><a href=\"https://demos.codetipi.com/zeen-symmetry/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s Dark Mode</a> in action</figcaption></figure>\n\n\n\n<p>This toggle feature eases the browsing experience, so we recommend placing it in a fairly prominent area. However, it shouldn’t be large or intrusive – even a simple icon near the top of your page can do the trick, as visitors who prefer dark mode will not miss it.</p>\n\n\n\n<p>This simple, <a href=\"https://tympanus.net/codrops/2021/09/06/creating-interactive-product-pages-with-react-and-cloudinary/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">interactive feature</a> is easy to add to your designs. Zeen even comes with an advanced dark mode system that can save the user&#8217;s last reading preference via a cookie. In other words, your website can remember your visitors’ desired preference for when they next visit your site.&nbsp;</p>\n\n\n\n<h2>#3. Remind Visitors of Their Shopping Carts</h2>\n\n\n\n<p>A lot of modern blogs have shops to sell merchandise or other goodies, and cart abandonment can be a big issue. The lack of an easy shopping journey means potential buyers who add products to their cart can lose focus or get distracted and end up abandoning their cart completely. If the cart inventory doesn’t expire on purpose, it might also cause locked-away stocking problems that could lead to further loss of sales from other potential buyers.&nbsp;</p>\n\n\n\n<p>Design can be a deciding factor here: up to <a href=\"https://www.statista.com/statistics/1228452/reasons-for-abandonments-during-checkout-united-states/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">18% of people</a> abandoned their carts because the site made it too complicated to complete their purchases. If you want to appeal to this portion of customers more effectively, consider making the checkout process as seamless as possible.</p>\n\n\n\n<p>A simple way to do this is with a floating sticky cart block. This subtle design element keeps your customer’s cart close without taking up too much space.</p>\n\n\n\n<p>Additionally, you can double down on this concept with an ajax powered cart that appears without a page refresh. Giving users the freedom to go directly from a product to the checkout process can help reduce friction that might prevent them from purchasing:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop muted src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-floating-cart.mp4\"></video><figcaption><a href=\"https://demos.codetipi.com/zeen-undo/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s Floating</a> Cart feature</figcaption></figure>\n\n\n\n<p><a href=\"https://themeforest.net/item/zeen-next-generation-magazine-wordpress-theme/22709856?utm_source=t1&amp;utm_medium=blog\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen</a> is a theme primarily aimed at magazines and blogs, however, it comes with advanced WooCommerce integration and features that can put eCommerce-first marketed themes to shame.</p>\n\n\n\n<p>We recommend that you try and integrate a shopping cart element into your overall design. For example, a large button can be intrusive and distracting. Consider using a smaller alternative and choosing vibrant colors that are easy to spot instead.&nbsp;</p>\n\n\n\n<h2>#4. Use Delayed Transitions</h2>\n\n\n\n<p>You’re probably already familiar with the importance of smooth transitions. The freedom to move seamlessly around your site is a subtle yet essential part of the user experience. If these changes seem jittery, your overall design might be less enjoyable.</p>\n\n\n\n<p>However, you don’t have to stop at smooth transitions. Adding clever delays to your element&#8217;s transitions can create a subtle and stylish staggered effect:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop muted src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-delayed-transitions.mp4\"></video><figcaption>Zeen&#8217;s staggered animations</figcaption></figure>\n\n\n\n<p>Users may not consciously notice these changes. However, the cascading effect can make the browsing process seem more elegant. It may also help highlight how well different aspects of the site work together.</p>\n\n\n\n<p>If you want to use delayed transitions, we highly recommend applying them across your site. Not every small action needs to be delayed, but the larger ones probably should be. That way, you can maintain consistency across your website.</p>\n\n\n\n<h2>#5. User Engagement</h2>\n\n\n\n<p>The best designs don’t focus on appearance alone. Search Engine Optimization (SEO) is also a concern for most sites. As such, integrating modern technologies into your design strategy can help more first-time users discover and engage with your website.</p>\n\n\n\n<p>You can consider Google’s voice search as an example. This feature enables people to browse the web via voice commands. If you’re following best practices for standard SEO, you’re already giving yourself a leg up.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-voice-search.jpeg\" alt=\"\" class=\"wp-image-57850\" width=\"616\" height=\"580\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-voice-search.jpeg 1232w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-voice-search-319x300.jpeg 319w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-voice-search-637x600.jpeg 637w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-voice-search-768x723.jpeg 768w\" sizes=\"(max-width: 616px) 100vw, 616px\" /><figcaption><a href=\"https://themeforest.net/item/zeen-next-generation-magazine-wordpress-theme/22709856?utm_source=t1&amp;utm_medium=blog\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen</a> comes with Voice Search integration</figcaption></figure></div>\n\n\n\n<p>However, it’s not just about voice searches. High on-site engagement functionality can also help your site stand out.</p>\n\n\n\n<p>That’s why you might want to consider adding something like emoji reactions. You’re probably familiar with <a href=\"https://www.facebook.com/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Facebook’s version</a> already:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"158\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/facebook-800x158.jpg\" alt=\"\" class=\"wp-image-57849\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/facebook-800x158.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/facebook-400x79.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/facebook-768x151.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/facebook.jpg 1238w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>A feature such as this makes interaction easy: users can express themselves with a single click. However, you don’t have to use standard reactions. You may want to consider personalizing them to your brand. That way, the responses will also reflect what makes your site unique.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"161\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-emojis-800x161.jpg\" alt=\"\" class=\"wp-image-57851\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-emojis-800x161.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-emojis-400x81.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-emojis-768x155.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-emojis-1536x309.jpg 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-emojis.jpg 1590w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption><a href=\"https://themeforest.net/item/zeen-next-generation-magazine-wordpress-theme/22709856?utm_source=t1&amp;utm_medium=blog\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s</a> Emoji functionality &#8211; choose from 14 different emotions</figcaption></figure>\n\n\n\n<h2>#6. Include Excellent Navigation Tools</h2>\n\n\n\n<p>The easier it is for users to find content, the more likely they are to consume it. As such, you probably don’t need us to tell you that navigation is an essential part of web design.</p>\n\n\n\n<p>Fortunately, there are a few tried-and-true ways to provide high-quality navigation for your visitors. For example, try to ensure that no part of your website is more than three clicks from the homepage. This design can cut down on the amount of searching your users need to do.</p>\n\n\n\n<p>Additionally, try to make these pathways obvious with clearly labelled menus. You may also want to place them in prominent areas like <a href=\"https://www.newyorker.com/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">The New Yorker</a> website does:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"130\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/new-yorker-800x130.jpg\" alt=\"\" class=\"wp-image-57861\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/new-yorker-800x130.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/new-yorker-400x65.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/new-yorker-768x124.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/new-yorker-1536x249.jpg 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/new-yorker.jpg 1600w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>However, not all of your audience members will want to hunt through menu choices. That’s where a powerful search function comes in. With this simple addition, you can save users time with a direct route to the content they want.</p>\n\n\n\n<p>To make a search function even more convenient, consider designing your page around it. That way, moving around your site will be as easy as possible:</p>\n\n\n\n<div class=\"wp-block-image wp-img-border\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"800\" height=\"533\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/big-search-feature-800x533.jpg\" alt=\"Modern Search Design \" class=\"wp-image-57862\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/big-search-feature-800x533.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/big-search-feature-400x267.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/big-search-feature-768x512.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/big-search-feature.jpg 1500w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption><a href=\"https://demos.codetipi.com/zeen-freebies/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s Freebie</a> Digital Products Demo</figcaption></figure></div>\n\n\n\n<p>Lastly, your search bar doesn’t have to be boring. Consider including a few <a href=\"https://tympanus.net/codrops/2021/11/02/svg-overlay-and-infinite-menu-background-animation/\" target=\"_blank\" rel=\"noreferrer noopener\">background animations</a> around it to draw your user’s attention toward the navigational resource.</p>\n\n\n\n<h2>#7. Use Different Image Aspect Ratios</h2>\n\n\n\n<p>Consistency is a pretty important part of website design. However, it’s far from the only one. Visual variety plays a crucial role in offering a dynamic visual experience.</p>\n\n\n\n<p>Different image aspects ratios help keep readers stay interested and stimulated. Instead of blocking all your content into standardized areas, consider switching it up.&nbsp;</p>\n\n\n\n<p><a href=\"https://demos.codetipi.com/zeen-food/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s Food blog</a> demo showcases this concept, by mixing portrait, circular and landscape images in a variety of column arrangements on the homepage:</p>\n\n\n\n<div class=\"wp-block-image wp-img-border\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"521\" height=\"600\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/different-image-shapes-521x600.jpg\" alt=\"Different Image Shapes\" class=\"wp-image-57864\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/different-image-shapes-521x600.jpg 521w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/different-image-shapes-261x300.jpg 261w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/different-image-shapes-768x884.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/different-image-shapes-1335x1536.jpg 1335w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/different-image-shapes.jpg 1500w\" sizes=\"(max-width: 521px) 100vw, 521px\" /><figcaption><a href=\"https://demos.codetipi.com/zeen-food/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s Food Blog</a> Demo</figcaption></figure></div>\n\n\n\n<p>That way, you avoid making a website with a repetitive design. Additionally, this feature can be a great way to highlight multiple pieces of content.</p>\n\n\n\n<p>While the aspect ratios can vary, you may want to consider making each area link to similar content. In the above example, the top three sections all link to recipes. With this setup, your users will be looking at different options rather than different subjects altogether.</p>\n\n\n\n<h2>#8. Focus On Your Photos</h2>\n\n\n\n<p>High-quality photos aren’t always easy to come by. They can take a lot of time and dedication to perfect. That’s why we recommend that you give them the spotlight.&nbsp;</p>\n\n\n\n<p>Highlighting your photos can serve a few purposes. For one thing, you’ll be getting the maximum value out of work spent on the images.</p>\n\n\n\n<p>It also presents design benefits. For example, a few large photos can create a commanding visual overview of your brand. You can also use them to show off featured products.</p>\n\n\n\n<figure class=\"wp-block-image size-large wp-img-border\"><img loading=\"lazy\" width=\"800\" height=\"533\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/pinterest-800x533.jpg\" alt=\"\" class=\"wp-image-57838\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/pinterest-800x533.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/pinterest-400x267.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/pinterest-768x512.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/pinterest.jpg 1500w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>By the same token, photos are crucial if you’re trying to promote a product. Most users want to know a lot about whatever they’ll be spending money on – and as the old saying goes, a picture’s worth a thousand words.&nbsp;<br><a href=\"https://www.pinterest.com/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Pinterest</a> doubles down on this concept with large imagery that also reflects the interface’s design. That way, users have a preview of what they can expect after signing up:</p>\n\n\n\n<p>If you’re looking for another way to make the most out of this design strategy, we recommend including colorful backgrounds. A subtle choice can help your photos stand out without distracting from what you’re trying to advertise:</p>\n\n\n\n<figure class=\"wp-block-image size-large wp-img-border\"><img loading=\"lazy\" width=\"800\" height=\"526\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/wordpress-ecommerce-theme-800x526.jpg\" alt=\"\" class=\"wp-image-57840\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/wordpress-ecommerce-theme-800x526.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/wordpress-ecommerce-theme-400x263.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/wordpress-ecommerce-theme-768x505.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/wordpress-ecommerce-theme.jpg 1500w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption><a href=\"https://themeforest.net/item/zeen-next-generation-magazine-wordpress-theme/22709856?utm_source=t1&amp;utm_medium=blog\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s</a> Undo Demo:</figcaption></figure>\n\n\n\n<p>If your design concept doesn’t necessarily mesh well with these tips, never fear! You could also include interactive photos. Consider adding a <a href=\"https://tympanus.net/codrops/2021/06/09/thumbnail-hover-effect-with-svg-filters/\" target=\"_blank\" rel=\"noreferrer noopener\">thumbnail hover effect</a> to ensure that your users can engage with your images.&nbsp;&nbsp;</p>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>Designing a website that stands out from the crowd isn’t always the easiest task. Fortunately, there are a few rules of thumb that can guide you toward success. By applying these tips and tricks, you can create a unique and high-quality site.</p>\n\n\n\n<p>In this article, we showed you a few ways to create a top-tier website. We focused on dynamic elements, practical considerations, and other ways to appeal to new and returning users alike.&nbsp;</p>\n\n\n\n<p>Do you have any questions or any tips of your own about designing a stand-out site? Let us know in the comments section below!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/17/8-design-tips-to-make-your-blog-or-shop-stand-out/\">8 Design Tips to Make Your Blog or Shop Stand Out</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>",
      "content_text": "You probably don’t need us to tell you that there’s a lot of competition on the internet. Your users have near-limitless options for where they can spend their time online. Because of that variety, finding a way to stand out can feel like an impossible task. \n\n\n\nFortunately, a little bit of creative design can go a long way. By learning a few top-tier strategies, you can help your website become a must-see destination for your target audience.\n\n\n\nUsing Codetipi’s popular and number one rated Zeen theme as a reference, we’ll show you eight modern ways to take your website to the next level. Let’s get straight to it:\n\n\n\n#1. Attract Attention With a Marquee Block\n\n\n\nA marquee block is a section of your site that features moving text which helps draw your visitors’ eyes toward whatever information you’re trying to highlight. It was wildly popular on websites in the 90s and has recently made a roaring comeback to breathe new life and interactivity to modern websites:\n\n\n\nZeen’s lovely Marquee block in action\n\n\n\nThe slow speed gives users a chance to read the text. However, the fact that it flows slowly from right to left also helps to engage readers. This feature can also effectively guide your audience’s eyes across the rest of the screen, similar to a slideshow feature.\n\n\n\nThemes that stay up to date with the latest trends, such as Zeen, make it easy to create marquee blocks. However, there are some factors to keep in mind to maximise the effectiveness of your marquee. \n\n\n\nFirstly, try not to include too much text. Shorter sentences help make sure that you don’t exceed a visitor’s attention span. Moreover, they can also avoid creating a rushed feeling. \n\n\n\nSecondly, pause the animation when hovering over it with a mouse. Zeen’s Marquee implementation does this, which is very needed to give visitors a sense of control over the site. This setting can help make sure that your message gets across and also further boosts the website’s overall interactivity feel.\n\n\n\nFinally, we recommend that you try to include clickable Calls To Action (CTAs) in the text. A brief and clear directive can take advantage of this active design element. In Zeen’s demo site, the marquee links to a featured product category.\n\n\n\n#2. Dark Mode\n\n\n\nYou probably put a lot of time and effort into choosing a color scheme for your website. Nevertheless, brighter designs may be off-putting to certain users. That’s why offering a darker alternative can be a stand-out and welcome feature.\n\n\n\nMost people find that dark mode is a bit easier on the eyes, particularly when surfing the net at night. This is even more true if users want to read long-form articles.\n\n\n\nFortunately, you don’t have to design an entire site around a calming color palette or create a dark site. Instead, you can help your users toggle between contrasting shades at will via a Reading Mode feature:\n\n\n\nZeen’s Dark Mode in action\n\n\n\nThis toggle feature eases the browsing experience, so we recommend placing it in a fairly prominent area. However, it shouldn’t be large or intrusive – even a simple icon near the top of your page can do the trick, as visitors who prefer dark mode will not miss it.\n\n\n\nThis simple, interactive feature is easy to add to your designs. Zeen even comes with an advanced dark mode system that can save the user’s last reading preference via a cookie. In other words, your website can remember your visitors’ desired preference for when they next visit your site. \n\n\n\n#3. Remind Visitors of Their Shopping Carts\n\n\n\nA lot of modern blogs have shops to sell merchandise or other goodies, and cart abandonment can be a big issue. The lack of an easy shopping journey means potential buyers who add products to their cart can lose focus or get distracted and end up abandoning their cart completely. If the cart inventory doesn’t expire on purpose, it might also cause locked-away stocking problems that could lead to further loss of sales from other potential buyers. \n\n\n\nDesign can be a deciding factor here: up to 18% of people abandoned their carts because the site made it too complicated to complete their purchases. If you want to appeal to this portion of customers more effectively, consider making the checkout process as seamless as possible.\n\n\n\nA simple way to do this is with a floating sticky cart block. This subtle design element keeps your customer’s cart close without taking up too much space.\n\n\n\nAdditionally, you can double down on this concept with an ajax powered cart that appears without a page refresh. Giving users the freedom to go directly from a product to the checkout process can help reduce friction that might prevent them from purchasing:\n\n\n\nZeen’s Floating Cart feature\n\n\n\nZeen is a theme primarily aimed at magazines and blogs, however, it comes with advanced WooCommerce integration and features that can put eCommerce-first marketed themes to shame.\n\n\n\nWe recommend that you try and integrate a shopping cart element into your overall design. For example, a large button can be intrusive and distracting. Consider using a smaller alternative and choosing vibrant colors that are easy to spot instead. \n\n\n\n#4. Use Delayed Transitions\n\n\n\nYou’re probably already familiar with the importance of smooth transitions. The freedom to move seamlessly around your site is a subtle yet essential part of the user experience. If these changes seem jittery, your overall design might be less enjoyable.\n\n\n\nHowever, you don’t have to stop at smooth transitions. Adding clever delays to your element’s transitions can create a subtle and stylish staggered effect:\n\n\n\nZeen’s staggered animations\n\n\n\nUsers may not consciously notice these changes. However, the cascading effect can make the browsing process seem more elegant. It may also help highlight how well different aspects of the site work together.\n\n\n\nIf you want to use delayed transitions, we highly recommend applying them across your site. Not every small action needs to be delayed, but the larger ones probably should be. That way, you can maintain consistency across your website.\n\n\n\n#5. User Engagement\n\n\n\nThe best designs don’t focus on appearance alone. Search Engine Optimization (SEO) is also a concern for most sites. As such, integrating modern technologies into your design strategy can help more first-time users discover and engage with your website.\n\n\n\nYou can consider Google’s voice search as an example. This feature enables people to browse the web via voice commands. If you’re following best practices for standard SEO, you’re already giving yourself a leg up.\n\n\n\nZeen comes with Voice Search integration\n\n\n\nHowever, it’s not just about voice searches. High on-site engagement functionality can also help your site stand out.\n\n\n\nThat’s why you might want to consider adding something like emoji reactions. You’re probably familiar with Facebook’s version already:\n\n\n\n\n\n\n\nA feature such as this makes interaction easy: users can express themselves with a single click. However, you don’t have to use standard reactions. You may want to consider personalizing them to your brand. That way, the responses will also reflect what makes your site unique.\n\n\n\nZeen’s Emoji functionality – choose from 14 different emotions\n\n\n\n#6. Include Excellent Navigation Tools\n\n\n\nThe easier it is for users to find content, the more likely they are to consume it. As such, you probably don’t need us to tell you that navigation is an essential part of web design.\n\n\n\nFortunately, there are a few tried-and-true ways to provide high-quality navigation for your visitors. For example, try to ensure that no part of your website is more than three clicks from the homepage. This design can cut down on the amount of searching your users need to do.\n\n\n\nAdditionally, try to make these pathways obvious with clearly labelled menus. You may also want to place them in prominent areas like The New Yorker website does:\n\n\n\n\n\n\n\nHowever, not all of your audience members will want to hunt through menu choices. That’s where a powerful search function comes in. With this simple addition, you can save users time with a direct route to the content they want.\n\n\n\nTo make a search function even more convenient, consider designing your page around it. That way, moving around your site will be as easy as possible:\n\n\n\nZeen’s Freebie Digital Products Demo\n\n\n\nLastly, your search bar doesn’t have to be boring. Consider including a few background animations around it to draw your user’s attention toward the navigational resource.\n\n\n\n#7. Use Different Image Aspect Ratios\n\n\n\nConsistency is a pretty important part of website design. However, it’s far from the only one. Visual variety plays a crucial role in offering a dynamic visual experience.\n\n\n\nDifferent image aspects ratios help keep readers stay interested and stimulated. Instead of blocking all your content into standardized areas, consider switching it up. \n\n\n\nZeen’s Food blog demo showcases this concept, by mixing portrait, circular and landscape images in a variety of column arrangements on the homepage:\n\n\n\nZeen’s Food Blog Demo\n\n\n\nThat way, you avoid making a website with a repetitive design. Additionally, this feature can be a great way to highlight multiple pieces of content.\n\n\n\nWhile the aspect ratios can vary, you may want to consider making each area link to similar content. In the above example, the top three sections all link to recipes. With this setup, your users will be looking at different options rather than different subjects altogether.\n\n\n\n#8. Focus On Your Photos\n\n\n\nHigh-quality photos aren’t always easy to come by. They can take a lot of time and dedication to perfect. That’s why we recommend that you give them the spotlight. \n\n\n\nHighlighting your photos can serve a few purposes. For one thing, you’ll be getting the maximum value out of work spent on the images.\n\n\n\nIt also presents design benefits. For example, a few large photos can create a commanding visual overview of your brand. You can also use them to show off featured products.\n\n\n\n\n\n\n\nBy the same token, photos are crucial if you’re trying to promote a product. Most users want to know a lot about whatever they’ll be spending money on – and as the old saying goes, a picture’s worth a thousand words. Pinterest doubles down on this concept with large imagery that also reflects the interface’s design. That way, users have a preview of what they can expect after signing up:\n\n\n\nIf you’re looking for another way to make the most out of this design strategy, we recommend including colorful backgrounds. A subtle choice can help your photos stand out without distracting from what you’re trying to advertise:\n\n\n\nZeen’s Undo Demo:\n\n\n\nIf your design concept doesn’t necessarily mesh well with these tips, never fear! You could also include interactive photos. Consider adding a thumbnail hover effect to ensure that your users can engage with your images.  \n\n\n\nConclusion\n\n\n\nDesigning a website that stands out from the crowd isn’t always the easiest task. Fortunately, there are a few rules of thumb that can guide you toward success. By applying these tips and tricks, you can create a unique and high-quality site.\n\n\n\nIn this article, we showed you a few ways to create a top-tier website. We focused on dynamic elements, practical considerations, and other ways to appeal to new and returning users alike. \n\n\n\nDo you have any questions or any tips of your own about designing a stand-out site? Let us know in the comments section below!\nThe post 8 Design Tips to Make Your Blog or Shop Stand Out appeared first on Codrops.",
      "date_published": "2021-12-17T11:01:51.000Z",
      "date_modified": "2021-12-17T11:01:51.000Z",
      "_plugin": {
        "pageFilename": "8b4498d5d8810eb8e9e5f7b9587a8730134322477cf280f3bc075736c4327c3b.html"
      }
    },
    {
      "id": "https://tympanus.net/codrops/?post_type=collective&p=57966",
      "url": "https://tympanus.net/codrops/collective/collective-692/",
      "title": "Collective #692",
      "summary": "12 Days of Web * Pixel Patterns * DoodleCSS * Breaking Out of the Box * Vortex * HTTP compression\nThe post Collective #692 appeared first on Codrops.",
      "content_html": "<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.highvibe.network/\"><img loading=\"lazy\" width=\"350\" height=\"219\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_WOTW.jpg\" alt=\"\" class=\"wp-image-57972\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.highvibe.network/\">Inspirational Website of the Week: Highvibe Network</a></h2>\n<p class=\"ct-coll-p\">A beautiful design with great typographic combinations and wonderful details. Our pick this week.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.highvibe.network/\">Get inspired</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n        <a class=\"ct-coll-thumb\" href=\"https://www.elegantthemes.com/affiliates/idevaffiliate.php?id=17972_5_1_19\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\"><img loading=\"lazy\" width=\"350\" height=\"236\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/05/Divi_new.jpg\" alt=\"Collective 668 image\" class=\"wp-image-54591\"></a></p>\n<div class=\"ct-coll-sponsorship\">Our Sponsor</div>\n<h2><a href=\"https://www.elegantthemes.com/affiliates/idevaffiliate.php?id=17972_5_1_19\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\">Instant websites for your clients with Divi Layout Packs</a></h2>\n<p class=\"ct-coll-p\">With the Divi Layout Packs you&#8217;ll get world-class designs ready to be used for your client projects.</p>\n<p>        <a class=\"ct-coll-link\" href=\"https://www.elegantthemes.com/affiliates/idevaffiliate.php?id=17972_5_1_19\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://12daysofweb.dev/\"><img loading=\"lazy\" width=\"350\" height=\"247\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_12_.jpg\" alt=\"\" class=\"wp-image-57977\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://12daysofweb.dev/\">12 Days of Web</a></h2>\n<p class=\"ct-coll-p\">A year-end celebration of fundamental web technologies: HTML, CSS, and JavaScript.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://12daysofweb.dev/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://yuanchuan.dev/pixel-patterns\"><img loading=\"lazy\" width=\"350\" height=\"223\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_pixelpatterns.jpg\" alt=\"\" class=\"wp-image-57987\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://yuanchuan.dev/pixel-patterns\">Pixel Patterns</a></h2>\n<p class=\"ct-coll-p\">Yuan Chuan explores mathematical functions for generating amazing pixel-based patterns.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://yuanchuan.dev/pixel-patterns\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://2021.stateofcss.com/en-US/?ref=codrops\"><img loading=\"lazy\" width=\"350\" height=\"261\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_StateCss.jpg\" alt=\"\" class=\"wp-image-57971\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://2021.stateofcss.com/en-US/?ref=codrops\">The State of CSS 2021</a></h2>\n<p class=\"ct-coll-p\">The results of the annual survey about the latest trends in CSS. It&#8217;s also a really cool website!</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://2021.stateofcss.com/en-US/?ref=codrops\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://chr15m.github.io/DoodleCSS/\"><img loading=\"lazy\" width=\"350\" height=\"285\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_doodlecss.jpg\" alt=\"\" class=\"wp-image-57981\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://chr15m.github.io/DoodleCSS/\">DoodleCSS</a></h2>\n<p class=\"ct-coll-p\">A hand doodled CSS/HTML theme made by Chris McCormick.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://chr15m.github.io/DoodleCSS/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://alistapart.com/article/breaking-out-of-the-box/\"><img loading=\"lazy\" width=\"350\" height=\"231\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_Box.jpg\" alt=\"\" class=\"wp-image-57974\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://alistapart.com/article/breaking-out-of-the-box/\">Breaking Out of the Box</a></h2>\n<p class=\"ct-coll-p\">Patrick Brosset shows how to use Window Controls Overlay, a new PWA functionality that allows to take advantage of the full surface area of an app.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://alistapart.com/article/breaking-out-of-the-box/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://css-tricks.com/embrace-the-platform/\"><img loading=\"lazy\" width=\"350\" height=\"132\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/Screen-Shot-2021-12-16-at-11.48.15.jpg\" alt=\"\" class=\"wp-image-57989\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://css-tricks.com/embrace-the-platform/\">Embrace the Platform</a></h2>\n<p class=\"ct-coll-p\">Bramus&#8217; answer to what the one thing is that people can do is to make their website better?</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://css-tricks.com/embrace-the-platform/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://turborepo.org/\"><img loading=\"lazy\" width=\"350\" height=\"385\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_turbo.jpg\" alt=\"\" class=\"wp-image-57978\" srcset=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_turbo.jpg 350w, https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_turbo-273x300.jpg 273w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://turborepo.org/\">Turborepo</a></h2>\n<p class=\"ct-coll-p\">Turborepo is a high-performance build system for JavaScript and TypeScript codebases.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://turborepo.org/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://jonyablonski.com/articles/2021/cognitive-bias-and-the-design-process-part-2/\"><img loading=\"lazy\" width=\"350\" height=\"204\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_cognitive.jpg\" alt=\"\" class=\"wp-image-57979\"><img loading=\"lazy\" width=\"350\" height=\"204\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_cognitive-2.jpg\" alt=\"\" class=\"wp-image-57991\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://jonyablonski.com/articles/2021/cognitive-bias-and-the-design-process-part-2/\">Cognitive Bias and the Design Process</a></h2>\n<p class=\"ct-coll-p\">Part 2 of a series that looks at the systematic errors in thinking that affects decisions and judgment during the design process. By Jon Yablonski.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://jonyablonski.com/articles/2021/cognitive-bias-and-the-design-process-part-2/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/\"><img loading=\"lazy\" width=\"350\" height=\"224\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_gamut.jpg\" alt=\"\" class=\"wp-image-57975\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/\">Wide Gamut 2D Graphics using HTML Canvas</a></h2>\n<p class=\"ct-coll-p\">Earlier this year, a proposal for creating canvas contexts using other color spaces was added to the HTML standard. Cameron McCormack writes on the recent support of WebKit for this.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.twilio.com/blog/all-you-need-to-know-svelte\"><img loading=\"lazy\" width=\"350\" height=\"192\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_svelte.jpg\" alt=\"\" class=\"wp-image-57969\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.twilio.com/blog/all-you-need-to-know-svelte\">Beginner’s guide to Svelte</a></h2>\n<p class=\"ct-coll-p\">In this article you&#8217;ll learn Svelte’s basic development methods, as well as advanced topics such as state management and animation.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.twilio.com/blog/all-you-need-to-know-svelte\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://stateofapis.com/\"><img loading=\"lazy\" width=\"350\" height=\"228\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_stateofapis.jpg\" alt=\"\" class=\"wp-image-57983\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://stateofapis.com/\">State of APIs</a></h2>\n<p class=\"ct-coll-p\">The RapidAPI developer survey results for 2021.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://stateofapis.com/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://servefolder.dev/\"><img loading=\"lazy\" width=\"350\" height=\"160\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_Servefolder.jpg\" alt=\"\" class=\"wp-image-57973\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://servefolder.dev/\">Serve folder for web development</a></h2>\n<p class=\"ct-coll-p\">Serve a local folder of files in your browser for easy testing without having to run a server. Check out the <a href=\"https://github.com/AshleyScirra/servefolder.dev\">repo</a>.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://servefolder.dev/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.vortex.dakumisu.fr/\"><img loading=\"lazy\" width=\"350\" height=\"196\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_vortex.jpg\" alt=\"\" class=\"wp-image-57985\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.vortex.dakumisu.fr/\">Vortex</a></h2>\n<p class=\"ct-coll-p\">A sound experience in WebGL where you can listen or compose music, done with Three.js and GSAP.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.vortex.dakumisu.fr/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://straw.page/\"><img loading=\"lazy\" width=\"350\" height=\"301\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_website.jpg\" alt=\"\" class=\"wp-image-57988\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://straw.page/\">Straw.Page</a></h2>\n<p class=\"ct-coll-p\">Straw.Page is the world&#8217;s simplest website builder. Create unique websites from your mobile device.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://straw.page/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://calendar.perfplanet.com/2021/http-compression/\"><img loading=\"lazy\" width=\"350\" height=\"222\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_compression.jpg\" alt=\"\" class=\"wp-image-57970\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://calendar.perfplanet.com/2021/http-compression/\">HTTP compression</a></h2>\n<p class=\"ct-coll-p\">HTTP compression is an important part of the big web performance picture. Leon Brocard covers the history, the current state and the future of web compression.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://calendar.perfplanet.com/2021/http-compression/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.modernwiki.app/\"><img loading=\"lazy\" width=\"350\" height=\"235\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_wiki.jpg\" alt=\"\" class=\"wp-image-57980\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.modernwiki.app/\">Modern for Wikipedia</a></h2>\n<p class=\"ct-coll-p\">A beautiful, clean, modern web UI for Wikipedia. Enhance your Wikipedia experience with a redesigned look, new features and customization.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.modernwiki.app/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://gomakethings.com/building-a-js-library-from-scratch-on-frontend-horse/\"><img loading=\"lazy\" width=\"350\" height=\"197\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_chrisferdinandi.jpg\" alt=\"\" class=\"wp-image-57984\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://gomakethings.com/building-a-js-library-from-scratch-on-frontend-horse/\">Building a JS library from scratch on Frontend Horse</a></h2>\n<p class=\"ct-coll-p\">Chris Ferdinandi shows how to build a JavaScript library from scratch.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://gomakethings.com/building-a-js-library-from-scratch-on-frontend-horse/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"http://madebyevan.com/webgl-water/\"><img loading=\"lazy\" width=\"350\" height=\"298\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_waterwebgl.jpg\" alt=\"\" class=\"wp-image-57982\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"http://madebyevan.com/webgl-water/\">WebGL Water</a></h2>\n<p class=\"ct-coll-p\">Evan Wallace made this cool interactive water demo in WebGL.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"http://madebyevan.com/webgl-water/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/13/pixelated-distortion-effect-with-three-js/\"><img loading=\"lazy\" width=\"350\" height=\"261\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_pixelated.jpg\" alt=\"\" class=\"wp-image-57976\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/12/13/pixelated-distortion-effect-with-three-js/\">Pixelated Distortion Effect with Three.js</a></h2>\n<p class=\"ct-coll-p\">In this coding tutorial, you&#8217;ll learn how to recreate an interesting pixel distortion effect using Three.js.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/13/pixelated-distortion-effect-with-three-js/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/13/case-study-a-unique-website-for-basement-grotesque/\"><img loading=\"lazy\" width=\"350\" height=\"263\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/Screen-Shot-2021-12-16-at-11.50.41.jpg\" alt=\"\" class=\"wp-image-57992\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/12/13/case-study-a-unique-website-for-basement-grotesque/\">Case Study: A Unique Website for Basement Grotesque &#8211; Codrops</a></h2>\n<p class=\"ct-coll-p\">A look behind the scenes of Basement Grotesque&#8217;s website, the open-source typeface of basement studio.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/13/case-study-a-unique-website-for-basement-grotesque/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/14/inspirational-websites-roundup-32/\"><img loading=\"lazy\" width=\"350\" height=\"262\" src=\"https://tympanus.net/codrops/wp-content/uploads/2021/12/C692_websitesroundup.jpg\" alt=\"\" class=\"wp-image-57986\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/12/14/inspirational-websites-roundup-32/\">Inspirational Websites Roundup #32</a></h2>\n<p class=\"ct-coll-p\">Get updated on the latests web design trends with this carefully selected collection of creative websites.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/14/inspirational-websites-roundup-32/\">Check it out</a><br />\n</article>\n</div>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/collective/collective-692/\">Collective #692</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>",
      "content_text": "\n\n\n \nInspirational Website of the Week: Highvibe Network\nA beautiful design with great typographic combinations and wonderful details. Our pick this week.\nGet inspired\n\n\n\n\n\n        \nOur Sponsor\nInstant websites for your clients with Divi Layout Packs\nWith the Divi Layout Packs you’ll get world-class designs ready to be used for your client projects.\n        Check it out\n\n\n\n\n\n \n12 Days of Web\nA year-end celebration of fundamental web technologies: HTML, CSS, and JavaScript.\nCheck it out\n\n\n\n\n\n \nPixel Patterns\nYuan Chuan explores mathematical functions for generating amazing pixel-based patterns.\nRead it\n\n\n\n\n\n \nThe State of CSS 2021\nThe results of the annual survey about the latest trends in CSS. It’s also a really cool website!\nCheck it out\n\n\n\n\n\n \nDoodleCSS\nA hand doodled CSS/HTML theme made by Chris McCormick.\nCheck it out\n\n\n\n\n\n \nBreaking Out of the Box\nPatrick Brosset shows how to use Window Controls Overlay, a new PWA functionality that allows to take advantage of the full surface area of an app.\nRead it\n\n\n\n\n\n \nEmbrace the Platform\nBramus’ answer to what the one thing is that people can do is to make their website better?\nCheck it out\n\n\n\n\n\n \nTurborepo\nTurborepo is a high-performance build system for JavaScript and TypeScript codebases.\nCheck it out\n\n\n\n\n\n \nCognitive Bias and the Design Process\nPart 2 of a series that looks at the systematic errors in thinking that affects decisions and judgment during the design process. By Jon Yablonski.\nRead it\n\n\n\n\n\n \nWide Gamut 2D Graphics using HTML Canvas\nEarlier this year, a proposal for creating canvas contexts using other color spaces was added to the HTML standard. Cameron McCormack writes on the recent support of WebKit for this.\nCheck it out\n\n\n\n\n\n \nBeginner’s guide to Svelte\nIn this article you’ll learn Svelte’s basic development methods, as well as advanced topics such as state management and animation.\nRead it\n\n\n\n\n\n \nState of APIs\nThe RapidAPI developer survey results for 2021.\nCheck it out\n\n\n\n\n\n \nServe folder for web development\nServe a local folder of files in your browser for easy testing without having to run a server. Check out the repo.\nCheck it out\n\n\n\n\n\n \nVortex\nA sound experience in WebGL where you can listen or compose music, done with Three.js and GSAP.\nCheck it out\n\n\n\n\n\n \nStraw.Page\nStraw.Page is the world’s simplest website builder. Create unique websites from your mobile device.\nCheck it out\n\n\n\n\n\n \nHTTP compression\nHTTP compression is an important part of the big web performance picture. Leon Brocard covers the history, the current state and the future of web compression.\nRead it\n\n\n\n\n\n \nModern for Wikipedia\nA beautiful, clean, modern web UI for Wikipedia. Enhance your Wikipedia experience with a redesigned look, new features and customization.\nCheck it out\n\n\n\n\n\n \nBuilding a JS library from scratch on Frontend Horse\nChris Ferdinandi shows how to build a JavaScript library from scratch.\nCheck it out\n\n\n\n\n\n \nWebGL Water\nEvan Wallace made this cool interactive water demo in WebGL.\nCheck it out\n\n\n\n\n\n \nFrom Our Blog\nPixelated Distortion Effect with Three.js\nIn this coding tutorial, you’ll learn how to recreate an interesting pixel distortion effect using Three.js.\nCheck it out\n\n\n\n\n\n \nFrom Our Blog\nCase Study: A Unique Website for Basement Grotesque – Codrops\nA look behind the scenes of Basement Grotesque’s website, the open-source typeface of basement studio.\nCheck it out\n\n\n\n\n\n \nFrom Our Blog\nInspirational Websites Roundup #32\nGet updated on the latests web design trends with this carefully selected collection of creative websites.\nCheck it out\n\n\nThe post Collective #692 appeared first on Codrops.",
      "date_published": "2021-12-16T11:52:47.000Z",
      "date_modified": "2021-12-16T11:52:47.000Z",
      "_plugin": {
        "pageFilename": "0945e159bc74565b60444db5acdf9b225c6761268262a72d1907295946020d89.html"
      }
    },
    {
      "id": "https://tympanus.net/codrops/?p=57908",
      "url": "https://tympanus.net/codrops/2021/12/14/inspirational-websites-roundup-32/",
      "title": "Inspirational Websites Roundup #32",
      "summary": "Get updated on the latests web design trends with this carefully selected collection of creative websites.\nThe post Inspirational Websites Roundup #32 appeared first on Codrops.",
      "content_html": "<p>Another month, another websites roundup! The end of the year is always a period where creativity peaks (and deadlines!) so we have an amazing selection for you to indulge in! There&#8217;s a slight trend of using sans serif typefaces and also mixed styles as we are already seeing for a while. Color themes are often toned down and we have lots of dark designs in this batch.</p>\n\n\n\n<p>I hope you enjoy this collection and get inspired and up to date!</p>\n\n\n\n<h2><a href=\"http://ui-advent.tilda.ws/\">Адвент календарь 2022</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"http://ui-advent.tilda.ws/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Адвент-календарь-2022.jpg\" alt=\"\" class=\"wp-image-57915\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Адвент-календарь-2022.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Адвент-календарь-2022-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Адвент-календарь-2022-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://special-s.com/\">Sagmeister &amp; Walsh</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://special-s.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Sagmeister_Walsh.jpg\" alt=\"\" class=\"wp-image-57914\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Sagmeister_Walsh.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Sagmeister_Walsh-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Sagmeister_Walsh-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.hardworkclub.com/\">Hard Work Club</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.hardworkclub.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Hard-Work-Club.jpg\" alt=\"\" class=\"wp-image-57910\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Hard-Work-Club.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Hard-Work-Club-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Hard-Work-Club-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.elite-designstudio.com/\">Elite Design Studio</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.elite-designstudio.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Elite-Design-Studio.jpg\" alt=\"\" class=\"wp-image-57909\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Elite-Design-Studio.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Elite-Design-Studio-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Elite-Design-Studio-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://henriheymans.com/\">Henri Heymans</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://henriheymans.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Henri-Heymans.jpg\" alt=\"\" class=\"wp-image-57911\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Henri-Heymans.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Henri-Heymans-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Henri-Heymans-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://lpalo.com/\">La puce à l&#8217;oreille</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://lpalo.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/La-puce-a-loreille.jpg\" alt=\"\" class=\"wp-image-57912\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/La-puce-a-loreille.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/La-puce-a-loreille-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/La-puce-a-loreille-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://listacross.ouiwill.com/\">ListAcross</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://listacross.ouiwill.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/ListAcross.jpg\" alt=\"\" class=\"wp-image-57913\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/ListAcross.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/ListAcross-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/ListAcross-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://aboutluca.com/\">Luca Nardi</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://aboutluca.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Luca-Nardi.jpg\" alt=\"\" class=\"wp-image-57919\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Luca-Nardi.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Luca-Nardi-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Luca-Nardi-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://roosh.vc/\">Roosh Ventures</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://roosh.vc/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Roosh-Ventures.jpg\" alt=\"\" class=\"wp-image-57922\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Roosh-Ventures.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Roosh-Ventures-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Roosh-Ventures-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.blueyard.com/\">BlueYard Capital</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.blueyard.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/BlueYard-Capital.jpg\" alt=\"\" class=\"wp-image-57917\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/BlueYard-Capital.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/BlueYard-Capital-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/BlueYard-Capital-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"http://ambidexter.fun/\">Ambidexter</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"http://ambidexter.fun/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Ambidexter.jpg\" alt=\"\" class=\"wp-image-57916\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Ambidexter.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Ambidexter-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Ambidexter-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.marvinschwaibold.com/\">Marvin Schwaibold</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.marvinschwaibold.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Marvin-Schwaibold.jpg\" alt=\"\" class=\"wp-image-57920\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Marvin-Schwaibold.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Marvin-Schwaibold-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Marvin-Schwaibold-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.jorisbijdendijk.nl/\">Joris Bijdendijk</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.jorisbijdendijk.nl/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Joris-Bijdendijk.jpg\" alt=\"\" class=\"wp-image-57918\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Joris-Bijdendijk.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Joris-Bijdendijk-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Joris-Bijdendijk-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.rvlt.net/\">Revolt</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.rvlt.net/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Revolt.jpg\" alt=\"\" class=\"wp-image-57921\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Revolt.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Revolt-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Revolt-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://antinomy.eu/\">Antinomy Studio</a></h2>\n\n\n\n<figure class=\"wp-block-image wp-img-border\"><a href=\"https://antinomy.eu/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Antinomy-Studio.jpg\" alt=\"\" class=\"wp-image-57924\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Antinomy-Studio.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Antinomy-Studio-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Antinomy-Studio-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://stevenboniface.com/\">Steven Boniface</a></h2>\n\n\n\n<figure class=\"wp-block-image wp-img-border\"><a href=\"https://stevenboniface.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Steven-Boniface.jpg\" alt=\"\" class=\"wp-image-57929\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Steven-Boniface.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Steven-Boniface-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Steven-Boniface-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://lamalama.nl/\">Lama Lama</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://lamalama.nl/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Lama-Lama.jpg\" alt=\"\" class=\"wp-image-57927\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Lama-Lama.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Lama-Lama-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Lama-Lama-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://grege-interieurs.com/\">Grège</a></h2>\n\n\n\n<figure class=\"wp-block-image wp-img-border\"><a href=\"https://grege-interieurs.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Grege.jpg\" alt=\"\" class=\"wp-image-57926\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Grege.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Grege-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Grege-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://greenroomdesign.com/\">Green Room</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://greenroomdesign.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Green-Room.jpg\" alt=\"\" class=\"wp-image-57925\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Green-Room.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Green-Room-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Green-Room-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://anatoletouvron.fr/\">Anatole Touvron</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://anatoletouvron.fr/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Anatole-Touvron.jpg\" alt=\"\" class=\"wp-image-57923\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Anatole-Touvron.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Anatole-Touvron-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Anatole-Touvron-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://shildan.ouiwill.com/\">Shildan Group</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://shildan.ouiwill.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Shildan-Group.jpg\" alt=\"\" class=\"wp-image-57928\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Shildan-Group.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Shildan-Group-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Shildan-Group-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://atelier.net/social-mobility/\">L&#8217;Atelier</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://atelier.net/social-mobility/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/LAtelier.jpg\" alt=\"\" class=\"wp-image-57936\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/LAtelier.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/LAtelier-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/LAtelier-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.jomor.design/\">Jomor Design</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.jomor.design/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Jomor-Design.jpg\" alt=\"\" class=\"wp-image-57935\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Jomor-Design.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Jomor-Design-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Jomor-Design-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.physioasten.at/\">PhysioAsten &amp; Nnk</a></h2>\n\n\n\n<figure class=\"wp-block-image wp-img-border\"><a href=\"https://www.physioasten.at/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/PhysioAsten-Nnk.jpg\" alt=\"\" class=\"wp-image-57938\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/PhysioAsten-Nnk.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/PhysioAsten-Nnk-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/PhysioAsten-Nnk-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://the-brandidentity.com/\">The Brand Identity</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://the-brandidentity.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/The-Brand-Identity.jpg\" alt=\"\" class=\"wp-image-57939\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/The-Brand-Identity.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/The-Brand-Identity-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/The-Brand-Identity-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://atypikal.co/\">Atypikal Creative</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://atypikal.co/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Atypikal-Creative.jpg\" alt=\"\" class=\"wp-image-57932\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Atypikal-Creative.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Atypikal-Creative-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Atypikal-Creative-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://baillatstudio.com/en\">Baillat Studio</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://baillatstudio.com/en\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Baillat-Studio.jpg\" alt=\"\" class=\"wp-image-57933\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Baillat-Studio.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Baillat-Studio-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Baillat-Studio-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.magnetism.fr/en/\">Magnetism</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.magnetism.fr/en/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Magnetism.jpg\" alt=\"\" class=\"wp-image-57937\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Magnetism.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Magnetism-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Magnetism-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.embacy.io/dostoevsky\">21 Reflections of Dostoevsky in Pop Culture</a></h2>\n\n\n\n<figure class=\"wp-block-image wp-img-border\"><a href=\"https://www.embacy.io/dostoevsky\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/21-Reflections-of-Dostoevsky-in-Pop-Culture.jpg\" alt=\"\" class=\"wp-image-57930\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/21-Reflections-of-Dostoevsky-in-Pop-Culture.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/21-Reflections-of-Dostoevsky-in-Pop-Culture-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/21-Reflections-of-Dostoevsky-in-Pop-Culture-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.hyperframe.com/\">Hyperframe</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.hyperframe.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Hyperframe.jpg\" alt=\"\" class=\"wp-image-57943\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Hyperframe.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Hyperframe-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Hyperframe-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://aluminium.index.studio/\">Aluminium</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://aluminium.index.studio/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Aluminium.jpg\" alt=\"\" class=\"wp-image-57931\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Aluminium.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Aluminium-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Aluminium-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://dala.craftedbygc.com/\">Dala</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://dala.craftedbygc.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Dala.jpg\" alt=\"\" class=\"wp-image-57934\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Dala.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Dala-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Dala-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://moooi.com/en/paper-play\">Paper Play</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://moooi.com/en/paper-play\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Paper-Play.jpg\" alt=\"\" class=\"wp-image-57945\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Paper-Play.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Paper-Play-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Paper-Play-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://clementbalavoine.com/\">Clément Balavoine</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://clementbalavoine.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Clement-Balavoine.jpg\" alt=\"\" class=\"wp-image-57941\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Clement-Balavoine.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Clement-Balavoine-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Clement-Balavoine-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.imreallyatrex.com/\">ImReallyATRex</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.imreallyatrex.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/ImReallyATRex.jpg\" alt=\"\" class=\"wp-image-57944\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/ImReallyATRex.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/ImReallyATRex-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/ImReallyATRex-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.dariaizbash.com/\">Daria IZbash</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.dariaizbash.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Daria-IZbash.jpg\" alt=\"\" class=\"wp-image-57942\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Daria-IZbash.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Daria-IZbash-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Daria-IZbash-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://www.aquerone.com/\">Aquerone</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.aquerone.com/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Aquerone.jpg\" alt=\"\" class=\"wp-image-57940\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Aquerone.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Aquerone-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/Aquerone-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<h2><a href=\"https://vividand.co/\">Vivid+Co</a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://vividand.co/\"><img loading=\"lazy\" width=\"800\" height=\"438\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/VividCo.jpg\" alt=\"\" class=\"wp-image-57946\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/VividCo.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/VividCo-400x219.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/VividCo-768x420.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/14/inspirational-websites-roundup-32/\">Inspirational Websites Roundup #32</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>",
      "content_text": "Another month, another websites roundup! The end of the year is always a period where creativity peaks (and deadlines!) so we have an amazing selection for you to indulge in! There’s a slight trend of using sans serif typefaces and also mixed styles as we are already seeing for a while. Color themes are often toned down and we have lots of dark designs in this batch.\n\n\n\nI hope you enjoy this collection and get inspired and up to date!\n\n\n\nАдвент календарь 2022\n\n\n\n\n\n\n\nSagmeister & Walsh\n\n\n\n\n\n\n\nHard Work Club\n\n\n\n\n\n\n\nElite Design Studio\n\n\n\n\n\n\n\nHenri Heymans\n\n\n\n\n\n\n\nLa puce à l’oreille\n\n\n\n\n\n\n\nListAcross\n\n\n\n\n\n\n\nLuca Nardi\n\n\n\n\n\n\n\nRoosh Ventures\n\n\n\n\n\n\n\nBlueYard Capital\n\n\n\n\n\n\n\nAmbidexter\n\n\n\n\n\n\n\nMarvin Schwaibold\n\n\n\n\n\n\n\nJoris Bijdendijk\n\n\n\n\n\n\n\nRevolt\n\n\n\n\n\n\n\nAntinomy Studio\n\n\n\n\n\n\n\nSteven Boniface\n\n\n\n\n\n\n\nLama Lama\n\n\n\n\n\n\n\nGrège\n\n\n\n\n\n\n\nGreen Room\n\n\n\n\n\n\n\nAnatole Touvron\n\n\n\n\n\n\n\nShildan Group\n\n\n\n\n\n\n\nL’Atelier\n\n\n\n\n\n\n\nJomor Design\n\n\n\n\n\n\n\nPhysioAsten & Nnk\n\n\n\n\n\n\n\nThe Brand Identity\n\n\n\n\n\n\n\nAtypikal Creative\n\n\n\n\n\n\n\nBaillat Studio\n\n\n\n\n\n\n\nMagnetism\n\n\n\n\n\n\n\n21 Reflections of Dostoevsky in Pop Culture\n\n\n\n\n\n\n\nHyperframe\n\n\n\n\n\n\n\nAluminium\n\n\n\n\n\n\n\nDala\n\n\n\n\n\n\n\nPaper Play\n\n\n\n\n\n\n\nClément Balavoine\n\n\n\n\n\n\n\nImReallyATRex\n\n\n\n\n\n\n\nDaria IZbash\n\n\n\n\n\n\n\nAquerone\n\n\n\n\n\n\n\nVivid+Co\n\n\n\n\nThe post Inspirational Websites Roundup #32 appeared first on Codrops.",
      "date_published": "2021-12-14T11:03:05.000Z",
      "date_modified": "2021-12-14T11:03:05.000Z",
      "_plugin": {
        "pageFilename": "5b8e652c8cf2741f91e19c78f2faeab5b6945d5f08fc7a2d536e03cb7b690fd4.html"
      }
    }
  ],
  "_plugin": {
    "rawFeed": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\"\n\txmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n\txmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n\txmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n\txmlns:atom=\"http://www.w3.org/2005/Atom\"\n\txmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n\txmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\"\n\t>\n\n<channel>\n\t<title>Codrops</title>\n\t<atom:link href=\"https://tympanus.net/codrops/feed/\" rel=\"self\" type=\"application/rss+xml\" />\n\t<link>https://tympanus.net/codrops</link>\n\t<description>Creative front-end resources and inspiration for web professionals</description>\n\t<lastBuildDate>Wed, 12 Jan 2022 11:19:23 +0000</lastBuildDate>\n\t<language>en-US</language>\n\t<sy:updatePeriod>\n\thourly\t</sy:updatePeriod>\n\t<sy:updateFrequency>\n\t1\t</sy:updateFrequency>\n\t<generator>https://wordpress.org/?v=5.7.5</generator>\n\t<item>\n\t\t<title>Pixel Distortion Effect with Three.js</title>\n\t\t<link>https://tympanus.net/codrops/2022/01/12/pixel-distortion-effect-with-three-js/</link>\n\t\t\n\t\t<dc:creator><![CDATA[Yuriy Artyukh]]></dc:creator>\n\t\t<pubDate>Wed, 12 Jan 2022 11:19:22 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Playground]]></category>\n\t\t<category><![CDATA[DataTexture]]></category>\n\t\t<category><![CDATA[distortion]]></category>\n\t\t<category><![CDATA[interactive]]></category>\n\t\t<category><![CDATA[mouse]]></category>\n\t\t<category><![CDATA[pixel]]></category>\n\t\t<category><![CDATA[three.js]]></category>\n\t\t<category><![CDATA[webgl]]></category>\n\t\t<guid isPermaLink=\"false\">https://tympanus.net/codrops/?p=58318</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>An interactive WebGL pixel distortion effect with lots of possibilities based on the effect seen on the website for \"Infinite Bad Guy\".</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2022/01/12/pixel-distortion-effect-with-three-js/\">Pixel Distortion Effect with Three.js</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>The creative coder’s dream is to rule pixels on their screen. To arrange them in beautiful patterns and do whatever you want with them. Well, this is exactly what we are going to do with this demo. Let&#8217;s distort and rule pixels with the power of our mouse cursor, just like the developers of the amazing <a href=\"https://billie.withyoutube.com/\">Infinite Bad Guy website</a> did!</p>\n\n\n\n<h2>Setup</h2>\n\n\n\n<p>The scene is the usual, we just create a fullscreen image on a screen, so it preserves the aspect ratio, and has its “background-size: cover” applied through the glsl shader. In the end, we have a geometry stretched for the whole viewport, and a little shader like this:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">vec2 newUV = (vUv - vec2(0.5))*aspect + vec2(0.5);\n    gl_FragColor = texture2D(uTexture,newUV);\n    </pre>\n\n\n\n<p>The whole thing just shows the image, no distortions yet.</p>\n\n\n\n<h2>The Magnificent Data Texture</h2>\n\n\n\n<p>I hope by this time you know that any texture in WebGL is basically just numbers corresponding to each pixel’s color.</p>\n\n\n\n<p>Three.js has a specific API to create your own textures pixel by pixel. It is called, no surprise, <a href=\"https://threejs.org/docs/#api/en/textures/DataTexture\">DataTexture</a>. So let&#8217;s create another texture for our demo, with random numbers:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">    const size = rows * columns;\n    const data = new Float32Array(3 * size);\n\n    for(let i = 0; i &lt; size; i++) {\n          const stride = i * 3;\n          let r = Math.random() * 255 ;\n          let r1 = Math.random() * 255 ;\n\n          data[stride] = r; // red, and also X\n          data[stride + 1] = r1; // green, and also Y\n          data[stride + 2] = 0; // blue\n        }\n    this.texture = new THREE.DataTexture(data, width, height, THREE.RGBFormat, THREE.FloatType);\n    </pre>\n\n\n\n<p>This is heavily based on the default example from the documentation. The only difference is, we are using FloatType texture, so we are not bound to only integer numbers. One of the interesting things is, that numbers should be between 0 and 255, even though, in the GLSL it will be 0..1 range anyway. You should just keep that in mind, so you are using correct number ranges.</p>\n\n\n\n<p>What is also an interesting idea, is that GLSL doesn&#8217;t really care what the numbers mean in your data structures. It could be both color.rgb, and color.xyz. And that&#8217;s precisely what we will use here, we don&#8217;t care about exact color of this texture, we will use it as a distortion for our demo! Just as a nice data structure for GLSL.</p>\n\n\n\n<p>But, just to understand better, this is what the texture will look like when you want to preview it:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"494\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/grid-800x494.jpg\" alt=\"\" class=\"wp-image-58320\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/grid-800x494.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/grid-400x247.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/grid-768x475.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/grid.jpg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>You see those big rectangles because i picked something like 25&#215;35 DataTexture size, which is really low-res.<br>Also, it has colors because im using two different random numbers for XY(Red-Green) variables, which results in this.</p>\n\n\n\n<p>So now, we could already use this texture as a distortion in our fragment shader:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">    vec4 color = texture2D(uTexture,newUV);\n    vec4 offset = texture2D(uDataTexture,vUv);\n    // we are distorting UVs with new texture values\n    gl_FragColor = texture2D(uTexture,newUV - 0.02*offset.rg);\n    </pre>\n\n\n\n<h2>The Mouse and its power</h2>\n\n\n\n<p>So now, let’s make it dynamic! We will need a couple of things. First, we need the mouse position and speed. And also, the mouse radius, meaning, at what distance would the mouse distort our image.</p>\n\n\n\n<p>A short explanation: On each step of the animation, I will loop through my grid cells aka pixels of DataTexture. And assign some values based on mouse position and speed. Second, im going to relax the distortion. This needs to be done, if the user stops moving mouse, the distortion should come to 0.</p>\n\n\n\n<p>So, now the code looks like this, simplified a bit, for better understanding the concept:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">    let data = DataTexture.image.data;\n    // loop through all the pixels of DataTexture\n    for (let i = 0; i &lt; rows; i++) {\n    for (let j = 0; j &lt; cols; j++) {\n        // get distance between mouse, and current DataTexture pixel\n      let distance = distanceBetween(mouse, [i,j])\n      if (distance &lt; maxDistance) {\n\n        let index = 3 * (i + this.size * j); // get the pixel coordinate on screen\n        data[index] = this.mouse.vX ; // mouse speed\n        data[index + 1] =  this.mouse.vY ; // mouse speed\n      }\n    }\n    // slowly move system towards 0 distortion\n    for (let i = 0; i &lt; data.length; i += 3) {\n      data[i] *= 0.9\n      data[i + 1] *= 0.9\n    }\n    DataTexture.needsUpdate = true;</pre>\n\n\n\n<p>A couple of things are added to make it look better, but the concept is here. If you ever worked with particle systems, this is exactly that concept, except our particles never move, we just change some values of the particles (distortion inside each big pixel).</p>\n\n\n\n<h2>Result</h2>\n\n\n\n<p>I left the settings open in the <a href=\"http://tympanus.net/Development/DistortedPixels/index4.html\">last demo</a>, so you can play with parameters and come up with your own unique feel of the animation. Let me know what it inspired you to create!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"550\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/result-800x550.jpg\" alt=\"\" class=\"wp-image-58321\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/result-800x550.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/result-400x275.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/result-768x528.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/result.jpg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2022/01/12/pixel-distortion-effect-with-three-js/\">Pixel Distortion Effect with Three.js</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t\n\t\t\t</item>\n\t\t<item>\n\t\t<title>10 Best WordPress Themes to Use in 2022</title>\n\t\t<link>https://tympanus.net/codrops/2022/01/11/10-best-wordpress-themes-to-use-in-2022/</link>\n\t\t\n\t\t<dc:creator><![CDATA[advertiser]]></dc:creator>\n\t\t<pubDate>Tue, 11 Jan 2022 09:36:45 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Articles]]></category>\n\t\t<category><![CDATA[inspiration]]></category>\n\t\t<category><![CDATA[theme]]></category>\n\t\t<category><![CDATA[website]]></category>\n\t\t<category><![CDATA[wordpress]]></category>\n\t\t<guid isPermaLink=\"false\">https://tympanus.net/codrops/?p=58298</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>A collection of top WordPress themes going into 2022 to help you find the perfect fit for your project.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2022/01/11/10-best-wordpress-themes-to-use-in-2022/\">10 Best WordPress Themes to Use in 2022</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>The online world is increasing exponentially, or so it seems, as roughly one thousand new websites come online every hour of the day.</p>\n\n\n\n<p>No matter the size of your business niche, your competition is only going to increase with time. An attractive website won’t be as productive the future as it may have been in the past.</p>\n\n\n\n<p>And if your website isn’t fully responsive it won’t be very productive at all, no matter how attractive it is.</p>\n\n\n\n<p>When we say fully responsive, we mean flawlessly responsive. When you choose one of the best WordPress themes to build or remake a website you need to know how to find one that will get the job done.</p>\n\n\n\n<p>With thousands of popular WordPress themes to choose from, finding the right one could take time. That is precisely why we’ve compiled this list of the top WordPress themes going into 2022. It’s designed to save you time and help you make the right choice.</p>\n\n\n\n<h2><strong>1. </strong><a href=\"http://be-theme.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"sponsored nofollow\"><strong>BeTheme – <strong>The Biggest Multipurpose WordPress Theme with 650+ pre-built websites</strong></strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"http://be-theme.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-800x332.png\" alt=\"\" class=\"wp-image-58299\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-800x332.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-400x166.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-768x319.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image.png 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>BeTheme is the biggest WordPress and WooCommerce theme of them all with its more than 650 pre-built websites, tons of design aids and options in its 40+ core features, and its more than 240,000 customers.</p>\n\n\n\n<p>A BeTheme-built website will be flawlessly responsive, SEO friendly, and super attractive as well.</p>\n\n\n\n<ul><li>Be’s 650+ pre-built websites are responsive, customizable, and can be configured to address any website type, style, or niche</li><li>The Live Builder is fast, it features an ergonomically-designed UI, and it has incredibly powerful page building capabilities that include live content editing, and autosave, update, and backup options</li><li>The WooCommerce Builder features template-building tools, Single Product layouts, product wish lists, carts, and other customer-centric functions and elements</li><li>Other tools include a Live Search function and Muffin and Header builders, plus BeTheme is Mobile-ready and Elementor-ready.</li></ul>\n\n\n\n<p>BeTheme is always kept up to date and offers free lifetime updates. Click on the banner to learn more about this powerful website-building tool.</p>\n\n\n\n<h2><strong>2. </strong><a href=\"https://total.wpexplorer.com/?utm_source=baw&amp;utm_medium=blog&amp;utm_campaign=top152022\" rel=\"sponsored nofollow\"><strong>Total WordPress Theme</strong></a><strong>&nbsp;</strong></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://total.wpexplorer.com/?utm_source=baw&amp;utm_medium=blog&amp;utm_campaign=top152022\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-800x332.jpeg\" alt=\"\" class=\"wp-image-58300\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>As its name implies, Total is a complete WordPress theme that enables you to create stunning, fully responsive WordPress-powered websites with ease.</p>\n\n\n\n<p>Totals’s 48,000+ users have easy access to the following:</p>\n\n\n\n<ul><li>An extended version of the popular WPBakery page builder with more than 100 builder elements to use in creating layouts</li><li>A new template library with 90+ quick-start section templates and 45+ quick import demos</li><li>Live customizer settings to change colors, fonts, widths and other main settings plus a dynamic template function for creating custom layouts for post types, advanced page setting features, and more</li><li>Local scroll, full screen rows and sliders for building impressive one page sites and landing pages</li><li>Total is developer-friendly with a library of action hooks, custom code snippets, filters, and more</li></ul>\n\n\n\n<p>Click on the banner to learn more about everything Total can accomplish for you.</p>\n\n\n\n<h2><strong>3. </strong><a href=\"https://avada-theme.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"sponsored nofollow\"><strong>Avada Theme</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large wp-img-border\"><a href=\"https://avada-theme.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-800x332.jpeg\" alt=\"\" class=\"wp-image-58301\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>Avada has become the #1 bestselling popular theme of all time for several reasons, the main one being that it allows you to design and build anything that goes through your mind, build it the way you want it, and build it without writing a single line of code.&nbsp;</p>\n\n\n\n<p>This website-building machine is built around three core pillars: Fusion Theme Options, Fusion Page Options, and Fusion Builder. What these three features offer will make you feel like the proverbial kid in the candy store.</p>\n\n\n\n<p>A few examples –</p>\n\n\n\n<ul><li>40+ one-click importable demos and 50+ design elements with hundreds of options</li><li>A Drag and Drop page builder</li><li>$200 worth of tools and premium plugins</li><li>A tried and tested responsive framework that adapts to <em>every </em>screen size</li><li>WooCommerce design tools</li></ul>\n\n\n\n<p>Click on the banner to find out more about what Avada’s 450,000+ satisfied customers already know.</p>\n\n\n\n<h2><strong>4. </strong><a href=\"https://codex-themes.com/thegem/meta-splash/?utm_source=baw&amp;utm_medium=post&amp;utm_campaign=top-themes-2022\" rel=\"sponsored nofollow\"><strong>TheGem – Creative Multi-Purpose &amp; WooCommerce WordPress Theme</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://codex-themes.com/thegem/meta-splash/?utm_source=baw&amp;utm_medium=post&amp;utm_campaign=top-themes-2022\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-2-800x332.jpeg\" alt=\"\" class=\"wp-image-58302\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-2-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-2-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-2-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-2.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>This ThemeForest best seller offers such an amazing multiplicity of website-building tools that it has been called the Swiss Army knife of WordPress Themes.</p>\n\n\n\n<ul><li>For starters, TheGem theme features 400+ customizable creative pre-built one page and multipage websites and templates plus 300+ unique pre-made page sections, all insertable and combinable with just few clicks&nbsp;</li><li>For professionals, TheGem theme offers extended set of customization tools allowing to achieve any imaginable design results in a very fast and easy way&nbsp;</li><li>TheGem is fully compatible with and available for WPBakery and Elementor page builders and features extended WooCommerce site-building tools as well</li><li>It offers very high performance, fast loading speed and includes premium plugins like WP Rocket and Revolution Slider &#8211; all in one package&nbsp;</li></ul>\n\n\n\n<p>TheGem is 5-star rated and trusted by 60,000 customers.</p>\n\n\n\n<h2><strong>5. </strong><a href=\"https://undsgn.com/uncode/?utm_source=adv&amp;utm_medium=baw&amp;utm_campaign=topwpthemes22a\" rel=\"sponsored nofollow\"><strong><strong>Uncode &#8211; Creative &amp; WooCommerce WordPress Theme</strong></strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://undsgn.com/uncode/?utm_source=adv&amp;utm_medium=baw&amp;utm_campaign=topwpthemes22a\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-800x332.png\" alt=\"\" class=\"wp-image-58305\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-800x332.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-400x166.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1-768x319.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-1.png 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>Uncode is a pixel-perfect creative theme that lets you create websites that exhibit the same characteristics that are embedded in the theme itself.</p>\n\n\n\n<ul><li>It is an excellent choice for building WooCommerce, portfolio, magazine, and blog sites</li><li>Key components include 450+ Wireframes section templates, a juiced-up Frontend Editor, and the WooCommerce Custom Builder</li></ul>\n\n\n\n<p>Uncode has enjoyed more than 90.000 sales to date.</p>\n\n\n\n<h2><strong>6.</strong><a href=\"https://woodmart.xtemos.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"sponsored nofollow\"><strong> WoodMart</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://woodmart.xtemos.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-3-800x332.jpeg\" alt=\"\" class=\"wp-image-58303\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-3-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-3-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-3-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-3.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>The Woodmart WooCommerce multipurpose theme is an excellent choice for creating any type of corporate or business-related website.</p>\n\n\n\n<p>With its unlimited customizations, Woodmart is the best-rated eCommerce theme on ThemeForest. Among its many site-building features you’ll find &#8211;</p>\n\n\n\n<ul><li>75+ pre-made websites, a library of 400+ high-quality templates, and multiple Product and Shop options</li><li>A full drag and drop builder, an intuitive setup wizard, and full AJAX shop filters</li></ul>\n\n\n\n<p>Woodmart is performance and SEO optimized.</p>\n\n\n\n<h2><a href=\"https://reytheme.com/?utm_source=bm012022&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"sponsored nofollow\"><strong>7. Rey Theme for WooCommerce</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://reytheme.com/?utm_source=bm012022&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-4-800x332.jpeg\" alt=\"\" class=\"wp-image-58304\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-4-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-4-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-4-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-4.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>With Rey you can take your design efforts to the next level thanks to this theme’s powerful integrations into WooCommerce, Elementor, WordPress’s sophisticated engine itself.</p>\n\n\n\n<p>Features include &#8211;</p>\n\n\n\n<ul><li>Ajax navigation, filtering, search, and presentation capabilities</li><li>Powerful Elementor extensions that provide unlimited flexibility</li><li>Google and Adobe fonts integration</li></ul>\n\n\n\n<p>Rey is performance oriented, SEO and developer friendly, and (naturally) responsive.</p>\n\n\n\n<h2><a href=\"https://xstore.8theme.com/\" rel=\"sponsored nofollow\"><strong>8. XStore &#8211; Best Premium WordPress WooCommerce Theme for eCommerce</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://xstore.8theme.com/\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-5-800x332.jpeg\" alt=\"\" class=\"wp-image-58306\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-5-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-5-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-5-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-5.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>You can build virtually any type of online shop when you have a ton of tools and design options to work with; exactly what XStore provides.</p>\n\n\n\n<p>Features include –</p>\n\n\n\n<ul><li>Full support for Elementor and WPBakery page builders, a Header builder, and a Single Product page builder</li><li>Design aids include 500+ pre-built blocks, 100+ ready-to-customize shops, $500 worth of premium plugins, and a Live Ajax theme option</li><li>Product options including product hovers and 360 degree product view</li></ul>\n\n\n\n<h2><strong>9. </strong><a href=\"https://bit.ly/30Qsoh2\" rel=\"sponsored nofollow\"><strong>Impeka – Creative Multipurpose WordPress Theme</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://bit.ly/30Qsoh2\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-6-800x332.jpeg\" alt=\"\" class=\"wp-image-58307\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-6-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-6-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-6-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-6.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>Impeka guarantees your website will be fast, optimized for SEO, and fully responsive.</p>\n\n\n\n<p>Impeka is WooCommerce ready, and you don’t need any design or coding skills to work with it.</p>\n\n\n\n<p>You get to choose among 3 popular page builders –</p>\n\n\n\n<ul><li>WPBakery with 53+ handcrafted elements</li><li>Elementor with 50+ handcrafted widgets</li><li>Gutenberg with 10 handcrafted blocks</li></ul>\n\n\n\n<p>Impeka is ideal for beginners and full of potential for advanced users.</p>\n\n\n\n<h2><strong>10. </strong><a href=\"http://litho.themezaa.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"sponsored nofollow\"><strong>Litho – Multipurpose Elementor WordPress Theme</strong></a></h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"http://litho.themezaa.com/?utm_source=baw&amp;utm_medium=content&amp;utm_campaign=topwpthemes22a\" rel=\"nofollow sponsor\"><img loading=\"lazy\" width=\"800\" height=\"332\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-7-800x332.jpeg\" alt=\"\" class=\"wp-image-58308\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-7-800x332.jpeg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-7-400x166.jpeg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-7-768x319.jpeg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/image-7.jpeg 1000w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>While Litho can be used to create virtually any type of website, it is especially suited for building portfolio, blog, eCommerce, and business niche sites.</p>\n\n\n\n<p>Litho’s site-building features include –</p>\n\n\n\n<ul><li>The Slider Revolution premium plugin</li><li>Cool selections of home pages, templates, and creative design elements</li><li>Fully compatible and built with Elementor, the world’s #1 page builder</li></ul>\n\n\n\n<p>Litho also gives your site fast loading speeds and healthy SEO results.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Existing cool WordPress themes number in the millions. Unless you have plenty of time to spare, you don’t want to get involved in searching for the best fit for your needs.</p>\n\n\n\n<p>You don’t want to “take a chance” either.</p>\n\n\n\n<p>The best approach is to leave it up to the experts to determine what the top WordPress themes are as we enter 2022. That is what we’ve done here. It may take some thought to find the best theme to fit your needs, but there’s not a bad or wrong choice in the bunch.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2022/01/11/10-best-wordpress-themes-to-use-in-2022/\">10 Best WordPress Themes to Use in 2022</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t\n\t\t\t</item>\n\t\t<item>\n\t\t<title>Crafting Scroll Based Animations in Three.js</title>\n\t\t<link>https://tympanus.net/codrops/2022/01/05/crafting-scroll-based-animations-in-three-js/</link>\n\t\t\n\t\t<dc:creator><![CDATA[Bruno Simon]]></dc:creator>\n\t\t<pubDate>Wed, 05 Jan 2022 11:09:24 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Tutorials]]></category>\n\t\t<category><![CDATA[animation]]></category>\n\t\t<category><![CDATA[gsap]]></category>\n\t\t<category><![CDATA[gsap3]]></category>\n\t\t<category><![CDATA[scroll]]></category>\n\t\t<category><![CDATA[scroll animation]]></category>\n\t\t<category><![CDATA[three.js]]></category>\n\t\t<category><![CDATA[webgl]]></category>\n\t\t<guid isPermaLink=\"false\">https://tympanus.net/codrops/?p=58116</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Learn how to create a scroll based animation in WebGL with Three.js.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2022/01/05/crafting-scroll-based-animations-in-three-js/\">Crafting Scroll Based Animations in Three.js</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>Having an experience composed of only WebGL is great, but sometimes, you&#8217;ll want the experience to be part of a classic website.</p>\n\n\n\n<p>The experience can be in the background to add some beauty to the page, but then, you&#8217;ll want that experience to integrate properly with the HTML content.</p>\n\n\n\n<p>In this tutorial, we will:</p>\n\n\n\n<ul><li>learn how to use Three.js as a background of a classic HTML page</li><li>make the camera translate to follow the scroll</li><li>discover some tricks to make the scrolling more immersive</li><li>add a cool parallax effect based on the cursor position</li><li>trigger some animations when arriving at the corresponding sections</li></ul>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/00-1.mp4\"></video><figcaption><a href=\"https://threejs-journey.com/resources/codrops/threejs-scroll-based-animation/\" target=\"_blank\" rel=\"noreferrer noopener\">See the live version</a></figcaption></figure>\n\n\n\n<div class=\"wp-block-group box-offer\"><div class=\"wp-block-group__inner-container\">\n<p><strong>This tutorial is part of the 39 lessons available in the <a href=\"https://threejs-journey.com/\">Three.js Journey</a> course.</strong></p>\n\n\n\n<p><a href=\"https://threejs-journey.com/\">Three.js Journey</a> is the ultimate course to learn WebGL with Three.js. Once you&#8217;ve subscribed, you get access to 45 hours of videos also available as text version. First, you&#8217;ll start with the basics like the reasons to use Three.js and how to setup a simple scene. Then, you&#8217;ll start animating it, creating cool environments, interacting with it, creating your own models in Blender. To finish, you will learn advanced techniques like physics, shaders, realistic renders, code structuring, baking, etc.</p>\n\n\n\n<p>As a member of the Three.js Journey community, you will also get access to a members-only Discord server.</p>\n\n\n\n<p><strong>Use the code <a href=\"https://threejs-journey.com/join/codrops1\">CODROPS1</a> for a 20% discount.</strong></p>\n</div></div>\n\n\n\n<h2>Starter</h2>\n\n\n\n<p>This tutorial is intended for beginners but with some basic knowledge of Three.js.</p>\n\n\n\n<h3><strong>Installation</strong></h3>\n\n\n\n<p>For this tutorial, a <code>starter.zip</code> file is provided.</p>\n\n\n\n<ul><li>Download the starter <a href=\"https://threejs-journey.com/resources/codrops/threejs-scroll-based-animation/starter.zip\">https://threejs-journey.com/resources/codrops/threejs-scroll-based-animation/starter.zip</a></li><li>Unzip it</li><li>Open the <code>index.html</code> file in your favorite browser</li></ul>\n\n\n\n<p>You should see a red cube at the center with &#8220;My Portfolio&#8221; written on it:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/01-800x450.png\" alt=\"\" class=\"wp-image-58121\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/01-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/01-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/01-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/01-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/01.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>The libraries are loaded as plain <code>&lt;script&gt;</code> to keep things simple and accessible for everyone:</p>\n\n\n\n<ul><li>Three.js in version <code>0.136.0</code></li><li>GSAP in version <code>3.9.1</code></li></ul>\n\n\n\n<p>For specific techniques like Three.js controls or texture loading, you are going to need a development server, but we are not going to use those here.</p>\n\n\n\n<h3>Setup</h3>\n\n\n\n<p>We already have a basic Three.js setup.</p>\n\n\n\n<p>Here’s a quick explaination of what each part of the setup does, but if you want to learn more, everything is explained in the <a href=\"https://threejs-journey.com/\">Three.js Journey</a> course:</p>\n\n\n\n<h4>index.html</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;canvas class=&quot;webgl&quot;&gt;&lt;/canvas&gt;</code></pre>\n\n\n\n<p>Creates a <code>&lt;canvas&gt;</code> in which we are going to draw the WebGL renders.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;section class=&quot;section&quot;&gt;\n    &lt;h1&gt;My Portfolio&lt;/h1&gt;\n&lt;/section&gt;\n&lt;section class=&quot;section&quot;&gt;\n    &lt;h2&gt;My projects&lt;/h2&gt;\n&lt;/section&gt;\n&lt;section class=&quot;section&quot;&gt;\n    &lt;h2&gt;Contact me&lt;/h2&gt;\n&lt;/section&gt;</code></pre>\n\n\n\n<p>Creates some sections with a simple title in them. You can add whatever you want in these.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src=&quot;./three.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;./gsap.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;./script.js&quot;&gt;&lt;/script&gt;</code></pre>\n\n\n\n<p>Loads the Three.js library, the GSAP library, and to finish, our JavaScript file.</p>\n\n\n\n<h4>style.css</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>*\n{\n    margin: 0;\n    padding: 0;\n}</code></pre>\n\n\n\n<p>Resets any <code>margin</code> or <code>padding</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.webgl\n{\n    position: fixed;\n    top: 0;\n    left: 0;\n}</code></pre>\n\n\n\n<p>Makes the WebGL <code>&lt;canvas&gt;</code> fit the viewport and stay fixed while scrolling.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.section\n{\n    display: flex;\n    align-items: center;\n    height: 100vh;\n    position: relative;\n    font-family: &#039;Cabin&#039;, sans-serif;\n    color: #ffeded;\n    text-transform: uppercase;\n    font-size: 7vmin;\n    padding-left: 10%;\n    padding-right: 10%;\n}\n\nsection:nth-child(odd)\n{\n    justify-content: flex-end;\n}</code></pre>\n\n\n\n<p>Centers the sections. Also centers the text vertically and aligns it on the right for one out of two sections.</p>\n\n\n\n<h4>script.js</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector(&#039;canvas.webgl&#039;)\n\n// Scene\nconst scene = new THREE.Scene()\n</code></pre>\n\n\n\n<p>Retrieves the canvas from the HTML and create a Three.js <a href=\"https://threejs.org/docs/#api/en/scenes/Scene\">Scene</a>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Test cube\n */\nconst cube = new THREE.Mesh(\n    new THREE.BoxGeometry(1, 1, 1),\n    new THREE.MeshBasicMaterial({ color: &#039;#ff0000&#039; })\n)\nscene.add(cube)\n</code></pre>\n\n\n\n<p>Creates the red cube that we can see at the center. We are going to remove it shortly.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener(&#039;resize&#039;, () =&gt;\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n</code></pre>\n\n\n\n<p>Saves the size of the viewport in a <code>sizes</code> variable, updates that variable when a <code>resize</code> event occurs and updates the <code>camera</code> and <code>renderer</code> at the same time (more about these two right after).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(35, sizes.width / sizes.height, 0.1, 100)\ncamera.position.z = 6\nscene.add(camera)\n</code></pre>\n\n\n\n<p>Creates a <a href=\"https://threejs.org/docs/#api/en/cameras/PerspectiveCamera\">PerspectiveCamera</a> and moves it backward on the positive <code>z</code> axis.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n</code></pre>\n\n\n\n<p>Creates the <a href=\"https://threejs.org/docs/?q=WebGLRenderer#api/en/renderers/WebGLRenderer\">WebGLRenderer</a> that will render the <code>scene</code> seen from the <code>camera</code> and updates its size and pixel ratio with a maximum of <code>2</code> to prevent performance issues.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst tick = () =&gt;\n{\n    const elapsedTime = clock.getElapsedTime()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()\n</code></pre>\n\n\n\n<p>Starts a loop with a classic <a href=\"https://developer.mozilla.org/fr/docs/Web/API/Window/requestAnimationFrame\">requestAnimationFrame</a> to call the <code>tick</code> function on each frame and animates our experience. In that <code>tick</code> function, we do a render of the <code>scene</code> from the <code>camera</code> on each frame.</p>\n\n\n\n<p>The <a href=\"https://threejs.org/docs/?q=clock#api/en/core/Clock\">Clock</a> lets us retrieve the elapsed time that we save in the <code>elapsedTime</code> variable for later use.</p>\n\n\n\n<h2>HTML Scroll</h2>\n\n\n\n<h3>Fix the elastic scroll</h3>\n\n\n\n<p>In some environments, you might notice that, if you scroll too far, you get a kind of elastic animation when the page goes beyond the limit:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/02-1.mp4\"></video></figure>\n\n\n\n<p>While this is a cool feature, by default, the back of the page is white and doesn&#8217;t match our experience.</p>\n\n\n\n<p>We want to keep that elastic effect for those who have it, but make the white parts the same color as the renderer.</p>\n\n\n\n<p>We could have set the <code>background-color</code> of the page to the same color as the <code>clearColor</code> of the <code>renderer</code>. But instead, we are going to make the <code>clearColor</code> transparent and only set the <code>background-color</code> on the page so that the background color is set at one place only.</p>\n\n\n\n<p>To do that, in <code>/script.js</code>, you need to set the <code>alpha</code> property to <code>true</code> on the <code>WebGLRenderer</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    alpha: true\n})</code></pre>\n\n\n\n<p>By default, the clear alpha value is <code>0</code> which is why we didn&#8217;t have to set it ourselves. Telling the renderer to handle alpha is enough. But if you want to change that value, you can do it with <code>setClearAlpha</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>renderer.setClearAlpha(0)</code></pre>\n\n\n\n<p>We can now see the back of the page which is white:</p>\n\n\n\n<figure class=\"wp-block-image size-large wp-img-border\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/03-800x450.png\" alt=\"\" class=\"wp-image-58125\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/03-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/03-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/03-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/03-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/03.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>In <code>/style.css</code>, add a <code>background-color</code> to the <code>html</code> in CSS:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>html\n{\n    background: #1e1a20;\n}</code></pre>\n\n\n\n<p>We get a nice uniform background color and the elastic scroll isn&#8217;t an issue anymore:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/04-1.mp4\"></video></figure>\n\n\n\n<h2>Objects</h2>\n\n\n\n<p>We are going to create an object for each section to illustrate each of them.</p>\n\n\n\n<p>To keep things simple, we will use Three.js primitives, but you can create whatever you want or even import custom models into the scene.</p>\n\n\n\n<p>In <code>/script.js</code>, remove the code for the cube. In its place, create three <a href=\"https://threejs.org/docs/index.html?q=mesh#api/en/objects/Mesh\">Meshes</a> using a <a href=\"https://threejs.org/docs/index.html?q=torus#api/en/geometries/TorusGeometry\">TorusGeometry</a>, a <a href=\"https://threejs.org/docs/index.html?q=ConeGeometry#api/en/geometries/ConeGeometry\">ConeGeometry</a> and a <a href=\"https://threejs.org/docs/index.html?q=torusk#api/en/geometries/TorusKnotGeometry\">TorusKnotGeometry</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Objects\n */\n// Meshes\nconst mesh1 = new THREE.Mesh(\n    new THREE.TorusGeometry(1, 0.4, 16, 60),\n    new THREE.MeshBasicMaterial({ color: &#039;#ff0000&#039; })\n)\nconst mesh2 = new THREE.Mesh(\n    new THREE.ConeGeometry(1, 2, 32),\n    new THREE.MeshBasicMaterial({ color: &#039;#ff0000&#039; })\n)\nconst mesh3 = new THREE.Mesh(\n    new THREE.TorusKnotGeometry(0.8, 0.35, 100, 16),\n    new THREE.MeshBasicMaterial({ color: &#039;#ff0000&#039; })\n)\n\nscene.add(mesh1, mesh2, mesh3)</code></pre>\n\n\n\n<p>All the objects should be on top of each other (we will fix that later):</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/05-800x450.png\" alt=\"\" class=\"wp-image-58127\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/05-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/05-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/05-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/05-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/05.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>In order to keep things simple, our code will be a bit redundant. But don&#8217;t hesitate to use arrays or other code structuring solutions if you have more sections.</p>\n\n\n\n<h3>Material</h3>\n\n\n\n<h4>Base material</h4>\n\n\n\n<p>We are going to use the <a href=\"https://threejs.org/docs/index.html?q=toon#api/en/materials/MeshToonMaterial\">MeshToonMaterial</a> for the objects and are going to create one instance of the material and use it for all three <a href=\"https://threejs.org/docs/index.html?q=mesh#api/en/objects/Mesh\">Meshes</a>.</p>\n\n\n\n<p>When creating the <a href=\"https://threejs.org/docs/index.html?q=toon#api/en/materials/MeshToonMaterial\">MeshToonMaterial</a>, use <code>&#039;#ffeded&#039;</code> for the <code>color</code> property and apply it to all 3 <a href=\"https://threejs.org/docs/index.html?q=mesh#api/en/objects/Mesh\">Meshes</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Material\nconst material = new THREE.MeshToonMaterial({ color: &#039;#ffeded&#039; })\n\n// Meshes\nconst mesh1 = new THREE.Mesh(\n    new THREE.TorusGeometry(1, 0.4, 16, 60),\n    material\n)\nconst mesh2 = new THREE.Mesh(\n    new THREE.ConeGeometry(1, 2, 32),\n    material\n)\nconst mesh3 = new THREE.Mesh(\n    new THREE.TorusKnotGeometry(0.8, 0.35, 100, 16),\n    material\n)\n\nscene.add(mesh1, mesh2, mesh3)</code></pre>\n\n\n\n<p>Unfortunately, it seems that the objects are now black:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/06-800x450.png\" alt=\"\" class=\"wp-image-58128\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/06-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/06-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/06-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/06-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/06.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>The reason is that the <a href=\"https://threejs.org/docs/index.html?q=toon#api/en/materials/MeshToonMaterial\">MeshToonMaterial</a> is one of the Three.js materials that appears only when there is light.</p>\n\n\n\n<h4>Light</h4>\n\n\n\n<p>Add one <a href=\"https://threejs.org/docs/index.html?q=Direc#api/en/lights/DirectionalLight\">DirectionalLight</a> to the scene:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Lights\n */\nconst directionalLight = new THREE.DirectionalLight(&#039;#ffffff&#039;, 1)\ndirectionalLight.position.set(1, 1, 0)\nscene.add(directionalLight)</code></pre>\n\n\n\n<p>You should now see your objects:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/07-800x450.png\" alt=\"\" class=\"wp-image-58129\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/07-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/07-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/07-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/07-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/07.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<h3>Position</h3>\n\n\n\n<p>By default, in Three.js, the field of view is vertical. This means that if you put one object on the top part of the render and one object on the bottom part of the render and then you resize the window, you&#8217;ll notice that the objects stay put at the top and at the bottom.</p>\n\n\n\n<p>To illustrate this, temporarily add this code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mesh1.position.y = 2\nmesh1.scale.set(0.5, 0.5, 0.5)\n\nmesh2.visible = false\n\nmesh3.position.y = - 2\nmesh3.scale.set(0.5, 0.5, 0.5)</code></pre>\n\n\n\n<p>The torus stays at the top and the torus knot stays at the bottom:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/08-1.mp4\"></video></figure>\n\n\n\n<p>When you&#8217;re done, remove the code above.</p>\n\n\n\n<p>This is good because it means that we only need to make sure that each object is far enough away from the other on the <code>y</code> axis, so that we don&#8217;t see them together.</p>\n\n\n\n<p>Create an <code>objectsDistance</code> variable and choose a random value like <code>2</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const objectsDistance = 2</code></pre>\n\n\n\n<p>Use that variable to position the meshes on the <code>y</code> axis. The values must be negative so that the objects go down:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mesh1.position.y = - objectsDistance * 0\nmesh2.position.y = - objectsDistance * 1\nmesh3.position.y = - objectsDistance * 2</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/09-800x450.png\" alt=\"\" class=\"wp-image-58132\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/09-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/09-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/09-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/09-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/09.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>Increase the <code>objectsDistance</code> until the objects are far enough apart. A good amount should be <code>4</code>, but you can go back to change that value later.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const objectsDistance = 4</code></pre>\n\n\n\n<p>Now, we can only see the first object:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/10-800x450.png\" alt=\"\" class=\"wp-image-58133\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/10-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/10-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/10-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/10-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/10.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>The two others will be below. We will position them horizontally once we move the camera with the scroll and they appear again.</p>\n\n\n\n<p>The <code>objectsDistance</code> will get handy a bit later, which is why we saved the value in a variable.</p>\n\n\n\n<h3>Permanent rotation</h3>\n\n\n\n<p>To give more life to the experience, we are going to add a permanent rotation to the objects.</p>\n\n\n\n<p>First, add the objects to a <code>sectionMeshes</code> array:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const sectionMeshes = &#091; mesh1, mesh2, mesh3 ]</code></pre>\n\n\n\n<p>Then, in the <code>tick</code> function, loop through the <code>sectionMeshes</code> array and apply a slow rotation by using the <code>elapsedTime</code> already available:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    const elapsedTime = clock.getElapsedTime()\n\n    // Animate meshes\n    for(const mesh of sectionMeshes)\n    {\n        mesh.rotation.x = elapsedTime * 0.1\n        mesh.rotation.y = elapsedTime * 0.12\n    }\n\n    // ...\n}</code></pre>\n\n\n\n<p>All the meshes (though we can see only one here) should slowly rotate:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/11-1.mp4\"></video></figure>\n\n\n\n<h2>Camera</h2>\n\n\n\n<h3>Scroll</h3>\n\n\n\n<p>It&#8217;s time to make the camera move with the scroll.</p>\n\n\n\n<p>First, we need to retrieve the scroll value. This can be done with the <code>window.scrollY</code> property.</p>\n\n\n\n<p>Create a <code>scrollY</code> variable and assign it <code>window.scrollY</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Scroll\n */\nlet scrollY = window.scrollY\n</code></pre>\n\n\n\n<p>But then, we need to update that value when the user scrolls. To do that, listen to the <code>&#039;scroll&#039;</code> event on <code>window</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;scroll&#039;, () =&gt;\n{\n    scrollY = window.scrollY\n\n    console.log(scrollY)\n})\n</code></pre>\n\n\n\n<p>You should see the scroll value in the logs. Remove the <code>console.log</code>.</p>\n\n\n\n<p>In the <code>tick</code> function, use <code>scrollY</code> to make the camera move (before doing the render):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    // ...\n\n    // Animate camera\n    camera.position.y = scrollY\n\n    // ...\n}\n</code></pre>\n\n\n\n<p>Not quite right yet:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/12-1.mp4\"></video></figure>\n\n\n\n<p>The camera is way too sensitive and going in the wrong direction. We need to work a little on that value.</p>\n\n\n\n<p><code>scrollY</code> is positive when scrolling down, but the camera should go down on the <code>y</code> axis. Let&#8217;s invert the value:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>camera.position.y = - scrollY</code></pre>\n\n\n\n<p>Better, but still too sensitive:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/13-1.mp4\"></video></figure>\n\n\n\n<p><code>scrollY</code> contains the amount of pixels that have been scrolled. If we scroll 1000 pixels (which is not that much), the camera will go down of 1000 units in the scene (which is a lot).</p>\n\n\n\n<p>Each section has exactly the same size as the viewport. This means that when we scroll the distance of one viewport height, the camera should reach the next object.</p>\n\n\n\n<p>To do that, we need to divide <code>scrollY</code> by the height of the viewport which is <code>sizes.height</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>camera.position.y = - scrollY / sizes.height</code></pre>\n\n\n\n<p>The camera is now going down of <code>1</code> unit for each section scrolled. But the objects are currently separated by <code>4</code> units which is the <code>objectsDistance</code> variable:</p>\n\n\n\n<p>We need to multiply the value by <code>objectsDistance</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>camera.position.y = - scrollY / sizes.height * objectsDistance</code></pre>\n\n\n\n<p>To put it in a nutshell, if the user scrolls down one section, then the camera will move down to the next object:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/14-1.mp4\"></video></figure>\n\n\n\n<h3>Position object horizontally</h3>\n\n\n\n<p>Now is a good time to position the objects left and right to match the titles:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mesh1.position.x = 2\nmesh2.position.x = - 2\nmesh3.position.x = 2</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/15-1.mp4\"></video></figure>\n\n\n\n<h3>Parallax</h3>\n\n\n\n<p>We call parallax the action of seeing one object through different observation points. This is done naturally by our eyes and it&#8217;s how we feel the depth of things.</p>\n\n\n\n<p>To make our experience more immersive, we are going to apply this parallax effect by making the camera move horizontally and vertically according to the mouse movements. It will create a natural interaction, and help the user feel the depth.</p>\n\n\n\n<h4>Cursor</h4>\n\n\n\n<p>First, we need to retrieve the cursor position.</p>\n\n\n\n<p>To do that, create a <code>cursor</code> object with <code>x</code> and <code>y</code> properties:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Cursor\n */\nconst cursor = {}\ncursor.x = 0\ncursor.y = 0</code></pre>\n\n\n\n<p>Then, listen to the <code>mousemove</code> event on <code>window</code> and update those values:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;mousemove&#039;, (event) =&gt;\n{\n    cursor.x = event.clientX\n    cursor.y = event.clientY\n\n    console.log(cursor)\n})</code></pre>\n\n\n\n<p>You should get the pixel positions of the cursor in the console:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/16-1.mp4\"></video></figure>\n\n\n\n<p>While we could use those values directly, it&#8217;s always better to adapt them to the context.</p>\n\n\n\n<p>First, the amplitude depends on the size of the viewport and users with different screen resolutions will have different results. We can normalize the value (from <code>0</code> to <code>1</code>) by dividing them by the size of the viewport:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;mousemove&#039;, (event) =&gt;\n{\n    cursor.x = event.clientX / sizes.width\n    cursor.y = event.clientY / sizes.height\n\n    console.log(cursor)\n})</code></pre>\n\n\n\n<p>While this is better already, we can do even more.</p>\n\n\n\n<p>We know that the camera will be able to go as much on the left as on the right. This is why, instead of a value going from <code>0</code> to <code>1</code> it&#8217;s better to have a value going from <code>-0.5</code> to <code>0.5</code>.</p>\n\n\n\n<p>To do that, subtract <code>0.5</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;mousemove&#039;, (event) =&gt;\n{\n    cursor.x = event.clientX / sizes.width - 0.5\n    cursor.y = event.clientY / sizes.height - 0.5\n\n    console.log(cursor)\n})</code></pre>\n\n\n\n<p>Here is a clean value adapted to the context:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/17-1.mp4\"></video></figure>\n\n\n\n<p>Remove the <code>console.log</code>.</p>\n\n\n\n<p>We can now use the cursor values in the <code>tick</code> function. Create a <code>parallaxX</code> and a <code>parallaxY</code> variable and put the <code>cursor.x</code> and <code>cursor.y</code> in them:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    // ...\n\n    // Animate camera\n    camera.position.y = - scrollY / sizes.height * objectsDistance\n\n    const parallaxX = cursor.x\n    const parallaxY = cursor.y\n    camera.position.x = parallaxX\n    camera.position.y = parallaxY\n\n    // ...\n}</code></pre>\n\n\n\n<p>Unfortunately, we have two issues.</p>\n\n\n\n<p>The <code>x</code> and <code>y</code> axes don&#8217;t seem synchronized in terms of direction. And, the camera scroll doesn&#8217;t work anymore:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/18-1.mp4\"></video></figure>\n\n\n\n<p>Let&#8217;s fix the first issue. When we move the cursor to the left, the camera seems to go to the left. Same thing for the right. But when we move the cursor up, the camera seems to move down and the opposite when moving the cursor down.</p>\n\n\n\n<p>To fix that weird feeling, invert the <code>cursor.y</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    const parallaxX = cursor.x\n    const parallaxY = - cursor.y\n    camera.position.x = parallaxX\n    camera.position.y = parallaxY</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/19-1.mp4\"></video></figure>\n\n\n\n<p>For the second issue, the problem is that we update the <code>camera.position.y</code> twice and the second one will replace the first one.</p>\n\n\n\n<p>To fix that, we are going to put the camera in a <a href=\"https://threejs.org/docs/index.html?q=group#api/en/objects/Group\">Group</a> and apply the parallax on the group and not the camera itself.</p>\n\n\n\n<p>Right before instantiating the <code>camera</code>, create the <a href=\"https://threejs.org/docs/index.html?q=group#api/en/objects/Group\">Group</a>, add it to the scene and add the <code>camera</code> to the <a href=\"https://threejs.org/docs/index.html?q=group#api/en/objects/Group\">Group</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Camera\n */\n// Group\nconst cameraGroup = new THREE.Group()\nscene.add(cameraGroup)\n\n// Base camera\nconst camera = new THREE.PerspectiveCamera(35, sizes.width / sizes.height, 0.1, 100)\ncamera.position.z = 6\ncameraGroup.add(camera)</code></pre>\n\n\n\n<p>This shouldn&#8217;t change the result, but now, the camera is inside a group.</p>\n\n\n\n<p>In the <code>tick</code> function, instead of applying the parallax on the camera, apply it on the <code>cameraGroup</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    // ...\n\n    // Animate camera\n    camera.position.y = - scrollY / sizes.height * objectsDistance\n\n    const parallaxX = cursor.x\n    const parallaxY = - cursor.y\n    \n    cameraGroup.position.x = parallaxX\n    cameraGroup.position.y = parallaxY\n\n    // ...\n}</code></pre>\n\n\n\n<p>The scroll animation and parallax animation are now mixed together nicely:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/20-1.mp4\"></video></figure>\n\n\n\n<p>But we can do even better.</p>\n\n\n\n<h4>Easing</h4>\n\n\n\n<p>The parallax animation is a good start, but it feels a bit too mechanic. Having such a linear animation is impossible in real life for a number of reasons: the camera has weight, there is friction with the air and surfaces, muscles can&#8217;t make such a linear movement, etc. This is why the movement feels a bit wrong. We are going to add some &#8220;easing&#8221; (also called &#8220;smoothing&#8221; or &#8220;lerping&#8221;) and we are going to use a well-known formula.</p>\n\n\n\n<p>The idea behind the formula is that, on each frame, instead of moving the camera straight to the target, we are going to move it (let&#8217;s say) a 10th closer to the destination. Then, on the next frame, another 10th closer. Then, on the next frame, another 10th closer.</p>\n\n\n\n<p>On each frame, the camera will get a little closer to the destination. But, the closer it gets, the slower it moves because it&#8217;s always a 10th of the actual position toward the target position.</p>\n\n\n\n<p>First, we need to change the <code>=</code> to <code>+=</code> because we are adding to the actual position:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    cameraGroup.position.x += parallaxX\n    cameraGroup.position.y += parallaxY</code></pre>\n\n\n\n<p>Then, we need to calculate the distance from the actual position to the destination:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    cameraGroup.position.x += (parallaxX - cameraGroup.position.x)\n    cameraGroup.position.y += (parallaxY - cameraGroup.position.y)</code></pre>\n\n\n\n<p>Finally, we only want a 10th of that distance:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    cameraGroup.position.x += (parallaxX - cameraGroup.position.x) * 0.1\n    cameraGroup.position.y += (parallaxY - cameraGroup.position.y) * 0.1</code></pre>\n\n\n\n<p>The animation feels a lot smoother:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/21-1.mp4\"></video></figure>\n\n\n\n<p>But there is still a problem that some of you might have noticed.</p>\n\n\n\n<p>If you test the experience on a high frequency screen, the <code>tick</code> function will be called more often and the camera will move faster toward the target. While this is not a big issue, it&#8217;s not accurate and it&#8217;s preferable to have the same result across devices as much as possible.</p>\n\n\n\n<p>To fix that, we need to use the time spent between each frame.</p>\n\n\n\n<p>Right after instantiating the <a href=\"https://threejs.org/docs/index.html?q=clock#api/en/core/Clock\">Clock</a>, create a <code>previousTime</code> variable:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const clock = new THREE.Clock()\nlet previousTime = 0</code></pre>\n\n\n\n<p>At the beginning of the <code>tick</code> function, right after setting the <code>elapsedTime</code>, calculate the <code>deltaTime</code> by subtracting the <code>previousTime</code> from the <code>elapsedTime</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    const elapsedTime = clock.getElapsedTime()\n    const deltaTime = elapsedTime - previousTime\n\n    // ...\n}</code></pre>\n\n\n\n<p>And then, update the <code>previousTime</code> to be used on the next frame:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    const elapsedTime = clock.getElapsedTime()\n    const deltaTime = elapsedTime - previousTime\n    previousTime = elapsedTime\n\n    console.log(deltaTime)\n\n    // ...\n}</code></pre>\n\n\n\n<p>You now have the time spent between the current frame and the previous frame in seconds. For high frequency screens, the value will be smaller because less time was needed.</p>\n\n\n\n<p>We can now use that <code>deltaTime</code> on the parallax, but, because the <code>deltaTime</code> is in seconds, the value will be very small (around <code>0.016</code> for most common screens running at 60fps). Consequently, the effect will be very slow.</p>\n\n\n\n<p>To fix that, we can change <code>0.1</code> to something like <code>5</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    cameraGroup.position.x += (parallaxX - cameraGroup.position.x) * 5 * deltaTime\n    cameraGroup.position.y += (parallaxY - cameraGroup.position.y) * 5 * deltaTime</code></pre>\n\n\n\n<p>We now have a nice easing that will feel the same across different screen frequencies:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/22-1.mp4\"></video></figure>\n\n\n\n<p>Finally, now that we have the animation set properly, we can lower the amplitude of the effect:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    const parallaxX = cursor.x * 0.5\n    const parallaxY = - cursor.y * 0.5\n</code></pre>\n\n\n\n<h2>Particles</h2>\n\n\n\n<p>A good way to make the experience more immersive and to help the user feel the depth is to add particles.</p>\n\n\n\n<p>We are going to create very simple square particles and spread them around the scene.</p>\n\n\n\n<p>Because we need to position the particles ourselves, we are going to create a custom <a href=\"https://threejs.org/docs/index.html?q=bufferG#api/en/core/BufferGeometry\">BufferGeometry</a>.</p>\n\n\n\n<p>Create a <code>particlesCount</code> variable and a <code>positions</code> variable using a <code>Float32Array</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\n * Particles\n */\n// Geometry\nconst particlesCount = 200\nconst positions = new Float32Array(particlesCount * 3)</code></pre>\n\n\n\n<p>Create a loop and add random coordinates to the <code>positions</code> array:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for(let i = 0; i &lt; particlesCount; i++)\n{\n    positions&#091;i * 3 + 0] = Math.random()\n    positions&#091;i * 3 + 1] = Math.random()\n    positions&#091;i * 3 + 2] = Math.random()\n}</code></pre>\n\n\n\n<p>We will change the positions later, but for now, let&#8217;s keep things simple and make sure that our geometry is working.</p>\n\n\n\n<p>Instantiate the <a href=\"https://threejs.org/docs/index.html?q=bufferG#api/en/core/BufferGeometry\">BufferGeometry</a> and set the <code>position</code> attribute:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const particlesGeometry = new THREE.BufferGeometry()\nparticlesGeometry.setAttribute(&#039;position&#039;, new THREE.BufferAttribute(positions, 3))</code></pre>\n\n\n\n<p>Create the material using <a href=\"https://threejs.org/docs/index.html?q=PointsMaterial#api/en/materials/PointsMaterial\">PointsMaterial</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Material\nconst particlesMaterial = new THREE.PointsMaterial({\n    color: &#039;#ffeded&#039;,\n    sizeAttenuation: true,\n    size: 0.03\n})</code></pre>\n\n\n\n<p>Create the particles using <a href=\"https://threejs.org/docs/index.html?q=points#api/en/objects/Points\">Points</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Points\nconst particles = new THREE.Points(particlesGeometry, particlesMaterial)\nscene.add(particles)</code></pre>\n\n\n\n<p>You should get a bunch of particles spread around in a cube:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"450\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/23-800x450.png\" alt=\"\" class=\"wp-image-58146\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/23-800x450.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/23-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/23-768x432.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/23-1536x864.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/23.png 1920w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>We can now position the particles on the three axes.</p>\n\n\n\n<p>For the <code>x</code> (horizontal) and <code>z</code> (depth), we can use random values that can be as much positive as they are negative:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for(let i = 0; i &lt; particlesCount; i++)\n{\n    positions&#091;i * 3 + 0] = (Math.random() - 0.5) * 10\n    positions&#091;i * 3 + 1] = Math.random()\n    positions&#091;i * 3 + 2] = (Math.random() - 0.5) * 10\n}</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/24-1.mp4\"></video></figure>\n\n\n\n<p>For the <code>y</code> (vertical) it&#8217;s a bit more tricky. We need to make the particles start high enough and then spread far enough below so that we reach the end with the scroll.</p>\n\n\n\n<p>To do that, we can use the <code>objectsDistance</code> variable and multiply by the number of objects which is the <code>length</code> of the <code>sectionMeshes</code> array:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for(let i = 0; i &lt; particlesCount; i++)\n{\n    positions&#091;i * 3 + 0] = (Math.random() - 0.5) * 10\n    positions&#091;i * 3 + 1] = objectsDistance * 0.5 - Math.random() * objectsDistance * sectionMeshes.length\n    positions&#091;i * 3 + 2] = (Math.random() - 0.5) * 10\n}</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/25-1.mp4\"></video></figure>\n\n\n\n<p>That&#8217;s all for the particles, but you can improve them with random sizes, random alpha. And, we can even animate them.</p>\n\n\n\n<h2>Triggered rotations</h2>\n\n\n\n<p>As a final feature and to make the exercise just a bit harder, we are going to make the objects do a little spin when we arrive at the corresponding section in addition to the permanent rotation.</p>\n\n\n\n<h3>Knowing when to trigger the animation</h3>\n\n\n\n<p>First, we need a way to know when we reach a section. There are plenty of ways of doing that and we could even use a library, but in our case, we can use the <code>scrollY</code> value and do some math to find the current section.</p>\n\n\n\n<p>After creating the <code>scrollY</code> variable, create a <code>currentSection</code> variable and set it to <code>0</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let scrollY = window.scrollY\nlet currentSection = 0</code></pre>\n\n\n\n<p>In the <code>&#039;scroll&#039;</code> event callback function, calculate the current section by dividing the <code>scrollY</code> by <code>sizes.height</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;scroll&#039;, () =&gt;\n{\n    scrollY = window.scrollY\n\n    const newSection = scrollY / sizes.height\n    \n    console.log(newSection)\n})</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/26-1.mp4\"></video></figure>\n\n\n\n<p>This works because each section is exactly one height of the viewport.</p>\n\n\n\n<p>To get the exact section instead of that float value, we can use <code>Math.round()</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;scroll&#039;, () =&gt;\n{\n    scrollY = window.scrollY\n\n    const newSection = Math.round(scrollY / sizes.height)\n    \n    console.log(newSection)\n})</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/27-1.mp4\"></video></figure>\n\n\n\n<p>We can now test if <code>newSection</code> is different from <code>currentSection</code>. If so, that means we changed the section and we can update the <code>currentSection</code> in order to do our animation:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;scroll&#039;, () =&gt;\n{\n    scrollY = window.scrollY\n    const newSection = Math.round(scrollY / sizes.height)\n\n    if(newSection != currentSection)\n    {\n        currentSection = newSection\n\n        console.log(&#039;changed&#039;, currentSection)\n    }\n})</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/28-1.mp4\"></video></figure>\n\n\n\n<h3>Animating the meshes</h3>\n\n\n\n<p>We can now animate the meshes and, to do that, we are going to use <a href=\"https://greensock.com/gsap/\">GSAP</a>.</p>\n\n\n\n<p>The <a href=\"https://greensock.com/gsap/\">GSAP</a> library is already loaded from the HTML file as we did for Three.js.</p>\n\n\n\n<p>Then, in the <code>if</code> statement we did earlier, we can do the animation with <code>gsap.to()</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>window.addEventListener(&#039;scroll&#039;, () =&gt;\n{\n    // ...\n    \n    if(newSection != currentSection)\n    {\n        // ...\n\n        gsap.to(\n            sectionMeshes&#091;currentSection].rotation,\n            {\n                duration: 1.5,\n                ease: &#039;power2.inOut&#039;,\n                x: &#039;+=6&#039;,\n                y: &#039;+=3&#039;\n            }\n        )\n    }\n})</code></pre>\n\n\n\n<p>While this code is valid, it will unfortunately not work. The reason is that, on each frame, we are already updating the <code>rotation.x</code> and <code>rotation.y</code> of each mesh with the <code>elapsedTime</code>.</p>\n\n\n\n<p>To fix that, in the tick function, instead of setting a very specific rotation based on the <code>elapsedTime</code>, we are going to add the <code>deltaTime</code> to the current rotation:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const tick = () =&gt;\n{\n    // ...\n\n    for(const mesh of sectionMeshes)\n    {\n        mesh.rotation.x += deltaTime * 0.1\n        mesh.rotation.y += deltaTime * 0.12\n    }\n\n    // ...\n}</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/29-1.mp4\"></video></figure>\n\n\n\n<h2>Final code</h2>\n\n\n\n<p>You can download the final project here <a href=\"https://threejs-journey.com/resources/codrops/threejs-scroll-based-animation/final.zip\">https://threejs-journey.com/resources/codrops/threejs-scroll-based-animation/final.zip</a></p>\n\n\n\n<h2>Go further</h2>\n\n\n\n<p>We kept things really simple on purpose, but you can for sure go much further!</p>\n\n\n\n<ul><li>Add more content to the HTML</li><li>Animate other properties like the material</li><li>Animate the HTML texts</li><li>Improve the particles</li><li>Add more tweaks to the Debug UI</li><li>Test other colors</li><li>Add mobile and touch support</li><li>Etc.</li></ul>\n\n\n\n<p>If you liked this tutorial or want to learn more about WebGL and Three.js, join the <a href=\"https://threejs-journey.com/\">Three.js Journey</a> course!</p>\n\n\n\n<p>As a reminder, here’s a 20% discount <a href=\"https://threejs-journey.com/join/codrops1\">CODROPS1</a> for you <img src=\"https://s.w.org/images/core/emoji/13.0.1/72x72/1f609.png\" alt=\"😉\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2022/01/05/crafting-scroll-based-animations-in-three-js/\">Crafting Scroll Based Animations in Three.js</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/00-1.mp4\" length=\"844554\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/02-1.mp4\" length=\"152326\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/04-1.mp4\" length=\"133235\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/08-1.mp4\" length=\"205357\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/11-1.mp4\" length=\"285775\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/12-1.mp4\" length=\"113177\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/13-1.mp4\" length=\"215229\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/14-1.mp4\" length=\"374238\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/15-1.mp4\" length=\"390446\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/16-1.mp4\" length=\"501635\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/17-1.mp4\" length=\"2241279\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/18-1.mp4\" length=\"333367\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/19-1.mp4\" length=\"140914\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/20-1.mp4\" length=\"279144\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/21-1.mp4\" length=\"134351\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/22-1.mp4\" length=\"142750\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/24-1.mp4\" length=\"280062\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/25-1.mp4\" length=\"478199\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/26-1.mp4\" length=\"1104337\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/27-1.mp4\" length=\"422521\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/28-1.mp4\" length=\"356392\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2022/01/29-1.mp4\" length=\"451180\" type=\"video/mp4\" />\n\n\t\t\t</item>\n\t\t<item>\n\t\t<title>Building a Scrollable and Draggable Timeline with GSAP</title>\n\t\t<link>https://tympanus.net/codrops/2022/01/03/building-a-scrollable-and-draggable-timeline-with-gsap/</link>\n\t\t\n\t\t<dc:creator><![CDATA[Michelle Barker]]></dc:creator>\n\t\t<pubDate>Mon, 03 Jan 2022 11:44:41 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Tutorials]]></category>\n\t\t<category><![CDATA[draggable]]></category>\n\t\t<category><![CDATA[Navigation]]></category>\n\t\t<category><![CDATA[scrollable]]></category>\n\t\t<category><![CDATA[timeline]]></category>\n\t\t<guid isPermaLink=\"false\">https://tympanus.net/codrops/?p=58011</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Learn how to build a scrollable and draggable horizontal timeline using GSAP's ScrollTrigger and Draggable plugins.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2022/01/03/building-a-scrollable-and-draggable-timeline-with-gsap/\">Building a Scrollable and Draggable Timeline with GSAP</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>The Greensock animation library’s ScrollTrigger and Draggable plugins can help us create some very cool effects that respond to user interaction. In this tutorial we’ll look at how to use them together, to create an interactive timeline that’s both scrollable <em>and</em> draggable.</p>\n\n\n\n<p>We’re going to build a timeline showing albums released by the rock band Radiohead. The subject of our timeline doesn’t really matter — the main thing is a series of events that happen over a number of dates — so feel free to pick your own subject matter to make it more personal to you!</p>\n\n\n\n<p>We’ll have a timeline along the top of our webpage showing our dates, and a number of full-width sections where our content for each of those dates will live. Dragging the horizontal timeline should scroll the page to the appropriate place in the content, and likewise scrolling the page will cause our timeline to update. Additionally, clicking any of the links in the timeline will allow the user to jump straight to the relevant section. This means we have three different methods for navigating our page — and they all have to sync perfectly with one another.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"800\" height=\"199\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/gsap-scroll-drag_small.png\" alt=\"Three stages showing the horizontal timeline moving from right to left while the page itself is scrolled vertically\" class=\"wp-image-58047\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/gsap-scroll-drag_small.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/gsap-scroll-drag_small-400x100.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/gsap-scroll-drag_small-768x191.png 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>We’re going to walk through the steps for creating our timeline. Feel free to jump straight to <a href=\"https://codepen.io/michellebarker/full/597a468071d4dce3f7bf0ce80d6cb8d3\">the final demo</a> if you want to get stuck into the code, or use <a href=\"https://codepen.io/michellebarker/pen/b6b3ffc832941e2509a17a48ab683e05\">this starter Codepen</a>, which includes some simple initial styles so you can concentrate on the JS.</p>\n\n\n\n<h2>Markup</h2>\n\n\n\n<p>Let’s start with our HTML. As this is going to be our main page navigation, we’ll use the <code>&lt;nav&gt;</code> element. Inside this, we have a marker, which we’ll style with CSS to indicate the position on the timeline. We also have a <code>&lt;div&gt;</code> with a class of <code>nav__track</code>, which will be our draggable trigger. It houses our list of navigation links.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;nav&gt;\n\t&lt;!--Shows our position on the timeline--&gt;\n\t&lt;div class=&quot;marker&quot;&gt;&lt;/div&gt;\n\t\n\t&lt;!--Draggable element--&gt;\n\t&lt;div class=&quot;nav__track&quot; data-draggable&gt;\n\t\t&lt;ul class=&quot;nav__list&quot;&gt;\n\t\t\t&lt;li&gt;\n\t\t\t\t&lt;a href=&quot;#section_1&quot; class=&quot;nav__link&quot; data-link&gt;&lt;span&gt;1993&lt;/span&gt;&lt;/a&gt;\n\t\t\t&lt;/li&gt;\n\t\t\t&lt;li&gt;\n\t\t\t\t&lt;a href=&quot;#section_2&quot; class=&quot;nav__link&quot; data-link&gt;&lt;span&gt;1995&lt;/span&gt;&lt;/a&gt;\n\t\t\t&lt;/li&gt;\n\t\t\t&lt;li&gt;\n\t\t\t\t&lt;a href=&quot;#section_3&quot; class=&quot;nav__link&quot; data-link&gt;&lt;span&gt;1997&lt;/span&gt;&lt;/a&gt;\n\t\t\t&lt;/li&gt;\n\t\t\t&lt;!--More list items go here--&gt;\n\t\t&lt;/ul&gt;\n\t&lt;/div&gt;\n&lt;/nav&gt;</code></pre>\n\n\n\n<p>Below our nav, we have the main content of our page, which includes a number of sections. We’ll give each one an <code>id</code> that corresponds to one of the links in the navigation. That way, when a user clicks a link they’ll be scrolled to the relevant place in the content — no JS required.</p>\n\n\n\n<p>We’ll also set each one a custom property corresponding to the section’s index. This is optional, but can be useful for styling. We won’t worry about the content of our sections for now.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;main&gt;\n\t&lt;section id=&quot;section_1&quot; style=&quot;--i: 0&quot;&gt;&lt;/section&gt;\n\t&lt;section id=&quot;section_2&quot; style=&quot;--i: 1&quot;&gt;&lt;/section&gt;\n\t&lt;section id=&quot;section_3&quot; style=&quot;--i: 2&quot;&gt;&lt;/section&gt;\n\t&lt;!--More list sections go here--&gt;\n&lt;/main&gt;</code></pre>\n\n\n\n<h2>CSS</h2>\n\n\n\n<p>Next we’ll move onto our basic layout. We’ll give each section a <code>min-height</code> of <code>100vh</code>. We can also give them a background color, to make it obvious when we’re scrolling through the sections. We can use the custom property we set in the last step in combination with the <code>hsl()</code> color function to give each one a unique hue:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">section {\n\t--h: calc(var(--i) * 30);\n\t\n\tmin-height: 100vh;\n\tbackground-color: hsl(var(--h, 0) 75% 50%);\n}</code></pre>\n\n\n\n<p>We’ll position our nav along the top of the page and give it a fixed position.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">nav {\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n}</code></pre>\n\n\n\n<p>While the nav itself will be fixed (to ensure it remains visible as the user scrolls), the track inside it will be draggable. This will need to be wider than the viewport, as we want the user to be able to drag it all the way along. It also needs some padding, as we’ll need the user to be able to drag on the area <em>after</em> our items have ended, so that they can move the track all the way along. To ensure our track has a suitable width at all viewport sizes, we can use the <code>max()</code> function. This returns the largest of two comma-separated values. At narrow viewport widths our track will be a minimum of 200rem wide, ensuring that our items retain a pleasing distance from one another. At larger viewport widths the track will be 200% wide which, accounting for the padding, means our items will be dispersed evenly along the width of the viewport when position them with flexbox.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">.nav__track {\n\tposition: relative;\n\tmin-width: max(200rem, 200%);\n\tpadding: 1.5rem max(100rem, 100%) 0 0;\n\theight: 6rem;\n}\n\n.nav__list {\n\t/* Remove default list styles */\n\tlist-style: none;\n\tmargin: 0;\n\tpadding: 0;\n\t\n\t/* Position items horizontally */\n\tdisplay: flex;\n\tjustify-content: space-between;\n}</code></pre>\n\n\n\n<p>We can also style our marker, which will show the user the current position on the timeline. For now we’ll add a simple dot, which we’ll position 4rem from the left. If we also set a width of 4rem on our navigation items, this should center the first navigation item below the marker on the left of the viewport.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">.marker {\n\tposition: fixed;\n\ttop: 1.75rem;\n\tleft: 4rem;\n\twidth: 1rem;\n\theight: 1rem;\n\ttransform: translate3d(-50%, 0, 0);\n\tbackground: blue;\n\tborder-radius: 100%;\n\tz-index: 2000;\n}\n\n.nav__link {\n\tposition: relative;\n\tdisplay: block;\n\tmin-width: 8rem;\n\ttext-align: center;\n}</code></pre>\n\n\n\n<p>You might want to add some custom styling to the track like I’ve done in the demo, but this should be enough for us to move onto the next step.</p>\n\n\n\n<h2>The JavaScript</h2>\n\n\n\n<h3>Installing plugins</h3>\n\n\n\n<p>We’ll be using the GSAP (Greensock) core package and its ScrollTrigger and Draggable plugins. There are many ways to install GSAP — check out <a href=\"https://greensock.com/docs/v3/Installation\">this page</a> for options. If you go for the NPM option, you’ll’ll need to import the modules at the top of the JS file, and register the plugins:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">import gsap from &#039;gsap&#039;\nimport ScrollTrigger from &#039;gsap/ScrollTrigger&#039;\nimport Draggable from &#039;gsap/Draggable&#039;\n\ngsap.registerPlugin(ScrollTrigger, Draggable)</code></pre>\n\n\n\n<h3>Creating the animation timeline</h3>\n\n\n\n<p>We want the track to move horizontally when the user scrolls the page or drags the timeline itself. We <em>could</em> allow the user to drag the marker instead, but this wouldn’t work well if we had more navigation items than would fit horizontally in the viewport. If we keep the marker stationary while moving the track, it gives us a lot more flexibility.</p>\n\n\n\n<p>The first thing we’ll do is create an animation <a href=\"https://greensock.com/docs/v3/GSAP/Timeline\">timeline</a> with GSAP. Our timeline is quite simple: it will include just a single tween to move the track to the left, until the last item is just below the marker we positioned earlier. We’ll need to use the width of the last nav item in some other places, so we’ll create a function we can call whenever we need this value. We can use GSAP’s <code>toArray</code> <a href=\"https://greensock.com/docs/v3/GSAP/gsap.utils\">utility function</a> to set an array of our nav links as a variable:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const navLinks = gsap.utils.toArray(&#039;[data-link]&#039;)\n\nconst lastItemWidth = () =&gt; navLinks[navLinks.length - 1].offsetWidth</code></pre>\n\n\n\n<p>Now we can use that to calculate the <em>x</em> value in our tween:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const track = document.querySelector(&#039;[data-draggable]&#039;)\n\nconst tl = gsap.timeline()\n\t.to(track, {\n\t\tx: () =&gt; {\n\t\t\treturn ((track.offsetWidth * 0.5) - lastItemWidth()) * -1\n\t\t},\n\t\tease: &#039;none&#039; // important!\n\t})</code></pre>\n\n\n\n<h4>Easing</h4>\n\n\n\n<p>We’re also removing the easing on our timeline tween. This is very important, as the movement will be tied to the scroll position, and easing would play havoc with our calculations later on!</p>\n\n\n\n<h3>Creating the ScrollTrigger instance</h3>\n\n\n\n<p>We’re going to create a ScrollTrigger instance, which will trigger the timeline animation. We’ll set the <code>scrub</code> value as <code>0</code>. This will cause our animation to play at the rate the user scrolls. A value other than <code>0</code> creates a lag between the scroll action and the animation, which can work nicely in some instances, but won’t serve us well here.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const st = ScrollTrigger.create({\n\tanimation: tl,\n\tscrub: 0\n})</code></pre>\n\n\n\n<p>Our animation timeline will start playing as soon as the user starts scrolling from the top of the page, and end when the page is scrolled all the way to the bottom. If you need anything different, you’ll need to specify <code>start</code> and <code>end</code> values on the ScrollTrigger instance too. (See the <a href=\"https://greensock.com/docs/v3/Plugins/ScrollTrigger\">ScrollTrigger documentation</a> for more details).</p>\n\n\n\n<h3>Creating the Draggable instance</h3>\n\n\n\n<p>Now we’ll create a Draggable instance. We’ll pass in our track as the first argument (the element we want to make draggable). In our options (the second argument) we’ll specify <code>&lt;em&gt;x&lt;/em&gt;</code> for the type, as we only want it to be dragged horizontally. We can also set <code>inertia</code> to <code>true</code>. This is optional, as it requires the <a href=\"https://greensock.com/docs/v3/Plugins/InertiaPlugin\">Inertia plugin</a>, a premium plugin for Greensock members (but free to use on Codepen). Using Inertia mean that when the user lets go after dragging the element, it will glide to a stop in a more naturalistic way. It’s not strictly necessary for this demo, but I prefer the effect.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const draggableInstance = Draggable.create(track, {\n\ttype: &#039;x&#039;,\n\tinertia: true\n})</code></pre>\n\n\n\n<p>Next we want to set the <code>bounds</code>, otherwise there’s a danger the element could be dragged right off the screen. We’ll set the minimum and maximum values the element can be dragged. We don’t want it to be dragged any further to the right than its current start position, so we’ll set <code>minX</code> as <em>0</em>. The <code>maxX</code> value will in fact need to be the same value as used in our timeline tween — so how about we make a function for that:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const getDraggableWidth = () =&gt; {\n\treturn (track.offsetWidth * 0.5) - lastItemWidth()\n}\n\nconst draggableInstance = Draggable.create(track, {\n\ttype: &#039;x&#039;,\n\tinertia: true,\n\tbounds: {\n\t\tminX: 0,\n\t\tmaxX: getDraggableWidth() * -1\n\t},\n\tedgeResistance: 1 // Don’t allow any dragging beyond the bounds\n})</code></pre>\n\n\n\n<p>We’ll need to set <code>edgeResistance</code> to <code>1</code>, which will prevent any dragging at all beyond our specified bounds.</p>\n\n\n\n<h3>Putting them together</h3>\n\n\n\n<p>Now, for the technical part! We’re going to programmatically scroll the page when the user drags the element. The first thing to do is to disable the ScrollTrigger instance when the user starts dragging the track, and re-enable it when the drag ends. We can use the <code>onDragStart</code> and <code>onDragEnd</code> options on our Draggable instance to do that:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const draggableInstance = Draggable.create(track, {\n\ttype: &#039;x&#039;,\n\tinertia: true,\n\tbounds: {\n\t\tminX: 0,\n\t\tmaxX: getDraggableWidth() * -1\n\t},\n\tedgeResistance: 1,\n\tonDragStart: () =&gt; st.disable(),\n\tonDragEnd: () =&gt; st.enable()\n})</code></pre>\n\n\n\n<p>Then we’ll write a function that gets called on drag. We’ll get the offset position of our draggable element (using <code>getBoundingClientRect()</code>). We’ll also need to know the total scrollable height of the page, which will be the document height minus the viewport height. Let’s create a function for this, to keep it tidy.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const getUseableHeight = () =&gt; document.documentElement.offsetHeight - window.innerHeight</code></pre>\n\n\n\n<p>We’ll use GSAP’s <code>mapRange()</code> utility function to find the relative scroll position (<a href=\"https://greensock.com/docs/v3/GSAP/UtilityMethods/mapRange()\">see the documentation</a>), and call the <code>scroll()</code> method on the ScrollTrigger instance to update the scroll position on drag:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-\">const draggableInstance = Draggable.create(track, {\n\ttype: &#039;x&#039;,\n\tinertia: true,\n\tbounds: {\n\t\tminX: 0,\n\t\tmaxX: getDraggableWidth() * -1\n\t},\n\tedgeResistance: 1,\n\tonDragStart: () =&gt; st.disable(),\n\tonDragEnd: () =&gt; st.enable(),\n\tonDrag: () =&gt; {\n\t\tconst left = track.getBoundingClientRect().left * -1\n\t\tconst width = getDraggableWidth()\n\t\tconst useableHeight = getUseableHeight()\n\t\tconst y = gsap.utils.mapRange(0, width, 0, useableHeight, left)\n\t\t\n    st.scroll(y)\n  }\n})</code></pre>\n\n\n\n<p>As we’re using the Inertia plugin, we’ll want to call the same function during the “throw” part of the interaction — after the user lets go of the element, but while it retains momentum. So let’s write it as a separate function we can call for both:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const updatePosition = () =&gt; {\n\tconst left = track.getBoundingClientRect().left * -1\n\tconst width = getDraggableWidth()\n\tconst useableHeight = getUseableHeight()\n\tconst y = gsap.utils.mapRange(0, width, 0, useableHeight, left)\n\n\tst.scroll(y)\n}\n\nconst draggableInstance = Draggable.create(track, {\n\ttype: &#039;x&#039;,\n\tinertia: true,\n\tbounds: {\n\t\tminX: 0,\n\t\tmaxX: getDraggableWidth() * -1\n\t},\n\tedgeResistance: 1,\n\tonDragStart: () =&gt; st.disable(),\n\tonDragEnd: () =&gt; st.enable(),\n\tonDrag: updatePosition,\n\tonThrowUpdate: updatePosition\n})</code></pre>\n\n\n\n<p>Now our scroll position and timeline track should be perfectly in sync when we scroll the page <em>or</em> drag the track.</p>\n\n\n\n<h2>Navigating on click</h2>\n\n\n\n<p>We also want users to be able to scroll to the desired section by clicking on any of the timeline links. We <em>could</em> do this with JS, but we don’t necessarily need to: CSS has a property that allows smooth scrolling within the page, and it’s supported in most modern browsers (Safari is currently the exception). All we need is this one line of CSS, and our users will be scrolled smoothly to the desired section on click:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">html {\n\tscroll-behavior: smooth;\n}</code></pre>\n\n\n\n<h3>Accessibility</h3>\n\n\n\n<p>It’s good practice to consider users who may be sensitive to motion, so let’s include a <code>prefers-reduced-motion</code> media query to ensure that users who have specified a system-level preference for reduced motion will be jumped straight to the relevant section instead:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">@media (prefers-reduced-motion: no-preference) {\n\thtml {\n\t\tscroll-behavior: smooth;\n\t}\n}</code></pre>\n\n\n\n<p>Our navigation currently presents a problem for users who navigate using a keyboard. When our nav overflows the viewport, some of our nav links are hidden from view, as they are offscreen. When the user tabs through the links, we need those links to be brought into view. We can attach an event listener to our track to get the scroll position of the corresponding section, and call <code>scroll()</code> on the ScrollTrigger instance, which will have the effect of moving the timeline too (keeping them both in sync):</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">track.addEventListener(&#039;keyup&#039;, (e) =&gt; {\n\tconst id = e.target.getAttribute(&#039;href&#039;)\n\t\n\t/* Return if no section href or the user isn’t using the tab key */\n\tif (!id || e.key !== &#039;Tab&#039;) return\n\t\n\tconst section = document.querySelector(id)\n\t\n\t/* Get the scroll position of the section */\n\tconst y = section.getBoundingClientRect().top + window.scrollY\n\t\n\t/* Use the ScrollTrigger to scroll the window */\n\tst.scroll(y)\n})</code></pre>\n\n\n\n<p>Calling <code>scroll()</code> also respects our users’ motion preferences — users with a reduced-motion preference will be jumped to the section instead of smoothly scrolled.</p>\n\n\n<p class='codepen'  data-height='502' data-theme-id='0' data-slug-hash='d9557b8a3d864e6be3d37b1b1eb0d6df' data-default-tab='result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href=\"https://codepen.io/michellebarker/pen/d9557b8a3d864e6be3d37b1b1eb0d6df\"><br />\n  GSAP Draggable and ScrollTrigger timeline [Simple 1]</a> by Michelle Barker (<a href=\"https://codepen.io/michellebarker\">@michellebarker</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.0</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Animating the sections</h2>\n\n\n\n<p>Our timeline should work pretty well now, but we don’t yet have any content. Let’s add a heading and image for each section, and animate them when the come into view. Here’s an example of the HTML for one section, which we can repeat for the other (adjusting the content as needed):</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;main&gt;\n\t&lt;section id=&quot;section_1&quot; style=&quot;--i: 0&quot;&gt;\n\t\t&lt;div class=&quot;container&quot;&gt;\n\t\t\t&lt;h2 class=&quot;section__heading&quot;&gt;\n\t\t\t\t&lt;span&gt;1993&lt;/span&gt;\n\t\t\t\t&lt;span&gt;Pablo Honey&lt;/span&gt;\n\t\t\t&lt;/h2&gt;\n\t\t\t&lt;div class=&quot;section__image&quot;&gt;\n\t\t\t\t&lt;img src=&quot;https://assets.codepen.io/85648/radiohead_pablo-honey.jpg&quot; width=&quot;1200&quot; height=&quot;1200&quot; /&gt;\n\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\t&lt;/section&gt;\n\t&lt;!--more sections--&gt;\n&lt;/main&gt;</code></pre>\n\n\n\n<p>I’m using <code>display: grid</code> to position the heading and image in a pleasing arrangement — but feel free to position them as you like. We’ll just concentrate on the JS for this part.</p>\n\n\n\n<h3>Creating the timelines with GSAP</h3>\n\n\n\n<p>We’ll create a function called <code>initSectionAnimation()</code>. The first thing we’ll do is return early if our users prefer reduced motion. We can used a <code>prefers-reduced-motion</code> media query using the <code>matchMedia</code> method:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const prefersReducedMotion = window.matchMedia(&#039;(prefers-reduced-motion: reduce)&#039;)\n\nconst initSectionAnimation = () =&gt; {\n\t/* Do nothing if user prefers reduced motion */\n\tif (prefersReducedMotion.matches) return\n}\n\ninitSectionAnimation()</code></pre>\n\n\n\n<p>Next we’ll set our animation start state for each section:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const initSectionAnimation = () =&gt; {\n\t/* Do nothing if user prefers reduced motion */\n\tif (prefersReducedMotion.matches) return\n\t\n\tsections.forEach((section, index) =&gt; {\n\t\tconst heading = section.querySelector(&#039;h2&#039;)\n\t\tconst image = section.querySelector(&#039;.section__image&#039;)\n\t\t\n\t\t/* Set animation start state */\n\t\tgsap.set(heading, {\n\t\t\topacity: 0,\n\t\t\ty: 50\n\t\t})\n\t\tgsap.set(image, {\n\t\t\topacity: 0,\n\t\t\trotateY: 15\n\t\t})\n\t}\n}</code></pre>\n\n\n\n<p>Then we’ll create a new timeline for each section, adding ScrollTrigger to the timeline itself to control when the animation is played. We can do this directly this time, rather than creating a separate ScrollTrigger instance, as we don’t need this timeline to be connected to a draggable element. (This code is all within the <code>forEach</code> loop.) We’ll add some tweens to the timeline to animate the heading and image into view.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">/* In the `forEach` loop: */\n\n/* Create the section timeline */\nconst sectionTl = gsap.timeline({\n\tscrollTrigger: {\n\t\ttrigger: section,\n\t\tstart: () =&gt; &#039;top center&#039;,\n\t\tend: () =&gt; `+=${window.innerHeight}`,\n\t\ttoggleActions: &#039;play reverse play reverse&#039;\n\t}\n})\n\n/* Add tweens to the timeline */\nsectionTl.to(image, {\n\topacity: 1,\n\trotateY: -5,\n\tduration: 6,\n\tease: &#039;elastic&#039;\n})\n.to(heading, {\n\topacity: 1,\n\ty: 0,\n\tduration: 2\n}, 0.5) // the heading tween will play 0.5 seconds from the start</code></pre>\n\n\n\n<p>By default our tweens will play one after the other. But I’m using the <a href=\"https://greensock.com/position-parameter\">position parameter</a> to specify that the heading tween should play 0.5 seconds from the beginning of the timeline, so our animations overlap.</p>\n\n\n\n<p>Here’s the complete demo in action:</p>\n\n\n<p class='codepen'  data-height='636' data-theme-id='0' data-slug-hash='597a468071d4dce3f7bf0ce80d6cb8d3' data-default-tab='result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href=\"https://codepen.io/michellebarker/pen/597a468071d4dce3f7bf0ce80d6cb8d3\"><br />\n  GSAP Draggable and ScrollTrigger timeline [FINAL]</a> by Michelle Barker (<a href=\"https://codepen.io/michellebarker\">@michellebarker</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.0</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p></p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2022/01/03/building-a-scrollable-and-draggable-timeline-with-gsap/\">Building a Scrollable and Draggable Timeline with GSAP</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t\n\t\t\t</item>\n\t\t<item>\n\t\t<title>A Look Back at 2021: Roundup of Codrops Resources</title>\n\t\t<link>https://tympanus.net/codrops/2021/12/31/a-look-back-at-2021-roundup-of-codrops-resources/</link>\n\t\t\n\t\t<dc:creator><![CDATA[Team Codrops]]></dc:creator>\n\t\t<pubDate>Fri, 31 Dec 2021 18:33:54 +0000</pubDate>\n\t\t\t\t<category><![CDATA[News & Updates]]></category>\n\t\t<category><![CDATA[2021]]></category>\n\t\t<category><![CDATA[new year]]></category>\n\t\t<category><![CDATA[roundup]]></category>\n\t\t<guid isPermaLink=\"false\">https://tympanus.net/codrops/?p=58199</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>The countdown to the new year is already running! Join us for a look back at our favorite posts from 2021.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/31/a-look-back-at-2021-roundup-of-codrops-resources/\">A Look Back at 2021: Roundup of Codrops Resources</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>Another year has past, and oh boy, what a ride it was! </p>\n\n\n\n<p><strong>A gigantic &#8216;thank you&#8217; to all our readers, supporters, writers and sponsors! </strong></p>\n\n\n\n<p>I hope you enjoy this <a href=\"https://tympanus.net/codrops2021\">selection</a> of Codrops articles, tutorials and experiments that were written and coded this year! </p>\n\n\n\n<p>Happy 2022!</p>\n\n\n\n<p><em>Your Codrops team </em></p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/31/a-look-back-at-2021-roundup-of-codrops-resources/\">A Look Back at 2021: Roundup of Codrops Resources</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t\n\t\t\t</item>\n\t\t<item>\n\t\t<title>Collective #693</title>\n\t\t<link>https://tympanus.net/codrops/collective/collective-693/</link>\n\t\t\n\t\t<dc:creator><![CDATA[Mary Lou]]></dc:creator>\n\t\t<pubDate>Thu, 30 Dec 2021 12:03:39 +0000</pubDate>\n\t\t\t\t<guid isPermaLink=\"false\">https://tympanus.net/codrops/?post_type=collective&#038;p=58162</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Typejuice * PrinceJS * CSS in 2022 * React Native Skia * Smoothly Reverting CSS Animations</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/collective/collective-693/\">Collective #693</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://virtual.plus-ex.com/\"><img loading=\"lazy\" width=\"350\" height=\"219\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_wotw.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58177\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://virtual.plus-ex.com/\">Inspirational Website of the Week: Plus X Virtual Showroom</a></h2>\n<p class=\"ct-coll-p\">Sharp, bold and slick. This website sets their own unique style and provides a fresh and fast experience.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://virtual.plus-ex.com/\">Get inspired</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n        <a class=\"ct-coll-thumb\" href=\"https://www.elegantthemes.com/affiliates/idevaffiliate.php?id=17972_5_1_19\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\"><img loading=\"lazy\" width=\"350\" height=\"236\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/Divi_new.jpg\" alt=\"Collective 668 image\" class=\"wp-image-54591\"></a></p>\n<div class=\"ct-coll-sponsorship\">Our Sponsor</div>\n<h2><a href=\"https://www.elegantthemes.com/affiliates/idevaffiliate.php?id=17972_5_1_19\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\">Instant websites for your clients with Divi Layout Packs</a></h2>\n<p class=\"ct-coll-p\">With the Divi Layout Packs you&#8217;ll get world-class designs ready to be used for your client projects.</p>\n<p>        <a class=\"ct-coll-link\" href=\"https://www.elegantthemes.com/affiliates/idevaffiliate.php?id=17972_5_1_19\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.techradar.com/news/the-story-of-the-fight-to-archive-the-internet\"><img loading=\"lazy\" width=\"350\" height=\"247\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_archive.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58184\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.techradar.com/news/the-story-of-the-fight-to-archive-the-internet\">The story of the fight to archive the internet</a></h2>\n<p class=\"ct-coll-p\">Learn why the founder of the Internet Archive says his project is under threat.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.techradar.com/news/the-story-of-the-fight-to-archive-the-internet\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.bram.us/2021/12/21/the-css-has-selector-is-way-more-than-a-parent-selector/\"><img loading=\"lazy\" width=\"350\" height=\"252\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_has.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58165\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.bram.us/2021/12/21/the-css-has-selector-is-way-more-than-a-parent-selector/\">The CSS :has() selector is way more than a “Parent Selector”</a></h2>\n<p class=\"ct-coll-p\">Bramus on the new and powerful :has() selector.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.bram.us/2021/12/21/the-css-has-selector-is-way-more-than-a-parent-selector/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://dmitripavlutin.com/javascript-array-group/\"><img loading=\"lazy\" width=\"350\" height=\"193\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_grouping.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58169\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://dmitripavlutin.com/javascript-array-group/\">Array Grouping in JavaScript</a></h2>\n<p class=\"ct-coll-p\">Learn about the new array.groupBy() and array.groupByToMap() methods that let you group an array by a certain criteria.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://dmitripavlutin.com/javascript-array-group/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.eff.org/deeplinks/2021/12/chrome-users-beware-manifest-v3-deceitful-and-threatening\"><img loading=\"lazy\" width=\"350\" height=\"177\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_google.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58167\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.eff.org/deeplinks/2021/12/chrome-users-beware-manifest-v3-deceitful-and-threatening\">Chrome Users Beware: Manifest V3 is Deceitful and Threatening</a></h2>\n<p class=\"ct-coll-p\">Like FLoC and Privacy Sandbox before it, Google Chrome’s Manifest V3 is another example of the inherent conflict of interest that comes from Google controlling both the dominant web browser and one of the largest internet advertising networks.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.eff.org/deeplinks/2021/12/chrome-users-beware-manifest-v3-deceitful-and-threatening\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://github.com/nolanlawson/fuite\"><img loading=\"lazy\" width=\"350\" height=\"226\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_fuite.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58185\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://github.com/nolanlawson/fuite\">Fuite</a></h2>\n<p class=\"ct-coll-p\">Fuite is a tool for finding memory leaks in web apps. By Nolan Lawson.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://github.com/nolanlawson/fuite\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://edgeandnode.com/blog/defining-the-web3-stack\"><img loading=\"lazy\" width=\"350\" height=\"285\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_web3.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58172\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://edgeandnode.com/blog/defining-the-web3-stack\">Defining the web3 stack</a></h2>\n<p class=\"ct-coll-p\">Nader Dabit identifies the building blocks of the web3 technology stack in an introductory guide.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://edgeandnode.com/blog/defining-the-web3-stack\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://blog.openreplay.com/is-it-time-for-the-javascript-temporal-api\"><img loading=\"lazy\" width=\"350\" height=\"196\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_temporal.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58180\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://blog.openreplay.com/is-it-time-for-the-javascript-temporal-api\">Is It Time for the JavaScript Temporal API?</a></h2>\n<p class=\"ct-coll-p\">Craig Buckler&#8217;s introduction to the Temporal API, a proposal that is already in stage 3 of approval.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://blog.openreplay.com/is-it-time-for-the-javascript-temporal-api\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/shuding_/status/1475916082875666441\"><img loading=\"lazy\" width=\"350\" height=\"282\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_globe.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58175\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://twitter.com/shuding_/status/1475916082875666441\">Globe Lib</a></h2>\n<p class=\"ct-coll-p\">Shu Ding&#8217;s thread where he explains how he made a tiny globe library called <a href=\"https://github.com/shuding/cobe\">Cobe</a> with WebGL and shaders.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/shuding_/status/1475916082875666441\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://vplayground.netlify.app/\"><img loading=\"lazy\" width=\"350\" height=\"320\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_playground.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58189\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_playground.jpg 350w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_playground-328x300.jpg 328w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://vplayground.netlify.app/\">#Playground</a></h2>\n<p class=\"ct-coll-p\">A beautiful and playful 3D world made by Achmat Fauzi.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://vplayground.netlify.app/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://gnikoloff.github.io/webgpu-dojo/\"><img loading=\"lazy\" width=\"350\" height=\"195\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_dojo.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58179\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://gnikoloff.github.io/webgpu-dojo/\">WebGPU Sketch Dojo</a></h2>\n<p class=\"ct-coll-p\">A collection of experiments with the emerging WebGPU API. Created by Georgi Nikolov.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://gnikoloff.github.io/webgpu-dojo/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://css-tricks.com/consistent-fluidly-scaling-type-and-spacing/\"><img loading=\"lazy\" width=\"350\" height=\"210\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_typescale.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58168\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://css-tricks.com/consistent-fluidly-scaling-type-and-spacing/\">Consistent, Fluidly Scaling Type and Spacing</a></h2>\n<p class=\"ct-coll-p\">Andy Bell on using a sizing scale and fluid type for making a website better.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://css-tricks.com/consistent-fluidly-scaling-type-and-spacing/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://dragonman225.js.org/curved-arrows.html\"><img loading=\"lazy\" width=\"350\" height=\"178\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_arrows.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58163\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://dragonman225.js.org/curved-arrows.html\">How to Draw S-Curved Arrows Between Boxes / Rectangles</a></h2>\n<p class=\"ct-coll-p\">Alexander Wang shares how he went about drawing arrows between blocks for mind maps, flowcharts, etc.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://dragonman225.js.org/curved-arrows.html\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://pragmaticpineapple.com/smoothly-reverting-css-animations/\"><img loading=\"lazy\" width=\"350\" height=\"232\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_reverse.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58170\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://pragmaticpineapple.com/smoothly-reverting-css-animations/\">Smoothly Reverting CSS Animations</a></h2>\n<p class=\"ct-coll-p\">A great technique on how to revert a CSS transition when hover is over. By Nikola Đuza.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://pragmaticpineapple.com/smoothly-reverting-css-animations/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://shopify.github.io/react-native-skia/\"><img loading=\"lazy\" width=\"350\" height=\"196\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_skia.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58171\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://shopify.github.io/react-native-skia/\">React Native Skia (alpha)</a></h2>\n<p class=\"ct-coll-p\">React Native Skia brings the <a href=\"https://skia.org/\">Skia Graphics Library</a> to React Native.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://shopify.github.io/react-native-skia/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.bram.us/2021/12/27/css-in-2022/\"><img loading=\"lazy\" width=\"350\" height=\"241\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_css2022.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58166\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.bram.us/2021/12/27/css-in-2022/\">CSS in 2022</a></h2>\n<p class=\"ct-coll-p\">Bramus shares this great list of personal predictions for CSS in 2022.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.bram.us/2021/12/27/css-in-2022/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://princejs.com/\"><img loading=\"lazy\" width=\"350\" height=\"209\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_prince.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58176\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://princejs.com/\">PrinceJS</a></h2>\n<p class=\"ct-coll-p\">An amazing &#8220;Prince of Persia&#8221; reimplementation written in HTML5/JavaScript. Check out the <a href=\"https://github.com/ultrabolido/PrinceJS\">GitHub repo</a>.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://princejs.com/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://glitchyimage.com/\"><img loading=\"lazy\" width=\"350\" height=\"277\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_glitch.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58188\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://glitchyimage.com/\">Glitch Image Generator</a></h2>\n<p class=\"ct-coll-p\">Generate and save unique glitchy images. Made by Adam Fuhrer.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://glitchyimage.com/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://github.com/galvez/typejuice\"><img loading=\"lazy\" width=\"350\" height=\"205\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_docs.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58174\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://github.com/galvez/typejuice\">Typejuice</a></h2>\n<p class=\"ct-coll-p\">Typejuice is a documentation generator for TypeScript Declaration Files inspired by godoc.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://github.com/galvez/typejuice\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://lynnandtonic.com/\"><img loading=\"lazy\" width=\"350\" height=\"252\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_lynn.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58178\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://lynnandtonic.com/\">Lynn Fisher</a></h2>\n<p class=\"ct-coll-p\">Lynn Fisher&#8217;s epic annual portfolio refresh! Try resizing your browser.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://lynnandtonic.com/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.jayfreestone.com/writing/wrappping-text-inside-svg-css/\"><img loading=\"lazy\" width=\"350\" height=\"249\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_svg.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58173\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.jayfreestone.com/writing/wrappping-text-inside-svg-css/\">Wrapping text inside an SVG using CSS</a></h2>\n<p class=\"ct-coll-p\">Jay Freestone explains how to use two SVGs and `shape-outside` to wrap text inside a shape.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.jayfreestone.com/writing/wrappping-text-inside-svg-css/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fluttermix.com/\"><img loading=\"lazy\" width=\"350\" height=\"258\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_mix.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58164\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.fluttermix.com/\">Mix</a></h2>\n<p class=\"ct-coll-p\">Mix is an expressive way to effortlessly build design systems in Flutter.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fluttermix.com/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/\"><img loading=\"lazy\" width=\"350\" height=\"262\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_column.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58186\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/\">Alternate Column Scroll Animation</a></h2>\n<p class=\"ct-coll-p\">A grid layout with columns that scroll in opposite directions and a content preview animation for the image.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/27/three-js-animation-with-k-d-christmas-tree-algorithm/\"><img loading=\"lazy\" width=\"350\" height=\"248\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_akella.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58183\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/12/27/three-js-animation-with-k-d-christmas-tree-algorithm/\">Three.js Animation with K-d (Christmas) Tree Algorithm</a></h2>\n<p class=\"ct-coll-p\">In this coding tutorial, you&#8217;ll learn how to recreate the animation seen on the website of ONE-OFF in Three.js using the K-d tree algorithm.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/27/three-js-animation-with-k-d-christmas-tree-algorithm/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/28/adding-a-persistence-effect-to-three-js-scenes/\"><img loading=\"lazy\" width=\"350\" height=\"261\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/C693_persistence.jpg\" alt=\"Collective 693 item image\" class=\"wp-image-58187\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/12/28/adding-a-persistence-effect-to-three-js-scenes/\">Adding a Persistence Effect to Three.js Scenes</a></h2>\n<p class=\"ct-coll-p\">Learn how to enhance your Three.js scenes with postprocessing via framebuffers.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener\" href=\"https://tympanus.net/codrops/2021/12/28/adding-a-persistence-effect-to-three-js-scenes/\">Check it out</a><br />\n</article>\n</div>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/collective/collective-693/\">Collective #693</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t\n\t\t\t</item>\n\t\t<item>\n\t\t<title>Adding a Persistence Effect to Three.js Scenes</title>\n\t\t<link>https://tympanus.net/codrops/2021/12/28/adding-a-persistence-effect-to-three-js-scenes/</link>\n\t\t\n\t\t<dc:creator><![CDATA[Georgi Nikolov]]></dc:creator>\n\t\t<pubDate>Tue, 28 Dec 2021 10:53:59 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Tutorials]]></category>\n\t\t<category><![CDATA[framebuffer]]></category>\n\t\t<category><![CDATA[motion trail]]></category>\n\t\t<category><![CDATA[postprocessing]]></category>\n\t\t<category><![CDATA[threejs]]></category>\n\t\t<category><![CDATA[webgl]]></category>\n\t\t<guid isPermaLink=\"false\">https://tympanus.net/codrops/?p=57993</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Learn how to enhance your Three.js scenes with postprocessing via framebuffers.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/28/adding-a-persistence-effect-to-three-js-scenes/\">Adding a Persistence Effect to Three.js Scenes</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>If you have written any WebGL applications in the past, be it using the vanilla API or a helper library such as Three.js, you know that you set up the things you want to render, perhaps include different types of cameras, animations and fancy lighting and voilà, the results are rendered to the <strong>default WebGL framebuffer</strong>, which is the device screen.</p>\n\n\n\n<p>Framebuffers are a key feature in WebGL when it comes to creating advanced graphical effects such as depth-of-field, bloom, film grain or various types of anti-aliasing. They allow us to “post-process” our scenes, applying different effects on them once rendered.</p>\n\n\n\n<p><strong>This article assumes some intermediate knowledge of WebGL with Three.js. The core ideas behind framebuffers have already been covered in-depth in <a href=\"https://tympanus.net/codrops/2021/07/21/creating-a-typography-motion-trail-effect-with-three-js/\">this article</a> here on Codrops. Please make sure to read it first, as the persistence effect we will be achieving directly builds on top of these ideas.</strong></p>\n\n\n\n<h2>Persistence effect in a nutshell</h2>\n\n\n\n<p>I call it persistence, yet am not really sure if it&#8217;s the best name for this effect and I am simply unaware of the proper way to call it. What is it useful for?</p>\n\n\n\n<p>We can use it subtly to blend each previous and current animation frame together or perhaps a bit less subtly to hide bad framerate. Looking at video games like Grand Theft Auto, we can simulate our characters getting drunk. Another thing that comes to mind is rendering the view from the cockpit of a spacecraft when traveling at supersonic speed. Or, since the effect is just so good looking in my opinion, use it for all kinds of audio visualisers, cool website effects and so on.</p>\n\n\n\n<p>To achieve it, first we would need to create 2 WebGL framebuffers. Since we will be using threejs for this demo, we would have to use <a href=\"https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget\">THREE.WebGLRenderTarget</a>. We will call them <strong>Framebuffer 1</strong> and <strong>Framebuffer 2</strong> from now on and they will have the same dimensions as the size of the canvas we are rendering to.</p>\n\n\n\n<p>To draw one frame of our animation with persistence, we will need to:</p>\n\n\n\n<ol><li><span style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen-Sans, Ubuntu, Cantarell, &quot;Helvetica Neue&quot;, sans-serif;\">Render the contents of <strong>Framebuffer 1 </strong>to <strong>Framebuffer 2</strong></span> with a shader that fades to a certain color. For the purposes of our demo, we will use a pure black color with full opacity</li><li>Render our threejs scene that holds the actual meshes we want to show on the screen to <strong>Framebuffer 2</strong> as well</li><li>Render the contents of <strong>Framebuffer 2</strong> to the <strong>Default WebGL framebuffer (device screen)</strong></li><li>Swap <strong>Framebuffer 1</strong> with <strong>Framebuffer 2</strong></li></ol>\n\n\n\n<p>Afterwards, for each new animation frame, we will need to repeat the above steps. Let&#8217;s illustrate each step:</p>\n\n\n\n<p>Here is a visualisation of our framebuffers. WebGL gives us the <strong>Default framebuffer</strong>, represented by the device screen, automatically. It&#8217;s up to us as developers to manually create <strong>Framebuffer 1</strong> and <strong>Framebuffer 2.</strong> No animation or rendering has happened yet, so the pixel contents of all 3 framebuffers are empty.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-1-800x556.png\" alt=\"\" class=\"wp-image-57994\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-1-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-1-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-1-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-1.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Our 2 manually created framebuffers on the left, the default device screen framebuffer on the right. Nothing has been drawn yet.</figcaption></figure>\n\n\n\n<p><strong>Step 1</strong>: we need to render the contents of <strong>Framebuffer 1 </strong>to <strong>Framebuffer 2</strong> with a shader that fades to a certain color. As said, we will use a black color, but for illustration purposes I am fading out to transparent white color with opacity 0.2. As <strong>Framebuffer 1 </strong>is empty, this will result in empty <strong>Framebuffer 2</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-2-800x556.png\" alt=\"\" class=\"wp-image-57996\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-2-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-2-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-2-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-2.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Even though we have rendered Framebuffer 1 to Framebuffer 2, at this point we still have framebuffers with empty pixel contents.</figcaption></figure>\n\n\n\n<p><strong>Step 2</strong>: we need to render our threejs scene that holds our meshes / cameras / lighting / etc to <strong>Framebuffer 2</strong>. <strong>Please notice that both Step 1 and Step 2 render <strong>on top of each other</strong> to Framebuffer 2.</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-3-800x556.png\" alt=\"\" class=\"wp-image-57997\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-3-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-3-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-3-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-3.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Our threejs scene rendered to Framebuffer 2.</figcaption></figure>\n\n\n\n<p><strong>Step 3</strong>: After we have successfully rendered <strong>Step 1</strong> and <strong>Step 2</strong> to <strong>Framebuffer 2</strong>, we need to render <strong>Framebuffer 2</strong> itself to the <strong>Default framebuffer</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-4-800x556.png\" alt=\"\" class=\"wp-image-57998\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-4-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-4-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-4-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-4.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Final result rendered to the device screen.</figcaption></figure>\n\n\n\n<p><strong>Step 4</strong>: Now we need to swap <strong>Framebuffer 1</strong> with <strong>Framebuffer 2</strong>. We then clear <strong>Framebuffer 1</strong> and the <strong>Default framebuffer</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-5-1-800x556.png\" alt=\"\" class=\"wp-image-58000\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-5-1-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-5-1-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-5-1-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-5-1.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Framebuffer 1 and Framebuffer 2 swapped.</figcaption></figure>\n\n\n\n<p>Now comes the interesting part, since <strong>Framebuffer 1</strong> is no longer empty. Let&#8217;s go over each step once again:</p>\n\n\n\n<p><strong>Step 1</strong>: we need to render the contents of <strong>Framebuffer 1 </strong>to <strong>Framebuffer 2</strong> with a shader that fades to a certain color. Let&#8217;s assume a transparent white color with <strong>0.2 opacity</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-6-800x556.png\" alt=\"\" class=\"wp-image-58001\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-6-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-6-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-6-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-6.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>We have rendered and faded out the pixel contents of Framebuffer 1 to Framebuffer 2 by a factor of 0.2.</figcaption></figure>\n\n\n\n<p><strong>Step 2</strong>: we need to render our threejs scene to <strong>Framebuffer 2</strong>. For illustration purposes, let&#8217;s assume we have an animation that slowly moves our 3D cube to the right, meaning that now it will be a few pixels to the right:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-7-800x556.png\" alt=\"\" class=\"wp-image-58002\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-7-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-7-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-7-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-7.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Once again, we render both Framebuffer 1 and our threejs scene to Framebuffer 2. Notice how the threejs scene is rendered on top of the faded out contents of Framebuffer 1.</figcaption></figure>\n\n\n\n<p><strong>Step 3</strong>: After we have successfully rendered <strong>Step 1</strong> and <strong>Step 2</strong> to <strong>Framebuffer 2</strong>, we need to render <strong>Framebuffer 2</strong> itself to the <strong>Default framebuffer</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-8-800x556.png\" alt=\"\" class=\"wp-image-58003\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-8-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-8-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-8-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-8.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>The pixel contents of Framebuffer 2 copied over to the device screen.</figcaption></figure>\n\n\n\n<p><strong>Step 4</strong>: Now we need to swap <strong>Framebuffer 1</strong> with <strong>Framebuffer 2</strong>. We then clear <strong>Framebuffer 1</strong> and the <strong>Default framebuffer</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-9-800x556.png\" alt=\"\" class=\"wp-image-58005\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-9-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-9-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-9-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-9.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Rinse and repeat. Back to Step 1.</figcaption></figure>\n\n\n\n<p>I hope you can see a pattern emerging. If we repeat this process enough times, we will start accumulating each new frame to the previous faded one. Here is how it would look if we repeat enough times:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"556\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-10-800x556.png\" alt=\"\" class=\"wp-image-58006\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-10-800x556.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-10-400x278.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-10-768x534.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/persistence-step-10.png 862w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption>Postprocessing on our threejs scene</figcaption></figure>\n\n\n\n<p>Here is the demo we will build in this article. The result of the repeated enough times process above is evident:</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"611\" height=\"600\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/exercise-preview-611x600.png\" alt=\"\" class=\"wp-image-58028\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/exercise-preview-611x600.png 611w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/exercise-preview-306x300.png 306w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/exercise-preview.png 745w\" sizes=\"(max-width: 611px) 100vw, 611px\" /><figcaption>Notice the accumulated trails. At every animation loop, we are repeating step 1 to 4.</figcaption></figure></div>\n\n\n\n<p>So with this theory out of the way, let&#8217;s create this effect with threejs!</p>\n\n\n\n<h2>Our skeleton app</h2>\n\n\n\n<p>Let&#8217;s write a simple threejs app that will animate a bunch of objects around the screen and use perspective camera to look at them. I will not explain the code for my example here, as it does not really matter what we render, as long as there is some animation present so things move and we can observe the persistence.</p>\n\n\n\n<p>I encourage you to disregard my example and draw something else yourself. Even the most basic spinning cube that moves around the screen will be enough. That being said, here is my scene:</p>\n\n\n\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"js,result\" data-slug-hash=\"abLJrEX\" data-user=\"gbnikolov\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/gbnikolov/pen/abLJrEX\">\n  1. Skeleton app</a> by Georgi Nikoloff (<a href=\"https://codepen.io/gbnikolov\">@gbnikolov</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p>The important thing to keep in mind here is that this demo renders to the default framebuffer, represented by the device screen, that WebGL automatically gives us. There are no extra framebuffers involved in this demo up to this point.</p>\n\n\n\n<h2>Achieving the persistence</h2>\n\n\n\n<p>Let&#8217;s add the code needed to achieve actual persistence. We will start by introducing a <a href=\"https://threejs.org/docs/?q=orthogr#api/en/cameras/OrthographicCamera\">THREE.OrthographicCamera</a>.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Orthographic camera can be useful for rendering 2D scenes and UI elements, amongst other things.</p><cite><a href=\"https://threejs.org/docs/?q=orth#api/en/cameras/OrthographicCamera\">threejs docs</a></cite></blockquote>\n\n\n\n<p>Remember, framebuffers allow us to render to image buffers in the video card’s memory instead of the device screen. These image buffers are represented by the <a href=\"https://threejs.org/docs/?q=Texture#api/en/textures/Texture\">THREE.Texture</a> class and are automatically created for us when we create our <strong>Framebuffer 1</strong> and <strong>Framebuffer 2</strong> by instantiating a new <a href=\"https://threejs.org/docs/?q=webglre#api/en/renderers/WebGLRenderTarget\">THREE.WebGLRenderTarget</a>. In order to display these textures back to the device screen, we need to create two 2D fullscreen quads that span the width and height of our monitor. Since these quads will be 2D, THREE.OrthographicCamera is best suited to display them.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const leftScreenBorder = -innerWidth / 2\nconst rightScreenBorder = innerWidth / 2\nconst topScreenBorder = -innerHeight / 2\nconst bottomScreenBorder = innerHeight / 2\nconst near = -100\nconst far = 100\nconst orthoCamera = new THREE.OrthographicCamera(\n  leftScreenBorder,\n  rightScreenBorder,\n  topScreenBorder,\n  bottomScreenBorder,\n  near,\n  far\n)\northoCamera.position.z = -10\northoCamera.lookAt(new THREE.Vector3(0, 0, 0))</code></pre>\n\n\n\n<p>As a next step, let&#8217;s create a fullscreen quad geometry using <a href=\"https://threejs.org/docs/?q=PlaneG#api/en/geometries/PlaneGeometry\">THREE.PlaneGeometry</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const fullscreenQuadGeometry = new THREE.PlaneGeometry(innerWidth, innerHeight)</code></pre>\n\n\n\n<p>Using our newly created 2D quad geometry, let&#8217;s create two fullscreen planes. I will call them <code>fadePlane</code> and <code>resultPlane</code>. They will use <a href=\"https://threejs.org/docs/?q=ShaderMaterial#api/en/materials/ShaderMaterial\">THREE.ShaderMaterial</a> and <a href=\"https://threejs.org/docs/?q=MeshBasicMaterial#api/en/materials/MeshBasicMaterial\">THREE.MeshBasicMaterial</a> respectively:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// To achieve the fading out to black, we will use THREE.ShaderMaterial\nconst fadeMaterial = new THREE.ShaderMaterial({\n  // Pass the texture result of our rendering to Framebuffer 1 as uniform variable\n  uniforms: {\n    inputTexture: { value: null }\n  },\n  vertexShader: `\n    // Declare a varying variable for texture coordinates\n    varying vec2 vUv;\n\n    void main () {\n      // Set each vertex position according to the\n      // orthographic camera position and projection\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  \n      // Pass the plane texture coordinates as interpolated varying\n      // variable to the fragment shader\n      vUv = uv;\n    }\n  `,\n  fragmentShader: `\n    // Pass the texture from Framebuffer 1\n    uniform sampler2D inputTexture;\n\n    // Consume the interpolated texture coordinates\n    varying vec2 vUv;\n\n    void main () {\n      // Get pixel color from texture\n      vec4 texColor = texture2D(inputTexture, vUv);\n\n      // Our fade-out color\n      vec4 fadeColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n      // this step achieves the actual fading out\n      // mix texColor into fadeColor by a factor of 0.05\n      // you can change the value of the factor and see\n      // the result will change accordingly\n      gl_FragColor = mix(texColor, fadeColor, 0.05);\n    }\n  `\n})\n\n// Create our fadePlane\nconst fadePlane = new THREE.Mesh(\n  fullscreenQuadGeometry,\n  fadeMaterial\n)\n\n// create our resultPlane\n// Please notice we don&#039;t use fancy shader materials for resultPlane\n// We will use it simply to copy the contents of fadePlane to the device screen\n// So we can just use the .map property of THREE.MeshBasicMaterial\nconst resultMaterial = new THREE.MeshBasicMaterial({ map: null })\nconst resultPlane = new THREE.Mesh(\n  fullscreenQuadGeometry,\n  resultMaterial\n)</code></pre>\n\n\n\n<p>We will use <code>fadePlane</code> to perform <strong>step 1</strong> and <strong>step 2</strong> from the list above (rendering the previous frame represented by <strong>Framebuffer 1</strong>, fading it out to black color and finally rendering our original threejs scene on top). We will render to <strong>Framebuffer 2</strong> and update its corresponding <code>THREE.Texture</code>.</p>\n\n\n\n<p>We will use the resulting texture of <strong>Framebuffer 2</strong> as an input to <code>&lt;strong&gt;resultPlane&lt;/strong&gt;</code>. This time, we will render to the  device screen. We will essentially copy the contents of <strong>Framebuffer 2 </strong>to the <strong>Default Framebuffer</strong> <strong>(device screen)</strong>, thus achieving <strong>step 3</strong>.</p>\n\n\n\n<p>Up next, let&#8217;s actually create our <strong>Framebuffer 1</strong> and <strong>Framebuffer</strong> <strong>2</strong>. They are represented by <a href=\"https://threejs.org/docs/?q=webglrend#api/en/renderers/WebGLRenderTarget\">THREE.WebGLRenderTarget</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Create two extra framebuffers manually\n// It is important we use let instead of const variables,\n// as we will need to swap them as discussed in Step 4!\nlet framebuffer1 = new THREE.WebGLRenderTarget(innerWidth, innerHeight)\nlet framebuffer2 = new THREE.WebGLRenderTarget(innerWidth, innerHeight)\n\n// Before we start using these framebuffers by rendering to them,\n// let&#039;s explicitly clear their pixel contents to #111111\n// If we don&#039;t do this, our persistence effect will end up wrong,\n// due to how accumulation between step 1 and 3 works. \n// The first frame will never fade out when we mix Framebuffer 1 to\n// Framebuffer 2 and will be always visible.\n// This bug is better observed, rather then explained, so please\n// make sure to comment out these lines and see the change for yourself.\nrenderer.setClearColor(0x111111)\nrenderer.setRenderTarget(framebuffer1)\nrenderer.clearColor()\nrenderer.setRenderTarget(framebuffer2)\nrenderer.clearColor()</code></pre>\n\n\n\n<p>As you might have guessed already, we will achieve <strong>step 4</strong> as described above by swapping <code>framebuffer1</code> and <code>framebuffer2</code> at the end of each animation frame.</p>\n\n\n\n<p>At this point we have everything ready and initialised: our THREE.OrthographicCamera, our 2 quads that will fade out and copy the contents of our framebuffers to the device screens and, of course, the framebuffers themselves. It should be noted that up until this point we did not change our animation loop code and logic, rather we just created these new things at the initialisation step of our program. Let&#8217;s now put them to practice in our rendering loop.</p>\n\n\n\n<p>Here is how my function that is executed on each animation frame looks like right now. Taken directly from the codepen example above:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function drawFrame (timeElapsed) {\n  for (let i = 0; i &lt; meshes.length; i++) {\n     const mesh = meshes&#091;i]\n     // some animation logic that moves each mesh around the screen\n     // with different radius, offset and speed\n     // ...\n  }\n  // Render our entire scene to the device screen, represented by\n  // the default WebGL framebuffer\n  renderer.render(scene, perspectiveCamera)\n}</code></pre>\n\n\n\n<p>If you have written any threejs code before, this <code>drawFrame</code> method should not be any news to you. We apply some animation logic to our meshes and then render them to the device screen by calling <code>renderer.render()</code> on the whole scene with the appropriate camera.</p>\n\n\n\n<p>Let&#8217;s incorporate our steps 1 to 4 from above and achieve our persistence:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function drawFrame (timeElapsed) {\n  // The for loop remains unchanged from the previous snippet\n  for (let i = 0; i &lt; meshes.length; i++) {\n     // ...\n  }\n\n  // By default, threejs clears the pixel color buffer when\n  // calling renderer.render()\n  // We want to disable it explicitly, since both step 1 and step 2 render\n  // to Framebuffer 2 accumulatively\n  renderer.autoClearColor = false\n\n  // Set Framebuffer 2 as active WebGL framebuffer to render to\n  renderer.setRenderTarget(framebuffer2)\n\n  // &lt;strong&gt;Step 1&lt;/strong&gt;\n  // Render the image buffer associated with Framebuffer 1 to Framebuffer 2\n  // fading it out to pure black by a factor of 0.05 in the fadeMaterial\n  // fragment shader\n  fadePlane.material.uniforms.inputTexture.value = framebuffer1.texture\n  renderer.render(fadePlane, orthoCamera)\n\n  // &lt;strong&gt;Step 2&lt;/strong&gt;\n  // Render our entire scene to Framebuffer 2, on top of the faded out \n  // texture of Framebuffer 1.\n  renderer.render(scene, perspectiveCamera)\n\n  // Set the Default Framebuffer (device screen) represented by null as active WebGL framebuffer to render to.\n  renderer.setRenderTarget(null)\n  \n  // &lt;strong&gt;Step 3&lt;/strong&gt;\n  // Copy the pixel contents of Framebuffer 2 by passing them as a texture\n  // to resultPlane and rendering it to the Default Framebuffer (device screen)\n  resultPlane.material.map = framebuffer2.texture\n  renderer.render(resultPlane, orthoCamera)\n\n  // &lt;strong&gt;Step 4&lt;/strong&gt;\n  // Swap Framebuffer 1 and Framebuffer 2\n  const swap = framebuffer1\n  framebuffer1 = framebuffer2\n  framebuffer2 = swap\n\n  // End of the effect\n  // When the next animation frame is executed, the meshes will be animated\n  // and the whole process will repeat\n}</code></pre>\n\n\n\n<p>And with these changes out of the way, here is our updated example using persistence:</p>\n\n\n\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"js,result\" data-slug-hash=\"eYGvwBw\" data-user=\"gbnikolov\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/gbnikolov/pen/eYGvwBw\">\n  2. Persistence</a> by Georgi Nikoloff (<a href=\"https://codepen.io/gbnikolov\">@gbnikolov</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Applying texture transformations</h2>\n\n\n\n<p>Now that we have our effect properly working, we can get more creative and expand on top of it.</p>\n\n\n\n<p>You might remember this snippet from the fragment shader code where we faded out the contents of <strong>Framebuffer  1 </strong>to <strong>Framebuffer 2</strong>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main () {\n   // Get pixel color from texture\n   vec4 texColor = texture2D(inputTexture, vUv);\n\n   // Our fade-out color\n   vec4 fadeColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n   // mix texColor into fadeColor by a factor of 0.05\n   gl_FragColor = mix(texColor, fadeColor, 0.05);\n}</code></pre>\n\n\n\n<p>When we sample from our <code>inputTexture</code>, we can upscale our texture coordinates by a factor of 0.0075 like so:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>vec4 texColor = texture2D(inputTexture, vUv * 0.9925);</code></pre>\n\n\n\n<p>With this transformation applied to our texture coordinates, here is our updated example:</p>\n\n\n\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"js,result\" data-slug-hash=\"JjrNajE\" data-user=\"gbnikolov\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/gbnikolov/pen/JjrNajE\">\n  3. Peristence with upscaled texture coords</a> by Georgi Nikoloff (<a href=\"https://codepen.io/gbnikolov\">@gbnikolov</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p>Or how about increasing our fade factor from 0.05 to 0.2?</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gl_FragColor = mix(texColor, fadeColor, 0.2);</code></pre>\n\n\n\n<p>This will intensify the effect of <code>fadeColor</code> by a magnitude of four, thus decreasing our persistence effect:</p>\n\n\n\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"js,result\" data-slug-hash=\"YzrVOQL\" data-user=\"gbnikolov\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/gbnikolov/pen/YzrVOQL\">\n  4. Reduced persistence</a> by Georgi Nikoloff (<a href=\"https://codepen.io/gbnikolov\">@gbnikolov</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p>But why stop there? Here is a final demo that provides you with UI controls to tweak the scale, rotation and fade factor parameters in the demo. It uses <a href=\"https://threejs.org/docs/?q=matrix3#api/en/math/Matrix3\">THREE.Matrix3</a> and more specifically its <a href=\"https://threejs.org/docs/?q=matrix3#api/en/math/Matrix3.setUvTransform\">setUvTransform</a> method that allows us to express the translation, scale and rotation of our texture coordinates as a 3&#215;3 matrix.</p>\n\n\n\n<p>We can then pass this 3&#215;3 as another uniform to our vertex shader and apply it to the texture coordinates. Here is the updated <code>fragmentShader</code> property of our <code>fadeMaterial</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// pass the texture coordinate matrix as another uniform variable\nuniform mat3 uvMatrix;\nvarying vec2 vUv;\nvoid main () {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  // Since our texture coordinates, represented by uv, are a vector with\n  // 2 floats and our matrix holds 9 floats, we need to temporarily\n  // add extra dimension to the texture coordinates to make the\n  // multiplication possible.\n  // In the end, we simply grab the .xy of the final result, thus\n  // transforming it back to vec2\n  vUv = (uvMatrix * vec3(uv, 1.0)).xy;\n}</code></pre>\n\n\n\n<p>And here is the result. I also added controls for the different parameters:</p>\n\n\n\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"js,result\" data-slug-hash=\"OJxmojd\" data-user=\"gbnikolov\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/gbnikolov/pen/OJxmojd\">\n  5. Parameterised persistence</a> by Georgi Nikoloff (<a href=\"https://codepen.io/gbnikolov\">@gbnikolov</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>Framebuffers are a powerful tool in WebGL that allows us to greatly enhance our scenes via post-processing and achieve all kinds of cool effects. Some techniques require more then one framebuffer as we saw and it is up to us as developers to mix and match them however we need to achieve our desired visuals.</p>\n\n\n\n<p>Further readings:</p>\n\n\n\n<ul><li><a href=\"https://threejs.org/docs/#manual/en/introduction/How-to-use-post-processing\">How to use post-processing in threejs</a></li><li><a href=\"https://github.com/mattdesl/lwjgl-basics/wiki/ShaderLesson5\">Gaussian blur post-processing by Matt DesLauriers</a></li></ul>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/28/adding-a-persistence-effect-to-three-js-scenes/\">Adding a Persistence Effect to Three.js Scenes</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t\n\t\t\t</item>\n\t\t<item>\n\t\t<title>Three.js Animation with K-d (Christmas) Tree Algorithm</title>\n\t\t<link>https://tympanus.net/codrops/2021/12/27/three-js-animation-with-k-d-christmas-tree-algorithm/</link>\n\t\t\n\t\t<dc:creator><![CDATA[Yuriy Artyukh]]></dc:creator>\n\t\t<pubDate>Mon, 27 Dec 2021 10:44:34 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Videos]]></category>\n\t\t<category><![CDATA[3d]]></category>\n\t\t<category><![CDATA[interactive]]></category>\n\t\t<category><![CDATA[K-d tree algorithm]]></category>\n\t\t<category><![CDATA[three.js]]></category>\n\t\t<category><![CDATA[webgl]]></category>\n\t\t<guid isPermaLink=\"false\">https://tympanus.net/codrops/?p=58101</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>In this coding tutorial, you'll learn how to recreate the animation seen on the website of ONE-OFF in Three.js using the K-d tree algorithm.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/27/three-js-animation-with-k-d-christmas-tree-algorithm/\">Three.js Animation with K-d (Christmas) Tree Algorithm</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"KD Christmas trees to implement three.js animation #17\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/JSVtOPEB1Fs?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p>In this festive <a href=\"https://www.youtube.com/user/flintyara/featured\">ALL YOUR HTML</a> coding session we&#8217;ll decompile the animation seen on the website of <a href=\"http://one-off.it/\">ONE-OFF</a> using the K-d tree algorithm and Three.js shape creation. We&#8217;ll also be using GLSL to create the visuals.</p>\n\n\n\n<p>This coding session was streamed live on December 26, 2021.</p>\n\n\n\n<!--div class=\"box-highlight\"><p><strong>Check out the <a href=\"https://dnacapitalreplica.netlify.app/\">live demo</a>.</strong></p></div-->\n\n\n\n<p>Support: <a href=\"https://www.patreon.com/allyourhtml\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.patreon.com/allyourhtml</a> </p>\n\n\n\n<p>Setup: <a href=\"https://gist.github.com/akella/a19954c9ee42e3ae85b76d0e06977535\" target=\"_blank\" rel=\"noreferrer noopener\">https://gist.github.com/akella/a19954&#8230;</a> </p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/27/three-js-animation-with-k-d-christmas-tree-algorithm/\">Three.js Animation with K-d (Christmas) Tree Algorithm</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t\n\t\t\t</item>\n\t\t<item>\n\t\t<title>Alternate Column Scroll Animation</title>\n\t\t<link>https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/</link>\n\t\t\n\t\t<dc:creator><![CDATA[Mary Lou]]></dc:creator>\n\t\t<pubDate>Tue, 21 Dec 2021 11:22:09 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Playground]]></category>\n\t\t<category><![CDATA[column]]></category>\n\t\t<category><![CDATA[image grid]]></category>\n\t\t<category><![CDATA[locomotive scroll]]></category>\n\t\t<category><![CDATA[preview]]></category>\n\t\t<category><![CDATA[smooth scrolling]]></category>\n\t\t<category><![CDATA[thumbnails]]></category>\n\t\t<guid isPermaLink=\"false\">https://tympanus.net/codrops/?p=57959</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>A grid layout with columns that scroll in opposite directions and a content preview animation.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/\">Alternate Column Scroll Animation</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>Grids are truly magical. There&#8217;s so many different kind of things we can do with them; layout-wise and scroll-wise. Some time ago, I came across <a href=\"https://giuliatonon.it/\">Giulia Tonon&#8217;s amazing website</a>. It was made by the amazing duo of <a href=\"https://e-t.studio/\">ET Studio</a>. The unique design is enhanced by the exquisite motion of the columns: while scrolling, the middle column scrolls one way, while the outer ones scroll the other way. </p>\n\n\n\n<p>This is something that I thought would be interesting to build upon using <a href=\"https://locomotivemtl.github.io/locomotive-scroll/\">Locomotive Scroll</a> and combine it with a little idea of flying grid items. Once we click on a grid item, it animates to the center of the screen while scaling up. The other grid items move to their respective positions in the row of thumbnails beneath the main image. This kind of animation is highly inspired by the work of <a href=\"https://twitter.com/AriBenoist\">Aristide Benoist</a> who is <em>the</em> master of delicate view switching motions and unique layout animations. </p>\n\n\n\n<p>This is the initial view:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"500\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll1.jpg\" alt=\"\" class=\"wp-image-58066\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll1.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll1-400x250.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll1-768x480.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>When clicking on a image, we move it to the center and animate all other images in the viewport to the little thumbnail navigation:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"500\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll2.jpg\" alt=\"\" class=\"wp-image-58068\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll2.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll2-400x250.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columscroll2-768x480.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>And this is how all the motion flow looks like:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columns1_opt.mp4\"></video></figure>\n\n\n\n<p>Please be aware that this experiment is mostly a mockup (no &#8220;real&#8221; thumbnail navigation for this one)!</p>\n\n\n\n<p>I really hope you find this inspirational! Thank you for checking by!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/\">Alternate Column Scroll Animation</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/columns1_opt.mp4\" length=\"2462083\" type=\"video/mp4\" />\n\n\t\t\t</item>\n\t\t<item>\n\t\t<title>8 Design Tips to Make Your Blog or Shop Stand Out</title>\n\t\t<link>https://tympanus.net/codrops/2021/12/17/8-design-tips-to-make-your-blog-or-shop-stand-out/</link>\n\t\t\n\t\t<dc:creator><![CDATA[Chris]]></dc:creator>\n\t\t<pubDate>Fri, 17 Dec 2021 11:01:51 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Articles]]></category>\n\t\t<category><![CDATA[theme]]></category>\n\t\t<category><![CDATA[website]]></category>\n\t\t<category><![CDATA[wordpress]]></category>\n\t\t<category><![CDATA[zeen]]></category>\n\t\t<guid isPermaLink=\"false\">https://tympanus.net/codrops/?p=57829</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Using the popular and number one rated Zeen theme as a reference, we'll show you eight modern ways to take your website to the next level. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/17/8-design-tips-to-make-your-blog-or-shop-stand-out/\">8 Design Tips to Make Your Blog or Shop Stand Out</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>You probably don’t need us to tell you that there’s a lot of competition on the internet. Your users have near-limitless options for where they can spend their time online. Because of that variety, finding a way to stand out can feel like an impossible task.&nbsp;</p>\n\n\n\n<p>Fortunately, a little bit of creative design can go a long way. By learning a few top-tier strategies, you can help your website become a must-see destination for your target audience.</p>\n\n\n\n<p>Using <a href=\"https://codetipi.com\" target=\"_blank\" rel=\"noreferrer noopener\">Codetipi&#8217;s</a> popular and number one rated <a href=\"https://themeforest.net/item/zeen-next-generation-magazine-wordpress-theme/22709856?utm_source=t1&amp;utm_medium=blog\" target=\"_blank\" rel=\"noreferrer noopener\">Zeen theme</a> as a reference, we&#8217;ll show you eight modern ways to take your website to the next level. Let’s get straight to it:</p>\n\n\n\n<h2>#1. Attract Attention With a Marquee Block</h2>\n\n\n\n<p>A marquee block is a section of your site that features moving text which helps draw your visitors’ eyes toward whatever information you’re trying to highlight. It was wildly popular on websites in the 90s and has recently made a roaring comeback to breathe new life and interactivity to modern websites:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop muted src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/blog-theme-wordpress-marquee.mp4\"></video><figcaption><a href=\"https://demos.codetipi.com/zeen-undo/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s lovely Marquee block</a> in action</figcaption></figure>\n\n\n\n<p>The slow speed gives users a chance to read the text. However, the fact that it flows slowly from right to left also helps to engage readers. This feature can also effectively guide your audience’s eyes across the rest of the screen, similar to a <a href=\"https://tympanus.net/codrops/2021/11/17/slideshow-with-filter-reveal-effect/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">slideshow feature</a>.</p>\n\n\n\n<p>Themes that stay up to date with the latest trends, such as <a href=\"https://themeforest.net/item/zeen-next-generation-magazine-wordpress-theme/22709856?utm_source=t1&amp;utm_medium=blog\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen</a>, make it easy to create marquee blocks. However, there are some factors to keep in mind to maximise the effectiveness of your marquee.&nbsp;</p>\n\n\n\n<p>Firstly, try not to include too much text. Shorter sentences help make sure that you don’t exceed a visitor’s attention span. Moreover, they can also avoid creating a rushed feeling.&nbsp;</p>\n\n\n\n<p>Secondly, pause the animation when hovering over it with a mouse. Zeen&#8217;s Marquee implementation does this, which is very needed to give visitors a sense of control over the site. This setting can help make sure that your message gets across and also further boosts the website&#8217;s overall interactivity feel.</p>\n\n\n\n<p>Finally, we recommend that you try to include clickable Calls To Action (CTAs) in the text. A brief and clear directive can take advantage of this active design element.&nbsp;In <a href=\"https://demos.codetipi.com/zeen-undo/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s demo site</a>, the marquee links to a featured product category.</p>\n\n\n\n<h2>#2. Dark Mode</h2>\n\n\n\n<p>You probably put a lot of time and effort into choosing a color scheme for your website. Nevertheless, brighter designs may be off-putting to certain users. That’s why offering a darker alternative can be a stand-out and welcome feature.</p>\n\n\n\n<p>Most people find that dark mode is a bit easier on the eyes, particularly when surfing the net at night. This is even more true if users want to read long-form articles.</p>\n\n\n\n<p>Fortunately, you don’t have to design an entire site around a calming color palette or create a dark site. Instead, you can help your users toggle between contrasting shades at will via a Reading Mode feature:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop muted src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-dark-mode.mp4\"></video><figcaption><a href=\"https://demos.codetipi.com/zeen-symmetry/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s Dark Mode</a> in action</figcaption></figure>\n\n\n\n<p>This toggle feature eases the browsing experience, so we recommend placing it in a fairly prominent area. However, it shouldn’t be large or intrusive – even a simple icon near the top of your page can do the trick, as visitors who prefer dark mode will not miss it.</p>\n\n\n\n<p>This simple, <a href=\"https://tympanus.net/codrops/2021/09/06/creating-interactive-product-pages-with-react-and-cloudinary/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">interactive feature</a> is easy to add to your designs. Zeen even comes with an advanced dark mode system that can save the user&#8217;s last reading preference via a cookie. In other words, your website can remember your visitors’ desired preference for when they next visit your site.&nbsp;</p>\n\n\n\n<h2>#3. Remind Visitors of Their Shopping Carts</h2>\n\n\n\n<p>A lot of modern blogs have shops to sell merchandise or other goodies, and cart abandonment can be a big issue. The lack of an easy shopping journey means potential buyers who add products to their cart can lose focus or get distracted and end up abandoning their cart completely. If the cart inventory doesn’t expire on purpose, it might also cause locked-away stocking problems that could lead to further loss of sales from other potential buyers.&nbsp;</p>\n\n\n\n<p>Design can be a deciding factor here: up to <a href=\"https://www.statista.com/statistics/1228452/reasons-for-abandonments-during-checkout-united-states/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">18% of people</a> abandoned their carts because the site made it too complicated to complete their purchases. If you want to appeal to this portion of customers more effectively, consider making the checkout process as seamless as possible.</p>\n\n\n\n<p>A simple way to do this is with a floating sticky cart block. This subtle design element keeps your customer’s cart close without taking up too much space.</p>\n\n\n\n<p>Additionally, you can double down on this concept with an ajax powered cart that appears without a page refresh. Giving users the freedom to go directly from a product to the checkout process can help reduce friction that might prevent them from purchasing:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop muted src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-floating-cart.mp4\"></video><figcaption><a href=\"https://demos.codetipi.com/zeen-undo/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s Floating</a> Cart feature</figcaption></figure>\n\n\n\n<p><a href=\"https://themeforest.net/item/zeen-next-generation-magazine-wordpress-theme/22709856?utm_source=t1&amp;utm_medium=blog\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen</a> is a theme primarily aimed at magazines and blogs, however, it comes with advanced WooCommerce integration and features that can put eCommerce-first marketed themes to shame.</p>\n\n\n\n<p>We recommend that you try and integrate a shopping cart element into your overall design. For example, a large button can be intrusive and distracting. Consider using a smaller alternative and choosing vibrant colors that are easy to spot instead.&nbsp;</p>\n\n\n\n<h2>#4. Use Delayed Transitions</h2>\n\n\n\n<p>You’re probably already familiar with the importance of smooth transitions. The freedom to move seamlessly around your site is a subtle yet essential part of the user experience. If these changes seem jittery, your overall design might be less enjoyable.</p>\n\n\n\n<p>However, you don’t have to stop at smooth transitions. Adding clever delays to your element&#8217;s transitions can create a subtle and stylish staggered effect:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop muted src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-delayed-transitions.mp4\"></video><figcaption>Zeen&#8217;s staggered animations</figcaption></figure>\n\n\n\n<p>Users may not consciously notice these changes. However, the cascading effect can make the browsing process seem more elegant. It may also help highlight how well different aspects of the site work together.</p>\n\n\n\n<p>If you want to use delayed transitions, we highly recommend applying them across your site. Not every small action needs to be delayed, but the larger ones probably should be. That way, you can maintain consistency across your website.</p>\n\n\n\n<h2>#5. User Engagement</h2>\n\n\n\n<p>The best designs don’t focus on appearance alone. Search Engine Optimization (SEO) is also a concern for most sites. As such, integrating modern technologies into your design strategy can help more first-time users discover and engage with your website.</p>\n\n\n\n<p>You can consider Google’s voice search as an example. This feature enables people to browse the web via voice commands. If you’re following best practices for standard SEO, you’re already giving yourself a leg up.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-voice-search.jpeg\" alt=\"\" class=\"wp-image-57850\" width=\"616\" height=\"580\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-voice-search.jpeg 1232w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-voice-search-319x300.jpeg 319w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-voice-search-637x600.jpeg 637w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-voice-search-768x723.jpeg 768w\" sizes=\"(max-width: 616px) 100vw, 616px\" /><figcaption><a href=\"https://themeforest.net/item/zeen-next-generation-magazine-wordpress-theme/22709856?utm_source=t1&amp;utm_medium=blog\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen</a> comes with Voice Search integration</figcaption></figure></div>\n\n\n\n<p>However, it’s not just about voice searches. High on-site engagement functionality can also help your site stand out.</p>\n\n\n\n<p>That’s why you might want to consider adding something like emoji reactions. You’re probably familiar with <a href=\"https://www.facebook.com/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Facebook’s version</a> already:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"158\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/facebook-800x158.jpg\" alt=\"\" class=\"wp-image-57849\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/facebook-800x158.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/facebook-400x79.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/facebook-768x151.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/facebook.jpg 1238w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>A feature such as this makes interaction easy: users can express themselves with a single click. However, you don’t have to use standard reactions. You may want to consider personalizing them to your brand. That way, the responses will also reflect what makes your site unique.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"161\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-emojis-800x161.jpg\" alt=\"\" class=\"wp-image-57851\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-emojis-800x161.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-emojis-400x81.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-emojis-768x155.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-emojis-1536x309.jpg 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-emojis.jpg 1590w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption><a href=\"https://themeforest.net/item/zeen-next-generation-magazine-wordpress-theme/22709856?utm_source=t1&amp;utm_medium=blog\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s</a> Emoji functionality &#8211; choose from 14 different emotions</figcaption></figure>\n\n\n\n<h2>#6. Include Excellent Navigation Tools</h2>\n\n\n\n<p>The easier it is for users to find content, the more likely they are to consume it. As such, you probably don’t need us to tell you that navigation is an essential part of web design.</p>\n\n\n\n<p>Fortunately, there are a few tried-and-true ways to provide high-quality navigation for your visitors. For example, try to ensure that no part of your website is more than three clicks from the homepage. This design can cut down on the amount of searching your users need to do.</p>\n\n\n\n<p>Additionally, try to make these pathways obvious with clearly labelled menus. You may also want to place them in prominent areas like <a href=\"https://www.newyorker.com/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">The New Yorker</a> website does:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"800\" height=\"130\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/new-yorker-800x130.jpg\" alt=\"\" class=\"wp-image-57861\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/new-yorker-800x130.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/new-yorker-400x65.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/new-yorker-768x124.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/new-yorker-1536x249.jpg 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/new-yorker.jpg 1600w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>However, not all of your audience members will want to hunt through menu choices. That’s where a powerful search function comes in. With this simple addition, you can save users time with a direct route to the content they want.</p>\n\n\n\n<p>To make a search function even more convenient, consider designing your page around it. That way, moving around your site will be as easy as possible:</p>\n\n\n\n<div class=\"wp-block-image wp-img-border\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"800\" height=\"533\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/big-search-feature-800x533.jpg\" alt=\"Modern Search Design \" class=\"wp-image-57862\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/big-search-feature-800x533.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/big-search-feature-400x267.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/big-search-feature-768x512.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/big-search-feature.jpg 1500w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption><a href=\"https://demos.codetipi.com/zeen-freebies/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s Freebie</a> Digital Products Demo</figcaption></figure></div>\n\n\n\n<p>Lastly, your search bar doesn’t have to be boring. Consider including a few <a href=\"https://tympanus.net/codrops/2021/11/02/svg-overlay-and-infinite-menu-background-animation/\" target=\"_blank\" rel=\"noreferrer noopener\">background animations</a> around it to draw your user’s attention toward the navigational resource.</p>\n\n\n\n<h2>#7. Use Different Image Aspect Ratios</h2>\n\n\n\n<p>Consistency is a pretty important part of website design. However, it’s far from the only one. Visual variety plays a crucial role in offering a dynamic visual experience.</p>\n\n\n\n<p>Different image aspects ratios help keep readers stay interested and stimulated. Instead of blocking all your content into standardized areas, consider switching it up.&nbsp;</p>\n\n\n\n<p><a href=\"https://demos.codetipi.com/zeen-food/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s Food blog</a> demo showcases this concept, by mixing portrait, circular and landscape images in a variety of column arrangements on the homepage:</p>\n\n\n\n<div class=\"wp-block-image wp-img-border\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"521\" height=\"600\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/different-image-shapes-521x600.jpg\" alt=\"Different Image Shapes\" class=\"wp-image-57864\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/different-image-shapes-521x600.jpg 521w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/different-image-shapes-261x300.jpg 261w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/different-image-shapes-768x884.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/different-image-shapes-1335x1536.jpg 1335w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/different-image-shapes.jpg 1500w\" sizes=\"(max-width: 521px) 100vw, 521px\" /><figcaption><a href=\"https://demos.codetipi.com/zeen-food/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s Food Blog</a> Demo</figcaption></figure></div>\n\n\n\n<p>That way, you avoid making a website with a repetitive design. Additionally, this feature can be a great way to highlight multiple pieces of content.</p>\n\n\n\n<p>While the aspect ratios can vary, you may want to consider making each area link to similar content. In the above example, the top three sections all link to recipes. With this setup, your users will be looking at different options rather than different subjects altogether.</p>\n\n\n\n<h2>#8. Focus On Your Photos</h2>\n\n\n\n<p>High-quality photos aren’t always easy to come by. They can take a lot of time and dedication to perfect. That’s why we recommend that you give them the spotlight.&nbsp;</p>\n\n\n\n<p>Highlighting your photos can serve a few purposes. For one thing, you’ll be getting the maximum value out of work spent on the images.</p>\n\n\n\n<p>It also presents design benefits. For example, a few large photos can create a commanding visual overview of your brand. You can also use them to show off featured products.</p>\n\n\n\n<figure class=\"wp-block-image size-large wp-img-border\"><img loading=\"lazy\" width=\"800\" height=\"533\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/pinterest-800x533.jpg\" alt=\"\" class=\"wp-image-57838\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/pinterest-800x533.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/pinterest-400x267.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/pinterest-768x512.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/pinterest.jpg 1500w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>By the same token, photos are crucial if you’re trying to promote a product. Most users want to know a lot about whatever they’ll be spending money on – and as the old saying goes, a picture’s worth a thousand words.&nbsp;<br><a href=\"https://www.pinterest.com/\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Pinterest</a> doubles down on this concept with large imagery that also reflects the interface’s design. That way, users have a preview of what they can expect after signing up:</p>\n\n\n\n<p>If you’re looking for another way to make the most out of this design strategy, we recommend including colorful backgrounds. A subtle choice can help your photos stand out without distracting from what you’re trying to advertise:</p>\n\n\n\n<figure class=\"wp-block-image size-large wp-img-border\"><img loading=\"lazy\" width=\"800\" height=\"526\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/wordpress-ecommerce-theme-800x526.jpg\" alt=\"\" class=\"wp-image-57840\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/wordpress-ecommerce-theme-800x526.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/wordpress-ecommerce-theme-400x263.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/wordpress-ecommerce-theme-768x505.jpg 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/wordpress-ecommerce-theme.jpg 1500w\" sizes=\"(max-width: 800px) 100vw, 800px\" /><figcaption><a href=\"https://themeforest.net/item/zeen-next-generation-magazine-wordpress-theme/22709856?utm_source=t1&amp;utm_medium=blog\" target=\"_blank\" rel=\"noreferrer noopener sponsored nofollow\">Zeen&#8217;s</a> Undo Demo:</figcaption></figure>\n\n\n\n<p>If your design concept doesn’t necessarily mesh well with these tips, never fear! You could also include interactive photos. Consider adding a <a href=\"https://tympanus.net/codrops/2021/06/09/thumbnail-hover-effect-with-svg-filters/\" target=\"_blank\" rel=\"noreferrer noopener\">thumbnail hover effect</a> to ensure that your users can engage with your images.&nbsp;&nbsp;</p>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>Designing a website that stands out from the crowd isn’t always the easiest task. Fortunately, there are a few rules of thumb that can guide you toward success. By applying these tips and tricks, you can create a unique and high-quality site.</p>\n\n\n\n<p>In this article, we showed you a few ways to create a top-tier website. We focused on dynamic elements, practical considerations, and other ways to appeal to new and returning users alike.&nbsp;</p>\n\n\n\n<p>Do you have any questions or any tips of your own about designing a stand-out site? Let us know in the comments section below!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/12/17/8-design-tips-to-make-your-blog-or-shop-stand-out/\">8 Design Tips to Make Your Blog or Shop Stand Out</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/blog-theme-wordpress-marquee.mp4\" length=\"938979\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-dark-mode.mp4\" length=\"310212\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-floating-cart.mp4\" length=\"722831\" type=\"video/mp4\" />\n<enclosure url=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/12/zeen-delayed-transitions.mp4\" length=\"383627\" type=\"video/mp4\" />\n\n\t\t\t</item>\n\t</channel>\n</rss>\n\r\n<!--\r\nPerformance optimized by W3 Total Cache. Learn more: https://www.boldgrid.com/w3-total-cache/\r\n\r\nObject Caching 314/335 objects using disk\r\nPage Caching using disk: enhanced (SSL caching disabled) \r\nContent Delivery Network via i7x7p5b7.stackpathcdn.com\r\nMinified using disk\r\n\r\nServed from: tympanus.net @ 2022-01-13 03:23:06 by W3 Total Cache\r\n-->"
  },
  "description": "Creative front-end resources and inspiration for web professionals",
  "home_page_url": "https://tympanus.net/codrops",
  "_ext": {
    "date_published": "2022-01-12T11:19:22.000Z",
    "date_modified": "2022-01-12T11:19:23.000Z"
  }
}