{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "WebKit",
  "feed_url": "https://webkit.org/feed/atom/",
  "items": [
    {
      "id": "https://webkit.org/?p=12156",
      "url": "https://webkit.org/blog/12156/release-notes-for-safari-technology-preview-137/",
      "title": "Release Notes for Safari Technology Preview 137",
      "summary": "Safari Technology Preview Release 137 is now available for download for macOS Big Sur and betas of macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 137 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=285788&amp;rev=286534&amp;limit=746\">285788-286534</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Enhanced autocomplete to support mid-line completions (<a href=\"https://trac.webkit.org/changeset/285851/webkit/\">r285851</a>)</li>\n<li>Styles\n<ul>\n<li>Added a inline swatch for CSS <code>align-content</code> (<a href=\"https://trac.webkit.org/changeset/285983/webkit/\">r285983</a>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Layers Tab\n<ul>\n<li>Fixed the position of composited layers with a <code>box-shadow</code> (<a href=\"https://trac.webkit.org/changeset/285839/webkit/\">r285839</a>)</li>\n</ul>\n</li>\n<li>Console Prompt\n<ul>\n<li>Fixed console script evaluation not working or being performed in an unexpected execution context after refresh or navigation (<a href=\"https://trac.webkit.org/changeset/286412/webkit/\">r286412</a>)</li>\n</ul>\n</li>\n<li>Web Inspector Interface\n<ul>\n<li>Enabled left docking when in left-to-right and right docking when in right-to-left mode (<a href=\"https://trac.webkit.org/changeset/285974/webkit/\">r285974</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Enabled support for <code>:has()</code> pseudo-class by default (<a href=\"https://trac.webkit.org/changeset/286495/webkit/\">r286495</a>, <a href=\"https://trac.webkit.org/changeset/286135/webkit/\">r286135</a>, <a href=\"https://trac.webkit.org/changeset/286302/webkit/\">r286302</a>, <a href=\"https://trac.webkit.org/changeset/286180/webkit/\">r286180</a>, <a href=\"https://trac.webkit.org/changeset/286226/webkit/\">r286226</a>, <a href=\"https://trac.webkit.org/changeset/286494/webkit/\">r286494</a>, <a href=\"https://trac.webkit.org/changeset/286433/webkit/\">r286433</a>, <a href=\"https://trac.webkit.org/changeset/286188/webkit/\">r286188</a>, <a href=\"https://trac.webkit.org/changeset/286169/webkit/\">r286169</a>, <a href=\"https://trac.webkit.org/changeset/286365/webkit/\">r286365</a>)</li>\n<li>Added support for new <code>srgb-linear</code>, <code>xyz-d50</code> and <code>xyz-d65</code> colorspaces (<a href=\"https://trac.webkit.org/changeset/286168/webkit/\">r286168</a>)</li>\n<li>Added support for <code>oklab()</code> and <code>oklch()</code> colors (<a href=\"https://trac.webkit.org/changeset/286191/webkit/\">r286191</a>)</li>\n<li>Added support for replaced elements with intrinsic ratio and no intrinsic size (<a href=\"https://trac.webkit.org/changeset/286206/webkit/\">r286206</a>)</li>\n<li>Added support for <code>*vi</code> (inline) and <code>*vb</code> (block) viewport units (<a href=\"https://trac.webkit.org/changeset/286458/webkit/\">r286458</a>)</li>\n<li>Added helper to add CSS property with implicit default (<a href=\"https://trac.webkit.org/changeset/285837/webkit/\">r285837</a>)</li>\n<li>Changed to not shrink tables bellow their intrinsic sizes (<a href=\"https://trac.webkit.org/changeset/286207/webkit/\">r286207</a>)</li>\n<li>Changed SVG images used as grid items to use the overriding logical width and height when defined to compute the logical dimensions (<a href=\"https://trac.webkit.org/changeset/286100/webkit/\">r286100</a>)</li>\n<li>Changed dynamic <code>dv*</code> viewport units to ignore the page scale (<a href=\"https://trac.webkit.org/changeset/286350/webkit/\">r286350</a>)</li>\n<li>Fixed <code>:hover</code> with descendant selector invalidating correctly in shadow trees (<a href=\"https://trac.webkit.org/changeset/286063/webkit/\">r286063</a>)</li>\n<li>Fixed <code>rem</code> in media queries to be calculated using <code>font-size: initial</code>, not root element <code>font-size</code> (<a href=\"https://trac.webkit.org/changeset/286123/webkit/\">r286123</a>)</li>\n<li>Fixed sticky <code>th</code> or <code>td</code> in <code>table</code> to stop at the specified top (<a href=\"https://trac.webkit.org/changeset/286417/webkit/\">r286417</a>)</li>\n<li>Implemented parsing and animation support for <code>ray()</code> shape accepted by <code>offset-path</code> (<a href=\"https://trac.webkit.org/changeset/286086/webkit/\">r286086</a>)</li>\n<li>Transferred size for grid item with an aspect-ratio and stretch alignment against the definite row (<a href=\"https://trac.webkit.org/changeset/285987/webkit/\">r285987</a>)</li>\n<li>Updated <code>color-mix()</code> to the latest spec (<a href=\"https://trac.webkit.org/changeset/286196/webkit/\">r286196</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Added <code>Intl.NumberFormat.formatRangeToParts</code> for ICU 69~ platforms (<a href=\"https://trac.webkit.org/changeset/286255/webkit/\">r286255</a>)</li>\n<li>Implemented <code>Date.prototype.toTemporalInstant()</code> (<a href=\"https://trac.webkit.org/changeset/286149/webkit/\">r286149</a>)</li>\n<li>Revised <code>JSON.parse</code> atomize policy for performance and compatibility with the other engines (<a href=\"https://trac.webkit.org/changeset/285955/webkit/\">r285955</a>)</li>\n<li>Accelerated public class field initialization (<a href=\"https://trac.webkit.org/changeset/286251/webkit/\">r286251</a>)</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Fixed WebAssembly <code>memory.fill</code> out of bounds error message (<a href=\"https://trac.webkit.org/changeset/286092/webkit/\">r286092</a>)</li>\n</ul>\n<h3>Experimental Model Element</h3>\n<ul>\n<li>Added support for mouse-based manipulation of <code>&lt;model&gt;</code> on macOS (<a href=\"https://trac.webkit.org/changeset/285986/webkit/\">r285986</a>)</li>\n<li>Added audio support (<a href=\"https://trac.webkit.org/changeset/286065/webkit/\">r286065</a>)</li>\n<li>Added support for controlling looping animations (<a href=\"https://trac.webkit.org/changeset/286066/webkit/\">r286066</a>)</li>\n<li>Added support for getting and setting the camera (<a href=\"https://trac.webkit.org/changeset/286019/webkit/\">r286019</a>)</li>\n<li>Added support for pausing and resuming animations (<a href=\"https://trac.webkit.org/changeset/286048/webkit/\">r286048</a>)</li>\n<li>Added support for seeking animations (<a href=\"https://trac.webkit.org/changeset/286068/webkit/\">r286068</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Added accessibility attributes for <code>&lt;model&gt;</code> (<a href=\"https://trac.webkit.org/changeset/286406/webkit/\">r286406</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added initial implementation for the Web Lock API (<a href=\"https://trac.webkit.org/changeset/286284/webkit/\">r286284</a>)</li>\n<li>Fixed <code>Cross-Origin-Embedder-Policy: require-corp</code> to not prevent loading of data-URL images (<a href=\"https://trac.webkit.org/changeset/285823/webkit/\">r285823</a>)</li>\n<li>Fixed empty <code>&lt;input type=file&gt;</code> controls not showing up in the <code>urlencoded</code> and <code>text/plain</code> <code>enctypes</code> (<a href=\"https://trac.webkit.org/changeset/285808/webkit/\">r285808</a>)</li>\n<li>Fixed empty <code>&lt;input type=file&gt;</code> represented incorrectly in FormData (<a href=\"https://trac.webkit.org/changeset/285861/webkit/\">r285861</a>)</li>\n<li>Fixed modal dialogs to make the root element unfocusable (<a href=\"https://trac.webkit.org/changeset/285791/webkit/\">r285791</a>)</li>\n<li>Fixed <code>validity.valueMissing</code> to not rely on the element&#8217;s disabled state for inputs of type <code>radio</code>, <code>file</code>, or <code>checkbox</code> (<a href=\"https://trac.webkit.org/changeset/286413/webkit/\">r286413</a>)</li>\n<li>Fixed file inputs in non-multipart form submissions showing up as string values in the <code>formdata</code> event (<a href=\"https://trac.webkit.org/changeset/286427/webkit/\">r286427</a>)</li>\n<li>Implemented <code>FileSystemFileHandle.getFile()</code> (<a href=\"https://trac.webkit.org/changeset/285912/webkit/\">r285912</a>)</li>\n</ul>\n<h3>Content Security Policy</h3>\n<ul>\n<li>Fixed missing <code>lineNumber</code> and <code>columnNumber</code> in inline violation reports (<a href=\"https://trac.webkit.org/changeset/285800/webkit/\">r285800</a>)</li>\n<li>Implemented submitting samples in violation reports (<a href=\"https://trac.webkit.org/changeset/286150/webkit/\">r286150</a>)</li>\n<li>Fixed CSP DOM reporting which always used the document as the target (<a href=\"https://trac.webkit.org/changeset/286136/webkit/\">r286136</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Added support for more <code>requestVideoFrameCallback</code> metadata (<a href=\"https://trac.webkit.org/changeset/285984/webkit/\">r285984</a>)</li>\n<li>Fixed audio rate issues in WebRTC audio rendering when switching audio output (<a href=\"https://trac.webkit.org/changeset/285985/webkit/\">r285985</a>)</li>\n<li>Fixed video encoding and decoding for h.264 (<a href=\"https://trac.webkit.org/changeset/285928/webkit/\">r285928</a>)</li>\n</ul>\n<h3>Apple Pay</h3>\n<ul>\n<li>Changed <code>PaymentRequest</code> to validate payment method data on construction (<a href=\"https://trac.webkit.org/changeset/286452/webkit/\">r286452</a>)\n<ul>\n<li>This can (and should) now be used instead of <code>ApplePaySession.supportsVersion</code>.</li>\n</ul>\n</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Added support for special matching characters (<code>*</code>, <code>|</code>, <code>||</code>, and <code>^</code>) in <code>urlFilter</code> of <code>declarativeNetRequest</code> rules instead of treating them as regex patterns</li>\n<li>Added permission prompting inside Web Inspector for <code>devtools</code> extension tabs</li>\n<li>Added support for CSS injections and removals of more than one file with <code>browser.scripting</code></li>\n</ul>",
      "content_text": "Safari Technology Preview Release 137 is now available for download for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 285788-286534.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nElements Tab\n\nEnhanced autocomplete to support mid-line completions (r285851)\nStyles\n\nAdded a inline swatch for CSS align-content (r285983)\n\n\n\n\nLayers Tab\n\nFixed the position of composited layers with a box-shadow (r285839)\n\n\nConsole Prompt\n\nFixed console script evaluation not working or being performed in an unexpected execution context after refresh or navigation (r286412)\n\n\nWeb Inspector Interface\n\nEnabled left docking when in left-to-right and right docking when in right-to-left mode (r285974)\n\n\n\nCSS\n\nEnabled support for :has() pseudo-class by default (r286495, r286135, r286302, r286180, r286226, r286494, r286433, r286188, r286169, r286365)\nAdded support for new srgb-linear, xyz-d50 and xyz-d65 colorspaces (r286168)\nAdded support for oklab() and oklch() colors (r286191)\nAdded support for replaced elements with intrinsic ratio and no intrinsic size (r286206)\nAdded support for *vi (inline) and *vb (block) viewport units (r286458)\nAdded helper to add CSS property with implicit default (r285837)\nChanged to not shrink tables bellow their intrinsic sizes (r286207)\nChanged SVG images used as grid items to use the overriding logical width and height when defined to compute the logical dimensions (r286100)\nChanged dynamic dv* viewport units to ignore the page scale (r286350)\nFixed :hover with descendant selector invalidating correctly in shadow trees (r286063)\nFixed rem in media queries to be calculated using font-size: initial, not root element font-size (r286123)\nFixed sticky th or td in table to stop at the specified top (r286417)\nImplemented parsing and animation support for ray() shape accepted by offset-path (r286086)\nTransferred size for grid item with an aspect-ratio and stretch alignment against the definite row (r285987)\nUpdated color-mix() to the latest spec (r286196)\n\nJavaScript\n\nAdded Intl.NumberFormat.formatRangeToParts for ICU 69~ platforms (r286255)\nImplemented Date.prototype.toTemporalInstant() (r286149)\nRevised JSON.parse atomize policy for performance and compatibility with the other engines (r285955)\nAccelerated public class field initialization (r286251)\n\nWebAssembly\n\nFixed WebAssembly memory.fill out of bounds error message (r286092)\n\nExperimental Model Element\n\nAdded support for mouse-based manipulation of <model> on macOS (r285986)\nAdded audio support (r286065)\nAdded support for controlling looping animations (r286066)\nAdded support for getting and setting the camera (r286019)\nAdded support for pausing and resuming animations (r286048)\nAdded support for seeking animations (r286068)\n\nAccessibility\n\nAdded accessibility attributes for <model> (r286406)\n\nWeb API\n\nAdded initial implementation for the Web Lock API (r286284)\nFixed Cross-Origin-Embedder-Policy: require-corp to not prevent loading of data-URL images (r285823)\nFixed empty <input type=file> controls not showing up in the urlencoded and text/plain enctypes (r285808)\nFixed empty <input type=file> represented incorrectly in FormData (r285861)\nFixed modal dialogs to make the root element unfocusable (r285791)\nFixed validity.valueMissing to not rely on the element’s disabled state for inputs of type radio, file, or checkbox (r286413)\nFixed file inputs in non-multipart form submissions showing up as string values in the formdata event (r286427)\nImplemented FileSystemFileHandle.getFile() (r285912)\n\nContent Security Policy\n\nFixed missing lineNumber and columnNumber in inline violation reports (r285800)\nImplemented submitting samples in violation reports (r286150)\nFixed CSP DOM reporting which always used the document as the target (r286136)\n\nMedia\n\nAdded support for more requestVideoFrameCallback metadata (r285984)\nFixed audio rate issues in WebRTC audio rendering when switching audio output (r285985)\nFixed video encoding and decoding for h.264 (r285928)\n\nApple Pay\n\nChanged PaymentRequest to validate payment method data on construction (r286452)\n\nThis can (and should) now be used instead of ApplePaySession.supportsVersion.\n\n\n\nWeb Extensions\n\nAdded support for special matching characters (*, |, ||, and ^) in urlFilter of declarativeNetRequest rules instead of treating them as regex patterns\nAdded permission prompting inside Web Inspector for devtools extension tabs\nAdded support for CSS injections and removals of more than one file with browser.scripting\n",
      "date_published": "2021-12-20T21:23:09.000Z",
      "date_modified": "2021-12-20T21:23:09.000Z",
      "_plugin": {
        "pageFilename": "88902f9e35d3bbc8c6c232146fe5c275d18691ab44f4adde4b41b775a683820a.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12058",
      "url": "https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/",
      "title": "Wide Gamut 2D Graphics using HTML Canvas",
      "summary": "Support for creating 2D canvases with Display P3 backing stores has been added to WebKit.",
      "content_html": "<style>\n@media (prefers-color-scheme:dark) { figure .preserve-color, figure:hover .preserve-color { filter: none !important; } }\nfigure.widescreen.inline-images img { display: inline; }\narticle .byline { width: 210px; margin-left: -20px; }\n.nowrap-overflow-auto { white-space: nowrap; max-width: 100%; overflow: auto; }\nfigure img { display: inline !important; }\n@media (max-width: 1180px) {\n  article .byline { width: unset; margin-right: auto; }\n}\n#fillstyles img { background-color: #ddd; }\n@media (prefers-color-scheme: dark) {\n  #fillstyles img { background-color: #444; }\n}\n#puzzle iframe { width: 350px; height: 250px; }\n@media (min-width: 500px) {\n  #puzzle iframe { width: 500px; height: 310px; }\n}\n@media (min-width: 1000px) {\n  #puzzle iframe { width: 1000px; height: 520px; }\n}\n@media (color-gamut: p3) {\n  #gamut-warning { display: none; }\n}\n</style>\n<p>Most colors used on the Web today are sRGB colors. These are the colors that you specify with the familiar <code>#rrggbb</code> and <code>rgb(r, g, b)</code> CSS syntax, and whose individual color components are given as values in the range [0, 255]. For example, <code>rgb(255, 0, 0)</code> is the most saturated, pure red in the sRGB color space. But the range of colors in sRGB — its <em>color gamut</em> — does not encompass all colors that can be perceived by the human visual system, and there are displays that can produce a broader range of colors.</p>\n<p>sRGB is based on the color capabilities of computer monitors that existed at the time of its standardization, in the late 1990s. Since then, other, wider gamut color spaces have been defined for use in digital content, and which cover more of the colors that humans can perceive. One such color space is Display P3, which contains colors with significantly higher saturation than sRGB.</p>\n<div class=\"note\" id=\"gamut-warning\">\nThis browser reports that the display does not support Display P3 colors; figures in this post may not appear as intended.\n</div>\n<figure class=\"widescreen mattewhite aligncenter\">\n<div class=\"nowrap-overflow-auto\">\n    <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/pinwheel-sRGB.png\" width=\"240\" height=\"244\" alt=\"A conic gradient showing a range of sRGB colors\" class=\"preserve-color\"> <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/pinwheel-Display-P3.png\" width=\"240\" height=\"244\" alt=\"A conic gradient showing a range of Display P3 colors\" class=\"preserve-color\">\n  </div><figcaption>Conic gradients showing fully saturated sRGB (left) and Display P3 (right) colors.  Viewed in a browser and on a display supporting Display P3, the colors in the circle on the right will show as more intense than those on the left.  (<a href=\"https://webkit.org/blog-files/wide-gamut-canvas/pinwheels.html\">View as standalone page.</a>)</figcaption></figure>\n<div class=\"note\">For a more in depth introduction to color spaces, see Dean Jackson’s earlier post, <a href=\"https://webkit.org/blog/6682/improving-color-on-the-web/\">Improving Color on the Web</a>.</div>\n<p>Today, there are many computer and mobile devices on the market with displays that can reproduce all the colors of the Display P3 gamut, and the Web platform has been evolving over the last few years to allow authors to make best use of these displays. WebKit has supported wide color images and video since 2016, and last year became <a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\">the first browser engine to implement the new color syntax</a> defined in <a href=\"https://drafts.csswg.org/css-color-4/\">CSS Color Module Level 4</a> where colors can be specified in a given color space (like <code>color(display-p3 1 0 0)</code>, a fully saturated Display P3 red).</p>\n<p>One notable omission in wide gamut color support, until now, has been in the HTML <code>canvas</code> element. The 2D canvas API was introduced before wide gamut displays were common, and until now has only handled drawing and manipulating sRGB pixel values. Earlier this year, a proposal for creating canvas contexts using other color spaces was added to the HTML standard, and we’ve recently added support for this to WebKit.</p>\n<h2>Drawing on a wide gamut canvas rendering context</h2>\n<p>The <code>getContext</code> method on a <code>canvas</code> element, which is used to create a rendering context object with 2D drawing APIs, accepts a new option to set the canvas backing store’s color space.</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">canvas</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"canvas\"</span> <span class=\"keyword attribute\">width</span>=<span class=\"attribute value string\">\"400\"</span> <span class=\"keyword attribute\">height</span>=<span class=\"attribute value string\">\"300\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"keyword\">canvas</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">script</span>&gt;</span>\nlet canvas = document.getElementById(\"canvas\");\nlet context = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n// ... draw on context ...\n<span class=\"tag\">&lt;/<span class=\"keyword\">script</span>&gt;</span>\n</code></pre>\n<p>The default color space remains sRGB, rather than having the browser automatically use the wider color space, to avoid the performance overhead of color space conversions with existing content. The two explicit color spaces that can be requested are <code>\"srgb\"</code> and <code>\"display-p3\"</code>.</p>\n<p>Fill and stroke styles can be specified using any supported CSS color syntax.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">position</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\n<span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">green</span> <span class=\"keyword operator\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">0</span>]) {\n    <span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">blue</span> <span class=\"keyword operator\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">0</span>]) {\n        <span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">red</span> <span class=\"keyword operator\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">0</span>]) {\n            <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">=</span> `<span class=\"identifier\">color</span>(<span class=\"identifier\">display</span><span class=\"operator\">-</span><span class=\"identifier\">p3</span> ${<span class=\"identifier\">red</span>} ${<span class=\"identifier\">green</span>} ${<span class=\"identifier\">blue</span>})`;\n            <span class=\"identifier\">context</span>.<span class=\"identifier\">fillRect</span>(<span class=\"identifier\">position</span>, <span class=\"identifier\">position</span>, <span class=\"number\">40</span>, <span class=\"number\">40</span>);\n            <span class=\"identifier\">position</span> <span class=\"operator\">+</span><span class=\"operator\">=</span> <span class=\"number\">20</span>;\n        }\n    }\n}\n</code></pre>\n<figure id=\"fillstyles\" class=\"widescreen mattewhite aligncenter\">\n<div class=\"nowrap-overflow-auto\">\n    <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/squares-sRGB.png\" width=\"220\" height=\"220\" class=\"preserve-color\" alt=\"Colored squares that have been clamped to sRGB\"> <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/squares-Display-P3.png\" width=\"220\" height=\"220\" class=\"preserve-color\" alt=\"Colored squares using Display P3 colors that are outside the sRGB gamut\">\n  </div><figcaption>Display P3 colors used as fill styles on an sRGB (left) and Display P3 (right) canvas.  Colors on the left are clamped to remain within the sRGB gamut. (<a href=\"https://webkit.org/blog-files/wide-gamut-canvas/squares.html\">View as standalone page.</a>)</figcaption></figure>\n<p>Any drawing that uses a color outside the color space of the canvas will be clamped so that it is in gamut. For example, filling a rectangle with <code>color(display-p3 1 0 0)</code> on an sRGB canvas will end up using a fully saturated sRGB red. Similarly, drawing on a Display P3 canvas with <code>color(rec2020 0.9 0 0.9)</code>, an almost full magenta in the <a href=\"https://drafts.csswg.org/css-color-4/#predefined-rec2020\">Rec.2020 color space</a>, will result in pixels of approximately <code>color(display-p3 1.0 0 0.923)</code> being used, since that is the closest in the Display P3 color gamut.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">const</span> <span class=\"identifier\">COLORS</span> <span class=\"operator\">=</span> [<span class=\"string\">\"#0f0\"</span>, <span class=\"string\">\"color(display-p3 0 1 0)\"</span>];\n<span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">y</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"identifier\">y</span> <span class=\"operator\">&lt;</span> <span class=\"number\">180</span>; <span class=\"identifier\">y</span> <span class=\"operator\">+</span><span class=\"operator\">=</span> <span class=\"number\">20</span>) {\n    <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">=</span> <span class=\"identifier\">COLORS</span>[(<span class=\"identifier\">y</span> <span class=\"operator\">/</span> <span class=\"number\">20</span>) <span class=\"operator\">%</span> <span class=\"number\">2</span>];\n    <span class=\"identifier\">context</span>.<span class=\"identifier\">fillRect</span>(<span class=\"number\">20</span>, <span class=\"identifier\">y</span>, <span class=\"number\">160</span>, <span class=\"number\">20</span>);\n}\n</code></pre>\n<figure class=\"widescreen mattewhite aligncenter\">\n<div class=\"nowrap-overflow-auto\">\n    <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/stripes-sRGB.png\" width=\"200\" height=\"200\" class=\"preserve-color\" alt=\"A filled square of full sRGB green\"> <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/stripes-Display-P3.png\" width=\"200\" height=\"200\" class=\"preserve-color\" alt=\"Stripes of full sRGB green and full Display P3 green\">\n  </div><figcaption>Stripes of interleaved Display P3 and sRGB colors on an sRGB (left) and Display P3 (right) canvas.  Because colors are clamped to remain within the gamut of the canvas, the two shades of green are indistinguishable on the sRGB canvas.  (<a href=\"https://webkit.org/blog-files/wide-gamut-canvas/stripes.html\">View as standalone page.</a>)</figcaption></figure>\n<div class=\"note\">\nOn macOS, you can use the <a href=\"https://support.apple.com/guide/colorsync-utility/welcome/mac\">ColorSync Utility</a> to convert color values between sRGB, Display P3, Rec.2020, and some other predefined color spaces.\n</div>\n<p>Wide gamut colors are usable in all canvas drawing primitives:</p>\n<ul>\n<li>as the fill and stroke of rectangles, paths, and text</li>\n<li>in gradient stops</li>\n<li>as a shadow color</li>\n</ul>\n<h2>Pixel manipulation in sRGB and Display P3</h2>\n<p><code>getImageData</code> and <code>putImageData</code> can be used to get and set pixel values on a wide gamut canvas. By default, <code>getImageData</code> will return an <code>ImageData</code> object with pixel values in the color space of the canvas, but it is possible to specify an explicit color space that does not match the canvas, and a conversion will be performed.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">context</span> <span class=\"operator\">=</span> <span class=\"identifier\">canvas</span>.<span class=\"identifier\">getContext</span>(<span class=\"string\">\"2d\"</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n<span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">=</span> <span class=\"string\">\"color(display-p3 0.5 0 0)\"</span>;\n<span class=\"identifier\">context</span>.<span class=\"identifier\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);\n\n<span class=\"keyword type\">let</span> <span class=\"identifier\">imageData</span>;\n\n<span class=\"comment\">// Get ImageData in the canvas color space (Display P3).\n</span><span class=\"identifier\">imageData</span> <span class=\"operator\">=</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">getImageData</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);\n<span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">imageData</span>.<span class=\"identifier\">colorSpace</span>);  <span class=\"comment\">// \"display-p3\"\n</span><span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>([...<span class=\"identifier\">imageData</span>.<span class=\"identifier\">data</span>]);   <span class=\"comment\">// [128, 0, 0, 255]\n</span>\n<span class=\"comment\">// Get ImageData in Display P3 explicitly.\n</span><span class=\"identifier\">imageData</span> <span class=\"operator\">=</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">getImageData</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n<span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">imageData</span>.<span class=\"identifier\">colorSpace</span>);  <span class=\"comment\">// \"display-p3\"\n</span><span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>([...<span class=\"identifier\">imageData</span>.<span class=\"identifier\">data</span>]);   <span class=\"comment\">// [128, 0, 0, 255]\n</span>\n<span class=\"comment\">// Get ImageData converted to sRGB.\n</span><span class=\"identifier\">imageData</span> <span class=\"operator\">=</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">getImageData</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"srgb\"</span> });\n<span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">imageData</span>.<span class=\"identifier\">colorSpace</span>);  <span class=\"comment\">// \"srgb\"\n</span><span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>([...<span class=\"identifier\">imageData</span>.<span class=\"identifier\">data</span>]);   <span class=\"comment\">// [141, 0, 0, 255]\n</span></code></pre>\n<p>The <code>ImageData</code> constructor similarly takes an optional options object with a <code>colorSpace</code> key.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">context</span> <span class=\"operator\">=</span> <span class=\"identifier\">canvas</span>.<span class=\"identifier\">getContext</span>(<span class=\"string\">\"2d\"</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n\n<span class=\"comment\">// Create and fill an ImageData with full Display P3 yellow.\n</span><span class=\"keyword type\">let</span> <span class=\"identifier\">imageData</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">ImageData</span>(<span class=\"number\">10</span>, <span class=\"number\">10</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n<span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"identifier\">i</span> <span class=\"operator\">&lt;</span> <span class=\"number\">10</span> <span class=\"operator\">*</span> <span class=\"number\">10</span> <span class=\"operator\">*</span> <span class=\"number\">4</span>; <span class=\"operator\">+</span><span class=\"operator\">+</span><span class=\"identifier\">i</span>)\n    <span class=\"identifier\">imageData</span>.<span class=\"identifier\">data</span>[<span class=\"identifier\">i</span>] <span class=\"operator\">=</span> [<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>][<span class=\"identifier\">i</span> <span class=\"operator\">%</span> <span class=\"number\">4</span>];\n\n<span class=\"identifier\">context</span>.<span class=\"identifier\">putImageData</span>(<span class=\"identifier\">imageData</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);\n</code></pre>\n<p>As when drawing shapes using colors of a different color space, any mismatch between the <code>ImageData</code> and the target canvas color space will cause <code>putImageData</code> to perform a conversion and potentially clamp the resulting pixels.</p>\n<h2>Serializing canvas content</h2>\n<p>The <code>toDataURL</code> and <code>toBlob</code> methods on a <code>canvas</code> DOM element produce a raster image with the canvas contents. In WebKit, these methods now embed an appropriate color profile in the generated PNG or JPEG when called on a Display P3 canvas, ensuring that the full range of color is preserved.</p>\n<h2>Drawing wide gamut images</h2>\n<p>Like <code>putImageData</code>, the <code>drawImage</code> method will perform any color space conversion needed when drawing an image whose color space differs from that of the canvas. Any color profile used by a raster image referenced by an <code>img</code>, and any color space information in a video referenced by a <code>video</code> (be it a video file or a WebRTC stream), will be honored when drawn to a canvas. This ensures that when drawing into a canvas whose color space matches the display’s (be that Display P3 or sRGB), the source image/video and the canvas pixels will look the same.</p>\n<p>Here is an interactive demonstration of using canvas to make a sliding tile puzzle. The tiles are drawn by applying a clip path and calling <code>drawImage</code> pointing to the <code>img</code> element on the left, which references a wide gamut JPEG. Toggling the checkbox shows how the colors are muted when an sRGB canvas is used.</p>\n<figure id=\"puzzle\" class=\"widescreen mattewhite aligncenter\">\n<p><iframe loading=\"lazy\" src=\"https://webkit.org/blog-files/wide-gamut-canvas/puzzle.html\" width=\"350\" height=\"250\"></iframe><figcaption>Sliding tile puzzle. Toggling the checkbox will change whether an sRGB or a Display P3 canvas is used. (<a href=\"https://webkit.org/blog-files/wide-gamut-canvas/puzzle.html\">View as standalone page.</a>)</figcaption></figure>\n<h2>Web Inspector support</h2>\n<p>Web Inspector also now shows color space information for canvases to help ensure your canvases’ backing stores are in the expected color space.</p>\n<figure class=\"image\"><picture title=\"\"><source media=\"(prefers-color-scheme: dark)\" srcset=\"/wp-content/uploads/Overview-Dark-1024x654.png 2x\" class=\"wp-image-12126\"><img srcset =\"/wp-content/uploads/Overview-Light-1024x654.png 2x\" alt=\"\" class=\"wp-image-12125\" /></picture></figure>\n<p>In the Graphics tab, the Canvases Overview will display the color space for each canvas next to the context type (e.g. 2D) on each canvas overview tile.</p>\n<figure class=\"image\"><picture title=\"\"><source media=\"(prefers-color-scheme: dark)\" srcset=\"/wp-content/uploads/Details-Dark-1024x654.png 2x\" class=\"wp-image-12128\"><img srcset =\"/wp-content/uploads/Details-Light-1024x654.png 2x\" alt=\"\" class=\"wp-image-12127\" /></picture></figure>\n<p>After clicking on a Canvas overview tile to inspect it, the color space is shown in the Details Sidebar in the Attributes section.</p>\n<h2>Browser support</h2>\n<p>Wide gamut canvas is supported in the macOS and iOS ports of WebKit as of <a href=\"https://trac.webkit.org/changeset/283541/webkit\">r283541</a>, and is available in Safari on:</p>\n<ul>\n<li>macOS Monterey 12.1 and above</li>\n<li>iOS 15.1 and above</li>\n</ul>\n<p>Safari is the first browser to support drawing shapes, text, gradients, and shadows with wide gamut CSS colors on Display P3 canvases. All other features, including <code>getImageData</code>, <code>putImageData</code>, and <code>drawImage</code> on Display P3 canvases, are supported in Safari and in Chrome 94 and above.</p>\n<h2>Feature detection</h2>\n<p>There are a few techniques you can use to detect whether wide gamut display and canvas support is available.</p>\n<p><strong>Display support:</strong> To check whether the display supports Display P3 colors, use the <code>color-gamut</code> media query.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">function</span> <span class=\"identifier\">displaySupportsP3Color</span>() {\n    <span class=\"keyword control\">return</span> <span class=\"identifier\">matchMedia</span>(<span class=\"string\">\"(color-gamut: p3)\"</span>).<span class=\"identifier\">matches</span>;\n}\n</code></pre>\n<p><strong>Canvas color space support:</strong> To check whether the browser supports wide gamut canvases, try creating one and checking the resulting color space.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">function</span> <span class=\"identifier\">canvasSupportsDisplayP3</span>() {\n    <span class=\"keyword type\">let</span> <span class=\"identifier\">canvas</span> <span class=\"operator\">=</span> <span class=\"identifier\">document</span>.<span class=\"identifier\">createElement</span>(<span class=\"string\">\"canvas\"</span>);\n    <span class=\"keyword control\">try</span> {\n        <span class=\"comment\">// Safari throws a TypeError if the colorSpace option is supported, but\n</span>        <span class=\"comment\">// the system requirements (minimum macOS or iOS version) for Display P3\n</span>        <span class=\"comment\">// support are not met.\n</span>        <span class=\"keyword type\">let</span> <span class=\"identifier\">context</span> <span class=\"operator\">=</span> <span class=\"identifier\">canvas</span>.<span class=\"identifier\">getContext</span>(<span class=\"string\">\"2d\"</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n        <span class=\"keyword control\">return</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">getContextAttributes</span>().<span class=\"identifier\">colorSpace</span> <span class=\"operator\">=</span><span class=\"operator\">=</span> <span class=\"string\">\"display-p3\"</span>;\n    } <span class=\"keyword control\">catch</span> {\n    }\n    <span class=\"keyword control\">return</span> <span class=\"keyword literal\">false</span>;\n}\n</code></pre>\n<p><strong>CSS Color Module Level 4 syntax support:</strong> To check whether the browser supports specifying wide gamut colors on canvas, try setting one and checking it wasn’t ignored.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">function</span> <span class=\"identifier\">canvasSupportsWideGamutCSSColors</span>() {\n    <span class=\"keyword type\">let</span> <span class=\"identifier\">context</span> <span class=\"operator\">=</span> <span class=\"identifier\">document</span>.<span class=\"identifier\">createElement</span>(<span class=\"string\">\"canvas\"</span>).<span class=\"identifier\">getContext</span>(<span class=\"string\">\"2d\"</span>);\n    <span class=\"keyword type\">let</span> <span class=\"identifier\">initialFillStyle</span> <span class=\"operator\">=</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span>;\n    <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">=</span> <span class=\"string\">\"color(display-p3 0 1 0)\"</span>;\n    <span class=\"keyword control\">return</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">!</span><span class=\"operator\">=</span> <span class=\"identifier\">initialFillStyle</span>;\n}\n</code></pre>\n<h2>Future work</h2>\n<p>There are a few areas where wide gamut canvas support could be improved.</p>\n<ul>\n<li>2D canvas still exposes image data as 8 bit RGBA values through <code>ImageData</code> objects. It may be useful to support other pixel formats for a greater color depth, such as 16 bit integers, or single precision or half precision floating point values, especially when wider color gamuts are used, since increased precision can help avoid banding artifacts. This has been proposed in an <a href=\"https://github.com/whatwg/html/issues/4167\">HTML Standard issue</a>.</li>\n<li>The two predefined color spaces that are supported are sRGB and Display P3, but as High Dynamic Range videos and displays that support HDR become more common, it’s worth consdering allowing 2D canvas to use these and other color spaces too. See <a href=\"https://www.w3.org/Graphics/Color/Workshop/slides/talk/cameron\">this presentation at the W3C Workshop on Wide Color Gamut and High Dynamic Range for the Web</a> from earlier this year, which talks about proposed new color space and HDR support.</li>\n<li>Canvas can be used with context types other than 2D, such as WebGL and WebGPU. A proposal for <a href=\"https://www.w3.org/Graphics/Color/Workshop/slides/talk/russell\">wide gamut and HDR support in these contexts</a> was presented at that same workshop.</li>\n</ul>\n<h2>In summary</h2>\n<p>WebKit now has support for creating 2D canvas contexts using the Display P3 color space, allowing authors to make best use of the displays that are becoming increasingly common. This feature is enabled in Safari on macOS Monterey 12.1 and iOS 15.1.</p>\n<p>If you have any comments or questions about the feature, please feel free to send me a message at <a href=\"https://twitter.com/heycam\">@heycam</a>, and more general comments can be sent to the <a href=\"https://twitter.com/webkit\">@webkit</a> Twitter account.</p>\n<h2>Further reading</h2>\n<ul>\n<li><a href=\"https://webkit.org/blog/6682/improving-color-on-the-web/\">Improving Color on the Web</a> (Dean Jackson, WebKit blog)</li>\n<li><a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\">Wide Gamut Color in CSS with Display-P3</a> (Nikita Vasilyev, WebKit blog)</li>\n<li><a href=\"https://drafts.csswg.org/css-color-4/\">CSS Color Module Level 4</a> (W3C)</li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/canvas.html#2dcontext\">HTML Standard &mdash; The 2D rendering context</a></a> (WHATWG)</li>\n<li><a href=\"https://www.w3.org/Graphics/Color/Workshop/\">W3C Workshop on Wide Color Gamut and High Dynamic Range for the Web</a> (W3C)</li>\n</ul>",
      "content_text": "\nMost colors used on the Web today are sRGB colors. These are the colors that you specify with the familiar #rrggbb and rgb(r, g, b) CSS syntax, and whose individual color components are given as values in the range [0, 255]. For example, rgb(255, 0, 0) is the most saturated, pure red in the sRGB color space. But the range of colors in sRGB — its color gamut — does not encompass all colors that can be perceived by the human visual system, and there are displays that can produce a broader range of colors.\nsRGB is based on the color capabilities of computer monitors that existed at the time of its standardization, in the late 1990s. Since then, other, wider gamut color spaces have been defined for use in digital content, and which cover more of the colors that humans can perceive. One such color space is Display P3, which contains colors with significantly higher saturation than sRGB.\n\nThis browser reports that the display does not support Display P3 colors; figures in this post may not appear as intended.\n\n\n\n     \n  Conic gradients showing fully saturated sRGB (left) and Display P3 (right) colors.  Viewed in a browser and on a display supporting Display P3, the colors in the circle on the right will show as more intense than those on the left.  (View as standalone page.)\nFor a more in depth introduction to color spaces, see Dean Jackson’s earlier post, Improving Color on the Web.\nToday, there are many computer and mobile devices on the market with displays that can reproduce all the colors of the Display P3 gamut, and the Web platform has been evolving over the last few years to allow authors to make best use of these displays. WebKit has supported wide color images and video since 2016, and last year became the first browser engine to implement the new color syntax defined in CSS Color Module Level 4 where colors can be specified in a given color space (like color(display-p3 1 0 0), a fully saturated Display P3 red).\nOne notable omission in wide gamut color support, until now, has been in the HTML canvas element. The 2D canvas API was introduced before wide gamut displays were common, and until now has only handled drawing and manipulating sRGB pixel values. Earlier this year, a proposal for creating canvas contexts using other color spaces was added to the HTML standard, and we’ve recently added support for this to WebKit.\nDrawing on a wide gamut canvas rendering context\nThe getContext method on a canvas element, which is used to create a rendering context object with 2D drawing APIs, accepts a new option to set the canvas backing store’s color space.\n<canvas id=\"canvas\" width=\"400\" height=\"300\"></canvas>\n<script>\nlet canvas = document.getElementById(\"canvas\");\nlet context = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n// ... draw on context ...\n</script>\n\nThe default color space remains sRGB, rather than having the browser automatically use the wider color space, to avoid the performance overhead of color space conversions with existing content. The two explicit color spaces that can be requested are \"srgb\" and \"display-p3\".\nFill and stroke styles can be specified using any supported CSS color syntax.\nlet position = 0;\nfor (let green of [1, 0]) {\n    for (let blue of [1, 0]) {\n        for (let red of [1, 0]) {\n            context.fillStyle = `color(display-p3 ${red} ${green} ${blue})`;\n            context.fillRect(position, position, 40, 40);\n            position += 20;\n        }\n    }\n}\n\n\n\n     \n  Display P3 colors used as fill styles on an sRGB (left) and Display P3 (right) canvas.  Colors on the left are clamped to remain within the sRGB gamut. (View as standalone page.)\nAny drawing that uses a color outside the color space of the canvas will be clamped so that it is in gamut. For example, filling a rectangle with color(display-p3 1 0 0) on an sRGB canvas will end up using a fully saturated sRGB red. Similarly, drawing on a Display P3 canvas with color(rec2020 0.9 0 0.9), an almost full magenta in the Rec.2020 color space, will result in pixels of approximately color(display-p3 1.0 0 0.923) being used, since that is the closest in the Display P3 color gamut.\nconst COLORS = [\"#0f0\", \"color(display-p3 0 1 0)\"];\nfor (let y = 20; y < 180; y += 20) {\n    context.fillStyle = COLORS[(y / 20) % 2];\n    context.fillRect(20, y, 160, 20);\n}\n\n\n\n     \n  Stripes of interleaved Display P3 and sRGB colors on an sRGB (left) and Display P3 (right) canvas.  Because colors are clamped to remain within the gamut of the canvas, the two shades of green are indistinguishable on the sRGB canvas.  (View as standalone page.)\n\nOn macOS, you can use the ColorSync Utility to convert color values between sRGB, Display P3, Rec.2020, and some other predefined color spaces.\n\nWide gamut colors are usable in all canvas drawing primitives:\n\nas the fill and stroke of rectangles, paths, and text\nin gradient stops\nas a shadow color\n\nPixel manipulation in sRGB and Display P3\ngetImageData and putImageData can be used to get and set pixel values on a wide gamut canvas. By default, getImageData will return an ImageData object with pixel values in the color space of the canvas, but it is possible to specify an explicit color space that does not match the canvas, and a conversion will be performed.\nlet context = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\ncontext.fillStyle = \"color(display-p3 0.5 0 0)\";\ncontext.fillRect(0, 0, 100, 100);\n\nlet imageData;\n\n// Get ImageData in the canvas color space (Display P3).\nimageData = context.getImageData(0, 0, 1, 1);\nconsole.log(imageData.colorSpace);  // \"display-p3\"\nconsole.log([...imageData.data]);   // [128, 0, 0, 255]\n\n// Get ImageData in Display P3 explicitly.\nimageData = context.getImageData(0, 0, 1, 1, { colorSpace: \"display-p3\" });\nconsole.log(imageData.colorSpace);  // \"display-p3\"\nconsole.log([...imageData.data]);   // [128, 0, 0, 255]\n\n// Get ImageData converted to sRGB.\nimageData = context.getImageData(0, 0, 1, 1, { colorSpace: \"srgb\" });\nconsole.log(imageData.colorSpace);  // \"srgb\"\nconsole.log([...imageData.data]);   // [141, 0, 0, 255]\n\nThe ImageData constructor similarly takes an optional options object with a colorSpace key.\nlet context = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n\n// Create and fill an ImageData with full Display P3 yellow.\nlet imageData = new ImageData(10, 10, { colorSpace: \"display-p3\" });\nfor (let i = 0; i < 10 * 10 * 4; ++i)\n    imageData.data[i] = [255, 255, 0, 255][i % 4];\n\ncontext.putImageData(imageData, 0, 0);\n\nAs when drawing shapes using colors of a different color space, any mismatch between the ImageData and the target canvas color space will cause putImageData to perform a conversion and potentially clamp the resulting pixels.\nSerializing canvas content\nThe toDataURL and toBlob methods on a canvas DOM element produce a raster image with the canvas contents. In WebKit, these methods now embed an appropriate color profile in the generated PNG or JPEG when called on a Display P3 canvas, ensuring that the full range of color is preserved.\nDrawing wide gamut images\nLike putImageData, the drawImage method will perform any color space conversion needed when drawing an image whose color space differs from that of the canvas. Any color profile used by a raster image referenced by an img, and any color space information in a video referenced by a video (be it a video file or a WebRTC stream), will be honored when drawn to a canvas. This ensures that when drawing into a canvas whose color space matches the display’s (be that Display P3 or sRGB), the source image/video and the canvas pixels will look the same.\nHere is an interactive demonstration of using canvas to make a sliding tile puzzle. The tiles are drawn by applying a clip path and calling drawImage pointing to the img element on the left, which references a wide gamut JPEG. Toggling the checkbox shows how the colors are muted when an sRGB canvas is used.\n\nSliding tile puzzle. Toggling the checkbox will change whether an sRGB or a Display P3 canvas is used. (View as standalone page.)\nWeb Inspector support\nWeb Inspector also now shows color space information for canvases to help ensure your canvases’ backing stores are in the expected color space.\n\nIn the Graphics tab, the Canvases Overview will display the color space for each canvas next to the context type (e.g. 2D) on each canvas overview tile.\n\nAfter clicking on a Canvas overview tile to inspect it, the color space is shown in the Details Sidebar in the Attributes section.\nBrowser support\nWide gamut canvas is supported in the macOS and iOS ports of WebKit as of r283541, and is available in Safari on:\n\nmacOS Monterey 12.1 and above\niOS 15.1 and above\n\nSafari is the first browser to support drawing shapes, text, gradients, and shadows with wide gamut CSS colors on Display P3 canvases. All other features, including getImageData, putImageData, and drawImage on Display P3 canvases, are supported in Safari and in Chrome 94 and above.\nFeature detection\nThere are a few techniques you can use to detect whether wide gamut display and canvas support is available.\nDisplay support: To check whether the display supports Display P3 colors, use the color-gamut media query.\nfunction displaySupportsP3Color() {\n    return matchMedia(\"(color-gamut: p3)\").matches;\n}\n\nCanvas color space support: To check whether the browser supports wide gamut canvases, try creating one and checking the resulting color space.\nfunction canvasSupportsDisplayP3() {\n    let canvas = document.createElement(\"canvas\");\n    try {\n        // Safari throws a TypeError if the colorSpace option is supported, but\n        // the system requirements (minimum macOS or iOS version) for Display P3\n        // support are not met.\n        let context = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n        return context.getContextAttributes().colorSpace == \"display-p3\";\n    } catch {\n    }\n    return false;\n}\n\nCSS Color Module Level 4 syntax support: To check whether the browser supports specifying wide gamut colors on canvas, try setting one and checking it wasn’t ignored.\nfunction canvasSupportsWideGamutCSSColors() {\n    let context = document.createElement(\"canvas\").getContext(\"2d\");\n    let initialFillStyle = context.fillStyle;\n    context.fillStyle = \"color(display-p3 0 1 0)\";\n    return context.fillStyle != initialFillStyle;\n}\n\nFuture work\nThere are a few areas where wide gamut canvas support could be improved.\n\n2D canvas still exposes image data as 8 bit RGBA values through ImageData objects. It may be useful to support other pixel formats for a greater color depth, such as 16 bit integers, or single precision or half precision floating point values, especially when wider color gamuts are used, since increased precision can help avoid banding artifacts. This has been proposed in an HTML Standard issue.\nThe two predefined color spaces that are supported are sRGB and Display P3, but as High Dynamic Range videos and displays that support HDR become more common, it’s worth consdering allowing 2D canvas to use these and other color spaces too. See this presentation at the W3C Workshop on Wide Color Gamut and High Dynamic Range for the Web from earlier this year, which talks about proposed new color space and HDR support.\nCanvas can be used with context types other than 2D, such as WebGL and WebGPU. A proposal for wide gamut and HDR support in these contexts was presented at that same workshop.\n\nIn summary\nWebKit now has support for creating 2D canvas contexts using the Display P3 color space, allowing authors to make best use of the displays that are becoming increasingly common. This feature is enabled in Safari on macOS Monterey 12.1 and iOS 15.1.\nIf you have any comments or questions about the feature, please feel free to send me a message at @heycam, and more general comments can be sent to the @webkit Twitter account.\nFurther reading\n\nImproving Color on the Web (Dean Jackson, WebKit blog)\nWide Gamut Color in CSS with Display-P3 (Nikita Vasilyev, WebKit blog)\nCSS Color Module Level 4 (W3C)\nHTML Standard — The 2D rendering context (WHATWG)\nW3C Workshop on Wide Color Gamut and High Dynamic Range for the Web (W3C)\n",
      "date_published": "2021-12-14T17:00:35.000Z",
      "date_modified": "2021-12-14T17:50:36.000Z",
      "_plugin": {
        "pageFilename": "7fa76276bc041083488f91455271ce1d775bf3bcb74a7da4ef9d54a79d141ea4.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12140",
      "url": "https://webkit.org/blog/12140/new-webkit-features-in-safari-15-2/",
      "title": "New WebKit Features in Safari 15.2",
      "summary": "The internet has always been about communication and collaboration.",
      "content_html": "<p>The internet has always been about communication and collaboration. It started with asynchronous messages made of text. As it matured, the internet became real-time. Then the web came along, adding images, and later, video. Websites provided a means to publish, to broadcast, to run stores, to gather communities and create worlds.</p>\n<p>Now, the web is maturing to the point where web apps make rich collaboration experiences possible — including digital creation. Recent updates to WebKit bring a number of improvements to Safari 15.2 that focus on supporting creative applications and leveraging the incredible power of today’s hardware.</p>\n<h3>WebAssembly Enhancements</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly\">Web Assembly (Wasm)</a> is a low-level assembly language that allows a multitude of programming languages like C/C++, C#, Objective-C, Swift, Python, Java or even Cobol to be compiled to run on the web at near native speed — without the user needing to install anything special. It’s designed to work alongside of JavaScript, allowing sites to use both together. Wasm provides the tools needed to bring powerful software applications to the web.</p>\n<p>In Safari 15.2, the addressable memory for Wasm has been expanded to 4GB, opening up possibilities for bigger and more powerful applications. The addition of zero-cost <a href=\"https://github.com/WebAssembly/exception-handling/blob/master/proposals/exception-handling/Exceptions.md\">exception handling</a> also provides potential performance gains.</p>\n<h3>COOP/COEP  HTTP Headers</h3>\n<p>Shared memory provides powerful functionality for native applications, but on the web, such power must be balanced with strong security protections.  <code>SharedArrayBuffer</code> was supported in WebKit for Safari 10.1–11, but was disabled along with other browsers due to the risk of using it for speculative execution attacks like Spectre.</p>\n<p>Safari 15.2 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\"><code>Cross-Origin-Opener-Policy</code> (COOP)</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\"><code>Cross-Origin-Embedder-Policy</code> (COEP)</a> HTTP response headers. Sites can adopt these headers to opt into process isolation and be better protected. If sites serve both <code>Cross-Origin-Opener-Policy: same-origin</code> and <code>Cross-Origin-Embedder-Policy: require-corp</code>, they are now able to use SharedArrayBuffer and Wasm threading again.</p>\n<h3>Wide gamut support for Canvas</h3>\n<p>These days modern creative tools depend on amazing camera and gorgeous displays. Yet, most colors on the Web today are sRGB colors, which match the limited color capabilities of computer monitors from the late 1990s. The human visual system can perceive a much broader range of colors. Today’s modern displays reproduce the colors of the Display P3 gamut, with significantly higher saturation than sRGB.</p>\n<p>Since 2016, WebKit has supported wide color images and video, and last year became <a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\">the first browser engine to implement the new color syntax</a> defined in <a href=\"https://drafts.csswg.org/css-color-4/\">CSS Color Module Level 4</a>. One notable omission in wide gamut color support was in the HTML <code>canvas</code> element. Earlier this year, a proposal for support was added to the HTML standard, and now, in Safari 15.2, WebKit adds wide gamut support — including Display P3 — for use in <code>canvas</code>.</p>\n<p>Read more about the details, with demos of stunning results, in <a href=\"https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/\">Wide Gamut 2D Graphics using HTML Canvas</a>.</p>\n<h3>More information</h3>\n<p>For more on what’s in Safari 15.2, including bug fixes, see the <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-15_2-release-notes\">Safari 15.2 Release Notes</a>.</p>\n<h3>Availability</h3>\n<p>Safari 15.2 is available on macOS Monterey, macOS Big Sur and macOS Catalina. To update on macOS, go to Apple menu  > System Preferences, and click Software Update.</p>\n<p>Safari 15.2 is available on iOS and iPadOS 15.2. To update, go to Settings > General, then tap Software Update.</p>\n<h3>Feedback</h3>\n<p>If you run into issues, we welcome your <a href=\"https://bugreport.apple.com/\">bug reports</a> for Safari, or <a href=\"https://bugs.webkit.org/\">WebKit bugs</a> for web content issues. Send us a tweet <a href=\"https://twitter.com/webkit\">@webkit</a> to share your thoughts on this release.</p>",
      "content_text": "The internet has always been about communication and collaboration. It started with asynchronous messages made of text. As it matured, the internet became real-time. Then the web came along, adding images, and later, video. Websites provided a means to publish, to broadcast, to run stores, to gather communities and create worlds.\nNow, the web is maturing to the point where web apps make rich collaboration experiences possible — including digital creation. Recent updates to WebKit bring a number of improvements to Safari 15.2 that focus on supporting creative applications and leveraging the incredible power of today’s hardware.\nWebAssembly Enhancements\nWeb Assembly (Wasm) is a low-level assembly language that allows a multitude of programming languages like C/C++, C#, Objective-C, Swift, Python, Java or even Cobol to be compiled to run on the web at near native speed — without the user needing to install anything special. It’s designed to work alongside of JavaScript, allowing sites to use both together. Wasm provides the tools needed to bring powerful software applications to the web.\nIn Safari 15.2, the addressable memory for Wasm has been expanded to 4GB, opening up possibilities for bigger and more powerful applications. The addition of zero-cost exception handling also provides potential performance gains.\nCOOP/COEP  HTTP Headers\nShared memory provides powerful functionality for native applications, but on the web, such power must be balanced with strong security protections.  SharedArrayBuffer was supported in WebKit for Safari 10.1–11, but was disabled along with other browsers due to the risk of using it for speculative execution attacks like Spectre.\nSafari 15.2 adds support for Cross-Origin-Opener-Policy (COOP) and Cross-Origin-Embedder-Policy (COEP) HTTP response headers. Sites can adopt these headers to opt into process isolation and be better protected. If sites serve both Cross-Origin-Opener-Policy: same-origin and Cross-Origin-Embedder-Policy: require-corp, they are now able to use SharedArrayBuffer and Wasm threading again.\nWide gamut support for Canvas\nThese days modern creative tools depend on amazing camera and gorgeous displays. Yet, most colors on the Web today are sRGB colors, which match the limited color capabilities of computer monitors from the late 1990s. The human visual system can perceive a much broader range of colors. Today’s modern displays reproduce the colors of the Display P3 gamut, with significantly higher saturation than sRGB.\nSince 2016, WebKit has supported wide color images and video, and last year became the first browser engine to implement the new color syntax defined in CSS Color Module Level 4. One notable omission in wide gamut color support was in the HTML canvas element. Earlier this year, a proposal for support was added to the HTML standard, and now, in Safari 15.2, WebKit adds wide gamut support — including Display P3 — for use in canvas.\nRead more about the details, with demos of stunning results, in Wide Gamut 2D Graphics using HTML Canvas.\nMore information\nFor more on what’s in Safari 15.2, including bug fixes, see the Safari 15.2 Release Notes.\nAvailability\nSafari 15.2 is available on macOS Monterey, macOS Big Sur and macOS Catalina. To update on macOS, go to Apple menu  > System Preferences, and click Software Update.\nSafari 15.2 is available on iOS and iPadOS 15.2. To update, go to Settings > General, then tap Software Update.\nFeedback\nIf you run into issues, we welcome your bug reports for Safari, or WebKit bugs for web content issues. Send us a tweet @webkit to share your thoughts on this release.",
      "date_published": "2021-12-13T19:13:38.000Z",
      "date_modified": "2021-12-15T16:46:51.000Z",
      "_plugin": {
        "pageFilename": "b20eb6d899e0a824056daa2b352f7959ca9c7e5eba396c8c105de3594a46e763.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12137",
      "url": "https://webkit.org/blog/12137/release-notes-for-safari-technology-preview-136/",
      "title": "Release Notes for Safari Technology Preview 136",
      "summary": "Safari Technology Preview Release 136 is now available for download for macOS Big Sur and betas of macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 136 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=285101&amp;rev=285788&amp;limit=687\">285101-285788</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>CSS</h3>\n<ul>\n<li>Added support for <code>contain: paint</code> (<a href=\"https://trac.webkit.org/changeset/285583/webkit/\">r285583</a>)</li>\n<li>Added support for the <code>revert-layer</code> value (<a href=\"https://trac.webkit.org/changeset/285624/webkit/\">r285624</a>)</li>\n<li>Added <code>flex-basis: content</code> support (<a href=\"https://trac.webkit.org/changeset/285709/webkit/\">r285709</a>)</li>\n<li>Fixed <code>::slotted</code> element style to invalidate correctly in nested case (<a href=\"https://trac.webkit.org/changeset/285211/webkit/\">r285211</a>)</li>\n<li>Fixed <code>::slotted</code> to not match an active <code>&lt;slot&gt;</code> (<a href=\"https://trac.webkit.org/changeset/285209/webkit/\">r285209</a>)</li>\n<li>Fixed <code>:host::part(foo)</code> selector to select elements inside shadow roots (<a href=\"https://trac.webkit.org/changeset/285262/webkit/\">r285262</a>)</li>\n<li>Fixed a mask or isolation to set <code>transform-style</code> to <code>flat</code> (<a href=\"https://trac.webkit.org/changeset/285482/webkit/\">r285482</a>)</li>\n<li>Fixed <code>border-radius</code> inline style to serialize with valid syntax (<a href=\"https://trac.webkit.org/changeset/285235/webkit/\">r285235</a>)</li>\n<li>Fixed <code>font-synthesis</code> inline and computed style to be in canonical order (<a href=\"https://trac.webkit.org/changeset/285383/webkit/\">r285383</a>, <a href=\"https://trac.webkit.org/changeset/285384/webkit/\">r285384</a>)</li>\n<li>Fixed rendering bug with <code>height: min-content</code>, <code>position: absolute</code>, and <code>box-sizing: border-box</code> (<a href=\"https://trac.webkit.org/changeset/285495/webkit/\">r285495</a>)</li>\n<li>Fixed the default computed value for <code>content</code> to be <code>none</code> for <code>::before</code> and <code>::after</code> (<a href=\"https://trac.webkit.org/changeset/285621/webkit/\">r285621</a>)</li>\n<li>Implemented parsing and animation support for <code>offset-path</code> (<a href=\"https://trac.webkit.org/changeset/285343/webkit/\">r285343</a>)</li>\n<li>Implemented Scroll To Text Fragment directive parsing (<a href=\"https://trac.webkit.org/changeset/285528/webkit/\">r285528</a>)</li>\n<li>Implemented <code>transform: perspective(none)</code> (<a href=\"https://trac.webkit.org/changeset/285255/webkit/\">r285255</a>)</li>\n<li>Removed non-standard <code>-webkit-border-fit</code> CSS property (<a href=\"https://trac.webkit.org/changeset/285615/webkit/\">r285615</a>)</li>\n<li>Updated the <code>content-size</code> grid width before laying out a grid item with block constraints and <code>aspect-ratio</code> (<a href=\"https://trac.webkit.org/changeset/285497/webkit/\">r285497</a>)</li>\n</ul>\n<h3>GPU Process</h3>\n<ul>\n<li>Fixed enabling &#8220;media source inline painting&#8221; by default to work when using GPU Process for media (<a href=\"https://trac.webkit.org/changeset/285410/webkit/\">r285410</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Implemented IntlNumberFormat v3 (<code>formatRangeToParts</code> is not implemented yet) (<a href=\"https://trac.webkit.org/changeset/285418/webkit/\">r285418</a>)</li>\n<li>Implemented <code>Temporal.Instant</code> (<a href=\"https://trac.webkit.org/changeset/285178/webkit/\">r285178</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Implemented custom element definition&#8217;s <em>disable shadow</em> flag (<a href=\"https://trac.webkit.org/changeset/285740/webkit/\">r285740</a>)</li>\n<li>Fixed the <code>cssText</code> property for a computed style to return an empty string (<a href=\"https://trac.webkit.org/changeset/285604/webkit/\">r285604</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed showing languages and subtitles tracks button and menu for <code>&lt;audio&gt;</code> (<a href=\"https://trac.webkit.org/changeset/285216/webkit/\">r285216</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Added support for composite operations for software animations (<a href=\"https://trac.webkit.org/changeset/285397/webkit/\">r285397</a>)</li>\n<li>Fixed accelerated animations with a single keyframe not accounting for prior forward-filling animations (<a href=\"https://trac.webkit.org/changeset/285728/webkit/\">r285728</a>)</li>\n<li>Fixed discrete animation of <code>content</code> property not working (<a href=\"https://trac.webkit.org/changeset/285423/webkit/\">r285423</a>)</li>\n<li>Improved additivity support when animating the transform property (<a href=\"https://trac.webkit.org/changeset/285631/webkit/\">r285631</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Implemented <code>add_virtual_authenticator</code> and <code>remove_virtual_authenticator</code> for WebDriver (<a href=\"https://trac.webkit.org/changeset/285267/webkit/\">r285267</a>)</li>\n</ul>\n<h3>Private Click Measurement</h3>\n<ul>\n<li>Fixed occasionally dropped attribution reports for Private Click Measurement (<a href=\"https://trac.webkit.org/changeset/285170/webkit/\">r285170</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Added support for <code>manifest_version</code> 3 and <code>service_worker</code> background scripts, while also supporting the option of using non-persistent background pages</li>\n<li>Added support for script and style injection via the <code>browser.scripting</code> APIs</li>\n<li>Added support for dynamic and session rules via the <code>browser.declarativeNetRequest</code> APIs</li>\n<li>Fixed an issue with new tab pages not being remembered when switching from Favorites</li>\n<li>Fixed an issue with long extension descriptions causing the title to be cut-off in Preferences</li>\n<li>Enforces limits on the size and number of items in extension sync storage</li>\n</ul>\n<h3>Other Bugs</h3>\n<ul>\n<li>Fixed opening local HTML files when the Develop menu was enabled (<a href=\"https://trac.webkit.org/changeset/285130/webkit/\">r285130</a>)</li>\n<li>Stopped using a timer to dispatch the source element&#8217;s error event asynchronously (<a href=\"https://trac.webkit.org/changeset/285413/webkit/\">r285413</a>)</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 136 is now available for download for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 285101-285788.\nNote: Tab Groups do not sync in this release.\nCSS\n\nAdded support for contain: paint (r285583)\nAdded support for the revert-layer value (r285624)\nAdded flex-basis: content support (r285709)\nFixed ::slotted element style to invalidate correctly in nested case (r285211)\nFixed ::slotted to not match an active <slot> (r285209)\nFixed :host::part(foo) selector to select elements inside shadow roots (r285262)\nFixed a mask or isolation to set transform-style to flat (r285482)\nFixed border-radius inline style to serialize with valid syntax (r285235)\nFixed font-synthesis inline and computed style to be in canonical order (r285383, r285384)\nFixed rendering bug with height: min-content, position: absolute, and box-sizing: border-box (r285495)\nFixed the default computed value for content to be none for ::before and ::after (r285621)\nImplemented parsing and animation support for offset-path (r285343)\nImplemented Scroll To Text Fragment directive parsing (r285528)\nImplemented transform: perspective(none) (r285255)\nRemoved non-standard -webkit-border-fit CSS property (r285615)\nUpdated the content-size grid width before laying out a grid item with block constraints and aspect-ratio (r285497)\n\nGPU Process\n\nFixed enabling “media source inline painting” by default to work when using GPU Process for media (r285410)\n\nJavaScript\n\nImplemented IntlNumberFormat v3 (formatRangeToParts is not implemented yet) (r285418)\nImplemented Temporal.Instant (r285178)\n\nWeb API\n\nImplemented custom element definition’s disable shadow flag (r285740)\nFixed the cssText property for a computed style to return an empty string (r285604)\n\nMedia\n\nFixed showing languages and subtitles tracks button and menu for <audio> (r285216)\n\nWeb Animations\n\nAdded support for composite operations for software animations (r285397)\nFixed accelerated animations with a single keyframe not accounting for prior forward-filling animations (r285728)\nFixed discrete animation of content property not working (r285423)\nImproved additivity support when animating the transform property (r285631)\n\nWebAuthn\n\nImplemented add_virtual_authenticator and remove_virtual_authenticator for WebDriver (r285267)\n\nPrivate Click Measurement\n\nFixed occasionally dropped attribution reports for Private Click Measurement (r285170)\n\nWeb Extensions\n\nAdded support for manifest_version 3 and service_worker background scripts, while also supporting the option of using non-persistent background pages\nAdded support for script and style injection via the browser.scripting APIs\nAdded support for dynamic and session rules via the browser.declarativeNetRequest APIs\nFixed an issue with new tab pages not being remembered when switching from Favorites\nFixed an issue with long extension descriptions causing the title to be cut-off in Preferences\nEnforces limits on the size and number of items in extension sync storage\n\nOther Bugs\n\nFixed opening local HTML files when the Develop menu was enabled (r285130)\nStopped using a timer to dispatch the source element’s error event asynchronously (r285413)\n",
      "date_published": "2021-12-08T23:03:15.000Z",
      "date_modified": "2021-12-08T23:03:15.000Z",
      "_plugin": {
        "pageFilename": "aaba38788e639696367ac6a69dc5ff9ee018fbd0c1c0cfb0a2b7803744bc56e7.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12042",
      "url": "https://webkit.org/blog/12042/pcm-for-in-app-direct-response-advertising/",
      "title": "PCM for In-App Direct Response Advertising",
      "summary": "Private Click Measurement (PCM) can now be used for in-app direct response advertising using SFSafariViewController.",
      "content_html": "<p>Private Click Measurement (PCM) can now be used for in-app direct response advertising using SFSafariViewController. Try it out in our iOS 15.2 beta.</p>\n<h2>What is PCM?</h2>\n<p>PCM is a proposed web standard for measuring the effectiveness of click-through advertising in a privacy-preserving way. It allows for 8 bits of data on the click source site to be combined with 4 bits of data on the click destination site to measure which advertising is driving sales. The combined 8+4 bits of data is sent to both the click source and destination in an attribution report that doesn’t carry any user or device identifiers. The net result is a report that says “Someone who clicked ad X on website A later converted with value Y on website B.”</p>\n<p>PCM shipped in iOS/iPadOS 14.5 and in Safari 14.1 on macOS. Its privacy-preserving nature means it can be used without getting the user’s permission to track according to <a href=\"https://developer.apple.com/app-store/user-privacy-and-data-use/\">AppTrackingTransparency</a>.</p>\n<h2>What is SFSafariViewController?</h2>\n<p><a href=\"https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller\">SFSafariViewController</a> is a ready-built in-app web browser on iOS/iPadOS with full-fledged Safari features such as Reader, AutoFill, Fraudulent Website Detection, content blocking, and bookmarks. User activity and interaction with SFSafariViewController are not visible to your app which means users can safely browse the web in it and you do not need to secure data between your app and SFSafariViewController.</p>\n<h2>On Direct Response Advertising</h2>\n<p>Our <a href=\"https://webkit.org/blog/11529/introducing-private-click-measurement-pcm/\">introductory blog post on PCM</a> featured two important FAQ entries on app-to-web advertising – on the subject of taking the user to the device’s browser and on the subject of an in-app experience.</p>\n<h3>When to Take the User To the Device’s Browser</h3>\n<p>PCM app-to-web in iOS 14.5 had to take the user to the device’s browser. This was designed to support re-engagement. Stored clicks in PCM are valid for 7 days and customers who are ready to take action only after a few hours or days, will most likely go find the merchant website in their browser. They’ll either look up the tab where they left off, use a bookmark they might have saved, use their search provider to find the right webpage, or enter the website’s address directly in the URL bar.</p>\n<p>For the stored click data to be readily available when the user re-engages in this fashion, the initial click needs to take the user to their browser. This is still true going forward.</p>\n<h3>When to Handle the Tap In-App</h3>\n<p>Another form of click-through advertising is called direct response. In such cases, the user is not expected to think about converting for an extended period of time, but rather take action directly on the webpage they land on. It could be a limited offer or a product priced so that the user doesn’t feel like they have to think it over.</p>\n<p>Developers and advertisers have told us they want to be able to provide more of an in-app experience for direct response advertising, rather than take the user to the device’s browser. They want a seamless in-app experience for users who tap on an ad, check out the product page, decide to buy or not, and then want to go back to the hosting app.</p>\n<p>Our intro blog post covered this request in the FAQ section, and we said “We are interested in this but don’t have a solution yet.” Today we have a solution. PCM is now capable of supporting in-app advertising with new API for SFSafariViewController.</p>\n<h2>PCM App-to-Web with SFSafariViewController</h2>\n<p><a href=\"https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller\">SFSafariViewController</a> provides a great in-app browsing experience where the user can store Safari bookmarks that can sync across devices, has access to autofill of credentials and payment card info, and Apple Pay. It is simply a great place to take the user as part of direct response advertising.</p>\n<h3>Ephemeral Clicks to Prevent Click Fraud</h3>\n<p>PCM will only store click data and schedule an attribution report if the user triggers a conversion in the SFSafariViewController that they opened through the click. A tap which navigates to a website in SFSafariViewController <em>without a matching triggering event</em> will not be stored. As a result, an instance of SFSafariViewController can only hold one non-converted click at a time, whereas all converted clicks will be stored and result in reports.</p>\n<p>This ensures that a hosting app cannot speculatively store clicks in its SFSafariViewController for fraudulent reasons. It also ensures that this use of PCM really is geared toward direct response advertising.</p>\n<h3>Attributions are Per Hosting App</h3>\n<p>Taps in different apps navigating the user to the same advertised website do not affect each other. Every app gets its own attribution. Again, this feature is for direct response advertising so a customer who buys a product twice based on ad clicks in two different apps will generate two attribution reports.</p>\n<h3>Attribution Reports Don’t Require Your App to Run</h3>\n<p>One particular challenge for the kind of delayed attribution reporting PCM uses is what to do if the user doesn’t use the hosting app frequently or doesn’t use it around the time when the report is supposed to be sent out. We have made sure that pending attribution reports from PCM app-to-web with SFSafariViewController are sent independent of if the hosting app where the click happened is running or not.</p>\n<h3>The API</h3>\n<p>As shown in our <a href=\"https://webkit.org/blog/11529/introducing-private-click-measurement-pcm/\">introductory blog post on PCM</a>, apps can already use Private Click Measurement with Safari by putting a <code>UIEventAttribution</code> on a <code>UISceneOpenExternalURLOptions</code> and using it with UIScene&#8217;s <code>openURL:options:completionHandler:</code>.</p>\n<p>In iOS 15.2 beta, a new attribute of type <code>UIEventAttribution</code> is added to the existing class <code>SFSafariViewControllerConfiguration</code>:</p>\n<pre><code>@available(iOS 15.2, *)\n  @NSCopying var eventAttribution: UIEventAttribution?\n</code></pre>\n<p>You can optionally use it when opening a URL in SFSafariViewController, like this:</p>\n<pre><code>func didTapOnAdWithIdentifier(advertisementIdentifier: UInt8, url: URL) {\n    let attribution = UIEventAttribution(\n        sourceIdentifier: advertisementIdentifier, \n        destinationURL: url, \n        sourceDescription: \"Ad for toy XYZ.\",\n        purchaser: \"Toy Example Company\")\n    let configuration = SFSafariViewController.Configuration()\n    configuration.eventAttribution = attribution\n    present(SFSafariViewController(url: url, configuration: configuration), animated: false)\n}\n</code></pre>\n<p>When an <code>UIEventAttribution</code> is part of the configuration, SafariViewService checks that a tap on an <code>UIEventAttributionView</code> preceded the opening of SFSafariViewController to guarantee <em>click-through</em> attribution. Then the information from the <code>UIEventAttribution</code> object is checked before it’s given to WebKit for processing.</p>\n<p>Private Click Measurement works as previously from that point.</p>\n<h2>Debugging Your App</h2>\n<p>See “Testing and Debugging” in our <a href=\"https://webkit.org/blog/11529/introducing-private-click-measurement-pcm/\">introductory blog post on PCM</a> for how to turn on PCM Debug Mode.</p>\n<p>Make sure to restart your app after enabling PCM Debug Mode with SFSafariViewController.  If you are having trouble getting PCM Debug Mode to turn on or off, try restarting the device.</p>\n<h2>Please Provide Feedback</h2>\n<p>We really appreciate all the developer and ad tech feedback we’ve received so far on Private Click Measurement. Prioritizing PCM for in-app measurement was the result of such feedback. There are three ways for you to continue to tell us what you think:</p>\n<ul>\n<li>The <a href=\"https://github.com/privacycg/private-click-measurement/issues\">standards proposal repository</a> in the W3C Privacy Community Group for anything related to the specified web parts of PCM, i.e. feedback on the proposed standard as it would work in any web engine.</li>\n<li><a href=\"https://bugs.webkit.org/\">https://bugs.webkit.org</a> for anything specific to the WebKit implementation of PCM.</li>\n<li><a href=\"https://feedbackassistant.apple.com/\">Apple Feedback Assistant</a> for anything specific to the UIKit or SFSafariViewController APIs for PCM.</li>\n</ul>",
      "content_text": "Private Click Measurement (PCM) can now be used for in-app direct response advertising using SFSafariViewController. Try it out in our iOS 15.2 beta.\nWhat is PCM?\nPCM is a proposed web standard for measuring the effectiveness of click-through advertising in a privacy-preserving way. It allows for 8 bits of data on the click source site to be combined with 4 bits of data on the click destination site to measure which advertising is driving sales. The combined 8+4 bits of data is sent to both the click source and destination in an attribution report that doesn’t carry any user or device identifiers. The net result is a report that says “Someone who clicked ad X on website A later converted with value Y on website B.”\nPCM shipped in iOS/iPadOS 14.5 and in Safari 14.1 on macOS. Its privacy-preserving nature means it can be used without getting the user’s permission to track according to AppTrackingTransparency.\nWhat is SFSafariViewController?\nSFSafariViewController is a ready-built in-app web browser on iOS/iPadOS with full-fledged Safari features such as Reader, AutoFill, Fraudulent Website Detection, content blocking, and bookmarks. User activity and interaction with SFSafariViewController are not visible to your app which means users can safely browse the web in it and you do not need to secure data between your app and SFSafariViewController.\nOn Direct Response Advertising\nOur introductory blog post on PCM featured two important FAQ entries on app-to-web advertising – on the subject of taking the user to the device’s browser and on the subject of an in-app experience.\nWhen to Take the User To the Device’s Browser\nPCM app-to-web in iOS 14.5 had to take the user to the device’s browser. This was designed to support re-engagement. Stored clicks in PCM are valid for 7 days and customers who are ready to take action only after a few hours or days, will most likely go find the merchant website in their browser. They’ll either look up the tab where they left off, use a bookmark they might have saved, use their search provider to find the right webpage, or enter the website’s address directly in the URL bar.\nFor the stored click data to be readily available when the user re-engages in this fashion, the initial click needs to take the user to their browser. This is still true going forward.\nWhen to Handle the Tap In-App\nAnother form of click-through advertising is called direct response. In such cases, the user is not expected to think about converting for an extended period of time, but rather take action directly on the webpage they land on. It could be a limited offer or a product priced so that the user doesn’t feel like they have to think it over.\nDevelopers and advertisers have told us they want to be able to provide more of an in-app experience for direct response advertising, rather than take the user to the device’s browser. They want a seamless in-app experience for users who tap on an ad, check out the product page, decide to buy or not, and then want to go back to the hosting app.\nOur intro blog post covered this request in the FAQ section, and we said “We are interested in this but don’t have a solution yet.” Today we have a solution. PCM is now capable of supporting in-app advertising with new API for SFSafariViewController.\nPCM App-to-Web with SFSafariViewController\nSFSafariViewController provides a great in-app browsing experience where the user can store Safari bookmarks that can sync across devices, has access to autofill of credentials and payment card info, and Apple Pay. It is simply a great place to take the user as part of direct response advertising.\nEphemeral Clicks to Prevent Click Fraud\nPCM will only store click data and schedule an attribution report if the user triggers a conversion in the SFSafariViewController that they opened through the click. A tap which navigates to a website in SFSafariViewController without a matching triggering event will not be stored. As a result, an instance of SFSafariViewController can only hold one non-converted click at a time, whereas all converted clicks will be stored and result in reports.\nThis ensures that a hosting app cannot speculatively store clicks in its SFSafariViewController for fraudulent reasons. It also ensures that this use of PCM really is geared toward direct response advertising.\nAttributions are Per Hosting App\nTaps in different apps navigating the user to the same advertised website do not affect each other. Every app gets its own attribution. Again, this feature is for direct response advertising so a customer who buys a product twice based on ad clicks in two different apps will generate two attribution reports.\nAttribution Reports Don’t Require Your App to Run\nOne particular challenge for the kind of delayed attribution reporting PCM uses is what to do if the user doesn’t use the hosting app frequently or doesn’t use it around the time when the report is supposed to be sent out. We have made sure that pending attribution reports from PCM app-to-web with SFSafariViewController are sent independent of if the hosting app where the click happened is running or not.\nThe API\nAs shown in our introductory blog post on PCM, apps can already use Private Click Measurement with Safari by putting a UIEventAttribution on a UISceneOpenExternalURLOptions and using it with UIScene’s openURL:options:completionHandler:.\nIn iOS 15.2 beta, a new attribute of type UIEventAttribution is added to the existing class SFSafariViewControllerConfiguration:\n@available(iOS 15.2, *)\n  @NSCopying var eventAttribution: UIEventAttribution?\n\nYou can optionally use it when opening a URL in SFSafariViewController, like this:\nfunc didTapOnAdWithIdentifier(advertisementIdentifier: UInt8, url: URL) {\n    let attribution = UIEventAttribution(\n        sourceIdentifier: advertisementIdentifier, \n        destinationURL: url, \n        sourceDescription: \"Ad for toy XYZ.\",\n        purchaser: \"Toy Example Company\")\n    let configuration = SFSafariViewController.Configuration()\n    configuration.eventAttribution = attribution\n    present(SFSafariViewController(url: url, configuration: configuration), animated: false)\n}\n\nWhen an UIEventAttribution is part of the configuration, SafariViewService checks that a tap on an UIEventAttributionView preceded the opening of SFSafariViewController to guarantee click-through attribution. Then the information from the UIEventAttribution object is checked before it’s given to WebKit for processing.\nPrivate Click Measurement works as previously from that point.\nDebugging Your App\nSee “Testing and Debugging” in our introductory blog post on PCM for how to turn on PCM Debug Mode.\nMake sure to restart your app after enabling PCM Debug Mode with SFSafariViewController.  If you are having trouble getting PCM Debug Mode to turn on or off, try restarting the device.\nPlease Provide Feedback\nWe really appreciate all the developer and ad tech feedback we’ve received so far on Private Click Measurement. Prioritizing PCM for in-app measurement was the result of such feedback. There are three ways for you to continue to tell us what you think:\n\nThe standards proposal repository in the W3C Privacy Community Group for anything related to the specified web parts of PCM, i.e. feedback on the proposed standard as it would work in any web engine.\nhttps://bugs.webkit.org for anything specific to the WebKit implementation of PCM.\nApple Feedback Assistant for anything specific to the UIKit or SFSafariViewController APIs for PCM.\n",
      "date_published": "2021-11-16T17:06:04.000Z",
      "date_modified": "2021-11-16T17:06:04.000Z",
      "_plugin": {
        "pageFilename": "272036b331e33fa6661e44f754504aad0443f229fd5f335b814598df67f1ad5d.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12040",
      "url": "https://webkit.org/blog/12040/release-notes-for-safari-technology-preview-135/",
      "title": "Release Notes for Safari Technology Preview 135",
      "summary": "Safari Technology Preview Release 135 is now available for download for macOS Big Sur and betas of macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 135 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=284370&amp;rev=285101&amp;limit=731\">284370-285101</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector and Web Driver</h3>\n<ul>\n<li>Fixed &#8220;testForLinkLabels&#8221; Accessibility audit to ignore anchors if <code>aria-hidden</code> (<a href=\"https://trac.webkit.org/changeset/284986/webkit/\">r284986</a>)</li>\n<li>Added support for the <code>acceptInsecureCerts</code> capability (<a href=\"https://trac.webkit.org/changeset/285164/webkit\">r285164</a>)</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Media queries affect Cascade Layer order (<a href=\"https://trac.webkit.org/changeset/284859/webkit/\">r284859</a>)</li>\n<li>Enabled <code>accent-color</code> by default (<a href=\"https://trac.webkit.org/changeset/284634/webkit/\">r284634</a>)</li>\n<li>Added support for small <code>svw</code>/<code>svh</code>/<code>svmin</code>/<code>svmax</code>, large <code>lvw</code>/<code>lvh</code>/<code>lvmin</code>/<code>lvmax</code>, and dynamic <code>dvw</code>/<code>dvh</code>/<code>dvmin</code>/<code>dvmax</code> viewport units (<a href=\"https://trac.webkit.org/changeset/284628/webkit/\">r284628</a>)</li>\n<li>Added <code>flex-basis: content</code> support (<a href=\"https://trac.webkit.org/changeset/284440/webkit/\">r284440</a>)</li>\n<li>Added support for <code>contain: style</code> for counters (<a href=\"https://trac.webkit.org/changeset/284642/webkit/\">r284642</a>, <a href=\"https://trac.webkit.org/changeset/284755/webkit/\">r284755</a>)</li>\n<li>Added support for <code>::before</code> and <code>::after</code> pseudo elements after <code>::slotted</code> (<a href=\"https://trac.webkit.org/changeset/284973/webkit/\">r284973</a>)</li>\n<li>Added support for more CSS properties for <code>::marker</code> (<a href=\"https://trac.webkit.org/changeset/284519/webkit/\">r284519</a>)</li>\n<li>Allowed <code>:is</code> and <code>:where</code> after all pseudo elements (<a href=\"https://trac.webkit.org/changeset/285054/webkit/\">r285054</a>)</li>\n<li>Made <code>:-webkit-any()</code> a synonym of <code>:is()</code> (<a href=\"https://trac.webkit.org/changeset/285032/webkit/\">r285032</a>)</li>\n<li>Fixed <code>::part(foo):hover</code> (<a href=\"https://trac.webkit.org/changeset/284865/webkit/\">r284865</a>)</li>\n<li>Serialized <code>:part()</code> argument as identifier (<a href=\"https://trac.webkit.org/changeset/284863/webkit/\">r284863</a>)</li>\n<li>Fixed <code>:host</code> invalidation when combined with pseudo classes in descendant position (<a href=\"https://trac.webkit.org/changeset/285100/webkit/\">r285100</a>)</li>\n<li>Prevented clamping flex base size with <code>min-height</code>, <code>max-height</code>, <code>min-width</code>, and <code>max-width</code> (<a href=\"https://trac.webkit.org/changeset/284397/webkit/\">r284397</a>)</li>\n<li>Fixed sizing of orthogonal elements with percentage margins (<a href=\"https://trac.webkit.org/changeset/284773/webkit/\">r284773</a>)</li>\n<li>Fixed <code>-webkit-background-clip: text</code> to paint correctly for inline box spanning multiple lines (<a href=\"https://trac.webkit.org/changeset/284380/webkit/\">r284380</a>)</li>\n<li>Fixed <code>box-shadow</code> and <code>text-shadow</code> to yield float values while interpolating (<a href=\"https://trac.webkit.org/changeset/284437/webkit/\">r284437</a>)</li>\n<li>Fixed CSS serialization affecting <code>grid-auto-flow</code> (<a href=\"https://trac.webkit.org/changeset/284876/webkit/\">r284876</a>)</li>\n<li>Fixed percentages on orthogonal replaced children (<a href=\"https://trac.webkit.org/changeset/284548/webkit/\">r284548</a>)</li>\n<li>Fixed the <code>border-radius</code> value from <code>.style</code> to be readable when it includes a <code>var()</code> (<a href=\"https://trac.webkit.org/changeset/285015/webkit/\">r285015</a>)</li>\n<li>Fixed opacity to flatten when combined with <code>transform-style: preserve-3d</code> (<a href=\"https://trac.webkit.org/changeset/285021/webkit/\">r285021</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Enabled lazy image loading by default (<a href=\"https://trac.webkit.org/changeset/284995/webkit/\">r284995</a>)</li>\n<li>Added support for <code>rel=\"noopener/noreferrer\"</code> on <code>&lt;form&gt;</code> elements (<a href=\"https://trac.webkit.org/changeset/284749/webkit/\">r284749</a>)</li>\n<li>Exposed MediaCapabilities to Workers (<a href=\"https://trac.webkit.org/changeset/284443/webkit/\">r284443</a>)</li>\n<li>Fixed <code>anchor.relList.supports(\"opener\")</code> to return <code>true</code> (<a href=\"https://trac.webkit.org/changeset/284745/webkit/\">r284745</a>)</li>\n<li>Fixed changing the <code>src</code> attribute of the <code>&lt;img&gt;</code> element inside an ImageDocument to trigger a load (<a href=\"https://trac.webkit.org/changeset/284901/webkit/\">r284901</a>)</li>\n<li>Fixed <code>document.open()</code> and friends to use the correct document as a source for reset document&#8217;s URL (<a href=\"https://trac.webkit.org/changeset/284758/webkit/\">r284758</a>)</li>\n<li>Fixed form navigations with <code>target=\"_blank\"</code> to not have an opener (<a href=\"https://trac.webkit.org/changeset/284821/webkit/\">r284821</a>)</li>\n<li>Fixed form submission to be cancelled if the form gets detached from inside the formdata event handler (<a href=\"https://trac.webkit.org/changeset/284660/webkit/\">r284660</a>)</li>\n<li>Fixed JavaScript URL result to be treated as UTF-8 bytes (<a href=\"https://trac.webkit.org/changeset/284934/webkit/\">r284934</a>)</li>\n<li>Fixed Origin of opaque <code>blob:</code> URLs to be null instead of an empty string (<a href=\"https://trac.webkit.org/changeset/284478/webkit/\">r284478</a>)</li>\n<li>Fixed selection <code>extend()</code> with no ranges to trigger an exception (<a href=\"https://trac.webkit.org/changeset/285084/webkit/\">r285084</a>)</li>\n<li>Fixed the intrinsic size of a picture image inside a template (<a href=\"https://trac.webkit.org/changeset/284667/webkit/\">r284667</a>)</li>\n<li>Updated appearance of <code>&lt;datalist&gt;</code> indicator (<a href=\"https://trac.webkit.org/changeset/284626/webkit/\">r284626</a>)</li>\n</ul>\n<h3>Scrolling</h3>\n<ul>\n<li>Fixed misplaced <code>position: fixed</code> content with async-scrollable iframes when switching tabs (<a href=\"https://trac.webkit.org/changeset/284738/webkit/\">r284738</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Ensured <code>CanvasRenderingContext2D.drawImage(video)</code> uses the right color space (<a href=\"https://trac.webkit.org/changeset/284439/webkit/\">r284439</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Changed to obtain consent to create a new credential when the platform authenticator is in <code>excludedCredentials.</code> This improves compliance with the WebAuthn spec (Step 3.1 of makeCredential). (<a href=\"https://trac.webkit.org/changeset/284413/webkit/\">r284413</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Added support for requestVideoFrameCallback API for MediaStreamTrack-based backends (<a href=\"https://trac.webkit.org/changeset/284528/webkit/\">r284528</a>)</li>\n<li>Fixed video appearing blank with only audio playing if video element isn&#8217;t appended to the DOM tree (<a href=\"https://trac.webkit.org/changeset/284741/webkit/\">r284741</a>)</li>\n<li>Updated WebM with invalid size to fail to load with error (<a href=\"https://trac.webkit.org/changeset/284434/webkit/\">r284434</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Decreased WebRTC latency by pulling data more often (<a href=\"https://trac.webkit.org/changeset/284860/webkit/\">r284860</a>)</li>\n<li>Changed to fallback to SW decoder in case of VP9-SVC (<a href=\"https://trac.webkit.org/changeset/284523/webkit/\">r284523</a>)</li>\n<li>Changed to always set the color space for incoming H.264/265 streams (<a href=\"https://trac.webkit.org/changeset/284433/webkit/\">r284433</a>)</li>\n<li>Ensured synchronized rendering of incoming audio tracks (<a href=\"https://trac.webkit.org/changeset/285027/webkit/\">r285027</a>)</li>\n<li>Fixed latent audio over peer connections when changing the output (<a href=\"https://trac.webkit.org/changeset/284674/webkit/\">r284674</a>)</li>\n</ul>\n<h3>WebGL</h3>\n<ul>\n<li>Fixed an issue where high-performance WebGL wasn&#8217;t getting the correct GPU (<a href=\"https://trac.webkit.org/changeset/284669/webkit/\">r284669</a>)</li>\n</ul>\n<h3>App Extensions</h3>\n<ul>\n<li>Fixed an issue where App Extension toolbar items would not remember their position or stay removed from the toolbar</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Fixed an issue where <code>browser.storage.sync</code> entries were saved into the <code>browser.storage.local</code> storage area. If unable to locate sync storage entries, check in the local storage area and do a one-time migration to the sync storage area</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 135 is now available for download for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 284370-285101.\nNote: Tab Groups do not sync in this release.\nWeb Inspector and Web Driver\n\nFixed “testForLinkLabels” Accessibility audit to ignore anchors if aria-hidden (r284986)\nAdded support for the acceptInsecureCerts capability (r285164)\n\nCSS\n\nMedia queries affect Cascade Layer order (r284859)\nEnabled accent-color by default (r284634)\nAdded support for small svw/svh/svmin/svmax, large lvw/lvh/lvmin/lvmax, and dynamic dvw/dvh/dvmin/dvmax viewport units (r284628)\nAdded flex-basis: content support (r284440)\nAdded support for contain: style for counters (r284642, r284755)\nAdded support for ::before and ::after pseudo elements after ::slotted (r284973)\nAdded support for more CSS properties for ::marker (r284519)\nAllowed :is and :where after all pseudo elements (r285054)\nMade :-webkit-any() a synonym of :is() (r285032)\nFixed ::part(foo):hover (r284865)\nSerialized :part() argument as identifier (r284863)\nFixed :host invalidation when combined with pseudo classes in descendant position (r285100)\nPrevented clamping flex base size with min-height, max-height, min-width, and max-width (r284397)\nFixed sizing of orthogonal elements with percentage margins (r284773)\nFixed -webkit-background-clip: text to paint correctly for inline box spanning multiple lines (r284380)\nFixed box-shadow and text-shadow to yield float values while interpolating (r284437)\nFixed CSS serialization affecting grid-auto-flow (r284876)\nFixed percentages on orthogonal replaced children (r284548)\nFixed the border-radius value from .style to be readable when it includes a var() (r285015)\nFixed opacity to flatten when combined with transform-style: preserve-3d (r285021)\n\nWeb API\n\nEnabled lazy image loading by default (r284995)\nAdded support for rel=\"noopener/noreferrer\" on <form> elements (r284749)\nExposed MediaCapabilities to Workers (r284443)\nFixed anchor.relList.supports(\"opener\") to return true (r284745)\nFixed changing the src attribute of the <img> element inside an ImageDocument to trigger a load (r284901)\nFixed document.open() and friends to use the correct document as a source for reset document’s URL (r284758)\nFixed form navigations with target=\"_blank\" to not have an opener (r284821)\nFixed form submission to be cancelled if the form gets detached from inside the formdata event handler (r284660)\nFixed JavaScript URL result to be treated as UTF-8 bytes (r284934)\nFixed Origin of opaque blob: URLs to be null instead of an empty string (r284478)\nFixed selection extend() with no ranges to trigger an exception (r285084)\nFixed the intrinsic size of a picture image inside a template (r284667)\nUpdated appearance of <datalist> indicator (r284626)\n\nScrolling\n\nFixed misplaced position: fixed content with async-scrollable iframes when switching tabs (r284738)\n\nRendering\n\nEnsured CanvasRenderingContext2D.drawImage(video) uses the right color space (r284439)\n\nWebAuthn\n\nChanged to obtain consent to create a new credential when the platform authenticator is in excludedCredentials. This improves compliance with the WebAuthn spec (Step 3.1 of makeCredential). (r284413)\n\nMedia\n\nAdded support for requestVideoFrameCallback API for MediaStreamTrack-based backends (r284528)\nFixed video appearing blank with only audio playing if video element isn’t appended to the DOM tree (r284741)\nUpdated WebM with invalid size to fail to load with error (r284434)\n\nWebRTC\n\nDecreased WebRTC latency by pulling data more often (r284860)\nChanged to fallback to SW decoder in case of VP9-SVC (r284523)\nChanged to always set the color space for incoming H.264/265 streams (r284433)\nEnsured synchronized rendering of incoming audio tracks (r285027)\nFixed latent audio over peer connections when changing the output (r284674)\n\nWebGL\n\nFixed an issue where high-performance WebGL wasn’t getting the correct GPU (r284669)\n\nApp Extensions\n\nFixed an issue where App Extension toolbar items would not remember their position or stay removed from the toolbar\n\nWeb Extensions\n\nFixed an issue where browser.storage.sync entries were saved into the browser.storage.local storage area. If unable to locate sync storage entries, check in the local storage area and do a one-time migration to the sync storage area\n",
      "date_published": "2021-11-15T21:30:51.000Z",
      "date_modified": "2021-11-16T17:00:22.000Z",
      "_plugin": {
        "pageFilename": "d5a24671fdef6022b50226ec306e2624fbce6107f4477bfe98fa9d13390ff9f5.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12033",
      "url": "https://webkit.org/blog/12033/release-notes-for-safari-technology-preview-134/",
      "title": "Release Notes for Safari Technology Preview 134",
      "summary": "Safari Technology Preview Release 134 is now available for download for macOS Big Sur and betas of macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 134 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=282317&amp;rev=284370&amp;limit=2053\">282317-284370</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li><strong>Graphics Tab</strong>\n<ul>\n<li>Added showing color space for canvases in the Graphics tab on the overview cards (<a href=\"https://trac.webkit.org/changeset/283572/webkit/\">r283572</a>)</li>\n</ul>\n</li>\n<li><strong>Styles Tab</strong>\n<ul>\n<li>Changed to format style declarations after editing (<a href=\"https://trac.webkit.org/changeset/283723/webkit/\">r283723</a>)</li>\n</ul>\n</li>\n<li><strong>Other</strong>\n<ul>\n<li>Added context menu support for the tab content view (<a href=\"https://trac.webkit.org/changeset/283859/webkit/\">r283859</a>, <a href=\"https://trac.webkit.org/changeset/283921/webkit/\">r283921</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Enabled CSS Cascade Layers by default (<a href=\"https://trac.webkit.org/changeset/283218/webkit/\">r283218</a>)</li>\n<li>Unprefixed <code>-webkit-appearance</code> and added support for the <code>auto</code> value (<a href=\"https://trac.webkit.org/changeset/283858/webkit/\">r283858</a>, <a href=\"https://trac.webkit.org/changeset/284098/webkit/\">r284098</a>)</li>\n<li>Added support for the <code>x</code> resolution unit outside of <code>image-set</code> (<a href=\"https://trac.webkit.org/changeset/282396/webkit/\">r282396</a>)</li>\n<li>Added support for <code>text-decoration-skip-ink</code> (<a href=\"https://trac.webkit.org/changeset/282397/webkit/\">r282397</a>)</li>\n<li>Changed to consider <code>overflow-wrap: anywhere</code> when calculating <code>min-content</code> intrinsic sizes (<a href=\"https://trac.webkit.org/changeset/283493/webkit/\">r283493</a>)</li>\n<li>Fixed computed style for <code>transform-origin</code> on SVG boxes (<a href=\"https://trac.webkit.org/changeset/282379/webkit/\">r282379</a>)</li>\n<li>Fixed overflow to be computed with the actual logical bottom in CSS Grid (<a href=\"https://trac.webkit.org/changeset/282463/webkit/\">r282463</a>)</li>\n<li>Fixed RTL for an out of flow child in CSS Grid (<a href=\"https://trac.webkit.org/changeset/282340/webkit/\">r282340</a>)</li>\n<li>Fixed SVG linear gradients getting drawn incorrectly sometimes (<a href=\"https://trac.webkit.org/changeset/282443/webkit/\">r282443</a>)</li>\n<li>Fixed <code>radial-gradient</code> to accept <code>calc()</code> values that combine length and percent (<a href=\"https://trac.webkit.org/changeset/283561/webkit/\">r283561</a>)</li>\n<li>Implemented <code>exp</code>, and <code>log</code> functions in <code>calc</code> functions (<a href=\"https://trac.webkit.org/changeset/282795/webkit/\">r282795</a>)</li>\n<li>Implemented allowing <code>NaN</code>, <code>infinity</code>, and <code>-infinity</code> in <code>calc</code> (<a href=\"https://trac.webkit.org/changeset/283434/webkit/\">r283434</a>)</li>\n<li>Implemented <code>atan</code>, <code>acos</code>, <code>asin</code>, <code>atan2</code> in <code>calc</code> functions (<a href=\"https://trac.webkit.org/changeset/283013/webkit/\">r283013</a>)</li>\n<li>Updated CSS Cascade Layers with recent spec change: unlayered styles are highest priority  (<a href=\"https://trac.webkit.org/changeset/284182/webkit/\">r284182</a>)</li>\n<li>Updated <code>transform-origin</code> to not accept four lengths (<a href=\"https://trac.webkit.org/changeset/282359/webkit/\">r282359</a>)</li>\n</ul>\n<h3>Fonts</h3>\n<ul>\n<li>Enabled font palette support:\n<ul>\n<li>Added parsing support for <code>font-palette-values</code> (<a href=\"https://trac.webkit.org/changeset/282806/webkit/\">r282806</a>)</li>\n<li>Added parsing support for <code>font-palette</code> (<a href=\"https://trac.webkit.org/changeset/282851/webkit/\">r282851</a>)</li>\n<li>Added pushing <code>font-palette-values</code> data into CSSFontSelector (<a href=\"https://trac.webkit.org/changeset/282838/webkit/\">r282838</a>)</li>\n<li>Added support for CSSFontPaletteValuesRule.name (<a href=\"https://trac.webkit.org/changeset/283140/webkit/\">r283140</a>)</li>\n<li>Added Web Inspector support for <code>font-palette</code> (<a href=\"https://trac.webkit.org/changeset/282987/webkit/\">r282987</a>)</li>\n<li>Allowed <code>base-palette</code> can accept <code>\"light\"</code> or <code>\"dark\"</code> (<a href=\"https://trac.webkit.org/changeset/283398/webkit/\">r283398</a>)</li>\n<li>Changed CSSFontPaletteValuesRule to not be map-like (<a href=\"https://trac.webkit.org/changeset/283219/webkit/\">r283219</a>)</li>\n<li>Changed to align with CSS Fonts specification changes (<a href=\"https://trac.webkit.org/changeset/283130/webkit/\">r283130</a>)</li>\n<li>Fixed shadowing of <code>@font-palette-values</code> rules (<a href=\"https://trac.webkit.org/changeset/283756/webkit/\">r283756</a>)</li>\n<li>Handle CSSOM style mutation of <code>font-palette</code> and <code>font-palette-values</code> (<a href=\"https://trac.webkit.org/changeset/283032/webkit/\">r283032</a>, <a href=\"https://trac.webkit.org/changeset/283031/webkit/\">r283031</a>)</li>\n<li>Made negative integers in <code>@font-palette-values</code> invalid (<a href=\"https://trac.webkit.org/changeset/283197/webkit/\">r283197</a>, <a href=\"https://trac.webkit.org/changeset/283540/webkit/\">r283540</a>)</li>\n<li>Made sure empty font families do the right thing for font palettes (<a href=\"https://trac.webkit.org/changeset/283075/webkit/\">r283075</a>)</li>\n<li>Prevented parsing unimplemented font palette features (<a href=\"https://trac.webkit.org/changeset/283752/webkit/\">r283752</a>)</li>\n<li>Removed the <code>\"none\"</code> value from <code>font-palette</code> (<a href=\"https://trac.webkit.org/changeset/283536/webkit/\">r283536</a>)</li>\n<li>Renamed <code>override-color</code> to <code>override-colors</code> (<a href=\"https://trac.webkit.org/changeset/283159/webkit/\">r283159</a>)</li>\n<li>Required <code>font-families</code> inside <code>@font-palette-values</code> to be case insensitive (<a href=\"https://trac.webkit.org/changeset/283794/webkit/\">r283794</a>)</li>\n<li>Required font palette names to start with two hyphens (<a href=\"https://trac.webkit.org/changeset/283221/webkit/\">r283221</a>)</li>\n<li>Stopped parsing context-sensitive colors in <code>override-color</code> (<a href=\"https://trac.webkit.org/changeset/283537/webkit/\">r283537</a>)</li>\n</ul>\n</li>\n<li>Updated the implementation of the CSS Font Loading API to be closer to the spec and other browsers:</li>\n<li>Fixed <code>CSSFontFaceSrcValue.cssText</code> to be quoted consistently with other browsers (<a href=\"https://trac.webkit.org/changeset/282442/webkit/\">r282442</a>)</li>\n</ul>\n<h3>Scrolling</h3>\n<ul>\n<li>Enabled support for ScrollOptions&#8217; ScrollBehavior and CSS <code>scroll-behavior</code> properties (<a href=\"https://trac.webkit.org/changeset/284029/webkit/\">r284029</a>)</li>\n<li>Moved smooth scroll animations to run on the scrolling thread (<a href=\"https://trac.webkit.org/changeset/283871/webkit/\">r283871</a>)</li>\n<li>Fixed <code>scrollIntoView</code> to not take into account sticky positioning offsets (<a href=\"https://trac.webkit.org/changeset/283546/webkit/\">r283546</a>)</li>\n<li>Fixed properly redrawing a sticky element inside another sticky element on scroll (<a href=\"https://trac.webkit.org/changeset/284084/webkit/\">r284084</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Enabled 2D canvas color space support on Apple platforms (<a href=\"https://trac.webkit.org/changeset/283541/webkit/\">r283541</a>)</li>\n<li>Updated converting an SVG image for canvas <code>drawImage</code> to choose an appropriate color space (<a href=\"https://trac.webkit.org/changeset/283531/webkit/\">r283531</a>)</li>\n</ul>\n<h3>Dialog Element</h3>\n<ul>\n<li>The <code>&lt;dialog&gt;</code> element is now enabled by default (<a href=\"https://trac.webkit.org/changeset/284155/webkit/\">r284155</a>), also including:\n<ul>\n<li>support for the CSS <code>::backdrop</code> pseudo element</li>\n<li>support for the top layer</li>\n<li><code>&lt;form method=\"dialog\"&gt;</code> support</li>\n</ul>\n</li>\n<li>The <code>inert</code> attribute is available for testing behind an experimental flag with the same name</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Allowed WASM to use up to 4GB (<a href=\"https://trac.webkit.org/changeset/284330/webkit/\">r284330</a>)</li>\n<li>Implemented the WebAssembly exception handling proposal (<a href=\"https://trac.webkit.org/changeset/283852/webkit/\">r283852</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Enabled unlinked Baseline JIT for performance (<a href=\"https://trac.webkit.org/changeset/283139/webkit/\">r283139</a>)</li>\n<li>Fixed <code>Intl.DateTimeFormat#resolvedOptions</code> not to return detailed information of formatting if <code>dateStyle</code> or <code>timeStyle</code> is set (<a href=\"https://trac.webkit.org/changeset/283460/webkit/\">r283460</a>)</li>\n<li>Fixed <code>Intl.supportedValuesOf</code> to populate <code>emoji</code> and <code>eor</code> for collation (<a href=\"https://trac.webkit.org/changeset/282897/webkit/\">r282897</a>)</li>\n<li>Fixed syntactic production for <code>#x in expr</code> (<a href=\"https://trac.webkit.org/changeset/282968/webkit/\">r282968</a>)</li>\n<li>Optimized <code>JSON.parse</code> object creation (<a href=\"https://trac.webkit.org/changeset/282468/webkit/\">r282468</a>)</li>\n<li>Optimized put-by-val with for-in (<a href=\"https://trac.webkit.org/changeset/283098/webkit/\">r283098</a>)</li>\n<li>Optimized <code>JSON.stringify</code> property enumeration (<a href=\"https://trac.webkit.org/changeset/282707/webkit/\">r282707</a>)</li>\n<li>Refined RegExp#compile based on regexp-legacy-features proposal (<a href=\"https://trac.webkit.org/changeset/283874/webkit/\">r283874</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Enabled BroadcastChannel (<a href=\"https://trac.webkit.org/changeset/282426/webkit/\">r282426</a>)\n<ul>\n<li>Implemented top-origin and frame-origin partitioning for BroadcastChannel (<a href=\"https://trac.webkit.org/changeset/282366/webkit/\">r282366</a>)</li>\n</ul>\n</li>\n<li>Enabled Storage API by default (<a href=\"https://trac.webkit.org/changeset/284273/webkit/\">r284273</a>)</li>\n<li>Enabled FileSystemAccess and AccessHandle by default (<a href=\"https://trac.webkit.org/changeset/284131/webkit/\">r284131</a>)\n<ul>\n<li>Implemented FileSystemSyncAccessHandle <code>read()</code> and <code>write()</code> (<a href=\"https://trac.webkit.org/changeset/284059/webkit/\">r284059</a>)</li>\n</ul>\n</li>\n<li>Implemented the <code>borderBoxSize</code> and <code>contentBoxSize</code> parts of ResizeObserver (<a href=\"https://trac.webkit.org/changeset/282441/webkit/\">r282441</a>)</li>\n<li>Implemented CSP <code>script-src-elem, style-src-elem, script-src-attr</code> and <code>style-src-attr</code> directives (<a href=\"https://trac.webkit.org/changeset/284254/webkit/\">r284254</a>)</li>\n<li>Cached Web Audio PannerNode&#8217;s <code>azimuth</code>, <code>elevation</code>, and <code>coneGain</code> for performance (<a href=\"https://trac.webkit.org/changeset/283740/webkit/\">r283740</a>)</li>\n<li>Changed <code>&lt;model&gt;</code> to be draggable, similar to <code>&lt;img&gt;</code> (<a href=\"https://trac.webkit.org/changeset/283563/webkit/\">r283563</a>)</li>\n<li>Updated the <code>autofocus</code> attribute behavior to match the latest specification (<a href=\"https://commits.webkit.org/r283935\">r283935</a>)</li>\n<li>Updated to preserve color space when creating ImageBuffers for ImageBitmaps (<a href=\"https://trac.webkit.org/changeset/282696/webkit/\">r282696</a>)</li>\n</ul>\n<h3>WebGL</h3>\n<ul>\n<li>Fixed <code>image-rendering: crisp-edges</code> for WebGL canvases (<a href=\"https://trac.webkit.org/changeset/282335/webkit/\">r282335</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed the progress bar moving when playback stops (<a href=\"https://trac.webkit.org/changeset/282374/webkit/\">r282374</a>)</li>\n<li>Fixed <code>createImageBitmap</code> using a HLS video as source always returning a black image (<a href=\"https://trac.webkit.org/changeset/283585/webkit/\">r283585</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Added support for WebRTC media capabilities (<a href=\"https://trac.webkit.org/changeset/284085/webkit/\">r284085</a>, <a href=\"https://trac.webkit.org/changeset/284236/webkit/\">r284236</a>)</li>\n<li>Changed MediaCapabilities to enqueue a task to resolve promises (<a href=\"https://trac.webkit.org/changeset/284236/webkit/\">r284236</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Exposed the URL attribute of <code>&lt;video&gt;</code> elements (<a href=\"https://trac.webkit.org/changeset/283799/webkit/\">r283799</a>)</li>\n<li>Made PDFs loaded via <code>&lt;embed&gt;</code> accessible (<a href=\"https://trac.webkit.org/changeset/282358/webkit/\">r282358</a>)</li>\n<li>Updated <code>role=\"math\"</code> elements to no longer be considered to have presentational children (<a href=\"https://trac.webkit.org/changeset/284246/webkit/\">r284246</a>)</li>\n</ul>\n<h3>Private Click Measurement</h3>\n<ul>\n<li>Allowed measurement of links in nested, cross-site iframes (<a href=\"https://trac.webkit.org/changeset/283593/webkit/\">r283593</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Allowed more directives to be included in the <code>content_security_policy</code> of an extension’s manifest, such as the <code>sandbox</code> directive</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 134 is now available for download for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 282317-284370.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nGraphics Tab\n\nAdded showing color space for canvases in the Graphics tab on the overview cards (r283572)\n\n\nStyles Tab\n\nChanged to format style declarations after editing (r283723)\n\n\nOther\n\nAdded context menu support for the tab content view (r283859, r283921)\n\n\n\nCSS\n\nEnabled CSS Cascade Layers by default (r283218)\nUnprefixed -webkit-appearance and added support for the auto value (r283858, r284098)\nAdded support for the x resolution unit outside of image-set (r282396)\nAdded support for text-decoration-skip-ink (r282397)\nChanged to consider overflow-wrap: anywhere when calculating min-content intrinsic sizes (r283493)\nFixed computed style for transform-origin on SVG boxes (r282379)\nFixed overflow to be computed with the actual logical bottom in CSS Grid (r282463)\nFixed RTL for an out of flow child in CSS Grid (r282340)\nFixed SVG linear gradients getting drawn incorrectly sometimes (r282443)\nFixed radial-gradient to accept calc() values that combine length and percent (r283561)\nImplemented exp, and log functions in calc functions (r282795)\nImplemented allowing NaN, infinity, and -infinity in calc (r283434)\nImplemented atan, acos, asin, atan2 in calc functions (r283013)\nUpdated CSS Cascade Layers with recent spec change: unlayered styles are highest priority  (r284182)\nUpdated transform-origin to not accept four lengths (r282359)\n\nFonts\n\nEnabled font palette support:\n\nAdded parsing support for font-palette-values (r282806)\nAdded parsing support for font-palette (r282851)\nAdded pushing font-palette-values data into CSSFontSelector (r282838)\nAdded support for CSSFontPaletteValuesRule.name (r283140)\nAdded Web Inspector support for font-palette (r282987)\nAllowed base-palette can accept \"light\" or \"dark\" (r283398)\nChanged CSSFontPaletteValuesRule to not be map-like (r283219)\nChanged to align with CSS Fonts specification changes (r283130)\nFixed shadowing of @font-palette-values rules (r283756)\nHandle CSSOM style mutation of font-palette and font-palette-values (r283032, r283031)\nMade negative integers in @font-palette-values invalid (r283197, r283540)\nMade sure empty font families do the right thing for font palettes (r283075)\nPrevented parsing unimplemented font palette features (r283752)\nRemoved the \"none\" value from font-palette (r283536)\nRenamed override-color to override-colors (r283159)\nRequired font-families inside @font-palette-values to be case insensitive (r283794)\nRequired font palette names to start with two hyphens (r283221)\nStopped parsing context-sensitive colors in override-color (r283537)\n\n\nUpdated the implementation of the CSS Font Loading API to be closer to the spec and other browsers:\nFixed CSSFontFaceSrcValue.cssText to be quoted consistently with other browsers (r282442)\n\nScrolling\n\nEnabled support for ScrollOptions’ ScrollBehavior and CSS scroll-behavior properties (r284029)\nMoved smooth scroll animations to run on the scrolling thread (r283871)\nFixed scrollIntoView to not take into account sticky positioning offsets (r283546)\nFixed properly redrawing a sticky element inside another sticky element on scroll (r284084)\n\nRendering\n\nEnabled 2D canvas color space support on Apple platforms (r283541)\nUpdated converting an SVG image for canvas drawImage to choose an appropriate color space (r283531)\n\nDialog Element\n\nThe <dialog> element is now enabled by default (r284155), also including:\n\nsupport for the CSS ::backdrop pseudo element\nsupport for the top layer\n<form method=\"dialog\"> support\n\n\nThe inert attribute is available for testing behind an experimental flag with the same name\n\nWebAssembly\n\nAllowed WASM to use up to 4GB (r284330)\nImplemented the WebAssembly exception handling proposal (r283852)\n\nJavaScript\n\nEnabled unlinked Baseline JIT for performance (r283139)\nFixed Intl.DateTimeFormat#resolvedOptions not to return detailed information of formatting if dateStyle or timeStyle is set (r283460)\nFixed Intl.supportedValuesOf to populate emoji and eor for collation (r282897)\nFixed syntactic production for #x in expr (r282968)\nOptimized JSON.parse object creation (r282468)\nOptimized put-by-val with for-in (r283098)\nOptimized JSON.stringify property enumeration (r282707)\nRefined RegExp#compile based on regexp-legacy-features proposal (r283874)\n\nWeb API\n\nEnabled BroadcastChannel (r282426)\n\nImplemented top-origin and frame-origin partitioning for BroadcastChannel (r282366)\n\n\nEnabled Storage API by default (r284273)\nEnabled FileSystemAccess and AccessHandle by default (r284131)\n\nImplemented FileSystemSyncAccessHandle read() and write() (r284059)\n\n\nImplemented the borderBoxSize and contentBoxSize parts of ResizeObserver (r282441)\nImplemented CSP script-src-elem, style-src-elem, script-src-attr and style-src-attr directives (r284254)\nCached Web Audio PannerNode’s azimuth, elevation, and coneGain for performance (r283740)\nChanged <model> to be draggable, similar to <img> (r283563)\nUpdated the autofocus attribute behavior to match the latest specification (r283935)\nUpdated to preserve color space when creating ImageBuffers for ImageBitmaps (r282696)\n\nWebGL\n\nFixed image-rendering: crisp-edges for WebGL canvases (r282335)\n\nMedia\n\nFixed the progress bar moving when playback stops (r282374)\nFixed createImageBitmap using a HLS video as source always returning a black image (r283585)\n\nWebRTC\n\nAdded support for WebRTC media capabilities (r284085, r284236)\nChanged MediaCapabilities to enqueue a task to resolve promises (r284236)\n\nAccessibility\n\nExposed the URL attribute of <video> elements (r283799)\nMade PDFs loaded via <embed> accessible (r282358)\nUpdated role=\"math\" elements to no longer be considered to have presentational children (r284246)\n\nPrivate Click Measurement\n\nAllowed measurement of links in nested, cross-site iframes (r283593)\n\nWeb Extensions\n\nAllowed more directives to be included in the content_security_policy of an extension’s manifest, such as the sandbox directive\n",
      "date_published": "2021-10-27T20:59:31.000Z",
      "date_modified": "2022-01-06T16:51:56.000Z",
      "_plugin": {
        "pageFilename": "780d64ae144cd735e770998ad31a58b73f24ad445566b4f630ca6c40f59f3a5a.html"
      }
    },
    {
      "id": "https://webkit.org/?p=11989",
      "url": "https://webkit.org/blog/11989/new-webkit-features-in-safari-15/",
      "title": "New WebKit Features in Safari 15",
      "summary": "With the release of Safari 15 for macOS Monterey, iPadOS 15, iOS 15, and watchOS, as well as macOS Big Sur and macOS Catalina, WebKit brings significant advancements in privacy and security, improved interoperability, and a host of new features for web developers.",
      "content_html": "<p>With the release of Safari 15 for macOS Monterey, iPadOS 15, iOS 15, and watchOS, as well as macOS Big Sur and macOS Catalina, WebKit brings significant advancements in privacy and security, improved interoperability, and a host of new features for web developers. Take a look.</p>\n<h3>Web Extensions</h3>\n<p>This release brings Safari Web Extensions to iOS and iPadOS. Web Extensions use HTML, CSS, and JavaScript to offer powerful browser customizations. Now developers can create them for every device that supports Safari, using APIs, functionality, and permissions that are <a href=\"https://github.com/w3c/webextensions/blob/main/charter.md\">increasingly standardized</a> across all browsers. Learn how to build Safari Web Extensions and discover how to convert an existing extension by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10104/\">Meet Safari Web Extensions on iOS</a> at WWDC21.</p>\n<p>This year’s release also adds support for the Declarative Net Request WebExtensions API to block content on the web. Learn all about the latest WebExtension APIs by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10027\">Explore Safari Web Extension Improvements</a>  at WWDC21.</p>\n<h3>HTML</h3>\n<p>WebKit now provides support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name/theme-color\"><code>theme-color</code></a> in HTML meta tags, and in Web Manifest. By specifying a theme-color, web developers can change the color of the status bar and overscroll area in Safari on iOS 15. Theme-color also changes the Tab Bar and overscroll area background colors in Compact Tab layout for Safari 15 on macOS Monterey and Big Sur and iPadOS 15.</p>\n<p>In the HTML meta tag, developers can specify separate colors for Dark Mode and light appearance with the <code>media</code> attribute.</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">meta</span> <span class=\"keyword attribute\">name</span>=<span class=\"attribute value string\">\"theme-color\"</span> \n      <span class=\"keyword attribute\">content</span>=<span class=\"attribute value string\">\"#ecd96f\"</span> \n      <span class=\"keyword attribute\">media</span>=<span class=\"attribute value string\">\"(prefers-color-scheme: light)\"</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">meta</span> <span class=\"keyword attribute\">name</span>=<span class=\"attribute value string\">\"theme-color\"</span> \n      <span class=\"keyword attribute\">content</span>=<span class=\"attribute value string\">\"#0b3e05\"</span> \n      <span class=\"keyword attribute\">media</span>=<span class=\"attribute value string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span>\n</code></pre>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2021/10029/\">“Design for Safari 15”</a> at WWDC21 to learn more about the Compact Tab bar and how to use theme-color.</p>\n<h3>CSS</h3>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/aspect-ratio-1024x576.jpeg\" alt=\"demo of aspect ratio property\" width=\"1024\" height=\"576\" class=\"alignnone size-large wp-image-11991 preserve-color\" srcset=\"https://webkit.org/wp-content/uploads/aspect-ratio-1024x576.jpeg 1024w, https://webkit.org/wp-content/uploads/aspect-ratio-300x169.jpeg 300w, https://webkit.org/wp-content/uploads/aspect-ratio-768x432.jpeg 768w, https://webkit.org/wp-content/uploads/aspect-ratio-1536x864.jpeg 1536w, https://webkit.org/wp-content/uploads/aspect-ratio.jpeg 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>WebKit now supports CSS <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio\"><code>aspect-ratio</code></a>. This property can be used to set a preferred aspect ratio on any element, including boxes like <code>divs</code>, <code>iframes</code> for embedded video, or graphic design elements on a page.</p>\n<p>WebKit provides support for the new <code>lab()</code>, <code>lch()</code>, <code>hwb()</code> color syntaxes from <a href=\"https://www.w3.org/TR/css-color-4/\">Color level 4</a>, providing web developers with ways to express a richer range of colors in Lab, Lch, and Hue-Whiteness-Blackness. WebKit also supports predefined color spaces using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color()\"><code>color()</code></a> function syntax: <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-srgb\"><code>srgb</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-display-p3\"><code>display-p3</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-a98-rgb\"><code>a98-rgb</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-prophoto-rgb\"><code>prophoto-rgb</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-rec2020\"><code>rec2020</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-xyz\"><code>xyz</code></a>.</p>\n<p>WebKit supports 12 new values for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type\"><code>list-style-type</code></a>: <code>disclosure-closed</code>, <code>disclosure-open</code>, <code>ethiopic-numeric</code>, <code>japanese-formal</code>, <code>japanese-informal</code>, <code>korean-hangul-formal</code>, <code>korean-hanja-formal</code>, <code>korean-hanja-informal</code>, <code>simp-chinese-formal</code>, <code>simp-chinese-informal</code>, <code>trad-chinese-formal</code>, and <code>trad-chinese-informal</code>.</p>\n<style>article figcaption::before { bottom: 1rem; } article ol { margin-top: 0; font-size: 85%; } figure { text-align: left}</style>\n<aside style=\"display: grid; grid-template-columns: 1fr 1fr 1fr;\">\n<figure style=\"text-align: left\">\n<ol style=\"list-style-type: disclosure-closed\">\n<li>Apollo</li>\n<li>Hubble</li>\n<li>Chandra</li>\n<li>Cassini-Huygens</li>\n<li>Spitzer</li>\n</ol><figcaption>Disclosure closed</figcaption></figure>\n<figure style=\"text-align: left\">\n<ol style=\"list-style-type: ethiopic-numeric\">\n<li>Apollo</li>\n<li>Hubble</li>\n<li>Chandra</li>\n<li>Cassini-Huygens</li>\n<li>Spitzer</li>\n</ol><figcaption>Ethiopic Numeric</figcaption></figure>\n<figure style=\"text-align: left\">\n<ol style=\"list-style-type: simp-chinese informal\">\n<li>Apollo</li>\n<li>Hubble</li>\n<li>Chandra</li>\n<li>Cassini-Huygens</li>\n<li>Spitzer</li>\n</ol><figcaption>Simplified Chinese informal</figcaption></figure>\n</aside>\n<p>There’s also improved implementation of existing values for <code>list-style-type</code>: <code>armenian</code>, <code>cjk-ideographic</code>, <code>hebrew</code>, <code>lower-armenian</code>, <code>lower-roman</code>, <code>upper-armenian</code>, and <code>upper-roman</code>. See a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type#result_2\">demo of all of these options</a> at MDN. We also updated WebKit’s implementation of <code>list-style-position:inside</code> to match the updated <a href=\"https://drafts.csswg.org/css-lists-3/#marker-pseudo\">CSS specification</a>, creating interoperability after a <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=36854\">22 year old debate</a>.</p>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2021/10029/\">“Design for Safari 15”</a> at WWDC21 to learn more about the latest updates to CSS.</p>\n<h3>Web Inspector</h3>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/grid-inspector-1024x576.jpeg\" alt=\"screenshot of Safari 15&#039;s CSS Grid Inspector\" width=\"1024\" height=\"576\" class=\"alignleft size-large wp-image-11997 preserve-color\" srcset=\"https://webkit.org/wp-content/uploads/grid-inspector-1024x576.jpeg 1024w, https://webkit.org/wp-content/uploads/grid-inspector-300x169.jpeg 300w, https://webkit.org/wp-content/uploads/grid-inspector-768x432.jpeg 768w, https://webkit.org/wp-content/uploads/grid-inspector-1536x864.jpeg 1536w, https://webkit.org/wp-content/uploads/grid-inspector.jpeg 1800w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>Web Inspector in Safari 15 includes a <a href=\"https://webkit.org/blog/11588/introducing-css-grid-inspector/\">CSS Grid Inspector</a> overlay for inspecting grid containers on your pages. Watch <a href=\"https://developer.apple.com/videos/play/wwdc2021/10031/\">“Discover Web Inspector Improvements”</a> at WWDC21 to learn more.</p>\n<h3>JavaScript and WebAssembly</h3>\n<p>This release of WebKit adds support for ES6 Modules in Workers and ServiceWorkers. ES6 Modules provides a powerful way for developers to organize large applications using purpose-specific libraries. Workers/Service Workers provides a way to offload work from the main thread, and are often used for complex applications.  Now, developers can use them together — moving work off the main thread, improving performance, while retaining the organizational benefits of modules.</p>\n<p>Additional new capabilities to the JavaScript engine, include:</p>\n<ul>\n<li>support for top-level <code>await</code></li>\n<li><code>Error.cause</code></li>\n<li>private class methods and accessors</li>\n<li><code>BigInt64Array</code> and <code>BigUint64Array</code></li>\n</ul>\n<p>Improvements to WebAssembly include streaming compilation, bulk memory operations, reference types, and non-trapping conversions from <code>float</code> to <code>int</code>.</p>\n<p>You can learn more about the latest JavaScript and WebAssembly updates to WebKit and Safari 15 by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10030\">“Develop Advanced Web Content”</a> at WWDC21.</p>\n<h3>Web APIs</h3>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/webGL2-1024x576.jpg\" alt=\"gorgeous weird 3D environments created to show off what&#039;s possible\" width=\"1024\" height=\"576\" class=\"alignleft size-large wp-image-12006 preserve-color\" srcset=\"https://webkit.org/wp-content/uploads/webGL2-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/webGL2-300x169.jpg 300w, https://webkit.org/wp-content/uploads/webGL2-768x432.jpg 768w, https://webkit.org/wp-content/uploads/webGL2-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/webGL2.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>WebKit now supports <a href=\"https://www.khronos.org/registry/webgl/specs/latest/2.0/\">WebGL2</a> (<a href=\"https://www.khronos.org/webgl/wiki/Demo_Repository\">demos</a>). In addition, the WebGL implementation now runs on top of <a href=\"https://developer.apple.com/documentation/metal\">Metal</a> for better performance.</p>\n<p>Web Share level 2 enhancements to Web Share enable sharing files from a web page to an app. See <a href=\"https://w3c.github.io/web-share/\">Web Share API</a> for more information.</p>\n<p>User gestures now propagate through <code>requestAnimationFrame</code> with a one-second time limit.</p>\n<p>And now, with Safari 15.1,  <code>performance.timeOrigin</code> is available in Web Workers.</p>\n<p>You can learn more about the latest Web APIs in WebKit by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10030\">“Develop Advanced Web Content”</a> at WWDC21.</p>\n<h3>Media</h3>\n<p>Safari 15 includes several media improvements for users and developers. For example, built-in media controls now have Playback Speed and Chapters menus. Plus, the language/subtitle tracks menu is now available on iOS and iPadOS.</p>\n<p>There’s also new support for the Opus audio codec in WebM containers. And on on all iPads that support iPadOS 15, VP9 and WebM in Media Source Extensions (MSE) are now hardware-accelerated.</p>\n<p>Safari 15 also adds support for the MediaSession API to enable SharePlay experiences. You can learn more about creating SharePlay experiences by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10189/\">“Coordinate media playback in Safari with Group Activities”</a> at WWDC21.</p>\n<h3>Security and Privacy</h3>\n<p>Continuing our dedication to privacy and security, Safari on iOS 15 and macOS Monterey supports automatic HTTPS upgrades and hides your IP address from known trackers. Automatic HTTPS upgrades are also supported in Safari 15 on older macOS versions.</p>\n<p>Earlier this year, Safari was the first browser to ship a proposed web standard for measuring advertising in a privacy-preserving way – <a href=\"https://privacycg.github.io/private-click-measurement/\">Private Click Measurement</a>, or PCM. Safari 15 provides three major updates to PCM:</p>\n<ul>\n<li>Attribution reports also sent to click destination.</li>\n<li>Click fraud prevention with unlinkable tokens.</li>\n<li>IP address protection for attribution reports.</li>\n</ul>\n<p>To learn more, read <em><a href=\"https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/\">PCM: Click Fraud Prevention and Attribution Sent to Advertiser</a></em> or watch <a href=\"https://developer.apple.com/videos/play/wwdc2021/10033/\">“Meet privacy-preserving ad attribution”</a> at WWDC21.</p>\n<h3>Authentication and Passwords</h3>\n<p>WebKit now includes support for on-device verification codes in your app or website for a more secure sign-in experience with iCloud Keychain Password Manager. To use verification codes with Safari and Autofill:</p>\n<ul>\n<li>Use <code>autocomplete=one-time-code</code> to make an <code>&lt;input&gt;</code> eligible for AutoFill.</li>\n<li>Use a standard <code>otpauth</code> URL and replace the scheme with <code>apple-otpauth</code> to link directly to the password manager for setup.</li>\n<li>Use a raster image to enable contextual menus on <code>otpauth</code> QR codes that offer to set up a verification code generator.</li>\n</ul>\n<p>Learn how to support the process in your apps and websites by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10105/\">“Secure login with iCloud Keychain verification codes”</a> at WWDC21.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/webAuthn-1024x576.png\" alt=\"a diagram of how private keys are routed with WebAuthn\" width=\"1024\" height=\"576\" class=\"alignleft size-large wp-image-12008 preserve-color\" srcset=\"https://webkit.org/wp-content/uploads/webAuthn-1024x576.png 1024w, https://webkit.org/wp-content/uploads/webAuthn-300x169.png 300w, https://webkit.org/wp-content/uploads/webAuthn-768x432.png 768w, https://webkit.org/wp-content/uploads/webAuthn-1536x864.png 1536w, https://webkit.org/wp-content/uploads/webAuthn-2048x1152.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>Despite their prevalence, passwords inherently come with challenges that make them poorly suited to securing someone’s online accounts. Passkeys are WebAuth credentials intended to replace passwords for websites and apps with device sync and backup. The technology is now available in WebKit as a preview. To enable in Safari, choose Develop > Enable Syncing Platform Authenticator. Learn more watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10106/\">“Move beyond passwords”</a> at WWDC21.</p>\n<h3>Payments</h3>\n<p>Apple Pay enhancements allow developers using the <a href=\"https://www.w3.org/TR/payment-request/\">Payment Request API</a> to indicate an estimated arrival date for shipping methods, support a coupon code, and mark the shipping method as in-store pickup.</p>\n<h3>Availability</h3>\n<p>These improvements are available to users running Safari on iPadOS 15, iOS 15, or Safari 15 on macOS Monterey, macOS Big Sur, or macOS Catalina. These features were also available to web developers in Safari Technology Preview releases. Changes in this release of Safari were included in the following Safari Technology Preview releases: <a href=\"https://webkit.org/blog/11585/release-notes-for-safari-technology-preview-123/\">123</a>, <a href=\"https://webkit.org/blog/11672/release-notes-for-safari-technology-preview-124/\">124</a>, <a href=\"https://webkit.org/blog/11680/release-notes-for-safari-technology-preview-125/\">125</a>, <a href=\"https://webkit.org/blog/11727/release-notes-for-safari-technology-preview-126-with-safari-15-features/\">126</a>, <a href=\"https://webkit.org/blog/11736/release-notes-for-safari-technology-preview-127/\">127</a>, <a href=\"https://webkit.org/blog/11925/release-notes-for-safari-technology-preview-128/\">128</a>, <a href=\"https://webkit.org/blog/11951/release-notes-for-safari-technology-preview-129/\">129</a>.</p>\n<p><a href=\"https://developer.apple.com/safari/download/\">Download the latest Safari Technology Preview release</a> to stay at the forefront of future web platform and Web Inspector features. You can also use the <a href=\"https://webkit.org/status\">WebKit Feature Status</a> page to watch for changes to web platform features you’re interested in.</p>\n<h3>Feedback</h3>\n<p>If you run into any issues, we welcome your <a href=\"https://bugreport.apple.com/\">bug reports</a> for Safari or <a href=\"https://bugs.webkit.org/\">WebKit bugs</a> for web content issues. Send us a tweet <a href=\"https://twitter.com/webkit\">@webkit</a> to share your thoughts on this release.</p>",
      "content_text": "With the release of Safari 15 for macOS Monterey, iPadOS 15, iOS 15, and watchOS, as well as macOS Big Sur and macOS Catalina, WebKit brings significant advancements in privacy and security, improved interoperability, and a host of new features for web developers. Take a look.\nWeb Extensions\nThis release brings Safari Web Extensions to iOS and iPadOS. Web Extensions use HTML, CSS, and JavaScript to offer powerful browser customizations. Now developers can create them for every device that supports Safari, using APIs, functionality, and permissions that are increasingly standardized across all browsers. Learn how to build Safari Web Extensions and discover how to convert an existing extension by watching Meet Safari Web Extensions on iOS at WWDC21.\nThis year’s release also adds support for the Declarative Net Request WebExtensions API to block content on the web. Learn all about the latest WebExtension APIs by watching Explore Safari Web Extension Improvements  at WWDC21.\nHTML\nWebKit now provides support for theme-color in HTML meta tags, and in Web Manifest. By specifying a theme-color, web developers can change the color of the status bar and overscroll area in Safari on iOS 15. Theme-color also changes the Tab Bar and overscroll area background colors in Compact Tab layout for Safari 15 on macOS Monterey and Big Sur and iPadOS 15.\nIn the HTML meta tag, developers can specify separate colors for Dark Mode and light appearance with the media attribute.\n<meta name=\"theme-color\" \n      content=\"#ecd96f\" \n      media=\"(prefers-color-scheme: light)\">\n<meta name=\"theme-color\" \n      content=\"#0b3e05\" \n      media=\"(prefers-color-scheme: dark)\">\n\nWatch “Design for Safari 15” at WWDC21 to learn more about the Compact Tab bar and how to use theme-color.\nCSS\n\nWebKit now supports CSS aspect-ratio. This property can be used to set a preferred aspect ratio on any element, including boxes like divs, iframes for embedded video, or graphic design elements on a page.\nWebKit provides support for the new lab(), lch(), hwb() color syntaxes from Color level 4, providing web developers with ways to express a richer range of colors in Lab, Lch, and Hue-Whiteness-Blackness. WebKit also supports predefined color spaces using the color() function syntax: srgb, display-p3, a98-rgb, prophoto-rgb, rec2020, xyz.\nWebKit supports 12 new values for list-style-type: disclosure-closed, disclosure-open, ethiopic-numeric, japanese-formal, japanese-informal, korean-hangul-formal, korean-hanja-formal, korean-hanja-informal, simp-chinese-formal, simp-chinese-informal, trad-chinese-formal, and trad-chinese-informal.\n\n\n\n\nApollo\nHubble\nChandra\nCassini-Huygens\nSpitzer\nDisclosure closed\n\n\nApollo\nHubble\nChandra\nCassini-Huygens\nSpitzer\nEthiopic Numeric\n\n\nApollo\nHubble\nChandra\nCassini-Huygens\nSpitzer\nSimplified Chinese informal\n\nThere’s also improved implementation of existing values for list-style-type: armenian, cjk-ideographic, hebrew, lower-armenian, lower-roman, upper-armenian, and upper-roman. See a demo of all of these options at MDN. We also updated WebKit’s implementation of list-style-position:inside to match the updated CSS specification, creating interoperability after a 22 year old debate.\nWatch “Design for Safari 15” at WWDC21 to learn more about the latest updates to CSS.\nWeb Inspector\n\nWeb Inspector in Safari 15 includes a CSS Grid Inspector overlay for inspecting grid containers on your pages. Watch “Discover Web Inspector Improvements” at WWDC21 to learn more.\nJavaScript and WebAssembly\nThis release of WebKit adds support for ES6 Modules in Workers and ServiceWorkers. ES6 Modules provides a powerful way for developers to organize large applications using purpose-specific libraries. Workers/Service Workers provides a way to offload work from the main thread, and are often used for complex applications.  Now, developers can use them together — moving work off the main thread, improving performance, while retaining the organizational benefits of modules.\nAdditional new capabilities to the JavaScript engine, include:\n\nsupport for top-level await\nError.cause\nprivate class methods and accessors\nBigInt64Array and BigUint64Array\n\nImprovements to WebAssembly include streaming compilation, bulk memory operations, reference types, and non-trapping conversions from float to int.\nYou can learn more about the latest JavaScript and WebAssembly updates to WebKit and Safari 15 by watching “Develop Advanced Web Content” at WWDC21.\nWeb APIs\n\nWebKit now supports WebGL2 (demos). In addition, the WebGL implementation now runs on top of Metal for better performance.\nWeb Share level 2 enhancements to Web Share enable sharing files from a web page to an app. See Web Share API for more information.\nUser gestures now propagate through requestAnimationFrame with a one-second time limit.\nAnd now, with Safari 15.1,  performance.timeOrigin is available in Web Workers.\nYou can learn more about the latest Web APIs in WebKit by watching “Develop Advanced Web Content” at WWDC21.\nMedia\nSafari 15 includes several media improvements for users and developers. For example, built-in media controls now have Playback Speed and Chapters menus. Plus, the language/subtitle tracks menu is now available on iOS and iPadOS.\nThere’s also new support for the Opus audio codec in WebM containers. And on on all iPads that support iPadOS 15, VP9 and WebM in Media Source Extensions (MSE) are now hardware-accelerated.\nSafari 15 also adds support for the MediaSession API to enable SharePlay experiences. You can learn more about creating SharePlay experiences by watching “Coordinate media playback in Safari with Group Activities” at WWDC21.\nSecurity and Privacy\nContinuing our dedication to privacy and security, Safari on iOS 15 and macOS Monterey supports automatic HTTPS upgrades and hides your IP address from known trackers. Automatic HTTPS upgrades are also supported in Safari 15 on older macOS versions.\nEarlier this year, Safari was the first browser to ship a proposed web standard for measuring advertising in a privacy-preserving way – Private Click Measurement, or PCM. Safari 15 provides three major updates to PCM:\n\nAttribution reports also sent to click destination.\nClick fraud prevention with unlinkable tokens.\nIP address protection for attribution reports.\n\nTo learn more, read PCM: Click Fraud Prevention and Attribution Sent to Advertiser or watch “Meet privacy-preserving ad attribution” at WWDC21.\nAuthentication and Passwords\nWebKit now includes support for on-device verification codes in your app or website for a more secure sign-in experience with iCloud Keychain Password Manager. To use verification codes with Safari and Autofill:\n\nUse autocomplete=one-time-code to make an <input> eligible for AutoFill.\nUse a standard otpauth URL and replace the scheme with apple-otpauth to link directly to the password manager for setup.\nUse a raster image to enable contextual menus on otpauth QR codes that offer to set up a verification code generator.\n\nLearn how to support the process in your apps and websites by watching “Secure login with iCloud Keychain verification codes” at WWDC21.\n\nDespite their prevalence, passwords inherently come with challenges that make them poorly suited to securing someone’s online accounts. Passkeys are WebAuth credentials intended to replace passwords for websites and apps with device sync and backup. The technology is now available in WebKit as a preview. To enable in Safari, choose Develop > Enable Syncing Platform Authenticator. Learn more watching “Move beyond passwords” at WWDC21.\nPayments\nApple Pay enhancements allow developers using the Payment Request API to indicate an estimated arrival date for shipping methods, support a coupon code, and mark the shipping method as in-store pickup.\nAvailability\nThese improvements are available to users running Safari on iPadOS 15, iOS 15, or Safari 15 on macOS Monterey, macOS Big Sur, or macOS Catalina. These features were also available to web developers in Safari Technology Preview releases. Changes in this release of Safari were included in the following Safari Technology Preview releases: 123, 124, 125, 126, 127, 128, 129.\nDownload the latest Safari Technology Preview release to stay at the forefront of future web platform and Web Inspector features. You can also use the WebKit Feature Status page to watch for changes to web platform features you’re interested in.\nFeedback\nIf you run into any issues, we welcome your bug reports for Safari or WebKit bugs for web content issues. Send us a tweet @webkit to share your thoughts on this release.",
      "date_published": "2021-10-26T21:27:05.000Z",
      "date_modified": "2021-12-15T21:22:20.000Z",
      "_plugin": {
        "pageFilename": "cd78aed5db14af1ad94bd4d1dfbdc497ab19e55e255154cc9761309030d01db9.html"
      }
    },
    {
      "id": "https://webkit.org/?p=11975",
      "url": "https://webkit.org/blog/11975/release-notes-for-safari-technology-preview-133/",
      "title": "Release Notes for Safari Technology Preview 133",
      "summary": "Safari Technology Preview Release 133 is now available for download for macOS Big Sur and betas of macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 133 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=281797&amp;rev=282317&amp;limit=999\">281797-282317</a>. <strong>Note</strong>: The changes for these release notes were updated after publishing to account for an incorrect end revision number.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>CSS</h3>\n<ul>\n<li>Added support for <code>self-start</code>,  <code>self-end</code>, <code>start</code>, <code>end</code>, <code>left</code>, and <code>right</code> values in positional alignment (<a href=\"https://trac.webkit.org/changeset/282267/webkit/\">r282267</a>, <a href=\"https://trac.webkit.org/changeset/282078/webkit/\">r282078</a>, <a href=\"https://trac.webkit.org/changeset/281840/webkit/\">r281840</a>)</li>\n<li>Added support for percentages in the <code>scale()</code> transform functions, and the <code>scale</code> property (<a href=\"https://trac.webkit.org/changeset/282144/webkit/\">r282144</a>)</li>\n<li>Added support for <code>sin()</code>, <code>cos()</code>, <code>tan()</code>, <code>e</code>, and <code>pi</code> in <code>calc()</code> (<a href=\"https://trac.webkit.org/changeset/282162/webkit/\">r282162</a>)</li>\n<li>Fixed incorrect stacking order with an absolutely positioned and negative <code>z-index</code> <code>&lt;div&gt;</code> with a canvas child (<a href=\"https://trac.webkit.org/changeset/281913/webkit/\">r281913</a>)</li>\n<li>Fixed absolute positioning with orthogonal writing modes (<a href=\"https://trac.webkit.org/changeset/281995/webkit/\">r281995</a>)</li>\n<li>Fixed right-relative and bottom-relative values in <code>background-position-x</code> and <code>background-position-y</code> (<a href=\"https://trac.webkit.org/changeset/282234/webkit/\">r282234</a>)</li>\n<li>Fixed incorrect vertical position in table layout when the inline level box has <code>0px</code> height (<a href=\"https://trac.webkit.org/changeset/282256/webkit/\">r282256</a>)</li>\n<li>Fixed changing the border size on rows with <code>border-collapse</code> not redrawing (<a href=\"https://trac.webkit.org/changeset/282266/webkit/\">r282266</a>)</li>\n<li>Fixed <code>position: sticky</code> used within table cells (<a href=\"https://trac.webkit.org/changeset/282201/webkit/\">r282201</a>)</li>\n<li>Fixed incorrectly calculated <code>position: sticky</code> constraints when the scrolling container has padding and borders (<a href=\"https://trac.webkit.org/changeset/282138/webkit/\">r282138</a>)</li>\n<li>Fixed an interoperability issue in margin collapsing with <code>overflow: hidden</code> elements (<a href=\"https://trac.webkit.org/changeset/282085/webkit/\">r282085</a>)</li>\n</ul>\n<h3>CSS Cascade Layers</h3>\n<ul>\n<li>Added initial support for CSS Cascade Layers in Experimental Features:\n<ul>\n<li>Added support for computing the order correctly for late added sublayers (<a href=\"https://trac.webkit.org/changeset/281798/webkit/\">r281798</a>)</li>\n<li>Supported layer argument in <code>@import</code> rules (<a href=\"https://trac.webkit.org/changeset/281928/webkit/\">r281928</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS Font Loading API</h3>\n<ul>\n<li>Updated the implementation of the CSS Font Loading API to be closer to the spec and other browsers:\n<ul>\n<li>Fixed <code>CSSFontFaceSet.clear()</code> to not clear CSS-connected members (<a href=\"https://trac.webkit.org/changeset/281842/webkit/\">r281842</a>)</li>\n<li>Updated FontFaceSet methods that need to react to style changes (<a href=\"https://trac.webkit.org/changeset/282016/webkit/\">r282016</a>, <a href=\"https://trac.webkit.org/changeset/282015/webkit/\">r282015</a>, <a href=\"https://trac.webkit.org/changeset/282015/webkit/\">r282015</a>, <a href=\"https://trac.webkit.org/changeset/282261/webkit/\">r282261</a>, <a href=\"https://trac.webkit.org/changeset/282204/webkit/\">r282204</a>)</li>\n<li>Updated <code>FontFaceSet.add()</code> to throw when called on a CSS-connected font (<a href=\"https://trac.webkit.org/changeset/281951/webkit/\">r281951</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Fixed blank braille display in <code>contenteditable</code> elements when the field is followed by another element (<a href=\"https://trac.webkit.org/changeset/281920/webkit/\">r281920</a>)</li>\n<li>Made PDFs loaded via <code>&lt;embed&gt;</code> accessible (<a href=\"https://trac.webkit.org/changeset/282358/webkit/\">r282358</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Enabled <code>Object.hasOwn</code> (<a href=\"https://trac.webkit.org/changeset/281835/webkit/\">r281835</a>)</li>\n<li>Implemented <code>Temporal.PlainTime</code> behind the flag <code>--useTemporal=1</code> (<a href=\"https://trac.webkit.org/changeset/282125/webkit/\">r282125</a>)</li>\n<li>Implemented <code>Temporal.TimeZone</code> behind the flag <code>--useTemporal=1</code> (<a href=\"https://trac.webkit.org/changeset/282018/webkit/\">r282018</a>)</li>\n<li>Implemented <code>Temporal.Duration</code> behind the flag <code>--useTemporal=1</code> (<a href=\"https://trac.webkit.org/changeset/281838/webkit/\">r281838</a>)</li>\n<li>Implemented <code>self.structuredClone()</code> (<a href=\"https://trac.webkit.org/changeset/281808/webkit/\">r281808</a>)</li>\n<li>Implemented <code>Object.hasOwn()</code> (<a href=\"https://trac.webkit.org/changeset/281799/webkit/\">r281799</a>)</li>\n<li>Updated <code>Intl.Locale</code> <code>weekendInfo</code> to list all weekend days instead of range to follow to the latest spec change (<a href=\"https://trac.webkit.org/changeset/282257/webkit/\">r282257</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added basic support for Storage API (<a href=\"https://trac.webkit.org/changeset/282130/webkit/\">r282130</a>)</li>\n<li>Added support for <code>ServiceWorkerGlobalScope.serviceWorker</code> (<a href=\"https://trac.webkit.org/changeset/281854/webkit/\">r281854</a>)</li>\n<li>Added handling for non-fully active documents in <code>navigator.share() / navigator.canShare()</code> (<a href=\"https://trac.webkit.org/changeset/282282/webkit/\">r282282</a>)</li>\n<li>Enabled Cross-Origin-Opener-Policy / Cross-Origin-EmbedderPolicy headers support (<a href=\"https://trac.webkit.org/changeset/282105/webkit/\">r282105</a>, <a href=\"https://trac.webkit.org/changeset/282246/webkit/\">r282246</a>)</li>\n<li>Enabled SharedArrayBuffer support when COOP/COEP headers are used (<a href=\"https://trac.webkit.org/changeset/281832/webkit/\">r281832</a>)</li>\n<li>Fixed scrollbars on <code>pointer-events: none</code> element still intercepting events (<a href=\"https://trac.webkit.org/changeset/281991/webkit/\">r281991</a>)</li>\n<li>Implemented top-origin and frame-origin partitioning for BroadcastChannel (<a href=\"https://trac.webkit.org/changeset/282105/webkit/\">r282105</a>)</li>\n<li>Implemented navigation reporting for Cross-Origin-Opener-Policy (<a href=\"https://trac.webkit.org/changeset/282305/webkit/\">r282305</a>)</li>\n<li>Implemented <code>getClientRects()</code> for SVG elements (<a href=\"https://trac.webkit.org/changeset/282316/webkit/\">r282316</a>)</li>\n<li>Updated to always fetch the first manifest if provided (<a href=\"https://trac.webkit.org/changeset/282026/webkit/\">r282026</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Added support for RTCError and RTCErrorEvent (<a href=\"https://trac.webkit.org/changeset/282199/webkit/\">r282199</a>)</li>\n<li>Added support for RTCDataChannel closing event (<a href=\"https://trac.webkit.org/changeset/282198/webkit/\">r282198</a>)</li>\n<li>Added support for RTCSctpTransport (<a href=\"https://trac.webkit.org/changeset/282197/webkit/\">r282197</a>)</li>\n<li>Updated timing of RTCPeerConnection descriptions update to align with the WebRTC spec (<a href=\"https://trac.webkit.org/changeset/282217/webkit/\">r282217</a>)</li>\n<li>Updated signaling state check when applying a local or remote description to align with the WebRTC spec (<a href=\"https://trac.webkit.org/changeset/281985/webkit/\">r281985</a>)</li>\n<li>Updated <code>getDisplayMedia</code> to capture at the constrained size if possible (<a href=\"https://trac.webkit.org/changeset/281880/webkit/\">r281880</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed an incorrect number of frames returned if the decoding frame rate doesn&#8217;t match the original in WebM (<a href=\"https://trac.webkit.org/changeset/282196/webkit/\">r282196</a>)</li>\n<li>Removed Web Audio <code>canPlayType()</code> workaround that made it reports false negatives (<a href=\"https://trac.webkit.org/changeset/282137/webkit/\">r282137</a>)</li>\n</ul>\n<h3>Web and App Extensions</h3>\n<ul>\n<li>Added the extension’s icon to extension URL tabs for both app and web extensions</li>\n<li>Added the extension name as the title of tabs when an app extension page and does not specify a title</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 133 is now available for download for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 281797-282317. Note: The changes for these release notes were updated after publishing to account for an incorrect end revision number.\nNote: Tab Groups do not sync in this release.\nCSS\n\nAdded support for self-start,  self-end, start, end, left, and right values in positional alignment (r282267, r282078, r281840)\nAdded support for percentages in the scale() transform functions, and the scale property (r282144)\nAdded support for sin(), cos(), tan(), e, and pi in calc() (r282162)\nFixed incorrect stacking order with an absolutely positioned and negative z-index <div> with a canvas child (r281913)\nFixed absolute positioning with orthogonal writing modes (r281995)\nFixed right-relative and bottom-relative values in background-position-x and background-position-y (r282234)\nFixed incorrect vertical position in table layout when the inline level box has 0px height (r282256)\nFixed changing the border size on rows with border-collapse not redrawing (r282266)\nFixed position: sticky used within table cells (r282201)\nFixed incorrectly calculated position: sticky constraints when the scrolling container has padding and borders (r282138)\nFixed an interoperability issue in margin collapsing with overflow: hidden elements (r282085)\n\nCSS Cascade Layers\n\nAdded initial support for CSS Cascade Layers in Experimental Features:\n\nAdded support for computing the order correctly for late added sublayers (r281798)\nSupported layer argument in @import rules (r281928)\n\n\n\nCSS Font Loading API\n\nUpdated the implementation of the CSS Font Loading API to be closer to the spec and other browsers:\n\nFixed CSSFontFaceSet.clear() to not clear CSS-connected members (r281842)\nUpdated FontFaceSet methods that need to react to style changes (r282016, r282015, r282015, r282261, r282204)\nUpdated FontFaceSet.add() to throw when called on a CSS-connected font (r281951)\n\n\n\nAccessibility\n\nFixed blank braille display in contenteditable elements when the field is followed by another element (r281920)\nMade PDFs loaded via <embed> accessible (r282358)\n\nJavaScript\n\nEnabled Object.hasOwn (r281835)\nImplemented Temporal.PlainTime behind the flag --useTemporal=1 (r282125)\nImplemented Temporal.TimeZone behind the flag --useTemporal=1 (r282018)\nImplemented Temporal.Duration behind the flag --useTemporal=1 (r281838)\nImplemented self.structuredClone() (r281808)\nImplemented Object.hasOwn() (r281799)\nUpdated Intl.Locale weekendInfo to list all weekend days instead of range to follow to the latest spec change (r282257)\n\nWeb API\n\nAdded basic support for Storage API (r282130)\nAdded support for ServiceWorkerGlobalScope.serviceWorker (r281854)\nAdded handling for non-fully active documents in navigator.share() / navigator.canShare() (r282282)\nEnabled Cross-Origin-Opener-Policy / Cross-Origin-EmbedderPolicy headers support (r282105, r282246)\nEnabled SharedArrayBuffer support when COOP/COEP headers are used (r281832)\nFixed scrollbars on pointer-events: none element still intercepting events (r281991)\nImplemented top-origin and frame-origin partitioning for BroadcastChannel (r282105)\nImplemented navigation reporting for Cross-Origin-Opener-Policy (r282305)\nImplemented getClientRects() for SVG elements (r282316)\nUpdated to always fetch the first manifest if provided (r282026)\n\nWebRTC\n\nAdded support for RTCError and RTCErrorEvent (r282199)\nAdded support for RTCDataChannel closing event (r282198)\nAdded support for RTCSctpTransport (r282197)\nUpdated timing of RTCPeerConnection descriptions update to align with the WebRTC spec (r282217)\nUpdated signaling state check when applying a local or remote description to align with the WebRTC spec (r281985)\nUpdated getDisplayMedia to capture at the constrained size if possible (r281880)\n\nMedia\n\nFixed an incorrect number of frames returned if the decoding frame rate doesn’t match the original in WebM (r282196)\nRemoved Web Audio canPlayType() workaround that made it reports false negatives (r282137)\n\nWeb and App Extensions\n\nAdded the extension’s icon to extension URL tabs for both app and web extensions\nAdded the extension name as the title of tabs when an app extension page and does not specify a title\n",
      "date_published": "2021-09-30T17:07:59.000Z",
      "date_modified": "2021-10-04T16:29:22.000Z",
      "_plugin": {
        "pageFilename": "1bd125fd40eb245aaf5d8f6991c55c9e7d16793ec62b70651044e123bda7f9db.html"
      }
    },
    {
      "id": "https://webkit.org/?p=11971",
      "url": "https://webkit.org/blog/11971/release-notes-for-safari-technology-preview-132/",
      "title": "Release Notes for Safari Technology Preview 132",
      "summary": "Safari Technology Preview Release 132 is now available for download for macOS Big Sur and betas of macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 132 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=281002&amp;rev=281797&amp;limit=999\">281002-281797</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Fixed CSS Changes sidebar to update live (<a href=\"https://trac.webkit.org/changeset/281441/webkit/\">r281441</a>)</li>\n<li>Fixed showing style rules declared after a rule whose selector has over 8192 components (<a href=\"https://trac.webkit.org/changeset/281354/webkit/\">r281354</a>)</li>\n<li>Changed to not show contextual documentation popup in the Changes panel (<a href=\"https://trac.webkit.org/changeset/281139/webkit/\">r281139</a>)</li>\n</ul>\n</li>\n<li>Miscellaneous\n<ul>\n<li>Adjusted tab bar style to be consistent between docked and undocked layouts (<a href=\"https://trac.webkit.org/changeset/281182/webkit/\">r281182</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Fixed CSS keyframe animations to respect edges in four-value <code>background-position</code> (<a href=\"https://trac.webkit.org/changeset/281683/webkit/\">r281683</a>)</li>\n<li>Fixed sticky position to not use transformed position to compute the offset (<a href=\"https://trac.webkit.org/changeset/281446/webkit/\">r281446</a>)</li>\n<li>Improved sticky positioning when applied to inline items(<a href=\"https://trac.webkit.org/changeset/281185/webkit/\">r281185</a>)</li>\n<li>Prevented snapping to offscreen snap areas in unidirectional scrolls (<a href=\"https://trac.webkit.org/changeset/281189/webkit/\">r281189</a>)</li>\n<li>Unprefixed <code>-webkit-backface-visibility</code> (<a href=\"https://trac.webkit.org/changeset/281009/webkit/\">r281009</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Added Intl Enumeration APIs (<a href=\"https://trac.webkit.org/changeset/281513/webkit/\">r281513</a>)</li>\n<li>Enabled <code>Array#findLast</code> method (<a href=\"https://trac.webkit.org/changeset/281369/webkit/\">r281369</a>)</li>\n<li>Enabled <code>String#at</code> and <code>TypedArray#at</code> (<a href=\"https://trac.webkit.org/changeset/281370/webkit/\">r281370</a>)</li>\n<li>Extended Intl TimeZoneName Option (<a href=\"https://trac.webkit.org/changeset/281371/webkit/\">r281371</a>)</li>\n<li>Fixed <code>Intl.DateTimeFormat</code> incorrectly parsing patterns with &#8216;h&#8217; literal (<a href=\"https://trac.webkit.org/changeset/281688/webkit/\">r281688</a>)</li>\n<li>Implemented <code>Temporal.Calendar</code> behind the flag (<code>--useTemporal</code>) (<a href=\"https://trac.webkit.org/changeset/281788/webkit/\">r281788</a>)</li>\n<li>Implemented Intl Locale Info extension (<a href=\"https://trac.webkit.org/changeset/281374/webkit/\">r281374</a>)</li>\n<li>Implemented <code>Intl.DisplayNames</code> V2 (<a href=\"https://trac.webkit.org/changeset/281375/webkit/\">r281375</a>)</li>\n<li>Made polymorphic-keyed put-by-value faster (<a href=\"https://trac.webkit.org/changeset/281615/webkit/\">r281615</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added Cross-Origin-Embedder-Policy support for Blob URLs (<a href=\"https://trac.webkit.org/changeset/281055/webkit/\">r281055</a>)</li>\n<li>Added onsecuritypolicyviolation on GlobalEventHandlers (<a href=\"https://trac.webkit.org/changeset/281569/webkit/\">r281569</a>)</li>\n<li>Enabled PerformanceNavigationTiming API by default (<a href=\"https://trac.webkit.org/changeset/281111/webkit/\">r281111</a>)</li>\n<li>Fixed including outer selector when matching <code>::slotted()</code> (<a href=\"https://trac.webkit.org/changeset/281692/webkit/\">r281692</a>)</li>\n<li>Fixed <code>document.hasFocus()</code> returning true for unfocused pages (<a href=\"https://trac.webkit.org/changeset/281228/webkit/\">r281228</a>)</li>\n<li>Fixed Geolocation API to callback with an error if the document is not fully active (<a href=\"https://trac.webkit.org/changeset/281520/webkit/\">r281520</a>)</li>\n<li>Fixed setting <code>window.location.href</code> to an invalid URL to throw a TypeError (<a href=\"https://trac.webkit.org/changeset/281472/webkit/\">r281472</a>)</li>\n<li>Fixed <code>SubmitEvent.submitter</code> property to be set for <code>&lt;button type=\"submit\"&gt;</code> (<a href=\"https://trac.webkit.org/changeset/281770/webkit/\">r281770</a>)</li>\n<li>Fixed Web Share <code>CanShare()</code> to be called after transient activation check (<a href=\"https://trac.webkit.org/changeset/281126/webkit/\">r281126</a>)</li>\n<li>Implemented <code>Crypto.randomUUID()</code> (<a href=\"https://trac.webkit.org/changeset/281206/webkit/\">r281206</a>, <a href=\"https://trac.webkit.org/changeset/281284/webkit/\">r281284</a>)</li>\n<li>Implemented <code>self.reportError()</code> (<a href=\"https://trac.webkit.org/changeset/281756/webkit/\">r281756</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Added support for RTCDtlsTransport (<a href=\"https://trac.webkit.org/changeset/281225/webkit/\">r281225</a>)</li>\n<li>Added support for <code>RTCPeerConnection.canTrickleIceCandidates</code> (<a href=\"https://trac.webkit.org/changeset/281298/webkit/\">r281298</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Fixed caret to respect text background color (<a href=\"https://trac.webkit.org/changeset/281685/webkit/\">r281685</a>)</li>\n<li>Fixed incorrect repaint when inline level box style change triggers line height change (<a href=\"https://trac.webkit.org/changeset/281136/webkit/\">r281136</a>)</li>\n<li>Changed synthetic bold additional advances to be applied after shaping (<a href=\"https://trac.webkit.org/changeset/281687/webkit/\">r281687</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed <code>nexttrack</code> and <code>previoustrack</code> MediaSession handlers (<a href=\"https://trac.webkit.org/changeset/281013/webkit/\">r281013</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Added support for <code>externally_connectable</code> for sending messages to extensions from web pages</li>\n<li>Added a drop shadow around color extension icons when the tab is using a theme color from the web page</li>\n<li>Added an error message when declarative net request is used and the <code>declarativeNetRequest</code> permission is not specified in the extension manifest</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 132 is now available for download for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 281002-281797.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nElements Tab\n\nFixed CSS Changes sidebar to update live (r281441)\nFixed showing style rules declared after a rule whose selector has over 8192 components (r281354)\nChanged to not show contextual documentation popup in the Changes panel (r281139)\n\n\nMiscellaneous\n\nAdjusted tab bar style to be consistent between docked and undocked layouts (r281182)\n\n\n\nCSS\n\nFixed CSS keyframe animations to respect edges in four-value background-position (r281683)\nFixed sticky position to not use transformed position to compute the offset (r281446)\nImproved sticky positioning when applied to inline items(r281185)\nPrevented snapping to offscreen snap areas in unidirectional scrolls (r281189)\nUnprefixed -webkit-backface-visibility (r281009)\n\nJavaScript\n\nAdded Intl Enumeration APIs (r281513)\nEnabled Array#findLast method (r281369)\nEnabled String#at and TypedArray#at (r281370)\nExtended Intl TimeZoneName Option (r281371)\nFixed Intl.DateTimeFormat incorrectly parsing patterns with ‘h’ literal (r281688)\nImplemented Temporal.Calendar behind the flag (--useTemporal) (r281788)\nImplemented Intl Locale Info extension (r281374)\nImplemented Intl.DisplayNames V2 (r281375)\nMade polymorphic-keyed put-by-value faster (r281615)\n\nWeb API\n\nAdded Cross-Origin-Embedder-Policy support for Blob URLs (r281055)\nAdded onsecuritypolicyviolation on GlobalEventHandlers (r281569)\nEnabled PerformanceNavigationTiming API by default (r281111)\nFixed including outer selector when matching ::slotted() (r281692)\nFixed document.hasFocus() returning true for unfocused pages (r281228)\nFixed Geolocation API to callback with an error if the document is not fully active (r281520)\nFixed setting window.location.href to an invalid URL to throw a TypeError (r281472)\nFixed SubmitEvent.submitter property to be set for <button type=\"submit\"> (r281770)\nFixed Web Share CanShare() to be called after transient activation check (r281126)\nImplemented Crypto.randomUUID() (r281206, r281284)\nImplemented self.reportError() (r281756)\n\nWebRTC\n\nAdded support for RTCDtlsTransport (r281225)\nAdded support for RTCPeerConnection.canTrickleIceCandidates (r281298)\n\nRendering\n\nFixed caret to respect text background color (r281685)\nFixed incorrect repaint when inline level box style change triggers line height change (r281136)\nChanged synthetic bold additional advances to be applied after shaping (r281687)\n\nMedia\n\nFixed nexttrack and previoustrack MediaSession handlers (r281013)\n\nWeb Extensions\n\nAdded support for externally_connectable for sending messages to extensions from web pages\nAdded a drop shadow around color extension icons when the tab is using a theme color from the web page\nAdded an error message when declarative net request is used and the declarativeNetRequest permission is not specified in the extension manifest\n",
      "date_published": "2021-09-16T21:16:39.000Z",
      "date_modified": "2021-09-16T21:16:39.000Z",
      "_plugin": {
        "pageFilename": "20cc6f7ed93a5166258bfcec8d2c645a98f683cb85d9958aa28d2f707f543594.html"
      }
    }
  ],
  "_plugin": {
    "rawFeed": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><feed\n\txmlns=\"http://www.w3.org/2005/Atom\"\n\txmlns:thr=\"http://purl.org/syndication/thread/1.0\"\n\txml:lang=\"en-US\"\n\txml:base=\"https://webkit.org/wp-atom.php\"\n\t>\n\t<title type=\"text\">WebKit</title>\n\t<subtitle type=\"text\">Open Source Web Browser Engine</subtitle>\n\n\t<updated>2022-01-06T16:51:56Z</updated>\n\n\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org\" />\n\t<id>https://webkit.org/feed/atom/</id>\n\t<link rel=\"self\" type=\"application/atom+xml\" href=\"https://webkit.org/feed/atom/\" />\n\n\t<generator uri=\"https://wordpress.org/\" version=\"5.8.2\">WordPress</generator>\n\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Release Notes for Safari Technology Preview 137]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12156/release-notes-for-safari-technology-preview-137/\" />\n\n\t\t<id>https://webkit.org/?p=12156</id>\n\t\t<updated>2021-12-20T21:23:09Z</updated>\n\t\t<published>2021-12-20T21:23:09Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Safari Technology Preview\" />\n\t\t<summary type=\"html\"><![CDATA[Safari Technology Preview Release 137 is now available for download for macOS Big Sur and betas of macOS Monterey.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12156/release-notes-for-safari-technology-preview-137/\"><![CDATA[<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 137 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=285788&amp;rev=286534&amp;limit=746\">285788-286534</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Enhanced autocomplete to support mid-line completions (<a href=\"https://trac.webkit.org/changeset/285851/webkit/\">r285851</a>)</li>\n<li>Styles\n<ul>\n<li>Added a inline swatch for CSS <code>align-content</code> (<a href=\"https://trac.webkit.org/changeset/285983/webkit/\">r285983</a>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Layers Tab\n<ul>\n<li>Fixed the position of composited layers with a <code>box-shadow</code> (<a href=\"https://trac.webkit.org/changeset/285839/webkit/\">r285839</a>)</li>\n</ul>\n</li>\n<li>Console Prompt\n<ul>\n<li>Fixed console script evaluation not working or being performed in an unexpected execution context after refresh or navigation (<a href=\"https://trac.webkit.org/changeset/286412/webkit/\">r286412</a>)</li>\n</ul>\n</li>\n<li>Web Inspector Interface\n<ul>\n<li>Enabled left docking when in left-to-right and right docking when in right-to-left mode (<a href=\"https://trac.webkit.org/changeset/285974/webkit/\">r285974</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Enabled support for <code>:has()</code> pseudo-class by default (<a href=\"https://trac.webkit.org/changeset/286495/webkit/\">r286495</a>, <a href=\"https://trac.webkit.org/changeset/286135/webkit/\">r286135</a>, <a href=\"https://trac.webkit.org/changeset/286302/webkit/\">r286302</a>, <a href=\"https://trac.webkit.org/changeset/286180/webkit/\">r286180</a>, <a href=\"https://trac.webkit.org/changeset/286226/webkit/\">r286226</a>, <a href=\"https://trac.webkit.org/changeset/286494/webkit/\">r286494</a>, <a href=\"https://trac.webkit.org/changeset/286433/webkit/\">r286433</a>, <a href=\"https://trac.webkit.org/changeset/286188/webkit/\">r286188</a>, <a href=\"https://trac.webkit.org/changeset/286169/webkit/\">r286169</a>, <a href=\"https://trac.webkit.org/changeset/286365/webkit/\">r286365</a>)</li>\n<li>Added support for new <code>srgb-linear</code>, <code>xyz-d50</code> and <code>xyz-d65</code> colorspaces (<a href=\"https://trac.webkit.org/changeset/286168/webkit/\">r286168</a>)</li>\n<li>Added support for <code>oklab()</code> and <code>oklch()</code> colors (<a href=\"https://trac.webkit.org/changeset/286191/webkit/\">r286191</a>)</li>\n<li>Added support for replaced elements with intrinsic ratio and no intrinsic size (<a href=\"https://trac.webkit.org/changeset/286206/webkit/\">r286206</a>)</li>\n<li>Added support for <code>*vi</code> (inline) and <code>*vb</code> (block) viewport units (<a href=\"https://trac.webkit.org/changeset/286458/webkit/\">r286458</a>)</li>\n<li>Added helper to add CSS property with implicit default (<a href=\"https://trac.webkit.org/changeset/285837/webkit/\">r285837</a>)</li>\n<li>Changed to not shrink tables bellow their intrinsic sizes (<a href=\"https://trac.webkit.org/changeset/286207/webkit/\">r286207</a>)</li>\n<li>Changed SVG images used as grid items to use the overriding logical width and height when defined to compute the logical dimensions (<a href=\"https://trac.webkit.org/changeset/286100/webkit/\">r286100</a>)</li>\n<li>Changed dynamic <code>dv*</code> viewport units to ignore the page scale (<a href=\"https://trac.webkit.org/changeset/286350/webkit/\">r286350</a>)</li>\n<li>Fixed <code>:hover</code> with descendant selector invalidating correctly in shadow trees (<a href=\"https://trac.webkit.org/changeset/286063/webkit/\">r286063</a>)</li>\n<li>Fixed <code>rem</code> in media queries to be calculated using <code>font-size: initial</code>, not root element <code>font-size</code> (<a href=\"https://trac.webkit.org/changeset/286123/webkit/\">r286123</a>)</li>\n<li>Fixed sticky <code>th</code> or <code>td</code> in <code>table</code> to stop at the specified top (<a href=\"https://trac.webkit.org/changeset/286417/webkit/\">r286417</a>)</li>\n<li>Implemented parsing and animation support for <code>ray()</code> shape accepted by <code>offset-path</code> (<a href=\"https://trac.webkit.org/changeset/286086/webkit/\">r286086</a>)</li>\n<li>Transferred size for grid item with an aspect-ratio and stretch alignment against the definite row (<a href=\"https://trac.webkit.org/changeset/285987/webkit/\">r285987</a>)</li>\n<li>Updated <code>color-mix()</code> to the latest spec (<a href=\"https://trac.webkit.org/changeset/286196/webkit/\">r286196</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Added <code>Intl.NumberFormat.formatRangeToParts</code> for ICU 69~ platforms (<a href=\"https://trac.webkit.org/changeset/286255/webkit/\">r286255</a>)</li>\n<li>Implemented <code>Date.prototype.toTemporalInstant()</code> (<a href=\"https://trac.webkit.org/changeset/286149/webkit/\">r286149</a>)</li>\n<li>Revised <code>JSON.parse</code> atomize policy for performance and compatibility with the other engines (<a href=\"https://trac.webkit.org/changeset/285955/webkit/\">r285955</a>)</li>\n<li>Accelerated public class field initialization (<a href=\"https://trac.webkit.org/changeset/286251/webkit/\">r286251</a>)</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Fixed WebAssembly <code>memory.fill</code> out of bounds error message (<a href=\"https://trac.webkit.org/changeset/286092/webkit/\">r286092</a>)</li>\n</ul>\n<h3>Experimental Model Element</h3>\n<ul>\n<li>Added support for mouse-based manipulation of <code>&lt;model&gt;</code> on macOS (<a href=\"https://trac.webkit.org/changeset/285986/webkit/\">r285986</a>)</li>\n<li>Added audio support (<a href=\"https://trac.webkit.org/changeset/286065/webkit/\">r286065</a>)</li>\n<li>Added support for controlling looping animations (<a href=\"https://trac.webkit.org/changeset/286066/webkit/\">r286066</a>)</li>\n<li>Added support for getting and setting the camera (<a href=\"https://trac.webkit.org/changeset/286019/webkit/\">r286019</a>)</li>\n<li>Added support for pausing and resuming animations (<a href=\"https://trac.webkit.org/changeset/286048/webkit/\">r286048</a>)</li>\n<li>Added support for seeking animations (<a href=\"https://trac.webkit.org/changeset/286068/webkit/\">r286068</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Added accessibility attributes for <code>&lt;model&gt;</code> (<a href=\"https://trac.webkit.org/changeset/286406/webkit/\">r286406</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added initial implementation for the Web Lock API (<a href=\"https://trac.webkit.org/changeset/286284/webkit/\">r286284</a>)</li>\n<li>Fixed <code>Cross-Origin-Embedder-Policy: require-corp</code> to not prevent loading of data-URL images (<a href=\"https://trac.webkit.org/changeset/285823/webkit/\">r285823</a>)</li>\n<li>Fixed empty <code>&lt;input type=file&gt;</code> controls not showing up in the <code>urlencoded</code> and <code>text/plain</code> <code>enctypes</code> (<a href=\"https://trac.webkit.org/changeset/285808/webkit/\">r285808</a>)</li>\n<li>Fixed empty <code>&lt;input type=file&gt;</code> represented incorrectly in FormData (<a href=\"https://trac.webkit.org/changeset/285861/webkit/\">r285861</a>)</li>\n<li>Fixed modal dialogs to make the root element unfocusable (<a href=\"https://trac.webkit.org/changeset/285791/webkit/\">r285791</a>)</li>\n<li>Fixed <code>validity.valueMissing</code> to not rely on the element&#8217;s disabled state for inputs of type <code>radio</code>, <code>file</code>, or <code>checkbox</code> (<a href=\"https://trac.webkit.org/changeset/286413/webkit/\">r286413</a>)</li>\n<li>Fixed file inputs in non-multipart form submissions showing up as string values in the <code>formdata</code> event (<a href=\"https://trac.webkit.org/changeset/286427/webkit/\">r286427</a>)</li>\n<li>Implemented <code>FileSystemFileHandle.getFile()</code> (<a href=\"https://trac.webkit.org/changeset/285912/webkit/\">r285912</a>)</li>\n</ul>\n<h3>Content Security Policy</h3>\n<ul>\n<li>Fixed missing <code>lineNumber</code> and <code>columnNumber</code> in inline violation reports (<a href=\"https://trac.webkit.org/changeset/285800/webkit/\">r285800</a>)</li>\n<li>Implemented submitting samples in violation reports (<a href=\"https://trac.webkit.org/changeset/286150/webkit/\">r286150</a>)</li>\n<li>Fixed CSP DOM reporting which always used the document as the target (<a href=\"https://trac.webkit.org/changeset/286136/webkit/\">r286136</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Added support for more <code>requestVideoFrameCallback</code> metadata (<a href=\"https://trac.webkit.org/changeset/285984/webkit/\">r285984</a>)</li>\n<li>Fixed audio rate issues in WebRTC audio rendering when switching audio output (<a href=\"https://trac.webkit.org/changeset/285985/webkit/\">r285985</a>)</li>\n<li>Fixed video encoding and decoding for h.264 (<a href=\"https://trac.webkit.org/changeset/285928/webkit/\">r285928</a>)</li>\n</ul>\n<h3>Apple Pay</h3>\n<ul>\n<li>Changed <code>PaymentRequest</code> to validate payment method data on construction (<a href=\"https://trac.webkit.org/changeset/286452/webkit/\">r286452</a>)\n<ul>\n<li>This can (and should) now be used instead of <code>ApplePaySession.supportsVersion</code>.</li>\n</ul>\n</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Added support for special matching characters (<code>*</code>, <code>|</code>, <code>||</code>, and <code>^</code>) in <code>urlFilter</code> of <code>declarativeNetRequest</code> rules instead of treating them as regex patterns</li>\n<li>Added permission prompting inside Web Inspector for <code>devtools</code> extension tabs</li>\n<li>Added support for CSS injections and removals of more than one file with <code>browser.scripting</code></li>\n</ul>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Wide Gamut 2D Graphics using HTML Canvas]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/\" />\n\n\t\t<id>https://webkit.org/?p=12058</id>\n\t\t<updated>2021-12-14T17:50:36Z</updated>\n\t\t<published>2021-12-14T17:00:35Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"CSS\" /><category scheme=\"https://webkit.org\" term=\"JavaScript\" />\n\t\t<summary type=\"html\"><![CDATA[Support for creating 2D canvases with Display P3 backing stores has been added to WebKit.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/\"><![CDATA[<style>\n@media (prefers-color-scheme:dark) { figure .preserve-color, figure:hover .preserve-color { filter: none !important; } }\nfigure.widescreen.inline-images img { display: inline; }\narticle .byline { width: 210px; margin-left: -20px; }\n.nowrap-overflow-auto { white-space: nowrap; max-width: 100%; overflow: auto; }\nfigure img { display: inline !important; }\n@media (max-width: 1180px) {\n  article .byline { width: unset; margin-right: auto; }\n}\n#fillstyles img { background-color: #ddd; }\n@media (prefers-color-scheme: dark) {\n  #fillstyles img { background-color: #444; }\n}\n#puzzle iframe { width: 350px; height: 250px; }\n@media (min-width: 500px) {\n  #puzzle iframe { width: 500px; height: 310px; }\n}\n@media (min-width: 1000px) {\n  #puzzle iframe { width: 1000px; height: 520px; }\n}\n@media (color-gamut: p3) {\n  #gamut-warning { display: none; }\n}\n</style>\n<p>Most colors used on the Web today are sRGB colors. These are the colors that you specify with the familiar <code>#rrggbb</code> and <code>rgb(r, g, b)</code> CSS syntax, and whose individual color components are given as values in the range [0, 255]. For example, <code>rgb(255, 0, 0)</code> is the most saturated, pure red in the sRGB color space. But the range of colors in sRGB — its <em>color gamut</em> — does not encompass all colors that can be perceived by the human visual system, and there are displays that can produce a broader range of colors.</p>\n<p>sRGB is based on the color capabilities of computer monitors that existed at the time of its standardization, in the late 1990s. Since then, other, wider gamut color spaces have been defined for use in digital content, and which cover more of the colors that humans can perceive. One such color space is Display P3, which contains colors with significantly higher saturation than sRGB.</p>\n<div class=\"note\" id=\"gamut-warning\">\nThis browser reports that the display does not support Display P3 colors; figures in this post may not appear as intended.\n</div>\n<figure class=\"widescreen mattewhite aligncenter\">\n<div class=\"nowrap-overflow-auto\">\n    <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/pinwheel-sRGB.png\" width=\"240\" height=\"244\" alt=\"A conic gradient showing a range of sRGB colors\" class=\"preserve-color\"> <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/pinwheel-Display-P3.png\" width=\"240\" height=\"244\" alt=\"A conic gradient showing a range of Display P3 colors\" class=\"preserve-color\">\n  </div><figcaption>Conic gradients showing fully saturated sRGB (left) and Display P3 (right) colors.  Viewed in a browser and on a display supporting Display P3, the colors in the circle on the right will show as more intense than those on the left.  (<a href=\"https://webkit.org/blog-files/wide-gamut-canvas/pinwheels.html\">View as standalone page.</a>)</figcaption></figure>\n<div class=\"note\">For a more in depth introduction to color spaces, see Dean Jackson’s earlier post, <a href=\"https://webkit.org/blog/6682/improving-color-on-the-web/\">Improving Color on the Web</a>.</div>\n<p>Today, there are many computer and mobile devices on the market with displays that can reproduce all the colors of the Display P3 gamut, and the Web platform has been evolving over the last few years to allow authors to make best use of these displays. WebKit has supported wide color images and video since 2016, and last year became <a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\">the first browser engine to implement the new color syntax</a> defined in <a href=\"https://drafts.csswg.org/css-color-4/\">CSS Color Module Level 4</a> where colors can be specified in a given color space (like <code>color(display-p3 1 0 0)</code>, a fully saturated Display P3 red).</p>\n<p>One notable omission in wide gamut color support, until now, has been in the HTML <code>canvas</code> element. The 2D canvas API was introduced before wide gamut displays were common, and until now has only handled drawing and manipulating sRGB pixel values. Earlier this year, a proposal for creating canvas contexts using other color spaces was added to the HTML standard, and we’ve recently added support for this to WebKit.</p>\n<h2>Drawing on a wide gamut canvas rendering context</h2>\n<p>The <code>getContext</code> method on a <code>canvas</code> element, which is used to create a rendering context object with 2D drawing APIs, accepts a new option to set the canvas backing store’s color space.</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">canvas</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"canvas\"</span> <span class=\"keyword attribute\">width</span>=<span class=\"attribute value string\">\"400\"</span> <span class=\"keyword attribute\">height</span>=<span class=\"attribute value string\">\"300\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"keyword\">canvas</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">script</span>&gt;</span>\nlet canvas = document.getElementById(\"canvas\");\nlet context = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n// ... draw on context ...\n<span class=\"tag\">&lt;/<span class=\"keyword\">script</span>&gt;</span>\n</code></pre>\n<p>The default color space remains sRGB, rather than having the browser automatically use the wider color space, to avoid the performance overhead of color space conversions with existing content. The two explicit color spaces that can be requested are <code>\"srgb\"</code> and <code>\"display-p3\"</code>.</p>\n<p>Fill and stroke styles can be specified using any supported CSS color syntax.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">position</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\n<span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">green</span> <span class=\"keyword operator\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">0</span>]) {\n    <span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">blue</span> <span class=\"keyword operator\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">0</span>]) {\n        <span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">red</span> <span class=\"keyword operator\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">0</span>]) {\n            <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">=</span> `<span class=\"identifier\">color</span>(<span class=\"identifier\">display</span><span class=\"operator\">-</span><span class=\"identifier\">p3</span> ${<span class=\"identifier\">red</span>} ${<span class=\"identifier\">green</span>} ${<span class=\"identifier\">blue</span>})`;\n            <span class=\"identifier\">context</span>.<span class=\"identifier\">fillRect</span>(<span class=\"identifier\">position</span>, <span class=\"identifier\">position</span>, <span class=\"number\">40</span>, <span class=\"number\">40</span>);\n            <span class=\"identifier\">position</span> <span class=\"operator\">+</span><span class=\"operator\">=</span> <span class=\"number\">20</span>;\n        }\n    }\n}\n</code></pre>\n<figure id=\"fillstyles\" class=\"widescreen mattewhite aligncenter\">\n<div class=\"nowrap-overflow-auto\">\n    <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/squares-sRGB.png\" width=\"220\" height=\"220\" class=\"preserve-color\" alt=\"Colored squares that have been clamped to sRGB\"> <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/squares-Display-P3.png\" width=\"220\" height=\"220\" class=\"preserve-color\" alt=\"Colored squares using Display P3 colors that are outside the sRGB gamut\">\n  </div><figcaption>Display P3 colors used as fill styles on an sRGB (left) and Display P3 (right) canvas.  Colors on the left are clamped to remain within the sRGB gamut. (<a href=\"https://webkit.org/blog-files/wide-gamut-canvas/squares.html\">View as standalone page.</a>)</figcaption></figure>\n<p>Any drawing that uses a color outside the color space of the canvas will be clamped so that it is in gamut. For example, filling a rectangle with <code>color(display-p3 1 0 0)</code> on an sRGB canvas will end up using a fully saturated sRGB red. Similarly, drawing on a Display P3 canvas with <code>color(rec2020 0.9 0 0.9)</code>, an almost full magenta in the <a href=\"https://drafts.csswg.org/css-color-4/#predefined-rec2020\">Rec.2020 color space</a>, will result in pixels of approximately <code>color(display-p3 1.0 0 0.923)</code> being used, since that is the closest in the Display P3 color gamut.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">const</span> <span class=\"identifier\">COLORS</span> <span class=\"operator\">=</span> [<span class=\"string\">\"#0f0\"</span>, <span class=\"string\">\"color(display-p3 0 1 0)\"</span>];\n<span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">y</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"identifier\">y</span> <span class=\"operator\">&lt;</span> <span class=\"number\">180</span>; <span class=\"identifier\">y</span> <span class=\"operator\">+</span><span class=\"operator\">=</span> <span class=\"number\">20</span>) {\n    <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">=</span> <span class=\"identifier\">COLORS</span>[(<span class=\"identifier\">y</span> <span class=\"operator\">/</span> <span class=\"number\">20</span>) <span class=\"operator\">%</span> <span class=\"number\">2</span>];\n    <span class=\"identifier\">context</span>.<span class=\"identifier\">fillRect</span>(<span class=\"number\">20</span>, <span class=\"identifier\">y</span>, <span class=\"number\">160</span>, <span class=\"number\">20</span>);\n}\n</code></pre>\n<figure class=\"widescreen mattewhite aligncenter\">\n<div class=\"nowrap-overflow-auto\">\n    <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/stripes-sRGB.png\" width=\"200\" height=\"200\" class=\"preserve-color\" alt=\"A filled square of full sRGB green\"> <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/stripes-Display-P3.png\" width=\"200\" height=\"200\" class=\"preserve-color\" alt=\"Stripes of full sRGB green and full Display P3 green\">\n  </div><figcaption>Stripes of interleaved Display P3 and sRGB colors on an sRGB (left) and Display P3 (right) canvas.  Because colors are clamped to remain within the gamut of the canvas, the two shades of green are indistinguishable on the sRGB canvas.  (<a href=\"https://webkit.org/blog-files/wide-gamut-canvas/stripes.html\">View as standalone page.</a>)</figcaption></figure>\n<div class=\"note\">\nOn macOS, you can use the <a href=\"https://support.apple.com/guide/colorsync-utility/welcome/mac\">ColorSync Utility</a> to convert color values between sRGB, Display P3, Rec.2020, and some other predefined color spaces.\n</div>\n<p>Wide gamut colors are usable in all canvas drawing primitives:</p>\n<ul>\n<li>as the fill and stroke of rectangles, paths, and text</li>\n<li>in gradient stops</li>\n<li>as a shadow color</li>\n</ul>\n<h2>Pixel manipulation in sRGB and Display P3</h2>\n<p><code>getImageData</code> and <code>putImageData</code> can be used to get and set pixel values on a wide gamut canvas. By default, <code>getImageData</code> will return an <code>ImageData</code> object with pixel values in the color space of the canvas, but it is possible to specify an explicit color space that does not match the canvas, and a conversion will be performed.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">context</span> <span class=\"operator\">=</span> <span class=\"identifier\">canvas</span>.<span class=\"identifier\">getContext</span>(<span class=\"string\">\"2d\"</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n<span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">=</span> <span class=\"string\">\"color(display-p3 0.5 0 0)\"</span>;\n<span class=\"identifier\">context</span>.<span class=\"identifier\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);\n\n<span class=\"keyword type\">let</span> <span class=\"identifier\">imageData</span>;\n\n<span class=\"comment\">// Get ImageData in the canvas color space (Display P3).\n</span><span class=\"identifier\">imageData</span> <span class=\"operator\">=</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">getImageData</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);\n<span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">imageData</span>.<span class=\"identifier\">colorSpace</span>);  <span class=\"comment\">// \"display-p3\"\n</span><span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>([...<span class=\"identifier\">imageData</span>.<span class=\"identifier\">data</span>]);   <span class=\"comment\">// [128, 0, 0, 255]\n</span>\n<span class=\"comment\">// Get ImageData in Display P3 explicitly.\n</span><span class=\"identifier\">imageData</span> <span class=\"operator\">=</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">getImageData</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n<span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">imageData</span>.<span class=\"identifier\">colorSpace</span>);  <span class=\"comment\">// \"display-p3\"\n</span><span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>([...<span class=\"identifier\">imageData</span>.<span class=\"identifier\">data</span>]);   <span class=\"comment\">// [128, 0, 0, 255]\n</span>\n<span class=\"comment\">// Get ImageData converted to sRGB.\n</span><span class=\"identifier\">imageData</span> <span class=\"operator\">=</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">getImageData</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"srgb\"</span> });\n<span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">imageData</span>.<span class=\"identifier\">colorSpace</span>);  <span class=\"comment\">// \"srgb\"\n</span><span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>([...<span class=\"identifier\">imageData</span>.<span class=\"identifier\">data</span>]);   <span class=\"comment\">// [141, 0, 0, 255]\n</span></code></pre>\n<p>The <code>ImageData</code> constructor similarly takes an optional options object with a <code>colorSpace</code> key.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">context</span> <span class=\"operator\">=</span> <span class=\"identifier\">canvas</span>.<span class=\"identifier\">getContext</span>(<span class=\"string\">\"2d\"</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n\n<span class=\"comment\">// Create and fill an ImageData with full Display P3 yellow.\n</span><span class=\"keyword type\">let</span> <span class=\"identifier\">imageData</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">ImageData</span>(<span class=\"number\">10</span>, <span class=\"number\">10</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n<span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"identifier\">i</span> <span class=\"operator\">&lt;</span> <span class=\"number\">10</span> <span class=\"operator\">*</span> <span class=\"number\">10</span> <span class=\"operator\">*</span> <span class=\"number\">4</span>; <span class=\"operator\">+</span><span class=\"operator\">+</span><span class=\"identifier\">i</span>)\n    <span class=\"identifier\">imageData</span>.<span class=\"identifier\">data</span>[<span class=\"identifier\">i</span>] <span class=\"operator\">=</span> [<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>][<span class=\"identifier\">i</span> <span class=\"operator\">%</span> <span class=\"number\">4</span>];\n\n<span class=\"identifier\">context</span>.<span class=\"identifier\">putImageData</span>(<span class=\"identifier\">imageData</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);\n</code></pre>\n<p>As when drawing shapes using colors of a different color space, any mismatch between the <code>ImageData</code> and the target canvas color space will cause <code>putImageData</code> to perform a conversion and potentially clamp the resulting pixels.</p>\n<h2>Serializing canvas content</h2>\n<p>The <code>toDataURL</code> and <code>toBlob</code> methods on a <code>canvas</code> DOM element produce a raster image with the canvas contents. In WebKit, these methods now embed an appropriate color profile in the generated PNG or JPEG when called on a Display P3 canvas, ensuring that the full range of color is preserved.</p>\n<h2>Drawing wide gamut images</h2>\n<p>Like <code>putImageData</code>, the <code>drawImage</code> method will perform any color space conversion needed when drawing an image whose color space differs from that of the canvas. Any color profile used by a raster image referenced by an <code>img</code>, and any color space information in a video referenced by a <code>video</code> (be it a video file or a WebRTC stream), will be honored when drawn to a canvas. This ensures that when drawing into a canvas whose color space matches the display’s (be that Display P3 or sRGB), the source image/video and the canvas pixels will look the same.</p>\n<p>Here is an interactive demonstration of using canvas to make a sliding tile puzzle. The tiles are drawn by applying a clip path and calling <code>drawImage</code> pointing to the <code>img</code> element on the left, which references a wide gamut JPEG. Toggling the checkbox shows how the colors are muted when an sRGB canvas is used.</p>\n<figure id=\"puzzle\" class=\"widescreen mattewhite aligncenter\">\n<p><iframe loading=\"lazy\" src=\"https://webkit.org/blog-files/wide-gamut-canvas/puzzle.html\" width=\"350\" height=\"250\"></iframe><figcaption>Sliding tile puzzle. Toggling the checkbox will change whether an sRGB or a Display P3 canvas is used. (<a href=\"https://webkit.org/blog-files/wide-gamut-canvas/puzzle.html\">View as standalone page.</a>)</figcaption></figure>\n<h2>Web Inspector support</h2>\n<p>Web Inspector also now shows color space information for canvases to help ensure your canvases’ backing stores are in the expected color space.</p>\n<figure class=\"image\"><picture title=\"\"><source media=\"(prefers-color-scheme: dark)\" srcset=\"/wp-content/uploads/Overview-Dark-1024x654.png 2x\" class=\"wp-image-12126\"><img srcset =\"/wp-content/uploads/Overview-Light-1024x654.png 2x\" alt=\"\" class=\"wp-image-12125\" /></picture></figure>\n<p>In the Graphics tab, the Canvases Overview will display the color space for each canvas next to the context type (e.g. 2D) on each canvas overview tile.</p>\n<figure class=\"image\"><picture title=\"\"><source media=\"(prefers-color-scheme: dark)\" srcset=\"/wp-content/uploads/Details-Dark-1024x654.png 2x\" class=\"wp-image-12128\"><img srcset =\"/wp-content/uploads/Details-Light-1024x654.png 2x\" alt=\"\" class=\"wp-image-12127\" /></picture></figure>\n<p>After clicking on a Canvas overview tile to inspect it, the color space is shown in the Details Sidebar in the Attributes section.</p>\n<h2>Browser support</h2>\n<p>Wide gamut canvas is supported in the macOS and iOS ports of WebKit as of <a href=\"https://trac.webkit.org/changeset/283541/webkit\">r283541</a>, and is available in Safari on:</p>\n<ul>\n<li>macOS Monterey 12.1 and above</li>\n<li>iOS 15.1 and above</li>\n</ul>\n<p>Safari is the first browser to support drawing shapes, text, gradients, and shadows with wide gamut CSS colors on Display P3 canvases. All other features, including <code>getImageData</code>, <code>putImageData</code>, and <code>drawImage</code> on Display P3 canvases, are supported in Safari and in Chrome 94 and above.</p>\n<h2>Feature detection</h2>\n<p>There are a few techniques you can use to detect whether wide gamut display and canvas support is available.</p>\n<p><strong>Display support:</strong> To check whether the display supports Display P3 colors, use the <code>color-gamut</code> media query.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">function</span> <span class=\"identifier\">displaySupportsP3Color</span>() {\n    <span class=\"keyword control\">return</span> <span class=\"identifier\">matchMedia</span>(<span class=\"string\">\"(color-gamut: p3)\"</span>).<span class=\"identifier\">matches</span>;\n}\n</code></pre>\n<p><strong>Canvas color space support:</strong> To check whether the browser supports wide gamut canvases, try creating one and checking the resulting color space.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">function</span> <span class=\"identifier\">canvasSupportsDisplayP3</span>() {\n    <span class=\"keyword type\">let</span> <span class=\"identifier\">canvas</span> <span class=\"operator\">=</span> <span class=\"identifier\">document</span>.<span class=\"identifier\">createElement</span>(<span class=\"string\">\"canvas\"</span>);\n    <span class=\"keyword control\">try</span> {\n        <span class=\"comment\">// Safari throws a TypeError if the colorSpace option is supported, but\n</span>        <span class=\"comment\">// the system requirements (minimum macOS or iOS version) for Display P3\n</span>        <span class=\"comment\">// support are not met.\n</span>        <span class=\"keyword type\">let</span> <span class=\"identifier\">context</span> <span class=\"operator\">=</span> <span class=\"identifier\">canvas</span>.<span class=\"identifier\">getContext</span>(<span class=\"string\">\"2d\"</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n        <span class=\"keyword control\">return</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">getContextAttributes</span>().<span class=\"identifier\">colorSpace</span> <span class=\"operator\">=</span><span class=\"operator\">=</span> <span class=\"string\">\"display-p3\"</span>;\n    } <span class=\"keyword control\">catch</span> {\n    }\n    <span class=\"keyword control\">return</span> <span class=\"keyword literal\">false</span>;\n}\n</code></pre>\n<p><strong>CSS Color Module Level 4 syntax support:</strong> To check whether the browser supports specifying wide gamut colors on canvas, try setting one and checking it wasn’t ignored.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">function</span> <span class=\"identifier\">canvasSupportsWideGamutCSSColors</span>() {\n    <span class=\"keyword type\">let</span> <span class=\"identifier\">context</span> <span class=\"operator\">=</span> <span class=\"identifier\">document</span>.<span class=\"identifier\">createElement</span>(<span class=\"string\">\"canvas\"</span>).<span class=\"identifier\">getContext</span>(<span class=\"string\">\"2d\"</span>);\n    <span class=\"keyword type\">let</span> <span class=\"identifier\">initialFillStyle</span> <span class=\"operator\">=</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span>;\n    <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">=</span> <span class=\"string\">\"color(display-p3 0 1 0)\"</span>;\n    <span class=\"keyword control\">return</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">!</span><span class=\"operator\">=</span> <span class=\"identifier\">initialFillStyle</span>;\n}\n</code></pre>\n<h2>Future work</h2>\n<p>There are a few areas where wide gamut canvas support could be improved.</p>\n<ul>\n<li>2D canvas still exposes image data as 8 bit RGBA values through <code>ImageData</code> objects. It may be useful to support other pixel formats for a greater color depth, such as 16 bit integers, or single precision or half precision floating point values, especially when wider color gamuts are used, since increased precision can help avoid banding artifacts. This has been proposed in an <a href=\"https://github.com/whatwg/html/issues/4167\">HTML Standard issue</a>.</li>\n<li>The two predefined color spaces that are supported are sRGB and Display P3, but as High Dynamic Range videos and displays that support HDR become more common, it’s worth consdering allowing 2D canvas to use these and other color spaces too. See <a href=\"https://www.w3.org/Graphics/Color/Workshop/slides/talk/cameron\">this presentation at the W3C Workshop on Wide Color Gamut and High Dynamic Range for the Web</a> from earlier this year, which talks about proposed new color space and HDR support.</li>\n<li>Canvas can be used with context types other than 2D, such as WebGL and WebGPU. A proposal for <a href=\"https://www.w3.org/Graphics/Color/Workshop/slides/talk/russell\">wide gamut and HDR support in these contexts</a> was presented at that same workshop.</li>\n</ul>\n<h2>In summary</h2>\n<p>WebKit now has support for creating 2D canvas contexts using the Display P3 color space, allowing authors to make best use of the displays that are becoming increasingly common. This feature is enabled in Safari on macOS Monterey 12.1 and iOS 15.1.</p>\n<p>If you have any comments or questions about the feature, please feel free to send me a message at <a href=\"https://twitter.com/heycam\">@heycam</a>, and more general comments can be sent to the <a href=\"https://twitter.com/webkit\">@webkit</a> Twitter account.</p>\n<h2>Further reading</h2>\n<ul>\n<li><a href=\"https://webkit.org/blog/6682/improving-color-on-the-web/\">Improving Color on the Web</a> (Dean Jackson, WebKit blog)</li>\n<li><a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\">Wide Gamut Color in CSS with Display-P3</a> (Nikita Vasilyev, WebKit blog)</li>\n<li><a href=\"https://drafts.csswg.org/css-color-4/\">CSS Color Module Level 4</a> (W3C)</li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/canvas.html#2dcontext\">HTML Standard &mdash; The 2D rendering context</a></a> (WHATWG)</li>\n<li><a href=\"https://www.w3.org/Graphics/Color/Workshop/\">W3C Workshop on Wide Color Gamut and High Dynamic Range for the Web</a> (W3C)</li>\n</ul>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[New WebKit Features in Safari 15.2]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12140/new-webkit-features-in-safari-15-2/\" />\n\n\t\t<id>https://webkit.org/?p=12140</id>\n\t\t<updated>2021-12-15T16:46:51Z</updated>\n\t\t<published>2021-12-13T19:13:38Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"News\" />\n\t\t<summary type=\"html\"><![CDATA[The internet has always been about communication and collaboration.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12140/new-webkit-features-in-safari-15-2/\"><![CDATA[<p>The internet has always been about communication and collaboration. It started with asynchronous messages made of text. As it matured, the internet became real-time. Then the web came along, adding images, and later, video. Websites provided a means to publish, to broadcast, to run stores, to gather communities and create worlds.</p>\n<p>Now, the web is maturing to the point where web apps make rich collaboration experiences possible — including digital creation. Recent updates to WebKit bring a number of improvements to Safari 15.2 that focus on supporting creative applications and leveraging the incredible power of today’s hardware.</p>\n<h3>WebAssembly Enhancements</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly\">Web Assembly (Wasm)</a> is a low-level assembly language that allows a multitude of programming languages like C/C++, C#, Objective-C, Swift, Python, Java or even Cobol to be compiled to run on the web at near native speed — without the user needing to install anything special. It’s designed to work alongside of JavaScript, allowing sites to use both together. Wasm provides the tools needed to bring powerful software applications to the web.</p>\n<p>In Safari 15.2, the addressable memory for Wasm has been expanded to 4GB, opening up possibilities for bigger and more powerful applications. The addition of zero-cost <a href=\"https://github.com/WebAssembly/exception-handling/blob/master/proposals/exception-handling/Exceptions.md\">exception handling</a> also provides potential performance gains.</p>\n<h3>COOP/COEP  HTTP Headers</h3>\n<p>Shared memory provides powerful functionality for native applications, but on the web, such power must be balanced with strong security protections.  <code>SharedArrayBuffer</code> was supported in WebKit for Safari 10.1–11, but was disabled along with other browsers due to the risk of using it for speculative execution attacks like Spectre.</p>\n<p>Safari 15.2 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\"><code>Cross-Origin-Opener-Policy</code> (COOP)</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\"><code>Cross-Origin-Embedder-Policy</code> (COEP)</a> HTTP response headers. Sites can adopt these headers to opt into process isolation and be better protected. If sites serve both <code>Cross-Origin-Opener-Policy: same-origin</code> and <code>Cross-Origin-Embedder-Policy: require-corp</code>, they are now able to use SharedArrayBuffer and Wasm threading again.</p>\n<h3>Wide gamut support for Canvas</h3>\n<p>These days modern creative tools depend on amazing camera and gorgeous displays. Yet, most colors on the Web today are sRGB colors, which match the limited color capabilities of computer monitors from the late 1990s. The human visual system can perceive a much broader range of colors. Today’s modern displays reproduce the colors of the Display P3 gamut, with significantly higher saturation than sRGB.</p>\n<p>Since 2016, WebKit has supported wide color images and video, and last year became <a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\">the first browser engine to implement the new color syntax</a> defined in <a href=\"https://drafts.csswg.org/css-color-4/\">CSS Color Module Level 4</a>. One notable omission in wide gamut color support was in the HTML <code>canvas</code> element. Earlier this year, a proposal for support was added to the HTML standard, and now, in Safari 15.2, WebKit adds wide gamut support — including Display P3 — for use in <code>canvas</code>.</p>\n<p>Read more about the details, with demos of stunning results, in <a href=\"https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/\">Wide Gamut 2D Graphics using HTML Canvas</a>.</p>\n<h3>More information</h3>\n<p>For more on what’s in Safari 15.2, including bug fixes, see the <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-15_2-release-notes\">Safari 15.2 Release Notes</a>.</p>\n<h3>Availability</h3>\n<p>Safari 15.2 is available on macOS Monterey, macOS Big Sur and macOS Catalina. To update on macOS, go to Apple menu  > System Preferences, and click Software Update.</p>\n<p>Safari 15.2 is available on iOS and iPadOS 15.2. To update, go to Settings > General, then tap Software Update.</p>\n<h3>Feedback</h3>\n<p>If you run into issues, we welcome your <a href=\"https://bugreport.apple.com/\">bug reports</a> for Safari, or <a href=\"https://bugs.webkit.org/\">WebKit bugs</a> for web content issues. Send us a tweet <a href=\"https://twitter.com/webkit\">@webkit</a> to share your thoughts on this release.</p>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Release Notes for Safari Technology Preview 136]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12137/release-notes-for-safari-technology-preview-136/\" />\n\n\t\t<id>https://webkit.org/?p=12137</id>\n\t\t<updated>2021-12-08T23:03:15Z</updated>\n\t\t<published>2021-12-08T23:03:15Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Safari Technology Preview\" />\n\t\t<summary type=\"html\"><![CDATA[Safari Technology Preview Release 136 is now available for download for macOS Big Sur and betas of macOS Monterey.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12137/release-notes-for-safari-technology-preview-136/\"><![CDATA[<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 136 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=285101&amp;rev=285788&amp;limit=687\">285101-285788</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>CSS</h3>\n<ul>\n<li>Added support for <code>contain: paint</code> (<a href=\"https://trac.webkit.org/changeset/285583/webkit/\">r285583</a>)</li>\n<li>Added support for the <code>revert-layer</code> value (<a href=\"https://trac.webkit.org/changeset/285624/webkit/\">r285624</a>)</li>\n<li>Added <code>flex-basis: content</code> support (<a href=\"https://trac.webkit.org/changeset/285709/webkit/\">r285709</a>)</li>\n<li>Fixed <code>::slotted</code> element style to invalidate correctly in nested case (<a href=\"https://trac.webkit.org/changeset/285211/webkit/\">r285211</a>)</li>\n<li>Fixed <code>::slotted</code> to not match an active <code>&lt;slot&gt;</code> (<a href=\"https://trac.webkit.org/changeset/285209/webkit/\">r285209</a>)</li>\n<li>Fixed <code>:host::part(foo)</code> selector to select elements inside shadow roots (<a href=\"https://trac.webkit.org/changeset/285262/webkit/\">r285262</a>)</li>\n<li>Fixed a mask or isolation to set <code>transform-style</code> to <code>flat</code> (<a href=\"https://trac.webkit.org/changeset/285482/webkit/\">r285482</a>)</li>\n<li>Fixed <code>border-radius</code> inline style to serialize with valid syntax (<a href=\"https://trac.webkit.org/changeset/285235/webkit/\">r285235</a>)</li>\n<li>Fixed <code>font-synthesis</code> inline and computed style to be in canonical order (<a href=\"https://trac.webkit.org/changeset/285383/webkit/\">r285383</a>, <a href=\"https://trac.webkit.org/changeset/285384/webkit/\">r285384</a>)</li>\n<li>Fixed rendering bug with <code>height: min-content</code>, <code>position: absolute</code>, and <code>box-sizing: border-box</code> (<a href=\"https://trac.webkit.org/changeset/285495/webkit/\">r285495</a>)</li>\n<li>Fixed the default computed value for <code>content</code> to be <code>none</code> for <code>::before</code> and <code>::after</code> (<a href=\"https://trac.webkit.org/changeset/285621/webkit/\">r285621</a>)</li>\n<li>Implemented parsing and animation support for <code>offset-path</code> (<a href=\"https://trac.webkit.org/changeset/285343/webkit/\">r285343</a>)</li>\n<li>Implemented Scroll To Text Fragment directive parsing (<a href=\"https://trac.webkit.org/changeset/285528/webkit/\">r285528</a>)</li>\n<li>Implemented <code>transform: perspective(none)</code> (<a href=\"https://trac.webkit.org/changeset/285255/webkit/\">r285255</a>)</li>\n<li>Removed non-standard <code>-webkit-border-fit</code> CSS property (<a href=\"https://trac.webkit.org/changeset/285615/webkit/\">r285615</a>)</li>\n<li>Updated the <code>content-size</code> grid width before laying out a grid item with block constraints and <code>aspect-ratio</code> (<a href=\"https://trac.webkit.org/changeset/285497/webkit/\">r285497</a>)</li>\n</ul>\n<h3>GPU Process</h3>\n<ul>\n<li>Fixed enabling &#8220;media source inline painting&#8221; by default to work when using GPU Process for media (<a href=\"https://trac.webkit.org/changeset/285410/webkit/\">r285410</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Implemented IntlNumberFormat v3 (<code>formatRangeToParts</code> is not implemented yet) (<a href=\"https://trac.webkit.org/changeset/285418/webkit/\">r285418</a>)</li>\n<li>Implemented <code>Temporal.Instant</code> (<a href=\"https://trac.webkit.org/changeset/285178/webkit/\">r285178</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Implemented custom element definition&#8217;s <em>disable shadow</em> flag (<a href=\"https://trac.webkit.org/changeset/285740/webkit/\">r285740</a>)</li>\n<li>Fixed the <code>cssText</code> property for a computed style to return an empty string (<a href=\"https://trac.webkit.org/changeset/285604/webkit/\">r285604</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed showing languages and subtitles tracks button and menu for <code>&lt;audio&gt;</code> (<a href=\"https://trac.webkit.org/changeset/285216/webkit/\">r285216</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Added support for composite operations for software animations (<a href=\"https://trac.webkit.org/changeset/285397/webkit/\">r285397</a>)</li>\n<li>Fixed accelerated animations with a single keyframe not accounting for prior forward-filling animations (<a href=\"https://trac.webkit.org/changeset/285728/webkit/\">r285728</a>)</li>\n<li>Fixed discrete animation of <code>content</code> property not working (<a href=\"https://trac.webkit.org/changeset/285423/webkit/\">r285423</a>)</li>\n<li>Improved additivity support when animating the transform property (<a href=\"https://trac.webkit.org/changeset/285631/webkit/\">r285631</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Implemented <code>add_virtual_authenticator</code> and <code>remove_virtual_authenticator</code> for WebDriver (<a href=\"https://trac.webkit.org/changeset/285267/webkit/\">r285267</a>)</li>\n</ul>\n<h3>Private Click Measurement</h3>\n<ul>\n<li>Fixed occasionally dropped attribution reports for Private Click Measurement (<a href=\"https://trac.webkit.org/changeset/285170/webkit/\">r285170</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Added support for <code>manifest_version</code> 3 and <code>service_worker</code> background scripts, while also supporting the option of using non-persistent background pages</li>\n<li>Added support for script and style injection via the <code>browser.scripting</code> APIs</li>\n<li>Added support for dynamic and session rules via the <code>browser.declarativeNetRequest</code> APIs</li>\n<li>Fixed an issue with new tab pages not being remembered when switching from Favorites</li>\n<li>Fixed an issue with long extension descriptions causing the title to be cut-off in Preferences</li>\n<li>Enforces limits on the size and number of items in extension sync storage</li>\n</ul>\n<h3>Other Bugs</h3>\n<ul>\n<li>Fixed opening local HTML files when the Develop menu was enabled (<a href=\"https://trac.webkit.org/changeset/285130/webkit/\">r285130</a>)</li>\n<li>Stopped using a timer to dispatch the source element&#8217;s error event asynchronously (<a href=\"https://trac.webkit.org/changeset/285413/webkit/\">r285413</a>)</li>\n</ul>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[PCM for In-App Direct Response Advertising]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12042/pcm-for-in-app-direct-response-advertising/\" />\n\n\t\t<id>https://webkit.org/?p=12042</id>\n\t\t<updated>2021-11-16T17:06:04Z</updated>\n\t\t<published>2021-11-16T17:06:04Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Privacy\" />\n\t\t<summary type=\"html\"><![CDATA[Private Click Measurement (PCM) can now be used for in-app direct response advertising using SFSafariViewController.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12042/pcm-for-in-app-direct-response-advertising/\"><![CDATA[<p>Private Click Measurement (PCM) can now be used for in-app direct response advertising using SFSafariViewController. Try it out in our iOS 15.2 beta.</p>\n<h2>What is PCM?</h2>\n<p>PCM is a proposed web standard for measuring the effectiveness of click-through advertising in a privacy-preserving way. It allows for 8 bits of data on the click source site to be combined with 4 bits of data on the click destination site to measure which advertising is driving sales. The combined 8+4 bits of data is sent to both the click source and destination in an attribution report that doesn’t carry any user or device identifiers. The net result is a report that says “Someone who clicked ad X on website A later converted with value Y on website B.”</p>\n<p>PCM shipped in iOS/iPadOS 14.5 and in Safari 14.1 on macOS. Its privacy-preserving nature means it can be used without getting the user’s permission to track according to <a href=\"https://developer.apple.com/app-store/user-privacy-and-data-use/\">AppTrackingTransparency</a>.</p>\n<h2>What is SFSafariViewController?</h2>\n<p><a href=\"https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller\">SFSafariViewController</a> is a ready-built in-app web browser on iOS/iPadOS with full-fledged Safari features such as Reader, AutoFill, Fraudulent Website Detection, content blocking, and bookmarks. User activity and interaction with SFSafariViewController are not visible to your app which means users can safely browse the web in it and you do not need to secure data between your app and SFSafariViewController.</p>\n<h2>On Direct Response Advertising</h2>\n<p>Our <a href=\"https://webkit.org/blog/11529/introducing-private-click-measurement-pcm/\">introductory blog post on PCM</a> featured two important FAQ entries on app-to-web advertising – on the subject of taking the user to the device’s browser and on the subject of an in-app experience.</p>\n<h3>When to Take the User To the Device’s Browser</h3>\n<p>PCM app-to-web in iOS 14.5 had to take the user to the device’s browser. This was designed to support re-engagement. Stored clicks in PCM are valid for 7 days and customers who are ready to take action only after a few hours or days, will most likely go find the merchant website in their browser. They’ll either look up the tab where they left off, use a bookmark they might have saved, use their search provider to find the right webpage, or enter the website’s address directly in the URL bar.</p>\n<p>For the stored click data to be readily available when the user re-engages in this fashion, the initial click needs to take the user to their browser. This is still true going forward.</p>\n<h3>When to Handle the Tap In-App</h3>\n<p>Another form of click-through advertising is called direct response. In such cases, the user is not expected to think about converting for an extended period of time, but rather take action directly on the webpage they land on. It could be a limited offer or a product priced so that the user doesn’t feel like they have to think it over.</p>\n<p>Developers and advertisers have told us they want to be able to provide more of an in-app experience for direct response advertising, rather than take the user to the device’s browser. They want a seamless in-app experience for users who tap on an ad, check out the product page, decide to buy or not, and then want to go back to the hosting app.</p>\n<p>Our intro blog post covered this request in the FAQ section, and we said “We are interested in this but don’t have a solution yet.” Today we have a solution. PCM is now capable of supporting in-app advertising with new API for SFSafariViewController.</p>\n<h2>PCM App-to-Web with SFSafariViewController</h2>\n<p><a href=\"https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller\">SFSafariViewController</a> provides a great in-app browsing experience where the user can store Safari bookmarks that can sync across devices, has access to autofill of credentials and payment card info, and Apple Pay. It is simply a great place to take the user as part of direct response advertising.</p>\n<h3>Ephemeral Clicks to Prevent Click Fraud</h3>\n<p>PCM will only store click data and schedule an attribution report if the user triggers a conversion in the SFSafariViewController that they opened through the click. A tap which navigates to a website in SFSafariViewController <em>without a matching triggering event</em> will not be stored. As a result, an instance of SFSafariViewController can only hold one non-converted click at a time, whereas all converted clicks will be stored and result in reports.</p>\n<p>This ensures that a hosting app cannot speculatively store clicks in its SFSafariViewController for fraudulent reasons. It also ensures that this use of PCM really is geared toward direct response advertising.</p>\n<h3>Attributions are Per Hosting App</h3>\n<p>Taps in different apps navigating the user to the same advertised website do not affect each other. Every app gets its own attribution. Again, this feature is for direct response advertising so a customer who buys a product twice based on ad clicks in two different apps will generate two attribution reports.</p>\n<h3>Attribution Reports Don’t Require Your App to Run</h3>\n<p>One particular challenge for the kind of delayed attribution reporting PCM uses is what to do if the user doesn’t use the hosting app frequently or doesn’t use it around the time when the report is supposed to be sent out. We have made sure that pending attribution reports from PCM app-to-web with SFSafariViewController are sent independent of if the hosting app where the click happened is running or not.</p>\n<h3>The API</h3>\n<p>As shown in our <a href=\"https://webkit.org/blog/11529/introducing-private-click-measurement-pcm/\">introductory blog post on PCM</a>, apps can already use Private Click Measurement with Safari by putting a <code>UIEventAttribution</code> on a <code>UISceneOpenExternalURLOptions</code> and using it with UIScene&#8217;s <code>openURL:options:completionHandler:</code>.</p>\n<p>In iOS 15.2 beta, a new attribute of type <code>UIEventAttribution</code> is added to the existing class <code>SFSafariViewControllerConfiguration</code>:</p>\n<pre><code>@available(iOS 15.2, *)\n  @NSCopying var eventAttribution: UIEventAttribution?\n</code></pre>\n<p>You can optionally use it when opening a URL in SFSafariViewController, like this:</p>\n<pre><code>func didTapOnAdWithIdentifier(advertisementIdentifier: UInt8, url: URL) {\n    let attribution = UIEventAttribution(\n        sourceIdentifier: advertisementIdentifier, \n        destinationURL: url, \n        sourceDescription: \"Ad for toy XYZ.\",\n        purchaser: \"Toy Example Company\")\n    let configuration = SFSafariViewController.Configuration()\n    configuration.eventAttribution = attribution\n    present(SFSafariViewController(url: url, configuration: configuration), animated: false)\n}\n</code></pre>\n<p>When an <code>UIEventAttribution</code> is part of the configuration, SafariViewService checks that a tap on an <code>UIEventAttributionView</code> preceded the opening of SFSafariViewController to guarantee <em>click-through</em> attribution. Then the information from the <code>UIEventAttribution</code> object is checked before it’s given to WebKit for processing.</p>\n<p>Private Click Measurement works as previously from that point.</p>\n<h2>Debugging Your App</h2>\n<p>See “Testing and Debugging” in our <a href=\"https://webkit.org/blog/11529/introducing-private-click-measurement-pcm/\">introductory blog post on PCM</a> for how to turn on PCM Debug Mode.</p>\n<p>Make sure to restart your app after enabling PCM Debug Mode with SFSafariViewController.  If you are having trouble getting PCM Debug Mode to turn on or off, try restarting the device.</p>\n<h2>Please Provide Feedback</h2>\n<p>We really appreciate all the developer and ad tech feedback we’ve received so far on Private Click Measurement. Prioritizing PCM for in-app measurement was the result of such feedback. There are three ways for you to continue to tell us what you think:</p>\n<ul>\n<li>The <a href=\"https://github.com/privacycg/private-click-measurement/issues\">standards proposal repository</a> in the W3C Privacy Community Group for anything related to the specified web parts of PCM, i.e. feedback on the proposed standard as it would work in any web engine.</li>\n<li><a href=\"https://bugs.webkit.org/\">https://bugs.webkit.org</a> for anything specific to the WebKit implementation of PCM.</li>\n<li><a href=\"https://feedbackassistant.apple.com/\">Apple Feedback Assistant</a> for anything specific to the UIKit or SFSafariViewController APIs for PCM.</li>\n</ul>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Release Notes for Safari Technology Preview 135]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12040/release-notes-for-safari-technology-preview-135/\" />\n\n\t\t<id>https://webkit.org/?p=12040</id>\n\t\t<updated>2021-11-16T17:00:22Z</updated>\n\t\t<published>2021-11-15T21:30:51Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Safari Technology Preview\" />\n\t\t<summary type=\"html\"><![CDATA[Safari Technology Preview Release 135 is now available for download for macOS Big Sur and betas of macOS Monterey.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12040/release-notes-for-safari-technology-preview-135/\"><![CDATA[<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 135 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=284370&amp;rev=285101&amp;limit=731\">284370-285101</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector and Web Driver</h3>\n<ul>\n<li>Fixed &#8220;testForLinkLabels&#8221; Accessibility audit to ignore anchors if <code>aria-hidden</code> (<a href=\"https://trac.webkit.org/changeset/284986/webkit/\">r284986</a>)</li>\n<li>Added support for the <code>acceptInsecureCerts</code> capability (<a href=\"https://trac.webkit.org/changeset/285164/webkit\">r285164</a>)</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Media queries affect Cascade Layer order (<a href=\"https://trac.webkit.org/changeset/284859/webkit/\">r284859</a>)</li>\n<li>Enabled <code>accent-color</code> by default (<a href=\"https://trac.webkit.org/changeset/284634/webkit/\">r284634</a>)</li>\n<li>Added support for small <code>svw</code>/<code>svh</code>/<code>svmin</code>/<code>svmax</code>, large <code>lvw</code>/<code>lvh</code>/<code>lvmin</code>/<code>lvmax</code>, and dynamic <code>dvw</code>/<code>dvh</code>/<code>dvmin</code>/<code>dvmax</code> viewport units (<a href=\"https://trac.webkit.org/changeset/284628/webkit/\">r284628</a>)</li>\n<li>Added <code>flex-basis: content</code> support (<a href=\"https://trac.webkit.org/changeset/284440/webkit/\">r284440</a>)</li>\n<li>Added support for <code>contain: style</code> for counters (<a href=\"https://trac.webkit.org/changeset/284642/webkit/\">r284642</a>, <a href=\"https://trac.webkit.org/changeset/284755/webkit/\">r284755</a>)</li>\n<li>Added support for <code>::before</code> and <code>::after</code> pseudo elements after <code>::slotted</code> (<a href=\"https://trac.webkit.org/changeset/284973/webkit/\">r284973</a>)</li>\n<li>Added support for more CSS properties for <code>::marker</code> (<a href=\"https://trac.webkit.org/changeset/284519/webkit/\">r284519</a>)</li>\n<li>Allowed <code>:is</code> and <code>:where</code> after all pseudo elements (<a href=\"https://trac.webkit.org/changeset/285054/webkit/\">r285054</a>)</li>\n<li>Made <code>:-webkit-any()</code> a synonym of <code>:is()</code> (<a href=\"https://trac.webkit.org/changeset/285032/webkit/\">r285032</a>)</li>\n<li>Fixed <code>::part(foo):hover</code> (<a href=\"https://trac.webkit.org/changeset/284865/webkit/\">r284865</a>)</li>\n<li>Serialized <code>:part()</code> argument as identifier (<a href=\"https://trac.webkit.org/changeset/284863/webkit/\">r284863</a>)</li>\n<li>Fixed <code>:host</code> invalidation when combined with pseudo classes in descendant position (<a href=\"https://trac.webkit.org/changeset/285100/webkit/\">r285100</a>)</li>\n<li>Prevented clamping flex base size with <code>min-height</code>, <code>max-height</code>, <code>min-width</code>, and <code>max-width</code> (<a href=\"https://trac.webkit.org/changeset/284397/webkit/\">r284397</a>)</li>\n<li>Fixed sizing of orthogonal elements with percentage margins (<a href=\"https://trac.webkit.org/changeset/284773/webkit/\">r284773</a>)</li>\n<li>Fixed <code>-webkit-background-clip: text</code> to paint correctly for inline box spanning multiple lines (<a href=\"https://trac.webkit.org/changeset/284380/webkit/\">r284380</a>)</li>\n<li>Fixed <code>box-shadow</code> and <code>text-shadow</code> to yield float values while interpolating (<a href=\"https://trac.webkit.org/changeset/284437/webkit/\">r284437</a>)</li>\n<li>Fixed CSS serialization affecting <code>grid-auto-flow</code> (<a href=\"https://trac.webkit.org/changeset/284876/webkit/\">r284876</a>)</li>\n<li>Fixed percentages on orthogonal replaced children (<a href=\"https://trac.webkit.org/changeset/284548/webkit/\">r284548</a>)</li>\n<li>Fixed the <code>border-radius</code> value from <code>.style</code> to be readable when it includes a <code>var()</code> (<a href=\"https://trac.webkit.org/changeset/285015/webkit/\">r285015</a>)</li>\n<li>Fixed opacity to flatten when combined with <code>transform-style: preserve-3d</code> (<a href=\"https://trac.webkit.org/changeset/285021/webkit/\">r285021</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Enabled lazy image loading by default (<a href=\"https://trac.webkit.org/changeset/284995/webkit/\">r284995</a>)</li>\n<li>Added support for <code>rel=\"noopener/noreferrer\"</code> on <code>&lt;form&gt;</code> elements (<a href=\"https://trac.webkit.org/changeset/284749/webkit/\">r284749</a>)</li>\n<li>Exposed MediaCapabilities to Workers (<a href=\"https://trac.webkit.org/changeset/284443/webkit/\">r284443</a>)</li>\n<li>Fixed <code>anchor.relList.supports(\"opener\")</code> to return <code>true</code> (<a href=\"https://trac.webkit.org/changeset/284745/webkit/\">r284745</a>)</li>\n<li>Fixed changing the <code>src</code> attribute of the <code>&lt;img&gt;</code> element inside an ImageDocument to trigger a load (<a href=\"https://trac.webkit.org/changeset/284901/webkit/\">r284901</a>)</li>\n<li>Fixed <code>document.open()</code> and friends to use the correct document as a source for reset document&#8217;s URL (<a href=\"https://trac.webkit.org/changeset/284758/webkit/\">r284758</a>)</li>\n<li>Fixed form navigations with <code>target=\"_blank\"</code> to not have an opener (<a href=\"https://trac.webkit.org/changeset/284821/webkit/\">r284821</a>)</li>\n<li>Fixed form submission to be cancelled if the form gets detached from inside the formdata event handler (<a href=\"https://trac.webkit.org/changeset/284660/webkit/\">r284660</a>)</li>\n<li>Fixed JavaScript URL result to be treated as UTF-8 bytes (<a href=\"https://trac.webkit.org/changeset/284934/webkit/\">r284934</a>)</li>\n<li>Fixed Origin of opaque <code>blob:</code> URLs to be null instead of an empty string (<a href=\"https://trac.webkit.org/changeset/284478/webkit/\">r284478</a>)</li>\n<li>Fixed selection <code>extend()</code> with no ranges to trigger an exception (<a href=\"https://trac.webkit.org/changeset/285084/webkit/\">r285084</a>)</li>\n<li>Fixed the intrinsic size of a picture image inside a template (<a href=\"https://trac.webkit.org/changeset/284667/webkit/\">r284667</a>)</li>\n<li>Updated appearance of <code>&lt;datalist&gt;</code> indicator (<a href=\"https://trac.webkit.org/changeset/284626/webkit/\">r284626</a>)</li>\n</ul>\n<h3>Scrolling</h3>\n<ul>\n<li>Fixed misplaced <code>position: fixed</code> content with async-scrollable iframes when switching tabs (<a href=\"https://trac.webkit.org/changeset/284738/webkit/\">r284738</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Ensured <code>CanvasRenderingContext2D.drawImage(video)</code> uses the right color space (<a href=\"https://trac.webkit.org/changeset/284439/webkit/\">r284439</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Changed to obtain consent to create a new credential when the platform authenticator is in <code>excludedCredentials.</code> This improves compliance with the WebAuthn spec (Step 3.1 of makeCredential). (<a href=\"https://trac.webkit.org/changeset/284413/webkit/\">r284413</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Added support for requestVideoFrameCallback API for MediaStreamTrack-based backends (<a href=\"https://trac.webkit.org/changeset/284528/webkit/\">r284528</a>)</li>\n<li>Fixed video appearing blank with only audio playing if video element isn&#8217;t appended to the DOM tree (<a href=\"https://trac.webkit.org/changeset/284741/webkit/\">r284741</a>)</li>\n<li>Updated WebM with invalid size to fail to load with error (<a href=\"https://trac.webkit.org/changeset/284434/webkit/\">r284434</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Decreased WebRTC latency by pulling data more often (<a href=\"https://trac.webkit.org/changeset/284860/webkit/\">r284860</a>)</li>\n<li>Changed to fallback to SW decoder in case of VP9-SVC (<a href=\"https://trac.webkit.org/changeset/284523/webkit/\">r284523</a>)</li>\n<li>Changed to always set the color space for incoming H.264/265 streams (<a href=\"https://trac.webkit.org/changeset/284433/webkit/\">r284433</a>)</li>\n<li>Ensured synchronized rendering of incoming audio tracks (<a href=\"https://trac.webkit.org/changeset/285027/webkit/\">r285027</a>)</li>\n<li>Fixed latent audio over peer connections when changing the output (<a href=\"https://trac.webkit.org/changeset/284674/webkit/\">r284674</a>)</li>\n</ul>\n<h3>WebGL</h3>\n<ul>\n<li>Fixed an issue where high-performance WebGL wasn&#8217;t getting the correct GPU (<a href=\"https://trac.webkit.org/changeset/284669/webkit/\">r284669</a>)</li>\n</ul>\n<h3>App Extensions</h3>\n<ul>\n<li>Fixed an issue where App Extension toolbar items would not remember their position or stay removed from the toolbar</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Fixed an issue where <code>browser.storage.sync</code> entries were saved into the <code>browser.storage.local</code> storage area. If unable to locate sync storage entries, check in the local storage area and do a one-time migration to the sync storage area</li>\n</ul>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Release Notes for Safari Technology Preview 134]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12033/release-notes-for-safari-technology-preview-134/\" />\n\n\t\t<id>https://webkit.org/?p=12033</id>\n\t\t<updated>2022-01-06T16:51:56Z</updated>\n\t\t<published>2021-10-27T20:59:31Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Safari Technology Preview\" />\n\t\t<summary type=\"html\"><![CDATA[Safari Technology Preview Release 134 is now available for download for macOS Big Sur and betas of macOS Monterey.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12033/release-notes-for-safari-technology-preview-134/\"><![CDATA[<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 134 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=282317&amp;rev=284370&amp;limit=2053\">282317-284370</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li><strong>Graphics Tab</strong>\n<ul>\n<li>Added showing color space for canvases in the Graphics tab on the overview cards (<a href=\"https://trac.webkit.org/changeset/283572/webkit/\">r283572</a>)</li>\n</ul>\n</li>\n<li><strong>Styles Tab</strong>\n<ul>\n<li>Changed to format style declarations after editing (<a href=\"https://trac.webkit.org/changeset/283723/webkit/\">r283723</a>)</li>\n</ul>\n</li>\n<li><strong>Other</strong>\n<ul>\n<li>Added context menu support for the tab content view (<a href=\"https://trac.webkit.org/changeset/283859/webkit/\">r283859</a>, <a href=\"https://trac.webkit.org/changeset/283921/webkit/\">r283921</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Enabled CSS Cascade Layers by default (<a href=\"https://trac.webkit.org/changeset/283218/webkit/\">r283218</a>)</li>\n<li>Unprefixed <code>-webkit-appearance</code> and added support for the <code>auto</code> value (<a href=\"https://trac.webkit.org/changeset/283858/webkit/\">r283858</a>, <a href=\"https://trac.webkit.org/changeset/284098/webkit/\">r284098</a>)</li>\n<li>Added support for the <code>x</code> resolution unit outside of <code>image-set</code> (<a href=\"https://trac.webkit.org/changeset/282396/webkit/\">r282396</a>)</li>\n<li>Added support for <code>text-decoration-skip-ink</code> (<a href=\"https://trac.webkit.org/changeset/282397/webkit/\">r282397</a>)</li>\n<li>Changed to consider <code>overflow-wrap: anywhere</code> when calculating <code>min-content</code> intrinsic sizes (<a href=\"https://trac.webkit.org/changeset/283493/webkit/\">r283493</a>)</li>\n<li>Fixed computed style for <code>transform-origin</code> on SVG boxes (<a href=\"https://trac.webkit.org/changeset/282379/webkit/\">r282379</a>)</li>\n<li>Fixed overflow to be computed with the actual logical bottom in CSS Grid (<a href=\"https://trac.webkit.org/changeset/282463/webkit/\">r282463</a>)</li>\n<li>Fixed RTL for an out of flow child in CSS Grid (<a href=\"https://trac.webkit.org/changeset/282340/webkit/\">r282340</a>)</li>\n<li>Fixed SVG linear gradients getting drawn incorrectly sometimes (<a href=\"https://trac.webkit.org/changeset/282443/webkit/\">r282443</a>)</li>\n<li>Fixed <code>radial-gradient</code> to accept <code>calc()</code> values that combine length and percent (<a href=\"https://trac.webkit.org/changeset/283561/webkit/\">r283561</a>)</li>\n<li>Implemented <code>exp</code>, and <code>log</code> functions in <code>calc</code> functions (<a href=\"https://trac.webkit.org/changeset/282795/webkit/\">r282795</a>)</li>\n<li>Implemented allowing <code>NaN</code>, <code>infinity</code>, and <code>-infinity</code> in <code>calc</code> (<a href=\"https://trac.webkit.org/changeset/283434/webkit/\">r283434</a>)</li>\n<li>Implemented <code>atan</code>, <code>acos</code>, <code>asin</code>, <code>atan2</code> in <code>calc</code> functions (<a href=\"https://trac.webkit.org/changeset/283013/webkit/\">r283013</a>)</li>\n<li>Updated CSS Cascade Layers with recent spec change: unlayered styles are highest priority  (<a href=\"https://trac.webkit.org/changeset/284182/webkit/\">r284182</a>)</li>\n<li>Updated <code>transform-origin</code> to not accept four lengths (<a href=\"https://trac.webkit.org/changeset/282359/webkit/\">r282359</a>)</li>\n</ul>\n<h3>Fonts</h3>\n<ul>\n<li>Enabled font palette support:\n<ul>\n<li>Added parsing support for <code>font-palette-values</code> (<a href=\"https://trac.webkit.org/changeset/282806/webkit/\">r282806</a>)</li>\n<li>Added parsing support for <code>font-palette</code> (<a href=\"https://trac.webkit.org/changeset/282851/webkit/\">r282851</a>)</li>\n<li>Added pushing <code>font-palette-values</code> data into CSSFontSelector (<a href=\"https://trac.webkit.org/changeset/282838/webkit/\">r282838</a>)</li>\n<li>Added support for CSSFontPaletteValuesRule.name (<a href=\"https://trac.webkit.org/changeset/283140/webkit/\">r283140</a>)</li>\n<li>Added Web Inspector support for <code>font-palette</code> (<a href=\"https://trac.webkit.org/changeset/282987/webkit/\">r282987</a>)</li>\n<li>Allowed <code>base-palette</code> can accept <code>\"light\"</code> or <code>\"dark\"</code> (<a href=\"https://trac.webkit.org/changeset/283398/webkit/\">r283398</a>)</li>\n<li>Changed CSSFontPaletteValuesRule to not be map-like (<a href=\"https://trac.webkit.org/changeset/283219/webkit/\">r283219</a>)</li>\n<li>Changed to align with CSS Fonts specification changes (<a href=\"https://trac.webkit.org/changeset/283130/webkit/\">r283130</a>)</li>\n<li>Fixed shadowing of <code>@font-palette-values</code> rules (<a href=\"https://trac.webkit.org/changeset/283756/webkit/\">r283756</a>)</li>\n<li>Handle CSSOM style mutation of <code>font-palette</code> and <code>font-palette-values</code> (<a href=\"https://trac.webkit.org/changeset/283032/webkit/\">r283032</a>, <a href=\"https://trac.webkit.org/changeset/283031/webkit/\">r283031</a>)</li>\n<li>Made negative integers in <code>@font-palette-values</code> invalid (<a href=\"https://trac.webkit.org/changeset/283197/webkit/\">r283197</a>, <a href=\"https://trac.webkit.org/changeset/283540/webkit/\">r283540</a>)</li>\n<li>Made sure empty font families do the right thing for font palettes (<a href=\"https://trac.webkit.org/changeset/283075/webkit/\">r283075</a>)</li>\n<li>Prevented parsing unimplemented font palette features (<a href=\"https://trac.webkit.org/changeset/283752/webkit/\">r283752</a>)</li>\n<li>Removed the <code>\"none\"</code> value from <code>font-palette</code> (<a href=\"https://trac.webkit.org/changeset/283536/webkit/\">r283536</a>)</li>\n<li>Renamed <code>override-color</code> to <code>override-colors</code> (<a href=\"https://trac.webkit.org/changeset/283159/webkit/\">r283159</a>)</li>\n<li>Required <code>font-families</code> inside <code>@font-palette-values</code> to be case insensitive (<a href=\"https://trac.webkit.org/changeset/283794/webkit/\">r283794</a>)</li>\n<li>Required font palette names to start with two hyphens (<a href=\"https://trac.webkit.org/changeset/283221/webkit/\">r283221</a>)</li>\n<li>Stopped parsing context-sensitive colors in <code>override-color</code> (<a href=\"https://trac.webkit.org/changeset/283537/webkit/\">r283537</a>)</li>\n</ul>\n</li>\n<li>Updated the implementation of the CSS Font Loading API to be closer to the spec and other browsers:</li>\n<li>Fixed <code>CSSFontFaceSrcValue.cssText</code> to be quoted consistently with other browsers (<a href=\"https://trac.webkit.org/changeset/282442/webkit/\">r282442</a>)</li>\n</ul>\n<h3>Scrolling</h3>\n<ul>\n<li>Enabled support for ScrollOptions&#8217; ScrollBehavior and CSS <code>scroll-behavior</code> properties (<a href=\"https://trac.webkit.org/changeset/284029/webkit/\">r284029</a>)</li>\n<li>Moved smooth scroll animations to run on the scrolling thread (<a href=\"https://trac.webkit.org/changeset/283871/webkit/\">r283871</a>)</li>\n<li>Fixed <code>scrollIntoView</code> to not take into account sticky positioning offsets (<a href=\"https://trac.webkit.org/changeset/283546/webkit/\">r283546</a>)</li>\n<li>Fixed properly redrawing a sticky element inside another sticky element on scroll (<a href=\"https://trac.webkit.org/changeset/284084/webkit/\">r284084</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Enabled 2D canvas color space support on Apple platforms (<a href=\"https://trac.webkit.org/changeset/283541/webkit/\">r283541</a>)</li>\n<li>Updated converting an SVG image for canvas <code>drawImage</code> to choose an appropriate color space (<a href=\"https://trac.webkit.org/changeset/283531/webkit/\">r283531</a>)</li>\n</ul>\n<h3>Dialog Element</h3>\n<ul>\n<li>The <code>&lt;dialog&gt;</code> element is now enabled by default (<a href=\"https://trac.webkit.org/changeset/284155/webkit/\">r284155</a>), also including:\n<ul>\n<li>support for the CSS <code>::backdrop</code> pseudo element</li>\n<li>support for the top layer</li>\n<li><code>&lt;form method=\"dialog\"&gt;</code> support</li>\n</ul>\n</li>\n<li>The <code>inert</code> attribute is available for testing behind an experimental flag with the same name</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Allowed WASM to use up to 4GB (<a href=\"https://trac.webkit.org/changeset/284330/webkit/\">r284330</a>)</li>\n<li>Implemented the WebAssembly exception handling proposal (<a href=\"https://trac.webkit.org/changeset/283852/webkit/\">r283852</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Enabled unlinked Baseline JIT for performance (<a href=\"https://trac.webkit.org/changeset/283139/webkit/\">r283139</a>)</li>\n<li>Fixed <code>Intl.DateTimeFormat#resolvedOptions</code> not to return detailed information of formatting if <code>dateStyle</code> or <code>timeStyle</code> is set (<a href=\"https://trac.webkit.org/changeset/283460/webkit/\">r283460</a>)</li>\n<li>Fixed <code>Intl.supportedValuesOf</code> to populate <code>emoji</code> and <code>eor</code> for collation (<a href=\"https://trac.webkit.org/changeset/282897/webkit/\">r282897</a>)</li>\n<li>Fixed syntactic production for <code>#x in expr</code> (<a href=\"https://trac.webkit.org/changeset/282968/webkit/\">r282968</a>)</li>\n<li>Optimized <code>JSON.parse</code> object creation (<a href=\"https://trac.webkit.org/changeset/282468/webkit/\">r282468</a>)</li>\n<li>Optimized put-by-val with for-in (<a href=\"https://trac.webkit.org/changeset/283098/webkit/\">r283098</a>)</li>\n<li>Optimized <code>JSON.stringify</code> property enumeration (<a href=\"https://trac.webkit.org/changeset/282707/webkit/\">r282707</a>)</li>\n<li>Refined RegExp#compile based on regexp-legacy-features proposal (<a href=\"https://trac.webkit.org/changeset/283874/webkit/\">r283874</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Enabled BroadcastChannel (<a href=\"https://trac.webkit.org/changeset/282426/webkit/\">r282426</a>)\n<ul>\n<li>Implemented top-origin and frame-origin partitioning for BroadcastChannel (<a href=\"https://trac.webkit.org/changeset/282366/webkit/\">r282366</a>)</li>\n</ul>\n</li>\n<li>Enabled Storage API by default (<a href=\"https://trac.webkit.org/changeset/284273/webkit/\">r284273</a>)</li>\n<li>Enabled FileSystemAccess and AccessHandle by default (<a href=\"https://trac.webkit.org/changeset/284131/webkit/\">r284131</a>)\n<ul>\n<li>Implemented FileSystemSyncAccessHandle <code>read()</code> and <code>write()</code> (<a href=\"https://trac.webkit.org/changeset/284059/webkit/\">r284059</a>)</li>\n</ul>\n</li>\n<li>Implemented the <code>borderBoxSize</code> and <code>contentBoxSize</code> parts of ResizeObserver (<a href=\"https://trac.webkit.org/changeset/282441/webkit/\">r282441</a>)</li>\n<li>Implemented CSP <code>script-src-elem, style-src-elem, script-src-attr</code> and <code>style-src-attr</code> directives (<a href=\"https://trac.webkit.org/changeset/284254/webkit/\">r284254</a>)</li>\n<li>Cached Web Audio PannerNode&#8217;s <code>azimuth</code>, <code>elevation</code>, and <code>coneGain</code> for performance (<a href=\"https://trac.webkit.org/changeset/283740/webkit/\">r283740</a>)</li>\n<li>Changed <code>&lt;model&gt;</code> to be draggable, similar to <code>&lt;img&gt;</code> (<a href=\"https://trac.webkit.org/changeset/283563/webkit/\">r283563</a>)</li>\n<li>Updated the <code>autofocus</code> attribute behavior to match the latest specification (<a href=\"https://commits.webkit.org/r283935\">r283935</a>)</li>\n<li>Updated to preserve color space when creating ImageBuffers for ImageBitmaps (<a href=\"https://trac.webkit.org/changeset/282696/webkit/\">r282696</a>)</li>\n</ul>\n<h3>WebGL</h3>\n<ul>\n<li>Fixed <code>image-rendering: crisp-edges</code> for WebGL canvases (<a href=\"https://trac.webkit.org/changeset/282335/webkit/\">r282335</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed the progress bar moving when playback stops (<a href=\"https://trac.webkit.org/changeset/282374/webkit/\">r282374</a>)</li>\n<li>Fixed <code>createImageBitmap</code> using a HLS video as source always returning a black image (<a href=\"https://trac.webkit.org/changeset/283585/webkit/\">r283585</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Added support for WebRTC media capabilities (<a href=\"https://trac.webkit.org/changeset/284085/webkit/\">r284085</a>, <a href=\"https://trac.webkit.org/changeset/284236/webkit/\">r284236</a>)</li>\n<li>Changed MediaCapabilities to enqueue a task to resolve promises (<a href=\"https://trac.webkit.org/changeset/284236/webkit/\">r284236</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Exposed the URL attribute of <code>&lt;video&gt;</code> elements (<a href=\"https://trac.webkit.org/changeset/283799/webkit/\">r283799</a>)</li>\n<li>Made PDFs loaded via <code>&lt;embed&gt;</code> accessible (<a href=\"https://trac.webkit.org/changeset/282358/webkit/\">r282358</a>)</li>\n<li>Updated <code>role=\"math\"</code> elements to no longer be considered to have presentational children (<a href=\"https://trac.webkit.org/changeset/284246/webkit/\">r284246</a>)</li>\n</ul>\n<h3>Private Click Measurement</h3>\n<ul>\n<li>Allowed measurement of links in nested, cross-site iframes (<a href=\"https://trac.webkit.org/changeset/283593/webkit/\">r283593</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Allowed more directives to be included in the <code>content_security_policy</code> of an extension’s manifest, such as the <code>sandbox</code> directive</li>\n</ul>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[New WebKit Features in Safari 15]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/11989/new-webkit-features-in-safari-15/\" />\n\n\t\t<id>https://webkit.org/?p=11989</id>\n\t\t<updated>2021-12-15T21:22:20Z</updated>\n\t\t<published>2021-10-26T21:27:05Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"News\" />\n\t\t<summary type=\"html\"><![CDATA[With the release of Safari 15 for macOS Monterey, iPadOS 15, iOS 15, and watchOS, as well as macOS Big Sur and macOS Catalina, WebKit brings significant advancements in privacy and security, improved interoperability, and a host of new features for web developers.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/11989/new-webkit-features-in-safari-15/\"><![CDATA[<p>With the release of Safari 15 for macOS Monterey, iPadOS 15, iOS 15, and watchOS, as well as macOS Big Sur and macOS Catalina, WebKit brings significant advancements in privacy and security, improved interoperability, and a host of new features for web developers. Take a look.</p>\n<h3>Web Extensions</h3>\n<p>This release brings Safari Web Extensions to iOS and iPadOS. Web Extensions use HTML, CSS, and JavaScript to offer powerful browser customizations. Now developers can create them for every device that supports Safari, using APIs, functionality, and permissions that are <a href=\"https://github.com/w3c/webextensions/blob/main/charter.md\">increasingly standardized</a> across all browsers. Learn how to build Safari Web Extensions and discover how to convert an existing extension by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10104/\">Meet Safari Web Extensions on iOS</a> at WWDC21.</p>\n<p>This year’s release also adds support for the Declarative Net Request WebExtensions API to block content on the web. Learn all about the latest WebExtension APIs by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10027\">Explore Safari Web Extension Improvements</a>  at WWDC21.</p>\n<h3>HTML</h3>\n<p>WebKit now provides support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name/theme-color\"><code>theme-color</code></a> in HTML meta tags, and in Web Manifest. By specifying a theme-color, web developers can change the color of the status bar and overscroll area in Safari on iOS 15. Theme-color also changes the Tab Bar and overscroll area background colors in Compact Tab layout for Safari 15 on macOS Monterey and Big Sur and iPadOS 15.</p>\n<p>In the HTML meta tag, developers can specify separate colors for Dark Mode and light appearance with the <code>media</code> attribute.</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">meta</span> <span class=\"keyword attribute\">name</span>=<span class=\"attribute value string\">\"theme-color\"</span> \n      <span class=\"keyword attribute\">content</span>=<span class=\"attribute value string\">\"#ecd96f\"</span> \n      <span class=\"keyword attribute\">media</span>=<span class=\"attribute value string\">\"(prefers-color-scheme: light)\"</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">meta</span> <span class=\"keyword attribute\">name</span>=<span class=\"attribute value string\">\"theme-color\"</span> \n      <span class=\"keyword attribute\">content</span>=<span class=\"attribute value string\">\"#0b3e05\"</span> \n      <span class=\"keyword attribute\">media</span>=<span class=\"attribute value string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span>\n</code></pre>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2021/10029/\">“Design for Safari 15”</a> at WWDC21 to learn more about the Compact Tab bar and how to use theme-color.</p>\n<h3>CSS</h3>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/aspect-ratio-1024x576.jpeg\" alt=\"demo of aspect ratio property\" width=\"1024\" height=\"576\" class=\"alignnone size-large wp-image-11991 preserve-color\" srcset=\"https://webkit.org/wp-content/uploads/aspect-ratio-1024x576.jpeg 1024w, https://webkit.org/wp-content/uploads/aspect-ratio-300x169.jpeg 300w, https://webkit.org/wp-content/uploads/aspect-ratio-768x432.jpeg 768w, https://webkit.org/wp-content/uploads/aspect-ratio-1536x864.jpeg 1536w, https://webkit.org/wp-content/uploads/aspect-ratio.jpeg 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>WebKit now supports CSS <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio\"><code>aspect-ratio</code></a>. This property can be used to set a preferred aspect ratio on any element, including boxes like <code>divs</code>, <code>iframes</code> for embedded video, or graphic design elements on a page.</p>\n<p>WebKit provides support for the new <code>lab()</code>, <code>lch()</code>, <code>hwb()</code> color syntaxes from <a href=\"https://www.w3.org/TR/css-color-4/\">Color level 4</a>, providing web developers with ways to express a richer range of colors in Lab, Lch, and Hue-Whiteness-Blackness. WebKit also supports predefined color spaces using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color()\"><code>color()</code></a> function syntax: <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-srgb\"><code>srgb</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-display-p3\"><code>display-p3</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-a98-rgb\"><code>a98-rgb</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-prophoto-rgb\"><code>prophoto-rgb</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-rec2020\"><code>rec2020</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-xyz\"><code>xyz</code></a>.</p>\n<p>WebKit supports 12 new values for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type\"><code>list-style-type</code></a>: <code>disclosure-closed</code>, <code>disclosure-open</code>, <code>ethiopic-numeric</code>, <code>japanese-formal</code>, <code>japanese-informal</code>, <code>korean-hangul-formal</code>, <code>korean-hanja-formal</code>, <code>korean-hanja-informal</code>, <code>simp-chinese-formal</code>, <code>simp-chinese-informal</code>, <code>trad-chinese-formal</code>, and <code>trad-chinese-informal</code>.</p>\n<style>article figcaption::before { bottom: 1rem; } article ol { margin-top: 0; font-size: 85%; } figure { text-align: left}</style>\n<aside style=\"display: grid; grid-template-columns: 1fr 1fr 1fr;\">\n<figure style=\"text-align: left\">\n<ol style=\"list-style-type: disclosure-closed\">\n<li>Apollo</li>\n<li>Hubble</li>\n<li>Chandra</li>\n<li>Cassini-Huygens</li>\n<li>Spitzer</li>\n</ol><figcaption>Disclosure closed</figcaption></figure>\n<figure style=\"text-align: left\">\n<ol style=\"list-style-type: ethiopic-numeric\">\n<li>Apollo</li>\n<li>Hubble</li>\n<li>Chandra</li>\n<li>Cassini-Huygens</li>\n<li>Spitzer</li>\n</ol><figcaption>Ethiopic Numeric</figcaption></figure>\n<figure style=\"text-align: left\">\n<ol style=\"list-style-type: simp-chinese informal\">\n<li>Apollo</li>\n<li>Hubble</li>\n<li>Chandra</li>\n<li>Cassini-Huygens</li>\n<li>Spitzer</li>\n</ol><figcaption>Simplified Chinese informal</figcaption></figure>\n</aside>\n<p>There’s also improved implementation of existing values for <code>list-style-type</code>: <code>armenian</code>, <code>cjk-ideographic</code>, <code>hebrew</code>, <code>lower-armenian</code>, <code>lower-roman</code>, <code>upper-armenian</code>, and <code>upper-roman</code>. See a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type#result_2\">demo of all of these options</a> at MDN. We also updated WebKit’s implementation of <code>list-style-position:inside</code> to match the updated <a href=\"https://drafts.csswg.org/css-lists-3/#marker-pseudo\">CSS specification</a>, creating interoperability after a <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=36854\">22 year old debate</a>.</p>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2021/10029/\">“Design for Safari 15”</a> at WWDC21 to learn more about the latest updates to CSS.</p>\n<h3>Web Inspector</h3>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/grid-inspector-1024x576.jpeg\" alt=\"screenshot of Safari 15&#039;s CSS Grid Inspector\" width=\"1024\" height=\"576\" class=\"alignleft size-large wp-image-11997 preserve-color\" srcset=\"https://webkit.org/wp-content/uploads/grid-inspector-1024x576.jpeg 1024w, https://webkit.org/wp-content/uploads/grid-inspector-300x169.jpeg 300w, https://webkit.org/wp-content/uploads/grid-inspector-768x432.jpeg 768w, https://webkit.org/wp-content/uploads/grid-inspector-1536x864.jpeg 1536w, https://webkit.org/wp-content/uploads/grid-inspector.jpeg 1800w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>Web Inspector in Safari 15 includes a <a href=\"https://webkit.org/blog/11588/introducing-css-grid-inspector/\">CSS Grid Inspector</a> overlay for inspecting grid containers on your pages. Watch <a href=\"https://developer.apple.com/videos/play/wwdc2021/10031/\">“Discover Web Inspector Improvements”</a> at WWDC21 to learn more.</p>\n<h3>JavaScript and WebAssembly</h3>\n<p>This release of WebKit adds support for ES6 Modules in Workers and ServiceWorkers. ES6 Modules provides a powerful way for developers to organize large applications using purpose-specific libraries. Workers/Service Workers provides a way to offload work from the main thread, and are often used for complex applications.  Now, developers can use them together — moving work off the main thread, improving performance, while retaining the organizational benefits of modules.</p>\n<p>Additional new capabilities to the JavaScript engine, include:</p>\n<ul>\n<li>support for top-level <code>await</code></li>\n<li><code>Error.cause</code></li>\n<li>private class methods and accessors</li>\n<li><code>BigInt64Array</code> and <code>BigUint64Array</code></li>\n</ul>\n<p>Improvements to WebAssembly include streaming compilation, bulk memory operations, reference types, and non-trapping conversions from <code>float</code> to <code>int</code>.</p>\n<p>You can learn more about the latest JavaScript and WebAssembly updates to WebKit and Safari 15 by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10030\">“Develop Advanced Web Content”</a> at WWDC21.</p>\n<h3>Web APIs</h3>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/webGL2-1024x576.jpg\" alt=\"gorgeous weird 3D environments created to show off what&#039;s possible\" width=\"1024\" height=\"576\" class=\"alignleft size-large wp-image-12006 preserve-color\" srcset=\"https://webkit.org/wp-content/uploads/webGL2-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/webGL2-300x169.jpg 300w, https://webkit.org/wp-content/uploads/webGL2-768x432.jpg 768w, https://webkit.org/wp-content/uploads/webGL2-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/webGL2.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>WebKit now supports <a href=\"https://www.khronos.org/registry/webgl/specs/latest/2.0/\">WebGL2</a> (<a href=\"https://www.khronos.org/webgl/wiki/Demo_Repository\">demos</a>). In addition, the WebGL implementation now runs on top of <a href=\"https://developer.apple.com/documentation/metal\">Metal</a> for better performance.</p>\n<p>Web Share level 2 enhancements to Web Share enable sharing files from a web page to an app. See <a href=\"https://w3c.github.io/web-share/\">Web Share API</a> for more information.</p>\n<p>User gestures now propagate through <code>requestAnimationFrame</code> with a one-second time limit.</p>\n<p>And now, with Safari 15.1,  <code>performance.timeOrigin</code> is available in Web Workers.</p>\n<p>You can learn more about the latest Web APIs in WebKit by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10030\">“Develop Advanced Web Content”</a> at WWDC21.</p>\n<h3>Media</h3>\n<p>Safari 15 includes several media improvements for users and developers. For example, built-in media controls now have Playback Speed and Chapters menus. Plus, the language/subtitle tracks menu is now available on iOS and iPadOS.</p>\n<p>There’s also new support for the Opus audio codec in WebM containers. And on on all iPads that support iPadOS 15, VP9 and WebM in Media Source Extensions (MSE) are now hardware-accelerated.</p>\n<p>Safari 15 also adds support for the MediaSession API to enable SharePlay experiences. You can learn more about creating SharePlay experiences by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10189/\">“Coordinate media playback in Safari with Group Activities”</a> at WWDC21.</p>\n<h3>Security and Privacy</h3>\n<p>Continuing our dedication to privacy and security, Safari on iOS 15 and macOS Monterey supports automatic HTTPS upgrades and hides your IP address from known trackers. Automatic HTTPS upgrades are also supported in Safari 15 on older macOS versions.</p>\n<p>Earlier this year, Safari was the first browser to ship a proposed web standard for measuring advertising in a privacy-preserving way – <a href=\"https://privacycg.github.io/private-click-measurement/\">Private Click Measurement</a>, or PCM. Safari 15 provides three major updates to PCM:</p>\n<ul>\n<li>Attribution reports also sent to click destination.</li>\n<li>Click fraud prevention with unlinkable tokens.</li>\n<li>IP address protection for attribution reports.</li>\n</ul>\n<p>To learn more, read <em><a href=\"https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/\">PCM: Click Fraud Prevention and Attribution Sent to Advertiser</a></em> or watch <a href=\"https://developer.apple.com/videos/play/wwdc2021/10033/\">“Meet privacy-preserving ad attribution”</a> at WWDC21.</p>\n<h3>Authentication and Passwords</h3>\n<p>WebKit now includes support for on-device verification codes in your app or website for a more secure sign-in experience with iCloud Keychain Password Manager. To use verification codes with Safari and Autofill:</p>\n<ul>\n<li>Use <code>autocomplete=one-time-code</code> to make an <code>&lt;input&gt;</code> eligible for AutoFill.</li>\n<li>Use a standard <code>otpauth</code> URL and replace the scheme with <code>apple-otpauth</code> to link directly to the password manager for setup.</li>\n<li>Use a raster image to enable contextual menus on <code>otpauth</code> QR codes that offer to set up a verification code generator.</li>\n</ul>\n<p>Learn how to support the process in your apps and websites by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10105/\">“Secure login with iCloud Keychain verification codes”</a> at WWDC21.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/webAuthn-1024x576.png\" alt=\"a diagram of how private keys are routed with WebAuthn\" width=\"1024\" height=\"576\" class=\"alignleft size-large wp-image-12008 preserve-color\" srcset=\"https://webkit.org/wp-content/uploads/webAuthn-1024x576.png 1024w, https://webkit.org/wp-content/uploads/webAuthn-300x169.png 300w, https://webkit.org/wp-content/uploads/webAuthn-768x432.png 768w, https://webkit.org/wp-content/uploads/webAuthn-1536x864.png 1536w, https://webkit.org/wp-content/uploads/webAuthn-2048x1152.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>Despite their prevalence, passwords inherently come with challenges that make them poorly suited to securing someone’s online accounts. Passkeys are WebAuth credentials intended to replace passwords for websites and apps with device sync and backup. The technology is now available in WebKit as a preview. To enable in Safari, choose Develop > Enable Syncing Platform Authenticator. Learn more watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10106/\">“Move beyond passwords”</a> at WWDC21.</p>\n<h3>Payments</h3>\n<p>Apple Pay enhancements allow developers using the <a href=\"https://www.w3.org/TR/payment-request/\">Payment Request API</a> to indicate an estimated arrival date for shipping methods, support a coupon code, and mark the shipping method as in-store pickup.</p>\n<h3>Availability</h3>\n<p>These improvements are available to users running Safari on iPadOS 15, iOS 15, or Safari 15 on macOS Monterey, macOS Big Sur, or macOS Catalina. These features were also available to web developers in Safari Technology Preview releases. Changes in this release of Safari were included in the following Safari Technology Preview releases: <a href=\"https://webkit.org/blog/11585/release-notes-for-safari-technology-preview-123/\">123</a>, <a href=\"https://webkit.org/blog/11672/release-notes-for-safari-technology-preview-124/\">124</a>, <a href=\"https://webkit.org/blog/11680/release-notes-for-safari-technology-preview-125/\">125</a>, <a href=\"https://webkit.org/blog/11727/release-notes-for-safari-technology-preview-126-with-safari-15-features/\">126</a>, <a href=\"https://webkit.org/blog/11736/release-notes-for-safari-technology-preview-127/\">127</a>, <a href=\"https://webkit.org/blog/11925/release-notes-for-safari-technology-preview-128/\">128</a>, <a href=\"https://webkit.org/blog/11951/release-notes-for-safari-technology-preview-129/\">129</a>.</p>\n<p><a href=\"https://developer.apple.com/safari/download/\">Download the latest Safari Technology Preview release</a> to stay at the forefront of future web platform and Web Inspector features. You can also use the <a href=\"https://webkit.org/status\">WebKit Feature Status</a> page to watch for changes to web platform features you’re interested in.</p>\n<h3>Feedback</h3>\n<p>If you run into any issues, we welcome your <a href=\"https://bugreport.apple.com/\">bug reports</a> for Safari or <a href=\"https://bugs.webkit.org/\">WebKit bugs</a> for web content issues. Send us a tweet <a href=\"https://twitter.com/webkit\">@webkit</a> to share your thoughts on this release.</p>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Release Notes for Safari Technology Preview 133]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/11975/release-notes-for-safari-technology-preview-133/\" />\n\n\t\t<id>https://webkit.org/?p=11975</id>\n\t\t<updated>2021-10-04T16:29:22Z</updated>\n\t\t<published>2021-09-30T17:07:59Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Safari Technology Preview\" />\n\t\t<summary type=\"html\"><![CDATA[Safari Technology Preview Release 133 is now available for download for macOS Big Sur and betas of macOS Monterey.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/11975/release-notes-for-safari-technology-preview-133/\"><![CDATA[<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 133 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=281797&amp;rev=282317&amp;limit=999\">281797-282317</a>. <strong>Note</strong>: The changes for these release notes were updated after publishing to account for an incorrect end revision number.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>CSS</h3>\n<ul>\n<li>Added support for <code>self-start</code>,  <code>self-end</code>, <code>start</code>, <code>end</code>, <code>left</code>, and <code>right</code> values in positional alignment (<a href=\"https://trac.webkit.org/changeset/282267/webkit/\">r282267</a>, <a href=\"https://trac.webkit.org/changeset/282078/webkit/\">r282078</a>, <a href=\"https://trac.webkit.org/changeset/281840/webkit/\">r281840</a>)</li>\n<li>Added support for percentages in the <code>scale()</code> transform functions, and the <code>scale</code> property (<a href=\"https://trac.webkit.org/changeset/282144/webkit/\">r282144</a>)</li>\n<li>Added support for <code>sin()</code>, <code>cos()</code>, <code>tan()</code>, <code>e</code>, and <code>pi</code> in <code>calc()</code> (<a href=\"https://trac.webkit.org/changeset/282162/webkit/\">r282162</a>)</li>\n<li>Fixed incorrect stacking order with an absolutely positioned and negative <code>z-index</code> <code>&lt;div&gt;</code> with a canvas child (<a href=\"https://trac.webkit.org/changeset/281913/webkit/\">r281913</a>)</li>\n<li>Fixed absolute positioning with orthogonal writing modes (<a href=\"https://trac.webkit.org/changeset/281995/webkit/\">r281995</a>)</li>\n<li>Fixed right-relative and bottom-relative values in <code>background-position-x</code> and <code>background-position-y</code> (<a href=\"https://trac.webkit.org/changeset/282234/webkit/\">r282234</a>)</li>\n<li>Fixed incorrect vertical position in table layout when the inline level box has <code>0px</code> height (<a href=\"https://trac.webkit.org/changeset/282256/webkit/\">r282256</a>)</li>\n<li>Fixed changing the border size on rows with <code>border-collapse</code> not redrawing (<a href=\"https://trac.webkit.org/changeset/282266/webkit/\">r282266</a>)</li>\n<li>Fixed <code>position: sticky</code> used within table cells (<a href=\"https://trac.webkit.org/changeset/282201/webkit/\">r282201</a>)</li>\n<li>Fixed incorrectly calculated <code>position: sticky</code> constraints when the scrolling container has padding and borders (<a href=\"https://trac.webkit.org/changeset/282138/webkit/\">r282138</a>)</li>\n<li>Fixed an interoperability issue in margin collapsing with <code>overflow: hidden</code> elements (<a href=\"https://trac.webkit.org/changeset/282085/webkit/\">r282085</a>)</li>\n</ul>\n<h3>CSS Cascade Layers</h3>\n<ul>\n<li>Added initial support for CSS Cascade Layers in Experimental Features:\n<ul>\n<li>Added support for computing the order correctly for late added sublayers (<a href=\"https://trac.webkit.org/changeset/281798/webkit/\">r281798</a>)</li>\n<li>Supported layer argument in <code>@import</code> rules (<a href=\"https://trac.webkit.org/changeset/281928/webkit/\">r281928</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS Font Loading API</h3>\n<ul>\n<li>Updated the implementation of the CSS Font Loading API to be closer to the spec and other browsers:\n<ul>\n<li>Fixed <code>CSSFontFaceSet.clear()</code> to not clear CSS-connected members (<a href=\"https://trac.webkit.org/changeset/281842/webkit/\">r281842</a>)</li>\n<li>Updated FontFaceSet methods that need to react to style changes (<a href=\"https://trac.webkit.org/changeset/282016/webkit/\">r282016</a>, <a href=\"https://trac.webkit.org/changeset/282015/webkit/\">r282015</a>, <a href=\"https://trac.webkit.org/changeset/282015/webkit/\">r282015</a>, <a href=\"https://trac.webkit.org/changeset/282261/webkit/\">r282261</a>, <a href=\"https://trac.webkit.org/changeset/282204/webkit/\">r282204</a>)</li>\n<li>Updated <code>FontFaceSet.add()</code> to throw when called on a CSS-connected font (<a href=\"https://trac.webkit.org/changeset/281951/webkit/\">r281951</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Fixed blank braille display in <code>contenteditable</code> elements when the field is followed by another element (<a href=\"https://trac.webkit.org/changeset/281920/webkit/\">r281920</a>)</li>\n<li>Made PDFs loaded via <code>&lt;embed&gt;</code> accessible (<a href=\"https://trac.webkit.org/changeset/282358/webkit/\">r282358</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Enabled <code>Object.hasOwn</code> (<a href=\"https://trac.webkit.org/changeset/281835/webkit/\">r281835</a>)</li>\n<li>Implemented <code>Temporal.PlainTime</code> behind the flag <code>--useTemporal=1</code> (<a href=\"https://trac.webkit.org/changeset/282125/webkit/\">r282125</a>)</li>\n<li>Implemented <code>Temporal.TimeZone</code> behind the flag <code>--useTemporal=1</code> (<a href=\"https://trac.webkit.org/changeset/282018/webkit/\">r282018</a>)</li>\n<li>Implemented <code>Temporal.Duration</code> behind the flag <code>--useTemporal=1</code> (<a href=\"https://trac.webkit.org/changeset/281838/webkit/\">r281838</a>)</li>\n<li>Implemented <code>self.structuredClone()</code> (<a href=\"https://trac.webkit.org/changeset/281808/webkit/\">r281808</a>)</li>\n<li>Implemented <code>Object.hasOwn()</code> (<a href=\"https://trac.webkit.org/changeset/281799/webkit/\">r281799</a>)</li>\n<li>Updated <code>Intl.Locale</code> <code>weekendInfo</code> to list all weekend days instead of range to follow to the latest spec change (<a href=\"https://trac.webkit.org/changeset/282257/webkit/\">r282257</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added basic support for Storage API (<a href=\"https://trac.webkit.org/changeset/282130/webkit/\">r282130</a>)</li>\n<li>Added support for <code>ServiceWorkerGlobalScope.serviceWorker</code> (<a href=\"https://trac.webkit.org/changeset/281854/webkit/\">r281854</a>)</li>\n<li>Added handling for non-fully active documents in <code>navigator.share() / navigator.canShare()</code> (<a href=\"https://trac.webkit.org/changeset/282282/webkit/\">r282282</a>)</li>\n<li>Enabled Cross-Origin-Opener-Policy / Cross-Origin-EmbedderPolicy headers support (<a href=\"https://trac.webkit.org/changeset/282105/webkit/\">r282105</a>, <a href=\"https://trac.webkit.org/changeset/282246/webkit/\">r282246</a>)</li>\n<li>Enabled SharedArrayBuffer support when COOP/COEP headers are used (<a href=\"https://trac.webkit.org/changeset/281832/webkit/\">r281832</a>)</li>\n<li>Fixed scrollbars on <code>pointer-events: none</code> element still intercepting events (<a href=\"https://trac.webkit.org/changeset/281991/webkit/\">r281991</a>)</li>\n<li>Implemented top-origin and frame-origin partitioning for BroadcastChannel (<a href=\"https://trac.webkit.org/changeset/282105/webkit/\">r282105</a>)</li>\n<li>Implemented navigation reporting for Cross-Origin-Opener-Policy (<a href=\"https://trac.webkit.org/changeset/282305/webkit/\">r282305</a>)</li>\n<li>Implemented <code>getClientRects()</code> for SVG elements (<a href=\"https://trac.webkit.org/changeset/282316/webkit/\">r282316</a>)</li>\n<li>Updated to always fetch the first manifest if provided (<a href=\"https://trac.webkit.org/changeset/282026/webkit/\">r282026</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Added support for RTCError and RTCErrorEvent (<a href=\"https://trac.webkit.org/changeset/282199/webkit/\">r282199</a>)</li>\n<li>Added support for RTCDataChannel closing event (<a href=\"https://trac.webkit.org/changeset/282198/webkit/\">r282198</a>)</li>\n<li>Added support for RTCSctpTransport (<a href=\"https://trac.webkit.org/changeset/282197/webkit/\">r282197</a>)</li>\n<li>Updated timing of RTCPeerConnection descriptions update to align with the WebRTC spec (<a href=\"https://trac.webkit.org/changeset/282217/webkit/\">r282217</a>)</li>\n<li>Updated signaling state check when applying a local or remote description to align with the WebRTC spec (<a href=\"https://trac.webkit.org/changeset/281985/webkit/\">r281985</a>)</li>\n<li>Updated <code>getDisplayMedia</code> to capture at the constrained size if possible (<a href=\"https://trac.webkit.org/changeset/281880/webkit/\">r281880</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed an incorrect number of frames returned if the decoding frame rate doesn&#8217;t match the original in WebM (<a href=\"https://trac.webkit.org/changeset/282196/webkit/\">r282196</a>)</li>\n<li>Removed Web Audio <code>canPlayType()</code> workaround that made it reports false negatives (<a href=\"https://trac.webkit.org/changeset/282137/webkit/\">r282137</a>)</li>\n</ul>\n<h3>Web and App Extensions</h3>\n<ul>\n<li>Added the extension’s icon to extension URL tabs for both app and web extensions</li>\n<li>Added the extension name as the title of tabs when an app extension page and does not specify a title</li>\n</ul>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Release Notes for Safari Technology Preview 132]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/11971/release-notes-for-safari-technology-preview-132/\" />\n\n\t\t<id>https://webkit.org/?p=11971</id>\n\t\t<updated>2021-09-16T21:16:39Z</updated>\n\t\t<published>2021-09-16T21:16:39Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Safari Technology Preview\" />\n\t\t<summary type=\"html\"><![CDATA[Safari Technology Preview Release 132 is now available for download for macOS Big Sur and betas of macOS Monterey.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/11971/release-notes-for-safari-technology-preview-132/\"><![CDATA[<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 132 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=281002&amp;rev=281797&amp;limit=999\">281002-281797</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Fixed CSS Changes sidebar to update live (<a href=\"https://trac.webkit.org/changeset/281441/webkit/\">r281441</a>)</li>\n<li>Fixed showing style rules declared after a rule whose selector has over 8192 components (<a href=\"https://trac.webkit.org/changeset/281354/webkit/\">r281354</a>)</li>\n<li>Changed to not show contextual documentation popup in the Changes panel (<a href=\"https://trac.webkit.org/changeset/281139/webkit/\">r281139</a>)</li>\n</ul>\n</li>\n<li>Miscellaneous\n<ul>\n<li>Adjusted tab bar style to be consistent between docked and undocked layouts (<a href=\"https://trac.webkit.org/changeset/281182/webkit/\">r281182</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Fixed CSS keyframe animations to respect edges in four-value <code>background-position</code> (<a href=\"https://trac.webkit.org/changeset/281683/webkit/\">r281683</a>)</li>\n<li>Fixed sticky position to not use transformed position to compute the offset (<a href=\"https://trac.webkit.org/changeset/281446/webkit/\">r281446</a>)</li>\n<li>Improved sticky positioning when applied to inline items(<a href=\"https://trac.webkit.org/changeset/281185/webkit/\">r281185</a>)</li>\n<li>Prevented snapping to offscreen snap areas in unidirectional scrolls (<a href=\"https://trac.webkit.org/changeset/281189/webkit/\">r281189</a>)</li>\n<li>Unprefixed <code>-webkit-backface-visibility</code> (<a href=\"https://trac.webkit.org/changeset/281009/webkit/\">r281009</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Added Intl Enumeration APIs (<a href=\"https://trac.webkit.org/changeset/281513/webkit/\">r281513</a>)</li>\n<li>Enabled <code>Array#findLast</code> method (<a href=\"https://trac.webkit.org/changeset/281369/webkit/\">r281369</a>)</li>\n<li>Enabled <code>String#at</code> and <code>TypedArray#at</code> (<a href=\"https://trac.webkit.org/changeset/281370/webkit/\">r281370</a>)</li>\n<li>Extended Intl TimeZoneName Option (<a href=\"https://trac.webkit.org/changeset/281371/webkit/\">r281371</a>)</li>\n<li>Fixed <code>Intl.DateTimeFormat</code> incorrectly parsing patterns with &#8216;h&#8217; literal (<a href=\"https://trac.webkit.org/changeset/281688/webkit/\">r281688</a>)</li>\n<li>Implemented <code>Temporal.Calendar</code> behind the flag (<code>--useTemporal</code>) (<a href=\"https://trac.webkit.org/changeset/281788/webkit/\">r281788</a>)</li>\n<li>Implemented Intl Locale Info extension (<a href=\"https://trac.webkit.org/changeset/281374/webkit/\">r281374</a>)</li>\n<li>Implemented <code>Intl.DisplayNames</code> V2 (<a href=\"https://trac.webkit.org/changeset/281375/webkit/\">r281375</a>)</li>\n<li>Made polymorphic-keyed put-by-value faster (<a href=\"https://trac.webkit.org/changeset/281615/webkit/\">r281615</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added Cross-Origin-Embedder-Policy support for Blob URLs (<a href=\"https://trac.webkit.org/changeset/281055/webkit/\">r281055</a>)</li>\n<li>Added onsecuritypolicyviolation on GlobalEventHandlers (<a href=\"https://trac.webkit.org/changeset/281569/webkit/\">r281569</a>)</li>\n<li>Enabled PerformanceNavigationTiming API by default (<a href=\"https://trac.webkit.org/changeset/281111/webkit/\">r281111</a>)</li>\n<li>Fixed including outer selector when matching <code>::slotted()</code> (<a href=\"https://trac.webkit.org/changeset/281692/webkit/\">r281692</a>)</li>\n<li>Fixed <code>document.hasFocus()</code> returning true for unfocused pages (<a href=\"https://trac.webkit.org/changeset/281228/webkit/\">r281228</a>)</li>\n<li>Fixed Geolocation API to callback with an error if the document is not fully active (<a href=\"https://trac.webkit.org/changeset/281520/webkit/\">r281520</a>)</li>\n<li>Fixed setting <code>window.location.href</code> to an invalid URL to throw a TypeError (<a href=\"https://trac.webkit.org/changeset/281472/webkit/\">r281472</a>)</li>\n<li>Fixed <code>SubmitEvent.submitter</code> property to be set for <code>&lt;button type=\"submit\"&gt;</code> (<a href=\"https://trac.webkit.org/changeset/281770/webkit/\">r281770</a>)</li>\n<li>Fixed Web Share <code>CanShare()</code> to be called after transient activation check (<a href=\"https://trac.webkit.org/changeset/281126/webkit/\">r281126</a>)</li>\n<li>Implemented <code>Crypto.randomUUID()</code> (<a href=\"https://trac.webkit.org/changeset/281206/webkit/\">r281206</a>, <a href=\"https://trac.webkit.org/changeset/281284/webkit/\">r281284</a>)</li>\n<li>Implemented <code>self.reportError()</code> (<a href=\"https://trac.webkit.org/changeset/281756/webkit/\">r281756</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Added support for RTCDtlsTransport (<a href=\"https://trac.webkit.org/changeset/281225/webkit/\">r281225</a>)</li>\n<li>Added support for <code>RTCPeerConnection.canTrickleIceCandidates</code> (<a href=\"https://trac.webkit.org/changeset/281298/webkit/\">r281298</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Fixed caret to respect text background color (<a href=\"https://trac.webkit.org/changeset/281685/webkit/\">r281685</a>)</li>\n<li>Fixed incorrect repaint when inline level box style change triggers line height change (<a href=\"https://trac.webkit.org/changeset/281136/webkit/\">r281136</a>)</li>\n<li>Changed synthetic bold additional advances to be applied after shaping (<a href=\"https://trac.webkit.org/changeset/281687/webkit/\">r281687</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed <code>nexttrack</code> and <code>previoustrack</code> MediaSession handlers (<a href=\"https://trac.webkit.org/changeset/281013/webkit/\">r281013</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Added support for <code>externally_connectable</code> for sending messages to extensions from web pages</li>\n<li>Added a drop shadow around color extension icons when the tab is using a theme color from the web page</li>\n<li>Added an error message when declarative net request is used and the <code>declarativeNetRequest</code> permission is not specified in the extension manifest</li>\n</ul>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t</feed>\n"
  },
  "description": "Open Source Web Browser Engine",
  "home_page_url": "https://webkit.org",
  "_ext": {
    "date_published": "2022-01-06T16:51:56.000Z",
    "date_modified": "2022-01-06T16:51:56.000Z"
  }
}