{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "WebKit",
  "feed_url": "https://webkit.org/feed/atom/",
  "items": [
    {
      "id": "https://webkit.org/?p=12566",
      "url": "https://webkit.org/blog/12566/private-click-measurement-conversion-fraud-prevention-and-replacement-for-tracking-pixels/",
      "title": "Private Click Measurement: Conversion Fraud Prevention and Replacement For Tracking Pixels",
      "summary": "Welcome to the fourth feature update on Private Click Measurement, our proposed web standard for measuring advertising in a privacy-preserving way.",
      "content_html": "<p>Welcome to the fourth feature update on Private Click Measurement, our <a href=\"https://github.com/privacycg/private-click-measurement\">proposed web standard</a> for measuring advertising in a privacy-preserving way. More precisely three major and two minor updates to PCM, all available in iOS/iPadOS 15.4 and macOS Monterey 12.3.</p>\n<p>Major updates:</p>\n<ul>\n<li><strong>Conversion fraud prevention</strong>. This enables merchant websites to sign unlinkable tokens and get proof in the attribution report that it was triggered by a trustworthy conversion event.</li>\n<li><strong>Replacement for third-party tracking pixels</strong>. Merchant websites can now trigger a conversion event through a same-site pixel which removes the need to call any third-parties in PCM.</li>\n<li><strong>Measurement of clicks in cross-site iframes</strong>. Many publishers want to isolate ads on their site in cross-site iframes. Now clicks in such iframes can be measured too.</li>\n</ul>\n<h2>What is Private Click Measurement?</h2>\n<p>Private Click Measurement, or PCM, is a proposed web standard for measuring the effectiveness of click-through advertising in a privacy-preserving way. It allows for 8 bits of data on the click source site to be combined with 4 bits of data on the click destination site to measure which clicks are driving conversions. The combined 8+4 bits of data is sent to both the click source and destination in an attribution report that doesn’t carry any user or device identifiers. The net result is a report that says “Someone who clicked ad X on website A later converted with value Y on website B.”</p>\n<p>PCM was made available as a beta in May 2019, and then shipped 2021 in iOS/iPadOS 14.5 and in Safari 14.1 on macOS. Its privacy-preserving nature means it can be used without getting the user’s permission to track according to <a href=\"https://developer.apple.com/app-store/user-privacy-and-data-use/\">AppTrackingTransparency</a>.</p>\n<h2>Conversion Fraud Prevention</h2>\n<p><a href=\"https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/\">In July 2021</a> we presented our beta feature for click fraud prevention in PCM. It allows the click source website to sign an unlinkable token at the time of the click navigation, which results in a signed token being included in the resulting attribution report. Today we present the same capability for the click destination website.</p>\n<p>PCM’s triggering event is a redirect to the well-known path <code>.well-known/private-click-measurement/trigger-attribution/</code>. Now that redirect supports a query string parameter called <code>attributionDestinationNonce</code>. If a nonce is included in the redirect, it triggers WebKit to ask the click destination server to sign an unlinkable token.</p>\n<h3>Step 1: Generate an RSA Key Pair</h3>\n<p>Unlinkable tokens require a public key for token generation and validation, and a corresponding private key for signing. PCM supports three different RSA key sizes: 2048, 3072 and 4096 bits. The expected encoding of the public key is a Base64URL encoded (using <a href=\"https://datatracker.ietf.org/doc/html/rfc4648#section-5\">RFC4648 section 5</a>) SPKI with the RSA-PSS OID and the parameters corresponding to the <a href=\"https://datatracker.ietf.org/doc/draft-irtf-cfrg-rsa-blind-signatures/\">RSABSSA IETF draft</a>.  Examples of such key encodings are included in an <a href=\"https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/\">earlier blog post</a>.</p>\n<h3>Step 2: Add the Query Parameter <code>attributionDestinationNonce</code></h3>\n<p>The triggering event should look like this to opt in to conversion fraud prevention:</p>\n<p><code>https://site.example/some/sub/resource/</code><br />\n… redirects to …<br />\n<code>https://site.example/.well-known/private-click-measurement/trigger-attribution/11?attributionDestinationNonce=ABCDEFabcdef0123456789</code></p>\n<p>The <code>attributionDestinationNonce</code> is only in place to help the click destination server know the context for which it’s signing an unlinkable token. When the click destination server is asked to sign an unlinkable token, it’ll get the <code>attributionDestinationNonce</code> and can make a decision as to whether the triggering event was trustworthy or not.</p>\n<p>The <code>attributionDestinationNonce</code> needs to be a Base64URL encoded 128-bit/16-byte value. Any smaller or larger value will cancel the issuance flow of the fraud-prevention signature. Any non Base64URL encoded value will also cancel the token transaction. Web Inspector will log a warning if the <code>attributionDestinationNonce</code> is malformed.</p>\n<h3>Step 3: Respond to a Request for Your Public Key</h3>\n<p>The browser and any validating party needs to be able to fetch your public key at any point in time from this well-known location: <code>https://clicksource.example/.well-known/private-click-measurement/get-token-public-key/</code>.</p>\n<h2>Replacement For Third-Party Tracking Pixels</h2>\n<p>Previous versions of PCM required HTTP requests on the click destination site to go to the click source site. This was designed to enable reuse of existing <em>cross-site tracking pixels</em> that no longer carry cookies under tracking prevention.</p>\n<p>For new adoption of PCM, for instance onboarding a new publisher site where ads are shown, there’s no need to add such legacy pixels. Longer term, we want to remove support for triggering events through cross-site tracking pixels since even though they don’t carry cookies, they do ping third-party domains that may be categorized as trackers. Many websites want to be completely tracker-free and we’re happy to be able to support that with PCM while still allowing for click measurement across websites.</p>\n<p>Click destination sites can now signal a triggering event through a <em>same-site pixel</em>. It looks like below.</p>\n<p>Same-site subresource request to:<br />\n<code>https://clickDestination.example/triggeringEventRedirect/21</code></p>\n<p>… redirects to same-site well-known location:<br />\n<code>https://clickDestination.example/.well-known/private-click-measurement/trigger-attribution/21?attributionSource=https://clickSource.example</code></p>\n<p>The above redirect tells PCM to schedule an attribution report if there is a pending attribution from <code>clickSource.example</code>.</p>\n<p>Why not a JavaScript API to trigger attribution without cross-site pixels, you may ask? There are two reasons for that:</p>\n<ul>\n<li>The <a href=\"https://github.com/privacycg/private-click-measurement/issues/71#issue-813921418\">standards conversation in W3C Privacy CG</a> told us that some click destination sites have a policy against placing third-party scripts on their websites because of the risky dependencies they introduce. We think that’s a very valid concern, not in the least for user privacy. However, those same click destination sites do not have the same strict policies against <em>pixels</em>. We can given them the API functionality they need by introducing same-site pixels. They can be triggered through actual image elements or through a JavaScript Fetch.</li>\n<li>We continue to consider it very important that websites should not be able to tell at page load time whether or not the user has PCM (or other ad measurement) features enabled. This is to protect the user’s right to a choice. Pixel APIs don’t reveal if the triggering event is accepted or not. A JavaScript API could be made to not reveal that info either but pixel APIs just do that.</li>\n</ul>\n<h2>Measurement of Clicks in Cross-Site Iframes</h2>\n<p><a href=\"https://github.com/privacycg/private-click-measurement/issues/7\">One of the first PCM change requests</a> from the web community was to allow for measurement of clicks that happen in cross-site iframes. This would allow for measurement of advertising isolated in iframes. We’re happy to announce that we now support that. Note that the resulting attribution report is still sent to the two first-party websites, often referred to as the publisher and the merchant.</p>\n<h2>WebIDL Attributes Now In Camelcase</h2>\n<p>JavaScript access to PCM’s anchor tag attributes now requires camel-casing. This is the result of interoperability work in web standards. Here’s how it looks:</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">a</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"test\"</span> <span class=\"keyword attribute\">href</span>=<span class=\"attribute value string\">\"https://clickDestination.example\"</span> <span class=\"keyword attribute\">attributionsourceid</span>=<span class=\"keyword attribute\">40</span> <span class=\"keyword attribute\">attributiondestination</span>=<span class=\"attribute value string\">\"https://clickDestination.example\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"keyword\">a</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">script</span>&gt;</span>\n    const anchorTag = document.getElementById(\"test\");\n    anchorTag.attributionSourceId …;\n    anchorTag.attributionDestination …;\n<span class=\"tag\">&lt;/<span class=\"keyword\">script</span>&gt;</span>\n</code></pre>\n<h2>Encoding Update for Token Keys</h2>\n<p>When sending your public key to the browser, it needs to be a 2048, 3072 or 4096 bit RSA public key wrapped with an RSAPSS OID in ASN1 format. See “Step 1: Generate an RSA Key Pair above.” Those bytes then need to be <a href=\"https://datatracker.ietf.org/doc/html/rfc4648#section-5\">base64 encoded with the URL and filename safe alphabet</a>.  Examples of such key encodings are included in an <a href=\"https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/\">earlier blog post</a>.</p>",
      "content_text": "Welcome to the fourth feature update on Private Click Measurement, our proposed web standard for measuring advertising in a privacy-preserving way. More precisely three major and two minor updates to PCM, all available in iOS/iPadOS 15.4 and macOS Monterey 12.3.\nMajor updates:\n\nConversion fraud prevention. This enables merchant websites to sign unlinkable tokens and get proof in the attribution report that it was triggered by a trustworthy conversion event.\nReplacement for third-party tracking pixels. Merchant websites can now trigger a conversion event through a same-site pixel which removes the need to call any third-parties in PCM.\nMeasurement of clicks in cross-site iframes. Many publishers want to isolate ads on their site in cross-site iframes. Now clicks in such iframes can be measured too.\n\nWhat is Private Click Measurement?\nPrivate Click Measurement, or PCM, is a proposed web standard for measuring the effectiveness of click-through advertising in a privacy-preserving way. It allows for 8 bits of data on the click source site to be combined with 4 bits of data on the click destination site to measure which clicks are driving conversions. The combined 8+4 bits of data is sent to both the click source and destination in an attribution report that doesn’t carry any user or device identifiers. The net result is a report that says “Someone who clicked ad X on website A later converted with value Y on website B.”\nPCM was made available as a beta in May 2019, and then shipped 2021 in iOS/iPadOS 14.5 and in Safari 14.1 on macOS. Its privacy-preserving nature means it can be used without getting the user’s permission to track according to AppTrackingTransparency.\nConversion Fraud Prevention\nIn July 2021 we presented our beta feature for click fraud prevention in PCM. It allows the click source website to sign an unlinkable token at the time of the click navigation, which results in a signed token being included in the resulting attribution report. Today we present the same capability for the click destination website.\nPCM’s triggering event is a redirect to the well-known path .well-known/private-click-measurement/trigger-attribution/. Now that redirect supports a query string parameter called attributionDestinationNonce. If a nonce is included in the redirect, it triggers WebKit to ask the click destination server to sign an unlinkable token.\nStep 1: Generate an RSA Key Pair\nUnlinkable tokens require a public key for token generation and validation, and a corresponding private key for signing. PCM supports three different RSA key sizes: 2048, 3072 and 4096 bits. The expected encoding of the public key is a Base64URL encoded (using RFC4648 section 5) SPKI with the RSA-PSS OID and the parameters corresponding to the RSABSSA IETF draft.  Examples of such key encodings are included in an earlier blog post.\nStep 2: Add the Query Parameter attributionDestinationNonce\nThe triggering event should look like this to opt in to conversion fraud prevention:\nhttps://site.example/some/sub/resource/\n… redirects to …\nhttps://site.example/.well-known/private-click-measurement/trigger-attribution/11?attributionDestinationNonce=ABCDEFabcdef0123456789\nThe attributionDestinationNonce is only in place to help the click destination server know the context for which it’s signing an unlinkable token. When the click destination server is asked to sign an unlinkable token, it’ll get the attributionDestinationNonce and can make a decision as to whether the triggering event was trustworthy or not.\nThe attributionDestinationNonce needs to be a Base64URL encoded 128-bit/16-byte value. Any smaller or larger value will cancel the issuance flow of the fraud-prevention signature. Any non Base64URL encoded value will also cancel the token transaction. Web Inspector will log a warning if the attributionDestinationNonce is malformed.\nStep 3: Respond to a Request for Your Public Key\nThe browser and any validating party needs to be able to fetch your public key at any point in time from this well-known location: https://clicksource.example/.well-known/private-click-measurement/get-token-public-key/.\nReplacement For Third-Party Tracking Pixels\nPrevious versions of PCM required HTTP requests on the click destination site to go to the click source site. This was designed to enable reuse of existing cross-site tracking pixels that no longer carry cookies under tracking prevention.\nFor new adoption of PCM, for instance onboarding a new publisher site where ads are shown, there’s no need to add such legacy pixels. Longer term, we want to remove support for triggering events through cross-site tracking pixels since even though they don’t carry cookies, they do ping third-party domains that may be categorized as trackers. Many websites want to be completely tracker-free and we’re happy to be able to support that with PCM while still allowing for click measurement across websites.\nClick destination sites can now signal a triggering event through a same-site pixel. It looks like below.\nSame-site subresource request to:\nhttps://clickDestination.example/triggeringEventRedirect/21\n… redirects to same-site well-known location:\nhttps://clickDestination.example/.well-known/private-click-measurement/trigger-attribution/21?attributionSource=https://clickSource.example\nThe above redirect tells PCM to schedule an attribution report if there is a pending attribution from clickSource.example.\nWhy not a JavaScript API to trigger attribution without cross-site pixels, you may ask? There are two reasons for that:\n\nThe standards conversation in W3C Privacy CG told us that some click destination sites have a policy against placing third-party scripts on their websites because of the risky dependencies they introduce. We think that’s a very valid concern, not in the least for user privacy. However, those same click destination sites do not have the same strict policies against pixels. We can given them the API functionality they need by introducing same-site pixels. They can be triggered through actual image elements or through a JavaScript Fetch.\nWe continue to consider it very important that websites should not be able to tell at page load time whether or not the user has PCM (or other ad measurement) features enabled. This is to protect the user’s right to a choice. Pixel APIs don’t reveal if the triggering event is accepted or not. A JavaScript API could be made to not reveal that info either but pixel APIs just do that.\n\nMeasurement of Clicks in Cross-Site Iframes\nOne of the first PCM change requests from the web community was to allow for measurement of clicks that happen in cross-site iframes. This would allow for measurement of advertising isolated in iframes. We’re happy to announce that we now support that. Note that the resulting attribution report is still sent to the two first-party websites, often referred to as the publisher and the merchant.\nWebIDL Attributes Now In Camelcase\nJavaScript access to PCM’s anchor tag attributes now requires camel-casing. This is the result of interoperability work in web standards. Here’s how it looks:\n<a id=\"test\" href=\"https://clickDestination.example\" attributionsourceid=40 attributiondestination=\"https://clickDestination.example\"></a>\n<script>\n    const anchorTag = document.getElementById(\"test\");\n    anchorTag.attributionSourceId …;\n    anchorTag.attributionDestination …;\n</script>\n\nEncoding Update for Token Keys\nWhen sending your public key to the browser, it needs to be a 2048, 3072 or 4096 bit RSA public key wrapped with an RSAPSS OID in ASN1 format. See “Step 1: Generate an RSA Key Pair above.” Those bytes then need to be base64 encoded with the URL and filename safe alphabet.  Examples of such key encodings are included in an earlier blog post.",
      "date_published": "2022-04-11T16:18:08.000Z",
      "date_modified": "2022-04-11T16:18:08.000Z",
      "_plugin": {
        "pageFilename": "f349f7b0cfed3c5fc1049dd4cda320cefe1bd9198da8d1c59f5ec5c7ef6c76f0.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12563",
      "url": "https://webkit.org/blog/12563/release-notes-for-safari-technology-preview-143/",
      "title": "Release Notes for Safari Technology Preview 143",
      "summary": "Safari Technology Preview Release 143 is now available for download for macOS Big Sur and of macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 143 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=290223&amp;rev=291506&amp;limit=1283\">290223-291506</a>. This is the last release of Safari Technology Preview that will support versions of macOS Monterey prior to 12.3. Please update to macOS Monterey 12.3 or later to continue using Safari Technology Preview.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Added option in the Layout panel of the Details Sidebar for Flexbox overlays to show each item&#8217;s CSS <code>order</code> and/or DOM index in the parent flex container (<a href=\"https://trac.webkit.org/changeset/290613/webkit/\">r290613</a>)</li>\n</ul>\n</li>\n<li>Service workers are no longer terminated while they are being inspected. (<a href=\"https://trac.webkit.org/changeset/291467/webkit/\">r291467</a>)</li>\n</ul>\n<h3>CSS Container Queries</h3>\n<ul>\n<li>Added support for nested container queries (<a href=\"https://trac.webkit.org/changeset/290257/webkit/\">r290257</a>)</li>\n<li>Added basic support for container units (<a href=\"https://trac.webkit.org/changeset/291474/webkit/\">r291474</a>)</li>\n<li>Changed to only apply inline-size containment when it is allowed (<a href=\"https://trac.webkit.org/changeset/291154/webkit/\">r291154</a>)</li>\n<li>Ensured container style changes are propagated to descendants (<a href=\"https://trac.webkit.org/changeset/291500/webkit/\">r291500</a>)</li>\n<li>Fixed <code>getComputedStyle</code> to update the style for invalid query containers (<a href=\"https://trac.webkit.org/changeset/290320/webkit/\">r290320</a>)</li>\n<li>Fixed <code>offsetWidth</code>, <code>offsetHeight</code>, and similar to update layout for container queries (<a href=\"https://trac.webkit.org/changeset/290380/webkit/\">r290380</a>)</li>\n<li>Implemented new container selection algorithm (<a href=\"https://trac.webkit.org/changeset/291098/webkit/\">r291098</a>)</li>\n</ul>\n<h3>CSS Cascade Layers</h3>\n<ul>\n<li>Added support for <code>revert</code> in <code>@keyframes</code> (<a href=\"https://trac.webkit.org/changeset/290457/webkit/\">r290457</a>)</li>\n<li>Added support for <code>revert-layer</code> in <code>@keyframes</code> (<a href=\"https://trac.webkit.org/changeset/290729/webkit/\">r290729</a>)</li>\n<li>Fixed <code>revert</code> on low-priority properties (<a href=\"https://trac.webkit.org/changeset/291260/webkit/\">r291260</a>)</li>\n<li>Let <code>revert-layer</code> in the lowest layer roll back to user styles (<a href=\"https://trac.webkit.org/changeset/290864/webkit/\">r290864</a>)</li>\n</ul>\n<h3>Subgrid</h3>\n<ul>\n<li>Fixed computing the correct containing block override size for items that are subgridded in one dimension only (<a href=\"https://trac.webkit.org/changeset/290577/webkit/\">r290577</a>)</li>\n<li>Converted grid direction to be relative to subgrid when accounting for extra margin (<a href=\"https://trac.webkit.org/changeset/290576/webkit/\">r290576</a>)</li>\n<li>Handled reverse flow direction when converting iterator coords for a subgrid (<a href=\"https://trac.webkit.org/changeset/290572/webkit/\">r290572</a>)</li>\n<li>Fixed subgrid items to always be stretched (<a href=\"https://trac.webkit.org/changeset/291464/webkit/\">r291464</a>)</li>\n<li>Fixed positioning of <code>position: absolute</code> items within nested grids (<a href=\"https://trac.webkit.org/changeset/290674/webkit/\">r290674</a>)</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Implemented <code>text-decoration</code> as a shorthand (<a href=\"https://trac.webkit.org/changeset/290756/webkit/\">r290756</a>, <a href=\"https://trac.webkit.org/changeset/291244/webkit/\">r291244</a>)</li>\n<li>Implemented logical properties for CSS <code>overscroll-behavior</code> (<a href=\"https://trac.webkit.org/changeset/290422/webkit/\">r290422</a>)</li>\n<li>Fixed <code>background-clip: text</code> to work with <code>display: flex</code> (<a href=\"https://trac.webkit.org/changeset/291303/webkit/\">r291303</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Added CalendarDateTime parsing (<a href=\"https://trac.webkit.org/changeset/290248/webkit/\">r290248</a>)</li>\n<li>Fixed ShadowRealm unwinding (<a href=\"https://trac.webkit.org/changeset/290283/webkit/\">r290283</a>)</li>\n<li>Fixed <code>Temporal.PlainDate</code> to validate input range (<a href=\"https://trac.webkit.org/changeset/290282/webkit/\">r290282</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Fixed image <code>alt</code> text bi-directional reordering (<a href=\"https://trac.webkit.org/changeset/290734/webkit/\">r290734</a>)</li>\n<li>Fixed <code>alt</code> text position in right-to-left context (<a href=\"https://trac.webkit.org/changeset/290726/webkit/\">r290726</a>)</li>\n<li>Fixed table sizing when <code>colgroup</code> comes after <code>tbody</code> (<a href=\"https://trac.webkit.org/changeset/290512/webkit/\">r290512</a>)</li>\n<li>Fixed scrollbars disappearing when very long or wide (<a href=\"https://trac.webkit.org/changeset/290545/webkit/\">r290545</a>)</li>\n<li>Handled perpendicular containing blocks when computing available logical height (<a href=\"https://trac.webkit.org/changeset/290634/webkit/\">r290634</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Added support for passing an optional timeline to <code>Element.animate()</code> (<a href=\"https://trac.webkit.org/changeset/290655/webkit/\">r290655</a>)</li>\n<li>Changed setting the <code>composite</code> property on a keyframe effect to invalidate the target style (<a href=\"https://trac.webkit.90741/webkit/\">r290741</a>)</li>\n<li>Fixed <code>inherit</code> values should trigger keyframe recomputation if any previous effect has changed that property (<a href=\"https://trac.geset/290831/webkit/\">r290831</a>)</li>\n<li>Fixed keyframe values set to <code>inherit</code> to recompute their values when the inherited value changes (<a href=\"https://trac.webkit.90823/webkit/\">r290823</a>)</li>\n<li>Fixed animating <code>fill</code> and <code>stroke</code> to or from <code>currentColor</code> (<a href=\"https://trac.webkit.org/changeset/290898/webkit/\">r290898</a>)</li>\n<li>Fixed <code>::placeholder</code> to not be a valid pseudo-element for a keyframe effect target (<a href=\"https://trac.webkit.90662/webkit/\">r290662</a>)</li>\n<li>Fixed animations on modal <code>&lt;dialog&gt;</code>  elements and <code>::backdrop</code> to run more than once (<a href=\"https://trac.webkit.org/changeset/291282/webkit/\">r291282</a>)</li>\n<li>Fixed <code>outline-width</code> with transition to animate correctly (<a href=\"https://trac.webkit.org/changeset/290735/webkit/\">r290735</a>)</li>\n<li>Fixed <code>text-emphasis</code> shorthand to be animatable (<a href=\"https://trac.webkit.org/changeset/290895/webkit/\">r290895</a>)</li>\n<li>Fixed <code>text-emphasis-color</code> to support non-discrete animations (<a href=\"https://trac.webkit.org/changeset/290887/webkit/\">r290887</a>)</li>\n<li>Made changes to <code>font-size</code> recompute keyframes (<a href=\"https://trac.webkit.org/changeset/290730/webkit/\">r290730</a>)</li>\n<li>Added support for discrete animation to:\n<ul>\n<li><code>background-blend-mode</code> (<a href=\"https://trac.webkit.org/changeset/291041/webkit/\">r291041</a>)</li>\n<li><code>clip-rule</code> (<a href=\"https://trac.webkit.org/changeset/291042/webkit/\">r291042</a>)</li>\n<li><code>color-interpolation</code> (<a href=\"https://trac.webkit.org/changeset/291008/webkit/\">r291008</a>)</li>\n<li><code>color-interpolation-filters</code> (<a href=\"https://trac.webkit.org/changeset/291043/webkit/\">r291043</a>)</li>\n<li><code>counter-increment</code> (<a href=\"https://trac.webkit.org/changeset/291090/webkit/\">r291090</a>)</li>\n<li><code>counter-reset</code> (<a href=\"https://trac.webkit.org/changeset/291099/webkit/\">r291099</a>)</li>\n<li><code>dominant-baseline</code> (<a href=\"https://trac.webkit.org/changeset/291068/webkit/\">r291068</a>)</li>\n<li><code>fill-rule</code> (<a href=\"https://trac.webkit.org/changeset/291100/webkit/\">r291100</a>)</li>\n<li><code>font-family</code> (<a href=\"https://trac.webkit.org/changeset/291040/webkit/\">r291040</a>)</li>\n<li><code>font-feature-settings</code> (<a href=\"https://trac.webkit.org/changeset/291039/webkit/\">r291039</a>)</li>\n<li><code>font-kerning</code> (<a href=\"https://trac.webkit.org/changeset/291037/webkit/\">r291037</a>)</li>\n<li><code>font-synthesis</code> (<a href=\"https://trac.webkit.org/changeset/291103/webkit/\">r291103</a>)</li>\n<li><code>font-variant-alternates</code> (<a href=\"https://trac.webkit.org/changeset/291104/webkit/\">r291104</a>)</li>\n<li><code>font-variant-caps</code> (<a href=\"https://trac.webkit.org/changeset/291119/webkit/\">r291119</a>)</li>\n<li><code>font-variant-east-asian</code> (<a href=\"https://trac.webkit.org/changeset/291109/webkit/\">r291109</a>)</li>\n<li><code>font-variant-ligatures</code> (<a href=\"https://trac.webkit.org/changeset/291114/webkit/\">r291114</a>)</li>\n<li><code>font-variant-numeric</code> (<a href=\"https://trac.webkit.org/changeset/291147/webkit/\">r291147</a>)</li>\n<li><code>font-variant-position</code> (<a href=\"https://trac.webkit.org/changeset/291115/webkit/\">r291115</a>)</li>\n<li><code>grid-template-areas</code> (<a href=\"https://trac.webkit.org/changeset/291122/webkit/\">r291122</a>)</li>\n<li><code>line-break</code> (<a href=\"https://trac.webkit.org/changeset/290885/webkit/\">r290885</a>)</li>\n<li><code>marker-end</code> (<a href=\"https://trac.webkit.org/changeset/291226/webkit/\">r291226</a>)</li>\n<li><code>marker-mid</code> (<a href=\"https://trac.webkit.org/changeset/291227/webkit/\">r291227</a>)</li>\n<li><code>marker-start</code> (<a href=\"https://trac.webkit.org/changeset/291228/webkit/\">r291228</a>)</li>\n<li><code>mask-clip</code> (<a href=\"https://trac.webkit.org/changeset/291130/webkit/\">r291130</a>)</li>\n<li><code>mask-composite</code> (<a href=\"https://trac.webkit.org/changeset/291159/webkit/\">r291159</a>)</li>\n<li><code>mask-mode</code> (<a href=\"https://trac.webkit.org/changeset/291160/webkit/\">r291160</a>)</li>\n<li><code>mask-origin</code> (<a href=\"https://trac.webkit.org/changeset/291148/webkit/\">r291148</a>)</li>\n<li><code>mask-repeat</code> (<a href=\"https://trac.webkit.org/changeset/291161/webkit/\">r291161</a>)</li>\n<li><code>mask-type</code> (<a href=\"https://trac.webkit.org/changeset/291158/webkit/\">r291158</a>)</li>\n<li><code>quotes</code> (<a href=\"https://trac.webkit.org/changeset/291128/webkit/\">r291128</a>)</li>\n<li><code>scroll-behavior</code> (<a href=\"https://trac.webkit.org/changeset/291129/webkit/\">r291129</a>)</li>\n<li><code>shape-rendering</code> (<a href=\"https://trac.webkit.org/changeset/291171/webkit/\">r291171</a>)</li>\n<li><code>stroke-linecap</code> (<a href=\"https://trac.webkit.org/changeset/291163/webkit/\">r291163</a>)</li>\n<li><code>stroke-linejoin</code> (<a href=\"https://trac.webkit.org/changeset/291164/webkit/\">r291164</a>)</li>\n<li><code>text-anchor</code> (<a href=\"https://trac.webkit.org/changeset/291166/webkit/\">r291166</a>)</li>\n<li><code>text-decoration-skip-ink</code> (<a href=\"https://trac.webkit.org/changeset/290886/webkit/\">r290886</a>)</li>\n<li><code>text-emphasis-style</code> (<a href=\"https://trac.webkit.org/changeset/290888/webkit/\">r290888</a>)</li>\n<li><code>text-rendering</code> (<a href=\"https://trac.webkit.org/changeset/291157/webkit/\">r291157</a>)</li>\n<li><code>vector-effect</code> (<a href=\"https://trac.webkit.org/changeset/291170/webkit/\">r291170</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>SVG</h3>\n<ul>\n<li>Fixed clamping animated values to the 0-1 range for:\n<ul>\n<li><code>fill-opacity</code> (<a href=\"https://trac.webkit.org/changeset/290568/webkit/\">r290568</a>)</li>\n<li><code>flood-opacity</code> (<a href=\"https://trac.webkit.org/changeset/290571/webkit/\">r290571</a>)</li>\n<li><code>stop-opacity</code> (<a href=\"https://trac.webkit.org/changeset/290569/webkit/\">r290569</a>)</li>\n<li><code>stroke-opacity</code> (<a href=\"https://trac.webkit.org/changeset/290570/webkit/\">r290570</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>Scrolling</h3>\n<ul>\n<li>Allowed history swipe in scroller with <code>overscroll-behavior</code> (<a href=\"https://trac.webkit.org/changeset/291497/webkit/\">r291497</a>)</li>\n<li>Fixed incorrect painting when scrolling a page with fixed backgrounds (<a href=\"https://trac.webkit.org/changeset/290785/webkit/\">r290785</a>)</li>\n<li>Fixed scroll animation when scroll snap scroller is navigated with the keyboard (<a href=\"https://trac.webkit.org/changeset/290548/webkit/\">r290548</a>, <a href=\"https://trac.webkit.org/changeset/290625/webkit/\">r290625</a>)</li>\n<li>Fixed element with <code>position: sticky</code> after sticking, starting to move incorrectly when scrolling (<a href=\"https://trac.webkit.org/changeset/290812/webkit/\">r290812</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Added support for <code>authenticatorSelection.residentKey</code> (<a href=\"https://trac.webkit.org/changeset/291176/webkit/\">r291176</a>)</li>\n<li>Added fallback to <code>attestation=none</code> if requested but unavailable for platform authenticator (<a href=\"https://trac.webkit.org/changeset/290539/webkit/\">r290539</a>)</li>\n<li>Enabled using WebAuthn within cross-origin iframe elements (<a href=\"https://trac.webkit.org/changeset/291018/webkit/\">r291018</a>)</li>\n<li>Improved virtual authenticator support ( <a href=\"https://trac.webkit.org/changeset/291423/webkit/\">r291423</a> , <a href=\"https://trac.webkit.org/changeset/291321/webkit/\">r291321</a>)</li>\n</ul>\n<h3>WebGL</h3>\n<ul>\n<li>Fixed WebGL rendering incorrect results when using preserveDrawingBuffer (<a href=\"https://trac.webkit.org/changeset/291218/webkit/\">r291218</a>)</li>\n</ul>\n<h3>HTML</h3>\n<ul>\n<li>Enabled the <code>inert</code> attribute by default (<a href=\"https://trac.webkit.org/changeset/290587/webkit/\">r290587</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Enabled the Permissions API by default (<a href=\"https://trac.webkit.org/changeset/291116/webkit/\">r291116</a>, <a href=\"https://trac.webkit.org/changeset/290301/webkit/\">r290301</a>)</li>\n<li>Fixed <code>mousemove</code> events double-firing in Safari (<a href=\"https://trac.webkit.org/changeset/290743/webkit/\">r290743</a>)</li>\n<li>Fixed rendering when loading a USDZ as the main resource  (<a href=\"https://trac.webkit.org/changeset/290562/webkit/\">r290562</a>)</li>\n<li>Fixed CORS preflight failing due to <code>cache-control</code> header (<a href=\"https://trac.webkit.org/changeset/290507/webkit/\">r290507</a>)</li>\n<li>Fixed PerformanceNavigationTiming Response Start being unavailable when using Service Worker Cache (<a href=\"https://trac.webkit.org/changeset/291441/webkit/\">r291441</a>)</li>\n<li>Fixed buffered flag not working in Paint Timing (<a href=\"https://trac.webkit.org/changeset/290247/webkit/\">r290247</a>)</li>\n<li>Fixed load event never firing after a form is submitted (<a href=\"https://trac.webkit.org/changeset/290841/webkit/\">r290841</a>)</li>\n<li>Fixed <code>WebSocket.send()</code> to synchronously update <code>bufferedAmount</code> (<a href=\"https://trac.webkit.org/changeset/290995/webkit/\">r290995</a>)</li>\n<li>Made input element UA shadow tree creation lazy (<a href=\"https://trac.webkit.org/changeset/290284/webkit/\">r290284</a>)</li>\n<li>Made <code>pointer-events</code> checks for SVG take in account inert subtrees (<a href=\"https://trac.webkit.org/changeset/290306/webkit/\">r290306</a>)</li>\n<li>Removed the 1ms minimum for <code>setTimeout</code> (<a href=\"https://trac.webkit.org/changeset/291476/webkit/\">r291476</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>AudioContext will continue playing when minimizing or moving the macOS Safari window to the background (<a href=\"https://trac.webkit.org/changeset/291267/webkit/\">r291267</a>)</li>\n<li>Fixed scrambled output for some WebM videos with VP8 codec (<a href=\"https://trac.webkit.org/changeset/291216/webkit/\">r291216</a>)</li>\n<li>Implemented <code>remote-inbound-rtp</code> packetsLost (<a href=\"https://trac.webkit.org/changeset/290865/webkit/\">r290865</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Updated WebSpeech API support (<a href=\"https://trac.webkit.org/changeset/291124/webkit/\">r291124</a>)</li>\n</ul>\n<h3>File System Access</h3>\n<ul>\n<li>Changed to throw an exception if a file or directory cannot be accessed in file system (<a href=\"https://trac.webkit.org/changeset/291014/webkit/\">r291014</a>)</li>\n<li>Disallowed empty name in FileSystemHandle (<a href=\"https://trac.webkit.org/changeset/290998/webkit/\">r290998</a>)</li>\n<li>Disallowed names that are not permitted by the underlying file system (<a href=\"https://trac.webkit.org/changeset/291057/webkit/\">r291057</a>)</li>\n<li>Fixed fetching website data that may get a wrong or missing record after migrating data to general storage directory (<a href=\"https://trac.webkit.org/changeset/290239/webkit/\">r290239</a>, <a href=\"https://trac.webkit.org/changeset/290233/webkit/\">r290233</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Fixed cookie expiration dates so they are not off by 30 years</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 143 is now available for download for macOS Big Sur and of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 290223-291506. This is the last release of Safari Technology Preview that will support versions of macOS Monterey prior to 12.3. Please update to macOS Monterey 12.3 or later to continue using Safari Technology Preview.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nElements Tab\n\nAdded option in the Layout panel of the Details Sidebar for Flexbox overlays to show each item’s CSS order and/or DOM index in the parent flex container (r290613)\n\n\nService workers are no longer terminated while they are being inspected. (r291467)\n\nCSS Container Queries\n\nAdded support for nested container queries (r290257)\nAdded basic support for container units (r291474)\nChanged to only apply inline-size containment when it is allowed (r291154)\nEnsured container style changes are propagated to descendants (r291500)\nFixed getComputedStyle to update the style for invalid query containers (r290320)\nFixed offsetWidth, offsetHeight, and similar to update layout for container queries (r290380)\nImplemented new container selection algorithm (r291098)\n\nCSS Cascade Layers\n\nAdded support for revert in @keyframes (r290457)\nAdded support for revert-layer in @keyframes (r290729)\nFixed revert on low-priority properties (r291260)\nLet revert-layer in the lowest layer roll back to user styles (r290864)\n\nSubgrid\n\nFixed computing the correct containing block override size for items that are subgridded in one dimension only (r290577)\nConverted grid direction to be relative to subgrid when accounting for extra margin (r290576)\nHandled reverse flow direction when converting iterator coords for a subgrid (r290572)\nFixed subgrid items to always be stretched (r291464)\nFixed positioning of position: absolute items within nested grids (r290674)\n\nCSS\n\nImplemented text-decoration as a shorthand (r290756, r291244)\nImplemented logical properties for CSS overscroll-behavior (r290422)\nFixed background-clip: text to work with display: flex (r291303)\n\nJavaScript\n\nAdded CalendarDateTime parsing (r290248)\nFixed ShadowRealm unwinding (r290283)\nFixed Temporal.PlainDate to validate input range (r290282)\n\nRendering\n\nFixed image alt text bi-directional reordering (r290734)\nFixed alt text position in right-to-left context (r290726)\nFixed table sizing when colgroup comes after tbody (r290512)\nFixed scrollbars disappearing when very long or wide (r290545)\nHandled perpendicular containing blocks when computing available logical height (r290634)\n\nWeb Animations\n\nAdded support for passing an optional timeline to Element.animate() (r290655)\nChanged setting the composite property on a keyframe effect to invalidate the target style (r290741)\nFixed inherit values should trigger keyframe recomputation if any previous effect has changed that property (r290831)\nFixed keyframe values set to inherit to recompute their values when the inherited value changes (r290823)\nFixed animating fill and stroke to or from currentColor (r290898)\nFixed ::placeholder to not be a valid pseudo-element for a keyframe effect target (r290662)\nFixed animations on modal <dialog>  elements and ::backdrop to run more than once (r291282)\nFixed outline-width with transition to animate correctly (r290735)\nFixed text-emphasis shorthand to be animatable (r290895)\nFixed text-emphasis-color to support non-discrete animations (r290887)\nMade changes to font-size recompute keyframes (r290730)\nAdded support for discrete animation to:\n\nbackground-blend-mode (r291041)\nclip-rule (r291042)\ncolor-interpolation (r291008)\ncolor-interpolation-filters (r291043)\ncounter-increment (r291090)\ncounter-reset (r291099)\ndominant-baseline (r291068)\nfill-rule (r291100)\nfont-family (r291040)\nfont-feature-settings (r291039)\nfont-kerning (r291037)\nfont-synthesis (r291103)\nfont-variant-alternates (r291104)\nfont-variant-caps (r291119)\nfont-variant-east-asian (r291109)\nfont-variant-ligatures (r291114)\nfont-variant-numeric (r291147)\nfont-variant-position (r291115)\ngrid-template-areas (r291122)\nline-break (r290885)\nmarker-end (r291226)\nmarker-mid (r291227)\nmarker-start (r291228)\nmask-clip (r291130)\nmask-composite (r291159)\nmask-mode (r291160)\nmask-origin (r291148)\nmask-repeat (r291161)\nmask-type (r291158)\nquotes (r291128)\nscroll-behavior (r291129)\nshape-rendering (r291171)\nstroke-linecap (r291163)\nstroke-linejoin (r291164)\ntext-anchor (r291166)\ntext-decoration-skip-ink (r290886)\ntext-emphasis-style (r290888)\ntext-rendering (r291157)\nvector-effect (r291170)\n\n\n\nSVG\n\nFixed clamping animated values to the 0-1 range for:\n\nfill-opacity (r290568)\nflood-opacity (r290571)\nstop-opacity (r290569)\nstroke-opacity (r290570)\n\n\n\nScrolling\n\nAllowed history swipe in scroller with overscroll-behavior (r291497)\nFixed incorrect painting when scrolling a page with fixed backgrounds (r290785)\nFixed scroll animation when scroll snap scroller is navigated with the keyboard (r290548, r290625)\nFixed element with position: sticky after sticking, starting to move incorrectly when scrolling (r290812)\n\nWebAuthn\n\nAdded support for authenticatorSelection.residentKey (r291176)\nAdded fallback to attestation=none if requested but unavailable for platform authenticator (r290539)\nEnabled using WebAuthn within cross-origin iframe elements (r291018)\nImproved virtual authenticator support ( r291423 , r291321)\n\nWebGL\n\nFixed WebGL rendering incorrect results when using preserveDrawingBuffer (r291218)\n\nHTML\n\nEnabled the inert attribute by default (r290587)\n\nWeb API\n\nEnabled the Permissions API by default (r291116, r290301)\nFixed mousemove events double-firing in Safari (r290743)\nFixed rendering when loading a USDZ as the main resource  (r290562)\nFixed CORS preflight failing due to cache-control header (r290507)\nFixed PerformanceNavigationTiming Response Start being unavailable when using Service Worker Cache (r291441)\nFixed buffered flag not working in Paint Timing (r290247)\nFixed load event never firing after a form is submitted (r290841)\nFixed WebSocket.send() to synchronously update bufferedAmount (r290995)\nMade input element UA shadow tree creation lazy (r290284)\nMade pointer-events checks for SVG take in account inert subtrees (r290306)\nRemoved the 1ms minimum for setTimeout (r291476)\n\nMedia\n\nAudioContext will continue playing when minimizing or moving the macOS Safari window to the background (r291267)\nFixed scrambled output for some WebM videos with VP8 codec (r291216)\nImplemented remote-inbound-rtp packetsLost (r290865)\n\nAccessibility\n\nUpdated WebSpeech API support (r291124)\n\nFile System Access\n\nChanged to throw an exception if a file or directory cannot be accessed in file system (r291014)\nDisallowed empty name in FileSystemHandle (r290998)\nDisallowed names that are not permitted by the underlying file system (r291057)\nFixed fetching website data that may get a wrong or missing record after migrating data to general storage directory (r290239, r290233)\n\nWeb Extensions\n\nFixed cookie expiration dates so they are not off by 30 years\n",
      "date_published": "2022-04-07T22:19:46.000Z",
      "date_modified": "2022-04-07T22:19:46.000Z",
      "_plugin": {
        "pageFilename": "fd785c2aed4f124eec0d5509f1fc7ba1ff73ded69b95fe318b0ce0f5e4f50e1f.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12522",
      "url": "https://webkit.org/blog/12522/release-notes-for-safari-technology-preview-142/",
      "title": "Release Notes for Safari Technology Preview 142",
      "summary": "Safari Technology Preview Release 142 is now available for download for macOS Big Sur and macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 142 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=289213&amp;rev=290223&amp;limit=1010\">289213-290223</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Added overlay for visualizing CSS Flexbox container layouts (<a href=\"https://trac.webkit.org/changeset/290065/webkit/\">r290065</a>, <a href=\"https://trac.webkit.org/changeset/290047/webkit/\">r290047</a>, <a href=\"https://trac.webkit.org/changeset/289416/webkit/\">r289416</a>, <a href=\"https://trac.webkit.org/changeset/289610/webkit/\">r289610</a>, <a href=\"https://trac.webkit.org/changeset/289698/webkit/\">r289698</a>, <a href=\"https://trac.webkit.org/changeset/289757/webkit/\">r289757</a>)</li>\n<li>Added indicators for layout context in element tooltips (<a href=\"https://trac.webkit.org/changeset/290112/webkit/\">r290112</a>)</li>\n</ul>\n</li>\n<li>Sources Tab\n<ul>\n<li>Fixed clicking to re-enable a breakpoint clearing automatic continue (<a href=\"https://trac.webkit.org/changeset/289669/webkit/\">r289669</a>)</li>\n<li>Fixed double-clicking a breakpoint icon to show the edit popover (<a href=\"https://trac.webkit.org/changeset/289670/webkit/\">r289670</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS Subgrid</h3>\n<ul>\n<li>Enabled subgrid by default (<a href=\"https://trac.webkit.org/changeset/290111/webkit/\">r290111</a>)</li>\n<li>Added accounting for subgrid margin, border, and padding when sizing (<a href=\"https://trac.webkit.org/changeset/290096/webkit/\">r290096</a>)</li>\n<li>Added support for parsing subgrid in <code>grid-template-columns</code> and <code>grid-template-row</code> (<a href=\"https://trac.webkit.org/changeset/289722/webkit/\">r289722</a>)</li>\n<li>Changed to copy track sizes from the parent grid into subgrid (<a href=\"https://trac.webkit.org/changeset/290007/webkit/\">r290007</a>)</li>\n<li>Changed to inherit track count from the parent grid for subgridded axes and clamp item placement to that explicit grid (<a href=\"https://trac.webkit.org/changeset/289986/webkit/\">r289986</a>)</li>\n<li>Included subgrid items in the track sizing algorithm of the outer grid (<a href=\"https://trac.webkit.org/changeset/290077/webkit/\">r290077</a>)</li>\n<li>Implemented <code>getComputedStyle</code> for subgrids (<a href=\"https://trac.webkit.org/changeset/289993/webkit/\">r289993</a>)</li>\n<li>Fixed certain scenarios where grid may be empty (<a href=\"https://trac.webkit.org/changeset/289437/webkit/\">r289437</a>)</li>\n<li>Fixed recalculating styles when updating a grid gap value (<a href=\"https://trac.webkit.org/changeset/289241/webkit/\">r289241</a>)</li>\n</ul>\n<h3>CSS Container Queries</h3>\n<ul>\n<li>Enabled CSS Container Queries by default (<a href=\"https://trac.webkit.org/changeset/290025/webkit/\">r290025</a>)</li>\n<li>Added query container tracking so they can be invalidated on size change (<a href=\"https://trac.webkit.org/changeset/289457/webkit/\">r289457</a>)</li>\n<li>Added support for all size features (<a href=\"https://trac.webkit.org/changeset/289838/webkit/\">r289838</a>)</li>\n<li>Added support for full range notation in size queries (<a href=\"https://trac.webkit.org/changeset/290037/webkit/\">r290037</a>)</li>\n<li>Added support for range operators in size queries (<a href=\"https://trac.webkit.org/changeset/289789/webkit/\">r289789</a>)</li>\n<li>Changed size queries on unsupported axis to evaluate to unknown (<a href=\"https://trac.webkit.ebkit/\">r289890</a>)</li>\n<li>Implemented container name matching (<a href=\"https://trac.webkit.org/changeset/289617/webkit/\">r289617</a>)</li>\n<li>Implemented full query parser and evaluator (<a href=\"https://trac.webkit.org/changeset/289742/webkit/\">r289742</a>)</li>\n<li>Implemented inline-size containment (<a href=\"https://trac.webkit.org/changeset/289466/webkit/\">r289466</a>)</li>\n<li>Implemented container shorthand serialization (<a href=\"https://trac.webkit.org/changeset/289886/webkit/\">r289886</a>)</li>\n<li>Matched container queries correctly in non-rendered subtrees (<a href=\"https://trac.webkit.org/changeset/290205/webkit/\">r290205</a></li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Enabled CSS Motion Path by default (<a href=\"https://trac.webkit.org/changeset/290071/webkit/\">r290071</a>)</li>\n<li>Enabled <code>overscroll-behavior</code> by default (<a href=\"https://trac.webkit.org/changeset/289683/webkit/\">r289683</a>)</li>\n<li>Changed <code>transform: perspective(0)</code> to not be considered an identity operation (<a href=\"https://trac.webkit.org/changeset/289903/webkit/\">r289903</a>)</li>\n<li>Changed to return <code>none</code> for the computed style of a mask when there are no mask images (<a href=\"https://trac.webkit.org/changeset/289377/webkit/\">r289377</a>)</li>\n<li>Fixed <code>:focus-visible</code> with a click on radio or checkbox labels (<a href=\"https://trac.webkit.org/changeset/289521/webkit/\">r289521</a>)</li>\n<li>Fixed <code>contain: content</code> in fullscreen (<a href=\"https://trac.webkit.org/changeset/289686/webkit/\">r289686</a>)</li>\n<li>Fixed incorrect absolute position layout when toggling <code>contain</code> (<a href=\"https://trac.webkit.org/changeset/289527/webkit/\">r289527</a>)</li>\n<li>Updated conversion to a color space with a smaller gamut to perform gamut mapping (<a href=\"https://trac.webkit.org/changeset/289396/webkit/\">r289396</a>)</li>\n<li>Updated an element with both <code>-webkit-user-select: all</code> and <code>-webkit-user-drag: element</code> to get a snapshot as when using only <code>-webkit-user-drag: element</code> (<a href=\"https://trac.webkit.org/changeset/289544/webkit/\">r289544</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Enabled the <code>KeyframeEffect.composite</code> property (<a href=\"https://trac.webkit.org/changeset/290067/webkit/\">r290067</a>)</li>\n<li>Added <code>composite</code> accumulation support for transform properties (<a href=\"https://trac.webkit.org/changeset/289599/webkit/\">r289599</a>)</li>\n<li>Added support for logical properties in JS-originated animations (<a href=\"https://trac.webkit.org/changeset/289216/webkit/\">r289216</a>)</li>\n<li>Aligned animations with different, but compatible, <code>frameRate</code> values (<a href=\"https://trac.webkit.org/changeset/290121/webkit/\">r290121</a>)</li>\n<li>Allowed setting <code>frameRate</code> as an option passed to <code>Element.animate()</code> (<a href=\"https://trac.webkit.org/changeset/290123/webkit/\">r290123</a>)</li>\n<li>Allowed setting <code>frameRate</code> as an option passed to <code>document.timeline.animate()</code> (<a href=\"https://trac.webkit.org/changeset/290125/webkit/\">r290125</a>)</li>\n<li>Changed to properly handle interpolation of non-invertible matrices (<a href=\"https://trac.webkit.org/changeset/289862/webkit/\">r289862</a>)</li>\n<li>Changed to use the animation <code>frameRate</code> during animation resolution and scheduling (<a href=\"https://trac.webkit.org/changeset/290003/webkit/\">r290003</a>)</li>\n<li>Changed <code>Animation.commitStyles()</code> to use the non-animated style (<a href=\"https://trac.webkit.org/changeset/289453/webkit/\">r289453</a>)</li>\n<li>Fixed additive and accumulation interpolation to work correctly with implicit 0% and 100% keyframes (<a href=\"https://trac.webkit.org/changeset/289454/webkit/\">r289454</a>)</li>\n<li>Fixed animating from <code>scale()</code> to <code>scale() translate()</code> (<a href=\"https://trac.webkit.org/changeset/289732/webkit/\">r289732</a>)</li>\n<li>Fixed additive animations to prevent other animations from running accelerated (<a href=\"https://trac.webkit.org/changeset/289605/webkit/\">r289605</a>)</li>\n<li>Fixed recomputing keyframes when changing <code>direction</code> or <code>writing-mode</code> (<a href=\"https://trac.webkit.org/changeset/289426/webkit/\">r289426</a>)</li>\n<li>Fixed clearing computed keyframes when changing <code>direction</code> or <code>writing-mode</code> (<a href=\"https://trac.webkit.org/changeset/289226/webkit/\">r289226</a>)</li>\n<li>Fixed animations associated with a custom effect to appear in  <code>document.getAnimations()</code> result (<a href=\"https://trac.webkit.org/changeset/290122/webkit/\">r290122</a>)</li>\n<li>Implemented parsing and animation support for <code>offset</code> shorthand (<a href=\"https://trac.webkit.org/changeset/289876/webkit/\">r289876</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Fixed tab characters and <code>ch</code> units to obey synthetic bold width adjustments correctly (<a href=\"https://trac.webkit.org/changeset/289609/webkit/\">r289609</a>)</li>\n</ul>\n<h3>Forms</h3>\n<ul>\n<li>Changed input elements to return an empty string for an invalid floating-point number that ends with &#8220;.&#8221; (<a href=\"https://trac.webkit.org/changeset/290124/webkit/\">r290124</a>)</li>\n<li>Fixed selection method return values to match the spec (<a href=\"https://trac.webkit.org/changeset/289813/webkit/\">r289813</a>)</li>\n<li>Fixed light appearance text fields rendering invisible in Increased Contrast mode (<a href=\"https://trac.webkit.org/changeset/290054/webkit/\">r290054</a>)</li>\n<li>Fixed clicking an <code>&lt;input type=\"image\"&gt;</code> submitting the form with a <code>null</code> submitter (<a href=\"https://trac.webkit.org/changeset/289615/webkit/\">r289615</a>)</li>\n<li>Improved <code>applyStep()</code> to match the spec (<a href=\"https://trac.webkit.org/changeset/289465/webkit/\">r289465</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Enabled Shadow Realms support by default (<a href=\"https://trac.webkit.org/changeset/290119/webkit/\">r290119</a>)</li>\n<li>Implemented <code>Temporal.PlainDate</code> behind a flag: <code>__XPC_JSC_useTemporal=1</code> (<a href=\"https://trac.webkit.org/changeset/290209/webkit/\">r290209</a>)</li>\n<li>Optimized JSString’s atomization (<a href=\"https://trac.webkit.org/changeset/289359/webkit/\">r289359</a>)</li>\n</ul>\n<h3>Shared Workers</h3>\n<ul>\n<li>Added support for sharing Shared Workers (including across WebProcesses) (<a href=\"https://trac.webkit.org/changeset/289247/webkit/\">r289247</a>)</li>\n<li>Changed to fail synchronously when constructing a SharedWorker with a URL that is not same-origin (<a href=\"https://trac.webkit.org/changeset/289532/webkit/\">r289532</a>)</li>\n<li>Fixed <code>self.location.href</code> in Shared Workers in case of redirects (<a href=\"https://trac.webkit.org/changeset/289483/webkit/\">r289483</a>)</li>\n</ul>\n<h3>Workers</h3>\n<ul>\n<li>Changed worker scripts to always be decoded as UTF-8 (<a href=\"https://trac.webkit.org/changeset/289489/webkit/\">r289489</a>)</li>\n<li>Fixed <code>WorkerGlobalScope.importScripts()</code> to protect blob URLs that were passed in until the imports are done (<a href=\"https://trac.webkit.org/changeset/289236/webkit/\">r289236</a>)</li>\n<li>Fixed MIME type check for classic worker script fetches (<a href=\"https://trac.webkit.org/changeset/289672/webkit/\">r289672</a>)</li>\n<li>Fixed exceptions to be properly reported when initializing a worker as a module (<a href=\"https://trac.webkit.org/changeset/289479/webkit/\">r289479</a>)</li>\n</ul>\n<h3>Dialog Element</h3>\n<ul>\n<li>Fixed the Dialog element only animating once (<a href=\"https://trac.webkit.org/changeset/289498/webkit/\">r289498</a>)</li>\n<li>Exposed the correct role, subrole, and role description properties for the <code>&lt;dialog&gt;</code> element (<a href=\"https://trac.webkit.org/changeset/289713/webkit/\">r289713</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added support for both versions of ScreenCaptureKit API (<a href=\"https://trac.webkit.org/changeset/289547/webkit/\">r289547</a>)</li>\n<li>Changed to use the system window and screen picker when available (<a href=\"https://trac.webkit.org/changeset/289696/webkit/\">r289696</a>, <a href=\"https://trac.webkit.org/changeset/289701/webkit/\">r289701</a>)</li>\n<li>Fixed settling a fetch promise to be delayed in case the page is entering page cache (<a href=\"https://trac.webkit.org/changeset/289533/webkit/\">r289533</a>)</li>\n<li>Optimized DOM storage event dispatch (<a href=\"https://trac.webkit.org/changeset/290223/webkit/\">r290223</a>)</li>\n</ul>\n<h3>Experimental Model Element</h3>\n<ul>\n<li>Improved sizing on macOS (<a href=\"https://trac.webkit.org/changeset/289495/webkit/\">r289495</a>)</li>\n<li>Made standalone model documents interactive (<a href=\"https://trac.webkit.org/changeset/289666/webkit/\">r289666</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Added support for the <code>browser.action.openPopup()</code> and <code>browser.browserAction.openPopup()</code> API to open the extension popup for a specific window (this is a WECG <a href=\"https://github.com/w3c/webextensions/issues/15\">proposal</a>)</li>\n<li>Added support for the <code>optional_host_permissions</code> manifest key in <code>manifest_version</code> 3 extensions (this is a WECG <a href=\"https://github.com/w3c/webextensions/issues/119\">proposal</a>)</li>\n<li>Added support for <code>browser.runtime.getFrameId()</code> so it easier to get frame identifiers from content scripts (this is a WECG <a href=\"https://github.com/w3c/webextensions/issues/12\">proposal</a>)</li>\n<li>Added support for the <code>frameId</code> option that can be passed to <code>browser.tabs.sendMessage()</code></li>\n<li>Fixed the number returned by <code>parentFrameId</code> for <code>webNavigation</code> and <code>webRequest</code> events to be <code>-1</code> when it is the main frame</li>\n<li>Fixed <code>devtools.panels.onShown</code> so the window object of the panel is sent to the listeners</li>\n<li>Fixed <code>devtools.panels.onShown</code> to prevent it from firing multiple times per active panel change</li>\n<li>Made the <code>devtools</code> API namespace only exposed to the devtools background pages</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 142 is now available for download for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 289213-290223.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nElements Tab\n\nAdded overlay for visualizing CSS Flexbox container layouts (r290065, r290047, r289416, r289610, r289698, r289757)\nAdded indicators for layout context in element tooltips (r290112)\n\n\nSources Tab\n\nFixed clicking to re-enable a breakpoint clearing automatic continue (r289669)\nFixed double-clicking a breakpoint icon to show the edit popover (r289670)\n\n\n\nCSS Subgrid\n\nEnabled subgrid by default (r290111)\nAdded accounting for subgrid margin, border, and padding when sizing (r290096)\nAdded support for parsing subgrid in grid-template-columns and grid-template-row (r289722)\nChanged to copy track sizes from the parent grid into subgrid (r290007)\nChanged to inherit track count from the parent grid for subgridded axes and clamp item placement to that explicit grid (r289986)\nIncluded subgrid items in the track sizing algorithm of the outer grid (r290077)\nImplemented getComputedStyle for subgrids (r289993)\nFixed certain scenarios where grid may be empty (r289437)\nFixed recalculating styles when updating a grid gap value (r289241)\n\nCSS Container Queries\n\nEnabled CSS Container Queries by default (r290025)\nAdded query container tracking so they can be invalidated on size change (r289457)\nAdded support for all size features (r289838)\nAdded support for full range notation in size queries (r290037)\nAdded support for range operators in size queries (r289789)\nChanged size queries on unsupported axis to evaluate to unknown (r289890)\nImplemented container name matching (r289617)\nImplemented full query parser and evaluator (r289742)\nImplemented inline-size containment (r289466)\nImplemented container shorthand serialization (r289886)\nMatched container queries correctly in non-rendered subtrees (r290205\n\nCSS\n\nEnabled CSS Motion Path by default (r290071)\nEnabled overscroll-behavior by default (r289683)\nChanged transform: perspective(0) to not be considered an identity operation (r289903)\nChanged to return none for the computed style of a mask when there are no mask images (r289377)\nFixed :focus-visible with a click on radio or checkbox labels (r289521)\nFixed contain: content in fullscreen (r289686)\nFixed incorrect absolute position layout when toggling contain (r289527)\nUpdated conversion to a color space with a smaller gamut to perform gamut mapping (r289396)\nUpdated an element with both -webkit-user-select: all and -webkit-user-drag: element to get a snapshot as when using only -webkit-user-drag: element (r289544)\n\nWeb Animations\n\nEnabled the KeyframeEffect.composite property (r290067)\nAdded composite accumulation support for transform properties (r289599)\nAdded support for logical properties in JS-originated animations (r289216)\nAligned animations with different, but compatible, frameRate values (r290121)\nAllowed setting frameRate as an option passed to Element.animate() (r290123)\nAllowed setting frameRate as an option passed to document.timeline.animate() (r290125)\nChanged to properly handle interpolation of non-invertible matrices (r289862)\nChanged to use the animation frameRate during animation resolution and scheduling (r290003)\nChanged Animation.commitStyles() to use the non-animated style (r289453)\nFixed additive and accumulation interpolation to work correctly with implicit 0% and 100% keyframes (r289454)\nFixed animating from scale() to scale() translate() (r289732)\nFixed additive animations to prevent other animations from running accelerated (r289605)\nFixed recomputing keyframes when changing direction or writing-mode (r289426)\nFixed clearing computed keyframes when changing direction or writing-mode (r289226)\nFixed animations associated with a custom effect to appear in  document.getAnimations() result (r290122)\nImplemented parsing and animation support for offset shorthand (r289876)\n\nRendering\n\nFixed tab characters and ch units to obey synthetic bold width adjustments correctly (r289609)\n\nForms\n\nChanged input elements to return an empty string for an invalid floating-point number that ends with “.” (r290124)\nFixed selection method return values to match the spec (r289813)\nFixed light appearance text fields rendering invisible in Increased Contrast mode (r290054)\nFixed clicking an <input type=\"image\"> submitting the form with a null submitter (r289615)\nImproved applyStep() to match the spec (r289465)\n\nJavaScript\n\nEnabled Shadow Realms support by default (r290119)\nImplemented Temporal.PlainDate behind a flag: __XPC_JSC_useTemporal=1 (r290209)\nOptimized JSString’s atomization (r289359)\n\nShared Workers\n\nAdded support for sharing Shared Workers (including across WebProcesses) (r289247)\nChanged to fail synchronously when constructing a SharedWorker with a URL that is not same-origin (r289532)\nFixed self.location.href in Shared Workers in case of redirects (r289483)\n\nWorkers\n\nChanged worker scripts to always be decoded as UTF-8 (r289489)\nFixed WorkerGlobalScope.importScripts() to protect blob URLs that were passed in until the imports are done (r289236)\nFixed MIME type check for classic worker script fetches (r289672)\nFixed exceptions to be properly reported when initializing a worker as a module (r289479)\n\nDialog Element\n\nFixed the Dialog element only animating once (r289498)\nExposed the correct role, subrole, and role description properties for the <dialog> element (r289713)\n\nWeb API\n\nAdded support for both versions of ScreenCaptureKit API (r289547)\nChanged to use the system window and screen picker when available (r289696, r289701)\nFixed settling a fetch promise to be delayed in case the page is entering page cache (r289533)\nOptimized DOM storage event dispatch (r290223)\n\nExperimental Model Element\n\nImproved sizing on macOS (r289495)\nMade standalone model documents interactive (r289666)\n\nWeb Extensions\n\nAdded support for the browser.action.openPopup() and browser.browserAction.openPopup() API to open the extension popup for a specific window (this is a WECG proposal)\nAdded support for the optional_host_permissions manifest key in manifest_version 3 extensions (this is a WECG proposal)\nAdded support for browser.runtime.getFrameId() so it easier to get frame identifiers from content scripts (this is a WECG proposal)\nAdded support for the frameId option that can be passed to browser.tabs.sendMessage()\nFixed the number returned by parentFrameId for webNavigation and webRequest events to be -1 when it is the main frame\nFixed devtools.panels.onShown so the window object of the panel is sent to the listeners\nFixed devtools.panels.onShown to prevent it from firing multiple times per active panel change\nMade the devtools API namespace only exposed to the devtools background pages\n",
      "date_published": "2022-03-24T00:18:33.000Z",
      "date_modified": "2022-03-24T00:18:33.000Z",
      "_plugin": {
        "pageFilename": "0af51b2319b7fee3853cfb3570d1fe4fda3ec736a2a349da125456f83c3ecade.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12445",
      "url": "https://webkit.org/blog/12445/new-webkit-features-in-safari-15-4/",
      "title": "New WebKit Features in Safari 15.4",
      "summary": "With over 70 additions to WebKit, Safari 15.4 is packed with new web technologies, updates, and fixes.",
      "content_html": "<p>With over 70 additions to WebKit, Safari 15.4 is packed with new web technologies, updates, and fixes. We’ve assembled a huge release as part of our commitment to web developers, and the people who use the web. This is the first big WebKit release of 2022, and we’re just getting started.</p>\n<p>Safari 15.4 is available for macOS Monterey 12.3, macOS Big Sur, macOS Catalina, iPadOS 15.4, and iOS 15.4. You can update to Safari 15.4 on macOS Big Sur and macOS Catalina by going to System Preferences → Software Update → More info, and choosing to update Safari.</p>\n<h2><a name=\"html\"></a>HTML</h2>\n<p>Let’s start with HTML. WebKit added support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading\">lazy-loading</a> images with the <a href=\"https://html.spec.whatwg.org/multipage/urls-and-fetching.html#lazy-loading-attributes\"><code>loading</code></a> attribute on the <code>&lt;img&gt;</code> element, providing web developers with an easy way to instruct the browser to defer loading certain images until the user scrolls near them.</p>\n<p>After years of standardization debates over accessibility considerations and with a solution finally at hand, WebKit added support for the <a href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element\"><code>&lt;dialog&gt;</code></a> element and <a href=\"https://fullscreen.spec.whatwg.org/#::backdrop-pseudo-element\"><code>::backdrop</code></a> pseudo-element. The <code>&lt;dialog&gt;</code> element provides a robust and powerful way to create overlays and modals.</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">dialog</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"confirmation-dialog\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">h1</span>&gt;</span>Do you want to delete everything?<span class=\"tag\">&lt;/<span class=\"keyword\">h1</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">p</span>&gt;</span>You will lose all your data.<span class=\"tag\">&lt;/<span class=\"keyword\">p</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"cancel-delete\"</span>&gt;</span>Cancel<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"confirm-delete\"</span>&gt;</span>Delete!<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"keyword\">dialog</span>&gt;</span>\n</code></pre>\n<p>The <code>::backdrop</code> pseudo-element makes it possible to style the background underneath the modal.</p>\n<figure class=\"widescreen mattewhite\">\n<dialog>\n<p class=\"big\">This is a pretty dialog</p>\n<p><button onclick=\"document.querySelector('dialog').close()\">Close</button></p>\n</dialog>\n<p><button onclick=\"document.querySelector('dialog').showModal()\">Show the dialog</button><figcaption>Pretty dialog example styled</figcaption></figure>\n<p>You can learn all about using <code>&lt;dialog&gt;</code> and <code>::backdrop</code> in <a href=\"https://webkit.org/blog/12209/introducing-the-dialog-element/\"><em>Introducing the Dialog Element</em></a>.</p>\n<p>WebKit also added support for the global <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#dom-fe-autofocus\"><code>autofocus</code></a> attribute allowing developers to indicate which element should be the one in focus when the page loads or when a <code>&lt;dialog&gt;</code> is displayed.</p>\n<h2><a name=\"css\"></a>CSS</h2>\n<h3><a name=\"features-for-css-architecture\"></a>Features for CSS Architecture</h3>\n<p>Several additions to CSS in 2022 offer revolutionary new ways for web developers to architect their code, making it easier to reuse code, create design systems, and integrate with complex applications.</p>\n<p>Landing <a href=\"https://caniuse.com/css-has\">in Safari first</a>, WebKit added support for the <a href=\"https://www.w3.org/TR/selectors-4/#relational\"><code>:has()</code></a> pseudo-class. This selector fulfills a long-expressed desire for a “parent selector” — a way to apply CSS rules conditionally based on the contents of an element — and goes even further with the possibilities it enables. It was long thought such a selector was not possible, but our team figured out a way to highly-optimize performance and deliver a flexible solution that does not slow the page.</p>\n<p>WebKit added support for <a href=\"https://css-tricks.com/css-cascade-layers/\">Cascade Layers</a> — a powerful way to organize styles into layers where specificity is calculated independently inside each layer.</p>\n<figure class=\"widescreen mattewhite\"><img loading=\"lazy\" class=\"aligncenter preserve-color wp-image-12421\" src=\"https://webkit.org/wp-content/uploads/cascade-layers-1024x576.png\" alt=\"a diagram of cascade layers, showing how Author layers cascade\" width=\"1024\" height=\"576\" srcset=\"https://webkit.org/wp-content/uploads/cascade-layers-1024x576.png 1024w, https://webkit.org/wp-content/uploads/cascade-layers-300x169.png 300w, https://webkit.org/wp-content/uploads/cascade-layers-768x432.png 768w, https://webkit.org/wp-content/uploads/cascade-layers-1536x864.png 1536w, https://webkit.org/wp-content/uploads/cascade-layers-2048x1152.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>A web developer could create a “framework” layer and a “custom” layer — assigning all the CSS from a 3rd-party framework to the “framework” layer, and writing their own code in the “custom” layer. They could designate that everything in the custom layer should beat everything in the framework layer, no matter the specificity of the selectors used in each layer. Cascade Layers is <a href=\"https://caniuse.com/css-cascade-layers\">arriving in all major browsers</a> at about the same time and is included in <a href=\"https://webkit.org/blog/12288/working-together-on-interop-2022/\">Interop 2022</a>, ensuring this is a tool web developers can begin to seriously consider for the future.</p>\n<p>WebKit also added support for <a href=\"https://www.w3.org/TR/css-contain-2\">CSS Containment</a> — all four types: size, layout, style, and paint — with the <code>contain</code> property.</p>\n<h3><a name=\"solving-pain-points\"></a>Solving Pain Points</h3>\n<p>Several more additions to CSS in WebKit introduce solutions to long-standing pain points.</p>\n<p>Web developers often ask for a tool that would work similar to existing viewport units, but work better on mobile devices where the dimensions of the browser’s viewport change as a user scrolls the page. The <a href=\"https://www.w3.org/TR/css-values-4/#viewport-relative-lengths\">new Viewport Units</a> are that solution. <code>100svh</code>  refers to 100% of the height of the smallest possible viewport. <code>100lvh</code> refers to 100% of the height of the largest possible viewport. And <code>100dvh</code> refers to 100% of the dynamic viewport height — meaning the value will change as the user scrolls.</p>\n<figure class=\"widescreen mattewhite\"><img loading=\"lazy\" class=\"aligncenter preserve-color wp-image-12424\" src=\"https://webkit.org/wp-content/uploads/viewport_units-1024x576.png\" alt=\"100svh measures the smallest viewport, top to bottom. 100lvh measures the largest viewport. 100dvh measures the dynamic viewport, changing as the user scrolls.\" width=\"1024\" height=\"576\" srcset=\"https://webkit.org/wp-content/uploads/viewport_units-1024x576.png 1024w, https://webkit.org/wp-content/uploads/viewport_units-300x169.png 300w, https://webkit.org/wp-content/uploads/viewport_units-768x432.png 768w, https://webkit.org/wp-content/uploads/viewport_units-1536x864.png 1536w, https://webkit.org/wp-content/uploads/viewport_units-2048x1151.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>There are other new viewport units as well — <code>svw</code>, <code>lvw</code>, and <code>dvw</code> serve the same purpose for width. To cover the small, large, and dynamic versions of vmin and vmax, the <code>svmin</code>, <code>svmax</code>, <code>lvmin</code>, <code>lvmax</code>, <code>dvmin</code>, and <code>dvmax</code> units were implemented. To support logical dimensions, the new <code>vi</code> and <code>vb</code> are similar to existing Viewport Units, in the viewport inline and viewport block dimensions. And <code>svi</code>, <code>svb</code>, <code>lvi</code>, <code>lvb</code>, <code>dvi</code>, and <code>dvb</code> provide logical dimension units for the small, large, and dynamic versions of the inline and block dimensions. WebKit is happy to lead the pack, <a href=\"https://caniuse.com/viewport-unit-variants\">shipping these new units first</a> and encouraging other browsers to do so through <a href=\"https://webkit.org/blog/12288/working-together-on-interop-2022/\">Interop 2022</a>.</p>\n<p>WebKit added support for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible\"><code>:focus-visible</code></a> pseudo-class to style the focus indicator only when the browser renders it. Learn more by reading <a href=\"https://webkit.org/blog/12179/the-focus-indicated-pseudo-class-focus-visible/\"><em>The Focus-Indicated Pseudo-class :focus-visible</em></a>.</p>\n<p>To make native form controls more customizable, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/accent-color\"><code>accent-color</code></a> property provides a way for web developers to alter the color of particular parts of the form control UI. Accent color is supported for <code>&lt;input type=\"checkbox\"&gt;</code>, <code>&lt;input type=\"radio\"&gt;</code>, <code>&lt;progress&gt;</code>, <code>&lt;select&gt;</code>, and text-input types with a <code>&lt;datalist&gt;</code> on macOS, iPadOS, and iOS. Additionally, on iPadOS and iOS, accent color is supported for <code>&lt;input type=\"range\"&gt;</code>, <code>&lt;button&gt;</code>, and <code>&lt;input type=\"button\"&gt;</code>.</p>\n<p>WebKit fixed a bug with the interpolation between colors with alpha transparency — improving gradient support.</p>\n<figure><img loading=\"lazy\" class=\"aligncenter preserve-color wp-image-12457\" src=\"https://webkit.org/wp-content/uploads/gradient-example-1024x333.png\" alt=\"How a gradient looks before &amp; after this fix. Without the fix, the color is muddy.\" width=\"1024\" height=\"333\" srcset=\"https://webkit.org/wp-content/uploads/gradient-example-1024x333.png 1024w, https://webkit.org/wp-content/uploads/gradient-example-300x98.png 300w, https://webkit.org/wp-content/uploads/gradient-example-768x250.png 768w, https://webkit.org/wp-content/uploads/gradient-example-1536x499.png 1536w, https://webkit.org/wp-content/uploads/gradient-example-2048x666.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>WebKit added support for <a href=\"https://www.w3.org/TR/css-values-4/#trig-funcs\"><code>calc()</code> math functions</a> including <code>sin</code>, <code>cos</code>, <code>tan</code>, <code>e</code>, <code>pi</code>, <code>exp</code>, <code>log</code>, <code>atan</code>, <code>acos</code>, <code>asin</code>, and <code>atan2</code>.</p>\n<h3><a name=\"typography\"></a>Typography</h3>\n<p>Several new WebKit features in Safari 15.4 enrich what’s possible in typography on the web.</p>\n<p>WebKit added support for the <a href=\"https://www.w3.org/TR/css-fonts-4/#font-palette-prop\"><code>font-palette</code></a> CSS property and <a href=\"https://www.w3.org/TR/css-fonts-4/#font-palette-values\"><code>@font-palette-values</code></a> rule. The <code>font-palette</code> property provides a way for web developers to select one of several different pre-defined color palettes contained inside a color font — for example, to declare that a font’s dark color palette be used for the site’s dark mode design. The <code>@font-palette-values</code> rule provides a way for web developers to define their own custom color palette for recoloring color fonts.</p>\n<figure><img loading=\"lazy\" class=\"aligncenter preserve-color wp-image-12459\" src=\"https://webkit.org/wp-content/uploads/color-font-palette-1024x503.png\" alt=\"four versions of a drop cap, in orange, purple, yellow, and black.\" width=\"1024\" height=\"503\" srcset=\"https://webkit.org/wp-content/uploads/color-font-palette-1024x503.png 1024w, https://webkit.org/wp-content/uploads/color-font-palette-300x147.png 300w, https://webkit.org/wp-content/uploads/color-font-palette-768x377.png 768w, https://webkit.org/wp-content/uploads/color-font-palette-1536x754.png 1536w, https://webkit.org/wp-content/uploads/color-font-palette-2048x1005.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>The color font used for the enlarged caps is <a href=\"https://djr.com/notes/bradley-initials-font-of-the-month\">Bradley Initials DJR Web</a>, shown here with its default palette, a customized palette created by the web developer, an alternative palette that’s included with the font, and with color removed by the user’s preference.</figcaption></figure>\n<p>WebKit added support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-skip-ink\"><code>text-decoration-skip-ink</code></a> to control how underlines and overlines are rendered when they pass over glyph ascenders and descenders. WebKit previously supported this typography feature through <code>text-decoration-skip</code>, but since no other browsers yet support this short-hand, WebKit’s support of the long-hand will make it easier to turn off ink skipping for underlines and overlines.</p>\n<p>WebKit added support the <a href=\"https://drafts.csswg.org/css-values-4/#ic\"><code>ic</code> unit</a>, useful when typesetting CJK scripts. Much like how the <code>ch</code> unit is equivalent to the width (or height, whichever is the inline direction) of the <code>0</code> glyph in a font, the <code>ic</code> unit is equivalent to inline direction length (width or height) of the “水” glyph in the element’s current font.</p>\n<h3><a name=\"retiring-webkit-prefixes\"></a>Retiring WebKit prefixes</h3>\n<p>In an ongoing effort to reduce dependency on prefixes, WebKit newly supports several CSS properties and values that were only previous available in an earlier form. The prefixed versions will still work, now aliased to the unprefixed versions. Safari 15.4 added support for:</p>\n<ul>\n<li><code>appearance</code>, including <code>appearance: auto</code></li>\n<li><code>mask</code>, along with the long-hand forms <code>mask-image</code>, <code>mask-size</code>, <code>mask-repeat-x</code>, <code>mask-repeat-y</code>, <code>mask-origin</code></li>\n<li><code>backface-visibility</code> </li>\n<li><code>text-combine-upright</code> </li>\n<li><code>print-color-adjust</code> </li>\n<li><code>match-parent</code> CSS value for the <code>text-align</code> property</li>\n</ul>\n<p>WebKit also removed the non-standard CSS properties <code>-webkit-border-fit</code>, <code>-webkit-margin-collapse</code>, <code>-webkit-margin-top-collapse</code>, <code>-webkit-margin-bottom-collapse</code>, <code>-webkit-margin-before-collapse</code>, <code>-webkit-margin-after-collapse</code>, and <code>-webkit-background-composite</code>.</p>\n<h2><a name=\"web-apis\"></a>Web APIs</h2>\n<p>This release includes many upgrades to Web APIs in WebKit to help web developers deliver better user experiences.</p>\n<p>New support for <a href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#broadcasting-to-other-browsing-contexts\">BroadcastChannel</a> allows tabs, windows, iframes, and Workers from an origin to send messages to each other. This enables experiences like syncing login state for a site across multiple tabs.</p>\n<p>Another new mechanism supported in WebKit is the <a href=\"https://w3c.github.io/web-locks/\">Web Locks API</a> to manage access to a resource as an asynchronous locking control from an origin in tabs, windows, iframes, and Workers.</p>\n<p>Developers can also control scroll behavior for an element with either the CSS <a href=\"https://www.w3.org/TR/css-overflow-3/#smooth-scrolling\"><code>scroll-behavior</code></a>  property or the <code>behavior</code> option in <code>window.scroll()</code>, <code>window.scrollTo()</code>, and <code>window.scrollBy()</code> methods in JavaScript. This new support gives developers the ability to choose between instantly jumping to a position in the viewport or smoothly animating the scroll operation.</p>\n<p>The ResizeObserver API has updated support for the <a href=\"https://drafts.csswg.org/resize-observer/#resizeobserversize\"><code>ResizeObserverSize</code></a> interface used by <code>ResizeObserverEntry</code> to help developers observe changes to an element’s box-sizing properties.</p>\n<p>The addition of <a href=\"https://html.spec.whatwg.org/multipage/structured-data.html#dom-structuredclone\"><code>structuredClone(value)</code></a> provides a utility that uses the structured clone algorithm to synchronously perform a deep copy to clone and transfer objects from the input value.</p>\n<p>WebKit support of the File System Access API with Origin Private File System first shipped in Safari 15.2. This release introduces the <code>getFile()</code> method in <code>FileSystemFileHandle</code> making it more convenient to read a file from the file system. Plus, WebKit updated WriteableStream to work with the File System Access API. For more information, read <a href=\"https://webkit.org/blog/12257/the-file-system-access-api-with-origin-private-file-system/\"><em>File System Access API with Origin Private File System</em></a>.</p>\n<h2><a name=\"javascript\"></a>JavaScript</h2>\n<p>New features and updates to JavaScript bring added convenience for developers. Handy new Array features make it nicer to search starting from the end of an array using the <a href=\"https://github.com/tc39/proposal-array-find-from-last\"><code>findLast()</code> and <code>findLastIndex()</code> methods</a>. These methods help developers avoid the typical approach requiring mutating the array with <code>reverse()</code> first.</p>\n<p>There’s also support for the <a href=\"https://github.com/tc39/proposal-relative-indexing-method\"><code>at()</code></a> method to access an entry at a specified integer index, which notably includes support for using negative integers to start at the end of the array.</p>\n<pre><code class=\"js\"><span class=\"keyword type\">let</span> <span class=\"identifier\">list</span> <span class=\"operator\">=</span> [<span class=\"char\">'banana'</span>,<span class=\"char\">'cherry'</span>,<span class=\"char\">'orange'</span>,<span class=\"char\">'apple'</span>,<span class=\"char\">'kiwi'</span>];\n\n<span class=\"comment\">// Instead of this:\n</span><span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">list</span>[<span class=\"identifier\">list</span>.<span class=\"identifier\">length</span><span class=\"operator\">-</span><span class=\"number\">2</span>]);\n\n<span class=\"comment\">// It's as easy as:\n</span><span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">list</span>.<span class=\"identifier\">at</span>(<span class=\"operator\">-</span><span class=\"number\">2</span>));\n</code></pre>\n<p>The new language utility <a href=\"https://github.com/tc39/proposal-accessible-object-hasownproperty\"><code>Object.hasOwn()</code></a> simplifies detecting when the object has a property itself, one that is not inherited or doesn’t exist.</p>\n<h3><a name=\"internationalization\"></a>Internationalization</h3>\n<p>As the standards process defines more Internationalization features, WebKit continues to add regular updates to its <code>Intl</code> implementation. This release includes identifying the supported values of local time zones, collations, calendars, numbering systems, and currency with the <a href=\"https://tc39.es/proposal-intl-enumeration/\">Intl Enumeration API</a>.</p>\n<p><a href=\"https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.hourCycles\"><code>Intl.Locale</code>, updated to V2</a>, exposes new information that includes calendar-week data such as the first day of the week, text information like writing direction, and other region-dependent defaults such as calendars, 12- or 24-hour cycles, and numbering systems.</p>\n<p>WebKit also updated <a href=\"https://github.com/tc39/proposal-intl-displaynames-v2\"><code>Intl.DisplayNames</code> to V2</a>, adding support for the <code>calendar</code> and <code>dateTimeField</code> names, and the <code>languageDisplay</code> option.</p>\n<p>The <code>selectRange()</code> method added to <code>Intl.PluralRules</code> provides locale-correct pluralization for ranges (e.g. 0-1 items). The <a href=\"https://tc39.es/proposal-intl-numberformat-v3/\"><code>Intl.NumberFormat</code> V3</a> update adds the <code>formatRange()</code> and <code>formatRangeToParts()</code> methods for formatting a number range using locale-aware conventions along with new <code>useGrouping</code>, <code>roundingPriority</code>, <code>roundingIncrement</code>, <code>trailingZeroDisplay</code>, and <code>signDisplay</code> options.</p>\n<p>Finally, <code>Intl.DateTimeFormat</code> includes support for four new <a href=\"https://github.com/tc39/proposal-intl-extend-timezonename\"><code>timeZoneName</code></a> options: <code>shortOffset</code>, <code>longOffset</code>, <code>shortGeneric</code>, and <code>longGeneric</code>.</p>\n<h2><a name=\"web-apps\"></a>Web Apps</h2>\n<p>Web App Manifest and ServiceWorker received updates that improve the user experience for both websites in Safari and web apps saved to the home screen on iOS and iPadOS.</p>\n<p><a href=\"https://w3c.github.io/manifest\">Web App Manifest</a> improvements include ensuring the browser always fetches the manifest file during page load instead of when the user chooses to “Add to Home Screen” from the Share menu. This approach improves reliability, and also allows a manifest file to define the characteristics of a webpage in Safari.</p>\n<p>In addition, declaring icons in a web app manifest file is now supported. Safari and iOS use manifest-declared icons when there is no <code>apple-touch-icon</code> defined in the HTML head, and when the manifest file code for declaring the icons either omits the <code>\"purpose\"</code> key or includes <code>\"purpose\": \"any\"</code>. Defining icons by using <code>apple-touch-icon</code> takes precedence over manifest-declared icons in order to provide consistent behavior for web apps that use this technique to define specific icons for iOS, distinct from other mobile platforms.</p>\n<p>Developers can now enable <a href=\"https://w3c.github.io/ServiceWorker/#service-worker-registration-navigationpreload\">Navigation Preload in ServiceWorker</a> to improve load performance and avoid ServiceWorker startup delays that block network requests. There’s also new support for allowing users to download files generated by a ServiceWorker. WebKit also improved the reliability of using Fetch using <code>FormData</code> with a file going through ServiceWorker.</p>\n<h2><a name=\"media\"></a>Media</h2>\n<p>The WebRTC negotiation API is now fully aligned with the WebRTC 1.0 specification to support <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Perfect_negotiation\">WebRTC perfect negotiation</a>. It is an approach that solves potential synchronization issues that can happen during negotiation between two remote peers.</p>\n<p>WebKit added support for in-band chapter tracks for audio and video. In-band text tracks provide captions or chapter marker information inside the container for the media itself, instead of being declared in HTML or injected with JavaScript. In-band caption tracks like <a href=\"https://en.wikipedia.org/wiki/EIA-608\">CEA-608</a> were already supported. Now, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/kind\">in-band chapter tracks</a> are also supported, where the “cue” represents the start time and title of a chapter.</p>\n<p>WebKit added support for <a href=\"https://web.dev/requestvideoframecallback-rvfc/\"><code>requestVideoFrameCallback()</code></a> on <code>&lt;video&gt;</code>, which allows the caller to be notified when there&#8217;s a new video frame available for display, and also provides metadata about that frame.</p>\n<h2><a name=\"privacy\"></a>Privacy</h2>\n<p>Continuing our dedication to privacy, and to further our proposed web standard for measuring advertising in a privacy-preserving way, Safari 15.4 provides three updates to <a href=\"https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/\">Private Click Measurement</a>:</p>\n<ul>\n<li>Added conversion fraud prevention via unlinkable tokens for triggering events on merchant websites.</li>\n<li>Added support for same-site conversion pixels on merchant websites, to remove dependency on cross-site pixels.</li>\n<li>Allowed measurement of links in nested, cross-site iframes on publisher websites.</li>\n</ul>\n<h2><a name=\"security\"></a>Security</h2>\n<p>WebKit in Safari 15.4 improves support for <a href=\"https://www.w3.org/TR/CSP3/\">Content Security Policy Level 3</a>, providing enhanced security control over the loading of content, and helping web developers to mitigate risks of cross-site scripting and other vulnerabilities. Blocked resource violation reporting for inline script, inline style and eval execution is updated to match web standards. New support for  <code>'strict-dynamic'</code>,  <code>'unsafe-hashes'</code>, and  <code>'report-sample'</code> source expressions give developers more flexibility. Developers can also safely include external JavaScript in their pages using new support for hash source expressions.</p>\n<p>The release also removes support for the XSS Auditor, which has been superseded by modern cross-origin defenses like CSP and COEP.</p>\n<h2><a name=\"wkwebview\"></a>WKWebView</h2>\n<p>Developers that use WKWebView, including third-party browsers on iOS and iPadOS, can make use of new WKPreferences for additional user experience control. Apps on iOS, iPadOS, and macOS can now control allowing or preventing web content from using the <a href=\"https://fullscreen.spec.whatwg.org/#ref-for-dom-element-requestfullscreen\">Fullscreen API</a>. Another new preference allows enabling or disabling site-specific quirks, a set of site-specific behaviors designed to improve web compatibility.</p>\n<p>On iPadOS, web content that uses Media Source Extensions now works in WKWebView.</p>\n<h2><a name=\"safari-web-extensions\"></a>Safari Web Extensions</h2>\n<p>In our ongoing commitment to a <a href=\"https://www.w3.org/community/webextensions/2021/06/04/forming-the-wecg/\">cross-browser interoperable model for extensions</a>, Safari 15.4 includes additional support for Web Extensions, including support for <code>manifest_version</code> 3 and related API changes. New capabilities include:</p>\n<ul>\n<li><code>service_worker</code> background scripts as an alternative to non-persistent background pages.</li>\n<li>Script and style injection via the <code>browser.scripting</code> APIs.</li>\n<li>Dynamic and session rules via the <code>browser.declarativeNetRequest</code> APIs.</li>\n<li>Webpage-to-extension messaging using <code>externally_connectable:matches.</code></li>\n</ul>\n<p>And several issues were resolved, including:</p>\n<ul>\n<li>Limits are now enforced on the size and number of items in extension sync storage.</li>\n<li>More directives are now allowed to be included in the <code>content_security_policy</code> of an extension’s manifest, such as the <code>sandbox</code> directive.</li>\n<li>Special matching characters (<code>*</code>, <code>|</code>, <code>||</code>, and <code>^</code>) in <code>urlFilter</code> of <code>declarativeNetRequest</code> rules are now handled, instead of being treated as regex patterns.</li>\n<li><code>Promise</code> returns from <code>runtime.onMessage</code> listeners are now allowed for the message reply.</li>\n</ul>\n<h2><a name=\"web-inspector\"></a>Web Inspector</h2>\n<p>Updates to Web Inspector provide helpful new tools for working with CSS in the Styles panel, including intuitive support for Cascade Layers and the new <code>@layer</code> rulesets, making it easy to identify in which layer a rule is defined.</p>\n<p>There are also new CSS Alignment controls when using <code>align-content</code>, <code>align-items</code>, <code>align-self</code>, <code>justify-content</code>, <code>justify-items</code>, or <code>justify-self</code> for Flexbox and Grid to visually identify and select an ideal value.</p>\n<figure class=\"widescreen mattewhite\"><video controls=\"\" loop=\"\" muted=\"\" autoplay=\"\" width=\"100%\"><source src=\"https://webkit.org/wp-content/uploads/alignment-editor-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/alignment-editor.mp4\" type=\"video/mp4\"></video></figure>\n<p>While adding new properties or values in the Styles panel, Web Inspector offers convenient auto-completion options. This release upgrades auto-completion to use fuzzy matching, making finding the right option even easier.</p>\n<p>When working with CSS custom properties, or CSS variables as they’re more widely known, a common practice is to add them to a selector rule for <code>:root</code> or <code>html</code>. Unfortunately, this leads to a long list of inherited CSS variables for every element on the page. Web Inspector helps you handle this in a few ways. First, it hides unused inherited CSS variables automatically. Then, a button is available to reveal them all when you need to see them. You can also use the filter tools to search for the right CSS variable. Or, you can see all applicable CSS variables grouped by value type in the Computed panel, allowing you to collapse the groups that aren’t relevant to your task.</p>\n<figure><video controls=\"\" loop=\"\" muted=\"\" autoplay=\"\" width=\"305\" height=\"420\" style=\"clip-path: inset(2px 0 2px 0)\" poster=\"https://webkit.org/wp-content/uploads/video-variables-grouped-light.jpeg\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-grouped-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-grouped-light.mp4\" type=\"video/mp4\"></video><figcaption>The list of applicable CSS variables can be grouped by value type into collapsible subsections: colors, dimensions and other types.</figcaption></figure>\n<p>Learn more by reading <a href=\"https://webkit.org/blog/12303/css-variables-web-inspector/\"><em>Taming CSS Variables with Web Inspector</em></a>.</p>\n<h2><a name=\"feedback\"></a>Feedback</h2>\n<p>We love hearing from you. Send a tweet to <a href=\"https://twitter.com/webkit\">@webkit</a>, <a href=\"https://twitter.com/jensimmons\">@jensimmons</a> or <a href=\"https://twitter.com/jonathandavis\">@jonathandavis</a> to share your thoughts on this release. What technology from Safari 15.4 are you most excited about? What features or fixes do you want to see next? If you run into any issues, we welcome your <a href=\"https://feedbackassistant.apple.com/\">feedback</a> on the Safari UI or your <a href=\"https://bugs.webkit.org/\">WebKit bug report</a> about web technology. Filing issues really does make a difference.</p>\n<p>Download the latest <a href=\"https://developer.apple.com/safari/download/\">Safari Technology Preview</a> to stay at the forefront of the web platform and  to use the latest Web Inspector features. You can also use the <a href=\"https://webkit.org/status\">WebKit Feature Status</a> page to watch for new information about the web features that interest you the most.</p>\n<h2><a name=\"and-more\"></a>And More</h2>\n<p>To see the full list of what’s in WebKit for Safari 15.4, including additional bug fixes, read the <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-15_4-release-notes\">Safari 15.4 release notes</a>.</p>\n<p>These features were first released in Safari Technology Preview: <a href=\"https://webkit.org/blog/11958/release-notes-for-safari-technology-preview-130/\">130</a>, <a href=\"https://webkit.org/blog/11962/release-notes-for-safari-technology-preview-131/\">131</a>, <a href=\"https://webkit.org/blog/11971/release-notes-for-safari-technology-preview-132/\">132</a>, <a href=\"https://webkit.org/blog/11975/release-notes-for-safari-technology-preview-133/\">133</a>, <a href=\"https://webkit.org/blog/12033/release-notes-for-safari-technology-preview-134/\">134</a>, <a href=\"https://webkit.org/blog/12040/release-notes-for-safari-technology-preview-135/\">135</a>, <a href=\"https://webkit.org/blog/12137/release-notes-for-safari-technology-preview-136/\">136</a>, <a href=\"https://webkit.org/blog/12156/release-notes-for-safari-technology-preview-137/\">137</a>, <a href=\"https://webkit.org/blog/12176/release-notes-for-safari-technology-preview-138/\">138</a>, and <a href=\"https://webkit.org/blog/12193/release-notes-for-safari-technology-preview-139/\">139</a>.</p>",
      "content_text": "With over 70 additions to WebKit, Safari 15.4 is packed with new web technologies, updates, and fixes. We’ve assembled a huge release as part of our commitment to web developers, and the people who use the web. This is the first big WebKit release of 2022, and we’re just getting started.\nSafari 15.4 is available for macOS Monterey 12.3, macOS Big Sur, macOS Catalina, iPadOS 15.4, and iOS 15.4. You can update to Safari 15.4 on macOS Big Sur and macOS Catalina by going to System Preferences → Software Update → More info, and choosing to update Safari.\nHTML\nLet’s start with HTML. WebKit added support for lazy-loading images with the loading attribute on the <img> element, providing web developers with an easy way to instruct the browser to defer loading certain images until the user scrolls near them.\nAfter years of standardization debates over accessibility considerations and with a solution finally at hand, WebKit added support for the <dialog> element and ::backdrop pseudo-element. The <dialog> element provides a robust and powerful way to create overlays and modals.\n<dialog id=\"confirmation-dialog\">\n    <h1>Do you want to delete everything?</h1>\n    <p>You will lose all your data.</p>\n    <button id=\"cancel-delete\">Cancel</button>\n    <button id=\"confirm-delete\">Delete!</button>\n</dialog>\n\nThe ::backdrop pseudo-element makes it possible to style the background underneath the modal.\n\n\nThis is a pretty dialog\nClose\n\nShow the dialogPretty dialog example styled\nYou can learn all about using <dialog> and ::backdrop in Introducing the Dialog Element.\nWebKit also added support for the global autofocus attribute allowing developers to indicate which element should be the one in focus when the page loads or when a <dialog> is displayed.\nCSS\nFeatures for CSS Architecture\nSeveral additions to CSS in 2022 offer revolutionary new ways for web developers to architect their code, making it easier to reuse code, create design systems, and integrate with complex applications.\nLanding in Safari first, WebKit added support for the :has() pseudo-class. This selector fulfills a long-expressed desire for a “parent selector” — a way to apply CSS rules conditionally based on the contents of an element — and goes even further with the possibilities it enables. It was long thought such a selector was not possible, but our team figured out a way to highly-optimize performance and deliver a flexible solution that does not slow the page.\nWebKit added support for Cascade Layers — a powerful way to organize styles into layers where specificity is calculated independently inside each layer.\n\nA web developer could create a “framework” layer and a “custom” layer — assigning all the CSS from a 3rd-party framework to the “framework” layer, and writing their own code in the “custom” layer. They could designate that everything in the custom layer should beat everything in the framework layer, no matter the specificity of the selectors used in each layer. Cascade Layers is arriving in all major browsers at about the same time and is included in Interop 2022, ensuring this is a tool web developers can begin to seriously consider for the future.\nWebKit also added support for CSS Containment — all four types: size, layout, style, and paint — with the contain property.\nSolving Pain Points\nSeveral more additions to CSS in WebKit introduce solutions to long-standing pain points.\nWeb developers often ask for a tool that would work similar to existing viewport units, but work better on mobile devices where the dimensions of the browser’s viewport change as a user scrolls the page. The new Viewport Units are that solution. 100svh  refers to 100% of the height of the smallest possible viewport. 100lvh refers to 100% of the height of the largest possible viewport. And 100dvh refers to 100% of the dynamic viewport height — meaning the value will change as the user scrolls.\n\nThere are other new viewport units as well — svw, lvw, and dvw serve the same purpose for width. To cover the small, large, and dynamic versions of vmin and vmax, the svmin, svmax, lvmin, lvmax, dvmin, and dvmax units were implemented. To support logical dimensions, the new vi and vb are similar to existing Viewport Units, in the viewport inline and viewport block dimensions. And svi, svb, lvi, lvb, dvi, and dvb provide logical dimension units for the small, large, and dynamic versions of the inline and block dimensions. WebKit is happy to lead the pack, shipping these new units first and encouraging other browsers to do so through Interop 2022.\nWebKit added support for the :focus-visible pseudo-class to style the focus indicator only when the browser renders it. Learn more by reading The Focus-Indicated Pseudo-class :focus-visible.\nTo make native form controls more customizable, the accent-color property provides a way for web developers to alter the color of particular parts of the form control UI. Accent color is supported for <input type=\"checkbox\">, <input type=\"radio\">, <progress>, <select>, and text-input types with a <datalist> on macOS, iPadOS, and iOS. Additionally, on iPadOS and iOS, accent color is supported for <input type=\"range\">, <button>, and <input type=\"button\">.\nWebKit fixed a bug with the interpolation between colors with alpha transparency — improving gradient support.\n\nWebKit added support for calc() math functions including sin, cos, tan, e, pi, exp, log, atan, acos, asin, and atan2.\nTypography\nSeveral new WebKit features in Safari 15.4 enrich what’s possible in typography on the web.\nWebKit added support for the font-palette CSS property and @font-palette-values rule. The font-palette property provides a way for web developers to select one of several different pre-defined color palettes contained inside a color font — for example, to declare that a font’s dark color palette be used for the site’s dark mode design. The @font-palette-values rule provides a way for web developers to define their own custom color palette for recoloring color fonts.\nThe color font used for the enlarged caps is Bradley Initials DJR Web, shown here with its default palette, a customized palette created by the web developer, an alternative palette that’s included with the font, and with color removed by the user’s preference.\nWebKit added support for text-decoration-skip-ink to control how underlines and overlines are rendered when they pass over glyph ascenders and descenders. WebKit previously supported this typography feature through text-decoration-skip, but since no other browsers yet support this short-hand, WebKit’s support of the long-hand will make it easier to turn off ink skipping for underlines and overlines.\nWebKit added support the ic unit, useful when typesetting CJK scripts. Much like how the ch unit is equivalent to the width (or height, whichever is the inline direction) of the 0 glyph in a font, the ic unit is equivalent to inline direction length (width or height) of the “水” glyph in the element’s current font.\nRetiring WebKit prefixes\nIn an ongoing effort to reduce dependency on prefixes, WebKit newly supports several CSS properties and values that were only previous available in an earlier form. The prefixed versions will still work, now aliased to the unprefixed versions. Safari 15.4 added support for:\n\nappearance, including appearance: auto\nmask, along with the long-hand forms mask-image, mask-size, mask-repeat-x, mask-repeat-y, mask-origin\nbackface-visibility \ntext-combine-upright \nprint-color-adjust \nmatch-parent CSS value for the text-align property\n\nWebKit also removed the non-standard CSS properties -webkit-border-fit, -webkit-margin-collapse, -webkit-margin-top-collapse, -webkit-margin-bottom-collapse, -webkit-margin-before-collapse, -webkit-margin-after-collapse, and -webkit-background-composite.\nWeb APIs\nThis release includes many upgrades to Web APIs in WebKit to help web developers deliver better user experiences.\nNew support for BroadcastChannel allows tabs, windows, iframes, and Workers from an origin to send messages to each other. This enables experiences like syncing login state for a site across multiple tabs.\nAnother new mechanism supported in WebKit is the Web Locks API to manage access to a resource as an asynchronous locking control from an origin in tabs, windows, iframes, and Workers.\nDevelopers can also control scroll behavior for an element with either the CSS scroll-behavior  property or the behavior option in window.scroll(), window.scrollTo(), and window.scrollBy() methods in JavaScript. This new support gives developers the ability to choose between instantly jumping to a position in the viewport or smoothly animating the scroll operation.\nThe ResizeObserver API has updated support for the ResizeObserverSize interface used by ResizeObserverEntry to help developers observe changes to an element’s box-sizing properties.\nThe addition of structuredClone(value) provides a utility that uses the structured clone algorithm to synchronously perform a deep copy to clone and transfer objects from the input value.\nWebKit support of the File System Access API with Origin Private File System first shipped in Safari 15.2. This release introduces the getFile() method in FileSystemFileHandle making it more convenient to read a file from the file system. Plus, WebKit updated WriteableStream to work with the File System Access API. For more information, read File System Access API with Origin Private File System.\nJavaScript\nNew features and updates to JavaScript bring added convenience for developers. Handy new Array features make it nicer to search starting from the end of an array using the findLast() and findLastIndex() methods. These methods help developers avoid the typical approach requiring mutating the array with reverse() first.\nThere’s also support for the at() method to access an entry at a specified integer index, which notably includes support for using negative integers to start at the end of the array.\nlet list = ['banana','cherry','orange','apple','kiwi'];\n\n// Instead of this:\nconsole.log(list[list.length-2]);\n\n// It's as easy as:\nconsole.log(list.at(-2));\n\nThe new language utility Object.hasOwn() simplifies detecting when the object has a property itself, one that is not inherited or doesn’t exist.\nInternationalization\nAs the standards process defines more Internationalization features, WebKit continues to add regular updates to its Intl implementation. This release includes identifying the supported values of local time zones, collations, calendars, numbering systems, and currency with the Intl Enumeration API.\nIntl.Locale, updated to V2, exposes new information that includes calendar-week data such as the first day of the week, text information like writing direction, and other region-dependent defaults such as calendars, 12- or 24-hour cycles, and numbering systems.\nWebKit also updated Intl.DisplayNames to V2, adding support for the calendar and dateTimeField names, and the languageDisplay option.\nThe selectRange() method added to Intl.PluralRules provides locale-correct pluralization for ranges (e.g. 0-1 items). The Intl.NumberFormat V3 update adds the formatRange() and formatRangeToParts() methods for formatting a number range using locale-aware conventions along with new useGrouping, roundingPriority, roundingIncrement, trailingZeroDisplay, and signDisplay options.\nFinally, Intl.DateTimeFormat includes support for four new timeZoneName options: shortOffset, longOffset, shortGeneric, and longGeneric.\nWeb Apps\nWeb App Manifest and ServiceWorker received updates that improve the user experience for both websites in Safari and web apps saved to the home screen on iOS and iPadOS.\nWeb App Manifest improvements include ensuring the browser always fetches the manifest file during page load instead of when the user chooses to “Add to Home Screen” from the Share menu. This approach improves reliability, and also allows a manifest file to define the characteristics of a webpage in Safari.\nIn addition, declaring icons in a web app manifest file is now supported. Safari and iOS use manifest-declared icons when there is no apple-touch-icon defined in the HTML head, and when the manifest file code for declaring the icons either omits the \"purpose\" key or includes \"purpose\": \"any\". Defining icons by using apple-touch-icon takes precedence over manifest-declared icons in order to provide consistent behavior for web apps that use this technique to define specific icons for iOS, distinct from other mobile platforms.\nDevelopers can now enable Navigation Preload in ServiceWorker to improve load performance and avoid ServiceWorker startup delays that block network requests. There’s also new support for allowing users to download files generated by a ServiceWorker. WebKit also improved the reliability of using Fetch using FormData with a file going through ServiceWorker.\nMedia\nThe WebRTC negotiation API is now fully aligned with the WebRTC 1.0 specification to support WebRTC perfect negotiation. It is an approach that solves potential synchronization issues that can happen during negotiation between two remote peers.\nWebKit added support for in-band chapter tracks for audio and video. In-band text tracks provide captions or chapter marker information inside the container for the media itself, instead of being declared in HTML or injected with JavaScript. In-band caption tracks like CEA-608 were already supported. Now, in-band chapter tracks are also supported, where the “cue” represents the start time and title of a chapter.\nWebKit added support for requestVideoFrameCallback() on <video>, which allows the caller to be notified when there’s a new video frame available for display, and also provides metadata about that frame.\nPrivacy\nContinuing our dedication to privacy, and to further our proposed web standard for measuring advertising in a privacy-preserving way, Safari 15.4 provides three updates to Private Click Measurement:\n\nAdded conversion fraud prevention via unlinkable tokens for triggering events on merchant websites.\nAdded support for same-site conversion pixels on merchant websites, to remove dependency on cross-site pixels.\nAllowed measurement of links in nested, cross-site iframes on publisher websites.\n\nSecurity\nWebKit in Safari 15.4 improves support for Content Security Policy Level 3, providing enhanced security control over the loading of content, and helping web developers to mitigate risks of cross-site scripting and other vulnerabilities. Blocked resource violation reporting for inline script, inline style and eval execution is updated to match web standards. New support for  'strict-dynamic',  'unsafe-hashes', and  'report-sample' source expressions give developers more flexibility. Developers can also safely include external JavaScript in their pages using new support for hash source expressions.\nThe release also removes support for the XSS Auditor, which has been superseded by modern cross-origin defenses like CSP and COEP.\nWKWebView\nDevelopers that use WKWebView, including third-party browsers on iOS and iPadOS, can make use of new WKPreferences for additional user experience control. Apps on iOS, iPadOS, and macOS can now control allowing or preventing web content from using the Fullscreen API. Another new preference allows enabling or disabling site-specific quirks, a set of site-specific behaviors designed to improve web compatibility.\nOn iPadOS, web content that uses Media Source Extensions now works in WKWebView.\nSafari Web Extensions\nIn our ongoing commitment to a cross-browser interoperable model for extensions, Safari 15.4 includes additional support for Web Extensions, including support for manifest_version 3 and related API changes. New capabilities include:\n\nservice_worker background scripts as an alternative to non-persistent background pages.\nScript and style injection via the browser.scripting APIs.\nDynamic and session rules via the browser.declarativeNetRequest APIs.\nWebpage-to-extension messaging using externally_connectable:matches.\n\nAnd several issues were resolved, including:\n\nLimits are now enforced on the size and number of items in extension sync storage.\nMore directives are now allowed to be included in the content_security_policy of an extension’s manifest, such as the sandbox directive.\nSpecial matching characters (*, |, ||, and ^) in urlFilter of declarativeNetRequest rules are now handled, instead of being treated as regex patterns.\nPromise returns from runtime.onMessage listeners are now allowed for the message reply.\n\nWeb Inspector\nUpdates to Web Inspector provide helpful new tools for working with CSS in the Styles panel, including intuitive support for Cascade Layers and the new @layer rulesets, making it easy to identify in which layer a rule is defined.\nThere are also new CSS Alignment controls when using align-content, align-items, align-self, justify-content, justify-items, or justify-self for Flexbox and Grid to visually identify and select an ideal value.\n\nWhile adding new properties or values in the Styles panel, Web Inspector offers convenient auto-completion options. This release upgrades auto-completion to use fuzzy matching, making finding the right option even easier.\nWhen working with CSS custom properties, or CSS variables as they’re more widely known, a common practice is to add them to a selector rule for :root or html. Unfortunately, this leads to a long list of inherited CSS variables for every element on the page. Web Inspector helps you handle this in a few ways. First, it hides unused inherited CSS variables automatically. Then, a button is available to reveal them all when you need to see them. You can also use the filter tools to search for the right CSS variable. Or, you can see all applicable CSS variables grouped by value type in the Computed panel, allowing you to collapse the groups that aren’t relevant to your task.\nThe list of applicable CSS variables can be grouped by value type into collapsible subsections: colors, dimensions and other types.\nLearn more by reading Taming CSS Variables with Web Inspector.\nFeedback\nWe love hearing from you. Send a tweet to @webkit, @jensimmons or @jonathandavis to share your thoughts on this release. What technology from Safari 15.4 are you most excited about? What features or fixes do you want to see next? If you run into any issues, we welcome your feedback on the Safari UI or your WebKit bug report about web technology. Filing issues really does make a difference.\nDownload the latest Safari Technology Preview to stay at the forefront of the web platform and  to use the latest Web Inspector features. You can also use the WebKit Feature Status page to watch for new information about the web features that interest you the most.\nAnd More\nTo see the full list of what’s in WebKit for Safari 15.4, including additional bug fixes, read the Safari 15.4 release notes.\nThese features were first released in Safari Technology Preview: 130, 131, 132, 133, 134, 135, 136, 137, 138, and 139.",
      "date_published": "2022-03-14T17:35:02.000Z",
      "date_modified": "2022-03-17T23:45:01.000Z",
      "_plugin": {
        "pageFilename": "5e4762b8f04dac1a693fc9c82b000fe38b32ba007222c0e0115d6dc6ed890840.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12434",
      "url": "https://webkit.org/blog/12434/release-notes-for-safari-technology-preview-141/",
      "title": "Release Notes for Safari Technology Preview 141",
      "summary": "Safari Technology Preview Release 141 is now available for download for macOS Big Sur and of macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 141 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=288438&amp;rev=289213&amp;limit=775\">288438-289213</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Sources Tab\n<ul>\n<li>Enabled automatic collapsing of blackboxed call frames (<a href=\"https://trac.webkit.org/changeset/288580/webkit/\">r288580</a>)</li>\n</ul>\n</li>\n<li>Network Tab\n<ul>\n<li>Collapsed resource type filter scope bar into a single button to save space (<a href=\"https://trac.webkit.org/changeset/288469/webkit/\">r288469</a>)</li>\n<li>Changed the Ignore Caches icon to be a button with a label so it&#8217;s more visible and immediately understandable (<a href=\"https://trac.webkit.org/changeset/288533/webkit/\">r288533</a>)</li>\n<li>Moved the Group Media Requests and Preserve Log checkboxes into a single filter icon that shows a contextmenu with those options when clicked to save space (<a href=\"https://trac.webkit.org/changeset/288470/webkit/\">r288470</a>)</li>\n</ul>\n</li>\n<li>Graphics Tab\n<ul>\n<li>Added the display of more pseudo-elements than <code>::before</code> and <code>::after</code> (<a href=\"https://trac.webkit.org/changeset/288623/webkit/\">r288623</a>)</li>\n</ul>\n</li>\n<li>Console Tab\n<ul>\n<li>Moved the Preserve Log checkbox into a single filter icon that shows a contextmenu with those options when clicked to save space (<a href=\"https://trac.webkit.org/changeset/288702/webkit/\">r288702</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Enabled support for <code>overflow: clip</code> (<a href=\"https://trac.webkit.org/changeset/288973/webkit/\">r288973</a>)</li>\n<li>Implemented CSS <code>overscroll-behavior</code> for asynchronous scrolling on macOS (<a href=\"https://trac.webkit.org/changeset/288777/webkit/\">r288777</a>)</li>\n<li>Fixed removal of not yet loaded CSS <code>@import</code> (<a href=\"https://trac.webkit.org/changeset/288879/webkit/\">r288879</a>)</li>\n<li>Fixed CSS Grid shorthand expansion of initial values (<a href=\"https://trac.webkit.org/changeset/288544/webkit/\">r288544</a>)</li>\n<li>Fixed <code>scroll-margin-top</code> on inline elements (<a href=\"https://trac.webkit.org/changeset/288947/webkit/\">r288947</a>)</li>\n</ul>\n<h3>Forms</h3>\n<ul>\n<li>Fixed the value not changing for <code>stepUp()</code> and <code>stepDown()</code> with out-of-range values (<a href=\"https://trac.webkit.org/changeset/289075/webkit/\">r289075</a>)</li>\n<li>Fixed grouping radio buttons with no form owner (<a href=\"https://trac.webkit.org/changeset/288734/webkit/\">r288734</a>)</li>\n<li>Used <code>min</code> as the default value when <code>min</code> is greater than <code>max</code> for <code>&lt;input type=\"range\"&gt;</code> (<a href=\"https://trac.webkit.org/changeset/289209/webkit/\">r289209</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Added support for the WASM branch hinting proposal (<a href=\"https://trac.webkit.org/changeset/288758/webkit/\">r288758</a>, <a href=\"https://trac.webkit.org/changeset/288761/webkit/\">r288761</a>)</li>\n<li>Added support for the import assertion syntax behind a flag (<a href=\"https://trac.webkit.org/changeset/288473/webkit/\">r288473</a>)</li>\n<li>Fixed object literal to properly resolve a name clash between an accessor and a constant property (<a href=\"https://trac.webkit.org/changeset/289166/webkit/\">r289166</a>)</li>\n</ul>\n<h3>Experimental Model Element</h3>\n<ul>\n<li>Allowed disabling interaction (<a href=\"https://trac.webkit.org/changeset/288728/webkit/\">r288728</a>)</li>\n<li>Fixed mouse interaction flipped in the y-axis (<a href=\"https://trac.webkit.org/changeset/288610/webkit/\">r288610</a>)</li>\n<li>Fixed <code>&lt;model&gt;</code> to not be draggable on macOS (<a href=\"https://trac.webkit.org/changeset/288723/webkit/\">r288723</a>)</li>\n</ul>\n<h3>Payment Request</h3>\n<ul>\n<li>Allowed additional payment method specific data to be passed to <code>complete()</code> (<a href=\"https://trac.webkit.org/changeset/288698/webkit/\">r288698</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Fixed accelerated transform animations that start with a 1ms delay (<a href=\"https://trac.webkit.org/changeset/289211/webkit/\">r289211</a>)</li>\n<li>Fixed de-duplication for <code>@keyframes</code> rules to account for <code>animation-composition</code> (<a href=\"https://trac.webkit.org/changeset/288571/webkit/\">r288571</a>)</li>\n<li>Fixed the ability to redefine <code>@keyframes</code> (<a href=\"https://trac.webkit.org/changeset/288882/webkit/\">r288882</a>)</li>\n<li>Fixed using logical properties in the <code>transition</code> syntax (<a href=\"https://trac.webkit.org/changeset/289161/webkit/\">r289161</a>)</li>\n<li>Resolved logical properties when compiling the list of transition properties (<a href=\"https://trac.webkit.org/changeset/289167/webkit/\">r289167</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Changed the HTMLMediaElement to dispatch the resize event asynchronously (<a href=\"https://trac.webkit.org/changeset/289108/webkit/\">r289108</a>)</li>\n<li>Changed to remove customElements when transitioning documents (<a href=\"https://trac.webkit.org/changeset/288450/webkit/\">r288450</a>)</li>\n<li>Fixed slow, CPU-bound <code>file.stream()</code> (<a href=\"https://trac.webkit.org/changeset/288463/webkit/\">r288463</a>)</li>\n<li>Fixed Geolocation API to callback with an error if the document is not fully active (<a href=\"https://trac.webkit.org/changeset/288707/webkit/\">r288707</a>)</li>\n<li>Fixed ServiceWorkerNavigationPreloader to only be used once (<a href=\"https://trac.webkit.org/changeset/288949/webkit/\">r288949</a>)</li>\n<li>Implemented <code>AbortSignal.timeout()</code> (<a href=\"https://trac.webkit.org/changeset/289058/webkit/\">r289058</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Allowed use of hardware-fixed credentials while using “Syncing Platform Authenticator” (<a href=\"https://trac.webkit.org/changeset/289059/webkit/\">r289059</a>)</li>\n<li>Added authenticator attachment to <code>PublicKeyCredential</code> (<a href=\"https://trac.webkit.org/changeset/288622/webkit/\">r288622</a>)</li>\n</ul>\n<h3>Content Security Policy</h3>\n<ul>\n<li>Fixed returned WebAssembly error type when blocked (<a href=\"https://trac.webkit.org/changeset/288992/webkit/\">r288992</a>)</li>\n<li>Fixed blocking image content in object elements (<a href=\"https://trac.webkit.org/changeset/288792/webkit/\">r288792</a>)</li>\n<li>Implemented <code>wasm-unsafe-eval</code> (<a href=\"https://trac.webkit.org/changeset/289022/webkit/\">r289022</a>)</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 141 is now available for download for macOS Big Sur and of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 288438-289213.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nSources Tab\n\nEnabled automatic collapsing of blackboxed call frames (r288580)\n\n\nNetwork Tab\n\nCollapsed resource type filter scope bar into a single button to save space (r288469)\nChanged the Ignore Caches icon to be a button with a label so it’s more visible and immediately understandable (r288533)\nMoved the Group Media Requests and Preserve Log checkboxes into a single filter icon that shows a contextmenu with those options when clicked to save space (r288470)\n\n\nGraphics Tab\n\nAdded the display of more pseudo-elements than ::before and ::after (r288623)\n\n\nConsole Tab\n\nMoved the Preserve Log checkbox into a single filter icon that shows a contextmenu with those options when clicked to save space (r288702)\n\n\n\nCSS\n\nEnabled support for overflow: clip (r288973)\nImplemented CSS overscroll-behavior for asynchronous scrolling on macOS (r288777)\nFixed removal of not yet loaded CSS @import (r288879)\nFixed CSS Grid shorthand expansion of initial values (r288544)\nFixed scroll-margin-top on inline elements (r288947)\n\nForms\n\nFixed the value not changing for stepUp() and stepDown() with out-of-range values (r289075)\nFixed grouping radio buttons with no form owner (r288734)\nUsed min as the default value when min is greater than max for <input type=\"range\"> (r289209)\n\nJavaScript\n\nAdded support for the WASM branch hinting proposal (r288758, r288761)\nAdded support for the import assertion syntax behind a flag (r288473)\nFixed object literal to properly resolve a name clash between an accessor and a constant property (r289166)\n\nExperimental Model Element\n\nAllowed disabling interaction (r288728)\nFixed mouse interaction flipped in the y-axis (r288610)\nFixed <model> to not be draggable on macOS (r288723)\n\nPayment Request\n\nAllowed additional payment method specific data to be passed to complete() (r288698)\n\nWeb Animations\n\nFixed accelerated transform animations that start with a 1ms delay (r289211)\nFixed de-duplication for @keyframes rules to account for animation-composition (r288571)\nFixed the ability to redefine @keyframes (r288882)\nFixed using logical properties in the transition syntax (r289161)\nResolved logical properties when compiling the list of transition properties (r289167)\n\nWeb API\n\nChanged the HTMLMediaElement to dispatch the resize event asynchronously (r289108)\nChanged to remove customElements when transitioning documents (r288450)\nFixed slow, CPU-bound file.stream() (r288463)\nFixed Geolocation API to callback with an error if the document is not fully active (r288707)\nFixed ServiceWorkerNavigationPreloader to only be used once (r288949)\nImplemented AbortSignal.timeout() (r289058)\n\nWebAuthn\n\nAllowed use of hardware-fixed credentials while using “Syncing Platform Authenticator” (r289059)\nAdded authenticator attachment to PublicKeyCredential (r288622)\n\nContent Security Policy\n\nFixed returned WebAssembly error type when blocked (r288992)\nFixed blocking image content in object elements (r288792)\nImplemented wasm-unsafe-eval (r289022)\n",
      "date_published": "2022-03-04T00:20:54.000Z",
      "date_modified": "2022-03-04T00:20:54.000Z",
      "_plugin": {
        "pageFilename": "52f20de226ba0bee31b34d031e1d7be995c7403a0989a2d1a166b35c022606ec.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12288",
      "url": "https://webkit.org/blog/12288/working-together-on-interop-2022/",
      "title": "Working together on Interop 2022",
      "summary": "From the very beginning, the web was always intended to work in any browser, on any computer.",
      "content_html": "<p>From the very beginning, the web was always intended to work in any browser, on any computer. This is possible through <em>interoperability</em> — when each underlying web technology is implemented in the same way in every browser. To reach interoperability, it takes a commitment from all browser engineers to implement web technology according to web standards — the incredibly detailed specifications where new technology is defined.</p>\n<p>In 2022, Apple, <a href=\"https://bocoup.com/blog/interop-2022\">Bocoup</a>, <a href=\"https://web.dev/interop-2022/\">Google</a>, <a href=\"https://igalia.com/news/interop2022.html\">Igalia</a>, <a href=\"https://aka.ms/microsoft-interop2022\">Microsoft</a>, and <a href=\"https://hacks.mozilla.org/2022/03/interop-2022/\">Mozilla</a> have come together to commit to improve interoperability in 15 key areas that will have the most impact on web developer experience, in a project called Interop 2022.</p>\n<p>At its root, Interop 2022 is an evolving metric generated from a set of automated tests that aims to evaluate support for certain web standards that are most important for web developers. The <a href=\"https://wpt.fyi/interop-2022\">Interop 2022 dashboard</a> will constantly update throughout the year, showing progress as browser engineers fix bugs, implement new features, and improve the tests.</p>\n<figure class=\"mattewhite\"><img loading=\"lazy\" class=\"aligncenter preserve-color wp-image-12343\" src=\"https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-7.58.05-PM.png\" alt=\"a screenshot of the Interop 2022 dashboard, showing starting scores of: Chrome and Edge Dev, 71. Firefox Nightly, 74. And Safari Technology Preview: 73.\" width=\"1024\" height=\"868\" srcset=\"https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-7.58.05-PM.png 1380w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-7.58.05-PM-300x254.png 300w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-7.58.05-PM-1024x868.png 1024w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-7.58.05-PM-768x651.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>The current overall score on the Interop 2022 dashboard on March 3, 2022.</figcaption></figure>\n<p>The group planning Interop 2022 chose ten new focus areas to add to the five areas from Compat 2021. We also committed to several investigation projects, which will begin this spring.</p>\n<figure class=\"mattewhite\"><img loading=\"lazy\" class=\"aligncenter preserve-color wp-image-12344\" src=\"https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-8.08.18-PM.png\" alt=\"a screenshot of the Interop 2022 dashboard, showing the data table of the 15 focus areas, with the percentage supported for each browser\" width=\"943\" height=\"1024\" srcset=\"https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-8.08.18-PM.png 1390w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-8.08.18-PM-276x300.png 276w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-8.08.18-PM-943x1024.png 943w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-8.08.18-PM-768x834.png 768w\" sizes=\"(max-width: 943px) 100vw, 943px\" /><figcaption>The scoring breakdown on the Interop 2022 dashboard on March 3, 2022.</figcaption></figure>\n<h2>Focus areas</h2>\n<p>Chosen from a <a href=\"https://github.com/web-platform-tests/interop-2022/issues?q=is%3Aissue+label%3Aproposal+sort%3Acreated-asc\">list of proposals</a>, with an eye to what web designers &amp; developers want and need most, the ten new focus areas for 2022 are:</p>\n<ol>\n<li>Cascade Layers</li>\n<li>Color Spaces and Functions</li>\n<li>Containment</li>\n<li>Dialog Element</li>\n<li>Form Fixes</li>\n<li>Scrolling</li>\n<li>Subgrid</li>\n<li>Typography and Encodings</li>\n<li>Viewport Units</li>\n<li>Web Compat</li>\n</ol>\n<p>Let’s take a quick tour of each.</p>\n<h4>Cascade Layers</h4>\n<p>Designed to soothe the frustrations of web developers wrestling with CSS on large projects, <a href=\"https://www.w3.org/TR/css-cascade-5/#layering\">Cascade Layers</a> provides a powerful way to organize styles into layers, where specificity is calculated independently inside each layer.</p>\n<figure><img loading=\"lazy\" class=\"aligncenter preserve-color preserve-brightness wp-image-12421\" src=\"https://webkit.org/wp-content/uploads/cascade-layers-1024x576.png\" alt=\"a diagram of cascade layers, showing how Author layers cascade\" width=\"1024\" height=\"576\" srcset=\"https://webkit.org/wp-content/uploads/cascade-layers-1024x576.png 1024w, https://webkit.org/wp-content/uploads/cascade-layers-300x169.png 300w, https://webkit.org/wp-content/uploads/cascade-layers-768x432.png 768w, https://webkit.org/wp-content/uploads/cascade-layers-1536x864.png 1536w, https://webkit.org/wp-content/uploads/cascade-layers-2048x1152.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>A website could create a “framework” layer and a “custom” layer — assigning all the CSS from a 3rd-party framework to framework layer, writing their own code in the custom layer. They could designate that everything in the custom layer should beat everything in the framework layer, no matter the specificity of the selectors being used.</p>\n<h4>Color Spaces and Functions</h4>\n<p>In the early days of the web, most sites restricted their use of color to a specific palette of 216 colors. Then for a long time, web developers used anything in the sRGB color space, and typically expressed those colors in hexadecimal, <code>rgb()</code>, <code>rgba()</code>, or <code>hsl()</code>. Meanwhile, camera and monitor technology have greatly evolved to capture and display a wider and brighter range of colors. Today’s Apple displays support the Display P3 color space, which is about 50% wider than sRGB.</p>\n<p>New color functions and support for new color spaces bring this vibrancy to the web. Interop 2022 includes testing for support of three expanded color spaces (LAB, LCH, P3), and two ways to write color in CSS through functional notation: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix()\"><code>color-mix</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-contrast()\"><code>color-contrast</code></a>.</p>\n<p>Learn more about color spaces and functions in <em><a href=\"https://webkit.org/blog/6682/improving-color-on-the-web/\">Improving Color on the Web</a></em>, <a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\"><em>Wide Gamut Color in CSS with Display-P3</em></a>, and <em><a href=\"https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/\">Wide Gamut 2D Graphics using HTML Canvas</a></em>.</p>\n<h4>Containment</h4>\n<p>For several years now, web developers’ number one most requested addition to the web has been <a href=\"https://drafts.csswg.org/css-contain-3/#container-queries\">Container Queries</a>. It will be a powerful tool in CSS for identifying and measuring the size of a specific container, and then conditionally applying styles based on that size. It’s like media queries, but instead of measuring the size of the viewport, you measure the size of a box holding the content.</p>\n<p><a href=\"https://www.w3.org/TR/2020/WD-css-contain-2-20201216/\">Containment</a> is foundational to making Container Queries work. In fact, Container Queries is defined in <a href=\"https://www.w3.org/TR/2021/WD-css-contain-3-20211221/\">level 3</a> of the Containment specification. The group driving Interop 2022 didn’t come to consensus to include Container Queries this year. But we did agree to focus on the interoperability of layout, size, and paint containment through the <code>containment</code> property, setting the stage for prioritizing the interoperability of the rest of Containment and Container Queries in the future.</p>\n<h4>Dialog Element</h4>\n<p>Another long-requested feature for the web, the dialog element provides a robust and powerful way to create overlays and modals. The <code>::backdrop</code> pseudo-element makes it possible to style the background underneath the modal. You can learn more about how to use <code>&lt;dialog&gt;</code> and <code>::backdrop</code> in <em><a href=\"https://webkit.org/blog/12209/introducing-the-dialog-element/\">Introducing the Dialog Element</a>.</em></dialog>\n<h4>Form Fixes</h4>\n<p>Forms are another area where web designers and developers find interoperability challenges — ones that the <a href=\"https://open-ui.org/\">Open UI</a> community group and appropriate standards bodies are working to solve. Interop 2022 is contributing to this work by focusing on improving the pass rates for existing tests of existing specs. This includes the <a href=\"https://drafts.csswg.org/css-ui/#appearance-switching\"><code>appearance</code></a> property, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel\"><code>&lt;form&gt;</code></a>, events on <a href=\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#enabling-and-disabling-form-controls%3A-the-disabled-attribute\">disabled form controls</a>, and bugs with input elements, form submission, and form validation.</p>\n<h4>Scrolling</h4>\n<p>Today’s websites and web apps care more deeply about how scrolling works than ever before. <a href=\"https://drafts.csswg.org/css-scroll-snap-1/\">Scroll snap</a> provides the tools for designers and developers to control how interfaces scroll and how content appears. The <a href=\"https://www.w3.org/TR/css-overflow-3/#smooth-scrolling\"><code>scroll-behavior</code></a> property in CSS sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs. The <a href=\"https://drafts.csswg.org/css-overscroll/\"><code>overscroll-behavior</code></a> CSS property determines what a browser does when reaching the boundary of a scrolling area.</p>\n<h4>Subgrid</h4>\n<p>CSS Grid <a href=\"https://caniuse.com/css-grid\">shipped five years ago</a> in March 2017, revolutionizing what’s possible in layout design on the web. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid\">Subgrid</a> is defined in <a href=\"https://www.w3.org/TR/css-grid-2/\">CSS Grid level 2</a>, and provides an easy way to put grandchildren of a grid container on that grid. It will make it possible to line up items across complex layouts, without any regard for the DOM structure. The vision of a working layout system on the web will be more fully realized with Grid and Subgrid together.</p>\n<h4>Typography and Encodings</h4>\n<p>Typography and encodings encompasses a collection of tests that impact typography on the web. <a href=\"https://www.w3.org/TR/css-fonts-4/#font-rend-props\">Font Features</a> are powerful properties for refining typography, but incomplete support has been making them harder to use then they’re supposed to be. The vast majority of the encoding tests pass in every browser, but a handful do not, so they’ve been included. And the <code>ic</code> unit is included.</p>\n<h4>Viewport Units</h4>\n<p>Web developers often ask for a tool that would work similar to viewport units, but work better on mobile devices where the dimensions of the browser’s viewport change as a user scrolls the page. The <a href=\"https://www.w3.org/TR/css-values-4/#viewport-relative-lengths\">new Viewport Units</a> are that solution. <code>100svh</code> refers to 100% of the height of the smallest possible viewport. <code>100lvh</code> refers to 100% of the height of the largest possible viewport. <code>100dvh</code> refers to 100% of the dynamic viewport height — meaning the value will change as the user scrolls.</p>\n<figure><img loading=\"lazy\" class=\"aligncenter preserve-color preserve-brightness wp-image-12424\" src=\"https://webkit.org/wp-content/uploads/viewport_units.png\" alt=\"100svh measures the smallest viewport, top to bottom. 100lvh measures the largest viewport. 100dvh measures the dynamic viewport, changing as the user scrolls.\" width=\"1024\" height=\"576\" srcset=\"https://webkit.org/wp-content/uploads/viewport_units.png 3134w, https://webkit.org/wp-content/uploads/viewport_units-300x169.png 300w, https://webkit.org/wp-content/uploads/viewport_units-1024x576.png 1024w, https://webkit.org/wp-content/uploads/viewport_units-768x432.png 768w, https://webkit.org/wp-content/uploads/viewport_units-1536x864.png 1536w, https://webkit.org/wp-content/uploads/viewport_units-2048x1151.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>There are other new viewport units as well — <code>svw</code>, <code>lvw</code>, and <code>dvw</code> serve the same purpose, for width. And there are new units to refer to the inline or block dimensions of the viewport.</p>\n<h4>Web Compatibility</h4>\n<p>There are many scenarios that could impact web compatibility. For example, specific bugs in browsers could disproportionately cause some websites to not work as intended, or perhaps one browser may vary from the web standard, causing an inconsistent and buggy experience for website or web app users. Interop 2022 aims to capture and address these issues through the web compatibility measurement.</p>\n<h4>Investigation Projects</h4>\n<p>There were several other items that the group knows are important to web development, but which cannot yet be easily evaluated by automated testing. We’ve committed to embark on several investigations in these areas — to manually test browsers, to determine if and how automated testing could be more helpful, to improve the infrastructure of WPT itself, to discover where there might still be a lack of interop, and to make suggestions to the appropriate standards groups. The three areas of investigation are:</p>\n<ul>\n<li>Editing, contenteditable, and execCommand</li>\n<li>Pointer and Mouse Events</li>\n<li>Viewport Measurement</li>\n</ul>\n<p>Each browser will always have the same result for “2022 Investigation”, based on how much work has been accomplished by the group as a whole.</p>\n<h2>Our Commitment to Interoperability</h2>\n<p>All of these technologies are important to Apple and to everyone working on WebKit. We care deeply about the health of the web, and interoperable implementations of web standards. We welcome collaboration with our colleagues in the many web standards organizations, and in Interop 2022 to make the web as interoperable as it can be. Because that’s how websites and web apps will work best for the people who matter most — everyday people using the web to live their lives.</p>\n<h2>For more</h2>\n<p>Read more about Interop 2022 in articles from <a href=\"https://bocoup.com/blog/interop-2022\">Bocoup</a>, <a href=\"https://web.dev/interop-2022/\">Google</a>, <a href=\"https://igalia.com/news/interop2022.html\">Igalia</a>, <a href=\"https://aka.ms/microsoft-interop2022\">Microsoft</a>, and <a href=\"https://hacks.mozilla.org/2022/03/interop-2022/\">Mozilla</a>.</p>",
      "content_text": "From the very beginning, the web was always intended to work in any browser, on any computer. This is possible through interoperability — when each underlying web technology is implemented in the same way in every browser. To reach interoperability, it takes a commitment from all browser engineers to implement web technology according to web standards — the incredibly detailed specifications where new technology is defined.\nIn 2022, Apple, Bocoup, Google, Igalia, Microsoft, and Mozilla have come together to commit to improve interoperability in 15 key areas that will have the most impact on web developer experience, in a project called Interop 2022.\nAt its root, Interop 2022 is an evolving metric generated from a set of automated tests that aims to evaluate support for certain web standards that are most important for web developers. The Interop 2022 dashboard will constantly update throughout the year, showing progress as browser engineers fix bugs, implement new features, and improve the tests.\nThe current overall score on the Interop 2022 dashboard on March 3, 2022.\nThe group planning Interop 2022 chose ten new focus areas to add to the five areas from Compat 2021. We also committed to several investigation projects, which will begin this spring.\nThe scoring breakdown on the Interop 2022 dashboard on March 3, 2022.\nFocus areas\nChosen from a list of proposals, with an eye to what web designers & developers want and need most, the ten new focus areas for 2022 are:\n\nCascade Layers\nColor Spaces and Functions\nContainment\nDialog Element\nForm Fixes\nScrolling\nSubgrid\nTypography and Encodings\nViewport Units\nWeb Compat\n\nLet’s take a quick tour of each.\nCascade Layers\nDesigned to soothe the frustrations of web developers wrestling with CSS on large projects, Cascade Layers provides a powerful way to organize styles into layers, where specificity is calculated independently inside each layer.\n\nA website could create a “framework” layer and a “custom” layer — assigning all the CSS from a 3rd-party framework to framework layer, writing their own code in the custom layer. They could designate that everything in the custom layer should beat everything in the framework layer, no matter the specificity of the selectors being used.\nColor Spaces and Functions\nIn the early days of the web, most sites restricted their use of color to a specific palette of 216 colors. Then for a long time, web developers used anything in the sRGB color space, and typically expressed those colors in hexadecimal, rgb(), rgba(), or hsl(). Meanwhile, camera and monitor technology have greatly evolved to capture and display a wider and brighter range of colors. Today’s Apple displays support the Display P3 color space, which is about 50% wider than sRGB.\nNew color functions and support for new color spaces bring this vibrancy to the web. Interop 2022 includes testing for support of three expanded color spaces (LAB, LCH, P3), and two ways to write color in CSS through functional notation: color-mix and color-contrast.\nLearn more about color spaces and functions in Improving Color on the Web, Wide Gamut Color in CSS with Display-P3, and Wide Gamut 2D Graphics using HTML Canvas.\nContainment\nFor several years now, web developers’ number one most requested addition to the web has been Container Queries. It will be a powerful tool in CSS for identifying and measuring the size of a specific container, and then conditionally applying styles based on that size. It’s like media queries, but instead of measuring the size of the viewport, you measure the size of a box holding the content.\nContainment is foundational to making Container Queries work. In fact, Container Queries is defined in level 3 of the Containment specification. The group driving Interop 2022 didn’t come to consensus to include Container Queries this year. But we did agree to focus on the interoperability of layout, size, and paint containment through the containment property, setting the stage for prioritizing the interoperability of the rest of Containment and Container Queries in the future.\nDialog Element\nAnother long-requested feature for the web, the dialog element provides a robust and powerful way to create overlays and modals. The ::backdrop pseudo-element makes it possible to style the background underneath the modal. You can learn more about how to use <dialog> and ::backdrop in Introducing the Dialog Element.\nForm Fixes\nForms are another area where web designers and developers find interoperability challenges — ones that the Open UI community group and appropriate standards bodies are working to solve. Interop 2022 is contributing to this work by focusing on improving the pass rates for existing tests of existing specs. This includes the appearance property, <form>, events on disabled form controls, and bugs with input elements, form submission, and form validation.\nScrolling\nToday’s websites and web apps care more deeply about how scrolling works than ever before. Scroll snap provides the tools for designers and developers to control how interfaces scroll and how content appears. The scroll-behavior property in CSS sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs. The overscroll-behavior CSS property determines what a browser does when reaching the boundary of a scrolling area.\nSubgrid\nCSS Grid shipped five years ago in March 2017, revolutionizing what’s possible in layout design on the web. Subgrid is defined in CSS Grid level 2, and provides an easy way to put grandchildren of a grid container on that grid. It will make it possible to line up items across complex layouts, without any regard for the DOM structure. The vision of a working layout system on the web will be more fully realized with Grid and Subgrid together.\nTypography and Encodings\nTypography and encodings encompasses a collection of tests that impact typography on the web. Font Features are powerful properties for refining typography, but incomplete support has been making them harder to use then they’re supposed to be. The vast majority of the encoding tests pass in every browser, but a handful do not, so they’ve been included. And the ic unit is included.\nViewport Units\nWeb developers often ask for a tool that would work similar to viewport units, but work better on mobile devices where the dimensions of the browser’s viewport change as a user scrolls the page. The new Viewport Units are that solution. 100svh refers to 100% of the height of the smallest possible viewport. 100lvh refers to 100% of the height of the largest possible viewport. 100dvh refers to 100% of the dynamic viewport height — meaning the value will change as the user scrolls.\n\nThere are other new viewport units as well — svw, lvw, and dvw serve the same purpose, for width. And there are new units to refer to the inline or block dimensions of the viewport.\nWeb Compatibility\nThere are many scenarios that could impact web compatibility. For example, specific bugs in browsers could disproportionately cause some websites to not work as intended, or perhaps one browser may vary from the web standard, causing an inconsistent and buggy experience for website or web app users. Interop 2022 aims to capture and address these issues through the web compatibility measurement.\nInvestigation Projects\nThere were several other items that the group knows are important to web development, but which cannot yet be easily evaluated by automated testing. We’ve committed to embark on several investigations in these areas — to manually test browsers, to determine if and how automated testing could be more helpful, to improve the infrastructure of WPT itself, to discover where there might still be a lack of interop, and to make suggestions to the appropriate standards groups. The three areas of investigation are:\n\nEditing, contenteditable, and execCommand\nPointer and Mouse Events\nViewport Measurement\n\nEach browser will always have the same result for “2022 Investigation”, based on how much work has been accomplished by the group as a whole.\nOur Commitment to Interoperability\nAll of these technologies are important to Apple and to everyone working on WebKit. We care deeply about the health of the web, and interoperable implementations of web standards. We welcome collaboration with our colleagues in the many web standards organizations, and in Interop 2022 to make the web as interoperable as it can be. Because that’s how websites and web apps will work best for the people who matter most — everyday people using the web to live their lives.\nFor more\nRead more about Interop 2022 in articles from Bocoup, Google, Igalia, Microsoft, and Mozilla.",
      "date_published": "2022-03-03T17:00:44.000Z",
      "date_modified": "2022-03-11T18:22:45.000Z",
      "_plugin": {
        "pageFilename": "9f3eeb56fad93482fc395d70c8cf5e58a5e03eca95841c31a3749fa6eaf35587.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12303",
      "url": "https://webkit.org/blog/12303/css-variables-web-inspector/",
      "title": "Taming CSS Variables with Web Inspector",
      "summary": "CSS Custom Properties, better known as CSS variables, have been widely adopted by web designers to build reusable and configurable design systems.",
      "content_html": "<p>CSS Custom Properties, better known as CSS variables, have been widely adopted by web designers to build reusable and configurable design systems. One common approach is to define most CSS variables in a CSS rule with a selector for a root element such as <code>html</code> or <code>:root</code>.</p>\n<p>While this has the benefit of putting them all in one easy to find place, it has a side effect: because CSS variables are inheritable, all descendant elements effectively inherit all variables from ancestors. This behavior is what enables you to use a CSS variable defined at a higher level on the styles of an element that is deeply nested within the document.</p>\n<figure class=\"widescreen mattewhite\">\n<p><video controls loop width=305 height=420 style=\"clip-path: inset(3px 0 0 1px)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-scroll-inherited-light.mp4\" type=\"video/mp4\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-scroll-inherited-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme: dark)\"></video><figcaption>Descendant elements inherit all CSS variables from their ancestor elements. This can result in very long lists of inherited properties in the Styles panel.</figcaption></figure>\n<p>When an element inherits a large number of CSS variables, inspecting its styles can become overwhelming. Likewise, identifying a particular CSS variable to reuse becomes more difficult because you have to search through a large list of them.</p>\n<p>Over the past few releases, Web Inspector in Safari Technology Preview has introduced some features to help you when working on projects that use large numbers of CSS variables.</p>\n<h2>Hiding Unused CSS Variables</h2>\n<p>Of all inherited CSS variables, only a few are actually used on the styles of any one element. To reduce visual clutter in the <a href=\"https://webkit.org/web-inspector/elements-tab/#styles-panel\" rel=\"noopener\" target=\"_blank\">Styles panel</a>, unused inherited CSS variables are automatically hidden. They’re replaced with a button that reveals them on click.</p>\n<p>This helps focus your attention on just the styles that took effect on the inspected element.</p>\n<figure class=\"widescreen mattewhite\">\n<p><video controls loop width=305 height=420 style=\"clip-path: inset(3px 0 2px 0)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-show-hidden-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-show-hidden-light.mp4\" type=\"video/mp4\"></video><figcaption>Unused inherited CSS variables are automatically hidden behind a button that reveals them on click.</figcaption></figure>\n<h2>Searching for CSS Variables</h2>\n<p>The <a href=\"https://webkit.org/web-inspector/elements-tab/#computed-panel\" rel=\"noopener\" target=\"_blank\">Computed panel</a> in Web Inspector has a section that lists all CSS variables applicable to the inspected element. This list of properties can help you when searching for a CSS variable to reuse.</p>\n<p>Use the filter input field to narrow down the list if you know roughly what you’re looking for, either part of the CSS variable name or part of the value.</p>\n<figure class=\"widescreen mattewhite\">\n<p><video controls loop width=305 height=420 style=\"clip-path: inset(2px 0 2px 0)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-ungrouped-filtered-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-ungrouped-filtered-light.mp4\" type=\"video/mp4\"></video><figcaption>Find all CSS variables applicable to the selected element in the Variables section of the Computed panel. Filter the list using the filter input field at the bottom of the panel.</figcaption></figure>\n<h2>Grouping CSS Variables</h2>\n<p><a href=\"https://webkit.org/blog/12176/release-notes-for-safari-technology-preview-138/\" target=\"_blank\" rel=\"noopener\">Safari Technology Preview 138</a> introduced the ability to view this list grouped by value type. This creates separate subsections for CSS variables with values such as colors, numbers, dimensions (numbers followed by CSS units), and so forth. Reduce clutter by collapsing the groups you’re not interested in.</p>\n<figure class=\"widescreen mattewhite\">\n<p><video controls loop width=305 height=420 style=\"clip-path: inset(2px 0 2px 0)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-grouped-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-grouped-light.mp4\" type=\"video/mp4\"></video><figcaption>The list of applicable CSS variables can be grouped by value type into collapsible subsections: colors, dimensions and other types.</figcaption></figure>\n<p>Grouping this way can help you find a CSS variable when you know the type of value you’re looking for, a particular color, for example. Color swatches shown next to variable values together with the ability to group all variables with color values into one distinct section make it easier to visually scan for the desired value.</p>\n<h2>Jump to CSS Variable Definition</h2>\n<p>Here&#8217;s a tip: place the mouse cursor over any CSS variable in the Computed panel to reveal a go-to arrow. Click this to highlight the place in the Styles panel where the variable is defined. If the target CSS variable is hidden because it is unused, it will be automatically shown. This allows you to quickly jump in context to the place where a CSS variable is defined and edit it.</p>\n<figure class=\"widescreen mattewhite\">\n<p><video controls loop width=610 height=420 style=\"clip-path: inset(2px 0 2px 1px)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-jump-to-definition-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-jump-to-definition-light.mp4\" type=\"video/mp4\"></video><figcaption>Use the go-to arrow next to CSS variables in the Computed panel to highlight where the variable is defined in the Styles panel.</figcaption></figure>\n<p>You can also use the filter input field at the bottom of the Styles panel (as described above) and type the name of the variable, but using the go-to arrow to quickly jump to it is much more convenient.</p>\n<h2>Fuzzy Autocompletion of CSS Variable Names</h2>\n<p>Since its inception, Web Inspector has provided autocompletion for CSS properties and values in the Styles panel. More recently, it introduced the ability to provide completion suggestions for CSS variable names when typing within <code>var()</code> function values, as in <code>var(--link-color)</code>.</p>\n<p><a href=\"https://webkit.org/blog/12176/release-notes-for-safari-technology-preview-138/\" target=\"_blank\" rel=\"noopener\">Safari Technology Preview 138</a> made this even better with the introduction of fuzzy matching for CSS autocompletion. This is particularly useful for CSS variables when you might not remember the full name. With fuzzy matching, you can get results that match the query at any position, not just at the beginning.</p>\n<p>For example, if you know that the CSS variable name you’re looking for, say <code>--link-color</code>, includes the substring “color”, you can type just <code>var(color|)</code> (the | character represents the position of the typing caret). You don’t even need to type the double dash prefix. If the CSS variable <code>--link-<strong>color</strong></code> is defined on or inherited by the inspected element, it will be shown in the list of completion suggestions even if the query match occurs at the end of the variable name.</p>\n<figure class=\"widescreen mattewhite\">\n<p><video controls loop width=610 height=420 style=\"clip-path: inset(1px 0 2px 1px)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-fuzzy-autocompletion-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-fuzzy-autocompletion-light.mp4\" type=\"video/mp4\"></video><figcaption>Enjoy the flexibility of fuzzy matching for CSS autocompletion to quickly find a variable by typing any part of its name. <br />For example, type just “color” to match <code>--link-color</code>.</figcaption></figure>\n<h2>Conclusion</h2>\n<p>CSS variables enable a growing number of uses, such as building configurable design systems, practical theming for light and dark modes, customizable styles for web components, among many others. But the proliferation of variables in large numbers within a project can also become a burden during development and debugging.</p>\n<p>Web Inspector has introduced features to help keep you focused and productive. Hiding unused inherited CSS variables in the Styles panel reduces clutter. Collecting and grouping CSS variables in the Computed panel focuses your attention. Fuzzy matching in autocompletion of variable names and filter input fields help you quickly find and reuse variables.</p>\n<p>We hope these improvements make your work easier when dealing with CSS variables.<br />\nAs always, if you encounter any issues, please file a report at <a href=\"http://webkit.org/new-inspector-bug\" target=\"_blank\" rel=\"noopener\">webkit.org/new-inspector-bug</a>.<br />\nIf you want to share feedback or ideas, please send them to us on Twitter: <a href=\"https://twitter.com/WebKit\" target=\"_blank\" rel=\"noopener\">@webkit</a>.</p>\n<div class=\"note\">Note: Learn more about Web Inspector from the <a href=\"/web-inspector/\">Web Inspector Reference</a> documentation.</div>",
      "content_text": "CSS Custom Properties, better known as CSS variables, have been widely adopted by web designers to build reusable and configurable design systems. One common approach is to define most CSS variables in a CSS rule with a selector for a root element such as html or :root.\nWhile this has the benefit of putting them all in one easy to find place, it has a side effect: because CSS variables are inheritable, all descendant elements effectively inherit all variables from ancestors. This behavior is what enables you to use a CSS variable defined at a higher level on the styles of an element that is deeply nested within the document.\n\nDescendant elements inherit all CSS variables from their ancestor elements. This can result in very long lists of inherited properties in the Styles panel.\nWhen an element inherits a large number of CSS variables, inspecting its styles can become overwhelming. Likewise, identifying a particular CSS variable to reuse becomes more difficult because you have to search through a large list of them.\nOver the past few releases, Web Inspector in Safari Technology Preview has introduced some features to help you when working on projects that use large numbers of CSS variables.\nHiding Unused CSS Variables\nOf all inherited CSS variables, only a few are actually used on the styles of any one element. To reduce visual clutter in the Styles panel, unused inherited CSS variables are automatically hidden. They’re replaced with a button that reveals them on click.\nThis helps focus your attention on just the styles that took effect on the inspected element.\n\nUnused inherited CSS variables are automatically hidden behind a button that reveals them on click.\nSearching for CSS Variables\nThe Computed panel in Web Inspector has a section that lists all CSS variables applicable to the inspected element. This list of properties can help you when searching for a CSS variable to reuse.\nUse the filter input field to narrow down the list if you know roughly what you’re looking for, either part of the CSS variable name or part of the value.\n\nFind all CSS variables applicable to the selected element in the Variables section of the Computed panel. Filter the list using the filter input field at the bottom of the panel.\nGrouping CSS Variables\nSafari Technology Preview 138 introduced the ability to view this list grouped by value type. This creates separate subsections for CSS variables with values such as colors, numbers, dimensions (numbers followed by CSS units), and so forth. Reduce clutter by collapsing the groups you’re not interested in.\n\nThe list of applicable CSS variables can be grouped by value type into collapsible subsections: colors, dimensions and other types.\nGrouping this way can help you find a CSS variable when you know the type of value you’re looking for, a particular color, for example. Color swatches shown next to variable values together with the ability to group all variables with color values into one distinct section make it easier to visually scan for the desired value.\nJump to CSS Variable Definition\nHere’s a tip: place the mouse cursor over any CSS variable in the Computed panel to reveal a go-to arrow. Click this to highlight the place in the Styles panel where the variable is defined. If the target CSS variable is hidden because it is unused, it will be automatically shown. This allows you to quickly jump in context to the place where a CSS variable is defined and edit it.\n\nUse the go-to arrow next to CSS variables in the Computed panel to highlight where the variable is defined in the Styles panel.\nYou can also use the filter input field at the bottom of the Styles panel (as described above) and type the name of the variable, but using the go-to arrow to quickly jump to it is much more convenient.\nFuzzy Autocompletion of CSS Variable Names\nSince its inception, Web Inspector has provided autocompletion for CSS properties and values in the Styles panel. More recently, it introduced the ability to provide completion suggestions for CSS variable names when typing within var() function values, as in var(--link-color).\nSafari Technology Preview 138 made this even better with the introduction of fuzzy matching for CSS autocompletion. This is particularly useful for CSS variables when you might not remember the full name. With fuzzy matching, you can get results that match the query at any position, not just at the beginning.\nFor example, if you know that the CSS variable name you’re looking for, say --link-color, includes the substring “color”, you can type just var(color|) (the | character represents the position of the typing caret). You don’t even need to type the double dash prefix. If the CSS variable --link-color is defined on or inherited by the inspected element, it will be shown in the list of completion suggestions even if the query match occurs at the end of the variable name.\n\nEnjoy the flexibility of fuzzy matching for CSS autocompletion to quickly find a variable by typing any part of its name. For example, type just “color” to match --link-color.\nConclusion\nCSS variables enable a growing number of uses, such as building configurable design systems, practical theming for light and dark modes, customizable styles for web components, among many others. But the proliferation of variables in large numbers within a project can also become a burden during development and debugging.\nWeb Inspector has introduced features to help keep you focused and productive. Hiding unused inherited CSS variables in the Styles panel reduces clutter. Collecting and grouping CSS variables in the Computed panel focuses your attention. Fuzzy matching in autocompletion of variable names and filter input fields help you quickly find and reuse variables.\nWe hope these improvements make your work easier when dealing with CSS variables.\nAs always, if you encounter any issues, please file a report at webkit.org/new-inspector-bug.\nIf you want to share feedback or ideas, please send them to us on Twitter: @webkit.\nNote: Learn more about Web Inspector from the Web Inspector Reference documentation.",
      "date_published": "2022-03-02T17:00:42.000Z",
      "date_modified": "2022-03-02T17:17:29.000Z",
      "_plugin": {
        "pageFilename": "f978d4f8583e588c306f2068b20bca14d7a543b9495e5edaccf72a22be9ef0a4.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12257",
      "url": "https://webkit.org/blog/12257/the-file-system-access-api-with-origin-private-file-system/",
      "title": "The File System Access API with Origin Private File System",
      "summary": "WebKit supports new API that makes it possible for web apps to create, open, read, and write files directly, or create directories and enumerate their contents.",
      "content_html": "<p>It is very common for an application to interact with local files. For example, a general workflow is opening a file, making some changes, and saving the file. For web apps, this might be hard to implement. It is possible to simulate the file operations using IndexedDB API, an HTML input element with the <code>file</code> type, an HTML anchor element with the <code>download</code> attribute, etc, but that would require a good understanding of these standards and careful design for a good user experience. Also, the performance may not be satisfactory for frequent operations and large files.</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API\">File System Access API</a> makes it possible for web apps to have easy and efficient file access. It provides a way to create, open, read, and write files directly. It also allows apps to create directories and enumerate their contents.</p>\n<h2>Origin Private File System</h2>\n<p>WebKit has added support for the File System Access API with <a href=\"https://wicg.github.io/file-system-access/#wellknowndirectory-origin-private-file-system\">the origin private file system</a> — a private storage endpoint to some <a href=\"https://html.spec.whatwg.org/multipage/origin.html#concept-origin\">origin</a>. Conceptually, every origin owns an independent directory, and a page can only access files or directories in its origin’s directory. For example, <a href=\"https://webkit.org/\">https://webkit.org</a> cannot read files created by <a href=\"https://apple.com/\">https://apple.com</a>.</p>\n<p>Based on the implementation of different browsers, one entry in the origin private file system does not necessarily map to an entry in the user’s local filesystem — it can be an object stored in some database. That means a file or directory created via the File System Access API may not be easily retrieved from outside of the browser.</p>\n<h2>Persistence</h2>\n<p>The API is currently unavailable for Safari windows in Private Browsing mode. For where is it available, its storage lifetime is the same as other persistent storage types like IndexedDB and LocalStorage. The storage policy will conform to the <a href=\"https://storage.spec.whatwg.org/#storage-endpoints\">Storage Standard</a>. Safari users can view and delete file system storage for a site via Preferences on macOS or Settings on iOS.</p>\n<h2>Browser Support</h2>\n<p>The File System Access API with origin private file system is enabled in WebKit from <a href=\"https://commits.webkit.org/242951@main\">r284131</a>. It is available in Safari on:</p>\n<ul>\n<li>macOS 12.2 and above</li>\n<li>iOS 15.2 and above</li>\n</ul>\n<p>In Safari on macOS 12.4 and iOS 15.4, we introduced the <code>getFile()</code> method of <code>FileSystemFileHandle</code>.</p>\n<h2>The API</h2>\n<p>WebKit currently supports four interfaces of the File System Access API:</p>\n<ul>\n<li><code>FileSystemHandle</code>, which represents an entry in the file system. It is available in Worker and </li>\n<li><code>FileSystemFileHandle</code>, which inherits from FileSystemHandle and represents a file entry. </li>\n<li><code>FileSystemDirectoryHandle</code>, which inherits from FileSystemHandle and represents a directory entry. </li>\n<li><code>FileSystemSyncAccessHandle</code>, which provides an exclusive duplex stream for synchronous read and write on an entry. Unlike the interfaces above, which exist in both Window and Worker contexts, <code>FileSystemSyncAccessHandle</code> is only available in Worker.</li>\n</ul>\n<p>With these basic interfaces in mind, let&#8217;s look at how to use them by diving into some examples.</p>\n<h2>Examples</h2>\n<h3>Accessing the Origin Private File System</h3>\n<p>In the origin private file system, a <code>FileSystemHandle</code> represents either the root directory of the origin’s space, or a descendant of the root directory. Therefore, the first step is to get the root <code>FileSystemDirectoryHandle</code>. It is done via <a href=\"https://storage.spec.whatwg.org/#dom-navigatorstorage-storage\"><code>StorageManager</code></a> interface.</p>\n<pre><code class=\"js\"><span class=\"keyword type\">const</span> <span class=\"identifier\">root</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">navigator</span>.<span class=\"identifier\">storage</span>.<span class=\"identifier\">getDirectory</span>();\n</code></pre>\n<h3>Creating a directory or a file</h3>\n<p>With a <code>FileSystemDirectoryHandle</code> object like root, you can get access to its child with some specific name using <code>getDirectoryHandle()</code> and <code>getFileHandle()</code> methods.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Create a file named Untiled.txt under root directory.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">untitledFile</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">getFileHandle</span>(<span class=\"string\">\"Untitled.txt\"</span>, { <span class=\"string\">\"create\"</span> <span class=\"operator\">:</span> <span class=\"keyword literal\">true</span> });\n<span class=\"comment\">// Get access to existing Untitled.txt file.\n</span><span class=\"comment\">// untitledFile and existingUntitledFile point to the same entry.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">existingUntitledFile</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">getFileHandle</span>(<span class=\"string\">\"Untitled.txt\"</span>);\n<span class=\"comment\">// Create a directory named Diary Folder.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">diaryDirectory</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">getDirectoryHandle</span>(<span class=\"string\">\"Diary Folder\"</span>, { <span class=\"string\">\"create\"</span> <span class=\"operator\">:</span> <span class=\"keyword literal\">true</span> });\n</code></pre>\n<h3>Moving or Renaming a Directory or a File</h3>\n<p>To move around the file or directory a <code>FileSystemHandle</code> represents, you can use the <code>move()</code> method. The first parameter is a <code>FileSystemDirectoryHandle</code> representing the target parent directory, and the second parameter is a <code>USVString</code> representing the target file name. The string must be a <a href=\"https://wicg.github.io/file-system-access/#valid-file-name\">valid file name</a>.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Move Untitled.txt from /root/ to /root/Diary Folder/.\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">untitledFile</span>.<span class=\"identifier\">move</span>(<span class=\"identifier\">diaryDirectory</span>, <span class=\"identifier\">untitledFile</span>.<span class=\"identifier\">name</span>);\n<span class=\"comment\">// Rename Untitled.txt to Feb_01.txt\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">untitledFile</span>.<span class=\"identifier\">move</span>(<span class=\"identifier\">diaryDirectory</span>, <span class=\"string\">\"Feb_01.txt\"</span>);\n<span class=\"comment\">// The two steps above can be combined as:\n</span><span class=\"comment\">// await untitledFile.move(diaryDirectory, \"Feb_01.txt\");\n</span></code></pre>\n<h3>Resolving the Path from a Directory Entry to its Descendant</h3>\n<p>To find out if a <code>FileSystemHandle</code> is a descendant of an existing <code>FileSystemDirectoryHandle</code>, and to get their relative path, you can use the <code>resolve()</code> method. The result is an array of component names that forms the path.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Get access to Feb_01.txt in Diary Folder.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">diaryFile</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">diaryDirectory</span>.<span class=\"identifier\">getFileHandle</span>(<span class=\"string\">\"Feb_01.txt\"</span>);\n<span class=\"comment\">// Resolve path between Feb_01.txt and root.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">relativePath</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">resolve</span>(<span class=\"identifier\">diaryFile</span>);\n<span class=\"comment\">// relativePath is [\"Diary Folder\", \"Feb_01.txt\"].\n</span></code></pre>\n<h3>Enumerating Contents in a Directory</h3>\n<p>The methods introduced above require you to know the name of target, but if you don’t know the name, you can still get it by enumerating the contents of an existing directory with <code>async</code> iterators returned by the <code>keys()</code>, <code>values()</code>, and <code>entries()</code> methods.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Create a directory named Trash under the root directory.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">trashDirectory</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">getDirectoryHandle</span>(<span class=\"string\">\"Trash\"</span>, { <span class=\"string\">\"create\"</span> <span class=\"operator\">:</span> <span class=\"keyword literal\">true</span> });\n<span class=\"comment\">// Find directories under root/ and print their names.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">directoryNames</span> <span class=\"operator\">=</span> [];\n<span class=\"keyword control\">for</span> <span class=\"identifier\">await</span> (<span class=\"keyword type\">const</span> <span class=\"identifier\">handle</span> <span class=\"keyword operator\">of</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">values</span>()) {\n    <span class=\"keyword control\">if</span> (<span class=\"identifier\">handle</span>.<span class=\"identifier\">kind</span> <span class=\"operator\">=</span><span class=\"operator\">=</span> <span class=\"string\">\"directory\"</span>) {\n        <span class=\"identifier\">directoryNames</span>.<span class=\"identifier\">push</span>(<span class=\"identifier\">handle</span>.<span class=\"identifier\">name</span>);\n    }\n}\n<span class=\"comment\">// directoryNames is [\"Trash\", \"Diary Folder\"].\n</span></code></pre>\n<h3>Deleting a Directory or a File</h3>\n<p>With a <code>FileSystemDirectoryHandle</code> object, you can delete its child entries by name with the <code>removeEntry()</code> method.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Delete Feb_01.txt in Diary Folder.\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">diaryDirectory</span>.<span class=\"identifier\">removeEntry</span>(<span class=\"identifier\">diaryFile</span>.<span class=\"identifier\">name</span>);\n<span class=\"comment\">// Delete Trash and all its descendants.\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">removeEntry</span>(<span class=\"identifier\">trashDirectory</span>.<span class=\"identifier\">name</span>, { <span class=\"string\">\"recursive\"</span> <span class=\"operator\">:</span> <span class=\"keyword literal\">true</span> });\n</code></pre>\n<h3>Reading a File</h3>\n<p>Once you have the <code>FileSystemFileHandle</code> representing the target file, you can read its properties and content by converting it to a <a href=\"https://w3c.github.io/FileAPI/#file-section\"><code>File</code></a> object using the <code>getFile()</code> method. You can get file information and content using interfaces of <code>File</code>.</p>\n<pre><code class=\"js\"><span class=\"keyword type\">const</span> <span class=\"identifier\">fileHandle</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">getFileHandle</span>(<span class=\"string\">\"Draft.txt\"</span>, { <span class=\"string\">\"create\"</span> <span class=\"operator\">:</span> <span class=\"keyword literal\">true</span> });\n<span class=\"keyword type\">const</span> <span class=\"identifier\">file</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">fileHandle</span>.<span class=\"identifier\">getFile</span>();\n</code></pre>\n<h3>Reading and Writing a File in a Worker Thread</h3>\n<p>Another way to read a file is to use the <code>read()</code> method of the <code>FileSystemSyncAccessHandle</code> interface. You can create a <code>FileSystemSyncAccessHandle</code> from a <code>FileSystemFileHandle</code> object using the <code>createSyncAccessHandle()</code> method. Since <code>FileSystemSyncAccessHandle</code> is only available in Worker contexts, you will need to <a href=\"https://html.spec.whatwg.org/multipage/workers.html#creating-a-dedicated-worker\">create a dedicated Worker</a> first.</p>\n<p>Unlike <code>getFile()</code> that returns a Promise, <code>read()</code> is synchronous, and thus provides better performance. If you&#8217;re aiming for the most efficient file access, <code>FileSystemSyncAccessHandle</code> is the way to go.</p>\n<p>To write a file, you can use the synchronous <code>write()</code> method of <code>FileSystemSyncAccessHandle</code>. In the current implementation, this is the only way to write a file in WebKit.</p>\n<p>To implement synchronous read and write operations, a <code>FileSystemSyncAccessHandle</code> must have exclusive access to a file entry. Therefore, the attempt to create a second <code>FileSystemSyncAccessHandle</code> on an entry will fail, if the previous <code>FileSystemSyncAccessHandle</code> is not closed properly.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Get access to the existing Draft.txt file.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">root</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">navigator</span>.<span class=\"identifier\">storage</span>.<span class=\"identifier\">getDirectory</span>();\n<span class=\"keyword type\">const</span> <span class=\"identifier\">draftFile</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">getFileHandle</span>(<span class=\"string\">\"Draft.txt\"</span>);\n<span class=\"comment\">// Create FileSystemSyncAccessHandle on the file.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">accessHandle</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">draftFile</span>.<span class=\"identifier\">createSyncAccessHandle</span>();\n<span class=\"comment\">// Get size of the file.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">fileSize</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">accessHandle</span>.<span class=\"identifier\">getSize</span>();\n<span class=\"comment\">// Read file content to a buffer.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">readBuffer</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">ArrayBuffer</span>(<span class=\"identifier\">fileSize</span>);\n<span class=\"keyword type\">const</span> <span class=\"identifier\">readSize</span> <span class=\"operator\">=</span> <span class=\"identifier\">accessHandle</span>.<span class=\"identifier\">read</span>(<span class=\"identifier\">readBuffer</span>, { <span class=\"string\">\"at\"</span><span class=\"operator\">:</span> <span class=\"number\">0</span> });\n<span class=\"comment\">// Write a sentence to the end of the file.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">encoder</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">TextEncoder</span>();\n<span class=\"keyword type\">const</span> <span class=\"identifier\">writeBuffer</span> <span class=\"operator\">=</span> <span class=\"identifier\">encoder</span>.<span class=\"identifier\">encode</span>(<span class=\"string\">\"Thank you for reading this.\"</span>);\n<span class=\"keyword type\">const</span> <span class=\"identifier\">writeSize</span> <span class=\"operator\">=</span> <span class=\"identifier\">accessHandle</span>.<span class=\"identifier\">write</span>(<span class=\"identifier\">writeBuffer</span>, { <span class=\"string\">\"at\"</span> <span class=\"operator\">:</span> <span class=\"identifier\">readSize</span> });\n<span class=\"comment\">// Truncate file to 1 byte.\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">accessHandle</span>.<span class=\"identifier\">truncate</span>(<span class=\"number\">1</span>);\n<span class=\"comment\">// Persist changes to disk.\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">accessHandle</span>.<span class=\"identifier\">flush</span>();\n<span class=\"comment\">// Always close FileSystemSyncAccessHandle if done.\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">accessHandle</span>.<span class=\"identifier\">close</span>();\n</code></pre>\n<h2>Summary</h2>\n<p>If your web app needs to interact with files, you should try the new File System Access API. It provides interfaces that are similar to the native file system API, with optimized performance.</p>\n<p>As the standard evolves and development goes on, we will keep adding or updating interfaces and methods according to the <a href=\"https://wicg.github.io/file-system-access/\">File System Access API</a> spec. If you encounter any issue when using this API, please file a bug on <a href=\"https://bugs.webkit.org/\">bugs.webkit.org</a> under the “Website Storage” component. You may also create a new bug report for feature requests, describing your use case and why the feature is important. If you have any question or suggestion about the API itself, you can file a spec issue in the <a href=\"https://github.com/wicg/file-system-access/issues/\">WICG repo</a>. Your feedback is very important to us.</p>",
      "content_text": "It is very common for an application to interact with local files. For example, a general workflow is opening a file, making some changes, and saving the file. For web apps, this might be hard to implement. It is possible to simulate the file operations using IndexedDB API, an HTML input element with the file type, an HTML anchor element with the download attribute, etc, but that would require a good understanding of these standards and careful design for a good user experience. Also, the performance may not be satisfactory for frequent operations and large files.\nThe File System Access API makes it possible for web apps to have easy and efficient file access. It provides a way to create, open, read, and write files directly. It also allows apps to create directories and enumerate their contents.\nOrigin Private File System\nWebKit has added support for the File System Access API with the origin private file system — a private storage endpoint to some origin. Conceptually, every origin owns an independent directory, and a page can only access files or directories in its origin’s directory. For example, https://webkit.org cannot read files created by https://apple.com.\nBased on the implementation of different browsers, one entry in the origin private file system does not necessarily map to an entry in the user’s local filesystem — it can be an object stored in some database. That means a file or directory created via the File System Access API may not be easily retrieved from outside of the browser.\nPersistence\nThe API is currently unavailable for Safari windows in Private Browsing mode. For where is it available, its storage lifetime is the same as other persistent storage types like IndexedDB and LocalStorage. The storage policy will conform to the Storage Standard. Safari users can view and delete file system storage for a site via Preferences on macOS or Settings on iOS.\nBrowser Support\nThe File System Access API with origin private file system is enabled in WebKit from r284131. It is available in Safari on:\n\nmacOS 12.2 and above\niOS 15.2 and above\n\nIn Safari on macOS 12.4 and iOS 15.4, we introduced the getFile() method of FileSystemFileHandle.\nThe API\nWebKit currently supports four interfaces of the File System Access API:\n\nFileSystemHandle, which represents an entry in the file system. It is available in Worker and \nFileSystemFileHandle, which inherits from FileSystemHandle and represents a file entry. \nFileSystemDirectoryHandle, which inherits from FileSystemHandle and represents a directory entry. \nFileSystemSyncAccessHandle, which provides an exclusive duplex stream for synchronous read and write on an entry. Unlike the interfaces above, which exist in both Window and Worker contexts, FileSystemSyncAccessHandle is only available in Worker.\n\nWith these basic interfaces in mind, let’s look at how to use them by diving into some examples.\nExamples\nAccessing the Origin Private File System\nIn the origin private file system, a FileSystemHandle represents either the root directory of the origin’s space, or a descendant of the root directory. Therefore, the first step is to get the root FileSystemDirectoryHandle. It is done via StorageManager interface.\nconst root = await navigator.storage.getDirectory();\n\nCreating a directory or a file\nWith a FileSystemDirectoryHandle object like root, you can get access to its child with some specific name using getDirectoryHandle() and getFileHandle() methods.\n// Create a file named Untiled.txt under root directory.\nconst untitledFile = await root.getFileHandle(\"Untitled.txt\", { \"create\" : true });\n// Get access to existing Untitled.txt file.\n// untitledFile and existingUntitledFile point to the same entry.\nconst existingUntitledFile = await root.getFileHandle(\"Untitled.txt\");\n// Create a directory named Diary Folder.\nconst diaryDirectory = await root.getDirectoryHandle(\"Diary Folder\", { \"create\" : true });\n\nMoving or Renaming a Directory or a File\nTo move around the file or directory a FileSystemHandle represents, you can use the move() method. The first parameter is a FileSystemDirectoryHandle representing the target parent directory, and the second parameter is a USVString representing the target file name. The string must be a valid file name.\n// Move Untitled.txt from /root/ to /root/Diary Folder/.\nawait untitledFile.move(diaryDirectory, untitledFile.name);\n// Rename Untitled.txt to Feb_01.txt\nawait untitledFile.move(diaryDirectory, \"Feb_01.txt\");\n// The two steps above can be combined as:\n// await untitledFile.move(diaryDirectory, \"Feb_01.txt\");\n\nResolving the Path from a Directory Entry to its Descendant\nTo find out if a FileSystemHandle is a descendant of an existing FileSystemDirectoryHandle, and to get their relative path, you can use the resolve() method. The result is an array of component names that forms the path.\n// Get access to Feb_01.txt in Diary Folder.\nconst diaryFile = await diaryDirectory.getFileHandle(\"Feb_01.txt\");\n// Resolve path between Feb_01.txt and root.\nconst relativePath = await root.resolve(diaryFile);\n// relativePath is [\"Diary Folder\", \"Feb_01.txt\"].\n\nEnumerating Contents in a Directory\nThe methods introduced above require you to know the name of target, but if you don’t know the name, you can still get it by enumerating the contents of an existing directory with async iterators returned by the keys(), values(), and entries() methods.\n// Create a directory named Trash under the root directory.\nconst trashDirectory = await root.getDirectoryHandle(\"Trash\", { \"create\" : true });\n// Find directories under root/ and print their names.\nconst directoryNames = [];\nfor await (const handle of root.values()) {\n    if (handle.kind == \"directory\") {\n        directoryNames.push(handle.name);\n    }\n}\n// directoryNames is [\"Trash\", \"Diary Folder\"].\n\nDeleting a Directory or a File\nWith a FileSystemDirectoryHandle object, you can delete its child entries by name with the removeEntry() method.\n// Delete Feb_01.txt in Diary Folder.\nawait diaryDirectory.removeEntry(diaryFile.name);\n// Delete Trash and all its descendants.\nawait root.removeEntry(trashDirectory.name, { \"recursive\" : true });\n\nReading a File\nOnce you have the FileSystemFileHandle representing the target file, you can read its properties and content by converting it to a File object using the getFile() method. You can get file information and content using interfaces of File.\nconst fileHandle = await root.getFileHandle(\"Draft.txt\", { \"create\" : true });\nconst file = await fileHandle.getFile();\n\nReading and Writing a File in a Worker Thread\nAnother way to read a file is to use the read() method of the FileSystemSyncAccessHandle interface. You can create a FileSystemSyncAccessHandle from a FileSystemFileHandle object using the createSyncAccessHandle() method. Since FileSystemSyncAccessHandle is only available in Worker contexts, you will need to create a dedicated Worker first.\nUnlike getFile() that returns a Promise, read() is synchronous, and thus provides better performance. If you’re aiming for the most efficient file access, FileSystemSyncAccessHandle is the way to go.\nTo write a file, you can use the synchronous write() method of FileSystemSyncAccessHandle. In the current implementation, this is the only way to write a file in WebKit.\nTo implement synchronous read and write operations, a FileSystemSyncAccessHandle must have exclusive access to a file entry. Therefore, the attempt to create a second FileSystemSyncAccessHandle on an entry will fail, if the previous FileSystemSyncAccessHandle is not closed properly.\n// Get access to the existing Draft.txt file.\nconst root = await navigator.storage.getDirectory();\nconst draftFile = await root.getFileHandle(\"Draft.txt\");\n// Create FileSystemSyncAccessHandle on the file.\nconst accessHandle = await draftFile.createSyncAccessHandle();\n// Get size of the file.\nconst fileSize = await accessHandle.getSize();\n// Read file content to a buffer.\nconst readBuffer = new ArrayBuffer(fileSize);\nconst readSize = accessHandle.read(readBuffer, { \"at\": 0 });\n// Write a sentence to the end of the file.\nconst encoder = new TextEncoder();\nconst writeBuffer = encoder.encode(\"Thank you for reading this.\");\nconst writeSize = accessHandle.write(writeBuffer, { \"at\" : readSize });\n// Truncate file to 1 byte.\nawait accessHandle.truncate(1);\n// Persist changes to disk.\nawait accessHandle.flush();\n// Always close FileSystemSyncAccessHandle if done.\nawait accessHandle.close();\n\nSummary\nIf your web app needs to interact with files, you should try the new File System Access API. It provides interfaces that are similar to the native file system API, with optimized performance.\nAs the standard evolves and development goes on, we will keep adding or updating interfaces and methods according to the File System Access API spec. If you encounter any issue when using this API, please file a bug on bugs.webkit.org under the “Website Storage” component. You may also create a new bug report for feature requests, describing your use case and why the feature is important. If you have any question or suggestion about the API itself, you can file a spec issue in the WICG repo. Your feedback is very important to us.",
      "date_published": "2022-02-14T17:00:36.000Z",
      "date_modified": "2022-02-14T18:19:52.000Z",
      "_plugin": {
        "pageFilename": "314b96c213f5c3d6275179f78d58ed5a59e9e04f5dd0abe1e3aa10c9aad322b9.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12255",
      "url": "https://webkit.org/blog/12255/release-notes-for-safari-technology-preview-140/",
      "title": "Release Notes for Safari Technology Preview 140",
      "summary": "Safari Technology Preview Release 140 is now available for download for macOS Big Sur and of macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 140 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=287834&amp;rev=288438&amp;limit=604\">287834-288438</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Made CSS Alignment controls in the Styles Detail Sidebar accessible (<a href=\"https://trac.webkit.org/changeset/288385/webkit/\">r288385</a>)</li>\n</ul>\n</li>\n<li>Sources Tab\n<ul>\n<li>Added a contextual menu item to create a URL Breakpoint for resources initiated by script (<a href=\"https://trac.webkit.org/changeset/288029/webkit/\">r288029</a>)</li>\n<li>Fixed fully blackboxed stack traces to show the right top call frame (<a href=\"https://trac.webkit.org/changeset/288266/webkit/\">r288266</a>)</li>\n</ul>\n</li>\n<li>Timelines Tab\n<ul>\n<li>Added better names for newer CSS Animations, CSS Transitions, and Web Animations events (<a href=\"https://trac.webkit.org/changeset/287945/webkit/\">r287945</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>:has() Pseudo-Class</h3>\n<ul>\n<li>Added support for <code>:has(:not(foo))</code> (<a href=\"https://trac.webkit.org/changeset/288303/webkit/\">r288303</a>)</li>\n<li>Avoided complex style invalidation with repeated DOM mutations (<a href=\"https://trac.webkit.org/changeset/288012/webkit\">r288012</a>, <a href=\"https://trac.webkit.org/changeset/287973/webkit/\">r287973</a>)</li>\n<li>Fixed computing specificity (<a href=\"https://trac.webkit.org/changeset/288196/webkit/\">r288196</a>)</li>\n<li>Changed to disallow nested <code>:has()</code> (<a href=\"https://trac.webkit.org/changeset/288111/webkit/\">r288111</a>)</li>\n<li>Changed to ignore <code>:visited</code> inside <code>:has()</code> (<a href=\"https://trac.webkit.org/changeset/288304/webkit/\">r288304</a>)</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Added support for intrinsic sizes in <code>flex-basis</code> (<a href=\"https://trac.webkit.org/changeset/288113/webkit/\">r288113</a>)</li>\n<li>Added support for intrinsic sizes to the <code>flex</code> shorthand (<a href=\"https://trac.webkit.org/changeset/288184/webkit/\">r288184</a>)</li>\n<li>Added support for “missing“/&#8221;none&#8221; color components (<a href=\"https://trac.webkit.org/changeset/288143/webkit/\">r288143</a>)</li>\n<li>Added support for interpolating colors with “missing”/“none” components via <code>color-mix()</code> (<a href=\"https://trac.webkit.org/changeset/288427/webkit/\">r288427</a>)</li>\n<li>Added support for preloading of layered <code>@import</code> rules (<a href=\"https://trac.webkit.org/changeset/288099/webkit/\">r288099</a>)</li>\n<li>Changed interpolation mode for CSS gradients to default to OKLab if any non-legacy color syntax colors are used in the stops (<a href=\"https://trac.webkit.org/changeset/288071/webkit/\">r288071</a>)</li>\n<li>Changed to only apply automatic minimum block-size aspect-ratio rules to non-replaced elements (<a href=\"https://trac.webkit.org/changeset/288003/webkit/\">r288003</a>)</li>\n<li>Fixed the <code>::backdrop</code> pseudo-element to react to associated element event listeners (<a href=\"https://trac.webkit.org/changeset/287878/webkit/\">r287878</a>)</li>\n<li>Fixed the CSS <code>color()</code> function to not clamp channels to the 0-1 range (<a href=\"https://trac.webkit.org/changeset/287838/webkit/\">r287838</a>)</li>\n<li>Fixed the height of <code>flex</code> items with <code>aspect-ratio</code> whenever the cross axis intrinsic size is larger than the viewport (<a href=\"https://trac.webkit.org/changeset/287976/webkit/\">r287976</a>)</li>\n<li>Fixed rounding of distributed free space to flexible tracks (<a href=\"https://trac.webkit.org/changeset/287977/webkit/\">r287977</a>)</li>\n<li>Fixed <code>position: fixed</code> layers to not allocate a backing buffer if all the children are offscreen (<a href=\"https://trac.webkit.org/changeset/288429/webkit/\">r288429</a>)</li>\n<li>Fixed setting <code>content: normal</code> on a <code>::marker</code> to make the computed style return resolved values (<a href=\"https://trac.webkit.org/changeset/288054/webkit/\">r288054</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added support for <code>FetchEvent.handled</code> API for Service Workers (<a href=\"https://trac.webkit.org/changeset/287915/webkit/\">r287915</a>)</li>\n<li>Enabled <code>form.requestSubmit()</code> (<a href=\"https://trac.webkit.org/changeset/288179/webkit/\">r288179</a>)</li>\n<li>Fixed <code>nextHopProtocol</code> exposed regardless of <code>Timing-Allow-Origin</code> (<a href=\"https://trac.webkit.org/changeset/288219/webkit/\">r288219</a>)</li>\n<li>Fixed <code>input.labels</code> inside shadow DOM (<a href=\"https://trac.webkit.org/changeset/288162/webkit/\">r288162</a>)</li>\n<li>Fixed canvas functions that take colors as strings to support all the syntax that CSS supports (<a href=\"https://trac.webkit.org/changeset/288134/webkit/\">r288134</a>)</li>\n<li>Implemented <code>HTMLScriptElement.supports(type)</code> method (<a href=\"https://trac.webkit.org/changeset/287996/webkit/\">r287996</a>)</li>\n<li>Improved computation of Service Worker <code>FetchEvent.resultingClientId</code> (<a href=\"https://trac.webkit.org/changeset/288201/webkit/\">r288201</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Added support for <code>animation-composition</code> CSS property (<a href=\"https://trac.webkit.org/changeset/288433/webkit/\">r288433</a>)</li>\n<li>Changed <code>getKeyframes()</code> for a CSS Animation to not use computed style for keyframes (<a href=\"https://trac.webkit.org/changeset/287835/webkit/\">r287835</a>)</li>\n<li>Fixed interpolation during animation of two empty transform lists to always yield &#8220;none&#8221; (<a href=\"https://trac.webkit.org/changeset/287917/webkit/\">r287917</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Fixed Date functions&#8217; argument coercion (<a href=\"https://trac.webkit.org/changeset/288066/webkit/\">r288066</a>)</li>\n<li>Relaxed <code>Date.parse</code> requirement (<a href=\"https://trac.webkit.org/changeset/288411/webkit/\">r288411</a>)</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Fixed misc <code>WebAssembly.Table</code> issues (<a href=\"https://trac.webkit.org/changeset/288064/webkit/\">r288064</a>)</li>\n<li>Fixed misc issues in <code>WebAssembly.Exception</code> (<a href=\"https://trac.webkit.org/changeset/288065/webkit/\">r288065</a>)</li>\n<li>Fixed <code>WebAssembly.Global</code>&#8216;s typename for &#8220;anyfunc&#8221; (<a href=\"https://trac.webkit.org/changeset/288049/webkit/\">r288049</a>)</li>\n</ul>\n<h3>Dialog Element</h3>\n<ul>\n<li>Added <code>visibility: visible</code> to modal dialogs in the user-agent stylesheet (<a href=\"https://trac.webkit.org/changeset/288233/webkit/\">r288233</a>)</li>\n<li>Fixed some overflow and clipping issues with modal dialogs (<a href=\"https://trac.webkit.org/changeset/288267/webkit/\">r288267</a>, <a href=\"https://trac.webkit.org/changeset/287845/webkit/\">r287845</a>)</li>\n</ul>\n<h3>HTML</h3>\n<ul>\n<li>Fixed support for new lines in HTMLTextArea&#8217;s <code>placeholder</code> text (<a href=\"https://trac.webkit.org/changeset/288005/webkit/\">r288005</a>)</li>\n<li>Fixed keeping the selected state of a select element when inserting a selected <code>&lt;option&gt;</code> (<a href=\"https://trac.webkit.org/changeset/288174/webkit/\">r288174</a>)</li>\n<li>Prevented <code>contenteditable</code> anchors from being stuck (<a href=\"https://trac.webkit.org/changeset/288420/webkit/\">r288420</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed <code>gl.texImage2D</code> upload of getUserMedia streams via <code>&lt;video&gt;</code> element fails (<a href=\"https://trac.webkit.org/changeset/288025/webkit/\">r288025</a>)</li>\n<li>Fixed MediaStream <code>canvas.captureStream()</code> playback (<a href=\"https://trac.webkit.org/changeset/288435/webkit/\">r288435</a>)</li>\n<li>Fixed portrait video playback on HTML canvas elements (<a href=\"https://trac.webkit.org/changeset/288053/webkit/\">r288053</a>)</li>\n<li>Fixed no VP9-SVS video stream from remote peer on some devices (<a href=\"https://trac.webkit.org/changeset/287928/webkit/\">r287928</a>)</li>\n<li>Fixed “Add to Contact” menu item (<a href=\"https://trac.webkit.org/changeset/287959/webkit/\">r287959</a>)</li>\n<li>Tightened the focus check for getUserMedia (<a href=\"https://trac.webkit.org/changeset/288087/webkit/\">r288087</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Allowed single use of WebAuthn without user gesture for all relying parties (<a href=\"https://trac.webkit.org/changeset/287957/webkit/\">r287957</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Exposed toggle buttons using <code>role=\"button\"</code> as form controls (<a href=\"https://trac.webkit.org/changeset/288100/webkit/\">r288100</a>)</li>\n<li>Improved support for <code>aria-owns</code> in ARIA trees (<a href=\"https://trac.webkit.org/changeset/288117/webkit/\">r288117</a>)</li>\n</ul>\n<h3>Content Security Policy</h3>\n<ul>\n<li>Improved handling of multiple policies (<a href=\"https://trac.webkit.org/changeset/288132/webkit/\">r288132</a>)</li>\n</ul>\n<h3>Privacy</h3>\n<ul>\n<li>Fixed an issue where a website may be able to track sensitive user information (<a href=\"https://trac.webkit.org/changeset/288078/webkit/\">r288078</a>) </li>\n</ul>\n<h3>SVG</h3>\n<ul>\n<li>Fixed calculations of <code>filterRegion</code> and <code>outsets</code> of the referenced SVG filter (<a href=\"https://trac.webkit.org/changeset/288183/webkit/\">r288183</a>)</li>\n<li>Fixed referenced SVG filter always using sRGB color space for its result (<a href=\"https://trac.webkit.org/changeset/287982/webkit/\">r287982</a>)</li>\n</ul>\n<h3>Scrolling</h3>\n<ul>\n<li>Fixed sometimes not being able to scroll after using a builtin trackpad (<a href=\"https://trac.webkit.org/changeset/287997/webkit/\">r287997</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Fixed a crash when calling <code>browser.webNavigation.getAllFrames()</code> on an empty tab</li>\n<li>Fixed Active tab permissions for a tab to get removed if a matching per-site permission changes to &#8220;Deny&#8221;</li>\n<li>Fixed service worker background script errors to get reset each time they successfully load</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 140 is now available for download for macOS Big Sur and of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 287834-288438.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nElements Tab\n\nMade CSS Alignment controls in the Styles Detail Sidebar accessible (r288385)\n\n\nSources Tab\n\nAdded a contextual menu item to create a URL Breakpoint for resources initiated by script (r288029)\nFixed fully blackboxed stack traces to show the right top call frame (r288266)\n\n\nTimelines Tab\n\nAdded better names for newer CSS Animations, CSS Transitions, and Web Animations events (r287945)\n\n\n\n:has() Pseudo-Class\n\nAdded support for :has(:not(foo)) (r288303)\nAvoided complex style invalidation with repeated DOM mutations (r288012, r287973)\nFixed computing specificity (r288196)\nChanged to disallow nested :has() (r288111)\nChanged to ignore :visited inside :has() (r288304)\n\nCSS\n\nAdded support for intrinsic sizes in flex-basis (r288113)\nAdded support for intrinsic sizes to the flex shorthand (r288184)\nAdded support for “missing“/”none” color components (r288143)\nAdded support for interpolating colors with “missing”/“none” components via color-mix() (r288427)\nAdded support for preloading of layered @import rules (r288099)\nChanged interpolation mode for CSS gradients to default to OKLab if any non-legacy color syntax colors are used in the stops (r288071)\nChanged to only apply automatic minimum block-size aspect-ratio rules to non-replaced elements (r288003)\nFixed the ::backdrop pseudo-element to react to associated element event listeners (r287878)\nFixed the CSS color() function to not clamp channels to the 0-1 range (r287838)\nFixed the height of flex items with aspect-ratio whenever the cross axis intrinsic size is larger than the viewport (r287976)\nFixed rounding of distributed free space to flexible tracks (r287977)\nFixed position: fixed layers to not allocate a backing buffer if all the children are offscreen (r288429)\nFixed setting content: normal on a ::marker to make the computed style return resolved values (r288054)\n\nWeb API\n\nAdded support for FetchEvent.handled API for Service Workers (r287915)\nEnabled form.requestSubmit() (r288179)\nFixed nextHopProtocol exposed regardless of Timing-Allow-Origin (r288219)\nFixed input.labels inside shadow DOM (r288162)\nFixed canvas functions that take colors as strings to support all the syntax that CSS supports (r288134)\nImplemented HTMLScriptElement.supports(type) method (r287996)\nImproved computation of Service Worker FetchEvent.resultingClientId (r288201)\n\nWeb Animations\n\nAdded support for animation-composition CSS property (r288433)\nChanged getKeyframes() for a CSS Animation to not use computed style for keyframes (r287835)\nFixed interpolation during animation of two empty transform lists to always yield “none” (r287917)\n\nJavaScript\n\nFixed Date functions’ argument coercion (r288066)\nRelaxed Date.parse requirement (r288411)\n\nWebAssembly\n\nFixed misc WebAssembly.Table issues (r288064)\nFixed misc issues in WebAssembly.Exception (r288065)\nFixed WebAssembly.Global‘s typename for “anyfunc” (r288049)\n\nDialog Element\n\nAdded visibility: visible to modal dialogs in the user-agent stylesheet (r288233)\nFixed some overflow and clipping issues with modal dialogs (r288267, r287845)\n\nHTML\n\nFixed support for new lines in HTMLTextArea’s placeholder text (r288005)\nFixed keeping the selected state of a select element when inserting a selected <option> (r288174)\nPrevented contenteditable anchors from being stuck (r288420)\n\nMedia\n\nFixed gl.texImage2D upload of getUserMedia streams via <video> element fails (r288025)\nFixed MediaStream canvas.captureStream() playback (r288435)\nFixed portrait video playback on HTML canvas elements (r288053)\nFixed no VP9-SVS video stream from remote peer on some devices (r287928)\nFixed “Add to Contact” menu item (r287959)\nTightened the focus check for getUserMedia (r288087)\n\nWebAuthn\n\nAllowed single use of WebAuthn without user gesture for all relying parties (r287957)\n\nAccessibility\n\nExposed toggle buttons using role=\"button\" as form controls (r288100)\nImproved support for aria-owns in ARIA trees (r288117)\n\nContent Security Policy\n\nImproved handling of multiple policies (r288132)\n\nPrivacy\n\nFixed an issue where a website may be able to track sensitive user information (r288078) \n\nSVG\n\nFixed calculations of filterRegion and outsets of the referenced SVG filter (r288183)\nFixed referenced SVG filter always using sRGB color space for its result (r287982)\n\nScrolling\n\nFixed sometimes not being able to scroll after using a builtin trackpad (r287997)\n\nWeb Extensions\n\nFixed a crash when calling browser.webNavigation.getAllFrames() on an empty tab\nFixed Active tab permissions for a tab to get removed if a matching per-site permission changes to “Deny”\nFixed service worker background script errors to get reset each time they successfully load\n",
      "date_published": "2022-02-10T21:05:31.000Z",
      "date_modified": "2022-02-10T21:05:11.000Z",
      "_plugin": {
        "pageFilename": "0d38f00669abad69fe074fb484e0625eb278f36faf67e2040f180846de559ebc.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12209",
      "url": "https://webkit.org/blog/12209/introducing-the-dialog-element/",
      "title": "Introducing the Dialog Element",
      "summary": "Although the alert, confirm and prompt JavaScript methods are convenient, they aren’t recommended due to their script-blocking behavior.",
      "content_html": "<p>Although the <code>alert</code>, <code>confirm</code> and <code>prompt</code> JavaScript methods are convenient, they aren’t recommended due to their script-blocking behavior. That’s why we worked with other browser vendors to drive improvements to the <code>&lt;dialog&gt;</code> specification over the last few years. The most important conversations involved accessibility.</p>\n<p>You can find more complex use-cases, like payment dialogs, on the web. They are currently addressed by custom solutions from frameworks like Bootstrap. Unfortunately, they aren’t convenient to use and aren’t always accessible. We believe the web deserves a simple and bug-free solution for these use-cases. Safari Technology Preview 134 and Safari 15.4 beta introduces the <code>&lt;dialog&gt;</code> element for this reason!</p>\n<h2>How Do I Use <code>&lt;dialog&gt;</code>?</h2>\n<p>Let’s create a simple confirmation dialog:</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">dialog</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"confirmation-dialog\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">h1</span>&gt;</span>Do you want to delete everything?<span class=\"tag\">&lt;/<span class=\"keyword\">h1</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">p</span>&gt;</span>You will lose all your data.<span class=\"tag\">&lt;/<span class=\"keyword\">p</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"cancel-delete\"</span>&gt;</span>Cancel<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"confirm-delete\"</span>&gt;</span>Delete!<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"keyword\">dialog</span>&gt;</span>\n</code></pre>\n<p>Dialogs are hidden by default. We can use the <code>showModal()</code> method to show the dialog. When it’s shown, the dialog can be closed with the <code>close()</code> method.</p>\n<p>Here is an example:</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"delete\"</span>&gt;</span>Delete everything<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">p</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"keyword\">p</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">script</span>&gt;</span>\nlet dialog = document.getElementById(\"confirmation-dialog\");\nlet result = document.getElementById(\"result\");\n\n// Show the dialog when clicking \"Delete everything\"\ndocument.getElementById(\"delete\").addEventListener(\"click\", function() {\n    dialog.showModal();\n});\n\ndocument.getElementById(\"cancel-delete\").addEventListener(\"click\", function() {\n    dialog.close();\n    result.textContent = \"Canceled!\";\n});\ndocument.getElementById(\"confirm-delete\").addEventListener(\"click\", function() {\n    dialog.close();\n    result.textContent = \"Deleted!\";\n});\n<span class=\"tag\">&lt;/<span class=\"keyword\">script</span>&gt;</span>\n</code></pre>\n<p>Note that the dialog will get an <code>open</code> attribute once opened, which may be useful for styling purposes. However, it’s not recommended to toggle this attribute manually to show or hide the dialog, since the browser may lose track of the dialog state, and will not perform proper focus adjustments for accessibility.</p>\n<figure class=\"widescreen mattewhite demo\">\n<p><iframe src=\"https://webkit.org/demos/dialog-element/confirmation-dialog-basic.html\" height=\"300\"></iframe><figcaption>Example confirmation dialog</figcaption></figure>\n<h2>Modal and Non-modal Dialogs</h2>\n<p>In the last example, the <code>showModal()</code> method was used to create a modal dialog. User interaction is locked inside modal dialogs and outside content cannot be clicked, focused, selected, edited, or seen by accessibility tools. Another feature of modal dialogs is their ability to appear on top of everything else in the web page, regardless of the <code>z-index</code> of other elements.</p>\n<p>Non-modal dialogs also exist and can be invoked using <code>show()</code> method. Unlike modal dialogs, they still allow interaction with the surrounding content. An example use-case may be a find-in-page dialog for a document editor, where you still want to allow the user to interact with the rest of the document.</p>\n<h2>Using Forms with <code>&lt;dialog&gt;</code></h2>\n<p>Forms within dialogs can be used to request information from the user, such as when a shipping address or payment details are needed.</p>\n<p>Unlike a traditional <code>&lt;form&gt;</code>, where <code>method=\"get\"</code> or <code>\"post\"</code> indicates that the form data is sent to a server, using <code>&lt;form method=\"dialog\"&gt;</code> causes form submission instead to close the dialog and set the <code>returnValue</code> property to the submit button&#8217;s value. This can save you from writing custom code, while providing the correct semantics to your web page.</p>\n<p>We can simplify the initial example using this new feature:</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">dialog</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"confirmation-dialog\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">form</span> <span class=\"keyword attribute\">method</span>=<span class=\"attribute value string\">\"dialog\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"keyword\">h1</span>&gt;</span>Do you want to delete everything?<span class=\"tag\">&lt;/<span class=\"keyword\">h1</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"keyword\">p</span>&gt;</span>You will lose all your data.<span class=\"tag\">&lt;/<span class=\"keyword\">p</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">type</span>=<span class=\"attribute value string\">\"submit\"</span> <span class=\"keyword attribute\">value</span>=<span class=\"attribute value string\">\"Canceled!\"</span>&gt;</span>Cancel<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">type</span>=<span class=\"attribute value string\">\"submit\"</span> <span class=\"keyword attribute\">value</span>=<span class=\"attribute value string\">\"Deleted!\"</span>&gt;</span>Delete!<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"keyword\">form</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"keyword\">dialog</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"delete\"</span>&gt;</span>Delete everything<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">p</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"keyword\">p</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"keyword\">script</span>&gt;</span>\nlet dialog = document.getElementById(\"confirmation-dialog\");\n\ndocument.getElementById(\"delete\").addEventListener(\"click\", function() {\n    dialog.showModal();\n});\n\ndialog.addEventListener(\"close\", function() {\n    document.getElementById(\"result\").textContent = dialog.returnValue;\n});\n<span class=\"tag\">&lt;/<span class=\"keyword\">script</span>&gt;</span>\n</code></pre>\n<p>Note the use of the <code>close</code> event here, which is special to <code>&lt;dialog&gt;</code>.</p>\n<figure class=\"widescreen mattewhite demo\">\n<p><iframe src=\"https://webkit.org/demos/dialog-element/confirmation-dialog-form.html\" height=\"300\"></iframe><figcaption>Example confirmation dialog with a form</figcaption></figure>\n<h2>Styling</h2>\n<p>The semi-transparent box behind the dialog that you may have noticed from previous examples is the <code>::backdrop</code> pseudo-element. By default, it is styled so it covers the whole viewport. Like the dialog itself, you can style the backdrop using CSS. Animations can also be used if you would like to add a fade-in effect for instance.</p>\n<p>Note that the backdrop is only shown for modal dialogs.</p>\n<p>Here is an example:</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">dialog</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">h1</span>&gt;</span>This is a pretty dialog<span class=\"tag\">&lt;/<span class=\"keyword\">h1</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">p</span>&gt;</span>The backdrop animates!<span class=\"tag\">&lt;/<span class=\"keyword\">p</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"keyword\">dialog</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">onclick</span>=<span class=\"attribute value string\">\"document.querySelector('dialog').showModal()\"</span>&gt;</span>Show the dialog<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"keyword\">style</span>&gt;</span>\ndialog {\n    box-shadow: 0 2px 5px rgba(0,0,0,0.3);\n    border: none;\n    border-radius: 10px;\n}\n\ndialog::backdrop {\n    background: linear-gradient(rgba(0,0,0,0.1), rgba(0,0,0,0.4));\n    animation: fade-in 1s;\n}\n\n@keyframes fade-in {\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n<span class=\"tag\">&lt;/<span class=\"keyword\">style</span>&gt;</span>\n</code></pre>\n<figure class=\"widescreen mattewhite\">\n<dialog>\n<h1>This is a pretty dialog</h1>\n<p>The backdrop animates!</p>\n<p><button onclick=\"document.querySelector('dialog').close()\">Close</button></p>\n</dialog>\n<p><button onclick=\"document.querySelector('dialog').showModal()\">Show the dialog</button><figcaption>Pretty dialog example styled and animated</figcaption></figure>\n<h2>Accessibility</h2>\n<p>For accessibility tools, the <code>&lt;dialog&gt;</code> element is equivalent to <code>role=\"dialog\"</code>. In addition to that, a modal dialog will behave similarly to an element with <code>aria-modal=\"true\"</code>.</p>\n<p>Users can dismiss modal dialogs using the &#8220;Escape&#8221; key on desktop browsers. That will trigger a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/cancel_event\"><code>cancel</code> event</a> which you can intercept. If multiple modal dialogs are opened, the one shown last will be dismissed.</p>\n<p>It is also possible to specify an element to initially focus on when opening dialogs by adding the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus\"><code>autofocus</code></a> attribute to the relevant element.</p>\n<h2>Browser Support</h2>\n<ul>\n<li>Safari 15.4 beta and <a href=\"https://developer.apple.com/safari/download/\">Safari Technology Preview</a></li>\n<li>Chrome 37</li>\n<li>Firefox 98</li>\n</ul>\n<h2>Next Steps</h2>\n<p>In this post, we’ve covered the basics of <code>&lt;dialog&gt;</code> and the features around it. Here are the next steps around this element:</p>\n<p>We are working on getting the element interoperable with other browser vendors as part of the <a href=\"https://github.com/web-platform-tests/interop-2022\">Interop 2022</a> effort. One of the main discussions is around <a href=\"https://github.com/whatwg/html/pull/4184\">initial focus behaviour</a>, to agree on which elements should be focused by default when there is no element with the autofocus attribute.</p>\n<p>As part of implementing <code>&lt;dialog&gt;</code> we’ve also made advances on the <code>inert</code> attribute to get interoperable behavior across browsers. It is currently disabled by default and not yet standardized, but you can enable the &#8220;inert attribute&#8221; in the Experimental Features menu from the Develop menu in Safari Technology Preview to test it.</p>\n<p>Feel free to reach out to <a href=\"https://twitter.com/therealntim\">@therealntim</a> on Twitter for any questions. To report any issues, please <a href=\"http://bugs.webkit.org/\">file a bug</a> blocking <a href=\"https://bugs.webkit.org/show_bug.cgi?id=84635\">bug 84635</a>.</p>",
      "content_text": "Although the alert, confirm and prompt JavaScript methods are convenient, they aren’t recommended due to their script-blocking behavior. That’s why we worked with other browser vendors to drive improvements to the <dialog> specification over the last few years. The most important conversations involved accessibility.\nYou can find more complex use-cases, like payment dialogs, on the web. They are currently addressed by custom solutions from frameworks like Bootstrap. Unfortunately, they aren’t convenient to use and aren’t always accessible. We believe the web deserves a simple and bug-free solution for these use-cases. Safari Technology Preview 134 and Safari 15.4 beta introduces the <dialog> element for this reason!\nHow Do I Use <dialog>?\nLet’s create a simple confirmation dialog:\n<dialog id=\"confirmation-dialog\">\n    <h1>Do you want to delete everything?</h1>\n    <p>You will lose all your data.</p>\n    <button id=\"cancel-delete\">Cancel</button>\n    <button id=\"confirm-delete\">Delete!</button>\n</dialog>\n\nDialogs are hidden by default. We can use the showModal() method to show the dialog. When it’s shown, the dialog can be closed with the close() method.\nHere is an example:\n<button id=\"delete\">Delete everything</button>\n<p id=\"result\"></p>\n<script>\nlet dialog = document.getElementById(\"confirmation-dialog\");\nlet result = document.getElementById(\"result\");\n\n// Show the dialog when clicking \"Delete everything\"\ndocument.getElementById(\"delete\").addEventListener(\"click\", function() {\n    dialog.showModal();\n});\n\ndocument.getElementById(\"cancel-delete\").addEventListener(\"click\", function() {\n    dialog.close();\n    result.textContent = \"Canceled!\";\n});\ndocument.getElementById(\"confirm-delete\").addEventListener(\"click\", function() {\n    dialog.close();\n    result.textContent = \"Deleted!\";\n});\n</script>\n\nNote that the dialog will get an open attribute once opened, which may be useful for styling purposes. However, it’s not recommended to toggle this attribute manually to show or hide the dialog, since the browser may lose track of the dialog state, and will not perform proper focus adjustments for accessibility.\n\nExample confirmation dialog\nModal and Non-modal Dialogs\nIn the last example, the showModal() method was used to create a modal dialog. User interaction is locked inside modal dialogs and outside content cannot be clicked, focused, selected, edited, or seen by accessibility tools. Another feature of modal dialogs is their ability to appear on top of everything else in the web page, regardless of the z-index of other elements.\nNon-modal dialogs also exist and can be invoked using show() method. Unlike modal dialogs, they still allow interaction with the surrounding content. An example use-case may be a find-in-page dialog for a document editor, where you still want to allow the user to interact with the rest of the document.\nUsing Forms with <dialog>\nForms within dialogs can be used to request information from the user, such as when a shipping address or payment details are needed.\nUnlike a traditional <form>, where method=\"get\" or \"post\" indicates that the form data is sent to a server, using <form method=\"dialog\"> causes form submission instead to close the dialog and set the returnValue property to the submit button’s value. This can save you from writing custom code, while providing the correct semantics to your web page.\nWe can simplify the initial example using this new feature:\n<dialog id=\"confirmation-dialog\">\n    <form method=\"dialog\">\n        <h1>Do you want to delete everything?</h1>\n        <p>You will lose all your data.</p>\n        <button type=\"submit\" value=\"Canceled!\">Cancel</button>\n        <button type=\"submit\" value=\"Deleted!\">Delete!</button>\n    </form>\n</dialog>\n\n<button id=\"delete\">Delete everything</button>\n<p id=\"result\"></p>\n\n<script>\nlet dialog = document.getElementById(\"confirmation-dialog\");\n\ndocument.getElementById(\"delete\").addEventListener(\"click\", function() {\n    dialog.showModal();\n});\n\ndialog.addEventListener(\"close\", function() {\n    document.getElementById(\"result\").textContent = dialog.returnValue;\n});\n</script>\n\nNote the use of the close event here, which is special to <dialog>.\n\nExample confirmation dialog with a form\nStyling\nThe semi-transparent box behind the dialog that you may have noticed from previous examples is the ::backdrop pseudo-element. By default, it is styled so it covers the whole viewport. Like the dialog itself, you can style the backdrop using CSS. Animations can also be used if you would like to add a fade-in effect for instance.\nNote that the backdrop is only shown for modal dialogs.\nHere is an example:\n<dialog>\n    <h1>This is a pretty dialog</h1>\n    <p>The backdrop animates!</p>\n</dialog>\n\n<button onclick=\"document.querySelector('dialog').showModal()\">Show the dialog</button>\n\n<style>\ndialog {\n    box-shadow: 0 2px 5px rgba(0,0,0,0.3);\n    border: none;\n    border-radius: 10px;\n}\n\ndialog::backdrop {\n    background: linear-gradient(rgba(0,0,0,0.1), rgba(0,0,0,0.4));\n    animation: fade-in 1s;\n}\n\n@keyframes fade-in {\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n</style>\n\n\n\nThis is a pretty dialog\nThe backdrop animates!\nClose\n\nShow the dialogPretty dialog example styled and animated\nAccessibility\nFor accessibility tools, the <dialog> element is equivalent to role=\"dialog\". In addition to that, a modal dialog will behave similarly to an element with aria-modal=\"true\".\nUsers can dismiss modal dialogs using the “Escape” key on desktop browsers. That will trigger a cancel event which you can intercept. If multiple modal dialogs are opened, the one shown last will be dismissed.\nIt is also possible to specify an element to initially focus on when opening dialogs by adding the autofocus attribute to the relevant element.\nBrowser Support\n\nSafari 15.4 beta and Safari Technology Preview\nChrome 37\nFirefox 98\n\nNext Steps\nIn this post, we’ve covered the basics of <dialog> and the features around it. Here are the next steps around this element:\nWe are working on getting the element interoperable with other browser vendors as part of the Interop 2022 effort. One of the main discussions is around initial focus behaviour, to agree on which elements should be focused by default when there is no element with the autofocus attribute.\nAs part of implementing <dialog> we’ve also made advances on the inert attribute to get interoperable behavior across browsers. It is currently disabled by default and not yet standardized, but you can enable the “inert attribute” in the Experimental Features menu from the Develop menu in Safari Technology Preview to test it.\nFeel free to reach out to @therealntim on Twitter for any questions. To report any issues, please file a bug blocking bug 84635.",
      "date_published": "2022-02-07T19:10:03.000Z",
      "date_modified": "2022-02-08T18:22:12.000Z",
      "_plugin": {
        "pageFilename": "aa37feb8cc5378c6b274b3f719e4a90667449f11dd4feaad709f790ff58f5df5.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12179",
      "url": "https://webkit.org/blog/12179/the-focus-indicated-pseudo-class-focus-visible/",
      "title": "The Focus-Indicated Pseudo-class :focus-visible",
      "summary": "The “focus indicator”, as its name suggests, visually indicates (often with a kind of an outline) that an element has focus.",
      "content_html": "<p>The &#8220;focus indicator&#8221;, as its name suggests, visually indicates (often with a kind of an outline) that an element has focus. That sounds simple enough, and it perfectly describes what the old <code>:focus</code> selector makes possible. However, for decades now, whether a browser will actually display a focus indicator natively has been a considerably more complex affair.</p>\n<figure class=\"widescreen mattewhite\">\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/focus-indicator.png\" alt=\"Focus indicator on different elements in Safari\" width=\"675\" height=\"450\" class=\"wp-image-12183\" srcset=\"https://webkit.org/wp-content/uploads/focus-indicator.png 675w, https://webkit.org/wp-content/uploads/focus-indicator-300x200.png 300w\" sizes=\"(max-width: 675px) 100vw, 675px\" /><figcaption>Focus indicator on different elements in Safari</figcaption></figure>\n<p>Based on lots of feedback and study, browsers have long employed heuristics about both the type of element, and how it came to gain focus, in order to determine whether the focus indicator should be displayed. If the user is navigating the page <em>with the keyboard</em>, it should. In other situations, it depends. A text input, for example, will display an indicator regardless of how it received focus. This is important because all users need to know where their input data will be placed. Interfaces that do not employ those heuristics feel unnatural.</p>\n<p>The goal of the old <code>:focus</code> selector was to allow authors to better style the focus indicator to be in tune with their overall design choices. The trouble is that using it meant losing the heuristics. The net result, unfortunately, has been that the most common use of the <code>:focus</code> selector has been to remove indicators altogether. This avoids the &#8220;false positive&#8221; focus styles that cause complaints from many users. The problem is that removing focus styling breaks website accessibility, causing trouble for people navigating the page using the keyboard.</p>\n<p>Fortunately, a new CSS selector comes to the rescue, avoiding this kind of accessibility issue while providing the behavior web developers were looking for. The <a href=\"https://drafts.csswg.org/selectors/#the-focus-visible-pseudo\"><code>:focus-visible</code> pseudo-class</a> matches elements based on the browsers heuristics. It allows web authors to style the focus indicator <em>only if it would be drawn natively</em>.</p>\n<p>Despite being a new feature that has recently landed on the web platform, it&#8217;s already being used by almost 1% of web pages (according to the <a href=\"https://almanac.httparchive.org/en/2021/css#pseudo-classes-and--elements\">Web Almanac by HTTP Archive</a>).</p>\n<h2>Implementation</h2>\n<p>As of <a href=\"https://developer.apple.com/safari/technology-preview/\">Safari Technology Preview 138</a>, the <code>:focus-visible</code> selector has been added to WebKit, paying special attention to interoperability with other implementations. As part of the WebKit implementation, the Web Platform Tests test suite has been improved and expanded quite a lot, adding coverage to new cases and ensuring a better interop between the different implementations.</p>\n<p>This work led to changes and improvements all around. Thanks to tests and discussions, all browsers now follow a common set of heuristics and have the same behavior in most situations. In WebKit, for example, clicking on a <code>&lt;div tabindex=\"0\"&gt;</code> will no longer show a focus indicator by default (matching other browser engines).</p>\n<p>In addition, the default User Agent style sheet in all browsers now uses the <code>:focus-visible</code> pseudo-class. This is a nice thing to have because it avoids the type of issues that happened with <code>:focus</code> in the first place, and circumvents the need of using some weird workarounds, like <code>:focus:not(:focus-visible)</code>, to style the default focus indicator painted by the browser.</p>\n<p>If you&#8217;re curious about the implementation details, you can read a series of blog posts written along the path to development at <a href=\"https://blogs.igalia.com/mrego/tag/focus-visible/\">blogs.igalia.com/mrego</a>, or watch <a href=\"https://www.youtube.com/watch?v=70_p3WmdZv8\">this talk</a>.</p>\n<h2>Examples</h2>\n<p>The good news after all the changes that have happened around <code>:focus-visible</code> lately, is that now you&#8217;d just need to use <code>:focus-visible</code> selector to style the focus indicator drawn by the browser engines.</p>\n<p>On top of that, browsers are no longer showing a focus indicator when the user isn&#8217;t expecting it, like focusing a regular element via mouse click.</p>\n<p>Web authors won&#8217;t need any kind of workaround to achieve the goal of styling the focus indicator shown by the web engine.</p>\n<p>For example, if you want your focus indicator to have a thick magenta outline with a small offset, you just need to use the following CSS on your website:</p>\n<pre><code class=\"css\"><span class=\"preprocessor\">:focus-visible</span> {\n    <span class=\"attribute\">outline</span>: <span class=\"identifier\">solid</span> <span class=\"identifier\">thick</span> <span class=\"identifier\">magenta</span>;\n    <span class=\"attribute\">outline-offset</span>: <span class=\"number\">0.1em</span>;\n}\n</code></pre>\n<figure class=\"mattewhite\">\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/focus-visible-1.png\" alt=\"Customized focus indicator outline using :focus-visible\" width=\"675\" height=\"150\" class=\"wp-image-12188\" srcset=\"https://webkit.org/wp-content/uploads/focus-visible-1.png 675w, https://webkit.org/wp-content/uploads/focus-visible-1-300x67.png 300w\" sizes=\"(max-width: 675px) 100vw, 675px\" /><br />\n</figure>\n<p>And you can use other properties, not only the outline related ones, to customize the focus indicator in your website. E.g.:</p>\n<pre><code class=\"css\"><span class=\"preprocessor\">:focus-visible</span> {\n    <span class=\"attribute\">outline</span>: <span class=\"identifier\">dotted</span> <span class=\"identifier\">thick</span> <span class=\"identifier\">green</span>;\n    <span class=\"attribute\">background</span>: <span class=\"identifier\">lime</span>;\n    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0.3em</span> <span class=\"number\">0.3em</span> <span class=\"identifier\">lightgrey</span>;\n}\n</code></pre>\n<figure class=\"mattewhite\">\n<img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/focus-visible-2.png\" alt=\"Customized focus indicator changing outline, background and box-shadow with :focus-visible\" width=\"425\" height=\"150\" class=\"wp-image-12191\" srcset=\"https://webkit.org/wp-content/uploads/focus-visible-2.png 425w, https://webkit.org/wp-content/uploads/focus-visible-2-300x106.png 300w\" sizes=\"(max-width: 425px) 100vw, 425px\" /></figure>\n<h2>Open Prioritization</h2>\n<p>It&#8217;s worth mentioning that this work was collectively chosen from among many, in numerous engines and partially funded by the public, through Igalia&#8217;s <a href=\"https://opencollective.com/focus-visible-in-webkit\">Open Prioritization campaign</a>. This effort works to democratize the development of web platform features, giving groups of people and smaller organizations the chance to have a direct impact on the web ecosystem. If you want to learn more about this, <a href=\"https://www.youtube.com/watch?v=zhlw7_BoG9U\">Eric Meyer gave a talk explaining it at the W3C&#8217;s TPAC</a>.</p>\n<p>Thanks to many contributions, this experiment yielded not only <code>:focus-visible</code> development in WebKit, but a lot of interoperability work and alignment in other implementations and a sense that there was real demand for the feature. Thank you to everyone involved.</p>\n<h2>Feedback</h2>\n<p><code>:focus-visible</code> pseudo-class has been enabled by default in <a href=\"https://developer.apple.com/safari/technology-preview/\">Safari Technology Preview 138</a>, please try it out and report any issues you might found on <a href=\"https://bugs.webkit.org/\">bugs.webkit.org</a>. You can also send a tweet to <a href=\"https://twitter.com/regocas\">@regocas</a> or <a href=\"https://twitter.com/webkit\">@webkit</a> to share your thoughts about this feature.</p>",
      "content_text": "The “focus indicator”, as its name suggests, visually indicates (often with a kind of an outline) that an element has focus. That sounds simple enough, and it perfectly describes what the old :focus selector makes possible. However, for decades now, whether a browser will actually display a focus indicator natively has been a considerably more complex affair.\n\nFocus indicator on different elements in Safari\nBased on lots of feedback and study, browsers have long employed heuristics about both the type of element, and how it came to gain focus, in order to determine whether the focus indicator should be displayed. If the user is navigating the page with the keyboard, it should. In other situations, it depends. A text input, for example, will display an indicator regardless of how it received focus. This is important because all users need to know where their input data will be placed. Interfaces that do not employ those heuristics feel unnatural.\nThe goal of the old :focus selector was to allow authors to better style the focus indicator to be in tune with their overall design choices. The trouble is that using it meant losing the heuristics. The net result, unfortunately, has been that the most common use of the :focus selector has been to remove indicators altogether. This avoids the “false positive” focus styles that cause complaints from many users. The problem is that removing focus styling breaks website accessibility, causing trouble for people navigating the page using the keyboard.\nFortunately, a new CSS selector comes to the rescue, avoiding this kind of accessibility issue while providing the behavior web developers were looking for. The :focus-visible pseudo-class matches elements based on the browsers heuristics. It allows web authors to style the focus indicator only if it would be drawn natively.\nDespite being a new feature that has recently landed on the web platform, it’s already being used by almost 1% of web pages (according to the Web Almanac by HTTP Archive).\nImplementation\nAs of Safari Technology Preview 138, the :focus-visible selector has been added to WebKit, paying special attention to interoperability with other implementations. As part of the WebKit implementation, the Web Platform Tests test suite has been improved and expanded quite a lot, adding coverage to new cases and ensuring a better interop between the different implementations.\nThis work led to changes and improvements all around. Thanks to tests and discussions, all browsers now follow a common set of heuristics and have the same behavior in most situations. In WebKit, for example, clicking on a <div tabindex=\"0\"> will no longer show a focus indicator by default (matching other browser engines).\nIn addition, the default User Agent style sheet in all browsers now uses the :focus-visible pseudo-class. This is a nice thing to have because it avoids the type of issues that happened with :focus in the first place, and circumvents the need of using some weird workarounds, like :focus:not(:focus-visible), to style the default focus indicator painted by the browser.\nIf you’re curious about the implementation details, you can read a series of blog posts written along the path to development at blogs.igalia.com/mrego, or watch this talk.\nExamples\nThe good news after all the changes that have happened around :focus-visible lately, is that now you’d just need to use :focus-visible selector to style the focus indicator drawn by the browser engines.\nOn top of that, browsers are no longer showing a focus indicator when the user isn’t expecting it, like focusing a regular element via mouse click.\nWeb authors won’t need any kind of workaround to achieve the goal of styling the focus indicator shown by the web engine.\nFor example, if you want your focus indicator to have a thick magenta outline with a small offset, you just need to use the following CSS on your website:\n:focus-visible {\n    outline: solid thick magenta;\n    outline-offset: 0.1em;\n}\n\n\n\n\nAnd you can use other properties, not only the outline related ones, to customize the focus indicator in your website. E.g.:\n:focus-visible {\n    outline: dotted thick green;\n    background: lime;\n    box-shadow: 0.3em 0.3em lightgrey;\n}\n\n\n\nOpen Prioritization\nIt’s worth mentioning that this work was collectively chosen from among many, in numerous engines and partially funded by the public, through Igalia’s Open Prioritization campaign. This effort works to democratize the development of web platform features, giving groups of people and smaller organizations the chance to have a direct impact on the web ecosystem. If you want to learn more about this, Eric Meyer gave a talk explaining it at the W3C’s TPAC.\nThanks to many contributions, this experiment yielded not only :focus-visible development in WebKit, but a lot of interoperability work and alignment in other implementations and a sense that there was real demand for the feature. Thank you to everyone involved.\nFeedback\n:focus-visible pseudo-class has been enabled by default in Safari Technology Preview 138, please try it out and report any issues you might found on bugs.webkit.org. You can also send a tweet to @regocas or @webkit to share your thoughts about this feature.",
      "date_published": "2022-01-31T17:00:42.000Z",
      "date_modified": "2022-01-28T17:27:05.000Z",
      "_plugin": {
        "pageFilename": "fed90e3c6c17f140024c0302810391e9b129a6b1fc6ac2afe5d48b1dc7608470.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12193",
      "url": "https://webkit.org/blog/12193/release-notes-for-safari-technology-preview-139/",
      "title": "Release Notes for Safari Technology Preview 139",
      "summary": "Safari Technology Preview Release 139 is now available for download for macOS Big Sur and macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 139 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=286944&amp;rev=287834&amp;limit=890\">286944-287834</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Added <code>revert-layer</code> to CSS autocompletion (<a href=\"https://trac.webkit.org/changeset/287636/webkit/\">r287636</a>)</li>\n<li>Supported CSS conic gradients in gradient editor and auto-completion (<a href=\"https://trac.webkit.org/changeset/287409/webkit/\">r287409</a>)</li>\n<li>Made gradient editor angle input readable in dark mode (<a href=\"https://trac.webkit.org/changeset/287408/webkit/\">r287408</a>)</li>\n</ul>\n</li>\n<li>Sources Tab\n<ul>\n<li>Added icon for collapsed blackboxed section (<a href=\"https://trac.webkit.org/changeset/287586/webkit/\">r287586</a>)</li>\n<li>Fixed expanding a grouping of blackboxed call frames to be persistent (<a href=\"https://trac.webkit.org/changeset/287590/webkit/\">r287590</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Fixed CSS Cascade Layers specified in import rules can not be reordered on media query evaluation (<a href=\"https://trac.webkit.org/changeset/286972/webkit/\">r286972</a>)</li>\n<li>Fixed <code>revert-layer</code> to revert the style attribute to the regular author style for CSS Cascade Layers (<a href=\"https://trac.webkit.org/changeset/287018/webkit/\">r287018</a>)</li>\n<li>Fixed absolutely positioned children to be aligned using the margin box inside a flexbox (<a href=\"https://trac.webkit.org/changeset/287064/webkit/\">r287064</a>)</li>\n<li>Used the correct margins in computeInlinePreferredLogicalWidths in orthogonal flows (<a href=\"https://trac.webkit.org/changeset/286952/webkit/\">r286952</a>)</li>\n<li>Fixed <code>:focus-visible</code> not matching on accessKey focus after focusing something via mouse (<a href=\"https://trac.webkit.org/changeset/287563/webkit/\">r287563</a>, <a href=\"https://trac.webkit.org/changeset/287662/webkit/\">r287662</a>)</li>\n<li>Fixed flexbox ignoring margins of absolute positioned children when <code>align-items: flex-end</code> or <code>justify-content: flex-end</code> (<a href=\"https://trac.webkit.org/changeset/287128/webkit/\">r287128</a>)</li>\n<li>Fixed <code>drop-shadow</code> filter to use the value of the color property when it has no specified color (<a href=\"https://trac.webkit.org/changeset/287817/webkit/\">r287817</a>)</li>\n<li>Fixed <code>transform</code> property to take into account transform reference box (<a href=\"https://trac.webkit.org/changeset/287606/webkit/\">r287606</a>)</li>\n<li>Fixed inline blocks that contain text with <code>min-width</code>, <code>box-sizing: border-box</code> to include the border in width calculation (<a href=\"https://trac.webkit.org/changeset/287779/webkit/\">r287779</a>)</li>\n<li>Fixed text-decoration color not changing back after input blur with outline removed (<a href=\"https://trac.webkit.org/changeset/287674/webkit/\">r287674</a>)</li>\n<li>Implemented <code>text-combine-upright</code> property (standard version of <code>-webkit-text-combine</code>) (<a href=\"https://trac.webkit.org/changeset/287487/webkit/\">r287487</a>)\n<ul>\n<li>Made <code>-webkit-text-combine</code> an inherited property (<a href=\"https://trac.webkit.org/changeset/287451/webkit/\">r287451</a>)</li>\n</ul>\n</li>\n<li>Unprefixed <code>-webkit-print-color-adjust</code> CSS property (<a href=\"https://trac.webkit.org/changeset/287712/webkit/\">r287712</a>)</li>\n<li>Removed non-standard <code>-webkit-background-composite</code> property (r287433)</li>\n<li>Removed non-standard <code>-webkit-margin-*-collapse</code> properties (r287429)</li>\n</ul>\n<h3>:has()</h3>\n<ul>\n<li>Added style invalidation for <code>:disabled</code>, <code>:enabled</code>, <code>:valid</code>, and <code>:invalid</code> (<a href=\"https://trac.webkit.org/changeset/287445/webkit/\">r287445</a>, <a href=\"https://trac.webkit.org/changeset/287551/webkit/\">r287551</a>)</li>\n<li>Fixed <code>:has()</code> matching wrong elements due to style sharing (<a href=\"https://trac.webkit.org/changeset/287362/webkit/\">r287362</a>)</li>\n<li>Fixed <code>:has()</code> selector invalidation issue with toggling <code>:checked</code> (<a href=\"https://trac.webkit.org/changeset/287363/webkit/\">r287363</a>)</li>\n<li>Used a bloom filter to quickly reject <code>:has()</code> selectors (<a href=\"https://trac.webkit.org/changeset/287091/webkit/\">r287091</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Added support for the <code>animation</code> shorthand property in the computed style (<a href=\"https://trac.webkit.org/changeset/287535/webkit/\">r287535</a>)</li>\n<li>Changed reversing factor to be computed before canceling the previous transition (<a href=\"https://trac.webkit.org/changeset/287548/webkit/\">r287548</a>)</li>\n<li>Changed transitions without an explicit <code>transition-property</code> to not be considered (<a href=\"https://trac.webkit.org/changeset/287764/webkit/\">r287764</a>)</li>\n<li>Fixed <code>animation</code> shorthand to parse values in the right order (<a href=\"https://trac.webkit.org/changeset/287509/webkit/\">r287509</a>)</li>\n<li>Fixed <code>animation</code> shorthand to list all longhand values when serializing (<a href=\"https://trac.webkit.org/changeset/287534/webkit/\">r287534</a>)</li>\n<li>Fixed calling <code>setKeyframes()</code> on a running CSS Transition having no immediate effect (<a href=\"https://trac.webkit.org/changeset/287549/webkit/\">r287549</a>)</li>\n<li>Fixed changing the effect of a transition to no longer mark it as running (<a href=\"https://trac.webkit.org/changeset/287550/webkit/\">r287550</a>)</li>\n<li>Fixed <code>getKeyframes()</code> for a CSS Animation to not use computed style for keyframes (<a href=\"https://trac.webkit.org/changeset/287820/webkit/\">r287820</a>)</li>\n<li>Fixed <code>getKeyframes()</code> to ensure that all properties are present on 0% and 100% keyframes (<a href=\"https://trac.webkit.org/changeset/287518/webkit/\">r287518</a>)</li>\n<li>Fixed <code>getKeyframes()</code> to return an empty object when there are no animatable properties in <code>@keyframes</code> rule (<a href=\"https://trac.webkit.org/changeset/287517/webkit/\">r287517</a>)</li>\n<li>Fixed inserting a rule within a <code>@keyframes</code> rule should update animations (<a href=\"https://trac.webkit.org/changeset/287707/webkit/\">r287707</a>)</li>\n<li>Fixed inserting a new <code>@keyframes</code> rule to start animations that already used this name (<a href=\"https://trac.webkit.org/changeset/287769/webkit/\">r287769</a>)</li>\n<li>Fixed implicit keyframe for a CSS Animation to always use the underlying style (<a href=\"https://trac.webkit.org/changeset/287827/webkit/\">r287827</a>)</li>\n<li>Fixed interpolation for the <code>filter</code> property failing with a single keyframe (<a href=\"https://trac.webkit.org/changeset/287826/webkit/\">r287826</a>)</li>\n<li>Fixed <code>translate()</code> function in the transform property to remove trailing 0 value when parsing (<a href=\"https://trac.webkit.org/changeset/287822/webkit/\">r287822</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Changed to pre-layout orthogonal children to compute the preferred logical width inside a flexbox (<a href=\"https://trac.webkit.org/changeset/287263/webkit/\">r287263</a>)</li>\n<li>Fixed paint order of CSS text decorations (<a href=\"https://trac.webkit.org/changeset/286955/webkit/\">r286955</a>)</li>\n<li>Fixed incorrect percent-based height inside <code>display: table</code> child elements defined when combined with <code>box-sizing: border-box</code> and <code>padding</code>. (<a href=\"https://trac.webkit.org/changeset/287063/webkit/\">r287063</a>)</li>\n<li>Fixed aspect-ratio size calculation (<a href=\"https://trac.webkit.org/changeset/287023/webkit/\">r287023</a>)</li>\n</ul>\n<h3>SVG</h3>\n<ul>\n<li>Fixed SVG resource invalidation logic causing incorrect layout state (<a href=\"https://trac.webkit.org/changeset/287076/webkit/\">r287076</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Changed to allow <code>get()</code> for a same-site, cross-origin iframe (<a href=\"https://trac.webkit.org/changeset/286993/webkit/\">r286993</a>, <a href=\"https://trac.webkit.org/changeset/287116/webkit/\">r287116</a>)</li>\n<li>Fixed authenticator to fallback to clientPIN after internal verification fails and is blocked (<a href=\"https://trac.webkit.org/changeset/287315/webkit/\">r287315</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added support for using a user-specified preference before using the system&#8217;s preferred color scheme (<a href=\"https://trac.webkit.org/changeset/287030/webkit/\">r287030</a>)</li>\n<li>Fixed FormData constructed in the form&#8217;s submit event listener to not include the submitter (<a href=\"https://trac.webkit.org/changeset/286988/webkit/\">r286988</a>)</li>\n<li>Fixed TextDecoder to detect invalid UTF-8 sequences early enough (<a href=\"https://trac.webkit.org/changeset/287024/webkit/\">r287024</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Aligned <code>Array.prototype.toLocaleString</code> to ECMA402 definition (<a href=\"https://trac.webkit.org/changeset/287560/webkit/\">r287560</a>)</li>\n<li>Fixed <code>Intl.PluralRules.selectRange</code> input validation (<a href=\"https://trac.webkit.org/changeset/287546/webkit/\">r287546</a>)</li>\n<li>Fixed length of <code>Intl.NumberFormat.formatRange</code> and <code>Intl.PluralRules.selectRange</code> (<a href=\"https://trac.webkit.org/changeset/287543/webkit/\">r287543</a>)</li>\n</ul>\n<h3>Content Security Policy</h3>\n<ul>\n<li>Changed to always use UTF-8 encoded content when checking hashes (<a href=\"https://trac.webkit.org/changeset/287270/webkit/\">r287270</a>)</li>\n<li>Implemented CSP <code>strict-dynamic</code> for module scripts (<a href=\"https://trac.webkit.org/changeset/287756/webkit/\">r287756</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Added MediaRecorder support for the <code>bitsPerSecond</code> option (<a href=\"https://trac.webkit.org/changeset/287613/webkit/\">r287613</a>)</li>\n<li>Changed to prevent packing audio samples with discontinuity together (<a href=\"https://trac.webkit.org/changeset/287249/webkit/\">r287249</a>)</li>\n</ul>\n<h3>Service Workers</h3>\n<ul>\n<li>Added full support for Service Worker interception of fetch requests with FormData body (<a href=\"https://trac.webkit.org/changeset/287612/webkit/\">r287612</a>)</li>\n<li>Fixed <code>FetchRequest.clone</code> to not need to be called with the current context (<a href=\"https://trac.webkit.org/changeset/287532/webkit/\">r287532</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Added support for the <code>redirect</code> rule type in <code>declarativeNetRequest</code>, which requires host permissions to be granted for the host of the URL being redirected</li>\n<li>Added support for <code>declarativeNetRequest.getMatchedRules</code>, which requires host permissions to be granted to view the URLs of blocked resources</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 139 is now available for download for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 286944-287834.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nElements Tab\n\nAdded revert-layer to CSS autocompletion (r287636)\nSupported CSS conic gradients in gradient editor and auto-completion (r287409)\nMade gradient editor angle input readable in dark mode (r287408)\n\n\nSources Tab\n\nAdded icon for collapsed blackboxed section (r287586)\nFixed expanding a grouping of blackboxed call frames to be persistent (r287590)\n\n\n\nCSS\n\nFixed CSS Cascade Layers specified in import rules can not be reordered on media query evaluation (r286972)\nFixed revert-layer to revert the style attribute to the regular author style for CSS Cascade Layers (r287018)\nFixed absolutely positioned children to be aligned using the margin box inside a flexbox (r287064)\nUsed the correct margins in computeInlinePreferredLogicalWidths in orthogonal flows (r286952)\nFixed :focus-visible not matching on accessKey focus after focusing something via mouse (r287563, r287662)\nFixed flexbox ignoring margins of absolute positioned children when align-items: flex-end or justify-content: flex-end (r287128)\nFixed drop-shadow filter to use the value of the color property when it has no specified color (r287817)\nFixed transform property to take into account transform reference box (r287606)\nFixed inline blocks that contain text with min-width, box-sizing: border-box to include the border in width calculation (r287779)\nFixed text-decoration color not changing back after input blur with outline removed (r287674)\nImplemented text-combine-upright property (standard version of -webkit-text-combine) (r287487)\n\nMade -webkit-text-combine an inherited property (r287451)\n\n\nUnprefixed -webkit-print-color-adjust CSS property (r287712)\nRemoved non-standard -webkit-background-composite property (r287433)\nRemoved non-standard -webkit-margin-*-collapse properties (r287429)\n\n:has()\n\nAdded style invalidation for :disabled, :enabled, :valid, and :invalid (r287445, r287551)\nFixed :has() matching wrong elements due to style sharing (r287362)\nFixed :has() selector invalidation issue with toggling :checked (r287363)\nUsed a bloom filter to quickly reject :has() selectors (r287091)\n\nWeb Animations\n\nAdded support for the animation shorthand property in the computed style (r287535)\nChanged reversing factor to be computed before canceling the previous transition (r287548)\nChanged transitions without an explicit transition-property to not be considered (r287764)\nFixed animation shorthand to parse values in the right order (r287509)\nFixed animation shorthand to list all longhand values when serializing (r287534)\nFixed calling setKeyframes() on a running CSS Transition having no immediate effect (r287549)\nFixed changing the effect of a transition to no longer mark it as running (r287550)\nFixed getKeyframes() for a CSS Animation to not use computed style for keyframes (r287820)\nFixed getKeyframes() to ensure that all properties are present on 0% and 100% keyframes (r287518)\nFixed getKeyframes() to return an empty object when there are no animatable properties in @keyframes rule (r287517)\nFixed inserting a rule within a @keyframes rule should update animations (r287707)\nFixed inserting a new @keyframes rule to start animations that already used this name (r287769)\nFixed implicit keyframe for a CSS Animation to always use the underlying style (r287827)\nFixed interpolation for the filter property failing with a single keyframe (r287826)\nFixed translate() function in the transform property to remove trailing 0 value when parsing (r287822)\n\nRendering\n\nChanged to pre-layout orthogonal children to compute the preferred logical width inside a flexbox (r287263)\nFixed paint order of CSS text decorations (r286955)\nFixed incorrect percent-based height inside display: table child elements defined when combined with box-sizing: border-box and padding. (r287063)\nFixed aspect-ratio size calculation (r287023)\n\nSVG\n\nFixed SVG resource invalidation logic causing incorrect layout state (r287076)\n\nWebAuthn\n\nChanged to allow get() for a same-site, cross-origin iframe (r286993, r287116)\nFixed authenticator to fallback to clientPIN after internal verification fails and is blocked (r287315)\n\nWeb API\n\nAdded support for using a user-specified preference before using the system’s preferred color scheme (r287030)\nFixed FormData constructed in the form’s submit event listener to not include the submitter (r286988)\nFixed TextDecoder to detect invalid UTF-8 sequences early enough (r287024)\n\nJavaScript\n\nAligned Array.prototype.toLocaleString to ECMA402 definition (r287560)\nFixed Intl.PluralRules.selectRange input validation (r287546)\nFixed length of Intl.NumberFormat.formatRange and Intl.PluralRules.selectRange (r287543)\n\nContent Security Policy\n\nChanged to always use UTF-8 encoded content when checking hashes (r287270)\nImplemented CSP strict-dynamic for module scripts (r287756)\n\nMedia\n\nAdded MediaRecorder support for the bitsPerSecond option (r287613)\nChanged to prevent packing audio samples with discontinuity together (r287249)\n\nService Workers\n\nAdded full support for Service Worker interception of fetch requests with FormData body (r287612)\nFixed FetchRequest.clone to not need to be called with the current context (r287532)\n\nWeb Extensions\n\nAdded support for the redirect rule type in declarativeNetRequest, which requires host permissions to be granted for the host of the URL being redirected\nAdded support for declarativeNetRequest.getMatchedRules, which requires host permissions to be granted to view the URLs of blocked resources\n",
      "date_published": "2022-01-26T22:22:08.000Z",
      "date_modified": "2022-01-27T00:29:43.000Z",
      "_plugin": {
        "pageFilename": "4ec9783bb07f8a2f6b9654f5e9998a1919a182cb82ec6a4f7ce8595e8c38db4b.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12176",
      "url": "https://webkit.org/blog/12176/release-notes-for-safari-technology-preview-138/",
      "title": "Release Notes for Safari Technology Preview 138",
      "summary": "Safari Technology Preview Release 138 is now available for download for macOS Big Sur and macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 138 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=286534&amp;rev=286944&amp;limit=410\">286534-286944</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Added support for Cascade Layers in the Styles sidebar (<a href=\"https://trac.webkit.org/changeset/286558/webkit/\">r286558</a>)</li>\n<li>Added a swatch for <code>align-items</code> and <code>align-self</code> (<a href=\"https://trac.webkit.org/changeset/286875/webkit/\">r286875</a>)</li>\n<li>Added a swatch for <code>justify-content</code>, <code>justify-items</code>, and <code>justify-self</code> (<a href=\"https://trac.webkit.org/changeset/286885/webkit/\">r286885</a>)</li>\n<li>Added CSS variable names to property name completion list (<a href=\"https://trac.webkit.org/changeset/286890/webkit/\">r286890</a>)</li>\n<li>Added an option to group CSS variables by value type in the Computed sidebar (<a href=\"https://trac.webkit.org/changeset/286876/webkit/\">r286876</a>)</li>\n<li>Enabled fuzzy matching for CSS completions in the Styles sidebar (<a href=\"https://trac.webkit.org/changeset/286792/webkit/\">r286792</a>, <a href=\"https://trac.webkit.org/changeset/286611/webkit/\">r286611</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Enabled <code>:focus-visible</code> pseudo-class by default (<a href=\"https://trac.webkit.org/changeset/286783/webkit/\">r286783</a>, <a href=\"https://trac.webkit.org/changeset/286776/webkit/\">r286776</a>, <a href=\"https://trac.webkit.org/changeset/286775/webkit/\">r286775</a>)</li>\n<li>Enabled the <code>resolution</code> media query by default (<a href=\"https://trac.webkit.org/changeset/286874/webkit/\">r286874</a>)</li>\n<li>Enabled the CSS Contain property by default (<a href=\"https://trac.webkit.org/changeset/286828/webkit/\">r286828</a>)</li>\n<li>Changed to account for captions when flexing tables with specified sizes (<a href=\"https://trac.webkit.org/changeset/286593/webkit/\">r286593</a>)</li>\n<li>Fixed <code>perspective()</code> less than or equal to <code>1px</code> to be clamped to <code>1px</code> (<a href=\"https://trac.webkit.org/changeset/286591/webkit/\">r286591</a>)</li>\n<li>Fixed <code>gap</code> to work correctly when <code>flex-direction: column-reverse</code> is applied (<a href=\"https://trac.webkit.org/changeset/286654/webkit/\">r286654</a>)</li>\n<li>Fixed the serialization of <code>CSSImportRule</code> (<a href=\"https://trac.webkit.org/changeset/286668/webkit/\">r286668</a>)</li>\n<li>Unprefixed <code>-webkit-mask</code> (<a href=\"https://trac.webkit.org/changeset/286795/webkit/\">r286795</a>)</li>\n<li>Unprefixed CSS value <code>text-align: -webkit-match-parent</code> (<a href=\"https://trac.webkit.org/changeset/286803/webkit/\">r286803</a>)</li>\n<li>Updated <code>color-mix()</code> to support <code>srgb-linear</code> and alpha premultiplication (<a href=\"https://trac.webkit.org/changeset/286568/webkit/\">r286568</a>)</li>\n</ul>\n<h3>Experimental Model Element</h3>\n<ul>\n<li>Added load and error events to distinguish resource load from model readiness (<a href=\"https://trac.webkit.org/changeset/286836/webkit/\">r286836</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed various issues with complicated rendering of VTT cues (<a href=\"https://trac.webkit.org/changeset/286743/webkit/\">r286743</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Added a way to run scripted animations via <code>CustomEffect</code> (<a href=\"https://trac.webkit.org/changeset/286555/webkit/\">r286555</a>)</li>\n<li>Exposed a <code>frameRate</code> property to Web Animations (<a href=\"https://trac.webkit.org/changeset/286915/webkit/\">r286915</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Improved WebAuthn Level 2 standards compliance by supporting the <code>displayName</code> (<a href=\"https://trac.webkit.org/changeset/286746/webkit/\">r286746</a>)</li>\n</ul>\n<h3>SVG</h3>\n<ul>\n<li>Fixed <code>transform-origin</code> on SVG elements to take into account the transform reference box origin (<a href=\"https://trac.webkit.org/changeset/286942/webkit/\">r286942</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Changed to group radio buttons with no form owner (<a href=\"https://trac.webkit.org/changeset/286855/webkit/\">r286855</a>)</li>\n<li>Fixed the range of <code>&lt;input type=\"time\"&gt;</code> to be reversible (<a href=\"https://trac.webkit.org/changeset/286581/webkit/\">r286581</a>)</li>\n<li>Fixed an <code>&lt;input&gt;</code> that&#8217;s been autofilled with obscured content to still be editable (<a href=\"https://trac.webkit.org/changeset/286814/webkit/\">r286814</a>)</li>\n<li>Implemented <code>AbortSignal.throwIfAborted</code> (<a href=\"https://trac.webkit.org/changeset/286904/webkit/\">r286904</a>)</li>\n<li>Improved <code>&lt;input type=\"datetime-local\"&gt;</code> value parsing and sanitization (<a href=\"https://trac.webkit.org/changeset/286869/webkit/\">r286869</a>)</li>\n<li>Restored <code>navigator.hardwareConcurrency</code> (<a href=\"https://trac.webkit.org/changeset/286550/webkit/\">r286550</a>)</li>\n<li>Fixed setting <code>onselectionchange</code> content attribute to add an event listener (<a href=\"https://trac.webkit.org/changeset/286898/webkit/\">r286898</a>)</li>\n</ul>\n<h3>Service Workers</h3>\n<ul>\n<li>Enabled NavigationPreloadManager by default (<a href=\"https://trac.webkit.org/changeset/286540/webkit/\">r286540</a>)</li>\n<li>Added support for ServiceWorker downloads (<a href=\"https://trac.webkit.org/changeset/286944/webkit/\">r286944</a>)</li>\n<li>Fixed &#8220;no-cache&#8221; network error (<a href=\"https://trac.webkit.org/changeset/286655/webkit/\">r286655</a>)</li>\n<li>Fixed same-site lax cookies not sent by fetch event handler after page reload (<a href=\"https://trac.webkit.org/changeset/286656/webkit/\">r286656</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Closed WebRTC allocation sequence shared socket in case of sequence network failure (<a href=\"https://trac.webkit.org/changeset/286539/webkit/\">r286539</a>)</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Added preparation of <code>WebAssembly.Memory</code> imports in Wasm/ESM modules (<a href=\"https://trac.webkit.org/changeset/286703/webkit/\">r286703</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Added support for changed <code>web_accessible_resources</code> declaration with <code>manifest_version</code> 3</li>\n<li>Fixed <code>runtime.onMessage</code> listeners not supporting <code>Promise</code> returns for the reply message</li>\n<li>Show error messages for incorrect match patterns in <code>web_accessible_resources</code></li>\n<li>Show error message to <code>devtools</code> tabs in Web Inspector when inspecting unsupported targets</li>\n<li>Show error message when the service worker background script fails to load</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li>Fixed an issue introduced in Safari Technology Preview 137 where pop-up windows wouldn’t open</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 138 is now available for download for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 286534-286944.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nElements Tab\n\nAdded support for Cascade Layers in the Styles sidebar (r286558)\nAdded a swatch for align-items and align-self (r286875)\nAdded a swatch for justify-content, justify-items, and justify-self (r286885)\nAdded CSS variable names to property name completion list (r286890)\nAdded an option to group CSS variables by value type in the Computed sidebar (r286876)\nEnabled fuzzy matching for CSS completions in the Styles sidebar (r286792, r286611)\n\n\n\nCSS\n\nEnabled :focus-visible pseudo-class by default (r286783, r286776, r286775)\nEnabled the resolution media query by default (r286874)\nEnabled the CSS Contain property by default (r286828)\nChanged to account for captions when flexing tables with specified sizes (r286593)\nFixed perspective() less than or equal to 1px to be clamped to 1px (r286591)\nFixed gap to work correctly when flex-direction: column-reverse is applied (r286654)\nFixed the serialization of CSSImportRule (r286668)\nUnprefixed -webkit-mask (r286795)\nUnprefixed CSS value text-align: -webkit-match-parent (r286803)\nUpdated color-mix() to support srgb-linear and alpha premultiplication (r286568)\n\nExperimental Model Element\n\nAdded load and error events to distinguish resource load from model readiness (r286836)\n\nMedia\n\nFixed various issues with complicated rendering of VTT cues (r286743)\n\nWeb Animations\n\nAdded a way to run scripted animations via CustomEffect (r286555)\nExposed a frameRate property to Web Animations (r286915)\n\nWebAuthn\n\nImproved WebAuthn Level 2 standards compliance by supporting the displayName (r286746)\n\nSVG\n\nFixed transform-origin on SVG elements to take into account the transform reference box origin (r286942)\n\nWeb API\n\nChanged to group radio buttons with no form owner (r286855)\nFixed the range of <input type=\"time\"> to be reversible (r286581)\nFixed an <input> that’s been autofilled with obscured content to still be editable (r286814)\nImplemented AbortSignal.throwIfAborted (r286904)\nImproved <input type=\"datetime-local\"> value parsing and sanitization (r286869)\nRestored navigator.hardwareConcurrency (r286550)\nFixed setting onselectionchange content attribute to add an event listener (r286898)\n\nService Workers\n\nEnabled NavigationPreloadManager by default (r286540)\nAdded support for ServiceWorker downloads (r286944)\nFixed “no-cache” network error (r286655)\nFixed same-site lax cookies not sent by fetch event handler after page reload (r286656)\n\nWebRTC\n\nClosed WebRTC allocation sequence shared socket in case of sequence network failure (r286539)\n\nWebAssembly\n\nAdded preparation of WebAssembly.Memory imports in Wasm/ESM modules (r286703)\n\nWeb Extensions\n\nAdded support for changed web_accessible_resources declaration with manifest_version 3\nFixed runtime.onMessage listeners not supporting Promise returns for the reply message\nShow error messages for incorrect match patterns in web_accessible_resources\nShow error message to devtools tabs in Web Inspector when inspecting unsupported targets\nShow error message when the service worker background script fails to load\n\nBug Fixes\n\nFixed an issue introduced in Safari Technology Preview 137 where pop-up windows wouldn’t open\n",
      "date_published": "2022-01-20T23:39:15.000Z",
      "date_modified": "2022-01-27T00:32:54.000Z",
      "_plugin": {
        "pageFilename": "02031033a0bca8da244ef7fcd3de71c93ac56c681854f2355c6bac944fb46cc2.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12156",
      "url": "https://webkit.org/blog/12156/release-notes-for-safari-technology-preview-137/",
      "title": "Release Notes for Safari Technology Preview 137",
      "summary": "Safari Technology Preview Release 137 is now available for download for macOS Big Sur and macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 137 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=285788&amp;rev=286534&amp;limit=746\">285788-286534</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Enhanced autocomplete to support mid-line completions (<a href=\"https://trac.webkit.org/changeset/285851/webkit/\">r285851</a>)</li>\n<li>Styles\n<ul>\n<li>Added a inline swatch for CSS <code>align-content</code> (<a href=\"https://trac.webkit.org/changeset/285983/webkit/\">r285983</a>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Layers Tab\n<ul>\n<li>Fixed the position of composited layers with a <code>box-shadow</code> (<a href=\"https://trac.webkit.org/changeset/285839/webkit/\">r285839</a>)</li>\n</ul>\n</li>\n<li>Console Prompt\n<ul>\n<li>Fixed console script evaluation not working or being performed in an unexpected execution context after refresh or navigation (<a href=\"https://trac.webkit.org/changeset/286412/webkit/\">r286412</a>)</li>\n</ul>\n</li>\n<li>Web Inspector Interface\n<ul>\n<li>Enabled left docking when in left-to-right and right docking when in right-to-left mode (<a href=\"https://trac.webkit.org/changeset/285974/webkit/\">r285974</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Enabled support for <code>:has()</code> pseudo-class by default (<a href=\"https://trac.webkit.org/changeset/286495/webkit/\">r286495</a>, <a href=\"https://trac.webkit.org/changeset/286135/webkit/\">r286135</a>, <a href=\"https://trac.webkit.org/changeset/286302/webkit/\">r286302</a>, <a href=\"https://trac.webkit.org/changeset/286180/webkit/\">r286180</a>, <a href=\"https://trac.webkit.org/changeset/286226/webkit/\">r286226</a>, <a href=\"https://trac.webkit.org/changeset/286494/webkit/\">r286494</a>, <a href=\"https://trac.webkit.org/changeset/286433/webkit/\">r286433</a>, <a href=\"https://trac.webkit.org/changeset/286188/webkit/\">r286188</a>, <a href=\"https://trac.webkit.org/changeset/286169/webkit/\">r286169</a>, <a href=\"https://trac.webkit.org/changeset/286365/webkit/\">r286365</a>)</li>\n<li>Added support for new <code>srgb-linear</code>, <code>xyz-d50</code> and <code>xyz-d65</code> colorspaces (<a href=\"https://trac.webkit.org/changeset/286168/webkit/\">r286168</a>)</li>\n<li>Added support for <code>oklab()</code> and <code>oklch()</code> colors (<a href=\"https://trac.webkit.org/changeset/286191/webkit/\">r286191</a>)</li>\n<li>Added support for replaced elements with intrinsic ratio and no intrinsic size (<a href=\"https://trac.webkit.org/changeset/286206/webkit/\">r286206</a>)</li>\n<li>Added support for <code>*vi</code> (inline) and <code>*vb</code> (block) viewport units (<a href=\"https://trac.webkit.org/changeset/286458/webkit/\">r286458</a>)</li>\n<li>Added helper to add CSS property with implicit default (<a href=\"https://trac.webkit.org/changeset/285837/webkit/\">r285837</a>)</li>\n<li>Changed to not shrink tables bellow their intrinsic sizes (<a href=\"https://trac.webkit.org/changeset/286207/webkit/\">r286207</a>)</li>\n<li>Changed SVG images used as grid items to use the overriding logical width and height when defined to compute the logical dimensions (<a href=\"https://trac.webkit.org/changeset/286100/webkit/\">r286100</a>)</li>\n<li>Changed dynamic <code>dv*</code> viewport units to ignore the page scale (<a href=\"https://trac.webkit.org/changeset/286350/webkit/\">r286350</a>)</li>\n<li>Fixed <code>:hover</code> with descendant selector invalidating correctly in shadow trees (<a href=\"https://trac.webkit.org/changeset/286063/webkit/\">r286063</a>)</li>\n<li>Fixed <code>rem</code> in media queries to be calculated using <code>font-size: initial</code>, not root element <code>font-size</code> (<a href=\"https://trac.webkit.org/changeset/286123/webkit/\">r286123</a>)</li>\n<li>Fixed sticky <code>th</code> or <code>td</code> in <code>table</code> to stop at the specified top (<a href=\"https://trac.webkit.org/changeset/286417/webkit/\">r286417</a>)</li>\n<li>Implemented parsing and animation support for <code>ray()</code> shape accepted by <code>offset-path</code> (<a href=\"https://trac.webkit.org/changeset/286086/webkit/\">r286086</a>)</li>\n<li>Transferred size for grid item with an aspect-ratio and stretch alignment against the definite row (<a href=\"https://trac.webkit.org/changeset/285987/webkit/\">r285987</a>)</li>\n<li>Updated <code>color-mix()</code> to the latest spec (<a href=\"https://trac.webkit.org/changeset/286196/webkit/\">r286196</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Added <code>Intl.NumberFormat.formatRangeToParts</code> for ICU 69~ platforms (<a href=\"https://trac.webkit.org/changeset/286255/webkit/\">r286255</a>)</li>\n<li>Implemented <code>Date.prototype.toTemporalInstant()</code> (<a href=\"https://trac.webkit.org/changeset/286149/webkit/\">r286149</a>)</li>\n<li>Revised <code>JSON.parse</code> atomize policy for performance and compatibility with the other engines (<a href=\"https://trac.webkit.org/changeset/285955/webkit/\">r285955</a>)</li>\n<li>Accelerated public class field initialization (<a href=\"https://trac.webkit.org/changeset/286251/webkit/\">r286251</a>)</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Fixed WebAssembly <code>memory.fill</code> out of bounds error message (<a href=\"https://trac.webkit.org/changeset/286092/webkit/\">r286092</a>)</li>\n</ul>\n<h3>Experimental Model Element</h3>\n<ul>\n<li>Added support for mouse-based manipulation of <code>&lt;model&gt;</code> on macOS (<a href=\"https://trac.webkit.org/changeset/285986/webkit/\">r285986</a>)</li>\n<li>Added audio support (<a href=\"https://trac.webkit.org/changeset/286065/webkit/\">r286065</a>)</li>\n<li>Added support for controlling looping animations (<a href=\"https://trac.webkit.org/changeset/286066/webkit/\">r286066</a>)</li>\n<li>Added support for getting and setting the camera (<a href=\"https://trac.webkit.org/changeset/286019/webkit/\">r286019</a>)</li>\n<li>Added support for pausing and resuming animations (<a href=\"https://trac.webkit.org/changeset/286048/webkit/\">r286048</a>)</li>\n<li>Added support for seeking animations (<a href=\"https://trac.webkit.org/changeset/286068/webkit/\">r286068</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Added accessibility attributes for <code>&lt;model&gt;</code> (<a href=\"https://trac.webkit.org/changeset/286406/webkit/\">r286406</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added initial implementation for the Web Lock API (<a href=\"https://trac.webkit.org/changeset/286284/webkit/\">r286284</a>)</li>\n<li>Fixed <code>Cross-Origin-Embedder-Policy: require-corp</code> to not prevent loading of data-URL images (<a href=\"https://trac.webkit.org/changeset/285823/webkit/\">r285823</a>)</li>\n<li>Fixed empty <code>&lt;input type=file&gt;</code> controls not showing up in the <code>urlencoded</code> and <code>text/plain</code> <code>enctypes</code> (<a href=\"https://trac.webkit.org/changeset/285808/webkit/\">r285808</a>)</li>\n<li>Fixed empty <code>&lt;input type=file&gt;</code> represented incorrectly in FormData (<a href=\"https://trac.webkit.org/changeset/285861/webkit/\">r285861</a>)</li>\n<li>Fixed modal dialogs to make the root element unfocusable (<a href=\"https://trac.webkit.org/changeset/285791/webkit/\">r285791</a>)</li>\n<li>Fixed <code>validity.valueMissing</code> to not rely on the element&#8217;s disabled state for inputs of type <code>radio</code>, <code>file</code>, or <code>checkbox</code> (<a href=\"https://trac.webkit.org/changeset/286413/webkit/\">r286413</a>)</li>\n<li>Fixed file inputs in non-multipart form submissions showing up as string values in the <code>formdata</code> event (<a href=\"https://trac.webkit.org/changeset/286427/webkit/\">r286427</a>)</li>\n<li>Implemented <code>FileSystemFileHandle.getFile()</code> (<a href=\"https://trac.webkit.org/changeset/285912/webkit/\">r285912</a>)</li>\n</ul>\n<h3>Content Security Policy</h3>\n<ul>\n<li>Fixed missing <code>lineNumber</code> and <code>columnNumber</code> in inline violation reports (<a href=\"https://trac.webkit.org/changeset/285800/webkit/\">r285800</a>)</li>\n<li>Implemented submitting samples in violation reports (<a href=\"https://trac.webkit.org/changeset/286150/webkit/\">r286150</a>)</li>\n<li>Fixed CSP DOM reporting which always used the document as the target (<a href=\"https://trac.webkit.org/changeset/286136/webkit/\">r286136</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Added support for more <code>requestVideoFrameCallback</code> metadata (<a href=\"https://trac.webkit.org/changeset/285984/webkit/\">r285984</a>)</li>\n<li>Fixed audio rate issues in WebRTC audio rendering when switching audio output (<a href=\"https://trac.webkit.org/changeset/285985/webkit/\">r285985</a>)</li>\n<li>Fixed video encoding and decoding for h.264 (<a href=\"https://trac.webkit.org/changeset/285928/webkit/\">r285928</a>)</li>\n</ul>\n<h3>Apple Pay</h3>\n<ul>\n<li>Changed <code>PaymentRequest</code> to validate payment method data on construction (<a href=\"https://trac.webkit.org/changeset/286452/webkit/\">r286452</a>)\n<ul>\n<li>This can (and should) now be used instead of <code>ApplePaySession.supportsVersion</code>.</li>\n</ul>\n</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Added support for special matching characters (<code>*</code>, <code>|</code>, <code>||</code>, and <code>^</code>) in <code>urlFilter</code> of <code>declarativeNetRequest</code> rules instead of treating them as regex patterns</li>\n<li>Added permission prompting inside Web Inspector for <code>devtools</code> extension tabs</li>\n<li>Added support for CSS injections and removals of more than one file with <code>browser.scripting</code></li>\n</ul>",
      "content_text": "Safari Technology Preview Release 137 is now available for download for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 285788-286534.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nElements Tab\n\nEnhanced autocomplete to support mid-line completions (r285851)\nStyles\n\nAdded a inline swatch for CSS align-content (r285983)\n\n\n\n\nLayers Tab\n\nFixed the position of composited layers with a box-shadow (r285839)\n\n\nConsole Prompt\n\nFixed console script evaluation not working or being performed in an unexpected execution context after refresh or navigation (r286412)\n\n\nWeb Inspector Interface\n\nEnabled left docking when in left-to-right and right docking when in right-to-left mode (r285974)\n\n\n\nCSS\n\nEnabled support for :has() pseudo-class by default (r286495, r286135, r286302, r286180, r286226, r286494, r286433, r286188, r286169, r286365)\nAdded support for new srgb-linear, xyz-d50 and xyz-d65 colorspaces (r286168)\nAdded support for oklab() and oklch() colors (r286191)\nAdded support for replaced elements with intrinsic ratio and no intrinsic size (r286206)\nAdded support for *vi (inline) and *vb (block) viewport units (r286458)\nAdded helper to add CSS property with implicit default (r285837)\nChanged to not shrink tables bellow their intrinsic sizes (r286207)\nChanged SVG images used as grid items to use the overriding logical width and height when defined to compute the logical dimensions (r286100)\nChanged dynamic dv* viewport units to ignore the page scale (r286350)\nFixed :hover with descendant selector invalidating correctly in shadow trees (r286063)\nFixed rem in media queries to be calculated using font-size: initial, not root element font-size (r286123)\nFixed sticky th or td in table to stop at the specified top (r286417)\nImplemented parsing and animation support for ray() shape accepted by offset-path (r286086)\nTransferred size for grid item with an aspect-ratio and stretch alignment against the definite row (r285987)\nUpdated color-mix() to the latest spec (r286196)\n\nJavaScript\n\nAdded Intl.NumberFormat.formatRangeToParts for ICU 69~ platforms (r286255)\nImplemented Date.prototype.toTemporalInstant() (r286149)\nRevised JSON.parse atomize policy for performance and compatibility with the other engines (r285955)\nAccelerated public class field initialization (r286251)\n\nWebAssembly\n\nFixed WebAssembly memory.fill out of bounds error message (r286092)\n\nExperimental Model Element\n\nAdded support for mouse-based manipulation of <model> on macOS (r285986)\nAdded audio support (r286065)\nAdded support for controlling looping animations (r286066)\nAdded support for getting and setting the camera (r286019)\nAdded support for pausing and resuming animations (r286048)\nAdded support for seeking animations (r286068)\n\nAccessibility\n\nAdded accessibility attributes for <model> (r286406)\n\nWeb API\n\nAdded initial implementation for the Web Lock API (r286284)\nFixed Cross-Origin-Embedder-Policy: require-corp to not prevent loading of data-URL images (r285823)\nFixed empty <input type=file> controls not showing up in the urlencoded and text/plain enctypes (r285808)\nFixed empty <input type=file> represented incorrectly in FormData (r285861)\nFixed modal dialogs to make the root element unfocusable (r285791)\nFixed validity.valueMissing to not rely on the element’s disabled state for inputs of type radio, file, or checkbox (r286413)\nFixed file inputs in non-multipart form submissions showing up as string values in the formdata event (r286427)\nImplemented FileSystemFileHandle.getFile() (r285912)\n\nContent Security Policy\n\nFixed missing lineNumber and columnNumber in inline violation reports (r285800)\nImplemented submitting samples in violation reports (r286150)\nFixed CSP DOM reporting which always used the document as the target (r286136)\n\nMedia\n\nAdded support for more requestVideoFrameCallback metadata (r285984)\nFixed audio rate issues in WebRTC audio rendering when switching audio output (r285985)\nFixed video encoding and decoding for h.264 (r285928)\n\nApple Pay\n\nChanged PaymentRequest to validate payment method data on construction (r286452)\n\nThis can (and should) now be used instead of ApplePaySession.supportsVersion.\n\n\n\nWeb Extensions\n\nAdded support for special matching characters (*, |, ||, and ^) in urlFilter of declarativeNetRequest rules instead of treating them as regex patterns\nAdded permission prompting inside Web Inspector for devtools extension tabs\nAdded support for CSS injections and removals of more than one file with browser.scripting\n",
      "date_published": "2021-12-20T21:23:09.000Z",
      "date_modified": "2022-01-27T00:32:57.000Z",
      "_plugin": {
        "pageFilename": "88902f9e35d3bbc8c6c232146fe5c275d18691ab44f4adde4b41b775a683820a.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12058",
      "url": "https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/",
      "title": "Wide Gamut 2D Graphics using HTML Canvas",
      "summary": "Support for creating 2D canvases with Display P3 backing stores has been added to WebKit.",
      "content_html": "<style>\n@media (prefers-color-scheme:dark) { figure .preserve-color, figure:hover .preserve-color { filter: none !important; } }\nfigure.widescreen.inline-images img { display: inline; }\narticle .byline { width: 210px; margin-left: -20px; }\n.nowrap-overflow-auto { white-space: nowrap; max-width: 100%; overflow: auto; }\nfigure img { display: inline !important; }\n@media (max-width: 1180px) {\n  article .byline { width: unset; margin-right: auto; }\n}\n#fillstyles img { background-color: #ddd; }\n@media (prefers-color-scheme: dark) {\n  #fillstyles img { background-color: #444; }\n}\n#puzzle iframe { width: 350px; height: 250px; }\n@media (min-width: 500px) {\n  #puzzle iframe { width: 500px; height: 310px; }\n}\n@media (min-width: 1000px) {\n  #puzzle iframe { width: 1000px; height: 520px; }\n}\n@media (color-gamut: p3) {\n  #gamut-warning { display: none; }\n}\n</style>\n<p>Most colors used on the Web today are sRGB colors. These are the colors that you specify with the familiar <code>#rrggbb</code> and <code>rgb(r, g, b)</code> CSS syntax, and whose individual color components are given as values in the range [0, 255]. For example, <code>rgb(255, 0, 0)</code> is the most saturated, pure red in the sRGB color space. But the range of colors in sRGB — its <em>color gamut</em> — does not encompass all colors that can be perceived by the human visual system, and there are displays that can produce a broader range of colors.</p>\n<p>sRGB is based on the color capabilities of computer monitors that existed at the time of its standardization, in the late 1990s. Since then, other, wider gamut color spaces have been defined for use in digital content, and which cover more of the colors that humans can perceive. One such color space is Display P3, which contains colors with significantly higher saturation than sRGB.</p>\n<div class=\"note\" id=\"gamut-warning\">\nThis browser reports that the display does not support Display P3 colors; figures in this post may not appear as intended.\n</div>\n<figure class=\"widescreen mattewhite aligncenter\">\n<div class=\"nowrap-overflow-auto\">\n    <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/pinwheel-sRGB.png\" width=\"240\" height=\"244\" alt=\"A conic gradient showing a range of sRGB colors\" class=\"preserve-color\"> <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/pinwheel-Display-P3.png\" width=\"240\" height=\"244\" alt=\"A conic gradient showing a range of Display P3 colors\" class=\"preserve-color\">\n  </div><figcaption>Conic gradients showing fully saturated sRGB (left) and Display P3 (right) colors.  Viewed in a browser and on a display supporting Display P3, the colors in the circle on the right will show as more intense than those on the left.  (<a href=\"https://webkit.org/blog-files/wide-gamut-canvas/pinwheels.html\">View as standalone page.</a>)</figcaption></figure>\n<div class=\"note\">For a more in depth introduction to color spaces, see Dean Jackson’s earlier post, <a href=\"https://webkit.org/blog/6682/improving-color-on-the-web/\">Improving Color on the Web</a>.</div>\n<p>Today, there are many computer and mobile devices on the market with displays that can reproduce all the colors of the Display P3 gamut, and the Web platform has been evolving over the last few years to allow authors to make best use of these displays. WebKit has supported wide color images and video since 2016, and last year became <a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\">the first browser engine to implement the new color syntax</a> defined in <a href=\"https://drafts.csswg.org/css-color-4/\">CSS Color Module Level 4</a> where colors can be specified in a given color space (like <code>color(display-p3 1 0 0)</code>, a fully saturated Display P3 red).</p>\n<p>One notable omission in wide gamut color support, until now, has been in the HTML <code>canvas</code> element. The 2D canvas API was introduced before wide gamut displays were common, and until now has only handled drawing and manipulating sRGB pixel values. Earlier this year, a proposal for creating canvas contexts using other color spaces was added to the HTML standard, and we’ve recently added support for this to WebKit.</p>\n<h2>Drawing on a wide gamut canvas rendering context</h2>\n<p>The <code>getContext</code> method on a <code>canvas</code> element, which is used to create a rendering context object with 2D drawing APIs, accepts a new option to set the canvas backing store’s color space.</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">canvas</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"canvas\"</span> <span class=\"keyword attribute\">width</span>=<span class=\"attribute value string\">\"400\"</span> <span class=\"keyword attribute\">height</span>=<span class=\"attribute value string\">\"300\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"keyword\">canvas</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">script</span>&gt;</span>\nlet canvas = document.getElementById(\"canvas\");\nlet context = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n// ... draw on context ...\n<span class=\"tag\">&lt;/<span class=\"keyword\">script</span>&gt;</span>\n</code></pre>\n<p>The default color space remains sRGB, rather than having the browser automatically use the wider color space, to avoid the performance overhead of color space conversions with existing content. The two explicit color spaces that can be requested are <code>\"srgb\"</code> and <code>\"display-p3\"</code>.</p>\n<p>Fill and stroke styles can be specified using any supported CSS color syntax.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">position</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\n<span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">green</span> <span class=\"keyword operator\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">0</span>]) {\n    <span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">blue</span> <span class=\"keyword operator\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">0</span>]) {\n        <span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">red</span> <span class=\"keyword operator\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">0</span>]) {\n            <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">=</span> `<span class=\"identifier\">color</span>(<span class=\"identifier\">display</span><span class=\"operator\">-</span><span class=\"identifier\">p3</span> ${<span class=\"identifier\">red</span>} ${<span class=\"identifier\">green</span>} ${<span class=\"identifier\">blue</span>})`;\n            <span class=\"identifier\">context</span>.<span class=\"identifier\">fillRect</span>(<span class=\"identifier\">position</span>, <span class=\"identifier\">position</span>, <span class=\"number\">40</span>, <span class=\"number\">40</span>);\n            <span class=\"identifier\">position</span> <span class=\"operator\">+</span><span class=\"operator\">=</span> <span class=\"number\">20</span>;\n        }\n    }\n}\n</code></pre>\n<figure id=\"fillstyles\" class=\"widescreen mattewhite aligncenter\">\n<div class=\"nowrap-overflow-auto\">\n    <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/squares-sRGB.png\" width=\"220\" height=\"220\" class=\"preserve-color\" alt=\"Colored squares that have been clamped to sRGB\"> <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/squares-Display-P3.png\" width=\"220\" height=\"220\" class=\"preserve-color\" alt=\"Colored squares using Display P3 colors that are outside the sRGB gamut\">\n  </div><figcaption>Display P3 colors used as fill styles on an sRGB (left) and Display P3 (right) canvas.  Colors on the left are clamped to remain within the sRGB gamut. (<a href=\"https://webkit.org/blog-files/wide-gamut-canvas/squares.html\">View as standalone page.</a>)</figcaption></figure>\n<p>Any drawing that uses a color outside the color space of the canvas will be clamped so that it is in gamut. For example, filling a rectangle with <code>color(display-p3 1 0 0)</code> on an sRGB canvas will end up using a fully saturated sRGB red. Similarly, drawing on a Display P3 canvas with <code>color(rec2020 0.9 0 0.9)</code>, an almost full magenta in the <a href=\"https://drafts.csswg.org/css-color-4/#predefined-rec2020\">Rec.2020 color space</a>, will result in pixels of approximately <code>color(display-p3 1.0 0 0.923)</code> being used, since that is the closest in the Display P3 color gamut.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">const</span> <span class=\"identifier\">COLORS</span> <span class=\"operator\">=</span> [<span class=\"string\">\"#0f0\"</span>, <span class=\"string\">\"color(display-p3 0 1 0)\"</span>];\n<span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">y</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>; <span class=\"identifier\">y</span> <span class=\"operator\">&lt;</span> <span class=\"number\">180</span>; <span class=\"identifier\">y</span> <span class=\"operator\">+</span><span class=\"operator\">=</span> <span class=\"number\">20</span>) {\n    <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">=</span> <span class=\"identifier\">COLORS</span>[(<span class=\"identifier\">y</span> <span class=\"operator\">/</span> <span class=\"number\">20</span>) <span class=\"operator\">%</span> <span class=\"number\">2</span>];\n    <span class=\"identifier\">context</span>.<span class=\"identifier\">fillRect</span>(<span class=\"number\">20</span>, <span class=\"identifier\">y</span>, <span class=\"number\">160</span>, <span class=\"number\">20</span>);\n}\n</code></pre>\n<figure class=\"widescreen mattewhite aligncenter\">\n<div class=\"nowrap-overflow-auto\">\n    <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/stripes-sRGB.png\" width=\"200\" height=\"200\" class=\"preserve-color\" alt=\"A filled square of full sRGB green\"> <img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/stripes-Display-P3.png\" width=\"200\" height=\"200\" class=\"preserve-color\" alt=\"Stripes of full sRGB green and full Display P3 green\">\n  </div><figcaption>Stripes of interleaved Display P3 and sRGB colors on an sRGB (left) and Display P3 (right) canvas.  Because colors are clamped to remain within the gamut of the canvas, the two shades of green are indistinguishable on the sRGB canvas.  (<a href=\"https://webkit.org/blog-files/wide-gamut-canvas/stripes.html\">View as standalone page.</a>)</figcaption></figure>\n<div class=\"note\">\nOn macOS, you can use the <a href=\"https://support.apple.com/guide/colorsync-utility/welcome/mac\">ColorSync Utility</a> to convert color values between sRGB, Display P3, Rec.2020, and some other predefined color spaces.\n</div>\n<p>Wide gamut colors are usable in all canvas drawing primitives:</p>\n<ul>\n<li>as the fill and stroke of rectangles, paths, and text</li>\n<li>in gradient stops</li>\n<li>as a shadow color</li>\n</ul>\n<h2>Pixel manipulation in sRGB and Display P3</h2>\n<p><code>getImageData</code> and <code>putImageData</code> can be used to get and set pixel values on a wide gamut canvas. By default, <code>getImageData</code> will return an <code>ImageData</code> object with pixel values in the color space of the canvas, but it is possible to specify an explicit color space that does not match the canvas, and a conversion will be performed.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">context</span> <span class=\"operator\">=</span> <span class=\"identifier\">canvas</span>.<span class=\"identifier\">getContext</span>(<span class=\"string\">\"2d\"</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n<span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">=</span> <span class=\"string\">\"color(display-p3 0.5 0 0)\"</span>;\n<span class=\"identifier\">context</span>.<span class=\"identifier\">fillRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);\n\n<span class=\"keyword type\">let</span> <span class=\"identifier\">imageData</span>;\n\n<span class=\"comment\">// Get ImageData in the canvas color space (Display P3).\n</span><span class=\"identifier\">imageData</span> <span class=\"operator\">=</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">getImageData</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);\n<span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">imageData</span>.<span class=\"identifier\">colorSpace</span>);  <span class=\"comment\">// \"display-p3\"\n</span><span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>([...<span class=\"identifier\">imageData</span>.<span class=\"identifier\">data</span>]);   <span class=\"comment\">// [128, 0, 0, 255]\n</span>\n<span class=\"comment\">// Get ImageData in Display P3 explicitly.\n</span><span class=\"identifier\">imageData</span> <span class=\"operator\">=</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">getImageData</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n<span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">imageData</span>.<span class=\"identifier\">colorSpace</span>);  <span class=\"comment\">// \"display-p3\"\n</span><span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>([...<span class=\"identifier\">imageData</span>.<span class=\"identifier\">data</span>]);   <span class=\"comment\">// [128, 0, 0, 255]\n</span>\n<span class=\"comment\">// Get ImageData converted to sRGB.\n</span><span class=\"identifier\">imageData</span> <span class=\"operator\">=</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">getImageData</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"srgb\"</span> });\n<span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">imageData</span>.<span class=\"identifier\">colorSpace</span>);  <span class=\"comment\">// \"srgb\"\n</span><span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>([...<span class=\"identifier\">imageData</span>.<span class=\"identifier\">data</span>]);   <span class=\"comment\">// [141, 0, 0, 255]\n</span></code></pre>\n<p>The <code>ImageData</code> constructor similarly takes an optional options object with a <code>colorSpace</code> key.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">let</span> <span class=\"identifier\">context</span> <span class=\"operator\">=</span> <span class=\"identifier\">canvas</span>.<span class=\"identifier\">getContext</span>(<span class=\"string\">\"2d\"</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n\n<span class=\"comment\">// Create and fill an ImageData with full Display P3 yellow.\n</span><span class=\"keyword type\">let</span> <span class=\"identifier\">imageData</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">ImageData</span>(<span class=\"number\">10</span>, <span class=\"number\">10</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n<span class=\"keyword control\">for</span> (<span class=\"keyword type\">let</span> <span class=\"identifier\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"identifier\">i</span> <span class=\"operator\">&lt;</span> <span class=\"number\">10</span> <span class=\"operator\">*</span> <span class=\"number\">10</span> <span class=\"operator\">*</span> <span class=\"number\">4</span>; <span class=\"operator\">+</span><span class=\"operator\">+</span><span class=\"identifier\">i</span>)\n    <span class=\"identifier\">imageData</span>.<span class=\"identifier\">data</span>[<span class=\"identifier\">i</span>] <span class=\"operator\">=</span> [<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>][<span class=\"identifier\">i</span> <span class=\"operator\">%</span> <span class=\"number\">4</span>];\n\n<span class=\"identifier\">context</span>.<span class=\"identifier\">putImageData</span>(<span class=\"identifier\">imageData</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);\n</code></pre>\n<p>As when drawing shapes using colors of a different color space, any mismatch between the <code>ImageData</code> and the target canvas color space will cause <code>putImageData</code> to perform a conversion and potentially clamp the resulting pixels.</p>\n<h2>Serializing canvas content</h2>\n<p>The <code>toDataURL</code> and <code>toBlob</code> methods on a <code>canvas</code> DOM element produce a raster image with the canvas contents. In WebKit, these methods now embed an appropriate color profile in the generated PNG or JPEG when called on a Display P3 canvas, ensuring that the full range of color is preserved.</p>\n<h2>Drawing wide gamut images</h2>\n<p>Like <code>putImageData</code>, the <code>drawImage</code> method will perform any color space conversion needed when drawing an image whose color space differs from that of the canvas. Any color profile used by a raster image referenced by an <code>img</code>, and any color space information in a video referenced by a <code>video</code> (be it a video file or a WebRTC stream), will be honored when drawn to a canvas. This ensures that when drawing into a canvas whose color space matches the display’s (be that Display P3 or sRGB), the source image/video and the canvas pixels will look the same.</p>\n<p>Here is an interactive demonstration of using canvas to make a sliding tile puzzle. The tiles are drawn by applying a clip path and calling <code>drawImage</code> pointing to the <code>img</code> element on the left, which references a wide gamut JPEG. Toggling the checkbox shows how the colors are muted when an sRGB canvas is used.</p>\n<figure id=\"puzzle\" class=\"widescreen mattewhite aligncenter\">\n<p><iframe loading=\"lazy\" src=\"https://webkit.org/blog-files/wide-gamut-canvas/puzzle.html\" width=\"350\" height=\"250\"></iframe><figcaption>Sliding tile puzzle. Toggling the checkbox will change whether an sRGB or a Display P3 canvas is used. (<a href=\"https://webkit.org/blog-files/wide-gamut-canvas/puzzle.html\">View as standalone page.</a>)</figcaption></figure>\n<h2>Web Inspector support</h2>\n<p>Web Inspector also now shows color space information for canvases to help ensure your canvases’ backing stores are in the expected color space.</p>\n<figure class=\"image\"><picture title=\"\"><source media=\"(prefers-color-scheme: dark)\" srcset=\"/wp-content/uploads/Overview-Dark-1024x654.png 2x\" class=\"wp-image-12126\"><img srcset =\"/wp-content/uploads/Overview-Light-1024x654.png 2x\" alt=\"\" class=\"wp-image-12125\" /></picture></figure>\n<p>In the Graphics tab, the Canvases Overview will display the color space for each canvas next to the context type (e.g. 2D) on each canvas overview tile.</p>\n<figure class=\"image\"><picture title=\"\"><source media=\"(prefers-color-scheme: dark)\" srcset=\"/wp-content/uploads/Details-Dark-1024x654.png 2x\" class=\"wp-image-12128\"><img srcset =\"/wp-content/uploads/Details-Light-1024x654.png 2x\" alt=\"\" class=\"wp-image-12127\" /></picture></figure>\n<p>After clicking on a Canvas overview tile to inspect it, the color space is shown in the Details Sidebar in the Attributes section.</p>\n<h2>Browser support</h2>\n<p>Wide gamut canvas is supported in the macOS and iOS ports of WebKit as of <a href=\"https://trac.webkit.org/changeset/283541/webkit\">r283541</a>, and is available in Safari on:</p>\n<ul>\n<li>macOS Monterey 12.1 and above</li>\n<li>iOS 15.1 and above</li>\n</ul>\n<p>Safari is the first browser to support drawing shapes, text, gradients, and shadows with wide gamut CSS colors on Display P3 canvases. All other features, including <code>getImageData</code>, <code>putImageData</code>, and <code>drawImage</code> on Display P3 canvases, are supported in Safari and in Chrome 94 and above.</p>\n<h2>Feature detection</h2>\n<p>There are a few techniques you can use to detect whether wide gamut display and canvas support is available.</p>\n<p><strong>Display support:</strong> To check whether the display supports Display P3 colors, use the <code>color-gamut</code> media query.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">function</span> <span class=\"identifier\">displaySupportsP3Color</span>() {\n    <span class=\"keyword control\">return</span> <span class=\"identifier\">matchMedia</span>(<span class=\"string\">\"(color-gamut: p3)\"</span>).<span class=\"identifier\">matches</span>;\n}\n</code></pre>\n<p><strong>Canvas color space support:</strong> To check whether the browser supports wide gamut canvases, try creating one and checking the resulting color space.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">function</span> <span class=\"identifier\">canvasSupportsDisplayP3</span>() {\n    <span class=\"keyword type\">let</span> <span class=\"identifier\">canvas</span> <span class=\"operator\">=</span> <span class=\"identifier\">document</span>.<span class=\"identifier\">createElement</span>(<span class=\"string\">\"canvas\"</span>);\n    <span class=\"keyword control\">try</span> {\n        <span class=\"comment\">// Safari throws a TypeError if the colorSpace option is supported, but\n</span>        <span class=\"comment\">// the system requirements (minimum macOS or iOS version) for Display P3\n</span>        <span class=\"comment\">// support are not met.\n</span>        <span class=\"keyword type\">let</span> <span class=\"identifier\">context</span> <span class=\"operator\">=</span> <span class=\"identifier\">canvas</span>.<span class=\"identifier\">getContext</span>(<span class=\"string\">\"2d\"</span>, { <span class=\"identifier\">colorSpace</span><span class=\"operator\">:</span> <span class=\"string\">\"display-p3\"</span> });\n        <span class=\"keyword control\">return</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">getContextAttributes</span>().<span class=\"identifier\">colorSpace</span> <span class=\"operator\">=</span><span class=\"operator\">=</span> <span class=\"string\">\"display-p3\"</span>;\n    } <span class=\"keyword control\">catch</span> {\n    }\n    <span class=\"keyword control\">return</span> <span class=\"keyword literal\">false</span>;\n}\n</code></pre>\n<p><strong>CSS Color Module Level 4 syntax support:</strong> To check whether the browser supports specifying wide gamut colors on canvas, try setting one and checking it wasn’t ignored.</p>\n<pre><code class=\"javascript\"><span class=\"keyword type\">function</span> <span class=\"identifier\">canvasSupportsWideGamutCSSColors</span>() {\n    <span class=\"keyword type\">let</span> <span class=\"identifier\">context</span> <span class=\"operator\">=</span> <span class=\"identifier\">document</span>.<span class=\"identifier\">createElement</span>(<span class=\"string\">\"canvas\"</span>).<span class=\"identifier\">getContext</span>(<span class=\"string\">\"2d\"</span>);\n    <span class=\"keyword type\">let</span> <span class=\"identifier\">initialFillStyle</span> <span class=\"operator\">=</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span>;\n    <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">=</span> <span class=\"string\">\"color(display-p3 0 1 0)\"</span>;\n    <span class=\"keyword control\">return</span> <span class=\"identifier\">context</span>.<span class=\"identifier\">fillStyle</span> <span class=\"operator\">!</span><span class=\"operator\">=</span> <span class=\"identifier\">initialFillStyle</span>;\n}\n</code></pre>\n<h2>Future work</h2>\n<p>There are a few areas where wide gamut canvas support could be improved.</p>\n<ul>\n<li>2D canvas still exposes image data as 8 bit RGBA values through <code>ImageData</code> objects. It may be useful to support other pixel formats for a greater color depth, such as 16 bit integers, or single precision or half precision floating point values, especially when wider color gamuts are used, since increased precision can help avoid banding artifacts. This has been proposed in an <a href=\"https://github.com/whatwg/html/issues/4167\">HTML Standard issue</a>.</li>\n<li>The two predefined color spaces that are supported are sRGB and Display P3, but as High Dynamic Range videos and displays that support HDR become more common, it’s worth consdering allowing 2D canvas to use these and other color spaces too. See <a href=\"https://www.w3.org/Graphics/Color/Workshop/slides/talk/cameron\">this presentation at the W3C Workshop on Wide Color Gamut and High Dynamic Range for the Web</a> from earlier this year, which talks about proposed new color space and HDR support.</li>\n<li>Canvas can be used with context types other than 2D, such as WebGL and WebGPU. A proposal for <a href=\"https://www.w3.org/Graphics/Color/Workshop/slides/talk/russell\">wide gamut and HDR support in these contexts</a> was presented at that same workshop.</li>\n</ul>\n<h2>In summary</h2>\n<p>WebKit now has support for creating 2D canvas contexts using the Display P3 color space, allowing authors to make best use of the displays that are becoming increasingly common. This feature is enabled in Safari on macOS Monterey 12.1 and iOS 15.1.</p>\n<p>If you have any comments or questions about the feature, please feel free to send me a message at <a href=\"https://twitter.com/heycam\">@heycam</a>, and more general comments can be sent to the <a href=\"https://twitter.com/webkit\">@webkit</a> Twitter account.</p>\n<h2>Further reading</h2>\n<ul>\n<li><a href=\"https://webkit.org/blog/6682/improving-color-on-the-web/\">Improving Color on the Web</a> (Dean Jackson, WebKit blog)</li>\n<li><a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\">Wide Gamut Color in CSS with Display-P3</a> (Nikita Vasilyev, WebKit blog)</li>\n<li><a href=\"https://drafts.csswg.org/css-color-4/\">CSS Color Module Level 4</a> (W3C)</li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/canvas.html#2dcontext\">HTML Standard &mdash; The 2D rendering context</a></a> (WHATWG)</li>\n<li><a href=\"https://www.w3.org/Graphics/Color/Workshop/\">W3C Workshop on Wide Color Gamut and High Dynamic Range for the Web</a> (W3C)</li>\n</ul>",
      "content_text": "\nMost colors used on the Web today are sRGB colors. These are the colors that you specify with the familiar #rrggbb and rgb(r, g, b) CSS syntax, and whose individual color components are given as values in the range [0, 255]. For example, rgb(255, 0, 0) is the most saturated, pure red in the sRGB color space. But the range of colors in sRGB — its color gamut — does not encompass all colors that can be perceived by the human visual system, and there are displays that can produce a broader range of colors.\nsRGB is based on the color capabilities of computer monitors that existed at the time of its standardization, in the late 1990s. Since then, other, wider gamut color spaces have been defined for use in digital content, and which cover more of the colors that humans can perceive. One such color space is Display P3, which contains colors with significantly higher saturation than sRGB.\n\nThis browser reports that the display does not support Display P3 colors; figures in this post may not appear as intended.\n\n\n\n     \n  Conic gradients showing fully saturated sRGB (left) and Display P3 (right) colors.  Viewed in a browser and on a display supporting Display P3, the colors in the circle on the right will show as more intense than those on the left.  (View as standalone page.)\nFor a more in depth introduction to color spaces, see Dean Jackson’s earlier post, Improving Color on the Web.\nToday, there are many computer and mobile devices on the market with displays that can reproduce all the colors of the Display P3 gamut, and the Web platform has been evolving over the last few years to allow authors to make best use of these displays. WebKit has supported wide color images and video since 2016, and last year became the first browser engine to implement the new color syntax defined in CSS Color Module Level 4 where colors can be specified in a given color space (like color(display-p3 1 0 0), a fully saturated Display P3 red).\nOne notable omission in wide gamut color support, until now, has been in the HTML canvas element. The 2D canvas API was introduced before wide gamut displays were common, and until now has only handled drawing and manipulating sRGB pixel values. Earlier this year, a proposal for creating canvas contexts using other color spaces was added to the HTML standard, and we’ve recently added support for this to WebKit.\nDrawing on a wide gamut canvas rendering context\nThe getContext method on a canvas element, which is used to create a rendering context object with 2D drawing APIs, accepts a new option to set the canvas backing store’s color space.\n<canvas id=\"canvas\" width=\"400\" height=\"300\"></canvas>\n<script>\nlet canvas = document.getElementById(\"canvas\");\nlet context = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n// ... draw on context ...\n</script>\n\nThe default color space remains sRGB, rather than having the browser automatically use the wider color space, to avoid the performance overhead of color space conversions with existing content. The two explicit color spaces that can be requested are \"srgb\" and \"display-p3\".\nFill and stroke styles can be specified using any supported CSS color syntax.\nlet position = 0;\nfor (let green of [1, 0]) {\n    for (let blue of [1, 0]) {\n        for (let red of [1, 0]) {\n            context.fillStyle = `color(display-p3 ${red} ${green} ${blue})`;\n            context.fillRect(position, position, 40, 40);\n            position += 20;\n        }\n    }\n}\n\n\n\n     \n  Display P3 colors used as fill styles on an sRGB (left) and Display P3 (right) canvas.  Colors on the left are clamped to remain within the sRGB gamut. (View as standalone page.)\nAny drawing that uses a color outside the color space of the canvas will be clamped so that it is in gamut. For example, filling a rectangle with color(display-p3 1 0 0) on an sRGB canvas will end up using a fully saturated sRGB red. Similarly, drawing on a Display P3 canvas with color(rec2020 0.9 0 0.9), an almost full magenta in the Rec.2020 color space, will result in pixels of approximately color(display-p3 1.0 0 0.923) being used, since that is the closest in the Display P3 color gamut.\nconst COLORS = [\"#0f0\", \"color(display-p3 0 1 0)\"];\nfor (let y = 20; y < 180; y += 20) {\n    context.fillStyle = COLORS[(y / 20) % 2];\n    context.fillRect(20, y, 160, 20);\n}\n\n\n\n     \n  Stripes of interleaved Display P3 and sRGB colors on an sRGB (left) and Display P3 (right) canvas.  Because colors are clamped to remain within the gamut of the canvas, the two shades of green are indistinguishable on the sRGB canvas.  (View as standalone page.)\n\nOn macOS, you can use the ColorSync Utility to convert color values between sRGB, Display P3, Rec.2020, and some other predefined color spaces.\n\nWide gamut colors are usable in all canvas drawing primitives:\n\nas the fill and stroke of rectangles, paths, and text\nin gradient stops\nas a shadow color\n\nPixel manipulation in sRGB and Display P3\ngetImageData and putImageData can be used to get and set pixel values on a wide gamut canvas. By default, getImageData will return an ImageData object with pixel values in the color space of the canvas, but it is possible to specify an explicit color space that does not match the canvas, and a conversion will be performed.\nlet context = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\ncontext.fillStyle = \"color(display-p3 0.5 0 0)\";\ncontext.fillRect(0, 0, 100, 100);\n\nlet imageData;\n\n// Get ImageData in the canvas color space (Display P3).\nimageData = context.getImageData(0, 0, 1, 1);\nconsole.log(imageData.colorSpace);  // \"display-p3\"\nconsole.log([...imageData.data]);   // [128, 0, 0, 255]\n\n// Get ImageData in Display P3 explicitly.\nimageData = context.getImageData(0, 0, 1, 1, { colorSpace: \"display-p3\" });\nconsole.log(imageData.colorSpace);  // \"display-p3\"\nconsole.log([...imageData.data]);   // [128, 0, 0, 255]\n\n// Get ImageData converted to sRGB.\nimageData = context.getImageData(0, 0, 1, 1, { colorSpace: \"srgb\" });\nconsole.log(imageData.colorSpace);  // \"srgb\"\nconsole.log([...imageData.data]);   // [141, 0, 0, 255]\n\nThe ImageData constructor similarly takes an optional options object with a colorSpace key.\nlet context = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n\n// Create and fill an ImageData with full Display P3 yellow.\nlet imageData = new ImageData(10, 10, { colorSpace: \"display-p3\" });\nfor (let i = 0; i < 10 * 10 * 4; ++i)\n    imageData.data[i] = [255, 255, 0, 255][i % 4];\n\ncontext.putImageData(imageData, 0, 0);\n\nAs when drawing shapes using colors of a different color space, any mismatch between the ImageData and the target canvas color space will cause putImageData to perform a conversion and potentially clamp the resulting pixels.\nSerializing canvas content\nThe toDataURL and toBlob methods on a canvas DOM element produce a raster image with the canvas contents. In WebKit, these methods now embed an appropriate color profile in the generated PNG or JPEG when called on a Display P3 canvas, ensuring that the full range of color is preserved.\nDrawing wide gamut images\nLike putImageData, the drawImage method will perform any color space conversion needed when drawing an image whose color space differs from that of the canvas. Any color profile used by a raster image referenced by an img, and any color space information in a video referenced by a video (be it a video file or a WebRTC stream), will be honored when drawn to a canvas. This ensures that when drawing into a canvas whose color space matches the display’s (be that Display P3 or sRGB), the source image/video and the canvas pixels will look the same.\nHere is an interactive demonstration of using canvas to make a sliding tile puzzle. The tiles are drawn by applying a clip path and calling drawImage pointing to the img element on the left, which references a wide gamut JPEG. Toggling the checkbox shows how the colors are muted when an sRGB canvas is used.\n\nSliding tile puzzle. Toggling the checkbox will change whether an sRGB or a Display P3 canvas is used. (View as standalone page.)\nWeb Inspector support\nWeb Inspector also now shows color space information for canvases to help ensure your canvases’ backing stores are in the expected color space.\n\nIn the Graphics tab, the Canvases Overview will display the color space for each canvas next to the context type (e.g. 2D) on each canvas overview tile.\n\nAfter clicking on a Canvas overview tile to inspect it, the color space is shown in the Details Sidebar in the Attributes section.\nBrowser support\nWide gamut canvas is supported in the macOS and iOS ports of WebKit as of r283541, and is available in Safari on:\n\nmacOS Monterey 12.1 and above\niOS 15.1 and above\n\nSafari is the first browser to support drawing shapes, text, gradients, and shadows with wide gamut CSS colors on Display P3 canvases. All other features, including getImageData, putImageData, and drawImage on Display P3 canvases, are supported in Safari and in Chrome 94 and above.\nFeature detection\nThere are a few techniques you can use to detect whether wide gamut display and canvas support is available.\nDisplay support: To check whether the display supports Display P3 colors, use the color-gamut media query.\nfunction displaySupportsP3Color() {\n    return matchMedia(\"(color-gamut: p3)\").matches;\n}\n\nCanvas color space support: To check whether the browser supports wide gamut canvases, try creating one and checking the resulting color space.\nfunction canvasSupportsDisplayP3() {\n    let canvas = document.createElement(\"canvas\");\n    try {\n        // Safari throws a TypeError if the colorSpace option is supported, but\n        // the system requirements (minimum macOS or iOS version) for Display P3\n        // support are not met.\n        let context = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n        return context.getContextAttributes().colorSpace == \"display-p3\";\n    } catch {\n    }\n    return false;\n}\n\nCSS Color Module Level 4 syntax support: To check whether the browser supports specifying wide gamut colors on canvas, try setting one and checking it wasn’t ignored.\nfunction canvasSupportsWideGamutCSSColors() {\n    let context = document.createElement(\"canvas\").getContext(\"2d\");\n    let initialFillStyle = context.fillStyle;\n    context.fillStyle = \"color(display-p3 0 1 0)\";\n    return context.fillStyle != initialFillStyle;\n}\n\nFuture work\nThere are a few areas where wide gamut canvas support could be improved.\n\n2D canvas still exposes image data as 8 bit RGBA values through ImageData objects. It may be useful to support other pixel formats for a greater color depth, such as 16 bit integers, or single precision or half precision floating point values, especially when wider color gamuts are used, since increased precision can help avoid banding artifacts. This has been proposed in an HTML Standard issue.\nThe two predefined color spaces that are supported are sRGB and Display P3, but as High Dynamic Range videos and displays that support HDR become more common, it’s worth consdering allowing 2D canvas to use these and other color spaces too. See this presentation at the W3C Workshop on Wide Color Gamut and High Dynamic Range for the Web from earlier this year, which talks about proposed new color space and HDR support.\nCanvas can be used with context types other than 2D, such as WebGL and WebGPU. A proposal for wide gamut and HDR support in these contexts was presented at that same workshop.\n\nIn summary\nWebKit now has support for creating 2D canvas contexts using the Display P3 color space, allowing authors to make best use of the displays that are becoming increasingly common. This feature is enabled in Safari on macOS Monterey 12.1 and iOS 15.1.\nIf you have any comments or questions about the feature, please feel free to send me a message at @heycam, and more general comments can be sent to the @webkit Twitter account.\nFurther reading\n\nImproving Color on the Web (Dean Jackson, WebKit blog)\nWide Gamut Color in CSS with Display-P3 (Nikita Vasilyev, WebKit blog)\nCSS Color Module Level 4 (W3C)\nHTML Standard — The 2D rendering context (WHATWG)\nW3C Workshop on Wide Color Gamut and High Dynamic Range for the Web (W3C)\n",
      "date_published": "2021-12-14T17:00:35.000Z",
      "date_modified": "2021-12-14T17:50:36.000Z",
      "_plugin": {
        "pageFilename": "7fa76276bc041083488f91455271ce1d775bf3bcb74a7da4ef9d54a79d141ea4.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12140",
      "url": "https://webkit.org/blog/12140/new-webkit-features-in-safari-15-2/",
      "title": "New WebKit Features in Safari 15.2",
      "summary": "The internet has always been about communication and collaboration.",
      "content_html": "<p>The internet has always been about communication and collaboration. It started with asynchronous messages made of text. As it matured, the internet became real-time. Then the web came along, adding images, and later, video. Websites provided a means to publish, to broadcast, to run stores, to gather communities and create worlds.</p>\n<p>Now, the web is maturing to the point where web apps make rich collaboration experiences possible — including digital creation. Recent updates to WebKit bring a number of improvements to Safari 15.2 that focus on supporting creative applications and leveraging the incredible power of today’s hardware.</p>\n<h3>WebAssembly Enhancements</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly\">Web Assembly (Wasm)</a> is a low-level assembly language that allows a multitude of programming languages like C/C++, C#, Objective-C, Swift, Python, Java or even Cobol to be compiled to run on the web at near native speed — without the user needing to install anything special. It’s designed to work alongside of JavaScript, allowing sites to use both together. Wasm provides the tools needed to bring powerful software applications to the web.</p>\n<p>In Safari 15.2, the addressable memory for Wasm has been expanded to 4GB, opening up possibilities for bigger and more powerful applications. The addition of zero-cost <a href=\"https://github.com/WebAssembly/exception-handling/blob/master/proposals/exception-handling/Exceptions.md\">exception handling</a> also provides potential performance gains.</p>\n<h3>COOP/COEP  HTTP Headers</h3>\n<p>Shared memory provides powerful functionality for native applications, but on the web, such power must be balanced with strong security protections.  <code>SharedArrayBuffer</code> was supported in WebKit for Safari 10.1–11, but was disabled along with other browsers due to the risk of using it for speculative execution attacks like Spectre.</p>\n<p>Safari 15.2 adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\"><code>Cross-Origin-Opener-Policy</code> (COOP)</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\"><code>Cross-Origin-Embedder-Policy</code> (COEP)</a> HTTP response headers. Sites can adopt these headers to opt into process isolation and be better protected. If sites serve both <code>Cross-Origin-Opener-Policy: same-origin</code> and <code>Cross-Origin-Embedder-Policy: require-corp</code>, they are now able to use SharedArrayBuffer and Wasm threading again.</p>\n<h3>Wide gamut support for Canvas</h3>\n<p>These days modern creative tools depend on amazing camera and gorgeous displays. Yet, most colors on the Web today are sRGB colors, which match the limited color capabilities of computer monitors from the late 1990s. The human visual system can perceive a much broader range of colors. Today’s modern displays reproduce the colors of the Display P3 gamut, with significantly higher saturation than sRGB.</p>\n<p>Since 2016, WebKit has supported wide color images and video, and last year became <a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\">the first browser engine to implement the new color syntax</a> defined in <a href=\"https://drafts.csswg.org/css-color-4/\">CSS Color Module Level 4</a>. One notable omission in wide gamut color support was in the HTML <code>canvas</code> element. Earlier this year, a proposal for support was added to the HTML standard, and now, in Safari 15.2, WebKit adds wide gamut support — including Display P3 — for use in <code>canvas</code>.</p>\n<p>Read more about the details, with demos of stunning results, in <a href=\"https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/\">Wide Gamut 2D Graphics using HTML Canvas</a>.</p>\n<h3>More information</h3>\n<p>For more on what’s in Safari 15.2, including bug fixes, see the <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-15_2-release-notes\">Safari 15.2 Release Notes</a>.</p>\n<h3>Availability</h3>\n<p>Safari 15.2 is available on macOS Monterey, macOS Big Sur and macOS Catalina. To update on macOS, go to Apple menu  > System Preferences, and click Software Update.</p>\n<p>Safari 15.2 is available on iOS and iPadOS 15.2. To update, go to Settings > General, then tap Software Update.</p>\n<h3>Feedback</h3>\n<p>If you run into issues, we welcome your <a href=\"https://bugreport.apple.com/\">bug reports</a> for Safari, or <a href=\"https://bugs.webkit.org/\">WebKit bugs</a> for web content issues. Send us a tweet <a href=\"https://twitter.com/webkit\">@webkit</a> to share your thoughts on this release.</p>",
      "content_text": "The internet has always been about communication and collaboration. It started with asynchronous messages made of text. As it matured, the internet became real-time. Then the web came along, adding images, and later, video. Websites provided a means to publish, to broadcast, to run stores, to gather communities and create worlds.\nNow, the web is maturing to the point where web apps make rich collaboration experiences possible — including digital creation. Recent updates to WebKit bring a number of improvements to Safari 15.2 that focus on supporting creative applications and leveraging the incredible power of today’s hardware.\nWebAssembly Enhancements\nWeb Assembly (Wasm) is a low-level assembly language that allows a multitude of programming languages like C/C++, C#, Objective-C, Swift, Python, Java or even Cobol to be compiled to run on the web at near native speed — without the user needing to install anything special. It’s designed to work alongside of JavaScript, allowing sites to use both together. Wasm provides the tools needed to bring powerful software applications to the web.\nIn Safari 15.2, the addressable memory for Wasm has been expanded to 4GB, opening up possibilities for bigger and more powerful applications. The addition of zero-cost exception handling also provides potential performance gains.\nCOOP/COEP  HTTP Headers\nShared memory provides powerful functionality for native applications, but on the web, such power must be balanced with strong security protections.  SharedArrayBuffer was supported in WebKit for Safari 10.1–11, but was disabled along with other browsers due to the risk of using it for speculative execution attacks like Spectre.\nSafari 15.2 adds support for Cross-Origin-Opener-Policy (COOP) and Cross-Origin-Embedder-Policy (COEP) HTTP response headers. Sites can adopt these headers to opt into process isolation and be better protected. If sites serve both Cross-Origin-Opener-Policy: same-origin and Cross-Origin-Embedder-Policy: require-corp, they are now able to use SharedArrayBuffer and Wasm threading again.\nWide gamut support for Canvas\nThese days modern creative tools depend on amazing camera and gorgeous displays. Yet, most colors on the Web today are sRGB colors, which match the limited color capabilities of computer monitors from the late 1990s. The human visual system can perceive a much broader range of colors. Today’s modern displays reproduce the colors of the Display P3 gamut, with significantly higher saturation than sRGB.\nSince 2016, WebKit has supported wide color images and video, and last year became the first browser engine to implement the new color syntax defined in CSS Color Module Level 4. One notable omission in wide gamut color support was in the HTML canvas element. Earlier this year, a proposal for support was added to the HTML standard, and now, in Safari 15.2, WebKit adds wide gamut support — including Display P3 — for use in canvas.\nRead more about the details, with demos of stunning results, in Wide Gamut 2D Graphics using HTML Canvas.\nMore information\nFor more on what’s in Safari 15.2, including bug fixes, see the Safari 15.2 Release Notes.\nAvailability\nSafari 15.2 is available on macOS Monterey, macOS Big Sur and macOS Catalina. To update on macOS, go to Apple menu  > System Preferences, and click Software Update.\nSafari 15.2 is available on iOS and iPadOS 15.2. To update, go to Settings > General, then tap Software Update.\nFeedback\nIf you run into issues, we welcome your bug reports for Safari, or WebKit bugs for web content issues. Send us a tweet @webkit to share your thoughts on this release.",
      "date_published": "2021-12-13T19:13:38.000Z",
      "date_modified": "2021-12-15T16:46:51.000Z",
      "_plugin": {
        "pageFilename": "b20eb6d899e0a824056daa2b352f7959ca9c7e5eba396c8c105de3594a46e763.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12137",
      "url": "https://webkit.org/blog/12137/release-notes-for-safari-technology-preview-136/",
      "title": "Release Notes for Safari Technology Preview 136",
      "summary": "Safari Technology Preview Release 136 is now available for download for macOS Big Sur and macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 136 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=285101&amp;rev=285788&amp;limit=687\">285101-285788</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>CSS</h3>\n<ul>\n<li>Added support for <code>contain: paint</code> (<a href=\"https://trac.webkit.org/changeset/285583/webkit/\">r285583</a>)</li>\n<li>Added support for the <code>revert-layer</code> value (<a href=\"https://trac.webkit.org/changeset/285624/webkit/\">r285624</a>)</li>\n<li>Added <code>flex-basis: content</code> support (<a href=\"https://trac.webkit.org/changeset/285709/webkit/\">r285709</a>)</li>\n<li>Fixed <code>::slotted</code> element style to invalidate correctly in nested case (<a href=\"https://trac.webkit.org/changeset/285211/webkit/\">r285211</a>)</li>\n<li>Fixed <code>::slotted</code> to not match an active <code>&lt;slot&gt;</code> (<a href=\"https://trac.webkit.org/changeset/285209/webkit/\">r285209</a>)</li>\n<li>Fixed <code>:host::part(foo)</code> selector to select elements inside shadow roots (<a href=\"https://trac.webkit.org/changeset/285262/webkit/\">r285262</a>)</li>\n<li>Fixed a mask or isolation to set <code>transform-style</code> to <code>flat</code> (<a href=\"https://trac.webkit.org/changeset/285482/webkit/\">r285482</a>)</li>\n<li>Fixed <code>border-radius</code> inline style to serialize with valid syntax (<a href=\"https://trac.webkit.org/changeset/285235/webkit/\">r285235</a>)</li>\n<li>Fixed <code>font-synthesis</code> inline and computed style to be in canonical order (<a href=\"https://trac.webkit.org/changeset/285383/webkit/\">r285383</a>, <a href=\"https://trac.webkit.org/changeset/285384/webkit/\">r285384</a>)</li>\n<li>Fixed rendering bug with <code>height: min-content</code>, <code>position: absolute</code>, and <code>box-sizing: border-box</code> (<a href=\"https://trac.webkit.org/changeset/285495/webkit/\">r285495</a>)</li>\n<li>Fixed the default computed value for <code>content</code> to be <code>none</code> for <code>::before</code> and <code>::after</code> (<a href=\"https://trac.webkit.org/changeset/285621/webkit/\">r285621</a>)</li>\n<li>Implemented parsing and animation support for <code>offset-path</code> (<a href=\"https://trac.webkit.org/changeset/285343/webkit/\">r285343</a>)</li>\n<li>Implemented Scroll To Text Fragment directive parsing (<a href=\"https://trac.webkit.org/changeset/285528/webkit/\">r285528</a>)</li>\n<li>Implemented <code>transform: perspective(none)</code> (<a href=\"https://trac.webkit.org/changeset/285255/webkit/\">r285255</a>)</li>\n<li>Removed non-standard <code>-webkit-border-fit</code> CSS property (<a href=\"https://trac.webkit.org/changeset/285615/webkit/\">r285615</a>)</li>\n<li>Updated the <code>content-size</code> grid width before laying out a grid item with block constraints and <code>aspect-ratio</code> (<a href=\"https://trac.webkit.org/changeset/285497/webkit/\">r285497</a>)</li>\n</ul>\n<h3>GPU Process</h3>\n<ul>\n<li>Fixed enabling &#8220;media source inline painting&#8221; by default to work when using GPU Process for media (<a href=\"https://trac.webkit.org/changeset/285410/webkit/\">r285410</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Implemented IntlNumberFormat v3 (<code>formatRangeToParts</code> is not implemented yet) (<a href=\"https://trac.webkit.org/changeset/285418/webkit/\">r285418</a>)</li>\n<li>Implemented <code>Temporal.Instant</code> (<a href=\"https://trac.webkit.org/changeset/285178/webkit/\">r285178</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Implemented custom element definition&#8217;s <em>disable shadow</em> flag (<a href=\"https://trac.webkit.org/changeset/285740/webkit/\">r285740</a>)</li>\n<li>Fixed the <code>cssText</code> property for a computed style to return an empty string (<a href=\"https://trac.webkit.org/changeset/285604/webkit/\">r285604</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed showing languages and subtitles tracks button and menu for <code>&lt;audio&gt;</code> (<a href=\"https://trac.webkit.org/changeset/285216/webkit/\">r285216</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Added support for composite operations for software animations (<a href=\"https://trac.webkit.org/changeset/285397/webkit/\">r285397</a>)</li>\n<li>Fixed accelerated animations with a single keyframe not accounting for prior forward-filling animations (<a href=\"https://trac.webkit.org/changeset/285728/webkit/\">r285728</a>)</li>\n<li>Fixed discrete animation of <code>content</code> property not working (<a href=\"https://trac.webkit.org/changeset/285423/webkit/\">r285423</a>)</li>\n<li>Improved additivity support when animating the transform property (<a href=\"https://trac.webkit.org/changeset/285631/webkit/\">r285631</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Implemented <code>add_virtual_authenticator</code> and <code>remove_virtual_authenticator</code> for WebDriver (<a href=\"https://trac.webkit.org/changeset/285267/webkit/\">r285267</a>)</li>\n</ul>\n<h3>Private Click Measurement</h3>\n<ul>\n<li>Fixed occasionally dropped attribution reports for Private Click Measurement (<a href=\"https://trac.webkit.org/changeset/285170/webkit/\">r285170</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Added support for <code>manifest_version</code> 3 and <code>service_worker</code> background scripts, while also supporting the option of using non-persistent background pages</li>\n<li>Added support for script and style injection via the <code>browser.scripting</code> APIs</li>\n<li>Added support for dynamic and session rules via the <code>browser.declarativeNetRequest</code> APIs</li>\n<li>Fixed an issue with new tab pages not being remembered when switching from Favorites</li>\n<li>Fixed an issue with long extension descriptions causing the title to be cut-off in Preferences</li>\n<li>Enforces limits on the size and number of items in extension sync storage</li>\n</ul>\n<h3>Other Bugs</h3>\n<ul>\n<li>Fixed opening local HTML files when the Develop menu was enabled (<a href=\"https://trac.webkit.org/changeset/285130/webkit/\">r285130</a>)</li>\n<li>Stopped using a timer to dispatch the source element&#8217;s error event asynchronously (<a href=\"https://trac.webkit.org/changeset/285413/webkit/\">r285413</a>)</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 136 is now available for download for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 285101-285788.\nNote: Tab Groups do not sync in this release.\nCSS\n\nAdded support for contain: paint (r285583)\nAdded support for the revert-layer value (r285624)\nAdded flex-basis: content support (r285709)\nFixed ::slotted element style to invalidate correctly in nested case (r285211)\nFixed ::slotted to not match an active <slot> (r285209)\nFixed :host::part(foo) selector to select elements inside shadow roots (r285262)\nFixed a mask or isolation to set transform-style to flat (r285482)\nFixed border-radius inline style to serialize with valid syntax (r285235)\nFixed font-synthesis inline and computed style to be in canonical order (r285383, r285384)\nFixed rendering bug with height: min-content, position: absolute, and box-sizing: border-box (r285495)\nFixed the default computed value for content to be none for ::before and ::after (r285621)\nImplemented parsing and animation support for offset-path (r285343)\nImplemented Scroll To Text Fragment directive parsing (r285528)\nImplemented transform: perspective(none) (r285255)\nRemoved non-standard -webkit-border-fit CSS property (r285615)\nUpdated the content-size grid width before laying out a grid item with block constraints and aspect-ratio (r285497)\n\nGPU Process\n\nFixed enabling “media source inline painting” by default to work when using GPU Process for media (r285410)\n\nJavaScript\n\nImplemented IntlNumberFormat v3 (formatRangeToParts is not implemented yet) (r285418)\nImplemented Temporal.Instant (r285178)\n\nWeb API\n\nImplemented custom element definition’s disable shadow flag (r285740)\nFixed the cssText property for a computed style to return an empty string (r285604)\n\nMedia\n\nFixed showing languages and subtitles tracks button and menu for <audio> (r285216)\n\nWeb Animations\n\nAdded support for composite operations for software animations (r285397)\nFixed accelerated animations with a single keyframe not accounting for prior forward-filling animations (r285728)\nFixed discrete animation of content property not working (r285423)\nImproved additivity support when animating the transform property (r285631)\n\nWebAuthn\n\nImplemented add_virtual_authenticator and remove_virtual_authenticator for WebDriver (r285267)\n\nPrivate Click Measurement\n\nFixed occasionally dropped attribution reports for Private Click Measurement (r285170)\n\nWeb Extensions\n\nAdded support for manifest_version 3 and service_worker background scripts, while also supporting the option of using non-persistent background pages\nAdded support for script and style injection via the browser.scripting APIs\nAdded support for dynamic and session rules via the browser.declarativeNetRequest APIs\nFixed an issue with new tab pages not being remembered when switching from Favorites\nFixed an issue with long extension descriptions causing the title to be cut-off in Preferences\nEnforces limits on the size and number of items in extension sync storage\n\nOther Bugs\n\nFixed opening local HTML files when the Develop menu was enabled (r285130)\nStopped using a timer to dispatch the source element’s error event asynchronously (r285413)\n",
      "date_published": "2021-12-08T23:03:15.000Z",
      "date_modified": "2022-01-27T00:33:01.000Z",
      "_plugin": {
        "pageFilename": "aaba38788e639696367ac6a69dc5ff9ee018fbd0c1c0cfb0a2b7803744bc56e7.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12042",
      "url": "https://webkit.org/blog/12042/pcm-for-in-app-direct-response-advertising/",
      "title": "PCM for In-App Direct Response Advertising",
      "summary": "Private Click Measurement (PCM) can now be used for in-app direct response advertising using SFSafariViewController.",
      "content_html": "<p>Private Click Measurement (PCM) can now be used for in-app direct response advertising using SFSafariViewController. Try it out in our iOS 15.2 beta.</p>\n<h2>What is PCM?</h2>\n<p>PCM is a proposed web standard for measuring the effectiveness of click-through advertising in a privacy-preserving way. It allows for 8 bits of data on the click source site to be combined with 4 bits of data on the click destination site to measure which advertising is driving sales. The combined 8+4 bits of data is sent to both the click source and destination in an attribution report that doesn’t carry any user or device identifiers. The net result is a report that says “Someone who clicked ad X on website A later converted with value Y on website B.”</p>\n<p>PCM shipped in iOS/iPadOS 14.5 and in Safari 14.1 on macOS. Its privacy-preserving nature means it can be used without getting the user’s permission to track according to <a href=\"https://developer.apple.com/app-store/user-privacy-and-data-use/\">AppTrackingTransparency</a>.</p>\n<h2>What is SFSafariViewController?</h2>\n<p><a href=\"https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller\">SFSafariViewController</a> is a ready-built in-app web browser on iOS/iPadOS with full-fledged Safari features such as Reader, AutoFill, Fraudulent Website Detection, content blocking, and bookmarks. User activity and interaction with SFSafariViewController are not visible to your app which means users can safely browse the web in it and you do not need to secure data between your app and SFSafariViewController.</p>\n<h2>On Direct Response Advertising</h2>\n<p>Our <a href=\"https://webkit.org/blog/11529/introducing-private-click-measurement-pcm/\">introductory blog post on PCM</a> featured two important FAQ entries on app-to-web advertising – on the subject of taking the user to the device’s browser and on the subject of an in-app experience.</p>\n<h3>When to Take the User To the Device’s Browser</h3>\n<p>PCM app-to-web in iOS 14.5 had to take the user to the device’s browser. This was designed to support re-engagement. Stored clicks in PCM are valid for 7 days and customers who are ready to take action only after a few hours or days, will most likely go find the merchant website in their browser. They’ll either look up the tab where they left off, use a bookmark they might have saved, use their search provider to find the right webpage, or enter the website’s address directly in the URL bar.</p>\n<p>For the stored click data to be readily available when the user re-engages in this fashion, the initial click needs to take the user to their browser. This is still true going forward.</p>\n<h3>When to Handle the Tap In-App</h3>\n<p>Another form of click-through advertising is called direct response. In such cases, the user is not expected to think about converting for an extended period of time, but rather take action directly on the webpage they land on. It could be a limited offer or a product priced so that the user doesn’t feel like they have to think it over.</p>\n<p>Developers and advertisers have told us they want to be able to provide more of an in-app experience for direct response advertising, rather than take the user to the device’s browser. They want a seamless in-app experience for users who tap on an ad, check out the product page, decide to buy or not, and then want to go back to the hosting app.</p>\n<p>Our intro blog post covered this request in the FAQ section, and we said “We are interested in this but don’t have a solution yet.” Today we have a solution. PCM is now capable of supporting in-app advertising with new API for SFSafariViewController.</p>\n<h2>PCM App-to-Web with SFSafariViewController</h2>\n<p><a href=\"https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller\">SFSafariViewController</a> provides a great in-app browsing experience where the user can store Safari bookmarks that can sync across devices, has access to autofill of credentials and payment card info, and Apple Pay. It is simply a great place to take the user as part of direct response advertising.</p>\n<h3>Ephemeral Clicks to Prevent Click Fraud</h3>\n<p>PCM will only store click data and schedule an attribution report if the user triggers a conversion in the SFSafariViewController that they opened through the click. A tap which navigates to a website in SFSafariViewController <em>without a matching triggering event</em> will not be stored. As a result, an instance of SFSafariViewController can only hold one non-converted click at a time, whereas all converted clicks will be stored and result in reports.</p>\n<p>This ensures that a hosting app cannot speculatively store clicks in its SFSafariViewController for fraudulent reasons. It also ensures that this use of PCM really is geared toward direct response advertising.</p>\n<h3>Attributions are Per Hosting App</h3>\n<p>Taps in different apps navigating the user to the same advertised website do not affect each other. Every app gets its own attribution. Again, this feature is for direct response advertising so a customer who buys a product twice based on ad clicks in two different apps will generate two attribution reports.</p>\n<h3>Attribution Reports Don’t Require Your App to Run</h3>\n<p>One particular challenge for the kind of delayed attribution reporting PCM uses is what to do if the user doesn’t use the hosting app frequently or doesn’t use it around the time when the report is supposed to be sent out. We have made sure that pending attribution reports from PCM app-to-web with SFSafariViewController are sent independent of if the hosting app where the click happened is running or not.</p>\n<h3>The API</h3>\n<p>As shown in our <a href=\"https://webkit.org/blog/11529/introducing-private-click-measurement-pcm/\">introductory blog post on PCM</a>, apps can already use Private Click Measurement with Safari by putting a <code>UIEventAttribution</code> on a <code>UISceneOpenExternalURLOptions</code> and using it with UIScene&#8217;s <code>openURL:options:completionHandler:</code>.</p>\n<p>In iOS 15.2 beta, a new attribute of type <code>UIEventAttribution</code> is added to the existing class <code>SFSafariViewControllerConfiguration</code>:</p>\n<pre><code>@available(iOS 15.2, *)\n  @NSCopying var eventAttribution: UIEventAttribution?\n</code></pre>\n<p>You can optionally use it when opening a URL in SFSafariViewController, like this:</p>\n<pre><code>func didTapOnAdWithIdentifier(advertisementIdentifier: UInt8, url: URL) {\n    let attribution = UIEventAttribution(\n        sourceIdentifier: advertisementIdentifier, \n        destinationURL: url, \n        sourceDescription: \"Ad for toy XYZ.\",\n        purchaser: \"Toy Example Company\")\n    let configuration = SFSafariViewController.Configuration()\n    configuration.eventAttribution = attribution\n    present(SFSafariViewController(url: url, configuration: configuration), animated: false)\n}\n</code></pre>\n<p>When an <code>UIEventAttribution</code> is part of the configuration, SafariViewService checks that a tap on an <code>UIEventAttributionView</code> preceded the opening of SFSafariViewController to guarantee <em>click-through</em> attribution. Then the information from the <code>UIEventAttribution</code> object is checked before it’s given to WebKit for processing.</p>\n<p>Private Click Measurement works as previously from that point.</p>\n<h2>Debugging Your App</h2>\n<p>See “Testing and Debugging” in our <a href=\"https://webkit.org/blog/11529/introducing-private-click-measurement-pcm/\">introductory blog post on PCM</a> for how to turn on PCM Debug Mode.</p>\n<p>Make sure to restart your app after enabling PCM Debug Mode with SFSafariViewController.  If you are having trouble getting PCM Debug Mode to turn on or off, try restarting the device.</p>\n<h2>Please Provide Feedback</h2>\n<p>We really appreciate all the developer and ad tech feedback we’ve received so far on Private Click Measurement. Prioritizing PCM for in-app measurement was the result of such feedback. There are three ways for you to continue to tell us what you think:</p>\n<ul>\n<li>The <a href=\"https://github.com/privacycg/private-click-measurement/issues\">standards proposal repository</a> in the W3C Privacy Community Group for anything related to the specified web parts of PCM, i.e. feedback on the proposed standard as it would work in any web engine.</li>\n<li><a href=\"https://bugs.webkit.org/\">https://bugs.webkit.org</a> for anything specific to the WebKit implementation of PCM.</li>\n<li><a href=\"https://feedbackassistant.apple.com/\">Apple Feedback Assistant</a> for anything specific to the UIKit or SFSafariViewController APIs for PCM.</li>\n</ul>",
      "content_text": "Private Click Measurement (PCM) can now be used for in-app direct response advertising using SFSafariViewController. Try it out in our iOS 15.2 beta.\nWhat is PCM?\nPCM is a proposed web standard for measuring the effectiveness of click-through advertising in a privacy-preserving way. It allows for 8 bits of data on the click source site to be combined with 4 bits of data on the click destination site to measure which advertising is driving sales. The combined 8+4 bits of data is sent to both the click source and destination in an attribution report that doesn’t carry any user or device identifiers. The net result is a report that says “Someone who clicked ad X on website A later converted with value Y on website B.”\nPCM shipped in iOS/iPadOS 14.5 and in Safari 14.1 on macOS. Its privacy-preserving nature means it can be used without getting the user’s permission to track according to AppTrackingTransparency.\nWhat is SFSafariViewController?\nSFSafariViewController is a ready-built in-app web browser on iOS/iPadOS with full-fledged Safari features such as Reader, AutoFill, Fraudulent Website Detection, content blocking, and bookmarks. User activity and interaction with SFSafariViewController are not visible to your app which means users can safely browse the web in it and you do not need to secure data between your app and SFSafariViewController.\nOn Direct Response Advertising\nOur introductory blog post on PCM featured two important FAQ entries on app-to-web advertising – on the subject of taking the user to the device’s browser and on the subject of an in-app experience.\nWhen to Take the User To the Device’s Browser\nPCM app-to-web in iOS 14.5 had to take the user to the device’s browser. This was designed to support re-engagement. Stored clicks in PCM are valid for 7 days and customers who are ready to take action only after a few hours or days, will most likely go find the merchant website in their browser. They’ll either look up the tab where they left off, use a bookmark they might have saved, use their search provider to find the right webpage, or enter the website’s address directly in the URL bar.\nFor the stored click data to be readily available when the user re-engages in this fashion, the initial click needs to take the user to their browser. This is still true going forward.\nWhen to Handle the Tap In-App\nAnother form of click-through advertising is called direct response. In such cases, the user is not expected to think about converting for an extended period of time, but rather take action directly on the webpage they land on. It could be a limited offer or a product priced so that the user doesn’t feel like they have to think it over.\nDevelopers and advertisers have told us they want to be able to provide more of an in-app experience for direct response advertising, rather than take the user to the device’s browser. They want a seamless in-app experience for users who tap on an ad, check out the product page, decide to buy or not, and then want to go back to the hosting app.\nOur intro blog post covered this request in the FAQ section, and we said “We are interested in this but don’t have a solution yet.” Today we have a solution. PCM is now capable of supporting in-app advertising with new API for SFSafariViewController.\nPCM App-to-Web with SFSafariViewController\nSFSafariViewController provides a great in-app browsing experience where the user can store Safari bookmarks that can sync across devices, has access to autofill of credentials and payment card info, and Apple Pay. It is simply a great place to take the user as part of direct response advertising.\nEphemeral Clicks to Prevent Click Fraud\nPCM will only store click data and schedule an attribution report if the user triggers a conversion in the SFSafariViewController that they opened through the click. A tap which navigates to a website in SFSafariViewController without a matching triggering event will not be stored. As a result, an instance of SFSafariViewController can only hold one non-converted click at a time, whereas all converted clicks will be stored and result in reports.\nThis ensures that a hosting app cannot speculatively store clicks in its SFSafariViewController for fraudulent reasons. It also ensures that this use of PCM really is geared toward direct response advertising.\nAttributions are Per Hosting App\nTaps in different apps navigating the user to the same advertised website do not affect each other. Every app gets its own attribution. Again, this feature is for direct response advertising so a customer who buys a product twice based on ad clicks in two different apps will generate two attribution reports.\nAttribution Reports Don’t Require Your App to Run\nOne particular challenge for the kind of delayed attribution reporting PCM uses is what to do if the user doesn’t use the hosting app frequently or doesn’t use it around the time when the report is supposed to be sent out. We have made sure that pending attribution reports from PCM app-to-web with SFSafariViewController are sent independent of if the hosting app where the click happened is running or not.\nThe API\nAs shown in our introductory blog post on PCM, apps can already use Private Click Measurement with Safari by putting a UIEventAttribution on a UISceneOpenExternalURLOptions and using it with UIScene’s openURL:options:completionHandler:.\nIn iOS 15.2 beta, a new attribute of type UIEventAttribution is added to the existing class SFSafariViewControllerConfiguration:\n@available(iOS 15.2, *)\n  @NSCopying var eventAttribution: UIEventAttribution?\n\nYou can optionally use it when opening a URL in SFSafariViewController, like this:\nfunc didTapOnAdWithIdentifier(advertisementIdentifier: UInt8, url: URL) {\n    let attribution = UIEventAttribution(\n        sourceIdentifier: advertisementIdentifier, \n        destinationURL: url, \n        sourceDescription: \"Ad for toy XYZ.\",\n        purchaser: \"Toy Example Company\")\n    let configuration = SFSafariViewController.Configuration()\n    configuration.eventAttribution = attribution\n    present(SFSafariViewController(url: url, configuration: configuration), animated: false)\n}\n\nWhen an UIEventAttribution is part of the configuration, SafariViewService checks that a tap on an UIEventAttributionView preceded the opening of SFSafariViewController to guarantee click-through attribution. Then the information from the UIEventAttribution object is checked before it’s given to WebKit for processing.\nPrivate Click Measurement works as previously from that point.\nDebugging Your App\nSee “Testing and Debugging” in our introductory blog post on PCM for how to turn on PCM Debug Mode.\nMake sure to restart your app after enabling PCM Debug Mode with SFSafariViewController.  If you are having trouble getting PCM Debug Mode to turn on or off, try restarting the device.\nPlease Provide Feedback\nWe really appreciate all the developer and ad tech feedback we’ve received so far on Private Click Measurement. Prioritizing PCM for in-app measurement was the result of such feedback. There are three ways for you to continue to tell us what you think:\n\nThe standards proposal repository in the W3C Privacy Community Group for anything related to the specified web parts of PCM, i.e. feedback on the proposed standard as it would work in any web engine.\nhttps://bugs.webkit.org for anything specific to the WebKit implementation of PCM.\nApple Feedback Assistant for anything specific to the UIKit or SFSafariViewController APIs for PCM.\n",
      "date_published": "2021-11-16T17:06:04.000Z",
      "date_modified": "2021-11-16T17:06:04.000Z",
      "_plugin": {
        "pageFilename": "272036b331e33fa6661e44f754504aad0443f229fd5f335b814598df67f1ad5d.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12040",
      "url": "https://webkit.org/blog/12040/release-notes-for-safari-technology-preview-135/",
      "title": "Release Notes for Safari Technology Preview 135",
      "summary": "Safari Technology Preview Release 135 is now available for download for macOS Big Sur and macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 135 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=284370&amp;rev=285101&amp;limit=731\">284370-285101</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector and Web Driver</h3>\n<ul>\n<li>Fixed &#8220;testForLinkLabels&#8221; Accessibility audit to ignore anchors if <code>aria-hidden</code> (<a href=\"https://trac.webkit.org/changeset/284986/webkit/\">r284986</a>)</li>\n<li>Added support for the <code>acceptInsecureCerts</code> capability (<a href=\"https://trac.webkit.org/changeset/285164/webkit\">r285164</a>)</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Media queries affect Cascade Layer order (<a href=\"https://trac.webkit.org/changeset/284859/webkit/\">r284859</a>)</li>\n<li>Enabled <code>accent-color</code> by default (<a href=\"https://trac.webkit.org/changeset/284634/webkit/\">r284634</a>)</li>\n<li>Added support for small <code>svw</code>/<code>svh</code>/<code>svmin</code>/<code>svmax</code>, large <code>lvw</code>/<code>lvh</code>/<code>lvmin</code>/<code>lvmax</code>, and dynamic <code>dvw</code>/<code>dvh</code>/<code>dvmin</code>/<code>dvmax</code> viewport units (<a href=\"https://trac.webkit.org/changeset/284628/webkit/\">r284628</a>)</li>\n<li>Added <code>flex-basis: content</code> support (<a href=\"https://trac.webkit.org/changeset/284440/webkit/\">r284440</a>)</li>\n<li>Added support for <code>contain: style</code> for counters (<a href=\"https://trac.webkit.org/changeset/284642/webkit/\">r284642</a>, <a href=\"https://trac.webkit.org/changeset/284755/webkit/\">r284755</a>)</li>\n<li>Added support for <code>::before</code> and <code>::after</code> pseudo elements after <code>::slotted</code> (<a href=\"https://trac.webkit.org/changeset/284973/webkit/\">r284973</a>)</li>\n<li>Added support for more CSS properties for <code>::marker</code> (<a href=\"https://trac.webkit.org/changeset/284519/webkit/\">r284519</a>)</li>\n<li>Allowed <code>:is</code> and <code>:where</code> after all pseudo elements (<a href=\"https://trac.webkit.org/changeset/285054/webkit/\">r285054</a>)</li>\n<li>Made <code>:-webkit-any()</code> a synonym of <code>:is()</code> (<a href=\"https://trac.webkit.org/changeset/285032/webkit/\">r285032</a>)</li>\n<li>Fixed <code>::part(foo):hover</code> (<a href=\"https://trac.webkit.org/changeset/284865/webkit/\">r284865</a>)</li>\n<li>Serialized <code>:part()</code> argument as identifier (<a href=\"https://trac.webkit.org/changeset/284863/webkit/\">r284863</a>)</li>\n<li>Fixed <code>:host</code> invalidation when combined with pseudo classes in descendant position (<a href=\"https://trac.webkit.org/changeset/285100/webkit/\">r285100</a>)</li>\n<li>Prevented clamping flex base size with <code>min-height</code>, <code>max-height</code>, <code>min-width</code>, and <code>max-width</code> (<a href=\"https://trac.webkit.org/changeset/284397/webkit/\">r284397</a>)</li>\n<li>Fixed sizing of orthogonal elements with percentage margins (<a href=\"https://trac.webkit.org/changeset/284773/webkit/\">r284773</a>)</li>\n<li>Fixed <code>-webkit-background-clip: text</code> to paint correctly for inline box spanning multiple lines (<a href=\"https://trac.webkit.org/changeset/284380/webkit/\">r284380</a>)</li>\n<li>Fixed <code>box-shadow</code> and <code>text-shadow</code> to yield float values while interpolating (<a href=\"https://trac.webkit.org/changeset/284437/webkit/\">r284437</a>)</li>\n<li>Fixed CSS serialization affecting <code>grid-auto-flow</code> (<a href=\"https://trac.webkit.org/changeset/284876/webkit/\">r284876</a>)</li>\n<li>Fixed percentages on orthogonal replaced children (<a href=\"https://trac.webkit.org/changeset/284548/webkit/\">r284548</a>)</li>\n<li>Fixed the <code>border-radius</code> value from <code>.style</code> to be readable when it includes a <code>var()</code> (<a href=\"https://trac.webkit.org/changeset/285015/webkit/\">r285015</a>)</li>\n<li>Fixed opacity to flatten when combined with <code>transform-style: preserve-3d</code> (<a href=\"https://trac.webkit.org/changeset/285021/webkit/\">r285021</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Enabled lazy image loading by default (<a href=\"https://trac.webkit.org/changeset/284995/webkit/\">r284995</a>)</li>\n<li>Added support for <code>rel=\"noopener/noreferrer\"</code> on <code>&lt;form&gt;</code> elements (<a href=\"https://trac.webkit.org/changeset/284749/webkit/\">r284749</a>)</li>\n<li>Exposed MediaCapabilities to Workers (<a href=\"https://trac.webkit.org/changeset/284443/webkit/\">r284443</a>)</li>\n<li>Fixed <code>anchor.relList.supports(\"opener\")</code> to return <code>true</code> (<a href=\"https://trac.webkit.org/changeset/284745/webkit/\">r284745</a>)</li>\n<li>Fixed changing the <code>src</code> attribute of the <code>&lt;img&gt;</code> element inside an ImageDocument to trigger a load (<a href=\"https://trac.webkit.org/changeset/284901/webkit/\">r284901</a>)</li>\n<li>Fixed <code>document.open()</code> and friends to use the correct document as a source for reset document&#8217;s URL (<a href=\"https://trac.webkit.org/changeset/284758/webkit/\">r284758</a>)</li>\n<li>Fixed form navigations with <code>target=\"_blank\"</code> to not have an opener (<a href=\"https://trac.webkit.org/changeset/284821/webkit/\">r284821</a>)</li>\n<li>Fixed form submission to be cancelled if the form gets detached from inside the formdata event handler (<a href=\"https://trac.webkit.org/changeset/284660/webkit/\">r284660</a>)</li>\n<li>Fixed JavaScript URL result to be treated as UTF-8 bytes (<a href=\"https://trac.webkit.org/changeset/284934/webkit/\">r284934</a>)</li>\n<li>Fixed Origin of opaque <code>blob:</code> URLs to be null instead of an empty string (<a href=\"https://trac.webkit.org/changeset/284478/webkit/\">r284478</a>)</li>\n<li>Fixed selection <code>extend()</code> with no ranges to trigger an exception (<a href=\"https://trac.webkit.org/changeset/285084/webkit/\">r285084</a>)</li>\n<li>Fixed the intrinsic size of a picture image inside a template (<a href=\"https://trac.webkit.org/changeset/284667/webkit/\">r284667</a>)</li>\n<li>Updated appearance of <code>&lt;datalist&gt;</code> indicator (<a href=\"https://trac.webkit.org/changeset/284626/webkit/\">r284626</a>)</li>\n</ul>\n<h3>Scrolling</h3>\n<ul>\n<li>Fixed misplaced <code>position: fixed</code> content with async-scrollable iframes when switching tabs (<a href=\"https://trac.webkit.org/changeset/284738/webkit/\">r284738</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Ensured <code>CanvasRenderingContext2D.drawImage(video)</code> uses the right color space (<a href=\"https://trac.webkit.org/changeset/284439/webkit/\">r284439</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Changed to obtain consent to create a new credential when the platform authenticator is in <code>excludedCredentials.</code> This improves compliance with the WebAuthn spec (Step 3.1 of makeCredential). (<a href=\"https://trac.webkit.org/changeset/284413/webkit/\">r284413</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Added support for requestVideoFrameCallback API for MediaStreamTrack-based backends (<a href=\"https://trac.webkit.org/changeset/284528/webkit/\">r284528</a>)</li>\n<li>Fixed video appearing blank with only audio playing if video element isn&#8217;t appended to the DOM tree (<a href=\"https://trac.webkit.org/changeset/284741/webkit/\">r284741</a>)</li>\n<li>Updated WebM with invalid size to fail to load with error (<a href=\"https://trac.webkit.org/changeset/284434/webkit/\">r284434</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Decreased WebRTC latency by pulling data more often (<a href=\"https://trac.webkit.org/changeset/284860/webkit/\">r284860</a>)</li>\n<li>Changed to fallback to SW decoder in case of VP9-SVC (<a href=\"https://trac.webkit.org/changeset/284523/webkit/\">r284523</a>)</li>\n<li>Changed to always set the color space for incoming H.264/265 streams (<a href=\"https://trac.webkit.org/changeset/284433/webkit/\">r284433</a>)</li>\n<li>Ensured synchronized rendering of incoming audio tracks (<a href=\"https://trac.webkit.org/changeset/285027/webkit/\">r285027</a>)</li>\n<li>Fixed latent audio over peer connections when changing the output (<a href=\"https://trac.webkit.org/changeset/284674/webkit/\">r284674</a>)</li>\n</ul>\n<h3>WebGL</h3>\n<ul>\n<li>Fixed an issue where high-performance WebGL wasn&#8217;t getting the correct GPU (<a href=\"https://trac.webkit.org/changeset/284669/webkit/\">r284669</a>)</li>\n</ul>\n<h3>App Extensions</h3>\n<ul>\n<li>Fixed an issue where App Extension toolbar items would not remember their position or stay removed from the toolbar</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Fixed an issue where <code>browser.storage.sync</code> entries were saved into the <code>browser.storage.local</code> storage area. If unable to locate sync storage entries, check in the local storage area and do a one-time migration to the sync storage area</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 135 is now available for download for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 284370-285101.\nNote: Tab Groups do not sync in this release.\nWeb Inspector and Web Driver\n\nFixed “testForLinkLabels” Accessibility audit to ignore anchors if aria-hidden (r284986)\nAdded support for the acceptInsecureCerts capability (r285164)\n\nCSS\n\nMedia queries affect Cascade Layer order (r284859)\nEnabled accent-color by default (r284634)\nAdded support for small svw/svh/svmin/svmax, large lvw/lvh/lvmin/lvmax, and dynamic dvw/dvh/dvmin/dvmax viewport units (r284628)\nAdded flex-basis: content support (r284440)\nAdded support for contain: style for counters (r284642, r284755)\nAdded support for ::before and ::after pseudo elements after ::slotted (r284973)\nAdded support for more CSS properties for ::marker (r284519)\nAllowed :is and :where after all pseudo elements (r285054)\nMade :-webkit-any() a synonym of :is() (r285032)\nFixed ::part(foo):hover (r284865)\nSerialized :part() argument as identifier (r284863)\nFixed :host invalidation when combined with pseudo classes in descendant position (r285100)\nPrevented clamping flex base size with min-height, max-height, min-width, and max-width (r284397)\nFixed sizing of orthogonal elements with percentage margins (r284773)\nFixed -webkit-background-clip: text to paint correctly for inline box spanning multiple lines (r284380)\nFixed box-shadow and text-shadow to yield float values while interpolating (r284437)\nFixed CSS serialization affecting grid-auto-flow (r284876)\nFixed percentages on orthogonal replaced children (r284548)\nFixed the border-radius value from .style to be readable when it includes a var() (r285015)\nFixed opacity to flatten when combined with transform-style: preserve-3d (r285021)\n\nWeb API\n\nEnabled lazy image loading by default (r284995)\nAdded support for rel=\"noopener/noreferrer\" on <form> elements (r284749)\nExposed MediaCapabilities to Workers (r284443)\nFixed anchor.relList.supports(\"opener\") to return true (r284745)\nFixed changing the src attribute of the <img> element inside an ImageDocument to trigger a load (r284901)\nFixed document.open() and friends to use the correct document as a source for reset document’s URL (r284758)\nFixed form navigations with target=\"_blank\" to not have an opener (r284821)\nFixed form submission to be cancelled if the form gets detached from inside the formdata event handler (r284660)\nFixed JavaScript URL result to be treated as UTF-8 bytes (r284934)\nFixed Origin of opaque blob: URLs to be null instead of an empty string (r284478)\nFixed selection extend() with no ranges to trigger an exception (r285084)\nFixed the intrinsic size of a picture image inside a template (r284667)\nUpdated appearance of <datalist> indicator (r284626)\n\nScrolling\n\nFixed misplaced position: fixed content with async-scrollable iframes when switching tabs (r284738)\n\nRendering\n\nEnsured CanvasRenderingContext2D.drawImage(video) uses the right color space (r284439)\n\nWebAuthn\n\nChanged to obtain consent to create a new credential when the platform authenticator is in excludedCredentials. This improves compliance with the WebAuthn spec (Step 3.1 of makeCredential). (r284413)\n\nMedia\n\nAdded support for requestVideoFrameCallback API for MediaStreamTrack-based backends (r284528)\nFixed video appearing blank with only audio playing if video element isn’t appended to the DOM tree (r284741)\nUpdated WebM with invalid size to fail to load with error (r284434)\n\nWebRTC\n\nDecreased WebRTC latency by pulling data more often (r284860)\nChanged to fallback to SW decoder in case of VP9-SVC (r284523)\nChanged to always set the color space for incoming H.264/265 streams (r284433)\nEnsured synchronized rendering of incoming audio tracks (r285027)\nFixed latent audio over peer connections when changing the output (r284674)\n\nWebGL\n\nFixed an issue where high-performance WebGL wasn’t getting the correct GPU (r284669)\n\nApp Extensions\n\nFixed an issue where App Extension toolbar items would not remember their position or stay removed from the toolbar\n\nWeb Extensions\n\nFixed an issue where browser.storage.sync entries were saved into the browser.storage.local storage area. If unable to locate sync storage entries, check in the local storage area and do a one-time migration to the sync storage area\n",
      "date_published": "2021-11-15T21:30:51.000Z",
      "date_modified": "2022-01-27T00:33:05.000Z",
      "_plugin": {
        "pageFilename": "d5a24671fdef6022b50226ec306e2624fbce6107f4477bfe98fa9d13390ff9f5.html"
      }
    },
    {
      "id": "https://webkit.org/?p=12033",
      "url": "https://webkit.org/blog/12033/release-notes-for-safari-technology-preview-134/",
      "title": "Release Notes for Safari Technology Preview 134",
      "summary": "Safari Technology Preview Release 134 is now available for download for macOS Big Sur and macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 134 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=282317&amp;rev=284370&amp;limit=2053\">282317-284370</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li><strong>Graphics Tab</strong>\n<ul>\n<li>Added showing color space for canvases in the Graphics tab on the overview cards (<a href=\"https://trac.webkit.org/changeset/283572/webkit/\">r283572</a>)</li>\n</ul>\n</li>\n<li><strong>Styles Tab</strong>\n<ul>\n<li>Changed to format style declarations after editing (<a href=\"https://trac.webkit.org/changeset/283723/webkit/\">r283723</a>)</li>\n</ul>\n</li>\n<li><strong>Other</strong>\n<ul>\n<li>Added context menu support for the tab content view (<a href=\"https://trac.webkit.org/changeset/283859/webkit/\">r283859</a>, <a href=\"https://trac.webkit.org/changeset/283921/webkit/\">r283921</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Enabled CSS Cascade Layers by default (<a href=\"https://trac.webkit.org/changeset/283218/webkit/\">r283218</a>)</li>\n<li>Unprefixed <code>-webkit-appearance</code> and added support for the <code>auto</code> value (<a href=\"https://trac.webkit.org/changeset/283858/webkit/\">r283858</a>, <a href=\"https://trac.webkit.org/changeset/284098/webkit/\">r284098</a>)</li>\n<li>Added support for the <code>x</code> resolution unit outside of <code>image-set</code> (<a href=\"https://trac.webkit.org/changeset/282396/webkit/\">r282396</a>)</li>\n<li>Added support for <code>text-decoration-skip-ink</code> (<a href=\"https://trac.webkit.org/changeset/282397/webkit/\">r282397</a>)</li>\n<li>Changed to consider <code>overflow-wrap: anywhere</code> when calculating <code>min-content</code> intrinsic sizes (<a href=\"https://trac.webkit.org/changeset/283493/webkit/\">r283493</a>)</li>\n<li>Fixed computed style for <code>transform-origin</code> on SVG boxes (<a href=\"https://trac.webkit.org/changeset/282379/webkit/\">r282379</a>)</li>\n<li>Fixed overflow to be computed with the actual logical bottom in CSS Grid (<a href=\"https://trac.webkit.org/changeset/282463/webkit/\">r282463</a>)</li>\n<li>Fixed RTL for an out of flow child in CSS Grid (<a href=\"https://trac.webkit.org/changeset/282340/webkit/\">r282340</a>)</li>\n<li>Fixed SVG linear gradients getting drawn incorrectly sometimes (<a href=\"https://trac.webkit.org/changeset/282443/webkit/\">r282443</a>)</li>\n<li>Fixed <code>radial-gradient</code> to accept <code>calc()</code> values that combine length and percent (<a href=\"https://trac.webkit.org/changeset/283561/webkit/\">r283561</a>)</li>\n<li>Implemented <code>exp</code>, and <code>log</code> functions in <code>calc</code> functions (<a href=\"https://trac.webkit.org/changeset/282795/webkit/\">r282795</a>)</li>\n<li>Implemented allowing <code>NaN</code>, <code>infinity</code>, and <code>-infinity</code> in <code>calc</code> (<a href=\"https://trac.webkit.org/changeset/283434/webkit/\">r283434</a>)</li>\n<li>Implemented <code>atan</code>, <code>acos</code>, <code>asin</code>, <code>atan2</code> in <code>calc</code> functions (<a href=\"https://trac.webkit.org/changeset/283013/webkit/\">r283013</a>)</li>\n<li>Updated CSS Cascade Layers with recent spec change: unlayered styles are highest priority  (<a href=\"https://trac.webkit.org/changeset/284182/webkit/\">r284182</a>)</li>\n<li>Updated <code>transform-origin</code> to not accept four lengths (<a href=\"https://trac.webkit.org/changeset/282359/webkit/\">r282359</a>)</li>\n</ul>\n<h3>Fonts</h3>\n<ul>\n<li>Enabled font palette support:\n<ul>\n<li>Added parsing support for <code>font-palette-values</code> (<a href=\"https://trac.webkit.org/changeset/282806/webkit/\">r282806</a>)</li>\n<li>Added parsing support for <code>font-palette</code> (<a href=\"https://trac.webkit.org/changeset/282851/webkit/\">r282851</a>)</li>\n<li>Added pushing <code>font-palette-values</code> data into CSSFontSelector (<a href=\"https://trac.webkit.org/changeset/282838/webkit/\">r282838</a>)</li>\n<li>Added support for CSSFontPaletteValuesRule.name (<a href=\"https://trac.webkit.org/changeset/283140/webkit/\">r283140</a>)</li>\n<li>Added Web Inspector support for <code>font-palette</code> (<a href=\"https://trac.webkit.org/changeset/282987/webkit/\">r282987</a>)</li>\n<li>Allowed <code>base-palette</code> can accept <code>\"light\"</code> or <code>\"dark\"</code> (<a href=\"https://trac.webkit.org/changeset/283398/webkit/\">r283398</a>)</li>\n<li>Changed CSSFontPaletteValuesRule to not be map-like (<a href=\"https://trac.webkit.org/changeset/283219/webkit/\">r283219</a>)</li>\n<li>Changed to align with CSS Fonts specification changes (<a href=\"https://trac.webkit.org/changeset/283130/webkit/\">r283130</a>)</li>\n<li>Fixed shadowing of <code>@font-palette-values</code> rules (<a href=\"https://trac.webkit.org/changeset/283756/webkit/\">r283756</a>)</li>\n<li>Handle CSSOM style mutation of <code>font-palette</code> and <code>font-palette-values</code> (<a href=\"https://trac.webkit.org/changeset/283032/webkit/\">r283032</a>, <a href=\"https://trac.webkit.org/changeset/283031/webkit/\">r283031</a>)</li>\n<li>Made negative integers in <code>@font-palette-values</code> invalid (<a href=\"https://trac.webkit.org/changeset/283197/webkit/\">r283197</a>, <a href=\"https://trac.webkit.org/changeset/283540/webkit/\">r283540</a>)</li>\n<li>Made sure empty font families do the right thing for font palettes (<a href=\"https://trac.webkit.org/changeset/283075/webkit/\">r283075</a>)</li>\n<li>Prevented parsing unimplemented font palette features (<a href=\"https://trac.webkit.org/changeset/283752/webkit/\">r283752</a>)</li>\n<li>Removed the <code>\"none\"</code> value from <code>font-palette</code> (<a href=\"https://trac.webkit.org/changeset/283536/webkit/\">r283536</a>)</li>\n<li>Renamed <code>override-color</code> to <code>override-colors</code> (<a href=\"https://trac.webkit.org/changeset/283159/webkit/\">r283159</a>)</li>\n<li>Required <code>font-families</code> inside <code>@font-palette-values</code> to be case insensitive (<a href=\"https://trac.webkit.org/changeset/283794/webkit/\">r283794</a>)</li>\n<li>Required font palette names to start with two hyphens (<a href=\"https://trac.webkit.org/changeset/283221/webkit/\">r283221</a>)</li>\n<li>Stopped parsing context-sensitive colors in <code>override-color</code> (<a href=\"https://trac.webkit.org/changeset/283537/webkit/\">r283537</a>)</li>\n</ul>\n</li>\n<li>Updated the implementation of the CSS Font Loading API to be closer to the spec and other browsers:</li>\n<li>Fixed <code>CSSFontFaceSrcValue.cssText</code> to be quoted consistently with other browsers (<a href=\"https://trac.webkit.org/changeset/282442/webkit/\">r282442</a>)</li>\n</ul>\n<h3>Scrolling</h3>\n<ul>\n<li>Enabled support for ScrollOptions&#8217; ScrollBehavior and CSS <code>scroll-behavior</code> properties (<a href=\"https://trac.webkit.org/changeset/284029/webkit/\">r284029</a>)</li>\n<li>Moved smooth scroll animations to run on the scrolling thread (<a href=\"https://trac.webkit.org/changeset/283871/webkit/\">r283871</a>)</li>\n<li>Fixed <code>scrollIntoView</code> to not take into account sticky positioning offsets (<a href=\"https://trac.webkit.org/changeset/283546/webkit/\">r283546</a>)</li>\n<li>Fixed properly redrawing a sticky element inside another sticky element on scroll (<a href=\"https://trac.webkit.org/changeset/284084/webkit/\">r284084</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Enabled 2D canvas color space support on Apple platforms (<a href=\"https://trac.webkit.org/changeset/283541/webkit/\">r283541</a>)</li>\n<li>Updated converting an SVG image for canvas <code>drawImage</code> to choose an appropriate color space (<a href=\"https://trac.webkit.org/changeset/283531/webkit/\">r283531</a>)</li>\n</ul>\n<h3>Dialog Element</h3>\n<ul>\n<li>The <code>&lt;dialog&gt;</code> element is now enabled by default (<a href=\"https://trac.webkit.org/changeset/284155/webkit/\">r284155</a>), also including:\n<ul>\n<li>support for the CSS <code>::backdrop</code> pseudo element</li>\n<li>support for the top layer</li>\n<li><code>&lt;form method=\"dialog\"&gt;</code> support</li>\n</ul>\n</li>\n<li>The <code>inert</code> attribute is available for testing behind an experimental flag with the same name</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Allowed WASM to use up to 4GB (<a href=\"https://trac.webkit.org/changeset/284330/webkit/\">r284330</a>)</li>\n<li>Implemented the WebAssembly exception handling proposal (<a href=\"https://trac.webkit.org/changeset/283852/webkit/\">r283852</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Enabled unlinked Baseline JIT for performance (<a href=\"https://trac.webkit.org/changeset/283139/webkit/\">r283139</a>)</li>\n<li>Fixed <code>Intl.DateTimeFormat#resolvedOptions</code> not to return detailed information of formatting if <code>dateStyle</code> or <code>timeStyle</code> is set (<a href=\"https://trac.webkit.org/changeset/283460/webkit/\">r283460</a>)</li>\n<li>Fixed <code>Intl.supportedValuesOf</code> to populate <code>emoji</code> and <code>eor</code> for collation (<a href=\"https://trac.webkit.org/changeset/282897/webkit/\">r282897</a>)</li>\n<li>Fixed syntactic production for <code>#x in expr</code> (<a href=\"https://trac.webkit.org/changeset/282968/webkit/\">r282968</a>)</li>\n<li>Optimized <code>JSON.parse</code> object creation (<a href=\"https://trac.webkit.org/changeset/282468/webkit/\">r282468</a>)</li>\n<li>Optimized put-by-val with for-in (<a href=\"https://trac.webkit.org/changeset/283098/webkit/\">r283098</a>)</li>\n<li>Optimized <code>JSON.stringify</code> property enumeration (<a href=\"https://trac.webkit.org/changeset/282707/webkit/\">r282707</a>)</li>\n<li>Refined RegExp#compile based on regexp-legacy-features proposal (<a href=\"https://trac.webkit.org/changeset/283874/webkit/\">r283874</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Enabled BroadcastChannel (<a href=\"https://trac.webkit.org/changeset/282426/webkit/\">r282426</a>)\n<ul>\n<li>Implemented top-origin and frame-origin partitioning for BroadcastChannel (<a href=\"https://trac.webkit.org/changeset/282366/webkit/\">r282366</a>)</li>\n</ul>\n</li>\n<li>Enabled Storage API by default (<a href=\"https://trac.webkit.org/changeset/284273/webkit/\">r284273</a>)</li>\n<li>Enabled FileSystemAccess and AccessHandle by default (<a href=\"https://trac.webkit.org/changeset/284131/webkit/\">r284131</a>)\n<ul>\n<li>Implemented FileSystemSyncAccessHandle <code>read()</code> and <code>write()</code> (<a href=\"https://trac.webkit.org/changeset/284059/webkit/\">r284059</a>)</li>\n</ul>\n</li>\n<li>Implemented the <code>borderBoxSize</code> and <code>contentBoxSize</code> parts of ResizeObserver (<a href=\"https://trac.webkit.org/changeset/282441/webkit/\">r282441</a>)</li>\n<li>Implemented CSP <code>script-src-elem, style-src-elem, script-src-attr</code> and <code>style-src-attr</code> directives (<a href=\"https://trac.webkit.org/changeset/284254/webkit/\">r284254</a>)</li>\n<li>Cached Web Audio PannerNode&#8217;s <code>azimuth</code>, <code>elevation</code>, and <code>coneGain</code> for performance (<a href=\"https://trac.webkit.org/changeset/283740/webkit/\">r283740</a>)</li>\n<li>Changed <code>&lt;model&gt;</code> to be draggable, similar to <code>&lt;img&gt;</code> (<a href=\"https://trac.webkit.org/changeset/283563/webkit/\">r283563</a>)</li>\n<li>Updated the <code>autofocus</code> attribute behavior to match the latest specification (<a href=\"https://commits.webkit.org/r283935\">r283935</a>)</li>\n<li>Updated to preserve color space when creating ImageBuffers for ImageBitmaps (<a href=\"https://trac.webkit.org/changeset/282696/webkit/\">r282696</a>)</li>\n</ul>\n<h3>WebGL</h3>\n<ul>\n<li>Fixed <code>image-rendering: crisp-edges</code> for WebGL canvases (<a href=\"https://trac.webkit.org/changeset/282335/webkit/\">r282335</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed the progress bar moving when playback stops (<a href=\"https://trac.webkit.org/changeset/282374/webkit/\">r282374</a>)</li>\n<li>Fixed <code>createImageBitmap</code> using a HLS video as source always returning a black image (<a href=\"https://trac.webkit.org/changeset/283585/webkit/\">r283585</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Added support for WebRTC media capabilities (<a href=\"https://trac.webkit.org/changeset/284085/webkit/\">r284085</a>, <a href=\"https://trac.webkit.org/changeset/284236/webkit/\">r284236</a>)</li>\n<li>Changed MediaCapabilities to enqueue a task to resolve promises (<a href=\"https://trac.webkit.org/changeset/284236/webkit/\">r284236</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Exposed the URL attribute of <code>&lt;video&gt;</code> elements (<a href=\"https://trac.webkit.org/changeset/283799/webkit/\">r283799</a>)</li>\n<li>Made PDFs loaded via <code>&lt;embed&gt;</code> accessible (<a href=\"https://trac.webkit.org/changeset/282358/webkit/\">r282358</a>)</li>\n<li>Updated <code>role=\"math\"</code> elements to no longer be considered to have presentational children (<a href=\"https://trac.webkit.org/changeset/284246/webkit/\">r284246</a>)</li>\n</ul>\n<h3>Private Click Measurement</h3>\n<ul>\n<li>Allowed measurement of links in nested, cross-site iframes (<a href=\"https://trac.webkit.org/changeset/283593/webkit/\">r283593</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Allowed more directives to be included in the <code>content_security_policy</code> of an extension’s manifest, such as the <code>sandbox</code> directive</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 134 is now available for download for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 282317-284370.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nGraphics Tab\n\nAdded showing color space for canvases in the Graphics tab on the overview cards (r283572)\n\n\nStyles Tab\n\nChanged to format style declarations after editing (r283723)\n\n\nOther\n\nAdded context menu support for the tab content view (r283859, r283921)\n\n\n\nCSS\n\nEnabled CSS Cascade Layers by default (r283218)\nUnprefixed -webkit-appearance and added support for the auto value (r283858, r284098)\nAdded support for the x resolution unit outside of image-set (r282396)\nAdded support for text-decoration-skip-ink (r282397)\nChanged to consider overflow-wrap: anywhere when calculating min-content intrinsic sizes (r283493)\nFixed computed style for transform-origin on SVG boxes (r282379)\nFixed overflow to be computed with the actual logical bottom in CSS Grid (r282463)\nFixed RTL for an out of flow child in CSS Grid (r282340)\nFixed SVG linear gradients getting drawn incorrectly sometimes (r282443)\nFixed radial-gradient to accept calc() values that combine length and percent (r283561)\nImplemented exp, and log functions in calc functions (r282795)\nImplemented allowing NaN, infinity, and -infinity in calc (r283434)\nImplemented atan, acos, asin, atan2 in calc functions (r283013)\nUpdated CSS Cascade Layers with recent spec change: unlayered styles are highest priority  (r284182)\nUpdated transform-origin to not accept four lengths (r282359)\n\nFonts\n\nEnabled font palette support:\n\nAdded parsing support for font-palette-values (r282806)\nAdded parsing support for font-palette (r282851)\nAdded pushing font-palette-values data into CSSFontSelector (r282838)\nAdded support for CSSFontPaletteValuesRule.name (r283140)\nAdded Web Inspector support for font-palette (r282987)\nAllowed base-palette can accept \"light\" or \"dark\" (r283398)\nChanged CSSFontPaletteValuesRule to not be map-like (r283219)\nChanged to align with CSS Fonts specification changes (r283130)\nFixed shadowing of @font-palette-values rules (r283756)\nHandle CSSOM style mutation of font-palette and font-palette-values (r283032, r283031)\nMade negative integers in @font-palette-values invalid (r283197, r283540)\nMade sure empty font families do the right thing for font palettes (r283075)\nPrevented parsing unimplemented font palette features (r283752)\nRemoved the \"none\" value from font-palette (r283536)\nRenamed override-color to override-colors (r283159)\nRequired font-families inside @font-palette-values to be case insensitive (r283794)\nRequired font palette names to start with two hyphens (r283221)\nStopped parsing context-sensitive colors in override-color (r283537)\n\n\nUpdated the implementation of the CSS Font Loading API to be closer to the spec and other browsers:\nFixed CSSFontFaceSrcValue.cssText to be quoted consistently with other browsers (r282442)\n\nScrolling\n\nEnabled support for ScrollOptions’ ScrollBehavior and CSS scroll-behavior properties (r284029)\nMoved smooth scroll animations to run on the scrolling thread (r283871)\nFixed scrollIntoView to not take into account sticky positioning offsets (r283546)\nFixed properly redrawing a sticky element inside another sticky element on scroll (r284084)\n\nRendering\n\nEnabled 2D canvas color space support on Apple platforms (r283541)\nUpdated converting an SVG image for canvas drawImage to choose an appropriate color space (r283531)\n\nDialog Element\n\nThe <dialog> element is now enabled by default (r284155), also including:\n\nsupport for the CSS ::backdrop pseudo element\nsupport for the top layer\n<form method=\"dialog\"> support\n\n\nThe inert attribute is available for testing behind an experimental flag with the same name\n\nWebAssembly\n\nAllowed WASM to use up to 4GB (r284330)\nImplemented the WebAssembly exception handling proposal (r283852)\n\nJavaScript\n\nEnabled unlinked Baseline JIT for performance (r283139)\nFixed Intl.DateTimeFormat#resolvedOptions not to return detailed information of formatting if dateStyle or timeStyle is set (r283460)\nFixed Intl.supportedValuesOf to populate emoji and eor for collation (r282897)\nFixed syntactic production for #x in expr (r282968)\nOptimized JSON.parse object creation (r282468)\nOptimized put-by-val with for-in (r283098)\nOptimized JSON.stringify property enumeration (r282707)\nRefined RegExp#compile based on regexp-legacy-features proposal (r283874)\n\nWeb API\n\nEnabled BroadcastChannel (r282426)\n\nImplemented top-origin and frame-origin partitioning for BroadcastChannel (r282366)\n\n\nEnabled Storage API by default (r284273)\nEnabled FileSystemAccess and AccessHandle by default (r284131)\n\nImplemented FileSystemSyncAccessHandle read() and write() (r284059)\n\n\nImplemented the borderBoxSize and contentBoxSize parts of ResizeObserver (r282441)\nImplemented CSP script-src-elem, style-src-elem, script-src-attr and style-src-attr directives (r284254)\nCached Web Audio PannerNode’s azimuth, elevation, and coneGain for performance (r283740)\nChanged <model> to be draggable, similar to <img> (r283563)\nUpdated the autofocus attribute behavior to match the latest specification (r283935)\nUpdated to preserve color space when creating ImageBuffers for ImageBitmaps (r282696)\n\nWebGL\n\nFixed image-rendering: crisp-edges for WebGL canvases (r282335)\n\nMedia\n\nFixed the progress bar moving when playback stops (r282374)\nFixed createImageBitmap using a HLS video as source always returning a black image (r283585)\n\nWebRTC\n\nAdded support for WebRTC media capabilities (r284085, r284236)\nChanged MediaCapabilities to enqueue a task to resolve promises (r284236)\n\nAccessibility\n\nExposed the URL attribute of <video> elements (r283799)\nMade PDFs loaded via <embed> accessible (r282358)\nUpdated role=\"math\" elements to no longer be considered to have presentational children (r284246)\n\nPrivate Click Measurement\n\nAllowed measurement of links in nested, cross-site iframes (r283593)\n\nWeb Extensions\n\nAllowed more directives to be included in the content_security_policy of an extension’s manifest, such as the sandbox directive\n",
      "date_published": "2021-10-27T20:59:31.000Z",
      "date_modified": "2022-01-27T00:33:09.000Z",
      "_plugin": {
        "pageFilename": "780d64ae144cd735e770998ad31a58b73f24ad445566b4f630ca6c40f59f3a5a.html"
      }
    },
    {
      "id": "https://webkit.org/?p=11989",
      "url": "https://webkit.org/blog/11989/new-webkit-features-in-safari-15/",
      "title": "New WebKit Features in Safari 15",
      "summary": "With the release of Safari 15 for macOS Monterey, iPadOS 15, iOS 15, and watchOS, as well as macOS Big Sur and macOS Catalina, WebKit brings significant advancements in privacy and security, improved interoperability, and a host of new features for web developers.",
      "content_html": "<p>With the release of Safari 15 for macOS Monterey, iPadOS 15, iOS 15, and watchOS, as well as macOS Big Sur and macOS Catalina, WebKit brings significant advancements in privacy and security, improved interoperability, and a host of new features for web developers. Take a look.</p>\n<h3>Web Extensions</h3>\n<p>This release brings Safari Web Extensions to iOS and iPadOS. Web Extensions use HTML, CSS, and JavaScript to offer powerful browser customizations. Now developers can create them for every device that supports Safari, using APIs, functionality, and permissions that are <a href=\"https://github.com/w3c/webextensions/blob/main/charter.md\">increasingly standardized</a> across all browsers. Learn how to build Safari Web Extensions and discover how to convert an existing extension by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10104/\">Meet Safari Web Extensions on iOS</a> at WWDC21.</p>\n<p>This year’s release also adds support for the Declarative Net Request WebExtensions API to block content on the web. Learn all about the latest WebExtension APIs by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10027\">Explore Safari Web Extension Improvements</a>  at WWDC21.</p>\n<h3>HTML</h3>\n<p>WebKit now provides support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name/theme-color\"><code>theme-color</code></a> in HTML meta tags, and in Web Manifest. By specifying a theme-color, web developers can change the color of the status bar and overscroll area in Safari on iOS 15. Theme-color also changes the Tab Bar and overscroll area background colors in Compact Tab layout for Safari 15 on macOS Monterey and Big Sur and iPadOS 15.</p>\n<p>In the HTML meta tag, developers can specify separate colors for Dark Mode and light appearance with the <code>media</code> attribute.</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">meta</span> <span class=\"keyword attribute\">name</span>=<span class=\"attribute value string\">\"theme-color\"</span> \n      <span class=\"keyword attribute\">content</span>=<span class=\"attribute value string\">\"#ecd96f\"</span> \n      <span class=\"keyword attribute\">media</span>=<span class=\"attribute value string\">\"(prefers-color-scheme: light)\"</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">meta</span> <span class=\"keyword attribute\">name</span>=<span class=\"attribute value string\">\"theme-color\"</span> \n      <span class=\"keyword attribute\">content</span>=<span class=\"attribute value string\">\"#0b3e05\"</span> \n      <span class=\"keyword attribute\">media</span>=<span class=\"attribute value string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span>\n</code></pre>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2021/10029/\">“Design for Safari 15”</a> at WWDC21 to learn more about the Compact Tab bar and how to use theme-color.</p>\n<h3>CSS</h3>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/aspect-ratio-1024x576.jpeg\" alt=\"demo of aspect ratio property\" width=\"1024\" height=\"576\" class=\"alignnone size-large wp-image-11991 preserve-color\" srcset=\"https://webkit.org/wp-content/uploads/aspect-ratio-1024x576.jpeg 1024w, https://webkit.org/wp-content/uploads/aspect-ratio-300x169.jpeg 300w, https://webkit.org/wp-content/uploads/aspect-ratio-768x432.jpeg 768w, https://webkit.org/wp-content/uploads/aspect-ratio-1536x864.jpeg 1536w, https://webkit.org/wp-content/uploads/aspect-ratio.jpeg 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>WebKit now supports CSS <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio\"><code>aspect-ratio</code></a>. This property can be used to set a preferred aspect ratio on any element, including boxes like <code>divs</code>, <code>iframes</code> for embedded video, or graphic design elements on a page.</p>\n<p>WebKit provides support for the new <code>lab()</code>, <code>lch()</code>, <code>hwb()</code> color syntaxes from <a href=\"https://www.w3.org/TR/css-color-4/\">Color level 4</a>, providing web developers with ways to express a richer range of colors in Lab, Lch, and Hue-Whiteness-Blackness. WebKit also supports predefined color spaces using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color()\"><code>color()</code></a> function syntax: <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-srgb\"><code>srgb</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-display-p3\"><code>display-p3</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-a98-rgb\"><code>a98-rgb</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-prophoto-rgb\"><code>prophoto-rgb</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-rec2020\"><code>rec2020</code></a>, <a href=\"https://drafts.csswg.org/css-color-4/#valdef-color-xyz\"><code>xyz</code></a>.</p>\n<p>WebKit supports 12 new values for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type\"><code>list-style-type</code></a>: <code>disclosure-closed</code>, <code>disclosure-open</code>, <code>ethiopic-numeric</code>, <code>japanese-formal</code>, <code>japanese-informal</code>, <code>korean-hangul-formal</code>, <code>korean-hanja-formal</code>, <code>korean-hanja-informal</code>, <code>simp-chinese-formal</code>, <code>simp-chinese-informal</code>, <code>trad-chinese-formal</code>, and <code>trad-chinese-informal</code>.</p>\n<style>article figcaption::before { bottom: 1rem; } article ol { margin-top: 0; font-size: 85%; } figure { text-align: left}</style>\n<aside style=\"display: grid; grid-template-columns: 1fr 1fr 1fr;\">\n<figure style=\"text-align: left\">\n<ol style=\"list-style-type: disclosure-closed\">\n<li>Apollo</li>\n<li>Hubble</li>\n<li>Chandra</li>\n<li>Cassini-Huygens</li>\n<li>Spitzer</li>\n</ol><figcaption>Disclosure closed</figcaption></figure>\n<figure style=\"text-align: left\">\n<ol style=\"list-style-type: ethiopic-numeric\">\n<li>Apollo</li>\n<li>Hubble</li>\n<li>Chandra</li>\n<li>Cassini-Huygens</li>\n<li>Spitzer</li>\n</ol><figcaption>Ethiopic Numeric</figcaption></figure>\n<figure style=\"text-align: left\">\n<ol style=\"list-style-type: simp-chinese informal\">\n<li>Apollo</li>\n<li>Hubble</li>\n<li>Chandra</li>\n<li>Cassini-Huygens</li>\n<li>Spitzer</li>\n</ol><figcaption>Simplified Chinese informal</figcaption></figure>\n</aside>\n<p>There’s also improved implementation of existing values for <code>list-style-type</code>: <code>armenian</code>, <code>cjk-ideographic</code>, <code>hebrew</code>, <code>lower-armenian</code>, <code>lower-roman</code>, <code>upper-armenian</code>, and <code>upper-roman</code>. See a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type#result_2\">demo of all of these options</a> at MDN. We also updated WebKit’s implementation of <code>list-style-position:inside</code> to match the updated <a href=\"https://drafts.csswg.org/css-lists-3/#marker-pseudo\">CSS specification</a>, creating interoperability after a <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=36854\">22 year old debate</a>.</p>\n<p>Watch <a href=\"https://developer.apple.com/videos/play/wwdc2021/10029/\">“Design for Safari 15”</a> at WWDC21 to learn more about the latest updates to CSS.</p>\n<h3>Web Inspector</h3>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/grid-inspector-1024x576.jpeg\" alt=\"screenshot of Safari 15&#039;s CSS Grid Inspector\" width=\"1024\" height=\"576\" class=\"alignleft size-large wp-image-11997 preserve-color\" srcset=\"https://webkit.org/wp-content/uploads/grid-inspector-1024x576.jpeg 1024w, https://webkit.org/wp-content/uploads/grid-inspector-300x169.jpeg 300w, https://webkit.org/wp-content/uploads/grid-inspector-768x432.jpeg 768w, https://webkit.org/wp-content/uploads/grid-inspector-1536x864.jpeg 1536w, https://webkit.org/wp-content/uploads/grid-inspector.jpeg 1800w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>Web Inspector in Safari 15 includes a <a href=\"https://webkit.org/blog/11588/introducing-css-grid-inspector/\">CSS Grid Inspector</a> overlay for inspecting grid containers on your pages. Watch <a href=\"https://developer.apple.com/videos/play/wwdc2021/10031/\">“Discover Web Inspector Improvements”</a> at WWDC21 to learn more.</p>\n<h3>JavaScript and WebAssembly</h3>\n<p>This release of WebKit adds support for ES6 Modules in Workers and ServiceWorkers. ES6 Modules provides a powerful way for developers to organize large applications using purpose-specific libraries. Workers/Service Workers provides a way to offload work from the main thread, and are often used for complex applications.  Now, developers can use them together — moving work off the main thread, improving performance, while retaining the organizational benefits of modules.</p>\n<p>Additional new capabilities to the JavaScript engine, include:</p>\n<ul>\n<li>support for top-level <code>await</code></li>\n<li><code>Error.cause</code></li>\n<li>private class methods and accessors</li>\n<li><code>BigInt64Array</code> and <code>BigUint64Array</code></li>\n</ul>\n<p>Improvements to WebAssembly include streaming compilation, bulk memory operations, reference types, and non-trapping conversions from <code>float</code> to <code>int</code>.</p>\n<p>You can learn more about the latest JavaScript and WebAssembly updates to WebKit and Safari 15 by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10030\">“Develop Advanced Web Content”</a> at WWDC21.</p>\n<h3>Web APIs</h3>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/webGL2-1024x576.jpg\" alt=\"gorgeous weird 3D environments created to show off what&#039;s possible\" width=\"1024\" height=\"576\" class=\"alignleft size-large wp-image-12006 preserve-color\" srcset=\"https://webkit.org/wp-content/uploads/webGL2-1024x576.jpg 1024w, https://webkit.org/wp-content/uploads/webGL2-300x169.jpg 300w, https://webkit.org/wp-content/uploads/webGL2-768x432.jpg 768w, https://webkit.org/wp-content/uploads/webGL2-1536x864.jpg 1536w, https://webkit.org/wp-content/uploads/webGL2.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>WebKit now supports <a href=\"https://www.khronos.org/registry/webgl/specs/latest/2.0/\">WebGL2</a> (<a href=\"https://www.khronos.org/webgl/wiki/Demo_Repository\">demos</a>). In addition, the WebGL implementation now runs on top of <a href=\"https://developer.apple.com/documentation/metal\">Metal</a> for better performance.</p>\n<p>Web Share level 2 enhancements to Web Share enable sharing files from a web page to an app. See <a href=\"https://w3c.github.io/web-share/\">Web Share API</a> for more information.</p>\n<p>User gestures now propagate through <code>requestAnimationFrame</code> with a one-second time limit.</p>\n<p>And now, with Safari 15.1,  <code>performance.timeOrigin</code> is available in Web Workers.</p>\n<p>You can learn more about the latest Web APIs in WebKit by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10030\">“Develop Advanced Web Content”</a> at WWDC21.</p>\n<h3>Media</h3>\n<p>Safari 15 includes several media improvements for users and developers. For example, built-in media controls now have Playback Speed and Chapters menus. Plus, the language/subtitle tracks menu is now available on iOS and iPadOS.</p>\n<p>There’s also new support for the Opus audio codec in WebM containers. And on on all iPads that support iPadOS 15, VP9 and WebM in Media Source Extensions (MSE) are now hardware-accelerated.</p>\n<p>Safari 15 also adds support for the MediaSession API to enable SharePlay experiences. You can learn more about creating SharePlay experiences by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10189/\">“Coordinate media playback in Safari with Group Activities”</a> at WWDC21.</p>\n<h3>Security and Privacy</h3>\n<p>Continuing our dedication to privacy and security, Safari on iOS 15 and macOS Monterey supports automatic HTTPS upgrades and hides your IP address from known trackers. Automatic HTTPS upgrades are also supported in Safari 15 on older macOS versions.</p>\n<p>Earlier this year, Safari was the first browser to ship a proposed web standard for measuring advertising in a privacy-preserving way – <a href=\"https://privacycg.github.io/private-click-measurement/\">Private Click Measurement</a>, or PCM. Safari 15 provides three major updates to PCM:</p>\n<ul>\n<li>Attribution reports also sent to click destination.</li>\n<li>Click fraud prevention with unlinkable tokens.</li>\n<li>IP address protection for attribution reports.</li>\n</ul>\n<p>To learn more, read <em><a href=\"https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/\">PCM: Click Fraud Prevention and Attribution Sent to Advertiser</a></em> or watch <a href=\"https://developer.apple.com/videos/play/wwdc2021/10033/\">“Meet privacy-preserving ad attribution”</a> at WWDC21.</p>\n<h3>Authentication and Passwords</h3>\n<p>WebKit now includes support for on-device verification codes in your app or website for a more secure sign-in experience with iCloud Keychain Password Manager. To use verification codes with Safari and Autofill:</p>\n<ul>\n<li>Use <code>autocomplete=one-time-code</code> to make an <code>&lt;input&gt;</code> eligible for AutoFill.</li>\n<li>Use a standard <code>otpauth</code> URL and replace the scheme with <code>apple-otpauth</code> to link directly to the password manager for setup.</li>\n<li>Use a raster image to enable contextual menus on <code>otpauth</code> QR codes that offer to set up a verification code generator.</li>\n</ul>\n<p>Learn how to support the process in your apps and websites by watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10105/\">“Secure login with iCloud Keychain verification codes”</a> at WWDC21.</p>\n<figure><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/webAuthn-1024x576.png\" alt=\"a diagram of how private keys are routed with WebAuthn\" width=\"1024\" height=\"576\" class=\"alignleft size-large wp-image-12008 preserve-color\" srcset=\"https://webkit.org/wp-content/uploads/webAuthn-1024x576.png 1024w, https://webkit.org/wp-content/uploads/webAuthn-300x169.png 300w, https://webkit.org/wp-content/uploads/webAuthn-768x432.png 768w, https://webkit.org/wp-content/uploads/webAuthn-1536x864.png 1536w, https://webkit.org/wp-content/uploads/webAuthn-2048x1152.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>Despite their prevalence, passwords inherently come with challenges that make them poorly suited to securing someone’s online accounts. Passkeys are WebAuth credentials intended to replace passwords for websites and apps with device sync and backup. The technology is now available in WebKit as a preview. To enable in Safari, choose Develop > Enable Syncing Platform Authenticator. Learn more watching <a href=\"https://developer.apple.com/videos/play/wwdc2021/10106/\">“Move beyond passwords”</a> at WWDC21.</p>\n<h3>Payments</h3>\n<p>Apple Pay enhancements allow developers using the <a href=\"https://www.w3.org/TR/payment-request/\">Payment Request API</a> to indicate an estimated arrival date for shipping methods, support a coupon code, and mark the shipping method as in-store pickup.</p>\n<h3>Availability</h3>\n<p>These improvements are available to users running Safari on iPadOS 15, iOS 15, or Safari 15 on macOS Monterey, macOS Big Sur, or macOS Catalina. These features were also available to web developers in Safari Technology Preview releases. Changes in this release of Safari were included in the following Safari Technology Preview releases: <a href=\"https://webkit.org/blog/11585/release-notes-for-safari-technology-preview-123/\">123</a>, <a href=\"https://webkit.org/blog/11672/release-notes-for-safari-technology-preview-124/\">124</a>, <a href=\"https://webkit.org/blog/11680/release-notes-for-safari-technology-preview-125/\">125</a>, <a href=\"https://webkit.org/blog/11727/release-notes-for-safari-technology-preview-126-with-safari-15-features/\">126</a>, <a href=\"https://webkit.org/blog/11736/release-notes-for-safari-technology-preview-127/\">127</a>, <a href=\"https://webkit.org/blog/11925/release-notes-for-safari-technology-preview-128/\">128</a>, <a href=\"https://webkit.org/blog/11951/release-notes-for-safari-technology-preview-129/\">129</a>.</p>\n<p><a href=\"https://developer.apple.com/safari/download/\">Download the latest Safari Technology Preview release</a> to stay at the forefront of future web platform and Web Inspector features. You can also use the <a href=\"https://webkit.org/status\">WebKit Feature Status</a> page to watch for changes to web platform features you’re interested in.</p>\n<h3>Feedback</h3>\n<p>If you run into any issues, we welcome your <a href=\"https://bugreport.apple.com/\">bug reports</a> for Safari or <a href=\"https://bugs.webkit.org/\">WebKit bugs</a> for web content issues. Send us a tweet <a href=\"https://twitter.com/webkit\">@webkit</a> to share your thoughts on this release.</p>",
      "content_text": "With the release of Safari 15 for macOS Monterey, iPadOS 15, iOS 15, and watchOS, as well as macOS Big Sur and macOS Catalina, WebKit brings significant advancements in privacy and security, improved interoperability, and a host of new features for web developers. Take a look.\nWeb Extensions\nThis release brings Safari Web Extensions to iOS and iPadOS. Web Extensions use HTML, CSS, and JavaScript to offer powerful browser customizations. Now developers can create them for every device that supports Safari, using APIs, functionality, and permissions that are increasingly standardized across all browsers. Learn how to build Safari Web Extensions and discover how to convert an existing extension by watching Meet Safari Web Extensions on iOS at WWDC21.\nThis year’s release also adds support for the Declarative Net Request WebExtensions API to block content on the web. Learn all about the latest WebExtension APIs by watching Explore Safari Web Extension Improvements  at WWDC21.\nHTML\nWebKit now provides support for theme-color in HTML meta tags, and in Web Manifest. By specifying a theme-color, web developers can change the color of the status bar and overscroll area in Safari on iOS 15. Theme-color also changes the Tab Bar and overscroll area background colors in Compact Tab layout for Safari 15 on macOS Monterey and Big Sur and iPadOS 15.\nIn the HTML meta tag, developers can specify separate colors for Dark Mode and light appearance with the media attribute.\n<meta name=\"theme-color\" \n      content=\"#ecd96f\" \n      media=\"(prefers-color-scheme: light)\">\n<meta name=\"theme-color\" \n      content=\"#0b3e05\" \n      media=\"(prefers-color-scheme: dark)\">\n\nWatch “Design for Safari 15” at WWDC21 to learn more about the Compact Tab bar and how to use theme-color.\nCSS\n\nWebKit now supports CSS aspect-ratio. This property can be used to set a preferred aspect ratio on any element, including boxes like divs, iframes for embedded video, or graphic design elements on a page.\nWebKit provides support for the new lab(), lch(), hwb() color syntaxes from Color level 4, providing web developers with ways to express a richer range of colors in Lab, Lch, and Hue-Whiteness-Blackness. WebKit also supports predefined color spaces using the color() function syntax: srgb, display-p3, a98-rgb, prophoto-rgb, rec2020, xyz.\nWebKit supports 12 new values for list-style-type: disclosure-closed, disclosure-open, ethiopic-numeric, japanese-formal, japanese-informal, korean-hangul-formal, korean-hanja-formal, korean-hanja-informal, simp-chinese-formal, simp-chinese-informal, trad-chinese-formal, and trad-chinese-informal.\n\n\n\n\nApollo\nHubble\nChandra\nCassini-Huygens\nSpitzer\nDisclosure closed\n\n\nApollo\nHubble\nChandra\nCassini-Huygens\nSpitzer\nEthiopic Numeric\n\n\nApollo\nHubble\nChandra\nCassini-Huygens\nSpitzer\nSimplified Chinese informal\n\nThere’s also improved implementation of existing values for list-style-type: armenian, cjk-ideographic, hebrew, lower-armenian, lower-roman, upper-armenian, and upper-roman. See a demo of all of these options at MDN. We also updated WebKit’s implementation of list-style-position:inside to match the updated CSS specification, creating interoperability after a 22 year old debate.\nWatch “Design for Safari 15” at WWDC21 to learn more about the latest updates to CSS.\nWeb Inspector\n\nWeb Inspector in Safari 15 includes a CSS Grid Inspector overlay for inspecting grid containers on your pages. Watch “Discover Web Inspector Improvements” at WWDC21 to learn more.\nJavaScript and WebAssembly\nThis release of WebKit adds support for ES6 Modules in Workers and ServiceWorkers. ES6 Modules provides a powerful way for developers to organize large applications using purpose-specific libraries. Workers/Service Workers provides a way to offload work from the main thread, and are often used for complex applications.  Now, developers can use them together — moving work off the main thread, improving performance, while retaining the organizational benefits of modules.\nAdditional new capabilities to the JavaScript engine, include:\n\nsupport for top-level await\nError.cause\nprivate class methods and accessors\nBigInt64Array and BigUint64Array\n\nImprovements to WebAssembly include streaming compilation, bulk memory operations, reference types, and non-trapping conversions from float to int.\nYou can learn more about the latest JavaScript and WebAssembly updates to WebKit and Safari 15 by watching “Develop Advanced Web Content” at WWDC21.\nWeb APIs\n\nWebKit now supports WebGL2 (demos). In addition, the WebGL implementation now runs on top of Metal for better performance.\nWeb Share level 2 enhancements to Web Share enable sharing files from a web page to an app. See Web Share API for more information.\nUser gestures now propagate through requestAnimationFrame with a one-second time limit.\nAnd now, with Safari 15.1,  performance.timeOrigin is available in Web Workers.\nYou can learn more about the latest Web APIs in WebKit by watching “Develop Advanced Web Content” at WWDC21.\nMedia\nSafari 15 includes several media improvements for users and developers. For example, built-in media controls now have Playback Speed and Chapters menus. Plus, the language/subtitle tracks menu is now available on iOS and iPadOS.\nThere’s also new support for the Opus audio codec in WebM containers. And on on all iPads that support iPadOS 15, VP9 and WebM in Media Source Extensions (MSE) are now hardware-accelerated.\nSafari 15 also adds support for the MediaSession API to enable SharePlay experiences. You can learn more about creating SharePlay experiences by watching “Coordinate media playback in Safari with Group Activities” at WWDC21.\nSecurity and Privacy\nContinuing our dedication to privacy and security, Safari on iOS 15 and macOS Monterey supports automatic HTTPS upgrades and hides your IP address from known trackers. Automatic HTTPS upgrades are also supported in Safari 15 on older macOS versions.\nEarlier this year, Safari was the first browser to ship a proposed web standard for measuring advertising in a privacy-preserving way – Private Click Measurement, or PCM. Safari 15 provides three major updates to PCM:\n\nAttribution reports also sent to click destination.\nClick fraud prevention with unlinkable tokens.\nIP address protection for attribution reports.\n\nTo learn more, read PCM: Click Fraud Prevention and Attribution Sent to Advertiser or watch “Meet privacy-preserving ad attribution” at WWDC21.\nAuthentication and Passwords\nWebKit now includes support for on-device verification codes in your app or website for a more secure sign-in experience with iCloud Keychain Password Manager. To use verification codes with Safari and Autofill:\n\nUse autocomplete=one-time-code to make an <input> eligible for AutoFill.\nUse a standard otpauth URL and replace the scheme with apple-otpauth to link directly to the password manager for setup.\nUse a raster image to enable contextual menus on otpauth QR codes that offer to set up a verification code generator.\n\nLearn how to support the process in your apps and websites by watching “Secure login with iCloud Keychain verification codes” at WWDC21.\n\nDespite their prevalence, passwords inherently come with challenges that make them poorly suited to securing someone’s online accounts. Passkeys are WebAuth credentials intended to replace passwords for websites and apps with device sync and backup. The technology is now available in WebKit as a preview. To enable in Safari, choose Develop > Enable Syncing Platform Authenticator. Learn more watching “Move beyond passwords” at WWDC21.\nPayments\nApple Pay enhancements allow developers using the Payment Request API to indicate an estimated arrival date for shipping methods, support a coupon code, and mark the shipping method as in-store pickup.\nAvailability\nThese improvements are available to users running Safari on iPadOS 15, iOS 15, or Safari 15 on macOS Monterey, macOS Big Sur, or macOS Catalina. These features were also available to web developers in Safari Technology Preview releases. Changes in this release of Safari were included in the following Safari Technology Preview releases: 123, 124, 125, 126, 127, 128, 129.\nDownload the latest Safari Technology Preview release to stay at the forefront of future web platform and Web Inspector features. You can also use the WebKit Feature Status page to watch for changes to web platform features you’re interested in.\nFeedback\nIf you run into any issues, we welcome your bug reports for Safari or WebKit bugs for web content issues. Send us a tweet @webkit to share your thoughts on this release.",
      "date_published": "2021-10-26T21:27:05.000Z",
      "date_modified": "2021-12-15T21:22:20.000Z",
      "_plugin": {
        "pageFilename": "cd78aed5db14af1ad94bd4d1dfbdc497ab19e55e255154cc9761309030d01db9.html"
      }
    },
    {
      "id": "https://webkit.org/?p=11975",
      "url": "https://webkit.org/blog/11975/release-notes-for-safari-technology-preview-133/",
      "title": "Release Notes for Safari Technology Preview 133",
      "summary": "Safari Technology Preview Release 133 is now available for download for macOS Big Sur and betas of macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 133 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=281797&amp;rev=282317&amp;limit=999\">281797-282317</a>. <strong>Note</strong>: The changes for these release notes were updated after publishing to account for an incorrect end revision number.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>CSS</h3>\n<ul>\n<li>Added support for <code>self-start</code>,  <code>self-end</code>, <code>start</code>, <code>end</code>, <code>left</code>, and <code>right</code> values in positional alignment (<a href=\"https://trac.webkit.org/changeset/282267/webkit/\">r282267</a>, <a href=\"https://trac.webkit.org/changeset/282078/webkit/\">r282078</a>, <a href=\"https://trac.webkit.org/changeset/281840/webkit/\">r281840</a>)</li>\n<li>Added support for percentages in the <code>scale()</code> transform functions, and the <code>scale</code> property (<a href=\"https://trac.webkit.org/changeset/282144/webkit/\">r282144</a>)</li>\n<li>Added support for <code>sin()</code>, <code>cos()</code>, <code>tan()</code>, <code>e</code>, and <code>pi</code> in <code>calc()</code> (<a href=\"https://trac.webkit.org/changeset/282162/webkit/\">r282162</a>)</li>\n<li>Fixed incorrect stacking order with an absolutely positioned and negative <code>z-index</code> <code>&lt;div&gt;</code> with a canvas child (<a href=\"https://trac.webkit.org/changeset/281913/webkit/\">r281913</a>)</li>\n<li>Fixed absolute positioning with orthogonal writing modes (<a href=\"https://trac.webkit.org/changeset/281995/webkit/\">r281995</a>)</li>\n<li>Fixed right-relative and bottom-relative values in <code>background-position-x</code> and <code>background-position-y</code> (<a href=\"https://trac.webkit.org/changeset/282234/webkit/\">r282234</a>)</li>\n<li>Fixed incorrect vertical position in table layout when the inline level box has <code>0px</code> height (<a href=\"https://trac.webkit.org/changeset/282256/webkit/\">r282256</a>)</li>\n<li>Fixed changing the border size on rows with <code>border-collapse</code> not redrawing (<a href=\"https://trac.webkit.org/changeset/282266/webkit/\">r282266</a>)</li>\n<li>Fixed <code>position: sticky</code> used within table cells (<a href=\"https://trac.webkit.org/changeset/282201/webkit/\">r282201</a>)</li>\n<li>Fixed incorrectly calculated <code>position: sticky</code> constraints when the scrolling container has padding and borders (<a href=\"https://trac.webkit.org/changeset/282138/webkit/\">r282138</a>)</li>\n<li>Fixed an interoperability issue in margin collapsing with <code>overflow: hidden</code> elements (<a href=\"https://trac.webkit.org/changeset/282085/webkit/\">r282085</a>)</li>\n</ul>\n<h3>CSS Cascade Layers</h3>\n<ul>\n<li>Added initial support for CSS Cascade Layers in Experimental Features:\n<ul>\n<li>Added support for computing the order correctly for late added sublayers (<a href=\"https://trac.webkit.org/changeset/281798/webkit/\">r281798</a>)</li>\n<li>Supported layer argument in <code>@import</code> rules (<a href=\"https://trac.webkit.org/changeset/281928/webkit/\">r281928</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS Font Loading API</h3>\n<ul>\n<li>Updated the implementation of the CSS Font Loading API to be closer to the spec and other browsers:\n<ul>\n<li>Fixed <code>CSSFontFaceSet.clear()</code> to not clear CSS-connected members (<a href=\"https://trac.webkit.org/changeset/281842/webkit/\">r281842</a>)</li>\n<li>Updated FontFaceSet methods that need to react to style changes (<a href=\"https://trac.webkit.org/changeset/282016/webkit/\">r282016</a>, <a href=\"https://trac.webkit.org/changeset/282015/webkit/\">r282015</a>, <a href=\"https://trac.webkit.org/changeset/282015/webkit/\">r282015</a>, <a href=\"https://trac.webkit.org/changeset/282261/webkit/\">r282261</a>, <a href=\"https://trac.webkit.org/changeset/282204/webkit/\">r282204</a>)</li>\n<li>Updated <code>FontFaceSet.add()</code> to throw when called on a CSS-connected font (<a href=\"https://trac.webkit.org/changeset/281951/webkit/\">r281951</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Fixed blank braille display in <code>contenteditable</code> elements when the field is followed by another element (<a href=\"https://trac.webkit.org/changeset/281920/webkit/\">r281920</a>)</li>\n<li>Made PDFs loaded via <code>&lt;embed&gt;</code> accessible (<a href=\"https://trac.webkit.org/changeset/282358/webkit/\">r282358</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Enabled <code>Object.hasOwn</code> (<a href=\"https://trac.webkit.org/changeset/281835/webkit/\">r281835</a>)</li>\n<li>Implemented <code>Temporal.PlainTime</code> behind the flag <code>--useTemporal=1</code> (<a href=\"https://trac.webkit.org/changeset/282125/webkit/\">r282125</a>)</li>\n<li>Implemented <code>Temporal.TimeZone</code> behind the flag <code>--useTemporal=1</code> (<a href=\"https://trac.webkit.org/changeset/282018/webkit/\">r282018</a>)</li>\n<li>Implemented <code>Temporal.Duration</code> behind the flag <code>--useTemporal=1</code> (<a href=\"https://trac.webkit.org/changeset/281838/webkit/\">r281838</a>)</li>\n<li>Implemented <code>self.structuredClone()</code> (<a href=\"https://trac.webkit.org/changeset/281808/webkit/\">r281808</a>)</li>\n<li>Implemented <code>Object.hasOwn()</code> (<a href=\"https://trac.webkit.org/changeset/281799/webkit/\">r281799</a>)</li>\n<li>Updated <code>Intl.Locale</code> <code>weekendInfo</code> to list all weekend days instead of range to follow to the latest spec change (<a href=\"https://trac.webkit.org/changeset/282257/webkit/\">r282257</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added basic support for Storage API (<a href=\"https://trac.webkit.org/changeset/282130/webkit/\">r282130</a>)</li>\n<li>Added support for <code>ServiceWorkerGlobalScope.serviceWorker</code> (<a href=\"https://trac.webkit.org/changeset/281854/webkit/\">r281854</a>)</li>\n<li>Added handling for non-fully active documents in <code>navigator.share() / navigator.canShare()</code> (<a href=\"https://trac.webkit.org/changeset/282282/webkit/\">r282282</a>)</li>\n<li>Enabled Cross-Origin-Opener-Policy / Cross-Origin-EmbedderPolicy headers support (<a href=\"https://trac.webkit.org/changeset/282105/webkit/\">r282105</a>, <a href=\"https://trac.webkit.org/changeset/282246/webkit/\">r282246</a>)</li>\n<li>Enabled SharedArrayBuffer support when COOP/COEP headers are used (<a href=\"https://trac.webkit.org/changeset/281832/webkit/\">r281832</a>)</li>\n<li>Fixed scrollbars on <code>pointer-events: none</code> element still intercepting events (<a href=\"https://trac.webkit.org/changeset/281991/webkit/\">r281991</a>)</li>\n<li>Implemented top-origin and frame-origin partitioning for BroadcastChannel (<a href=\"https://trac.webkit.org/changeset/282105/webkit/\">r282105</a>)</li>\n<li>Implemented navigation reporting for Cross-Origin-Opener-Policy (<a href=\"https://trac.webkit.org/changeset/282305/webkit/\">r282305</a>)</li>\n<li>Implemented <code>getClientRects()</code> for SVG elements (<a href=\"https://trac.webkit.org/changeset/282316/webkit/\">r282316</a>)</li>\n<li>Updated to always fetch the first manifest if provided (<a href=\"https://trac.webkit.org/changeset/282026/webkit/\">r282026</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Added support for RTCError and RTCErrorEvent (<a href=\"https://trac.webkit.org/changeset/282199/webkit/\">r282199</a>)</li>\n<li>Added support for RTCDataChannel closing event (<a href=\"https://trac.webkit.org/changeset/282198/webkit/\">r282198</a>)</li>\n<li>Added support for RTCSctpTransport (<a href=\"https://trac.webkit.org/changeset/282197/webkit/\">r282197</a>)</li>\n<li>Updated timing of RTCPeerConnection descriptions update to align with the WebRTC spec (<a href=\"https://trac.webkit.org/changeset/282217/webkit/\">r282217</a>)</li>\n<li>Updated signaling state check when applying a local or remote description to align with the WebRTC spec (<a href=\"https://trac.webkit.org/changeset/281985/webkit/\">r281985</a>)</li>\n<li>Updated <code>getDisplayMedia</code> to capture at the constrained size if possible (<a href=\"https://trac.webkit.org/changeset/281880/webkit/\">r281880</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed an incorrect number of frames returned if the decoding frame rate doesn&#8217;t match the original in WebM (<a href=\"https://trac.webkit.org/changeset/282196/webkit/\">r282196</a>)</li>\n<li>Removed Web Audio <code>canPlayType()</code> workaround that made it reports false negatives (<a href=\"https://trac.webkit.org/changeset/282137/webkit/\">r282137</a>)</li>\n</ul>\n<h3>Web and App Extensions</h3>\n<ul>\n<li>Added the extension’s icon to extension URL tabs for both app and web extensions</li>\n<li>Added the extension name as the title of tabs when an app extension page and does not specify a title</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 133 is now available for download for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 281797-282317. Note: The changes for these release notes were updated after publishing to account for an incorrect end revision number.\nNote: Tab Groups do not sync in this release.\nCSS\n\nAdded support for self-start,  self-end, start, end, left, and right values in positional alignment (r282267, r282078, r281840)\nAdded support for percentages in the scale() transform functions, and the scale property (r282144)\nAdded support for sin(), cos(), tan(), e, and pi in calc() (r282162)\nFixed incorrect stacking order with an absolutely positioned and negative z-index <div> with a canvas child (r281913)\nFixed absolute positioning with orthogonal writing modes (r281995)\nFixed right-relative and bottom-relative values in background-position-x and background-position-y (r282234)\nFixed incorrect vertical position in table layout when the inline level box has 0px height (r282256)\nFixed changing the border size on rows with border-collapse not redrawing (r282266)\nFixed position: sticky used within table cells (r282201)\nFixed incorrectly calculated position: sticky constraints when the scrolling container has padding and borders (r282138)\nFixed an interoperability issue in margin collapsing with overflow: hidden elements (r282085)\n\nCSS Cascade Layers\n\nAdded initial support for CSS Cascade Layers in Experimental Features:\n\nAdded support for computing the order correctly for late added sublayers (r281798)\nSupported layer argument in @import rules (r281928)\n\n\n\nCSS Font Loading API\n\nUpdated the implementation of the CSS Font Loading API to be closer to the spec and other browsers:\n\nFixed CSSFontFaceSet.clear() to not clear CSS-connected members (r281842)\nUpdated FontFaceSet methods that need to react to style changes (r282016, r282015, r282015, r282261, r282204)\nUpdated FontFaceSet.add() to throw when called on a CSS-connected font (r281951)\n\n\n\nAccessibility\n\nFixed blank braille display in contenteditable elements when the field is followed by another element (r281920)\nMade PDFs loaded via <embed> accessible (r282358)\n\nJavaScript\n\nEnabled Object.hasOwn (r281835)\nImplemented Temporal.PlainTime behind the flag --useTemporal=1 (r282125)\nImplemented Temporal.TimeZone behind the flag --useTemporal=1 (r282018)\nImplemented Temporal.Duration behind the flag --useTemporal=1 (r281838)\nImplemented self.structuredClone() (r281808)\nImplemented Object.hasOwn() (r281799)\nUpdated Intl.Locale weekendInfo to list all weekend days instead of range to follow to the latest spec change (r282257)\n\nWeb API\n\nAdded basic support for Storage API (r282130)\nAdded support for ServiceWorkerGlobalScope.serviceWorker (r281854)\nAdded handling for non-fully active documents in navigator.share() / navigator.canShare() (r282282)\nEnabled Cross-Origin-Opener-Policy / Cross-Origin-EmbedderPolicy headers support (r282105, r282246)\nEnabled SharedArrayBuffer support when COOP/COEP headers are used (r281832)\nFixed scrollbars on pointer-events: none element still intercepting events (r281991)\nImplemented top-origin and frame-origin partitioning for BroadcastChannel (r282105)\nImplemented navigation reporting for Cross-Origin-Opener-Policy (r282305)\nImplemented getClientRects() for SVG elements (r282316)\nUpdated to always fetch the first manifest if provided (r282026)\n\nWebRTC\n\nAdded support for RTCError and RTCErrorEvent (r282199)\nAdded support for RTCDataChannel closing event (r282198)\nAdded support for RTCSctpTransport (r282197)\nUpdated timing of RTCPeerConnection descriptions update to align with the WebRTC spec (r282217)\nUpdated signaling state check when applying a local or remote description to align with the WebRTC spec (r281985)\nUpdated getDisplayMedia to capture at the constrained size if possible (r281880)\n\nMedia\n\nFixed an incorrect number of frames returned if the decoding frame rate doesn’t match the original in WebM (r282196)\nRemoved Web Audio canPlayType() workaround that made it reports false negatives (r282137)\n\nWeb and App Extensions\n\nAdded the extension’s icon to extension URL tabs for both app and web extensions\nAdded the extension name as the title of tabs when an app extension page and does not specify a title\n",
      "date_published": "2021-09-30T17:07:59.000Z",
      "date_modified": "2021-10-04T16:29:22.000Z",
      "_plugin": {
        "pageFilename": "1bd125fd40eb245aaf5d8f6991c55c9e7d16793ec62b70651044e123bda7f9db.html"
      }
    },
    {
      "id": "https://webkit.org/?p=11971",
      "url": "https://webkit.org/blog/11971/release-notes-for-safari-technology-preview-132/",
      "title": "Release Notes for Safari Technology Preview 132",
      "summary": "Safari Technology Preview Release 132 is now available for download for macOS Big Sur and betas of macOS Monterey.",
      "content_html": "<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 132 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=281002&amp;rev=281797&amp;limit=999\">281002-281797</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Fixed CSS Changes sidebar to update live (<a href=\"https://trac.webkit.org/changeset/281441/webkit/\">r281441</a>)</li>\n<li>Fixed showing style rules declared after a rule whose selector has over 8192 components (<a href=\"https://trac.webkit.org/changeset/281354/webkit/\">r281354</a>)</li>\n<li>Changed to not show contextual documentation popup in the Changes panel (<a href=\"https://trac.webkit.org/changeset/281139/webkit/\">r281139</a>)</li>\n</ul>\n</li>\n<li>Miscellaneous\n<ul>\n<li>Adjusted tab bar style to be consistent between docked and undocked layouts (<a href=\"https://trac.webkit.org/changeset/281182/webkit/\">r281182</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Fixed CSS keyframe animations to respect edges in four-value <code>background-position</code> (<a href=\"https://trac.webkit.org/changeset/281683/webkit/\">r281683</a>)</li>\n<li>Fixed sticky position to not use transformed position to compute the offset (<a href=\"https://trac.webkit.org/changeset/281446/webkit/\">r281446</a>)</li>\n<li>Improved sticky positioning when applied to inline items(<a href=\"https://trac.webkit.org/changeset/281185/webkit/\">r281185</a>)</li>\n<li>Prevented snapping to offscreen snap areas in unidirectional scrolls (<a href=\"https://trac.webkit.org/changeset/281189/webkit/\">r281189</a>)</li>\n<li>Unprefixed <code>-webkit-backface-visibility</code> (<a href=\"https://trac.webkit.org/changeset/281009/webkit/\">r281009</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Added Intl Enumeration APIs (<a href=\"https://trac.webkit.org/changeset/281513/webkit/\">r281513</a>)</li>\n<li>Enabled <code>Array#findLast</code> method (<a href=\"https://trac.webkit.org/changeset/281369/webkit/\">r281369</a>)</li>\n<li>Enabled <code>String#at</code> and <code>TypedArray#at</code> (<a href=\"https://trac.webkit.org/changeset/281370/webkit/\">r281370</a>)</li>\n<li>Extended Intl TimeZoneName Option (<a href=\"https://trac.webkit.org/changeset/281371/webkit/\">r281371</a>)</li>\n<li>Fixed <code>Intl.DateTimeFormat</code> incorrectly parsing patterns with &#8216;h&#8217; literal (<a href=\"https://trac.webkit.org/changeset/281688/webkit/\">r281688</a>)</li>\n<li>Implemented <code>Temporal.Calendar</code> behind the flag (<code>--useTemporal</code>) (<a href=\"https://trac.webkit.org/changeset/281788/webkit/\">r281788</a>)</li>\n<li>Implemented Intl Locale Info extension (<a href=\"https://trac.webkit.org/changeset/281374/webkit/\">r281374</a>)</li>\n<li>Implemented <code>Intl.DisplayNames</code> V2 (<a href=\"https://trac.webkit.org/changeset/281375/webkit/\">r281375</a>)</li>\n<li>Made polymorphic-keyed put-by-value faster (<a href=\"https://trac.webkit.org/changeset/281615/webkit/\">r281615</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added Cross-Origin-Embedder-Policy support for Blob URLs (<a href=\"https://trac.webkit.org/changeset/281055/webkit/\">r281055</a>)</li>\n<li>Added onsecuritypolicyviolation on GlobalEventHandlers (<a href=\"https://trac.webkit.org/changeset/281569/webkit/\">r281569</a>)</li>\n<li>Enabled PerformanceNavigationTiming API by default (<a href=\"https://trac.webkit.org/changeset/281111/webkit/\">r281111</a>)</li>\n<li>Fixed including outer selector when matching <code>::slotted()</code> (<a href=\"https://trac.webkit.org/changeset/281692/webkit/\">r281692</a>)</li>\n<li>Fixed <code>document.hasFocus()</code> returning true for unfocused pages (<a href=\"https://trac.webkit.org/changeset/281228/webkit/\">r281228</a>)</li>\n<li>Fixed Geolocation API to callback with an error if the document is not fully active (<a href=\"https://trac.webkit.org/changeset/281520/webkit/\">r281520</a>)</li>\n<li>Fixed setting <code>window.location.href</code> to an invalid URL to throw a TypeError (<a href=\"https://trac.webkit.org/changeset/281472/webkit/\">r281472</a>)</li>\n<li>Fixed <code>SubmitEvent.submitter</code> property to be set for <code>&lt;button type=\"submit\"&gt;</code> (<a href=\"https://trac.webkit.org/changeset/281770/webkit/\">r281770</a>)</li>\n<li>Fixed Web Share <code>CanShare()</code> to be called after transient activation check (<a href=\"https://trac.webkit.org/changeset/281126/webkit/\">r281126</a>)</li>\n<li>Implemented <code>Crypto.randomUUID()</code> (<a href=\"https://trac.webkit.org/changeset/281206/webkit/\">r281206</a>, <a href=\"https://trac.webkit.org/changeset/281284/webkit/\">r281284</a>)</li>\n<li>Implemented <code>self.reportError()</code> (<a href=\"https://trac.webkit.org/changeset/281756/webkit/\">r281756</a>)</li>\n</ul>\n<h3>WebRTC</h3>\n<ul>\n<li>Added support for RTCDtlsTransport (<a href=\"https://trac.webkit.org/changeset/281225/webkit/\">r281225</a>)</li>\n<li>Added support for <code>RTCPeerConnection.canTrickleIceCandidates</code> (<a href=\"https://trac.webkit.org/changeset/281298/webkit/\">r281298</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Fixed caret to respect text background color (<a href=\"https://trac.webkit.org/changeset/281685/webkit/\">r281685</a>)</li>\n<li>Fixed incorrect repaint when inline level box style change triggers line height change (<a href=\"https://trac.webkit.org/changeset/281136/webkit/\">r281136</a>)</li>\n<li>Changed synthetic bold additional advances to be applied after shaping (<a href=\"https://trac.webkit.org/changeset/281687/webkit/\">r281687</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed <code>nexttrack</code> and <code>previoustrack</code> MediaSession handlers (<a href=\"https://trac.webkit.org/changeset/281013/webkit/\">r281013</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Added support for <code>externally_connectable</code> for sending messages to extensions from web pages</li>\n<li>Added a drop shadow around color extension icons when the tab is using a theme color from the web page</li>\n<li>Added an error message when declarative net request is used and the <code>declarativeNetRequest</code> permission is not specified in the extension manifest</li>\n</ul>",
      "content_text": "Safari Technology Preview Release 132 is now available for download for macOS Big Sur and betas of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\nThis release covers WebKit revisions 281002-281797.\nNote: Tab Groups do not sync in this release.\nWeb Inspector\n\nElements Tab\n\nFixed CSS Changes sidebar to update live (r281441)\nFixed showing style rules declared after a rule whose selector has over 8192 components (r281354)\nChanged to not show contextual documentation popup in the Changes panel (r281139)\n\n\nMiscellaneous\n\nAdjusted tab bar style to be consistent between docked and undocked layouts (r281182)\n\n\n\nCSS\n\nFixed CSS keyframe animations to respect edges in four-value background-position (r281683)\nFixed sticky position to not use transformed position to compute the offset (r281446)\nImproved sticky positioning when applied to inline items(r281185)\nPrevented snapping to offscreen snap areas in unidirectional scrolls (r281189)\nUnprefixed -webkit-backface-visibility (r281009)\n\nJavaScript\n\nAdded Intl Enumeration APIs (r281513)\nEnabled Array#findLast method (r281369)\nEnabled String#at and TypedArray#at (r281370)\nExtended Intl TimeZoneName Option (r281371)\nFixed Intl.DateTimeFormat incorrectly parsing patterns with ‘h’ literal (r281688)\nImplemented Temporal.Calendar behind the flag (--useTemporal) (r281788)\nImplemented Intl Locale Info extension (r281374)\nImplemented Intl.DisplayNames V2 (r281375)\nMade polymorphic-keyed put-by-value faster (r281615)\n\nWeb API\n\nAdded Cross-Origin-Embedder-Policy support for Blob URLs (r281055)\nAdded onsecuritypolicyviolation on GlobalEventHandlers (r281569)\nEnabled PerformanceNavigationTiming API by default (r281111)\nFixed including outer selector when matching ::slotted() (r281692)\nFixed document.hasFocus() returning true for unfocused pages (r281228)\nFixed Geolocation API to callback with an error if the document is not fully active (r281520)\nFixed setting window.location.href to an invalid URL to throw a TypeError (r281472)\nFixed SubmitEvent.submitter property to be set for <button type=\"submit\"> (r281770)\nFixed Web Share CanShare() to be called after transient activation check (r281126)\nImplemented Crypto.randomUUID() (r281206, r281284)\nImplemented self.reportError() (r281756)\n\nWebRTC\n\nAdded support for RTCDtlsTransport (r281225)\nAdded support for RTCPeerConnection.canTrickleIceCandidates (r281298)\n\nRendering\n\nFixed caret to respect text background color (r281685)\nFixed incorrect repaint when inline level box style change triggers line height change (r281136)\nChanged synthetic bold additional advances to be applied after shaping (r281687)\n\nMedia\n\nFixed nexttrack and previoustrack MediaSession handlers (r281013)\n\nWeb Extensions\n\nAdded support for externally_connectable for sending messages to extensions from web pages\nAdded a drop shadow around color extension icons when the tab is using a theme color from the web page\nAdded an error message when declarative net request is used and the declarativeNetRequest permission is not specified in the extension manifest\n",
      "date_published": "2021-09-16T21:16:39.000Z",
      "date_modified": "2021-09-16T21:16:39.000Z",
      "_plugin": {
        "pageFilename": "20cc6f7ed93a5166258bfcec8d2c645a98f683cb85d9958aa28d2f707f543594.html"
      }
    }
  ],
  "_plugin": {
    "rawFeed": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><feed\n\txmlns=\"http://www.w3.org/2005/Atom\"\n\txmlns:thr=\"http://purl.org/syndication/thread/1.0\"\n\txml:lang=\"en-US\"\n\t>\n\t<title type=\"text\">WebKit</title>\n\t<subtitle type=\"text\">Open Source Web Browser Engine</subtitle>\n\n\t<updated>2022-04-11T16:18:08Z</updated>\n\n\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org\" />\n\t<id>https://webkit.org/feed/atom/</id>\n\t<link rel=\"self\" type=\"application/atom+xml\" href=\"https://webkit.org/feed/atom/\" />\n\n\t<generator uri=\"https://wordpress.org/\" version=\"5.9\">WordPress</generator>\n\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Private Click Measurement: Conversion Fraud Prevention and Replacement For Tracking Pixels]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12566/private-click-measurement-conversion-fraud-prevention-and-replacement-for-tracking-pixels/\" />\n\n\t\t<id>https://webkit.org/?p=12566</id>\n\t\t<updated>2022-04-11T16:18:08Z</updated>\n\t\t<published>2022-04-11T16:18:08Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Privacy\" />\n\t\t<summary type=\"html\"><![CDATA[Welcome to the fourth feature update on Private Click Measurement, our proposed web standard for measuring advertising in a privacy-preserving way.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12566/private-click-measurement-conversion-fraud-prevention-and-replacement-for-tracking-pixels/\"><![CDATA[<p>Welcome to the fourth feature update on Private Click Measurement, our <a href=\"https://github.com/privacycg/private-click-measurement\">proposed web standard</a> for measuring advertising in a privacy-preserving way. More precisely three major and two minor updates to PCM, all available in iOS/iPadOS 15.4 and macOS Monterey 12.3.</p>\n<p>Major updates:</p>\n<ul>\n<li><strong>Conversion fraud prevention</strong>. This enables merchant websites to sign unlinkable tokens and get proof in the attribution report that it was triggered by a trustworthy conversion event.</li>\n<li><strong>Replacement for third-party tracking pixels</strong>. Merchant websites can now trigger a conversion event through a same-site pixel which removes the need to call any third-parties in PCM.</li>\n<li><strong>Measurement of clicks in cross-site iframes</strong>. Many publishers want to isolate ads on their site in cross-site iframes. Now clicks in such iframes can be measured too.</li>\n</ul>\n<h2>What is Private Click Measurement?</h2>\n<p>Private Click Measurement, or PCM, is a proposed web standard for measuring the effectiveness of click-through advertising in a privacy-preserving way. It allows for 8 bits of data on the click source site to be combined with 4 bits of data on the click destination site to measure which clicks are driving conversions. The combined 8+4 bits of data is sent to both the click source and destination in an attribution report that doesn’t carry any user or device identifiers. The net result is a report that says “Someone who clicked ad X on website A later converted with value Y on website B.”</p>\n<p>PCM was made available as a beta in May 2019, and then shipped 2021 in iOS/iPadOS 14.5 and in Safari 14.1 on macOS. Its privacy-preserving nature means it can be used without getting the user’s permission to track according to <a href=\"https://developer.apple.com/app-store/user-privacy-and-data-use/\">AppTrackingTransparency</a>.</p>\n<h2>Conversion Fraud Prevention</h2>\n<p><a href=\"https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/\">In July 2021</a> we presented our beta feature for click fraud prevention in PCM. It allows the click source website to sign an unlinkable token at the time of the click navigation, which results in a signed token being included in the resulting attribution report. Today we present the same capability for the click destination website.</p>\n<p>PCM’s triggering event is a redirect to the well-known path <code>.well-known/private-click-measurement/trigger-attribution/</code>. Now that redirect supports a query string parameter called <code>attributionDestinationNonce</code>. If a nonce is included in the redirect, it triggers WebKit to ask the click destination server to sign an unlinkable token.</p>\n<h3>Step 1: Generate an RSA Key Pair</h3>\n<p>Unlinkable tokens require a public key for token generation and validation, and a corresponding private key for signing. PCM supports three different RSA key sizes: 2048, 3072 and 4096 bits. The expected encoding of the public key is a Base64URL encoded (using <a href=\"https://datatracker.ietf.org/doc/html/rfc4648#section-5\">RFC4648 section 5</a>) SPKI with the RSA-PSS OID and the parameters corresponding to the <a href=\"https://datatracker.ietf.org/doc/draft-irtf-cfrg-rsa-blind-signatures/\">RSABSSA IETF draft</a>.  Examples of such key encodings are included in an <a href=\"https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/\">earlier blog post</a>.</p>\n<h3>Step 2: Add the Query Parameter <code>attributionDestinationNonce</code></h3>\n<p>The triggering event should look like this to opt in to conversion fraud prevention:</p>\n<p><code>https://site.example/some/sub/resource/</code><br />\n… redirects to …<br />\n<code>https://site.example/.well-known/private-click-measurement/trigger-attribution/11?attributionDestinationNonce=ABCDEFabcdef0123456789</code></p>\n<p>The <code>attributionDestinationNonce</code> is only in place to help the click destination server know the context for which it’s signing an unlinkable token. When the click destination server is asked to sign an unlinkable token, it’ll get the <code>attributionDestinationNonce</code> and can make a decision as to whether the triggering event was trustworthy or not.</p>\n<p>The <code>attributionDestinationNonce</code> needs to be a Base64URL encoded 128-bit/16-byte value. Any smaller or larger value will cancel the issuance flow of the fraud-prevention signature. Any non Base64URL encoded value will also cancel the token transaction. Web Inspector will log a warning if the <code>attributionDestinationNonce</code> is malformed.</p>\n<h3>Step 3: Respond to a Request for Your Public Key</h3>\n<p>The browser and any validating party needs to be able to fetch your public key at any point in time from this well-known location: <code>https://clicksource.example/.well-known/private-click-measurement/get-token-public-key/</code>.</p>\n<h2>Replacement For Third-Party Tracking Pixels</h2>\n<p>Previous versions of PCM required HTTP requests on the click destination site to go to the click source site. This was designed to enable reuse of existing <em>cross-site tracking pixels</em> that no longer carry cookies under tracking prevention.</p>\n<p>For new adoption of PCM, for instance onboarding a new publisher site where ads are shown, there’s no need to add such legacy pixels. Longer term, we want to remove support for triggering events through cross-site tracking pixels since even though they don’t carry cookies, they do ping third-party domains that may be categorized as trackers. Many websites want to be completely tracker-free and we’re happy to be able to support that with PCM while still allowing for click measurement across websites.</p>\n<p>Click destination sites can now signal a triggering event through a <em>same-site pixel</em>. It looks like below.</p>\n<p>Same-site subresource request to:<br />\n<code>https://clickDestination.example/triggeringEventRedirect/21</code></p>\n<p>… redirects to same-site well-known location:<br />\n<code>https://clickDestination.example/.well-known/private-click-measurement/trigger-attribution/21?attributionSource=https://clickSource.example</code></p>\n<p>The above redirect tells PCM to schedule an attribution report if there is a pending attribution from <code>clickSource.example</code>.</p>\n<p>Why not a JavaScript API to trigger attribution without cross-site pixels, you may ask? There are two reasons for that:</p>\n<ul>\n<li>The <a href=\"https://github.com/privacycg/private-click-measurement/issues/71#issue-813921418\">standards conversation in W3C Privacy CG</a> told us that some click destination sites have a policy against placing third-party scripts on their websites because of the risky dependencies they introduce. We think that’s a very valid concern, not in the least for user privacy. However, those same click destination sites do not have the same strict policies against <em>pixels</em>. We can given them the API functionality they need by introducing same-site pixels. They can be triggered through actual image elements or through a JavaScript Fetch.</li>\n<li>We continue to consider it very important that websites should not be able to tell at page load time whether or not the user has PCM (or other ad measurement) features enabled. This is to protect the user’s right to a choice. Pixel APIs don’t reveal if the triggering event is accepted or not. A JavaScript API could be made to not reveal that info either but pixel APIs just do that.</li>\n</ul>\n<h2>Measurement of Clicks in Cross-Site Iframes</h2>\n<p><a href=\"https://github.com/privacycg/private-click-measurement/issues/7\">One of the first PCM change requests</a> from the web community was to allow for measurement of clicks that happen in cross-site iframes. This would allow for measurement of advertising isolated in iframes. We’re happy to announce that we now support that. Note that the resulting attribution report is still sent to the two first-party websites, often referred to as the publisher and the merchant.</p>\n<h2>WebIDL Attributes Now In Camelcase</h2>\n<p>JavaScript access to PCM’s anchor tag attributes now requires camel-casing. This is the result of interoperability work in web standards. Here’s how it looks:</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">a</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"test\"</span> <span class=\"keyword attribute\">href</span>=<span class=\"attribute value string\">\"https://clickDestination.example\"</span> <span class=\"keyword attribute\">attributionsourceid</span>=<span class=\"keyword attribute\">40</span> <span class=\"keyword attribute\">attributiondestination</span>=<span class=\"attribute value string\">\"https://clickDestination.example\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"keyword\">a</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">script</span>&gt;</span>\n    const anchorTag = document.getElementById(\"test\");\n    anchorTag.attributionSourceId …;\n    anchorTag.attributionDestination …;\n<span class=\"tag\">&lt;/<span class=\"keyword\">script</span>&gt;</span>\n</code></pre>\n<h2>Encoding Update for Token Keys</h2>\n<p>When sending your public key to the browser, it needs to be a 2048, 3072 or 4096 bit RSA public key wrapped with an RSAPSS OID in ASN1 format. See “Step 1: Generate an RSA Key Pair above.” Those bytes then need to be <a href=\"https://datatracker.ietf.org/doc/html/rfc4648#section-5\">base64 encoded with the URL and filename safe alphabet</a>.  Examples of such key encodings are included in an <a href=\"https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/\">earlier blog post</a>.</p>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Release Notes for Safari Technology Preview 143]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12563/release-notes-for-safari-technology-preview-143/\" />\n\n\t\t<id>https://webkit.org/?p=12563</id>\n\t\t<updated>2022-04-07T22:19:46Z</updated>\n\t\t<published>2022-04-07T22:19:46Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Safari Technology Preview\" />\n\t\t<summary type=\"html\"><![CDATA[Safari Technology Preview Release 143 is now available for download for macOS Big Sur and of macOS Monterey.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12563/release-notes-for-safari-technology-preview-143/\"><![CDATA[<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 143 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=290223&amp;rev=291506&amp;limit=1283\">290223-291506</a>. This is the last release of Safari Technology Preview that will support versions of macOS Monterey prior to 12.3. Please update to macOS Monterey 12.3 or later to continue using Safari Technology Preview.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Added option in the Layout panel of the Details Sidebar for Flexbox overlays to show each item&#8217;s CSS <code>order</code> and/or DOM index in the parent flex container (<a href=\"https://trac.webkit.org/changeset/290613/webkit/\">r290613</a>)</li>\n</ul>\n</li>\n<li>Service workers are no longer terminated while they are being inspected. (<a href=\"https://trac.webkit.org/changeset/291467/webkit/\">r291467</a>)</li>\n</ul>\n<h3>CSS Container Queries</h3>\n<ul>\n<li>Added support for nested container queries (<a href=\"https://trac.webkit.org/changeset/290257/webkit/\">r290257</a>)</li>\n<li>Added basic support for container units (<a href=\"https://trac.webkit.org/changeset/291474/webkit/\">r291474</a>)</li>\n<li>Changed to only apply inline-size containment when it is allowed (<a href=\"https://trac.webkit.org/changeset/291154/webkit/\">r291154</a>)</li>\n<li>Ensured container style changes are propagated to descendants (<a href=\"https://trac.webkit.org/changeset/291500/webkit/\">r291500</a>)</li>\n<li>Fixed <code>getComputedStyle</code> to update the style for invalid query containers (<a href=\"https://trac.webkit.org/changeset/290320/webkit/\">r290320</a>)</li>\n<li>Fixed <code>offsetWidth</code>, <code>offsetHeight</code>, and similar to update layout for container queries (<a href=\"https://trac.webkit.org/changeset/290380/webkit/\">r290380</a>)</li>\n<li>Implemented new container selection algorithm (<a href=\"https://trac.webkit.org/changeset/291098/webkit/\">r291098</a>)</li>\n</ul>\n<h3>CSS Cascade Layers</h3>\n<ul>\n<li>Added support for <code>revert</code> in <code>@keyframes</code> (<a href=\"https://trac.webkit.org/changeset/290457/webkit/\">r290457</a>)</li>\n<li>Added support for <code>revert-layer</code> in <code>@keyframes</code> (<a href=\"https://trac.webkit.org/changeset/290729/webkit/\">r290729</a>)</li>\n<li>Fixed <code>revert</code> on low-priority properties (<a href=\"https://trac.webkit.org/changeset/291260/webkit/\">r291260</a>)</li>\n<li>Let <code>revert-layer</code> in the lowest layer roll back to user styles (<a href=\"https://trac.webkit.org/changeset/290864/webkit/\">r290864</a>)</li>\n</ul>\n<h3>Subgrid</h3>\n<ul>\n<li>Fixed computing the correct containing block override size for items that are subgridded in one dimension only (<a href=\"https://trac.webkit.org/changeset/290577/webkit/\">r290577</a>)</li>\n<li>Converted grid direction to be relative to subgrid when accounting for extra margin (<a href=\"https://trac.webkit.org/changeset/290576/webkit/\">r290576</a>)</li>\n<li>Handled reverse flow direction when converting iterator coords for a subgrid (<a href=\"https://trac.webkit.org/changeset/290572/webkit/\">r290572</a>)</li>\n<li>Fixed subgrid items to always be stretched (<a href=\"https://trac.webkit.org/changeset/291464/webkit/\">r291464</a>)</li>\n<li>Fixed positioning of <code>position: absolute</code> items within nested grids (<a href=\"https://trac.webkit.org/changeset/290674/webkit/\">r290674</a>)</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Implemented <code>text-decoration</code> as a shorthand (<a href=\"https://trac.webkit.org/changeset/290756/webkit/\">r290756</a>, <a href=\"https://trac.webkit.org/changeset/291244/webkit/\">r291244</a>)</li>\n<li>Implemented logical properties for CSS <code>overscroll-behavior</code> (<a href=\"https://trac.webkit.org/changeset/290422/webkit/\">r290422</a>)</li>\n<li>Fixed <code>background-clip: text</code> to work with <code>display: flex</code> (<a href=\"https://trac.webkit.org/changeset/291303/webkit/\">r291303</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Added CalendarDateTime parsing (<a href=\"https://trac.webkit.org/changeset/290248/webkit/\">r290248</a>)</li>\n<li>Fixed ShadowRealm unwinding (<a href=\"https://trac.webkit.org/changeset/290283/webkit/\">r290283</a>)</li>\n<li>Fixed <code>Temporal.PlainDate</code> to validate input range (<a href=\"https://trac.webkit.org/changeset/290282/webkit/\">r290282</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Fixed image <code>alt</code> text bi-directional reordering (<a href=\"https://trac.webkit.org/changeset/290734/webkit/\">r290734</a>)</li>\n<li>Fixed <code>alt</code> text position in right-to-left context (<a href=\"https://trac.webkit.org/changeset/290726/webkit/\">r290726</a>)</li>\n<li>Fixed table sizing when <code>colgroup</code> comes after <code>tbody</code> (<a href=\"https://trac.webkit.org/changeset/290512/webkit/\">r290512</a>)</li>\n<li>Fixed scrollbars disappearing when very long or wide (<a href=\"https://trac.webkit.org/changeset/290545/webkit/\">r290545</a>)</li>\n<li>Handled perpendicular containing blocks when computing available logical height (<a href=\"https://trac.webkit.org/changeset/290634/webkit/\">r290634</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Added support for passing an optional timeline to <code>Element.animate()</code> (<a href=\"https://trac.webkit.org/changeset/290655/webkit/\">r290655</a>)</li>\n<li>Changed setting the <code>composite</code> property on a keyframe effect to invalidate the target style (<a href=\"https://trac.webkit.90741/webkit/\">r290741</a>)</li>\n<li>Fixed <code>inherit</code> values should trigger keyframe recomputation if any previous effect has changed that property (<a href=\"https://trac.geset/290831/webkit/\">r290831</a>)</li>\n<li>Fixed keyframe values set to <code>inherit</code> to recompute their values when the inherited value changes (<a href=\"https://trac.webkit.90823/webkit/\">r290823</a>)</li>\n<li>Fixed animating <code>fill</code> and <code>stroke</code> to or from <code>currentColor</code> (<a href=\"https://trac.webkit.org/changeset/290898/webkit/\">r290898</a>)</li>\n<li>Fixed <code>::placeholder</code> to not be a valid pseudo-element for a keyframe effect target (<a href=\"https://trac.webkit.90662/webkit/\">r290662</a>)</li>\n<li>Fixed animations on modal <code>&lt;dialog&gt;</code>  elements and <code>::backdrop</code> to run more than once (<a href=\"https://trac.webkit.org/changeset/291282/webkit/\">r291282</a>)</li>\n<li>Fixed <code>outline-width</code> with transition to animate correctly (<a href=\"https://trac.webkit.org/changeset/290735/webkit/\">r290735</a>)</li>\n<li>Fixed <code>text-emphasis</code> shorthand to be animatable (<a href=\"https://trac.webkit.org/changeset/290895/webkit/\">r290895</a>)</li>\n<li>Fixed <code>text-emphasis-color</code> to support non-discrete animations (<a href=\"https://trac.webkit.org/changeset/290887/webkit/\">r290887</a>)</li>\n<li>Made changes to <code>font-size</code> recompute keyframes (<a href=\"https://trac.webkit.org/changeset/290730/webkit/\">r290730</a>)</li>\n<li>Added support for discrete animation to:\n<ul>\n<li><code>background-blend-mode</code> (<a href=\"https://trac.webkit.org/changeset/291041/webkit/\">r291041</a>)</li>\n<li><code>clip-rule</code> (<a href=\"https://trac.webkit.org/changeset/291042/webkit/\">r291042</a>)</li>\n<li><code>color-interpolation</code> (<a href=\"https://trac.webkit.org/changeset/291008/webkit/\">r291008</a>)</li>\n<li><code>color-interpolation-filters</code> (<a href=\"https://trac.webkit.org/changeset/291043/webkit/\">r291043</a>)</li>\n<li><code>counter-increment</code> (<a href=\"https://trac.webkit.org/changeset/291090/webkit/\">r291090</a>)</li>\n<li><code>counter-reset</code> (<a href=\"https://trac.webkit.org/changeset/291099/webkit/\">r291099</a>)</li>\n<li><code>dominant-baseline</code> (<a href=\"https://trac.webkit.org/changeset/291068/webkit/\">r291068</a>)</li>\n<li><code>fill-rule</code> (<a href=\"https://trac.webkit.org/changeset/291100/webkit/\">r291100</a>)</li>\n<li><code>font-family</code> (<a href=\"https://trac.webkit.org/changeset/291040/webkit/\">r291040</a>)</li>\n<li><code>font-feature-settings</code> (<a href=\"https://trac.webkit.org/changeset/291039/webkit/\">r291039</a>)</li>\n<li><code>font-kerning</code> (<a href=\"https://trac.webkit.org/changeset/291037/webkit/\">r291037</a>)</li>\n<li><code>font-synthesis</code> (<a href=\"https://trac.webkit.org/changeset/291103/webkit/\">r291103</a>)</li>\n<li><code>font-variant-alternates</code> (<a href=\"https://trac.webkit.org/changeset/291104/webkit/\">r291104</a>)</li>\n<li><code>font-variant-caps</code> (<a href=\"https://trac.webkit.org/changeset/291119/webkit/\">r291119</a>)</li>\n<li><code>font-variant-east-asian</code> (<a href=\"https://trac.webkit.org/changeset/291109/webkit/\">r291109</a>)</li>\n<li><code>font-variant-ligatures</code> (<a href=\"https://trac.webkit.org/changeset/291114/webkit/\">r291114</a>)</li>\n<li><code>font-variant-numeric</code> (<a href=\"https://trac.webkit.org/changeset/291147/webkit/\">r291147</a>)</li>\n<li><code>font-variant-position</code> (<a href=\"https://trac.webkit.org/changeset/291115/webkit/\">r291115</a>)</li>\n<li><code>grid-template-areas</code> (<a href=\"https://trac.webkit.org/changeset/291122/webkit/\">r291122</a>)</li>\n<li><code>line-break</code> (<a href=\"https://trac.webkit.org/changeset/290885/webkit/\">r290885</a>)</li>\n<li><code>marker-end</code> (<a href=\"https://trac.webkit.org/changeset/291226/webkit/\">r291226</a>)</li>\n<li><code>marker-mid</code> (<a href=\"https://trac.webkit.org/changeset/291227/webkit/\">r291227</a>)</li>\n<li><code>marker-start</code> (<a href=\"https://trac.webkit.org/changeset/291228/webkit/\">r291228</a>)</li>\n<li><code>mask-clip</code> (<a href=\"https://trac.webkit.org/changeset/291130/webkit/\">r291130</a>)</li>\n<li><code>mask-composite</code> (<a href=\"https://trac.webkit.org/changeset/291159/webkit/\">r291159</a>)</li>\n<li><code>mask-mode</code> (<a href=\"https://trac.webkit.org/changeset/291160/webkit/\">r291160</a>)</li>\n<li><code>mask-origin</code> (<a href=\"https://trac.webkit.org/changeset/291148/webkit/\">r291148</a>)</li>\n<li><code>mask-repeat</code> (<a href=\"https://trac.webkit.org/changeset/291161/webkit/\">r291161</a>)</li>\n<li><code>mask-type</code> (<a href=\"https://trac.webkit.org/changeset/291158/webkit/\">r291158</a>)</li>\n<li><code>quotes</code> (<a href=\"https://trac.webkit.org/changeset/291128/webkit/\">r291128</a>)</li>\n<li><code>scroll-behavior</code> (<a href=\"https://trac.webkit.org/changeset/291129/webkit/\">r291129</a>)</li>\n<li><code>shape-rendering</code> (<a href=\"https://trac.webkit.org/changeset/291171/webkit/\">r291171</a>)</li>\n<li><code>stroke-linecap</code> (<a href=\"https://trac.webkit.org/changeset/291163/webkit/\">r291163</a>)</li>\n<li><code>stroke-linejoin</code> (<a href=\"https://trac.webkit.org/changeset/291164/webkit/\">r291164</a>)</li>\n<li><code>text-anchor</code> (<a href=\"https://trac.webkit.org/changeset/291166/webkit/\">r291166</a>)</li>\n<li><code>text-decoration-skip-ink</code> (<a href=\"https://trac.webkit.org/changeset/290886/webkit/\">r290886</a>)</li>\n<li><code>text-emphasis-style</code> (<a href=\"https://trac.webkit.org/changeset/290888/webkit/\">r290888</a>)</li>\n<li><code>text-rendering</code> (<a href=\"https://trac.webkit.org/changeset/291157/webkit/\">r291157</a>)</li>\n<li><code>vector-effect</code> (<a href=\"https://trac.webkit.org/changeset/291170/webkit/\">r291170</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>SVG</h3>\n<ul>\n<li>Fixed clamping animated values to the 0-1 range for:\n<ul>\n<li><code>fill-opacity</code> (<a href=\"https://trac.webkit.org/changeset/290568/webkit/\">r290568</a>)</li>\n<li><code>flood-opacity</code> (<a href=\"https://trac.webkit.org/changeset/290571/webkit/\">r290571</a>)</li>\n<li><code>stop-opacity</code> (<a href=\"https://trac.webkit.org/changeset/290569/webkit/\">r290569</a>)</li>\n<li><code>stroke-opacity</code> (<a href=\"https://trac.webkit.org/changeset/290570/webkit/\">r290570</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>Scrolling</h3>\n<ul>\n<li>Allowed history swipe in scroller with <code>overscroll-behavior</code> (<a href=\"https://trac.webkit.org/changeset/291497/webkit/\">r291497</a>)</li>\n<li>Fixed incorrect painting when scrolling a page with fixed backgrounds (<a href=\"https://trac.webkit.org/changeset/290785/webkit/\">r290785</a>)</li>\n<li>Fixed scroll animation when scroll snap scroller is navigated with the keyboard (<a href=\"https://trac.webkit.org/changeset/290548/webkit/\">r290548</a>, <a href=\"https://trac.webkit.org/changeset/290625/webkit/\">r290625</a>)</li>\n<li>Fixed element with <code>position: sticky</code> after sticking, starting to move incorrectly when scrolling (<a href=\"https://trac.webkit.org/changeset/290812/webkit/\">r290812</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Added support for <code>authenticatorSelection.residentKey</code> (<a href=\"https://trac.webkit.org/changeset/291176/webkit/\">r291176</a>)</li>\n<li>Added fallback to <code>attestation=none</code> if requested but unavailable for platform authenticator (<a href=\"https://trac.webkit.org/changeset/290539/webkit/\">r290539</a>)</li>\n<li>Enabled using WebAuthn within cross-origin iframe elements (<a href=\"https://trac.webkit.org/changeset/291018/webkit/\">r291018</a>)</li>\n<li>Improved virtual authenticator support ( <a href=\"https://trac.webkit.org/changeset/291423/webkit/\">r291423</a> , <a href=\"https://trac.webkit.org/changeset/291321/webkit/\">r291321</a>)</li>\n</ul>\n<h3>WebGL</h3>\n<ul>\n<li>Fixed WebGL rendering incorrect results when using preserveDrawingBuffer (<a href=\"https://trac.webkit.org/changeset/291218/webkit/\">r291218</a>)</li>\n</ul>\n<h3>HTML</h3>\n<ul>\n<li>Enabled the <code>inert</code> attribute by default (<a href=\"https://trac.webkit.org/changeset/290587/webkit/\">r290587</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Enabled the Permissions API by default (<a href=\"https://trac.webkit.org/changeset/291116/webkit/\">r291116</a>, <a href=\"https://trac.webkit.org/changeset/290301/webkit/\">r290301</a>)</li>\n<li>Fixed <code>mousemove</code> events double-firing in Safari (<a href=\"https://trac.webkit.org/changeset/290743/webkit/\">r290743</a>)</li>\n<li>Fixed rendering when loading a USDZ as the main resource  (<a href=\"https://trac.webkit.org/changeset/290562/webkit/\">r290562</a>)</li>\n<li>Fixed CORS preflight failing due to <code>cache-control</code> header (<a href=\"https://trac.webkit.org/changeset/290507/webkit/\">r290507</a>)</li>\n<li>Fixed PerformanceNavigationTiming Response Start being unavailable when using Service Worker Cache (<a href=\"https://trac.webkit.org/changeset/291441/webkit/\">r291441</a>)</li>\n<li>Fixed buffered flag not working in Paint Timing (<a href=\"https://trac.webkit.org/changeset/290247/webkit/\">r290247</a>)</li>\n<li>Fixed load event never firing after a form is submitted (<a href=\"https://trac.webkit.org/changeset/290841/webkit/\">r290841</a>)</li>\n<li>Fixed <code>WebSocket.send()</code> to synchronously update <code>bufferedAmount</code> (<a href=\"https://trac.webkit.org/changeset/290995/webkit/\">r290995</a>)</li>\n<li>Made input element UA shadow tree creation lazy (<a href=\"https://trac.webkit.org/changeset/290284/webkit/\">r290284</a>)</li>\n<li>Made <code>pointer-events</code> checks for SVG take in account inert subtrees (<a href=\"https://trac.webkit.org/changeset/290306/webkit/\">r290306</a>)</li>\n<li>Removed the 1ms minimum for <code>setTimeout</code> (<a href=\"https://trac.webkit.org/changeset/291476/webkit/\">r291476</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>AudioContext will continue playing when minimizing or moving the macOS Safari window to the background (<a href=\"https://trac.webkit.org/changeset/291267/webkit/\">r291267</a>)</li>\n<li>Fixed scrambled output for some WebM videos with VP8 codec (<a href=\"https://trac.webkit.org/changeset/291216/webkit/\">r291216</a>)</li>\n<li>Implemented <code>remote-inbound-rtp</code> packetsLost (<a href=\"https://trac.webkit.org/changeset/290865/webkit/\">r290865</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Updated WebSpeech API support (<a href=\"https://trac.webkit.org/changeset/291124/webkit/\">r291124</a>)</li>\n</ul>\n<h3>File System Access</h3>\n<ul>\n<li>Changed to throw an exception if a file or directory cannot be accessed in file system (<a href=\"https://trac.webkit.org/changeset/291014/webkit/\">r291014</a>)</li>\n<li>Disallowed empty name in FileSystemHandle (<a href=\"https://trac.webkit.org/changeset/290998/webkit/\">r290998</a>)</li>\n<li>Disallowed names that are not permitted by the underlying file system (<a href=\"https://trac.webkit.org/changeset/291057/webkit/\">r291057</a>)</li>\n<li>Fixed fetching website data that may get a wrong or missing record after migrating data to general storage directory (<a href=\"https://trac.webkit.org/changeset/290239/webkit/\">r290239</a>, <a href=\"https://trac.webkit.org/changeset/290233/webkit/\">r290233</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Fixed cookie expiration dates so they are not off by 30 years</li>\n</ul>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Release Notes for Safari Technology Preview 142]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12522/release-notes-for-safari-technology-preview-142/\" />\n\n\t\t<id>https://webkit.org/?p=12522</id>\n\t\t<updated>2022-03-24T00:18:33Z</updated>\n\t\t<published>2022-03-24T00:18:33Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Safari Technology Preview\" />\n\t\t<summary type=\"html\"><![CDATA[Safari Technology Preview Release 142 is now available for download for macOS Big Sur and macOS Monterey.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12522/release-notes-for-safari-technology-preview-142/\"><![CDATA[<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 142 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=289213&amp;rev=290223&amp;limit=1010\">289213-290223</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Added overlay for visualizing CSS Flexbox container layouts (<a href=\"https://trac.webkit.org/changeset/290065/webkit/\">r290065</a>, <a href=\"https://trac.webkit.org/changeset/290047/webkit/\">r290047</a>, <a href=\"https://trac.webkit.org/changeset/289416/webkit/\">r289416</a>, <a href=\"https://trac.webkit.org/changeset/289610/webkit/\">r289610</a>, <a href=\"https://trac.webkit.org/changeset/289698/webkit/\">r289698</a>, <a href=\"https://trac.webkit.org/changeset/289757/webkit/\">r289757</a>)</li>\n<li>Added indicators for layout context in element tooltips (<a href=\"https://trac.webkit.org/changeset/290112/webkit/\">r290112</a>)</li>\n</ul>\n</li>\n<li>Sources Tab\n<ul>\n<li>Fixed clicking to re-enable a breakpoint clearing automatic continue (<a href=\"https://trac.webkit.org/changeset/289669/webkit/\">r289669</a>)</li>\n<li>Fixed double-clicking a breakpoint icon to show the edit popover (<a href=\"https://trac.webkit.org/changeset/289670/webkit/\">r289670</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS Subgrid</h3>\n<ul>\n<li>Enabled subgrid by default (<a href=\"https://trac.webkit.org/changeset/290111/webkit/\">r290111</a>)</li>\n<li>Added accounting for subgrid margin, border, and padding when sizing (<a href=\"https://trac.webkit.org/changeset/290096/webkit/\">r290096</a>)</li>\n<li>Added support for parsing subgrid in <code>grid-template-columns</code> and <code>grid-template-row</code> (<a href=\"https://trac.webkit.org/changeset/289722/webkit/\">r289722</a>)</li>\n<li>Changed to copy track sizes from the parent grid into subgrid (<a href=\"https://trac.webkit.org/changeset/290007/webkit/\">r290007</a>)</li>\n<li>Changed to inherit track count from the parent grid for subgridded axes and clamp item placement to that explicit grid (<a href=\"https://trac.webkit.org/changeset/289986/webkit/\">r289986</a>)</li>\n<li>Included subgrid items in the track sizing algorithm of the outer grid (<a href=\"https://trac.webkit.org/changeset/290077/webkit/\">r290077</a>)</li>\n<li>Implemented <code>getComputedStyle</code> for subgrids (<a href=\"https://trac.webkit.org/changeset/289993/webkit/\">r289993</a>)</li>\n<li>Fixed certain scenarios where grid may be empty (<a href=\"https://trac.webkit.org/changeset/289437/webkit/\">r289437</a>)</li>\n<li>Fixed recalculating styles when updating a grid gap value (<a href=\"https://trac.webkit.org/changeset/289241/webkit/\">r289241</a>)</li>\n</ul>\n<h3>CSS Container Queries</h3>\n<ul>\n<li>Enabled CSS Container Queries by default (<a href=\"https://trac.webkit.org/changeset/290025/webkit/\">r290025</a>)</li>\n<li>Added query container tracking so they can be invalidated on size change (<a href=\"https://trac.webkit.org/changeset/289457/webkit/\">r289457</a>)</li>\n<li>Added support for all size features (<a href=\"https://trac.webkit.org/changeset/289838/webkit/\">r289838</a>)</li>\n<li>Added support for full range notation in size queries (<a href=\"https://trac.webkit.org/changeset/290037/webkit/\">r290037</a>)</li>\n<li>Added support for range operators in size queries (<a href=\"https://trac.webkit.org/changeset/289789/webkit/\">r289789</a>)</li>\n<li>Changed size queries on unsupported axis to evaluate to unknown (<a href=\"https://trac.webkit.ebkit/\">r289890</a>)</li>\n<li>Implemented container name matching (<a href=\"https://trac.webkit.org/changeset/289617/webkit/\">r289617</a>)</li>\n<li>Implemented full query parser and evaluator (<a href=\"https://trac.webkit.org/changeset/289742/webkit/\">r289742</a>)</li>\n<li>Implemented inline-size containment (<a href=\"https://trac.webkit.org/changeset/289466/webkit/\">r289466</a>)</li>\n<li>Implemented container shorthand serialization (<a href=\"https://trac.webkit.org/changeset/289886/webkit/\">r289886</a>)</li>\n<li>Matched container queries correctly in non-rendered subtrees (<a href=\"https://trac.webkit.org/changeset/290205/webkit/\">r290205</a></li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Enabled CSS Motion Path by default (<a href=\"https://trac.webkit.org/changeset/290071/webkit/\">r290071</a>)</li>\n<li>Enabled <code>overscroll-behavior</code> by default (<a href=\"https://trac.webkit.org/changeset/289683/webkit/\">r289683</a>)</li>\n<li>Changed <code>transform: perspective(0)</code> to not be considered an identity operation (<a href=\"https://trac.webkit.org/changeset/289903/webkit/\">r289903</a>)</li>\n<li>Changed to return <code>none</code> for the computed style of a mask when there are no mask images (<a href=\"https://trac.webkit.org/changeset/289377/webkit/\">r289377</a>)</li>\n<li>Fixed <code>:focus-visible</code> with a click on radio or checkbox labels (<a href=\"https://trac.webkit.org/changeset/289521/webkit/\">r289521</a>)</li>\n<li>Fixed <code>contain: content</code> in fullscreen (<a href=\"https://trac.webkit.org/changeset/289686/webkit/\">r289686</a>)</li>\n<li>Fixed incorrect absolute position layout when toggling <code>contain</code> (<a href=\"https://trac.webkit.org/changeset/289527/webkit/\">r289527</a>)</li>\n<li>Updated conversion to a color space with a smaller gamut to perform gamut mapping (<a href=\"https://trac.webkit.org/changeset/289396/webkit/\">r289396</a>)</li>\n<li>Updated an element with both <code>-webkit-user-select: all</code> and <code>-webkit-user-drag: element</code> to get a snapshot as when using only <code>-webkit-user-drag: element</code> (<a href=\"https://trac.webkit.org/changeset/289544/webkit/\">r289544</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Enabled the <code>KeyframeEffect.composite</code> property (<a href=\"https://trac.webkit.org/changeset/290067/webkit/\">r290067</a>)</li>\n<li>Added <code>composite</code> accumulation support for transform properties (<a href=\"https://trac.webkit.org/changeset/289599/webkit/\">r289599</a>)</li>\n<li>Added support for logical properties in JS-originated animations (<a href=\"https://trac.webkit.org/changeset/289216/webkit/\">r289216</a>)</li>\n<li>Aligned animations with different, but compatible, <code>frameRate</code> values (<a href=\"https://trac.webkit.org/changeset/290121/webkit/\">r290121</a>)</li>\n<li>Allowed setting <code>frameRate</code> as an option passed to <code>Element.animate()</code> (<a href=\"https://trac.webkit.org/changeset/290123/webkit/\">r290123</a>)</li>\n<li>Allowed setting <code>frameRate</code> as an option passed to <code>document.timeline.animate()</code> (<a href=\"https://trac.webkit.org/changeset/290125/webkit/\">r290125</a>)</li>\n<li>Changed to properly handle interpolation of non-invertible matrices (<a href=\"https://trac.webkit.org/changeset/289862/webkit/\">r289862</a>)</li>\n<li>Changed to use the animation <code>frameRate</code> during animation resolution and scheduling (<a href=\"https://trac.webkit.org/changeset/290003/webkit/\">r290003</a>)</li>\n<li>Changed <code>Animation.commitStyles()</code> to use the non-animated style (<a href=\"https://trac.webkit.org/changeset/289453/webkit/\">r289453</a>)</li>\n<li>Fixed additive and accumulation interpolation to work correctly with implicit 0% and 100% keyframes (<a href=\"https://trac.webkit.org/changeset/289454/webkit/\">r289454</a>)</li>\n<li>Fixed animating from <code>scale()</code> to <code>scale() translate()</code> (<a href=\"https://trac.webkit.org/changeset/289732/webkit/\">r289732</a>)</li>\n<li>Fixed additive animations to prevent other animations from running accelerated (<a href=\"https://trac.webkit.org/changeset/289605/webkit/\">r289605</a>)</li>\n<li>Fixed recomputing keyframes when changing <code>direction</code> or <code>writing-mode</code> (<a href=\"https://trac.webkit.org/changeset/289426/webkit/\">r289426</a>)</li>\n<li>Fixed clearing computed keyframes when changing <code>direction</code> or <code>writing-mode</code> (<a href=\"https://trac.webkit.org/changeset/289226/webkit/\">r289226</a>)</li>\n<li>Fixed animations associated with a custom effect to appear in  <code>document.getAnimations()</code> result (<a href=\"https://trac.webkit.org/changeset/290122/webkit/\">r290122</a>)</li>\n<li>Implemented parsing and animation support for <code>offset</code> shorthand (<a href=\"https://trac.webkit.org/changeset/289876/webkit/\">r289876</a>)</li>\n</ul>\n<h3>Rendering</h3>\n<ul>\n<li>Fixed tab characters and <code>ch</code> units to obey synthetic bold width adjustments correctly (<a href=\"https://trac.webkit.org/changeset/289609/webkit/\">r289609</a>)</li>\n</ul>\n<h3>Forms</h3>\n<ul>\n<li>Changed input elements to return an empty string for an invalid floating-point number that ends with &#8220;.&#8221; (<a href=\"https://trac.webkit.org/changeset/290124/webkit/\">r290124</a>)</li>\n<li>Fixed selection method return values to match the spec (<a href=\"https://trac.webkit.org/changeset/289813/webkit/\">r289813</a>)</li>\n<li>Fixed light appearance text fields rendering invisible in Increased Contrast mode (<a href=\"https://trac.webkit.org/changeset/290054/webkit/\">r290054</a>)</li>\n<li>Fixed clicking an <code>&lt;input type=\"image\"&gt;</code> submitting the form with a <code>null</code> submitter (<a href=\"https://trac.webkit.org/changeset/289615/webkit/\">r289615</a>)</li>\n<li>Improved <code>applyStep()</code> to match the spec (<a href=\"https://trac.webkit.org/changeset/289465/webkit/\">r289465</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Enabled Shadow Realms support by default (<a href=\"https://trac.webkit.org/changeset/290119/webkit/\">r290119</a>)</li>\n<li>Implemented <code>Temporal.PlainDate</code> behind a flag: <code>__XPC_JSC_useTemporal=1</code> (<a href=\"https://trac.webkit.org/changeset/290209/webkit/\">r290209</a>)</li>\n<li>Optimized JSString’s atomization (<a href=\"https://trac.webkit.org/changeset/289359/webkit/\">r289359</a>)</li>\n</ul>\n<h3>Shared Workers</h3>\n<ul>\n<li>Added support for sharing Shared Workers (including across WebProcesses) (<a href=\"https://trac.webkit.org/changeset/289247/webkit/\">r289247</a>)</li>\n<li>Changed to fail synchronously when constructing a SharedWorker with a URL that is not same-origin (<a href=\"https://trac.webkit.org/changeset/289532/webkit/\">r289532</a>)</li>\n<li>Fixed <code>self.location.href</code> in Shared Workers in case of redirects (<a href=\"https://trac.webkit.org/changeset/289483/webkit/\">r289483</a>)</li>\n</ul>\n<h3>Workers</h3>\n<ul>\n<li>Changed worker scripts to always be decoded as UTF-8 (<a href=\"https://trac.webkit.org/changeset/289489/webkit/\">r289489</a>)</li>\n<li>Fixed <code>WorkerGlobalScope.importScripts()</code> to protect blob URLs that were passed in until the imports are done (<a href=\"https://trac.webkit.org/changeset/289236/webkit/\">r289236</a>)</li>\n<li>Fixed MIME type check for classic worker script fetches (<a href=\"https://trac.webkit.org/changeset/289672/webkit/\">r289672</a>)</li>\n<li>Fixed exceptions to be properly reported when initializing a worker as a module (<a href=\"https://trac.webkit.org/changeset/289479/webkit/\">r289479</a>)</li>\n</ul>\n<h3>Dialog Element</h3>\n<ul>\n<li>Fixed the Dialog element only animating once (<a href=\"https://trac.webkit.org/changeset/289498/webkit/\">r289498</a>)</li>\n<li>Exposed the correct role, subrole, and role description properties for the <code>&lt;dialog&gt;</code> element (<a href=\"https://trac.webkit.org/changeset/289713/webkit/\">r289713</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added support for both versions of ScreenCaptureKit API (<a href=\"https://trac.webkit.org/changeset/289547/webkit/\">r289547</a>)</li>\n<li>Changed to use the system window and screen picker when available (<a href=\"https://trac.webkit.org/changeset/289696/webkit/\">r289696</a>, <a href=\"https://trac.webkit.org/changeset/289701/webkit/\">r289701</a>)</li>\n<li>Fixed settling a fetch promise to be delayed in case the page is entering page cache (<a href=\"https://trac.webkit.org/changeset/289533/webkit/\">r289533</a>)</li>\n<li>Optimized DOM storage event dispatch (<a href=\"https://trac.webkit.org/changeset/290223/webkit/\">r290223</a>)</li>\n</ul>\n<h3>Experimental Model Element</h3>\n<ul>\n<li>Improved sizing on macOS (<a href=\"https://trac.webkit.org/changeset/289495/webkit/\">r289495</a>)</li>\n<li>Made standalone model documents interactive (<a href=\"https://trac.webkit.org/changeset/289666/webkit/\">r289666</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Added support for the <code>browser.action.openPopup()</code> and <code>browser.browserAction.openPopup()</code> API to open the extension popup for a specific window (this is a WECG <a href=\"https://github.com/w3c/webextensions/issues/15\">proposal</a>)</li>\n<li>Added support for the <code>optional_host_permissions</code> manifest key in <code>manifest_version</code> 3 extensions (this is a WECG <a href=\"https://github.com/w3c/webextensions/issues/119\">proposal</a>)</li>\n<li>Added support for <code>browser.runtime.getFrameId()</code> so it easier to get frame identifiers from content scripts (this is a WECG <a href=\"https://github.com/w3c/webextensions/issues/12\">proposal</a>)</li>\n<li>Added support for the <code>frameId</code> option that can be passed to <code>browser.tabs.sendMessage()</code></li>\n<li>Fixed the number returned by <code>parentFrameId</code> for <code>webNavigation</code> and <code>webRequest</code> events to be <code>-1</code> when it is the main frame</li>\n<li>Fixed <code>devtools.panels.onShown</code> so the window object of the panel is sent to the listeners</li>\n<li>Fixed <code>devtools.panels.onShown</code> to prevent it from firing multiple times per active panel change</li>\n<li>Made the <code>devtools</code> API namespace only exposed to the devtools background pages</li>\n</ul>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[New WebKit Features in Safari 15.4]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12445/new-webkit-features-in-safari-15-4/\" />\n\n\t\t<id>https://webkit.org/?p=12445</id>\n\t\t<updated>2022-03-17T23:45:01Z</updated>\n\t\t<published>2022-03-14T17:35:02Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"News\" />\n\t\t<summary type=\"html\"><![CDATA[With over 70 additions to WebKit, Safari 15.4 is packed with new web technologies, updates, and fixes.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12445/new-webkit-features-in-safari-15-4/\"><![CDATA[<p>With over 70 additions to WebKit, Safari 15.4 is packed with new web technologies, updates, and fixes. We’ve assembled a huge release as part of our commitment to web developers, and the people who use the web. This is the first big WebKit release of 2022, and we’re just getting started.</p>\n<p>Safari 15.4 is available for macOS Monterey 12.3, macOS Big Sur, macOS Catalina, iPadOS 15.4, and iOS 15.4. You can update to Safari 15.4 on macOS Big Sur and macOS Catalina by going to System Preferences → Software Update → More info, and choosing to update Safari.</p>\n<h2><a name=\"html\"></a>HTML</h2>\n<p>Let’s start with HTML. WebKit added support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading\">lazy-loading</a> images with the <a href=\"https://html.spec.whatwg.org/multipage/urls-and-fetching.html#lazy-loading-attributes\"><code>loading</code></a> attribute on the <code>&lt;img&gt;</code> element, providing web developers with an easy way to instruct the browser to defer loading certain images until the user scrolls near them.</p>\n<p>After years of standardization debates over accessibility considerations and with a solution finally at hand, WebKit added support for the <a href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element\"><code>&lt;dialog&gt;</code></a> element and <a href=\"https://fullscreen.spec.whatwg.org/#::backdrop-pseudo-element\"><code>::backdrop</code></a> pseudo-element. The <code>&lt;dialog&gt;</code> element provides a robust and powerful way to create overlays and modals.</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">dialog</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"confirmation-dialog\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">h1</span>&gt;</span>Do you want to delete everything?<span class=\"tag\">&lt;/<span class=\"keyword\">h1</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">p</span>&gt;</span>You will lose all your data.<span class=\"tag\">&lt;/<span class=\"keyword\">p</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"cancel-delete\"</span>&gt;</span>Cancel<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"confirm-delete\"</span>&gt;</span>Delete!<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"keyword\">dialog</span>&gt;</span>\n</code></pre>\n<p>The <code>::backdrop</code> pseudo-element makes it possible to style the background underneath the modal.</p>\n<figure class=\"widescreen mattewhite\">\n<dialog>\n<p class=\"big\">This is a pretty dialog</p>\n<p><button onclick=\"document.querySelector('dialog').close()\">Close</button></p>\n</dialog>\n<p><button onclick=\"document.querySelector('dialog').showModal()\">Show the dialog</button><figcaption>Pretty dialog example styled</figcaption></figure>\n<p>You can learn all about using <code>&lt;dialog&gt;</code> and <code>::backdrop</code> in <a href=\"https://webkit.org/blog/12209/introducing-the-dialog-element/\"><em>Introducing the Dialog Element</em></a>.</p>\n<p>WebKit also added support for the global <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#dom-fe-autofocus\"><code>autofocus</code></a> attribute allowing developers to indicate which element should be the one in focus when the page loads or when a <code>&lt;dialog&gt;</code> is displayed.</p>\n<h2><a name=\"css\"></a>CSS</h2>\n<h3><a name=\"features-for-css-architecture\"></a>Features for CSS Architecture</h3>\n<p>Several additions to CSS in 2022 offer revolutionary new ways for web developers to architect their code, making it easier to reuse code, create design systems, and integrate with complex applications.</p>\n<p>Landing <a href=\"https://caniuse.com/css-has\">in Safari first</a>, WebKit added support for the <a href=\"https://www.w3.org/TR/selectors-4/#relational\"><code>:has()</code></a> pseudo-class. This selector fulfills a long-expressed desire for a “parent selector” — a way to apply CSS rules conditionally based on the contents of an element — and goes even further with the possibilities it enables. It was long thought such a selector was not possible, but our team figured out a way to highly-optimize performance and deliver a flexible solution that does not slow the page.</p>\n<p>WebKit added support for <a href=\"https://css-tricks.com/css-cascade-layers/\">Cascade Layers</a> — a powerful way to organize styles into layers where specificity is calculated independently inside each layer.</p>\n<figure class=\"widescreen mattewhite\"><img loading=\"lazy\" class=\"aligncenter preserve-color wp-image-12421\" src=\"https://webkit.org/wp-content/uploads/cascade-layers-1024x576.png\" alt=\"a diagram of cascade layers, showing how Author layers cascade\" width=\"1024\" height=\"576\" srcset=\"https://webkit.org/wp-content/uploads/cascade-layers-1024x576.png 1024w, https://webkit.org/wp-content/uploads/cascade-layers-300x169.png 300w, https://webkit.org/wp-content/uploads/cascade-layers-768x432.png 768w, https://webkit.org/wp-content/uploads/cascade-layers-1536x864.png 1536w, https://webkit.org/wp-content/uploads/cascade-layers-2048x1152.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>A web developer could create a “framework” layer and a “custom” layer — assigning all the CSS from a 3rd-party framework to the “framework” layer, and writing their own code in the “custom” layer. They could designate that everything in the custom layer should beat everything in the framework layer, no matter the specificity of the selectors used in each layer. Cascade Layers is <a href=\"https://caniuse.com/css-cascade-layers\">arriving in all major browsers</a> at about the same time and is included in <a href=\"https://webkit.org/blog/12288/working-together-on-interop-2022/\">Interop 2022</a>, ensuring this is a tool web developers can begin to seriously consider for the future.</p>\n<p>WebKit also added support for <a href=\"https://www.w3.org/TR/css-contain-2\">CSS Containment</a> — all four types: size, layout, style, and paint — with the <code>contain</code> property.</p>\n<h3><a name=\"solving-pain-points\"></a>Solving Pain Points</h3>\n<p>Several more additions to CSS in WebKit introduce solutions to long-standing pain points.</p>\n<p>Web developers often ask for a tool that would work similar to existing viewport units, but work better on mobile devices where the dimensions of the browser’s viewport change as a user scrolls the page. The <a href=\"https://www.w3.org/TR/css-values-4/#viewport-relative-lengths\">new Viewport Units</a> are that solution. <code>100svh</code>  refers to 100% of the height of the smallest possible viewport. <code>100lvh</code> refers to 100% of the height of the largest possible viewport. And <code>100dvh</code> refers to 100% of the dynamic viewport height — meaning the value will change as the user scrolls.</p>\n<figure class=\"widescreen mattewhite\"><img loading=\"lazy\" class=\"aligncenter preserve-color wp-image-12424\" src=\"https://webkit.org/wp-content/uploads/viewport_units-1024x576.png\" alt=\"100svh measures the smallest viewport, top to bottom. 100lvh measures the largest viewport. 100dvh measures the dynamic viewport, changing as the user scrolls.\" width=\"1024\" height=\"576\" srcset=\"https://webkit.org/wp-content/uploads/viewport_units-1024x576.png 1024w, https://webkit.org/wp-content/uploads/viewport_units-300x169.png 300w, https://webkit.org/wp-content/uploads/viewport_units-768x432.png 768w, https://webkit.org/wp-content/uploads/viewport_units-1536x864.png 1536w, https://webkit.org/wp-content/uploads/viewport_units-2048x1151.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>There are other new viewport units as well — <code>svw</code>, <code>lvw</code>, and <code>dvw</code> serve the same purpose for width. To cover the small, large, and dynamic versions of vmin and vmax, the <code>svmin</code>, <code>svmax</code>, <code>lvmin</code>, <code>lvmax</code>, <code>dvmin</code>, and <code>dvmax</code> units were implemented. To support logical dimensions, the new <code>vi</code> and <code>vb</code> are similar to existing Viewport Units, in the viewport inline and viewport block dimensions. And <code>svi</code>, <code>svb</code>, <code>lvi</code>, <code>lvb</code>, <code>dvi</code>, and <code>dvb</code> provide logical dimension units for the small, large, and dynamic versions of the inline and block dimensions. WebKit is happy to lead the pack, <a href=\"https://caniuse.com/viewport-unit-variants\">shipping these new units first</a> and encouraging other browsers to do so through <a href=\"https://webkit.org/blog/12288/working-together-on-interop-2022/\">Interop 2022</a>.</p>\n<p>WebKit added support for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible\"><code>:focus-visible</code></a> pseudo-class to style the focus indicator only when the browser renders it. Learn more by reading <a href=\"https://webkit.org/blog/12179/the-focus-indicated-pseudo-class-focus-visible/\"><em>The Focus-Indicated Pseudo-class :focus-visible</em></a>.</p>\n<p>To make native form controls more customizable, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/accent-color\"><code>accent-color</code></a> property provides a way for web developers to alter the color of particular parts of the form control UI. Accent color is supported for <code>&lt;input type=\"checkbox\"&gt;</code>, <code>&lt;input type=\"radio\"&gt;</code>, <code>&lt;progress&gt;</code>, <code>&lt;select&gt;</code>, and text-input types with a <code>&lt;datalist&gt;</code> on macOS, iPadOS, and iOS. Additionally, on iPadOS and iOS, accent color is supported for <code>&lt;input type=\"range\"&gt;</code>, <code>&lt;button&gt;</code>, and <code>&lt;input type=\"button\"&gt;</code>.</p>\n<p>WebKit fixed a bug with the interpolation between colors with alpha transparency — improving gradient support.</p>\n<figure><img loading=\"lazy\" class=\"aligncenter preserve-color wp-image-12457\" src=\"https://webkit.org/wp-content/uploads/gradient-example-1024x333.png\" alt=\"How a gradient looks before &amp; after this fix. Without the fix, the color is muddy.\" width=\"1024\" height=\"333\" srcset=\"https://webkit.org/wp-content/uploads/gradient-example-1024x333.png 1024w, https://webkit.org/wp-content/uploads/gradient-example-300x98.png 300w, https://webkit.org/wp-content/uploads/gradient-example-768x250.png 768w, https://webkit.org/wp-content/uploads/gradient-example-1536x499.png 1536w, https://webkit.org/wp-content/uploads/gradient-example-2048x666.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>WebKit added support for <a href=\"https://www.w3.org/TR/css-values-4/#trig-funcs\"><code>calc()</code> math functions</a> including <code>sin</code>, <code>cos</code>, <code>tan</code>, <code>e</code>, <code>pi</code>, <code>exp</code>, <code>log</code>, <code>atan</code>, <code>acos</code>, <code>asin</code>, and <code>atan2</code>.</p>\n<h3><a name=\"typography\"></a>Typography</h3>\n<p>Several new WebKit features in Safari 15.4 enrich what’s possible in typography on the web.</p>\n<p>WebKit added support for the <a href=\"https://www.w3.org/TR/css-fonts-4/#font-palette-prop\"><code>font-palette</code></a> CSS property and <a href=\"https://www.w3.org/TR/css-fonts-4/#font-palette-values\"><code>@font-palette-values</code></a> rule. The <code>font-palette</code> property provides a way for web developers to select one of several different pre-defined color palettes contained inside a color font — for example, to declare that a font’s dark color palette be used for the site’s dark mode design. The <code>@font-palette-values</code> rule provides a way for web developers to define their own custom color palette for recoloring color fonts.</p>\n<figure><img loading=\"lazy\" class=\"aligncenter preserve-color wp-image-12459\" src=\"https://webkit.org/wp-content/uploads/color-font-palette-1024x503.png\" alt=\"four versions of a drop cap, in orange, purple, yellow, and black.\" width=\"1024\" height=\"503\" srcset=\"https://webkit.org/wp-content/uploads/color-font-palette-1024x503.png 1024w, https://webkit.org/wp-content/uploads/color-font-palette-300x147.png 300w, https://webkit.org/wp-content/uploads/color-font-palette-768x377.png 768w, https://webkit.org/wp-content/uploads/color-font-palette-1536x754.png 1536w, https://webkit.org/wp-content/uploads/color-font-palette-2048x1005.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>The color font used for the enlarged caps is <a href=\"https://djr.com/notes/bradley-initials-font-of-the-month\">Bradley Initials DJR Web</a>, shown here with its default palette, a customized palette created by the web developer, an alternative palette that’s included with the font, and with color removed by the user’s preference.</figcaption></figure>\n<p>WebKit added support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-skip-ink\"><code>text-decoration-skip-ink</code></a> to control how underlines and overlines are rendered when they pass over glyph ascenders and descenders. WebKit previously supported this typography feature through <code>text-decoration-skip</code>, but since no other browsers yet support this short-hand, WebKit’s support of the long-hand will make it easier to turn off ink skipping for underlines and overlines.</p>\n<p>WebKit added support the <a href=\"https://drafts.csswg.org/css-values-4/#ic\"><code>ic</code> unit</a>, useful when typesetting CJK scripts. Much like how the <code>ch</code> unit is equivalent to the width (or height, whichever is the inline direction) of the <code>0</code> glyph in a font, the <code>ic</code> unit is equivalent to inline direction length (width or height) of the “水” glyph in the element’s current font.</p>\n<h3><a name=\"retiring-webkit-prefixes\"></a>Retiring WebKit prefixes</h3>\n<p>In an ongoing effort to reduce dependency on prefixes, WebKit newly supports several CSS properties and values that were only previous available in an earlier form. The prefixed versions will still work, now aliased to the unprefixed versions. Safari 15.4 added support for:</p>\n<ul>\n<li><code>appearance</code>, including <code>appearance: auto</code></li>\n<li><code>mask</code>, along with the long-hand forms <code>mask-image</code>, <code>mask-size</code>, <code>mask-repeat-x</code>, <code>mask-repeat-y</code>, <code>mask-origin</code></li>\n<li><code>backface-visibility</code> </li>\n<li><code>text-combine-upright</code> </li>\n<li><code>print-color-adjust</code> </li>\n<li><code>match-parent</code> CSS value for the <code>text-align</code> property</li>\n</ul>\n<p>WebKit also removed the non-standard CSS properties <code>-webkit-border-fit</code>, <code>-webkit-margin-collapse</code>, <code>-webkit-margin-top-collapse</code>, <code>-webkit-margin-bottom-collapse</code>, <code>-webkit-margin-before-collapse</code>, <code>-webkit-margin-after-collapse</code>, and <code>-webkit-background-composite</code>.</p>\n<h2><a name=\"web-apis\"></a>Web APIs</h2>\n<p>This release includes many upgrades to Web APIs in WebKit to help web developers deliver better user experiences.</p>\n<p>New support for <a href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#broadcasting-to-other-browsing-contexts\">BroadcastChannel</a> allows tabs, windows, iframes, and Workers from an origin to send messages to each other. This enables experiences like syncing login state for a site across multiple tabs.</p>\n<p>Another new mechanism supported in WebKit is the <a href=\"https://w3c.github.io/web-locks/\">Web Locks API</a> to manage access to a resource as an asynchronous locking control from an origin in tabs, windows, iframes, and Workers.</p>\n<p>Developers can also control scroll behavior for an element with either the CSS <a href=\"https://www.w3.org/TR/css-overflow-3/#smooth-scrolling\"><code>scroll-behavior</code></a>  property or the <code>behavior</code> option in <code>window.scroll()</code>, <code>window.scrollTo()</code>, and <code>window.scrollBy()</code> methods in JavaScript. This new support gives developers the ability to choose between instantly jumping to a position in the viewport or smoothly animating the scroll operation.</p>\n<p>The ResizeObserver API has updated support for the <a href=\"https://drafts.csswg.org/resize-observer/#resizeobserversize\"><code>ResizeObserverSize</code></a> interface used by <code>ResizeObserverEntry</code> to help developers observe changes to an element’s box-sizing properties.</p>\n<p>The addition of <a href=\"https://html.spec.whatwg.org/multipage/structured-data.html#dom-structuredclone\"><code>structuredClone(value)</code></a> provides a utility that uses the structured clone algorithm to synchronously perform a deep copy to clone and transfer objects from the input value.</p>\n<p>WebKit support of the File System Access API with Origin Private File System first shipped in Safari 15.2. This release introduces the <code>getFile()</code> method in <code>FileSystemFileHandle</code> making it more convenient to read a file from the file system. Plus, WebKit updated WriteableStream to work with the File System Access API. For more information, read <a href=\"https://webkit.org/blog/12257/the-file-system-access-api-with-origin-private-file-system/\"><em>File System Access API with Origin Private File System</em></a>.</p>\n<h2><a name=\"javascript\"></a>JavaScript</h2>\n<p>New features and updates to JavaScript bring added convenience for developers. Handy new Array features make it nicer to search starting from the end of an array using the <a href=\"https://github.com/tc39/proposal-array-find-from-last\"><code>findLast()</code> and <code>findLastIndex()</code> methods</a>. These methods help developers avoid the typical approach requiring mutating the array with <code>reverse()</code> first.</p>\n<p>There’s also support for the <a href=\"https://github.com/tc39/proposal-relative-indexing-method\"><code>at()</code></a> method to access an entry at a specified integer index, which notably includes support for using negative integers to start at the end of the array.</p>\n<pre><code class=\"js\"><span class=\"keyword type\">let</span> <span class=\"identifier\">list</span> <span class=\"operator\">=</span> [<span class=\"char\">'banana'</span>,<span class=\"char\">'cherry'</span>,<span class=\"char\">'orange'</span>,<span class=\"char\">'apple'</span>,<span class=\"char\">'kiwi'</span>];\n\n<span class=\"comment\">// Instead of this:\n</span><span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">list</span>[<span class=\"identifier\">list</span>.<span class=\"identifier\">length</span><span class=\"operator\">-</span><span class=\"number\">2</span>]);\n\n<span class=\"comment\">// It's as easy as:\n</span><span class=\"identifier\">console</span>.<span class=\"identifier\">log</span>(<span class=\"identifier\">list</span>.<span class=\"identifier\">at</span>(<span class=\"operator\">-</span><span class=\"number\">2</span>));\n</code></pre>\n<p>The new language utility <a href=\"https://github.com/tc39/proposal-accessible-object-hasownproperty\"><code>Object.hasOwn()</code></a> simplifies detecting when the object has a property itself, one that is not inherited or doesn’t exist.</p>\n<h3><a name=\"internationalization\"></a>Internationalization</h3>\n<p>As the standards process defines more Internationalization features, WebKit continues to add regular updates to its <code>Intl</code> implementation. This release includes identifying the supported values of local time zones, collations, calendars, numbering systems, and currency with the <a href=\"https://tc39.es/proposal-intl-enumeration/\">Intl Enumeration API</a>.</p>\n<p><a href=\"https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.hourCycles\"><code>Intl.Locale</code>, updated to V2</a>, exposes new information that includes calendar-week data such as the first day of the week, text information like writing direction, and other region-dependent defaults such as calendars, 12- or 24-hour cycles, and numbering systems.</p>\n<p>WebKit also updated <a href=\"https://github.com/tc39/proposal-intl-displaynames-v2\"><code>Intl.DisplayNames</code> to V2</a>, adding support for the <code>calendar</code> and <code>dateTimeField</code> names, and the <code>languageDisplay</code> option.</p>\n<p>The <code>selectRange()</code> method added to <code>Intl.PluralRules</code> provides locale-correct pluralization for ranges (e.g. 0-1 items). The <a href=\"https://tc39.es/proposal-intl-numberformat-v3/\"><code>Intl.NumberFormat</code> V3</a> update adds the <code>formatRange()</code> and <code>formatRangeToParts()</code> methods for formatting a number range using locale-aware conventions along with new <code>useGrouping</code>, <code>roundingPriority</code>, <code>roundingIncrement</code>, <code>trailingZeroDisplay</code>, and <code>signDisplay</code> options.</p>\n<p>Finally, <code>Intl.DateTimeFormat</code> includes support for four new <a href=\"https://github.com/tc39/proposal-intl-extend-timezonename\"><code>timeZoneName</code></a> options: <code>shortOffset</code>, <code>longOffset</code>, <code>shortGeneric</code>, and <code>longGeneric</code>.</p>\n<h2><a name=\"web-apps\"></a>Web Apps</h2>\n<p>Web App Manifest and ServiceWorker received updates that improve the user experience for both websites in Safari and web apps saved to the home screen on iOS and iPadOS.</p>\n<p><a href=\"https://w3c.github.io/manifest\">Web App Manifest</a> improvements include ensuring the browser always fetches the manifest file during page load instead of when the user chooses to “Add to Home Screen” from the Share menu. This approach improves reliability, and also allows a manifest file to define the characteristics of a webpage in Safari.</p>\n<p>In addition, declaring icons in a web app manifest file is now supported. Safari and iOS use manifest-declared icons when there is no <code>apple-touch-icon</code> defined in the HTML head, and when the manifest file code for declaring the icons either omits the <code>\"purpose\"</code> key or includes <code>\"purpose\": \"any\"</code>. Defining icons by using <code>apple-touch-icon</code> takes precedence over manifest-declared icons in order to provide consistent behavior for web apps that use this technique to define specific icons for iOS, distinct from other mobile platforms.</p>\n<p>Developers can now enable <a href=\"https://w3c.github.io/ServiceWorker/#service-worker-registration-navigationpreload\">Navigation Preload in ServiceWorker</a> to improve load performance and avoid ServiceWorker startup delays that block network requests. There’s also new support for allowing users to download files generated by a ServiceWorker. WebKit also improved the reliability of using Fetch using <code>FormData</code> with a file going through ServiceWorker.</p>\n<h2><a name=\"media\"></a>Media</h2>\n<p>The WebRTC negotiation API is now fully aligned with the WebRTC 1.0 specification to support <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Perfect_negotiation\">WebRTC perfect negotiation</a>. It is an approach that solves potential synchronization issues that can happen during negotiation between two remote peers.</p>\n<p>WebKit added support for in-band chapter tracks for audio and video. In-band text tracks provide captions or chapter marker information inside the container for the media itself, instead of being declared in HTML or injected with JavaScript. In-band caption tracks like <a href=\"https://en.wikipedia.org/wiki/EIA-608\">CEA-608</a> were already supported. Now, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/kind\">in-band chapter tracks</a> are also supported, where the “cue” represents the start time and title of a chapter.</p>\n<p>WebKit added support for <a href=\"https://web.dev/requestvideoframecallback-rvfc/\"><code>requestVideoFrameCallback()</code></a> on <code>&lt;video&gt;</code>, which allows the caller to be notified when there&#8217;s a new video frame available for display, and also provides metadata about that frame.</p>\n<h2><a name=\"privacy\"></a>Privacy</h2>\n<p>Continuing our dedication to privacy, and to further our proposed web standard for measuring advertising in a privacy-preserving way, Safari 15.4 provides three updates to <a href=\"https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/\">Private Click Measurement</a>:</p>\n<ul>\n<li>Added conversion fraud prevention via unlinkable tokens for triggering events on merchant websites.</li>\n<li>Added support for same-site conversion pixels on merchant websites, to remove dependency on cross-site pixels.</li>\n<li>Allowed measurement of links in nested, cross-site iframes on publisher websites.</li>\n</ul>\n<h2><a name=\"security\"></a>Security</h2>\n<p>WebKit in Safari 15.4 improves support for <a href=\"https://www.w3.org/TR/CSP3/\">Content Security Policy Level 3</a>, providing enhanced security control over the loading of content, and helping web developers to mitigate risks of cross-site scripting and other vulnerabilities. Blocked resource violation reporting for inline script, inline style and eval execution is updated to match web standards. New support for  <code>'strict-dynamic'</code>,  <code>'unsafe-hashes'</code>, and  <code>'report-sample'</code> source expressions give developers more flexibility. Developers can also safely include external JavaScript in their pages using new support for hash source expressions.</p>\n<p>The release also removes support for the XSS Auditor, which has been superseded by modern cross-origin defenses like CSP and COEP.</p>\n<h2><a name=\"wkwebview\"></a>WKWebView</h2>\n<p>Developers that use WKWebView, including third-party browsers on iOS and iPadOS, can make use of new WKPreferences for additional user experience control. Apps on iOS, iPadOS, and macOS can now control allowing or preventing web content from using the <a href=\"https://fullscreen.spec.whatwg.org/#ref-for-dom-element-requestfullscreen\">Fullscreen API</a>. Another new preference allows enabling or disabling site-specific quirks, a set of site-specific behaviors designed to improve web compatibility.</p>\n<p>On iPadOS, web content that uses Media Source Extensions now works in WKWebView.</p>\n<h2><a name=\"safari-web-extensions\"></a>Safari Web Extensions</h2>\n<p>In our ongoing commitment to a <a href=\"https://www.w3.org/community/webextensions/2021/06/04/forming-the-wecg/\">cross-browser interoperable model for extensions</a>, Safari 15.4 includes additional support for Web Extensions, including support for <code>manifest_version</code> 3 and related API changes. New capabilities include:</p>\n<ul>\n<li><code>service_worker</code> background scripts as an alternative to non-persistent background pages.</li>\n<li>Script and style injection via the <code>browser.scripting</code> APIs.</li>\n<li>Dynamic and session rules via the <code>browser.declarativeNetRequest</code> APIs.</li>\n<li>Webpage-to-extension messaging using <code>externally_connectable:matches.</code></li>\n</ul>\n<p>And several issues were resolved, including:</p>\n<ul>\n<li>Limits are now enforced on the size and number of items in extension sync storage.</li>\n<li>More directives are now allowed to be included in the <code>content_security_policy</code> of an extension’s manifest, such as the <code>sandbox</code> directive.</li>\n<li>Special matching characters (<code>*</code>, <code>|</code>, <code>||</code>, and <code>^</code>) in <code>urlFilter</code> of <code>declarativeNetRequest</code> rules are now handled, instead of being treated as regex patterns.</li>\n<li><code>Promise</code> returns from <code>runtime.onMessage</code> listeners are now allowed for the message reply.</li>\n</ul>\n<h2><a name=\"web-inspector\"></a>Web Inspector</h2>\n<p>Updates to Web Inspector provide helpful new tools for working with CSS in the Styles panel, including intuitive support for Cascade Layers and the new <code>@layer</code> rulesets, making it easy to identify in which layer a rule is defined.</p>\n<p>There are also new CSS Alignment controls when using <code>align-content</code>, <code>align-items</code>, <code>align-self</code>, <code>justify-content</code>, <code>justify-items</code>, or <code>justify-self</code> for Flexbox and Grid to visually identify and select an ideal value.</p>\n<figure class=\"widescreen mattewhite\"><video controls=\"\" loop=\"\" muted=\"\" autoplay=\"\" width=\"100%\"><source src=\"https://webkit.org/wp-content/uploads/alignment-editor-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/alignment-editor.mp4\" type=\"video/mp4\"></video></figure>\n<p>While adding new properties or values in the Styles panel, Web Inspector offers convenient auto-completion options. This release upgrades auto-completion to use fuzzy matching, making finding the right option even easier.</p>\n<p>When working with CSS custom properties, or CSS variables as they’re more widely known, a common practice is to add them to a selector rule for <code>:root</code> or <code>html</code>. Unfortunately, this leads to a long list of inherited CSS variables for every element on the page. Web Inspector helps you handle this in a few ways. First, it hides unused inherited CSS variables automatically. Then, a button is available to reveal them all when you need to see them. You can also use the filter tools to search for the right CSS variable. Or, you can see all applicable CSS variables grouped by value type in the Computed panel, allowing you to collapse the groups that aren’t relevant to your task.</p>\n<figure><video controls=\"\" loop=\"\" muted=\"\" autoplay=\"\" width=\"305\" height=\"420\" style=\"clip-path: inset(2px 0 2px 0)\" poster=\"https://webkit.org/wp-content/uploads/video-variables-grouped-light.jpeg\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-grouped-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-grouped-light.mp4\" type=\"video/mp4\"></video><figcaption>The list of applicable CSS variables can be grouped by value type into collapsible subsections: colors, dimensions and other types.</figcaption></figure>\n<p>Learn more by reading <a href=\"https://webkit.org/blog/12303/css-variables-web-inspector/\"><em>Taming CSS Variables with Web Inspector</em></a>.</p>\n<h2><a name=\"feedback\"></a>Feedback</h2>\n<p>We love hearing from you. Send a tweet to <a href=\"https://twitter.com/webkit\">@webkit</a>, <a href=\"https://twitter.com/jensimmons\">@jensimmons</a> or <a href=\"https://twitter.com/jonathandavis\">@jonathandavis</a> to share your thoughts on this release. What technology from Safari 15.4 are you most excited about? What features or fixes do you want to see next? If you run into any issues, we welcome your <a href=\"https://feedbackassistant.apple.com/\">feedback</a> on the Safari UI or your <a href=\"https://bugs.webkit.org/\">WebKit bug report</a> about web technology. Filing issues really does make a difference.</p>\n<p>Download the latest <a href=\"https://developer.apple.com/safari/download/\">Safari Technology Preview</a> to stay at the forefront of the web platform and  to use the latest Web Inspector features. You can also use the <a href=\"https://webkit.org/status\">WebKit Feature Status</a> page to watch for new information about the web features that interest you the most.</p>\n<h2><a name=\"and-more\"></a>And More</h2>\n<p>To see the full list of what’s in WebKit for Safari 15.4, including additional bug fixes, read the <a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-15_4-release-notes\">Safari 15.4 release notes</a>.</p>\n<p>These features were first released in Safari Technology Preview: <a href=\"https://webkit.org/blog/11958/release-notes-for-safari-technology-preview-130/\">130</a>, <a href=\"https://webkit.org/blog/11962/release-notes-for-safari-technology-preview-131/\">131</a>, <a href=\"https://webkit.org/blog/11971/release-notes-for-safari-technology-preview-132/\">132</a>, <a href=\"https://webkit.org/blog/11975/release-notes-for-safari-technology-preview-133/\">133</a>, <a href=\"https://webkit.org/blog/12033/release-notes-for-safari-technology-preview-134/\">134</a>, <a href=\"https://webkit.org/blog/12040/release-notes-for-safari-technology-preview-135/\">135</a>, <a href=\"https://webkit.org/blog/12137/release-notes-for-safari-technology-preview-136/\">136</a>, <a href=\"https://webkit.org/blog/12156/release-notes-for-safari-technology-preview-137/\">137</a>, <a href=\"https://webkit.org/blog/12176/release-notes-for-safari-technology-preview-138/\">138</a>, and <a href=\"https://webkit.org/blog/12193/release-notes-for-safari-technology-preview-139/\">139</a>.</p>\n]]></content>\n\t\t\n\t\t<link href=\"https://webkit.org/wp-content/uploads/alignment-editor-dark.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/alignment-editor.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/video-variables-grouped-dark.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/video-variables-grouped-light.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Release Notes for Safari Technology Preview 141]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12434/release-notes-for-safari-technology-preview-141/\" />\n\n\t\t<id>https://webkit.org/?p=12434</id>\n\t\t<updated>2022-03-04T00:20:54Z</updated>\n\t\t<published>2022-03-04T00:20:54Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Safari Technology Preview\" />\n\t\t<summary type=\"html\"><![CDATA[Safari Technology Preview Release 141 is now available for download for macOS Big Sur and of macOS Monterey.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12434/release-notes-for-safari-technology-preview-141/\"><![CDATA[<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 141 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=288438&amp;rev=289213&amp;limit=775\">288438-289213</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Sources Tab\n<ul>\n<li>Enabled automatic collapsing of blackboxed call frames (<a href=\"https://trac.webkit.org/changeset/288580/webkit/\">r288580</a>)</li>\n</ul>\n</li>\n<li>Network Tab\n<ul>\n<li>Collapsed resource type filter scope bar into a single button to save space (<a href=\"https://trac.webkit.org/changeset/288469/webkit/\">r288469</a>)</li>\n<li>Changed the Ignore Caches icon to be a button with a label so it&#8217;s more visible and immediately understandable (<a href=\"https://trac.webkit.org/changeset/288533/webkit/\">r288533</a>)</li>\n<li>Moved the Group Media Requests and Preserve Log checkboxes into a single filter icon that shows a contextmenu with those options when clicked to save space (<a href=\"https://trac.webkit.org/changeset/288470/webkit/\">r288470</a>)</li>\n</ul>\n</li>\n<li>Graphics Tab\n<ul>\n<li>Added the display of more pseudo-elements than <code>::before</code> and <code>::after</code> (<a href=\"https://trac.webkit.org/changeset/288623/webkit/\">r288623</a>)</li>\n</ul>\n</li>\n<li>Console Tab\n<ul>\n<li>Moved the Preserve Log checkbox into a single filter icon that shows a contextmenu with those options when clicked to save space (<a href=\"https://trac.webkit.org/changeset/288702/webkit/\">r288702</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Enabled support for <code>overflow: clip</code> (<a href=\"https://trac.webkit.org/changeset/288973/webkit/\">r288973</a>)</li>\n<li>Implemented CSS <code>overscroll-behavior</code> for asynchronous scrolling on macOS (<a href=\"https://trac.webkit.org/changeset/288777/webkit/\">r288777</a>)</li>\n<li>Fixed removal of not yet loaded CSS <code>@import</code> (<a href=\"https://trac.webkit.org/changeset/288879/webkit/\">r288879</a>)</li>\n<li>Fixed CSS Grid shorthand expansion of initial values (<a href=\"https://trac.webkit.org/changeset/288544/webkit/\">r288544</a>)</li>\n<li>Fixed <code>scroll-margin-top</code> on inline elements (<a href=\"https://trac.webkit.org/changeset/288947/webkit/\">r288947</a>)</li>\n</ul>\n<h3>Forms</h3>\n<ul>\n<li>Fixed the value not changing for <code>stepUp()</code> and <code>stepDown()</code> with out-of-range values (<a href=\"https://trac.webkit.org/changeset/289075/webkit/\">r289075</a>)</li>\n<li>Fixed grouping radio buttons with no form owner (<a href=\"https://trac.webkit.org/changeset/288734/webkit/\">r288734</a>)</li>\n<li>Used <code>min</code> as the default value when <code>min</code> is greater than <code>max</code> for <code>&lt;input type=\"range\"&gt;</code> (<a href=\"https://trac.webkit.org/changeset/289209/webkit/\">r289209</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Added support for the WASM branch hinting proposal (<a href=\"https://trac.webkit.org/changeset/288758/webkit/\">r288758</a>, <a href=\"https://trac.webkit.org/changeset/288761/webkit/\">r288761</a>)</li>\n<li>Added support for the import assertion syntax behind a flag (<a href=\"https://trac.webkit.org/changeset/288473/webkit/\">r288473</a>)</li>\n<li>Fixed object literal to properly resolve a name clash between an accessor and a constant property (<a href=\"https://trac.webkit.org/changeset/289166/webkit/\">r289166</a>)</li>\n</ul>\n<h3>Experimental Model Element</h3>\n<ul>\n<li>Allowed disabling interaction (<a href=\"https://trac.webkit.org/changeset/288728/webkit/\">r288728</a>)</li>\n<li>Fixed mouse interaction flipped in the y-axis (<a href=\"https://trac.webkit.org/changeset/288610/webkit/\">r288610</a>)</li>\n<li>Fixed <code>&lt;model&gt;</code> to not be draggable on macOS (<a href=\"https://trac.webkit.org/changeset/288723/webkit/\">r288723</a>)</li>\n</ul>\n<h3>Payment Request</h3>\n<ul>\n<li>Allowed additional payment method specific data to be passed to <code>complete()</code> (<a href=\"https://trac.webkit.org/changeset/288698/webkit/\">r288698</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Fixed accelerated transform animations that start with a 1ms delay (<a href=\"https://trac.webkit.org/changeset/289211/webkit/\">r289211</a>)</li>\n<li>Fixed de-duplication for <code>@keyframes</code> rules to account for <code>animation-composition</code> (<a href=\"https://trac.webkit.org/changeset/288571/webkit/\">r288571</a>)</li>\n<li>Fixed the ability to redefine <code>@keyframes</code> (<a href=\"https://trac.webkit.org/changeset/288882/webkit/\">r288882</a>)</li>\n<li>Fixed using logical properties in the <code>transition</code> syntax (<a href=\"https://trac.webkit.org/changeset/289161/webkit/\">r289161</a>)</li>\n<li>Resolved logical properties when compiling the list of transition properties (<a href=\"https://trac.webkit.org/changeset/289167/webkit/\">r289167</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Changed the HTMLMediaElement to dispatch the resize event asynchronously (<a href=\"https://trac.webkit.org/changeset/289108/webkit/\">r289108</a>)</li>\n<li>Changed to remove customElements when transitioning documents (<a href=\"https://trac.webkit.org/changeset/288450/webkit/\">r288450</a>)</li>\n<li>Fixed slow, CPU-bound <code>file.stream()</code> (<a href=\"https://trac.webkit.org/changeset/288463/webkit/\">r288463</a>)</li>\n<li>Fixed Geolocation API to callback with an error if the document is not fully active (<a href=\"https://trac.webkit.org/changeset/288707/webkit/\">r288707</a>)</li>\n<li>Fixed ServiceWorkerNavigationPreloader to only be used once (<a href=\"https://trac.webkit.org/changeset/288949/webkit/\">r288949</a>)</li>\n<li>Implemented <code>AbortSignal.timeout()</code> (<a href=\"https://trac.webkit.org/changeset/289058/webkit/\">r289058</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Allowed use of hardware-fixed credentials while using “Syncing Platform Authenticator” (<a href=\"https://trac.webkit.org/changeset/289059/webkit/\">r289059</a>)</li>\n<li>Added authenticator attachment to <code>PublicKeyCredential</code> (<a href=\"https://trac.webkit.org/changeset/288622/webkit/\">r288622</a>)</li>\n</ul>\n<h3>Content Security Policy</h3>\n<ul>\n<li>Fixed returned WebAssembly error type when blocked (<a href=\"https://trac.webkit.org/changeset/288992/webkit/\">r288992</a>)</li>\n<li>Fixed blocking image content in object elements (<a href=\"https://trac.webkit.org/changeset/288792/webkit/\">r288792</a>)</li>\n<li>Implemented <code>wasm-unsafe-eval</code> (<a href=\"https://trac.webkit.org/changeset/289022/webkit/\">r289022</a>)</li>\n</ul>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Working together on Interop 2022]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12288/working-together-on-interop-2022/\" />\n\n\t\t<id>https://webkit.org/?p=12288</id>\n\t\t<updated>2022-03-11T18:22:45Z</updated>\n\t\t<published>2022-03-03T17:00:44Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"News\" /><category scheme=\"https://webkit.org\" term=\"Standards\" />\n\t\t<summary type=\"html\"><![CDATA[From the very beginning, the web was always intended to work in any browser, on any computer.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12288/working-together-on-interop-2022/\"><![CDATA[<p>From the very beginning, the web was always intended to work in any browser, on any computer. This is possible through <em>interoperability</em> — when each underlying web technology is implemented in the same way in every browser. To reach interoperability, it takes a commitment from all browser engineers to implement web technology according to web standards — the incredibly detailed specifications where new technology is defined.</p>\n<p>In 2022, Apple, <a href=\"https://bocoup.com/blog/interop-2022\">Bocoup</a>, <a href=\"https://web.dev/interop-2022/\">Google</a>, <a href=\"https://igalia.com/news/interop2022.html\">Igalia</a>, <a href=\"https://aka.ms/microsoft-interop2022\">Microsoft</a>, and <a href=\"https://hacks.mozilla.org/2022/03/interop-2022/\">Mozilla</a> have come together to commit to improve interoperability in 15 key areas that will have the most impact on web developer experience, in a project called Interop 2022.</p>\n<p>At its root, Interop 2022 is an evolving metric generated from a set of automated tests that aims to evaluate support for certain web standards that are most important for web developers. The <a href=\"https://wpt.fyi/interop-2022\">Interop 2022 dashboard</a> will constantly update throughout the year, showing progress as browser engineers fix bugs, implement new features, and improve the tests.</p>\n<figure class=\"mattewhite\"><img loading=\"lazy\" class=\"aligncenter preserve-color wp-image-12343\" src=\"https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-7.58.05-PM.png\" alt=\"a screenshot of the Interop 2022 dashboard, showing starting scores of: Chrome and Edge Dev, 71. Firefox Nightly, 74. And Safari Technology Preview: 73.\" width=\"1024\" height=\"868\" srcset=\"https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-7.58.05-PM.png 1380w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-7.58.05-PM-300x254.png 300w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-7.58.05-PM-1024x868.png 1024w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-7.58.05-PM-768x651.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>The current overall score on the Interop 2022 dashboard on March 3, 2022.</figcaption></figure>\n<p>The group planning Interop 2022 chose ten new focus areas to add to the five areas from Compat 2021. We also committed to several investigation projects, which will begin this spring.</p>\n<figure class=\"mattewhite\"><img loading=\"lazy\" class=\"aligncenter preserve-color wp-image-12344\" src=\"https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-8.08.18-PM.png\" alt=\"a screenshot of the Interop 2022 dashboard, showing the data table of the 15 focus areas, with the percentage supported for each browser\" width=\"943\" height=\"1024\" srcset=\"https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-8.08.18-PM.png 1390w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-8.08.18-PM-276x300.png 276w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-8.08.18-PM-943x1024.png 943w, https://webkit.org/wp-content/uploads/Screen-Shot-2022-02-21-at-8.08.18-PM-768x834.png 768w\" sizes=\"(max-width: 943px) 100vw, 943px\" /><figcaption>The scoring breakdown on the Interop 2022 dashboard on March 3, 2022.</figcaption></figure>\n<h2>Focus areas</h2>\n<p>Chosen from a <a href=\"https://github.com/web-platform-tests/interop-2022/issues?q=is%3Aissue+label%3Aproposal+sort%3Acreated-asc\">list of proposals</a>, with an eye to what web designers &amp; developers want and need most, the ten new focus areas for 2022 are:</p>\n<ol>\n<li>Cascade Layers</li>\n<li>Color Spaces and Functions</li>\n<li>Containment</li>\n<li>Dialog Element</li>\n<li>Form Fixes</li>\n<li>Scrolling</li>\n<li>Subgrid</li>\n<li>Typography and Encodings</li>\n<li>Viewport Units</li>\n<li>Web Compat</li>\n</ol>\n<p>Let’s take a quick tour of each.</p>\n<h4>Cascade Layers</h4>\n<p>Designed to soothe the frustrations of web developers wrestling with CSS on large projects, <a href=\"https://www.w3.org/TR/css-cascade-5/#layering\">Cascade Layers</a> provides a powerful way to organize styles into layers, where specificity is calculated independently inside each layer.</p>\n<figure><img loading=\"lazy\" class=\"aligncenter preserve-color preserve-brightness wp-image-12421\" src=\"https://webkit.org/wp-content/uploads/cascade-layers-1024x576.png\" alt=\"a diagram of cascade layers, showing how Author layers cascade\" width=\"1024\" height=\"576\" srcset=\"https://webkit.org/wp-content/uploads/cascade-layers-1024x576.png 1024w, https://webkit.org/wp-content/uploads/cascade-layers-300x169.png 300w, https://webkit.org/wp-content/uploads/cascade-layers-768x432.png 768w, https://webkit.org/wp-content/uploads/cascade-layers-1536x864.png 1536w, https://webkit.org/wp-content/uploads/cascade-layers-2048x1152.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>A website could create a “framework” layer and a “custom” layer — assigning all the CSS from a 3rd-party framework to framework layer, writing their own code in the custom layer. They could designate that everything in the custom layer should beat everything in the framework layer, no matter the specificity of the selectors being used.</p>\n<h4>Color Spaces and Functions</h4>\n<p>In the early days of the web, most sites restricted their use of color to a specific palette of 216 colors. Then for a long time, web developers used anything in the sRGB color space, and typically expressed those colors in hexadecimal, <code>rgb()</code>, <code>rgba()</code>, or <code>hsl()</code>. Meanwhile, camera and monitor technology have greatly evolved to capture and display a wider and brighter range of colors. Today’s Apple displays support the Display P3 color space, which is about 50% wider than sRGB.</p>\n<p>New color functions and support for new color spaces bring this vibrancy to the web. Interop 2022 includes testing for support of three expanded color spaces (LAB, LCH, P3), and two ways to write color in CSS through functional notation: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix()\"><code>color-mix</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-contrast()\"><code>color-contrast</code></a>.</p>\n<p>Learn more about color spaces and functions in <em><a href=\"https://webkit.org/blog/6682/improving-color-on-the-web/\">Improving Color on the Web</a></em>, <a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\"><em>Wide Gamut Color in CSS with Display-P3</em></a>, and <em><a href=\"https://webkit.org/blog/12058/wide-gamut-2d-graphics-using-html-canvas/\">Wide Gamut 2D Graphics using HTML Canvas</a></em>.</p>\n<h4>Containment</h4>\n<p>For several years now, web developers’ number one most requested addition to the web has been <a href=\"https://drafts.csswg.org/css-contain-3/#container-queries\">Container Queries</a>. It will be a powerful tool in CSS for identifying and measuring the size of a specific container, and then conditionally applying styles based on that size. It’s like media queries, but instead of measuring the size of the viewport, you measure the size of a box holding the content.</p>\n<p><a href=\"https://www.w3.org/TR/2020/WD-css-contain-2-20201216/\">Containment</a> is foundational to making Container Queries work. In fact, Container Queries is defined in <a href=\"https://www.w3.org/TR/2021/WD-css-contain-3-20211221/\">level 3</a> of the Containment specification. The group driving Interop 2022 didn’t come to consensus to include Container Queries this year. But we did agree to focus on the interoperability of layout, size, and paint containment through the <code>containment</code> property, setting the stage for prioritizing the interoperability of the rest of Containment and Container Queries in the future.</p>\n<h4>Dialog Element</h4>\n<p>Another long-requested feature for the web, the dialog element provides a robust and powerful way to create overlays and modals. The <code>::backdrop</code> pseudo-element makes it possible to style the background underneath the modal. You can learn more about how to use <code>&lt;dialog&gt;</code> and <code>::backdrop</code> in <em><a href=\"https://webkit.org/blog/12209/introducing-the-dialog-element/\">Introducing the Dialog Element</a>.</em></dialog>\n<h4>Form Fixes</h4>\n<p>Forms are another area where web designers and developers find interoperability challenges — ones that the <a href=\"https://open-ui.org/\">Open UI</a> community group and appropriate standards bodies are working to solve. Interop 2022 is contributing to this work by focusing on improving the pass rates for existing tests of existing specs. This includes the <a href=\"https://drafts.csswg.org/css-ui/#appearance-switching\"><code>appearance</code></a> property, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel\"><code>&lt;form&gt;</code></a>, events on <a href=\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#enabling-and-disabling-form-controls%3A-the-disabled-attribute\">disabled form controls</a>, and bugs with input elements, form submission, and form validation.</p>\n<h4>Scrolling</h4>\n<p>Today’s websites and web apps care more deeply about how scrolling works than ever before. <a href=\"https://drafts.csswg.org/css-scroll-snap-1/\">Scroll snap</a> provides the tools for designers and developers to control how interfaces scroll and how content appears. The <a href=\"https://www.w3.org/TR/css-overflow-3/#smooth-scrolling\"><code>scroll-behavior</code></a> property in CSS sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs. The <a href=\"https://drafts.csswg.org/css-overscroll/\"><code>overscroll-behavior</code></a> CSS property determines what a browser does when reaching the boundary of a scrolling area.</p>\n<h4>Subgrid</h4>\n<p>CSS Grid <a href=\"https://caniuse.com/css-grid\">shipped five years ago</a> in March 2017, revolutionizing what’s possible in layout design on the web. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid\">Subgrid</a> is defined in <a href=\"https://www.w3.org/TR/css-grid-2/\">CSS Grid level 2</a>, and provides an easy way to put grandchildren of a grid container on that grid. It will make it possible to line up items across complex layouts, without any regard for the DOM structure. The vision of a working layout system on the web will be more fully realized with Grid and Subgrid together.</p>\n<h4>Typography and Encodings</h4>\n<p>Typography and encodings encompasses a collection of tests that impact typography on the web. <a href=\"https://www.w3.org/TR/css-fonts-4/#font-rend-props\">Font Features</a> are powerful properties for refining typography, but incomplete support has been making them harder to use then they’re supposed to be. The vast majority of the encoding tests pass in every browser, but a handful do not, so they’ve been included. And the <code>ic</code> unit is included.</p>\n<h4>Viewport Units</h4>\n<p>Web developers often ask for a tool that would work similar to viewport units, but work better on mobile devices where the dimensions of the browser’s viewport change as a user scrolls the page. The <a href=\"https://www.w3.org/TR/css-values-4/#viewport-relative-lengths\">new Viewport Units</a> are that solution. <code>100svh</code> refers to 100% of the height of the smallest possible viewport. <code>100lvh</code> refers to 100% of the height of the largest possible viewport. <code>100dvh</code> refers to 100% of the dynamic viewport height — meaning the value will change as the user scrolls.</p>\n<figure><img loading=\"lazy\" class=\"aligncenter preserve-color preserve-brightness wp-image-12424\" src=\"https://webkit.org/wp-content/uploads/viewport_units.png\" alt=\"100svh measures the smallest viewport, top to bottom. 100lvh measures the largest viewport. 100dvh measures the dynamic viewport, changing as the user scrolls.\" width=\"1024\" height=\"576\" srcset=\"https://webkit.org/wp-content/uploads/viewport_units.png 3134w, https://webkit.org/wp-content/uploads/viewport_units-300x169.png 300w, https://webkit.org/wp-content/uploads/viewport_units-1024x576.png 1024w, https://webkit.org/wp-content/uploads/viewport_units-768x432.png 768w, https://webkit.org/wp-content/uploads/viewport_units-1536x864.png 1536w, https://webkit.org/wp-content/uploads/viewport_units-2048x1151.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n<p>There are other new viewport units as well — <code>svw</code>, <code>lvw</code>, and <code>dvw</code> serve the same purpose, for width. And there are new units to refer to the inline or block dimensions of the viewport.</p>\n<h4>Web Compatibility</h4>\n<p>There are many scenarios that could impact web compatibility. For example, specific bugs in browsers could disproportionately cause some websites to not work as intended, or perhaps one browser may vary from the web standard, causing an inconsistent and buggy experience for website or web app users. Interop 2022 aims to capture and address these issues through the web compatibility measurement.</p>\n<h4>Investigation Projects</h4>\n<p>There were several other items that the group knows are important to web development, but which cannot yet be easily evaluated by automated testing. We’ve committed to embark on several investigations in these areas — to manually test browsers, to determine if and how automated testing could be more helpful, to improve the infrastructure of WPT itself, to discover where there might still be a lack of interop, and to make suggestions to the appropriate standards groups. The three areas of investigation are:</p>\n<ul>\n<li>Editing, contenteditable, and execCommand</li>\n<li>Pointer and Mouse Events</li>\n<li>Viewport Measurement</li>\n</ul>\n<p>Each browser will always have the same result for “2022 Investigation”, based on how much work has been accomplished by the group as a whole.</p>\n<h2>Our Commitment to Interoperability</h2>\n<p>All of these technologies are important to Apple and to everyone working on WebKit. We care deeply about the health of the web, and interoperable implementations of web standards. We welcome collaboration with our colleagues in the many web standards organizations, and in Interop 2022 to make the web as interoperable as it can be. Because that’s how websites and web apps will work best for the people who matter most — everyday people using the web to live their lives.</p>\n<h2>For more</h2>\n<p>Read more about Interop 2022 in articles from <a href=\"https://bocoup.com/blog/interop-2022\">Bocoup</a>, <a href=\"https://web.dev/interop-2022/\">Google</a>, <a href=\"https://igalia.com/news/interop2022.html\">Igalia</a>, <a href=\"https://aka.ms/microsoft-interop2022\">Microsoft</a>, and <a href=\"https://hacks.mozilla.org/2022/03/interop-2022/\">Mozilla</a>.</p>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Taming CSS Variables with Web Inspector]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12303/css-variables-web-inspector/\" />\n\n\t\t<id>https://webkit.org/?p=12303</id>\n\t\t<updated>2022-03-02T17:17:29Z</updated>\n\t\t<published>2022-03-02T17:00:42Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Web Inspector\" />\n\t\t<summary type=\"html\"><![CDATA[CSS Custom Properties, better known as CSS variables, have been widely adopted by web designers to build reusable and configurable design systems.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12303/css-variables-web-inspector/\"><![CDATA[<p>CSS Custom Properties, better known as CSS variables, have been widely adopted by web designers to build reusable and configurable design systems. One common approach is to define most CSS variables in a CSS rule with a selector for a root element such as <code>html</code> or <code>:root</code>.</p>\n<p>While this has the benefit of putting them all in one easy to find place, it has a side effect: because CSS variables are inheritable, all descendant elements effectively inherit all variables from ancestors. This behavior is what enables you to use a CSS variable defined at a higher level on the styles of an element that is deeply nested within the document.</p>\n<figure class=\"widescreen mattewhite\">\n<p><video controls loop width=305 height=420 style=\"clip-path: inset(3px 0 0 1px)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-scroll-inherited-light.mp4\" type=\"video/mp4\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-scroll-inherited-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme: dark)\"></video><figcaption>Descendant elements inherit all CSS variables from their ancestor elements. This can result in very long lists of inherited properties in the Styles panel.</figcaption></figure>\n<p>When an element inherits a large number of CSS variables, inspecting its styles can become overwhelming. Likewise, identifying a particular CSS variable to reuse becomes more difficult because you have to search through a large list of them.</p>\n<p>Over the past few releases, Web Inspector in Safari Technology Preview has introduced some features to help you when working on projects that use large numbers of CSS variables.</p>\n<h2>Hiding Unused CSS Variables</h2>\n<p>Of all inherited CSS variables, only a few are actually used on the styles of any one element. To reduce visual clutter in the <a href=\"https://webkit.org/web-inspector/elements-tab/#styles-panel\" rel=\"noopener\" target=\"_blank\">Styles panel</a>, unused inherited CSS variables are automatically hidden. They’re replaced with a button that reveals them on click.</p>\n<p>This helps focus your attention on just the styles that took effect on the inspected element.</p>\n<figure class=\"widescreen mattewhite\">\n<p><video controls loop width=305 height=420 style=\"clip-path: inset(3px 0 2px 0)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-show-hidden-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-show-hidden-light.mp4\" type=\"video/mp4\"></video><figcaption>Unused inherited CSS variables are automatically hidden behind a button that reveals them on click.</figcaption></figure>\n<h2>Searching for CSS Variables</h2>\n<p>The <a href=\"https://webkit.org/web-inspector/elements-tab/#computed-panel\" rel=\"noopener\" target=\"_blank\">Computed panel</a> in Web Inspector has a section that lists all CSS variables applicable to the inspected element. This list of properties can help you when searching for a CSS variable to reuse.</p>\n<p>Use the filter input field to narrow down the list if you know roughly what you’re looking for, either part of the CSS variable name or part of the value.</p>\n<figure class=\"widescreen mattewhite\">\n<p><video controls loop width=305 height=420 style=\"clip-path: inset(2px 0 2px 0)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-ungrouped-filtered-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-ungrouped-filtered-light.mp4\" type=\"video/mp4\"></video><figcaption>Find all CSS variables applicable to the selected element in the Variables section of the Computed panel. Filter the list using the filter input field at the bottom of the panel.</figcaption></figure>\n<h2>Grouping CSS Variables</h2>\n<p><a href=\"https://webkit.org/blog/12176/release-notes-for-safari-technology-preview-138/\" target=\"_blank\" rel=\"noopener\">Safari Technology Preview 138</a> introduced the ability to view this list grouped by value type. This creates separate subsections for CSS variables with values such as colors, numbers, dimensions (numbers followed by CSS units), and so forth. Reduce clutter by collapsing the groups you’re not interested in.</p>\n<figure class=\"widescreen mattewhite\">\n<p><video controls loop width=305 height=420 style=\"clip-path: inset(2px 0 2px 0)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-grouped-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-grouped-light.mp4\" type=\"video/mp4\"></video><figcaption>The list of applicable CSS variables can be grouped by value type into collapsible subsections: colors, dimensions and other types.</figcaption></figure>\n<p>Grouping this way can help you find a CSS variable when you know the type of value you’re looking for, a particular color, for example. Color swatches shown next to variable values together with the ability to group all variables with color values into one distinct section make it easier to visually scan for the desired value.</p>\n<h2>Jump to CSS Variable Definition</h2>\n<p>Here&#8217;s a tip: place the mouse cursor over any CSS variable in the Computed panel to reveal a go-to arrow. Click this to highlight the place in the Styles panel where the variable is defined. If the target CSS variable is hidden because it is unused, it will be automatically shown. This allows you to quickly jump in context to the place where a CSS variable is defined and edit it.</p>\n<figure class=\"widescreen mattewhite\">\n<p><video controls loop width=610 height=420 style=\"clip-path: inset(2px 0 2px 1px)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-jump-to-definition-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-jump-to-definition-light.mp4\" type=\"video/mp4\"></video><figcaption>Use the go-to arrow next to CSS variables in the Computed panel to highlight where the variable is defined in the Styles panel.</figcaption></figure>\n<p>You can also use the filter input field at the bottom of the Styles panel (as described above) and type the name of the variable, but using the go-to arrow to quickly jump to it is much more convenient.</p>\n<h2>Fuzzy Autocompletion of CSS Variable Names</h2>\n<p>Since its inception, Web Inspector has provided autocompletion for CSS properties and values in the Styles panel. More recently, it introduced the ability to provide completion suggestions for CSS variable names when typing within <code>var()</code> function values, as in <code>var(--link-color)</code>.</p>\n<p><a href=\"https://webkit.org/blog/12176/release-notes-for-safari-technology-preview-138/\" target=\"_blank\" rel=\"noopener\">Safari Technology Preview 138</a> made this even better with the introduction of fuzzy matching for CSS autocompletion. This is particularly useful for CSS variables when you might not remember the full name. With fuzzy matching, you can get results that match the query at any position, not just at the beginning.</p>\n<p>For example, if you know that the CSS variable name you’re looking for, say <code>--link-color</code>, includes the substring “color”, you can type just <code>var(color|)</code> (the | character represents the position of the typing caret). You don’t even need to type the double dash prefix. If the CSS variable <code>--link-<strong>color</strong></code> is defined on or inherited by the inspected element, it will be shown in the list of completion suggestions even if the query match occurs at the end of the variable name.</p>\n<figure class=\"widescreen mattewhite\">\n<p><video controls loop width=610 height=420 style=\"clip-path: inset(1px 0 2px 1px)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-fuzzy-autocompletion-dark.mp4\" type=\"video/mp4\" media=\"(prefers-color-scheme:dark)\"><source src=\"https://webkit.org/wp-content/uploads/video-variables-fuzzy-autocompletion-light.mp4\" type=\"video/mp4\"></video><figcaption>Enjoy the flexibility of fuzzy matching for CSS autocompletion to quickly find a variable by typing any part of its name. <br />For example, type just “color” to match <code>--link-color</code>.</figcaption></figure>\n<h2>Conclusion</h2>\n<p>CSS variables enable a growing number of uses, such as building configurable design systems, practical theming for light and dark modes, customizable styles for web components, among many others. But the proliferation of variables in large numbers within a project can also become a burden during development and debugging.</p>\n<p>Web Inspector has introduced features to help keep you focused and productive. Hiding unused inherited CSS variables in the Styles panel reduces clutter. Collecting and grouping CSS variables in the Computed panel focuses your attention. Fuzzy matching in autocompletion of variable names and filter input fields help you quickly find and reuse variables.</p>\n<p>We hope these improvements make your work easier when dealing with CSS variables.<br />\nAs always, if you encounter any issues, please file a report at <a href=\"http://webkit.org/new-inspector-bug\" target=\"_blank\" rel=\"noopener\">webkit.org/new-inspector-bug</a>.<br />\nIf you want to share feedback or ideas, please send them to us on Twitter: <a href=\"https://twitter.com/WebKit\" target=\"_blank\" rel=\"noopener\">@webkit</a>.</p>\n<div class=\"note\">Note: Learn more about Web Inspector from the <a href=\"/web-inspector/\">Web Inspector Reference</a> documentation.</div>\n]]></content>\n\t\t\n\t\t<link href=\"https://webkit.org/wp-content/uploads/video-variables-scroll-inherited-light.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/video-variables-scroll-inherited-dark.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/video-variables-show-hidden-dark.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/video-variables-show-hidden-light.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/video-variables-ungrouped-filtered-dark.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/video-variables-ungrouped-filtered-light.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/video-variables-grouped-dark.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/video-variables-grouped-light.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/video-variables-jump-to-definition-dark.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/video-variables-jump-to-definition-light.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/video-variables-fuzzy-autocompletion-dark.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n<link href=\"https://webkit.org/wp-content/uploads/video-variables-fuzzy-autocompletion-light.mp4\" rel=\"enclosure\" length=\"0\" type=\"\" />\n\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[The File System Access API with Origin Private File System]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12257/the-file-system-access-api-with-origin-private-file-system/\" />\n\n\t\t<id>https://webkit.org/?p=12257</id>\n\t\t<updated>2022-02-14T18:19:52Z</updated>\n\t\t<published>2022-02-14T17:00:36Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Standards\" />\n\t\t<summary type=\"html\"><![CDATA[WebKit supports new API that makes it possible for web apps to create, open, read, and write files directly, or create directories and enumerate their contents.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12257/the-file-system-access-api-with-origin-private-file-system/\"><![CDATA[<p>It is very common for an application to interact with local files. For example, a general workflow is opening a file, making some changes, and saving the file. For web apps, this might be hard to implement. It is possible to simulate the file operations using IndexedDB API, an HTML input element with the <code>file</code> type, an HTML anchor element with the <code>download</code> attribute, etc, but that would require a good understanding of these standards and careful design for a good user experience. Also, the performance may not be satisfactory for frequent operations and large files.</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API\">File System Access API</a> makes it possible for web apps to have easy and efficient file access. It provides a way to create, open, read, and write files directly. It also allows apps to create directories and enumerate their contents.</p>\n<h2>Origin Private File System</h2>\n<p>WebKit has added support for the File System Access API with <a href=\"https://wicg.github.io/file-system-access/#wellknowndirectory-origin-private-file-system\">the origin private file system</a> — a private storage endpoint to some <a href=\"https://html.spec.whatwg.org/multipage/origin.html#concept-origin\">origin</a>. Conceptually, every origin owns an independent directory, and a page can only access files or directories in its origin’s directory. For example, <a href=\"https://webkit.org/\">https://webkit.org</a> cannot read files created by <a href=\"https://apple.com/\">https://apple.com</a>.</p>\n<p>Based on the implementation of different browsers, one entry in the origin private file system does not necessarily map to an entry in the user’s local filesystem — it can be an object stored in some database. That means a file or directory created via the File System Access API may not be easily retrieved from outside of the browser.</p>\n<h2>Persistence</h2>\n<p>The API is currently unavailable for Safari windows in Private Browsing mode. For where is it available, its storage lifetime is the same as other persistent storage types like IndexedDB and LocalStorage. The storage policy will conform to the <a href=\"https://storage.spec.whatwg.org/#storage-endpoints\">Storage Standard</a>. Safari users can view and delete file system storage for a site via Preferences on macOS or Settings on iOS.</p>\n<h2>Browser Support</h2>\n<p>The File System Access API with origin private file system is enabled in WebKit from <a href=\"https://commits.webkit.org/242951@main\">r284131</a>. It is available in Safari on:</p>\n<ul>\n<li>macOS 12.2 and above</li>\n<li>iOS 15.2 and above</li>\n</ul>\n<p>In Safari on macOS 12.4 and iOS 15.4, we introduced the <code>getFile()</code> method of <code>FileSystemFileHandle</code>.</p>\n<h2>The API</h2>\n<p>WebKit currently supports four interfaces of the File System Access API:</p>\n<ul>\n<li><code>FileSystemHandle</code>, which represents an entry in the file system. It is available in Worker and </li>\n<li><code>FileSystemFileHandle</code>, which inherits from FileSystemHandle and represents a file entry. </li>\n<li><code>FileSystemDirectoryHandle</code>, which inherits from FileSystemHandle and represents a directory entry. </li>\n<li><code>FileSystemSyncAccessHandle</code>, which provides an exclusive duplex stream for synchronous read and write on an entry. Unlike the interfaces above, which exist in both Window and Worker contexts, <code>FileSystemSyncAccessHandle</code> is only available in Worker.</li>\n</ul>\n<p>With these basic interfaces in mind, let&#8217;s look at how to use them by diving into some examples.</p>\n<h2>Examples</h2>\n<h3>Accessing the Origin Private File System</h3>\n<p>In the origin private file system, a <code>FileSystemHandle</code> represents either the root directory of the origin’s space, or a descendant of the root directory. Therefore, the first step is to get the root <code>FileSystemDirectoryHandle</code>. It is done via <a href=\"https://storage.spec.whatwg.org/#dom-navigatorstorage-storage\"><code>StorageManager</code></a> interface.</p>\n<pre><code class=\"js\"><span class=\"keyword type\">const</span> <span class=\"identifier\">root</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">navigator</span>.<span class=\"identifier\">storage</span>.<span class=\"identifier\">getDirectory</span>();\n</code></pre>\n<h3>Creating a directory or a file</h3>\n<p>With a <code>FileSystemDirectoryHandle</code> object like root, you can get access to its child with some specific name using <code>getDirectoryHandle()</code> and <code>getFileHandle()</code> methods.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Create a file named Untiled.txt under root directory.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">untitledFile</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">getFileHandle</span>(<span class=\"string\">\"Untitled.txt\"</span>, { <span class=\"string\">\"create\"</span> <span class=\"operator\">:</span> <span class=\"keyword literal\">true</span> });\n<span class=\"comment\">// Get access to existing Untitled.txt file.\n</span><span class=\"comment\">// untitledFile and existingUntitledFile point to the same entry.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">existingUntitledFile</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">getFileHandle</span>(<span class=\"string\">\"Untitled.txt\"</span>);\n<span class=\"comment\">// Create a directory named Diary Folder.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">diaryDirectory</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">getDirectoryHandle</span>(<span class=\"string\">\"Diary Folder\"</span>, { <span class=\"string\">\"create\"</span> <span class=\"operator\">:</span> <span class=\"keyword literal\">true</span> });\n</code></pre>\n<h3>Moving or Renaming a Directory or a File</h3>\n<p>To move around the file or directory a <code>FileSystemHandle</code> represents, you can use the <code>move()</code> method. The first parameter is a <code>FileSystemDirectoryHandle</code> representing the target parent directory, and the second parameter is a <code>USVString</code> representing the target file name. The string must be a <a href=\"https://wicg.github.io/file-system-access/#valid-file-name\">valid file name</a>.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Move Untitled.txt from /root/ to /root/Diary Folder/.\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">untitledFile</span>.<span class=\"identifier\">move</span>(<span class=\"identifier\">diaryDirectory</span>, <span class=\"identifier\">untitledFile</span>.<span class=\"identifier\">name</span>);\n<span class=\"comment\">// Rename Untitled.txt to Feb_01.txt\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">untitledFile</span>.<span class=\"identifier\">move</span>(<span class=\"identifier\">diaryDirectory</span>, <span class=\"string\">\"Feb_01.txt\"</span>);\n<span class=\"comment\">// The two steps above can be combined as:\n</span><span class=\"comment\">// await untitledFile.move(diaryDirectory, \"Feb_01.txt\");\n</span></code></pre>\n<h3>Resolving the Path from a Directory Entry to its Descendant</h3>\n<p>To find out if a <code>FileSystemHandle</code> is a descendant of an existing <code>FileSystemDirectoryHandle</code>, and to get their relative path, you can use the <code>resolve()</code> method. The result is an array of component names that forms the path.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Get access to Feb_01.txt in Diary Folder.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">diaryFile</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">diaryDirectory</span>.<span class=\"identifier\">getFileHandle</span>(<span class=\"string\">\"Feb_01.txt\"</span>);\n<span class=\"comment\">// Resolve path between Feb_01.txt and root.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">relativePath</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">resolve</span>(<span class=\"identifier\">diaryFile</span>);\n<span class=\"comment\">// relativePath is [\"Diary Folder\", \"Feb_01.txt\"].\n</span></code></pre>\n<h3>Enumerating Contents in a Directory</h3>\n<p>The methods introduced above require you to know the name of target, but if you don’t know the name, you can still get it by enumerating the contents of an existing directory with <code>async</code> iterators returned by the <code>keys()</code>, <code>values()</code>, and <code>entries()</code> methods.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Create a directory named Trash under the root directory.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">trashDirectory</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">getDirectoryHandle</span>(<span class=\"string\">\"Trash\"</span>, { <span class=\"string\">\"create\"</span> <span class=\"operator\">:</span> <span class=\"keyword literal\">true</span> });\n<span class=\"comment\">// Find directories under root/ and print their names.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">directoryNames</span> <span class=\"operator\">=</span> [];\n<span class=\"keyword control\">for</span> <span class=\"identifier\">await</span> (<span class=\"keyword type\">const</span> <span class=\"identifier\">handle</span> <span class=\"keyword operator\">of</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">values</span>()) {\n    <span class=\"keyword control\">if</span> (<span class=\"identifier\">handle</span>.<span class=\"identifier\">kind</span> <span class=\"operator\">=</span><span class=\"operator\">=</span> <span class=\"string\">\"directory\"</span>) {\n        <span class=\"identifier\">directoryNames</span>.<span class=\"identifier\">push</span>(<span class=\"identifier\">handle</span>.<span class=\"identifier\">name</span>);\n    }\n}\n<span class=\"comment\">// directoryNames is [\"Trash\", \"Diary Folder\"].\n</span></code></pre>\n<h3>Deleting a Directory or a File</h3>\n<p>With a <code>FileSystemDirectoryHandle</code> object, you can delete its child entries by name with the <code>removeEntry()</code> method.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Delete Feb_01.txt in Diary Folder.\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">diaryDirectory</span>.<span class=\"identifier\">removeEntry</span>(<span class=\"identifier\">diaryFile</span>.<span class=\"identifier\">name</span>);\n<span class=\"comment\">// Delete Trash and all its descendants.\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">removeEntry</span>(<span class=\"identifier\">trashDirectory</span>.<span class=\"identifier\">name</span>, { <span class=\"string\">\"recursive\"</span> <span class=\"operator\">:</span> <span class=\"keyword literal\">true</span> });\n</code></pre>\n<h3>Reading a File</h3>\n<p>Once you have the <code>FileSystemFileHandle</code> representing the target file, you can read its properties and content by converting it to a <a href=\"https://w3c.github.io/FileAPI/#file-section\"><code>File</code></a> object using the <code>getFile()</code> method. You can get file information and content using interfaces of <code>File</code>.</p>\n<pre><code class=\"js\"><span class=\"keyword type\">const</span> <span class=\"identifier\">fileHandle</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">getFileHandle</span>(<span class=\"string\">\"Draft.txt\"</span>, { <span class=\"string\">\"create\"</span> <span class=\"operator\">:</span> <span class=\"keyword literal\">true</span> });\n<span class=\"keyword type\">const</span> <span class=\"identifier\">file</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">fileHandle</span>.<span class=\"identifier\">getFile</span>();\n</code></pre>\n<h3>Reading and Writing a File in a Worker Thread</h3>\n<p>Another way to read a file is to use the <code>read()</code> method of the <code>FileSystemSyncAccessHandle</code> interface. You can create a <code>FileSystemSyncAccessHandle</code> from a <code>FileSystemFileHandle</code> object using the <code>createSyncAccessHandle()</code> method. Since <code>FileSystemSyncAccessHandle</code> is only available in Worker contexts, you will need to <a href=\"https://html.spec.whatwg.org/multipage/workers.html#creating-a-dedicated-worker\">create a dedicated Worker</a> first.</p>\n<p>Unlike <code>getFile()</code> that returns a Promise, <code>read()</code> is synchronous, and thus provides better performance. If you&#8217;re aiming for the most efficient file access, <code>FileSystemSyncAccessHandle</code> is the way to go.</p>\n<p>To write a file, you can use the synchronous <code>write()</code> method of <code>FileSystemSyncAccessHandle</code>. In the current implementation, this is the only way to write a file in WebKit.</p>\n<p>To implement synchronous read and write operations, a <code>FileSystemSyncAccessHandle</code> must have exclusive access to a file entry. Therefore, the attempt to create a second <code>FileSystemSyncAccessHandle</code> on an entry will fail, if the previous <code>FileSystemSyncAccessHandle</code> is not closed properly.</p>\n<pre><code class=\"js\"><span class=\"comment\">// Get access to the existing Draft.txt file.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">root</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">navigator</span>.<span class=\"identifier\">storage</span>.<span class=\"identifier\">getDirectory</span>();\n<span class=\"keyword type\">const</span> <span class=\"identifier\">draftFile</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">root</span>.<span class=\"identifier\">getFileHandle</span>(<span class=\"string\">\"Draft.txt\"</span>);\n<span class=\"comment\">// Create FileSystemSyncAccessHandle on the file.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">accessHandle</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">draftFile</span>.<span class=\"identifier\">createSyncAccessHandle</span>();\n<span class=\"comment\">// Get size of the file.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">fileSize</span> <span class=\"operator\">=</span> <span class=\"identifier\">await</span> <span class=\"identifier\">accessHandle</span>.<span class=\"identifier\">getSize</span>();\n<span class=\"comment\">// Read file content to a buffer.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">readBuffer</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">ArrayBuffer</span>(<span class=\"identifier\">fileSize</span>);\n<span class=\"keyword type\">const</span> <span class=\"identifier\">readSize</span> <span class=\"operator\">=</span> <span class=\"identifier\">accessHandle</span>.<span class=\"identifier\">read</span>(<span class=\"identifier\">readBuffer</span>, { <span class=\"string\">\"at\"</span><span class=\"operator\">:</span> <span class=\"number\">0</span> });\n<span class=\"comment\">// Write a sentence to the end of the file.\n</span><span class=\"keyword type\">const</span> <span class=\"identifier\">encoder</span> <span class=\"operator\">=</span> <span class=\"keyword operator\">new</span> <span class=\"identifier\">TextEncoder</span>();\n<span class=\"keyword type\">const</span> <span class=\"identifier\">writeBuffer</span> <span class=\"operator\">=</span> <span class=\"identifier\">encoder</span>.<span class=\"identifier\">encode</span>(<span class=\"string\">\"Thank you for reading this.\"</span>);\n<span class=\"keyword type\">const</span> <span class=\"identifier\">writeSize</span> <span class=\"operator\">=</span> <span class=\"identifier\">accessHandle</span>.<span class=\"identifier\">write</span>(<span class=\"identifier\">writeBuffer</span>, { <span class=\"string\">\"at\"</span> <span class=\"operator\">:</span> <span class=\"identifier\">readSize</span> });\n<span class=\"comment\">// Truncate file to 1 byte.\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">accessHandle</span>.<span class=\"identifier\">truncate</span>(<span class=\"number\">1</span>);\n<span class=\"comment\">// Persist changes to disk.\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">accessHandle</span>.<span class=\"identifier\">flush</span>();\n<span class=\"comment\">// Always close FileSystemSyncAccessHandle if done.\n</span><span class=\"identifier\">await</span> <span class=\"identifier\">accessHandle</span>.<span class=\"identifier\">close</span>();\n</code></pre>\n<h2>Summary</h2>\n<p>If your web app needs to interact with files, you should try the new File System Access API. It provides interfaces that are similar to the native file system API, with optimized performance.</p>\n<p>As the standard evolves and development goes on, we will keep adding or updating interfaces and methods according to the <a href=\"https://wicg.github.io/file-system-access/\">File System Access API</a> spec. If you encounter any issue when using this API, please file a bug on <a href=\"https://bugs.webkit.org/\">bugs.webkit.org</a> under the “Website Storage” component. You may also create a new bug report for feature requests, describing your use case and why the feature is important. If you have any question or suggestion about the API itself, you can file a spec issue in the <a href=\"https://github.com/wicg/file-system-access/issues/\">WICG repo</a>. Your feedback is very important to us.</p>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Release Notes for Safari Technology Preview 140]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12255/release-notes-for-safari-technology-preview-140/\" />\n\n\t\t<id>https://webkit.org/?p=12255</id>\n\t\t<updated>2022-02-10T21:05:11Z</updated>\n\t\t<published>2022-02-10T21:05:31Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Safari Technology Preview\" />\n\t\t<summary type=\"html\"><![CDATA[Safari Technology Preview Release 140 is now available for download for macOS Big Sur and of macOS Monterey.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12255/release-notes-for-safari-technology-preview-140/\"><![CDATA[<p><a href=\"https://webkit.org/blog/6017/introducing-safari-technology-preview/\">Safari Technology Preview</a> Release 140 is now <a href=\"https://webkit.org/downloads/\">available for download</a> for macOS Big Sur and of macOS Monterey. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.</p>\n<p>This release covers WebKit revisions <a href=\"https://trac.webkit.org/log?stop_rev=287834&amp;rev=288438&amp;limit=604\">287834-288438</a>.</p>\n<p><strong>Note:</strong> Tab Groups do not sync in this release.</p>\n<h3>Web Inspector</h3>\n<ul>\n<li>Elements Tab\n<ul>\n<li>Made CSS Alignment controls in the Styles Detail Sidebar accessible (<a href=\"https://trac.webkit.org/changeset/288385/webkit/\">r288385</a>)</li>\n</ul>\n</li>\n<li>Sources Tab\n<ul>\n<li>Added a contextual menu item to create a URL Breakpoint for resources initiated by script (<a href=\"https://trac.webkit.org/changeset/288029/webkit/\">r288029</a>)</li>\n<li>Fixed fully blackboxed stack traces to show the right top call frame (<a href=\"https://trac.webkit.org/changeset/288266/webkit/\">r288266</a>)</li>\n</ul>\n</li>\n<li>Timelines Tab\n<ul>\n<li>Added better names for newer CSS Animations, CSS Transitions, and Web Animations events (<a href=\"https://trac.webkit.org/changeset/287945/webkit/\">r287945</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>:has() Pseudo-Class</h3>\n<ul>\n<li>Added support for <code>:has(:not(foo))</code> (<a href=\"https://trac.webkit.org/changeset/288303/webkit/\">r288303</a>)</li>\n<li>Avoided complex style invalidation with repeated DOM mutations (<a href=\"https://trac.webkit.org/changeset/288012/webkit\">r288012</a>, <a href=\"https://trac.webkit.org/changeset/287973/webkit/\">r287973</a>)</li>\n<li>Fixed computing specificity (<a href=\"https://trac.webkit.org/changeset/288196/webkit/\">r288196</a>)</li>\n<li>Changed to disallow nested <code>:has()</code> (<a href=\"https://trac.webkit.org/changeset/288111/webkit/\">r288111</a>)</li>\n<li>Changed to ignore <code>:visited</code> inside <code>:has()</code> (<a href=\"https://trac.webkit.org/changeset/288304/webkit/\">r288304</a>)</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li>Added support for intrinsic sizes in <code>flex-basis</code> (<a href=\"https://trac.webkit.org/changeset/288113/webkit/\">r288113</a>)</li>\n<li>Added support for intrinsic sizes to the <code>flex</code> shorthand (<a href=\"https://trac.webkit.org/changeset/288184/webkit/\">r288184</a>)</li>\n<li>Added support for “missing“/&#8221;none&#8221; color components (<a href=\"https://trac.webkit.org/changeset/288143/webkit/\">r288143</a>)</li>\n<li>Added support for interpolating colors with “missing”/“none” components via <code>color-mix()</code> (<a href=\"https://trac.webkit.org/changeset/288427/webkit/\">r288427</a>)</li>\n<li>Added support for preloading of layered <code>@import</code> rules (<a href=\"https://trac.webkit.org/changeset/288099/webkit/\">r288099</a>)</li>\n<li>Changed interpolation mode for CSS gradients to default to OKLab if any non-legacy color syntax colors are used in the stops (<a href=\"https://trac.webkit.org/changeset/288071/webkit/\">r288071</a>)</li>\n<li>Changed to only apply automatic minimum block-size aspect-ratio rules to non-replaced elements (<a href=\"https://trac.webkit.org/changeset/288003/webkit/\">r288003</a>)</li>\n<li>Fixed the <code>::backdrop</code> pseudo-element to react to associated element event listeners (<a href=\"https://trac.webkit.org/changeset/287878/webkit/\">r287878</a>)</li>\n<li>Fixed the CSS <code>color()</code> function to not clamp channels to the 0-1 range (<a href=\"https://trac.webkit.org/changeset/287838/webkit/\">r287838</a>)</li>\n<li>Fixed the height of <code>flex</code> items with <code>aspect-ratio</code> whenever the cross axis intrinsic size is larger than the viewport (<a href=\"https://trac.webkit.org/changeset/287976/webkit/\">r287976</a>)</li>\n<li>Fixed rounding of distributed free space to flexible tracks (<a href=\"https://trac.webkit.org/changeset/287977/webkit/\">r287977</a>)</li>\n<li>Fixed <code>position: fixed</code> layers to not allocate a backing buffer if all the children are offscreen (<a href=\"https://trac.webkit.org/changeset/288429/webkit/\">r288429</a>)</li>\n<li>Fixed setting <code>content: normal</code> on a <code>::marker</code> to make the computed style return resolved values (<a href=\"https://trac.webkit.org/changeset/288054/webkit/\">r288054</a>)</li>\n</ul>\n<h3>Web API</h3>\n<ul>\n<li>Added support for <code>FetchEvent.handled</code> API for Service Workers (<a href=\"https://trac.webkit.org/changeset/287915/webkit/\">r287915</a>)</li>\n<li>Enabled <code>form.requestSubmit()</code> (<a href=\"https://trac.webkit.org/changeset/288179/webkit/\">r288179</a>)</li>\n<li>Fixed <code>nextHopProtocol</code> exposed regardless of <code>Timing-Allow-Origin</code> (<a href=\"https://trac.webkit.org/changeset/288219/webkit/\">r288219</a>)</li>\n<li>Fixed <code>input.labels</code> inside shadow DOM (<a href=\"https://trac.webkit.org/changeset/288162/webkit/\">r288162</a>)</li>\n<li>Fixed canvas functions that take colors as strings to support all the syntax that CSS supports (<a href=\"https://trac.webkit.org/changeset/288134/webkit/\">r288134</a>)</li>\n<li>Implemented <code>HTMLScriptElement.supports(type)</code> method (<a href=\"https://trac.webkit.org/changeset/287996/webkit/\">r287996</a>)</li>\n<li>Improved computation of Service Worker <code>FetchEvent.resultingClientId</code> (<a href=\"https://trac.webkit.org/changeset/288201/webkit/\">r288201</a>)</li>\n</ul>\n<h3>Web Animations</h3>\n<ul>\n<li>Added support for <code>animation-composition</code> CSS property (<a href=\"https://trac.webkit.org/changeset/288433/webkit/\">r288433</a>)</li>\n<li>Changed <code>getKeyframes()</code> for a CSS Animation to not use computed style for keyframes (<a href=\"https://trac.webkit.org/changeset/287835/webkit/\">r287835</a>)</li>\n<li>Fixed interpolation during animation of two empty transform lists to always yield &#8220;none&#8221; (<a href=\"https://trac.webkit.org/changeset/287917/webkit/\">r287917</a>)</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>Fixed Date functions&#8217; argument coercion (<a href=\"https://trac.webkit.org/changeset/288066/webkit/\">r288066</a>)</li>\n<li>Relaxed <code>Date.parse</code> requirement (<a href=\"https://trac.webkit.org/changeset/288411/webkit/\">r288411</a>)</li>\n</ul>\n<h3>WebAssembly</h3>\n<ul>\n<li>Fixed misc <code>WebAssembly.Table</code> issues (<a href=\"https://trac.webkit.org/changeset/288064/webkit/\">r288064</a>)</li>\n<li>Fixed misc issues in <code>WebAssembly.Exception</code> (<a href=\"https://trac.webkit.org/changeset/288065/webkit/\">r288065</a>)</li>\n<li>Fixed <code>WebAssembly.Global</code>&#8216;s typename for &#8220;anyfunc&#8221; (<a href=\"https://trac.webkit.org/changeset/288049/webkit/\">r288049</a>)</li>\n</ul>\n<h3>Dialog Element</h3>\n<ul>\n<li>Added <code>visibility: visible</code> to modal dialogs in the user-agent stylesheet (<a href=\"https://trac.webkit.org/changeset/288233/webkit/\">r288233</a>)</li>\n<li>Fixed some overflow and clipping issues with modal dialogs (<a href=\"https://trac.webkit.org/changeset/288267/webkit/\">r288267</a>, <a href=\"https://trac.webkit.org/changeset/287845/webkit/\">r287845</a>)</li>\n</ul>\n<h3>HTML</h3>\n<ul>\n<li>Fixed support for new lines in HTMLTextArea&#8217;s <code>placeholder</code> text (<a href=\"https://trac.webkit.org/changeset/288005/webkit/\">r288005</a>)</li>\n<li>Fixed keeping the selected state of a select element when inserting a selected <code>&lt;option&gt;</code> (<a href=\"https://trac.webkit.org/changeset/288174/webkit/\">r288174</a>)</li>\n<li>Prevented <code>contenteditable</code> anchors from being stuck (<a href=\"https://trac.webkit.org/changeset/288420/webkit/\">r288420</a>)</li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li>Fixed <code>gl.texImage2D</code> upload of getUserMedia streams via <code>&lt;video&gt;</code> element fails (<a href=\"https://trac.webkit.org/changeset/288025/webkit/\">r288025</a>)</li>\n<li>Fixed MediaStream <code>canvas.captureStream()</code> playback (<a href=\"https://trac.webkit.org/changeset/288435/webkit/\">r288435</a>)</li>\n<li>Fixed portrait video playback on HTML canvas elements (<a href=\"https://trac.webkit.org/changeset/288053/webkit/\">r288053</a>)</li>\n<li>Fixed no VP9-SVS video stream from remote peer on some devices (<a href=\"https://trac.webkit.org/changeset/287928/webkit/\">r287928</a>)</li>\n<li>Fixed “Add to Contact” menu item (<a href=\"https://trac.webkit.org/changeset/287959/webkit/\">r287959</a>)</li>\n<li>Tightened the focus check for getUserMedia (<a href=\"https://trac.webkit.org/changeset/288087/webkit/\">r288087</a>)</li>\n</ul>\n<h3>WebAuthn</h3>\n<ul>\n<li>Allowed single use of WebAuthn without user gesture for all relying parties (<a href=\"https://trac.webkit.org/changeset/287957/webkit/\">r287957</a>)</li>\n</ul>\n<h3>Accessibility</h3>\n<ul>\n<li>Exposed toggle buttons using <code>role=\"button\"</code> as form controls (<a href=\"https://trac.webkit.org/changeset/288100/webkit/\">r288100</a>)</li>\n<li>Improved support for <code>aria-owns</code> in ARIA trees (<a href=\"https://trac.webkit.org/changeset/288117/webkit/\">r288117</a>)</li>\n</ul>\n<h3>Content Security Policy</h3>\n<ul>\n<li>Improved handling of multiple policies (<a href=\"https://trac.webkit.org/changeset/288132/webkit/\">r288132</a>)</li>\n</ul>\n<h3>Privacy</h3>\n<ul>\n<li>Fixed an issue where a website may be able to track sensitive user information (<a href=\"https://trac.webkit.org/changeset/288078/webkit/\">r288078</a>) </li>\n</ul>\n<h3>SVG</h3>\n<ul>\n<li>Fixed calculations of <code>filterRegion</code> and <code>outsets</code> of the referenced SVG filter (<a href=\"https://trac.webkit.org/changeset/288183/webkit/\">r288183</a>)</li>\n<li>Fixed referenced SVG filter always using sRGB color space for its result (<a href=\"https://trac.webkit.org/changeset/287982/webkit/\">r287982</a>)</li>\n</ul>\n<h3>Scrolling</h3>\n<ul>\n<li>Fixed sometimes not being able to scroll after using a builtin trackpad (<a href=\"https://trac.webkit.org/changeset/287997/webkit/\">r287997</a>)</li>\n</ul>\n<h3>Web Extensions</h3>\n<ul>\n<li>Fixed a crash when calling <code>browser.webNavigation.getAllFrames()</code> on an empty tab</li>\n<li>Fixed Active tab permissions for a tab to get removed if a matching per-site permission changes to &#8220;Deny&#8221;</li>\n<li>Fixed service worker background script errors to get reset each time they successfully load</li>\n</ul>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t\t<entry>\n\t\t<author>\n\t\t\t<name></name>\n\t\t\t\t\t</author>\n\n\t\t<title type=\"html\"><![CDATA[Introducing the Dialog Element]]></title>\n\t\t<link rel=\"alternate\" type=\"text/html\" href=\"https://webkit.org/blog/12209/introducing-the-dialog-element/\" />\n\n\t\t<id>https://webkit.org/?p=12209</id>\n\t\t<updated>2022-02-08T18:22:12Z</updated>\n\t\t<published>2022-02-07T19:10:03Z</published>\n\t\t<category scheme=\"https://webkit.org\" term=\"Standards\" />\n\t\t<summary type=\"html\"><![CDATA[Although the alert, confirm and prompt JavaScript methods are convenient, they aren’t recommended due to their script-blocking behavior.]]></summary>\n\n\t\t\t\t\t<content type=\"html\" xml:base=\"https://webkit.org/blog/12209/introducing-the-dialog-element/\"><![CDATA[<p>Although the <code>alert</code>, <code>confirm</code> and <code>prompt</code> JavaScript methods are convenient, they aren’t recommended due to their script-blocking behavior. That’s why we worked with other browser vendors to drive improvements to the <code>&lt;dialog&gt;</code> specification over the last few years. The most important conversations involved accessibility.</p>\n<p>You can find more complex use-cases, like payment dialogs, on the web. They are currently addressed by custom solutions from frameworks like Bootstrap. Unfortunately, they aren’t convenient to use and aren’t always accessible. We believe the web deserves a simple and bug-free solution for these use-cases. Safari Technology Preview 134 and Safari 15.4 beta introduces the <code>&lt;dialog&gt;</code> element for this reason!</p>\n<h2>How Do I Use <code>&lt;dialog&gt;</code>?</h2>\n<p>Let’s create a simple confirmation dialog:</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">dialog</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"confirmation-dialog\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">h1</span>&gt;</span>Do you want to delete everything?<span class=\"tag\">&lt;/<span class=\"keyword\">h1</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">p</span>&gt;</span>You will lose all your data.<span class=\"tag\">&lt;/<span class=\"keyword\">p</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"cancel-delete\"</span>&gt;</span>Cancel<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"confirm-delete\"</span>&gt;</span>Delete!<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"keyword\">dialog</span>&gt;</span>\n</code></pre>\n<p>Dialogs are hidden by default. We can use the <code>showModal()</code> method to show the dialog. When it’s shown, the dialog can be closed with the <code>close()</code> method.</p>\n<p>Here is an example:</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"delete\"</span>&gt;</span>Delete everything<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">p</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"keyword\">p</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">script</span>&gt;</span>\nlet dialog = document.getElementById(\"confirmation-dialog\");\nlet result = document.getElementById(\"result\");\n\n// Show the dialog when clicking \"Delete everything\"\ndocument.getElementById(\"delete\").addEventListener(\"click\", function() {\n    dialog.showModal();\n});\n\ndocument.getElementById(\"cancel-delete\").addEventListener(\"click\", function() {\n    dialog.close();\n    result.textContent = \"Canceled!\";\n});\ndocument.getElementById(\"confirm-delete\").addEventListener(\"click\", function() {\n    dialog.close();\n    result.textContent = \"Deleted!\";\n});\n<span class=\"tag\">&lt;/<span class=\"keyword\">script</span>&gt;</span>\n</code></pre>\n<p>Note that the dialog will get an <code>open</code> attribute once opened, which may be useful for styling purposes. However, it’s not recommended to toggle this attribute manually to show or hide the dialog, since the browser may lose track of the dialog state, and will not perform proper focus adjustments for accessibility.</p>\n<figure class=\"widescreen mattewhite demo\">\n<p><iframe src=\"https://webkit.org/demos/dialog-element/confirmation-dialog-basic.html\" height=\"300\"></iframe><figcaption>Example confirmation dialog</figcaption></figure>\n<h2>Modal and Non-modal Dialogs</h2>\n<p>In the last example, the <code>showModal()</code> method was used to create a modal dialog. User interaction is locked inside modal dialogs and outside content cannot be clicked, focused, selected, edited, or seen by accessibility tools. Another feature of modal dialogs is their ability to appear on top of everything else in the web page, regardless of the <code>z-index</code> of other elements.</p>\n<p>Non-modal dialogs also exist and can be invoked using <code>show()</code> method. Unlike modal dialogs, they still allow interaction with the surrounding content. An example use-case may be a find-in-page dialog for a document editor, where you still want to allow the user to interact with the rest of the document.</p>\n<h2>Using Forms with <code>&lt;dialog&gt;</code></h2>\n<p>Forms within dialogs can be used to request information from the user, such as when a shipping address or payment details are needed.</p>\n<p>Unlike a traditional <code>&lt;form&gt;</code>, where <code>method=\"get\"</code> or <code>\"post\"</code> indicates that the form data is sent to a server, using <code>&lt;form method=\"dialog\"&gt;</code> causes form submission instead to close the dialog and set the <code>returnValue</code> property to the submit button&#8217;s value. This can save you from writing custom code, while providing the correct semantics to your web page.</p>\n<p>We can simplify the initial example using this new feature:</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">dialog</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"confirmation-dialog\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">form</span> <span class=\"keyword attribute\">method</span>=<span class=\"attribute value string\">\"dialog\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"keyword\">h1</span>&gt;</span>Do you want to delete everything?<span class=\"tag\">&lt;/<span class=\"keyword\">h1</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"keyword\">p</span>&gt;</span>You will lose all your data.<span class=\"tag\">&lt;/<span class=\"keyword\">p</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">type</span>=<span class=\"attribute value string\">\"submit\"</span> <span class=\"keyword attribute\">value</span>=<span class=\"attribute value string\">\"Canceled!\"</span>&gt;</span>Cancel<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">type</span>=<span class=\"attribute value string\">\"submit\"</span> <span class=\"keyword attribute\">value</span>=<span class=\"attribute value string\">\"Deleted!\"</span>&gt;</span>Delete!<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"keyword\">form</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"keyword\">dialog</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"delete\"</span>&gt;</span>Delete everything<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"keyword\">p</span> <span class=\"keyword attribute\">id</span>=<span class=\"attribute value string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"keyword\">p</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"keyword\">script</span>&gt;</span>\nlet dialog = document.getElementById(\"confirmation-dialog\");\n\ndocument.getElementById(\"delete\").addEventListener(\"click\", function() {\n    dialog.showModal();\n});\n\ndialog.addEventListener(\"close\", function() {\n    document.getElementById(\"result\").textContent = dialog.returnValue;\n});\n<span class=\"tag\">&lt;/<span class=\"keyword\">script</span>&gt;</span>\n</code></pre>\n<p>Note the use of the <code>close</code> event here, which is special to <code>&lt;dialog&gt;</code>.</p>\n<figure class=\"widescreen mattewhite demo\">\n<p><iframe src=\"https://webkit.org/demos/dialog-element/confirmation-dialog-form.html\" height=\"300\"></iframe><figcaption>Example confirmation dialog with a form</figcaption></figure>\n<h2>Styling</h2>\n<p>The semi-transparent box behind the dialog that you may have noticed from previous examples is the <code>::backdrop</code> pseudo-element. By default, it is styled so it covers the whole viewport. Like the dialog itself, you can style the backdrop using CSS. Animations can also be used if you would like to add a fade-in effect for instance.</p>\n<p>Note that the backdrop is only shown for modal dialogs.</p>\n<p>Here is an example:</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">dialog</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">h1</span>&gt;</span>This is a pretty dialog<span class=\"tag\">&lt;/<span class=\"keyword\">h1</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"keyword\">p</span>&gt;</span>The backdrop animates!<span class=\"tag\">&lt;/<span class=\"keyword\">p</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"keyword\">dialog</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"keyword\">button</span> <span class=\"keyword attribute\">onclick</span>=<span class=\"attribute value string\">\"document.querySelector('dialog').showModal()\"</span>&gt;</span>Show the dialog<span class=\"tag\">&lt;/<span class=\"keyword\">button</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"keyword\">style</span>&gt;</span>\ndialog {\n    box-shadow: 0 2px 5px rgba(0,0,0,0.3);\n    border: none;\n    border-radius: 10px;\n}\n\ndialog::backdrop {\n    background: linear-gradient(rgba(0,0,0,0.1), rgba(0,0,0,0.4));\n    animation: fade-in 1s;\n}\n\n@keyframes fade-in {\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n<span class=\"tag\">&lt;/<span class=\"keyword\">style</span>&gt;</span>\n</code></pre>\n<figure class=\"widescreen mattewhite\">\n<dialog>\n<h1>This is a pretty dialog</h1>\n<p>The backdrop animates!</p>\n<p><button onclick=\"document.querySelector('dialog').close()\">Close</button></p>\n</dialog>\n<p><button onclick=\"document.querySelector('dialog').showModal()\">Show the dialog</button><figcaption>Pretty dialog example styled and animated</figcaption></figure>\n<h2>Accessibility</h2>\n<p>For accessibility tools, the <code>&lt;dialog&gt;</code> element is equivalent to <code>role=\"dialog\"</code>. In addition to that, a modal dialog will behave similarly to an element with <code>aria-modal=\"true\"</code>.</p>\n<p>Users can dismiss modal dialogs using the &#8220;Escape&#8221; key on desktop browsers. That will trigger a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/cancel_event\"><code>cancel</code> event</a> which you can intercept. If multiple modal dialogs are opened, the one shown last will be dismissed.</p>\n<p>It is also possible to specify an element to initially focus on when opening dialogs by adding the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus\"><code>autofocus</code></a> attribute to the relevant element.</p>\n<h2>Browser Support</h2>\n<ul>\n<li>Safari 15.4 beta and <a href=\"https://developer.apple.com/safari/download/\">Safari Technology Preview</a></li>\n<li>Chrome 37</li>\n<li>Firefox 98</li>\n</ul>\n<h2>Next Steps</h2>\n<p>In this post, we’ve covered the basics of <code>&lt;dialog&gt;</code> and the features around it. Here are the next steps around this element:</p>\n<p>We are working on getting the element interoperable with other browser vendors as part of the <a href=\"https://github.com/web-platform-tests/interop-2022\">Interop 2022</a> effort. One of the main discussions is around <a href=\"https://github.com/whatwg/html/pull/4184\">initial focus behaviour</a>, to agree on which elements should be focused by default when there is no element with the autofocus attribute.</p>\n<p>As part of implementing <code>&lt;dialog&gt;</code> we’ve also made advances on the <code>inert</code> attribute to get interoperable behavior across browsers. It is currently disabled by default and not yet standardized, but you can enable the &#8220;inert attribute&#8221; in the Experimental Features menu from the Develop menu in Safari Technology Preview to test it.</p>\n<p>Feel free to reach out to <a href=\"https://twitter.com/therealntim\">@therealntim</a> on Twitter for any questions. To report any issues, please <a href=\"http://bugs.webkit.org/\">file a bug</a> blocking <a href=\"https://bugs.webkit.org/show_bug.cgi?id=84635\">bug 84635</a>.</p>\n]]></content>\n\t\t\n\t\t\t</entry>\n\t</feed>\n"
  },
  "description": "Open Source Web Browser Engine",
  "home_page_url": "https://webkit.org",
  "_ext": {
    "date_published": "2022-04-11T16:18:08.000Z",
    "date_modified": "2022-04-11T16:18:08.000Z"
  }
}