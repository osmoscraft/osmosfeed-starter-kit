{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Baldur Bjarnason",
  "feed_url": "https://www.baldurbjarnason.com/index.xml",
  "items": [
    {
      "id": "https://www.baldurbjarnason.com/2022/i-cant-keep-up-with-web-dev/",
      "url": "https://www.baldurbjarnason.com/2022/i-cant-keep-up-with-web-dev/",
      "title": "How to keep up with web development without falling into despair",
      "summary": "\n—Everything keeps changing\n\n\n—I’m spread too thin trying to keep up\n\n\n—I feel like I’ve lost control over my professional life\n\n\n—I’m starting to regret getting into web development\n\n\n—I’m tired of constantly chasing new frameworks to make sure I don’t get replaced by an inexperienced college graduate\n\n\n—Whatever I try to do to keep up is never enough; the changes never stop coming\n\n\n\nYou’ve barely pushed a feature to production when you notice a new major release of a dependency.\nKeeping up with all of the changes in a single framework is next to impossible. Keeping up the framework’s ecosystem is impossible.\nSo. Many. New. Packages.\nSo. Many. New. Or. Changed. Standards.\nDozens of new blog posts or articles on how to do stuff appear every day\n\nI can’t keep up; you can’t keep up. Nobody can.\n—But I have to keep up! Otherwise, I won’t be able to do my job. Web Development is hell. Maybe I’ll just quit and do something else. Anything else.\n\nPeople say that web development is unique because of the fast pace and volume of changes in the field. And, since most of us have at least a tangential awareness of other fields through our friends and families (and, in my case, former fields of study), we know that web development seems unique in invoking this feeling of helplessness.\nIt is unique in overwhelming those of us who practise it, but it isn’t uniquely fast-paced.\nI’m not talking here about the difficulty of doing or learning the job.\nIt’s the task of keeping up with change and new developments in the field once you’re in it. In that regard, web dev isn’t unique.\nIf anything, compared to fields that still have active research going on (which isn’t the case for software or web dev) like medicine or biotech, the pace of change is arguably much, much lower in web dev.\nBut, this feeling of being spread too thin, of being unable to keep up, is real. Just not for the reason you think.\nSo, how do people in other fields keep up with changes in that field? Why is web dev so bad? And, how can we learn from other fields and try not to go mad racing the Red Queen?\n\n“Well, in our country,” said Alice, still panting a little, “you’d generally get to somewhere else—if you run very fast for a long time, as we’ve been doing.”\n“A slow sort of country!” said the Queen. “Now, here, you see, it takes all the running you can do, to keep in the same place. If you want to get somewhere else, you must run at least twice as fast as that!”\n\nFirst, I’ll tell you about the two approaches that work in other fields but won’t work in web dev because we actually do kind of suck. Pretending otherwise isn’t productive. Then I’ll end with the one approach that genuinely works. It requires work. But that work is still less effort than keeping up with the firehose of change.\n1. Other fields have collective or institutional filters\nThe first method is the one that’s the least useful to us because, as an industry, web dev does not invest in itself as a field. Training is the bare minimum needed to fill jobs. Conferences are mostly for networking. There is little to no active, original research into new approaches or ideas.\nBut other industries, esp. those who have been around for a while, have institutions and traditions. These provide practitioners with filters to help them stay up-to-date to industry goings-on.\nThey help you keep up with what’s broadly important, and they have journals and industry rags that help you keep up with what matters; which you then complement by following developments in your primary speciality.\nWe instead have aggregators that filter very little. Instead of helping us keep up, they become firehoses of content which makes the problem worse.\nA web dev equivalent, for example, would be a quarterly publication outlining all of the broadly important news in web dev.\n2. They specialise\nCardiologists don’t keep up with experimental Alzheimer’s treatments. Editors and agents in the publishing industry pick the genres they focus on and follow. A developmental linguist specialising in bilingual language acquisition in children isn’t going to be keeping up with the development of natural language processing software models in applied linguistics.\nPeople specialise. They don’t isolate themselves—they’ll still use information from other specialities—but they won’t regard keeping up with those specialities as a core part of their job.\nWeb dev is unique in how we’ve been trying to roll back the specialisation of the field with notions like Full Stack Web Devs. Fifteen years ago, it seemed obvious to many of us in the industry that the future would involve more specialisation.\nInstead, we went the other way and decided: “Hey! Let’s make everybody also code the servers! That’ll save money! Node and browsers are pretty much the same, right? Right?\"\nWe expect people to do the impossible: keep up with everything.\n—So, this is hopeless, right? Might as well quit and become an English teacher or something?\nThere’s one more thing that many fields do that web dev doesn’t. It’s a tactic we can copy as individuals without waiting for a broken industry to fix itself.\n3. They stop “Keeping Up” and instead do Research\nStudents generally start in “keep up” mode. They’re in a new environment like a university. They need to keep up with their coursework, reading, practice, and a new social life. It’s often tough to keep your head above the water. You can do this, as a student, for a few years, but it’s not sustainable for life. So, one of the tasks teachers have, esp. once the students reach the postgraduate stage, is to flick that switch in their minds from “keeping up” mode to “research” mode.\nInstead of keeping up with what everybody else is doing, research the task at hand. You let work guide you.\nHow, exactly, the research is done varies from field to field. Sometimes it’s overtly practice-led like in arts or media. Sometimes it’s directed by your speciality. A lot of the time it’s driven by your thesis question, followed by your research question later in life (Umberto Eco’s How to Write a Thesis explains this one well). The methods and practices vary but new people aren’t expected to just figure it out.\nThey aren’t expected to keep up with everything and then decide afterwards which bits of everything are related to their work (or not).\nThese fields spend a lot of effort teaching new entrants research methodology. Choosing your speciality or your question is generally regarded as a Pretty Damn Important Moment.\nWeb dev as a field doesn’t have a common research methodology or standard tactics for keeping up with change. That’s why we’re all overwhelmed. Not because it’s uniquely fast-paced but because it’s unique in how it doesn’t invest in people, training or methodology.\nWe don’t teach people to ask the right questions.\nThe strategy you need to apply is simple: you keep following your feeds, your social media, your subreddits, etc., but you now default to not reading any of it.\nYou only check out articles, podcasts, or videos that are directly relevant to your Work Questions. (More on that later.) Even then, you still don’t read, watch, or listen to them. You scan them above the fold and ask yourself:\nCan I defer reading this until I’m doing the task?\nIt’s useful to have a library of articles that you know are good references for tasks you may or may not need to do in the future. You don’t need to read any of them right away. Just get into practice at spotting them and filing them away.\nThere’s no point in religiously reading every blog post on accessible drag and drop in React, or state management with hooks, whenever these articles pop up in your feed. Bookmark them and use them as references when you’re doing that task.\nDoes this relate to one of my Work Questions?\nIf it doesn’t touch on one of your long-term goals and isn’t a reference you can use later on to guide you in a task, stop reading and close the tab.\nIf it’s important it’ll come across your feed again and again. Paradigm-shifting changes in web dev are rare (AJAX, jQuery, React, CSS Media Queries, CSS Grid, CSS Variables, ESM modules). When they do arrive they’ll become so loud and so prevalent in your web dev community that you’d have to work hard not to notice them. Even then, the transition usually takes years.\nPeople are still building projects that don’t use CSS Grid or Variables and bundle together CommonJS modules. Old methods keep on working.\nIf it does touch on a Work Question you generally need to do a first-pass read to decide how important it is?\nRead through it without looking up words or phrases you don’t understand and skip over the hard-to-parse sentences. The goal is to discover whether a deep read is worth the investment or not, so you don’t want to spend too much time on this read.\nSometimes you find articles that don’t add anything to what you know—don’t materially affect the Question—but are still useful references to have, esp. if you need to convey an idea or method to other people, like your colleagues.\nSometimes you’ll find that the article is worth a deep read. You either put in the time right away and give it a deeper re-read, or you file it away to study later.\nFor example, one of my Work Questions is “How can I make a web UI that doesn’t feel flat but also isn’t a skeuomorphic cartoon pastiche of real-world objects?”. Anything that touches on filters, gradients, or texture effects in CSS will catch my interest. When Ahmad Shadeed’s article on radial and conic gradients came across my feed I scanned it to make sure it was relevant. Then I filed it away for re-read later (which, to be fair, just involved opening as a tab in the browser window that holds research related to current work). After re-reading, I bookmarked it properly so that I could refer to it later when I’m using gradient effects.\nIf it doesn’t relate to a Work Question and isn’t a how-to reference for a future task, ignore it and move on\nReally. I don’t need to follow the ins and outs of React state management. You don’t need to know about the state of modern JS support in XHTML. You should be ignoring most of the goings-on in the web development community.\nHow do we choose our Work Questions?\nNow we get to the tricky part. The good news is that you don’t need to figure this out in one go. You can start with many vague questions and, as you do your research, you either cross them off or rephrase them to become more specific.\nThey are supposed to change over time. Some of them should be dictated by your current tasks. Others can be more aspirational: ask questions related to the work you want to be doing.\nFor example, here are the questions that guide my web dev research when it comes to my Colophon Cards project:\n\nHow do you provide a lightweight yet nicely interactive front end? Anything that comes across my feed that’s about doing more with less—smaller bundle sizes, fewer dependencies, faster loading, etc.—on the front end piques my interest as a possible answer.\nHow can I better manage the project’s CSS? Continue to use bundling? Continue to use CUBE? How do the approaches from Every Layout work in this context?\nAs I wrote above: How can I make a web UI that doesn’t feel flat but also isn’t a skeuomorphic cartoon pastiche of real-world objects? I think UX generally suffers in flat UI design as it doesn’t leverage layering, affordances, and metaphors to the degree that it could. I’m very curious about breaking out of flatland.\nCan I integrate accessibility features into UX designs as obvious-yet-attractive affordances instead of constantly being hidden from view? Wabi-sabi used to be a common reference in web design circles. An example of this would be to make focus styles overt and obvious. But in an aesthetically pleasing way.\nHow can we make browser-based reading more powerful, more useful, and more accessible than other forms of reading?\nIs it possible to make Multi-Page Apps as engaging and ‘snazzy’ as Single-Page-Apps?\nWhat are the simplest kinds of state management tactics that’ll work for a web app? Esp. in a vanilla JS or web component-based app.\nIs it possible to build this kind of app using only serverless-style services without having to geta PhD in AWS and CloudFormation?\nWhat are the best ways to implement unit, integration, and end-to-end testing for a vanilla JS or web components app?\nSVG WTF? Just, SVG. WTF? I need to understand SVG better.\n\nYou’ll note that these questions range from the high level to the low level. Some of them focus on practical details of a specific technology. Others are more ‘chewable’. Some of them are specific and will eventually have a clear answer. Others are open-ended and represent the ongoing development of a work philosophy or outlook.\nThe questions change with the job. When I’ve had projects that involve PDF-rendering in the browser, then that (“What’s the best way to render a PDF in a browser?\") became one of my Work Questions. “How can CSS Grids help with my layouts?” was once a big question. But I dropped it once I felt I had a handle on it. I still rely on the reference articles I bookmarked when I was doing that research.\n\nI set aside about an hour or two a day for research.\nI sit down with a cup of coffee and go through my social media, my feed reader, and a couple of select online sources. I filter out articles and papers based on whether they touch on one of my questions or whether they look like a ‘how-to’ that I can file away.\nI rarely need to spend the entire two hours. It isn’t unusual for me to go over all of my sources in about 30 minutes and come away with nothing relevant. That’s when I switch to active research and proactively look for sources and references related to the questions I have.\nAnd that’s how “keeping up” stops being a chore and becomes an interest-driven research activity that feeds your enthusiasm instead of draining it.",
      "content_html": "<blockquote>\n<p>&mdash;Everything keeps changing</p>\n</blockquote>\n<blockquote>\n<p>&mdash;I&rsquo;m spread too thin trying to keep up</p>\n</blockquote>\n<blockquote>\n<p>&mdash;I feel like I&rsquo;ve lost control over my professional life</p>\n</blockquote>\n<blockquote>\n<p>&mdash;I&rsquo;m starting to regret getting into web development</p>\n</blockquote>\n<blockquote>\n<p>&mdash;I&rsquo;m tired of constantly chasing new frameworks to make sure I don&rsquo;t get replaced by an inexperienced college graduate</p>\n</blockquote>\n<blockquote>\n<p>&mdash;Whatever I try to do to keep up is never enough; the changes never stop coming</p>\n</blockquote>\n<hr>\n<ul>\n<li>You&rsquo;ve barely pushed a feature to production when you notice a new major release of a dependency.</li>\n<li>Keeping up with all of the changes in a single framework is next to impossible. Keeping up the framework&rsquo;s ecosystem is impossible.</li>\n<li>So. Many. New. Packages.</li>\n<li>So. Many. New. Or. Changed. Standards.</li>\n<li>Dozens of new blog posts or articles on how to do stuff appear every day</li>\n</ul>\n<p>I can&rsquo;t keep up; you can&rsquo;t keep up. Nobody can.</p>\n<p>&mdash;<em>But I have to keep up! Otherwise, I won&rsquo;t be able to do my job. Web Development is hell. Maybe I&rsquo;ll just quit and do something else. Anything else.</em></p>\n<hr>\n<p>People say that web development is unique because of the fast pace and volume of changes in the field. And, since most of us have at least a tangential awareness of other fields through our friends and families (and, in my case, former fields of study), we know that web development seems unique in invoking this feeling of <em>helplessness</em>.</p>\n<p>It is unique in overwhelming those of us who practise it, but it <em>isn&rsquo;t</em> uniquely fast-paced.</p>\n<p>I&rsquo;m not talking here about the difficulty of doing or learning the job.</p>\n<p>It&rsquo;s the task of keeping up with change and new developments in the field once you&rsquo;re in it. In that regard, web dev isn&rsquo;t unique.</p>\n<p>If anything, compared to fields that still have active research going on (which isn&rsquo;t the case for software or web dev) like medicine or biotech, the pace of change is arguably much, <em>much</em> lower in web dev.</p>\n<p>But, this feeling of being spread too thin, of being unable to keep up, is real. Just not for the reason you think.</p>\n<p>So, how do people in other fields keep up with changes in that field? Why is web dev so bad? And, how can we learn from other fields and try not to go mad <a href=\"https://en.wikipedia.org/wiki/Red_Queen%27s_race\">racing the Red Queen</a>?</p>\n<blockquote>\n<p>&ldquo;Well, in our country,&rdquo; said Alice, still panting a little, &ldquo;you&rsquo;d generally get to somewhere else—if you run very fast for a long time, as we&rsquo;ve been doing.&rdquo;</p>\n<p>&ldquo;A slow sort of country!&rdquo; said the Queen. &ldquo;Now, here, you see, it takes all the running you can do, to keep in the same place. If you want to get somewhere else, you must run at least twice as fast as that!&rdquo;</p>\n</blockquote>\n<p>First, I&rsquo;ll tell you about the two approaches that work in other fields but <em>won&rsquo;t</em> work in web dev because we actually do kind of suck. Pretending otherwise isn&rsquo;t productive. Then I&rsquo;ll end with the one approach that genuinely works. It requires work. But that work is still less effort than keeping up with the firehose of change.</p>\n<h2 id=\"1-other-fields-have-collective-or-institutional-filters\">1. Other fields have collective or institutional filters</h2>\n<p>The first method is the one that&rsquo;s the least useful to us because, as an industry, web dev does not invest in itself as a <em>field</em>. Training is the bare minimum needed to fill jobs. Conferences are mostly for networking. There is little to no active, original research into new approaches or ideas.</p>\n<p>But other industries, esp. those who have been around for a while, have institutions and traditions. These provide practitioners with filters to help them stay up-to-date to industry goings-on.</p>\n<p>They help you keep up with what&rsquo;s broadly important, and they have journals and industry rags that help you keep up with what matters; which you then complement by following developments in your primary speciality.</p>\n<p>We instead have aggregators that filter very little. Instead of helping us keep up, they become firehoses of content which makes the problem worse.</p>\n<p>A web dev equivalent, for example, would be a quarterly publication outlining all of the broadly important news in web dev.</p>\n<h2 id=\"2-they-specialise\">2. They specialise</h2>\n<p>Cardiologists don&rsquo;t keep up with experimental Alzheimer&rsquo;s treatments. Editors and agents in the publishing industry pick the genres they focus on and follow. A developmental linguist specialising in bilingual language acquisition in children isn&rsquo;t going to be keeping up with the development of natural language processing software models in applied linguistics.</p>\n<p>People specialise. They don&rsquo;t isolate themselves&mdash;they&rsquo;ll still use information from other specialities&mdash;but they won&rsquo;t regard keeping up with those specialities as a core part of their job.</p>\n<p>Web dev is unique in how we&rsquo;ve been trying to roll back the specialisation of the field with notions like Full Stack Web Devs. Fifteen years ago, it seemed obvious to many of us in the industry that the future would involve more specialisation.</p>\n<p>Instead, we went the other way and decided: <em>&ldquo;Hey! Let&rsquo;s make everybody <strong>also</strong> code the servers! That&rsquo;ll save money! Node and browsers are pretty much the same, right? Right?&quot;</em></p>\n<p>We expect people to do the impossible: keep up with everything.</p>\n<p>&mdash;<em>So, this is hopeless, right? Might as well quit and become an English teacher or something?</em></p>\n<p>There&rsquo;s one more thing that many fields do that web dev doesn&rsquo;t. It&rsquo;s a tactic we can copy as individuals without waiting for a broken industry to fix itself.</p>\n<h2 id=\"3-they-stop-keeping-up-and-instead-do-research\">3. They stop &ldquo;Keeping Up&rdquo; and instead do Research</h2>\n<p>Students generally start in &ldquo;keep up&rdquo; mode. They&rsquo;re in a new environment like a university. They need to keep up with their coursework, reading, practice, and a new social life. It&rsquo;s often tough to keep your head above the water. You can do this, as a student, for a few years, but it&rsquo;s not sustainable for life. So, one of the tasks teachers have, esp. once the students reach the postgraduate stage, is to flick that switch in their minds from &ldquo;keeping up&rdquo; mode to &ldquo;research&rdquo; mode.</p>\n<p>Instead of keeping up with what everybody else is doing, research the task at hand. You let <em>work</em> guide you.</p>\n<p>How, exactly, the research is done varies from field to field. Sometimes it&rsquo;s overtly practice-led like in arts or media. Sometimes it&rsquo;s directed by your speciality. A lot of the time it&rsquo;s driven by your thesis question, followed by your research question later in life (<a href=\"https://mitpress.mit.edu/books/how-write-thesis\">Umberto Eco&rsquo;s <em>How to Write a Thesis</em></a> explains this one well). The methods and practices vary but new people aren&rsquo;t expected to just figure it out.</p>\n<p>They aren&rsquo;t expected to keep up with everything and then decide <em>afterwards</em> which bits of everything are related to their work (or not).</p>\n<p>These fields spend a <em>lot</em> of effort teaching new entrants research methodology. Choosing your speciality or your <em>question</em> is generally regarded as a Pretty Damn Important Moment.</p>\n<p>Web dev as a field doesn&rsquo;t have a common research methodology or standard tactics for keeping up with change. <em>That&rsquo;s</em> why we&rsquo;re all overwhelmed. Not because it&rsquo;s uniquely fast-paced but because it&rsquo;s unique in how it doesn&rsquo;t invest in people, training or methodology.</p>\n<p>We don&rsquo;t teach people to ask the right questions.</p>\n<p>The strategy you need to apply is simple: you keep following your feeds, your social media, your subreddits, etc., but you now default to not reading any of it.</p>\n<p>You only check out articles, podcasts, or videos that are directly relevant to your Work Questions. (More on that later.) Even then, you <em>still</em> don&rsquo;t read, watch, or listen to them. You scan them above the fold and ask yourself:</p>\n<h3 id=\"_can-i-defer-reading-this-until-im-doing-the-task_\"><em>Can I defer reading this until I&rsquo;m doing the task?</em></h3>\n<p>It&rsquo;s useful to have a library of articles that you know are good references for tasks you may or may not need to do in the future. You don&rsquo;t need to read any of them right away. Just get into practice at spotting them and filing them away.</p>\n<p>There&rsquo;s no point in religiously reading every blog post on accessible drag and drop in React, or state management with hooks, whenever these articles pop up in your feed. Bookmark them and use them as references <em>when you&rsquo;re doing that task</em>.</p>\n<h3 id=\"_does-this-relate-to-one-of-my-work-questions_\"><em>Does this relate to one of my Work Questions?</em></h3>\n<p>If it doesn&rsquo;t touch on one of your long-term goals and isn&rsquo;t a reference you can use later on to guide you in a task, stop reading and close the tab.</p>\n<p>If it&rsquo;s important it&rsquo;ll come across your feed again and again. Paradigm-shifting changes in web dev are rare (AJAX, jQuery, React, CSS Media Queries, CSS Grid, CSS Variables, ESM modules). When they do arrive they&rsquo;ll become so loud and so prevalent in your web dev community that you&rsquo;d have to work hard <em>not</em> to notice them. Even then, the transition usually takes years.</p>\n<p>People are still building projects that don&rsquo;t use CSS Grid or Variables and bundle together CommonJS modules. Old methods keep on working.</p>\n<p>If it does touch on a Work Question you generally need to do a first-pass read to decide <em>how</em> important it is?</p>\n<p>Read through it without looking up words or phrases you don&rsquo;t understand and skip over the hard-to-parse sentences. The goal is to discover whether a deep read is worth the investment or not, so you don&rsquo;t want to spend too much time on this read.</p>\n<p>Sometimes you find articles that don&rsquo;t add anything to what you know&mdash;don&rsquo;t materially affect the Question&mdash;but are still useful references to have, esp. if you need to convey an idea or method to other people, like your colleagues.</p>\n<p>Sometimes you&rsquo;ll find that the article is worth a deep read. You either put in the time right away and give it a deeper re-read, or you file it away to study later.</p>\n<p>For example, one of my Work Questions is &ldquo;How can I make a web UI that doesn&rsquo;t feel flat but also isn&rsquo;t a skeuomorphic cartoon pastiche of real-world objects?&rdquo;. Anything that touches on filters, gradients, or texture effects in CSS will catch my interest. When <a href=\"https://ishadeed.com/\">Ahmad Shadeed&rsquo;s</a> article on <a href=\"https://www.smashingmagazine.com/2022/01/css-radial-conic-gradient/\">radial and conic gradients</a> came across my feed I scanned it to make sure it was relevant. Then I filed it away for re-read later (which, to be fair, just involved opening as a tab in the browser window that holds research related to current work). After re-reading, I bookmarked it properly so that I could refer to it later when I&rsquo;m using gradient effects.</p>\n<h3 id=\"if-it-doesnt-relate-to-a-work-question-and-isnt-a-how-to-reference-for-a-future-task-ignore-it-and-move-on\">If it doesn&rsquo;t relate to a Work Question and isn&rsquo;t a how-to reference for a future task, ignore it and move on</h3>\n<p>Really. I don&rsquo;t need to follow the ins and outs of React state management. You don&rsquo;t need to know about the state of modern JS support in XHTML. You should be ignoring most of the goings-on in the web development community.</p>\n<h2 id=\"how-do-we-choose-our-work-questions\">How do we choose our Work Questions?</h2>\n<p>Now we get to the tricky part. The good news is that you don&rsquo;t need to figure this out in one go. You can start with many vague questions and, as you do your research, you either cross them off or rephrase them to become more specific.</p>\n<p>They are <em>supposed</em> to change over time. Some of them should be dictated by your current tasks. Others can be more aspirational: ask questions related to the work you want to be doing.</p>\n<p>For example, here are the questions that guide my web dev research when it comes to my <a href=\"https://www.colophon.cards/\">Colophon Cards</a> project:</p>\n<ul>\n<li><em>How do you provide a lightweight yet nicely interactive front end?</em> Anything that comes across my feed that&rsquo;s about doing more with less&mdash;smaller bundle sizes, fewer dependencies, faster loading, etc.&mdash;on the front end piques my interest as a possible answer.</li>\n<li><em>How can I better manage the project&rsquo;s CSS?</em> Continue to use bundling? Continue to use CUBE? How do the approaches from <a href=\"https://every-layout.dev/\">Every Layout</a> work in this context?</li>\n<li>As I wrote above: <em>How can I make a web UI that doesn&rsquo;t feel flat but also isn&rsquo;t a skeuomorphic cartoon pastiche of real-world objects?</em> I think UX generally suffers in flat UI design as it doesn&rsquo;t leverage layering, affordances, and metaphors to the degree that it could. I&rsquo;m very curious about breaking out of flatland.</li>\n<li><em>Can I integrate accessibility features into UX designs as obvious-yet-attractive affordances instead of constantly being hidden from view?</em> <a href=\"https://en.wikipedia.org/wiki/Wabi-sabi\"><em>Wabi-sabi</em></a> used to be a common reference in web design circles. An example of this would be to make focus styles overt and obvious. But in an aesthetically pleasing way.</li>\n<li><em>How can we make browser-based reading more powerful, more useful, and more accessible than other forms of reading?</em></li>\n<li><em>Is it possible to make Multi-Page Apps as engaging and &lsquo;snazzy&rsquo; as Single-Page-Apps?</em></li>\n<li><em>What are the simplest kinds of state management tactics that&rsquo;ll work for a web app?</em> Esp. in a vanilla JS or web component-based app.</li>\n<li><em>Is it possible to build this kind of app using only serverless-style services without having to geta PhD in AWS and CloudFormation?</em></li>\n<li><em>What are the best ways to implement unit, integration, and end-to-end testing for a vanilla JS or web components app?</em></li>\n<li><em>SVG WTF?</em> Just, SVG. WTF? I need to understand SVG better.</li>\n</ul>\n<p>You&rsquo;ll note that these questions range from the high level to the low level. Some of them focus on practical details of a specific technology. Others are more &lsquo;chewable&rsquo;. Some of them are specific and will eventually have a clear answer. Others are open-ended and represent the ongoing development of a work philosophy or outlook.</p>\n<p>The questions change with the job. When I&rsquo;ve had projects that involve PDF-rendering in the browser, then that (&ldquo;What&rsquo;s the best way to render a PDF in a browser?&quot;) became one of my Work Questions. &ldquo;How can CSS Grids help with my layouts?&rdquo; was once a big question. But I dropped it once I felt I had a handle on it. I still rely on the reference articles I bookmarked when I <em>was</em> doing that research.</p>\n<hr>\n<p>I set aside about an hour or two a day for research.</p>\n<p>I sit down with a cup of coffee and go through my social media, my feed reader, and a couple of select online sources. I filter out articles and papers based on whether they touch on one of my questions or whether they look like a &lsquo;how-to&rsquo; that I can file away.</p>\n<p>I rarely need to spend the entire two hours. It isn&rsquo;t unusual for me to go over all of my sources in about 30 minutes and come away with nothing relevant. That&rsquo;s when I switch to <em>active</em> research and proactively look for sources and references related to the questions I have.</p>\n<p>And that&rsquo;s how &ldquo;keeping up&rdquo; stops being a chore and becomes an interest-driven research activity that feeds your enthusiasm instead of draining it.</p>",
      "content_text": "\n—Everything keeps changing\n\n\n—I’m spread too thin trying to keep up\n\n\n—I feel like I’ve lost control over my professional life\n\n\n—I’m starting to regret getting into web development\n\n\n—I’m tired of constantly chasing new frameworks to make sure I don’t get replaced by an inexperienced college graduate\n\n\n—Whatever I try to do to keep up is never enough; the changes never stop coming\n\n\n\nYou’ve barely pushed a feature to production when you notice a new major release of a dependency.\nKeeping up with all of the changes in a single framework is next to impossible. Keeping up the framework’s ecosystem is impossible.\nSo. Many. New. Packages.\nSo. Many. New. Or. Changed. Standards.\nDozens of new blog posts or articles on how to do stuff appear every day\n\nI can’t keep up; you can’t keep up. Nobody can.\n—But I have to keep up! Otherwise, I won’t be able to do my job. Web Development is hell. Maybe I’ll just quit and do something else. Anything else.\n\nPeople say that web development is unique because of the fast pace and volume of changes in the field. And, since most of us have at least a tangential awareness of other fields through our friends and families (and, in my case, former fields of study), we know that web development seems unique in invoking this feeling of helplessness.\nIt is unique in overwhelming those of us who practise it, but it isn’t uniquely fast-paced.\nI’m not talking here about the difficulty of doing or learning the job.\nIt’s the task of keeping up with change and new developments in the field once you’re in it. In that regard, web dev isn’t unique.\nIf anything, compared to fields that still have active research going on (which isn’t the case for software or web dev) like medicine or biotech, the pace of change is arguably much, much lower in web dev.\nBut, this feeling of being spread too thin, of being unable to keep up, is real. Just not for the reason you think.\nSo, how do people in other fields keep up with changes in that field? Why is web dev so bad? And, how can we learn from other fields and try not to go mad racing the Red Queen?\n\n“Well, in our country,” said Alice, still panting a little, “you’d generally get to somewhere else—if you run very fast for a long time, as we’ve been doing.”\n“A slow sort of country!” said the Queen. “Now, here, you see, it takes all the running you can do, to keep in the same place. If you want to get somewhere else, you must run at least twice as fast as that!”\n\nFirst, I’ll tell you about the two approaches that work in other fields but won’t work in web dev because we actually do kind of suck. Pretending otherwise isn’t productive. Then I’ll end with the one approach that genuinely works. It requires work. But that work is still less effort than keeping up with the firehose of change.\n1. Other fields have collective or institutional filters\nThe first method is the one that’s the least useful to us because, as an industry, web dev does not invest in itself as a field. Training is the bare minimum needed to fill jobs. Conferences are mostly for networking. There is little to no active, original research into new approaches or ideas.\nBut other industries, esp. those who have been around for a while, have institutions and traditions. These provide practitioners with filters to help them stay up-to-date to industry goings-on.\nThey help you keep up with what’s broadly important, and they have journals and industry rags that help you keep up with what matters; which you then complement by following developments in your primary speciality.\nWe instead have aggregators that filter very little. Instead of helping us keep up, they become firehoses of content which makes the problem worse.\nA web dev equivalent, for example, would be a quarterly publication outlining all of the broadly important news in web dev.\n2. They specialise\nCardiologists don’t keep up with experimental Alzheimer’s treatments. Editors and agents in the publishing industry pick the genres they focus on and follow. A developmental linguist specialising in bilingual language acquisition in children isn’t going to be keeping up with the development of natural language processing software models in applied linguistics.\nPeople specialise. They don’t isolate themselves—they’ll still use information from other specialities—but they won’t regard keeping up with those specialities as a core part of their job.\nWeb dev is unique in how we’ve been trying to roll back the specialisation of the field with notions like Full Stack Web Devs. Fifteen years ago, it seemed obvious to many of us in the industry that the future would involve more specialisation.\nInstead, we went the other way and decided: “Hey! Let’s make everybody also code the servers! That’ll save money! Node and browsers are pretty much the same, right? Right?\"\nWe expect people to do the impossible: keep up with everything.\n—So, this is hopeless, right? Might as well quit and become an English teacher or something?\nThere’s one more thing that many fields do that web dev doesn’t. It’s a tactic we can copy as individuals without waiting for a broken industry to fix itself.\n3. They stop “Keeping Up” and instead do Research\nStudents generally start in “keep up” mode. They’re in a new environment like a university. They need to keep up with their coursework, reading, practice, and a new social life. It’s often tough to keep your head above the water. You can do this, as a student, for a few years, but it’s not sustainable for life. So, one of the tasks teachers have, esp. once the students reach the postgraduate stage, is to flick that switch in their minds from “keeping up” mode to “research” mode.\nInstead of keeping up with what everybody else is doing, research the task at hand. You let work guide you.\nHow, exactly, the research is done varies from field to field. Sometimes it’s overtly practice-led like in arts or media. Sometimes it’s directed by your speciality. A lot of the time it’s driven by your thesis question, followed by your research question later in life (Umberto Eco’s How to Write a Thesis explains this one well). The methods and practices vary but new people aren’t expected to just figure it out.\nThey aren’t expected to keep up with everything and then decide afterwards which bits of everything are related to their work (or not).\nThese fields spend a lot of effort teaching new entrants research methodology. Choosing your speciality or your question is generally regarded as a Pretty Damn Important Moment.\nWeb dev as a field doesn’t have a common research methodology or standard tactics for keeping up with change. That’s why we’re all overwhelmed. Not because it’s uniquely fast-paced but because it’s unique in how it doesn’t invest in people, training or methodology.\nWe don’t teach people to ask the right questions.\nThe strategy you need to apply is simple: you keep following your feeds, your social media, your subreddits, etc., but you now default to not reading any of it.\nYou only check out articles, podcasts, or videos that are directly relevant to your Work Questions. (More on that later.) Even then, you still don’t read, watch, or listen to them. You scan them above the fold and ask yourself:\nCan I defer reading this until I’m doing the task?\nIt’s useful to have a library of articles that you know are good references for tasks you may or may not need to do in the future. You don’t need to read any of them right away. Just get into practice at spotting them and filing them away.\nThere’s no point in religiously reading every blog post on accessible drag and drop in React, or state management with hooks, whenever these articles pop up in your feed. Bookmark them and use them as references when you’re doing that task.\nDoes this relate to one of my Work Questions?\nIf it doesn’t touch on one of your long-term goals and isn’t a reference you can use later on to guide you in a task, stop reading and close the tab.\nIf it’s important it’ll come across your feed again and again. Paradigm-shifting changes in web dev are rare (AJAX, jQuery, React, CSS Media Queries, CSS Grid, CSS Variables, ESM modules). When they do arrive they’ll become so loud and so prevalent in your web dev community that you’d have to work hard not to notice them. Even then, the transition usually takes years.\nPeople are still building projects that don’t use CSS Grid or Variables and bundle together CommonJS modules. Old methods keep on working.\nIf it does touch on a Work Question you generally need to do a first-pass read to decide how important it is?\nRead through it without looking up words or phrases you don’t understand and skip over the hard-to-parse sentences. The goal is to discover whether a deep read is worth the investment or not, so you don’t want to spend too much time on this read.\nSometimes you find articles that don’t add anything to what you know—don’t materially affect the Question—but are still useful references to have, esp. if you need to convey an idea or method to other people, like your colleagues.\nSometimes you’ll find that the article is worth a deep read. You either put in the time right away and give it a deeper re-read, or you file it away to study later.\nFor example, one of my Work Questions is “How can I make a web UI that doesn’t feel flat but also isn’t a skeuomorphic cartoon pastiche of real-world objects?”. Anything that touches on filters, gradients, or texture effects in CSS will catch my interest. When Ahmad Shadeed’s article on radial and conic gradients came across my feed I scanned it to make sure it was relevant. Then I filed it away for re-read later (which, to be fair, just involved opening as a tab in the browser window that holds research related to current work). After re-reading, I bookmarked it properly so that I could refer to it later when I’m using gradient effects.\nIf it doesn’t relate to a Work Question and isn’t a how-to reference for a future task, ignore it and move on\nReally. I don’t need to follow the ins and outs of React state management. You don’t need to know about the state of modern JS support in XHTML. You should be ignoring most of the goings-on in the web development community.\nHow do we choose our Work Questions?\nNow we get to the tricky part. The good news is that you don’t need to figure this out in one go. You can start with many vague questions and, as you do your research, you either cross them off or rephrase them to become more specific.\nThey are supposed to change over time. Some of them should be dictated by your current tasks. Others can be more aspirational: ask questions related to the work you want to be doing.\nFor example, here are the questions that guide my web dev research when it comes to my Colophon Cards project:\n\nHow do you provide a lightweight yet nicely interactive front end? Anything that comes across my feed that’s about doing more with less—smaller bundle sizes, fewer dependencies, faster loading, etc.—on the front end piques my interest as a possible answer.\nHow can I better manage the project’s CSS? Continue to use bundling? Continue to use CUBE? How do the approaches from Every Layout work in this context?\nAs I wrote above: How can I make a web UI that doesn’t feel flat but also isn’t a skeuomorphic cartoon pastiche of real-world objects? I think UX generally suffers in flat UI design as it doesn’t leverage layering, affordances, and metaphors to the degree that it could. I’m very curious about breaking out of flatland.\nCan I integrate accessibility features into UX designs as obvious-yet-attractive affordances instead of constantly being hidden from view? Wabi-sabi used to be a common reference in web design circles. An example of this would be to make focus styles overt and obvious. But in an aesthetically pleasing way.\nHow can we make browser-based reading more powerful, more useful, and more accessible than other forms of reading?\nIs it possible to make Multi-Page Apps as engaging and ‘snazzy’ as Single-Page-Apps?\nWhat are the simplest kinds of state management tactics that’ll work for a web app? Esp. in a vanilla JS or web component-based app.\nIs it possible to build this kind of app using only serverless-style services without having to geta PhD in AWS and CloudFormation?\nWhat are the best ways to implement unit, integration, and end-to-end testing for a vanilla JS or web components app?\nSVG WTF? Just, SVG. WTF? I need to understand SVG better.\n\nYou’ll note that these questions range from the high level to the low level. Some of them focus on practical details of a specific technology. Others are more ‘chewable’. Some of them are specific and will eventually have a clear answer. Others are open-ended and represent the ongoing development of a work philosophy or outlook.\nThe questions change with the job. When I’ve had projects that involve PDF-rendering in the browser, then that (“What’s the best way to render a PDF in a browser?\") became one of my Work Questions. “How can CSS Grids help with my layouts?” was once a big question. But I dropped it once I felt I had a handle on it. I still rely on the reference articles I bookmarked when I was doing that research.\n\nI set aside about an hour or two a day for research.\nI sit down with a cup of coffee and go through my social media, my feed reader, and a couple of select online sources. I filter out articles and papers based on whether they touch on one of my questions or whether they look like a ‘how-to’ that I can file away.\nI rarely need to spend the entire two hours. It isn’t unusual for me to go over all of my sources in about 30 minutes and come away with nothing relevant. That’s when I switch to active research and proactively look for sources and references related to the questions I have.\nAnd that’s how “keeping up” stops being a chore and becomes an interest-driven research activity that feeds your enthusiasm instead of draining it.",
      "date_published": "2022-01-31T12:56:06.000Z",
      "date_modified": "2022-01-31T12:56:06.000Z",
      "_plugin": {
        "pageFilename": "0667979e153d86520e9c915f8319823111c40b9fd898cae8ea82371981126e7d.html"
      }
    },
    {
      "id": "https://www.baldurbjarnason.com/2022/forward-looking-statements/",
      "url": "https://www.baldurbjarnason.com/2022/forward-looking-statements/",
      "title": "Let's just not talk about 2021 and look forward instead",
      "summary": "I can’t be the only one who is just bone-tired after the past two years. I can’t blame it just on That Disease or OMG Politics. The problem is that everything else keeps going. Every year, there is some balance between the good and bad. But pandemic times add two colossal rocks to the ‘bad’ side of the scale. Then the regular bad stuff continues to pile on.\nI know this. So why do I feel guilty about productivity (or lack thereof) over the past two weeks?\nI’m guessing I’m not alone.\nLooking back at the past year to take stock makes me even more depressed.\nIn an attempt to counter this perspective-induced ennui, I’d like to take stock of the future instead. Instead of looking over the things that either almost happened last year (but never quite did) or happened (but not as successfully as I hoped), I’d like to look at some of the things that could be interesting in 2022.\n\nWork and ideas for work\nI’m still working on how to position myself—how my skill set could best benefit people. I’m kicking around a few ideas on how I could do that, but in the meantime, I still have time for new projects and jobs, so get in touch if you think I might help you.\nI’ve realised that I have a lot of knowledge and have done a lot of reading on research and decision-making processes. Some of this was a part of my last job’s focus on helping academic researchers. Some of it is how I’ve applied methods and tactics from my arts and humanities background to coding. I’ve noticed that many developers feel underwater, find it hard to keep up, feel lost when they need to begin new projects or tasks and don’t realise that there is help out there. People say that web development is unique in the fast pace and volume of changes in the field.\nThat, strictly speaking, isn’t true. That there is a fast pace is true. And the volume of changes feels all-encompassing. What it isn’t is unique. Social sciences, health research, economics and investment, many fields of science, all face similar problems with managing your research and news.\nWhat is useful is that many of them have been dealing with this pace for a little bit longer than web dev and have come up with a few helpful approaches.\nThere are three prongs to the approach I’d like to take to this (subject to change, as always):\n\nOn frameworks and stacks. For the past six months, I’ve been trying to formalise my approach to navigating the various tech stack and framework choices I deal with in web development. It’s based on the processes taught at art school, which doesn’t just teach you how to practice but what to practice, whose practice you study, why they did what they did, all to help you figure out what to do with your work. With a bit of Thomas S. Kuhn mixed in. This one could take a while.\nWhen to read, when to bookmark, and when to Google. How to do the practice-led research that we should all be doing as web developers. The web development training programs that I’m aware of don’t teach this. But they should.\nPractice-led note-taking. Zettelkasten is a note-taking strategy out of social sciences that’s popular in certain online circles today. It works well when you’re working on novel ideas and new theories in your field. It doesn’t work well for practice-led research which is what most developers do. Umberto Eco’s approach, from his How to Write a Thesis, is, in my view, a better tactic when the research has to have a specific outcome (thesis, program, website, etc.). I’d like to figure out specific ways to adapt this idea to web dev research. But in the meantime, you can read and enjoy Eco’s original book. I highly recommend it.\n\nWeb devving it\nI love web development and it’s still going to be a big part of what I do, esp. since I’m still working on my own website and web apps (see Colophon Cards below).\nBut I keep changing my mind as to whether I should focus my time on coding-oriented web dev topics or not. I have a strong preference for ‘vanilla’ JS approaches (that is, using browser-provided APIs directly) and I tried my hand at writing about those topics. I’m just not convinced that trying to teach others how to effectively use browser-provided APIs for web dev is a productive use of my time. But maybe I’m just getting jaded after years of constantly seeing people apply the React hammer to every web dev nail, screw, bolt, or fastener in sight.\nI’ll write posts on the approaches and methods I’ll be using in my web dev practice (like Colophon Cards) but I’m still on the fence as to whether I should push beyond that.\nI have a suspicion that I might have a greater impact—be more helpful to people—by writing about research and process for web dev. But I’ll only find out by testing it.\nWriting\nI wrote a few mega-posts last year that might even qualify as short books:\n\nSoftware Crisis 2.0, on how software goes bad.\n136 facts every web dev should know before they burn out and turn to landscape painting or nude modelling, full of bite-sized advice and opinions.\nLessons in Interactivity, 2021 redux, an overview over the past decade.\n\nI’d like to take these long essays and extract as many focused ‘one problem, one solution’ blog posts out of them. Take each concept and frame it with the problem it solves.\nI’d also like to put together a proper book-type thing or two this year. Could be fun.\nColophon Cards\nFrom the site:\n\nMy goal with Colophon Cards is to create a web-based note-taking app for bookmarking and reading websites, ebooks, and documents.\n\nI got a grant to prototype a web app that marries ideas from both traditional card-based note-taking approaches with hypertextual digital note-taking apps.\nMaking is a lot of fun and I’m looking forward to putting the prototype together.\nOther Stuff\nI’d like to get back into regular practice with my photography. The past four years have, honestly, been a bit frantic and I haven’t taken the time that I should have to go out and take pictures.\nI did manage to do a bit of it over the past year. Let’s hope 2022 will see even more.\n\n\n\n\n\n\n\n\n\n\n",
      "content_html": "<p>I can&rsquo;t be the only one who is just bone-tired after the past two years. I can&rsquo;t blame it just on That Disease or OMG Politics. The problem is that everything else keeps going. Every year, there is some balance between the good and bad. But pandemic times add two colossal rocks to the &lsquo;bad&rsquo; side of the scale. Then the regular bad stuff continues to pile on.</p>\n<p>I know this. So why do I feel guilty about productivity (or lack thereof) over the past two weeks?</p>\n<p>I&rsquo;m guessing I&rsquo;m not alone.</p>\n<p>Looking back at the past year to take stock makes me even more depressed.</p>\n<p>In an attempt to counter this perspective-induced ennui, I&rsquo;d like to take stock of the future instead. Instead of looking over the things that either almost happened last year (but never quite did) or happened (but not as successfully as I hoped), I&rsquo;d like to look at some of the things that could be interesting in 2022.</p>\n<hr>\n<h2 id=\"work-and-ideas-for-work\">Work and ideas for work</h2>\n<p>I&rsquo;m still working on how to position myself&mdash;how my skill set could best benefit people. I&rsquo;m kicking around a few ideas on how I could do that, but in the meantime, <a href=\"https://www.baldurbjarnason.com/work/2021/\">I still have time for new projects and jobs</a>, so get in touch if you think I might help you.</p>\n<p>I&rsquo;ve realised that I have a lot of knowledge and have done a lot of reading on research and decision-making processes. Some of this was a part of my last job&rsquo;s focus on helping academic researchers. Some of it is how I&rsquo;ve applied methods and tactics from my arts and humanities background to coding. I&rsquo;ve noticed that many developers feel underwater, find it hard to keep up, feel lost when they need to begin new projects or tasks and don&rsquo;t realise that there is help out there. People say that web development is unique in the fast pace and volume of changes in the field.</p>\n<p>That, strictly speaking, isn&rsquo;t true. That there is a fast pace is true. And the volume of changes feels all-encompassing. What it isn&rsquo;t is unique. Social sciences, health research, economics and investment, many fields of science, all face similar problems with managing your research and news.</p>\n<p>What is <em>useful</em> is that many of them have been dealing with this pace for a little bit longer than web dev and have come up with a few helpful approaches.</p>\n<p>There are three prongs to the approach I&rsquo;d like to take to this (subject to change, as always):</p>\n<ol>\n<li>On frameworks and stacks. For the past six months, I&rsquo;ve been trying to formalise my approach to navigating the various tech stack and framework choices I deal with in web development. It&rsquo;s based on the processes taught at art school, which doesn&rsquo;t just teach you how to practice but <em>what</em> to practice, whose practice you study, <em>why</em> they did what they did, all to help you figure out what to do with your work. With a bit of Thomas S. Kuhn mixed in. This one could take a while.</li>\n<li>When to read, when to bookmark, and when to Google. How to do the practice-led research that we should all be doing as web developers. The web development training programs that I&rsquo;m aware of don&rsquo;t teach this. But they should.</li>\n<li>Practice-led note-taking. Zettelkasten is a note-taking strategy out of social sciences that&rsquo;s popular in certain online circles today. It works well when you&rsquo;re working on novel ideas and new theories in your field. It doesn&rsquo;t work well for practice-led research which is what most developers do. Umberto Eco&rsquo;s approach, from his <em>How to Write a Thesis</em>, is, in my view, a better tactic when the research has to have a specific outcome (thesis, program, website, etc.). I&rsquo;d like to figure out specific ways to adapt this idea to web dev research. But in the meantime, you can read and enjoy Eco&rsquo;s original book. I highly recommend it.</li>\n</ol>\n<h2 id=\"web-devving-it\">Web devving it</h2>\n<p>I love web development and it&rsquo;s still going to be a big part of what I do, esp. since I&rsquo;m still working on my own website and web apps (see Colophon Cards below).</p>\n<p>But I keep changing my mind as to whether I should focus my time on coding-oriented web dev topics or not. I have a strong preference for &lsquo;vanilla&rsquo; JS approaches (that is, using browser-provided APIs directly) and I tried my hand at writing about <a href=\"https://www.baldurbjarnason.com/2021/five-ways-to-get-out-of-the-event-handling-mess/\">those</a> <a href=\"https://www.baldurbjarnason.com/2021/fetch-and-formdata/\">topics</a>. I&rsquo;m just not convinced that trying to teach others how to effectively use browser-provided APIs for web dev is a productive use of my time. But maybe I&rsquo;m just getting jaded after years of constantly seeing people apply the React hammer to every web dev nail, screw, bolt, or fastener in sight.</p>\n<p>I&rsquo;ll write posts on the approaches and methods I&rsquo;ll be using in my web dev practice (like <a href=\"https://www.colophon.cards/\">Colophon Cards</a>) but I&rsquo;m still on the fence as to whether I should push beyond that.</p>\n<p>I have a suspicion that I might have a greater impact&mdash;be more helpful to people&mdash;by writing about research and process for web dev. But I&rsquo;ll only find out by testing it.</p>\n<h2 id=\"writing\">Writing</h2>\n<p>I wrote a few mega-posts last year that might even qualify as short books:</p>\n<ul>\n<li><a href=\"https://www.baldurbjarnason.com/2021/software-crisis-2/\">Software Crisis 2.0</a>, on how software goes bad.</li>\n<li><a href=\"https://www.baldurbjarnason.com/2021/100-things-every-web-developer-should-know/\">136 facts every web dev should know before they burn out and turn to landscape painting or nude modelling</a>, full of bite-sized advice and opinions.</li>\n<li><a href=\"https://www.baldurbjarnason.com/2021/lessons-in-interactivity/\">Lessons in Interactivity, 2021 redux</a>, an overview over the past decade.</li>\n</ul>\n<p>I&rsquo;d like to take these long essays and extract as many focused &lsquo;one problem, one solution&rsquo; blog posts out of them. Take each concept and frame it with the problem it solves.</p>\n<p>I&rsquo;d also like to put together a proper book-type thing or two this year. Could be fun.</p>\n<h2 id=\"colophon-cards\">Colophon Cards</h2>\n<p><a href=\"https://www.colophon.cards/\">From the site</a>:</p>\n<blockquote>\n<p>My goal with Colophon Cards is to create a web-based note-taking app for bookmarking and reading websites, ebooks, and documents.</p>\n</blockquote>\n<p>I got a grant to prototype a web app that marries ideas from both traditional card-based note-taking approaches with hypertextual digital note-taking apps.</p>\n<p>Making is a lot of fun and I&rsquo;m looking forward to putting the prototype together.</p>\n<h2 id=\"other-stuff\">Other Stuff</h2>\n<p>I&rsquo;d like to get back into regular practice with my photography. The past four years have, honestly, been a bit frantic and I haven&rsquo;t taken the time that I should have to go out and take pictures.</p>\n<p>I did manage to do a bit of it over the past year. Let&rsquo;s hope 2022 will see even more.</p>\n<img src=\"https://www.baldurbjarnason.com/images/2021/geothermal-well.jpg\" alt=\"Steam rises from a geothermal well in Hveragerði\">\n<img src=\"https://www.baldurbjarnason.com/images/2021/gull-and-flies-by-laugarvatn.jpg\" alt=\"A gull is surrounded by a cloud of flies by Laugarvatn\">\n<img src=\"https://www.baldurbjarnason.com/images/2021/park-bench.jpg\" alt=\"A local bench here in Hveragerði\">\n<img src=\"https://www.baldurbjarnason.com/images/2021/raven-entering-trees.jpg\" alt=\"A raven flies behind some trees\">\n<img src=\"https://www.baldurbjarnason.com/images/2021/raven-flying-over-roof.jpg\" alt=\"A raven flies over my roof\">\n<img src=\"https://www.baldurbjarnason.com/images/2021/raven-leaving-trees.jpg\" alt=\"A raven flies past a tree\">\n<img src=\"https://www.baldurbjarnason.com/images/2021/sun-sets-in-the-local-park.jpg\" alt=\"The sun sets in the local Hveragerði park\">\n<img src=\"https://www.baldurbjarnason.com/images/2021/sunset-behind-local-greenhouse.jpg\" alt=\"The sun sets behind the local greenhouse here in Hveragerði\">\n<img src=\"https://www.baldurbjarnason.com/images/2021/swimmers-in-the-summer.jpg\" alt=\"It's summer by Laugarvatn and the lake is full of swimmers\">\n<img src=\"https://www.baldurbjarnason.com/images/2021/two-people-talk-in-the-distance.jpg\" alt=\"Two people walk in a park across the river\">\n<img src=\"https://www.baldurbjarnason.com/images/2021/two-ravens-in-the-sky.jpg\" alt=\"Two ravens fly against a grey sky\">",
      "content_text": "I can’t be the only one who is just bone-tired after the past two years. I can’t blame it just on That Disease or OMG Politics. The problem is that everything else keeps going. Every year, there is some balance between the good and bad. But pandemic times add two colossal rocks to the ‘bad’ side of the scale. Then the regular bad stuff continues to pile on.\nI know this. So why do I feel guilty about productivity (or lack thereof) over the past two weeks?\nI’m guessing I’m not alone.\nLooking back at the past year to take stock makes me even more depressed.\nIn an attempt to counter this perspective-induced ennui, I’d like to take stock of the future instead. Instead of looking over the things that either almost happened last year (but never quite did) or happened (but not as successfully as I hoped), I’d like to look at some of the things that could be interesting in 2022.\n\nWork and ideas for work\nI’m still working on how to position myself—how my skill set could best benefit people. I’m kicking around a few ideas on how I could do that, but in the meantime, I still have time for new projects and jobs, so get in touch if you think I might help you.\nI’ve realised that I have a lot of knowledge and have done a lot of reading on research and decision-making processes. Some of this was a part of my last job’s focus on helping academic researchers. Some of it is how I’ve applied methods and tactics from my arts and humanities background to coding. I’ve noticed that many developers feel underwater, find it hard to keep up, feel lost when they need to begin new projects or tasks and don’t realise that there is help out there. People say that web development is unique in the fast pace and volume of changes in the field.\nThat, strictly speaking, isn’t true. That there is a fast pace is true. And the volume of changes feels all-encompassing. What it isn’t is unique. Social sciences, health research, economics and investment, many fields of science, all face similar problems with managing your research and news.\nWhat is useful is that many of them have been dealing with this pace for a little bit longer than web dev and have come up with a few helpful approaches.\nThere are three prongs to the approach I’d like to take to this (subject to change, as always):\n\nOn frameworks and stacks. For the past six months, I’ve been trying to formalise my approach to navigating the various tech stack and framework choices I deal with in web development. It’s based on the processes taught at art school, which doesn’t just teach you how to practice but what to practice, whose practice you study, why they did what they did, all to help you figure out what to do with your work. With a bit of Thomas S. Kuhn mixed in. This one could take a while.\nWhen to read, when to bookmark, and when to Google. How to do the practice-led research that we should all be doing as web developers. The web development training programs that I’m aware of don’t teach this. But they should.\nPractice-led note-taking. Zettelkasten is a note-taking strategy out of social sciences that’s popular in certain online circles today. It works well when you’re working on novel ideas and new theories in your field. It doesn’t work well for practice-led research which is what most developers do. Umberto Eco’s approach, from his How to Write a Thesis, is, in my view, a better tactic when the research has to have a specific outcome (thesis, program, website, etc.). I’d like to figure out specific ways to adapt this idea to web dev research. But in the meantime, you can read and enjoy Eco’s original book. I highly recommend it.\n\nWeb devving it\nI love web development and it’s still going to be a big part of what I do, esp. since I’m still working on my own website and web apps (see Colophon Cards below).\nBut I keep changing my mind as to whether I should focus my time on coding-oriented web dev topics or not. I have a strong preference for ‘vanilla’ JS approaches (that is, using browser-provided APIs directly) and I tried my hand at writing about those topics. I’m just not convinced that trying to teach others how to effectively use browser-provided APIs for web dev is a productive use of my time. But maybe I’m just getting jaded after years of constantly seeing people apply the React hammer to every web dev nail, screw, bolt, or fastener in sight.\nI’ll write posts on the approaches and methods I’ll be using in my web dev practice (like Colophon Cards) but I’m still on the fence as to whether I should push beyond that.\nI have a suspicion that I might have a greater impact—be more helpful to people—by writing about research and process for web dev. But I’ll only find out by testing it.\nWriting\nI wrote a few mega-posts last year that might even qualify as short books:\n\nSoftware Crisis 2.0, on how software goes bad.\n136 facts every web dev should know before they burn out and turn to landscape painting or nude modelling, full of bite-sized advice and opinions.\nLessons in Interactivity, 2021 redux, an overview over the past decade.\n\nI’d like to take these long essays and extract as many focused ‘one problem, one solution’ blog posts out of them. Take each concept and frame it with the problem it solves.\nI’d also like to put together a proper book-type thing or two this year. Could be fun.\nColophon Cards\nFrom the site:\n\nMy goal with Colophon Cards is to create a web-based note-taking app for bookmarking and reading websites, ebooks, and documents.\n\nI got a grant to prototype a web app that marries ideas from both traditional card-based note-taking approaches with hypertextual digital note-taking apps.\nMaking is a lot of fun and I’m looking forward to putting the prototype together.\nOther Stuff\nI’d like to get back into regular practice with my photography. The past four years have, honestly, been a bit frantic and I haven’t taken the time that I should have to go out and take pictures.\nI did manage to do a bit of it over the past year. Let’s hope 2022 will see even more.\n\n\n\n\n\n\n\n\n\n\n",
      "date_published": "2022-01-05T12:56:06.000Z",
      "date_modified": "2022-01-05T12:56:06.000Z",
      "_plugin": {
        "pageFilename": "8064fea67f6864b692af8004856b7b72b2f3d7c78712fa00d25472a91735cbb5.html"
      }
    },
    {
      "id": "https://www.baldurbjarnason.com/2021/making-colophon-cards/",
      "url": "https://www.baldurbjarnason.com/2021/making-colophon-cards/",
      "title": "Making Colophon Cards",
      "summary": "There are tasks that computers are good at. And there are tasks where they aren’t. One driver of the evolution of the personal computer, laptops, mobile phones, and all forms of mobile computing has been the desire to increase their range: do more; in a smaller package. Many in tech and software are addicted to riding this wave of new capabilities, however long it will last, to work on and create new software. To extend the reach of the computers in our lives.\nInnovation’s the word. Pushing the boundaries. You know the phrases. Usually spouted by that dude at the party.\nThe other side is also interesting. We are now in a place where we have entire genres of software that have decades of history, are backed by stacks of new and old research, have dozens of successful, well-made exemplar apps, and a broad enough conceptual space to allow for new variations on the theme.\nIn short, we have genre software and we have avant-garde software, and I’ve always been more interested in genre fiction than literary fiction.\nOne of the earliest genres of software is the Personal Knowledge or Information Manager—arguably as old as the computer mouse itself. Managing data is one of the tasks computers have always been good at, so we’ve been making software in that genre for decades.\nOutliners, hypertext systems, note-taking apps, personal information databases—we’ve been doing this for a while and, because software is inherently ephemeral, we make new iterations for every generation.\nSometimes, such as with Tinderbox or DEVONThink, the new iterations are new versions of the original software. Sometimes, such as with Bear, Ulysses, Roam, or Obsidian, it’s a new take on the genre. Not so new that you don’t recognise it for it is, and not so innovative that it doesn’t reuse what worked for other apps, but new variations that are adapted to work well in our current computing context.\nThat isn’t even close to a comprehensive list. There’s also Evernote, Drafts, 1Writer—even Apple’s Notes app has evolved to become impressively useful. And I’m still only scratching the surface.\nThese apps are also extremely diverse. There’s an increasing tendency for software, in this age of ‘flat’, to all look the same. Same design. Same aesthetic. Same icons. Same fundamental CRUD (Create, Read, Update, Delete) concept mapped onto a specific problem domain. But you’d never mistake a screenshot of Bear for one of Tinderbox or Ulysses. You’d never look at Roam and think to yourself: “huh? That looks exactly like DEVONThink.”\nI’ve been working in or adjacent to this space for the past five years, with varying degrees of success and you can probably tell that I’m a little bit obsessed with the genre.\nIt shouldn’t come as a surprise that I’m working on my contribution to the genre.\nI’ve wanted to build a specific take on the note-oriented personal information manager for myself for a long time.\nThis summer I applied for a grant from the Technology Development Fund at The Icelandic Centre for Research to create a prototype of a notetaking app that I’m calling…\nColophon Cards\nWhile the app itself won’t be open source (though some bits of it might be), I’ve gotten used to following the open-source ethos of working publicly and transparently.\nSo, over the next six months (or longer if I’m successful) I’m going to be documenting the process, the design, development, research, marketing, discussion with my advisers, and other details, at colophon.cards.\nAs you can probably tell from the site, I began a few days ago.\n\nThe front page is the first version of the pitch for the app and my specific approach.\nThe first design notes are a high-level sketch of how it should work.\nThe data model are my first attempt at structuring it.\nThe sharing model outlines how I envision collaboration to work.\nAttachments and bookmarks are about how information management works. I like this one so much that I edited it into the front page pitch, as I’m sure you can tell.\nReading and viewing outlines my take on what’s missing in the field in terms of reading features in knowledge management apps.\nThe business model is a rough sketch of what I imagine the business model to be. Not because I’m anywhere near launching this but because you can’t design an app without having a sense of its business model and its margins.\nThe questions that need to be answered are just that. Open questions that I need to find answers to.\n\nAdditionally, you can follow my work on the website and comment with an issue on the GitHub repository. (Work on the software itself will be in a private repository.)\nThe notes I’ve been posting are rough and unedited. They are work products, not essays or marketing, those belong here on this site. You can follow Colophon Cards news by following the mailing list using the form on the site (this is a separate mailing list from the one on this site), by following its feed, or by watching the GitHub repository.\nI’ll also make sure to post about major updates here on this site.\nI’m enjoying the process a lot and I hope that you’ll enjoy it with me.",
      "content_html": "<p>There are tasks that computers are good at. And there are tasks where they aren&rsquo;t. One driver of the evolution of the personal computer, laptops, mobile phones, and all forms of mobile computing has been the desire to increase their range: do more; in a smaller package. Many in tech and software are addicted to riding this wave of new capabilities, however long it will last, to work on and create new software. To extend the reach of the computers in our lives.</p>\n<p>Innovation&rsquo;s the word. Pushing the boundaries. You know the phrases. Usually spouted by <em>that</em> dude at the party.</p>\n<p>The other side is <em>also</em> interesting. We are now in a place where we have entire genres of software that have decades of history, are backed by stacks of new and old research, have dozens of successful, well-made exemplar apps, and a broad enough conceptual space to allow for new variations on the theme.</p>\n<p>In short, we have genre software and we have avant-garde software, and I&rsquo;ve always been more interested in genre fiction than literary fiction.</p>\n<p>One of the earliest genres of software is the Personal Knowledge or Information Manager&mdash;<a href=\"https://en.wikipedia.org/wiki/NLS_(computer_system)\">arguably as old as the computer mouse itself</a>. Managing data is one of the tasks computers have <em>always</em> been good at, so we&rsquo;ve been making software in that genre for decades.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/MORE_(application)\">Outliners</a>, <a href=\"https://www.eastgate.com/Tinderbox/\">hypertext systems</a>, <a href=\"https://notational.net/\">note-taking apps</a>, <a href=\"https://www.devontechnologies.com/apps/devonthink\">personal information databases</a>&mdash;we&rsquo;ve been doing this for a while and, because software is inherently ephemeral, we make new iterations for every generation.</p>\n<p>Sometimes, such as with Tinderbox or DEVONThink, the new iterations are new versions of the original software. Sometimes, such as with <a href=\"https://bear.app/\">Bear</a>, <a href=\"https://ulysses.app/\">Ulysses</a>, <a href=\"https://roamresearch.com/\">Roam</a>, or <a href=\"https://obsidian.md/\">Obsidian</a>, it&rsquo;s a new take on the genre. Not so new that you don&rsquo;t recognise it for it is, and not so innovative that it doesn&rsquo;t reuse what worked for other apps, but new variations that are adapted to work well in our current computing context.</p>\n<p>That isn&rsquo;t even close to a comprehensive list. There&rsquo;s also <a href=\"https://evernote.com/\">Evernote</a>, <a href=\"https://getdrafts.com/\">Drafts</a>, <a href=\"https://1writerapp.com/\">1Writer</a>&mdash;even Apple&rsquo;s Notes app has evolved to become impressively useful. And I&rsquo;m still only scratching the surface.</p>\n<p>These apps are also extremely diverse. There&rsquo;s an increasing tendency for software, in this age of &lsquo;flat&rsquo;, to all look the same. Same design. Same aesthetic. Same icons. Same fundamental CRUD (Create, Read, Update, Delete) concept mapped onto a specific problem domain. But you&rsquo;d never mistake a screenshot of Bear for one of Tinderbox or Ulysses. You&rsquo;d never look at Roam and think to yourself: &ldquo;huh? That looks exactly like DEVONThink.&rdquo;</p>\n<p>I&rsquo;ve been working in or adjacent to this space for the past five years, with varying degrees of success and you can probably tell that I&rsquo;m a little bit obsessed with the genre.</p>\n<p>It shouldn&rsquo;t come as a surprise that I&rsquo;m working on my contribution to the genre.</p>\n<p>I&rsquo;ve wanted to build a specific take on the note-oriented personal information manager for myself for a long time.</p>\n<p>This summer I applied for a grant from the Technology Development Fund at <a href=\"https://en.rannis.is/funding/research/technology-development-fund/nr/545\">The Icelandic Centre for Research</a> to create a prototype of a notetaking app that I&rsquo;m calling&hellip;</p>\n<p><em><a href=\"https://www.colophon.cards\">Colophon Cards</a></em></p>\n<p>While the app itself won&rsquo;t be open source (though some bits of it might be), I&rsquo;ve gotten used to following the open-source ethos of working publicly and transparently.</p>\n<p>So, over the next six months (or longer if I&rsquo;m successful) I&rsquo;m going to be documenting the process, the design, development, research, marketing, discussion with my advisers, and other details, at <a href=\"https://www.colophon.cards/\">colophon.cards</a>.</p>\n<p>As you can probably tell from the site, I began a few days ago.</p>\n<ul>\n<li><a href=\"https://www.colophon.cards/\">The front page</a> is the first version of the pitch for the app and my specific approach.</li>\n<li><a href=\"https://www.colophon.cards/notes/01-design-notes/\">The first design notes</a> are a high-level sketch of how it should work.</li>\n<li><a href=\"https://www.colophon.cards/notes/02-data-model/\">The data model</a> are my first attempt at structuring it.</li>\n<li><a href=\"https://www.colophon.cards/notes/03-sharing-model/\">The sharing model</a> outlines how I envision collaboration to work.</li>\n<li><a href=\"https://www.colophon.cards/notes/04-attachments-bookmarks/\">Attachments and bookmarks</a> are about how information management works. I like this one so much that I edited it into the front page pitch, as I&rsquo;m sure you can tell.</li>\n<li><a href=\"https://www.colophon.cards/notes/05-reading-viewing/\">Reading and viewing</a> outlines my take on what&rsquo;s missing in the field in terms of reading features in knowledge management apps.</li>\n<li><a href=\"https://www.colophon.cards/notes/06-business-model/\">The business model</a> is a rough sketch of what I imagine the business model to be. Not because I&rsquo;m anywhere <em>near</em> launching this but because you <em>can&rsquo;t</em> design an app without having a sense of its business model and its margins.</li>\n<li><a href=\"https://www.colophon.cards/notes/10-questions/\">The questions that need to be answered</a> are just that. Open questions that I need to find answers to.</li>\n</ul>\n<p>Additionally, you can follow my work on the website and comment with an issue on <a href=\"https://github.com/baldurbjarnason/colophon.cards\">the GitHub repository</a>. (Work on the software itself will be in a private repository.)</p>\n<p>The notes I&rsquo;ve been posting are rough and unedited. They are work products, not essays or marketing, those belong here on this site. You can follow Colophon Cards news by following the mailing list using the form on the site (this is a separate mailing list from the one on this site), by following its feed, or by watching the GitHub repository.</p>\n<p>I&rsquo;ll also make sure to post about major updates here on this site.</p>\n<p>I&rsquo;m enjoying the process a lot and I hope that you&rsquo;ll enjoy it with me.</p>",
      "content_text": "There are tasks that computers are good at. And there are tasks where they aren’t. One driver of the evolution of the personal computer, laptops, mobile phones, and all forms of mobile computing has been the desire to increase their range: do more; in a smaller package. Many in tech and software are addicted to riding this wave of new capabilities, however long it will last, to work on and create new software. To extend the reach of the computers in our lives.\nInnovation’s the word. Pushing the boundaries. You know the phrases. Usually spouted by that dude at the party.\nThe other side is also interesting. We are now in a place where we have entire genres of software that have decades of history, are backed by stacks of new and old research, have dozens of successful, well-made exemplar apps, and a broad enough conceptual space to allow for new variations on the theme.\nIn short, we have genre software and we have avant-garde software, and I’ve always been more interested in genre fiction than literary fiction.\nOne of the earliest genres of software is the Personal Knowledge or Information Manager—arguably as old as the computer mouse itself. Managing data is one of the tasks computers have always been good at, so we’ve been making software in that genre for decades.\nOutliners, hypertext systems, note-taking apps, personal information databases—we’ve been doing this for a while and, because software is inherently ephemeral, we make new iterations for every generation.\nSometimes, such as with Tinderbox or DEVONThink, the new iterations are new versions of the original software. Sometimes, such as with Bear, Ulysses, Roam, or Obsidian, it’s a new take on the genre. Not so new that you don’t recognise it for it is, and not so innovative that it doesn’t reuse what worked for other apps, but new variations that are adapted to work well in our current computing context.\nThat isn’t even close to a comprehensive list. There’s also Evernote, Drafts, 1Writer—even Apple’s Notes app has evolved to become impressively useful. And I’m still only scratching the surface.\nThese apps are also extremely diverse. There’s an increasing tendency for software, in this age of ‘flat’, to all look the same. Same design. Same aesthetic. Same icons. Same fundamental CRUD (Create, Read, Update, Delete) concept mapped onto a specific problem domain. But you’d never mistake a screenshot of Bear for one of Tinderbox or Ulysses. You’d never look at Roam and think to yourself: “huh? That looks exactly like DEVONThink.”\nI’ve been working in or adjacent to this space for the past five years, with varying degrees of success and you can probably tell that I’m a little bit obsessed with the genre.\nIt shouldn’t come as a surprise that I’m working on my contribution to the genre.\nI’ve wanted to build a specific take on the note-oriented personal information manager for myself for a long time.\nThis summer I applied for a grant from the Technology Development Fund at The Icelandic Centre for Research to create a prototype of a notetaking app that I’m calling…\nColophon Cards\nWhile the app itself won’t be open source (though some bits of it might be), I’ve gotten used to following the open-source ethos of working publicly and transparently.\nSo, over the next six months (or longer if I’m successful) I’m going to be documenting the process, the design, development, research, marketing, discussion with my advisers, and other details, at colophon.cards.\nAs you can probably tell from the site, I began a few days ago.\n\nThe front page is the first version of the pitch for the app and my specific approach.\nThe first design notes are a high-level sketch of how it should work.\nThe data model are my first attempt at structuring it.\nThe sharing model outlines how I envision collaboration to work.\nAttachments and bookmarks are about how information management works. I like this one so much that I edited it into the front page pitch, as I’m sure you can tell.\nReading and viewing outlines my take on what’s missing in the field in terms of reading features in knowledge management apps.\nThe business model is a rough sketch of what I imagine the business model to be. Not because I’m anywhere near launching this but because you can’t design an app without having a sense of its business model and its margins.\nThe questions that need to be answered are just that. Open questions that I need to find answers to.\n\nAdditionally, you can follow my work on the website and comment with an issue on the GitHub repository. (Work on the software itself will be in a private repository.)\nThe notes I’ve been posting are rough and unedited. They are work products, not essays or marketing, those belong here on this site. You can follow Colophon Cards news by following the mailing list using the form on the site (this is a separate mailing list from the one on this site), by following its feed, or by watching the GitHub repository.\nI’ll also make sure to post about major updates here on this site.\nI’m enjoying the process a lot and I hope that you’ll enjoy it with me.",
      "date_published": "2021-11-29T10:50:06.000Z",
      "date_modified": "2021-11-29T10:50:06.000Z",
      "_plugin": {
        "pageFilename": "37ac75b831d11db34eb9b5d9dfa343e0399fb3a10dcc23ed685723d43ba7cd35.html"
      }
    },
    {
      "id": "https://www.baldurbjarnason.com/2021/what-do-i-need-to-read-to-be-a-css-dev/",
      "url": "https://www.baldurbjarnason.com/2021/what-do-i-need-to-read-to-be-a-css-dev/",
      "title": "What do I need to read to be a great at CSS?",
      "summary": "For the first time in my life, I felt the urge to comment on Reddit.\nOver on r/webdev, this here question popped up:\n\nDo you think reading css articles like css-tricks & smashing magazine is waste of time?\n\nThis question isn’t really about the two sites mentioned but about the frustration we all feel with the endless treadmill of keeping up with what’s happening in web dev. Especially, since a lot of it feels so unproductive:\n\nArticles on features that haven’t shipped yet and may never ship everywhere.\nAdvanced features that address specialised use cases you’re never going to encounter.\nMasturbatory “let’s do this without any JS!” articles that end up being much more complicated than adding, like, a line or two of JS.\n\nIt’s a lot. It’s frustrating. But it doesn’t have to be this way. Which is the reason why I felt the urge to reply with the following. Hopefully others will find it helpful.\n\nSo, I’ve been making websites since before CSS was a thing and using CSS since before absolute positioning was a thing which I guess makes me … intermediate? Maybe? 😄\nYou don’t have to keep running the gossip treadmill to keep up. This applies to CSS, JS, HTML and the rest. As you observe, memorising partially implemented new standards, many of which may not even end up adopted as actual standards, isn’t a productive use of anybody’s time.\nTreat it like you would a gossip column covering people in your field: read it for fun, don’t over-invest, don’t feel bad about missing out on it. There’s a lot of gossip out there so there’s a lot to ignore.\nWhat I’ve found does pay off is focusing on doing different kinds of reading:\nThere’s the aforementioned gossip—new news so new that it may not ever be useful. You don’t want to spend much time on web dev gossip in general (JS dev news is often even more gossipy).\nThen you have the more detailed how-tos, some of which may be covering recent-ish standards, but are mostly about features you can use right away. Ahmad Shadeed’s blog has many good examples of this which I highly recommend. You read these texts to get a sense of what the platform can do. You don’t need to memorise how it is done. Just know that it can be done.\nThen you have problem analysis and solutions. These posts go over specific problems and how you might solve them. Josh W Comeau’s blog is full of these kinds of posts. Sara Soueidan’s blog is also a good source. Lea Verou’s as well. Smashing Magazine and CSS-Tricks have a lot of these kinds of posts as well, so I would have another look at them if I were you. You were reading them as industry gossip (which they do provide) but it sounds like you weren’t getting the full value that these sites have to offer in terms of howtos and problem solutions.\nThese sites you read—scan mostly—and you bookmark individual posts that you find interesting so that you can refer to them later if you run into the problem they’ve solved yourself. (Which reminds me: I recommend using a bookmarking service so you can find your bookmarks even when you aren’t logged into your preferred browser.)\nAnother important type of reading is higher level or workflow level analysis. Such as the CUBE CSS site. Reading about how to organise your work is some of the most productive learning you can do. Every Layout is another example as it’s fundamentally about how you optimally structure your CSS for composition and reuse. These you read, study, and reread. You don’t have to agree with everything they say, but you should be able to answer (for yourself) why you would disagree with them.\nFinally, there’s synthesis. That’s when you start to read texts that are adjacent to your work so that you become better at addressing those problems on your end. For those, you would be reading blogs on accessibility (like Adrian Roselli’s) or design (like Stephanie Walter’s) or the link blog of a web developer who is also doing cross-discipline synthesis reading (like Jeremy Keith’s, which I highly recommend.)\nYou don’t have to understand everything on all of the sites in this last bucket. Those are more for building a shared vocabulary and mindset with other specialities that you will be working with.\nOf course, checking these sites every day is a huge pain, especially since most of them aren’t updated every day. This is why a feed reader, such as Feedly, is gold. You can’t trust that new posts to these sites will pop up on the aggregation sites you follow.\nA rule of thumb is that the importance of a blog in your feed reader is inversely proportional to their posting cadence. Prioritise the blogs that post only once a month or every couple of weeks over those that post every day or multiple times a day. You don’t want to miss a new Ahmad Shadeed post but there’s no harm in skipping the CSS-Tricks firehose for a few days. Building up a large library of sporadically updated blogs is much more useful and much easier to keep up with than trying to keep up with a handful of aggregation sites every day.\nThe benefit to this approach is that it isn’t time-sensitive. If you look at the posting cadence of the core blogs I mentioned, you can go away for half a year and they won’t have that many new posts for you to catch up on. 99% of the rest that has piled up while you were away is just gossip that you can ‘mark as read’ without any guilt.\nSo, to answer your question: yes, you should still be reading these sites, but you should change how you read them and add a few others into the mix. 🙂",
      "content_html": "<p>For the first time in my life, I felt the urge to comment on Reddit.</p>\n<p>Over on <a href=\"https://www.reddit.com/r/webdev/comments/qakrwh/do_you_think_reading_css_articles_like_csstricks/\">r/webdev</a>, this here question popped up:</p>\n<blockquote>\n<p>Do you think reading css articles like css-tricks &amp; smashing magazine is waste of time?</p>\n</blockquote>\n<p>This question isn&rsquo;t <em>really</em> about the two sites mentioned but about the frustration we all feel with the endless treadmill of keeping up with what&rsquo;s happening in web dev. Especially, since a lot of it feels so unproductive:</p>\n<ul>\n<li>Articles on features that haven&rsquo;t shipped yet and may never ship everywhere.</li>\n<li>Advanced features that address specialised use cases you&rsquo;re never going to encounter.</li>\n<li>Masturbatory &ldquo;let&rsquo;s do this without any JS!&rdquo; articles that end up being much more complicated than adding, like, a line or two of JS.</li>\n</ul>\n<p>It&rsquo;s a lot. It&rsquo;s frustrating. But it doesn&rsquo;t have to be this way. Which is the reason why I felt the urge to reply with the following. Hopefully others will find it helpful.</p>\n<hr>\n<p>So, I&rsquo;ve been making websites since before CSS was a thing and using CSS since before absolute positioning was a thing which I guess makes me &hellip; intermediate? Maybe? 😄</p>\n<p>You don&rsquo;t have to keep running the gossip treadmill to keep up. This applies to CSS, JS, HTML and the rest. As you observe, memorising partially implemented new standards, many of which may not even end up adopted as actual standards, isn&rsquo;t a productive use of anybody&rsquo;s time.</p>\n<p>Treat it like you would a gossip column covering people in your field: read it for fun, don&rsquo;t over-invest, don&rsquo;t feel bad about missing out on it. There&rsquo;s a lot of gossip out there so there&rsquo;s a lot to ignore.</p>\n<p>What I&rsquo;ve found <em>does</em> pay off is focusing on doing different <em>kinds</em> of reading:</p>\n<p>There&rsquo;s the aforementioned gossip&mdash;new news so new that it may not ever be useful. You don&rsquo;t want to spend much time on web dev gossip in general (JS dev news is often even more gossipy).</p>\n<p>Then you have the more detailed how-tos, some of which may be covering recent-ish standards, but are mostly about features you can use right away. <a href=\"https://ishadeed.com/\">Ahmad Shadeed&rsquo;s blog</a> has many good examples of this which I highly recommend. You read these texts to get a sense of what the platform can do. You don&rsquo;t need to memorise how it is done. Just know that it can be done.</p>\n<p>Then you have problem analysis and solutions. These posts go over specific problems and how you might solve them. <a href=\"https://www.joshwcomeau.com/\">Josh W Comeau&rsquo;s blog is full of these kinds of posts.</a> Sara Soueidan&rsquo;s <a href=\"https://www.sarasoueidan.com/blog/\">blog</a> is also a good source. <a href=\"https://lea.verou.me/\">Lea Verou&rsquo;s as well.</a> Smashing Magazine and CSS-Tricks have a lot of these kinds of posts as well, so I would have another look at them if I were you. You were reading them as industry gossip (which they do provide) but it sounds like you weren&rsquo;t getting the full value that these sites have to offer in terms of howtos and problem solutions.</p>\n<p>These sites you read&mdash;scan mostly&mdash;and you bookmark individual posts that you find interesting so that you can refer to them later if you run into the problem they&rsquo;ve solved yourself. (Which reminds me: I recommend using a bookmarking service so you can find your bookmarks even when you aren&rsquo;t logged into your preferred browser.)</p>\n<p>Another important type of reading is higher level or workflow level analysis. Such as the <a href=\"https://cube.fyi/\">CUBE CSS</a> site. Reading about how to organise your work is some of the most productive learning you can do. <a href=\"https://every-layout.dev/\">Every Layout</a> is another example as it&rsquo;s fundamentally about how you optimally structure your CSS for composition and reuse. These you read, study, and reread. You don&rsquo;t have to agree with everything they say, but you should be able to answer (for yourself) <em>why</em> you would disagree with them.</p>\n<p>Finally, there&rsquo;s synthesis. That&rsquo;s when you start to read texts that are adjacent to your work so that you become better at addressing those problems on your end. For those, you would be reading blogs on accessibility (like <a href=\"https://adrianroselli.com/\">Adrian Roselli&rsquo;s</a>) or design (like <a href=\"https://stephaniewalter.design/blog/\">Stephanie Walter&rsquo;s</a>) or the link blog of a web developer who is also doing cross-discipline synthesis reading (like Jeremy Keith&rsquo;s, <a href=\"https://adactio.com/links\">which I highly recommend</a>.)</p>\n<p>You don&rsquo;t have to understand everything on all of the sites in this last bucket. Those are more for building a shared vocabulary and mindset with other specialities that you will be working with.</p>\n<p>Of course, checking these sites every day is a huge pain, especially since most of them aren&rsquo;t updated every day. This is why a feed reader, such as Feedly, is gold. You can&rsquo;t trust that new posts to these sites will pop up on the aggregation sites you follow.</p>\n<p>A rule of thumb is that the importance of a blog in your feed reader is inversely proportional to their posting cadence. Prioritise the blogs that post only once a month or every couple of weeks over those that post every day or multiple times a day. You don&rsquo;t want to miss a new Ahmad Shadeed post but there&rsquo;s no harm in skipping the CSS-Tricks firehose for a few days. Building up a large library of sporadically updated blogs is much more useful and much easier to keep up with than trying to keep up with a handful of aggregation sites every day.</p>\n<p>The benefit to this approach is that it isn&rsquo;t time-sensitive. If you look at the posting cadence of the core blogs I mentioned, you can go away for half a year and they won&rsquo;t have <em>that</em> many new posts for you to catch up on. 99% of the rest that has piled up while you were away is just gossip that you can &lsquo;mark as read&rsquo; without any guilt.</p>\n<p>So, to answer your question: yes, you should still be reading these sites, but you should change how you read them and add a few others into the mix. 🙂</p>",
      "content_text": "For the first time in my life, I felt the urge to comment on Reddit.\nOver on r/webdev, this here question popped up:\n\nDo you think reading css articles like css-tricks & smashing magazine is waste of time?\n\nThis question isn’t really about the two sites mentioned but about the frustration we all feel with the endless treadmill of keeping up with what’s happening in web dev. Especially, since a lot of it feels so unproductive:\n\nArticles on features that haven’t shipped yet and may never ship everywhere.\nAdvanced features that address specialised use cases you’re never going to encounter.\nMasturbatory “let’s do this without any JS!” articles that end up being much more complicated than adding, like, a line or two of JS.\n\nIt’s a lot. It’s frustrating. But it doesn’t have to be this way. Which is the reason why I felt the urge to reply with the following. Hopefully others will find it helpful.\n\nSo, I’ve been making websites since before CSS was a thing and using CSS since before absolute positioning was a thing which I guess makes me … intermediate? Maybe? 😄\nYou don’t have to keep running the gossip treadmill to keep up. This applies to CSS, JS, HTML and the rest. As you observe, memorising partially implemented new standards, many of which may not even end up adopted as actual standards, isn’t a productive use of anybody’s time.\nTreat it like you would a gossip column covering people in your field: read it for fun, don’t over-invest, don’t feel bad about missing out on it. There’s a lot of gossip out there so there’s a lot to ignore.\nWhat I’ve found does pay off is focusing on doing different kinds of reading:\nThere’s the aforementioned gossip—new news so new that it may not ever be useful. You don’t want to spend much time on web dev gossip in general (JS dev news is often even more gossipy).\nThen you have the more detailed how-tos, some of which may be covering recent-ish standards, but are mostly about features you can use right away. Ahmad Shadeed’s blog has many good examples of this which I highly recommend. You read these texts to get a sense of what the platform can do. You don’t need to memorise how it is done. Just know that it can be done.\nThen you have problem analysis and solutions. These posts go over specific problems and how you might solve them. Josh W Comeau’s blog is full of these kinds of posts. Sara Soueidan’s blog is also a good source. Lea Verou’s as well. Smashing Magazine and CSS-Tricks have a lot of these kinds of posts as well, so I would have another look at them if I were you. You were reading them as industry gossip (which they do provide) but it sounds like you weren’t getting the full value that these sites have to offer in terms of howtos and problem solutions.\nThese sites you read—scan mostly—and you bookmark individual posts that you find interesting so that you can refer to them later if you run into the problem they’ve solved yourself. (Which reminds me: I recommend using a bookmarking service so you can find your bookmarks even when you aren’t logged into your preferred browser.)\nAnother important type of reading is higher level or workflow level analysis. Such as the CUBE CSS site. Reading about how to organise your work is some of the most productive learning you can do. Every Layout is another example as it’s fundamentally about how you optimally structure your CSS for composition and reuse. These you read, study, and reread. You don’t have to agree with everything they say, but you should be able to answer (for yourself) why you would disagree with them.\nFinally, there’s synthesis. That’s when you start to read texts that are adjacent to your work so that you become better at addressing those problems on your end. For those, you would be reading blogs on accessibility (like Adrian Roselli’s) or design (like Stephanie Walter’s) or the link blog of a web developer who is also doing cross-discipline synthesis reading (like Jeremy Keith’s, which I highly recommend.)\nYou don’t have to understand everything on all of the sites in this last bucket. Those are more for building a shared vocabulary and mindset with other specialities that you will be working with.\nOf course, checking these sites every day is a huge pain, especially since most of them aren’t updated every day. This is why a feed reader, such as Feedly, is gold. You can’t trust that new posts to these sites will pop up on the aggregation sites you follow.\nA rule of thumb is that the importance of a blog in your feed reader is inversely proportional to their posting cadence. Prioritise the blogs that post only once a month or every couple of weeks over those that post every day or multiple times a day. You don’t want to miss a new Ahmad Shadeed post but there’s no harm in skipping the CSS-Tricks firehose for a few days. Building up a large library of sporadically updated blogs is much more useful and much easier to keep up with than trying to keep up with a handful of aggregation sites every day.\nThe benefit to this approach is that it isn’t time-sensitive. If you look at the posting cadence of the core blogs I mentioned, you can go away for half a year and they won’t have that many new posts for you to catch up on. 99% of the rest that has piled up while you were away is just gossip that you can ‘mark as read’ without any guilt.\nSo, to answer your question: yes, you should still be reading these sites, but you should change how you read them and add a few others into the mix. 🙂",
      "date_published": "2021-10-19T10:50:06.000Z",
      "date_modified": "2021-10-19T10:50:06.000Z",
      "_plugin": {
        "pageFilename": "77b4d5a3dea8b09cf3d63b5b738012b865caf84f4ce5cd3d294d91b0ad2f085f.html"
      }
    }
  ],
  "_plugin": {
    "rawFeed": "<rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n  <channel>\n    <title>Baldur Bjarnason</title>\n    <link>https://www.baldurbjarnason.com/</link>\n    <description>Recent content on Baldur Bjarnason</description>\n    <generator>Hugo -- gohugo.io</generator>\n    <language>en-gb</language>\n    <lastBuildDate>Mon, 31 Jan 2022 12:56:06 +0000</lastBuildDate>\n    \n        <atom:link href=\"https://www.baldurbjarnason.com/index.xml\" rel=\"self\" type=\"application/rss+xml\" />\n    \n    \n    <item>\n      <title>How to keep up with web development without falling into despair</title>\n      <link>https://www.baldurbjarnason.com/2022/i-cant-keep-up-with-web-dev/</link>\n      <pubDate>Mon, 31 Jan 2022 12:56:06 +0000</pubDate>\n      \n      <guid>https://www.baldurbjarnason.com/2022/i-cant-keep-up-with-web-dev/</guid>\n      <description>&lt;blockquote&gt;\n&lt;p&gt;&amp;mdash;Everything keeps changing&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&amp;mdash;I&amp;rsquo;m spread too thin trying to keep up&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&amp;mdash;I feel like I&amp;rsquo;ve lost control over my professional life&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&amp;mdash;I&amp;rsquo;m starting to regret getting into web development&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&amp;mdash;I&amp;rsquo;m tired of constantly chasing new frameworks to make sure I don&amp;rsquo;t get replaced by an inexperienced college graduate&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&amp;mdash;Whatever I try to do to keep up is never enough; the changes never stop coming&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;ul&gt;\n&lt;li&gt;You&amp;rsquo;ve barely pushed a feature to production when you notice a new major release of a dependency.&lt;/li&gt;\n&lt;li&gt;Keeping up with all of the changes in a single framework is next to impossible. Keeping up the framework&amp;rsquo;s ecosystem is impossible.&lt;/li&gt;\n&lt;li&gt;So. Many. New. Packages.&lt;/li&gt;\n&lt;li&gt;So. Many. New. Or. Changed. Standards.&lt;/li&gt;\n&lt;li&gt;Dozens of new blog posts or articles on how to do stuff appear every day&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;I can&amp;rsquo;t keep up; you can&amp;rsquo;t keep up. Nobody can.&lt;/p&gt;\n&lt;p&gt;&amp;mdash;&lt;em&gt;But I have to keep up! Otherwise, I won&amp;rsquo;t be able to do my job. Web Development is hell. Maybe I&amp;rsquo;ll just quit and do something else. Anything else.&lt;/em&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;People say that web development is unique because of the fast pace and volume of changes in the field. And, since most of us have at least a tangential awareness of other fields through our friends and families (and, in my case, former fields of study), we know that web development seems unique in invoking this feeling of &lt;em&gt;helplessness&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;It is unique in overwhelming those of us who practise it, but it &lt;em&gt;isn&amp;rsquo;t&lt;/em&gt; uniquely fast-paced.&lt;/p&gt;\n&lt;p&gt;I&amp;rsquo;m not talking here about the difficulty of doing or learning the job.&lt;/p&gt;\n&lt;p&gt;It&amp;rsquo;s the task of keeping up with change and new developments in the field once you&amp;rsquo;re in it. In that regard, web dev isn&amp;rsquo;t unique.&lt;/p&gt;\n&lt;p&gt;If anything, compared to fields that still have active research going on (which isn&amp;rsquo;t the case for software or web dev) like medicine or biotech, the pace of change is arguably much, &lt;em&gt;much&lt;/em&gt; lower in web dev.&lt;/p&gt;\n&lt;p&gt;But, this feeling of being spread too thin, of being unable to keep up, is real. Just not for the reason you think.&lt;/p&gt;\n&lt;p&gt;So, how do people in other fields keep up with changes in that field? Why is web dev so bad? And, how can we learn from other fields and try not to go mad &lt;a href=&#34;https://en.wikipedia.org/wiki/Red_Queen%27s_race&#34;&gt;racing the Red Queen&lt;/a&gt;?&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&amp;ldquo;Well, in our country,&amp;rdquo; said Alice, still panting a little, &amp;ldquo;you&amp;rsquo;d generally get to somewhere else—if you run very fast for a long time, as we&amp;rsquo;ve been doing.&amp;rdquo;&lt;/p&gt;\n&lt;p&gt;&amp;ldquo;A slow sort of country!&amp;rdquo; said the Queen. &amp;ldquo;Now, here, you see, it takes all the running you can do, to keep in the same place. If you want to get somewhere else, you must run at least twice as fast as that!&amp;rdquo;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;First, I&amp;rsquo;ll tell you about the two approaches that work in other fields but &lt;em&gt;won&amp;rsquo;t&lt;/em&gt; work in web dev because we actually do kind of suck. Pretending otherwise isn&amp;rsquo;t productive. Then I&amp;rsquo;ll end with the one approach that genuinely works. It requires work. But that work is still less effort than keeping up with the firehose of change.&lt;/p&gt;\n&lt;h2 id=&#34;1-other-fields-have-collective-or-institutional-filters&#34;&gt;1. Other fields have collective or institutional filters&lt;/h2&gt;\n&lt;p&gt;The first method is the one that&amp;rsquo;s the least useful to us because, as an industry, web dev does not invest in itself as a &lt;em&gt;field&lt;/em&gt;. Training is the bare minimum needed to fill jobs. Conferences are mostly for networking. There is little to no active, original research into new approaches or ideas.&lt;/p&gt;\n&lt;p&gt;But other industries, esp. those who have been around for a while, have institutions and traditions. These provide practitioners with filters to help them stay up-to-date to industry goings-on.&lt;/p&gt;\n&lt;p&gt;They help you keep up with what&amp;rsquo;s broadly important, and they have journals and industry rags that help you keep up with what matters; which you then complement by following developments in your primary speciality.&lt;/p&gt;\n&lt;p&gt;We instead have aggregators that filter very little. Instead of helping us keep up, they become firehoses of content which makes the problem worse.&lt;/p&gt;\n&lt;p&gt;A web dev equivalent, for example, would be a quarterly publication outlining all of the broadly important news in web dev.&lt;/p&gt;\n&lt;h2 id=&#34;2-they-specialise&#34;&gt;2. They specialise&lt;/h2&gt;\n&lt;p&gt;Cardiologists don&amp;rsquo;t keep up with experimental Alzheimer&amp;rsquo;s treatments. Editors and agents in the publishing industry pick the genres they focus on and follow. A developmental linguist specialising in bilingual language acquisition in children isn&amp;rsquo;t going to be keeping up with the development of natural language processing software models in applied linguistics.&lt;/p&gt;\n&lt;p&gt;People specialise. They don&amp;rsquo;t isolate themselves&amp;mdash;they&amp;rsquo;ll still use information from other specialities&amp;mdash;but they won&amp;rsquo;t regard keeping up with those specialities as a core part of their job.&lt;/p&gt;\n&lt;p&gt;Web dev is unique in how we&amp;rsquo;ve been trying to roll back the specialisation of the field with notions like Full Stack Web Devs. Fifteen years ago, it seemed obvious to many of us in the industry that the future would involve more specialisation.&lt;/p&gt;\n&lt;p&gt;Instead, we went the other way and decided: &lt;em&gt;&amp;ldquo;Hey! Let&amp;rsquo;s make everybody &lt;strong&gt;also&lt;/strong&gt; code the servers! That&amp;rsquo;ll save money! Node and browsers are pretty much the same, right? Right?&amp;quot;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;We expect people to do the impossible: keep up with everything.&lt;/p&gt;\n&lt;p&gt;&amp;mdash;&lt;em&gt;So, this is hopeless, right? Might as well quit and become an English teacher or something?&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;There&amp;rsquo;s one more thing that many fields do that web dev doesn&amp;rsquo;t. It&amp;rsquo;s a tactic we can copy as individuals without waiting for a broken industry to fix itself.&lt;/p&gt;\n&lt;h2 id=&#34;3-they-stop-keeping-up-and-instead-do-research&#34;&gt;3. They stop &amp;ldquo;Keeping Up&amp;rdquo; and instead do Research&lt;/h2&gt;\n&lt;p&gt;Students generally start in &amp;ldquo;keep up&amp;rdquo; mode. They&amp;rsquo;re in a new environment like a university. They need to keep up with their coursework, reading, practice, and a new social life. It&amp;rsquo;s often tough to keep your head above the water. You can do this, as a student, for a few years, but it&amp;rsquo;s not sustainable for life. So, one of the tasks teachers have, esp. once the students reach the postgraduate stage, is to flick that switch in their minds from &amp;ldquo;keeping up&amp;rdquo; mode to &amp;ldquo;research&amp;rdquo; mode.&lt;/p&gt;\n&lt;p&gt;Instead of keeping up with what everybody else is doing, research the task at hand. You let &lt;em&gt;work&lt;/em&gt; guide you.&lt;/p&gt;\n&lt;p&gt;How, exactly, the research is done varies from field to field. Sometimes it&amp;rsquo;s overtly practice-led like in arts or media. Sometimes it&amp;rsquo;s directed by your speciality. A lot of the time it&amp;rsquo;s driven by your thesis question, followed by your research question later in life (&lt;a href=&#34;https://mitpress.mit.edu/books/how-write-thesis&#34;&gt;Umberto Eco&amp;rsquo;s &lt;em&gt;How to Write a Thesis&lt;/em&gt;&lt;/a&gt; explains this one well). The methods and practices vary but new people aren&amp;rsquo;t expected to just figure it out.&lt;/p&gt;\n&lt;p&gt;They aren&amp;rsquo;t expected to keep up with everything and then decide &lt;em&gt;afterwards&lt;/em&gt; which bits of everything are related to their work (or not).&lt;/p&gt;\n&lt;p&gt;These fields spend a &lt;em&gt;lot&lt;/em&gt; of effort teaching new entrants research methodology. Choosing your speciality or your &lt;em&gt;question&lt;/em&gt; is generally regarded as a Pretty Damn Important Moment.&lt;/p&gt;\n&lt;p&gt;Web dev as a field doesn&amp;rsquo;t have a common research methodology or standard tactics for keeping up with change. &lt;em&gt;That&amp;rsquo;s&lt;/em&gt; why we&amp;rsquo;re all overwhelmed. Not because it&amp;rsquo;s uniquely fast-paced but because it&amp;rsquo;s unique in how it doesn&amp;rsquo;t invest in people, training or methodology.&lt;/p&gt;\n&lt;p&gt;We don&amp;rsquo;t teach people to ask the right questions.&lt;/p&gt;\n&lt;p&gt;The strategy you need to apply is simple: you keep following your feeds, your social media, your subreddits, etc., but you now default to not reading any of it.&lt;/p&gt;\n&lt;p&gt;You only check out articles, podcasts, or videos that are directly relevant to your Work Questions. (More on that later.) Even then, you &lt;em&gt;still&lt;/em&gt; don&amp;rsquo;t read, watch, or listen to them. You scan them above the fold and ask yourself:&lt;/p&gt;\n&lt;h3 id=&#34;_can-i-defer-reading-this-until-im-doing-the-task_&#34;&gt;&lt;em&gt;Can I defer reading this until I&amp;rsquo;m doing the task?&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;It&amp;rsquo;s useful to have a library of articles that you know are good references for tasks you may or may not need to do in the future. You don&amp;rsquo;t need to read any of them right away. Just get into practice at spotting them and filing them away.&lt;/p&gt;\n&lt;p&gt;There&amp;rsquo;s no point in religiously reading every blog post on accessible drag and drop in React, or state management with hooks, whenever these articles pop up in your feed. Bookmark them and use them as references &lt;em&gt;when you&amp;rsquo;re doing that task&lt;/em&gt;.&lt;/p&gt;\n&lt;h3 id=&#34;_does-this-relate-to-one-of-my-work-questions_&#34;&gt;&lt;em&gt;Does this relate to one of my Work Questions?&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;If it doesn&amp;rsquo;t touch on one of your long-term goals and isn&amp;rsquo;t a reference you can use later on to guide you in a task, stop reading and close the tab.&lt;/p&gt;\n&lt;p&gt;If it&amp;rsquo;s important it&amp;rsquo;ll come across your feed again and again. Paradigm-shifting changes in web dev are rare (AJAX, jQuery, React, CSS Media Queries, CSS Grid, CSS Variables, ESM modules). When they do arrive they&amp;rsquo;ll become so loud and so prevalent in your web dev community that you&amp;rsquo;d have to work hard &lt;em&gt;not&lt;/em&gt; to notice them. Even then, the transition usually takes years.&lt;/p&gt;\n&lt;p&gt;People are still building projects that don&amp;rsquo;t use CSS Grid or Variables and bundle together CommonJS modules. Old methods keep on working.&lt;/p&gt;\n&lt;p&gt;If it does touch on a Work Question you generally need to do a first-pass read to decide &lt;em&gt;how&lt;/em&gt; important it is?&lt;/p&gt;\n&lt;p&gt;Read through it without looking up words or phrases you don&amp;rsquo;t understand and skip over the hard-to-parse sentences. The goal is to discover whether a deep read is worth the investment or not, so you don&amp;rsquo;t want to spend too much time on this read.&lt;/p&gt;\n&lt;p&gt;Sometimes you find articles that don&amp;rsquo;t add anything to what you know&amp;mdash;don&amp;rsquo;t materially affect the Question&amp;mdash;but are still useful references to have, esp. if you need to convey an idea or method to other people, like your colleagues.&lt;/p&gt;\n&lt;p&gt;Sometimes you&amp;rsquo;ll find that the article is worth a deep read. You either put in the time right away and give it a deeper re-read, or you file it away to study later.&lt;/p&gt;\n&lt;p&gt;For example, one of my Work Questions is &amp;ldquo;How can I make a web UI that doesn&amp;rsquo;t feel flat but also isn&amp;rsquo;t a skeuomorphic cartoon pastiche of real-world objects?&amp;rdquo;. Anything that touches on filters, gradients, or texture effects in CSS will catch my interest. When &lt;a href=&#34;https://ishadeed.com/&#34;&gt;Ahmad Shadeed&amp;rsquo;s&lt;/a&gt; article on &lt;a href=&#34;https://www.smashingmagazine.com/2022/01/css-radial-conic-gradient/&#34;&gt;radial and conic gradients&lt;/a&gt; came across my feed I scanned it to make sure it was relevant. Then I filed it away for re-read later (which, to be fair, just involved opening as a tab in the browser window that holds research related to current work). After re-reading, I bookmarked it properly so that I could refer to it later when I&amp;rsquo;m using gradient effects.&lt;/p&gt;\n&lt;h3 id=&#34;if-it-doesnt-relate-to-a-work-question-and-isnt-a-how-to-reference-for-a-future-task-ignore-it-and-move-on&#34;&gt;If it doesn&amp;rsquo;t relate to a Work Question and isn&amp;rsquo;t a how-to reference for a future task, ignore it and move on&lt;/h3&gt;\n&lt;p&gt;Really. I don&amp;rsquo;t need to follow the ins and outs of React state management. You don&amp;rsquo;t need to know about the state of modern JS support in XHTML. You should be ignoring most of the goings-on in the web development community.&lt;/p&gt;\n&lt;h2 id=&#34;how-do-we-choose-our-work-questions&#34;&gt;How do we choose our Work Questions?&lt;/h2&gt;\n&lt;p&gt;Now we get to the tricky part. The good news is that you don&amp;rsquo;t need to figure this out in one go. You can start with many vague questions and, as you do your research, you either cross them off or rephrase them to become more specific.&lt;/p&gt;\n&lt;p&gt;They are &lt;em&gt;supposed&lt;/em&gt; to change over time. Some of them should be dictated by your current tasks. Others can be more aspirational: ask questions related to the work you want to be doing.&lt;/p&gt;\n&lt;p&gt;For example, here are the questions that guide my web dev research when it comes to my &lt;a href=&#34;https://www.colophon.cards/&#34;&gt;Colophon Cards&lt;/a&gt; project:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;How do you provide a lightweight yet nicely interactive front end?&lt;/em&gt; Anything that comes across my feed that&amp;rsquo;s about doing more with less&amp;mdash;smaller bundle sizes, fewer dependencies, faster loading, etc.&amp;mdash;on the front end piques my interest as a possible answer.&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;How can I better manage the project&amp;rsquo;s CSS?&lt;/em&gt; Continue to use bundling? Continue to use CUBE? How do the approaches from &lt;a href=&#34;https://every-layout.dev/&#34;&gt;Every Layout&lt;/a&gt; work in this context?&lt;/li&gt;\n&lt;li&gt;As I wrote above: &lt;em&gt;How can I make a web UI that doesn&amp;rsquo;t feel flat but also isn&amp;rsquo;t a skeuomorphic cartoon pastiche of real-world objects?&lt;/em&gt; I think UX generally suffers in flat UI design as it doesn&amp;rsquo;t leverage layering, affordances, and metaphors to the degree that it could. I&amp;rsquo;m very curious about breaking out of flatland.&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;Can I integrate accessibility features into UX designs as obvious-yet-attractive affordances instead of constantly being hidden from view?&lt;/em&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Wabi-sabi&#34;&gt;&lt;em&gt;Wabi-sabi&lt;/em&gt;&lt;/a&gt; used to be a common reference in web design circles. An example of this would be to make focus styles overt and obvious. But in an aesthetically pleasing way.&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;How can we make browser-based reading more powerful, more useful, and more accessible than other forms of reading?&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;Is it possible to make Multi-Page Apps as engaging and &amp;lsquo;snazzy&amp;rsquo; as Single-Page-Apps?&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;What are the simplest kinds of state management tactics that&amp;rsquo;ll work for a web app?&lt;/em&gt; Esp. in a vanilla JS or web component-based app.&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;Is it possible to build this kind of app using only serverless-style services without having to geta PhD in AWS and CloudFormation?&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;What are the best ways to implement unit, integration, and end-to-end testing for a vanilla JS or web components app?&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;SVG WTF?&lt;/em&gt; Just, SVG. WTF? I need to understand SVG better.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;You&amp;rsquo;ll note that these questions range from the high level to the low level. Some of them focus on practical details of a specific technology. Others are more &amp;lsquo;chewable&amp;rsquo;. Some of them are specific and will eventually have a clear answer. Others are open-ended and represent the ongoing development of a work philosophy or outlook.&lt;/p&gt;\n&lt;p&gt;The questions change with the job. When I&amp;rsquo;ve had projects that involve PDF-rendering in the browser, then that (&amp;ldquo;What&amp;rsquo;s the best way to render a PDF in a browser?&amp;quot;) became one of my Work Questions. &amp;ldquo;How can CSS Grids help with my layouts?&amp;rdquo; was once a big question. But I dropped it once I felt I had a handle on it. I still rely on the reference articles I bookmarked when I &lt;em&gt;was&lt;/em&gt; doing that research.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;I set aside about an hour or two a day for research.&lt;/p&gt;\n&lt;p&gt;I sit down with a cup of coffee and go through my social media, my feed reader, and a couple of select online sources. I filter out articles and papers based on whether they touch on one of my questions or whether they look like a &amp;lsquo;how-to&amp;rsquo; that I can file away.&lt;/p&gt;\n&lt;p&gt;I rarely need to spend the entire two hours. It isn&amp;rsquo;t unusual for me to go over all of my sources in about 30 minutes and come away with nothing relevant. That&amp;rsquo;s when I switch to &lt;em&gt;active&lt;/em&gt; research and proactively look for sources and references related to the questions I have.&lt;/p&gt;\n&lt;p&gt;And that&amp;rsquo;s how &amp;ldquo;keeping up&amp;rdquo; stops being a chore and becomes an interest-driven research activity that feeds your enthusiasm instead of draining it.&lt;/p&gt;\n</description>\n    </item>\n    \n    <item>\n      <title>Let&#39;s just not talk about 2021 and look forward instead</title>\n      <link>https://www.baldurbjarnason.com/2022/forward-looking-statements/</link>\n      <pubDate>Wed, 05 Jan 2022 12:56:06 +0000</pubDate>\n      \n      <guid>https://www.baldurbjarnason.com/2022/forward-looking-statements/</guid>\n      <description>&lt;p&gt;I can&amp;rsquo;t be the only one who is just bone-tired after the past two years. I can&amp;rsquo;t blame it just on That Disease or OMG Politics. The problem is that everything else keeps going. Every year, there is some balance between the good and bad. But pandemic times add two colossal rocks to the &amp;lsquo;bad&amp;rsquo; side of the scale. Then the regular bad stuff continues to pile on.&lt;/p&gt;\n&lt;p&gt;I know this. So why do I feel guilty about productivity (or lack thereof) over the past two weeks?&lt;/p&gt;\n&lt;p&gt;I&amp;rsquo;m guessing I&amp;rsquo;m not alone.&lt;/p&gt;\n&lt;p&gt;Looking back at the past year to take stock makes me even more depressed.&lt;/p&gt;\n&lt;p&gt;In an attempt to counter this perspective-induced ennui, I&amp;rsquo;d like to take stock of the future instead. Instead of looking over the things that either almost happened last year (but never quite did) or happened (but not as successfully as I hoped), I&amp;rsquo;d like to look at some of the things that could be interesting in 2022.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2 id=&#34;work-and-ideas-for-work&#34;&gt;Work and ideas for work&lt;/h2&gt;\n&lt;p&gt;I&amp;rsquo;m still working on how to position myself&amp;mdash;how my skill set could best benefit people. I&amp;rsquo;m kicking around a few ideas on how I could do that, but in the meantime, &lt;a href=&#34;https://www.baldurbjarnason.com/work/2021/&#34;&gt;I still have time for new projects and jobs&lt;/a&gt;, so get in touch if you think I might help you.&lt;/p&gt;\n&lt;p&gt;I&amp;rsquo;ve realised that I have a lot of knowledge and have done a lot of reading on research and decision-making processes. Some of this was a part of my last job&amp;rsquo;s focus on helping academic researchers. Some of it is how I&amp;rsquo;ve applied methods and tactics from my arts and humanities background to coding. I&amp;rsquo;ve noticed that many developers feel underwater, find it hard to keep up, feel lost when they need to begin new projects or tasks and don&amp;rsquo;t realise that there is help out there. People say that web development is unique in the fast pace and volume of changes in the field.&lt;/p&gt;\n&lt;p&gt;That, strictly speaking, isn&amp;rsquo;t true. That there is a fast pace is true. And the volume of changes feels all-encompassing. What it isn&amp;rsquo;t is unique. Social sciences, health research, economics and investment, many fields of science, all face similar problems with managing your research and news.&lt;/p&gt;\n&lt;p&gt;What is &lt;em&gt;useful&lt;/em&gt; is that many of them have been dealing with this pace for a little bit longer than web dev and have come up with a few helpful approaches.&lt;/p&gt;\n&lt;p&gt;There are three prongs to the approach I&amp;rsquo;d like to take to this (subject to change, as always):&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;On frameworks and stacks. For the past six months, I&amp;rsquo;ve been trying to formalise my approach to navigating the various tech stack and framework choices I deal with in web development. It&amp;rsquo;s based on the processes taught at art school, which doesn&amp;rsquo;t just teach you how to practice but &lt;em&gt;what&lt;/em&gt; to practice, whose practice you study, &lt;em&gt;why&lt;/em&gt; they did what they did, all to help you figure out what to do with your work. With a bit of Thomas S. Kuhn mixed in. This one could take a while.&lt;/li&gt;\n&lt;li&gt;When to read, when to bookmark, and when to Google. How to do the practice-led research that we should all be doing as web developers. The web development training programs that I&amp;rsquo;m aware of don&amp;rsquo;t teach this. But they should.&lt;/li&gt;\n&lt;li&gt;Practice-led note-taking. Zettelkasten is a note-taking strategy out of social sciences that&amp;rsquo;s popular in certain online circles today. It works well when you&amp;rsquo;re working on novel ideas and new theories in your field. It doesn&amp;rsquo;t work well for practice-led research which is what most developers do. Umberto Eco&amp;rsquo;s approach, from his &lt;em&gt;How to Write a Thesis&lt;/em&gt;, is, in my view, a better tactic when the research has to have a specific outcome (thesis, program, website, etc.). I&amp;rsquo;d like to figure out specific ways to adapt this idea to web dev research. But in the meantime, you can read and enjoy Eco&amp;rsquo;s original book. I highly recommend it.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2 id=&#34;web-devving-it&#34;&gt;Web devving it&lt;/h2&gt;\n&lt;p&gt;I love web development and it&amp;rsquo;s still going to be a big part of what I do, esp. since I&amp;rsquo;m still working on my own website and web apps (see Colophon Cards below).&lt;/p&gt;\n&lt;p&gt;But I keep changing my mind as to whether I should focus my time on coding-oriented web dev topics or not. I have a strong preference for &amp;lsquo;vanilla&amp;rsquo; JS approaches (that is, using browser-provided APIs directly) and I tried my hand at writing about &lt;a href=&#34;https://www.baldurbjarnason.com/2021/five-ways-to-get-out-of-the-event-handling-mess/&#34;&gt;those&lt;/a&gt; &lt;a href=&#34;https://www.baldurbjarnason.com/2021/fetch-and-formdata/&#34;&gt;topics&lt;/a&gt;. I&amp;rsquo;m just not convinced that trying to teach others how to effectively use browser-provided APIs for web dev is a productive use of my time. But maybe I&amp;rsquo;m just getting jaded after years of constantly seeing people apply the React hammer to every web dev nail, screw, bolt, or fastener in sight.&lt;/p&gt;\n&lt;p&gt;I&amp;rsquo;ll write posts on the approaches and methods I&amp;rsquo;ll be using in my web dev practice (like &lt;a href=&#34;https://www.colophon.cards/&#34;&gt;Colophon Cards&lt;/a&gt;) but I&amp;rsquo;m still on the fence as to whether I should push beyond that.&lt;/p&gt;\n&lt;p&gt;I have a suspicion that I might have a greater impact&amp;mdash;be more helpful to people&amp;mdash;by writing about research and process for web dev. But I&amp;rsquo;ll only find out by testing it.&lt;/p&gt;\n&lt;h2 id=&#34;writing&#34;&gt;Writing&lt;/h2&gt;\n&lt;p&gt;I wrote a few mega-posts last year that might even qualify as short books:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&#34;https://www.baldurbjarnason.com/2021/software-crisis-2/&#34;&gt;Software Crisis 2.0&lt;/a&gt;, on how software goes bad.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&#34;https://www.baldurbjarnason.com/2021/100-things-every-web-developer-should-know/&#34;&gt;136 facts every web dev should know before they burn out and turn to landscape painting or nude modelling&lt;/a&gt;, full of bite-sized advice and opinions.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&#34;https://www.baldurbjarnason.com/2021/lessons-in-interactivity/&#34;&gt;Lessons in Interactivity, 2021 redux&lt;/a&gt;, an overview over the past decade.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;I&amp;rsquo;d like to take these long essays and extract as many focused &amp;lsquo;one problem, one solution&amp;rsquo; blog posts out of them. Take each concept and frame it with the problem it solves.&lt;/p&gt;\n&lt;p&gt;I&amp;rsquo;d also like to put together a proper book-type thing or two this year. Could be fun.&lt;/p&gt;\n&lt;h2 id=&#34;colophon-cards&#34;&gt;Colophon Cards&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&#34;https://www.colophon.cards/&#34;&gt;From the site&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;My goal with Colophon Cards is to create a web-based note-taking app for bookmarking and reading websites, ebooks, and documents.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;I got a grant to prototype a web app that marries ideas from both traditional card-based note-taking approaches with hypertextual digital note-taking apps.&lt;/p&gt;\n&lt;p&gt;Making is a lot of fun and I&amp;rsquo;m looking forward to putting the prototype together.&lt;/p&gt;\n&lt;h2 id=&#34;other-stuff&#34;&gt;Other Stuff&lt;/h2&gt;\n&lt;p&gt;I&amp;rsquo;d like to get back into regular practice with my photography. The past four years have, honestly, been a bit frantic and I haven&amp;rsquo;t taken the time that I should have to go out and take pictures.&lt;/p&gt;\n&lt;p&gt;I did manage to do a bit of it over the past year. Let&amp;rsquo;s hope 2022 will see even more.&lt;/p&gt;\n&lt;img src=&#34;https://www.baldurbjarnason.com/images/2021/geothermal-well.jpg&#34; alt=&#34;Steam rises from a geothermal well in Hveragerði&#34;&gt;\n&lt;img src=&#34;https://www.baldurbjarnason.com/images/2021/gull-and-flies-by-laugarvatn.jpg&#34; alt=&#34;A gull is surrounded by a cloud of flies by Laugarvatn&#34;&gt;\n&lt;img src=&#34;https://www.baldurbjarnason.com/images/2021/park-bench.jpg&#34; alt=&#34;A local bench here in Hveragerði&#34;&gt;\n&lt;img src=&#34;https://www.baldurbjarnason.com/images/2021/raven-entering-trees.jpg&#34; alt=&#34;A raven flies behind some trees&#34;&gt;\n&lt;img src=&#34;https://www.baldurbjarnason.com/images/2021/raven-flying-over-roof.jpg&#34; alt=&#34;A raven flies over my roof&#34;&gt;\n&lt;img src=&#34;https://www.baldurbjarnason.com/images/2021/raven-leaving-trees.jpg&#34; alt=&#34;A raven flies past a tree&#34;&gt;\n&lt;img src=&#34;https://www.baldurbjarnason.com/images/2021/sun-sets-in-the-local-park.jpg&#34; alt=&#34;The sun sets in the local Hveragerði park&#34;&gt;\n&lt;img src=&#34;https://www.baldurbjarnason.com/images/2021/sunset-behind-local-greenhouse.jpg&#34; alt=&#34;The sun sets behind the local greenhouse here in Hveragerði&#34;&gt;\n&lt;img src=&#34;https://www.baldurbjarnason.com/images/2021/swimmers-in-the-summer.jpg&#34; alt=&#34;It&#39;s summer by Laugarvatn and the lake is full of swimmers&#34;&gt;\n&lt;img src=&#34;https://www.baldurbjarnason.com/images/2021/two-people-talk-in-the-distance.jpg&#34; alt=&#34;Two people walk in a park across the river&#34;&gt;\n&lt;img src=&#34;https://www.baldurbjarnason.com/images/2021/two-ravens-in-the-sky.jpg&#34; alt=&#34;Two ravens fly against a grey sky&#34;&gt;\n</description>\n    </item>\n    \n    <item>\n      <title>Making Colophon Cards</title>\n      <link>https://www.baldurbjarnason.com/2021/making-colophon-cards/</link>\n      <pubDate>Mon, 29 Nov 2021 10:50:06 +0000</pubDate>\n      \n      <guid>https://www.baldurbjarnason.com/2021/making-colophon-cards/</guid>\n      <description>&lt;p&gt;There are tasks that computers are good at. And there are tasks where they aren&amp;rsquo;t. One driver of the evolution of the personal computer, laptops, mobile phones, and all forms of mobile computing has been the desire to increase their range: do more; in a smaller package. Many in tech and software are addicted to riding this wave of new capabilities, however long it will last, to work on and create new software. To extend the reach of the computers in our lives.&lt;/p&gt;\n&lt;p&gt;Innovation&amp;rsquo;s the word. Pushing the boundaries. You know the phrases. Usually spouted by &lt;em&gt;that&lt;/em&gt; dude at the party.&lt;/p&gt;\n&lt;p&gt;The other side is &lt;em&gt;also&lt;/em&gt; interesting. We are now in a place where we have entire genres of software that have decades of history, are backed by stacks of new and old research, have dozens of successful, well-made exemplar apps, and a broad enough conceptual space to allow for new variations on the theme.&lt;/p&gt;\n&lt;p&gt;In short, we have genre software and we have avant-garde software, and I&amp;rsquo;ve always been more interested in genre fiction than literary fiction.&lt;/p&gt;\n&lt;p&gt;One of the earliest genres of software is the Personal Knowledge or Information Manager&amp;mdash;&lt;a href=&#34;https://en.wikipedia.org/wiki/NLS_(computer_system)&#34;&gt;arguably as old as the computer mouse itself&lt;/a&gt;. Managing data is one of the tasks computers have &lt;em&gt;always&lt;/em&gt; been good at, so we&amp;rsquo;ve been making software in that genre for decades.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MORE_(application)&#34;&gt;Outliners&lt;/a&gt;, &lt;a href=&#34;https://www.eastgate.com/Tinderbox/&#34;&gt;hypertext systems&lt;/a&gt;, &lt;a href=&#34;https://notational.net/&#34;&gt;note-taking apps&lt;/a&gt;, &lt;a href=&#34;https://www.devontechnologies.com/apps/devonthink&#34;&gt;personal information databases&lt;/a&gt;&amp;mdash;we&amp;rsquo;ve been doing this for a while and, because software is inherently ephemeral, we make new iterations for every generation.&lt;/p&gt;\n&lt;p&gt;Sometimes, such as with Tinderbox or DEVONThink, the new iterations are new versions of the original software. Sometimes, such as with &lt;a href=&#34;https://bear.app/&#34;&gt;Bear&lt;/a&gt;, &lt;a href=&#34;https://ulysses.app/&#34;&gt;Ulysses&lt;/a&gt;, &lt;a href=&#34;https://roamresearch.com/&#34;&gt;Roam&lt;/a&gt;, or &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;, it&amp;rsquo;s a new take on the genre. Not so new that you don&amp;rsquo;t recognise it for it is, and not so innovative that it doesn&amp;rsquo;t reuse what worked for other apps, but new variations that are adapted to work well in our current computing context.&lt;/p&gt;\n&lt;p&gt;That isn&amp;rsquo;t even close to a comprehensive list. There&amp;rsquo;s also &lt;a href=&#34;https://evernote.com/&#34;&gt;Evernote&lt;/a&gt;, &lt;a href=&#34;https://getdrafts.com/&#34;&gt;Drafts&lt;/a&gt;, &lt;a href=&#34;https://1writerapp.com/&#34;&gt;1Writer&lt;/a&gt;&amp;mdash;even Apple&amp;rsquo;s Notes app has evolved to become impressively useful. And I&amp;rsquo;m still only scratching the surface.&lt;/p&gt;\n&lt;p&gt;These apps are also extremely diverse. There&amp;rsquo;s an increasing tendency for software, in this age of &amp;lsquo;flat&amp;rsquo;, to all look the same. Same design. Same aesthetic. Same icons. Same fundamental CRUD (Create, Read, Update, Delete) concept mapped onto a specific problem domain. But you&amp;rsquo;d never mistake a screenshot of Bear for one of Tinderbox or Ulysses. You&amp;rsquo;d never look at Roam and think to yourself: &amp;ldquo;huh? That looks exactly like DEVONThink.&amp;rdquo;&lt;/p&gt;\n&lt;p&gt;I&amp;rsquo;ve been working in or adjacent to this space for the past five years, with varying degrees of success and you can probably tell that I&amp;rsquo;m a little bit obsessed with the genre.&lt;/p&gt;\n&lt;p&gt;It shouldn&amp;rsquo;t come as a surprise that I&amp;rsquo;m working on my contribution to the genre.&lt;/p&gt;\n&lt;p&gt;I&amp;rsquo;ve wanted to build a specific take on the note-oriented personal information manager for myself for a long time.&lt;/p&gt;\n&lt;p&gt;This summer I applied for a grant from the Technology Development Fund at &lt;a href=&#34;https://en.rannis.is/funding/research/technology-development-fund/nr/545&#34;&gt;The Icelandic Centre for Research&lt;/a&gt; to create a prototype of a notetaking app that I&amp;rsquo;m calling&amp;hellip;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.colophon.cards&#34;&gt;Colophon Cards&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;While the app itself won&amp;rsquo;t be open source (though some bits of it might be), I&amp;rsquo;ve gotten used to following the open-source ethos of working publicly and transparently.&lt;/p&gt;\n&lt;p&gt;So, over the next six months (or longer if I&amp;rsquo;m successful) I&amp;rsquo;m going to be documenting the process, the design, development, research, marketing, discussion with my advisers, and other details, at &lt;a href=&#34;https://www.colophon.cards/&#34;&gt;colophon.cards&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;As you can probably tell from the site, I began a few days ago.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&#34;https://www.colophon.cards/&#34;&gt;The front page&lt;/a&gt; is the first version of the pitch for the app and my specific approach.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&#34;https://www.colophon.cards/notes/01-design-notes/&#34;&gt;The first design notes&lt;/a&gt; are a high-level sketch of how it should work.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&#34;https://www.colophon.cards/notes/02-data-model/&#34;&gt;The data model&lt;/a&gt; are my first attempt at structuring it.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&#34;https://www.colophon.cards/notes/03-sharing-model/&#34;&gt;The sharing model&lt;/a&gt; outlines how I envision collaboration to work.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&#34;https://www.colophon.cards/notes/04-attachments-bookmarks/&#34;&gt;Attachments and bookmarks&lt;/a&gt; are about how information management works. I like this one so much that I edited it into the front page pitch, as I&amp;rsquo;m sure you can tell.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&#34;https://www.colophon.cards/notes/05-reading-viewing/&#34;&gt;Reading and viewing&lt;/a&gt; outlines my take on what&amp;rsquo;s missing in the field in terms of reading features in knowledge management apps.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&#34;https://www.colophon.cards/notes/06-business-model/&#34;&gt;The business model&lt;/a&gt; is a rough sketch of what I imagine the business model to be. Not because I&amp;rsquo;m anywhere &lt;em&gt;near&lt;/em&gt; launching this but because you &lt;em&gt;can&amp;rsquo;t&lt;/em&gt; design an app without having a sense of its business model and its margins.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&#34;https://www.colophon.cards/notes/10-questions/&#34;&gt;The questions that need to be answered&lt;/a&gt; are just that. Open questions that I need to find answers to.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Additionally, you can follow my work on the website and comment with an issue on &lt;a href=&#34;https://github.com/baldurbjarnason/colophon.cards&#34;&gt;the GitHub repository&lt;/a&gt;. (Work on the software itself will be in a private repository.)&lt;/p&gt;\n&lt;p&gt;The notes I&amp;rsquo;ve been posting are rough and unedited. They are work products, not essays or marketing, those belong here on this site. You can follow Colophon Cards news by following the mailing list using the form on the site (this is a separate mailing list from the one on this site), by following its feed, or by watching the GitHub repository.&lt;/p&gt;\n&lt;p&gt;I&amp;rsquo;ll also make sure to post about major updates here on this site.&lt;/p&gt;\n&lt;p&gt;I&amp;rsquo;m enjoying the process a lot and I hope that you&amp;rsquo;ll enjoy it with me.&lt;/p&gt;\n</description>\n    </item>\n    \n  </channel>\n</rss>"
  },
  "description": "Recent content on Baldur Bjarnason",
  "home_page_url": "https://www.baldurbjarnason.com/",
  "_ext": {
    "date_published": "2022-01-31T12:56:06.000Z",
    "date_modified": "2022-01-31T12:56:06.000Z"
  }
}