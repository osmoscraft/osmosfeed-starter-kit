{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Christian Heilmann",
  "feed_url": "https://christianheilmann.com/feed/",
  "items": [
    {
      "id": "https://christianheilmann.com/?p=7180",
      "url": "https://christianheilmann.com/2022/03/25/quick-survey-help-improve-the-simulation-options-of-browser-developer-tools/",
      "title": "Quick survey: help improve the simulation options of browser developer tools",
      "summary": "Please help us to improve the emulation features of browser developer tools by filling out a two questions survey. Background We’re currently working on improving the findability of emulation features in the Microsoft Edge developer tools. Did you know that you can emulate different vision deficiences, dark and light schemes, forced colours and print layout […]",
      "content_html": "<p>Please help us to <a href=\"https://forms.office.com/r/b86Sp3PBA4\" title=\"\">improve the emulation features of browser developer tools by filling out a two questions survey</a>.</p>\n\n\t<h1>Background</h1>\n\n\t<p>We&#8217;re currently working on improving the findability of emulation features in the Microsoft Edge developer tools. Did you know that you can <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/accessibility/emulate-vision-deficiencies\" title=\"\">emulate different vision deficiences</a>, <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/accessibility/preferred-color-scheme-simulation\" title=\"\">dark and light schemes</a>, <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/whats-new/2022/02/devtools\" title=\"\">forced colours</a> and <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/css/print-preview\" title=\"\">print layout</a> amongst other things?</p>\n\n\t<p>If you don&#8217;t, then the problem is that they are hard to find and hidden in the `Rendering` menu.</p>\n\n\t<p><img alt=\"Emulation options in the rendering tool\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzig91359bgkegq6ohua.png\"></p>\n\n\t<p>To improve this, we are working on a new emulation bar inside the screencast of the <a href=\"https://aka.ms/devtools-for-edge\" title=\"\">Edge DevTools for Visual Studio Code</a> as a testing ground to change it in the main browser.</p>\n\n\t<p>We now need to know <a href=\"https://forms.office.com/r/b86Sp3PBA4\" title=\"\">what you&#8217;d prefer to see</a>:</p>\n\n\t<h2><span class=\"caps\">CSS</span> features emulation</h2>\n\n\t<p>A prioritised set of emulation features:</p>\n\n\t<p><img alt=\"Option showing only a few\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spjwnh41prtv76xqa46z.png\"></p>\n\n\t<p>All options as a flat list:</p>\n\n\t<p><img alt=\"Long list of emulations\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzo74bvxbggetmmeybqp.png\"></p>\n\n\t<p>A nested list:</p>\n\n\t<p><img alt=\"Nested menus to choose CSS emulation feature\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6noqg9cn2m37mrytsyl.png\"></p>\n\n\t<h2>Vision deficiences</h2>\n\n\t<p>Furthermore, we&#8217;d like to know if you prefer the vision deficiencies emulation as part of this menu:</p>\n\n\t<p><img alt=\"Vision deficiency emulation as part of the main menu\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81dvt6jpnt6h5hnpt6sp.png\"></p>\n\n\t<p>Or as a separate button/menu:</p>\n\n\t<p><img alt=\"Vision deficiency as an own button\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mysef84wjjcgygx5ykrw.png\"></p>\n\n\t<p>Please <a href=\"https://forms.office.com/r/b86Sp3PBA4\" title=\"\">fill out this quick survey</a> or comment here <a href=\"https://github.com/microsoft/vscode-edge-devtools/issues/942\" title=\"\">or on this GitHub issue</a></p>\n\n\t<p>Thanks so much!</p>",
      "content_text": "Please help us to improve the emulation features of browser developer tools by filling out a two questions survey.\n\n\tBackground\n\n\tWe’re currently working on improving the findability of emulation features in the Microsoft Edge developer tools. Did you know that you can emulate different vision deficiences, dark and light schemes, forced colours and print layout amongst other things?\n\n\tIf you don’t, then the problem is that they are hard to find and hidden in the `Rendering` menu.\n\n\t\n\n\tTo improve this, we are working on a new emulation bar inside the screencast of the Edge DevTools for Visual Studio Code as a testing ground to change it in the main browser.\n\n\tWe now need to know what you’d prefer to see:\n\n\tCSS features emulation\n\n\tA prioritised set of emulation features:\n\n\t\n\n\tAll options as a flat list:\n\n\t\n\n\tA nested list:\n\n\t\n\n\tVision deficiences\n\n\tFurthermore, we’d like to know if you prefer the vision deficiencies emulation as part of this menu:\n\n\t\n\n\tOr as a separate button/menu:\n\n\t\n\n\tPlease fill out this quick survey or comment here or on this GitHub issue\n\n\tThanks so much!",
      "date_published": "2022-03-25T08:20:03.000Z",
      "date_modified": "2022-03-25T08:20:03.000Z",
      "_plugin": {
        "pageFilename": "e68dfa5c3ee97c100a35f7cfd164a1750d912e8c3b8876f964ddd65a8beb5437.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7172",
      "url": "https://christianheilmann.com/2022/03/24/new-in-1-4-6-using-the-devtools-console-inside-visual-studio-code-and-offline-functionality/",
      "title": "New in 1.4.6: Using the DevTools Console inside Visual Studio Code and offline functionality",
      "summary": "We just released version 1.4.6 of the Edge DevTools for VS Code extension and the main change is that the Console tool is now available in the extension. 0:05 Console.log messages in VS Code 0:08 Test out some JavaScript 0:10 window object access 0:12 DOM convenience API support 0:15 Style changes 0:17 Console.table 0:20 Live […]",
      "content_html": "<p>We just released version 1.4.6 of the <a href=\"https://aka.ms/devtools-for-edge\" title=\"\">Edge DevTools for <span class=\"caps\">VS </span>Code extension</a> and the main change is that the Console tool is now available in the extension.</p>\n\n\t<p><iframe loading=\"lazy\" title=\"Edge DevTools for Visual Studio Code 1.4.6 features\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/O2E6QC0cqT4?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n\n\t<ul>\n\t\t<li>0:05 <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/console-log\" title=\"\">Console.log</a> messages in <span class=\"caps\">VS </span>Code</li>\n\t\t<li>0:08 <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/console-javascript\" title=\"\">Test out some JavaScript</a></li>\n\t\t<li>0:10 window object access</li>\n\t\t<li>0:12 <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/utilities\" title=\"\"><span class=\"caps\">DOM</span> convenience <span class=\"caps\">API</span></a> support</li>\n\t\t<li>0:15 Style changes</li>\n\t\t<li>0:17 <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/api#table\" title=\"\">Console.table</a></li>\n\t\t<li>0:20 <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/live-expressions\" title=\"\">Live Expressions</a></li>\n\t\t<li>0:30 Use Console and Elements together.</li>\n\t</ul>\n\n\t<p>There are two caveats at the moment: in order to see the Console, <strong>you need to use <a href=\"https://www.microsoftedgeinsider.com/download/canary\" title=\"\">Edge Canary</a> as your debugging target (version 101.0.1193.0+)</strong> and it can happen that the you need to refresh the target once to see the Console light up. This is a bug in <span class=\"caps\">VS </span>Code itself and will be fixed in the upcoming version.</p>\n\n\t<h2>New automatically created `launch.json` settings</h2>\n\n\t<p>To give you the best debugging experience in <span class=\"caps\">VS </span>Code, we updated the `launch.json` settings <a href=\"https://github.com/microsoft/vscode-edge-devtools/pull/927\" title=\"\">when you generate it from the extension</a>. The new file offers you a headless debugging experience by default calling the correct version of the Edge debugger.</p>\n\n\t<p>You can see it them in action in the following screencast:</p>\n\n\t<p><iframe loading=\"lazy\" title=\"Launch.json updates for 1.4.6\" width=\"500\" height=\"375\" src=\"https://www.youtube.com/embed/SSywiLfBZWE?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n\n\t<p>If you want to see the Console tool right now and not until 101 is the stable version of Edge, you need to add a `&#8221;runtimeExecutable&#8221;: &#8220;canary&#8221;,` to the launch.json to target the Canary build of the browser.</p>\n\n\t<h2>Offline availability</h2>\n\n\t<p>If you want to use the extension when you are offline, we now also <a href=\"https://github.com/microsoft/vscode-edge-devtools/pull/916\" title=\"\">cache and copy the last successful connection to DevTools</a>. This was a direct request from GitHub issues.</p>\n\n\t<h2>Other fixes and features</h2>\n\n\t<ul>\n\t\t<li>We <a href=\"https://github.com/microsoft/vscode-edge-devtools/pull/920\" title=\"\">updated webhint to 1.6.5</a> which means improved issue reporting and a general clean-up of the code base.</li>\n\t\t<li>We <a href=\"https://github.com/microsoft/vscode-edge-devtools/pull/885\" title=\"\">fixed some minor problems in the source path resolution</a> which makes <span class=\"caps\">CSS</span> syncing and opening files in the editor more stable</li>\n\t</ul>\n\n\t<p>If you encounter a problem, or you want to have other features, <a href=\"https://github.com/microsoft/vscode-edge-devtools/issues\" title=\"\">please file an issue on GitHub</a>. This is where we get our best ideas from.</p>",
      "content_text": "We just released version 1.4.6 of the Edge DevTools for VS Code extension and the main change is that the Console tool is now available in the extension.\n\n\t\n\n\t\n\t\t0:05 Console.log messages in VS Code\n\t\t0:08 Test out some JavaScript\n\t\t0:10 window object access\n\t\t0:12 DOM convenience API support\n\t\t0:15 Style changes\n\t\t0:17 Console.table\n\t\t0:20 Live Expressions\n\t\t0:30 Use Console and Elements together.\n\t\n\n\tThere are two caveats at the moment: in order to see the Console, you need to use Edge Canary as your debugging target (version 101.0.1193.0+) and it can happen that the you need to refresh the target once to see the Console light up. This is a bug in VS Code itself and will be fixed in the upcoming version.\n\n\tNew automatically created `launch.json` settings\n\n\tTo give you the best debugging experience in VS Code, we updated the `launch.json` settings when you generate it from the extension. The new file offers you a headless debugging experience by default calling the correct version of the Edge debugger.\n\n\tYou can see it them in action in the following screencast:\n\n\t\n\n\tIf you want to see the Console tool right now and not until 101 is the stable version of Edge, you need to add a `”runtimeExecutable”: “canary”,` to the launch.json to target the Canary build of the browser.\n\n\tOffline availability\n\n\tIf you want to use the extension when you are offline, we now also cache and copy the last successful connection to DevTools. This was a direct request from GitHub issues.\n\n\tOther fixes and features\n\n\t\n\t\tWe updated webhint to 1.6.5 which means improved issue reporting and a general clean-up of the code base.\n\t\tWe fixed some minor problems in the source path resolution which makes CSS syncing and opening files in the editor more stable\n\t\n\n\tIf you encounter a problem, or you want to have other features, please file an issue on GitHub. This is where we get our best ideas from.",
      "date_published": "2022-03-24T15:31:52.000Z",
      "date_modified": "2022-03-24T15:31:52.000Z",
      "_plugin": {
        "pageFilename": "07b782c84e88d0be1e75986301f865cb95bced99c40662ef62cdce03e3b0b343.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7164",
      "url": "https://christianheilmann.com/2022/03/17/automatically-starting-a-server-when-starting-a-debug-session-in-vs-code/",
      "title": "Automatically starting a server when starting a debug session in VS Code",
      "summary": "Back in January, I posted about a launch.json file to turn VS code into an end-to-end web debugging environment. One of the features people told me was missing was to start and stop a server with the debugging session. So here is how to do this. We add two more lines to the existing `launch.json`, […]",
      "content_html": "<p>Back in January, I posted about <a href=\"https://christianheilmann.com/2022/01/26/a-launch-json-setting-for-end-to-end-web-development/\" title=\"\">a launch.json file to turn VS code into an end-to-end web debugging environment</a>. One of the features people told me was missing was to start and stop a server with the debugging session. So here is how to do this.</p>\n\n\t<p><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/n55Cv5tU6uI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n\n\t<p>We add two more lines to the existing `launch.json`, defining a task to run before debugging starts and one after it end. Let&#8217;s call them `start server` and `stop server` respectively:</p>\n\n\t<p><pre lang=\"javascript\"><br />\n{</p>\n\t<p>&#8220;version&#8221;: &#8220;0.2.0&#8221;,<br />\n&#8220;configurations&#8221;: [<br />\n{</p>\n\t<p>&#8220;type&#8221;: &#8220;pwa-msedge&#8221;,<br />\n&#8220;request&#8221;: &#8220;launch&#8221;,<br />\n&#8220;name&#8221;: &#8220;webdebug&#8221;,<br />\n&#8220;url&#8221;: &#8220;http://localhost:8080&#8221;,<br />\n&#8220;webRoot&#8221;: &#8220;${workspaceFolder}&#8221;,<br />\n&#8220;runtimeExecutable&#8221;: &#8220;stable&#8221;,<br />\n&#8220;runtimeArgs&#8221;: [&#8220;&#8212;headless&#8221;],<br />\n&#8220;preLaunchTask&#8221;: &#8220;start server&#8221;,<br />\n&#8220;postDebugTask&#8221;: &#8220;stop server&#8221;<br />\n}</p>\n\t<p>]<br />\n}</p>\n\t<p></pre></p>\n\n\t<p>We then need to create a `tasks.json` file in the .`vscode` folder that describes these tasks. Here is the final result:</p>\n\n\t<p><pre lang=\"javascript\"><br />\n{</p>\n\t<p>&#8220;version&#8221;: &#8220;2.0.0&#8221;,<br />\n&#8220;tasks&#8221;: [<br />\n{</p>\n\t<p>&#8220;label&#8221;: &#8220;start server&#8221;,<br />\n&#8220;type&#8221;: &#8220;shell&#8221;,<br />\n&#8220;isBackground&#8221;: true,<br />\n&#8220;command&#8221;: &#8220;http-server&#8221;,<br />\n&#8220;presentation&#8221;: { &#8220;reveal&#8221;: &#8220;silent&#8221; },<br />\n&#8220;problemMatcher&#8221;: [{<br />\n&#8220;pattern&#8221;: [{<br />\n&#8220;regexp&#8221;: &#8220;.&#8221;,<br />\n&#8220;file&#8221;: 1,&#8221;line&#8221;: 1,<br />\n&#8220;column&#8221;: 1,&#8221;message&#8221;: 1<br />\n}],<br />\n&#8220;background&#8221;: {<br />\n&#8220;activeOnStart&#8221;: true,<br />\n&#8220;beginsPattern&#8221;: { &#8220;regexp&#8221;: &#8220;.&#8221; },<br />\n&#8220;endsPattern&#8221;: { &#8220;regexp&#8221;: &#8220;.&#8221; }<br />\n},<br />\n}]<br />\n},<br />\n{</p>\n\t<p>&#8220;label&#8221;: &#8220;stop server&#8221;,<br />\n&#8220;command&#8221;: &#8220;echo ${input:terminate}&#8221;,<br />\n&#8220;type&#8221;: &#8220;shell&#8221;<br />\n},<br />\n],<br />\n&#8220;inputs&#8221;: [{<br />\n&#8220;id&#8221;: &#8220;terminate&#8221;,<br />\n&#8220;type&#8221;: &#8220;command&#8221;,<br />\n&#8220;command&#8221;: &#8220;workbench.action.tasks.terminate&#8221;,<br />\n&#8220;args&#8221;: &#8220;terminateAll&#8221;<br />\n}]<br />\n}</p>\n\t<p></pre></p>\n\n\t<p>Tasks are meant to run, have an end and then tell the debugger that they are ready. Normally you would, for example, use them to do some conversion or pull some information. In this case, it is a bit trickier, as we start a server and that doesn&#8217;t give us any feedback. The task never ends as the server starts and keeps running.</p>\n\n\t<p>The `start server` task is a `shell` task, should run in the background and the command it executes is `http-server`, which is the <a href=\"https://www.npmjs.com/package/http-server\" title=\"\"><span class=\"caps\">NPM</span> module of the same name</a>. The presentation property is set to silent, which means that when the server starts, it doesn&#8217;t pop up the terminal in Visual Studio Code. When we use background tasks, we need to define a `problemMatcher` that tells the debug process if the task has executed successfully or if there was any issue. This can get rather complex and you need to parse the output on the Console with Regular Expressions. In this case, we keep it very open and allow anything reported on the output Console to be a success (RegEx &#8220;.&#8221;).</p>\n\n\t<p>What this task does is open a new Terminal, enter &#8220;http-server&#8221; and hit enter for us. And once that&#8217;s done, we have a local server at our disposal, making the current Workspace folder available as `localhost:8080`, which is also what we defined in our `launch.json` as the address to navigate to.</p>\n\n\t<p>The `stop server` task is a bit simpler. we just make it send a `terminate` command to the terminal. We then use an `inputs` directive to define the `terminal` <span class=\"caps\">CLI</span> command as something that calls `workbench.action.tasks.terminate` with an argument of `terminateAll`. This closes any Terminals opened by tasks earlier.</p>\n\n\t<p>And that&#8217;s all there is to spawn a new local server when you start debugging and close it when the debug session ends.</p>\n\n\t<p>There is currently a bug in <span class=\"caps\">VS </span>Code, that throws an error in your tasks when the `Problems` pane is not empty when the task runs. In the case of using the Edge Developer tools for <span class=\"caps\">VS </span>Code extension that means any issue reported there will result in this problem. I reported this to the team and they are working on a solution.</p>\n\n\t<p>If you want to see this in action, you can <a href=\"https://github.com/codepo8/simple-to-do\" title=\"\">fork the simple to-do demo</a> and run it locally. Make sure to have http-server installed via <span class=\"caps\">NPM</span>.</p>",
      "content_text": "Back in January, I posted about a launch.json file to turn VS code into an end-to-end web debugging environment. One of the features people told me was missing was to start and stop a server with the debugging session. So here is how to do this.\n\n\t\n\n\tWe add two more lines to the existing `launch.json`, defining a task to run before debugging starts and one after it end. Let’s call them `start server` and `stop server` respectively:\n\n\t\n{\n\t“version”: “0.2.0”,\n“configurations”: [\n{\n\t“type”: “pwa-msedge”,\n“request”: “launch”,\n“name”: “webdebug”,\n“url”: “http://localhost:8080”,\n“webRoot”: “${workspaceFolder}”,\n“runtimeExecutable”: “stable”,\n“runtimeArgs”: [“—headless”],\n“preLaunchTask”: “start server”,\n“postDebugTask”: “stop server”\n}\n\t]\n}\n\t\n\n\tWe then need to create a `tasks.json` file in the .`vscode` folder that describes these tasks. Here is the final result:\n\n\t\n{\n\t“version”: “2.0.0”,\n“tasks”: [\n{\n\t“label”: “start server”,\n“type”: “shell”,\n“isBackground”: true,\n“command”: “http-server”,\n“presentation”: { “reveal”: “silent” },\n“problemMatcher”: [{\n“pattern”: [{\n“regexp”: “.”,\n“file”: 1,”line”: 1,\n“column”: 1,”message”: 1\n}],\n“background”: {\n“activeOnStart”: true,\n“beginsPattern”: { “regexp”: “.” },\n“endsPattern”: { “regexp”: “.” }\n},\n}]\n},\n{\n\t“label”: “stop server”,\n“command”: “echo ${input:terminate}”,\n“type”: “shell”\n},\n],\n“inputs”: [{\n“id”: “terminate”,\n“type”: “command”,\n“command”: “workbench.action.tasks.terminate”,\n“args”: “terminateAll”\n}]\n}\n\t\n\n\tTasks are meant to run, have an end and then tell the debugger that they are ready. Normally you would, for example, use them to do some conversion or pull some information. In this case, it is a bit trickier, as we start a server and that doesn’t give us any feedback. The task never ends as the server starts and keeps running.\n\n\tThe `start server` task is a `shell` task, should run in the background and the command it executes is `http-server`, which is the NPM module of the same name. The presentation property is set to silent, which means that when the server starts, it doesn’t pop up the terminal in Visual Studio Code. When we use background tasks, we need to define a `problemMatcher` that tells the debug process if the task has executed successfully or if there was any issue. This can get rather complex and you need to parse the output on the Console with Regular Expressions. In this case, we keep it very open and allow anything reported on the output Console to be a success (RegEx “.”).\n\n\tWhat this task does is open a new Terminal, enter “http-server” and hit enter for us. And once that’s done, we have a local server at our disposal, making the current Workspace folder available as `localhost:8080`, which is also what we defined in our `launch.json` as the address to navigate to.\n\n\tThe `stop server` task is a bit simpler. we just make it send a `terminate` command to the terminal. We then use an `inputs` directive to define the `terminal` CLI command as something that calls `workbench.action.tasks.terminate` with an argument of `terminateAll`. This closes any Terminals opened by tasks earlier.\n\n\tAnd that’s all there is to spawn a new local server when you start debugging and close it when the debug session ends.\n\n\tThere is currently a bug in VS Code, that throws an error in your tasks when the `Problems` pane is not empty when the task runs. In the case of using the Edge Developer tools for VS Code extension that means any issue reported there will result in this problem. I reported this to the team and they are working on a solution.\n\n\tIf you want to see this in action, you can fork the simple to-do demo and run it locally. Make sure to have http-server installed via NPM.",
      "date_published": "2022-03-17T11:06:48.000Z",
      "date_modified": "2022-03-17T11:06:48.000Z",
      "_plugin": {
        "pageFilename": "6cd3df7cbf09197d2b8f4a98519e71e03b16f83baa3331e8a45062ad54e6eeb2.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7136",
      "url": "https://christianheilmann.com/2022/03/14/noise-cancellation-for-development/",
      "title": "Noise cancellation for development",
      "summary": "I like noise cancelling headphones. Using them, I can sleep better on planes and find much more detail in music I enjoy. In the office, they are a visual clue that I am currently unavailable for feedback as I want to concentrate on a task at hand. We live in times of a constant information […]",
      "content_html": "<p><a href=\"https://twitter.com/mmatuzo/status/1390537685899661313\"><img src=\"https://christianheilmann.com/wp-content/uploads/2022/03/manuel-1024x576.jpeg\" alt=\"109 HTML elements you never heard of\"/></a></p>\n\n\t<p>I like noise cancelling headphones. Using them, I can sleep better on planes and find much more detail in music I enjoy. In the office, they are a visual clue that I am currently unavailable for feedback as I want to concentrate on a task at hand.</p>\n\n\t<p><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/03/Photo-on-14-03-2022-at-20.10.jpg\" class=\"small\" alt=\"Chris Heilmann with noise cancelling headphones\" width=\"813\" height=\"767\" class=\"alignnone size-full wp-image-7153\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/03/Photo-on-14-03-2022-at-20.10.jpg 813w, https://christianheilmann.com/wp-content/uploads/2022/03/Photo-on-14-03-2022-at-20.10-300x283.jpg 300w, https://christianheilmann.com/wp-content/uploads/2022/03/Photo-on-14-03-2022-at-20.10-768x725.jpg 768w\" sizes=\"(max-width: 813px) 100vw, 813px\" /></p>\n\n\t<p>We live in times of a constant information flow. Where in the past research was a tough task and you had to know where to look, we now need to know what not to consume. Our main jobs are filtering and discarding false information, not finding sources.</p>\n\n\t<p>Matt Haig&#8217;s bestselling book <a href=\"https://www.theguardian.com/books/2018/jul/04/notes-on-a-nervous-planet-matt-haig-review\" title=\"\">Notes on a nervous planet</a> is a great read on that topic. It is easy to be on edge as we have such a vast amount of information to consume and instead of reflecting on our learnings, we chase even more information. Being up-to-date is the most important thing. More important than verified information or taking the time to do anything with this information.</p>\n\n\t<p>In the book, Haig also brings up the problem of social media presences. People show their best sides with lots of filters and little &#8220;fact embellishments&#8221;. Other people get frustrated consuming those as their lives aren&#8217;t as glamorous. Even worse, the people who posted the things that made others jealous aren&#8217;t happy either.  They are getting depressed because their real lives aren&#8217;t like their online profiles. And they live with the burden of having lied to the world by feeding a fake persona instead of nurturing themselves.</p>\n\n\t<h2>The myth of the &#8220;always switched on&#8221; developer</h2>\n\n\t<p>And here&#8217;s where I get to the point of representation of development in social media and main media. It suffers from the same problem. We have a skewed image of what we should be as developers. And more and more people get depressed and feel bad because of it.</p>\n\n\t<p>Just take a few of the following statements and for each of them that apply to you give yourself a <span class=\"caps\">DFBSP </span>(Developer Frustration Bullshit point).</p>\n\n\t<ul>\n\t\t<li>I feel like I&#8217;m falling behind in my knowledge as a developer</li>\n\t\t<li>I am not working on cool new technology like everybody else does</li>\n\t\t<li>I am worried that my skillset is getting rusty and I don&#8217;t know the things current employers are looking for</li>\n\t\t<li>I have no side-hustle or project to fall back on if I lose my job</li>\n\t\t<li>Modern development doesn&#8217;t look at all like what I do day to day</li>\n\t\t<li>Everybody else knows more than me</li>\n\t\t<li>It seems that there is a massive change in the development world happening and I can&#8217;t find a way to get into it or even get excited about it.</li>\n\t</ul>\n\n\t<p>I am pretty sure you can nod along to at least one of these points. And I do feel the same. I have the benefit of having worked in this market for 25 years, and I&#8217;ve seen the same patterns emerge over and over again. But I also understand that people are anxious and worried. That&#8217;s terrible and we shouldn&#8217;t feel that way. One reason why we are like that is noise.</p>\n\n\t<h2>A change in developer videos</h2>\n\n\t<p>Lately with the pandemic I didn&#8217;t go to meetups and conferences any longer. Instead, I switched to video as a platform of educating and also learning about things. I don&#8217;t have to put up an effort to go to a place to learn about the bleeding edge. I can sit in my chair or lie in my bed and consume 24/7. Video as an education platform skyrocketed in the last years, because we had to work from home.</p>\n\n\t<p>It is exciting to work with the Visual Studio Code team on shorts. These are 20-40 second videos for <a href=\"https://www.tiktok.com/@vscode\" title=\"\">TikTok</a> and subsequently YouTube. They are fun to do, although creating videos about development tools in portrait feels wrong.</p>\n\n\t<p><blockquote class=\"tiktok-embed\" cite=\"https://www.tiktok.com/@vscode/video/7059946274807794991\" data-video-id=\"7059946274807794991\" style=\"max-width: 605px;min-width: 325px;\" > <section> <a target=\"_blank\" title=\"@vscode\" href=\"https://www.tiktok.com/@vscode\" rel=\"noopener\">@vscode</a> Top secret launch config <a title=\"programming\" target=\"_blank\" href=\"https://www.tiktok.com/tag/programming\" rel=\"noopener\">#programming</a> <a title=\"techtok\" target=\"_blank\" href=\"https://www.tiktok.com/tag/techtok\" rel=\"noopener\">#techtok</a> <a title=\"web\" target=\"_blank\" href=\"https://www.tiktok.com/tag/web\" rel=\"noopener\">#web</a> <a title=\"browser\" target=\"_blank\" href=\"https://www.tiktok.com/tag/browser\" rel=\"noopener\">#browser</a> <a title=\"vscode\" target=\"_blank\" href=\"https://www.tiktok.com/tag/vscode\" rel=\"noopener\">#vscode</a> <a title=\"edutok\" target=\"_blank\" href=\"https://www.tiktok.com/tag/edutok\" rel=\"noopener\">#edutok</a> <a target=\"_blank\" title=\"♬ original sound - Visual Studio Code\" href=\"https://www.tiktok.com/music/original-sound-7059946250669591342\" rel=\"noopener\">♬ original sound &#8211; Visual Studio Code</a> </section> </blockquote> <script async src=\"https://www.tiktok.com/embed.js\"></script></p>\n\n\t<p>I&#8217;m going to say it clearly: I don&#8217;t get TikTok. I look at it and I feel annoyed. I feel badgered and pushed and it isn&#8217;t surprising. This is exactly what the platform does. If we compare Facebook to a <a href=\"https://en.wikipedia.org/wiki/Operant_conditioning_chamber\" title=\"\">Skinner box</a>, TikTok drives that up a notch. It is a perfect addiction machine, locking you in and making you stay. Consume, consume and consume some more.</p>\n\n\t<p>That said, I was pleasantly surprised about the comments I got on media in that format. There was a lot of insightful and actionable feedback. It seems that by making information more &#8220;snackable&#8221;, you also get people to interact more. <span class=\"caps\">A 45</span> minutes talk video is overwhelming and feels like an investment to your viewers. It seems that the main consumers of these platforms use it differently than I do.</p>\n\n\t<p>Looking at the developer video offerings, there is a disturbing fashion of being overly dramatic. I want to make it clear that I don&#8217;t criticise the content of any of the video channels shown here. I do like a lot of them, learned from them and really appreciate what they do. But I have a hard time taking the trend of video thumbnails serious.</p>\n\n\t<p><a href=\"https://christianheilmann.com/wp-content/uploads/2022/03/New-Project.jpg\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/03/New-Project-1024x683.jpg\" alt=\"Thumbnails of YouTube videos all showing concerned, confused or annoyed people next to some code.\" width=\"1024\" height=\"683\" class=\"alignnone size-large wp-image-7140\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/03/New-Project-1024x683.jpg 1024w, https://christianheilmann.com/wp-content/uploads/2022/03/New-Project-300x200.jpg 300w, https://christianheilmann.com/wp-content/uploads/2022/03/New-Project-768x512.jpg 768w, https://christianheilmann.com/wp-content/uploads/2022/03/New-Project.jpg 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></p>\n\n\t<p><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I need to up my game with video thumbnails about coding stuff. It seems you need to look shocked/pensive/pleading/constipated to get people to learn when not to use a semicolon. I really like the content of these people but this just makes me cringe. <a href=\"https://t.co/Ig8nSf3GE1\">pic.twitter.com/Ig8nSf3GE1</a></p>&mdash; Chris Heilmann (@codepo8) <a href=\"https://twitter.com/codepo8/status/1488855323003822087?ref_src=twsrc%5Etfw\">February 2, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n\t<p>And I am not alone in this. This fake drama has been rubbing a few people wrong.</p>\n\n\t<p><blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">I started making a spoof of this a few weeks ago but it made me too sad <a href=\"https://t.co/KowYhsOXZ0\">pic.twitter.com/KowYhsOXZ0</a></p>&mdash; Jake Archibald (@jaffathecake) <a href=\"https://twitter.com/jaffathecake/status/1406975697197879297?ref_src=twsrc%5Etfw\">June 21, 2021</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n\t<p><blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Am I doing this right? ? <a href=\"https://t.co/VfyEKTFa4o\">https://t.co/VfyEKTFa4o</a> <a href=\"https://t.co/oRzTOaXeat\">pic.twitter.com/oRzTOaXeat</a></p>&mdash; Manuel Matuzovi? (@mmatuzo) <a href=\"https://twitter.com/mmatuzo/status/1376253632685957128?ref_src=twsrc%5Etfw\">March 28, 2021</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n\t<p>It feels like the William Shatner way of acting applied to previews.</p>\n\n\t<p><blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Getting there… Ready for the YouTube Thumbnail Shatner award. <a href=\"https://t.co/jOBT8kKyuJ\">pic.twitter.com/jOBT8kKyuJ</a></p>&mdash; Chris Heilmann (@codepo8) <a href=\"https://twitter.com/codepo8/status/1488859728960704513?ref_src=twsrc%5Etfw\">February 2, 2022</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n\t<p>Sure, this could only be a simple way to get more clicks. And as everyone does it, it seems to work. But it also fuels stress and anxiety. If everything is super important and I don&#8217;t have the time to learn about it or even know about it, how does that make me feel?</p>\n\n\t<p>The good news is that we have control over this. We can choose not to watch these videos or not to feel badgered by the click-bait nature of things. But when it comes to noise to deal with to do our job, the constant change in our platform is also tricky.</p>\n\n\t<h2>More granular access to the web platform brings more complexity</h2>\n\n\t<p>Web development as a job seems to be hard to grasp. We always have to deal with a few things.</p>\n\n\t<ul>\n\t\t<li><strong>Platform/Browser differences</strong> &#8211; there always seems to be one browser or platform that holds us back.</li>\n\t\t<li><strong><span class=\"caps\">FOMO</span> when comparing with native platforms</strong> &#8211; native, closed platforms will always seem better than the web, as they don&#8217;t need to cater to all</li>\n\t\t<li><strong>Constantly changing language features</strong> &#8211; looking at <span class=\"caps\">CSS</span> two years ago and now is an amazing difference. JavaScript even comes in annual flavours now</li>\n\t\t<li><strong>Lag of documentation</strong> &#8211; the newest features often lack any official documentation. Instead you get a lot of presentations, videos and undocumented demo code</li>\n\t\t<li><strong>Everything is experimental</strong> &#8211; almost everything shiny and new comes with a lot of noise but also a tiny &#8220;don&#8217;t use this in production&#8221;</li>\n\t</ul>\n\n\t<p>This isn&#8217;t new. This has always been the case with the web. And the way out of this is standardisation. The crux of the matter with that is that defining, ratifying and agreeing on a standard is a slow process. I remember talking some time ago to Molly Holzschlag when <span class=\"caps\">CSS</span> got a lot of new standard features. Her complaint summed up the problem of the speed of design fashion and standardisation quite nicely:</p>\n\n\t<blockquote>It took us about a year to standardise how rounded corners in <span class=\"caps\">CSS</span> should work. By that time web design fashion changed and nobody wanted them anymore.</blockquote>\n\n\t<p>To speed up the slow and academic standardisation process, developers demanded more access to the web platform. Thus, the <a href=\"https://github.com/extensibleweb/manifesto\" title=\"\">extensible web manifesto</a> was born, demanding more low-level APIs so that any developer can move the web forward. The first big improvement was to replace the flawed way to give web products offline capabilities, AppCache with <a href=\"https://developer.mozilla.org/docs/Web/API/ServiceWorker\" title=\"\">ServiceWorker</a>. Next we weren&#8217;t content with how some <span class=\"caps\">HTML</span> elements created complex interfaces we had no control over. <a href=\"https://www.webcomponents.org/\" title=\"\">Web Components</a> allow us to build our own interfaces that are an <span class=\"caps\">HTML</span> element. The most recent change in this drive for more low-level access are <a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_Houdini\" title=\"\"><span class=\"caps\">CSS </span>Houdini</a> to use the <span class=\"caps\">CSS</span> painting APIs, and <a href=\"https://css-tricks.com/css-cascade-layers/\" title=\"\">Cascade Layers</a> to control the <span class=\"caps\">CSS </span>Cascade rather than having to blindly rely on it.</p>\n\n\t<p>All this gives developers much more control over the web, but it comes with the cost of complexity. The beauty of the web was that it was relatively simple to get started. Write some <span class=\"caps\">HTML</span>, add some styles to make it look and work great and then add JavaScript to add extra interactivity. With this new amount of access, we seem to have to be already skilled developers to build a small web project.</p>\n\n\t<p>As it turns out, a lot of web developers aren&#8217;t that interested in getting granular control of the web. They are much more interested in getting work done. But having this low-level access does empower other developers to write abstraction libraries. These use the low-level APIs under the hood, but give those developers who want to just build something quickly a faster way to do so. If you, for example, look for ServiceWorker solutions, you will find that most people use the <a href=\"https://developers.google.com/web/tools/workbox/\" title=\"\">WorkBox</a> library instead.</p>\n\n\t<p>So, to recap:</p>\n\n\t<ul>\n\t\t<li>Web development is complex as there are so many things to consider</li>\n\t\t<li>Standards help bring order to chaos</li>\n\t\t<li>Standardisation is slow</li>\n\t\t<li>Let&#8217;s allow for programmatic access to the web platform</li>\n\t\t<li>Biggest consumers of low level web APIs are abstraction libraries</li>\n\t\t<li>Abstraction libraries aren&#8217;t standardised</li>\n\t</ul>\n\n\t<p>See the problem? By abstracting away the issues of the web into hundreds of frameworks and libraries we created a similar problem than we had before. Except now developers starting with the web aren&#8217;t frustrated by the platform. They are drowning in an offer of lots of helpful abstractions and toolchains. And that makes web development look a lot more complex than it should be. Jacob Hands put it nicely on Twitter:</p>\n\n\t<p><blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">web dev: It&#39;s simple! <a href=\"https://t.co/MYJIEUg13q\">pic.twitter.com/MYJIEUg13q</a></p>&mdash; Jacob Hands ? (@jachands) <a href=\"https://twitter.com/jachands/status/1500173829733240844?ref_src=twsrc%5Etfw\">March 5, 2022</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n\t<h2>Time to take a breath</h2>\n\n\t<p>It is natural to feel overwhelmed by this much choice. Especially when each solution in this avalanche is supposed to make you more effective. It is time to take a break, a deep breath, count to ten and look at what&#8217;s happening.</p>\n\n\t<p>The thing that Jacob is showing here isn&#8217;t the start of a project. It is months of agreement, trial and error and finding the best solution to build a certain product. The fallacy is then to think that every other product would also need the same toolchain to get off the ground.  It makes no sense to overwhelm a single person with all these tools. It doesn&#8217;t automatically make you more productive. It can, but it also may be overkill.</p>\n\n\t<p>If you don&#8217;t know what all these things do, we can start a club, because I don&#8217;t either. I am also not worried about it. Working for 25 years in the business taught me a few things. It taught me that sooner or later, tooling and choice of technologies will overtake you. And it taught me that our careers and jobs rely on other things &#8211; like how we work with other people.</p>\n\n\t<h2>Experience can be a burden</h2>\n\n\t<p>I <a href=\"https://christianheilmann.com/2021/06/16/shut-up-old-man/\" title=\"\">wrote about this</a> a few weeks ago already, but it is worth repeating. The more experience you have as a developer, the more insight you have into how things fail. The danger in this case is then to tell everybody else to avoid the problems you encountered in the past. To assume that the knowledge you have right now is as valid and obvious to others as it is to you.  People who didn&#8217;t have the same experiences you had. We try to come up with a hive intelligence or knowledge by telling people what we know. Not by allowing them to make mistakes and thus understand why these solution make sense. Failure is a part of learning, but we keep trying to avoid it at any cost. Either by building solutions that abstract issues away, or &#8211; and this is where it really gets bad &#8211; by telling people off for not embracing our own experiences and wisdom as a given.</p>\n\n\t<h2>Avoiding destructive patterns</h2>\n\n\t<p>When it comes to noise and stressing developers out, there are a few patterns people follow that have to go away.</p>\n\n\t<h3>Gatekeeping</h3>\n\n\t<blockquote>You aren&#8217;t a professional  if you don&#8217;t use ${thing}</blockquote>\n\n\t<p>This is utter tosh. Over my career I&#8217;ve heard this dozens of times. In almost all cases the thing that would have made me a professional vanished in a few months. And got replaced by the next new shiny. I know highly professional developers working with woefully outdated tools and technology. Partly because their product demands it. But also because they are effective using it and don&#8217;t see any need to learn a different one.</p>\n\n\t<h3>Assumed baseline</h3>\n\n\t<blockquote>You forgot to do the most basic things, you are horrible to $people!</blockquote>\n\n\t<p>This is one I struggle with a lot. Valid <span class=\"caps\">HTML</span>, the most basic accessibility features and a readable syntax are second nature to me. Using all these makes sure you don&#8217;t block people out, and you make it easier for people to maintain and run with your work. But calling people out publicly for basic mistakes isn&#8217;t helpful at all. This is a pattern you see a lot in social media. Almost every positive post will have someone find a flaw in it that could offend a certain group. Pointing this out may be important, but it is also a major bummer.</p>\n\n\t<h3>Fear mongering</h3>\n\n\t<blockquote>These are the only skills employers are looking for!</blockquote>\n\n\t<p>What engineering managers want from a new hire and what ends up in job ads differs a lot. This is a problem we need to deal with in our market. In almost any job I started in I had half the skills listed in the job description. It is never one killer technical skill that will make you stand out. It is how good you are in taking on new challenges and integrate into existing structures and needs. Companies don&#8217;t need rockstars, they need people who can integrate into a well-working system. That we list a plethora of skills that are hot right now in job ads is annoying.</p>\n\n\t<h3>Wisdom of the ancients</h3>\n\n\t<blockquote>This never worked before and will fail now!</blockquote>\n\n\t<p>This ties in with my &#8220;Shut up old man&#8221; post and is a real problem. The longer you work in development, the more tainted you get. This slows down innovation and frustrates fresh, excited people around you. One big step towards becoming a tech lead is to use your experience to help people grow. Not to let your horrible memories taint possible great new things to come. Enthusiasm is never a bad thing when it is being channelled into useful actions. Often things that were impossible for me to achieve are no issue for new developers in an evolved environment.</p>\n\n\t<h3>My pet setup</h3>\n\n\t<blockquote>Why don&#8217;t you use alpenhorn.js like real professionals?</blockquote>\n\n\t<p>I keep encountering this as comments from people asking to contribute to a project. It is reverse gatekeeping, telling me to earn their work by subscribing to their idea of a perfect setup. Even when the project in question is a decade old and has thousands of contributors. It is pure hubris to demand the product to change. A better way is to point out what benefits it would bring to reconsider a new architecture. That way you&#8217;ll learn soon why it isn&#8217;t that easy. For most projects, there is never any time for re-architecture, no matter how messed up they are. It is tricky and scary to replace an aircraft engine mid-flight.</p>\n\n\t<h3>Copying the big players</h3>\n\n\t<blockquote>&#8220;This is used to build $bigproduct, so it will be even better for ours&#8221;</blockquote>\n\n\t<p>This fallacy is rampant. It is annoying how many projects are huge because they started with a &#8220;big player&#8221; bootstrap. Frameworks and libraries are great to get a project off the ground fast. They are also vital for companies with huge projects and hundreds of developers. So, if you want to create something quick and you know you will re-write it soon anyways, fine. If you think that using the products the big players use makes your product scale and grow as fast, good luck. Fact is, you hardly will ever build anything from scratch when a company hires you. Companies have budgeted training on the job to get people proficient in the tools they use. The idea of publishing these platforms to the world is to cut down the amount of training for new hires. Not to enable lots of competitors to work as efficiently.</p>\n\n\t<h2>Coping mechanisms</h2>\n\n\t<p>In addition to what to avoid, it might also be good to talk about a few coping mechanism to avoid stress and anxiety about falling behind as a developer. So, here goes.</p>\n\n\t<blockquote>Experimental features are important, but they should be treated as such.</blockquote>\n\n\t<p>One big mistake we make is that we want to use experimental features of the web platform immediately. This isn&#8217;t what an experiment is about. It is about people trying the new thing and giving feedback if it is good enough. Far too many libraries, polyfills and well-intentioned ideas to make tomorrow&#8217;s tech usable today are now digital landfill of the web. An experimental feature may be tomorrow&#8217;s tech, but it also might have to go back to the drawing board. Being an expert in something that is half baked is quite an investment you may not have to make.</p>\n\n\t<blockquote>What is important for your product is defined by your audience, not you.</blockquote>\n\n\t<p>It is frustrating to not be able to play with the newest and coolest all the time. As a developer, though, your job is not to make yourself happy. Your job is to give the users of your product the best experience. Keep the product performing well, not block out anyone because of their setup or abilities. And keep the product secure. If you build a working product that does this, you&#8217;re already a kick-ass developer in my book. This is enough to cover and the technology stack to do that is often governed by the needs of your users.</p>\n\n\t<blockquote>If things sound too good to be true and fix all problems magically, they are too good to be true.</blockquote>\n\n\t<p>Don&#8217;t fall for false promises &#8211; there&#8217;s always a catch that is well disguised in good marketing.</p>\n\n\t<blockquote>Remember that every video, every post and every talk has an agenda.</blockquote>\n\n\t<p>Even this one. I kind of wrote this for myself, to calm myself down. If you watch, read or listen to something that makes you feel like you are missing out, check who delivered it. In 99% of the cases you&#8217;ll find there is some product or service involved. Or, it may be the &#8220;subscribe now for more&#8221; to make you give them more clicks.</p>\n\n\t<blockquote>Aggressive feedback is often there to cover up feelings of inadequacy in the person who gives it (still, hard to cope with).</blockquote>\n\n\t<p>There is a lot of anger in technical online discussions and comments. Over the years I found that the loudest and most aggressive people aren&#8217;t out to get me. They are out to get what I represent to them. They want to be the people who are considered to be the movers and shakers. Anyone disagreeing or trying to calm things down are in their way to greatness. It is tough to not take this personal, but it also means you feed energy into a lost or misguided cause. Much like you stop a dog from barking by showing less interest and radiating calm, you don&#8217;t get anything from shouting back.</p>\n\n\t<blockquote>Count to 10, breathe in, breathe out, dare to think slower&#8230;</blockquote>\n\n\t<p>Fast thinking is a thing we cherish. We love people that come up with brainy sounding quick solutions and &#8220;think on their feet&#8221;. It makes us feel like innovators and driving the agenda. The issue with it is that if all thinking is fast, a lot of opportunities to create great things fall by the wayside. The first thing that comes into your head may sound obvious, but there is a lot of good in reflecting the obvious, too. Also, not every discussion is worth plunging into and the most heated ones often aren&#8217;t at all.</p>\n\n\t<h2>Good ideas to calm things down</h2>\n\n\t<p><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/03/scarlett-1024x848.jpeg\" alt=\"Scratching the head of a cute dog\" width=\"1024\" height=\"848\" class=\"alignnone size-large wp-image-7157\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/03/scarlett-1024x848.jpeg 1024w, https://christianheilmann.com/wp-content/uploads/2022/03/scarlett-300x249.jpeg 300w, https://christianheilmann.com/wp-content/uploads/2022/03/scarlett-768x636.jpeg 768w, https://christianheilmann.com/wp-content/uploads/2022/03/scarlett.jpeg 1178w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n\n\t<p>One thing to get less noise is to stop adding to it. By avoiding the earlier mentioned destructive pattern we call can help. Another thing that is easy to do is not to post or to answer when you think you need to. It is amazing how much less stressful your social media feed gets when you don&#8217;t add to it all the time.</p>\n\n\t<p>One other thing that works wonders is to do something instead of telling someone to do it.</p>\n\n\t<p>The other day was <span class=\"caps\">VS </span>Code day and the five minute &#8220;create your own web resume&#8221; presentation by Ornella Altunyan blew me away. In it, Ornella shows how to build a web resume in the browser without installing anything on your computer.</p>\n\n\t<p><iframe loading=\"lazy\" title=\"Create a resume website in your browser with VS Code and GitHub Pages\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/srQjolk7rj8?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n\n\t<p>The <span class=\"caps\">HTML</span> and <span class=\"caps\">CSS</span> used in that demo triggered my &#8220;wisdom of the ancients&#8221; antipattern. A few important things were missing and it was tempting to point those out.</p>\n\n\t<p>But instead of doing that, I checked if the code is available for contribution, and it is. So I forked the code, played with it, fixed the issues that ailed me and created a <a href=\"https://github.com/ornelladotcom/resume-website-workshop/pull/5\" title=\"\">pull request</a>. In this one I explained why I consider these changes important and that&#8217;s that.</p>\n\n\t<p><a href=\"https://christianheilmann.com/wp-content/uploads/2022/03/pullrequest.png\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/03/pullrequest.png\" alt=\"Pull request on GitHub explaining why the changes I made are important\" width=\"934\" height=\"350\" class=\"alignnone size-full wp-image-7156\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/03/pullrequest.png 934w, https://christianheilmann.com/wp-content/uploads/2022/03/pullrequest-300x112.png 300w, https://christianheilmann.com/wp-content/uploads/2022/03/pullrequest-768x288.png 768w\" sizes=\"(max-width: 934px) 100vw, 934px\" /></a></p>\n\n\t<p>As we work in the same place, I also pinged the author and thanked for a great presentation. I learned that my changes and explanations were highly appreciated. I also learned that integrating them might take some time. The code is part of a <a href=\"https://aka.ms/resumeworkshop\" title=\"\">workshop</a> and a <a href=\"https://docs.microsoft.com/en-us/learn/modules/introduction-to-github-visual-studio-code/\" title=\"\">learning module</a> and these materials need to get adjusted accordingly.</p>\n\n\t<p>Excellent, isn&#8217;t it? I got to calm down by fixing some things and playing with some new technology. The author has code to merge with explanations and I learned why my contribution might take some time to show up. No unknowns, no pushing and complaining. This is fun.</p>\n\n\t<p>In general, it is temping to complain in public but it isn&#8217;t as useful as we think. All it does is create noise and give people extra work. So, before we go to Twitter to right some wrong in a piece of code, it might be a good idea to do this instead.</p>\n\n\t<ul>\n\t\t<li>Check for official feedback channels and use those (bug trackers, in-built feedback items, code repositories)</li>\n\t\t<li>Search if the problem is already reported and upvote/comment instead of creating a duplicate &#8211; the more people report on the same thing with more detail, the easier it gets to fix</li>\n\t\t<li>If you are reporting a problem, create a good explanation how to replicate your issue.</li>\n\t\t<li>Include your setup, often some third party influence can cause the issue.</li>\n\t\t<li>Often you find by re-doing what you did and documenting it, you find an own mistake and learn that the product isn&#8217;t broken at all.</li>\n\t</ul>\n\n\t<p>I&#8217;m forcing myself to be calmer, to care less about things being &#8220;obviously wrong&#8221; and to listen more intently. And to block out unnecessary noise. If you do the same, you&#8217;ll find being a developer in today&#8217;s world is pretty darn amazing and that what you know is already a lot &#8211; and maybe enough.</p>",
      "content_text": "\n\n\tI like noise cancelling headphones. Using them, I can sleep better on planes and find much more detail in music I enjoy. In the office, they are a visual clue that I am currently unavailable for feedback as I want to concentrate on a task at hand.\n\n\t\n\n\tWe live in times of a constant information flow. Where in the past research was a tough task and you had to know where to look, we now need to know what not to consume. Our main jobs are filtering and discarding false information, not finding sources.\n\n\tMatt Haig’s bestselling book Notes on a nervous planet is a great read on that topic. It is easy to be on edge as we have such a vast amount of information to consume and instead of reflecting on our learnings, we chase even more information. Being up-to-date is the most important thing. More important than verified information or taking the time to do anything with this information.\n\n\tIn the book, Haig also brings up the problem of social media presences. People show their best sides with lots of filters and little “fact embellishments”. Other people get frustrated consuming those as their lives aren’t as glamorous. Even worse, the people who posted the things that made others jealous aren’t happy either.  They are getting depressed because their real lives aren’t like their online profiles. And they live with the burden of having lied to the world by feeding a fake persona instead of nurturing themselves.\n\n\tThe myth of the “always switched on” developer\n\n\tAnd here’s where I get to the point of representation of development in social media and main media. It suffers from the same problem. We have a skewed image of what we should be as developers. And more and more people get depressed and feel bad because of it.\n\n\tJust take a few of the following statements and for each of them that apply to you give yourself a DFBSP (Developer Frustration Bullshit point).\n\n\t\n\t\tI feel like I’m falling behind in my knowledge as a developer\n\t\tI am not working on cool new technology like everybody else does\n\t\tI am worried that my skillset is getting rusty and I don’t know the things current employers are looking for\n\t\tI have no side-hustle or project to fall back on if I lose my job\n\t\tModern development doesn’t look at all like what I do day to day\n\t\tEverybody else knows more than me\n\t\tIt seems that there is a massive change in the development world happening and I can’t find a way to get into it or even get excited about it.\n\t\n\n\tI am pretty sure you can nod along to at least one of these points. And I do feel the same. I have the benefit of having worked in this market for 25 years, and I’ve seen the same patterns emerge over and over again. But I also understand that people are anxious and worried. That’s terrible and we shouldn’t feel that way. One reason why we are like that is noise.\n\n\tA change in developer videos\n\n\tLately with the pandemic I didn’t go to meetups and conferences any longer. Instead, I switched to video as a platform of educating and also learning about things. I don’t have to put up an effort to go to a place to learn about the bleeding edge. I can sit in my chair or lie in my bed and consume 24/7. Video as an education platform skyrocketed in the last years, because we had to work from home.\n\n\tIt is exciting to work with the Visual Studio Code team on shorts. These are 20-40 second videos for TikTok and subsequently YouTube. They are fun to do, although creating videos about development tools in portrait feels wrong.\n\n\t  @vscode Top secret launch config #programming #techtok #web #browser #vscode #edutok ♬ original sound – Visual Studio Code   \n\n\tI’m going to say it clearly: I don’t get TikTok. I look at it and I feel annoyed. I feel badgered and pushed and it isn’t surprising. This is exactly what the platform does. If we compare Facebook to a Skinner box, TikTok drives that up a notch. It is a perfect addiction machine, locking you in and making you stay. Consume, consume and consume some more.\n\n\tThat said, I was pleasantly surprised about the comments I got on media in that format. There was a lot of insightful and actionable feedback. It seems that by making information more “snackable”, you also get people to interact more. A 45 minutes talk video is overwhelming and feels like an investment to your viewers. It seems that the main consumers of these platforms use it differently than I do.\n\n\tLooking at the developer video offerings, there is a disturbing fashion of being overly dramatic. I want to make it clear that I don’t criticise the content of any of the video channels shown here. I do like a lot of them, learned from them and really appreciate what they do. But I have a hard time taking the trend of video thumbnails serious.\n\n\t\n\n\tI need to up my game with video thumbnails about coding stuff. It seems you need to look shocked/pensive/pleading/constipated to get people to learn when not to use a semicolon. I really like the content of these people but this just makes me cringe. pic.twitter.com/Ig8nSf3GE1— Chris Heilmann (@codepo8) February 2, 2022 \n\n\tAnd I am not alone in this. This fake drama has been rubbing a few people wrong.\n\n\tI started making a spoof of this a few weeks ago but it made me too sad pic.twitter.com/KowYhsOXZ0— Jake Archibald (@jaffathecake) June 21, 2021\n\n\tAm I doing this right? ? https://t.co/VfyEKTFa4o pic.twitter.com/oRzTOaXeat— Manuel Matuzovi? (@mmatuzo) March 28, 2021\n\n\tIt feels like the William Shatner way of acting applied to previews.\n\n\tGetting there… Ready for the YouTube Thumbnail Shatner award. pic.twitter.com/jOBT8kKyuJ— Chris Heilmann (@codepo8) February 2, 2022\n\n\tSure, this could only be a simple way to get more clicks. And as everyone does it, it seems to work. But it also fuels stress and anxiety. If everything is super important and I don’t have the time to learn about it or even know about it, how does that make me feel?\n\n\tThe good news is that we have control over this. We can choose not to watch these videos or not to feel badgered by the click-bait nature of things. But when it comes to noise to deal with to do our job, the constant change in our platform is also tricky.\n\n\tMore granular access to the web platform brings more complexity\n\n\tWeb development as a job seems to be hard to grasp. We always have to deal with a few things.\n\n\t\n\t\tPlatform/Browser differences – there always seems to be one browser or platform that holds us back.\n\t\tFOMO when comparing with native platforms – native, closed platforms will always seem better than the web, as they don’t need to cater to all\n\t\tConstantly changing language features – looking at CSS two years ago and now is an amazing difference. JavaScript even comes in annual flavours now\n\t\tLag of documentation – the newest features often lack any official documentation. Instead you get a lot of presentations, videos and undocumented demo code\n\t\tEverything is experimental – almost everything shiny and new comes with a lot of noise but also a tiny “don’t use this in production”\n\t\n\n\tThis isn’t new. This has always been the case with the web. And the way out of this is standardisation. The crux of the matter with that is that defining, ratifying and agreeing on a standard is a slow process. I remember talking some time ago to Molly Holzschlag when CSS got a lot of new standard features. Her complaint summed up the problem of the speed of design fashion and standardisation quite nicely:\n\n\tIt took us about a year to standardise how rounded corners in CSS should work. By that time web design fashion changed and nobody wanted them anymore.\n\n\tTo speed up the slow and academic standardisation process, developers demanded more access to the web platform. Thus, the extensible web manifesto was born, demanding more low-level APIs so that any developer can move the web forward. The first big improvement was to replace the flawed way to give web products offline capabilities, AppCache with ServiceWorker. Next we weren’t content with how some HTML elements created complex interfaces we had no control over. Web Components allow us to build our own interfaces that are an HTML element. The most recent change in this drive for more low-level access are CSS Houdini to use the CSS painting APIs, and Cascade Layers to control the CSS Cascade rather than having to blindly rely on it.\n\n\tAll this gives developers much more control over the web, but it comes with the cost of complexity. The beauty of the web was that it was relatively simple to get started. Write some HTML, add some styles to make it look and work great and then add JavaScript to add extra interactivity. With this new amount of access, we seem to have to be already skilled developers to build a small web project.\n\n\tAs it turns out, a lot of web developers aren’t that interested in getting granular control of the web. They are much more interested in getting work done. But having this low-level access does empower other developers to write abstraction libraries. These use the low-level APIs under the hood, but give those developers who want to just build something quickly a faster way to do so. If you, for example, look for ServiceWorker solutions, you will find that most people use the WorkBox library instead.\n\n\tSo, to recap:\n\n\t\n\t\tWeb development is complex as there are so many things to consider\n\t\tStandards help bring order to chaos\n\t\tStandardisation is slow\n\t\tLet’s allow for programmatic access to the web platform\n\t\tBiggest consumers of low level web APIs are abstraction libraries\n\t\tAbstraction libraries aren’t standardised\n\t\n\n\tSee the problem? By abstracting away the issues of the web into hundreds of frameworks and libraries we created a similar problem than we had before. Except now developers starting with the web aren’t frustrated by the platform. They are drowning in an offer of lots of helpful abstractions and toolchains. And that makes web development look a lot more complex than it should be. Jacob Hands put it nicely on Twitter:\n\n\tweb dev: It's simple! pic.twitter.com/MYJIEUg13q— Jacob Hands ? (@jachands) March 5, 2022\n\n\tTime to take a breath\n\n\tIt is natural to feel overwhelmed by this much choice. Especially when each solution in this avalanche is supposed to make you more effective. It is time to take a break, a deep breath, count to ten and look at what’s happening.\n\n\tThe thing that Jacob is showing here isn’t the start of a project. It is months of agreement, trial and error and finding the best solution to build a certain product. The fallacy is then to think that every other product would also need the same toolchain to get off the ground.  It makes no sense to overwhelm a single person with all these tools. It doesn’t automatically make you more productive. It can, but it also may be overkill.\n\n\tIf you don’t know what all these things do, we can start a club, because I don’t either. I am also not worried about it. Working for 25 years in the business taught me a few things. It taught me that sooner or later, tooling and choice of technologies will overtake you. And it taught me that our careers and jobs rely on other things – like how we work with other people.\n\n\tExperience can be a burden\n\n\tI wrote about this a few weeks ago already, but it is worth repeating. The more experience you have as a developer, the more insight you have into how things fail. The danger in this case is then to tell everybody else to avoid the problems you encountered in the past. To assume that the knowledge you have right now is as valid and obvious to others as it is to you.  People who didn’t have the same experiences you had. We try to come up with a hive intelligence or knowledge by telling people what we know. Not by allowing them to make mistakes and thus understand why these solution make sense. Failure is a part of learning, but we keep trying to avoid it at any cost. Either by building solutions that abstract issues away, or – and this is where it really gets bad – by telling people off for not embracing our own experiences and wisdom as a given.\n\n\tAvoiding destructive patterns\n\n\tWhen it comes to noise and stressing developers out, there are a few patterns people follow that have to go away.\n\n\tGatekeeping\n\n\tYou aren’t a professional  if you don’t use ${thing}\n\n\tThis is utter tosh. Over my career I’ve heard this dozens of times. In almost all cases the thing that would have made me a professional vanished in a few months. And got replaced by the next new shiny. I know highly professional developers working with woefully outdated tools and technology. Partly because their product demands it. But also because they are effective using it and don’t see any need to learn a different one.\n\n\tAssumed baseline\n\n\tYou forgot to do the most basic things, you are horrible to $people!\n\n\tThis is one I struggle with a lot. Valid HTML, the most basic accessibility features and a readable syntax are second nature to me. Using all these makes sure you don’t block people out, and you make it easier for people to maintain and run with your work. But calling people out publicly for basic mistakes isn’t helpful at all. This is a pattern you see a lot in social media. Almost every positive post will have someone find a flaw in it that could offend a certain group. Pointing this out may be important, but it is also a major bummer.\n\n\tFear mongering\n\n\tThese are the only skills employers are looking for!\n\n\tWhat engineering managers want from a new hire and what ends up in job ads differs a lot. This is a problem we need to deal with in our market. In almost any job I started in I had half the skills listed in the job description. It is never one killer technical skill that will make you stand out. It is how good you are in taking on new challenges and integrate into existing structures and needs. Companies don’t need rockstars, they need people who can integrate into a well-working system. That we list a plethora of skills that are hot right now in job ads is annoying.\n\n\tWisdom of the ancients\n\n\tThis never worked before and will fail now!\n\n\tThis ties in with my “Shut up old man” post and is a real problem. The longer you work in development, the more tainted you get. This slows down innovation and frustrates fresh, excited people around you. One big step towards becoming a tech lead is to use your experience to help people grow. Not to let your horrible memories taint possible great new things to come. Enthusiasm is never a bad thing when it is being channelled into useful actions. Often things that were impossible for me to achieve are no issue for new developers in an evolved environment.\n\n\tMy pet setup\n\n\tWhy don’t you use alpenhorn.js like real professionals?\n\n\tI keep encountering this as comments from people asking to contribute to a project. It is reverse gatekeeping, telling me to earn their work by subscribing to their idea of a perfect setup. Even when the project in question is a decade old and has thousands of contributors. It is pure hubris to demand the product to change. A better way is to point out what benefits it would bring to reconsider a new architecture. That way you’ll learn soon why it isn’t that easy. For most projects, there is never any time for re-architecture, no matter how messed up they are. It is tricky and scary to replace an aircraft engine mid-flight.\n\n\tCopying the big players\n\n\t“This is used to build $bigproduct, so it will be even better for ours”\n\n\tThis fallacy is rampant. It is annoying how many projects are huge because they started with a “big player” bootstrap. Frameworks and libraries are great to get a project off the ground fast. They are also vital for companies with huge projects and hundreds of developers. So, if you want to create something quick and you know you will re-write it soon anyways, fine. If you think that using the products the big players use makes your product scale and grow as fast, good luck. Fact is, you hardly will ever build anything from scratch when a company hires you. Companies have budgeted training on the job to get people proficient in the tools they use. The idea of publishing these platforms to the world is to cut down the amount of training for new hires. Not to enable lots of competitors to work as efficiently.\n\n\tCoping mechanisms\n\n\tIn addition to what to avoid, it might also be good to talk about a few coping mechanism to avoid stress and anxiety about falling behind as a developer. So, here goes.\n\n\tExperimental features are important, but they should be treated as such.\n\n\tOne big mistake we make is that we want to use experimental features of the web platform immediately. This isn’t what an experiment is about. It is about people trying the new thing and giving feedback if it is good enough. Far too many libraries, polyfills and well-intentioned ideas to make tomorrow’s tech usable today are now digital landfill of the web. An experimental feature may be tomorrow’s tech, but it also might have to go back to the drawing board. Being an expert in something that is half baked is quite an investment you may not have to make.\n\n\tWhat is important for your product is defined by your audience, not you.\n\n\tIt is frustrating to not be able to play with the newest and coolest all the time. As a developer, though, your job is not to make yourself happy. Your job is to give the users of your product the best experience. Keep the product performing well, not block out anyone because of their setup or abilities. And keep the product secure. If you build a working product that does this, you’re already a kick-ass developer in my book. This is enough to cover and the technology stack to do that is often governed by the needs of your users.\n\n\tIf things sound too good to be true and fix all problems magically, they are too good to be true.\n\n\tDon’t fall for false promises – there’s always a catch that is well disguised in good marketing.\n\n\tRemember that every video, every post and every talk has an agenda.\n\n\tEven this one. I kind of wrote this for myself, to calm myself down. If you watch, read or listen to something that makes you feel like you are missing out, check who delivered it. In 99% of the cases you’ll find there is some product or service involved. Or, it may be the “subscribe now for more” to make you give them more clicks.\n\n\tAggressive feedback is often there to cover up feelings of inadequacy in the person who gives it (still, hard to cope with).\n\n\tThere is a lot of anger in technical online discussions and comments. Over the years I found that the loudest and most aggressive people aren’t out to get me. They are out to get what I represent to them. They want to be the people who are considered to be the movers and shakers. Anyone disagreeing or trying to calm things down are in their way to greatness. It is tough to not take this personal, but it also means you feed energy into a lost or misguided cause. Much like you stop a dog from barking by showing less interest and radiating calm, you don’t get anything from shouting back.\n\n\tCount to 10, breathe in, breathe out, dare to think slower…\n\n\tFast thinking is a thing we cherish. We love people that come up with brainy sounding quick solutions and “think on their feet”. It makes us feel like innovators and driving the agenda. The issue with it is that if all thinking is fast, a lot of opportunities to create great things fall by the wayside. The first thing that comes into your head may sound obvious, but there is a lot of good in reflecting the obvious, too. Also, not every discussion is worth plunging into and the most heated ones often aren’t at all.\n\n\tGood ideas to calm things down\n\n\t\n\n\tOne thing to get less noise is to stop adding to it. By avoiding the earlier mentioned destructive pattern we call can help. Another thing that is easy to do is not to post or to answer when you think you need to. It is amazing how much less stressful your social media feed gets when you don’t add to it all the time.\n\n\tOne other thing that works wonders is to do something instead of telling someone to do it.\n\n\tThe other day was VS Code day and the five minute “create your own web resume” presentation by Ornella Altunyan blew me away. In it, Ornella shows how to build a web resume in the browser without installing anything on your computer.\n\n\t\n\n\tThe HTML and CSS used in that demo triggered my “wisdom of the ancients” antipattern. A few important things were missing and it was tempting to point those out.\n\n\tBut instead of doing that, I checked if the code is available for contribution, and it is. So I forked the code, played with it, fixed the issues that ailed me and created a pull request. In this one I explained why I consider these changes important and that’s that.\n\n\t\n\n\tAs we work in the same place, I also pinged the author and thanked for a great presentation. I learned that my changes and explanations were highly appreciated. I also learned that integrating them might take some time. The code is part of a workshop and a learning module and these materials need to get adjusted accordingly.\n\n\tExcellent, isn’t it? I got to calm down by fixing some things and playing with some new technology. The author has code to merge with explanations and I learned why my contribution might take some time to show up. No unknowns, no pushing and complaining. This is fun.\n\n\tIn general, it is temping to complain in public but it isn’t as useful as we think. All it does is create noise and give people extra work. So, before we go to Twitter to right some wrong in a piece of code, it might be a good idea to do this instead.\n\n\t\n\t\tCheck for official feedback channels and use those (bug trackers, in-built feedback items, code repositories)\n\t\tSearch if the problem is already reported and upvote/comment instead of creating a duplicate – the more people report on the same thing with more detail, the easier it gets to fix\n\t\tIf you are reporting a problem, create a good explanation how to replicate your issue.\n\t\tInclude your setup, often some third party influence can cause the issue.\n\t\tOften you find by re-doing what you did and documenting it, you find an own mistake and learn that the product isn’t broken at all.\n\t\n\n\tI’m forcing myself to be calmer, to care less about things being “obviously wrong” and to listen more intently. And to block out unnecessary noise. If you do the same, you’ll find being a developer in today’s world is pretty darn amazing and that what you know is already a lot – and maybe enough.",
      "date_published": "2022-03-14T20:53:09.000Z",
      "date_modified": "2022-03-14T20:53:09.000Z",
      "_plugin": {
        "pageFilename": "af9f613fcfbe07ed4325368b32748cffba65b253dc35391363d593f0e7904b56.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7131",
      "url": "https://christianheilmann.com/2022/03/09/want-to-improve-developer-tools-in-microsoft-edge-file-an-issue-on-github/",
      "title": "Want to improve Developer Tools in Microsoft Edge? File an issue on Github",
      "summary": "Today we released a new GitHub repository for the Developer Tools in Microsoft Edge where you can file issues about problems, bugs and feattures you would like to see. You can also view the list of existing issues and add your comments. There’s an official blog post on the Microsoft Edge blog but here’s why […]",
      "content_html": "<p>Today we released a new <a href=\"https://github.com/MicrosoftEdge/DevTools\" title=\"\">GitHub repository for the Developer Tools in Microsoft Edge</a> where you can <a href=\"https://github.com/MicrosoftEdge/DevTools/issues/new/choose\" title=\"\">file issues</a> about problems, bugs and feattures you would like to see. You can also <a href=\"https://github.com/MicrosoftEdge/DevTools/issues/\" title=\"\">view the list of existing issues</a> and add your comments.</p>\n\n\t<p><a href=\"https://github.com/MicrosoftEdge/DevTools\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/03/edge-devtools-1024x734.png\" alt=\"\" width=\"1024\" height=\"734\" class=\"alignnone size-large wp-image-7132\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/03/edge-devtools-1024x734.png 1024w, https://christianheilmann.com/wp-content/uploads/2022/03/edge-devtools-300x215.png 300w, https://christianheilmann.com/wp-content/uploads/2022/03/edge-devtools-768x551.png 768w, https://christianheilmann.com/wp-content/uploads/2022/03/edge-devtools.png 1209w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></p>\n\n\t<p>There&#8217;s an official blog post on the <a href=\"https://blogs.windows.com/msedgedev/2022/03/09/improving-devtools-together-announcing-the-new-edge-devtools-feedback-repository/\" title=\"\">Microsoft Edge blog</a> but here&#8217;s why I am excited about this.</p>\n\n\t<ul>\n\t\t<li>When I joined Microsoft, I really wanted to keep everything I do open source and allow people to contribute. This is a big step to make the Developer Tools more open.</li>\n\t\t<li>I spend about an hour a day triaging the feedback we get in Developer Tools via the feedback icon in the tools themselves. Of the ~400 items I get in my shift, about 5-10 are on topic. Others are about the browser all-up, or just about all kind of things people want to do on the web. This should focus it much better. We still keep the other feedback channels open, but I do like the idea to talk to developers first and foremost when it comes to Developer Tools.</li>\n\t</ul>",
      "content_text": "Today we released a new GitHub repository for the Developer Tools in Microsoft Edge where you can file issues about problems, bugs and feattures you would like to see. You can also view the list of existing issues and add your comments.\n\n\t\n\n\tThere’s an official blog post on the Microsoft Edge blog but here’s why I am excited about this.\n\n\t\n\t\tWhen I joined Microsoft, I really wanted to keep everything I do open source and allow people to contribute. This is a big step to make the Developer Tools more open.\n\t\tI spend about an hour a day triaging the feedback we get in Developer Tools via the feedback icon in the tools themselves. Of the ~400 items I get in my shift, about 5-10 are on topic. Others are about the browser all-up, or just about all kind of things people want to do on the web. This should focus it much better. We still keep the other feedback channels open, but I do like the idea to talk to developers first and foremost when it comes to Developer Tools.\n\t",
      "date_published": "2022-03-09T19:31:24.000Z",
      "date_modified": "2022-03-09T19:31:24.000Z",
      "_plugin": {
        "pageFilename": "be4f007d70ff38ab52bf18ed3eee0d9f5feca18f0330bd4e5034c8b3aea78df0.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7124",
      "url": "https://christianheilmann.com/2022/02/10/showing-different-titles-depending-if-the-tab-is-active-or-not/",
      "title": "Showing different titles depending if the tab is active or not",
      "summary": "I just encountered a sneaky thing I had not seen, although it probably worked in 1999 already. A web site was showing a different title on the tab, depending on it being active or not. The whole trick is to use the blur and focus event handlers on the window to change the title. window.onblur […]",
      "content_html": "<p>I just encountered a sneaky thing I had not seen, although it probably worked in 1999 already. A web site was showing a different title on the tab, depending on it being active or not.</p>\n\n\t<p><a href=\"https://christianheilmann.com/wp-content/uploads/2022/02/title-trick.gif\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/02/title-trick.gif\" alt=\"Different titles showing on active and inactive tab\" width=\"828\" height=\"428\" class=\"alignnone size-full wp-image-7125\" /></a></p>\n\n\t<p>The whole trick is to use the blur and focus event handlers on the window to change the title.</p>\n\n\t<p><pre lang=\"javascript\"><br />\nwindow.onblur = function() {<br />\ndocument.title = &#8216;Please come back!&#8217;;<br />\n}</p>\n\t<p>window.onfocus = function() {<br />\ndocument.title = &#8216;You have 6 items&#8217;;<br />\n}</p>\n\t<p></pre></p>\n\n\t<p>You could also change the Favicon that way. Maybe this is a common practice and it feels pretty spammy, but there may be some good use cases for it, too.</p>\n\n\t<p>If you don&#8217;t want to clobber other events, it is better to use `addEventListener`:</p>\n\n\t<p><pre lang=\"javascript\"><br />\nlet activeTitle = &#8216;You have 6 items&#8217;;<br />\nlet inactiveTitle = &#8216;Please come back&#8217;;<br />\ndocument.title = activeTitle;<br />\nwindow.addEventListener(&#8216;blur&#8217;, e => {<br />\ndocument.title = inactiveTitle;<br />\n});<br />\nwindow.addEventListener(&#8216;focus&#8217;, e => {<br />\ndocument.title = activeTitle;<br />\n});<br />\n</pre></p>",
      "content_text": "I just encountered a sneaky thing I had not seen, although it probably worked in 1999 already. A web site was showing a different title on the tab, depending on it being active or not.\n\n\t\n\n\tThe whole trick is to use the blur and focus event handlers on the window to change the title.\n\n\t\nwindow.onblur = function() {\ndocument.title = ‘Please come back!’;\n}\n\twindow.onfocus = function() {\ndocument.title = ‘You have 6 items’;\n}\n\t\n\n\tYou could also change the Favicon that way. Maybe this is a common practice and it feels pretty spammy, but there may be some good use cases for it, too.\n\n\tIf you don’t want to clobber other events, it is better to use `addEventListener`:\n\n\t\nlet activeTitle = ‘You have 6 items’;\nlet inactiveTitle = ‘Please come back’;\ndocument.title = activeTitle;\nwindow.addEventListener(‘blur’, e => {\ndocument.title = inactiveTitle;\n});\nwindow.addEventListener(‘focus’, e => {\ndocument.title = activeTitle;\n});\n",
      "date_published": "2022-02-10T18:49:56.000Z",
      "date_modified": "2022-02-10T18:49:56.000Z",
      "_plugin": {
        "pageFilename": "8bac1cb4654a8b8149ff7c7080e7c98382e62460362d03eb8fa5940ff91056fd.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7114",
      "url": "https://christianheilmann.com/2022/02/01/sending-email-notifications-from-github-organisations-to-different-emails/",
      "title": "Sending email notifications from GitHub organisations to different emails",
      "summary": "I’m part of a few organisations on GitHub and had one email address for notifications. This annoyed me as I didn’t want company notifications to my personal account as I couldn’t answer these. As it turns out, you can set up several email addresses in your GitHub account. In settings, go to Access > Emails […]",
      "content_html": "<p>I&#8217;m part of a few organisations on GitHub and had one email address for notifications. This annoyed me as I didn&#8217;t want company notifications to my personal account  as I couldn&#8217;t answer these. As it turns out, you can set up several email addresses in your GitHub account. In settings, go to Access > Emails and you can add more than one address.</p>\n\n\t<p><a href=\"https://christianheilmann.com/wp-content/uploads/2022/02/github-emails.png\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/02/github-emails-1024x600.png\" alt=\"The GitHub settings screen showing my emails and allowing me to add more\" width=\"1024\" height=\"600\" class=\"alignnone size-large wp-image-7115\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/02/github-emails-1024x600.png 1024w, https://christianheilmann.com/wp-content/uploads/2022/02/github-emails-300x176.png 300w, https://christianheilmann.com/wp-content/uploads/2022/02/github-emails-768x450.png 768w, https://christianheilmann.com/wp-content/uploads/2022/02/github-emails-1536x900.png 1536w, https://christianheilmann.com/wp-content/uploads/2022/02/github-emails.png 1932w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></p>\n\n\t<p>If you then go to the `Notifications` settings of GitHub and scroll all the way down to `Custom Routing`, you can define which organisation should send notifications to which email account.</p>\n\n\t<p><a href=\"https://christianheilmann.com/wp-content/uploads/2022/02/github-routing-1.png\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/02/github-routing-1-1024x960.png\" alt=\"The Custom Routing screen of Github\" width=\"1024\" height=\"960\" class=\"alignnone size-large wp-image-7118\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/02/github-routing-1-1024x960.png 1024w, https://christianheilmann.com/wp-content/uploads/2022/02/github-routing-1-300x281.png 300w, https://christianheilmann.com/wp-content/uploads/2022/02/github-routing-1-768x720.png 768w, https://christianheilmann.com/wp-content/uploads/2022/02/github-routing-1-1536x1440.png 1536w, https://christianheilmann.com/wp-content/uploads/2022/02/github-routing-1.png 1892w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></p>\n\n\t<p>Thanks to my colleague Anton Ross for showing me this!</p>",
      "content_text": "I’m part of a few organisations on GitHub and had one email address for notifications. This annoyed me as I didn’t want company notifications to my personal account  as I couldn’t answer these. As it turns out, you can set up several email addresses in your GitHub account. In settings, go to Access > Emails and you can add more than one address.\n\n\t\n\n\tIf you then go to the `Notifications` settings of GitHub and scroll all the way down to `Custom Routing`, you can define which organisation should send notifications to which email account.\n\n\t\n\n\tThanks to my colleague Anton Ross for showing me this!",
      "date_published": "2022-01-31T23:37:43.000Z",
      "date_modified": "2022-01-31T23:37:43.000Z",
      "_plugin": {
        "pageFilename": "9cc0a76c50803f19f52744e5b1f9a1d4c54fdd15bf0a93690a892fd3d77fd73d.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7095",
      "url": "https://christianheilmann.com/2022/01/26/a-launch-json-setting-for-end-to-end-web-development/",
      "title": "A launch.json setting for end-to-end web development",
      "summary": "When I start a new project these days I create the following launch.json file and put in in a .vscode folder on the the root of my project. This turns Visual Studio Code into an environment that gives me everything I need to build a web product without ever leaving it. If you want to […]",
      "content_html": "<p>When I start a new project these days I create the following launch.json file and put in in a .vscode folder on the the root of my project.</p>\n\n\t<p><a href=\"https://christianheilmann.com/wp-content/uploads/2022/01/carbon-2.png\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/01/carbon-2-1024x567.png\" alt=\"Launch.json file telling Visual Studio Code to launch an instance for Microsoft Edge against localhost\" width=\"1024\" height=\"567\" class=\"alignnone size-large wp-image-7100\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/01/carbon-2-1024x567.png 1024w, https://christianheilmann.com/wp-content/uploads/2022/01/carbon-2-300x166.png 300w, https://christianheilmann.com/wp-content/uploads/2022/01/carbon-2-768x425.png 768w, https://christianheilmann.com/wp-content/uploads/2022/01/carbon-2.png 1360w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></p>\n\n\t<p>This turns Visual Studio Code into an environment that gives me everything I need to build a web product without ever leaving it. If you want to try it out, you can  use my <a href=\"https://github.com/codepo8/simple-to-do\" title=\"\">bare bones vanilla <span class=\"caps\">JS </span>ToDo app</a> as an example, which already has the correct launch.json.</p>\n\n\t<h2>Step 1: Using the built-in Terminal</h2>\n\n\t<p>Visual Studio Code has a built-in Terminal that allows you to start a server. You can also run build scripts or do version control here. Although the in-built version control is probably more convenient.</p>\n\n\t<p><a href=\"https://christianheilmann.com/wp-content/uploads/2022/01/walkthrough-terminal.gif\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/01/walkthrough-terminal.gif\" alt=\"Starting a server in the VS Code Terminal\" width=\"1024\" height=\"576\" class=\"alignnone size-large wp-image-7103\" /></a></p>\n\n\t<h2>Step 2: Starting a browser debug session</h2>\n\n\t<p>Activating Run and Debug and starting the debugging session opens a dedicated browser instance for this project. This means you get a pristine, clean browser every time. You can of course also go to localhost:8080 in any other browser if you need to rely on extensions or login data. You can see that the debug session is running as the debug toolbar appears and the lower border of the editor changes colour. In my case, from blue to orange.</p>\n\n\t<p><a href=\"https://christianheilmann.com/wp-content/uploads/2022/01/walkthrough-start-debug.gif\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/01/walkthrough-start-debug.gif\" alt=\"\" width=\"1024\" height=\"576\" class=\"alignnone size-large wp-image-7105\" /></a></p>\n\n\t<h2>Step 3: Opening the developer tools</h2>\n\n\t<p>Activating the Developer Tools icon opens the browser developer tools inside Visual Studio Code.</p>\n\n\t<p><a href=\"https://christianheilmann.com/wp-content/uploads/2022/01/devtools-icon-in-debug-toolbar.png\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/01/devtools-icon-in-debug-toolbar.png\" alt=\"Developer Tools icon in debug toolbar\" width=\"539\" height=\"166\" class=\"alignnone size-full wp-image-7108\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/01/devtools-icon-in-debug-toolbar.png 539w, https://christianheilmann.com/wp-content/uploads/2022/01/devtools-icon-in-debug-toolbar-300x92.png 300w\" sizes=\"(max-width: 539px) 100vw, 539px\" /></a></p>\n\n\t<p>You can now do everything you can do in the browser, but without leaving the context of the editor. This allows you to do the changes in your <span class=\"caps\">DOM</span> and <span class=\"caps\">CSS</span> using the developer tools next to the source code.</p>\n\n\t<p><a href=\"https://christianheilmann.com/wp-content/uploads/2022/01/walkthrough-start-devtools.gif\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/01/walkthrough-start-devtools.gif\" alt=\"Starting the developer tools from the debug bar\" width=\"1024\" height=\"576\" class=\"alignnone size-large wp-image-7107\" /></a></p>\n\n\t<h2>Step 4: Opening the screencast</h2>\n\n\t<p>Activating the screencast button gives you a new panel inside Visual Studio Code showing the browser rendering. This is an interactive browser window and you can move the screencast tab anywhere you like in Visual Studio Code. You can also emulate different mobile environments and the browser will set the correct User Agent and simulate touch interfaces.</p>\n\n\t<p><iframe loading=\"lazy\" title=\"End to end web development workflow in VS Code - Screencast features\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/6ysRmjffGBs?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n\n\t<h2>Step 5: Using the features</h2>\n\n\t<p>Once this is all running, you have all the features I need to build and debug my web project. you get:</p>\n\n\t<h3>Full two-way interaction between the developer tools and the source code.</h3>\n\n\t<p>If you change the <span class=\"caps\">CSS</span> of an element, <span class=\"caps\">VS </span>Code will jump to the correct file in your project and replicate the changes there. It will not automatically save the file. This is to prevent automatic triggering of build scripts and you probably want to try a lot of changes before you reach your desired outcome. The changes do show up live in the screencast though.</p>\n\n\t<p><iframe loading=\"lazy\" title=\"End to end web development workflow in VS Code - CSS two way editing\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/0zO1OJ4Yt0s?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n\n\t<h3>Inline linting of your code.</h3>\n\n\t<p>If there is an issue with your code, Visual Studio code will add a squiggly underline to it. You can then roll over that code and get information why it is a problem and how to fix it. If you write code, it gets automatically checked and you get a message that something is wrong and how to fix it. You can also use the Problems panel to see all the problems in the project.</p>\n\n\t<p><iframe loading=\"lazy\" title=\"End to end web development workflow in VS Code - Live inline linting\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/SxykmuOoarg?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n\n\t<h3>Browser Console in Visual Studio Code</h3>\n\n\t<p>The debug console in Visual Studio Code is now your browser developer tools console. You can see your console.log() messages there. You have full access to the window object and you can use the <span class=\"caps\">DOM</span> convenience methods and shortcuts.</p>\n\n\t<p><iframe loading=\"lazy\" title=\"End to end web development workflow in VS Code - Browser Console\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/d4695AtDtZQ?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n\n\t<h3>Breakpoint Debugging</h3>\n\n\t<p>As you are in a debug session you have full breakpoint debugging. You can set breakpoints, interact with the project and you can go through your script step by step. You get inline information as you step through it and the execution halts while you analyse what&#8217;s going on.</p>\n\n\t<p><iframe loading=\"lazy\" title=\"End to end web development workflow in VS Code - Breakpoint Debugging\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/j5wPo6TubaY?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n\n\t<h3>Closing the debug session closes the browser</h3>\n\n\t<p>Once you are done, you can hit the stop button in the debug bar and everything goes back to square one. No need to close browser windows or developer tools sessions.</p>\n\n\t<p><a href=\"https://christianheilmann.com/wp-content/uploads/2022/01/walkthrough-close.gif\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/01/walkthrough-close.gif\" alt=\"Closing the debug session also closes the browser window and the developer tools\" width=\"1024\" height=\"576\" class=\"alignnone size-large wp-image-7110\" /></a></p>\n\n\t<h2>Anything missing?</h2>\n\n\t<p>We&#8217;re working on a few more improvements for this that will go live in the next few versions. Specifically we&#8217;re working on:</p>\n\n\t<ul>\n\t\t<li>Sourcemap support to debug Sass/Less files</li>\n\t\t<li>Filtering options for issues reporting</li>\n\t\t<li>Automated fix suggestions</li>\n\t\t<li>Integration into Visual Studio</li>\n\t</ul>\n\n\t<p>If you have any good ideas, feel free to reach out to me or <a href=\"https://github.com/microsoft/vscode-edge-devtools/issues\" title=\"\">file an issue</a> on the official GitHub repository.</p>",
      "content_text": "When I start a new project these days I create the following launch.json file and put in in a .vscode folder on the the root of my project.\n\n\t\n\n\tThis turns Visual Studio Code into an environment that gives me everything I need to build a web product without ever leaving it. If you want to try it out, you can  use my bare bones vanilla JS ToDo app as an example, which already has the correct launch.json.\n\n\tStep 1: Using the built-in Terminal\n\n\tVisual Studio Code has a built-in Terminal that allows you to start a server. You can also run build scripts or do version control here. Although the in-built version control is probably more convenient.\n\n\t\n\n\tStep 2: Starting a browser debug session\n\n\tActivating Run and Debug and starting the debugging session opens a dedicated browser instance for this project. This means you get a pristine, clean browser every time. You can of course also go to localhost:8080 in any other browser if you need to rely on extensions or login data. You can see that the debug session is running as the debug toolbar appears and the lower border of the editor changes colour. In my case, from blue to orange.\n\n\t\n\n\tStep 3: Opening the developer tools\n\n\tActivating the Developer Tools icon opens the browser developer tools inside Visual Studio Code.\n\n\t\n\n\tYou can now do everything you can do in the browser, but without leaving the context of the editor. This allows you to do the changes in your DOM and CSS using the developer tools next to the source code.\n\n\t\n\n\tStep 4: Opening the screencast\n\n\tActivating the screencast button gives you a new panel inside Visual Studio Code showing the browser rendering. This is an interactive browser window and you can move the screencast tab anywhere you like in Visual Studio Code. You can also emulate different mobile environments and the browser will set the correct User Agent and simulate touch interfaces.\n\n\t\n\n\tStep 5: Using the features\n\n\tOnce this is all running, you have all the features I need to build and debug my web project. you get:\n\n\tFull two-way interaction between the developer tools and the source code.\n\n\tIf you change the CSS of an element, VS Code will jump to the correct file in your project and replicate the changes there. It will not automatically save the file. This is to prevent automatic triggering of build scripts and you probably want to try a lot of changes before you reach your desired outcome. The changes do show up live in the screencast though.\n\n\t\n\n\tInline linting of your code.\n\n\tIf there is an issue with your code, Visual Studio code will add a squiggly underline to it. You can then roll over that code and get information why it is a problem and how to fix it. If you write code, it gets automatically checked and you get a message that something is wrong and how to fix it. You can also use the Problems panel to see all the problems in the project.\n\n\t\n\n\tBrowser Console in Visual Studio Code\n\n\tThe debug console in Visual Studio Code is now your browser developer tools console. You can see your console.log() messages there. You have full access to the window object and you can use the DOM convenience methods and shortcuts.\n\n\t\n\n\tBreakpoint Debugging\n\n\tAs you are in a debug session you have full breakpoint debugging. You can set breakpoints, interact with the project and you can go through your script step by step. You get inline information as you step through it and the execution halts while you analyse what’s going on.\n\n\t\n\n\tClosing the debug session closes the browser\n\n\tOnce you are done, you can hit the stop button in the debug bar and everything goes back to square one. No need to close browser windows or developer tools sessions.\n\n\t\n\n\tAnything missing?\n\n\tWe’re working on a few more improvements for this that will go live in the next few versions. Specifically we’re working on:\n\n\t\n\t\tSourcemap support to debug Sass/Less files\n\t\tFiltering options for issues reporting\n\t\tAutomated fix suggestions\n\t\tIntegration into Visual Studio\n\t\n\n\tIf you have any good ideas, feel free to reach out to me or file an issue on the official GitHub repository.",
      "date_published": "2022-01-26T18:10:09.000Z",
      "date_modified": "2022-01-26T18:10:09.000Z",
      "_plugin": {
        "pageFilename": "35c1b7032fd5a622cff6e44c491dcc907ca3b06ca0753c8d1f5268bdba041c01.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7086",
      "url": "https://christianheilmann.com/2022/01/19/ever-wondered-what-a-wordle-social-media-update-sounds-to-screenreader-users/",
      "title": "Ever wondered what a Wordle social media update sounds to screenreader users?",
      "summary": "It’s not pretty. This isn’t a dig at Skoop, he was just first on my timeline with a result when I did some accessibility testing. Screenreaders read out the squares as “black large square”, “green square” and “yellow square”. As a saving grace, they cleverly do group them, so four yellow squares are announces as […]",
      "content_html": "It&#8217;s not pretty. This isn&#8217;t a dig at Skoop, he was just first on my timeline with a result when I did some accessibility testing. Screenreaders read out the squares as &#8220;black large square&#8221;, &#8220;green square&#8221; and &#8220;yellow square&#8221;. As a saving grace, they cleverly do group them, so four yellow squares are announces as [&#8230;]",
      "content_text": "It’s not pretty. This isn’t a dig at Skoop, he was just first on my timeline with a result when I did some accessibility testing. Screenreaders read out the squares as “black large square”, “green square” and “yellow square”. As a saving grace, they cleverly do group them, so four yellow squares are announces as […]",
      "date_published": "2022-01-19T21:44:07.000Z",
      "date_modified": "2022-01-19T21:44:07.000Z",
      "_plugin": {
        "pageFilename": "1e66965a6eff4d5b7476923fee4c1fba9b21ef627620a04fe3291ff30796f10d.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7082",
      "url": "https://christianheilmann.com/2022/01/18/podcast-recording-development-tools-in-the-experts-eye-with-chris-heilmann/",
      "title": "Podcast recording: Development tools in the expert’s eye with Chris Heilmann",
      "summary": "Yesterday I was a guest on the JavaScript Master Podcast by Dariusz Kalbarczyk and we talked a bit more than an hour about my job as a Developer Tools PM, what annoys me the most about the toolintg situation and how the community can help. You can listen to the podcast on anchor.fm or Spotify […]",
      "content_html": "Yesterday I was a guest on the JavaScript Master Podcast by Dariusz Kalbarczyk and we talked a bit more than an hour about my job as a Developer Tools PM, what annoys me the most about the toolintg situation and how the community can help. You can listen to the podcast on anchor.fm or Spotify [&#8230;]",
      "content_text": "Yesterday I was a guest on the JavaScript Master Podcast by Dariusz Kalbarczyk and we talked a bit more than an hour about my job as a Developer Tools PM, what annoys me the most about the toolintg situation and how the community can help. You can listen to the podcast on anchor.fm or Spotify […]",
      "date_published": "2022-01-18T13:10:39.000Z",
      "date_modified": "2022-01-18T13:10:39.000Z",
      "_plugin": {
        "pageFilename": "1dca874b4104ac80087976eada1b2b794c37b8670a340ddf3a8b9ee447539b53.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7077",
      "url": "https://christianheilmann.com/2022/01/13/turning-a-github-page-into-a-progressive-web-app/",
      "title": "Turning a GitHub page into a Progressive Web App",
      "summary": "I just released my dice simulator app and in doing so learned about a few things about turning a GitHub Page into a PWA. To make this easier for subsequent projects, I put together a bare-bones template to turn any GitHub page into a PWA. Nothing in there is sophisticated and all it does is […]",
      "content_html": "I just released my dice simulator app and in doing so learned about a few things about turning a GitHub Page into a PWA. To make this easier for subsequent projects, I put together a bare-bones template to turn any GitHub page into a PWA. Nothing in there is sophisticated and all it does is [&#8230;]",
      "content_text": "I just released my dice simulator app and in doing so learned about a few things about turning a GitHub Page into a PWA. To make this easier for subsequent projects, I put together a bare-bones template to turn any GitHub page into a PWA. Nothing in there is sophisticated and all it does is […]",
      "date_published": "2022-01-13T10:06:14.000Z",
      "date_modified": "2022-01-13T10:06:14.000Z",
      "_plugin": {
        "pageFilename": "f660a6f2cf6a5c89c3e3fc80abfcf66f8672fab95443afe9b632f635a8cabe90.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7071",
      "url": "https://christianheilmann.com/2022/01/11/offline-no-dice/",
      "title": "Offline? No dice!",
      "summary": "A few days ago I was on vacation in a place that had terrible mobile connectivity and whilst it provided WiFi, nothing worked. I even brought my own cables and travel router, but to no avail. This was not only a good opportunity for some “digital detox”, but it also showed me once again that […]",
      "content_html": "A few days ago I was on vacation in a place that had terrible mobile connectivity and whilst it provided WiFi, nothing worked. I even brought my own cables and travel router, but to no avail. This was not only a good opportunity for some &#8220;digital detox&#8221;, but it also showed me once again that [&#8230;]",
      "content_text": "A few days ago I was on vacation in a place that had terrible mobile connectivity and whilst it provided WiFi, nothing worked. I even brought my own cables and travel router, but to no avail. This was not only a good opportunity for some “digital detox”, but it also showed me once again that […]",
      "date_published": "2022-01-11T21:30:12.000Z",
      "date_modified": "2022-01-11T21:30:12.000Z",
      "_plugin": {
        "pageFilename": "6fab15c8bd54dcff82349b324d0a6bd723e5299fef5e22c0c61c1af7881445d0.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7063",
      "url": "https://christianheilmann.com/2021/12/20/the-web-starts-on-page-four/",
      "title": "The web starts on page four",
      "summary": "After 25 years of working for, on and with the web, I am looking at the current state of it and I don’t like it. There is still a lot of beautiful, creative and amazing work out there, but on the whole, we lost an amazing opportunity. In its place we have a consumption machine […]",
      "content_html": "After 25 years of working for, on and with the web, I am looking at the current state of it and I don&#8217;t like it. There is still a lot of beautiful, creative and amazing work out there, but on the whole, we lost an amazing opportunity. In its place we have a consumption machine [&#8230;]",
      "content_text": "After 25 years of working for, on and with the web, I am looking at the current state of it and I don’t like it. There is still a lot of beautiful, creative and amazing work out there, but on the whole, we lost an amazing opportunity. In its place we have a consumption machine […]",
      "date_published": "2021-12-20T18:06:05.000Z",
      "date_modified": "2021-12-20T18:06:05.000Z",
      "_plugin": {
        "pageFilename": "af8bdf23990863e179438f0cd821de3ec553499cc41e6e39ad159e64b48a9e05.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7045",
      "url": "https://christianheilmann.com/2021/11/18/lets-not-send-developers-to-the-accessibility-tree-tool/",
      "title": "Let’s not send developers to the accessibility tree tool",
      "summary": "Testing for accessibility is an incredibly important part of your development process. Products that don’t block out users because of easy to avoid issues have more success. And the longer you wait with fixing accessibility problems, the harder it gets. That’s why it is annoying when it is hard to find out about accessibility problems. […]",
      "content_html": "Testing for accessibility is an incredibly important part of your development process. Products that don&#8217;t block out users because of easy to avoid issues have more success. And the longer you wait with fixing accessibility problems, the harder it gets. That&#8217;s why it is annoying when it is hard to find out about accessibility problems. [&#8230;]",
      "content_text": "Testing for accessibility is an incredibly important part of your development process. Products that don’t block out users because of easy to avoid issues have more success. And the longer you wait with fixing accessibility problems, the harder it gets. That’s why it is annoying when it is hard to find out about accessibility problems. […]",
      "date_published": "2021-11-18T17:14:58.000Z",
      "date_modified": "2021-11-18T17:14:58.000Z",
      "_plugin": {
        "pageFilename": "f23dc560f7184fab96d57523378f610f7afaaa091a51bb373ceee790d5570bea.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=7038",
      "url": "https://christianheilmann.com/2021/11/07/quick-browser-developer-tools-tip-define-and-test-interaction-states-in-css-using-state-simulation/",
      "title": "Quick browser Developer Tools tip: define and test interaction states in CSS using state simulation",
      "summary": "Interfaces on the web have to be accessible independent of input device. In addition to using the right HTML to make it possible to activate functionality with mouse, keyboard, voice activation or any of the possible ways it is also important to have a visual indicator which element is currently active. This is why we […]",
      "content_html": "Interfaces on the web have to be accessible independent of input device. In addition to using the right HTML to make it possible to activate functionality with mouse, keyboard, voice activation or any of the possible ways it is also important to have a visual indicator which element is currently active. This is why we [&#8230;]",
      "content_text": "Interfaces on the web have to be accessible independent of input device. In addition to using the right HTML to make it possible to activate functionality with mouse, keyboard, voice activation or any of the possible ways it is also important to have a visual indicator which element is currently active. This is why we […]",
      "date_published": "2021-11-07T15:58:36.000Z",
      "date_modified": "2021-11-07T15:58:36.000Z",
      "_plugin": {
        "pageFilename": "d5db1676b88300c3755b2eff03015e7972367b10dab5aaa6ce2126c600f3eab2.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=6999",
      "url": "https://christianheilmann.com/2021/11/01/developer-tools-secrets-that-shouldnt-be-secrets/",
      "title": "Developer Tools secrets that shouldn’t be secrets",
      "summary": "Update: As this is blowing up on Hackernews I added information to each of the tips in which environment they are supported in parenthesis after each heading. When I state “Chromium browsers”, this refers to all browsers that use the Chromium core and also feature all the Developer Tools. This is Chrome, Microsoft Edge, Brave […]",
      "content_html": "Update: As this is blowing up on Hackernews I added information to each of the tips in which environment they are supported in parenthesis after each heading. When I state &#8220;Chromium browsers&#8221;, this refers to all browsers that use the Chromium core and also feature all the Developer Tools. This is Chrome, Microsoft Edge, Brave [&#8230;]",
      "content_text": "Update: As this is blowing up on Hackernews I added information to each of the tips in which environment they are supported in parenthesis after each heading. When I state “Chromium browsers”, this refers to all browsers that use the Chromium core and also feature all the Developer Tools. This is Chrome, Microsoft Edge, Brave […]",
      "date_published": "2021-11-01T14:21:08.000Z",
      "date_modified": "2021-11-01T14:21:08.000Z",
      "_plugin": {
        "pageFilename": "207f1e30f11d9508067c8683732ccc53da50faa5230f47b042e1bf15df13e7df.html"
      }
    },
    {
      "id": "https://christianheilmann.com/?p=6988",
      "url": "https://christianheilmann.com/2021/10/28/edge-devtools-for-visual-studio-code-1-4-0-improved-screencasting-device-emulation-and-live-inline-issue-reporting/",
      "title": "Edge DevTools for Visual Studio Code 1.4.0 – Improved Screencasting, Device Emulation and live, inline issue reporting",
      "summary": "The 1.4.0 release of the Microsoft Tools for Visual Studio Code brings a few highly requested features. We improved the screencasting feature, added device emulation and live issue reporting in your source code. You can check the 3 minute highlight reel here . Improved screencasting In previous versions of the extension, the screencast was a […]",
      "content_html": "The 1.4.0 release of the Microsoft Tools for Visual Studio Code brings a few highly requested features. We improved the screencasting feature, added device emulation and live issue reporting in your source code. You can check the 3 minute highlight reel here . Improved screencasting In previous versions of the extension, the screencast was a [&#8230;]",
      "content_text": "The 1.4.0 release of the Microsoft Tools for Visual Studio Code brings a few highly requested features. We improved the screencasting feature, added device emulation and live issue reporting in your source code. You can check the 3 minute highlight reel here . Improved screencasting In previous versions of the extension, the screencast was a […]",
      "date_published": "2021-10-28T06:02:36.000Z",
      "date_modified": "2021-10-28T06:02:36.000Z",
      "_plugin": {
        "pageFilename": "53860d9175a471665a35a537876d073587c5ec45250150e950ba2105f2024173.html"
      }
    }
  ],
  "_plugin": {
    "rawFeed": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\"\n\txmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n\txmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n\txmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n\txmlns:atom=\"http://www.w3.org/2005/Atom\"\n\txmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n\txmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\"\n\t>\n\n<channel>\n\t<title>Christian Heilmann</title>\n\t<atom:link href=\"https://christianheilmann.com/feed/\" rel=\"self\" type=\"application/rss+xml\" />\n\t<link>https://christianheilmann.com</link>\n\t<description>For a better web with more professional jobs - can talk, will travel</description>\n\t<lastBuildDate>Fri, 25 Mar 2022 08:20:03 +0000</lastBuildDate>\n\t<language>en-US</language>\n\t<sy:updatePeriod>\n\thourly\t</sy:updatePeriod>\n\t<sy:updateFrequency>\n\t1\t</sy:updateFrequency>\n\t<generator>https://wordpress.org/?v=5.9.2</generator>\n\t<item>\n\t\t<title>Quick survey: help improve the simulation options of browser developer tools</title>\n\t\t<link>https://christianheilmann.com/2022/03/25/quick-survey-help-improve-the-simulation-options-of-browser-developer-tools/</link>\n\t\t\t\t\t<comments>https://christianheilmann.com/2022/03/25/quick-survey-help-improve-the-simulation-options-of-browser-developer-tools/#respond</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Heilmann]]></dc:creator>\n\t\t<pubDate>Fri, 25 Mar 2022 08:20:03 +0000</pubDate>\n\t\t\t\t<category><![CDATA[General]]></category>\n\t\t<guid isPermaLink=\"false\">https://christianheilmann.com/?p=7180</guid>\n\n\t\t\t\t\t<description><![CDATA[Please help us to improve the emulation features of browser developer tools by filling out a two questions survey. Background We&#8217;re currently working on improving the findability of emulation features in the Microsoft Edge developer tools. Did you know that you can emulate different vision deficiences, dark and light schemes, forced colours and print layout [&#8230;]]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\t<p>Please help us to <a href=\"https://forms.office.com/r/b86Sp3PBA4\" title=\"\">improve the emulation features of browser developer tools by filling out a two questions survey</a>.</p>\n\n\t<h1>Background</h1>\n\n\t<p>We&#8217;re currently working on improving the findability of emulation features in the Microsoft Edge developer tools. Did you know that you can <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/accessibility/emulate-vision-deficiencies\" title=\"\">emulate different vision deficiences</a>, <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/accessibility/preferred-color-scheme-simulation\" title=\"\">dark and light schemes</a>, <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/whats-new/2022/02/devtools\" title=\"\">forced colours</a> and <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/css/print-preview\" title=\"\">print layout</a> amongst other things?</p>\n\n\t<p>If you don&#8217;t, then the problem is that they are hard to find and hidden in the `Rendering` menu.</p>\n\n\t<p><img alt=\"Emulation options in the rendering tool\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzig91359bgkegq6ohua.png\"></p>\n\n\t<p>To improve this, we are working on a new emulation bar inside the screencast of the <a href=\"https://aka.ms/devtools-for-edge\" title=\"\">Edge DevTools for Visual Studio Code</a> as a testing ground to change it in the main browser.</p>\n\n\t<p>We now need to know <a href=\"https://forms.office.com/r/b86Sp3PBA4\" title=\"\">what you&#8217;d prefer to see</a>:</p>\n\n\t<h2><span class=\"caps\">CSS</span> features emulation</h2>\n\n\t<p>A prioritised set of emulation features:</p>\n\n\t<p><img alt=\"Option showing only a few\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spjwnh41prtv76xqa46z.png\"></p>\n\n\t<p>All options as a flat list:</p>\n\n\t<p><img alt=\"Long list of emulations\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzo74bvxbggetmmeybqp.png\"></p>\n\n\t<p>A nested list:</p>\n\n\t<p><img alt=\"Nested menus to choose CSS emulation feature\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6noqg9cn2m37mrytsyl.png\"></p>\n\n\t<h2>Vision deficiences</h2>\n\n\t<p>Furthermore, we&#8217;d like to know if you prefer the vision deficiencies emulation as part of this menu:</p>\n\n\t<p><img alt=\"Vision deficiency emulation as part of the main menu\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81dvt6jpnt6h5hnpt6sp.png\"></p>\n\n\t<p>Or as a separate button/menu:</p>\n\n\t<p><img alt=\"Vision deficiency as an own button\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mysef84wjjcgygx5ykrw.png\"></p>\n\n\t<p>Please <a href=\"https://forms.office.com/r/b86Sp3PBA4\" title=\"\">fill out this quick survey</a> or comment here <a href=\"https://github.com/microsoft/vscode-edge-devtools/issues/942\" title=\"\">or on this GitHub issue</a></p>\n\n\t<p>Thanks so much!</p>\n ]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://christianheilmann.com/2022/03/25/quick-survey-help-improve-the-simulation-options-of-browser-developer-tools/feed/</wfw:commentRss>\n\t\t\t<slash:comments>0</slash:comments>\n\t\t\n\t\t\n\t\t\t</item>\n\t\t<item>\n\t\t<title>New in 1.4.6: Using the DevTools Console inside Visual Studio Code and offline functionality</title>\n\t\t<link>https://christianheilmann.com/2022/03/24/new-in-1-4-6-using-the-devtools-console-inside-visual-studio-code-and-offline-functionality/</link>\n\t\t\t\t\t<comments>https://christianheilmann.com/2022/03/24/new-in-1-4-6-using-the-devtools-console-inside-visual-studio-code-and-offline-functionality/#respond</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Heilmann]]></dc:creator>\n\t\t<pubDate>Thu, 24 Mar 2022 15:31:52 +0000</pubDate>\n\t\t\t\t<category><![CDATA[General]]></category>\n\t\t<guid isPermaLink=\"false\">https://christianheilmann.com/?p=7172</guid>\n\n\t\t\t\t\t<description><![CDATA[We just released version 1.4.6 of the Edge DevTools for VS Code extension and the main change is that the Console tool is now available in the extension. 0:05 Console.log messages in VS Code 0:08 Test out some JavaScript 0:10 window object access 0:12 DOM convenience API support 0:15 Style changes 0:17 Console.table 0:20 Live [&#8230;]]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\t<p>We just released version 1.4.6 of the <a href=\"https://aka.ms/devtools-for-edge\" title=\"\">Edge DevTools for <span class=\"caps\">VS </span>Code extension</a> and the main change is that the Console tool is now available in the extension.</p>\n\n\t<p><iframe loading=\"lazy\" title=\"Edge DevTools for Visual Studio Code 1.4.6 features\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/O2E6QC0cqT4?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n\n\t<ul>\n\t\t<li>0:05 <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/console-log\" title=\"\">Console.log</a> messages in <span class=\"caps\">VS </span>Code</li>\n\t\t<li>0:08 <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/console-javascript\" title=\"\">Test out some JavaScript</a></li>\n\t\t<li>0:10 window object access</li>\n\t\t<li>0:12 <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/utilities\" title=\"\"><span class=\"caps\">DOM</span> convenience <span class=\"caps\">API</span></a> support</li>\n\t\t<li>0:15 Style changes</li>\n\t\t<li>0:17 <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/api#table\" title=\"\">Console.table</a></li>\n\t\t<li>0:20 <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/live-expressions\" title=\"\">Live Expressions</a></li>\n\t\t<li>0:30 Use Console and Elements together.</li>\n\t</ul>\n\n\t<p>There are two caveats at the moment: in order to see the Console, <strong>you need to use <a href=\"https://www.microsoftedgeinsider.com/download/canary\" title=\"\">Edge Canary</a> as your debugging target (version 101.0.1193.0+)</strong> and it can happen that the you need to refresh the target once to see the Console light up. This is a bug in <span class=\"caps\">VS </span>Code itself and will be fixed in the upcoming version.</p>\n\n\t<h2>New automatically created `launch.json` settings</h2>\n\n\t<p>To give you the best debugging experience in <span class=\"caps\">VS </span>Code, we updated the `launch.json` settings <a href=\"https://github.com/microsoft/vscode-edge-devtools/pull/927\" title=\"\">when you generate it from the extension</a>. The new file offers you a headless debugging experience by default calling the correct version of the Edge debugger.</p>\n\n\t<p>You can see it them in action in the following screencast:</p>\n\n\t<p><iframe loading=\"lazy\" title=\"Launch.json updates for 1.4.6\" width=\"500\" height=\"375\" src=\"https://www.youtube.com/embed/SSywiLfBZWE?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n\n\t<p>If you want to see the Console tool right now and not until 101 is the stable version of Edge, you need to add a `&#8221;runtimeExecutable&#8221;: &#8220;canary&#8221;,` to the launch.json to target the Canary build of the browser.</p>\n\n\t<h2>Offline availability</h2>\n\n\t<p>If you want to use the extension when you are offline, we now also <a href=\"https://github.com/microsoft/vscode-edge-devtools/pull/916\" title=\"\">cache and copy the last successful connection to DevTools</a>. This was a direct request from GitHub issues.</p>\n\n\t<h2>Other fixes and features</h2>\n\n\t<ul>\n\t\t<li>We <a href=\"https://github.com/microsoft/vscode-edge-devtools/pull/920\" title=\"\">updated webhint to 1.6.5</a> which means improved issue reporting and a general clean-up of the code base.</li>\n\t\t<li>We <a href=\"https://github.com/microsoft/vscode-edge-devtools/pull/885\" title=\"\">fixed some minor problems in the source path resolution</a> which makes <span class=\"caps\">CSS</span> syncing and opening files in the editor more stable</li>\n\t</ul>\n\n\t<p>If you encounter a problem, or you want to have other features, <a href=\"https://github.com/microsoft/vscode-edge-devtools/issues\" title=\"\">please file an issue on GitHub</a>. This is where we get our best ideas from.</p>\n\n ]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://christianheilmann.com/2022/03/24/new-in-1-4-6-using-the-devtools-console-inside-visual-studio-code-and-offline-functionality/feed/</wfw:commentRss>\n\t\t\t<slash:comments>0</slash:comments>\n\t\t\n\t\t\n\t\t\t</item>\n\t\t<item>\n\t\t<title>Automatically starting a server when starting a debug session in VS Code</title>\n\t\t<link>https://christianheilmann.com/2022/03/17/automatically-starting-a-server-when-starting-a-debug-session-in-vs-code/</link>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Heilmann]]></dc:creator>\n\t\t<pubDate>Thu, 17 Mar 2022 11:06:48 +0000</pubDate>\n\t\t\t\t<category><![CDATA[General]]></category>\n\t\t<guid isPermaLink=\"false\">https://christianheilmann.com/?p=7164</guid>\n\n\t\t\t\t\t<description><![CDATA[Back in January, I posted about a launch.json file to turn VS code into an end-to-end web debugging environment. One of the features people told me was missing was to start and stop a server with the debugging session. So here is how to do this. We add two more lines to the existing `launch.json`, [&#8230;]]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\t<p>Back in January, I posted about <a href=\"https://christianheilmann.com/2022/01/26/a-launch-json-setting-for-end-to-end-web-development/\" title=\"\">a launch.json file to turn VS code into an end-to-end web debugging environment</a>. One of the features people told me was missing was to start and stop a server with the debugging session. So here is how to do this.</p>\n\n\t<p><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/n55Cv5tU6uI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n\n\t<p>We add two more lines to the existing `launch.json`, defining a task to run before debugging starts and one after it end. Let&#8217;s call them `start server` and `stop server` respectively:</p>\n\n\t<p><pre lang=\"javascript\"><br />\n{</p>\n\t<p>&#8220;version&#8221;: &#8220;0.2.0&#8221;,<br />\n&#8220;configurations&#8221;: [<br />\n{</p>\n\t<p>&#8220;type&#8221;: &#8220;pwa-msedge&#8221;,<br />\n&#8220;request&#8221;: &#8220;launch&#8221;,<br />\n&#8220;name&#8221;: &#8220;webdebug&#8221;,<br />\n&#8220;url&#8221;: &#8220;http://localhost:8080&#8221;,<br />\n&#8220;webRoot&#8221;: &#8220;${workspaceFolder}&#8221;,<br />\n&#8220;runtimeExecutable&#8221;: &#8220;stable&#8221;,<br />\n&#8220;runtimeArgs&#8221;: [&#8220;&#8212;headless&#8221;],<br />\n&#8220;preLaunchTask&#8221;: &#8220;start server&#8221;,<br />\n&#8220;postDebugTask&#8221;: &#8220;stop server&#8221;<br />\n}</p>\n\t<p>]<br />\n}</p>\n\t<p></pre></p>\n\n\t<p>We then need to create a `tasks.json` file in the .`vscode` folder that describes these tasks. Here is the final result:</p>\n\n\t<p><pre lang=\"javascript\"><br />\n{</p>\n\t<p>&#8220;version&#8221;: &#8220;2.0.0&#8221;,<br />\n&#8220;tasks&#8221;: [<br />\n{</p>\n\t<p>&#8220;label&#8221;: &#8220;start server&#8221;,<br />\n&#8220;type&#8221;: &#8220;shell&#8221;,<br />\n&#8220;isBackground&#8221;: true,<br />\n&#8220;command&#8221;: &#8220;http-server&#8221;,<br />\n&#8220;presentation&#8221;: { &#8220;reveal&#8221;: &#8220;silent&#8221; },<br />\n&#8220;problemMatcher&#8221;: [{<br />\n&#8220;pattern&#8221;: [{<br />\n&#8220;regexp&#8221;: &#8220;.&#8221;,<br />\n&#8220;file&#8221;: 1,&#8221;line&#8221;: 1,<br />\n&#8220;column&#8221;: 1,&#8221;message&#8221;: 1<br />\n}],<br />\n&#8220;background&#8221;: {<br />\n&#8220;activeOnStart&#8221;: true,<br />\n&#8220;beginsPattern&#8221;: { &#8220;regexp&#8221;: &#8220;.&#8221; },<br />\n&#8220;endsPattern&#8221;: { &#8220;regexp&#8221;: &#8220;.&#8221; }<br />\n},<br />\n}]<br />\n},<br />\n{</p>\n\t<p>&#8220;label&#8221;: &#8220;stop server&#8221;,<br />\n&#8220;command&#8221;: &#8220;echo ${input:terminate}&#8221;,<br />\n&#8220;type&#8221;: &#8220;shell&#8221;<br />\n},<br />\n],<br />\n&#8220;inputs&#8221;: [{<br />\n&#8220;id&#8221;: &#8220;terminate&#8221;,<br />\n&#8220;type&#8221;: &#8220;command&#8221;,<br />\n&#8220;command&#8221;: &#8220;workbench.action.tasks.terminate&#8221;,<br />\n&#8220;args&#8221;: &#8220;terminateAll&#8221;<br />\n}]<br />\n}</p>\n\t<p></pre></p>\n\n\t<p>Tasks are meant to run, have an end and then tell the debugger that they are ready. Normally you would, for example, use them to do some conversion or pull some information. In this case, it is a bit trickier, as we start a server and that doesn&#8217;t give us any feedback. The task never ends as the server starts and keeps running.</p>\n\n\t<p>The `start server` task is a `shell` task, should run in the background and the command it executes is `http-server`, which is the <a href=\"https://www.npmjs.com/package/http-server\" title=\"\"><span class=\"caps\">NPM</span> module of the same name</a>. The presentation property is set to silent, which means that when the server starts, it doesn&#8217;t pop up the terminal in Visual Studio Code. When we use background tasks, we need to define a `problemMatcher` that tells the debug process if the task has executed successfully or if there was any issue. This can get rather complex and you need to parse the output on the Console with Regular Expressions. In this case, we keep it very open and allow anything reported on the output Console to be a success (RegEx &#8220;.&#8221;).</p>\n\n\t<p>What this task does is open a new Terminal, enter &#8220;http-server&#8221; and hit enter for us. And once that&#8217;s done, we have a local server at our disposal, making the current Workspace folder available as `localhost:8080`, which is also what we defined in our `launch.json` as the address to navigate to.</p>\n\n\t<p>The `stop server` task is a bit simpler. we just make it send a `terminate` command to the terminal. We then use an `inputs` directive to define the `terminal` <span class=\"caps\">CLI</span> command as something that calls `workbench.action.tasks.terminate` with an argument of `terminateAll`. This closes any Terminals opened by tasks earlier.</p>\n\n\t<p>And that&#8217;s all there is to spawn a new local server when you start debugging and close it when the debug session ends.</p>\n\n\t<p>There is currently a bug in <span class=\"caps\">VS </span>Code, that throws an error in your tasks when the `Problems` pane is not empty when the task runs. In the case of using the Edge Developer tools for <span class=\"caps\">VS </span>Code extension that means any issue reported there will result in this problem. I reported this to the team and they are working on a solution.</p>\n\n\t<p>If you want to see this in action, you can <a href=\"https://github.com/codepo8/simple-to-do\" title=\"\">fork the simple to-do demo</a> and run it locally. Make sure to have http-server installed via <span class=\"caps\">NPM</span>.</p>\n\n\n ]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t\n\t\t\t</item>\n\t\t<item>\n\t\t<title>Noise cancellation for development</title>\n\t\t<link>https://christianheilmann.com/2022/03/14/noise-cancellation-for-development/</link>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Heilmann]]></dc:creator>\n\t\t<pubDate>Mon, 14 Mar 2022 20:53:09 +0000</pubDate>\n\t\t\t\t<category><![CDATA[General]]></category>\n\t\t<guid isPermaLink=\"false\">https://christianheilmann.com/?p=7136</guid>\n\n\t\t\t\t\t<description><![CDATA[I like noise cancelling headphones. Using them, I can sleep better on planes and find much more detail in music I enjoy. In the office, they are a visual clue that I am currently unavailable for feedback as I want to concentrate on a task at hand. We live in times of a constant information [&#8230;]]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\t<p><a href=\"https://twitter.com/mmatuzo/status/1390537685899661313\"><img src=\"https://christianheilmann.com/wp-content/uploads/2022/03/manuel-1024x576.jpeg\" alt=\"109 HTML elements you never heard of\"/></a></p>\n\n\t<p>I like noise cancelling headphones. Using them, I can sleep better on planes and find much more detail in music I enjoy. In the office, they are a visual clue that I am currently unavailable for feedback as I want to concentrate on a task at hand.</p>\n\n\t<p><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/03/Photo-on-14-03-2022-at-20.10.jpg\" class=\"small\" alt=\"Chris Heilmann with noise cancelling headphones\" width=\"813\" height=\"767\" class=\"alignnone size-full wp-image-7153\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/03/Photo-on-14-03-2022-at-20.10.jpg 813w, https://christianheilmann.com/wp-content/uploads/2022/03/Photo-on-14-03-2022-at-20.10-300x283.jpg 300w, https://christianheilmann.com/wp-content/uploads/2022/03/Photo-on-14-03-2022-at-20.10-768x725.jpg 768w\" sizes=\"(max-width: 813px) 100vw, 813px\" /></p>\n\n\t<p>We live in times of a constant information flow. Where in the past research was a tough task and you had to know where to look, we now need to know what not to consume. Our main jobs are filtering and discarding false information, not finding sources.</p>\n\n\t<p>Matt Haig&#8217;s bestselling book <a href=\"https://www.theguardian.com/books/2018/jul/04/notes-on-a-nervous-planet-matt-haig-review\" title=\"\">Notes on a nervous planet</a> is a great read on that topic. It is easy to be on edge as we have such a vast amount of information to consume and instead of reflecting on our learnings, we chase even more information. Being up-to-date is the most important thing. More important than verified information or taking the time to do anything with this information.</p>\n\n\t<p>In the book, Haig also brings up the problem of social media presences. People show their best sides with lots of filters and little &#8220;fact embellishments&#8221;. Other people get frustrated consuming those as their lives aren&#8217;t as glamorous. Even worse, the people who posted the things that made others jealous aren&#8217;t happy either.  They are getting depressed because their real lives aren&#8217;t like their online profiles. And they live with the burden of having lied to the world by feeding a fake persona instead of nurturing themselves.</p>\n\n\t<h2>The myth of the &#8220;always switched on&#8221; developer</h2>\n\n\t<p>And here&#8217;s where I get to the point of representation of development in social media and main media. It suffers from the same problem. We have a skewed image of what we should be as developers. And more and more people get depressed and feel bad because of it.</p>\n\n\t<p>Just take a few of the following statements and for each of them that apply to you give yourself a <span class=\"caps\">DFBSP </span>(Developer Frustration Bullshit point).</p>\n\n\t<ul>\n\t\t<li>I feel like I&#8217;m falling behind in my knowledge as a developer</li>\n\t\t<li>I am not working on cool new technology like everybody else does</li>\n\t\t<li>I am worried that my skillset is getting rusty and I don&#8217;t know the things current employers are looking for</li>\n\t\t<li>I have no side-hustle or project to fall back on if I lose my job</li>\n\t\t<li>Modern development doesn&#8217;t look at all like what I do day to day</li>\n\t\t<li>Everybody else knows more than me</li>\n\t\t<li>It seems that there is a massive change in the development world happening and I can&#8217;t find a way to get into it or even get excited about it.</li>\n\t</ul>\n\n\t<p>I am pretty sure you can nod along to at least one of these points. And I do feel the same. I have the benefit of having worked in this market for 25 years, and I&#8217;ve seen the same patterns emerge over and over again. But I also understand that people are anxious and worried. That&#8217;s terrible and we shouldn&#8217;t feel that way. One reason why we are like that is noise.</p>\n\n\t<h2>A change in developer videos</h2>\n\n\t<p>Lately with the pandemic I didn&#8217;t go to meetups and conferences any longer. Instead, I switched to video as a platform of educating and also learning about things. I don&#8217;t have to put up an effort to go to a place to learn about the bleeding edge. I can sit in my chair or lie in my bed and consume 24/7. Video as an education platform skyrocketed in the last years, because we had to work from home.</p>\n\n\t<p>It is exciting to work with the Visual Studio Code team on shorts. These are 20-40 second videos for <a href=\"https://www.tiktok.com/@vscode\" title=\"\">TikTok</a> and subsequently YouTube. They are fun to do, although creating videos about development tools in portrait feels wrong.</p>\n\n\t<p><blockquote class=\"tiktok-embed\" cite=\"https://www.tiktok.com/@vscode/video/7059946274807794991\" data-video-id=\"7059946274807794991\" style=\"max-width: 605px;min-width: 325px;\" > <section> <a target=\"_blank\" title=\"@vscode\" href=\"https://www.tiktok.com/@vscode\" rel=\"noopener\">@vscode</a> Top secret launch config <a title=\"programming\" target=\"_blank\" href=\"https://www.tiktok.com/tag/programming\" rel=\"noopener\">#programming</a> <a title=\"techtok\" target=\"_blank\" href=\"https://www.tiktok.com/tag/techtok\" rel=\"noopener\">#techtok</a> <a title=\"web\" target=\"_blank\" href=\"https://www.tiktok.com/tag/web\" rel=\"noopener\">#web</a> <a title=\"browser\" target=\"_blank\" href=\"https://www.tiktok.com/tag/browser\" rel=\"noopener\">#browser</a> <a title=\"vscode\" target=\"_blank\" href=\"https://www.tiktok.com/tag/vscode\" rel=\"noopener\">#vscode</a> <a title=\"edutok\" target=\"_blank\" href=\"https://www.tiktok.com/tag/edutok\" rel=\"noopener\">#edutok</a> <a target=\"_blank\" title=\"♬ original sound - Visual Studio Code\" href=\"https://www.tiktok.com/music/original-sound-7059946250669591342\" rel=\"noopener\">♬ original sound &#8211; Visual Studio Code</a> </section> </blockquote> <script async src=\"https://www.tiktok.com/embed.js\"></script></p>\n\n\t<p>I&#8217;m going to say it clearly: I don&#8217;t get TikTok. I look at it and I feel annoyed. I feel badgered and pushed and it isn&#8217;t surprising. This is exactly what the platform does. If we compare Facebook to a <a href=\"https://en.wikipedia.org/wiki/Operant_conditioning_chamber\" title=\"\">Skinner box</a>, TikTok drives that up a notch. It is a perfect addiction machine, locking you in and making you stay. Consume, consume and consume some more.</p>\n\n\t<p>That said, I was pleasantly surprised about the comments I got on media in that format. There was a lot of insightful and actionable feedback. It seems that by making information more &#8220;snackable&#8221;, you also get people to interact more. <span class=\"caps\">A 45</span> minutes talk video is overwhelming and feels like an investment to your viewers. It seems that the main consumers of these platforms use it differently than I do.</p>\n\n\t<p>Looking at the developer video offerings, there is a disturbing fashion of being overly dramatic. I want to make it clear that I don&#8217;t criticise the content of any of the video channels shown here. I do like a lot of them, learned from them and really appreciate what they do. But I have a hard time taking the trend of video thumbnails serious.</p>\n\n\t<p><a href=\"https://christianheilmann.com/wp-content/uploads/2022/03/New-Project.jpg\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/03/New-Project-1024x683.jpg\" alt=\"Thumbnails of YouTube videos all showing concerned, confused or annoyed people next to some code.\" width=\"1024\" height=\"683\" class=\"alignnone size-large wp-image-7140\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/03/New-Project-1024x683.jpg 1024w, https://christianheilmann.com/wp-content/uploads/2022/03/New-Project-300x200.jpg 300w, https://christianheilmann.com/wp-content/uploads/2022/03/New-Project-768x512.jpg 768w, https://christianheilmann.com/wp-content/uploads/2022/03/New-Project.jpg 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></p>\n\n\t<p><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I need to up my game with video thumbnails about coding stuff. It seems you need to look shocked/pensive/pleading/constipated to get people to learn when not to use a semicolon. I really like the content of these people but this just makes me cringe. <a href=\"https://t.co/Ig8nSf3GE1\">pic.twitter.com/Ig8nSf3GE1</a></p>&mdash; Chris Heilmann (@codepo8) <a href=\"https://twitter.com/codepo8/status/1488855323003822087?ref_src=twsrc%5Etfw\">February 2, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n\t<p>And I am not alone in this. This fake drama has been rubbing a few people wrong.</p>\n\n\t<p><blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">I started making a spoof of this a few weeks ago but it made me too sad <a href=\"https://t.co/KowYhsOXZ0\">pic.twitter.com/KowYhsOXZ0</a></p>&mdash; Jake Archibald (@jaffathecake) <a href=\"https://twitter.com/jaffathecake/status/1406975697197879297?ref_src=twsrc%5Etfw\">June 21, 2021</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n\t<p><blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Am I doing this right? ? <a href=\"https://t.co/VfyEKTFa4o\">https://t.co/VfyEKTFa4o</a> <a href=\"https://t.co/oRzTOaXeat\">pic.twitter.com/oRzTOaXeat</a></p>&mdash; Manuel Matuzovi? (@mmatuzo) <a href=\"https://twitter.com/mmatuzo/status/1376253632685957128?ref_src=twsrc%5Etfw\">March 28, 2021</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n\t<p>It feels like the William Shatner way of acting applied to previews.</p>\n\n\t<p><blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Getting there… Ready for the YouTube Thumbnail Shatner award. <a href=\"https://t.co/jOBT8kKyuJ\">pic.twitter.com/jOBT8kKyuJ</a></p>&mdash; Chris Heilmann (@codepo8) <a href=\"https://twitter.com/codepo8/status/1488859728960704513?ref_src=twsrc%5Etfw\">February 2, 2022</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n\t<p>Sure, this could only be a simple way to get more clicks. And as everyone does it, it seems to work. But it also fuels stress and anxiety. If everything is super important and I don&#8217;t have the time to learn about it or even know about it, how does that make me feel?</p>\n\n\t<p>The good news is that we have control over this. We can choose not to watch these videos or not to feel badgered by the click-bait nature of things. But when it comes to noise to deal with to do our job, the constant change in our platform is also tricky.</p>\n\n\t<h2>More granular access to the web platform brings more complexity</h2>\n\n\t<p>Web development as a job seems to be hard to grasp. We always have to deal with a few things.</p>\n\n\t<ul>\n\t\t<li><strong>Platform/Browser differences</strong> &#8211; there always seems to be one browser or platform that holds us back.</li>\n\t\t<li><strong><span class=\"caps\">FOMO</span> when comparing with native platforms</strong> &#8211; native, closed platforms will always seem better than the web, as they don&#8217;t need to cater to all</li>\n\t\t<li><strong>Constantly changing language features</strong> &#8211; looking at <span class=\"caps\">CSS</span> two years ago and now is an amazing difference. JavaScript even comes in annual flavours now</li>\n\t\t<li><strong>Lag of documentation</strong> &#8211; the newest features often lack any official documentation. Instead you get a lot of presentations, videos and undocumented demo code</li>\n\t\t<li><strong>Everything is experimental</strong> &#8211; almost everything shiny and new comes with a lot of noise but also a tiny &#8220;don&#8217;t use this in production&#8221;</li>\n\t</ul>\n\n\t<p>This isn&#8217;t new. This has always been the case with the web. And the way out of this is standardisation. The crux of the matter with that is that defining, ratifying and agreeing on a standard is a slow process. I remember talking some time ago to Molly Holzschlag when <span class=\"caps\">CSS</span> got a lot of new standard features. Her complaint summed up the problem of the speed of design fashion and standardisation quite nicely:</p>\n\n\t<blockquote>It took us about a year to standardise how rounded corners in <span class=\"caps\">CSS</span> should work. By that time web design fashion changed and nobody wanted them anymore.</blockquote>\n\n\t<p>To speed up the slow and academic standardisation process, developers demanded more access to the web platform. Thus, the <a href=\"https://github.com/extensibleweb/manifesto\" title=\"\">extensible web manifesto</a> was born, demanding more low-level APIs so that any developer can move the web forward. The first big improvement was to replace the flawed way to give web products offline capabilities, AppCache with <a href=\"https://developer.mozilla.org/docs/Web/API/ServiceWorker\" title=\"\">ServiceWorker</a>. Next we weren&#8217;t content with how some <span class=\"caps\">HTML</span> elements created complex interfaces we had no control over. <a href=\"https://www.webcomponents.org/\" title=\"\">Web Components</a> allow us to build our own interfaces that are an <span class=\"caps\">HTML</span> element. The most recent change in this drive for more low-level access are <a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_Houdini\" title=\"\"><span class=\"caps\">CSS </span>Houdini</a> to use the <span class=\"caps\">CSS</span> painting APIs, and <a href=\"https://css-tricks.com/css-cascade-layers/\" title=\"\">Cascade Layers</a> to control the <span class=\"caps\">CSS </span>Cascade rather than having to blindly rely on it.</p>\n\n\t<p>All this gives developers much more control over the web, but it comes with the cost of complexity. The beauty of the web was that it was relatively simple to get started. Write some <span class=\"caps\">HTML</span>, add some styles to make it look and work great and then add JavaScript to add extra interactivity. With this new amount of access, we seem to have to be already skilled developers to build a small web project.</p>\n\n\t<p>As it turns out, a lot of web developers aren&#8217;t that interested in getting granular control of the web. They are much more interested in getting work done. But having this low-level access does empower other developers to write abstraction libraries. These use the low-level APIs under the hood, but give those developers who want to just build something quickly a faster way to do so. If you, for example, look for ServiceWorker solutions, you will find that most people use the <a href=\"https://developers.google.com/web/tools/workbox/\" title=\"\">WorkBox</a> library instead.</p>\n\n\t<p>So, to recap:</p>\n\n\t<ul>\n\t\t<li>Web development is complex as there are so many things to consider</li>\n\t\t<li>Standards help bring order to chaos</li>\n\t\t<li>Standardisation is slow</li>\n\t\t<li>Let&#8217;s allow for programmatic access to the web platform</li>\n\t\t<li>Biggest consumers of low level web APIs are abstraction libraries</li>\n\t\t<li>Abstraction libraries aren&#8217;t standardised</li>\n\t</ul>\n\n\t<p>See the problem? By abstracting away the issues of the web into hundreds of frameworks and libraries we created a similar problem than we had before. Except now developers starting with the web aren&#8217;t frustrated by the platform. They are drowning in an offer of lots of helpful abstractions and toolchains. And that makes web development look a lot more complex than it should be. Jacob Hands put it nicely on Twitter:</p>\n\n\t<p><blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">web dev: It&#39;s simple! <a href=\"https://t.co/MYJIEUg13q\">pic.twitter.com/MYJIEUg13q</a></p>&mdash; Jacob Hands ? (@jachands) <a href=\"https://twitter.com/jachands/status/1500173829733240844?ref_src=twsrc%5Etfw\">March 5, 2022</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n\n\t<h2>Time to take a breath</h2>\n\n\t<p>It is natural to feel overwhelmed by this much choice. Especially when each solution in this avalanche is supposed to make you more effective. It is time to take a break, a deep breath, count to ten and look at what&#8217;s happening.</p>\n\n\t<p>The thing that Jacob is showing here isn&#8217;t the start of a project. It is months of agreement, trial and error and finding the best solution to build a certain product. The fallacy is then to think that every other product would also need the same toolchain to get off the ground.  It makes no sense to overwhelm a single person with all these tools. It doesn&#8217;t automatically make you more productive. It can, but it also may be overkill.</p>\n\n\t<p>If you don&#8217;t know what all these things do, we can start a club, because I don&#8217;t either. I am also not worried about it. Working for 25 years in the business taught me a few things. It taught me that sooner or later, tooling and choice of technologies will overtake you. And it taught me that our careers and jobs rely on other things &#8211; like how we work with other people.</p>\n\n\t<h2>Experience can be a burden</h2>\n\n\t<p>I <a href=\"https://christianheilmann.com/2021/06/16/shut-up-old-man/\" title=\"\">wrote about this</a> a few weeks ago already, but it is worth repeating. The more experience you have as a developer, the more insight you have into how things fail. The danger in this case is then to tell everybody else to avoid the problems you encountered in the past. To assume that the knowledge you have right now is as valid and obvious to others as it is to you.  People who didn&#8217;t have the same experiences you had. We try to come up with a hive intelligence or knowledge by telling people what we know. Not by allowing them to make mistakes and thus understand why these solution make sense. Failure is a part of learning, but we keep trying to avoid it at any cost. Either by building solutions that abstract issues away, or &#8211; and this is where it really gets bad &#8211; by telling people off for not embracing our own experiences and wisdom as a given.</p>\n\n\t<h2>Avoiding destructive patterns</h2>\n\n\t<p>When it comes to noise and stressing developers out, there are a few patterns people follow that have to go away.</p>\n\n\t<h3>Gatekeeping</h3>\n\n\t<blockquote>You aren&#8217;t a professional  if you don&#8217;t use ${thing}</blockquote>\n\n\t<p>This is utter tosh. Over my career I&#8217;ve heard this dozens of times. In almost all cases the thing that would have made me a professional vanished in a few months. And got replaced by the next new shiny. I know highly professional developers working with woefully outdated tools and technology. Partly because their product demands it. But also because they are effective using it and don&#8217;t see any need to learn a different one.</p>\n\n\t<h3>Assumed baseline</h3>\n\n\t<blockquote>You forgot to do the most basic things, you are horrible to $people!</blockquote>\n\n\t<p>This is one I struggle with a lot. Valid <span class=\"caps\">HTML</span>, the most basic accessibility features and a readable syntax are second nature to me. Using all these makes sure you don&#8217;t block people out, and you make it easier for people to maintain and run with your work. But calling people out publicly for basic mistakes isn&#8217;t helpful at all. This is a pattern you see a lot in social media. Almost every positive post will have someone find a flaw in it that could offend a certain group. Pointing this out may be important, but it is also a major bummer.</p>\n\n\t<h3>Fear mongering</h3>\n\n\t<blockquote>These are the only skills employers are looking for!</blockquote>\n\n\t<p>What engineering managers want from a new hire and what ends up in job ads differs a lot. This is a problem we need to deal with in our market. In almost any job I started in I had half the skills listed in the job description. It is never one killer technical skill that will make you stand out. It is how good you are in taking on new challenges and integrate into existing structures and needs. Companies don&#8217;t need rockstars, they need people who can integrate into a well-working system. That we list a plethora of skills that are hot right now in job ads is annoying.</p>\n\n\t<h3>Wisdom of the ancients</h3>\n\n\t<blockquote>This never worked before and will fail now!</blockquote>\n\n\t<p>This ties in with my &#8220;Shut up old man&#8221; post and is a real problem. The longer you work in development, the more tainted you get. This slows down innovation and frustrates fresh, excited people around you. One big step towards becoming a tech lead is to use your experience to help people grow. Not to let your horrible memories taint possible great new things to come. Enthusiasm is never a bad thing when it is being channelled into useful actions. Often things that were impossible for me to achieve are no issue for new developers in an evolved environment.</p>\n\n\t<h3>My pet setup</h3>\n\n\t<blockquote>Why don&#8217;t you use alpenhorn.js like real professionals?</blockquote>\n\n\t<p>I keep encountering this as comments from people asking to contribute to a project. It is reverse gatekeeping, telling me to earn their work by subscribing to their idea of a perfect setup. Even when the project in question is a decade old and has thousands of contributors. It is pure hubris to demand the product to change. A better way is to point out what benefits it would bring to reconsider a new architecture. That way you&#8217;ll learn soon why it isn&#8217;t that easy. For most projects, there is never any time for re-architecture, no matter how messed up they are. It is tricky and scary to replace an aircraft engine mid-flight.</p>\n\n\t<h3>Copying the big players</h3>\n\n\t<blockquote>&#8220;This is used to build $bigproduct, so it will be even better for ours&#8221;</blockquote>\n\n\t<p>This fallacy is rampant. It is annoying how many projects are huge because they started with a &#8220;big player&#8221; bootstrap. Frameworks and libraries are great to get a project off the ground fast. They are also vital for companies with huge projects and hundreds of developers. So, if you want to create something quick and you know you will re-write it soon anyways, fine. If you think that using the products the big players use makes your product scale and grow as fast, good luck. Fact is, you hardly will ever build anything from scratch when a company hires you. Companies have budgeted training on the job to get people proficient in the tools they use. The idea of publishing these platforms to the world is to cut down the amount of training for new hires. Not to enable lots of competitors to work as efficiently.</p>\n\n\t<h2>Coping mechanisms</h2>\n\n\t<p>In addition to what to avoid, it might also be good to talk about a few coping mechanism to avoid stress and anxiety about falling behind as a developer. So, here goes.</p>\n\n\t<blockquote>Experimental features are important, but they should be treated as such.</blockquote>\n\n\t<p>One big mistake we make is that we want to use experimental features of the web platform immediately. This isn&#8217;t what an experiment is about. It is about people trying the new thing and giving feedback if it is good enough. Far too many libraries, polyfills and well-intentioned ideas to make tomorrow&#8217;s tech usable today are now digital landfill of the web. An experimental feature may be tomorrow&#8217;s tech, but it also might have to go back to the drawing board. Being an expert in something that is half baked is quite an investment you may not have to make.</p>\n\n\t<blockquote>What is important for your product is defined by your audience, not you.</blockquote>\n\n\t<p>It is frustrating to not be able to play with the newest and coolest all the time. As a developer, though, your job is not to make yourself happy. Your job is to give the users of your product the best experience. Keep the product performing well, not block out anyone because of their setup or abilities. And keep the product secure. If you build a working product that does this, you&#8217;re already a kick-ass developer in my book. This is enough to cover and the technology stack to do that is often governed by the needs of your users.</p>\n\n\t<blockquote>If things sound too good to be true and fix all problems magically, they are too good to be true.</blockquote>\n\n\t<p>Don&#8217;t fall for false promises &#8211; there&#8217;s always a catch that is well disguised in good marketing.</p>\n\n\t<blockquote>Remember that every video, every post and every talk has an agenda.</blockquote>\n\n\t<p>Even this one. I kind of wrote this for myself, to calm myself down. If you watch, read or listen to something that makes you feel like you are missing out, check who delivered it. In 99% of the cases you&#8217;ll find there is some product or service involved. Or, it may be the &#8220;subscribe now for more&#8221; to make you give them more clicks.</p>\n\n\t<blockquote>Aggressive feedback is often there to cover up feelings of inadequacy in the person who gives it (still, hard to cope with).</blockquote>\n\n\t<p>There is a lot of anger in technical online discussions and comments. Over the years I found that the loudest and most aggressive people aren&#8217;t out to get me. They are out to get what I represent to them. They want to be the people who are considered to be the movers and shakers. Anyone disagreeing or trying to calm things down are in their way to greatness. It is tough to not take this personal, but it also means you feed energy into a lost or misguided cause. Much like you stop a dog from barking by showing less interest and radiating calm, you don&#8217;t get anything from shouting back.</p>\n\n\t<blockquote>Count to 10, breathe in, breathe out, dare to think slower&#8230;</blockquote>\n\n\t<p>Fast thinking is a thing we cherish. We love people that come up with brainy sounding quick solutions and &#8220;think on their feet&#8221;. It makes us feel like innovators and driving the agenda. The issue with it is that if all thinking is fast, a lot of opportunities to create great things fall by the wayside. The first thing that comes into your head may sound obvious, but there is a lot of good in reflecting the obvious, too. Also, not every discussion is worth plunging into and the most heated ones often aren&#8217;t at all.</p>\n\n\t<h2>Good ideas to calm things down</h2>\n\n\t<p><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/03/scarlett-1024x848.jpeg\" alt=\"Scratching the head of a cute dog\" width=\"1024\" height=\"848\" class=\"alignnone size-large wp-image-7157\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/03/scarlett-1024x848.jpeg 1024w, https://christianheilmann.com/wp-content/uploads/2022/03/scarlett-300x249.jpeg 300w, https://christianheilmann.com/wp-content/uploads/2022/03/scarlett-768x636.jpeg 768w, https://christianheilmann.com/wp-content/uploads/2022/03/scarlett.jpeg 1178w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n\n\t<p>One thing to get less noise is to stop adding to it. By avoiding the earlier mentioned destructive pattern we call can help. Another thing that is easy to do is not to post or to answer when you think you need to. It is amazing how much less stressful your social media feed gets when you don&#8217;t add to it all the time.</p>\n\n\t<p>One other thing that works wonders is to do something instead of telling someone to do it.</p>\n\n\t<p>The other day was <span class=\"caps\">VS </span>Code day and the five minute &#8220;create your own web resume&#8221; presentation by Ornella Altunyan blew me away. In it, Ornella shows how to build a web resume in the browser without installing anything on your computer.</p>\n\n\t<p><iframe loading=\"lazy\" title=\"Create a resume website in your browser with VS Code and GitHub Pages\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/srQjolk7rj8?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n\n\t<p>The <span class=\"caps\">HTML</span> and <span class=\"caps\">CSS</span> used in that demo triggered my &#8220;wisdom of the ancients&#8221; antipattern. A few important things were missing and it was tempting to point those out.</p>\n\n\t<p>But instead of doing that, I checked if the code is available for contribution, and it is. So I forked the code, played with it, fixed the issues that ailed me and created a <a href=\"https://github.com/ornelladotcom/resume-website-workshop/pull/5\" title=\"\">pull request</a>. In this one I explained why I consider these changes important and that&#8217;s that.</p>\n\n\t<p><a href=\"https://christianheilmann.com/wp-content/uploads/2022/03/pullrequest.png\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/03/pullrequest.png\" alt=\"Pull request on GitHub explaining why the changes I made are important\" width=\"934\" height=\"350\" class=\"alignnone size-full wp-image-7156\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/03/pullrequest.png 934w, https://christianheilmann.com/wp-content/uploads/2022/03/pullrequest-300x112.png 300w, https://christianheilmann.com/wp-content/uploads/2022/03/pullrequest-768x288.png 768w\" sizes=\"(max-width: 934px) 100vw, 934px\" /></a></p>\n\n\t<p>As we work in the same place, I also pinged the author and thanked for a great presentation. I learned that my changes and explanations were highly appreciated. I also learned that integrating them might take some time. The code is part of a <a href=\"https://aka.ms/resumeworkshop\" title=\"\">workshop</a> and a <a href=\"https://docs.microsoft.com/en-us/learn/modules/introduction-to-github-visual-studio-code/\" title=\"\">learning module</a> and these materials need to get adjusted accordingly.</p>\n\n\t<p>Excellent, isn&#8217;t it? I got to calm down by fixing some things and playing with some new technology. The author has code to merge with explanations and I learned why my contribution might take some time to show up. No unknowns, no pushing and complaining. This is fun.</p>\n\n\t<p>In general, it is temping to complain in public but it isn&#8217;t as useful as we think. All it does is create noise and give people extra work. So, before we go to Twitter to right some wrong in a piece of code, it might be a good idea to do this instead.</p>\n\n\t<ul>\n\t\t<li>Check for official feedback channels and use those (bug trackers, in-built feedback items, code repositories)</li>\n\t\t<li>Search if the problem is already reported and upvote/comment instead of creating a duplicate &#8211; the more people report on the same thing with more detail, the easier it gets to fix</li>\n\t\t<li>If you are reporting a problem, create a good explanation how to replicate your issue.</li>\n\t\t<li>Include your setup, often some third party influence can cause the issue.</li>\n\t\t<li>Often you find by re-doing what you did and documenting it, you find an own mistake and learn that the product isn&#8217;t broken at all.</li>\n\t</ul>\n\n\t<p>I&#8217;m forcing myself to be calmer, to care less about things being &#8220;obviously wrong&#8221; and to listen more intently. And to block out unnecessary noise. If you do the same, you&#8217;ll find being a developer in today&#8217;s world is pretty darn amazing and that what you know is already a lot &#8211; and maybe enough.</p>\n\n\n ]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t\n\t\t\t</item>\n\t\t<item>\n\t\t<title>Want to improve Developer Tools in Microsoft Edge? File an issue on Github</title>\n\t\t<link>https://christianheilmann.com/2022/03/09/want-to-improve-developer-tools-in-microsoft-edge-file-an-issue-on-github/</link>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Heilmann]]></dc:creator>\n\t\t<pubDate>Wed, 09 Mar 2022 19:31:24 +0000</pubDate>\n\t\t\t\t<category><![CDATA[General]]></category>\n\t\t<guid isPermaLink=\"false\">https://christianheilmann.com/?p=7131</guid>\n\n\t\t\t\t\t<description><![CDATA[Today we released a new GitHub repository for the Developer Tools in Microsoft Edge where you can file issues about problems, bugs and feattures you would like to see. You can also view the list of existing issues and add your comments. There&#8217;s an official blog post on the Microsoft Edge blog but here&#8217;s why [&#8230;]]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\t<p>Today we released a new <a href=\"https://github.com/MicrosoftEdge/DevTools\" title=\"\">GitHub repository for the Developer Tools in Microsoft Edge</a> where you can <a href=\"https://github.com/MicrosoftEdge/DevTools/issues/new/choose\" title=\"\">file issues</a> about problems, bugs and feattures you would like to see. You can also <a href=\"https://github.com/MicrosoftEdge/DevTools/issues/\" title=\"\">view the list of existing issues</a> and add your comments.</p>\n\n\t<p><a href=\"https://github.com/MicrosoftEdge/DevTools\"><img loading=\"lazy\" src=\"https://christianheilmann.com/wp-content/uploads/2022/03/edge-devtools-1024x734.png\" alt=\"\" width=\"1024\" height=\"734\" class=\"alignnone size-large wp-image-7132\" srcset=\"https://christianheilmann.com/wp-content/uploads/2022/03/edge-devtools-1024x734.png 1024w, https://christianheilmann.com/wp-content/uploads/2022/03/edge-devtools-300x215.png 300w, https://christianheilmann.com/wp-content/uploads/2022/03/edge-devtools-768x551.png 768w, https://christianheilmann.com/wp-content/uploads/2022/03/edge-devtools.png 1209w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></p>\n\n\t<p>There&#8217;s an official blog post on the <a href=\"https://blogs.windows.com/msedgedev/2022/03/09/improving-devtools-together-announcing-the-new-edge-devtools-feedback-repository/\" title=\"\">Microsoft Edge blog</a> but here&#8217;s why I am excited about this.</p>\n\n\t<ul>\n\t\t<li>When I joined Microsoft, I really wanted to keep everything I do open source and allow people to contribute. This is a big step to make the Developer Tools more open.</li>\n\t\t<li>I spend about an hour a day triaging the feedback we get in Developer Tools via the feedback icon in the tools themselves. Of the ~400 items I get in my shift, about 5-10 are on topic. Others are about the browser all-up, or just about all kind of things people want to do on the web. This should focus it much better. We still keep the other feedback channels open, but I do like the idea to talk to developers first and foremost when it comes to Developer Tools.</li>\n\t</ul>\n\n ]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t\n\t\t\t</item>\n\t</channel>\n</rss>\n"
  },
  "description": "For a better web with more professional jobs - can talk, will travel",
  "home_page_url": "https://christianheilmann.com",
  "_ext": {
    "date_published": "2022-03-25T08:20:03.000Z",
    "date_modified": "2022-03-25T08:20:03.000Z"
  }
}