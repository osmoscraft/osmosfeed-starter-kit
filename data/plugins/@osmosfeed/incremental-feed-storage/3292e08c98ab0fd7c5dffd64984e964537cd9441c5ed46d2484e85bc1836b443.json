{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "CSS-Tricks",
  "feed_url": "https://css-tricks.com/feed/",
  "items": [
    {
      "id": "https://css-tricks.com/?p=360711",
      "url": "https://css-tricks.com/typography-links-january-2022/",
      "title": "8 Interesting Typography Links for January 2022",
      "summary": "Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. Typography is one of those things! Here’s a list of typography links to other articles that I’ve been saving up and …\n\n8 Interesting Typography Links for January 2022 originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Every now and then, I find that I&#8217;ve accumulated a bunch of links about various things I find interesting. Typography is one of those things! Here&#8217;s a list of typography links to other articles that I&#8217;ve been saving up and think are worth sharing.</p>\n\n\n\n<span id=\"more-360711\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1646\" height=\"1060\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1646%2C1060&#038;ssl=1\" alt=\"A specimen of the Retail typeface, once of the typography links in the list.\" class=\"wp-image-360777\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?w=1646&amp;ssl=1 1646w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=300%2C193&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1024%2C659&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=768%2C495&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1536%2C989&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1000%2C644&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>An awesome <a href=\"#retail-font\">new font</a> from OH no Type Company</figcaption></figure>\n\n\n\n<ul class=\"is-style-super-link-list\"><li><a href=\"https://mailchi.mp/252c1a3e328e/your-october-font-of-the-month-190523\" rel=\"noopener\">Output Sans goes variable</a> — David Jonathan Ross&#8217;s <a href=\"https://djr.com/output\" rel=\"noopener\">Output</a> is a real workhorse typeface. He&#8217;s been re-doing it as a variable as part of an effort to get variable fonts &#8220;over the hump&#8221; — that is, away from being thought of as experimental and thought of as practical for day-to-day usage.</li><li><a href=\"https://www.swyx.io/line-lengths/\" rel=\"noopener\">Line Lengths</a> — Shawn says, &#8220;it seems an obvious immediate win to apply&nbsp;<code>max-width: 69ch</code>&nbsp;to your blog content blocks.&#8221; Nice. Oliver Schöndorfer <a href=\"https://pimpmytype.com/line-length-line-height/\" rel=\"noopener\">dug into line length</a> recently too. </li><li><strong><a href=\"https://www.joshwcomeau.com/css/custom-css-reset/#:~:text=Smarter%20line-heights,Here%20it%20is%3A\" rel=\"noopener\">Smarter line-heights with “calc”</a></strong>  — Check out this particular part of Josh&#8217;s custom CSS reset. A potentially cool way to handle <code>line-height</code> for both body copy and headers in one swoop.</li><li><a href=\"https://www.women-in-type.com/\" rel=\"noopener\">Women in Type</a> — Just an incredible website from the University of Reading team. &#8220;These women worked daily on developing and producing typefaces that were, eventually, almost always attributed to male designers. They merit attention as key contributors to the design process of many renowned typefaces that emerged throughout the twentieth century.&#8221;</li><li><a id=\"retail-font\" href=\"https://ohnotype.co/fonts/retail\" rel=\"noopener\">Retail</a> — &#8220;Retail is the result of focussing our energy on the not-too-trendy world of humanist sans.&#8221; Very nice work from OH no Type Company.</li><li><a href=\"https://qodeinteractive.com/magazine/best-google-fonts/\" rel=\"noopener\">Designers’ Pick: Best Google Fonts for 2022</a> — The fact that you can go from zero to implemented custom fonts, for free, in like 30 seconds with Google Fonts is going to keep it the most-used custom font solution likely as long as it exists. Fortunately, the website for it has gotten a lot better, the performance of them has gotten good (and controllable), and as this post on Qode shows, there is a ton of really great new choices available. I like the look of <a href=\"https://fonts.google.com/specimen/Space+Grotesk\" rel=\"noopener\">Space Grotesk</a>. The <a href=\"https://www.typewolf.com/\" rel=\"noopener\">Typewolf</a> newsletter is always covering new good ones. Lately: <a href=\"https://fonts.google.com/specimen/Readex+Pro\" rel=\"noopener\">Readex Pro</a> &amp; <a href=\"https://fonts.google.com/specimen/Spline+Sans\" rel=\"noopener\">Spline Sans</a>.</li><li><a href=\"https://elliotjaystocks.com/blog/google-fonts-knowledge\" rel=\"noopener\">Google Fonts Knowledge</a> — Speaking of Google Fonts! Elliot Jay Stocks worked on this beefy project: &#8220;30+ lessons spread out over three modules —&nbsp;<a href=\"https://fonts.google.com/knowledge/introducing_type\" rel=\"noopener\">“Introducing Type”</a>,&nbsp;<a href=\"https://fonts.google.com/knowledge/choosing_type\" rel=\"noopener\">“Choosing Type”</a>, and&nbsp;<a href=\"https://fonts.google.com/knowledge/using_type\" rel=\"noopener\">“Using Type”</a>&nbsp;— and&nbsp;<a href=\"https://fonts.google.com/knowledge/glossary\" rel=\"noopener\">100+ glossary definitions</a>.&#8221; </li><li><a href=\"https://modern-fluid-typography.vercel.app/\" rel=\"noopener\">Modern fluid typography editor</a> — The output from this generator tool by Adrian Bece is a lot like the <code>clamp()</code> stuff from <a href=\"https://css-tricks.com/consistent-fluidly-scaling-type-and-spacing/\">Andy&#8217;s Consistent, Fluidly Scaling Type and Spacing</a>. Adrian&#8217;s helps you visualize the &#8220;curve&#8221;, but actually <em>this</em> <a href=\"https://www.fluid-type-scale.com/\" rel=\"noopener\">Fluid Type Scale Calculator</a> from <a href=\"https://www.aleksandrhovhannisyan.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Aleksandr Hovhannisyan</a> might be a smidge more useful when setting up a new project as it gives you a full spectrum of custom properties to use. </li></ul>\n\n\n\n<p>Do you have any interesting  typography links from  the past month worth sharing? Drop &#8217;em in the comments!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/typography-links-january-2022/\">8 Interesting Typography Links for January 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. Typography is one of those things! Here’s a list of typography links to other articles that I’ve been saving up and think are worth sharing.\n\n\n\n\n\n\n\nAn awesome new font from OH no Type Company\n\n\n\nOutput Sans goes variable — David Jonathan Ross’s Output is a real workhorse typeface. He’s been re-doing it as a variable as part of an effort to get variable fonts “over the hump” — that is, away from being thought of as experimental and thought of as practical for day-to-day usage.Line Lengths — Shawn says, “it seems an obvious immediate win to apply max-width: 69ch to your blog content blocks.” Nice. Oliver Schöndorfer dug into line length recently too. Smarter line-heights with “calc”  — Check out this particular part of Josh’s custom CSS reset. A potentially cool way to handle line-height for both body copy and headers in one swoop.Women in Type — Just an incredible website from the University of Reading team. “These women worked daily on developing and producing typefaces that were, eventually, almost always attributed to male designers. They merit attention as key contributors to the design process of many renowned typefaces that emerged throughout the twentieth century.”Retail — “Retail is the result of focussing our energy on the not-too-trendy world of humanist sans.” Very nice work from OH no Type Company.Designers’ Pick: Best Google Fonts for 2022 — The fact that you can go from zero to implemented custom fonts, for free, in like 30 seconds with Google Fonts is going to keep it the most-used custom font solution likely as long as it exists. Fortunately, the website for it has gotten a lot better, the performance of them has gotten good (and controllable), and as this post on Qode shows, there is a ton of really great new choices available. I like the look of Space Grotesk. The Typewolf newsletter is always covering new good ones. Lately: Readex Pro & Spline Sans.Google Fonts Knowledge — Speaking of Google Fonts! Elliot Jay Stocks worked on this beefy project: “30+ lessons spread out over three modules — “Introducing Type”, “Choosing Type”, and “Using Type” — and 100+ glossary definitions.” Modern fluid typography editor — The output from this generator tool by Adrian Bece is a lot like the clamp() stuff from Andy’s Consistent, Fluidly Scaling Type and Spacing. Adrian’s helps you visualize the “curve”, but actually this Fluid Type Scale Calculator from Aleksandr Hovhannisyan might be a smidge more useful when setting up a new project as it gives you a full spectrum of custom properties to use. \n\n\n\nDo you have any interesting  typography links from  the past month worth sharing? Drop ’em in the comments!\n\n8 Interesting Typography Links for January 2022 originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-07T22:31:52.000Z",
      "date_modified": "2022-01-07T22:31:52.000Z",
      "_plugin": {
        "pageFilename": "81720961ea1ef8071e2acbe193d32dd4a5eb3a4b9e54557de984e7c8349e0393.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360113",
      "url": "https://css-tricks.com/adam-argyles-sick-mouse-out-css-hover-effect/",
      "title": "Adam Argyle’s Sick Mouse-Out CSS Hover Effect",
      "summary": "I was killing some time browsing my CodePen feed for some eye candy and didn’t need to go past the first page before spotting a neat CSS hover effect by Adam Argyle.\nI must’ve spent 10 minutes just staring …\n\nAdam Argyle’s Sick Mouse-Out CSS Hover Effect originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I was killing some time browsing my CodePen feed for some eye candy and didn&#8217;t need to go past the first page before spotting a <a href=\"https://codepen.io/argyleink/pen/poEjvpd?editors=1100\" rel=\"noopener\">neat CSS hover effect</a> by <a href=\"https://twitter.com/argyleink\" rel=\"noopener\">Adam Argyle</a>.</p>\n\n\n\n<span id=\"more-360113\"></span>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"adam-cool-link-effect-mp4\" width='500' height='281' src='https://videopress.com/embed/bOm32AjY?cover=1&amp;loop=1&amp;muted=1&amp;persistVolume=0&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>I must&#8217;ve spent 10 minutes just staring at the demo in awe. There&#8217;s something about this that feels so app-like. I think it might be how contextually accurate it is in that the background color slides in from the left, then exits out through the right. It&#8217;s exactly the sort of behavior I&#8217;d expect from a mouse-in, mouse-out sort of interaction. </p>\n\n\n\n<p>Whatever the case, I fired up a fresh pen and went to work recreating it. And it&#8217;s not super complex or anything, but rather a clever use of transitions and transforms paired with proper offsets. Quite elegant! I&#8217;m actually a little embarrassed how long it took me to realize how the mouse-out part works.</p>\n\n\n\n<p>Here&#8217;s how I tackled it, warts and all.</p>\n\n\n\n<h3>&#8220;I bet that&#8217;s using a transition on a <code>background</code>.&#8221;</h3>\n\n\n\n<p>That was my first thought. Define the background-color, set the  <code>background-size</code> and <code>background-position</code>, then transition the <code>background-position</code>. That&#8217;s how I&#8217;ve seen that &#8220;growing&#8221; background color thing done in the past. I&#8217;ve done that myself on some projects, like this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GXoOdK\" src=\"//codepen.io/anon/embed/preview/GXoOdK?height=350&amp;theme-id=1&amp;slug-hash=GXoOdK&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GXoOdK\" title=\"CodePen Embed GXoOdK\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If I could do the same thing, only from left-to-right, then all that&#8217;s left is the mouse-out, right? Nope. The problem is there&#8217;s nothing that can really make the <code>background-position</code> transition from left-to-right to left-to-right. I could make it do one or the other, but not both.</p>\n\n\n\n<h3>&#8220;Maybe it&#8217;s a <code>transform</code> instead.&#8221;</h3>\n\n\n\n<p>My next attempt was jump into transforms. The <code>transform</code> property provides a bunch of functions that can <code>transition</code> together for slightly more complex movement. For example, the <code>background</code> can &#8220;grow&#8221; or &#8220;shrink&#8221; by changing the element&#8217;s <code>scale()</code>. Or, in this case, just along the x-axis with <code>scaleX()</code>.</p>\n\n\n\n<p>But like I mentioned, there isn&#8217;t a way to isolate the element&#8217;s <code>background</code> to do that. Going from <code>scaleX(0)</code> to <code>scaleX(1)</code> scales the <em>entire</em> element, so that basically squishes the link — content and all — down to nothing, then stretches it back out to its natural size which is a totally different effect. Plus, it means starting with <code>scaleX(0)</code> which hides the whole dang thing by default making it unusable.</p>\n\n\n\n<p>But a pseudo-element could work! It doesn&#8217;t matter if that gets squished or hidden because it isn&#8217;t part of the actual content. Gotta put the <code>background</code> on that instead and position it directly under the link.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  /* Keeps the pseudo-element contained to the element */\n  position: relative;\n}\n\na::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0; /* Logical equivalent to physical offsets */\n  position: absolute;\n  transform: scaleX(0); /* Hide by default */\n  z-index: -1; /* Ensures the link is stacked on top */\n}</code></pre>\n\n\n\n<h3>&#8220;Now I need <code>::before</code> to change on hover.&#8221;</h3>\n\n\n\n<p>I knew I could make <code>::before</code> scale from <code>0</code> to <code>1</code> by chaining it to the link element&#8217;s <code>:hover</code> state.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a:hover::before {\n  transform: scaleX(1)\n}</code></pre>\n\n\n\n<p><em>Nice!</em> I was onto something.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBPxXEJ\" src=\"//codepen.io/anon/embed/preview/qBPxXEJ?height=350&amp;theme-id=1&amp;slug-hash=qBPxXEJ&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBPxXEJ\" title=\"CodePen Embed qBPxXEJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Sprinkle a little <code>transition</code> fairy dust on it and things start to come to life.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"7\"><code markup=\"tt\">a::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLzvoVz\" src=\"//codepen.io/anon/embed/preview/yLzvoVz?height=350&amp;theme-id=1&amp;slug-hash=yLzvoVz&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLzvoVz\" title=\"CodePen Embed yLzvoVz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>&#8220;Hmm, the transition moves in <em>both</em> directions.&#8221;</h3>\n\n\n\n<p>Again, this is where I sorta got stuck. Something in my head just wasn&#8217;t clicking for some reason. As per usual, I ran over to the <a href=\"https://css-tricks.com/almanac/\">CSS-Tricks Almanac</a> to see what property might&#8217;ve slipped my mind.</p>\n\n\n\n<p>Ah, yes. That would be <code><a href=\"https://css-tricks.com/almanac/properties/t/transform-origin/\">transform-origin</a></code>. That allows me to set where the <code>transform</code> starts, which is not totally dissimilar from setting the <code>background-position</code> like I tried earlier. The <code>transform</code> could start from the left instead of its default <code>50% 50%</code> position.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"7\"><code markup=\"tt\">a::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transform-origin: left;\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}</code></pre>\n\n\n\n<p>Yeah, like this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNZMEjp\" src=\"//codepen.io/anon/embed/preview/WNZMEjp?height=350&amp;theme-id=1&amp;slug-hash=WNZMEjp&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNZMEjp\" title=\"CodePen Embed WNZMEjp\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I was already transitioning <code>::before</code> to <code>scaleX(1)</code> on link hover. If I reversed the <code>transform-origin</code> from <code>left</code> to <code>right</code> at the same time, then <em>mayyyybe</em> the highlight goes out the opposite of how it came in when the mouse exits?</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"3\"><code markup=\"tt\">a:hover::before {\n  transform: scaleX(1);\n  transform-origin: right;\n}</code></pre>\n\n\n\n<p>&#x1f91e;</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jOGZLLw\" src=\"//codepen.io/anon/embed/preview/jOGZLLw?height=350&amp;theme-id=1&amp;slug-hash=jOGZLLw&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jOGZLLw\" title=\"CodePen Embed jOGZLLw\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Whoops, backwards! Let&#8217;s swap the <code>left</code> and <code>right</code> values. &#x1f643;</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLzvXyL\" src=\"//codepen.io/anon/embed/yLzvXyL?height=350&amp;theme-id=1&amp;slug-hash=yLzvXyL&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLzvXyL\" title=\"CodePen Embed yLzvXyL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Gorgeous. Thank you, Adam, for the inspiration!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/adam-argyles-sick-mouse-out-css-hover-effect/\">Adam Argyle&#8217;s Sick Mouse-Out CSS Hover Effect</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I was killing some time browsing my CodePen feed for some eye candy and didn’t need to go past the first page before spotting a neat CSS hover effect by Adam Argyle.\n\n\n\n\n\n\n\n\n\n\n\n\n\nI must’ve spent 10 minutes just staring at the demo in awe. There’s something about this that feels so app-like. I think it might be how contextually accurate it is in that the background color slides in from the left, then exits out through the right. It’s exactly the sort of behavior I’d expect from a mouse-in, mouse-out sort of interaction. \n\n\n\nWhatever the case, I fired up a fresh pen and went to work recreating it. And it’s not super complex or anything, but rather a clever use of transitions and transforms paired with proper offsets. Quite elegant! I’m actually a little embarrassed how long it took me to realize how the mouse-out part works.\n\n\n\nHere’s how I tackled it, warts and all.\n\n\n\n“I bet that’s using a transition on a background.”\n\n\n\nThat was my first thought. Define the background-color, set the  background-size and background-position, then transition the background-position. That’s how I’ve seen that “growing” background color thing done in the past. I’ve done that myself on some projects, like this:\n\n\n\nCodePen Embed Fallback\n\n\n\nIf I could do the same thing, only from left-to-right, then all that’s left is the mouse-out, right? Nope. The problem is there’s nothing that can really make the background-position transition from left-to-right to left-to-right. I could make it do one or the other, but not both.\n\n\n\n“Maybe it’s a transform instead.”\n\n\n\nMy next attempt was jump into transforms. The transform property provides a bunch of functions that can transition together for slightly more complex movement. For example, the background can “grow” or “shrink” by changing the element’s scale(). Or, in this case, just along the x-axis with scaleX().\n\n\n\nBut like I mentioned, there isn’t a way to isolate the element’s background to do that. Going from scaleX(0) to scaleX(1) scales the entire element, so that basically squishes the link — content and all — down to nothing, then stretches it back out to its natural size which is a totally different effect. Plus, it means starting with scaleX(0) which hides the whole dang thing by default making it unusable.\n\n\n\nBut a pseudo-element could work! It doesn’t matter if that gets squished or hidden because it isn’t part of the actual content. Gotta put the background on that instead and position it directly under the link.\n\n\n\na {\n  /* Keeps the pseudo-element contained to the element */\n  position: relative;\n}\n\na::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0; /* Logical equivalent to physical offsets */\n  position: absolute;\n  transform: scaleX(0); /* Hide by default */\n  z-index: -1; /* Ensures the link is stacked on top */\n}\n\n\n\n“Now I need ::before to change on hover.”\n\n\n\nI knew I could make ::before scale from 0 to 1 by chaining it to the link element’s :hover state.\n\n\n\na:hover::before {\n  transform: scaleX(1)\n}\n\n\n\nNice! I was onto something.\n\n\n\nCodePen Embed Fallback\n\n\n\nSprinkle a little transition fairy dust on it and things start to come to life.\n\n\n\na::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\n“Hmm, the transition moves in both directions.”\n\n\n\nAgain, this is where I sorta got stuck. Something in my head just wasn’t clicking for some reason. As per usual, I ran over to the CSS-Tricks Almanac to see what property might’ve slipped my mind.\n\n\n\nAh, yes. That would be transform-origin. That allows me to set where the transform starts, which is not totally dissimilar from setting the background-position like I tried earlier. The transform could start from the left instead of its default 50% 50% position.\n\n\n\na::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transform-origin: left;\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}\n\n\n\nYeah, like this:\n\n\n\nCodePen Embed Fallback\n\n\n\nI was already transitioning ::before to scaleX(1) on link hover. If I reversed the transform-origin from left to right at the same time, then mayyyybe the highlight goes out the opposite of how it came in when the mouse exits?\n\n\n\na:hover::before {\n  transform: scaleX(1);\n  transform-origin: right;\n}\n\n\n\n🤞\n\n\n\nCodePen Embed Fallback\n\n\n\nWhoops, backwards! Let’s swap the left and right values. 🙃\n\n\n\nCodePen Embed Fallback\n\n\n\nGorgeous. Thank you, Adam, for the inspiration!\n\nAdam Argyle’s Sick Mouse-Out CSS Hover Effect originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-07T20:15:19.000Z",
      "date_modified": "2022-01-07T20:15:19.000Z",
      "_plugin": {
        "pageFilename": "423624b5afe7614d43baa2dd42ce5b5b2d459cc0e5bdf2231f8d8b4f4bbec5de.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359823",
      "url": "https://css-tricks.com/userainbow/",
      "title": "useRainbow()",
      "summary": "I took a break from work and started some small, personal projects (toys). One of those small projects is potato.horse where I keep all of my doodles, visual short stories and jokes. Check it out!\nHowever, this post is not …\n\nuseRainbow() originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I took a break from work and started some small, personal projects (toys). One of those small projects is <a href=\"https://potato.horse\" rel=\"noopener\">potato.horse</a> where I keep all of my doodles, visual short stories and jokes. Check it out!</p>\n\n\n\n<p>However, this post is not about my break from work, other experiments, or the site itself. People seem to like one particular technique I used in the design, notably, the background effect applied that transitions between colors when the user browses the content:</p>\n\n\n\n<span id=\"more-359823\"></span>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"use-rainbow-scroll-animation-mp4\" width='500' height='317' src='https://videopress.com/embed/OBqOLlnC?cover=1&amp;muted=1&amp;persistVolume=0&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>Some asked me how this effect was implemented (including going as far as reading the minified code, which is very flattering).</p>\n\n\n\n<p>So, here&#8217;s a quick gist, followed up with some context:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export const useRainbowBg = () =>\nuseEffect(() => {\n  const cb = () => {\n    const viewportHeight = window.innerHeight\n    const contentHeight = document.body.getBoundingClientRect().height\n    const viewportsPerRotation = Math.min(\n      3,\n      contentHeight / viewportHeight\n    )\n    const from = 51\n    const progress =\n      window.scrollY / (viewportHeight * viewportsPerRotation)\n    const h = (from + 360 * progress) % 360\n\n    document.body.style.backgroundColor = `hsl(${h}deg, 100%, 50%)`\n  }\n  window.addEventListener('scroll', cb, { passive: true })\n  return () => window.removeEventListener('scroll', cb)\n})</code></pre>\n\n\n\n<p>In short, I map the <em>scroll position</em> into the <em>hue</em> in the HSL color notation. Let&#8217;s break this down.</p>\n\n\n\n<h3>Color models</h3>\n\n\n\n<p>There are many ways of describing colors in CSS, with the two most common ones being RGB (left) and HSL (right):</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwLQKyE\" src=\"//codepen.io/anon/embed/RwLQKyE?height=700&amp;theme-id=1&amp;slug-hash=RwLQKyE&amp;default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwLQKyE\" title=\"CodePen Embed RwLQKyE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>RGB is an additive color palette. This means that mixing 100% of red, green and blue produces white, mixing 100% red and 100% green but 0% blue produces yellow, and so on. This is different from, say, using oil paint or the <a rel=\"noreferrer noopener\" href=\"https://en.wikipedia.org/wiki/CMYK_color_model\" target=\"_blank\">CMYK color model</a>, where the resulting tone would be black(-ish)<sup id=\"fn1\"><a href=\"#footnote-1\">1</a></sup>.</p>\n\n\n\n<p>We&#8217;re used to this approach because it&#8217;s easy to describe in code, but specifying colors in terms of hue, saturation and luminosity seems more natural, especially if you come from a design background, or&#8230; you know, are a human being using a human language.</p>\n\n\n\n<p>We&#8217;ve gotten used to RGB as developers, but in spoken language, using it would feel unnatural and confusing. <a rel=\"noreferrer noopener\" href=\"http://facade.photo\" target=\"_blank\">Façade</a> would be very hard to use in RGB.</p>\n\n\n\n<p>On the other hand, HSL can often be much more intuitive to work with. For instance, if I want to make a color slightly colder, I can just move the hue slider a bit towards blue and I should get closer to what I have in mind. With RGB, if we make the color appear colder by including more blue, the resulting tone will be a bit brighter as the blue component contributes to the overall lightness. This means that you&#8217;d have to lower the red and green values to compensate.</p>\n\n\n\n<p>To see how this works in practice, try maxing out the blue color in the example below.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoJQmVa\" src=\"//codepen.io/anon/embed/PoJQmVa?height=850&amp;theme-id=1&amp;slug-hash=PoJQmVa&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoJQmVa\" title=\"CodePen Embed PoJQmVa\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The first thing that stands out is that all tones are shifted towards blue and the overall brightness of the picture is increased. In the case of the effect we&#8217;re discussing, that would be undesirable.</p>\n\n\n\n<p>Now, let&#8217;s try to do the same with the HSL color circle. Drag the slider to the left, by <strong>ca. 90 degrees</strong>:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvrydNY\" src=\"//codepen.io/anon/embed/wvrydNY?height=700&amp;theme-id=1&amp;slug-hash=wvrydNY&amp;default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvrydNY\" title=\"CodePen Embed wvrydNY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>In this scenario, using HSL not only <em>turns Susan into a vampire</em>, but also maintains a similar<sup><a href=\"#footnote-2\">2</a></sup> level of brightness. And that&#8217;s exactly what I&#8217;m looking for.</p>\n\n\n\n<p>So, what I mean by saying this:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>How does this work? In short, I map the <em>scroll position</em> into the <em>hue</em> in the HSL color notation. Rafal, 2 days earlier</p></blockquote>\n\n\n\n<p>&#8230;is that that every time we detect a scroll event, I try to map it to an angle on the hue circle:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GRMQmzx\" src=\"//codepen.io/anon/embed/GRMQmzx?height=750&amp;theme-id=1&amp;slug-hash=GRMQmzx&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GRMQmzx\" title=\"CodePen Embed GRMQmzx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I didn&#8217;t want to start with red as it would make me hungry and the base yellow fits the design a bit better, so I applied a small initial shift—hence <code>const from = 51</code> set as the initial offset.</p>\n\n\n\n<p>And, as far as the basic implementation goes, that&#8217;s it!</p>\n\n\n\n<p>Now, there are three other areas of improvement.</p>\n\n\n\n<h3>useRainbow performance</h3>\n\n\n\n<p>We&#8217;re triggering a repaint on every scroll, so I was a bit worried that older mobile devices, or even some hi-end laptops plugged in to 4k screens might not be able to maintain solid 60fps. But, I&#8217;m happy with the results so far. Using <a href=\"//developers.google.com/web/updates/2016/06/passive-event-listeners\" target=\"_blank\" rel=\"noreferrer noopener\">passive event listeners</a> provided a bit of a boost, especially on mobile.</p>\n\n\n\n<p>If I realize that performance is a problem, especially with more content down the line, I&#8217;ll probably focus on:</p>\n\n\n\n<ul><li>removing the unnecessary call to <code>getBoundingClientRect</code> on every scroll handler call, and</li><li>deferring or throttling background color changes using <code>requestAnimationFrame</code>.</li></ul>\n\n\n\n<p>I expect the first improvement to have some impact, but the benefits of the second one should be negligible.</p>\n\n\n\n<p>Measure before optimizing. Obsessing about the performance only makes sense when issues become noticeable, be it through a drop in framerate or battery impact. Your iPhone Pro has more computing power than many low-end laptops, so <a href=\"https://css-tricks.com/test-your-product-on-a-crappy-laptop/\">it&#8217;s a good idea to test on those devices too</a>. It&#8217;s good to have a crappy old Android phone exacly for that purpose if you can spare a few quid.</p>\n\n\n\n<h3>Perceptually uniform color spaces</h3>\n\n\n\n<p>You might&#8217;ve noticed that in the previous illustrations some fully saturated colors seemed darker than others. That&#8217;s because the color spaces we normally use when coding don&#8217;t reflect the way the human eye works. I&#8217;ll leave the in-depth explanation to <a rel=\"noreferrer noopener\" href=\"https://programmingdesignsystems.com/color/perceptually-uniform-color-spaces/\" target=\"_blank\">someone much more experienced than me</a>, but suffice to say (gross oversimplification alert!) that, generally, the same amount of red/green/yellow will appear brighter than blue. This means that in some cases the text on the page will be harder to read.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abLEMzW\" src=\"//codepen.io/anon/embed/abLEMzW?height=550&amp;theme-id=1&amp;slug-hash=abLEMzW&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abLEMzW\" title=\"CodePen Embed abLEMzW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p><em>For now</em>, this isn&#8217;t an issue as I&#8217;ve <em>just</em> put this thing online and titles serve a secondary purpose. But there&#8217;s a solution to the problem and it&#8217;s not overly complicated: use a perceptually uniform color space. There&#8217;s a bunch of libraries that do it out of the box, both in JavaScript/TypeScript and CSS/Sass/<code>&lt;pick your CSS flavor here&gt;</code>. <a href=\"https://www.hsluv.org\" rel=\"noopener\"><code>hsluv</code></a> seems like a good starting point.</p>\n\n\n\n<h3>Accessiblity</h3>\n\n\n\n<p>Note that I&#8217;ll be focusing on the visual effect itself and not discussing the rest of the site (e.g. alt tags, document structure, etc&#8230;). I&#8217;d like to focus on contrast, color blindness and people who rely on <code><a href=\"https://css-tricks.com/revisiting-prefers-reduced-motion-the-reduced-motion-media-query/\">prefers-reduced-motion</a></code>. The site is a living document; there&#8217;s always so much to improve. For instance, contrast can be an issue in a few, non-critical places. I&#8217;m happy to accept feedback and implement it: <a href=\"https://sonnet.io/posts/hi/\" rel=\"nofollow noopener\">hit me up!</a>.</p>\n\n\n\n<h3>color blindness</h3>\n\n\n\n<p>I wanted to make sure that the effect doesn&#8217;t break the site completely for people with color blindness. So I focused on the most common types: deuteranomaly and protanomaly (red-green color blindness), but also ran wider tests. I used Photoshop and <a href=\"https://github.com/oftheheadland/Colorblindly\" target=\"_blank\" rel=\"noreferrer noopener\">Colorblindly (Chrome extension)</a> for some rudimentary checks.</p>\n\n\n\n<h3><code>prefers-reduced-motion</code></h3>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The <strong><code>prefers-reduced-motion</code></strong> CSS media feature is used to detect if the user has requested that the system minimize the amount of non-essential motion it uses.</p><cite>—<a rel=\"noreferrer noopener\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\" target=\"_blank\">MDN</a></cite></blockquote>\n\n\n\n<p>This site doesn&#8217;t contain many animations (besides the <em>Little Sausage Angels</em> you&#8217;ll see if you hit &#8220;Share&#8221;), but I was wondering if people who rely on <code>prefers-reduced-motion</code> would like the background color to stay constant.</p>\n\n\n\n<p>The short answer is: I don&#8217;t know. My intuition is that rotating colors don&#8217;t really qualify as motion, but my experience and understanding of the problem is, to say the least, limited. In situations like this, I&#8217;d rather depend on user research than guesses.</p>\n\n\n\n<p>Luckily, the site had its five minutes of fame on Reddit which proved to be a decent opportunity to collect feedback. None of the users brought up an issue with the background effect so far. I&#8217;m also lucky enough to know a bunch of accessibility specialists, such as <a rel=\"noreferrer noopener\" href=\"https://twitter.com/a_sandrina_p\" target=\"_blank\">Sandrina Pereira</a>. Her suggestion was that (a) background animations definitely qualify as motion, and (b) perhaps the effect feels natural because it&#8217;s a direct result of a user interaction.</p>\n\n\n\n<h3>Summary</h3>\n\n\n\n<p>The late-90s Geocities web felt playful and weird. It was fun in an uninhibited, somewhat less performative, way. I wanted to incorporate some of this look and feel in the site. But still, I didn&#8217;t want to make it feel esoteric to the point where you&#8217;d need to up your hipsterdom-level to 9000 and browse it exclusively throught Netscape 7. All of that, while listening to the new Nirvana <em>Unplugged</em> album.</p>\n\n\n\n<p>I still wanted decent UX on mobile and desktop, and some space for easter eggs (something you can&#8217;t do when living in the strange and abusive relationship with social media we&#8217;ve grown so accustomed to).</p>\n\n\n\n<p>As a kid, I had built six websites before I even got access to the Internet for the first time. Now, after being burned out for three years, even considering changing my job, it was the first time I genuinely enjoyed coding. I forgot how much fun it was!</p>\n\n\n\n<p>Now, go out, pet your cat, and make stuff!</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>P.S. Check out <a rel=\"noreferrer noopener\" href=\"https://www.cameronsworld.net/\" target=\"_blank\">Cameron&#8217;s World</a>.</p>\n\n\n\n<p>P.P.S. The code for interactive diagrams <a href=\"https://github.com/paprikka/use-rainbow-article-examples\" rel=\"noopener\">can be found on GitHub</a>.</p>\n\n\n\n<h3>Footnotes</h3>\n\n\n\n<ol><li><span id=\"footnote-1\">Hence</span> the K component in CMYK meaning &#8220;black.&#8221; Using B would be confusing as it means &#8220;blue&#8221; in other color models. <a href=\"#fn1\">⮑</a></li><li><span id=\"footnote-2\">It&#8217;s</span> not perfect since the perceptual color space differs from what&#8217;s described using RGB/HSL. <a href=\"#fn2\">⮑</a></li></ol>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/userainbow/\">useRainbow()</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I took a break from work and started some small, personal projects (toys). One of those small projects is potato.horse where I keep all of my doodles, visual short stories and jokes. Check it out!\n\n\n\nHowever, this post is not about my break from work, other experiments, or the site itself. People seem to like one particular technique I used in the design, notably, the background effect applied that transitions between colors when the user browses the content:\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome asked me how this effect was implemented (including going as far as reading the minified code, which is very flattering).\n\n\n\nSo, here’s a quick gist, followed up with some context:\n\n\n\nexport const useRainbowBg = () =>\nuseEffect(() => {\n  const cb = () => {\n    const viewportHeight = window.innerHeight\n    const contentHeight = document.body.getBoundingClientRect().height\n    const viewportsPerRotation = Math.min(\n      3,\n      contentHeight / viewportHeight\n    )\n    const from = 51\n    const progress =\n      window.scrollY / (viewportHeight * viewportsPerRotation)\n    const h = (from + 360 * progress) % 360\n\n    document.body.style.backgroundColor = `hsl(${h}deg, 100%, 50%)`\n  }\n  window.addEventListener('scroll', cb, { passive: true })\n  return () => window.removeEventListener('scroll', cb)\n})\n\n\n\nIn short, I map the scroll position into the hue in the HSL color notation. Let’s break this down.\n\n\n\nColor models\n\n\n\nThere are many ways of describing colors in CSS, with the two most common ones being RGB (left) and HSL (right):\n\n\n\nCodePen Embed Fallback\n\n\n\nRGB is an additive color palette. This means that mixing 100% of red, green and blue produces white, mixing 100% red and 100% green but 0% blue produces yellow, and so on. This is different from, say, using oil paint or the CMYK color model, where the resulting tone would be black(-ish)1.\n\n\n\nWe’re used to this approach because it’s easy to describe in code, but specifying colors in terms of hue, saturation and luminosity seems more natural, especially if you come from a design background, or… you know, are a human being using a human language.\n\n\n\nWe’ve gotten used to RGB as developers, but in spoken language, using it would feel unnatural and confusing. Façade would be very hard to use in RGB.\n\n\n\nOn the other hand, HSL can often be much more intuitive to work with. For instance, if I want to make a color slightly colder, I can just move the hue slider a bit towards blue and I should get closer to what I have in mind. With RGB, if we make the color appear colder by including more blue, the resulting tone will be a bit brighter as the blue component contributes to the overall lightness. This means that you’d have to lower the red and green values to compensate.\n\n\n\nTo see how this works in practice, try maxing out the blue color in the example below.\n\n\n\nCodePen Embed Fallback\n\n\n\nThe first thing that stands out is that all tones are shifted towards blue and the overall brightness of the picture is increased. In the case of the effect we’re discussing, that would be undesirable.\n\n\n\nNow, let’s try to do the same with the HSL color circle. Drag the slider to the left, by ca. 90 degrees:\n\n\n\nCodePen Embed Fallback\n\n\n\nIn this scenario, using HSL not only turns Susan into a vampire, but also maintains a similar2 level of brightness. And that’s exactly what I’m looking for.\n\n\n\nSo, what I mean by saying this:\n\n\n\nHow does this work? In short, I map the scroll position into the hue in the HSL color notation. Rafal, 2 days earlier\n\n\n\n…is that that every time we detect a scroll event, I try to map it to an angle on the hue circle:\n\n\n\nCodePen Embed Fallback\n\n\n\nI didn’t want to start with red as it would make me hungry and the base yellow fits the design a bit better, so I applied a small initial shift—hence const from = 51 set as the initial offset.\n\n\n\nAnd, as far as the basic implementation goes, that’s it!\n\n\n\nNow, there are three other areas of improvement.\n\n\n\nuseRainbow performance\n\n\n\nWe’re triggering a repaint on every scroll, so I was a bit worried that older mobile devices, or even some hi-end laptops plugged in to 4k screens might not be able to maintain solid 60fps. But, I’m happy with the results so far. Using passive event listeners provided a bit of a boost, especially on mobile.\n\n\n\nIf I realize that performance is a problem, especially with more content down the line, I’ll probably focus on:\n\n\n\nremoving the unnecessary call to getBoundingClientRect on every scroll handler call, anddeferring or throttling background color changes using requestAnimationFrame.\n\n\n\nI expect the first improvement to have some impact, but the benefits of the second one should be negligible.\n\n\n\nMeasure before optimizing. Obsessing about the performance only makes sense when issues become noticeable, be it through a drop in framerate or battery impact. Your iPhone Pro has more computing power than many low-end laptops, so it’s a good idea to test on those devices too. It’s good to have a crappy old Android phone exacly for that purpose if you can spare a few quid.\n\n\n\nPerceptually uniform color spaces\n\n\n\nYou might’ve noticed that in the previous illustrations some fully saturated colors seemed darker than others. That’s because the color spaces we normally use when coding don’t reflect the way the human eye works. I’ll leave the in-depth explanation to someone much more experienced than me, but suffice to say (gross oversimplification alert!) that, generally, the same amount of red/green/yellow will appear brighter than blue. This means that in some cases the text on the page will be harder to read.\n\n\n\nCodePen Embed Fallback\n\n\n\nFor now, this isn’t an issue as I’ve just put this thing online and titles serve a secondary purpose. But there’s a solution to the problem and it’s not overly complicated: use a perceptually uniform color space. There’s a bunch of libraries that do it out of the box, both in JavaScript/TypeScript and CSS/Sass/<pick your CSS flavor here>. hsluv seems like a good starting point.\n\n\n\nAccessiblity\n\n\n\nNote that I’ll be focusing on the visual effect itself and not discussing the rest of the site (e.g. alt tags, document structure, etc…). I’d like to focus on contrast, color blindness and people who rely on prefers-reduced-motion. The site is a living document; there’s always so much to improve. For instance, contrast can be an issue in a few, non-critical places. I’m happy to accept feedback and implement it: hit me up!.\n\n\n\ncolor blindness\n\n\n\nI wanted to make sure that the effect doesn’t break the site completely for people with color blindness. So I focused on the most common types: deuteranomaly and protanomaly (red-green color blindness), but also ran wider tests. I used Photoshop and Colorblindly (Chrome extension) for some rudimentary checks.\n\n\n\nprefers-reduced-motion\n\n\n\nThe prefers-reduced-motion CSS media feature is used to detect if the user has requested that the system minimize the amount of non-essential motion it uses.—MDN\n\n\n\nThis site doesn’t contain many animations (besides the Little Sausage Angels you’ll see if you hit “Share”), but I was wondering if people who rely on prefers-reduced-motion would like the background color to stay constant.\n\n\n\nThe short answer is: I don’t know. My intuition is that rotating colors don’t really qualify as motion, but my experience and understanding of the problem is, to say the least, limited. In situations like this, I’d rather depend on user research than guesses.\n\n\n\nLuckily, the site had its five minutes of fame on Reddit which proved to be a decent opportunity to collect feedback. None of the users brought up an issue with the background effect so far. I’m also lucky enough to know a bunch of accessibility specialists, such as Sandrina Pereira. Her suggestion was that (a) background animations definitely qualify as motion, and (b) perhaps the effect feels natural because it’s a direct result of a user interaction.\n\n\n\nSummary\n\n\n\nThe late-90s Geocities web felt playful and weird. It was fun in an uninhibited, somewhat less performative, way. I wanted to incorporate some of this look and feel in the site. But still, I didn’t want to make it feel esoteric to the point where you’d need to up your hipsterdom-level to 9000 and browse it exclusively throught Netscape 7. All of that, while listening to the new Nirvana Unplugged album.\n\n\n\nI still wanted decent UX on mobile and desktop, and some space for easter eggs (something you can’t do when living in the strange and abusive relationship with social media we’ve grown so accustomed to).\n\n\n\nAs a kid, I had built six websites before I even got access to the Internet for the first time. Now, after being burned out for three years, even considering changing my job, it was the first time I genuinely enjoyed coding. I forgot how much fun it was!\n\n\n\nNow, go out, pet your cat, and make stuff!\n\n\n\n\n\n\n\nP.S. Check out Cameron’s World.\n\n\n\nP.P.S. The code for interactive diagrams can be found on GitHub.\n\n\n\nFootnotes\n\n\n\nHence the K component in CMYK meaning “black.” Using B would be confusing as it means “blue” in other color models. ⮑It’s not perfect since the perceptual color space differs from what’s described using RGB/HSL. ⮑\n\nuseRainbow() originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-07T14:59:04.000Z",
      "date_modified": "2022-01-07T14:59:04.000Z",
      "_plugin": {
        "pageFilename": "de046724b3ee498ac2d90f88778a555dd3faddc0be31c34d4c060d6dd25e14fd.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360320",
      "url": "https://css-tricks.com/a-new-container-query-polyfill-that-just-works/",
      "title": "A New Container Query Polyfill That Just Works",
      "summary": "There is an easy-to-use CSS container query polyfill now. You essentially conditionally load it and forget about it. Then write spec-compliant container queries code.\n\nA New Container Query Polyfill That Just Works originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>There is now <a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill\" rel=\"noopener\">a polyfill</a> for <a href=\"https://css-tricks.com/a-cornucopia-of-container-queries/\">Container Queries</a> that behaves as perfectly as a polyfill should:</p>\n\n\n\n<ol><li>You conditionally load it when you detect the browser doesn&#8217;t support Container Queries.</li><li>You write CSS as you normally would, including current-spec-compliant Container Queries syntax code.</li><li>It just works.</li></ol>\n\n\n\n<p>It&#8217;s pretty great to have a container query polyfill that is this easy to use and from Chrome itself, the first-movers as far as early test implementations. Looks like <a href=\"https://twitter.com/dassurma?lang=en\" rel=\"noopener\">Surma</a> put it together — thanks Surma! </p>\n\n\n\n<span id=\"more-360320\"></span>\n\n\n\n<p class=\"is-style-explanation\">There was a Container Query polyfill from Jonathan Neal called <a href=\"https://github.com/jsxtools/cqfill\" rel=\"noopener\">cqfill</a> that predates this. I&#8217;m not sure if it&#8217;s officially deprecated, but it required extra non-spec CSS to work and PostCSS processing, so I&#8217;d consider it deprecated in favor of this newer polyfill.</p>\n\n\n\n<p>Loading the polyfill is like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Support Test\nconst supportsContainerQueries = \"container\" in document.documentElement.style;\n\n// Conditional Import\nif (!supportsContainerQueries) {\n  import(\"https://cdn.skypack.dev/container-query-polyfill\");\n}</code></pre>\n\n\n\n<p>You can pull it from npm or use as a <code>&lt;script&gt;</code>, but this way seems best to me to keep things light and easy.</p>\n\n\n\n<p>Then you&#8217;re free to use the syntax for a container query in CSS. Say you have a weather widget in HTML. You&#8217;ll need an extra wrapper element for your queries. That&#8217;s just the rule: <em>you can&#8217;t query the thing you style</em>. </p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"weather-wrap\">\n  &lt;dl class=\"weather\">\n    &lt;div>\n      &lt;dt>Sunday&lt;/dt>\n      &lt;dd>\n        &lt;b>26°&lt;/b> 7°\n      &lt;/dd>\n    &lt;/div>\n    &lt;div>\n      &lt;dt>Monday&lt;/dt>\n      &lt;dd>\n        &lt;b>34°&lt;/b> 11°\n      &lt;/dd>\n    &lt;/div>\n    &lt;!-- etc -->\n  &lt;/dl>\n&lt;/div></code></pre>\n\n\n\n<p>The wrapper is instantiated as a container:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"2\"><code markup=\"tt\">.weather-wrap {\n  container: inline-size / weather-wrapper;\n  /* Shorthand for: */\n  /* container-type: inline-size; */\n  /* container-name: weather-wrapper; */\n\n  /* For quick testing, do this to get a resize handle on desktop: */\n  /* resize: both; */\n  /* overflow: hidden; */\n}</code></pre>\n\n\n\n<p>Then you write any global styling for that component, as well as container query scoped styles:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4\"><code markup=\"tt\">.weather {\n  display: flex;\n}\n@container weather-wrapper size(max-width: 700px) {\n  .weather {\n    flex-direction: column;\n  }\n}</code></pre>\n\n\n\n<h3>Container Queries polyfill example</h3>\n\n\n\n<p>Here&#8217;s that slightly more fleshed-out demo of the Container Query polyfill using an actual weather widget:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLzKavz\" src=\"//codepen.io/anon/embed/yLzKavz?height=650&amp;theme-id=1&amp;slug-hash=yLzKavz&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLzKavz\" title=\"CodePen Embed yLzKavz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I first saw this <a href=\"https://www.bram.us/2021/11/26/a-first-look-at-container-query-polyfill-a-polyfill-for-css-container-queries/\" rel=\"noopener\">over on Bramus&#8217; blog</a>, and he&#8217;s got a classic card demo going with this Container Query polyfill. Scroll up and down. You&#8217;ll see a row of bear cards at the top (if your browser window is wide enough), and then similar bear cards in different layout positions below that change into nicer formats when they can, based on the container query.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYxNpeE\" src=\"//codepen.io/anon/embed/LYxNpeE?height=850&amp;theme-id=1&amp;slug-hash=LYxNpeE&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYxNpeE\" title=\"CodePen Embed LYxNpeE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Container Query polyfill browser support</h3>\n\n\n\n<p>The polyfill <a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill\" rel=\"noopener\">docs</a> say:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>The polyfill relies on&nbsp;<a href=\"https://caniuse.com/resizeobserver\" rel=\"noopener\"><code>ResizeObserver</code></a>,&nbsp;<a href=\"https://caniuse.com/mutationobserver\" rel=\"noopener\"><code>MutationObserver</code></a>&nbsp;and&nbsp;<a href=\"https://caniuse.com/css-matches-pseudo\" rel=\"noopener\"><code>:is()</code></a>. Therefore, it should work in all modern browsers, specifically Chrome/Edge 88+, Firefox 78+ and Safari 14+.</p><p><a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill#feature-support--limitations\" rel=\"noopener\"></a></p></blockquote>\n\n\n\n<p>There are all sorts of other minor little caveats covered in those docs, including what it does and doesn&#8217;t support. Seems like mostly niche stuff to me — the main/typical use cases are covered.</p>\n\n\n\n<h3>A game changer?</h3>\n\n\n\n<p>As I write, we&#8217;ve seen behind-flag support for Container Queries in Chrome, and it is an official spec draft now:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Today&#39;s CSSWG call:<br><br>🥳 First Public Working Draft of Contain Level 3 (container queries)<br>🥳 FPWD of Cascade Level 6 (scope)<br><br>This means the proposals have graduated to being official work-in-progress specifications. Still a lot to do before browsers ship, but it&#39;s a big step!</p>&mdash; Mia, on Bass (@TerribleMia) <a href=\"https://twitter.com/TerribleMia/status/1468632950212341770?ref_src=twsrc%5Etfw\" rel=\"noopener\">December 8, 2021</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>That&#8217;s extremely exciting and points heavily toward browsers actually shipping with Container Queries, even if the syntax changes a bit on the way (it already has a number of times). But, of course, we have no idea if/when Container Queries do ship — and when that magical threshold is crossed, we also don&#8217;t know where we can use them without much worry, like we can with flexbox and grid now.</p>\n\n\n\n<p>That &#8220;just use it&#8221; date is probably a decent ways off, but if you&#8217;re into the idea of polyfilling and being careful with progressive enhancement, I&#8217;d say the date for using Container Queries could be right now-ish. Looks to me like the polyfill script comes across the wire at 2.8kb, so it&#8217;s fairly trivial in size for something so important. </p>\n\n\n\n<p>I suspect this polyfill will skyrocket usage of Container Queries in this coming year.</p>\n\n\n\n<h3>FOUC?</h3>\n\n\n\n<p>The fact that your styles only correctly apply after a JavaScript file is downloaded and executed puts sites into Flash of Unstyled Content (FOUC) territory. <a href=\"https://cln.sh/k2jDfJ\" rel=\"noopener\">Here&#8217;s a video recording</a> where I can see it on my own demo. I&#8217;m not sure there is a way around this other than intentionally delaying rendering, which is generally considered a no-no. Similar to loading web fonts, FOUC is probably a good thing as it means your content is never hidden or delayed, even if the shifts aren&#8217;t ideal. The FOUC should go away once browser support lands and the polyfill stops loading at all.</p>\n\n\n\n<p>Have fun polyfilling container queries! I&#8217;d love to see more demos  of it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1316\" height=\"1445\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=1316%2C1445&#038;ssl=1\" alt=\"GitHub Repo for the Container Query Polyfill\" class=\"wp-image-360329\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?w=1316&amp;ssl=1 1316w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=273%2C300&amp;ssl=1 273w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=933%2C1024&amp;ssl=1 933w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=768%2C843&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=1000%2C1098&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-new-container-query-polyfill-that-just-works/\">A New Container Query Polyfill That Just Works</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "There is now a polyfill for Container Queries that behaves as perfectly as a polyfill should:\n\n\n\nYou conditionally load it when you detect the browser doesn’t support Container Queries.You write CSS as you normally would, including current-spec-compliant Container Queries syntax code.It just works.\n\n\n\nIt’s pretty great to have a container query polyfill that is this easy to use and from Chrome itself, the first-movers as far as early test implementations. Looks like Surma put it together — thanks Surma! \n\n\n\n\n\n\n\nThere was a Container Query polyfill from Jonathan Neal called cqfill that predates this. I’m not sure if it’s officially deprecated, but it required extra non-spec CSS to work and PostCSS processing, so I’d consider it deprecated in favor of this newer polyfill.\n\n\n\nLoading the polyfill is like this:\n\n\n\n// Support Test\nconst supportsContainerQueries = \"container\" in document.documentElement.style;\n\n// Conditional Import\nif (!supportsContainerQueries) {\n  import(\"https://cdn.skypack.dev/container-query-polyfill\");\n}\n\n\n\nYou can pull it from npm or use as a <script>, but this way seems best to me to keep things light and easy.\n\n\n\nThen you’re free to use the syntax for a container query in CSS. Say you have a weather widget in HTML. You’ll need an extra wrapper element for your queries. That’s just the rule: you can’t query the thing you style. \n\n\n\n<div class=\"weather-wrap\">\n  <dl class=\"weather\">\n    <div>\n      <dt>Sunday</dt>\n      <dd>\n        <b>26°</b> 7°\n      </dd>\n    </div>\n    <div>\n      <dt>Monday</dt>\n      <dd>\n        <b>34°</b> 11°\n      </dd>\n    </div>\n    <!-- etc -->\n  </dl>\n</div>\n\n\n\nThe wrapper is instantiated as a container:\n\n\n\n.weather-wrap {\n  container: inline-size / weather-wrapper;\n  /* Shorthand for: */\n  /* container-type: inline-size; */\n  /* container-name: weather-wrapper; */\n\n  /* For quick testing, do this to get a resize handle on desktop: */\n  /* resize: both; */\n  /* overflow: hidden; */\n}\n\n\n\nThen you write any global styling for that component, as well as container query scoped styles:\n\n\n\n.weather {\n  display: flex;\n}\n@container weather-wrapper size(max-width: 700px) {\n  .weather {\n    flex-direction: column;\n  }\n}\n\n\n\nContainer Queries polyfill example\n\n\n\nHere’s that slightly more fleshed-out demo of the Container Query polyfill using an actual weather widget:\n\n\n\nCodePen Embed Fallback\n\n\n\nI first saw this over on Bramus’ blog, and he’s got a classic card demo going with this Container Query polyfill. Scroll up and down. You’ll see a row of bear cards at the top (if your browser window is wide enough), and then similar bear cards in different layout positions below that change into nicer formats when they can, based on the container query.\n\n\n\nCodePen Embed Fallback\n\n\n\nContainer Query polyfill browser support\n\n\n\nThe polyfill docs say:\n\n\n\nThe polyfill relies on ResizeObserver, MutationObserver and :is(). Therefore, it should work in all modern browsers, specifically Chrome/Edge 88+, Firefox 78+ and Safari 14+.\n\n\n\nThere are all sorts of other minor little caveats covered in those docs, including what it does and doesn’t support. Seems like mostly niche stuff to me — the main/typical use cases are covered.\n\n\n\nA game changer?\n\n\n\nAs I write, we’ve seen behind-flag support for Container Queries in Chrome, and it is an official spec draft now:\n\n\n\n\nToday's CSSWG call:🥳 First Public Working Draft of Contain Level 3 (container queries)🥳 FPWD of Cascade Level 6 (scope)This means the proposals have graduated to being official work-in-progress specifications. Still a lot to do before browsers ship, but it's a big step!— Mia, on Bass (@TerribleMia) December 8, 2021\n\n\n\n\nThat’s extremely exciting and points heavily toward browsers actually shipping with Container Queries, even if the syntax changes a bit on the way (it already has a number of times). But, of course, we have no idea if/when Container Queries do ship — and when that magical threshold is crossed, we also don’t know where we can use them without much worry, like we can with flexbox and grid now.\n\n\n\nThat “just use it” date is probably a decent ways off, but if you’re into the idea of polyfilling and being careful with progressive enhancement, I’d say the date for using Container Queries could be right now-ish. Looks to me like the polyfill script comes across the wire at 2.8kb, so it’s fairly trivial in size for something so important. \n\n\n\nI suspect this polyfill will skyrocket usage of Container Queries in this coming year.\n\n\n\nFOUC?\n\n\n\nThe fact that your styles only correctly apply after a JavaScript file is downloaded and executed puts sites into Flash of Unstyled Content (FOUC) territory. Here’s a video recording where I can see it on my own demo. I’m not sure there is a way around this other than intentionally delaying rendering, which is generally considered a no-no. Similar to loading web fonts, FOUC is probably a good thing as it means your content is never hidden or delayed, even if the shifts aren’t ideal. The FOUC should go away once browser support lands and the polyfill stops loading at all.\n\n\n\nHave fun polyfilling container queries! I’d love to see more demos  of it.\n\n\n\n\n\n\n\n\n\nA New Container Query Polyfill That Just Works originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-06T22:28:46.000Z",
      "date_modified": "2022-01-06T22:28:46.000Z",
      "_plugin": {
        "pageFilename": "4e07bb563a335f8238d683050129d3671ebccd8f9d5adc5a556c2445b2635c52.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=358917",
      "url": "https://css-tricks.com/the-search-for-a-fixed-background-effect-with-inline-images/",
      "title": "The Search For a Fixed Background Effect With Inline Images",
      "summary": "I was working on a client project a few days ago and wanted to create a certain effect on an <img>. See, background images can do the effect I was looking for somewhat easily with background-attachment: fixed;. With …\n\nThe Search For a Fixed Background Effect With Inline Images originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I was working on a client project a few days ago and wanted to create a certain effect on an <code>&lt;img&gt;</code>. See, background images can do the effect I was looking for somewhat easily with <code>background-attachment: fixed;</code>. With that in place, a background image stays in place—even when the page scrolls. It isn’t used all that often, so the effect can look unusual and striking, especially when used sparingly.</p>\n\n\n\n<p>It took me some time to figure out how to achieve the same effect only with an inline image, rather than a CSS background image. This is a video of the effect in action:</p>\n\n\n\n<span id=\"more-358917\"></span>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"the20mysterious20css20property-mp4\" width='500' height='313' src='https://videopress.com/embed/2ciWn57o?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p class=\"is-style-explanation\">The exact code for the above demo is <a href=\"https://github.com/lazaralex98/nate-davis/blob/main/components/HomePage/BenefitsWithAttachementEffect.jsx\" rel=\"noopener\">available in this Git repo</a>. Just note that it’s a Next.js project. We’ll get to a CodePen example with raw HTML in a bit.</p>\n\n\n\n<h3>Why use <code>&lt;img&gt;</code> instead of <code>background-image</code>?</h3>\n\n\n\n<p>The are a number of reasons I wanted this for my project:</p>\n\n\n\n<ul><li>It’s easier to lazy load (e.g. <code>&lt;img loading=\"lazy\"… &gt;</code>.</li><li>It provides better SEO (not to mention accessibility), thanks to <code>alt</code> text.</li><li>It’s possible to <a href=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/#using-srcset\" data-type=\"URL\" data-id=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/#using-srcset\">use <code>srcset</code>/<code>sizes</code></a> to improve the loading performance.</li><li>It’s possible to <a href=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/#using-picture\">use the <code>&lt;picture&gt;</code> tag</a> to pick the best image size and format for the user’s browser.</li><li>It allows users to download save the image (without resorting to DevTools).</li></ul>\n\n\n\n<p>Overall, it’s better to use the image tag where you can, particularly if the image could be considered content and not decoration. So, I wound up landing on a technique that uses CSS <code>clip-path</code>. We’ll get to that in a moment, right after we first look at the <code>background-image</code> method for a nice side-by-side comparison of both approaches.</p>\n\n\n\n<h3>1. Using CSS <code>background-image</code></h3>\n\n\n\n<p>This is the “original” way to pull off a fixed scrolling effect. Here’s the CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero-section {\n  background-image: url(\"nice_bg_image.jpg\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center; \n  background-attachment: fixed;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLoWoeR\" src=\"//codepen.io/anon/embed/yLoWoeR?height=550&amp;theme-id=1&amp;slug-hash=yLoWoeR&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLoWoeR\" title=\"CodePen Embed yLoWoeR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But as we just saw, this approach isn’t ideal for some situations because it relies on the CSS <code>background-image</code> property to call and load the image. That means the image is technically not considered content—and thus unrecognized by screen readers. If we’re working with an image that is part of the content, then we really ought to make it accessible so it is consumed like content rather than decoration.</p>\n\n\n\n<p>Otherwise, this technique works well, but only <em>if the image spans the whole width of the viewport and/or is centered</em>. If you have an image on the right or left side of the page like the example, you’ll run into a whole number of positioning issues because <code>background-position</code> is relative to the center of the viewport.</p>\n\n\n\n<p>Fixing it requires a few media queries to make sure it is positioned properly on all devices.</p>\n\n\n\n<h3>2. Using the <code>clip-path</code> trick on an inline image</h3>\n\n\n\n<p><a href=\"https://stackoverflow.com/questions/33550450/how-to-use-css-background-attachment-in-img-tag/68466386#68466386\" rel=\"noopener\">Someone on StackOverflow</a> shared this <code>clip-path</code> trick and it gets the job done well. You also get to keep using the<code>&lt;img&gt;</code> tag, which, as we covered above, might be advantageous in some circumstances, especially where an image is part of the content rather than pure decoration.</p>\n\n\n\n<p>Here’s the trick:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4,8,9\"><code markup=\"tt\">.image-container {\n  position: relative;\n  height: 200px;\n  clip-path: inset(0);\n}\n\n.image {\n  object-fit: cover;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}</code></pre>\n\n\n\n<p>Check it out in action:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWvYVwG\" src=\"//codepen.io/anon/embed/NWvYVwG?height=450&amp;theme-id=1&amp;slug-hash=NWvYVwG&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWvYVwG\" title=\"CodePen Embed NWvYVwG\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now, before we rush out and plaster this snippet everywhere, it has its own set of downsides. For example, the code feels <em>a bit lengthy</em> to me for such a simple effect. But, even more important is the fact that working with <code>clip-path</code> comes with some implications as well. For one, I can’t just slap a <code>border-radius: 10px;</code> in there like I did in the earlier example to round the image’s corners. That won’t work—it requires making rounded corners from the clipping path itself.</p>\n\n\n\n<p>Another example: I don’t know how to position the image <em>within</em> the <code>clip-path</code>. Again, this might be a matter of knowing <code>clip-path</code> really well and drawing it where you need to, or cropping the image itself ahead of time as needed.</p>\n\n\n\n<h3>Is there something better?</h3>\n\n\n\n<p>Personally, I gave up on using the fixed scrolling effect on inline images and am back to using a CSS background image—which I know is kind of limiting.</p>\n\n\n\n<p>Have you ever tried pulling this off, particularly with an inline image, and managed it well? I’d love to hear!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-search-for-a-fixed-background-effect-with-inline-images/\">The Search For a Fixed Background Effect With Inline Images</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I was working on a client project a few days ago and wanted to create a certain effect on an <img>. See, background images can do the effect I was looking for somewhat easily with background-attachment: fixed;. With that in place, a background image stays in place—even when the page scrolls. It isn’t used all that often, so the effect can look unusual and striking, especially when used sparingly.\n\n\n\nIt took me some time to figure out how to achieve the same effect only with an inline image, rather than a CSS background image. This is a video of the effect in action:\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe exact code for the above demo is available in this Git repo. Just note that it’s a Next.js project. We’ll get to a CodePen example with raw HTML in a bit.\n\n\n\nWhy use <img> instead of background-image?\n\n\n\nThe are a number of reasons I wanted this for my project:\n\n\n\nIt’s easier to lazy load (e.g. <img loading=\"lazy\"… >.It provides better SEO (not to mention accessibility), thanks to alt text.It’s possible to use srcset/sizes to improve the loading performance.It’s possible to use the <picture> tag to pick the best image size and format for the user’s browser.It allows users to download save the image (without resorting to DevTools).\n\n\n\nOverall, it’s better to use the image tag where you can, particularly if the image could be considered content and not decoration. So, I wound up landing on a technique that uses CSS clip-path. We’ll get to that in a moment, right after we first look at the background-image method for a nice side-by-side comparison of both approaches.\n\n\n\n1. Using CSS background-image\n\n\n\nThis is the “original” way to pull off a fixed scrolling effect. Here’s the CSS:\n\n\n\n.hero-section {\n  background-image: url(\"nice_bg_image.jpg\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center; \n  background-attachment: fixed;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nBut as we just saw, this approach isn’t ideal for some situations because it relies on the CSS background-image property to call and load the image. That means the image is technically not considered content—and thus unrecognized by screen readers. If we’re working with an image that is part of the content, then we really ought to make it accessible so it is consumed like content rather than decoration.\n\n\n\nOtherwise, this technique works well, but only if the image spans the whole width of the viewport and/or is centered. If you have an image on the right or left side of the page like the example, you’ll run into a whole number of positioning issues because background-position is relative to the center of the viewport.\n\n\n\nFixing it requires a few media queries to make sure it is positioned properly on all devices.\n\n\n\n2. Using the clip-path trick on an inline image\n\n\n\nSomeone on StackOverflow shared this clip-path trick and it gets the job done well. You also get to keep using the<img> tag, which, as we covered above, might be advantageous in some circumstances, especially where an image is part of the content rather than pure decoration.\n\n\n\nHere’s the trick:\n\n\n\n.image-container {\n  position: relative;\n  height: 200px;\n  clip-path: inset(0);\n}\n\n.image {\n  object-fit: cover;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n\n\n\nCheck it out in action:\n\n\n\nCodePen Embed Fallback\n\n\n\nNow, before we rush out and plaster this snippet everywhere, it has its own set of downsides. For example, the code feels a bit lengthy to me for such a simple effect. But, even more important is the fact that working with clip-path comes with some implications as well. For one, I can’t just slap a border-radius: 10px; in there like I did in the earlier example to round the image’s corners. That won’t work—it requires making rounded corners from the clipping path itself.\n\n\n\nAnother example: I don’t know how to position the image within the clip-path. Again, this might be a matter of knowing clip-path really well and drawing it where you need to, or cropping the image itself ahead of time as needed.\n\n\n\nIs there something better?\n\n\n\nPersonally, I gave up on using the fixed scrolling effect on inline images and am back to using a CSS background image—which I know is kind of limiting.\n\n\n\nHave you ever tried pulling this off, particularly with an inline image, and managed it well? I’d love to hear!\n\nThe Search For a Fixed Background Effect With Inline Images originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-06T15:58:55.000Z",
      "date_modified": "2022-01-06T15:58:55.000Z",
      "_plugin": {
        "pageFilename": "dc525257eb5669140b34bc705daa4263aeff9e96703c9e6cf6e0328424c0bf73.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359736",
      "url": "https://css-tricks.com/notes-on-josh-comeaus-custom-css-reset/",
      "title": "Notes on Josh Comeau’s Custom CSS Reset",
      "summary": "We recently talked with Elad Shechter on his new CSS reset, and shortly after that Josh Comeau blogged his. \nWe’re in something of a new era of CSS resets where… you kind of don’t need one? There isn’t …\n\nNotes on Josh Comeau’s Custom CSS Reset originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>We recently talked with Elad Shechter on <a href=\"https://css-tricks.com/an-interview-with-elad-shechter-on-the-new-css-reset/\">his new CSS reset</a>, and shortly after that Josh Comeau <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/\" rel=\"noopener\">blogged his</a>. </p>\n\n\n\n<p>We&#8217;re in something of a new era of CSS resets where&#8230; you kind of don&#8217;t need one? There isn&#8217;t <em>that</em> many major differences between browsers on default styling, and by the time you&#8217;re off and running styling stuff, you&#8217;ve probably steamrolled things into place. And so perhaps &#8220;modern&#8221; CSS resets are more of a collection of opinionated default styles that do useful things that you want on all your new projects because, well, that&#8217;s how you roll. </p>\n\n\n\n<span id=\"more-359736\"></span>\n\n\n\n<p>Looking through Josh&#8217;s choices, that&#8217;s what it seems like to me: a collection of things that aren&#8217;t particularly opinionated about design, but <em>assist</em> the design by being things that pretty much any project will want.</p>\n\n\n\n<p>I&#8217;m gonna <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/#the-css-reset\" rel=\"noopener\">go through it</a> and toss out &#x1f525; flamin&#8217; hot opinions. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">*, *::before, *::after {\n  box-sizing: border-box;\n}</code></pre>\n\n\n\n<p>Heck yes. We used to consider this <a href=\"https://css-tricks.com/international-box-sizing-awareness-day/\">a global holiday</a> &#8217;round here. Although, with more and more layout being handled by grid and flexbox, I&#8217;m feeling like this is slightly less useful these days. When you&#8217;re setting up a layout with <code>fr</code> units and flexin&#8217; stuff, the <code>box-sizing</code> model doesn&#8217;t come into play all that much, even when <code>padding</code> and <code>border</code> are involved. But hey, I still prefer it to be in place. I do think if it goes into a CSS reset it should <a href=\"https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/\">use the inheritance model</a> though, as it&#8217;s easier to undo on a component that way. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">* {\n  margin: 0;\n}</code></pre>\n\n\n\n<p>This is basically why the CSS-Tricks logo &#8220;star&#8221; exists. I used to love this little snippet in my CSS resets. There was a period where it started to feel heavy-handed, but I think I&#8217;m back to liking it. I like how explicit you have to be when applying any margin at all. Personally, I&#8217;d rock <code>padding: 0;</code> too, as list elements tend to have some padding pushing them around. If you&#8217;re nuking spacing stuff, may as well nuke it all.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html, body {\n  height: 100%;\n}</code></pre>\n\n\n\n<p>Probably a good plan. Josh says &#8220;Allow percentage-based heights in the application,&#8221; which I can&#8217;t say comes up much in my day-today, but what it does is stuff like the body background not filling the space the way you might expect it to.</p>\n\n\n\n<p>Too bad <code>body { height: 100vh; }</code> isn&#8217;t enough here, but I feel like that&#8217;s not as reliable for some reason I can&#8217;t think of right now. <a href=\"https://css-tricks.com/css-fix-for-100vh-in-mobile-webkit/\">Maybe something to do with the footer navigation in iOS Safari?</a></p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}</code></pre>\n\n\n\n<p>I can&#8217;t get into the <code>-webkit-font-smoothing: antialiased;</code> thing. I think it tends to make type dramatically thin and I don&#8217;t love it. I don&#8217;t mind it as a tool, but I wouldn&#8217;t globally apply it on all my projects. </p>\n\n\n\n<p>I also generally like to put global typographic <em>sizing</em> stuff on the <code>html</code> selector instead, just because the &#8220;root&#8221; part of <code>rem</code> implies the <code>&lt;html&gt;</code> element — not the <code>&lt;body&gt;</code> — and I like sizing stuff in <code>rem</code> and then adjusting the root <code>font-size</code> at the root level in media queries.</p>\n\n\n\n<p>That <code>1.5</code> value feels like a good default <code>line-height</code> (more of a 1.4 guy myself, but I&#8217;d rather go up than down). But as soon as it&#8217;s set, I feel magnetically pulled into reducing it for heading elements where it&#8217;s <em>always</em> too much. That could happen via <code>h1, h2, h3</code> kinda selectors (maybe <code>h4</code>&#8211;<code>h6</code> don&#8217;t need it), but Josh has <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/#digit-tweaking-line-height\" rel=\"noopener\">some CSS trickery at work</a> with this snippet that didn&#8217;t make it into the final reset:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">* {\n  line-height: calc(1em + 0.5rem);\n}</code></pre>\n\n\n\n<p>That&#8217;s clever in how the <code>0.5rem</code> goes a long way for small type, but isn&#8217;t as big of an influence for large type. I could see trying that on a greenfield project. Prior art here is by Jesús Ricarte in <a href=\"https://kittygiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/\" rel=\"noopener\">&#8220;Using calc to figure out optimal line-height.&#8221;</a> </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">img, picture, video, canvas, svg {\n  display: block;\n  max-width: 100%;\n}</code></pre>\n\n\n\n<p>Good move for a CSS reset. The <code>block</code> display type there prevents those annoying <code>line-height</code> gaps that always kill me. And you almost never want any of these media blocks to be wider than the parent. I somehow don&#8217;t think <code>picture</code> is necessary, though, as it&#8217;s not really a style-able block? Could be wrong. I&#8217;d probably toss <code>iframe</code> and <code>object</code> in there as well.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">p, h1, h2, h3, h4, h5, h6 {\n  overflow-wrap: break-word;\n}</code></pre>\n\n\n\n<p>Good move for sure. It&#8217;s bad news when a long word (<a href=\"https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/\">like a URL</a>) forces an element wide and borks a layout. I tend to chuck this on something — like <code>article</code> or <code>.text-content</code> or something — and let it cascade into that whole area (which would also catch text that happens to be contained in an improper element), but I don&#8217;t mind seeing it on specific text elements.</p>\n\n\n\n<p>If doing that, you probably wanna chuck <code>li, dl, dt, blockquote</code> on that chain. Despite having attempted to research this several times (<a href=\"https://codepen.io/chriscoyier/pen/qoLLpN\" rel=\"noopener\">here&#8217;s a playground</a>), I still don&#8217;t 100% know what the right cocktail of line-wrapping properties is best to use. There is <code>word-break: break-word;</code> that I think is basically the same thing. And I think it&#8217;s generally best to use <code>hyphens: auto;</code> too&#8230; right??</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#root, #__next {\n  isolation: isolate;\n}</code></pre>\n\n\n\n<p>I don&#8217;t quite understand what&#8217;s happening here. I get that this is a React/Next thing where you mount the app to these roots, and I get that it makes a stacking context, I just don&#8217;t get why it&#8217;s specifically useful to <em>have</em> that stacking context at this level. At the same time, I also don&#8217;t see any particular problem with it.</p>\n\n\n\n<p>All in all — pretty cool! I always enjoy seeing what other people use (and go so far as to suggest) for CSS resets.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/notes-on-josh-comeaus-custom-css-reset/\">Notes on Josh Comeau&#8217;s Custom CSS Reset</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "We recently talked with Elad Shechter on his new CSS reset, and shortly after that Josh Comeau blogged his. \n\n\n\nWe’re in something of a new era of CSS resets where… you kind of don’t need one? There isn’t that many major differences between browsers on default styling, and by the time you’re off and running styling stuff, you’ve probably steamrolled things into place. And so perhaps “modern” CSS resets are more of a collection of opinionated default styles that do useful things that you want on all your new projects because, well, that’s how you roll. \n\n\n\n\n\n\n\nLooking through Josh’s choices, that’s what it seems like to me: a collection of things that aren’t particularly opinionated about design, but assist the design by being things that pretty much any project will want.\n\n\n\nI’m gonna go through it and toss out 🔥 flamin’ hot opinions. \n\n\n\n*, *::before, *::after {\n  box-sizing: border-box;\n}\n\n\n\nHeck yes. We used to consider this a global holiday ’round here. Although, with more and more layout being handled by grid and flexbox, I’m feeling like this is slightly less useful these days. When you’re setting up a layout with fr units and flexin’ stuff, the box-sizing model doesn’t come into play all that much, even when padding and border are involved. But hey, I still prefer it to be in place. I do think if it goes into a CSS reset it should use the inheritance model though, as it’s easier to undo on a component that way. \n\n\n\n* {\n  margin: 0;\n}\n\n\n\nThis is basically why the CSS-Tricks logo “star” exists. I used to love this little snippet in my CSS resets. There was a period where it started to feel heavy-handed, but I think I’m back to liking it. I like how explicit you have to be when applying any margin at all. Personally, I’d rock padding: 0; too, as list elements tend to have some padding pushing them around. If you’re nuking spacing stuff, may as well nuke it all.\n\n\n\nhtml, body {\n  height: 100%;\n}\n\n\n\nProbably a good plan. Josh says “Allow percentage-based heights in the application,” which I can’t say comes up much in my day-today, but what it does is stuff like the body background not filling the space the way you might expect it to.\n\n\n\nToo bad body { height: 100vh; } isn’t enough here, but I feel like that’s not as reliable for some reason I can’t think of right now. Maybe something to do with the footer navigation in iOS Safari?\n\n\n\nbody {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}\n\n\n\nI can’t get into the -webkit-font-smoothing: antialiased; thing. I think it tends to make type dramatically thin and I don’t love it. I don’t mind it as a tool, but I wouldn’t globally apply it on all my projects. \n\n\n\nI also generally like to put global typographic sizing stuff on the html selector instead, just because the “root” part of rem implies the <html> element — not the <body> — and I like sizing stuff in rem and then adjusting the root font-size at the root level in media queries.\n\n\n\nThat 1.5 value feels like a good default line-height (more of a 1.4 guy myself, but I’d rather go up than down). But as soon as it’s set, I feel magnetically pulled into reducing it for heading elements where it’s always too much. That could happen via h1, h2, h3 kinda selectors (maybe h4–h6 don’t need it), but Josh has some CSS trickery at work with this snippet that didn’t make it into the final reset:\n\n\n\n* {\n  line-height: calc(1em + 0.5rem);\n}\n\n\n\nThat’s clever in how the 0.5rem goes a long way for small type, but isn’t as big of an influence for large type. I could see trying that on a greenfield project. Prior art here is by Jesús Ricarte in “Using calc to figure out optimal line-height.” \n\n\n\nimg, picture, video, canvas, svg {\n  display: block;\n  max-width: 100%;\n}\n\n\n\nGood move for a CSS reset. The block display type there prevents those annoying line-height gaps that always kill me. And you almost never want any of these media blocks to be wider than the parent. I somehow don’t think picture is necessary, though, as it’s not really a style-able block? Could be wrong. I’d probably toss iframe and object in there as well.\n\n\n\np, h1, h2, h3, h4, h5, h6 {\n  overflow-wrap: break-word;\n}\n\n\n\nGood move for sure. It’s bad news when a long word (like a URL) forces an element wide and borks a layout. I tend to chuck this on something — like article or .text-content or something — and let it cascade into that whole area (which would also catch text that happens to be contained in an improper element), but I don’t mind seeing it on specific text elements.\n\n\n\nIf doing that, you probably wanna chuck li, dl, dt, blockquote on that chain. Despite having attempted to research this several times (here’s a playground), I still don’t 100% know what the right cocktail of line-wrapping properties is best to use. There is word-break: break-word; that I think is basically the same thing. And I think it’s generally best to use hyphens: auto; too… right??\n\n\n\n#root, #__next {\n  isolation: isolate;\n}\n\n\n\nI don’t quite understand what’s happening here. I get that this is a React/Next thing where you mount the app to these roots, and I get that it makes a stacking context, I just don’t get why it’s specifically useful to have that stacking context at this level. At the same time, I also don’t see any particular problem with it.\n\n\n\nAll in all — pretty cool! I always enjoy seeing what other people use (and go so far as to suggest) for CSS resets.\n\nNotes on Josh Comeau’s Custom CSS Reset originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-05T21:22:45.000Z",
      "date_modified": "2022-01-05T21:22:45.000Z",
      "_plugin": {
        "pageFilename": "2f4ffcac4810619a6ec97ce1d0370897db7e3544128170b0bbc997ea70045693.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360239",
      "url": "https://css-tricks.com/make-a-component-multiple-frameworks-in-a-monorepo/",
      "title": "How to Make a Component That Supports Multiple Frameworks in a Monorepo",
      "summary": "Your mission — should you decide to accept it — is to build a Button component in four frameworks, but, only use one button.css file!\nThis idea is very important to me. I’ve been working on a component library called …\n\nHow to Make a Component That Supports Multiple Frameworks in a Monorepo originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Your mission — should you decide to accept it — is to build a Button component in four frameworks, but, only use one <code>button.css</code> file!</p>\n\n\n\n<p>This idea is very important to me. I’ve been working on a component library called <a href=\"https://agnosticui.com/\" rel=\"noopener\">AgnosticUI</a> where the purpose is building UI components that aren’t tied to any one particular JavaScript framework. AgnosticUI works in React, Vue 3, Angular, and Svelte. So that’s exactly what we’ll do today in this article: <strong>build a button component that works across all these frameworks.</strong></p>\n\n\n\n<span id=\"more-360239\"></span>\n\n\n\n<p class=\"is-style-explanation\">The source code for this article is <a href=\"https://github.com/roblevintennis/guest-posts/tree/the-little-button-that-could-series\" rel=\"noopener\">available on GitHub</a> on the <code>the-little-button-that-could-series</code> branch.</p>\n\n\n\n<h3>Table of contents</h3>\n\n\n\n<ul class=\"is-style-almanac-list\"><li><a href=\"#why-a-monorepo\">Why a monorepo?</a></li><li><a href=\"#setting-up\">Setting up</a></li><li><a href=\"#framework-specific-workspaces\">Framework-specific workspaces</a></li><li><a href=\"#what-have-we-just-done\">What have we just done?</a></li><li><a href=\"#finishing-touches\">Finishing touches</a></li><li><a href=\"#updating-each-component-to-take-a-mode-property\">Updating each component to take a&nbsp;<code>mode</code>&nbsp;property</a></li><li><a href=\"#code-complete\">Code complete</a></li><li><a href=\"#homework\">Homework</a></li><li><a href=\"#potential-pitfalls\">Potential pitfalls</a></li><li><a href=\"#conclusion\">Conclusion</a></li></ul>\n\n\n\n<h3>Why a monorepo?</h3>\n\n\n\n<p>We&#8217;re going to set up a tiny Yarn workspaces-based monorepo. Why? Chris actually has a <a href=\"https://css-tricks.com/monorepo/#advantages-of-the-monorepo-for-us\">nice outline of the benefits in another post</a>. But here’s my own biased list of benefits that I feel are relevant for our little buttons endeavor:</p>\n\n\n\n<h4>Coupling</h4>\n\n\n\n<p>We’re trying to build a single button component that uses just one <code>button.css</code> file across multiple frameworks. So, by nature, there’s some purposeful <a href=\"https://en.wikipedia.org/wiki/Coupling_(computer_programming)#:~:text=In%20software%20engineering%252C%20coupling%20is,of%20the%20relationships%20between%20modules.\" rel=\"noopener\">coupling</a> going on between the various framework implementations and the single-source-of-truth CSS file. A monorepo setup provides a convenient structure that facilitates copying our single <code>button.css</code> component into various framework-based projects.</p>\n\n\n\n<h4>Workflow</h4>\n\n\n\n<p>Let’s say the button needs a tweak — like the &#8220;focus-ring&#8221; implementation, or we screwed up the use of <code>aria</code> in the component templates. Ideally, we’d like to correct things in one place rather than making individual fixes in separate repositories.</p>\n\n\n\n<h4>Testing</h4>\n\n\n\n<p>We want the convenience of firing up all four button implementations at the same time for testing. As this sort of project grows, it’s safe to assume there will be more proper testing. In AgnosticUI, for example, I&#8217;m currently using Storybook and often kick off all the framework Storybooks, or run snapshot testing across the entire monorepo.</p>\n\n\n\n<p>I like what <a href=\"https://leoloso.com/\" rel=\"noopener\">Leonardo Losoviz</a> has to say <a href=\"https://css-tricks.com/from-a-single-repo-to-multi-repos-to-monorepo-to-multi-monorepo/#issues-with-the-monorepo\">about the monorepo approach</a>. (And it just so happens to align with with everything we’ve talked about so far.)</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>I believe the monorepo is particularly useful when all packages are coded in the same programming language, tightly coupled, and relying on the same tooling.</p></blockquote>\n\n\n\n<h3>Setting up</h3>\n\n\n\n<p>Time to dive into code — start by creating a top-level directory on the command-line to house the project and then <code>cd</code> into it. (Can’t think of a name? <code>mkdir buttons &amp;&amp; cd buttons</code> will work fine.)</p>\n\n\n\n<p>First off, let’s initialize the project:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$ yarn init\nyarn init v1.22.15\nquestion name (articles): littlebutton\nquestion version (1.0.0): \nquestion description: my little button project\nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json</code></pre>\n\n\n\n<p>That gives us a <code>package.json</code> file with something like this:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"my little button project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\"\n}</code></pre>\n\n\n\n<h4>Creating the baseline workspace</h4>\n\n\n\n<p>We can set the first one up with this command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">mkdir -p ./littlebutton-css</code></pre>\n\n\n\n<p>Next, we need to add the two following lines to the monorepo’s top-level <code>package.json</code> file so that we keep the monorepo itself private. It also declares our workspaces:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// ...\n\"private\": true,\n\"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\", \"littlebutton-css\"]</code></pre>\n\n\n\n<p>Now descend into the <code>littlebutton-css</code> directory. We&#8217;ll again want to generate a <code>package.json</code> with <code>yarn init</code>. Since we&#8217;ve named our directory <code>littlebutton-css</code> (the same as how we specified it in our <code>workspaces</code> in <code>package.json</code>) we can simply hit the <code>Return</code> key and accept all the prompts:</p>\n\n\n\n<pre rel=\"Teminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$ cd ./littlebutton-css &amp;&amp; yarn init\nyarn init v1.22.15\nquestion name (littlebutton-css): \nquestion version (1.0.0): \nquestion description: \nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json</code></pre>\n\n\n\n<p>At this point, the directory structure should look like this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">├── littlebutton-css\n│   └── package.json\n└── package.json</code></pre>\n\n\n\n<p>We&#8217;ve only created the CSS package workspace at this point as we&#8217;ll be generating our framework implementations with tools like <code>vite</code> which, in turn, generate a <code>package.json</code> and project directory for you. We will have to remember that the name we choose for these generated projects must match the name we’ve specified in the <code>package.json</code> for our earlier <code>workspaces</code> to work.</p>\n\n\n\n<h4>Baseline HTML &amp; CSS</h4>\n\n\n\n<p>Let&#8217;s stay in the <code>./littlebutton-css</code> workspace and create our simple button component using vanilla HTML and CSS files.</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">touch index.html ./css/button.css</code></pre>\n\n\n\n<p>Now our project directory should look like this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">littlebutton-css\n├── css\n│   └── button.css\n├── index.html\n└── package.json</code></pre>\n\n\n\n<p>Let&#8217;s go ahead and connect some dots with some boilerplate HTML in <code>./index.html</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!doctype html>\n&lt;html lang=\"en\">\n&lt;head>\n  &lt;meta charset=\"utf-8\">\n  &lt;title>The Little Button That Could&lt;/title>\n  &lt;meta name=\"description\" content=\"\">\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  &lt;link rel=\"stylesheet\" href=\"css/button.css\">\n&lt;/head>\n&lt;body>\n  &lt;main>\n    &lt;button class=\"btn\">Go&lt;/button>\n  &lt;/main>\n&lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>And, just so we have something visual to test, we can add a little color in <code>./css/button.css</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  color: hotpink;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"612\" height=\"487\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640956693026_image.png?resize=612%2C487&#038;ssl=1\" alt=\"A mostly unstyled button with hot-pink text from the monorepo framework.\" class=\"wp-image-360244\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640956693026_image.png?w=612&amp;ssl=1 612w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640956693026_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now open up that <code>index.html</code> page in the browser. If you see an ugly generic button with <code>hotpink</code> text&#8230; success!</p>\n\n\n\n<h3>Framework-specific workspaces</h3>\n\n\n\n<p>So what we just accomplished is the baseline for our button component. What we want to do now is abstract it a bit so it’s extensible for other frameworks and such. For example, what if we want to use the button in a React project? We’re going to need workspaces in our monorepo for each one. We’ll start with React, then follow suit for Vue 3, Angular, and Svelte.</p>\n\n\n\n<h4>React</h4>\n\n\n\n<p>We&#8217;re going to generate our React project using <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">vite</a>, a very lightweight and blazingly fast builder. Be forewarned that if you attempt to do this with <code>create-react-app</code>, there&#8217;s a very good chance you will run into conflicts later with <code>react-scripts</code> and conflicting webpack or Babel configurations from other frameworks, like Angular.</p>\n\n\n\n<p>To get our React workspace going, let’s go back into the terminal and <code>cd</code> back up to the top-level directory. From there, we’ll use <code>vite</code> to initialize a new project — let’s call it <code>littlebutton-react</code> — and, of course, we’ll select <code>react</code> as the framework and variant at the prompts:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$ yarn create vite\nyarn create v1.22.15\n[1/4] &#x1f50d;  Resolving packages...\n[2/4] &#x1f69a;  Fetching packages...\n[3/4] &#x1f517;  Linking dependencies...\n[4/4] &#x1f528;  Building fresh packages...\n\nsuccess Installed \"create-vite@2.6.6\" with binaries:\n      - create-vite\n      - cva\n&#x2714; Project name: … littlebutton-react\n&#x2714; Select a framework: › react\n&#x2714; Select a variant: › react\n\nScaffolding project in /Users/roblevin/workspace/opensource/guest-posts/articles/littlebutton-react...\n\nDone. Now run:\n\n  cd littlebutton-react\n  yarn\n  yarn dev\n\n&#x2728;  Done in 17.90s.</code></pre>\n\n\n\n<p>We initialize the React app with these commands next:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">cd littlebutton-react\nyarn\nyarn dev</code></pre>\n\n\n\n<p>With React installed and verified, let&#8217;s replace the contents of <code>src/App.jsx</code> to house our button with the following code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"./App.css\";\n\nconst Button = () => {\n  return &lt;button>Go&lt;/button>;\n};\n\nfunction App() {\n  return (\n    &lt;div className=\"App\">\n      &lt;Button />\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Now we&#8217;re going to write a small Node script that copies our <code>littlebutton-css/css/button.css</code> right into our React application for us. This step is probably the most interesting one to me because it&#8217;s both magical and ugly at the same time. It&#8217;s magical because it means our React button component is truly deriving its styles from the same CSS written in the baseline project. It&#8217;s ugly because, well, we are reaching up out of one workspace and grabbing a file from another. ¯\\_(ツ)_/¯</p>\n\n\n\n<p>Add the following little Node script to <code>littlebutton-react/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/button.css\", css, \"utf8\");</code></pre>\n\n\n\n<p>Let&#8217;s place a <code>node</code> command to run that in a <code>package.json</code> script that happens before the <code>dev</code> script in <code>littlebutton-react/package.json</code>. We&#8217;ll add a <code>syncStyles</code> and update the <code>dev</code> to call <code>syncStyles</code> before <code>vite</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles &amp;&amp; vite\",</code></pre>\n\n\n\n<p>Now, anytime we fire up our React application with <code>yarn dev</code>, we&#8217;ll first be copying the CSS file over. In essence, we&#8217;re &#8220;forcing&#8221; ourselves to not diverge from the CSS package&#8217;s <code>button.css</code> in our React button.</p>\n\n\n\n<p>But we want to also leverage <a href=\"https://github.com/css-modules/css-modules\" rel=\"noopener\">CSS Modules</a> to prevent name collisions and global CSS leakage, so we have one more step to do to get that wired up (from the same <code>littlebutton-react</code> directory):</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">touch src/button.module.css</code></pre>\n\n\n\n<p>Next, add the following to the new <code>src/button.module.css</code> file:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  composes: btn from './button.css';\n}</code></pre>\n\n\n\n<p>I find <code>composes</code> (also known as <a href=\"https://github.com/css-modules/css-modules#composition\" rel=\"noopener\">composition</a>) to be one of the coolest features of CSS Modules. In a nutshell, we&#8217;re copying our HTML/CSS version of <code>button.css</code> over wholesale then composing from our one <code>.btn</code> style rule.</p>\n\n\n\n<p>With that, we can go back to our <code>src/App.jsx</code> and import the CSS Modules <code>styles</code> into our React component with this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = () => {\n  return &lt;button className={styles.btn}>Go&lt;/button>;\n};\n\nfunction App() {\n  return (\n    &lt;div className=\"App\">\n      &lt;Button />\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Whew! Let&#8217;s pause and try to run our React app again:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">yarn dev</code></pre>\n\n\n\n<p>If all went well, you should see that same generic button, but with <code>hotpink</code> text. Before we move on to the next framework, let&#8217;s move back up to our top-level monorepo directory and update its <code>package.json</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"toy project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\"],\n  \"scripts\": {\n    \"start:react\": \"yarn workspace littlebutton-react dev\"\n  }\n}</code></pre>\n\n\n\n<p>Run the <code>yarn</code> command from the top-level directory to get the monorepo-hoisted dependencies installed.</p>\n\n\n\n<p>The only change we’ve made to this <code>package.json</code> is a new <code>scripts</code> section with a single script to start the React app. By adding <code>start:react</code> we can now run <code>yarn start:react</code> from our top-level directory and it will fire up the project we just built in <code>./littlebutton-react</code> without the need for <code>cd</code>&#8216;ing — super convenient!</p>\n\n\n\n<p>We&#8217;ll tackle Vue and Svelte next. It turns out that we can take a pretty similar approach for these as they both use <a href=\"https://css-tricks.com/video-screencasts/182-babys-first-vue-sfc/\">single file components</a> (SFC). Basically, we get to mix HTML, CSS, and JavaScript all into one single file. Whether you like the SFC approach or not, it&#8217;s certainly adequate enough for building out presentational or primitive UI components.</p>\n\n\n\n<h4>Vue</h4>\n\n\n\n<p>Following the steps from <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">vite’s scaffolding docs</a> we&#8217;ll run the following command from the monorepo’s top-level directory to initialize a Vue app:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">yarn create vite littlebutton-vue --template vue</code></pre>\n\n\n\n<p>This generates scaffolding with some provided instructions to run the starter Vue app:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">cd littlebutton-vue\nyarn\nyarn dev</code></pre>\n\n\n\n<p>This should fire up a starter page in the browser with some heading like &#8220;Hello Vue 3 + Vite.&#8221; From here, we can update <code>src/App.vue</code> to:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template>\n  &lt;div id=\"app\">\n    &lt;Button class=\"btn\">Go&lt;/Button>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\nimport Button from './components/Button.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    Button\n  }\n}\n&lt;/script></code></pre>\n\n\n\n<p>And we&#8217;ll replace any <code>src/components/*</code> with <code>src/components/Button.vue</code>:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template>\n  &lt;button :class=\"classes\">&lt;slot />&lt;/button>\n&lt;/template>\n\n&lt;script>\nexport default {\n  name: 'Button',\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n      }\n    }\n  }\n}\n&lt;/script>\n\n&lt;style module>\n.btn {\n  color: slateblue;\n}\n&lt;/style></code></pre>\n\n\n\n<p>Let&#8217;s break this down a bit:</p>\n\n\n\n<ul><li><code>:class=\"classes\"</code> is using Vue&#8217;s binding to call the computed <code>classes</code> method.</li><li>The <code>classes</code> method, in turn, is utilizing <a href=\"https://vue-loader.vuejs.org/guide/css-modules.html#usage\" rel=\"noopener\">CSS Modules in Vue</a> with the <code>this.$style.btn</code> syntax which will use styles contained in a <code>&lt;style module&gt;</code> tag.</li></ul>\n\n\n\n<p>For now, we&#8217;re hardcoding <code>color: slateblue</code> simply to test that things are working properly within the component. Try firing up the app again with <code>yarn dev</code>. If you see the button with our declared test color, then it&#8217;s working!</p>\n\n\n\n<p>Now we&#8217;re going to write a Node script that copies our <code>littlebutton-css/css/button.css</code> into our <code>Button.vue</code> file similar to the one we did for the React implementation. As mentioned, this component is a SFC so we&#8217;re going to have to do this a little differently using a simple <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" rel=\"noopener\">regular expression</a>.</p>\n\n\n\n<p>Add the following little Node.js script to <code>littlebutton-vue/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst vue = fs.readFileSync(\"./src/components/Button.vue\", \"utf8\");\n// Take everything between the starting and closing style tag and replace\nconst styleRegex = /&lt;style module>([\\s\\S]*?)&lt;\\/style>/;\nlet withSynchronizedStyles = vue.replace(styleRegex, `&lt;style module>\\n${css}\\n&lt;/style>`);\nfs.writeFileSync(\"./src/components/Button.vue\", withSynchronizedStyles, \"utf8\");</code></pre>\n\n\n\n<p>There&#8217;s a bit more complexity in this script, but using <code>replace</code> to copy text between opening and closing <code>style</code> tags via regex isn&#8217;t too bad.</p>\n\n\n\n<p>Now let’s add the following two scripts to the <code>scripts</code> clause in the <code>littlebutton-vue/package.json</code> file:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles &amp;&amp; vite\",</code></pre>\n\n\n\n<p>Now run <code>yarn syncStyles</code> and look at <code>./src/components/Button.vue</code> again. You should see that our style module gets replaced with this:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style module>\n.btn {\n  color: hotpink;\n}\n&lt;/style></code></pre>\n\n\n\n<p>Run the Vue app again with <code>yarn dev</code> and verify you get the expected results — yes, a button with hotpink text. If so, we’re good to move on to the next framework workspace!</p>\n\n\n\n<h4>Svelte</h4>\n\n\n\n<p>Per the <a href=\"https://svelte.dev/\" rel=\"noopener\">Svelte docs</a>, we should kick off our <code>littlebutton-svelte</code> workspace with the following, starting from the monorepo&#8217;s top-level directory:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npx degit sveltejs/template littlebutton-svelte\ncd littlebutton-svelte\nyarn &amp;&amp; yarn dev</code></pre>\n\n\n\n<p>Confirm you can hit the &#8220;Hello World&#8221; start page at <code>http://localhost:5000</code>. Then, update <code>littlebutton-svelte/src/App.svelte</code>:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  import Button from './Button.svelte';\n&lt;/script>\n&lt;main>\n  &lt;Button>Go&lt;/Button>\n&lt;/main></code></pre>\n\n\n\n<p>Also, in <code>littlebutton-svelte/src/main.js</code>, we want to remove the <code>name</code> prop so it looks like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import App from './App.svelte';\n\nconst app = new App({\n  target: document.body\n});\n\nexport default app;</code></pre>\n\n\n\n<p>And finally, add <code>littlebutton-svelte/src/Button.svelte</code> with the following:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button class=\"btn\">\n  &lt;slot>&lt;/slot>\n&lt;/button>\n\n&lt;script>\n&lt;/script>\n\n&lt;style>\n  .btn {\n    color: saddlebrown;\n  }\n&lt;/style></code></pre>\n\n\n\n<p>One last thing: Svelte appears to name our app: <code>\"name\": \"svelte-app\"</code> in the <code>package.json</code>. Change that to <code>\"name\": \"littlebutton-svelte\"</code> so it&#8217;s consistent with the <code>workspaces</code> name in our top-level <code>package.json</code> file.</p>\n\n\n\n<p>Once again, we can copy our baseline <code>littlebutton-css/css/button.css</code> into our <code>Button.svelte</code>. As mentioned, this component is a SFC, so we&#8217;re going to have to do this using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" rel=\"noopener\">regular expression</a>. Add the following Node script to <code>littlebutton-svelte/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst svelte = fs.readFileSync(\"./src/Button.svelte\", \"utf8\");\nconst styleRegex = /&lt;style>([\\s\\S]*?)&lt;\\/style>/;\nlet withSynchronizedStyles = svelte.replace(styleRegex, `&lt;style>\\n${css}\\n&lt;/style>`);\nfs.writeFileSync(\"./src/Button.svelte\", withSynchronizedStyles, \"utf8\");</code></pre>\n\n\n\n<p>This is super similar to the copy script we used with Vue, isn&#8217;t it? We&#8217;ll add similar scripts to our <code>package.json</code> script:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"dev\": \"yarn syncStyles &amp;&amp; rollup -c -w\",\n\"syncStyles\": \"node copystyles.js\",</code></pre>\n\n\n\n<p>Now run <code>yarn syncStyles &amp;&amp; yarn dev</code>. If all is good, we once again should see a button with <code>hotpink</code> text.</p>\n\n\n\n<p>If this is starting to feel repetitive, all I have to say is <em>welcome to my world</em>. What I&#8217;m showing you here is essentially the same process I&#8217;ve been using to build my <a href=\"https://github.com/AgnosticUI/agnosticui\" rel=\"noopener\">AgnosticUI</a> project!</p>\n\n\n\n<h4>Angular</h4>\n\n\n\n<p>You probably know the drill by now. From the monorepo&#8217;s top-level directory, install Angular and <a href=\"https://angular.io/guide/setup-local\" rel=\"noopener\">create an Angular app</a>. If we were creating a full-blown UI library we&#8217;d likely use <code>ng generate library</code> or even <code><a href=\"https://nx.dev/l/a/tutorial/08-create-libs\" rel=\"noopener\">nx</a></code>. But to keep things as straightforward as possible we&#8217;ll set up a boilerplate Angular app as follows:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm install -g @angular/cli ### unless you already have installed\nng new littlebutton-angular ### choose no for routing and CSS\n? Would you like to add Angular routing? (y/N) N\n❯ CSS \n  SCSS   [ https://sass-lang.com/documentation/syntax#scss ] \n  Sass   [ https://sass-lang.com/documentation/syntax#the-indented-syntax ] \n  Less   [ http://lesscss.org ]\n\ncd littlebutton-angular &amp;&amp; ng serve --open</code></pre>\n\n\n\n<p>With the Angular setup confirmed, let&#8217;s update some files. <code>cd littlebutton-angular</code>, delete the <code>src/app/app.component.spec.ts</code> file, and add a button component in <code>src/components/button.component.ts</code>, like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Component } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {}</code></pre>\n\n\n\n<p>Add the following to <code>src/components/button.component.html</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button class=\"btn\">Go&lt;/button></code></pre>\n\n\n\n<p>And put this in the <code>src/components/button.component.css</code> file for testing:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  color: fuchsia;\n}</code></pre>\n\n\n\n<p>In <code>src/app/app.module.ts</code>:</p>\n\n\n\n<pre rel=\"TypeScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { ButtonComponent } from '../components/button.component';\n\n@NgModule({\n  declarations: [AppComponent, ButtonComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}</code></pre>\n\n\n\n<p>Next, replace <code>src/app/app.component.ts</code> with:</p>\n\n\n\n<pre rel=\"TypeScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {}</code></pre>\n\n\n\n<p>Then, replace <code>src/app/app.component.html</code> with:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;main>\n  &lt;little-button>Go&lt;/little-button>\n&lt;/main></code></pre>\n\n\n\n<p>With that, let&#8217;s run <code>yarn start</code> and verify our button with <code>fuchsia</code> text renders as expected.</p>\n\n\n\n<p>Again, we want to copy over the CSS from our baseline workspace. We can do that by adding this to <code>littlebutton-angular/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/components/button.component.css\", css, \"utf8\");</code></pre>\n\n\n\n<p>Angular is nice in that it uses <code><a href=\"https://angular.io/guide/view-encapsulation\" rel=\"noopener\">ViewEncapsulation</a></code> that defaults to to <code>emulate</code> which mimics, <a href=\"https://baldur.gitbook.io/angular/angular/angular-components-overview/view-encapsulation\" rel=\"noopener\">according to the docs</a>,</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>[&#8230;] the behavior of shadow DOM by preprocessing (and renaming) the CSS code to effectively scope the CSS to the component&#8217;s view.</p></blockquote>\n\n\n\n<p>This basically means we can literally copy over <code>button.css</code> and use it as-is.</p>\n\n\n\n<p>Finally, update the <code>package.json</code> file by adding these two lines in the <code>scripts</code> section:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"start\": \"yarn syncStyles &amp;&amp; ng serve\",\n\"syncStyles\": \"node copystyles.js\",</code></pre>\n\n\n\n<p>With that, we can now run <code>yarn start</code> once more and verify our button text color (which was <code>fuchsia</code>) is now <code>hotpink</code>.</p>\n\n\n\n<h3>What have we just done?</h3>\n\n\n\n<p>Let&#8217;s take a break from coding and think about the bigger picture and what we&#8217;ve just done. Basically, we&#8217;ve set up a system where any changes to our CSS package&#8217;s <code>button.css</code> will get copied over into all the framework implementations as a result of our <code>copystyles.js</code> Node scripts. Further, we&#8217;ve incorporated idiomatic conventions for each of the frameworks:</p>\n\n\n\n<ul><li><code>SFC</code> for Vue and Svelte</li><li><code>CSS Modules</code> for React (and Vue within the SFC <code>&lt;style module&gt;</code> setup)</li><li><code>ViewEncapsulation</code> for Angular</li></ul>\n\n\n\n<p>Of course I state the obvious that these aren&#8217;t the only ways to do CSS in each of the above frameworks (e.g. CSS-in-JS is a popular choice), but they are certainly accepted practices and are working quite well for our greater goal — to have a single CSS source of truth to drive all framework implementations.</p>\n\n\n\n<p>If, for example, our button was in use and our design team decided we wanted to change from <code>4px</code> to <code>3px</code> <code>border-radius</code>, we could update the one file, and any separate implementations would stay synced.</p>\n\n\n\n<p>This is compelling if you have a polyglot team of developers that enjoy working in multiple frameworks, or, say an offshore team (that&#8217;s 3× productive in Angular) that&#8217;s being tasked to build a back-office application, but your flagship product is built in React. Or, you&#8217;re building an interim admin console and you&#8217;d love to experiment with using Vue or Svelte. You get the picture.</p>\n\n\n\n<h3>Finishing touches</h3>\n\n\n\n<p>OK, so we have the monorepo architecture in a really good spot. But there’s a few things we can do to make it even more useful as far as the developer experience goes.</p>\n\n\n\n<h4>Better start scripts</h4>\n\n\n\n<p>Let&#8217;s move back up to our top-level monorepo directory and update its <code>package.json</code> <code>scripts</code> section with the following so we can kick any framework implementation without <code>cd</code>&#8216;ing:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// ...\n\"scripts\": {\n  \"start:react\": \"yarn workspace littlebutton-react dev\",\n  \"start:vue\": \"yarn workspace littlebutton-vue dev \",\n  \"start:svelte\": \"yarn workspace littlebutton-svelte dev\",\n  \"start:angular\": \"yarn workspace littlebutton-angular start\"\n},</code></pre>\n\n\n\n<h4>Better baseline styles</h4>\n\n\n\n<p>We can also provide a better set of baseline styles for the button so it starts from a nice, neutral place. Here’s what I did in the <code>littlebutton-css/css/button.css</code> file.</p>\n\n\n\n<details >\n  <summary>\n          View Full Snippet      </summary>\n  \n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  --button-dark: #333;\n  --button-line-height: 1.25rem;\n  --button-font-size: 1rem;\n  --button-light: #e9e9e9;\n  --button-transition-duration: 200ms;\n  --button-font-stack:\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    \"Segoe UI\",\n    Roboto,\n    Ubuntu,\n    \"Helvetica Neue\",\n    sans-serif;\n\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n  user-select: none;\n  appearance: none;\n  cursor: pointer;\n  box-sizing: border-box;\n  transition-property: all;\n  transition-duration: var(--button-transition-duration);\n  color: var(--button-dark);\n  background-color: var(--button-light);\n  border-color: var(--button-light);\n  border-style: solid;\n  border-width: 1px;\n  font-family: var(--button-font-stack);\n  font-weight: 400;\n  font-size: var(--button-font-size);\n  line-height: var(--button-line-height);\n  padding-block-start: 0.5rem;\n  padding-block-end: 0.5rem;\n  padding-inline-start: 0.75rem;\n  padding-inline-end: 0.75rem;\n  text-decoration: none;\n  text-align: center;\n}\n\n/* Respect users reduced motion preferences */\n@media (prefers-reduced-motion) {\n  .btn {\n    transition-duration: 0.001ms !important;\n  }\n}</code></pre>\n\n\n\n<p></p>\n\n\n</details>\n\n\n<p>Let’s test this out! Fire up each of the four framework implementations with the new and improved start scripts and confirm the styling changes are in effect.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"612\" height=\"487\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957723344_image.png?resize=612%2C487&#038;ssl=1\" alt=\"Neutral (gray) styled button from the monorepo framework\" class=\"wp-image-360271\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957723344_image.png?w=612&amp;ssl=1 612w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957723344_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>One CSS file update proliferated to four frameworks — pretty cool, eh!?</p>\n\n\n\n<h4>Set a primary mode</h4>\n\n\n\n<p>We&#8217;re going to add a <code>mode</code> prop to each of our button’s and implement <code>primary</code> mode next. A primary button could be any color but we&#8217;ll go with a shade of green for the background and white text. Again, in the baseline stylesheet:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  --button-primary: #14775d;\n  --button-primary-color: #fff;\n  /* ... */\n}</code></pre>\n\n\n\n<p>Then, just before the <code>@media (prefers-reduced-motion)</code> query, add the following <code>btn-primary</code> to the same baseline stylesheet:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn-primary {\n  background-color: var(--button-primary);\n  border-color: var(--button-primary);\n  color: var(--button-primary-color);\n}</code></pre>\n\n\n\n<p>There we go! Some developer conveniences and better baseline styles!</p>\n\n\n\n<h3>Updating each component to take a <code>mode</code> property</h3>\n\n\n\n<p>Now that we&#8217;ve added our new <code>primary</code> mode represented by the <code>.btn-primary</code> class, we want to sync the styles for all four framework implementations. So, let&#8217;s add some more <code>package.json</code> scripts to our top level <code>scripts</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"sync:react\": \"yarn workspace littlebutton-react syncStyles\",\n\"sync:vue\": \"yarn workspace littlebutton-vue syncStyles\",\n\"sync:svelte\": \"yarn workspace littlebutton-svelte syncStyles\",\n\"sync:angular\": \"yarn workspace littlebutton-angular syncStyles\"</code></pre>\n\n\n\n<p>Be sure to respect JSON&#8217;s comma rules! Depending on where you place these lines within your <code>scripts: {...}</code>, you’ll want to make sure there are no missing or trailing commas.</p>\n\n\n\n<p>Go ahead and run the following to fully synchronize the styles:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">yarn sync:angular &amp;&amp; yarn sync:react &amp;&amp; yarn sync:vue &amp;&amp; yarn sync:svelte</code></pre>\n\n\n\n<p>Running this doesn’t change anything because we haven&#8217;t applied the primary class yet, but you should at least see the CSS has been copied over if you go look at the framework&#8217;s button component CSS.</p>\n\n\n\n<h4>React</h4>\n\n\n\n<p>If you haven&#8217;t already, double-check that the updated CSS got copied over into <code>littlebutton-react/src/button.css</code>. If not, you can run <code>yarn syncStyles</code>. Note that if you forget to run <code>yarn syncStyles</code> our <code>dev</code> script will do this for us when we next start the application anyway:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"dev\": \"yarn syncStyles &amp;&amp; vite\",</code></pre>\n\n\n\n<p>For our React implementation, we additionally need to add a <em>composed</em> CSS Modules class in <code>littlebutton-react/src/button.module.css</code> that is composed from the new <code>.btn-primary</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btnPrimary {\n  composes: btn-primary from './button.css';\n}</code></pre>\n\n\n\n<p>We&#8217;ll also update <code>littlebutton-react/src/App.jsx</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = ({ mode }) => {\n  const primaryClass = mode ? styles[`btn${mode.charAt(0).toUpperCase()}${mode.slice(1)}`] : '';\n  const classes = primaryClass ? `${styles.btn} ${primaryClass}` : styles.btn;\n  return &lt;button className={classes}>Go&lt;/button>;\n};\n\nfunction App() {\n  return (\n    &lt;div className=\"App\">\n      &lt;Button mode=\"primary\" />\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Fire up the React app with <code>yarn start:react</code> from the top-level directory. If all goes well, you should now see your green primary button.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"612\" height=\"487\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957382007_image.png?resize=612%2C487&#038;ssl=1\" alt=\"A dark green button with white text positioning in the center of the screen.\" class=\"wp-image-360276\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957382007_image.png?w=612&amp;ssl=1 612w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957382007_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>As a note, I&#8217;m keeping the Button component in <code>App.jsx</code> for brevity. Feel free to tease out the Button component into its own file if that bothers you.</p>\n\n\n\n<h4>Vue</h4>\n\n\n\n<p>Again, double-check that the button styles were copied over and, if not, run <code>yarn syncStyles</code>.</p>\n\n\n\n<p>Next, make the following changes to the <code>&lt;script&gt;</code> section of <code>littlebutton-vue/src/components/Button.vue</code>:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\nexport default {\n  name: 'Button',\n  props: {\n    mode: {\n      type: String,\n      required: false,\n      default: '',\n      validator: (value) => {\n        const isValid = ['primary'].includes(value);\n        if (!isValid) {\n          console.warn(`Allowed types for Button are primary`);\n        }\n        return isValid;\n      },\n    }\n  },\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n        [this.$style['btn-primary']]: this.mode === 'primary',\n      }\n    }\n  }\n}\n&lt;/script></code></pre>\n\n\n\n<p>Now we can update the markup in <code>littlebutton-vue/src/App.vue</code> to use the new <code>mode</code> prop:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;Button mode=\"primary\">Go&lt;/Button></code></pre>\n\n\n\n<p>Now you can <code>yarn start:vue</code> from the top-level directory and check for the same green button.</p>\n\n\n\n<h4>Svelte</h4>\n\n\n\n<p>Let’s <code>cd</code> into <code>littlebutton-svelte</code> and verify that the styles in <code>littlebutton-svelte/src/Button.svelte</code> have the new <code>.btn-primary</code> class copied over, and <code>yarn syncStyles</code> if you need to. Again, the <code>dev</code> script will do that for us anyway on the next startup if you happen to forget.</p>\n\n\n\n<p>Next, update the Svelte template to pass the <code>mode</code> of <code>primary</code>. In <code>src/App.svelte</code>:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  import Button from './Button.svelte';\n&lt;/script>\n&lt;main>\n  &lt;Button mode=\"primary\">Go&lt;/Button>\n&lt;/main></code></pre>\n\n\n\n<p>We also need to update the top of our <code>src/Button.svelte</code> component itself to accept the <code>mode</code> prop and apply the CSS Modules class:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button class=\"{classes}\">\n  &lt;slot>&lt;/slot>\n&lt;/button>\n&lt;script>\n  export let mode = \"\";\n  const classes = [\n    \"btn\",\n    mode ? `btn-${mode}` : \"\",\n  ].filter(cls => cls.length).join(\" \");\n&lt;/script></code></pre>\n\n\n\n<p>Note that the <code>&lt;styles&gt;</code> section of our Svelte component shouldn’t be touched in this step.</p>\n\n\n\n<p>And now, you can <code>yarn dev</code> from <code>littlebutton-svelte</code> (or <code>yarn start:svelte</code> from a higher directory) to confirm the green button made it!</p>\n\n\n\n<h4>Angular</h4>\n\n\n\n<p>Same thing, different framework: check that the styles are copied over and run <code>yarn syncStyles</code> if needed.</p>\n\n\n\n<p>Let’s add the <code>mode</code> prop to the <code>littlebutton-angular/src/app/app.component.html</code> file:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;main>\n  &lt;little-button mode=\"primary\">Go&lt;/little-button>\n&lt;/main></code></pre>\n\n\n\n<p>Now we need to set up a binding to a <code>classes</code> getter to <code>compute</code> the correct classes based on if the <code>mode</code> was passed in to the component or not. Add this to <code>littlebutton-angular/src/components/button.component.html</code> (and note the binding is happening with the square brackets):</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button [class]=\"classes\">Go&lt;/button></code></pre>\n\n\n\n<p>Next, we actually need to create the <code>classes</code> binding in our component at <code>littlebutton-angular/src/components/button.component.ts</code>:</p>\n\n\n\n<pre rel=\"TypeScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {\n  @Input() mode: 'primary' | undefined = undefined;\n\n  public get classes(): string {\n    const modeClass = this.mode ? `btn-${this.mode}` : '';\n    return [\n      'btn',\n      modeClass,\n    ].filter(cl => cl.length).join(' ');\n  }\n}</code></pre>\n\n\n\n<p>We use the <code>Input</code> directive to take in the <code>mode</code> prop, then we create a <code>classes</code> accessor which adds the mode class if it’s been passed in.</p>\n\n\n\n<p>Fire it up and look for the green button!</p>\n\n\n\n<h3>Code complete</h3>\n\n\n\n<p>If you’ve made it this far, congratulations — you’ve reached code complete! If something went awry, I’d encourage you to cross-reference <a href=\"https://github.com/roblevintennis/guest-posts/tree/the-little-button-that-could-series\" rel=\"noopener\">the source code over at GitHub</a> on the <code>the-little-button-that-could-series</code> branch. As bundlers and packages have a tendency to change abruptly, you might want to pin your package versions to the ones in this branch if you happen to experience any dependency issues.</p>\n\n\n\n<p>Take a moment to go back and compare the four framework-based button component implementations we just built. They’re still small enough to quickly notice some interesting differences in how <em>props</em> get passed in, how we <em>bind</em> to props, and how CSS <em>name collisions</em> are prevented among other subtle differences. As I continue to add components to <a href=\"https://agnosticui.com/\" rel=\"noopener\">AgnosticUI</a> (which supports these exact same four frameworks), I’m continually pondering which offers the best developer experience. What do you think?</p>\n\n\n\n<h3>Homework</h3>\n\n\n\n<p>If you&#8217;re the type that likes to figure things out on your own or enjoys digging in deeper, here are ideas.</p>\n\n\n\n<h4>Button states</h4>\n\n\n\n<p>The current button styles do not account for various states, like <code>:hover</code>. I believe that&#8217;s a good first exercise.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* You should really implement the following states\n   but I will leave it as an exercise for you to \n   decide how to and what values to use.\n*/\n.btn:focus {\n  /* If you elect to remove the outline, replace it\n     with another proper affordance and research how\n     to use transparent outlines to support windows\n     high contrast\n  */\n}\n.btn:hover { }\n.btn:visited { }\n.btn:active { }\n.btn:disabled { }</code></pre>\n\n\n\n<h4>Variants</h4>\n\n\n\n<p>Most button libraries support many button variations for things like sizes, shapes, and colors. Try creating more than the <code>primary</code> mode we already have. Maybe a <code>secondary</code> variation? A <code>warning</code> or <code>success</code>? Maybe <code>filled</code> and <code>outline</code>? Again, you can look at AgnosticUI’s <a href=\"http://www.agnosticui.com/docs/components/buttons.html#examples\" rel=\"noopener\">buttons page</a> for ideas.</p>\n\n\n\n<h4>CSS custom properties</h4>\n\n\n\n<p>If you haven&#8217;t started using CSS custom properties yet, I&#8217;d strongly recommend it. You can start by having a look at AgnosticUI&#8217;s <a href=\"https://github.com/AgnosticUI/agnosticui/blob/master/agnostic-css/css-dist/common.concat.css\" rel=\"noopener\">common styles</a>. I heavily lean on custom properties in there. Here are some great articles that cover what custom properties are and how you might leverage them:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">A Complete Guide to Custom Properties</a></li><li><a href=\"https://css-tricks.com/a-dry-approach-to-color-themes-in-css/\">A DRY Approach to Color Themes in CSS</a></li></ul>\n\n\n\n<h4>Types</h4>\n\n\n\n<p>No&#8230; not typings, but the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type\" rel=\"noopener\"><code>&lt;button&gt;</code> element’s <code>type</code> attribute</a>. We didn’t cover that in our component but there’s an opportunity to extend the component to other use cases with valid types, like <code>button</code>, <code>submit</code>, and <code>reset</code>. This is pretty easy to do and will greatly improve the button’s API.</p>\n\n\n\n<h4>More ideas</h4>\n\n\n\n<p>Gosh, you could do so much — add linting, convert it to Typescript, audit the accessibility, etc.</p>\n\n\n\n<p>The current Svelte implementation is suffering from some pretty loose assumptions as we have no defense if the valid <code>primary</code> mode isn’t passed — that would produce a garbage CSS class:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">mode ? `btn-${mode}` : \"\",</code></pre>\n\n\n\n<p>You could say, &#8220;Well, <code>.btn-garbage</code> as a class isn’t exactly harmful.&#8221; But it’s probably a good idea to <a href=\"https://css-tricks.com/defensive-css/\">style defensively</a> when and where possible.</p>\n\n\n\n<h3>Potential pitfalls</h3>\n\n\n\n<p>There are some things you should be aware of before taking this approach further:</p>\n\n\n\n<ul><li>Positional CSS based on the structure of the markup will not work well for the CSS Modules based techniques used here.</li><li>Angular makes positional techniques even harder as it generates <a href=\"https://angular.io/guide/component-styles#host\" rel=\"noopener\"><code>:host</code> element</a> representing each component view. This means you have these extra elements in between your template or markup structure. You&#8217;ll need to work around that.</li><li>Copying styles across workspace packages is a bit of an anti-pattern to some folks. I justify it because I believe the benefits outweigh the costs; also, when I think about how monorepos use symlinks and (not-so-failproof) hoisting, I don&#8217;t feel so bad about this approach.</li><li>You’ll have to subscribe to the decoupled techniques used here, so no CSS-in-JS.</li></ul>\n\n\n\n<p>I believe that all approaches to software development have their pros and cons and you ultimately have to decide if sharing a single CSS file across frameworks works for you or your specific project. There are certainly other ways you could do this (e.g. using <code>littlebuttons-css</code> as an npm package dependency) if needed.</p>\n\n\n\n<h3>Conclusion</h3>\n\n\n\n<p>Hopefully I’ve whet your appetite and you’re now really intrigued to create UI component libraries and/or design systems that are not tied to a particular framework. Maybe you have a better idea on how to achieve this — I&#8217;d love to hear your thoughts in the comments!</p>\n\n\n\n<p>I&#8217;m sure you&#8217;ve seen the venerable <a href=\"https://todomvc.com\" rel=\"noopener\">TodoMVC</a> project and how many framework implementations have been created for it. Similarly, wouldn&#8217;t it be nice to have a UI component library of primitives available for many frameworks? <a href=\"https://open-ui.org/\" rel=\"noopener\">Open UI</a> is making great strides to properly standardize native UI component defaults, but I believe we’ll always need to insert ourselves to some extent. Certainly, taking a good year to build a custom design system is quickly falling out of favor and companies are seriously questioning their <abbr title=\"returns on investments\">ROI</abbr>. Some sort of scaffolding is required to make the endeavor practical.</p>\n\n\n\n<p>The vision of <a href=\"https://agnosticui.com/\" rel=\"noopener\">AgnosticUI</a> is to have a relatively agnostic way to build design systems quickly that are not tied down to a particular frontend framework. If you’re compelled to get involved, the project is still very early and approachable and I’d love some help! Plus, you’re already pretty familiar with the how the project works now that you’ve gone through this tutorial!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/make-a-component-multiple-frameworks-in-a-monorepo/\">How to Make a Component That Supports Multiple Frameworks in a Monorepo</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Your mission — should you decide to accept it — is to build a Button component in four frameworks, but, only use one button.css file!\n\n\n\nThis idea is very important to me. I’ve been working on a component library called AgnosticUI where the purpose is building UI components that aren’t tied to any one particular JavaScript framework. AgnosticUI works in React, Vue 3, Angular, and Svelte. So that’s exactly what we’ll do today in this article: build a button component that works across all these frameworks.\n\n\n\n\n\n\n\nThe source code for this article is available on GitHub on the the-little-button-that-could-series branch.\n\n\n\nTable of contents\n\n\n\nWhy a monorepo?Setting upFramework-specific workspacesWhat have we just done?Finishing touchesUpdating each component to take a mode propertyCode completeHomeworkPotential pitfallsConclusion\n\n\n\nWhy a monorepo?\n\n\n\nWe’re going to set up a tiny Yarn workspaces-based monorepo. Why? Chris actually has a nice outline of the benefits in another post. But here’s my own biased list of benefits that I feel are relevant for our little buttons endeavor:\n\n\n\nCoupling\n\n\n\nWe’re trying to build a single button component that uses just one button.css file across multiple frameworks. So, by nature, there’s some purposeful coupling going on between the various framework implementations and the single-source-of-truth CSS file. A monorepo setup provides a convenient structure that facilitates copying our single button.css component into various framework-based projects.\n\n\n\nWorkflow\n\n\n\nLet’s say the button needs a tweak — like the “focus-ring” implementation, or we screwed up the use of aria in the component templates. Ideally, we’d like to correct things in one place rather than making individual fixes in separate repositories.\n\n\n\nTesting\n\n\n\nWe want the convenience of firing up all four button implementations at the same time for testing. As this sort of project grows, it’s safe to assume there will be more proper testing. In AgnosticUI, for example, I’m currently using Storybook and often kick off all the framework Storybooks, or run snapshot testing across the entire monorepo.\n\n\n\nI like what Leonardo Losoviz has to say about the monorepo approach. (And it just so happens to align with with everything we’ve talked about so far.)\n\n\n\nI believe the monorepo is particularly useful when all packages are coded in the same programming language, tightly coupled, and relying on the same tooling.\n\n\n\nSetting up\n\n\n\nTime to dive into code — start by creating a top-level directory on the command-line to house the project and then cd into it. (Can’t think of a name? mkdir buttons && cd buttons will work fine.)\n\n\n\nFirst off, let’s initialize the project:\n\n\n\n$ yarn init\nyarn init v1.22.15\nquestion name (articles): littlebutton\nquestion version (1.0.0): \nquestion description: my little button project\nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json\n\n\n\nThat gives us a package.json file with something like this:\n\n\n\n{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"my little button project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\"\n}\n\n\n\nCreating the baseline workspace\n\n\n\nWe can set the first one up with this command:\n\n\n\nmkdir -p ./littlebutton-css\n\n\n\nNext, we need to add the two following lines to the monorepo’s top-level package.json file so that we keep the monorepo itself private. It also declares our workspaces:\n\n\n\n// ...\n\"private\": true,\n\"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\", \"littlebutton-css\"]\n\n\n\nNow descend into the littlebutton-css directory. We’ll again want to generate a package.json with yarn init. Since we’ve named our directory littlebutton-css (the same as how we specified it in our workspaces in package.json) we can simply hit the Return key and accept all the prompts:\n\n\n\n$ cd ./littlebutton-css && yarn init\nyarn init v1.22.15\nquestion name (littlebutton-css): \nquestion version (1.0.0): \nquestion description: \nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json\n\n\n\nAt this point, the directory structure should look like this:\n\n\n\n├── littlebutton-css\n│   └── package.json\n└── package.json\n\n\n\nWe’ve only created the CSS package workspace at this point as we’ll be generating our framework implementations with tools like vite which, in turn, generate a package.json and project directory for you. We will have to remember that the name we choose for these generated projects must match the name we’ve specified in the package.json for our earlier workspaces to work.\n\n\n\nBaseline HTML & CSS\n\n\n\nLet’s stay in the ./littlebutton-css workspace and create our simple button component using vanilla HTML and CSS files.\n\n\n\ntouch index.html ./css/button.css\n\n\n\nNow our project directory should look like this:\n\n\n\nlittlebutton-css\n├── css\n│   └── button.css\n├── index.html\n└── package.json\n\n\n\nLet’s go ahead and connect some dots with some boilerplate HTML in ./index.html:\n\n\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>The Little Button That Could</title>\n  <meta name=\"description\" content=\"\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"stylesheet\" href=\"css/button.css\">\n</head>\n<body>\n  <main>\n    <button class=\"btn\">Go</button>\n  </main>\n</body>\n</html>\n\n\n\nAnd, just so we have something visual to test, we can add a little color in ./css/button.css:\n\n\n\n.btn {\n  color: hotpink;\n}\n\n\n\n\n\n\n\nNow open up that index.html page in the browser. If you see an ugly generic button with hotpink text… success!\n\n\n\nFramework-specific workspaces\n\n\n\nSo what we just accomplished is the baseline for our button component. What we want to do now is abstract it a bit so it’s extensible for other frameworks and such. For example, what if we want to use the button in a React project? We’re going to need workspaces in our monorepo for each one. We’ll start with React, then follow suit for Vue 3, Angular, and Svelte.\n\n\n\nReact\n\n\n\nWe’re going to generate our React project using vite, a very lightweight and blazingly fast builder. Be forewarned that if you attempt to do this with create-react-app, there’s a very good chance you will run into conflicts later with react-scripts and conflicting webpack or Babel configurations from other frameworks, like Angular.\n\n\n\nTo get our React workspace going, let’s go back into the terminal and cd back up to the top-level directory. From there, we’ll use vite to initialize a new project — let’s call it littlebutton-react — and, of course, we’ll select react as the framework and variant at the prompts:\n\n\n\n$ yarn create vite\nyarn create v1.22.15\n[1/4] 🔍  Resolving packages...\n[2/4] 🚚  Fetching packages...\n[3/4] 🔗  Linking dependencies...\n[4/4] 🔨  Building fresh packages...\n\nsuccess Installed \"create-vite@2.6.6\" with binaries:\n      - create-vite\n      - cva\n✔ Project name: … littlebutton-react\n✔ Select a framework: › react\n✔ Select a variant: › react\n\nScaffolding project in /Users/roblevin/workspace/opensource/guest-posts/articles/littlebutton-react...\n\nDone. Now run:\n\n  cd littlebutton-react\n  yarn\n  yarn dev\n\n✨  Done in 17.90s.\n\n\n\nWe initialize the React app with these commands next:\n\n\n\ncd littlebutton-react\nyarn\nyarn dev\n\n\n\nWith React installed and verified, let’s replace the contents of src/App.jsx to house our button with the following code:\n\n\n\nimport \"./App.css\";\n\nconst Button = () => {\n  return <button>Go</button>;\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\nNow we’re going to write a small Node script that copies our littlebutton-css/css/button.css right into our React application for us. This step is probably the most interesting one to me because it’s both magical and ugly at the same time. It’s magical because it means our React button component is truly deriving its styles from the same CSS written in the baseline project. It’s ugly because, well, we are reaching up out of one workspace and grabbing a file from another. ¯\\_(ツ)_/¯\n\n\n\nAdd the following little Node script to littlebutton-react/copystyles.js:\n\n\n\nconst fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/button.css\", css, \"utf8\");\n\n\n\nLet’s place a node command to run that in a package.json script that happens before the dev script in littlebutton-react/package.json. We’ll add a syncStyles and update the dev to call syncStyles before vite:\n\n\n\n\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles && vite\",\n\n\n\nNow, anytime we fire up our React application with yarn dev, we’ll first be copying the CSS file over. In essence, we’re “forcing” ourselves to not diverge from the CSS package’s button.css in our React button.\n\n\n\nBut we want to also leverage CSS Modules to prevent name collisions and global CSS leakage, so we have one more step to do to get that wired up (from the same littlebutton-react directory):\n\n\n\ntouch src/button.module.css\n\n\n\nNext, add the following to the new src/button.module.css file:\n\n\n\n.btn {\n  composes: btn from './button.css';\n}\n\n\n\nI find composes (also known as composition) to be one of the coolest features of CSS Modules. In a nutshell, we’re copying our HTML/CSS version of button.css over wholesale then composing from our one .btn style rule.\n\n\n\nWith that, we can go back to our src/App.jsx and import the CSS Modules styles into our React component with this:\n\n\n\nimport \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = () => {\n  return <button className={styles.btn}>Go</button>;\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\nWhew! Let’s pause and try to run our React app again:\n\n\n\nyarn dev\n\n\n\nIf all went well, you should see that same generic button, but with hotpink text. Before we move on to the next framework, let’s move back up to our top-level monorepo directory and update its package.json:\n\n\n\n{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"toy project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\"],\n  \"scripts\": {\n    \"start:react\": \"yarn workspace littlebutton-react dev\"\n  }\n}\n\n\n\nRun the yarn command from the top-level directory to get the monorepo-hoisted dependencies installed.\n\n\n\nThe only change we’ve made to this package.json is a new scripts section with a single script to start the React app. By adding start:react we can now run yarn start:react from our top-level directory and it will fire up the project we just built in ./littlebutton-react without the need for cd‘ing — super convenient!\n\n\n\nWe’ll tackle Vue and Svelte next. It turns out that we can take a pretty similar approach for these as they both use single file components (SFC). Basically, we get to mix HTML, CSS, and JavaScript all into one single file. Whether you like the SFC approach or not, it’s certainly adequate enough for building out presentational or primitive UI components.\n\n\n\nVue\n\n\n\nFollowing the steps from vite’s scaffolding docs we’ll run the following command from the monorepo’s top-level directory to initialize a Vue app:\n\n\n\nyarn create vite littlebutton-vue --template vue\n\n\n\nThis generates scaffolding with some provided instructions to run the starter Vue app:\n\n\n\ncd littlebutton-vue\nyarn\nyarn dev\n\n\n\nThis should fire up a starter page in the browser with some heading like “Hello Vue 3 + Vite.” From here, we can update src/App.vue to:\n\n\n\n<template>\n  <div id=\"app\">\n    <Button class=\"btn\">Go</Button>\n  </div>\n</template>\n\n<script>\nimport Button from './components/Button.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    Button\n  }\n}\n</script>\n\n\n\nAnd we’ll replace any src/components/* with src/components/Button.vue:\n\n\n\n<template>\n  <button :class=\"classes\"><slot /></button>\n</template>\n\n<script>\nexport default {\n  name: 'Button',\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n      }\n    }\n  }\n}\n</script>\n\n<style module>\n.btn {\n  color: slateblue;\n}\n</style>\n\n\n\nLet’s break this down a bit:\n\n\n\n:class=\"classes\" is using Vue’s binding to call the computed classes method.The classes method, in turn, is utilizing CSS Modules in Vue with the this.$style.btn syntax which will use styles contained in a <style module> tag.\n\n\n\nFor now, we’re hardcoding color: slateblue simply to test that things are working properly within the component. Try firing up the app again with yarn dev. If you see the button with our declared test color, then it’s working!\n\n\n\nNow we’re going to write a Node script that copies our littlebutton-css/css/button.css into our Button.vue file similar to the one we did for the React implementation. As mentioned, this component is a SFC so we’re going to have to do this a little differently using a simple regular expression.\n\n\n\nAdd the following little Node.js script to littlebutton-vue/copystyles.js:\n\n\n\nconst fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst vue = fs.readFileSync(\"./src/components/Button.vue\", \"utf8\");\n// Take everything between the starting and closing style tag and replace\nconst styleRegex = /<style module>([\\s\\S]*?)<\\/style>/;\nlet withSynchronizedStyles = vue.replace(styleRegex, `<style module>\\n${css}\\n</style>`);\nfs.writeFileSync(\"./src/components/Button.vue\", withSynchronizedStyles, \"utf8\");\n\n\n\nThere’s a bit more complexity in this script, but using replace to copy text between opening and closing style tags via regex isn’t too bad.\n\n\n\nNow let’s add the following two scripts to the scripts clause in the littlebutton-vue/package.json file:\n\n\n\n\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles && vite\",\n\n\n\nNow run yarn syncStyles and look at ./src/components/Button.vue again. You should see that our style module gets replaced with this:\n\n\n\n<style module>\n.btn {\n  color: hotpink;\n}\n</style>\n\n\n\nRun the Vue app again with yarn dev and verify you get the expected results — yes, a button with hotpink text. If so, we’re good to move on to the next framework workspace!\n\n\n\nSvelte\n\n\n\nPer the Svelte docs, we should kick off our littlebutton-svelte workspace with the following, starting from the monorepo’s top-level directory:\n\n\n\nnpx degit sveltejs/template littlebutton-svelte\ncd littlebutton-svelte\nyarn && yarn dev\n\n\n\nConfirm you can hit the “Hello World” start page at http://localhost:5000. Then, update littlebutton-svelte/src/App.svelte:\n\n\n\n<script>\n  import Button from './Button.svelte';\n</script>\n<main>\n  <Button>Go</Button>\n</main>\n\n\n\nAlso, in littlebutton-svelte/src/main.js, we want to remove the name prop so it looks like this:\n\n\n\nimport App from './App.svelte';\n\nconst app = new App({\n  target: document.body\n});\n\nexport default app;\n\n\n\nAnd finally, add littlebutton-svelte/src/Button.svelte with the following:\n\n\n\n<button class=\"btn\">\n  <slot></slot>\n</button>\n\n<script>\n</script>\n\n<style>\n  .btn {\n    color: saddlebrown;\n  }\n</style>\n\n\n\nOne last thing: Svelte appears to name our app: \"name\": \"svelte-app\" in the package.json. Change that to \"name\": \"littlebutton-svelte\" so it’s consistent with the workspaces name in our top-level package.json file.\n\n\n\nOnce again, we can copy our baseline littlebutton-css/css/button.css into our Button.svelte. As mentioned, this component is a SFC, so we’re going to have to do this using a regular expression. Add the following Node script to littlebutton-svelte/copystyles.js:\n\n\n\nconst fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst svelte = fs.readFileSync(\"./src/Button.svelte\", \"utf8\");\nconst styleRegex = /<style>([\\s\\S]*?)<\\/style>/;\nlet withSynchronizedStyles = svelte.replace(styleRegex, `<style>\\n${css}\\n</style>`);\nfs.writeFileSync(\"./src/Button.svelte\", withSynchronizedStyles, \"utf8\");\n\n\n\nThis is super similar to the copy script we used with Vue, isn’t it? We’ll add similar scripts to our package.json script:\n\n\n\n\"dev\": \"yarn syncStyles && rollup -c -w\",\n\"syncStyles\": \"node copystyles.js\",\n\n\n\nNow run yarn syncStyles && yarn dev. If all is good, we once again should see a button with hotpink text.\n\n\n\nIf this is starting to feel repetitive, all I have to say is welcome to my world. What I’m showing you here is essentially the same process I’ve been using to build my AgnosticUI project!\n\n\n\nAngular\n\n\n\nYou probably know the drill by now. From the monorepo’s top-level directory, install Angular and create an Angular app. If we were creating a full-blown UI library we’d likely use ng generate library or even nx. But to keep things as straightforward as possible we’ll set up a boilerplate Angular app as follows:\n\n\n\nnpm install -g @angular/cli ### unless you already have installed\nng new littlebutton-angular ### choose no for routing and CSS\n? Would you like to add Angular routing? (y/N) N\n❯ CSS \n  SCSS   [ https://sass-lang.com/documentation/syntax#scss ] \n  Sass   [ https://sass-lang.com/documentation/syntax#the-indented-syntax ] \n  Less   [ http://lesscss.org ]\n\ncd littlebutton-angular && ng serve --open\n\n\n\nWith the Angular setup confirmed, let’s update some files. cd littlebutton-angular, delete the src/app/app.component.spec.ts file, and add a button component in src/components/button.component.ts, like this:\n\n\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {}\n\n\n\nAdd the following to src/components/button.component.html:\n\n\n\n<button class=\"btn\">Go</button>\n\n\n\nAnd put this in the src/components/button.component.css file for testing:\n\n\n\n.btn {\n  color: fuchsia;\n}\n\n\n\nIn src/app/app.module.ts:\n\n\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { ButtonComponent } from '../components/button.component';\n\n@NgModule({\n  declarations: [AppComponent, ButtonComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n\n\n\nNext, replace src/app/app.component.ts with:\n\n\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {}\n\n\n\nThen, replace src/app/app.component.html with:\n\n\n\n<main>\n  <little-button>Go</little-button>\n</main>\n\n\n\nWith that, let’s run yarn start and verify our button with fuchsia text renders as expected.\n\n\n\nAgain, we want to copy over the CSS from our baseline workspace. We can do that by adding this to littlebutton-angular/copystyles.js:\n\n\n\nconst fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/components/button.component.css\", css, \"utf8\");\n\n\n\nAngular is nice in that it uses ViewEncapsulation that defaults to to emulate which mimics, according to the docs,\n\n\n\n[…] the behavior of shadow DOM by preprocessing (and renaming) the CSS code to effectively scope the CSS to the component’s view.\n\n\n\nThis basically means we can literally copy over button.css and use it as-is.\n\n\n\nFinally, update the package.json file by adding these two lines in the scripts section:\n\n\n\n\"start\": \"yarn syncStyles && ng serve\",\n\"syncStyles\": \"node copystyles.js\",\n\n\n\nWith that, we can now run yarn start once more and verify our button text color (which was fuchsia) is now hotpink.\n\n\n\nWhat have we just done?\n\n\n\nLet’s take a break from coding and think about the bigger picture and what we’ve just done. Basically, we’ve set up a system where any changes to our CSS package’s button.css will get copied over into all the framework implementations as a result of our copystyles.js Node scripts. Further, we’ve incorporated idiomatic conventions for each of the frameworks:\n\n\n\nSFC for Vue and SvelteCSS Modules for React (and Vue within the SFC <style module> setup)ViewEncapsulation for Angular\n\n\n\nOf course I state the obvious that these aren’t the only ways to do CSS in each of the above frameworks (e.g. CSS-in-JS is a popular choice), but they are certainly accepted practices and are working quite well for our greater goal — to have a single CSS source of truth to drive all framework implementations.\n\n\n\nIf, for example, our button was in use and our design team decided we wanted to change from 4px to 3px border-radius, we could update the one file, and any separate implementations would stay synced.\n\n\n\nThis is compelling if you have a polyglot team of developers that enjoy working in multiple frameworks, or, say an offshore team (that’s 3× productive in Angular) that’s being tasked to build a back-office application, but your flagship product is built in React. Or, you’re building an interim admin console and you’d love to experiment with using Vue or Svelte. You get the picture.\n\n\n\nFinishing touches\n\n\n\nOK, so we have the monorepo architecture in a really good spot. But there’s a few things we can do to make it even more useful as far as the developer experience goes.\n\n\n\nBetter start scripts\n\n\n\nLet’s move back up to our top-level monorepo directory and update its package.json scripts section with the following so we can kick any framework implementation without cd‘ing:\n\n\n\n// ...\n\"scripts\": {\n  \"start:react\": \"yarn workspace littlebutton-react dev\",\n  \"start:vue\": \"yarn workspace littlebutton-vue dev \",\n  \"start:svelte\": \"yarn workspace littlebutton-svelte dev\",\n  \"start:angular\": \"yarn workspace littlebutton-angular start\"\n},\n\n\n\nBetter baseline styles\n\n\n\nWe can also provide a better set of baseline styles for the button so it starts from a nice, neutral place. Here’s what I did in the littlebutton-css/css/button.css file.\n\n\n\n\n  \n          View Full Snippet      \n  \n\n.btn {\n  --button-dark: #333;\n  --button-line-height: 1.25rem;\n  --button-font-size: 1rem;\n  --button-light: #e9e9e9;\n  --button-transition-duration: 200ms;\n  --button-font-stack:\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    \"Segoe UI\",\n    Roboto,\n    Ubuntu,\n    \"Helvetica Neue\",\n    sans-serif;\n\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n  user-select: none;\n  appearance: none;\n  cursor: pointer;\n  box-sizing: border-box;\n  transition-property: all;\n  transition-duration: var(--button-transition-duration);\n  color: var(--button-dark);\n  background-color: var(--button-light);\n  border-color: var(--button-light);\n  border-style: solid;\n  border-width: 1px;\n  font-family: var(--button-font-stack);\n  font-weight: 400;\n  font-size: var(--button-font-size);\n  line-height: var(--button-line-height);\n  padding-block-start: 0.5rem;\n  padding-block-end: 0.5rem;\n  padding-inline-start: 0.75rem;\n  padding-inline-end: 0.75rem;\n  text-decoration: none;\n  text-align: center;\n}\n\n/* Respect users reduced motion preferences */\n@media (prefers-reduced-motion) {\n  .btn {\n    transition-duration: 0.001ms !important;\n  }\n}\n\n\n\n\n\n\n\n\n\nLet’s test this out! Fire up each of the four framework implementations with the new and improved start scripts and confirm the styling changes are in effect.\n\n\n\n\n\n\n\nOne CSS file update proliferated to four frameworks — pretty cool, eh!?\n\n\n\nSet a primary mode\n\n\n\nWe’re going to add a mode prop to each of our button’s and implement primary mode next. A primary button could be any color but we’ll go with a shade of green for the background and white text. Again, in the baseline stylesheet:\n\n\n\n.btn {\n  --button-primary: #14775d;\n  --button-primary-color: #fff;\n  /* ... */\n}\n\n\n\nThen, just before the @media (prefers-reduced-motion) query, add the following btn-primary to the same baseline stylesheet:\n\n\n\n.btn-primary {\n  background-color: var(--button-primary);\n  border-color: var(--button-primary);\n  color: var(--button-primary-color);\n}\n\n\n\nThere we go! Some developer conveniences and better baseline styles!\n\n\n\nUpdating each component to take a mode property\n\n\n\nNow that we’ve added our new primary mode represented by the .btn-primary class, we want to sync the styles for all four framework implementations. So, let’s add some more package.json scripts to our top level scripts:\n\n\n\n\"sync:react\": \"yarn workspace littlebutton-react syncStyles\",\n\"sync:vue\": \"yarn workspace littlebutton-vue syncStyles\",\n\"sync:svelte\": \"yarn workspace littlebutton-svelte syncStyles\",\n\"sync:angular\": \"yarn workspace littlebutton-angular syncStyles\"\n\n\n\nBe sure to respect JSON’s comma rules! Depending on where you place these lines within your scripts: {...}, you’ll want to make sure there are no missing or trailing commas.\n\n\n\nGo ahead and run the following to fully synchronize the styles:\n\n\n\nyarn sync:angular && yarn sync:react && yarn sync:vue && yarn sync:svelte\n\n\n\nRunning this doesn’t change anything because we haven’t applied the primary class yet, but you should at least see the CSS has been copied over if you go look at the framework’s button component CSS.\n\n\n\nReact\n\n\n\nIf you haven’t already, double-check that the updated CSS got copied over into littlebutton-react/src/button.css. If not, you can run yarn syncStyles. Note that if you forget to run yarn syncStyles our dev script will do this for us when we next start the application anyway:\n\n\n\n\"dev\": \"yarn syncStyles && vite\",\n\n\n\nFor our React implementation, we additionally need to add a composed CSS Modules class in littlebutton-react/src/button.module.css that is composed from the new .btn-primary:\n\n\n\n.btnPrimary {\n  composes: btn-primary from './button.css';\n}\n\n\n\nWe’ll also update littlebutton-react/src/App.jsx:\n\n\n\nimport \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = ({ mode }) => {\n  const primaryClass = mode ? styles[`btn${mode.charAt(0).toUpperCase()}${mode.slice(1)}`] : '';\n  const classes = primaryClass ? `${styles.btn} ${primaryClass}` : styles.btn;\n  return <button className={classes}>Go</button>;\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button mode=\"primary\" />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\nFire up the React app with yarn start:react from the top-level directory. If all goes well, you should now see your green primary button.\n\n\n\n\n\n\n\nAs a note, I’m keeping the Button component in App.jsx for brevity. Feel free to tease out the Button component into its own file if that bothers you.\n\n\n\nVue\n\n\n\nAgain, double-check that the button styles were copied over and, if not, run yarn syncStyles.\n\n\n\nNext, make the following changes to the <script> section of littlebutton-vue/src/components/Button.vue:\n\n\n\n<script>\nexport default {\n  name: 'Button',\n  props: {\n    mode: {\n      type: String,\n      required: false,\n      default: '',\n      validator: (value) => {\n        const isValid = ['primary'].includes(value);\n        if (!isValid) {\n          console.warn(`Allowed types for Button are primary`);\n        }\n        return isValid;\n      },\n    }\n  },\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n        [this.$style['btn-primary']]: this.mode === 'primary',\n      }\n    }\n  }\n}\n</script>\n\n\n\nNow we can update the markup in littlebutton-vue/src/App.vue to use the new mode prop:\n\n\n\n<Button mode=\"primary\">Go</Button>\n\n\n\nNow you can yarn start:vue from the top-level directory and check for the same green button.\n\n\n\nSvelte\n\n\n\nLet’s cd into littlebutton-svelte and verify that the styles in littlebutton-svelte/src/Button.svelte have the new .btn-primary class copied over, and yarn syncStyles if you need to. Again, the dev script will do that for us anyway on the next startup if you happen to forget.\n\n\n\nNext, update the Svelte template to pass the mode of primary. In src/App.svelte:\n\n\n\n<script>\n  import Button from './Button.svelte';\n</script>\n<main>\n  <Button mode=\"primary\">Go</Button>\n</main>\n\n\n\nWe also need to update the top of our src/Button.svelte component itself to accept the mode prop and apply the CSS Modules class:\n\n\n\n<button class=\"{classes}\">\n  <slot></slot>\n</button>\n<script>\n  export let mode = \"\";\n  const classes = [\n    \"btn\",\n    mode ? `btn-${mode}` : \"\",\n  ].filter(cls => cls.length).join(\" \");\n</script>\n\n\n\nNote that the <styles> section of our Svelte component shouldn’t be touched in this step.\n\n\n\nAnd now, you can yarn dev from littlebutton-svelte (or yarn start:svelte from a higher directory) to confirm the green button made it!\n\n\n\nAngular\n\n\n\nSame thing, different framework: check that the styles are copied over and run yarn syncStyles if needed.\n\n\n\nLet’s add the mode prop to the littlebutton-angular/src/app/app.component.html file:\n\n\n\n<main>\n  <little-button mode=\"primary\">Go</little-button>\n</main>\n\n\n\nNow we need to set up a binding to a classes getter to compute the correct classes based on if the mode was passed in to the component or not. Add this to littlebutton-angular/src/components/button.component.html (and note the binding is happening with the square brackets):\n\n\n\n<button [class]=\"classes\">Go</button>\n\n\n\nNext, we actually need to create the classes binding in our component at littlebutton-angular/src/components/button.component.ts:\n\n\n\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {\n  @Input() mode: 'primary' | undefined = undefined;\n\n  public get classes(): string {\n    const modeClass = this.mode ? `btn-${this.mode}` : '';\n    return [\n      'btn',\n      modeClass,\n    ].filter(cl => cl.length).join(' ');\n  }\n}\n\n\n\nWe use the Input directive to take in the mode prop, then we create a classes accessor which adds the mode class if it’s been passed in.\n\n\n\nFire it up and look for the green button!\n\n\n\nCode complete\n\n\n\nIf you’ve made it this far, congratulations — you’ve reached code complete! If something went awry, I’d encourage you to cross-reference the source code over at GitHub on the the-little-button-that-could-series branch. As bundlers and packages have a tendency to change abruptly, you might want to pin your package versions to the ones in this branch if you happen to experience any dependency issues.\n\n\n\nTake a moment to go back and compare the four framework-based button component implementations we just built. They’re still small enough to quickly notice some interesting differences in how props get passed in, how we bind to props, and how CSS name collisions are prevented among other subtle differences. As I continue to add components to AgnosticUI (which supports these exact same four frameworks), I’m continually pondering which offers the best developer experience. What do you think?\n\n\n\nHomework\n\n\n\nIf you’re the type that likes to figure things out on your own or enjoys digging in deeper, here are ideas.\n\n\n\nButton states\n\n\n\nThe current button styles do not account for various states, like :hover. I believe that’s a good first exercise.\n\n\n\n/* You should really implement the following states\n   but I will leave it as an exercise for you to \n   decide how to and what values to use.\n*/\n.btn:focus {\n  /* If you elect to remove the outline, replace it\n     with another proper affordance and research how\n     to use transparent outlines to support windows\n     high contrast\n  */\n}\n.btn:hover { }\n.btn:visited { }\n.btn:active { }\n.btn:disabled { }\n\n\n\nVariants\n\n\n\nMost button libraries support many button variations for things like sizes, shapes, and colors. Try creating more than the primary mode we already have. Maybe a secondary variation? A warning or success? Maybe filled and outline? Again, you can look at AgnosticUI’s buttons page for ideas.\n\n\n\nCSS custom properties\n\n\n\nIf you haven’t started using CSS custom properties yet, I’d strongly recommend it. You can start by having a look at AgnosticUI’s common styles. I heavily lean on custom properties in there. Here are some great articles that cover what custom properties are and how you might leverage them:\n\n\n\nA Complete Guide to Custom PropertiesA DRY Approach to Color Themes in CSS\n\n\n\nTypes\n\n\n\nNo… not typings, but the <button> element’s type attribute. We didn’t cover that in our component but there’s an opportunity to extend the component to other use cases with valid types, like button, submit, and reset. This is pretty easy to do and will greatly improve the button’s API.\n\n\n\nMore ideas\n\n\n\nGosh, you could do so much — add linting, convert it to Typescript, audit the accessibility, etc.\n\n\n\nThe current Svelte implementation is suffering from some pretty loose assumptions as we have no defense if the valid primary mode isn’t passed — that would produce a garbage CSS class:\n\n\n\nmode ? `btn-${mode}` : \"\",\n\n\n\nYou could say, “Well, .btn-garbage as a class isn’t exactly harmful.” But it’s probably a good idea to style defensively when and where possible.\n\n\n\nPotential pitfalls\n\n\n\nThere are some things you should be aware of before taking this approach further:\n\n\n\nPositional CSS based on the structure of the markup will not work well for the CSS Modules based techniques used here.Angular makes positional techniques even harder as it generates :host element representing each component view. This means you have these extra elements in between your template or markup structure. You’ll need to work around that.Copying styles across workspace packages is a bit of an anti-pattern to some folks. I justify it because I believe the benefits outweigh the costs; also, when I think about how monorepos use symlinks and (not-so-failproof) hoisting, I don’t feel so bad about this approach.You’ll have to subscribe to the decoupled techniques used here, so no CSS-in-JS.\n\n\n\nI believe that all approaches to software development have their pros and cons and you ultimately have to decide if sharing a single CSS file across frameworks works for you or your specific project. There are certainly other ways you could do this (e.g. using littlebuttons-css as an npm package dependency) if needed.\n\n\n\nConclusion\n\n\n\nHopefully I’ve whet your appetite and you’re now really intrigued to create UI component libraries and/or design systems that are not tied to a particular framework. Maybe you have a better idea on how to achieve this — I’d love to hear your thoughts in the comments!\n\n\n\nI’m sure you’ve seen the venerable TodoMVC project and how many framework implementations have been created for it. Similarly, wouldn’t it be nice to have a UI component library of primitives available for many frameworks? Open UI is making great strides to properly standardize native UI component defaults, but I believe we’ll always need to insert ourselves to some extent. Certainly, taking a good year to build a custom design system is quickly falling out of favor and companies are seriously questioning their ROI. Some sort of scaffolding is required to make the endeavor practical.\n\n\n\nThe vision of AgnosticUI is to have a relatively agnostic way to build design systems quickly that are not tied down to a particular frontend framework. If you’re compelled to get involved, the project is still very early and approachable and I’d love some help! Plus, you’re already pretty familiar with the how the project works now that you’ve gone through this tutorial!\n\nHow to Make a Component That Supports Multiple Frameworks in a Monorepo originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-05T15:42:59.000Z",
      "date_modified": "2022-01-05T15:42:59.000Z",
      "_plugin": {
        "pageFilename": "6fa12e1bab080a7c2877e50c0b9918fa4aef988e84dd3cafb88dd586add1919d.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359880",
      "url": "https://css-tricks.com/should-css-override-default-styles/",
      "title": "Should CSS Override Default Browser Styles?",
      "summary": "CSS overrides can change the default look of almost anything:\n\nYou can use CSS to override what a checkbox or radio button looks like, but if you don’t, the checkbox will look like a default checkbox on your operating system \n\n…\n\nShould CSS Override Default Browser Styles? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>CSS overrides can change the default look of almost anything:</p>\n\n\n\n<ul><li>You can use CSS to <a href=\"https://css-tricks.com/zero-trickery-custom-radios-and-checkboxes/\">override what a checkbox or radio button</a> looks like, but if you don&#8217;t, the checkbox will look like a default checkbox on your operating system and some would say that&#8217;s best for accessibility and usability.</li><li>You can use CSS to <a href=\"https://css-tricks.com/making-a-better-custom-select-element/\">override what a select menu</a> looks like, but if you don&#8217;t, the select will look like a default select menu on your operating system and some would say that&#8217;s best for accessibility and usability.</li><li>You can <a href=\"https://css-tricks.com/a-complete-guide-to-links-and-buttons/#links-heading-2\">override what anchor links look like</a>, but some would say they should be blue with underlines because that is the default and it&#8217;s best for accessibility and usability.</li><li>You can <a href=\"https://css-tricks.com/the-current-state-of-styling-scrollbars/\">override what scrollbars look like</a>, but if you don&#8217;t, the scrollbars will look (and behave) the way default scrollbars do on your operating system, and some would say that&#8217;s best for accessibility and usability. </li></ul>\n\n\n\n<p>It just goes on and on&#8230;</p>\n\n\n\n<span id=\"more-359880\"></span>\n\n\n\n<ul><li>You can <a href=\"https://css-tricks.com/a-complete-guide-to-links-and-buttons/#buttons-heading-2\">customize what a button looks like</a>, but&#8230;</li><li>You <a href=\"https://css-tricks.com/almanac/properties/c/cursor/\">can customize what the cursor looks like</a>, or particular elements on your site, but&#8230;</li><li>You can <a href=\"https://css-tricks.com/almanac/selectors/s/selection/\">change the text highlighting color</a>, you can <a href=\"https://css-tricks.com/almanac/properties/a/accent-color/\">change the accent color</a>, heck, soon you&#8217;ll be able to <a href=\"https://www.azabani.com/2021/12/16/spelling-grammar-2.html\" rel=\"noopener\">customize what spelling and grammer mistakes look like</a> in editable text areas, <em>but&#8230;</em></li></ul>\n\n\n\n<p>Where do you draw the line?</p>\n\n\n\n<p>In my experience, everyone has a different line. Nearly everybody styles their buttons. Nearly everybody styles their links, but some might only customize the hue of blue and leave the underline, drawing the line at more elaborate changes. It&#8217;s fairly popular to style form elements like checkboxes, radio buttons, and selects, but some people draw the line before that.</p>\n\n\n\n<p>Some people draw a line saying you should never change a default cursor, some push that line back to make the cursor into a pointer for created interactive elements, some push that line so far they are OK with custom images as cursors. Some people draw the line with scrollbars saying they should never be customized, while some people implement elaborate designs.</p>\n\n\n\n<p>CSS is a language for changing the design of websites. Every ruleset you write likely changes the defaults of something. The lines are relatively fuzzy, but I&#8217;d say there is nothing in CSS that should be outright banned from use — it&#8217;s more about the styling <em>choices</em> you make. So when you do choose to style something, it remains usable and accessible. Heck, <code>background-color</code> can be terribly abused making for inaccessible and unusable areas of a site, but nobody raises pitchforks over that.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/should-css-override-default-styles/\">Should CSS Override Default Browser Styles?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "CSS overrides can change the default look of almost anything:\n\n\n\nYou can use CSS to override what a checkbox or radio button looks like, but if you don’t, the checkbox will look like a default checkbox on your operating system and some would say that’s best for accessibility and usability.You can use CSS to override what a select menu looks like, but if you don’t, the select will look like a default select menu on your operating system and some would say that’s best for accessibility and usability.You can override what anchor links look like, but some would say they should be blue with underlines because that is the default and it’s best for accessibility and usability.You can override what scrollbars look like, but if you don’t, the scrollbars will look (and behave) the way default scrollbars do on your operating system, and some would say that’s best for accessibility and usability. \n\n\n\nIt just goes on and on…\n\n\n\n\n\n\n\nYou can customize what a button looks like, but…You can customize what the cursor looks like, or particular elements on your site, but…You can change the text highlighting color, you can change the accent color, heck, soon you’ll be able to customize what spelling and grammer mistakes look like in editable text areas, but…\n\n\n\nWhere do you draw the line?\n\n\n\nIn my experience, everyone has a different line. Nearly everybody styles their buttons. Nearly everybody styles their links, but some might only customize the hue of blue and leave the underline, drawing the line at more elaborate changes. It’s fairly popular to style form elements like checkboxes, radio buttons, and selects, but some people draw the line before that.\n\n\n\nSome people draw a line saying you should never change a default cursor, some push that line back to make the cursor into a pointer for created interactive elements, some push that line so far they are OK with custom images as cursors. Some people draw the line with scrollbars saying they should never be customized, while some people implement elaborate designs.\n\n\n\nCSS is a language for changing the design of websites. Every ruleset you write likely changes the defaults of something. The lines are relatively fuzzy, but I’d say there is nothing in CSS that should be outright banned from use — it’s more about the styling choices you make. So when you do choose to style something, it remains usable and accessible. Heck, background-color can be terribly abused making for inaccessible and unusable areas of a site, but nobody raises pitchforks over that.\n\nShould CSS Override Default Browser Styles? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-04T19:50:18.000Z",
      "date_modified": "2022-01-04T19:50:18.000Z",
      "_plugin": {
        "pageFilename": "ddd0a37078967768f240261a0a1ae9072497e7a71ce99849d7acd70ca5706b70.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359838",
      "url": "https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/",
      "title": "CSS Underlines Are Too Thin and Too Low in Chrome",
      "summary": "I’ve encountered two bugs in Chrome while testing the new CSS text-decoration-thickness and text-underline-offset properties, and I want to share them with you here in this article.\nBut first, let’s acknowledge one thing:\nDefault underlines are inconsistent\nLet’s add a …\n\nCSS Underlines Are Too Thin and Too Low in Chrome originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I’ve encountered two bugs in Chrome while testing the new CSS <code>text-decoration-thickness</code> and <code>text-underline-offset</code> properties, and I want to share them with you here in this article.</p>\n\n\n\n<p>But first, let&#8217;s acknowledge one thing:</p>\n\n\n\n<span id=\"more-359838\"></span>\n\n\n\n<h3>Default underlines are inconsistent</h3>\n\n\n\n<p>Let’s add a text link to a plain web page, set its <code>font-family</code> to Arial, and compare the underlines across browsers and operating systems.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2018\" height=\"944\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=2018%2C944&#038;ssl=1\" alt=\"\" class=\"wp-image-359839\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?w=2018&amp;ssl=1 2018w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=300%2C140&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=1024%2C479&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=768%2C359&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=1536%2C719&amp;ssl=1 1536w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=1000%2C468&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>From left to right: Chrome, Safari, and Firefox on macOS; Safari on iOS; Chrome, and Firefox on Windows; Chrome, and Firefox on Android.</figcaption></figure>\n\n\n\n<p>As you can see, the default underline is inconsistent across browsers. Each browser chooses their own default thickness and vertical position (offset from the baseline) for the underline. This is in line with the <a href=\"https://drafts.csswg.org/css-text-decor-4/\" rel=\"noopener\">CSS Text Decoration module</a>, which specifies the following default behavior (<code>auto</code> value):</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The user agent chooses an appropriate thickness for text decoration lines. […] The user agent chooses an appropriate offset for underlines.</p><p></p></blockquote>\n\n\n\n<h3>Luckily, we can override the browsers’ defaults</h3>\n\n\n\n<p>There are two new, <a href=\"https://caniuse.com/mdn-css_properties_text-decoration-thickness,mdn-css_properties_text-underline-offset\" rel=\"noopener\">widely supported</a> CSS properties that allow us to precisely define the thickness and offset for our underlines:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/almanac/properties/t/text-decoration-thickness/\"><code>text-decoration-thickness</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/t/text-underline-offset/\"><code>text-underline-offset</code></a></li></ul>\n\n\n\n<p>With these properties, we can create consistent underlines even across two very different browsers, such as the Gecko-based Firefox on Android and the WebKit-based Safari on macOS.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\n  text-decoration: underline;\n  text-decoration-thickness: 0.04em;\n  text-underline-offset: 0.03em;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2016\" height=\"1426\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=2016%2C1426&#038;ssl=1\" alt=\"\" class=\"wp-image-359840\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?w=2016&amp;ssl=1 2016w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=300%2C212&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=1024%2C724&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=768%2C543&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=1536%2C1086&amp;ssl=1 1536w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=1000%2C707&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Top row: the browsers’ default underlines; bottom row: consistent underlines with CSS. (<a href=\"https://codepen.io/simevidas/pen/poWPBoX?editors=1100\" rel=\"noopener\">Demo</a>)</figcaption></figure>\n\n\n\n<p class=\"is-style-explanation\"><strong>Note:</strong> The <code>text-decoration-thickness</code> property also has a special <a href=\"https://drafts.csswg.org/css-text-decor-4/#valdef-text-decoration-thickness-from-font\" rel=\"noopener\"><code>from-font</code> value</a> that instructs browsers to use the font’s own preferred underline width, if available. I <a href=\"https://twitter.com/simevidas/status/1469790544335450112\" rel=\"noopener\">tested</a> this value with a few different fonts, but the underlines were inconsistent.</p>\n\n\n\n<p>OK, so let&#8217;s move on to the two Chrome bugs I noted earlier.</p>\n\n\n\n<h3>Chrome bug 1: Underlines are too thin on macOS</h3>\n\n\n\n<p>If you set the <code>text-decoration-thickness</code> property to a font-relative length value that computes to a non-integer pixel value, Chrome will “floor” that value instead of rounding it to the nearest integer. For example, if the declared thickness is <code>0.06em</code>, and that computes to <code>1.92px</code>, Chrome will paint a thickness of <code>1px</code> instead of <code>2px</code>. This issue is limited to macOS.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  font-size: 2em; /* computes to 32px */\n  text-decoration-thickness: 0.06em; /* computes to 1.92px */\n}</code></pre>\n\n\n\n<p>In the following screenshot, notice how the text decoration lines are twice as thin in Chrome (third row) than in Safari and Firefox.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1042\" height=\"462\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=1042%2C462&#038;ssl=1\" alt=\"\" class=\"wp-image-359843\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?w=1042&amp;ssl=1 1042w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=300%2C133&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=1024%2C454&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=768%2C341&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=1000%2C443&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>From top to bottom: Safari, Firefox, and Chrome on macOS. (<a href=\"https://codepen.io/simevidas/pen/qBPjavx?editors=1100\" rel=\"noopener\">Demo</a>)</figcaption></figure>\n\n\n\n<p class=\"is-style-default\">For more information about this bug, see <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1255280\" rel=\"noopener\">Chromium issue #1255280</a>.</p>\n\n\n\n<h3>Chrome bug 2: Underlines are too low</h3>\n\n\n\n<p>The <code>text-underline-offset</code> property allows us to precisely set the distance between the alphabetic baseline and the underline (the underline’s offset from the baseline). Unfortunately, this feature is currently not implemented correctly in Chrome and, as a result, the underline is positioned too low.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\n  text-decoration: underline;\n  text-decoration-color: #f707;\n\n  /* disable “skip ink” */\n  -webkit-text-decoration-skip: none; /* Safari */\n  text-decoration-skip-ink: none;\n\n  /* cover the entire descender */\n  text-decoration-thickness: 0.175em; /* descender height */\n  text-underline-offset: 0; /* no offset from baseline */\n}</code></pre>\n\n\n\n<p>Because of this bug, it is not possible to move the underline all the way up to the baseline in Chrome.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1316\" height=\"425\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=1316%2C425&#038;ssl=1\" alt=\"\" class=\"wp-image-359846\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?w=1316&amp;ssl=1 1316w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=300%2C97&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=1024%2C331&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=768%2C248&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=1000%2C323&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>From left to right: Safari, Firefox, and Chrome on macOS. View this demo <a href=\"https://codepen.io/simevidas/pen/QWqgVKo?editors=0100\" rel=\"noopener\">on CodePen</a>.</figcaption></figure>\n\n\n\n<p>For more information about this bug, see <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1172623\" rel=\"noopener\">Chromium issue #1172623</a>.</p>\n\n\n\n<p class=\"is-style-explanation\"><strong>Note:</strong> As you might have noticed from the image above, Safari draws underlines on top of descenders instead of beneath them. This is a <a href=\"https://bugs.webkit.org/show_bug.cgi?id=227445\" rel=\"noopener\">WebKit bug</a> that was fixed very recently. The fix should ship in the next version of Safari.</p>\n\n\n\n<h3>Help prioritize the Chrome bugs</h3>\n\n\n\n<p>The two new CSS properties for styling underlines are a welcome addition to CSS. Hopefully, the two related Chrome bugs will be fixed sooner rather than later. If these CSS features are important to you, make your voice heard by starring the bugs in Chromium’s bug tracker.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2000\" height=\"872\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=2000%2C872&#038;ssl=1\" alt=\"\" class=\"wp-image-359848\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=300%2C131&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=1024%2C446&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=768%2C335&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=1536%2C670&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=1000%2C436&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Sign in with your Google account and click the star button on issues <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1172623\" rel=\"noopener\">#1172623</a> and <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1255280\" rel=\"noopener\">#1255280</a>.</figcaption></figure>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/\">CSS Underlines Are Too Thin and Too Low in Chrome</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I’ve encountered two bugs in Chrome while testing the new CSS text-decoration-thickness and text-underline-offset properties, and I want to share them with you here in this article.\n\n\n\nBut first, let’s acknowledge one thing:\n\n\n\n\n\n\n\nDefault underlines are inconsistent\n\n\n\nLet’s add a text link to a plain web page, set its font-family to Arial, and compare the underlines across browsers and operating systems.\n\n\n\nFrom left to right: Chrome, Safari, and Firefox on macOS; Safari on iOS; Chrome, and Firefox on Windows; Chrome, and Firefox on Android.\n\n\n\nAs you can see, the default underline is inconsistent across browsers. Each browser chooses their own default thickness and vertical position (offset from the baseline) for the underline. This is in line with the CSS Text Decoration module, which specifies the following default behavior (auto value):\n\n\n\nThe user agent chooses an appropriate thickness for text decoration lines. […] The user agent chooses an appropriate offset for underlines.\n\n\n\nLuckily, we can override the browsers’ defaults\n\n\n\nThere are two new, widely supported CSS properties that allow us to precisely define the thickness and offset for our underlines:\n\n\n\ntext-decoration-thicknesstext-underline-offset\n\n\n\nWith these properties, we can create consistent underlines even across two very different browsers, such as the Gecko-based Firefox on Android and the WebKit-based Safari on macOS.\n\n\n\nh1 {\n  text-decoration: underline;\n  text-decoration-thickness: 0.04em;\n  text-underline-offset: 0.03em;\n}\n\n\n\nTop row: the browsers’ default underlines; bottom row: consistent underlines with CSS. (Demo)\n\n\n\nNote: The text-decoration-thickness property also has a special from-font value that instructs browsers to use the font’s own preferred underline width, if available. I tested this value with a few different fonts, but the underlines were inconsistent.\n\n\n\nOK, so let’s move on to the two Chrome bugs I noted earlier.\n\n\n\nChrome bug 1: Underlines are too thin on macOS\n\n\n\nIf you set the text-decoration-thickness property to a font-relative length value that computes to a non-integer pixel value, Chrome will “floor” that value instead of rounding it to the nearest integer. For example, if the declared thickness is 0.06em, and that computes to 1.92px, Chrome will paint a thickness of 1px instead of 2px. This issue is limited to macOS.\n\n\n\na {\n  font-size: 2em; /* computes to 32px */\n  text-decoration-thickness: 0.06em; /* computes to 1.92px */\n}\n\n\n\nIn the following screenshot, notice how the text decoration lines are twice as thin in Chrome (third row) than in Safari and Firefox.\n\n\n\nFrom top to bottom: Safari, Firefox, and Chrome on macOS. (Demo)\n\n\n\nFor more information about this bug, see Chromium issue #1255280.\n\n\n\nChrome bug 2: Underlines are too low\n\n\n\nThe text-underline-offset property allows us to precisely set the distance between the alphabetic baseline and the underline (the underline’s offset from the baseline). Unfortunately, this feature is currently not implemented correctly in Chrome and, as a result, the underline is positioned too low.\n\n\n\nh1 {\n  text-decoration: underline;\n  text-decoration-color: #f707;\n\n  /* disable “skip ink” */\n  -webkit-text-decoration-skip: none; /* Safari */\n  text-decoration-skip-ink: none;\n\n  /* cover the entire descender */\n  text-decoration-thickness: 0.175em; /* descender height */\n  text-underline-offset: 0; /* no offset from baseline */\n}\n\n\n\nBecause of this bug, it is not possible to move the underline all the way up to the baseline in Chrome.\n\n\n\nFrom left to right: Safari, Firefox, and Chrome on macOS. View this demo on CodePen.\n\n\n\nFor more information about this bug, see Chromium issue #1172623.\n\n\n\nNote: As you might have noticed from the image above, Safari draws underlines on top of descenders instead of beneath them. This is a WebKit bug that was fixed very recently. The fix should ship in the next version of Safari.\n\n\n\nHelp prioritize the Chrome bugs\n\n\n\nThe two new CSS properties for styling underlines are a welcome addition to CSS. Hopefully, the two related Chrome bugs will be fixed sooner rather than later. If these CSS features are important to you, make your voice heard by starring the bugs in Chromium’s bug tracker.\n\n\n\nSign in with your Google account and click the star button on issues #1172623 and #1255280.\n\nCSS Underlines Are Too Thin and Too Low in Chrome originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-04T15:30:18.000Z",
      "date_modified": "2022-01-04T15:30:18.000Z",
      "_plugin": {
        "pageFilename": "c3247eb3e5ca8e2fa5140c485a3d75b24c681f563648beced0123b93cdeb2175.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360452",
      "url": "https://css-tricks.com/jetpack-features-we-love-and-use-at-css-tricks/",
      "title": "Jetpack Features We Love and Use at CSS-Tricks",
      "summary": "(This is a sponsored post.)\nWe use and love Jetpack around here. It’s a WordPress plugin that brings a whole suite of functionality to your site ranging from security to marketing with lots of ridiculously useful stuff in between! …\n\nJetpack Features We Love and Use at CSS-Tricks originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p><meta charset=\"utf-8\">We use and love <a href=\"https://jetpack.com/?aff=8638\" rel=\"noopener\">Jetpack</a> around here. It&#8217;s a WordPress plugin that brings a whole suite of functionality to your site ranging from security to marketing with lots of ridiculously useful stuff in between! Here&#8217;s our favorite features around&nbsp;here.</p>\n\n\n\n<span id=\"more-360452\"></span>\n\n\n\n<div class=\"wp-block-columns ticss-ddea03eb\">\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-30791cf4 jetpack-box\"><div class=\"wp-block-group__inner-container\">\n<h2 id=\"h-powerful-search\">Powerful Search</h2>\n\n\n\n<p>Jetpack&#8217;s Search feature gives your site an incredibly powerful search engine with the flip of a switch. You get a very fast, truly <strong>intelligent search</strong> for your entire site that is easily sortable and filterable with <a href=\"https://css-tricks.com/jetpack-instant-search/\">literally zero work on your part</a>. You can&#8217;t rely on default WordPress search — this is a must-have. Bonus: it&#8217;s all handled offsite, so there is minimal burden on your server.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2700\" height=\"2278\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=2700%2C2278&#038;ssl=1\" alt=\"Showing the full-page JetPack search feature.\" class=\"wp-image-360439\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?w=2700&amp;ssl=1 2700w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=300%2C253&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=1024%2C864&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=768%2C648&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=1536%2C1296&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=2048%2C1728&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=1000%2C844&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/search/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-634991b5 jetpack-box\"><div class=\"wp-block-group__inner-container\">\n<h2 id=\"h-backups-activity\">Backups &amp; Activity</h2>\n\n\n\n<p>We sleep easy knowing CSS-Tricks is entirely backed up in <strong>real-time</strong>. Everything is backed up from the site&#8217;s content, comments, settings, theme files, media, even WordPress itself. </p>\n\n\n\n<p>An activity log shows off everything that happens on the site, and I use that same log to restore the site to any point in time.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1790\" height=\"1942\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=1790%2C1942&#038;ssl=1\" alt=\"Showing a timeline log of site changes in Jetpack Backup.\" class=\"wp-image-306950\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?w=1790&amp;ssl=1 1790w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=277%2C300&amp;ssl=1 277w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=944%2C1024&amp;ssl=1 944w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=768%2C833&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=1416%2C1536&amp;ssl=1 1416w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=1000%2C1085&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/upgrade/backup/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns ticss-2cedae8d\">\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-335c9a47 jetpack-box\"><div class=\"wp-block-group__inner-container\">\n<h2 id=\"h-image-handling\">Performant Media </h2>\n\n\n\n<p>There are at least four things you have to do with images on websites to make sure you&#8217;re serving them in a performance responsible way: (1) use the responsive images syntax to serve an appropriately sized version, (2) optimize the image, (3) lazy load the image, and (4) serve the image from a CDN. Fortunately, WordPress itself helps with #1, which can be tricky. Jetpack helps with the others with the flip of a switch.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1394\" height=\"584\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=1394%2C584&#038;ssl=1\" alt=\"\" class=\"wp-image-306938\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?w=1394&amp;ssl=1 1394w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=300%2C126&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=1024%2C429&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=768%2C322&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=1000%2C419&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/site-accelerator/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n\n\n\n<p>And don&#8217;t forget about video! <a href=\"https://jetpack.com/videopress/?aff=8638\" rel=\"noopener\">VideoPress</a> does even more for your hosted videos. No ads, beautiful feature-rich player, CDN-hosted optimized video, poster graphics for mobile, and you do absolutely nothing different with your workflow: just drag and drop videos into posts.</p>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<h2 id=\"h-markdown\">Markdown</h2>\n\n\n\n<p>Writing content in Markdown can be awful handy. Especially on a developer-focused site, it makes sense to offer it to users in the comment section. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2360\" height=\"1044\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=2360%2C1044&#038;ssl=1\" alt=\"\" class=\"wp-image-306933\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?w=2360&amp;ssl=1 2360w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=300%2C133&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=1024%2C453&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=768%2C340&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=1536%2C679&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=2048%2C906&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=1000%2C442&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>With Jetpack Markdown, you also get a Markdown block to use in the block editor so you can write in chunks of Markdown wherever needed.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1060\" height=\"428\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=1060%2C428&#038;ssl=1\" alt=\"\" class=\"wp-image-360441\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?w=1060&amp;ssl=1 1060w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=300%2C121&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=1024%2C413&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=768%2C310&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=1000%2C404&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/markdown/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-9decf36b jetpack-box\"><div class=\"wp-block-group__inner-container\">\n<h2 id=\"h-related-posts\">Related Posts</h2>\n\n\n\n<p>CSS-Tricks has thousands of pages of content! It&#8217;s a challenge for us to surface all the best stuff, particularly on a per-topic basis and without having to hand-pick everything. Showing related posts is tricky to pull off and we love that Jetpack does a great job with it, all without burdening our servers the way other related content solutions can.</p>\n</div></div>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2446\" height=\"714\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?fit=1024%2C299&amp;ssl=1\" alt=\"\" class=\"wp-image-306937\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?w=2446&amp;ssl=1 2446w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=300%2C88&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=1024%2C299&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=768%2C224&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=1536%2C448&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=2048%2C598&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=1000%2C292&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/related-posts/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-b9939e63 jetpack-box\"><div class=\"wp-block-group__inner-container\">\n<h2 id=\"h-social-connections\">Social Connections</h2>\n\n\n\n<p>We like to tell the world as best as we can when we publish new content. Rather than having to do that manually, we can share the post to Twitter and Facebook the second we hit that &#8220;Publish&#8221; button. You can always head back to older content and <a href=\"https://jetpack.com/2021/12/07/jetpack-10-4-re-publish-social-posts-from-the-block-editor/?aff=8638\" rel=\"noopener\">re-publish</a> to social media as well.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-10.47.05-AM.png?resize=247%2C366&#038;ssl=1\" alt=\"Showing the Jetpack publishing settings prior to publishing the post. It shows options to publish to Twitter and Facebook and an area to customize the message.\" class=\"wp-image-306947\" width=\"247\" height=\"366\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-10.47.05-AM.png?w=634&amp;ssl=1 634w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-10.47.05-AM.png?resize=202%2C300&amp;ssl=1 202w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/features/traffic/automatic-publishing/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n</div>\n</div>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>This isn&#8217;t a complete list. The official <a href=\"https://jetpack.com/features/?aff=8638\" rel=\"noopener\">features page</a> will show you even more. Every site&#8217;s needs will be different. There are all sorts of security, design, and promotion features that might be <em>your</em> favorites. If you manage a lot of WordPress sites, as agencies often too, take note there is <a href=\"https://jetpack.com/2021/10/27/announcing-jetpack-licensing/?aff=8638\" rel=\"noopener\">a new Licensing Portal</a> to manage billing across multiple sites much more easily.  </p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/jetpack-features-we-love-and-use-at-css-tricks/\">Jetpack Features We Love and Use at CSS-Tricks</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "(This is a sponsored post.)\nWe use and love Jetpack around here. It’s a WordPress plugin that brings a whole suite of functionality to your site ranging from security to marketing with lots of ridiculously useful stuff in between! Here’s our favorite features around here.\n\n\n\n\n\n\n\n\n\n\nPowerful Search\n\n\n\nJetpack’s Search feature gives your site an incredibly powerful search engine with the flip of a switch. You get a very fast, truly intelligent search for your entire site that is easily sortable and filterable with literally zero work on your part. You can’t rely on default WordPress search — this is a must-have. Bonus: it’s all handled offsite, so there is minimal burden on your server.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\n\n\nBackups & Activity\n\n\n\nWe sleep easy knowing CSS-Tricks is entirely backed up in real-time. Everything is backed up from the site’s content, comments, settings, theme files, media, even WordPress itself. \n\n\n\nAn activity log shows off everything that happens on the site, and I use that same log to restore the site to any point in time.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\n\n\n\n\nPerformant Media \n\n\n\nThere are at least four things you have to do with images on websites to make sure you’re serving them in a performance responsible way: (1) use the responsive images syntax to serve an appropriately sized version, (2) optimize the image, (3) lazy load the image, and (4) serve the image from a CDN. Fortunately, WordPress itself helps with #1, which can be tricky. Jetpack helps with the others with the flip of a switch.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\nAnd don’t forget about video! VideoPress does even more for your hosted videos. No ads, beautiful feature-rich player, CDN-hosted optimized video, poster graphics for mobile, and you do absolutely nothing different with your workflow: just drag and drop videos into posts.\n\n\n\n\n\nMarkdown\n\n\n\nWriting content in Markdown can be awful handy. Especially on a developer-focused site, it makes sense to offer it to users in the comment section. \n\n\n\n\n\n\n\nWith Jetpack Markdown, you also get a Markdown block to use in the block editor so you can write in chunks of Markdown wherever needed.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\n\n\n\nRelated Posts\n\n\n\nCSS-Tricks has thousands of pages of content! It’s a challenge for us to surface all the best stuff, particularly on a per-topic basis and without having to hand-pick everything. Showing related posts is tricky to pull off and we love that Jetpack does a great job with it, all without burdening our servers the way other related content solutions can.\n\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\n\nSocial Connections\n\n\n\nWe like to tell the world as best as we can when we publish new content. Rather than having to do that manually, we can share the post to Twitter and Facebook the second we hit that “Publish” button. You can always head back to older content and re-publish to social media as well.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\n\n\n\n\n\nThis isn’t a complete list. The official features page will show you even more. Every site’s needs will be different. There are all sorts of security, design, and promotion features that might be your favorites. If you manage a lot of WordPress sites, as agencies often too, take note there is a new Licensing Portal to manage billing across multiple sites much more easily.  \n\nJetpack Features We Love and Use at CSS-Tricks originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-04T15:28:03.000Z",
      "date_modified": "2022-01-04T15:28:03.000Z",
      "_plugin": {
        "pageFilename": "eaa92dfb6c0284fa6017cdce9a223fba9ce3345bb04a6aabb964d3bc78b71a57.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360385",
      "url": "https://css-tricks.com/css-based-fingerprinting/",
      "title": "CSS-Based Fingerprinting",
      "summary": "Fingerprinting is bad. It’s a term that refers to building up enough metadata about a user that you can essentially figure out who they are. JavaScript has access to all sorts of fingerprinting possibilities, which then combined with the IP …\n\nCSS-Based Fingerprinting originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Fingerprinting is bad. It&#8217;s a term that refers to building up enough metadata about a user that you can essentially figure out who they are. JavaScript has access to all sorts of fingerprinting possibilities, which then combined with the IP address that the server has access to, means fingerprinting is all too common. </p>\n\n\n\n<p>You don&#8217;t generally think of CSS as being a fingerprinting vector though, and thus &#8220;safe&#8221; in that way. But Oliver Brotchie <a href=\"https://csstracking.dev/\" rel=\"noopener\">has documented an idea</a> that allows for some degree of<a href=\"https://csstracking.dev/\" rel=\"noopener\"> </a>fingerprinting with CSS alone. </p>\n\n\n\n<span id=\"more-360385\"></span>\n\n\n\n<p>Think of all the <code>@media</code> queries we have. We can test for pointer type with <code>any-pointer</code>. Imagine that for each value, we request a totally unique <code>background-image</code> from a server. If that image was requested, we know those <code>@media</code> queries were true. We can start to fingerprint with something like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.pointer {\n  background-image: url('/unique-id/pointer=none')\n}\n\n@media (any-pointer: coarse) {\n  .pointer {\n    background-image: url('/unique-id/pointer=coarse')\n  }\n}\n\n@media (any-pointer: fine) {\n  .pointer {\n    background-image: url('/unique-id/pointer=fine')\n  }\n}</code></pre>\n\n\n\n<p>Combine that with the fact that we can test for a dark mode preference with <code>prefers-color-scheme</code>, the fingerprint gets a bit clearer. In fact, it&#8217;s the <a href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/#what-lies-ahead\">current draft for CSS</a> user prefer media queries that Oliver is most concerned about:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Not only will the upcoming draft make this method scalable, but it will also increase its precision. Currently, without alternative means, it is hard to conclusively link every request to a specific visitor as the only feasible way to determine their origin, is to group the requests by the IP address of the connection. However, with the new draft, by generating a randomised string and interpolating it into the URL tag for every visitor, we can accurately identify all requests from said visitor.</p></blockquote>\n\n\n\n<p>There are tons more. We can make media queries that are <code>1px</code> apart and request a background image for each, perfectly guessing the visitor&#8217;s window size. There are probably a dozen or more exotic media queries that are rarely used, but are useful specifically to fingerprinting with CSS. Combine that with <code>@supports</code> queries for all sorts of things to essentially guess the exact browser. <em>And combine that</em> with the classic technique of testing for installation of specific local fonts, and you have a half-decent fingerprinting machine. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@font-face {\n  font-family: 'some-font';\n  src: local(some font), url('/unique-id/some-font');\n}\n\n.some-font {\n  font-family:'some-font';\n}</code></pre>\n\n\n\n<p>The generated CSS to do it is massive (<a href=\"https://github.com/OliverBrotchie/CSS-Fingerprint/blob/main/fingerprint.sass\" rel=\"noopener\">here&#8217;s the Sass</a> to generate it), but apparently it&#8217;s heavily reduced once we can use custom properties in URLs. </p>\n\n\n\n<p>I&#8217;m not heavily worried about it, mostly because I don&#8217;t disable JavaScript and JavaScript is so much more widely capable of fingerprinting already. Plus, there are already other types of CSS security vulnerabilities, from reading visited links (which browsers have addressed), keylogging, and user-generated inline styles, among others that folks have pointed out in <a href=\"https://css-tricks.com/css-security-vulnerabilities/\">another article on the topic</a>.</p>\n\n\n\n<p>But Oliver&#8217;s research on fingerprinting is really good and worthy of a look by everyone who knows more about web security than I do.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-based-fingerprinting/\">CSS-Based Fingerprinting</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Fingerprinting is bad. It’s a term that refers to building up enough metadata about a user that you can essentially figure out who they are. JavaScript has access to all sorts of fingerprinting possibilities, which then combined with the IP address that the server has access to, means fingerprinting is all too common. \n\n\n\nYou don’t generally think of CSS as being a fingerprinting vector though, and thus “safe” in that way. But Oliver Brotchie has documented an idea that allows for some degree of fingerprinting with CSS alone. \n\n\n\n\n\n\n\nThink of all the @media queries we have. We can test for pointer type with any-pointer. Imagine that for each value, we request a totally unique background-image from a server. If that image was requested, we know those @media queries were true. We can start to fingerprint with something like this:\n\n\n\n.pointer {\n  background-image: url('/unique-id/pointer=none')\n}\n\n@media (any-pointer: coarse) {\n  .pointer {\n    background-image: url('/unique-id/pointer=coarse')\n  }\n}\n\n@media (any-pointer: fine) {\n  .pointer {\n    background-image: url('/unique-id/pointer=fine')\n  }\n}\n\n\n\nCombine that with the fact that we can test for a dark mode preference with prefers-color-scheme, the fingerprint gets a bit clearer. In fact, it’s the current draft for CSS user prefer media queries that Oliver is most concerned about:\n\n\n\nNot only will the upcoming draft make this method scalable, but it will also increase its precision. Currently, without alternative means, it is hard to conclusively link every request to a specific visitor as the only feasible way to determine their origin, is to group the requests by the IP address of the connection. However, with the new draft, by generating a randomised string and interpolating it into the URL tag for every visitor, we can accurately identify all requests from said visitor.\n\n\n\nThere are tons more. We can make media queries that are 1px apart and request a background image for each, perfectly guessing the visitor’s window size. There are probably a dozen or more exotic media queries that are rarely used, but are useful specifically to fingerprinting with CSS. Combine that with @supports queries for all sorts of things to essentially guess the exact browser. And combine that with the classic technique of testing for installation of specific local fonts, and you have a half-decent fingerprinting machine. \n\n\n\n@font-face {\n  font-family: 'some-font';\n  src: local(some font), url('/unique-id/some-font');\n}\n\n.some-font {\n  font-family:'some-font';\n}\n\n\n\nThe generated CSS to do it is massive (here’s the Sass to generate it), but apparently it’s heavily reduced once we can use custom properties in URLs. \n\n\n\nI’m not heavily worried about it, mostly because I don’t disable JavaScript and JavaScript is so much more widely capable of fingerprinting already. Plus, there are already other types of CSS security vulnerabilities, from reading visited links (which browsers have addressed), keylogging, and user-generated inline styles, among others that folks have pointed out in another article on the topic.\n\n\n\nBut Oliver’s research on fingerprinting is really good and worthy of a look by everyone who knows more about web security than I do.\n\nCSS-Based Fingerprinting originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-03T21:45:10.000Z",
      "date_modified": "2022-01-03T21:45:10.000Z",
      "_plugin": {
        "pageFilename": "2cb7f5fbced9915e912da31ac839ebb4b1042cce9d3e18ae9821525746428e81.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359615",
      "url": "https://css-tricks.com/how-to-create-a-browser-extension/",
      "title": "How to Create a Browser Extension",
      "summary": "I’ll bet you are using browser extensions right now. Some of them are extremely popular and useful, like ad blockers, password managers, and PDF viewers. These extensions (or “add-ons”) are not limited to those purposes — you can do a …\n\nHow to Create a Browser Extension originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I’ll bet you are using browser extensions right now. Some of them are extremely popular and useful, like ad blockers, password managers, and PDF viewers. These extensions (or &#8220;add-ons&#8221;) are not limited to those purposes — you can do a lot more with them! In this article, I will give you an introduction on how to create one. Ultimately, we’ll make it work in multiple browsers.</p>\n\n\n\n<span id=\"more-359615\"></span>\n\n\n\n<h3>What we’re making</h3>\n\n\n\n<p>We’re making an extension called <strong>&#8220;Transcribers of Reddit&#8221;</strong> and it’s going to improve Reddit’s accessibility by moving specific comments to the top of the comment section and adding <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\" rel=\"noopener\"><code>aria-</code> attributes</a> for screen readers. We will also take our extension a little further with options for adding borders and backgrounds to comments for better text contrast.</p>\n\n\n\n<p>The whole idea is that you’ll get a nice introduction for how to develop a browser extension. We will start by creating the extension for Chromium-based browsers (e.g. Google Chrome, Microsoft Edge, Brave, etc.). In a future post we will port the extension to work with Firefox, as well as Safari which <a href=\"https://webkit.org/blog/11989/new-webkit-features-in-safari-15/\" rel=\"noopener\">recently added support for Web Extensions</a> in both the MacOS and iOS versions of the browser.</p>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/Lars418/torExtension\" rel=\"noopener\">GitHub repo</a></div>\n</div>\n\n\n\n<p>Ready? Let’s take this one step at a time.</p>\n\n\n\n<h3>Create a working directory</h3>\n\n\n\n<p>Before anything else, we need a working space for our project. All we really need is to create a folder and give it a name (which I’m calling <code>transcribers-of-reddit</code>). Then, create another folder inside that one named <code>src</code> for our source code.</p>\n\n\n\n<h3>Define the entry point</h3>\n\n\n\n<p>The entry point is a file that contains general information about the extension (i.e. extension name, description, etc.) and defines permissions or scripts to execute.</p>\n\n\n\n<p>Our entry point can be a <code>manifest.json</code> file located in the <code>src</code> folder we just created. In it, let’s add the following three properties:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\"\n}</code></pre>\n\n\n\n<p>The <code>manifest_version</code> is similar to version in npm or Node. It defines what APIs are available (or not). We’re going to work on the bleeding edge and use the latest version, 3 (also known as as <code>mv3</code>).</p>\n\n\n\n<p>The second property is <code>name</code> and it specifies our extension name. This name is what’s displayed everywhere our extension appears, like <a href=\"https://chrome.google.com/webstore\" rel=\"noopener\">Chrome Web Store</a> and the <code>chrome://extensions</code> page in the Chrome browser.</p>\n\n\n\n<p>Then there’s <code>version</code>. It labels the extension with a version number. Keep in mind that this property (in contrast to <code>manifest_version</code>) is a string that can only contain numbers and dots (e.g. 1.3.5).</p>\n\n\n\n<h3>More <code>manifest.json</code> information</h3>\n\n\n\n<p>There’s actually a lot more we can add to help add context to our extension. For example, we can provide a <code>description</code> that explains what the extension does. It’s a good idea to provide these sorts of things, as it gives users a better idea of what they’re getting into when they use it.</p>\n\n\n\n<p>In this case, we’re not only adding a description, but supplying icons and a web address that Chrome Web Store points to on the extension’s page.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\"\n}</code></pre>\n\n\n\n<ul><li>The <code>description</code> is displayed on Chrome’s management page (<code>chrome://extensions</code>) and should be brief, less than 132 characters.</li><li>The <code>icons</code> are used in lots of places. As the <a href=\"https://developer.chrome.com/docs/extensions/mv3/manifest/icons/\" rel=\"noopener\">docs</a> state, it’s best to provide three versions of the same icon in different resolutions, preferably as a PNG file. Feel free to use the ones in the <a href=\"https://github.com/Lars418/torExtension/tree/main/src/images/logo\" rel=\"noopener\">GitHub repository</a> for this example.</li><li>The <code>homepage_url</code> can be used to connect your website with the extension. A button including the link will be displayed when clicking on &#8220;More details&#8221; on the management page.</li></ul>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img loading=\"lazy\" width=\"566\" height=\"851\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/image-2.png?resize=566%2C851&#038;ssl=1\" alt=\"\" class=\"wp-image-359642\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/image-2.png?w=566&amp;ssl=1 566w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/image-2.png?resize=200%2C300&amp;ssl=1 200w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Our opened extension card inside the extension management page.</figcaption></figure></div>\n\n\n\n<h3>Setting permissions</h3>\n\n\n\n<p>One major advantage extensions have is that their APIs allow you to interact directly with the browser. But we have to explicitly give the extension those permissions, which also goes inside the <code>manifest.json</code> file.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"13,14,15,16\"><code markup=\"tt\">\n{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\",\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\",\n\n  \"permissions\": [\n    \"storage\",\n    \"webNavigation\"\n  ]\n}</code></pre>\n\n\n\n<p>What did we just give this extension permission to? First, storage. We want this extension to be able to save the user’s settings, so we need to access the browser’s web storage to hold them. For example, if the user wants red borders on the comments, then we’ll save that for next time rather than making them set it again.</p>\n\n\n\n<p>We also gave the extension permission to look at how the user navigated to the current screen. Reddit is a single-page application (SPA) which means it doesn’t trigger a page refresh. We need to &#8220;catch&#8221; this interaction, as Reddit will only load the comments of a post if we click on it. So, that’s why we’re tapping into <code>webNavigation</code>.</p>\n\n\n\n<p>We’ll get to executing code on a page later as it requires a whole new entry inside <code>manifest.json</code>.</p>\n\n\n\n<p>/explanation Depending on which permissions are allowed, the browser might display a warning to the user to accept the permissions. It’s only certain ones, though, and <a href=\"https://developer.chrome.com/docs/extensions/mv3/permission_warnings/#permissions_with_warnings\" rel=\"noopener\">Chrome has a nice outline of them</a>.</p>\n\n\n\n<h3>Managing translations</h3>\n\n\n\n<p>Browser extensions have a built-in internalization (i18n) API. It allows you to manage translations for multiple languages (<a href=\"https://developer.chrome.com/docs/webstore/i18n/#choosing-locales-to-support\" rel=\"noopener\">full list</a>). To use the API, we have to define our translations and default language right in the <code>manifest.json</code> file:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"default_locale\": \"en\"</code></pre>\n\n\n\n<p>This sets English as the language. In the event that a browser is set to any other language that isn’t supported, the extension will fall back to the default locale (<code>en</code> in this example).</p>\n\n\n\n<p>Our translations are defined inside the <code>_locales</code> directory. Let’s create another folder in there each language you want to support. Each subdirectory gets its own <code>messages.json</code> file.</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">src \n └─ _locales\n     └─ en\n        └─ messages.json\n     └─ fr\n        └─ messages.json</code></pre>\n\n\n\n<p>A translation file consists of multiple parts:</p>\n\n\n\n<ul><li><strong>Translation key (&#8220;id&#8221;):</strong> This key is used to reference the translation.</li><li><strong>Message:</strong> The actual translation content</li><li><strong>Description (optional):</strong> Describes the translation (I wouldn’t use them, they just bloat up the file and your translation key should be descriptive enough)</li><li><strong>Placeholders (optional):</strong> Can be used to insert dynamic content inside a translation</li></ul>\n\n\n\n<p>Here’s an example that pulls all that together:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"userGreeting\": { // Translation key (\"id\")\n    \"message\": \"Good $daytime$, $user$!\" // Translation\n    \"description\": \"User Greeting\", // Optional description for translators\n    \"placeholders\": { // Optional placeholders\n      \"daytime\": { // As referenced inside the message\n        \"content\": \"$1\",\n        \"example\": \"morning\" // Example value for our content\n      },\n      \"user\": { \n        \"content\": \"$1\",\n        \"example\": \"Lars\"\n      }\n    }\n  }\n}</code></pre>\n\n\n\n<p>Using placeholders is a bit more challenging. At first we need to define the placeholder inside the message. A placeholder needs to be wrapped in between <code>$</code> characters. Afterwards, we have to add our placeholder to the &#8220;placeholder list.&#8221; This is a bit unintuitive, but Chrome wants to know what value should be inserted for our placeholders. We (obviously) want to use a dynamic value here, so we use the special <code>content</code> value <code>$1</code> which references our inserted value.</p>\n\n\n\n<p>The <code>example</code> property is optional. It can be used to give translators a hint what value the placeholder could be (but is not actually displayed).</p>\n\n\n\n<p>We need to define the following translations for our extension. Copy and paste them into the <code>messages.json</code> file. Feel free to add more languages (e.g. if you speak German, add a <code>de</code> folder inside <code>_locales</code>, and so on).</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"name\": {\n    \"message\": \"Transcribers of Reddit\"\n  },\n  \"description\": {\n    \"message\": \"Accessible image descriptions for subreddits.\"\n  },\n  \"popupManageSettings\": {\n    \"message\": \"Manage settings\"\n  },\n  \"optionsPageTitle\": {\n    \"message\": \"Settings\"\n  },\n  \"sectionGeneral\": {\n    \"message\": \"General settings\"\n  },\n  \"settingBorder\": {\n    \"message\": \"Show comment border\"\n  },\n  \"settingBackground\": {\n    \"message\": \"Show comment background\"\n  }\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">You might be wondering why we registered the permissions when there is no sign of an i18n permission, right? Chrome is a bit weird in that regard, as you don’t need to register every permission. Some (e.g. <code>chrome.i18n</code>) don’t require an entry inside the manifest. Other permissions require an entry but won’t be displayed to the user when installing the extension. Some other permissions are &#8220;hybrid&#8221; (e.g. <code>chrome.runtime</code>), meaning some of their functions can be used without declaring a permission—but other functions of the same API require one entry in the manifest. You’ll want to take a look at the <a href=\"https://developer.chrome.com/docs/extensions/reference/\" rel=\"noopener\">documentation</a> for a solid overview of the differences.</p>\n\n\n\n<h4>Using translations inside the manifest</h4>\n\n\n\n<p>The first thing our end user will see is either the entry inside the Chrome Web Store or the extension overview page. We need to adjust our manifest file to make sure everything os translated.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  // Update these entries\n  \"name\": \"__MSG_name__\",\n  \"description\": \"__MSG_description__\"\n}</code></pre>\n\n\n\n<p>Applying this syntax uses the corresponding translation in our <code>messages.json</code> file (e.g. <code>_MSG_name_</code> uses the <code>name</code> translation).</p>\n\n\n\n<h4>Using translations in HTML pages</h4>\n\n\n\n<p>Applying translations in an HTML file takes a little JavaScript.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.i18n.getMessage('name');</code></pre>\n\n\n\n<p>That code returns our defined translation (which is <code>Transcribers of Reddit</code>). Placeholders can be done in a similar way.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.i18n.getMessage('userGreeting', {\n  daytime: 'morning',\n  user: 'Lars'\n});</code></pre>\n\n\n\n<p>It would be a pain in the butt to apply translations to all elements this way. But we can write a little script that performs the translation based on a <code>data-</code> attribute. So, let’s create a new <code>js</code> folder inside the <code>src</code> directory, then add a new <code>util.js</code> file in it.</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">src \n └─ js\n     └─ util.js</code></pre>\n\n\n\n<p>This gets the job done:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const i18n = document.querySelectorAll(\"[data-intl]\");\ni18n.forEach(msg => {\n  msg.innerHTML = chrome.i18n.getMessage(msg.dataset.intl);\n});\n\nchrome.i18n.getAcceptLanguages(languages => {\n  document.documentElement.lang = languages[0];\n});</code></pre>\n\n\n\n<p>Once that script is added to an HTML page, we can add the <code>data-intl</code> attribute to an element to set its content. The document language will also be set based on the user language.</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- Before JS execution -->\n&lt;html>\n  &lt;body>\n    &lt;button data-intl=\"popupManageSettings\">&lt;/button>\n  &lt;/body>\n&lt;/html></code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- After JS execution -->\n&lt;html lang=\"en\">\n  &lt;body>\n    &lt;button data-intl=\"popupManageSettings\">Manage settings&lt;/button>\n  &lt;/body>\n&lt;/html></code></pre>\n</div>\n</div>\n\n\n\n<h3>Adding a pop-up and options page</h3>\n\n\n\n<p>Before we dive into actual programming, we we need to create two pages:</p>\n\n\n\n<ol><li>An options page that contains user settings</li><li>A pop-up page that opens when interacting with the extension icon right next to our address bar. This page can be used for various scenarios (e.g. for displaying stats or quick settings).</li></ol>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"820\" height=\"298\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?resize=820%2C298&#038;ssl=1\" alt=\"\" class=\"wp-image-359621\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?w=820&amp;ssl=1 820w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?resize=300%2C109&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?resize=768%2C279&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The options page containg our settings.</figcaption></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"356\" height=\"143\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image.png?resize=356%2C143&#038;ssl=1\" alt=\"\" class=\"wp-image-359622\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image.png?w=356&amp;ssl=1 356w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image.png?resize=300%2C121&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The pop-up containg a link to the options page.</figcaption></figure>\n</div>\n</div>\n\n\n\n<p>Here’s an outline of the folders and files we need in order to make the pages:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">src \n ├─ css\n |    └─ paintBucket.css\n ├─ popup\n |    ├─ popup.html\n |    ├─ popup.css\n |    └─ popup.js\n └─ options\n      ├─ options.html\n      ├─ options.css\n      └─ options.js</code></pre>\n\n\n\n<p>The <code>.css</code> files contain plain CSS, nothing more and nothing less. I won’t into detail because I know most of you reading this are already fully aware of how CSS works. You can copy and paste the styles from the <a href=\"https://github.com/Lars418/torExtension/tree/main/src\" rel=\"noopener\">GitHub repository</a> for this project.</p>\n\n\n\n<p class=\"is-style-explanation\">Note that the pop-up is not a tab and that its size depends on the content in it. If you want to use a fixed popup size, you can set the <code>width</code> and <code>height</code> properties on the <code>html</code> element.</p>\n\n\n\n<h4>Creating the pop-up</h4>\n\n\n\n<p>Here’s an HTML skeleton that links up the CSS and JavaScript files and adds a headline and button inside the <code>&lt;body&gt;</code>.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!doctype html>\n&lt;html lang=\"en\">\n  &lt;head>\n    &lt;meta charset=\"UTF-8\">\n    &lt;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    &lt;title data-intl=\"name\">&lt;/title>\n\n    &lt;link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n    &lt;link rel=\"stylesheet\" href=\"popup.css\">\n\n    &lt;!-- Our \"translation\" script -->\n    &lt;script src=\"../js/util.js\" defer>&lt;/script>\n    &lt;script src=\"popup.js\" defer>&lt;/script>\n  &lt;/head>\n  &lt;body>\n    &lt;h1 id=\"title\">&lt;/h1>\n    &lt;button data-intl=\"popupManageSettings\">&lt;/button>\n  &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The <code>h1</code> contains the extension name and version; the <code>button</code> is used to open the options page. The headline will not be filled with a translation (because it lacks a <code>data-intl</code> attribute), and the button doesn’t have any click handler yet, so we need to populate our <code>popup.js</code> file:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const title = document.getElementById('title');\nconst settingsBtn = document.querySelector('button');\nconst manifest = chrome.runtime.getManifest();\n\ntitle.textContent = `${manifest.name} (${manifest.version})`;\n\nsettingsBtn.addEventListener('click', () => {\n  chrome.runtime.openOptionsPage();\n});</code></pre>\n\n\n\n<p>This script first looks for the manifest file. Chrome offers the <code>runtime</code> API which contains the <code>getManifest</code> method (this specific method does not require the <code>runtime</code> permission). It returns our <code>manifest.json</code> as a JSON object. After we populate the title with the extension name and version, we can add an event listener to the settings button. If the user interacts with it, we will open the options page using <code>chrome.runtime.openOptionsPage()</code> (again no permission entry needed).</p>\n\n\n\n<p>The pop-up page is now finished, but the extension doesn’t know it exists yet. We have to register the pop-up by appending the following property to the <code>manifest.json</code> file.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"action\": {\n  \"default_popup\": \"popup/popup.html\",\n  \"default_icon\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  }\n},</code></pre>\n\n\n\n<h4>Creating the options page</h4>\n\n\n\n<p>Creating this page follows a pretty similar process as what we just completed. First, we populate our <code>options.html</code> file. Here’s some markup we can use:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!doctype html>\n&lt;html lang=\"en\">\n&lt;head>\n  &lt;meta charset=\"UTF-8\">\n  &lt;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  &lt;title data-intl=\"name\">&lt;/title>\n\n  &lt;link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n  &lt;link rel=\"stylesheet\" href=\"options.css\">\n\n  &lt;!-- Our \"translation\" script -->\n  &lt;script src=\"../js/util.js\" defer>&lt;/script>\n  &lt;script src=\"options.js\" defer>&lt;/script>\n&lt;/head>\n&lt;body>\n  &lt;header>\n    &lt;h1>\n      &lt;!-- Icon provided by feathericons.com -->\n      &lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" role=\"presentation\">\n        &lt;circle cx=\"12\" cy=\"12\" r=\"3\">&lt;/circle>\n        &lt;path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\">&lt;/path>\n      &lt;/svg>\n      &lt;span data-intl=\"optionsPageTitle\">&lt;/span>\n    &lt;/h1>\n  &lt;/header>\n\n  &lt;main>\n    &lt;section id=\"generalOptions\">\n      &lt;h2 data-intl=\"sectionGeneral\">&lt;/h2>\n\n      &lt;div id=\"generalOptionsWrapper\">&lt;/div>\n    &lt;/section>\n  &lt;/main>\n\n  &lt;footer>\n    &lt;p>Transcribers of Reddit extension by &lt;a href=\"https://lars.koelker.dev\" target=\"_blank\">lars.koelker.dev&lt;/a>.&lt;/p>\n    &lt;p>Reddit is a registered trademark of Reddit, Inc. This extension is not endorsed or affiliated with Reddit, Inc. in any way.&lt;/p>\n  &lt;/footer>\n&lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>There are no actual options yet (just their wrappers). We need to write the script for the options page. First, we define variables to access our wrappers and default settings inside <code>options.js</code>. &#8220;Freezing&#8221; our default settings prevents us from accidentally modifying them later.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const defaultSettings = Object.freeze({\n  border: false,\n  background: false,\n});\nconst generalSection = document.getElementById('generalOptionsWrapper');\n</code></pre>\n\n\n\n<p>Next, we need to load the saved settings. We can use the (previously registered) <code>storage</code> API for that. Specifically, we need to define if we want to store the data locally (<code>chrome.storage.local</code>) or sync settings through all devices the end user is logged in to (<code>chrome.storage.sync</code>). Let’s go with local storage for this project.</p>\n\n\n\n<p>Retrieving values needs to be done with the <code>get</code> method. It accepts two arguments:</p>\n\n\n\n<ol><li>The entries we want to load</li><li>A callback containing the values</li></ol>\n\n\n\n<p>Our entries can either be a string (e.g. like <code>settings</code> below) or an array of entries (useful if we want to load multiple entries). The argument inside the callback function contains an object of all entries we previously defined in <code>{ settings: ... }</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.storage.local.get('settings', ({ settings }) => {\n  const options = settings ?? defaultSettings; // Fall back to default if settings are not defined\n  if (!settings) {\n    chrome.storage.local.set({\n     settings: defaultSettings,\n    });\n }\n\n  // Create and display options\n  const generalOptions = Object.keys(options).filter(x => !x.startsWith('advanced'));\n  \n  generalOptions.forEach(option => createOption(option, options, generalSection));\n});</code></pre>\n\n\n\n<p>To render the options, we also need to create a <code>createOption()</code> function.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function createOption(setting, settingsObject, wrapper) {\n  const settingWrapper = document.createElement(\"div\");\n  settingWrapper.classList.add(\"setting-item\");\n  settingWrapper.innerHTML = `\n  &lt;div class=\"label-wrapper\">\n    &lt;label for=\"${setting}\" id=\"${setting}Desc\">\n      ${chrome.i18n.getMessage(`setting${setting}`)}\n    &lt;/label>\n  &lt;/div>\n\n  &lt;input type=\"checkbox\" ${settingsObject[setting] ? 'checked' : ''} id=\"${setting}\" />\n  &lt;label for=\"${setting}\"\n    tabindex=\"0\"\n    role=\"switch\"\n    aria-checked=\"${settingsObject[setting]}\"\n    aria-describedby=\"${setting}-desc\"\n    class=\"is-switch\"\n  >&lt;/label>\n  `;\n\n  const toggleSwitch = settingWrapper.querySelector(\"label.is-switch\");\n  const input = settingWrapper.querySelector(\"input\");\n\n  input.onchange = () => {\n    toggleSwitch.setAttribute('aria-checked', input.checked);\n    updateSetting(setting, input.checked);\n  };\n\n  toggleSwitch.onkeydown = e => {\n    if(e.key === \" \" || e.key === \"Enter\") {\n      e.preventDefault();\n      toggleSwitch.click();\n    }\n  }\n\n  wrapper.appendChild(settingWrapper);\n}</code></pre>\n\n\n\n<p>Inside the <code>onchange</code> event listener of our switch (aká radio button) we call the function <code>updateSetting</code>. This method will write the updated value of our radio button inside the storage.</p>\n\n\n\n<p>To accomplish this, we will make use of the <code>set</code> function. It has two arguments: The entry we want to overwrite and an (optional) callback (which we don’t use in our case). As our <code>settings</code> entry is not a boolean or a string but an object containing different settings, we use the spread operator (<code>…</code>) and only overwrite our actual key (setting) inside the <code>settings</code> object.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function updateSetting(key, value) {\n  chrome.storage.local.get('settings', ({ settings }) => {\n    chrome.storage.local.set({\n      settings: {\n        ...settings,\n        [key]: value\n      }\n    })\n  });\n}</code></pre>\n\n\n\n<p>Once again, we need to &#8220;inform&#8221; the extension about our options page by appending the following entry to the <code>manifest.json</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"options_ui\": {\n  \"open_in_tab\": true,\n  \"page\": \"options/options.html\"\n},</code></pre>\n\n\n\n<p>Depending on your use case you can also force the options dialog to open as a popup by setting <code>open_in_tab</code> to <code>false</code>.</p>\n\n\n\n<h3>Installing the extension for development</h3>\n\n\n\n<p>Now that we’ve successfully set up the manifest file and have added both the pop-up and options page to the mix, we can install our extension to check if our pages actually work. Navigate to <code>chrome://extensions</code> and enable &#8220;Developer mode.&#8221; Three buttons will appear. Click the one labeled &#8220;Load unpacked&#8221; and select the <code>src</code> folder of your extension to load it up.</p>\n\n\n\n<p>The extension should now be successfully installed and our &#8220;Transcribers of Reddit&#8221; tile should be on the page.</p>\n\n\n\n<p>We can already interact with our extension. Click on the puzzle piece (&#x1f9e9;) icon right next to the browser’s address bar and click on the newly-added &#8220;Transcribers of Reddit&#8221; extension. You should now be greeted by a small pop-up with the button to open the options page.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"356\" height=\"143\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image-1.png?resize=356%2C143&#038;ssl=1\" alt=\"\" class=\"wp-image-359628\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image-1.png?w=356&amp;ssl=1 356w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image-1.png?resize=300%2C121&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Lovely, right? It might look a bit different on your device, as I have dark mode enabled in these screenshots.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1129\" height=\"382\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=1129%2C382&#038;ssl=1\" alt=\"\" class=\"wp-image-359629\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?w=1129&amp;ssl=1 1129w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=300%2C102&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=1024%2C346&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=768%2C260&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=1000%2C338&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you enable the &#8220;Show comment background&#8221; and &#8220;Show comment border&#8221; settings, then reload the page, the state will persist because we’re saving it in the browser’s local storage.</p>\n\n\n\n<h3>Adding the content script</h3>\n\n\n\n<p>OK, so we can already trigger the pop-up and interact with the extension settings, but the extension doesn’t do anything particularly useful yet. To give it some life, we will add a content script.</p>\n\n\n\n<p>Add a file called <code>comment.js</code> inside the <code>js</code> directory and make sure to define it in the <code>manifest.json</code> file:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"content_scripts\": [\n  {\n    \"matches\": [ \"*://www.reddit.com/*\" ],\n    \"js\": [ \"js/comment.js\" ]\n  }\n],</code></pre>\n\n\n\n<p>The <code>content_scripts</code> is made up of two parts:</p>\n\n\n\n<ul><li><code>matches</code>: This array holds URLs that tell the browser where we want our content scripts to run. Being an extension for Reddit and all, we want this to run on any page matching <code>://www.redit.com/*</code>, where the asterisk is a wild card to match anything after the top-level domain.</li><li><code>js</code>: This array contains the actual content scripts.</li></ul>\n\n\n\n<p>Content scripts can’t interact with other (normal) JavaScripts. This means if a website’s scripts defines a variable or function, we can’t access it. For example:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// script_on_website.js\nconst username = 'Lars';\n\n// content_script.js\nconsole.log(username); // Error: username is not defined</code></pre>\n\n\n\n<p>Now let’s start writing our content script. First, we add some constants to <code>comment.js</code>. These constants contain RegEx expressions and selectors that will be used later on. The <code>CommentUtils</code> is used to determine whether or not a post contains a &#8220;tor comment,&#8221; or if comment wrappers exists.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst Selectors = Object.freeze({\n  commentWrapper: 'div[style*=\"--commentswrapper-gradient-color\"] > div, div[style*=\"max-height: unset\"] > div',\n  torComment: 'div[data-tor-comment]',\n  postContent: 'div[data-test-id=\"post-content\"]'\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst CommentUtils = Object.freeze({\n  isTorComment: (comment) => comment.querySelector('[data-test-id=\"comment\"]') ? comment.querySelector('[data-test-id=\"comment\"]').textContent.includes('m a human volunteer content transcriber for Reddit') : false,\n  torCommentsExist: () => !!document.querySelector(Selectors.torComment),\n  commentWrapperExists: () => !!document.querySelector('[data-reddit-comment-wrapper=\"true\"]')\n});</code></pre>\n\n\n\n<p>Next, we check whether or not a user directly opens a comment page (&#8220;post&#8221;), then perform a RegEx check and update the <code>directPage</code> variable. This case occurs when a user directly opens the URL (e.g. by typing it into the address bar or clicking on<code>&lt;a&gt;</code> element on another page, like Twitter).</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let directPage = false;\nif (UrlRegex.commentPage.test(window.location.href)) {\n  directPage = true;\n  moveComments();\n}</code></pre>\n\n\n\n<p>Besides opening a page directly, a user normally interacts with the SPA. To catch this case, we can add a message listener to our <code>comment.js</code> file by using the <code>runtime</code> API.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.runtime.onMessage.addListener(msg => {\n  if (msg.type === messageTypes.COMMENT_PAGE) {\n    waitForComment(moveComments);\n  }\n});</code></pre>\n\n\n\n<p>All we need now are the functions. Let’s create a <code>moveComments()</code> function. It moves the special &#8220;tor comment&#8221; to the start of the comment section. It also conditionally applies a background color and border (if borders are enabled in the settings) to the comment. For this, we call the <code>storage</code> API and load the <code>settings</code> entry:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function moveComments() {\n  if (CommentUtils.commentWrapperExists()) {\n    return;\n  }\n\n  const wrapper = document.querySelector(Selectors.commentWrapper);\n  let comments = wrapper.querySelectorAll(`${Selectors.commentWrapper} > div`);\n  const postContent = document.querySelector(Selectors.postContent);\n\n  wrapper.dataset.redditCommentWrapper = 'true';\n  wrapper.style.flexDirection = 'column';\n  wrapper.style.display = 'flex';\n\n  if (directPage) {\n    comments = document.querySelectorAll(\"[data-reddit-comment-wrapper='true'] > div\");\n  }\n\n  chrome.storage.local.get('settings', ({ settings }) => { // HIGHLIGHT 18\n    comments.forEach(comment => {\n      if (CommentUtils.isTorComment(comment)) {\n        comment.dataset.torComment = 'true';\n        if (settings.background) {\n          comment.style.backgroundColor = 'var(--newCommunityTheme-buttonAlpha05)';\n        }\n        if (settings.border) {\n          comment.style.outline = '2px solid red';\n        }\n        comment.style.order = \"-1\";\n        applyWaiAria(postContent, comment);\n      }\n    });\n  })\n}</code></pre>\n\n\n\n<p>The <code>applyWaiAria()</code> function is called inside the <code>moveComments()</code> function—it adds <code>aria-</code> attributes. The other function creates a unique identifier for use with the <code>aria-</code> attributes.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function applyWaiAria(postContent, comment) {\n  const postMedia = postContent.querySelector('img[class*=\"ImageBox-image\"], video');\n  const commentId = uuidv4();\n\n  if (!postMedia) {\n    return;\n  }\n\n  comment.setAttribute('id', commentId);\n  postMedia.setAttribute('aria-describedby', commentId);\n}\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r &amp; 0x3 | 0x8);\n    return v.toString(16);\n  });\n}</code></pre>\n\n\n\n<p>The following function waits for the comments to load and calls the <code>callback</code> parameter if it finds the comment wrapper.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function waitForComment(callback) {\n  const config = { childList: true, subtree: true };\n  const observer = new MutationObserver(mutations => {\n    for (const mutation of mutations) {\n      if (document.querySelector(Selectors.commentWrapper)) {\n        callback();\n        observer.disconnect();\n        clearTimeout(timeout);\n        break;\n      }\n    }\n  });\n\n  observer.observe(document.documentElement, config);\n  const timeout = startObservingTimeout(observer, 10);\n}\n\nfunction startObservingTimeout(observer, seconds) {\n  return setTimeout(() => {\n    observer.disconnect();\n  }, 1000 * seconds);\n}</code></pre>\n\n\n\n<h3>Adding a service worker</h3>\n\n\n\n<p>Remember when we added a listener for messages inside the content script? This listener isn&#8217;t currently receiving messages. We need to send it to the content script ourselves. For this purpose we need to register a service worker.</p>\n\n\n\n<p>We have to register our service worker inside the <code>manifest.json</code> by appending the following code to it:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"background\": {\n  \"service_worker\": \"sw.js\"\n}</code></pre>\n\n\n\n<p>Don’t forget to create the <code>sw.js</code> file inside the <code>src</code> directory (service workers always need to be created in the extension’s root directory, <code>src</code>.</p>\n\n\n\n<p>Now, let’s create some constants for the message and page types:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst Utils = Object.freeze({\n  getPageType: (url) => {\n    if (new URL(url).pathname === '/') {\n      return messageTypes.MAIN_PAGE;\n    } else if (UrlRegex.commentPage.test(url)) {\n      return messageTypes.COMMENT_PAGE;\n    } else if (UrlRegex.subredditPage.test(url)) {\n      return messageTypes.SUBREDDIT_PAGE;\n    }\n\n    return messageTypes.OTHER_PAGE;\n  }\n});</code></pre>\n\n\n\n<p>We can add the service worker’s actual content. We do this with an event listener on the history state (<code>onHistoryStateUpdated</code>) that detects when a page has been updated with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API\" rel=\"noopener\">History API</a> (which is commonly used in SPAs to navigate without a page refresh). Inside this listener, we query the active tab and extract its <code>tabId</code>. Then we send a message to our content script containing the page type and URL.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.webNavigation.onHistoryStateUpdated.addListener(async ({ url }) => {\n  const [{ id: tabId }] = await chrome.tabs.query({ active: true, currentWindow: true });\n\n  chrome.tabs.sendMessage(tabId, {\n    type: Utils.getPageType(url),\n    url\n  });\n});</code></pre>\n\n\n\n<h3>All done!</h3>\n\n\n\n<p>We’re finished! Navigate to Chrome’s extension management page ( <code>chrome://extensions</code>) and hit the reload icon on the unpacked extension. If you open a Reddit post that contains a &#8220;Transcribers of Reddit&#8221; comment with an image transcription (like <a href=\"https://www.reddit.com/r/ProgrammerHumor/comments/oi8e26/why_would_you_hurt_me_in_such_a_way_the/\" rel=\"noopener\">this one</a>), it will be moved to the start of the comment section and be highlighted as long as we’ve enabled it in the extension settings.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1270\" height=\"1332\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=1270%2C1332&#038;ssl=1\" alt=\"\" class=\"wp-image-359633\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?w=1270&amp;ssl=1 1270w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=286%2C300&amp;ssl=1 286w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=976%2C1024&amp;ssl=1 976w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=768%2C805&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=1000%2C1049&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The &#8220;Transcribers of Reddit&#8221; extension highlights a particular comment by moving it to the top of the Reddit thread’s comment list and giving it a bright red border</figcaption></figure>\n\n\n\n<h3>Conclusion</h3>\n\n\n\n<p>Was that as hard as you thought it would be? It’s definitely a lot more straightforward than I thought before digging in. After setting up the <code>manifest.json</code> and creating any page files and assets we need, all we’re really doing is writing HTML, CSS, and JavaScript like normal.</p>\n\n\n\n<p>If you ever find yourself stuck along the way, the <a href=\"https://developer.chrome.com/docs/extensions/reference/\" rel=\"noopener\">Chrome API</a> documentation is a great resource to get back on track.</p>\n\n\n\n<p>Once again, <a href=\"https://github.com/Lars418/torExtension\" rel=\"noopener\">here’s the GitHub repo</a> with all of the code we walked through in this article. Read it, use it, and let me know what you think of it!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-create-a-browser-extension/\">How to Create a Browser Extension</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I’ll bet you are using browser extensions right now. Some of them are extremely popular and useful, like ad blockers, password managers, and PDF viewers. These extensions (or “add-ons”) are not limited to those purposes — you can do a lot more with them! In this article, I will give you an introduction on how to create one. Ultimately, we’ll make it work in multiple browsers.\n\n\n\n\n\n\n\nWhat we’re making\n\n\n\nWe’re making an extension called “Transcribers of Reddit” and it’s going to improve Reddit’s accessibility by moving specific comments to the top of the comment section and adding aria- attributes for screen readers. We will also take our extension a little further with options for adding borders and backgrounds to comments for better text contrast.\n\n\n\nThe whole idea is that you’ll get a nice introduction for how to develop a browser extension. We will start by creating the extension for Chromium-based browsers (e.g. Google Chrome, Microsoft Edge, Brave, etc.). In a future post we will port the extension to work with Firefox, as well as Safari which recently added support for Web Extensions in both the MacOS and iOS versions of the browser.\n\n\n\n\nGitHub repo\n\n\n\n\nReady? Let’s take this one step at a time.\n\n\n\nCreate a working directory\n\n\n\nBefore anything else, we need a working space for our project. All we really need is to create a folder and give it a name (which I’m calling transcribers-of-reddit). Then, create another folder inside that one named src for our source code.\n\n\n\nDefine the entry point\n\n\n\nThe entry point is a file that contains general information about the extension (i.e. extension name, description, etc.) and defines permissions or scripts to execute.\n\n\n\nOur entry point can be a manifest.json file located in the src folder we just created. In it, let’s add the following three properties:\n\n\n\n{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\"\n}\n\n\n\nThe manifest_version is similar to version in npm or Node. It defines what APIs are available (or not). We’re going to work on the bleeding edge and use the latest version, 3 (also known as as mv3).\n\n\n\nThe second property is name and it specifies our extension name. This name is what’s displayed everywhere our extension appears, like Chrome Web Store and the chrome://extensions page in the Chrome browser.\n\n\n\nThen there’s version. It labels the extension with a version number. Keep in mind that this property (in contrast to manifest_version) is a string that can only contain numbers and dots (e.g. 1.3.5).\n\n\n\nMore manifest.json information\n\n\n\nThere’s actually a lot more we can add to help add context to our extension. For example, we can provide a description that explains what the extension does. It’s a good idea to provide these sorts of things, as it gives users a better idea of what they’re getting into when they use it.\n\n\n\nIn this case, we’re not only adding a description, but supplying icons and a web address that Chrome Web Store points to on the extension’s page.\n\n\n\n{\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\"\n}\n\n\n\nThe description is displayed on Chrome’s management page (chrome://extensions) and should be brief, less than 132 characters.The icons are used in lots of places. As the docs state, it’s best to provide three versions of the same icon in different resolutions, preferably as a PNG file. Feel free to use the ones in the GitHub repository for this example.The homepage_url can be used to connect your website with the extension. A button including the link will be displayed when clicking on “More details” on the management page.\n\n\n\nOur opened extension card inside the extension management page.\n\n\n\nSetting permissions\n\n\n\nOne major advantage extensions have is that their APIs allow you to interact directly with the browser. But we have to explicitly give the extension those permissions, which also goes inside the manifest.json file.\n\n\n\n\n{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\",\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\",\n\n  \"permissions\": [\n    \"storage\",\n    \"webNavigation\"\n  ]\n}\n\n\n\nWhat did we just give this extension permission to? First, storage. We want this extension to be able to save the user’s settings, so we need to access the browser’s web storage to hold them. For example, if the user wants red borders on the comments, then we’ll save that for next time rather than making them set it again.\n\n\n\nWe also gave the extension permission to look at how the user navigated to the current screen. Reddit is a single-page application (SPA) which means it doesn’t trigger a page refresh. We need to “catch” this interaction, as Reddit will only load the comments of a post if we click on it. So, that’s why we’re tapping into webNavigation.\n\n\n\nWe’ll get to executing code on a page later as it requires a whole new entry inside manifest.json.\n\n\n\n/explanation Depending on which permissions are allowed, the browser might display a warning to the user to accept the permissions. It’s only certain ones, though, and Chrome has a nice outline of them.\n\n\n\nManaging translations\n\n\n\nBrowser extensions have a built-in internalization (i18n) API. It allows you to manage translations for multiple languages (full list). To use the API, we have to define our translations and default language right in the manifest.json file:\n\n\n\n\"default_locale\": \"en\"\n\n\n\nThis sets English as the language. In the event that a browser is set to any other language that isn’t supported, the extension will fall back to the default locale (en in this example).\n\n\n\nOur translations are defined inside the _locales directory. Let’s create another folder in there each language you want to support. Each subdirectory gets its own messages.json file.\n\n\n\nsrc \n └─ _locales\n     └─ en\n        └─ messages.json\n     └─ fr\n        └─ messages.json\n\n\n\nA translation file consists of multiple parts:\n\n\n\nTranslation key (“id”): This key is used to reference the translation.Message: The actual translation contentDescription (optional): Describes the translation (I wouldn’t use them, they just bloat up the file and your translation key should be descriptive enough)Placeholders (optional): Can be used to insert dynamic content inside a translation\n\n\n\nHere’s an example that pulls all that together:\n\n\n\n{\n  \"userGreeting\": { // Translation key (\"id\")\n    \"message\": \"Good $daytime$, $user$!\" // Translation\n    \"description\": \"User Greeting\", // Optional description for translators\n    \"placeholders\": { // Optional placeholders\n      \"daytime\": { // As referenced inside the message\n        \"content\": \"$1\",\n        \"example\": \"morning\" // Example value for our content\n      },\n      \"user\": { \n        \"content\": \"$1\",\n        \"example\": \"Lars\"\n      }\n    }\n  }\n}\n\n\n\nUsing placeholders is a bit more challenging. At first we need to define the placeholder inside the message. A placeholder needs to be wrapped in between $ characters. Afterwards, we have to add our placeholder to the “placeholder list.” This is a bit unintuitive, but Chrome wants to know what value should be inserted for our placeholders. We (obviously) want to use a dynamic value here, so we use the special content value $1 which references our inserted value.\n\n\n\nThe example property is optional. It can be used to give translators a hint what value the placeholder could be (but is not actually displayed).\n\n\n\nWe need to define the following translations for our extension. Copy and paste them into the messages.json file. Feel free to add more languages (e.g. if you speak German, add a de folder inside _locales, and so on).\n\n\n\n{\n  \"name\": {\n    \"message\": \"Transcribers of Reddit\"\n  },\n  \"description\": {\n    \"message\": \"Accessible image descriptions for subreddits.\"\n  },\n  \"popupManageSettings\": {\n    \"message\": \"Manage settings\"\n  },\n  \"optionsPageTitle\": {\n    \"message\": \"Settings\"\n  },\n  \"sectionGeneral\": {\n    \"message\": \"General settings\"\n  },\n  \"settingBorder\": {\n    \"message\": \"Show comment border\"\n  },\n  \"settingBackground\": {\n    \"message\": \"Show comment background\"\n  }\n}\n\n\n\nYou might be wondering why we registered the permissions when there is no sign of an i18n permission, right? Chrome is a bit weird in that regard, as you don’t need to register every permission. Some (e.g. chrome.i18n) don’t require an entry inside the manifest. Other permissions require an entry but won’t be displayed to the user when installing the extension. Some other permissions are “hybrid” (e.g. chrome.runtime), meaning some of their functions can be used without declaring a permission—but other functions of the same API require one entry in the manifest. You’ll want to take a look at the documentation for a solid overview of the differences.\n\n\n\nUsing translations inside the manifest\n\n\n\nThe first thing our end user will see is either the entry inside the Chrome Web Store or the extension overview page. We need to adjust our manifest file to make sure everything os translated.\n\n\n\n{\n  // Update these entries\n  \"name\": \"__MSG_name__\",\n  \"description\": \"__MSG_description__\"\n}\n\n\n\nApplying this syntax uses the corresponding translation in our messages.json file (e.g. _MSG_name_ uses the name translation).\n\n\n\nUsing translations in HTML pages\n\n\n\nApplying translations in an HTML file takes a little JavaScript.\n\n\n\nchrome.i18n.getMessage('name');\n\n\n\nThat code returns our defined translation (which is Transcribers of Reddit). Placeholders can be done in a similar way.\n\n\n\nchrome.i18n.getMessage('userGreeting', {\n  daytime: 'morning',\n  user: 'Lars'\n});\n\n\n\nIt would be a pain in the butt to apply translations to all elements this way. But we can write a little script that performs the translation based on a data- attribute. So, let’s create a new js folder inside the src directory, then add a new util.js file in it.\n\n\n\nsrc \n └─ js\n     └─ util.js\n\n\n\nThis gets the job done:\n\n\n\nconst i18n = document.querySelectorAll(\"[data-intl]\");\ni18n.forEach(msg => {\n  msg.innerHTML = chrome.i18n.getMessage(msg.dataset.intl);\n});\n\nchrome.i18n.getAcceptLanguages(languages => {\n  document.documentElement.lang = languages[0];\n});\n\n\n\nOnce that script is added to an HTML page, we can add the data-intl attribute to an element to set its content. The document language will also be set based on the user language.\n\n\n\n\n\n<!-- Before JS execution -->\n<html>\n  <body>\n    <button data-intl=\"popupManageSettings\"></button>\n  </body>\n</html>\n\n\n\n\n\n<!-- After JS execution -->\n<html lang=\"en\">\n  <body>\n    <button data-intl=\"popupManageSettings\">Manage settings</button>\n  </body>\n</html>\n\n\n\n\n\nAdding a pop-up and options page\n\n\n\nBefore we dive into actual programming, we we need to create two pages:\n\n\n\nAn options page that contains user settingsA pop-up page that opens when interacting with the extension icon right next to our address bar. This page can be used for various scenarios (e.g. for displaying stats or quick settings).\n\n\n\n\n\nThe options page containg our settings.\n\n\n\n\n\nThe pop-up containg a link to the options page.\n\n\n\n\n\nHere’s an outline of the folders and files we need in order to make the pages:\n\n\n\nsrc \n ├─ css\n |    └─ paintBucket.css\n ├─ popup\n |    ├─ popup.html\n |    ├─ popup.css\n |    └─ popup.js\n └─ options\n      ├─ options.html\n      ├─ options.css\n      └─ options.js\n\n\n\nThe .css files contain plain CSS, nothing more and nothing less. I won’t into detail because I know most of you reading this are already fully aware of how CSS works. You can copy and paste the styles from the GitHub repository for this project.\n\n\n\nNote that the pop-up is not a tab and that its size depends on the content in it. If you want to use a fixed popup size, you can set the width and height properties on the html element.\n\n\n\nCreating the pop-up\n\n\n\nHere’s an HTML skeleton that links up the CSS and JavaScript files and adds a headline and button inside the <body>.\n\n\n\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title data-intl=\"name\"></title>\n\n    <link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n    <link rel=\"stylesheet\" href=\"popup.css\">\n\n    <!-- Our \"translation\" script -->\n    <script src=\"../js/util.js\" defer></script>\n    <script src=\"popup.js\" defer></script>\n  </head>\n  <body>\n    <h1 id=\"title\"></h1>\n    <button data-intl=\"popupManageSettings\"></button>\n  </body>\n</html>\n\n\n\nThe h1 contains the extension name and version; the button is used to open the options page. The headline will not be filled with a translation (because it lacks a data-intl attribute), and the button doesn’t have any click handler yet, so we need to populate our popup.js file:\n\n\n\nconst title = document.getElementById('title');\nconst settingsBtn = document.querySelector('button');\nconst manifest = chrome.runtime.getManifest();\n\ntitle.textContent = `${manifest.name} (${manifest.version})`;\n\nsettingsBtn.addEventListener('click', () => {\n  chrome.runtime.openOptionsPage();\n});\n\n\n\nThis script first looks for the manifest file. Chrome offers the runtime API which contains the getManifest method (this specific method does not require the runtime permission). It returns our manifest.json as a JSON object. After we populate the title with the extension name and version, we can add an event listener to the settings button. If the user interacts with it, we will open the options page using chrome.runtime.openOptionsPage() (again no permission entry needed).\n\n\n\nThe pop-up page is now finished, but the extension doesn’t know it exists yet. We have to register the pop-up by appending the following property to the manifest.json file.\n\n\n\n\"action\": {\n  \"default_popup\": \"popup/popup.html\",\n  \"default_icon\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  }\n},\n\n\n\nCreating the options page\n\n\n\nCreating this page follows a pretty similar process as what we just completed. First, we populate our options.html file. Here’s some markup we can use:\n\n\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title data-intl=\"name\"></title>\n\n  <link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n  <link rel=\"stylesheet\" href=\"options.css\">\n\n  <!-- Our \"translation\" script -->\n  <script src=\"../js/util.js\" defer></script>\n  <script src=\"options.js\" defer></script>\n</head>\n<body>\n  <header>\n    <h1>\n      <!-- Icon provided by feathericons.com -->\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" role=\"presentation\">\n        <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n        <path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\"></path>\n      </svg>\n      <span data-intl=\"optionsPageTitle\"></span>\n    </h1>\n  </header>\n\n  <main>\n    <section id=\"generalOptions\">\n      <h2 data-intl=\"sectionGeneral\"></h2>\n\n      <div id=\"generalOptionsWrapper\"></div>\n    </section>\n  </main>\n\n  <footer>\n    <p>Transcribers of Reddit extension by <a href=\"https://lars.koelker.dev\" target=\"_blank\">lars.koelker.dev</a>.</p>\n    <p>Reddit is a registered trademark of Reddit, Inc. This extension is not endorsed or affiliated with Reddit, Inc. in any way.</p>\n  </footer>\n</body>\n</html>\n\n\n\nThere are no actual options yet (just their wrappers). We need to write the script for the options page. First, we define variables to access our wrappers and default settings inside options.js. “Freezing” our default settings prevents us from accidentally modifying them later.\n\n\n\nconst defaultSettings = Object.freeze({\n  border: false,\n  background: false,\n});\nconst generalSection = document.getElementById('generalOptionsWrapper');\n\n\n\n\nNext, we need to load the saved settings. We can use the (previously registered) storage API for that. Specifically, we need to define if we want to store the data locally (chrome.storage.local) or sync settings through all devices the end user is logged in to (chrome.storage.sync). Let’s go with local storage for this project.\n\n\n\nRetrieving values needs to be done with the get method. It accepts two arguments:\n\n\n\nThe entries we want to loadA callback containing the values\n\n\n\nOur entries can either be a string (e.g. like settings below) or an array of entries (useful if we want to load multiple entries). The argument inside the callback function contains an object of all entries we previously defined in { settings: ... }:\n\n\n\nchrome.storage.local.get('settings', ({ settings }) => {\n  const options = settings ?? defaultSettings; // Fall back to default if settings are not defined\n  if (!settings) {\n    chrome.storage.local.set({\n     settings: defaultSettings,\n    });\n }\n\n  // Create and display options\n  const generalOptions = Object.keys(options).filter(x => !x.startsWith('advanced'));\n  \n  generalOptions.forEach(option => createOption(option, options, generalSection));\n});\n\n\n\nTo render the options, we also need to create a createOption() function.\n\n\n\nfunction createOption(setting, settingsObject, wrapper) {\n  const settingWrapper = document.createElement(\"div\");\n  settingWrapper.classList.add(\"setting-item\");\n  settingWrapper.innerHTML = `\n  <div class=\"label-wrapper\">\n    <label for=\"${setting}\" id=\"${setting}Desc\">\n      ${chrome.i18n.getMessage(`setting${setting}`)}\n    </label>\n  </div>\n\n  <input type=\"checkbox\" ${settingsObject[setting] ? 'checked' : ''} id=\"${setting}\" />\n  <label for=\"${setting}\"\n    tabindex=\"0\"\n    role=\"switch\"\n    aria-checked=\"${settingsObject[setting]}\"\n    aria-describedby=\"${setting}-desc\"\n    class=\"is-switch\"\n  ></label>\n  `;\n\n  const toggleSwitch = settingWrapper.querySelector(\"label.is-switch\");\n  const input = settingWrapper.querySelector(\"input\");\n\n  input.onchange = () => {\n    toggleSwitch.setAttribute('aria-checked', input.checked);\n    updateSetting(setting, input.checked);\n  };\n\n  toggleSwitch.onkeydown = e => {\n    if(e.key === \" \" || e.key === \"Enter\") {\n      e.preventDefault();\n      toggleSwitch.click();\n    }\n  }\n\n  wrapper.appendChild(settingWrapper);\n}\n\n\n\nInside the onchange event listener of our switch (aká radio button) we call the function updateSetting. This method will write the updated value of our radio button inside the storage.\n\n\n\nTo accomplish this, we will make use of the set function. It has two arguments: The entry we want to overwrite and an (optional) callback (which we don’t use in our case). As our settings entry is not a boolean or a string but an object containing different settings, we use the spread operator (…) and only overwrite our actual key (setting) inside the settings object.\n\n\n\nfunction updateSetting(key, value) {\n  chrome.storage.local.get('settings', ({ settings }) => {\n    chrome.storage.local.set({\n      settings: {\n        ...settings,\n        [key]: value\n      }\n    })\n  });\n}\n\n\n\nOnce again, we need to “inform” the extension about our options page by appending the following entry to the manifest.json:\n\n\n\n\"options_ui\": {\n  \"open_in_tab\": true,\n  \"page\": \"options/options.html\"\n},\n\n\n\nDepending on your use case you can also force the options dialog to open as a popup by setting open_in_tab to false.\n\n\n\nInstalling the extension for development\n\n\n\nNow that we’ve successfully set up the manifest file and have added both the pop-up and options page to the mix, we can install our extension to check if our pages actually work. Navigate to chrome://extensions and enable “Developer mode.” Three buttons will appear. Click the one labeled “Load unpacked” and select the src folder of your extension to load it up.\n\n\n\nThe extension should now be successfully installed and our “Transcribers of Reddit” tile should be on the page.\n\n\n\nWe can already interact with our extension. Click on the puzzle piece (🧩) icon right next to the browser’s address bar and click on the newly-added “Transcribers of Reddit” extension. You should now be greeted by a small pop-up with the button to open the options page.\n\n\n\n\n\n\n\nLovely, right? It might look a bit different on your device, as I have dark mode enabled in these screenshots.\n\n\n\n\n\n\n\nIf you enable the “Show comment background” and “Show comment border” settings, then reload the page, the state will persist because we’re saving it in the browser’s local storage.\n\n\n\nAdding the content script\n\n\n\nOK, so we can already trigger the pop-up and interact with the extension settings, but the extension doesn’t do anything particularly useful yet. To give it some life, we will add a content script.\n\n\n\nAdd a file called comment.js inside the js directory and make sure to define it in the manifest.json file:\n\n\n\n\"content_scripts\": [\n  {\n    \"matches\": [ \"*://www.reddit.com/*\" ],\n    \"js\": [ \"js/comment.js\" ]\n  }\n],\n\n\n\nThe content_scripts is made up of two parts:\n\n\n\nmatches: This array holds URLs that tell the browser where we want our content scripts to run. Being an extension for Reddit and all, we want this to run on any page matching ://www.redit.com/*, where the asterisk is a wild card to match anything after the top-level domain.js: This array contains the actual content scripts.\n\n\n\nContent scripts can’t interact with other (normal) JavaScripts. This means if a website’s scripts defines a variable or function, we can’t access it. For example:\n\n\n\n// script_on_website.js\nconst username = 'Lars';\n\n// content_script.js\nconsole.log(username); // Error: username is not defined\n\n\n\nNow let’s start writing our content script. First, we add some constants to comment.js. These constants contain RegEx expressions and selectors that will be used later on. The CommentUtils is used to determine whether or not a post contains a “tor comment,” or if comment wrappers exists.\n\n\n\nconst messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst Selectors = Object.freeze({\n  commentWrapper: 'div[style*=\"--commentswrapper-gradient-color\"] > div, div[style*=\"max-height: unset\"] > div',\n  torComment: 'div[data-tor-comment]',\n  postContent: 'div[data-test-id=\"post-content\"]'\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst CommentUtils = Object.freeze({\n  isTorComment: (comment) => comment.querySelector('[data-test-id=\"comment\"]') ? comment.querySelector('[data-test-id=\"comment\"]').textContent.includes('m a human volunteer content transcriber for Reddit') : false,\n  torCommentsExist: () => !!document.querySelector(Selectors.torComment),\n  commentWrapperExists: () => !!document.querySelector('[data-reddit-comment-wrapper=\"true\"]')\n});\n\n\n\nNext, we check whether or not a user directly opens a comment page (“post”), then perform a RegEx check and update the directPage variable. This case occurs when a user directly opens the URL (e.g. by typing it into the address bar or clicking on<a> element on another page, like Twitter).\n\n\n\nlet directPage = false;\nif (UrlRegex.commentPage.test(window.location.href)) {\n  directPage = true;\n  moveComments();\n}\n\n\n\nBesides opening a page directly, a user normally interacts with the SPA. To catch this case, we can add a message listener to our comment.js file by using the runtime API.\n\n\n\nchrome.runtime.onMessage.addListener(msg => {\n  if (msg.type === messageTypes.COMMENT_PAGE) {\n    waitForComment(moveComments);\n  }\n});\n\n\n\nAll we need now are the functions. Let’s create a moveComments() function. It moves the special “tor comment” to the start of the comment section. It also conditionally applies a background color and border (if borders are enabled in the settings) to the comment. For this, we call the storage API and load the settings entry:\n\n\n\nfunction moveComments() {\n  if (CommentUtils.commentWrapperExists()) {\n    return;\n  }\n\n  const wrapper = document.querySelector(Selectors.commentWrapper);\n  let comments = wrapper.querySelectorAll(`${Selectors.commentWrapper} > div`);\n  const postContent = document.querySelector(Selectors.postContent);\n\n  wrapper.dataset.redditCommentWrapper = 'true';\n  wrapper.style.flexDirection = 'column';\n  wrapper.style.display = 'flex';\n\n  if (directPage) {\n    comments = document.querySelectorAll(\"[data-reddit-comment-wrapper='true'] > div\");\n  }\n\n  chrome.storage.local.get('settings', ({ settings }) => { // HIGHLIGHT 18\n    comments.forEach(comment => {\n      if (CommentUtils.isTorComment(comment)) {\n        comment.dataset.torComment = 'true';\n        if (settings.background) {\n          comment.style.backgroundColor = 'var(--newCommunityTheme-buttonAlpha05)';\n        }\n        if (settings.border) {\n          comment.style.outline = '2px solid red';\n        }\n        comment.style.order = \"-1\";\n        applyWaiAria(postContent, comment);\n      }\n    });\n  })\n}\n\n\n\nThe applyWaiAria() function is called inside the moveComments() function—it adds aria- attributes. The other function creates a unique identifier for use with the aria- attributes.\n\n\n\nfunction applyWaiAria(postContent, comment) {\n  const postMedia = postContent.querySelector('img[class*=\"ImageBox-image\"], video');\n  const commentId = uuidv4();\n\n  if (!postMedia) {\n    return;\n  }\n\n  comment.setAttribute('id', commentId);\n  postMedia.setAttribute('aria-describedby', commentId);\n}\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n\n\nThe following function waits for the comments to load and calls the callback parameter if it finds the comment wrapper.\n\n\n\nfunction waitForComment(callback) {\n  const config = { childList: true, subtree: true };\n  const observer = new MutationObserver(mutations => {\n    for (const mutation of mutations) {\n      if (document.querySelector(Selectors.commentWrapper)) {\n        callback();\n        observer.disconnect();\n        clearTimeout(timeout);\n        break;\n      }\n    }\n  });\n\n  observer.observe(document.documentElement, config);\n  const timeout = startObservingTimeout(observer, 10);\n}\n\nfunction startObservingTimeout(observer, seconds) {\n  return setTimeout(() => {\n    observer.disconnect();\n  }, 1000 * seconds);\n}\n\n\n\nAdding a service worker\n\n\n\nRemember when we added a listener for messages inside the content script? This listener isn’t currently receiving messages. We need to send it to the content script ourselves. For this purpose we need to register a service worker.\n\n\n\nWe have to register our service worker inside the manifest.json by appending the following code to it:\n\n\n\n\"background\": {\n  \"service_worker\": \"sw.js\"\n}\n\n\n\nDon’t forget to create the sw.js file inside the src directory (service workers always need to be created in the extension’s root directory, src.\n\n\n\nNow, let’s create some constants for the message and page types:\n\n\n\nconst messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst Utils = Object.freeze({\n  getPageType: (url) => {\n    if (new URL(url).pathname === '/') {\n      return messageTypes.MAIN_PAGE;\n    } else if (UrlRegex.commentPage.test(url)) {\n      return messageTypes.COMMENT_PAGE;\n    } else if (UrlRegex.subredditPage.test(url)) {\n      return messageTypes.SUBREDDIT_PAGE;\n    }\n\n    return messageTypes.OTHER_PAGE;\n  }\n});\n\n\n\nWe can add the service worker’s actual content. We do this with an event listener on the history state (onHistoryStateUpdated) that detects when a page has been updated with the History API (which is commonly used in SPAs to navigate without a page refresh). Inside this listener, we query the active tab and extract its tabId. Then we send a message to our content script containing the page type and URL.\n\n\n\nchrome.webNavigation.onHistoryStateUpdated.addListener(async ({ url }) => {\n  const [{ id: tabId }] = await chrome.tabs.query({ active: true, currentWindow: true });\n\n  chrome.tabs.sendMessage(tabId, {\n    type: Utils.getPageType(url),\n    url\n  });\n});\n\n\n\nAll done!\n\n\n\nWe’re finished! Navigate to Chrome’s extension management page ( chrome://extensions) and hit the reload icon on the unpacked extension. If you open a Reddit post that contains a “Transcribers of Reddit” comment with an image transcription (like this one), it will be moved to the start of the comment section and be highlighted as long as we’ve enabled it in the extension settings.\n\n\n\nThe “Transcribers of Reddit” extension highlights a particular comment by moving it to the top of the Reddit thread’s comment list and giving it a bright red border\n\n\n\nConclusion\n\n\n\nWas that as hard as you thought it would be? It’s definitely a lot more straightforward than I thought before digging in. After setting up the manifest.json and creating any page files and assets we need, all we’re really doing is writing HTML, CSS, and JavaScript like normal.\n\n\n\nIf you ever find yourself stuck along the way, the Chrome API documentation is a great resource to get back on track.\n\n\n\nOnce again, here’s the GitHub repo with all of the code we walked through in this article. Read it, use it, and let me know what you think of it!\n\nHow to Create a Browser Extension originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-03T15:12:31.000Z",
      "date_modified": "2022-01-03T15:12:31.000Z",
      "_plugin": {
        "pageFilename": "d645ef42f4bfa6c3bbb22fc24e5d59ee4bea6c3ff8605254f5ab8d51afc4d59e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359698",
      "url": "https://css-tricks.com/thank-you-2021-edition/",
      "title": "Thank You (2021 Edition)",
      "summary": "The year has come to a close and it’s time again for our end-of-year wrapup. The most important message is this: thank you. (thankyouthankyou)\nThanks for stopping by and reading this site. If you didn’t, I’d be out …\n\nThank You (2021 Edition) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>The year has come to a close and <a href=\"https://css-tricks.com/tag/thank-you/\">it&#8217;s time again</a> for our end-of-year wrapup. The most important message is this: thank you. (<em>thankyouthankyou</em>)</p>\n\n\n\n<p>Thanks for stopping by and reading this site. If you didn&#8217;t, I&#8217;d be out of a job around here, and I quite like this job so I owe it all to you. Like a family holiday card, allow me to share how the year went from our perspective, both with numbers and feelings, and then do a review of our goals. </p>\n\n\n\n<span id=\"more-359698\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"641\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=1024%2C641&#038;ssl=1\" alt=\"Thank you from Chris. Clear Ornaments hanging from the sky with gold glitten in them. A cookie candy cane embedded into the ground. Little tiny pine trees with gold stands and frosted white tips. \" class=\"wp-image-359872\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=1024%2C641&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=300%2C188&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=768%2C481&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=1000%2C626&amp;ssl=1 1000w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?w=1224&amp;ssl=1 1224w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3>Overall Traffic Analytics Numbers</h3>\n\n\n\n<p class=\"ticss-a2910f25\">The site saw <strong>88m</strong> pageviews this year <strong>down 6%</strong> from the 93m last year. Traffic has yo-yo&#8217;d up and down a smidge like that a little over the last 4-5 years, but this 6% is a bit of an alarming drop that I don&#8217;t like to see. These numbers are from Google Analytics, and <a href=\"https://css-tricks.com/proxying-third-party-javascript-as-first-party-javascript-and-the-potential-effect-on-analytics/\">some of my own research</a> this year suggests perhaps 20-30% of visitors to this site actually block the run-of-the-mill client-side JavaScript-powered Google Analytics I use. So perhaps the real traffic is higher, but as the analytics implementation is exactly the same and I don&#8217;t see any reason blocking would have skyrocketed just this past year alone, the downward movement seems real.</p>\n\n\n\n<p>A ~3% drop in organic search traffic was largely responsible for the dip. That&#8217;s big, as search is <strong>74.6%</strong> of all traffic. This points to us just not hitting the mark well enough for what people are searching for. A nice 36% increase in direct traffic points to pretty decent brand awareness, but direct traffic is only <strong>5%</strong> of overall traffic anyway so it doesn&#8217;t make much of a difference compared to search engine traffic. Referral traffic is down, social is up, but both are such small slices right now they just don&#8217;t move the needle. </p>\n\n\n\n<p>You might think, <em>well hey content ages out, search engine traffic to existing content will decline over time</em>. That&#8217;s true, but we publish a ton of <em>new</em> content every year as well as maintain and improve existing content, hence the concern. </p>\n\n\n\n<p class=\"ticss-ae4e08a2\">We invest well into 6-figures in new and updated content every year. So seeing a decline in traffic is disheartening. </p>\n\n\n\n<p>But hey that&#8217;s the game sometimes. I suspect it&#8217;s heavy competition in the developer writing space, which is something we all benefit from as developers, so it ain&#8217;t all bad. We&#8217;ll live and learn and do our best to turn it around for the sake of the health of this site. I&#8217;ve already got (counts fingers and toes) a million ideas. </p>\n\n\n\n<p>All that said, while I do think pageviews is an interesting and relevant metric to a site that uses advertising as a primary business model, there are many others. Unique Visitors are <em>up</em> year over year to <strong>26.3m</strong> from 25.8m, suggesting <em>more different people</em> came to the site this year, which is great, they just didn&#8217;t bop around the site as much or come back quite as often. Pages per visit is very steady at <strong>1.35</strong> meaning for the most part people come, they read, they leave. No surprise there. It&#8217;s mostly that &#8220;come back&#8221; thing to work on.</p>\n\n\n\n<h3>The Biggest Leap in Mobile Traffic Yet</h3>\n\n\n\n<p>Pretty big jump in mobile usage this year! </p>\n\n\n\n<p>2021: 20%<br>2020: 15%<br>2019: 15%<br>2018: 12%</p>\n\n\n\n<p>A fifth of all traffic is pretty interesting. Before 2018, even though mobile traffic was surging then too, we were in the low single digits, which I always thought <em>hey this is a reference site for coding and people code on desktop. </em>But clearly, that&#8217;s changing and perhaps people are reading the site in a more <em>news</em> kinda way, which I like. For years I had goals of making this site <em>both</em> full of referential long-green content <em>and</em> a site you could subscribe to for news, like an industry rag. So far so good.</p>\n\n\n\n<h3>Content by the Numbers</h3>\n\n\n\n<p>You&#8217;d think if we missed the mark on new content this year, that perhaps some better year would beat articles-written-in-2021 in traffic, but that&#8217;s not the case. Articles written in 2021 drove the most traffic to the site in 2021 (13.5% of overall traffic). Here are the articles that were top-by-pageviews in 2021 <em>that were written in 2021</em>:</p>\n\n\n\n<ol><li><a href=\"https://css-tricks.com/vs-code-extensions-for-html/\">VS Code Extensions for&nbsp;HTML</a> — Chris Coyier</li><li><a href=\"https://css-tricks.com/how-to-create-neon-text-with-css/\">How to Create Neon Text With&nbsp;CSS</a> — Silvia O&#8217;Dwyer</li><li><a href=\"https://css-tricks.com/animating-with-lottie/\">Animating with Lottie</a> — Idorenyin Udoh&nbsp;</li><li><a href=\"https://css-tricks.com/did-you-know-about-the-has-css-selector/\">Did You Know About the :has CSS&nbsp;Selector?</a> — Robin Rendle</li><li><a href=\"https://css-tricks.com/a-table-with-both-a-sticky-header-and-a-sticky-first-column/\">A table with both a sticky header and a sticky first&nbsp;column</a> — Chris Coyier</li><li><a style=\"font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\" href=\"https://css-tricks.com/comparing-the-new-generation-of-build-tools/\">Comparing the New Generation of Build&nbsp;Tools</a> — Hugh Haworth&nbsp;</li><li><a href=\"https://css-tricks.com/mistakes-ive-made-as-an-engineering-manager/\">Mistakes I’ve Made as an Engineering&nbsp;Manager</a> — Sarah Drasner&nbsp;</li><li><a style=\"font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\" href=\"https://css-tricks.com/lets-create-a-custom-audio-player/\">Let’s Create a Custom Audio&nbsp;Player</a> — Idorenyin Udoh&nbsp;</li><li><a href=\"https://css-tricks.com/html-inputs-and-labels-a-love-story/\">HTML Inputs and Labels: A Love&nbsp;Story</a> — Amber Wilson</li><li><a href=\"https://css-tricks.com/front-end-testing-is-for-everyone/\">Front-End Testing is For&nbsp;Everyone</a> — Evgeny Klimenchenko</li></ol>\n\n\n\n<p class=\"is-style-explanation\">I almost shouldn&#8217;t post these lists! <a href=\"https://www.ctrl.blog/entry/most-copied.html\" rel=\"noopener\">Look at what happens to Daniel&nbsp;Aleksandersen</a>.</p>\n\n\n\n<p>Those articles above range from 100k pageviews to 71k pageviews. What&#8217;s interesting is that if you group together all posts that got 40k or more pageviews, there are 44 of them, putting them at about <strong>2.5-3m</strong> pageviews. That&#8217;s kinda cool I think — the &#8220;medium tail&#8221; of content is pretty thick around here. The flexbox guide page alone did <strong>6.7m</strong> pageviews, so that&#8217;s still a beast, but it is bested by all content published in 2021 which clocks in at 11.8m. So investing in content works, it just needs to get tuned such that we aren&#8217;t dropping overall. Perhaps that means SEO tuning of both new content and old.</p>\n\n\n\n<p>Here&#8217;s 11-20 from 2021 just for fun:</p>\n\n\n\n<ol start=\"11\"><li><a href=\"https://css-tricks.com/to-the-brain-reading-computer-code-is-not-the-same-as-reading-language/\">To the brain, reading computer code is not the same as reading&nbsp;language</a> — Geoff Graham&nbsp;</li><li><a href=\"https://css-tricks.com/in-praise-of-the-unambiguous-click-menu/\">In Praise of the Unambiguous Click&nbsp;Menu</a> — Mark Root-Wiley&nbsp;</li><li><a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\">aspect-ratio</a> — Geoff Graham&nbsp;</li><li><a href=\"https://css-tricks.com/theming-and-theme-switching-with-react-and-styled-components/\">Theming and Theme Switching with React and&nbsp;styled-components</a> — Tapas Adhikary&nbsp;</li><li><a href=\"https://css-tricks.com/the-holy-grail-layout-with-css-grid/\">The Holy Grail Layout with CSS&nbsp;Grid</a> — Chris Coyier</li><li><a href=\"https://css-tricks.com/creating-the-perfect-commit-in-git/\">Creating the Perfect Commit in&nbsp;Git</a> — Tobias Günther&nbsp;</li><li><a href=\"https://css-tricks.com/what-if-you-could-use-visual-studio-code-as-the-editor-of-in-browser-developer-tools/\">What if… you could use Visual Studio Code as the editor of in-browser Developer&nbsp;Tools? </a>— Geoff Graham&nbsp;</li><li><a href=\"https://css-tricks.com/is-css-a-programming-language/\">Is CSS a Programming&nbsp;Language?</a> — Chris Coyier</li><li><a href=\"https://css-tricks.com/a-love-letter-to-html-css/\">A Love Letter to HTML &amp; CSS</a> — Ashley Kolodziej&nbsp;</li><li><a href=\"https://css-tricks.com/json-in-css/\">JSON in CSS</a> — Chris Coyier</li></ol>\n\n\n\n<p>And here&#8217;s the top 10 regardless of year, but still scoped to traffic-in-2021:</p>\n\n\n\n<ol><li><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">A Complete Guide to Flexbox</a></li><li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">A Complete Guide to Grid</a></li><li><a href=\"https://css-tricks.com/perfect-full-page-background-image/\">Perfect Full Page&nbsp;Background&nbsp;Image</a></li><li><a href=\"https://css-tricks.com/using-svg/\">Using SVG</a></li><li><a href=\"https://css-tricks.com/the-shapes-of-css/\">The Shapes of CSS</a></li><li><a href=\"https://css-tricks.com/snippets/css/media-queries-for-standard-devices/\">Media Queries for Standard Devices</a></li><li><a href=\"https://css-tricks.com/almanac/properties/b/box-shadow/\">box-shadow</a></li><li><span style=\"color: initial; font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\"><a href=\"https://css-tricks.com/snippets/css/css-triangle/\">CSS Triangle</a></span></li><li><a href=\"https://css-tricks.com/snippets/css/using-font-face-in-css/\">How to use @font-face in CSS</a></li><li><a href=\"https://css-tricks.com/scale-svg/\">How to Scale&nbsp;SVG</a></li></ol>\n\n\n\n<p>I like seeing the Almanac not only perform pretty well overall but have some individual pages be top-performers on their own. </p>\n\n\n\n<h3>Comments</h3>\n\n\n\n<p>We had about <strong>4,320</strong> legit comments on the site this year, <em>almost exactly</em> the number from last year. Weird!</p>\n\n\n\n<p>That seems like a lot, especially as we approve&#8230; I&#8217;d say half?&#8230; of commenters that are left. There is a lot of junk posts (e.g. &#8220;good post!&#8221; kinda stuff, that we just don&#8217;t post as to not bother the author with useless email notifications of new comments, nor readers with useless content). We just delete those junk posts (as in, not approve them in the first place). </p>\n\n\n\n<p>There is spam too of course. We crossed the <strong>2m</strong> spam comments threshold, but through a combination of <a href=\"https://akismet.com/\" rel=\"noopener\">Akismet</a> and <a href=\"https://wordpress.org/plugins/anti-spam/\" rel=\"noopener\">Anti-Spam</a> not too much spam sneaks through and is easily trashed before approval. </p>\n\n\n\n<p>Mentally, I really rollercoaster on comments. Sometimes they are great and helpful. Sometimes they are full of rudeness, hate, and anger. Those need to be looked at and trashed, meaning comments represent an entry point into my brain for all that negativity. Part of me thinks we should just shut them off, and if people have something important to say, we can encourage them to use their own blog (it ain&#8217;t hard to spin one up!) to comment and we&#8217;ll link to it if it&#8217;s good. </p>\n\n\n\n<p>But then I think of all the helpful comments and comments that help keep me up to date. Heck I just learned that Chrome is postponing all that removal of <code>alert()</code> stuff <a href=\"https://css-tricks.com/choice-words-about-the-upcoming-deprecation-of-javascript-dialogs/#comment-1787573\">via a comment from Kyle</a>, and I probably would have missed that otherwise. Plus the fact that there are <meta charset=\"utf-8\">4,320 of them this year that pass muster feels like the scale is tipped toward keeping them. </p>\n\n\n\n<h3>Newsletter</h3>\n\n\n\n<p>We&#8217;re at about <strong>91,000</strong> newsletter subscribers as this year wraps, up from 81,000 last year. A respectable march forward and makes it likely we&#8217;ll hit that 100k milestone sometime in 2022. </p>\n\n\n\n<p>Huge props to Robin for leading up <a href=\"https://css-tricks.com/newsletters/\">the newsletter</a> with wonderful writing. I think he really found a voice and stride on the newsletter this year. </p>\n\n\n\n<p>We didn&#8217;t miss a single week. Part of what helps there is that they have sponsors so there is some clear obligation to get them out on time, but I think it&#8217;s more like we have <a href=\"https://css-tricks.com/a-gutenburg-powered-newsletter/\">a system</a> and the system works. </p>\n\n\n\n<p>I&#8217;d really like to juice up newsletter subscriptions moreso because I think it&#8217;s actually a darn nice weekly read than for any specific business reason.</p>\n\n\n\n<h3>Video</h3>\n\n\n\n<p>Thanks to <a href=\"https://daverupert.com/\" rel=\"noopener\">Dave&#8217;s</a> idea that we get <a href=\"https://shoptalkshow.com/video/\" rel=\"noopener\">ShopTalk more into video</a>, we&#8217;ve been using the <a href=\"https://www.youtube.com/realcsstricks\" rel=\"noopener\">CSS-Tricks YouTube channel</a> and thus had a banner year in publishing video! <strong>35</strong> brand new videos!</p>\n\n\n\n<h3>Site Updates</h3>\n\n\n\n<p>The design evolved a bit this year, but nothing overly dramatic. Normally this time of year my fingers are itching for a new design, and believe me there are Figma drafts cooking, but I just haven&#8217;t had the time or inspiration for a true v19 just yet. </p>\n\n\n\n<p>So no major changes to the tech behind the site, but plenty of minor ones. For instance:</p>\n\n\n\n<ul><li>The Yoast SEO plugin was giving me problems. It had super frequent updates, which I guess is good, but there was a high frequency of problems with the updates where either the core plugin or the pro plugin wouldn&#8217;t update correctly (up to causing such problems as literally taking down the site) and settings getting messed up during updates. For a while I just turned it off entirely. But then I started hearing good things about <a href=\"https://rankmath.com/\" rel=\"noopener\">RankMath</a> so I&#8217;m trying that, and so far so good. It&#8217;s got me kinda inspired to take content SEO more seriously. Yoast had some claws in the site in other ways, for example it provides a pretty nice Table of Contents block that I&#8217;m still searching for a solution for (maybe it&#8217;s coming to <a href=\"https://github.com/WordPress/gutenberg/pull/29739\" rel=\"noopener\">core?</a>). It also had pretty nice breadcrumbs, and had to switch over to <a href=\"https://mtekk.us/code/breadcrumb-navxt/\" rel=\"noopener\">Breadcrumb NavXT</a>.</li><li><a href=\"https://wordpress.org/plugins/jetpack-boost/\" rel=\"noopener\">Jetpack Boost</a> is new to the site this year, and I&#8217;m impressed at how it handles critical CSS. <a href=\"https://css-tricks.com/jetpack/\">Jetpack</a> (full disclosure: a long time sponsor) is generally extremely helpful. I particularly like how the site search works, which is just out-of-the-box Jetpack Instant Search.</li><li>We really dialed in <a href=\"https://css-tricks.com/auto-generated-social-media-images/\">the social media images</a> this year. </li><li>We also dialed in the eCommerce situation. The <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter membership</a> unlocks additional content on the site, which I can <a href=\"https://css-tricks.com/the-greatest-css-tricks-vol-i-ebook-pdf-and-epub/\">now provide in eBook formats</a>. So I&#8217;m really all set to produce more of that type of content.</li></ul>\n\n\n\n<h3>Goal Review</h3>\n\n\n\n<p><strong>&#x1f6ab; Publish Three Guides. </strong>I thought this would be easy since last year our goal was 2 guides and we published 9! But this year we only managed one: <a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">A Complete Guide to Custom Properties</a>. We did publish some other pretty big series like Tobias Günther&#8217;s <a href=\"https://css-tricks.com/creating-the-perfect-commit-in-git/#advanced-git-series\">9-part Advanced Git series</a> and four more entries in Jay Hoffman&#8217;s <a href=\"https://css-tricks.com/category/history/\">Web History series</a>. </p>\n\n\n\n<p><meta charset=\"utf-8\"><strong>&#x1f6ab;</strong> <strong>Stay focused on how-to technical content around our strengths.</strong> Kind of a close call here. It&#8217;s not like we didn&#8217;t publish quite a bit of how-to technical content. But I&#8217;m going to say we failed because I don&#8217;t think we kept this in mind strongly enough throughout the year. We didn&#8217;t say &#8220;we&#8217;re good at this type of content so we&#8217;re going to lean into that specifically&#8221; like this goal suggested we should. </p>\n\n\n\n<p><meta charset=\"utf-8\"><strong>&#x1f6ab;</strong> <strong>Complete all missing Almanac entries.</strong> I hate marking this as failed, but I&#8217;m only doing that because of how it was worded with &#8220;all&#8221;. I think I had in mind that there was a really clear finite number of Alamanc articles to finish and we just had to do that. I think it&#8217;s a lot more wishy-washy than that, partially because of editorial choices (do you publish a unique entry for every single <a href=\"https://css-tricks.com/css-logical-properties-and-values/\">logical property</a> or group them, for example). </p>\n\n\n\n<p>But also, should we build an SVG-specific section? Should we have a new section for all the @at rules? It&#8217;s hard to say when the Almanac would be &#8220;complete&#8221;, so I&#8217;d just rather not. This page really needs a cleanup, but it&#8217;s got many ideas in there for more work that needs to be done/commissioned if anyone is so inclined.</p>\n\n\n\n<p>We <em>did</em> do a pretty good job on publishing <em>new</em> entries though — more than any relatively recent year! </p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Almanac Entry</th><th>Published</th></tr></thead><tbody><tr><td><a href=\"https://css-tricks.com/almanac/properties/s/scale/\">scale</a></td><td>2021-11-10</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/t/translate/\">translate</a></td><td>2021-11-09</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/r/rotate/\">rotate</a></td><td>2021-11-08</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-border/\">mask-border</a></td><td>2021-11-03</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/p/padding-inline/\">padding-inline</a></td><td>2021-09-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/overscroll-behavior/\">overscroll-behavior</a></td><td>2021-09-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/b/border-block/\">border-block</a></td><td>2021-09-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/outline-color/\">outline-color</a></td><td>2021-09-01</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/a/accent-color/\">accent-color</a></td><td>2021-08-26</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/b/block-size/\">block-size</a></td><td>2021-08-25</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/outline-style/\">outline-style</a></td><td>2021-08-16</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/outline-width/\">outline-width</a></td><td>2021-08-10</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/t/text-emphasis/\">text-emphasis</a></td><td>2021-08-04</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/b/backdrop/\">::backdrop</a></td><td>2021-08-03</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/h/hyphenate-limit-chars/\">hyphenate-limit-chars</a></td><td>2021-07-15</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/f/fullscreen/\">:fullscreen</a></td><td>2021-07-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask/\">mask</a></td><td>2021-07-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/c/content-visibility/\">content-visibility</a></td><td>2021-06-21</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/p/place-content/\">place-content</a></td><td>2021-05-13</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-composite/\">mask-composite</a></td><td>2021-05-10</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/e/empty/\">:empty</a></td><td>2021-04-27</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/w/where/\">:where</a></td><td>2021-03-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/j/justify-self/\">justify-self</a></td><td>2021-03-18</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-type/\">mask-type</a></td><td>2021-03-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/p/place-self/\">place-self</a></td><td>2021-03-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/c/current/\">:current</a></td><td>2021-02-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/f/future/\">:future</a></td><td>2021-02-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/b/border-boundary/\">border-boundary</a></td><td>2021-02-09</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-mode/\">mask-mode</a></td><td>2021-02-03</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/c/caret-shape/\">caret-shape</a></td><td>2021-01-27</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/c/caret/\">caret</a></td><td>2021-01-27</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\">aspect-ratio</a></td><td>2021-01-20</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-inline/\">margin-inline</a></td><td>2021-01-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-inline-end/\">margin-inline-end</a></td><td>2021-01-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-block-start/\">margin-block-start</a></td><td>2021-01-08</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-block-end/\">margin-block-end</a></td><td>2021-01-08</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-block/\">margin-block</a></td><td>2021-01-06</td></tr></tbody></table></figure>\n\n\n\n<h3>Settting 2022 Goals</h3>\n\n\n\n<ul><li><strong>More SEO focus.</strong> I&#8217;ve almost shunned SEO in the past. Partially because the HTML best practices seem pretty easy and obvious, and my inbox is so full of total slimeball link builders I&#8217;d like to see do literally anything else with their time. Butttt. I&#8217;m just being ignorant about it. I think it will be fun, interesting, and likely useful to take a more considered look at SEO best practices for a content site like this and make a stab at improving it. The related goal being: <strong>Gain 10% in pageview traffic.</strong> We lost 6% this year, so I think 10% will get us back on track and moving upward. But it&#8217;s a big goal so I&#8217;m already nervous about it.</li><li><strong>Another digital book.</strong> All the infrastructure is there for this and I&#8217;ve got ideas. I just need to write and put it in place.</li><li><strong>More social media experimentation. </strong>That&#8217;s a loosey-goosey goal but whatever, we&#8217;ve got our work cut out for us in other ways. Like SEO, for a few years there I kinda shunned dedicated social media work for the CSS-Tricks brand. Mostly because when I look at the traffic numbers, <em>so very little of it</em> comes from social media, especially considering how much time we were spending on it in the past. We don&#8217;t really benefit much from brand social media, so why bother? Well, maybe I was thinking about it the wrong way. Maybe we can just not care what <em>traffic</em> it drives but care about the connection with readers directly there. If we&#8217;re more fun and interesting on social media, maybe we continue to build trust in what we&#8217;re doing here. Maybe it can help drive sales if we get that second goal done. Maybe its more directly monetizeable.</li></ul>\n\n\n\n<h3>Thank You</h3>\n\n\n\n<p>Special thanks to <a href=\"https://geoffgraham.me/\" rel=\"noopener\">Geoff</a>! If you didn&#8217;t know, he&#8217;s our lead editor around here and keeping this entire site humming along nicely. You&#8217;ll work with Geoff if you do any <a href=\"https://css-tricks.com/guest-writing-for-css-tricks/\">guest writing</a> here at all. </p>\n\n\n\n<p>Special thanks to our biggest year-long sponsors <a href=\"https://automattic.com/?aff=8638\" rel=\"noopener\">Automattic</a> and <a href=\"https://frontendmasters.com/?utm_source=css-tricks&amp;utm_medium=website&amp;utm_campaign=css-tricks-tags-sidebar\" rel=\"noopener\">Frontend Masters</a>. <a href=\"https://css-tricks.com/category/2021-end-of-year-thoughts/\">Our year-end series</a> is both a thank you to you the readers and to them. </p>\n\n\n\n<p>To another year!</p>\n\n\n\n<p>&#x1f64f;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/thank-you-2021-edition/\">Thank You (2021 Edition)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "The year has come to a close and it’s time again for our end-of-year wrapup. The most important message is this: thank you. (thankyouthankyou)\n\n\n\nThanks for stopping by and reading this site. If you didn’t, I’d be out of a job around here, and I quite like this job so I owe it all to you. Like a family holiday card, allow me to share how the year went from our perspective, both with numbers and feelings, and then do a review of our goals. \n\n\n\n\n\n\n\n\n\n\n\nOverall Traffic Analytics Numbers\n\n\n\nThe site saw 88m pageviews this year down 6% from the 93m last year. Traffic has yo-yo’d up and down a smidge like that a little over the last 4-5 years, but this 6% is a bit of an alarming drop that I don’t like to see. These numbers are from Google Analytics, and some of my own research this year suggests perhaps 20-30% of visitors to this site actually block the run-of-the-mill client-side JavaScript-powered Google Analytics I use. So perhaps the real traffic is higher, but as the analytics implementation is exactly the same and I don’t see any reason blocking would have skyrocketed just this past year alone, the downward movement seems real.\n\n\n\nA ~3% drop in organic search traffic was largely responsible for the dip. That’s big, as search is 74.6% of all traffic. This points to us just not hitting the mark well enough for what people are searching for. A nice 36% increase in direct traffic points to pretty decent brand awareness, but direct traffic is only 5% of overall traffic anyway so it doesn’t make much of a difference compared to search engine traffic. Referral traffic is down, social is up, but both are such small slices right now they just don’t move the needle. \n\n\n\nYou might think, well hey content ages out, search engine traffic to existing content will decline over time. That’s true, but we publish a ton of new content every year as well as maintain and improve existing content, hence the concern. \n\n\n\nWe invest well into 6-figures in new and updated content every year. So seeing a decline in traffic is disheartening. \n\n\n\nBut hey that’s the game sometimes. I suspect it’s heavy competition in the developer writing space, which is something we all benefit from as developers, so it ain’t all bad. We’ll live and learn and do our best to turn it around for the sake of the health of this site. I’ve already got (counts fingers and toes) a million ideas. \n\n\n\nAll that said, while I do think pageviews is an interesting and relevant metric to a site that uses advertising as a primary business model, there are many others. Unique Visitors are up year over year to 26.3m from 25.8m, suggesting more different people came to the site this year, which is great, they just didn’t bop around the site as much or come back quite as often. Pages per visit is very steady at 1.35 meaning for the most part people come, they read, they leave. No surprise there. It’s mostly that “come back” thing to work on.\n\n\n\nThe Biggest Leap in Mobile Traffic Yet\n\n\n\nPretty big jump in mobile usage this year! \n\n\n\n2021: 20%2020: 15%2019: 15%2018: 12%\n\n\n\nA fifth of all traffic is pretty interesting. Before 2018, even though mobile traffic was surging then too, we were in the low single digits, which I always thought hey this is a reference site for coding and people code on desktop. But clearly, that’s changing and perhaps people are reading the site in a more news kinda way, which I like. For years I had goals of making this site both full of referential long-green content and a site you could subscribe to for news, like an industry rag. So far so good.\n\n\n\nContent by the Numbers\n\n\n\nYou’d think if we missed the mark on new content this year, that perhaps some better year would beat articles-written-in-2021 in traffic, but that’s not the case. Articles written in 2021 drove the most traffic to the site in 2021 (13.5% of overall traffic). Here are the articles that were top-by-pageviews in 2021 that were written in 2021:\n\n\n\nVS Code Extensions for HTML — Chris CoyierHow to Create Neon Text With CSS — Silvia O’DwyerAnimating with Lottie — Idorenyin Udoh Did You Know About the :has CSS Selector? — Robin RendleA table with both a sticky header and a sticky first column — Chris CoyierComparing the New Generation of Build Tools — Hugh Haworth Mistakes I’ve Made as an Engineering Manager — Sarah Drasner Let’s Create a Custom Audio Player — Idorenyin Udoh HTML Inputs and Labels: A Love Story — Amber WilsonFront-End Testing is For Everyone — Evgeny Klimenchenko\n\n\n\nI almost shouldn’t post these lists! Look at what happens to Daniel Aleksandersen.\n\n\n\nThose articles above range from 100k pageviews to 71k pageviews. What’s interesting is that if you group together all posts that got 40k or more pageviews, there are 44 of them, putting them at about 2.5-3m pageviews. That’s kinda cool I think — the “medium tail” of content is pretty thick around here. The flexbox guide page alone did 6.7m pageviews, so that’s still a beast, but it is bested by all content published in 2021 which clocks in at 11.8m. So investing in content works, it just needs to get tuned such that we aren’t dropping overall. Perhaps that means SEO tuning of both new content and old.\n\n\n\nHere’s 11-20 from 2021 just for fun:\n\n\n\nTo the brain, reading computer code is not the same as reading language — Geoff Graham In Praise of the Unambiguous Click Menu — Mark Root-Wiley aspect-ratio — Geoff Graham Theming and Theme Switching with React and styled-components — Tapas Adhikary The Holy Grail Layout with CSS Grid — Chris CoyierCreating the Perfect Commit in Git — Tobias Günther What if… you could use Visual Studio Code as the editor of in-browser Developer Tools? — Geoff Graham Is CSS a Programming Language? — Chris CoyierA Love Letter to HTML & CSS — Ashley Kolodziej JSON in CSS — Chris Coyier\n\n\n\nAnd here’s the top 10 regardless of year, but still scoped to traffic-in-2021:\n\n\n\nA Complete Guide to FlexboxA Complete Guide to GridPerfect Full Page Background ImageUsing SVGThe Shapes of CSSMedia Queries for Standard Devicesbox-shadowCSS TriangleHow to use @font-face in CSSHow to Scale SVG\n\n\n\nI like seeing the Almanac not only perform pretty well overall but have some individual pages be top-performers on their own. \n\n\n\nComments\n\n\n\nWe had about 4,320 legit comments on the site this year, almost exactly the number from last year. Weird!\n\n\n\nThat seems like a lot, especially as we approve… I’d say half?… of commenters that are left. There is a lot of junk posts (e.g. “good post!” kinda stuff, that we just don’t post as to not bother the author with useless email notifications of new comments, nor readers with useless content). We just delete those junk posts (as in, not approve them in the first place). \n\n\n\nThere is spam too of course. We crossed the 2m spam comments threshold, but through a combination of Akismet and Anti-Spam not too much spam sneaks through and is easily trashed before approval. \n\n\n\nMentally, I really rollercoaster on comments. Sometimes they are great and helpful. Sometimes they are full of rudeness, hate, and anger. Those need to be looked at and trashed, meaning comments represent an entry point into my brain for all that negativity. Part of me thinks we should just shut them off, and if people have something important to say, we can encourage them to use their own blog (it ain’t hard to spin one up!) to comment and we’ll link to it if it’s good. \n\n\n\nBut then I think of all the helpful comments and comments that help keep me up to date. Heck I just learned that Chrome is postponing all that removal of alert() stuff via a comment from Kyle, and I probably would have missed that otherwise. Plus the fact that there are 4,320 of them this year that pass muster feels like the scale is tipped toward keeping them. \n\n\n\nNewsletter\n\n\n\nWe’re at about 91,000 newsletter subscribers as this year wraps, up from 81,000 last year. A respectable march forward and makes it likely we’ll hit that 100k milestone sometime in 2022. \n\n\n\nHuge props to Robin for leading up the newsletter with wonderful writing. I think he really found a voice and stride on the newsletter this year. \n\n\n\nWe didn’t miss a single week. Part of what helps there is that they have sponsors so there is some clear obligation to get them out on time, but I think it’s more like we have a system and the system works. \n\n\n\nI’d really like to juice up newsletter subscriptions moreso because I think it’s actually a darn nice weekly read than for any specific business reason.\n\n\n\nVideo\n\n\n\nThanks to Dave’s idea that we get ShopTalk more into video, we’ve been using the CSS-Tricks YouTube channel and thus had a banner year in publishing video! 35 brand new videos!\n\n\n\nSite Updates\n\n\n\nThe design evolved a bit this year, but nothing overly dramatic. Normally this time of year my fingers are itching for a new design, and believe me there are Figma drafts cooking, but I just haven’t had the time or inspiration for a true v19 just yet. \n\n\n\nSo no major changes to the tech behind the site, but plenty of minor ones. For instance:\n\n\n\nThe Yoast SEO plugin was giving me problems. It had super frequent updates, which I guess is good, but there was a high frequency of problems with the updates where either the core plugin or the pro plugin wouldn’t update correctly (up to causing such problems as literally taking down the site) and settings getting messed up during updates. For a while I just turned it off entirely. But then I started hearing good things about RankMath so I’m trying that, and so far so good. It’s got me kinda inspired to take content SEO more seriously. Yoast had some claws in the site in other ways, for example it provides a pretty nice Table of Contents block that I’m still searching for a solution for (maybe it’s coming to core?). It also had pretty nice breadcrumbs, and had to switch over to Breadcrumb NavXT.Jetpack Boost is new to the site this year, and I’m impressed at how it handles critical CSS. Jetpack (full disclosure: a long time sponsor) is generally extremely helpful. I particularly like how the site search works, which is just out-of-the-box Jetpack Instant Search.We really dialed in the social media images this year. We also dialed in the eCommerce situation. The MVP Supporter membership unlocks additional content on the site, which I can now provide in eBook formats. So I’m really all set to produce more of that type of content.\n\n\n\nGoal Review\n\n\n\n🚫 Publish Three Guides. I thought this would be easy since last year our goal was 2 guides and we published 9! But this year we only managed one: A Complete Guide to Custom Properties. We did publish some other pretty big series like Tobias Günther’s 9-part Advanced Git series and four more entries in Jay Hoffman’s Web History series. \n\n\n\n🚫 Stay focused on how-to technical content around our strengths. Kind of a close call here. It’s not like we didn’t publish quite a bit of how-to technical content. But I’m going to say we failed because I don’t think we kept this in mind strongly enough throughout the year. We didn’t say “we’re good at this type of content so we’re going to lean into that specifically” like this goal suggested we should. \n\n\n\n🚫 Complete all missing Almanac entries. I hate marking this as failed, but I’m only doing that because of how it was worded with “all”. I think I had in mind that there was a really clear finite number of Alamanc articles to finish and we just had to do that. I think it’s a lot more wishy-washy than that, partially because of editorial choices (do you publish a unique entry for every single logical property or group them, for example). \n\n\n\nBut also, should we build an SVG-specific section? Should we have a new section for all the @at rules? It’s hard to say when the Almanac would be “complete”, so I’d just rather not. This page really needs a cleanup, but it’s got many ideas in there for more work that needs to be done/commissioned if anyone is so inclined.\n\n\n\nWe did do a pretty good job on publishing new entries though — more than any relatively recent year! \n\n\n\nAlmanac EntryPublishedscale2021-11-10translate2021-11-09rotate2021-11-08mask-border2021-11-03padding-inline2021-09-23overscroll-behavior2021-09-14border-block2021-09-02outline-color2021-09-01accent-color2021-08-26block-size2021-08-25outline-style2021-08-16outline-width2021-08-10text-emphasis2021-08-04::backdrop2021-08-03hyphenate-limit-chars2021-07-15:fullscreen2021-07-14mask2021-07-02content-visibility2021-06-21place-content2021-05-13mask-composite2021-05-10:empty2021-04-27:where2021-03-23justify-self2021-03-18mask-type2021-03-02place-self2021-03-02:current2021-02-23:future2021-02-23border-boundary2021-02-09mask-mode2021-02-03caret-shape2021-01-27caret2021-01-27aspect-ratio2021-01-20margin-inline2021-01-14margin-inline-end2021-01-14margin-block-start2021-01-08margin-block-end2021-01-08margin-block2021-01-06\n\n\n\nSettting 2022 Goals\n\n\n\nMore SEO focus. I’ve almost shunned SEO in the past. Partially because the HTML best practices seem pretty easy and obvious, and my inbox is so full of total slimeball link builders I’d like to see do literally anything else with their time. Butttt. I’m just being ignorant about it. I think it will be fun, interesting, and likely useful to take a more considered look at SEO best practices for a content site like this and make a stab at improving it. The related goal being: Gain 10% in pageview traffic. We lost 6% this year, so I think 10% will get us back on track and moving upward. But it’s a big goal so I’m already nervous about it.Another digital book. All the infrastructure is there for this and I’ve got ideas. I just need to write and put it in place.More social media experimentation. That’s a loosey-goosey goal but whatever, we’ve got our work cut out for us in other ways. Like SEO, for a few years there I kinda shunned dedicated social media work for the CSS-Tricks brand. Mostly because when I look at the traffic numbers, so very little of it comes from social media, especially considering how much time we were spending on it in the past. We don’t really benefit much from brand social media, so why bother? Well, maybe I was thinking about it the wrong way. Maybe we can just not care what traffic it drives but care about the connection with readers directly there. If we’re more fun and interesting on social media, maybe we continue to build trust in what we’re doing here. Maybe it can help drive sales if we get that second goal done. Maybe its more directly monetizeable.\n\n\n\nThank You\n\n\n\nSpecial thanks to Geoff! If you didn’t know, he’s our lead editor around here and keeping this entire site humming along nicely. You’ll work with Geoff if you do any guest writing here at all. \n\n\n\nSpecial thanks to our biggest year-long sponsors Automattic and Frontend Masters. Our year-end series is both a thank you to you the readers and to them. \n\n\n\nTo another year!\n\n\n\n🙏\n\nThank You (2021 Edition) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-01T17:50:59.000Z",
      "date_modified": "2022-01-01T17:50:59.000Z",
      "_plugin": {
        "pageFilename": "737350f03920d81a4955296b047e2e6008c397f2d29517aef8eb0b675b032f5e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360073",
      "url": "https://css-tricks.com/defensive-css/",
      "title": "Defensive CSS",
      "summary": "Ahmad Shadeed nails it again with “Defensive CSS.” The idea is that you should write CSS to be ready for issues caused by dynamic content. \nMore items than you thought would be there? No problem, the area can expand or …\n\nDefensive CSS originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p><br>Ahmad&nbsp;Shadeed nails it again with <a href=\"https://ishadeed.com/article/defensive-css/\" rel=\"noopener\">&#8220;Defensive CSS.&#8221;</a> The idea is that you should write CSS to be <em>ready for issues caused by dynamic content</em>. </p>\n\n\n\n<p>More items than you thought would be there? No problem, the area can expand or scroll. Title too long? No problem, it either wraps or truncates, and won&#8217;t bump into anything weird because margins or gaps are set up. Image come over in an unexpected size? No worries, the layout is designed to make sure the dedicated area is filled with image and will handle the sizing/cropping accordingly.</p>\n\n\n\n<p>There is no such thing as being a good CSS developer and not coding defensively. This is what being a CSS developer is, especially when you factor in progressive enhancement concepts and cross-browser/device unknowns.</p>\n<p><a href=\"https://ishadeed.com/article/defensive-css/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/defensive-css/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/defensive-css/\">Defensive CSS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Ahmad Shadeed nails it again with “Defensive CSS.” The idea is that you should write CSS to be ready for issues caused by dynamic content. \n\n\n\nMore items than you thought would be there? No problem, the area can expand or scroll. Title too long? No problem, it either wraps or truncates, and won’t bump into anything weird because margins or gaps are set up. Image come over in an unexpected size? No worries, the layout is designed to make sure the dedicated area is filled with image and will handle the sizing/cropping accordingly.\n\n\n\nThere is no such thing as being a good CSS developer and not coding defensively. This is what being a CSS developer is, especially when you factor in progressive enhancement concepts and cross-browser/device unknowns.\nTo Shared Link — Permalink on CSS-Tricks\nDefensive CSS originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2021-12-31T18:41:47.000Z",
      "date_modified": "2021-12-31T18:41:47.000Z",
      "_plugin": {
        "pageFilename": "31cc8d6f8d9f6700e649a1f61f0c7382e8300f019e30946084510b081941ab21.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359941",
      "url": "https://css-tricks.com/the-web-is-more-gooder-and-other-observations-on-todays-web-tech/",
      "title": "The Web is More Gooder, and Other Observations on Today’s Web Tech",
      "summary": "I’m actually working on a talk (whew! been a while! kinda feels good!) about just how good the world of building websites has gotten. I plan to cover a wide swath of web tech, on purpose, because I …\n\nThe Web is More Gooder, and Other Observations on Today’s Web Tech originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I&#8217;m actually working on a talk (<em>whew! been a while! kinda feels good!</em>) about just how <em>good</em> the world of building websites has gotten. I plan to cover a wide swath of web tech, on purpose, because I feel like things have gotten good all around. CSS is doing great, but so is nearly everything else involved in making websites, especially if we take care in what we&#8217;re doing.</p>\n\n\n\n<p>It also strikes me that updates to the web platform and the ecosystem around it are generally <em>additive</em>. If you feel like the web used to be simpler, well, perhaps it was—but it also <em>still is</em>. Whatever you could do then you can do now, if you want to, although, it would be a fair point if you&#8217;re job searching and the expectations to get hired involve a wheelbarrow of complicated tech.</p>\n\n\n\n<span id=\"more-359941\"></span>\n\n\n\n<p>This idea of the web getting better feels like it&#8217;s in the water a bit&#8230;</p>\n\n\n\n<p>Chris Ferdinandi in <a href=\"https://gomakethings.com/web-tech-is-better.-developer-norms-are-worse./\" rel=\"noopener\">&#8220;Web tech is better. Developer norms are worse.&#8221;</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>What the modern web can actually do, easily and out-of-the-box, is amazing. My friend Sarah Dayan started her career at around the same time as me, and has&nbsp;<a href=\"https://twitter.com/frontstuff_io/status/1467551852447379462\" rel=\"noopener\">a wonderful thread on how things have changed since then</a>.<br><br>In particular, Sarah talks about the dramatically improved capabilities of the web&nbsp;<em>and</em>&nbsp;expectations from customers and the people who use it.</p><p><strong>Modern web technology is lightyears ahead of the late 2000s.</strong></p></blockquote>\n\n\n\n<p>Wes and Scott on Syntax.fm 410 also <a href=\"https://syntax.fm/show/410/everything-in-web-dev-is-amazing\" rel=\"noopener\">talk about all kinds of stuff that is great now</a>, from HTML, CSS, and JavaScript to tooling and hosting.</p>\n\n\n\n<p>Simeon Griggs in <a href=\"https://www.simeongriggs.dev/there-has-never-been-a-better-time-to-build-websites\" rel=\"noopener\">&#8220;There&#8217;s never been a better time to build websites&#8221;</a> has a totally different take on what is great on the web these days than mine, but I appreciate that. The <em>options</em> around building websites have also widened, meaning there are approaches to things that just feel better to people who think and work in different ways. </p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>While there&#8217;s absolutely a learning curve to getting started, once you&#8217;ve got momentum, modern web development feels like having rocket boosters. The distance between idea and execution is as short as it&#8217;s ever been.</p></blockquote>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-web-is-more-gooder-and-other-observations-on-todays-web-tech/\">The Web is More Gooder, and Other Observations on Today&#8217;s Web Tech</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I’m actually working on a talk (whew! been a while! kinda feels good!) about just how good the world of building websites has gotten. I plan to cover a wide swath of web tech, on purpose, because I feel like things have gotten good all around. CSS is doing great, but so is nearly everything else involved in making websites, especially if we take care in what we’re doing.\n\n\n\nIt also strikes me that updates to the web platform and the ecosystem around it are generally additive. If you feel like the web used to be simpler, well, perhaps it was—but it also still is. Whatever you could do then you can do now, if you want to, although, it would be a fair point if you’re job searching and the expectations to get hired involve a wheelbarrow of complicated tech.\n\n\n\n\n\n\n\nThis idea of the web getting better feels like it’s in the water a bit…\n\n\n\nChris Ferdinandi in “Web tech is better. Developer norms are worse.”:\n\n\n\nWhat the modern web can actually do, easily and out-of-the-box, is amazing. My friend Sarah Dayan started her career at around the same time as me, and has a wonderful thread on how things have changed since then.In particular, Sarah talks about the dramatically improved capabilities of the web and expectations from customers and the people who use it.Modern web technology is lightyears ahead of the late 2000s.\n\n\n\nWes and Scott on Syntax.fm 410 also talk about all kinds of stuff that is great now, from HTML, CSS, and JavaScript to tooling and hosting.\n\n\n\nSimeon Griggs in “There’s never been a better time to build websites” has a totally different take on what is great on the web these days than mine, but I appreciate that. The options around building websites have also widened, meaning there are approaches to things that just feel better to people who think and work in different ways. \n\n\n\nWhile there’s absolutely a learning curve to getting started, once you’ve got momentum, modern web development feels like having rocket boosters. The distance between idea and execution is as short as it’s ever been.\n\nThe Web is More Gooder, and Other Observations on Today’s Web Tech originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2021-12-30T20:08:07.000Z",
      "date_modified": "2021-12-30T20:08:07.000Z",
      "_plugin": {
        "pageFilename": "e8cbc7fa8ae5d9c82cf7c8fa61ae6b1232062147066385a345aab4b9ca146484.html"
      }
    }
  ],
  "_plugin": {
    "rawFeed": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\"\n\txmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n\txmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n\txmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n\txmlns:atom=\"http://www.w3.org/2005/Atom\"\n\txmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n\txmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\"\n\t xmlns:media=\"http://search.yahoo.com/mrss/\" \n\txmlns:georss=\"http://www.georss.org/georss\"\n\txmlns:geo=\"http://www.w3.org/2003/01/geo/wgs84_pos#\"\n\t>\n\n<channel>\n\t<title>CSS-Tricks</title>\n\t<atom:link href=\"https://css-tricks.com/feed/\" rel=\"self\" type=\"application/rss+xml\" />\n\t<link>https://css-tricks.com</link>\n\t<description>Tips, Tricks, and Techniques on using Cascading Style Sheets.</description>\n\t<lastBuildDate>Fri, 07 Jan 2022 22:31:54 +0000</lastBuildDate>\n\t<language>en-US</language>\n\t<sy:updatePeriod>\n\thourly\t</sy:updatePeriod>\n\t<sy:updateFrequency>\n\t1\t</sy:updateFrequency>\n\t<generator>https://wordpress.org/?v=5.8.2</generator>\n\n<image>\n\t<url>https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=32%2C32&#038;ssl=1</url>\n\t<title>CSS-Tricks</title>\n\t<link>https://css-tricks.com</link>\n\t<width>32</width>\n\t<height>32</height>\n</image> \n<site xmlns=\"com-wordpress:feed-additions:1\">45537868</site>\t<item>\n\t\t<title>8 Interesting Typography Links for January 2022</title>\n\t\t<link>https://css-tricks.com/typography-links-january-2022/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/typography-links-january-2022/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Fri, 07 Jan 2022 22:31:52 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[typography]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=360711</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Every now and then, I find that I&#8217;ve accumulated a bunch of links about various things I find interesting. Typography is one of those things! Here&#8217;s a list of typography links to other articles that I&#8217;ve been saving up and &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/typography-links-january-2022/\">8 Interesting Typography Links for January 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>Every now and then, I find that I&#8217;ve accumulated a bunch of links about various things I find interesting. Typography is one of those things! Here&#8217;s a list of typography links to other articles that I&#8217;ve been saving up and think are worth sharing.</p>\n\n\n\n<span id=\"more-360711\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1646\" height=\"1060\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1646%2C1060&#038;ssl=1\" alt=\"A specimen of the Retail typeface, once of the typography links in the list.\" class=\"wp-image-360777\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?w=1646&amp;ssl=1 1646w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=300%2C193&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1024%2C659&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=768%2C495&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1536%2C989&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1000%2C644&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>An awesome <a href=\"#retail-font\">new font</a> from OH no Type Company</figcaption></figure>\n\n\n\n<ul class=\"is-style-super-link-list\"><li><a href=\"https://mailchi.mp/252c1a3e328e/your-october-font-of-the-month-190523\" rel=\"noopener\">Output Sans goes variable</a> — David Jonathan Ross&#8217;s <a href=\"https://djr.com/output\" rel=\"noopener\">Output</a> is a real workhorse typeface. He&#8217;s been re-doing it as a variable as part of an effort to get variable fonts &#8220;over the hump&#8221; — that is, away from being thought of as experimental and thought of as practical for day-to-day usage.</li><li><a href=\"https://www.swyx.io/line-lengths/\" rel=\"noopener\">Line Lengths</a> — Shawn says, &#8220;it seems an obvious immediate win to apply&nbsp;<code>max-width: 69ch</code>&nbsp;to your blog content blocks.&#8221; Nice. Oliver Schöndorfer <a href=\"https://pimpmytype.com/line-length-line-height/\" rel=\"noopener\">dug into line length</a> recently too. </li><li><strong><a href=\"https://www.joshwcomeau.com/css/custom-css-reset/#:~:text=Smarter%20line-heights,Here%20it%20is%3A\" rel=\"noopener\">Smarter line-heights with “calc”</a></strong>  — Check out this particular part of Josh&#8217;s custom CSS reset. A potentially cool way to handle <code>line-height</code> for both body copy and headers in one swoop.</li><li><a href=\"https://www.women-in-type.com/\" rel=\"noopener\">Women in Type</a> — Just an incredible website from the University of Reading team. &#8220;These women worked daily on developing and producing typefaces that were, eventually, almost always attributed to male designers. They merit attention as key contributors to the design process of many renowned typefaces that emerged throughout the twentieth century.&#8221;</li><li><a id=\"retail-font\" href=\"https://ohnotype.co/fonts/retail\" rel=\"noopener\">Retail</a> — &#8220;Retail is the result of focussing our energy on the not-too-trendy world of humanist sans.&#8221; Very nice work from OH no Type Company.</li><li><a href=\"https://qodeinteractive.com/magazine/best-google-fonts/\" rel=\"noopener\">Designers’ Pick: Best Google Fonts for 2022</a> — The fact that you can go from zero to implemented custom fonts, for free, in like 30 seconds with Google Fonts is going to keep it the most-used custom font solution likely as long as it exists. Fortunately, the website for it has gotten a lot better, the performance of them has gotten good (and controllable), and as this post on Qode shows, there is a ton of really great new choices available. I like the look of <a href=\"https://fonts.google.com/specimen/Space+Grotesk\" rel=\"noopener\">Space Grotesk</a>. The <a href=\"https://www.typewolf.com/\" rel=\"noopener\">Typewolf</a> newsletter is always covering new good ones. Lately: <a href=\"https://fonts.google.com/specimen/Readex+Pro\" rel=\"noopener\">Readex Pro</a> &amp; <a href=\"https://fonts.google.com/specimen/Spline+Sans\" rel=\"noopener\">Spline Sans</a>.</li><li><a href=\"https://elliotjaystocks.com/blog/google-fonts-knowledge\" rel=\"noopener\">Google Fonts Knowledge</a> — Speaking of Google Fonts! Elliot Jay Stocks worked on this beefy project: &#8220;30+ lessons spread out over three modules —&nbsp;<a href=\"https://fonts.google.com/knowledge/introducing_type\" rel=\"noopener\">“Introducing Type”</a>,&nbsp;<a href=\"https://fonts.google.com/knowledge/choosing_type\" rel=\"noopener\">“Choosing Type”</a>, and&nbsp;<a href=\"https://fonts.google.com/knowledge/using_type\" rel=\"noopener\">“Using Type”</a>&nbsp;— and&nbsp;<a href=\"https://fonts.google.com/knowledge/glossary\" rel=\"noopener\">100+ glossary definitions</a>.&#8221; </li><li><a href=\"https://modern-fluid-typography.vercel.app/\" rel=\"noopener\">Modern fluid typography editor</a> — The output from this generator tool by Adrian Bece is a lot like the <code>clamp()</code> stuff from <a href=\"https://css-tricks.com/consistent-fluidly-scaling-type-and-spacing/\">Andy&#8217;s Consistent, Fluidly Scaling Type and Spacing</a>. Adrian&#8217;s helps you visualize the &#8220;curve&#8221;, but actually <em>this</em> <a href=\"https://www.fluid-type-scale.com/\" rel=\"noopener\">Fluid Type Scale Calculator</a> from <a href=\"https://www.aleksandrhovhannisyan.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Aleksandr Hovhannisyan</a> might be a smidge more useful when setting up a new project as it gives you a full spectrum of custom properties to use. </li></ul>\n\n\n\n<p>Do you have any interesting  typography links from  the past month worth sharing? Drop &#8217;em in the comments!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/typography-links-january-2022/\">8 Interesting Typography Links for January 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/typography-links-january-2022/feed/</wfw:commentRss>\n\t\t\t<slash:comments>4</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">360711</post-id>\t</item>\n\t\t<item>\n\t\t<title>Adam Argyle&#8217;s Sick Mouse-Out CSS Hover Effect</title>\n\t\t<link>https://css-tricks.com/adam-argyles-sick-mouse-out-css-hover-effect/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/adam-argyles-sick-mouse-out-css-hover-effect/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Geoff Graham]]></dc:creator>\n\t\t<pubDate>Fri, 07 Jan 2022 20:15:19 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[hover]]></category>\n\t\t<category><![CDATA[links]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=360113</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>I was killing some time browsing my CodePen feed for some eye candy and didn&#8217;t need to go past the first page before spotting a <a href=\"https://codepen.io/argyleink/pen/poEjvpd?editors=1100\" rel=\"noopener\">neat CSS hover effect</a> by <a href=\"https://twitter.com/argyleink\" rel=\"noopener\">Adam Argyle</a>.</p>\n<p>I must&#8217;ve spent 10 minutes just staring &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/adam-argyles-sick-mouse-out-css-hover-effect/\">Adam Argyle&#8217;s Sick Mouse-Out CSS Hover Effect</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>I was killing some time browsing my CodePen feed for some eye candy and didn&#8217;t need to go past the first page before spotting a <a href=\"https://codepen.io/argyleink/pen/poEjvpd?editors=1100\" rel=\"noopener\">neat CSS hover effect</a> by <a href=\"https://twitter.com/argyleink\" rel=\"noopener\">Adam Argyle</a>.</p>\n\n\n\n<span id=\"more-360113\"></span>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"adam-cool-link-effect-mp4\" width='500' height='281' src='https://videopress.com/embed/bOm32AjY?cover=1&amp;loop=1&amp;muted=1&amp;persistVolume=0&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>I must&#8217;ve spent 10 minutes just staring at the demo in awe. There&#8217;s something about this that feels so app-like. I think it might be how contextually accurate it is in that the background color slides in from the left, then exits out through the right. It&#8217;s exactly the sort of behavior I&#8217;d expect from a mouse-in, mouse-out sort of interaction. </p>\n\n\n\n<p>Whatever the case, I fired up a fresh pen and went to work recreating it. And it&#8217;s not super complex or anything, but rather a clever use of transitions and transforms paired with proper offsets. Quite elegant! I&#8217;m actually a little embarrassed how long it took me to realize how the mouse-out part works.</p>\n\n\n\n<p>Here&#8217;s how I tackled it, warts and all.</p>\n\n\n\n<h3>&#8220;I bet that&#8217;s using a transition on a <code>background</code>.&#8221;</h3>\n\n\n\n<p>That was my first thought. Define the background-color, set the  <code>background-size</code> and <code>background-position</code>, then transition the <code>background-position</code>. That&#8217;s how I&#8217;ve seen that &#8220;growing&#8221; background color thing done in the past. I&#8217;ve done that myself on some projects, like this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GXoOdK\" src=\"//codepen.io/anon/embed/preview/GXoOdK?height=350&amp;theme-id=1&amp;slug-hash=GXoOdK&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GXoOdK\" title=\"CodePen Embed GXoOdK\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If I could do the same thing, only from left-to-right, then all that&#8217;s left is the mouse-out, right? Nope. The problem is there&#8217;s nothing that can really make the <code>background-position</code> transition from left-to-right to left-to-right. I could make it do one or the other, but not both.</p>\n\n\n\n<h3>&#8220;Maybe it&#8217;s a <code>transform</code> instead.&#8221;</h3>\n\n\n\n<p>My next attempt was jump into transforms. The <code>transform</code> property provides a bunch of functions that can <code>transition</code> together for slightly more complex movement. For example, the <code>background</code> can &#8220;grow&#8221; or &#8220;shrink&#8221; by changing the element&#8217;s <code>scale()</code>. Or, in this case, just along the x-axis with <code>scaleX()</code>.</p>\n\n\n\n<p>But like I mentioned, there isn&#8217;t a way to isolate the element&#8217;s <code>background</code> to do that. Going from <code>scaleX(0)</code> to <code>scaleX(1)</code> scales the <em>entire</em> element, so that basically squishes the link — content and all — down to nothing, then stretches it back out to its natural size which is a totally different effect. Plus, it means starting with <code>scaleX(0)</code> which hides the whole dang thing by default making it unusable.</p>\n\n\n\n<p>But a pseudo-element could work! It doesn&#8217;t matter if that gets squished or hidden because it isn&#8217;t part of the actual content. Gotta put the <code>background</code> on that instead and position it directly under the link.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  /* Keeps the pseudo-element contained to the element */\n  position: relative;\n}\n\na::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0; /* Logical equivalent to physical offsets */\n  position: absolute;\n  transform: scaleX(0); /* Hide by default */\n  z-index: -1; /* Ensures the link is stacked on top */\n}</code></pre>\n\n\n\n<h3>&#8220;Now I need <code>::before</code> to change on hover.&#8221;</h3>\n\n\n\n<p>I knew I could make <code>::before</code> scale from <code>0</code> to <code>1</code> by chaining it to the link element&#8217;s <code>:hover</code> state.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a:hover::before {\n  transform: scaleX(1)\n}</code></pre>\n\n\n\n<p><em>Nice!</em> I was onto something.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBPxXEJ\" src=\"//codepen.io/anon/embed/preview/qBPxXEJ?height=350&amp;theme-id=1&amp;slug-hash=qBPxXEJ&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBPxXEJ\" title=\"CodePen Embed qBPxXEJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Sprinkle a little <code>transition</code> fairy dust on it and things start to come to life.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"7\"><code markup=\"tt\">a::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLzvoVz\" src=\"//codepen.io/anon/embed/preview/yLzvoVz?height=350&amp;theme-id=1&amp;slug-hash=yLzvoVz&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLzvoVz\" title=\"CodePen Embed yLzvoVz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>&#8220;Hmm, the transition moves in <em>both</em> directions.&#8221;</h3>\n\n\n\n<p>Again, this is where I sorta got stuck. Something in my head just wasn&#8217;t clicking for some reason. As per usual, I ran over to the <a href=\"https://css-tricks.com/almanac/\">CSS-Tricks Almanac</a> to see what property might&#8217;ve slipped my mind.</p>\n\n\n\n<p>Ah, yes. That would be <code><a href=\"https://css-tricks.com/almanac/properties/t/transform-origin/\">transform-origin</a></code>. That allows me to set where the <code>transform</code> starts, which is not totally dissimilar from setting the <code>background-position</code> like I tried earlier. The <code>transform</code> could start from the left instead of its default <code>50% 50%</code> position.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"7\"><code markup=\"tt\">a::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transform-origin: left;\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}</code></pre>\n\n\n\n<p>Yeah, like this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNZMEjp\" src=\"//codepen.io/anon/embed/preview/WNZMEjp?height=350&amp;theme-id=1&amp;slug-hash=WNZMEjp&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNZMEjp\" title=\"CodePen Embed WNZMEjp\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I was already transitioning <code>::before</code> to <code>scaleX(1)</code> on link hover. If I reversed the <code>transform-origin</code> from <code>left</code> to <code>right</code> at the same time, then <em>mayyyybe</em> the highlight goes out the opposite of how it came in when the mouse exits?</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"3\"><code markup=\"tt\">a:hover::before {\n  transform: scaleX(1);\n  transform-origin: right;\n}</code></pre>\n\n\n\n<p>&#x1f91e;</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jOGZLLw\" src=\"//codepen.io/anon/embed/preview/jOGZLLw?height=350&amp;theme-id=1&amp;slug-hash=jOGZLLw&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jOGZLLw\" title=\"CodePen Embed jOGZLLw\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Whoops, backwards! Let&#8217;s swap the <code>left</code> and <code>right</code> values. &#x1f643;</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLzvXyL\" src=\"//codepen.io/anon/embed/yLzvXyL?height=350&amp;theme-id=1&amp;slug-hash=yLzvXyL&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLzvXyL\" title=\"CodePen Embed yLzvXyL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Gorgeous. Thank you, Adam, for the inspiration!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/adam-argyles-sick-mouse-out-css-hover-effect/\">Adam Argyle&#8217;s Sick Mouse-Out CSS Hover Effect</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/adam-argyles-sick-mouse-out-css-hover-effect/feed/</wfw:commentRss>\n\t\t\t<slash:comments>6</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">360113</post-id>\t</item>\n\t\t<item>\n\t\t<title>useRainbow()</title>\n\t\t<link>https://css-tricks.com/userainbow/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/userainbow/#respond</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Rafał Pastuszak]]></dc:creator>\n\t\t<pubDate>Fri, 07 Jan 2022 14:59:04 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[color]]></category>\n\t\t<category><![CDATA[hsl]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=359823</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>I took a break from work and started some small, personal projects (toys). One of those small projects is <a href=\"https://potato.horse\" rel=\"noopener\">potato.horse</a> where I keep all of my doodles, visual short stories and jokes. Check it out!</p>\n<p>However, this post is not &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/userainbow/\">useRainbow()</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>I took a break from work and started some small, personal projects (toys). One of those small projects is <a href=\"https://potato.horse\" rel=\"noopener\">potato.horse</a> where I keep all of my doodles, visual short stories and jokes. Check it out!</p>\n\n\n\n<p>However, this post is not about my break from work, other experiments, or the site itself. People seem to like one particular technique I used in the design, notably, the background effect applied that transitions between colors when the user browses the content:</p>\n\n\n\n<span id=\"more-359823\"></span>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"use-rainbow-scroll-animation-mp4\" width='500' height='317' src='https://videopress.com/embed/OBqOLlnC?cover=1&amp;muted=1&amp;persistVolume=0&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>Some asked me how this effect was implemented (including going as far as reading the minified code, which is very flattering).</p>\n\n\n\n<p>So, here&#8217;s a quick gist, followed up with some context:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export const useRainbowBg = () =>\nuseEffect(() => {\n  const cb = () => {\n    const viewportHeight = window.innerHeight\n    const contentHeight = document.body.getBoundingClientRect().height\n    const viewportsPerRotation = Math.min(\n      3,\n      contentHeight / viewportHeight\n    )\n    const from = 51\n    const progress =\n      window.scrollY / (viewportHeight * viewportsPerRotation)\n    const h = (from + 360 * progress) % 360\n\n    document.body.style.backgroundColor = `hsl(${h}deg, 100%, 50%)`\n  }\n  window.addEventListener('scroll', cb, { passive: true })\n  return () => window.removeEventListener('scroll', cb)\n})</code></pre>\n\n\n\n<p>In short, I map the <em>scroll position</em> into the <em>hue</em> in the HSL color notation. Let&#8217;s break this down.</p>\n\n\n\n<h3>Color models</h3>\n\n\n\n<p>There are many ways of describing colors in CSS, with the two most common ones being RGB (left) and HSL (right):</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwLQKyE\" src=\"//codepen.io/anon/embed/RwLQKyE?height=700&amp;theme-id=1&amp;slug-hash=RwLQKyE&amp;default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwLQKyE\" title=\"CodePen Embed RwLQKyE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>RGB is an additive color palette. This means that mixing 100% of red, green and blue produces white, mixing 100% red and 100% green but 0% blue produces yellow, and so on. This is different from, say, using oil paint or the <a rel=\"noreferrer noopener\" href=\"https://en.wikipedia.org/wiki/CMYK_color_model\" target=\"_blank\">CMYK color model</a>, where the resulting tone would be black(-ish)<sup id=\"fn1\"><a href=\"#footnote-1\">1</a></sup>.</p>\n\n\n\n<p>We&#8217;re used to this approach because it&#8217;s easy to describe in code, but specifying colors in terms of hue, saturation and luminosity seems more natural, especially if you come from a design background, or&#8230; you know, are a human being using a human language.</p>\n\n\n\n<p>We&#8217;ve gotten used to RGB as developers, but in spoken language, using it would feel unnatural and confusing. <a rel=\"noreferrer noopener\" href=\"http://facade.photo\" target=\"_blank\">Façade</a> would be very hard to use in RGB.</p>\n\n\n\n<p>On the other hand, HSL can often be much more intuitive to work with. For instance, if I want to make a color slightly colder, I can just move the hue slider a bit towards blue and I should get closer to what I have in mind. With RGB, if we make the color appear colder by including more blue, the resulting tone will be a bit brighter as the blue component contributes to the overall lightness. This means that you&#8217;d have to lower the red and green values to compensate.</p>\n\n\n\n<p>To see how this works in practice, try maxing out the blue color in the example below.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoJQmVa\" src=\"//codepen.io/anon/embed/PoJQmVa?height=850&amp;theme-id=1&amp;slug-hash=PoJQmVa&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoJQmVa\" title=\"CodePen Embed PoJQmVa\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The first thing that stands out is that all tones are shifted towards blue and the overall brightness of the picture is increased. In the case of the effect we&#8217;re discussing, that would be undesirable.</p>\n\n\n\n<p>Now, let&#8217;s try to do the same with the HSL color circle. Drag the slider to the left, by <strong>ca. 90 degrees</strong>:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvrydNY\" src=\"//codepen.io/anon/embed/wvrydNY?height=700&amp;theme-id=1&amp;slug-hash=wvrydNY&amp;default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvrydNY\" title=\"CodePen Embed wvrydNY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>In this scenario, using HSL not only <em>turns Susan into a vampire</em>, but also maintains a similar<sup><a href=\"#footnote-2\">2</a></sup> level of brightness. And that&#8217;s exactly what I&#8217;m looking for.</p>\n\n\n\n<p>So, what I mean by saying this:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>How does this work? In short, I map the <em>scroll position</em> into the <em>hue</em> in the HSL color notation. Rafal, 2 days earlier</p></blockquote>\n\n\n\n<p>&#8230;is that that every time we detect a scroll event, I try to map it to an angle on the hue circle:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GRMQmzx\" src=\"//codepen.io/anon/embed/GRMQmzx?height=750&amp;theme-id=1&amp;slug-hash=GRMQmzx&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GRMQmzx\" title=\"CodePen Embed GRMQmzx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I didn&#8217;t want to start with red as it would make me hungry and the base yellow fits the design a bit better, so I applied a small initial shift—hence <code>const from = 51</code> set as the initial offset.</p>\n\n\n\n<p>And, as far as the basic implementation goes, that&#8217;s it!</p>\n\n\n\n<p>Now, there are three other areas of improvement.</p>\n\n\n\n<h3>useRainbow performance</h3>\n\n\n\n<p>We&#8217;re triggering a repaint on every scroll, so I was a bit worried that older mobile devices, or even some hi-end laptops plugged in to 4k screens might not be able to maintain solid 60fps. But, I&#8217;m happy with the results so far. Using <a href=\"//developers.google.com/web/updates/2016/06/passive-event-listeners\" target=\"_blank\" rel=\"noreferrer noopener\">passive event listeners</a> provided a bit of a boost, especially on mobile.</p>\n\n\n\n<p>If I realize that performance is a problem, especially with more content down the line, I&#8217;ll probably focus on:</p>\n\n\n\n<ul><li>removing the unnecessary call to <code>getBoundingClientRect</code> on every scroll handler call, and</li><li>deferring or throttling background color changes using <code>requestAnimationFrame</code>.</li></ul>\n\n\n\n<p>I expect the first improvement to have some impact, but the benefits of the second one should be negligible.</p>\n\n\n\n<p>Measure before optimizing. Obsessing about the performance only makes sense when issues become noticeable, be it through a drop in framerate or battery impact. Your iPhone Pro has more computing power than many low-end laptops, so <a href=\"https://css-tricks.com/test-your-product-on-a-crappy-laptop/\">it&#8217;s a good idea to test on those devices too</a>. It&#8217;s good to have a crappy old Android phone exacly for that purpose if you can spare a few quid.</p>\n\n\n\n<h3>Perceptually uniform color spaces</h3>\n\n\n\n<p>You might&#8217;ve noticed that in the previous illustrations some fully saturated colors seemed darker than others. That&#8217;s because the color spaces we normally use when coding don&#8217;t reflect the way the human eye works. I&#8217;ll leave the in-depth explanation to <a rel=\"noreferrer noopener\" href=\"https://programmingdesignsystems.com/color/perceptually-uniform-color-spaces/\" target=\"_blank\">someone much more experienced than me</a>, but suffice to say (gross oversimplification alert!) that, generally, the same amount of red/green/yellow will appear brighter than blue. This means that in some cases the text on the page will be harder to read.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abLEMzW\" src=\"//codepen.io/anon/embed/abLEMzW?height=550&amp;theme-id=1&amp;slug-hash=abLEMzW&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abLEMzW\" title=\"CodePen Embed abLEMzW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p><em>For now</em>, this isn&#8217;t an issue as I&#8217;ve <em>just</em> put this thing online and titles serve a secondary purpose. But there&#8217;s a solution to the problem and it&#8217;s not overly complicated: use a perceptually uniform color space. There&#8217;s a bunch of libraries that do it out of the box, both in JavaScript/TypeScript and CSS/Sass/<code>&lt;pick your CSS flavor here&gt;</code>. <a href=\"https://www.hsluv.org\" rel=\"noopener\"><code>hsluv</code></a> seems like a good starting point.</p>\n\n\n\n<h3>Accessiblity</h3>\n\n\n\n<p>Note that I&#8217;ll be focusing on the visual effect itself and not discussing the rest of the site (e.g. alt tags, document structure, etc&#8230;). I&#8217;d like to focus on contrast, color blindness and people who rely on <code><a href=\"https://css-tricks.com/revisiting-prefers-reduced-motion-the-reduced-motion-media-query/\">prefers-reduced-motion</a></code>. The site is a living document; there&#8217;s always so much to improve. For instance, contrast can be an issue in a few, non-critical places. I&#8217;m happy to accept feedback and implement it: <a href=\"https://sonnet.io/posts/hi/\" rel=\"nofollow noopener\">hit me up!</a>.</p>\n\n\n\n<h3>color blindness</h3>\n\n\n\n<p>I wanted to make sure that the effect doesn&#8217;t break the site completely for people with color blindness. So I focused on the most common types: deuteranomaly and protanomaly (red-green color blindness), but also ran wider tests. I used Photoshop and <a href=\"https://github.com/oftheheadland/Colorblindly\" target=\"_blank\" rel=\"noreferrer noopener\">Colorblindly (Chrome extension)</a> for some rudimentary checks.</p>\n\n\n\n<h3><code>prefers-reduced-motion</code></h3>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The <strong><code>prefers-reduced-motion</code></strong> CSS media feature is used to detect if the user has requested that the system minimize the amount of non-essential motion it uses.</p><cite>—<a rel=\"noreferrer noopener\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\" target=\"_blank\">MDN</a></cite></blockquote>\n\n\n\n<p>This site doesn&#8217;t contain many animations (besides the <em>Little Sausage Angels</em> you&#8217;ll see if you hit &#8220;Share&#8221;), but I was wondering if people who rely on <code>prefers-reduced-motion</code> would like the background color to stay constant.</p>\n\n\n\n<p>The short answer is: I don&#8217;t know. My intuition is that rotating colors don&#8217;t really qualify as motion, but my experience and understanding of the problem is, to say the least, limited. In situations like this, I&#8217;d rather depend on user research than guesses.</p>\n\n\n\n<p>Luckily, the site had its five minutes of fame on Reddit which proved to be a decent opportunity to collect feedback. None of the users brought up an issue with the background effect so far. I&#8217;m also lucky enough to know a bunch of accessibility specialists, such as <a rel=\"noreferrer noopener\" href=\"https://twitter.com/a_sandrina_p\" target=\"_blank\">Sandrina Pereira</a>. Her suggestion was that (a) background animations definitely qualify as motion, and (b) perhaps the effect feels natural because it&#8217;s a direct result of a user interaction.</p>\n\n\n\n<h3>Summary</h3>\n\n\n\n<p>The late-90s Geocities web felt playful and weird. It was fun in an uninhibited, somewhat less performative, way. I wanted to incorporate some of this look and feel in the site. But still, I didn&#8217;t want to make it feel esoteric to the point where you&#8217;d need to up your hipsterdom-level to 9000 and browse it exclusively throught Netscape 7. All of that, while listening to the new Nirvana <em>Unplugged</em> album.</p>\n\n\n\n<p>I still wanted decent UX on mobile and desktop, and some space for easter eggs (something you can&#8217;t do when living in the strange and abusive relationship with social media we&#8217;ve grown so accustomed to).</p>\n\n\n\n<p>As a kid, I had built six websites before I even got access to the Internet for the first time. Now, after being burned out for three years, even considering changing my job, it was the first time I genuinely enjoyed coding. I forgot how much fun it was!</p>\n\n\n\n<p>Now, go out, pet your cat, and make stuff!</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>P.S. Check out <a rel=\"noreferrer noopener\" href=\"https://www.cameronsworld.net/\" target=\"_blank\">Cameron&#8217;s World</a>.</p>\n\n\n\n<p>P.P.S. The code for interactive diagrams <a href=\"https://github.com/paprikka/use-rainbow-article-examples\" rel=\"noopener\">can be found on GitHub</a>.</p>\n\n\n\n<h3>Footnotes</h3>\n\n\n\n<ol><li><span id=\"footnote-1\">Hence</span> the K component in CMYK meaning &#8220;black.&#8221; Using B would be confusing as it means &#8220;blue&#8221; in other color models. <a href=\"#fn1\">⮑</a></li><li><span id=\"footnote-2\">It&#8217;s</span> not perfect since the perceptual color space differs from what&#8217;s described using RGB/HSL. <a href=\"#fn2\">⮑</a></li></ol>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/userainbow/\">useRainbow()</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/userainbow/feed/</wfw:commentRss>\n\t\t\t<slash:comments>0</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">359823</post-id>\t</item>\n\t\t<item>\n\t\t<title>A New Container Query Polyfill That Just Works</title>\n\t\t<link>https://css-tricks.com/a-new-container-query-polyfill-that-just-works/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/a-new-container-query-polyfill-that-just-works/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Thu, 06 Jan 2022 22:28:46 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[container-queries]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=360320</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>There is an easy-to-use CSS container query polyfill now. You essentially conditionally load it and forget about it. Then write spec-compliant container queries code.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-new-container-query-polyfill-that-just-works/\">A New Container Query Polyfill That Just Works</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>There is now <a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill\" rel=\"noopener\">a polyfill</a> for <a href=\"https://css-tricks.com/a-cornucopia-of-container-queries/\">Container Queries</a> that behaves as perfectly as a polyfill should:</p>\n\n\n\n<ol><li>You conditionally load it when you detect the browser doesn&#8217;t support Container Queries.</li><li>You write CSS as you normally would, including current-spec-compliant Container Queries syntax code.</li><li>It just works.</li></ol>\n\n\n\n<p>It&#8217;s pretty great to have a container query polyfill that is this easy to use and from Chrome itself, the first-movers as far as early test implementations. Looks like <a href=\"https://twitter.com/dassurma?lang=en\" rel=\"noopener\">Surma</a> put it together — thanks Surma! </p>\n\n\n\n<span id=\"more-360320\"></span>\n\n\n\n<p class=\"is-style-explanation\">There was a Container Query polyfill from Jonathan Neal called <a href=\"https://github.com/jsxtools/cqfill\" rel=\"noopener\">cqfill</a> that predates this. I&#8217;m not sure if it&#8217;s officially deprecated, but it required extra non-spec CSS to work and PostCSS processing, so I&#8217;d consider it deprecated in favor of this newer polyfill.</p>\n\n\n\n<p>Loading the polyfill is like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Support Test\nconst supportsContainerQueries = \"container\" in document.documentElement.style;\n\n// Conditional Import\nif (!supportsContainerQueries) {\n  import(\"https://cdn.skypack.dev/container-query-polyfill\");\n}</code></pre>\n\n\n\n<p>You can pull it from npm or use as a <code>&lt;script&gt;</code>, but this way seems best to me to keep things light and easy.</p>\n\n\n\n<p>Then you&#8217;re free to use the syntax for a container query in CSS. Say you have a weather widget in HTML. You&#8217;ll need an extra wrapper element for your queries. That&#8217;s just the rule: <em>you can&#8217;t query the thing you style</em>. </p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"weather-wrap\">\n  &lt;dl class=\"weather\">\n    &lt;div>\n      &lt;dt>Sunday&lt;/dt>\n      &lt;dd>\n        &lt;b>26°&lt;/b> 7°\n      &lt;/dd>\n    &lt;/div>\n    &lt;div>\n      &lt;dt>Monday&lt;/dt>\n      &lt;dd>\n        &lt;b>34°&lt;/b> 11°\n      &lt;/dd>\n    &lt;/div>\n    &lt;!-- etc -->\n  &lt;/dl>\n&lt;/div></code></pre>\n\n\n\n<p>The wrapper is instantiated as a container:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"2\"><code markup=\"tt\">.weather-wrap {\n  container: inline-size / weather-wrapper;\n  /* Shorthand for: */\n  /* container-type: inline-size; */\n  /* container-name: weather-wrapper; */\n\n  /* For quick testing, do this to get a resize handle on desktop: */\n  /* resize: both; */\n  /* overflow: hidden; */\n}</code></pre>\n\n\n\n<p>Then you write any global styling for that component, as well as container query scoped styles:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4\"><code markup=\"tt\">.weather {\n  display: flex;\n}\n@container weather-wrapper size(max-width: 700px) {\n  .weather {\n    flex-direction: column;\n  }\n}</code></pre>\n\n\n\n<h3>Container Queries polyfill example</h3>\n\n\n\n<p>Here&#8217;s that slightly more fleshed-out demo of the Container Query polyfill using an actual weather widget:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLzKavz\" src=\"//codepen.io/anon/embed/yLzKavz?height=650&amp;theme-id=1&amp;slug-hash=yLzKavz&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLzKavz\" title=\"CodePen Embed yLzKavz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I first saw this <a href=\"https://www.bram.us/2021/11/26/a-first-look-at-container-query-polyfill-a-polyfill-for-css-container-queries/\" rel=\"noopener\">over on Bramus&#8217; blog</a>, and he&#8217;s got a classic card demo going with this Container Query polyfill. Scroll up and down. You&#8217;ll see a row of bear cards at the top (if your browser window is wide enough), and then similar bear cards in different layout positions below that change into nicer formats when they can, based on the container query.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYxNpeE\" src=\"//codepen.io/anon/embed/LYxNpeE?height=850&amp;theme-id=1&amp;slug-hash=LYxNpeE&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYxNpeE\" title=\"CodePen Embed LYxNpeE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Container Query polyfill browser support</h3>\n\n\n\n<p>The polyfill <a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill\" rel=\"noopener\">docs</a> say:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>The polyfill relies on&nbsp;<a href=\"https://caniuse.com/resizeobserver\" rel=\"noopener\"><code>ResizeObserver</code></a>,&nbsp;<a href=\"https://caniuse.com/mutationobserver\" rel=\"noopener\"><code>MutationObserver</code></a>&nbsp;and&nbsp;<a href=\"https://caniuse.com/css-matches-pseudo\" rel=\"noopener\"><code>:is()</code></a>. Therefore, it should work in all modern browsers, specifically Chrome/Edge 88+, Firefox 78+ and Safari 14+.</p><p><a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill#feature-support--limitations\" rel=\"noopener\"></a></p></blockquote>\n\n\n\n<p>There are all sorts of other minor little caveats covered in those docs, including what it does and doesn&#8217;t support. Seems like mostly niche stuff to me — the main/typical use cases are covered.</p>\n\n\n\n<h3>A game changer?</h3>\n\n\n\n<p>As I write, we&#8217;ve seen behind-flag support for Container Queries in Chrome, and it is an official spec draft now:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Today&#39;s CSSWG call:<br><br>🥳 First Public Working Draft of Contain Level 3 (container queries)<br>🥳 FPWD of Cascade Level 6 (scope)<br><br>This means the proposals have graduated to being official work-in-progress specifications. Still a lot to do before browsers ship, but it&#39;s a big step!</p>&mdash; Mia, on Bass (@TerribleMia) <a href=\"https://twitter.com/TerribleMia/status/1468632950212341770?ref_src=twsrc%5Etfw\" rel=\"noopener\">December 8, 2021</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>That&#8217;s extremely exciting and points heavily toward browsers actually shipping with Container Queries, even if the syntax changes a bit on the way (it already has a number of times). But, of course, we have no idea if/when Container Queries do ship — and when that magical threshold is crossed, we also don&#8217;t know where we can use them without much worry, like we can with flexbox and grid now.</p>\n\n\n\n<p>That &#8220;just use it&#8221; date is probably a decent ways off, but if you&#8217;re into the idea of polyfilling and being careful with progressive enhancement, I&#8217;d say the date for using Container Queries could be right now-ish. Looks to me like the polyfill script comes across the wire at 2.8kb, so it&#8217;s fairly trivial in size for something so important. </p>\n\n\n\n<p>I suspect this polyfill will skyrocket usage of Container Queries in this coming year.</p>\n\n\n\n<h3>FOUC?</h3>\n\n\n\n<p>The fact that your styles only correctly apply after a JavaScript file is downloaded and executed puts sites into Flash of Unstyled Content (FOUC) territory. <a href=\"https://cln.sh/k2jDfJ\" rel=\"noopener\">Here&#8217;s a video recording</a> where I can see it on my own demo. I&#8217;m not sure there is a way around this other than intentionally delaying rendering, which is generally considered a no-no. Similar to loading web fonts, FOUC is probably a good thing as it means your content is never hidden or delayed, even if the shifts aren&#8217;t ideal. The FOUC should go away once browser support lands and the polyfill stops loading at all.</p>\n\n\n\n<p>Have fun polyfilling container queries! I&#8217;d love to see more demos  of it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1316\" height=\"1445\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=1316%2C1445&#038;ssl=1\" alt=\"GitHub Repo for the Container Query Polyfill\" class=\"wp-image-360329\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?w=1316&amp;ssl=1 1316w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=273%2C300&amp;ssl=1 273w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=933%2C1024&amp;ssl=1 933w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=768%2C843&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=1000%2C1098&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-new-container-query-polyfill-that-just-works/\">A New Container Query Polyfill That Just Works</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/a-new-container-query-polyfill-that-just-works/feed/</wfw:commentRss>\n\t\t\t<slash:comments>1</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">360320</post-id>\t</item>\n\t\t<item>\n\t\t<title>The Search For a Fixed Background Effect With Inline Images</title>\n\t\t<link>https://css-tricks.com/the-search-for-a-fixed-background-effect-with-inline-images/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/the-search-for-a-fixed-background-effect-with-inline-images/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Alex Lazar]]></dc:creator>\n\t\t<pubDate>Thu, 06 Jan 2022 15:58:55 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[background-attachment]]></category>\n\t\t<category><![CDATA[background-image]]></category>\n\t\t<category><![CDATA[fixed position]]></category>\n\t\t<category><![CDATA[images]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=358917</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>I was working on a client project a few days ago and wanted to create a certain effect on an <code>&#60;img&#62;</code>. See, background images can do the effect I was looking for somewhat easily with <code>background-attachment: fixed;</code>. With &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-search-for-a-fixed-background-effect-with-inline-images/\">The Search For a Fixed Background Effect With Inline Images</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>I was working on a client project a few days ago and wanted to create a certain effect on an <code>&lt;img&gt;</code>. See, background images can do the effect I was looking for somewhat easily with <code>background-attachment: fixed;</code>. With that in place, a background image stays in place—even when the page scrolls. It isn’t used all that often, so the effect can look unusual and striking, especially when used sparingly.</p>\n\n\n\n<p>It took me some time to figure out how to achieve the same effect only with an inline image, rather than a CSS background image. This is a video of the effect in action:</p>\n\n\n\n<span id=\"more-358917\"></span>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"the20mysterious20css20property-mp4\" width='500' height='313' src='https://videopress.com/embed/2ciWn57o?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p class=\"is-style-explanation\">The exact code for the above demo is <a href=\"https://github.com/lazaralex98/nate-davis/blob/main/components/HomePage/BenefitsWithAttachementEffect.jsx\" rel=\"noopener\">available in this Git repo</a>. Just note that it’s a Next.js project. We’ll get to a CodePen example with raw HTML in a bit.</p>\n\n\n\n<h3>Why use <code>&lt;img&gt;</code> instead of <code>background-image</code>?</h3>\n\n\n\n<p>The are a number of reasons I wanted this for my project:</p>\n\n\n\n<ul><li>It’s easier to lazy load (e.g. <code>&lt;img loading=\"lazy\"… &gt;</code>.</li><li>It provides better SEO (not to mention accessibility), thanks to <code>alt</code> text.</li><li>It’s possible to <a href=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/#using-srcset\" data-type=\"URL\" data-id=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/#using-srcset\">use <code>srcset</code>/<code>sizes</code></a> to improve the loading performance.</li><li>It’s possible to <a href=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/#using-picture\">use the <code>&lt;picture&gt;</code> tag</a> to pick the best image size and format for the user’s browser.</li><li>It allows users to download save the image (without resorting to DevTools).</li></ul>\n\n\n\n<p>Overall, it’s better to use the image tag where you can, particularly if the image could be considered content and not decoration. So, I wound up landing on a technique that uses CSS <code>clip-path</code>. We’ll get to that in a moment, right after we first look at the <code>background-image</code> method for a nice side-by-side comparison of both approaches.</p>\n\n\n\n<h3>1. Using CSS <code>background-image</code></h3>\n\n\n\n<p>This is the “original” way to pull off a fixed scrolling effect. Here’s the CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero-section {\n  background-image: url(\"nice_bg_image.jpg\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center; \n  background-attachment: fixed;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLoWoeR\" src=\"//codepen.io/anon/embed/yLoWoeR?height=550&amp;theme-id=1&amp;slug-hash=yLoWoeR&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLoWoeR\" title=\"CodePen Embed yLoWoeR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But as we just saw, this approach isn’t ideal for some situations because it relies on the CSS <code>background-image</code> property to call and load the image. That means the image is technically not considered content—and thus unrecognized by screen readers. If we’re working with an image that is part of the content, then we really ought to make it accessible so it is consumed like content rather than decoration.</p>\n\n\n\n<p>Otherwise, this technique works well, but only <em>if the image spans the whole width of the viewport and/or is centered</em>. If you have an image on the right or left side of the page like the example, you’ll run into a whole number of positioning issues because <code>background-position</code> is relative to the center of the viewport.</p>\n\n\n\n<p>Fixing it requires a few media queries to make sure it is positioned properly on all devices.</p>\n\n\n\n<h3>2. Using the <code>clip-path</code> trick on an inline image</h3>\n\n\n\n<p><a href=\"https://stackoverflow.com/questions/33550450/how-to-use-css-background-attachment-in-img-tag/68466386#68466386\" rel=\"noopener\">Someone on StackOverflow</a> shared this <code>clip-path</code> trick and it gets the job done well. You also get to keep using the<code>&lt;img&gt;</code> tag, which, as we covered above, might be advantageous in some circumstances, especially where an image is part of the content rather than pure decoration.</p>\n\n\n\n<p>Here’s the trick:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4,8,9\"><code markup=\"tt\">.image-container {\n  position: relative;\n  height: 200px;\n  clip-path: inset(0);\n}\n\n.image {\n  object-fit: cover;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}</code></pre>\n\n\n\n<p>Check it out in action:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWvYVwG\" src=\"//codepen.io/anon/embed/NWvYVwG?height=450&amp;theme-id=1&amp;slug-hash=NWvYVwG&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWvYVwG\" title=\"CodePen Embed NWvYVwG\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now, before we rush out and plaster this snippet everywhere, it has its own set of downsides. For example, the code feels <em>a bit lengthy</em> to me for such a simple effect. But, even more important is the fact that working with <code>clip-path</code> comes with some implications as well. For one, I can’t just slap a <code>border-radius: 10px;</code> in there like I did in the earlier example to round the image’s corners. That won’t work—it requires making rounded corners from the clipping path itself.</p>\n\n\n\n<p>Another example: I don’t know how to position the image <em>within</em> the <code>clip-path</code>. Again, this might be a matter of knowing <code>clip-path</code> really well and drawing it where you need to, or cropping the image itself ahead of time as needed.</p>\n\n\n\n<h3>Is there something better?</h3>\n\n\n\n<p>Personally, I gave up on using the fixed scrolling effect on inline images and am back to using a CSS background image—which I know is kind of limiting.</p>\n\n\n\n<p>Have you ever tried pulling this off, particularly with an inline image, and managed it well? I’d love to hear!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-search-for-a-fixed-background-effect-with-inline-images/\">The Search For a Fixed Background Effect With Inline Images</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/the-search-for-a-fixed-background-effect-with-inline-images/feed/</wfw:commentRss>\n\t\t\t<slash:comments>12</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">358917</post-id>\t</item>\n\t\t<item>\n\t\t<title>Notes on Josh Comeau&#8217;s Custom CSS Reset</title>\n\t\t<link>https://css-tricks.com/notes-on-josh-comeaus-custom-css-reset/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/notes-on-josh-comeaus-custom-css-reset/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Wed, 05 Jan 2022 21:22:45 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[reset]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=359736</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>We recently talked with Elad Shechter on <a href=\"https://css-tricks.com/an-interview-with-elad-shechter-on-the-new-css-reset/\">his new CSS reset</a>, and shortly after that Josh Comeau <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/\" rel=\"noopener\">blogged his</a>. </p>\n<p>We&#8217;re in something of a new era of CSS resets where&#8230; you kind of don&#8217;t need one? There isn&#8217;t &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/notes-on-josh-comeaus-custom-css-reset/\">Notes on Josh Comeau&#8217;s Custom CSS Reset</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>We recently talked with Elad Shechter on <a href=\"https://css-tricks.com/an-interview-with-elad-shechter-on-the-new-css-reset/\">his new CSS reset</a>, and shortly after that Josh Comeau <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/\" rel=\"noopener\">blogged his</a>. </p>\n\n\n\n<p>We&#8217;re in something of a new era of CSS resets where&#8230; you kind of don&#8217;t need one? There isn&#8217;t <em>that</em> many major differences between browsers on default styling, and by the time you&#8217;re off and running styling stuff, you&#8217;ve probably steamrolled things into place. And so perhaps &#8220;modern&#8221; CSS resets are more of a collection of opinionated default styles that do useful things that you want on all your new projects because, well, that&#8217;s how you roll. </p>\n\n\n\n<span id=\"more-359736\"></span>\n\n\n\n<p>Looking through Josh&#8217;s choices, that&#8217;s what it seems like to me: a collection of things that aren&#8217;t particularly opinionated about design, but <em>assist</em> the design by being things that pretty much any project will want.</p>\n\n\n\n<p>I&#8217;m gonna <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/#the-css-reset\" rel=\"noopener\">go through it</a> and toss out &#x1f525; flamin&#8217; hot opinions. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">*, *::before, *::after {\n  box-sizing: border-box;\n}</code></pre>\n\n\n\n<p>Heck yes. We used to consider this <a href=\"https://css-tricks.com/international-box-sizing-awareness-day/\">a global holiday</a> &#8217;round here. Although, with more and more layout being handled by grid and flexbox, I&#8217;m feeling like this is slightly less useful these days. When you&#8217;re setting up a layout with <code>fr</code> units and flexin&#8217; stuff, the <code>box-sizing</code> model doesn&#8217;t come into play all that much, even when <code>padding</code> and <code>border</code> are involved. But hey, I still prefer it to be in place. I do think if it goes into a CSS reset it should <a href=\"https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/\">use the inheritance model</a> though, as it&#8217;s easier to undo on a component that way. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">* {\n  margin: 0;\n}</code></pre>\n\n\n\n<p>This is basically why the CSS-Tricks logo &#8220;star&#8221; exists. I used to love this little snippet in my CSS resets. There was a period where it started to feel heavy-handed, but I think I&#8217;m back to liking it. I like how explicit you have to be when applying any margin at all. Personally, I&#8217;d rock <code>padding: 0;</code> too, as list elements tend to have some padding pushing them around. If you&#8217;re nuking spacing stuff, may as well nuke it all.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html, body {\n  height: 100%;\n}</code></pre>\n\n\n\n<p>Probably a good plan. Josh says &#8220;Allow percentage-based heights in the application,&#8221; which I can&#8217;t say comes up much in my day-today, but what it does is stuff like the body background not filling the space the way you might expect it to.</p>\n\n\n\n<p>Too bad <code>body { height: 100vh; }</code> isn&#8217;t enough here, but I feel like that&#8217;s not as reliable for some reason I can&#8217;t think of right now. <a href=\"https://css-tricks.com/css-fix-for-100vh-in-mobile-webkit/\">Maybe something to do with the footer navigation in iOS Safari?</a></p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}</code></pre>\n\n\n\n<p>I can&#8217;t get into the <code>-webkit-font-smoothing: antialiased;</code> thing. I think it tends to make type dramatically thin and I don&#8217;t love it. I don&#8217;t mind it as a tool, but I wouldn&#8217;t globally apply it on all my projects. </p>\n\n\n\n<p>I also generally like to put global typographic <em>sizing</em> stuff on the <code>html</code> selector instead, just because the &#8220;root&#8221; part of <code>rem</code> implies the <code>&lt;html&gt;</code> element — not the <code>&lt;body&gt;</code> — and I like sizing stuff in <code>rem</code> and then adjusting the root <code>font-size</code> at the root level in media queries.</p>\n\n\n\n<p>That <code>1.5</code> value feels like a good default <code>line-height</code> (more of a 1.4 guy myself, but I&#8217;d rather go up than down). But as soon as it&#8217;s set, I feel magnetically pulled into reducing it for heading elements where it&#8217;s <em>always</em> too much. That could happen via <code>h1, h2, h3</code> kinda selectors (maybe <code>h4</code>&#8211;<code>h6</code> don&#8217;t need it), but Josh has <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/#digit-tweaking-line-height\" rel=\"noopener\">some CSS trickery at work</a> with this snippet that didn&#8217;t make it into the final reset:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">* {\n  line-height: calc(1em + 0.5rem);\n}</code></pre>\n\n\n\n<p>That&#8217;s clever in how the <code>0.5rem</code> goes a long way for small type, but isn&#8217;t as big of an influence for large type. I could see trying that on a greenfield project. Prior art here is by Jesús Ricarte in <a href=\"https://kittygiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/\" rel=\"noopener\">&#8220;Using calc to figure out optimal line-height.&#8221;</a> </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">img, picture, video, canvas, svg {\n  display: block;\n  max-width: 100%;\n}</code></pre>\n\n\n\n<p>Good move for a CSS reset. The <code>block</code> display type there prevents those annoying <code>line-height</code> gaps that always kill me. And you almost never want any of these media blocks to be wider than the parent. I somehow don&#8217;t think <code>picture</code> is necessary, though, as it&#8217;s not really a style-able block? Could be wrong. I&#8217;d probably toss <code>iframe</code> and <code>object</code> in there as well.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">p, h1, h2, h3, h4, h5, h6 {\n  overflow-wrap: break-word;\n}</code></pre>\n\n\n\n<p>Good move for sure. It&#8217;s bad news when a long word (<a href=\"https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/\">like a URL</a>) forces an element wide and borks a layout. I tend to chuck this on something — like <code>article</code> or <code>.text-content</code> or something — and let it cascade into that whole area (which would also catch text that happens to be contained in an improper element), but I don&#8217;t mind seeing it on specific text elements.</p>\n\n\n\n<p>If doing that, you probably wanna chuck <code>li, dl, dt, blockquote</code> on that chain. Despite having attempted to research this several times (<a href=\"https://codepen.io/chriscoyier/pen/qoLLpN\" rel=\"noopener\">here&#8217;s a playground</a>), I still don&#8217;t 100% know what the right cocktail of line-wrapping properties is best to use. There is <code>word-break: break-word;</code> that I think is basically the same thing. And I think it&#8217;s generally best to use <code>hyphens: auto;</code> too&#8230; right??</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#root, #__next {\n  isolation: isolate;\n}</code></pre>\n\n\n\n<p>I don&#8217;t quite understand what&#8217;s happening here. I get that this is a React/Next thing where you mount the app to these roots, and I get that it makes a stacking context, I just don&#8217;t get why it&#8217;s specifically useful to <em>have</em> that stacking context at this level. At the same time, I also don&#8217;t see any particular problem with it.</p>\n\n\n\n<p>All in all — pretty cool! I always enjoy seeing what other people use (and go so far as to suggest) for CSS resets.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/notes-on-josh-comeaus-custom-css-reset/\">Notes on Josh Comeau&#8217;s Custom CSS Reset</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/notes-on-josh-comeaus-custom-css-reset/feed/</wfw:commentRss>\n\t\t\t<slash:comments>8</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">359736</post-id>\t</item>\n\t\t<item>\n\t\t<title>How to Make a Component That Supports Multiple Frameworks in a Monorepo</title>\n\t\t<link>https://css-tricks.com/make-a-component-multiple-frameworks-in-a-monorepo/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/make-a-component-multiple-frameworks-in-a-monorepo/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Rob Levin]]></dc:creator>\n\t\t<pubDate>Wed, 05 Jan 2022 15:42:59 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[angular]]></category>\n\t\t<category><![CDATA[components]]></category>\n\t\t<category><![CDATA[framework]]></category>\n\t\t<category><![CDATA[monorepo]]></category>\n\t\t<category><![CDATA[svelte]]></category>\n\t\t<category><![CDATA[vue]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=360239</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Your mission — should you decide to accept it — is to build a Button component in four frameworks, but, only use one <code>button.css</code> file!</p>\n<p>This idea is very important to me. I’ve been working on a component library called &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/make-a-component-multiple-frameworks-in-a-monorepo/\">How to Make a Component That Supports Multiple Frameworks in a Monorepo</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>Your mission — should you decide to accept it — is to build a Button component in four frameworks, but, only use one <code>button.css</code> file!</p>\n\n\n\n<p>This idea is very important to me. I’ve been working on a component library called <a href=\"https://agnosticui.com/\" rel=\"noopener\">AgnosticUI</a> where the purpose is building UI components that aren’t tied to any one particular JavaScript framework. AgnosticUI works in React, Vue 3, Angular, and Svelte. So that’s exactly what we’ll do today in this article: <strong>build a button component that works across all these frameworks.</strong></p>\n\n\n\n<span id=\"more-360239\"></span>\n\n\n\n<p class=\"is-style-explanation\">The source code for this article is <a href=\"https://github.com/roblevintennis/guest-posts/tree/the-little-button-that-could-series\" rel=\"noopener\">available on GitHub</a> on the <code>the-little-button-that-could-series</code> branch.</p>\n\n\n\n<h3>Table of contents</h3>\n\n\n\n<ul class=\"is-style-almanac-list\"><li><a href=\"#why-a-monorepo\">Why a monorepo?</a></li><li><a href=\"#setting-up\">Setting up</a></li><li><a href=\"#framework-specific-workspaces\">Framework-specific workspaces</a></li><li><a href=\"#what-have-we-just-done\">What have we just done?</a></li><li><a href=\"#finishing-touches\">Finishing touches</a></li><li><a href=\"#updating-each-component-to-take-a-mode-property\">Updating each component to take a&nbsp;<code>mode</code>&nbsp;property</a></li><li><a href=\"#code-complete\">Code complete</a></li><li><a href=\"#homework\">Homework</a></li><li><a href=\"#potential-pitfalls\">Potential pitfalls</a></li><li><a href=\"#conclusion\">Conclusion</a></li></ul>\n\n\n\n<h3>Why a monorepo?</h3>\n\n\n\n<p>We&#8217;re going to set up a tiny Yarn workspaces-based monorepo. Why? Chris actually has a <a href=\"https://css-tricks.com/monorepo/#advantages-of-the-monorepo-for-us\">nice outline of the benefits in another post</a>. But here’s my own biased list of benefits that I feel are relevant for our little buttons endeavor:</p>\n\n\n\n<h4>Coupling</h4>\n\n\n\n<p>We’re trying to build a single button component that uses just one <code>button.css</code> file across multiple frameworks. So, by nature, there’s some purposeful <a href=\"https://en.wikipedia.org/wiki/Coupling_(computer_programming)#:~:text=In%20software%20engineering%252C%20coupling%20is,of%20the%20relationships%20between%20modules.\" rel=\"noopener\">coupling</a> going on between the various framework implementations and the single-source-of-truth CSS file. A monorepo setup provides a convenient structure that facilitates copying our single <code>button.css</code> component into various framework-based projects.</p>\n\n\n\n<h4>Workflow</h4>\n\n\n\n<p>Let’s say the button needs a tweak — like the &#8220;focus-ring&#8221; implementation, or we screwed up the use of <code>aria</code> in the component templates. Ideally, we’d like to correct things in one place rather than making individual fixes in separate repositories.</p>\n\n\n\n<h4>Testing</h4>\n\n\n\n<p>We want the convenience of firing up all four button implementations at the same time for testing. As this sort of project grows, it’s safe to assume there will be more proper testing. In AgnosticUI, for example, I&#8217;m currently using Storybook and often kick off all the framework Storybooks, or run snapshot testing across the entire monorepo.</p>\n\n\n\n<p>I like what <a href=\"https://leoloso.com/\" rel=\"noopener\">Leonardo Losoviz</a> has to say <a href=\"https://css-tricks.com/from-a-single-repo-to-multi-repos-to-monorepo-to-multi-monorepo/#issues-with-the-monorepo\">about the monorepo approach</a>. (And it just so happens to align with with everything we’ve talked about so far.)</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>I believe the monorepo is particularly useful when all packages are coded in the same programming language, tightly coupled, and relying on the same tooling.</p></blockquote>\n\n\n\n<h3>Setting up</h3>\n\n\n\n<p>Time to dive into code — start by creating a top-level directory on the command-line to house the project and then <code>cd</code> into it. (Can’t think of a name? <code>mkdir buttons &amp;&amp; cd buttons</code> will work fine.)</p>\n\n\n\n<p>First off, let’s initialize the project:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$ yarn init\nyarn init v1.22.15\nquestion name (articles): littlebutton\nquestion version (1.0.0): \nquestion description: my little button project\nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json</code></pre>\n\n\n\n<p>That gives us a <code>package.json</code> file with something like this:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"my little button project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\"\n}</code></pre>\n\n\n\n<h4>Creating the baseline workspace</h4>\n\n\n\n<p>We can set the first one up with this command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">mkdir -p ./littlebutton-css</code></pre>\n\n\n\n<p>Next, we need to add the two following lines to the monorepo’s top-level <code>package.json</code> file so that we keep the monorepo itself private. It also declares our workspaces:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// ...\n\"private\": true,\n\"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\", \"littlebutton-css\"]</code></pre>\n\n\n\n<p>Now descend into the <code>littlebutton-css</code> directory. We&#8217;ll again want to generate a <code>package.json</code> with <code>yarn init</code>. Since we&#8217;ve named our directory <code>littlebutton-css</code> (the same as how we specified it in our <code>workspaces</code> in <code>package.json</code>) we can simply hit the <code>Return</code> key and accept all the prompts:</p>\n\n\n\n<pre rel=\"Teminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$ cd ./littlebutton-css &amp;&amp; yarn init\nyarn init v1.22.15\nquestion name (littlebutton-css): \nquestion version (1.0.0): \nquestion description: \nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json</code></pre>\n\n\n\n<p>At this point, the directory structure should look like this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">├── littlebutton-css\n│   └── package.json\n└── package.json</code></pre>\n\n\n\n<p>We&#8217;ve only created the CSS package workspace at this point as we&#8217;ll be generating our framework implementations with tools like <code>vite</code> which, in turn, generate a <code>package.json</code> and project directory for you. We will have to remember that the name we choose for these generated projects must match the name we’ve specified in the <code>package.json</code> for our earlier <code>workspaces</code> to work.</p>\n\n\n\n<h4>Baseline HTML &amp; CSS</h4>\n\n\n\n<p>Let&#8217;s stay in the <code>./littlebutton-css</code> workspace and create our simple button component using vanilla HTML and CSS files.</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">touch index.html ./css/button.css</code></pre>\n\n\n\n<p>Now our project directory should look like this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">littlebutton-css\n├── css\n│   └── button.css\n├── index.html\n└── package.json</code></pre>\n\n\n\n<p>Let&#8217;s go ahead and connect some dots with some boilerplate HTML in <code>./index.html</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!doctype html>\n&lt;html lang=\"en\">\n&lt;head>\n  &lt;meta charset=\"utf-8\">\n  &lt;title>The Little Button That Could&lt;/title>\n  &lt;meta name=\"description\" content=\"\">\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  &lt;link rel=\"stylesheet\" href=\"css/button.css\">\n&lt;/head>\n&lt;body>\n  &lt;main>\n    &lt;button class=\"btn\">Go&lt;/button>\n  &lt;/main>\n&lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>And, just so we have something visual to test, we can add a little color in <code>./css/button.css</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  color: hotpink;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"612\" height=\"487\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640956693026_image.png?resize=612%2C487&#038;ssl=1\" alt=\"A mostly unstyled button with hot-pink text from the monorepo framework.\" class=\"wp-image-360244\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640956693026_image.png?w=612&amp;ssl=1 612w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640956693026_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now open up that <code>index.html</code> page in the browser. If you see an ugly generic button with <code>hotpink</code> text&#8230; success!</p>\n\n\n\n<h3>Framework-specific workspaces</h3>\n\n\n\n<p>So what we just accomplished is the baseline for our button component. What we want to do now is abstract it a bit so it’s extensible for other frameworks and such. For example, what if we want to use the button in a React project? We’re going to need workspaces in our monorepo for each one. We’ll start with React, then follow suit for Vue 3, Angular, and Svelte.</p>\n\n\n\n<h4>React</h4>\n\n\n\n<p>We&#8217;re going to generate our React project using <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">vite</a>, a very lightweight and blazingly fast builder. Be forewarned that if you attempt to do this with <code>create-react-app</code>, there&#8217;s a very good chance you will run into conflicts later with <code>react-scripts</code> and conflicting webpack or Babel configurations from other frameworks, like Angular.</p>\n\n\n\n<p>To get our React workspace going, let’s go back into the terminal and <code>cd</code> back up to the top-level directory. From there, we’ll use <code>vite</code> to initialize a new project — let’s call it <code>littlebutton-react</code> — and, of course, we’ll select <code>react</code> as the framework and variant at the prompts:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$ yarn create vite\nyarn create v1.22.15\n[1/4] &#x1f50d;  Resolving packages...\n[2/4] &#x1f69a;  Fetching packages...\n[3/4] &#x1f517;  Linking dependencies...\n[4/4] &#x1f528;  Building fresh packages...\n\nsuccess Installed \"create-vite@2.6.6\" with binaries:\n      - create-vite\n      - cva\n&#x2714; Project name: … littlebutton-react\n&#x2714; Select a framework: › react\n&#x2714; Select a variant: › react\n\nScaffolding project in /Users/roblevin/workspace/opensource/guest-posts/articles/littlebutton-react...\n\nDone. Now run:\n\n  cd littlebutton-react\n  yarn\n  yarn dev\n\n&#x2728;  Done in 17.90s.</code></pre>\n\n\n\n<p>We initialize the React app with these commands next:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">cd littlebutton-react\nyarn\nyarn dev</code></pre>\n\n\n\n<p>With React installed and verified, let&#8217;s replace the contents of <code>src/App.jsx</code> to house our button with the following code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"./App.css\";\n\nconst Button = () => {\n  return &lt;button>Go&lt;/button>;\n};\n\nfunction App() {\n  return (\n    &lt;div className=\"App\">\n      &lt;Button />\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Now we&#8217;re going to write a small Node script that copies our <code>littlebutton-css/css/button.css</code> right into our React application for us. This step is probably the most interesting one to me because it&#8217;s both magical and ugly at the same time. It&#8217;s magical because it means our React button component is truly deriving its styles from the same CSS written in the baseline project. It&#8217;s ugly because, well, we are reaching up out of one workspace and grabbing a file from another. ¯\\_(ツ)_/¯</p>\n\n\n\n<p>Add the following little Node script to <code>littlebutton-react/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/button.css\", css, \"utf8\");</code></pre>\n\n\n\n<p>Let&#8217;s place a <code>node</code> command to run that in a <code>package.json</code> script that happens before the <code>dev</code> script in <code>littlebutton-react/package.json</code>. We&#8217;ll add a <code>syncStyles</code> and update the <code>dev</code> to call <code>syncStyles</code> before <code>vite</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles &amp;&amp; vite\",</code></pre>\n\n\n\n<p>Now, anytime we fire up our React application with <code>yarn dev</code>, we&#8217;ll first be copying the CSS file over. In essence, we&#8217;re &#8220;forcing&#8221; ourselves to not diverge from the CSS package&#8217;s <code>button.css</code> in our React button.</p>\n\n\n\n<p>But we want to also leverage <a href=\"https://github.com/css-modules/css-modules\" rel=\"noopener\">CSS Modules</a> to prevent name collisions and global CSS leakage, so we have one more step to do to get that wired up (from the same <code>littlebutton-react</code> directory):</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">touch src/button.module.css</code></pre>\n\n\n\n<p>Next, add the following to the new <code>src/button.module.css</code> file:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  composes: btn from './button.css';\n}</code></pre>\n\n\n\n<p>I find <code>composes</code> (also known as <a href=\"https://github.com/css-modules/css-modules#composition\" rel=\"noopener\">composition</a>) to be one of the coolest features of CSS Modules. In a nutshell, we&#8217;re copying our HTML/CSS version of <code>button.css</code> over wholesale then composing from our one <code>.btn</code> style rule.</p>\n\n\n\n<p>With that, we can go back to our <code>src/App.jsx</code> and import the CSS Modules <code>styles</code> into our React component with this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = () => {\n  return &lt;button className={styles.btn}>Go&lt;/button>;\n};\n\nfunction App() {\n  return (\n    &lt;div className=\"App\">\n      &lt;Button />\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Whew! Let&#8217;s pause and try to run our React app again:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">yarn dev</code></pre>\n\n\n\n<p>If all went well, you should see that same generic button, but with <code>hotpink</code> text. Before we move on to the next framework, let&#8217;s move back up to our top-level monorepo directory and update its <code>package.json</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"toy project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\"],\n  \"scripts\": {\n    \"start:react\": \"yarn workspace littlebutton-react dev\"\n  }\n}</code></pre>\n\n\n\n<p>Run the <code>yarn</code> command from the top-level directory to get the monorepo-hoisted dependencies installed.</p>\n\n\n\n<p>The only change we’ve made to this <code>package.json</code> is a new <code>scripts</code> section with a single script to start the React app. By adding <code>start:react</code> we can now run <code>yarn start:react</code> from our top-level directory and it will fire up the project we just built in <code>./littlebutton-react</code> without the need for <code>cd</code>&#8216;ing — super convenient!</p>\n\n\n\n<p>We&#8217;ll tackle Vue and Svelte next. It turns out that we can take a pretty similar approach for these as they both use <a href=\"https://css-tricks.com/video-screencasts/182-babys-first-vue-sfc/\">single file components</a> (SFC). Basically, we get to mix HTML, CSS, and JavaScript all into one single file. Whether you like the SFC approach or not, it&#8217;s certainly adequate enough for building out presentational or primitive UI components.</p>\n\n\n\n<h4>Vue</h4>\n\n\n\n<p>Following the steps from <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">vite’s scaffolding docs</a> we&#8217;ll run the following command from the monorepo’s top-level directory to initialize a Vue app:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">yarn create vite littlebutton-vue --template vue</code></pre>\n\n\n\n<p>This generates scaffolding with some provided instructions to run the starter Vue app:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">cd littlebutton-vue\nyarn\nyarn dev</code></pre>\n\n\n\n<p>This should fire up a starter page in the browser with some heading like &#8220;Hello Vue 3 + Vite.&#8221; From here, we can update <code>src/App.vue</code> to:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template>\n  &lt;div id=\"app\">\n    &lt;Button class=\"btn\">Go&lt;/Button>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\nimport Button from './components/Button.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    Button\n  }\n}\n&lt;/script></code></pre>\n\n\n\n<p>And we&#8217;ll replace any <code>src/components/*</code> with <code>src/components/Button.vue</code>:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template>\n  &lt;button :class=\"classes\">&lt;slot />&lt;/button>\n&lt;/template>\n\n&lt;script>\nexport default {\n  name: 'Button',\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n      }\n    }\n  }\n}\n&lt;/script>\n\n&lt;style module>\n.btn {\n  color: slateblue;\n}\n&lt;/style></code></pre>\n\n\n\n<p>Let&#8217;s break this down a bit:</p>\n\n\n\n<ul><li><code>:class=\"classes\"</code> is using Vue&#8217;s binding to call the computed <code>classes</code> method.</li><li>The <code>classes</code> method, in turn, is utilizing <a href=\"https://vue-loader.vuejs.org/guide/css-modules.html#usage\" rel=\"noopener\">CSS Modules in Vue</a> with the <code>this.$style.btn</code> syntax which will use styles contained in a <code>&lt;style module&gt;</code> tag.</li></ul>\n\n\n\n<p>For now, we&#8217;re hardcoding <code>color: slateblue</code> simply to test that things are working properly within the component. Try firing up the app again with <code>yarn dev</code>. If you see the button with our declared test color, then it&#8217;s working!</p>\n\n\n\n<p>Now we&#8217;re going to write a Node script that copies our <code>littlebutton-css/css/button.css</code> into our <code>Button.vue</code> file similar to the one we did for the React implementation. As mentioned, this component is a SFC so we&#8217;re going to have to do this a little differently using a simple <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" rel=\"noopener\">regular expression</a>.</p>\n\n\n\n<p>Add the following little Node.js script to <code>littlebutton-vue/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst vue = fs.readFileSync(\"./src/components/Button.vue\", \"utf8\");\n// Take everything between the starting and closing style tag and replace\nconst styleRegex = /&lt;style module>([\\s\\S]*?)&lt;\\/style>/;\nlet withSynchronizedStyles = vue.replace(styleRegex, `&lt;style module>\\n${css}\\n&lt;/style>`);\nfs.writeFileSync(\"./src/components/Button.vue\", withSynchronizedStyles, \"utf8\");</code></pre>\n\n\n\n<p>There&#8217;s a bit more complexity in this script, but using <code>replace</code> to copy text between opening and closing <code>style</code> tags via regex isn&#8217;t too bad.</p>\n\n\n\n<p>Now let’s add the following two scripts to the <code>scripts</code> clause in the <code>littlebutton-vue/package.json</code> file:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles &amp;&amp; vite\",</code></pre>\n\n\n\n<p>Now run <code>yarn syncStyles</code> and look at <code>./src/components/Button.vue</code> again. You should see that our style module gets replaced with this:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style module>\n.btn {\n  color: hotpink;\n}\n&lt;/style></code></pre>\n\n\n\n<p>Run the Vue app again with <code>yarn dev</code> and verify you get the expected results — yes, a button with hotpink text. If so, we’re good to move on to the next framework workspace!</p>\n\n\n\n<h4>Svelte</h4>\n\n\n\n<p>Per the <a href=\"https://svelte.dev/\" rel=\"noopener\">Svelte docs</a>, we should kick off our <code>littlebutton-svelte</code> workspace with the following, starting from the monorepo&#8217;s top-level directory:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npx degit sveltejs/template littlebutton-svelte\ncd littlebutton-svelte\nyarn &amp;&amp; yarn dev</code></pre>\n\n\n\n<p>Confirm you can hit the &#8220;Hello World&#8221; start page at <code>http://localhost:5000</code>. Then, update <code>littlebutton-svelte/src/App.svelte</code>:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  import Button from './Button.svelte';\n&lt;/script>\n&lt;main>\n  &lt;Button>Go&lt;/Button>\n&lt;/main></code></pre>\n\n\n\n<p>Also, in <code>littlebutton-svelte/src/main.js</code>, we want to remove the <code>name</code> prop so it looks like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import App from './App.svelte';\n\nconst app = new App({\n  target: document.body\n});\n\nexport default app;</code></pre>\n\n\n\n<p>And finally, add <code>littlebutton-svelte/src/Button.svelte</code> with the following:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button class=\"btn\">\n  &lt;slot>&lt;/slot>\n&lt;/button>\n\n&lt;script>\n&lt;/script>\n\n&lt;style>\n  .btn {\n    color: saddlebrown;\n  }\n&lt;/style></code></pre>\n\n\n\n<p>One last thing: Svelte appears to name our app: <code>\"name\": \"svelte-app\"</code> in the <code>package.json</code>. Change that to <code>\"name\": \"littlebutton-svelte\"</code> so it&#8217;s consistent with the <code>workspaces</code> name in our top-level <code>package.json</code> file.</p>\n\n\n\n<p>Once again, we can copy our baseline <code>littlebutton-css/css/button.css</code> into our <code>Button.svelte</code>. As mentioned, this component is a SFC, so we&#8217;re going to have to do this using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" rel=\"noopener\">regular expression</a>. Add the following Node script to <code>littlebutton-svelte/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst svelte = fs.readFileSync(\"./src/Button.svelte\", \"utf8\");\nconst styleRegex = /&lt;style>([\\s\\S]*?)&lt;\\/style>/;\nlet withSynchronizedStyles = svelte.replace(styleRegex, `&lt;style>\\n${css}\\n&lt;/style>`);\nfs.writeFileSync(\"./src/Button.svelte\", withSynchronizedStyles, \"utf8\");</code></pre>\n\n\n\n<p>This is super similar to the copy script we used with Vue, isn&#8217;t it? We&#8217;ll add similar scripts to our <code>package.json</code> script:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"dev\": \"yarn syncStyles &amp;&amp; rollup -c -w\",\n\"syncStyles\": \"node copystyles.js\",</code></pre>\n\n\n\n<p>Now run <code>yarn syncStyles &amp;&amp; yarn dev</code>. If all is good, we once again should see a button with <code>hotpink</code> text.</p>\n\n\n\n<p>If this is starting to feel repetitive, all I have to say is <em>welcome to my world</em>. What I&#8217;m showing you here is essentially the same process I&#8217;ve been using to build my <a href=\"https://github.com/AgnosticUI/agnosticui\" rel=\"noopener\">AgnosticUI</a> project!</p>\n\n\n\n<h4>Angular</h4>\n\n\n\n<p>You probably know the drill by now. From the monorepo&#8217;s top-level directory, install Angular and <a href=\"https://angular.io/guide/setup-local\" rel=\"noopener\">create an Angular app</a>. If we were creating a full-blown UI library we&#8217;d likely use <code>ng generate library</code> or even <code><a href=\"https://nx.dev/l/a/tutorial/08-create-libs\" rel=\"noopener\">nx</a></code>. But to keep things as straightforward as possible we&#8217;ll set up a boilerplate Angular app as follows:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm install -g @angular/cli ### unless you already have installed\nng new littlebutton-angular ### choose no for routing and CSS\n? Would you like to add Angular routing? (y/N) N\n❯ CSS \n  SCSS   [ https://sass-lang.com/documentation/syntax#scss ] \n  Sass   [ https://sass-lang.com/documentation/syntax#the-indented-syntax ] \n  Less   [ http://lesscss.org ]\n\ncd littlebutton-angular &amp;&amp; ng serve --open</code></pre>\n\n\n\n<p>With the Angular setup confirmed, let&#8217;s update some files. <code>cd littlebutton-angular</code>, delete the <code>src/app/app.component.spec.ts</code> file, and add a button component in <code>src/components/button.component.ts</code>, like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Component } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {}</code></pre>\n\n\n\n<p>Add the following to <code>src/components/button.component.html</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button class=\"btn\">Go&lt;/button></code></pre>\n\n\n\n<p>And put this in the <code>src/components/button.component.css</code> file for testing:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  color: fuchsia;\n}</code></pre>\n\n\n\n<p>In <code>src/app/app.module.ts</code>:</p>\n\n\n\n<pre rel=\"TypeScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { ButtonComponent } from '../components/button.component';\n\n@NgModule({\n  declarations: [AppComponent, ButtonComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}</code></pre>\n\n\n\n<p>Next, replace <code>src/app/app.component.ts</code> with:</p>\n\n\n\n<pre rel=\"TypeScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {}</code></pre>\n\n\n\n<p>Then, replace <code>src/app/app.component.html</code> with:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;main>\n  &lt;little-button>Go&lt;/little-button>\n&lt;/main></code></pre>\n\n\n\n<p>With that, let&#8217;s run <code>yarn start</code> and verify our button with <code>fuchsia</code> text renders as expected.</p>\n\n\n\n<p>Again, we want to copy over the CSS from our baseline workspace. We can do that by adding this to <code>littlebutton-angular/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/components/button.component.css\", css, \"utf8\");</code></pre>\n\n\n\n<p>Angular is nice in that it uses <code><a href=\"https://angular.io/guide/view-encapsulation\" rel=\"noopener\">ViewEncapsulation</a></code> that defaults to to <code>emulate</code> which mimics, <a href=\"https://baldur.gitbook.io/angular/angular/angular-components-overview/view-encapsulation\" rel=\"noopener\">according to the docs</a>,</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>[&#8230;] the behavior of shadow DOM by preprocessing (and renaming) the CSS code to effectively scope the CSS to the component&#8217;s view.</p></blockquote>\n\n\n\n<p>This basically means we can literally copy over <code>button.css</code> and use it as-is.</p>\n\n\n\n<p>Finally, update the <code>package.json</code> file by adding these two lines in the <code>scripts</code> section:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"start\": \"yarn syncStyles &amp;&amp; ng serve\",\n\"syncStyles\": \"node copystyles.js\",</code></pre>\n\n\n\n<p>With that, we can now run <code>yarn start</code> once more and verify our button text color (which was <code>fuchsia</code>) is now <code>hotpink</code>.</p>\n\n\n\n<h3>What have we just done?</h3>\n\n\n\n<p>Let&#8217;s take a break from coding and think about the bigger picture and what we&#8217;ve just done. Basically, we&#8217;ve set up a system where any changes to our CSS package&#8217;s <code>button.css</code> will get copied over into all the framework implementations as a result of our <code>copystyles.js</code> Node scripts. Further, we&#8217;ve incorporated idiomatic conventions for each of the frameworks:</p>\n\n\n\n<ul><li><code>SFC</code> for Vue and Svelte</li><li><code>CSS Modules</code> for React (and Vue within the SFC <code>&lt;style module&gt;</code> setup)</li><li><code>ViewEncapsulation</code> for Angular</li></ul>\n\n\n\n<p>Of course I state the obvious that these aren&#8217;t the only ways to do CSS in each of the above frameworks (e.g. CSS-in-JS is a popular choice), but they are certainly accepted practices and are working quite well for our greater goal — to have a single CSS source of truth to drive all framework implementations.</p>\n\n\n\n<p>If, for example, our button was in use and our design team decided we wanted to change from <code>4px</code> to <code>3px</code> <code>border-radius</code>, we could update the one file, and any separate implementations would stay synced.</p>\n\n\n\n<p>This is compelling if you have a polyglot team of developers that enjoy working in multiple frameworks, or, say an offshore team (that&#8217;s 3× productive in Angular) that&#8217;s being tasked to build a back-office application, but your flagship product is built in React. Or, you&#8217;re building an interim admin console and you&#8217;d love to experiment with using Vue or Svelte. You get the picture.</p>\n\n\n\n<h3>Finishing touches</h3>\n\n\n\n<p>OK, so we have the monorepo architecture in a really good spot. But there’s a few things we can do to make it even more useful as far as the developer experience goes.</p>\n\n\n\n<h4>Better start scripts</h4>\n\n\n\n<p>Let&#8217;s move back up to our top-level monorepo directory and update its <code>package.json</code> <code>scripts</code> section with the following so we can kick any framework implementation without <code>cd</code>&#8216;ing:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// ...\n\"scripts\": {\n  \"start:react\": \"yarn workspace littlebutton-react dev\",\n  \"start:vue\": \"yarn workspace littlebutton-vue dev \",\n  \"start:svelte\": \"yarn workspace littlebutton-svelte dev\",\n  \"start:angular\": \"yarn workspace littlebutton-angular start\"\n},</code></pre>\n\n\n\n<h4>Better baseline styles</h4>\n\n\n\n<p>We can also provide a better set of baseline styles for the button so it starts from a nice, neutral place. Here’s what I did in the <code>littlebutton-css/css/button.css</code> file.</p>\n\n\n\n<details >\n  <summary>\n          View Full Snippet      </summary>\n  \n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  --button-dark: #333;\n  --button-line-height: 1.25rem;\n  --button-font-size: 1rem;\n  --button-light: #e9e9e9;\n  --button-transition-duration: 200ms;\n  --button-font-stack:\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    \"Segoe UI\",\n    Roboto,\n    Ubuntu,\n    \"Helvetica Neue\",\n    sans-serif;\n\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n  user-select: none;\n  appearance: none;\n  cursor: pointer;\n  box-sizing: border-box;\n  transition-property: all;\n  transition-duration: var(--button-transition-duration);\n  color: var(--button-dark);\n  background-color: var(--button-light);\n  border-color: var(--button-light);\n  border-style: solid;\n  border-width: 1px;\n  font-family: var(--button-font-stack);\n  font-weight: 400;\n  font-size: var(--button-font-size);\n  line-height: var(--button-line-height);\n  padding-block-start: 0.5rem;\n  padding-block-end: 0.5rem;\n  padding-inline-start: 0.75rem;\n  padding-inline-end: 0.75rem;\n  text-decoration: none;\n  text-align: center;\n}\n\n/* Respect users reduced motion preferences */\n@media (prefers-reduced-motion) {\n  .btn {\n    transition-duration: 0.001ms !important;\n  }\n}</code></pre>\n\n\n\n<p></p>\n\n\n</details>\n\n\n<p>Let’s test this out! Fire up each of the four framework implementations with the new and improved start scripts and confirm the styling changes are in effect.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"612\" height=\"487\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957723344_image.png?resize=612%2C487&#038;ssl=1\" alt=\"Neutral (gray) styled button from the monorepo framework\" class=\"wp-image-360271\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957723344_image.png?w=612&amp;ssl=1 612w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957723344_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>One CSS file update proliferated to four frameworks — pretty cool, eh!?</p>\n\n\n\n<h4>Set a primary mode</h4>\n\n\n\n<p>We&#8217;re going to add a <code>mode</code> prop to each of our button’s and implement <code>primary</code> mode next. A primary button could be any color but we&#8217;ll go with a shade of green for the background and white text. Again, in the baseline stylesheet:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  --button-primary: #14775d;\n  --button-primary-color: #fff;\n  /* ... */\n}</code></pre>\n\n\n\n<p>Then, just before the <code>@media (prefers-reduced-motion)</code> query, add the following <code>btn-primary</code> to the same baseline stylesheet:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn-primary {\n  background-color: var(--button-primary);\n  border-color: var(--button-primary);\n  color: var(--button-primary-color);\n}</code></pre>\n\n\n\n<p>There we go! Some developer conveniences and better baseline styles!</p>\n\n\n\n<h3>Updating each component to take a <code>mode</code> property</h3>\n\n\n\n<p>Now that we&#8217;ve added our new <code>primary</code> mode represented by the <code>.btn-primary</code> class, we want to sync the styles for all four framework implementations. So, let&#8217;s add some more <code>package.json</code> scripts to our top level <code>scripts</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"sync:react\": \"yarn workspace littlebutton-react syncStyles\",\n\"sync:vue\": \"yarn workspace littlebutton-vue syncStyles\",\n\"sync:svelte\": \"yarn workspace littlebutton-svelte syncStyles\",\n\"sync:angular\": \"yarn workspace littlebutton-angular syncStyles\"</code></pre>\n\n\n\n<p>Be sure to respect JSON&#8217;s comma rules! Depending on where you place these lines within your <code>scripts: {...}</code>, you’ll want to make sure there are no missing or trailing commas.</p>\n\n\n\n<p>Go ahead and run the following to fully synchronize the styles:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">yarn sync:angular &amp;&amp; yarn sync:react &amp;&amp; yarn sync:vue &amp;&amp; yarn sync:svelte</code></pre>\n\n\n\n<p>Running this doesn’t change anything because we haven&#8217;t applied the primary class yet, but you should at least see the CSS has been copied over if you go look at the framework&#8217;s button component CSS.</p>\n\n\n\n<h4>React</h4>\n\n\n\n<p>If you haven&#8217;t already, double-check that the updated CSS got copied over into <code>littlebutton-react/src/button.css</code>. If not, you can run <code>yarn syncStyles</code>. Note that if you forget to run <code>yarn syncStyles</code> our <code>dev</code> script will do this for us when we next start the application anyway:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"dev\": \"yarn syncStyles &amp;&amp; vite\",</code></pre>\n\n\n\n<p>For our React implementation, we additionally need to add a <em>composed</em> CSS Modules class in <code>littlebutton-react/src/button.module.css</code> that is composed from the new <code>.btn-primary</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btnPrimary {\n  composes: btn-primary from './button.css';\n}</code></pre>\n\n\n\n<p>We&#8217;ll also update <code>littlebutton-react/src/App.jsx</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = ({ mode }) => {\n  const primaryClass = mode ? styles[`btn${mode.charAt(0).toUpperCase()}${mode.slice(1)}`] : '';\n  const classes = primaryClass ? `${styles.btn} ${primaryClass}` : styles.btn;\n  return &lt;button className={classes}>Go&lt;/button>;\n};\n\nfunction App() {\n  return (\n    &lt;div className=\"App\">\n      &lt;Button mode=\"primary\" />\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Fire up the React app with <code>yarn start:react</code> from the top-level directory. If all goes well, you should now see your green primary button.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"612\" height=\"487\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957382007_image.png?resize=612%2C487&#038;ssl=1\" alt=\"A dark green button with white text positioning in the center of the screen.\" class=\"wp-image-360276\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957382007_image.png?w=612&amp;ssl=1 612w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957382007_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>As a note, I&#8217;m keeping the Button component in <code>App.jsx</code> for brevity. Feel free to tease out the Button component into its own file if that bothers you.</p>\n\n\n\n<h4>Vue</h4>\n\n\n\n<p>Again, double-check that the button styles were copied over and, if not, run <code>yarn syncStyles</code>.</p>\n\n\n\n<p>Next, make the following changes to the <code>&lt;script&gt;</code> section of <code>littlebutton-vue/src/components/Button.vue</code>:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\nexport default {\n  name: 'Button',\n  props: {\n    mode: {\n      type: String,\n      required: false,\n      default: '',\n      validator: (value) => {\n        const isValid = ['primary'].includes(value);\n        if (!isValid) {\n          console.warn(`Allowed types for Button are primary`);\n        }\n        return isValid;\n      },\n    }\n  },\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n        [this.$style['btn-primary']]: this.mode === 'primary',\n      }\n    }\n  }\n}\n&lt;/script></code></pre>\n\n\n\n<p>Now we can update the markup in <code>littlebutton-vue/src/App.vue</code> to use the new <code>mode</code> prop:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;Button mode=\"primary\">Go&lt;/Button></code></pre>\n\n\n\n<p>Now you can <code>yarn start:vue</code> from the top-level directory and check for the same green button.</p>\n\n\n\n<h4>Svelte</h4>\n\n\n\n<p>Let’s <code>cd</code> into <code>littlebutton-svelte</code> and verify that the styles in <code>littlebutton-svelte/src/Button.svelte</code> have the new <code>.btn-primary</code> class copied over, and <code>yarn syncStyles</code> if you need to. Again, the <code>dev</code> script will do that for us anyway on the next startup if you happen to forget.</p>\n\n\n\n<p>Next, update the Svelte template to pass the <code>mode</code> of <code>primary</code>. In <code>src/App.svelte</code>:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  import Button from './Button.svelte';\n&lt;/script>\n&lt;main>\n  &lt;Button mode=\"primary\">Go&lt;/Button>\n&lt;/main></code></pre>\n\n\n\n<p>We also need to update the top of our <code>src/Button.svelte</code> component itself to accept the <code>mode</code> prop and apply the CSS Modules class:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button class=\"{classes}\">\n  &lt;slot>&lt;/slot>\n&lt;/button>\n&lt;script>\n  export let mode = \"\";\n  const classes = [\n    \"btn\",\n    mode ? `btn-${mode}` : \"\",\n  ].filter(cls => cls.length).join(\" \");\n&lt;/script></code></pre>\n\n\n\n<p>Note that the <code>&lt;styles&gt;</code> section of our Svelte component shouldn’t be touched in this step.</p>\n\n\n\n<p>And now, you can <code>yarn dev</code> from <code>littlebutton-svelte</code> (or <code>yarn start:svelte</code> from a higher directory) to confirm the green button made it!</p>\n\n\n\n<h4>Angular</h4>\n\n\n\n<p>Same thing, different framework: check that the styles are copied over and run <code>yarn syncStyles</code> if needed.</p>\n\n\n\n<p>Let’s add the <code>mode</code> prop to the <code>littlebutton-angular/src/app/app.component.html</code> file:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;main>\n  &lt;little-button mode=\"primary\">Go&lt;/little-button>\n&lt;/main></code></pre>\n\n\n\n<p>Now we need to set up a binding to a <code>classes</code> getter to <code>compute</code> the correct classes based on if the <code>mode</code> was passed in to the component or not. Add this to <code>littlebutton-angular/src/components/button.component.html</code> (and note the binding is happening with the square brackets):</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button [class]=\"classes\">Go&lt;/button></code></pre>\n\n\n\n<p>Next, we actually need to create the <code>classes</code> binding in our component at <code>littlebutton-angular/src/components/button.component.ts</code>:</p>\n\n\n\n<pre rel=\"TypeScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {\n  @Input() mode: 'primary' | undefined = undefined;\n\n  public get classes(): string {\n    const modeClass = this.mode ? `btn-${this.mode}` : '';\n    return [\n      'btn',\n      modeClass,\n    ].filter(cl => cl.length).join(' ');\n  }\n}</code></pre>\n\n\n\n<p>We use the <code>Input</code> directive to take in the <code>mode</code> prop, then we create a <code>classes</code> accessor which adds the mode class if it’s been passed in.</p>\n\n\n\n<p>Fire it up and look for the green button!</p>\n\n\n\n<h3>Code complete</h3>\n\n\n\n<p>If you’ve made it this far, congratulations — you’ve reached code complete! If something went awry, I’d encourage you to cross-reference <a href=\"https://github.com/roblevintennis/guest-posts/tree/the-little-button-that-could-series\" rel=\"noopener\">the source code over at GitHub</a> on the <code>the-little-button-that-could-series</code> branch. As bundlers and packages have a tendency to change abruptly, you might want to pin your package versions to the ones in this branch if you happen to experience any dependency issues.</p>\n\n\n\n<p>Take a moment to go back and compare the four framework-based button component implementations we just built. They’re still small enough to quickly notice some interesting differences in how <em>props</em> get passed in, how we <em>bind</em> to props, and how CSS <em>name collisions</em> are prevented among other subtle differences. As I continue to add components to <a href=\"https://agnosticui.com/\" rel=\"noopener\">AgnosticUI</a> (which supports these exact same four frameworks), I’m continually pondering which offers the best developer experience. What do you think?</p>\n\n\n\n<h3>Homework</h3>\n\n\n\n<p>If you&#8217;re the type that likes to figure things out on your own or enjoys digging in deeper, here are ideas.</p>\n\n\n\n<h4>Button states</h4>\n\n\n\n<p>The current button styles do not account for various states, like <code>:hover</code>. I believe that&#8217;s a good first exercise.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* You should really implement the following states\n   but I will leave it as an exercise for you to \n   decide how to and what values to use.\n*/\n.btn:focus {\n  /* If you elect to remove the outline, replace it\n     with another proper affordance and research how\n     to use transparent outlines to support windows\n     high contrast\n  */\n}\n.btn:hover { }\n.btn:visited { }\n.btn:active { }\n.btn:disabled { }</code></pre>\n\n\n\n<h4>Variants</h4>\n\n\n\n<p>Most button libraries support many button variations for things like sizes, shapes, and colors. Try creating more than the <code>primary</code> mode we already have. Maybe a <code>secondary</code> variation? A <code>warning</code> or <code>success</code>? Maybe <code>filled</code> and <code>outline</code>? Again, you can look at AgnosticUI’s <a href=\"http://www.agnosticui.com/docs/components/buttons.html#examples\" rel=\"noopener\">buttons page</a> for ideas.</p>\n\n\n\n<h4>CSS custom properties</h4>\n\n\n\n<p>If you haven&#8217;t started using CSS custom properties yet, I&#8217;d strongly recommend it. You can start by having a look at AgnosticUI&#8217;s <a href=\"https://github.com/AgnosticUI/agnosticui/blob/master/agnostic-css/css-dist/common.concat.css\" rel=\"noopener\">common styles</a>. I heavily lean on custom properties in there. Here are some great articles that cover what custom properties are and how you might leverage them:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">A Complete Guide to Custom Properties</a></li><li><a href=\"https://css-tricks.com/a-dry-approach-to-color-themes-in-css/\">A DRY Approach to Color Themes in CSS</a></li></ul>\n\n\n\n<h4>Types</h4>\n\n\n\n<p>No&#8230; not typings, but the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type\" rel=\"noopener\"><code>&lt;button&gt;</code> element’s <code>type</code> attribute</a>. We didn’t cover that in our component but there’s an opportunity to extend the component to other use cases with valid types, like <code>button</code>, <code>submit</code>, and <code>reset</code>. This is pretty easy to do and will greatly improve the button’s API.</p>\n\n\n\n<h4>More ideas</h4>\n\n\n\n<p>Gosh, you could do so much — add linting, convert it to Typescript, audit the accessibility, etc.</p>\n\n\n\n<p>The current Svelte implementation is suffering from some pretty loose assumptions as we have no defense if the valid <code>primary</code> mode isn’t passed — that would produce a garbage CSS class:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">mode ? `btn-${mode}` : \"\",</code></pre>\n\n\n\n<p>You could say, &#8220;Well, <code>.btn-garbage</code> as a class isn’t exactly harmful.&#8221; But it’s probably a good idea to <a href=\"https://css-tricks.com/defensive-css/\">style defensively</a> when and where possible.</p>\n\n\n\n<h3>Potential pitfalls</h3>\n\n\n\n<p>There are some things you should be aware of before taking this approach further:</p>\n\n\n\n<ul><li>Positional CSS based on the structure of the markup will not work well for the CSS Modules based techniques used here.</li><li>Angular makes positional techniques even harder as it generates <a href=\"https://angular.io/guide/component-styles#host\" rel=\"noopener\"><code>:host</code> element</a> representing each component view. This means you have these extra elements in between your template or markup structure. You&#8217;ll need to work around that.</li><li>Copying styles across workspace packages is a bit of an anti-pattern to some folks. I justify it because I believe the benefits outweigh the costs; also, when I think about how monorepos use symlinks and (not-so-failproof) hoisting, I don&#8217;t feel so bad about this approach.</li><li>You’ll have to subscribe to the decoupled techniques used here, so no CSS-in-JS.</li></ul>\n\n\n\n<p>I believe that all approaches to software development have their pros and cons and you ultimately have to decide if sharing a single CSS file across frameworks works for you or your specific project. There are certainly other ways you could do this (e.g. using <code>littlebuttons-css</code> as an npm package dependency) if needed.</p>\n\n\n\n<h3>Conclusion</h3>\n\n\n\n<p>Hopefully I’ve whet your appetite and you’re now really intrigued to create UI component libraries and/or design systems that are not tied to a particular framework. Maybe you have a better idea on how to achieve this — I&#8217;d love to hear your thoughts in the comments!</p>\n\n\n\n<p>I&#8217;m sure you&#8217;ve seen the venerable <a href=\"https://todomvc.com\" rel=\"noopener\">TodoMVC</a> project and how many framework implementations have been created for it. Similarly, wouldn&#8217;t it be nice to have a UI component library of primitives available for many frameworks? <a href=\"https://open-ui.org/\" rel=\"noopener\">Open UI</a> is making great strides to properly standardize native UI component defaults, but I believe we’ll always need to insert ourselves to some extent. Certainly, taking a good year to build a custom design system is quickly falling out of favor and companies are seriously questioning their <abbr title=\"returns on investments\">ROI</abbr>. Some sort of scaffolding is required to make the endeavor practical.</p>\n\n\n\n<p>The vision of <a href=\"https://agnosticui.com/\" rel=\"noopener\">AgnosticUI</a> is to have a relatively agnostic way to build design systems quickly that are not tied down to a particular frontend framework. If you’re compelled to get involved, the project is still very early and approachable and I’d love some help! Plus, you’re already pretty familiar with the how the project works now that you’ve gone through this tutorial!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/make-a-component-multiple-frameworks-in-a-monorepo/\">How to Make a Component That Supports Multiple Frameworks in a Monorepo</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/make-a-component-multiple-frameworks-in-a-monorepo/feed/</wfw:commentRss>\n\t\t\t<slash:comments>3</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">360239</post-id>\t</item>\n\t\t<item>\n\t\t<title>Should CSS Override Default Browser Styles?</title>\n\t\t<link>https://css-tricks.com/should-css-override-default-styles/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/should-css-override-default-styles/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Tue, 04 Jan 2022 19:50:18 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[opinion]]></category>\n\t\t<category><![CDATA[user agent stylesheets]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=359880</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>CSS overrides can change the default look of almost anything:</p>\n<ul>\n<li>You can use CSS to <a href=\"https://css-tricks.com/zero-trickery-custom-radios-and-checkboxes/\">override what a checkbox or radio button</a> looks like, but if you don&#8217;t, the checkbox will look like a default checkbox on your operating system </li>\n</ul>\n<p>&#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/should-css-override-default-styles/\">Should CSS Override Default Browser Styles?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>CSS overrides can change the default look of almost anything:</p>\n\n\n\n<ul><li>You can use CSS to <a href=\"https://css-tricks.com/zero-trickery-custom-radios-and-checkboxes/\">override what a checkbox or radio button</a> looks like, but if you don&#8217;t, the checkbox will look like a default checkbox on your operating system and some would say that&#8217;s best for accessibility and usability.</li><li>You can use CSS to <a href=\"https://css-tricks.com/making-a-better-custom-select-element/\">override what a select menu</a> looks like, but if you don&#8217;t, the select will look like a default select menu on your operating system and some would say that&#8217;s best for accessibility and usability.</li><li>You can <a href=\"https://css-tricks.com/a-complete-guide-to-links-and-buttons/#links-heading-2\">override what anchor links look like</a>, but some would say they should be blue with underlines because that is the default and it&#8217;s best for accessibility and usability.</li><li>You can <a href=\"https://css-tricks.com/the-current-state-of-styling-scrollbars/\">override what scrollbars look like</a>, but if you don&#8217;t, the scrollbars will look (and behave) the way default scrollbars do on your operating system, and some would say that&#8217;s best for accessibility and usability. </li></ul>\n\n\n\n<p>It just goes on and on&#8230;</p>\n\n\n\n<span id=\"more-359880\"></span>\n\n\n\n<ul><li>You can <a href=\"https://css-tricks.com/a-complete-guide-to-links-and-buttons/#buttons-heading-2\">customize what a button looks like</a>, but&#8230;</li><li>You <a href=\"https://css-tricks.com/almanac/properties/c/cursor/\">can customize what the cursor looks like</a>, or particular elements on your site, but&#8230;</li><li>You can <a href=\"https://css-tricks.com/almanac/selectors/s/selection/\">change the text highlighting color</a>, you can <a href=\"https://css-tricks.com/almanac/properties/a/accent-color/\">change the accent color</a>, heck, soon you&#8217;ll be able to <a href=\"https://www.azabani.com/2021/12/16/spelling-grammar-2.html\" rel=\"noopener\">customize what spelling and grammer mistakes look like</a> in editable text areas, <em>but&#8230;</em></li></ul>\n\n\n\n<p>Where do you draw the line?</p>\n\n\n\n<p>In my experience, everyone has a different line. Nearly everybody styles their buttons. Nearly everybody styles their links, but some might only customize the hue of blue and leave the underline, drawing the line at more elaborate changes. It&#8217;s fairly popular to style form elements like checkboxes, radio buttons, and selects, but some people draw the line before that.</p>\n\n\n\n<p>Some people draw a line saying you should never change a default cursor, some push that line back to make the cursor into a pointer for created interactive elements, some push that line so far they are OK with custom images as cursors. Some people draw the line with scrollbars saying they should never be customized, while some people implement elaborate designs.</p>\n\n\n\n<p>CSS is a language for changing the design of websites. Every ruleset you write likely changes the defaults of something. The lines are relatively fuzzy, but I&#8217;d say there is nothing in CSS that should be outright banned from use — it&#8217;s more about the styling <em>choices</em> you make. So when you do choose to style something, it remains usable and accessible. Heck, <code>background-color</code> can be terribly abused making for inaccessible and unusable areas of a site, but nobody raises pitchforks over that.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/should-css-override-default-styles/\">Should CSS Override Default Browser Styles?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/should-css-override-default-styles/feed/</wfw:commentRss>\n\t\t\t<slash:comments>8</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">359880</post-id>\t</item>\n\t\t<item>\n\t\t<title>CSS Underlines Are Too Thin and Too Low in Chrome</title>\n\t\t<link>https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Šime Vidas]]></dc:creator>\n\t\t<pubDate>Tue, 04 Jan 2022 15:30:18 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[chrome]]></category>\n\t\t<category><![CDATA[links]]></category>\n\t\t<category><![CDATA[text-decoration]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=359838</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>I’ve encountered two bugs in Chrome while testing the new CSS <code>text-decoration-thickness</code> and <code>text-underline-offset</code> properties, and I want to share them with you here in this article.</p>\n<p>But first, let&#8217;s acknowledge one thing:</p>\n<p>Default underlines are inconsistent</p>\n<p>Let’s add a &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/\">CSS Underlines Are Too Thin and Too Low in Chrome</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>I’ve encountered two bugs in Chrome while testing the new CSS <code>text-decoration-thickness</code> and <code>text-underline-offset</code> properties, and I want to share them with you here in this article.</p>\n\n\n\n<p>But first, let&#8217;s acknowledge one thing:</p>\n\n\n\n<span id=\"more-359838\"></span>\n\n\n\n<h3>Default underlines are inconsistent</h3>\n\n\n\n<p>Let’s add a text link to a plain web page, set its <code>font-family</code> to Arial, and compare the underlines across browsers and operating systems.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2018\" height=\"944\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=2018%2C944&#038;ssl=1\" alt=\"\" class=\"wp-image-359839\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?w=2018&amp;ssl=1 2018w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=300%2C140&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=1024%2C479&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=768%2C359&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=1536%2C719&amp;ssl=1 1536w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=1000%2C468&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>From left to right: Chrome, Safari, and Firefox on macOS; Safari on iOS; Chrome, and Firefox on Windows; Chrome, and Firefox on Android.</figcaption></figure>\n\n\n\n<p>As you can see, the default underline is inconsistent across browsers. Each browser chooses their own default thickness and vertical position (offset from the baseline) for the underline. This is in line with the <a href=\"https://drafts.csswg.org/css-text-decor-4/\" rel=\"noopener\">CSS Text Decoration module</a>, which specifies the following default behavior (<code>auto</code> value):</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The user agent chooses an appropriate thickness for text decoration lines. […] The user agent chooses an appropriate offset for underlines.</p><p></p></blockquote>\n\n\n\n<h3>Luckily, we can override the browsers’ defaults</h3>\n\n\n\n<p>There are two new, <a href=\"https://caniuse.com/mdn-css_properties_text-decoration-thickness,mdn-css_properties_text-underline-offset\" rel=\"noopener\">widely supported</a> CSS properties that allow us to precisely define the thickness and offset for our underlines:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/almanac/properties/t/text-decoration-thickness/\"><code>text-decoration-thickness</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/t/text-underline-offset/\"><code>text-underline-offset</code></a></li></ul>\n\n\n\n<p>With these properties, we can create consistent underlines even across two very different browsers, such as the Gecko-based Firefox on Android and the WebKit-based Safari on macOS.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\n  text-decoration: underline;\n  text-decoration-thickness: 0.04em;\n  text-underline-offset: 0.03em;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2016\" height=\"1426\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=2016%2C1426&#038;ssl=1\" alt=\"\" class=\"wp-image-359840\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?w=2016&amp;ssl=1 2016w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=300%2C212&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=1024%2C724&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=768%2C543&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=1536%2C1086&amp;ssl=1 1536w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=1000%2C707&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Top row: the browsers’ default underlines; bottom row: consistent underlines with CSS. (<a href=\"https://codepen.io/simevidas/pen/poWPBoX?editors=1100\" rel=\"noopener\">Demo</a>)</figcaption></figure>\n\n\n\n<p class=\"is-style-explanation\"><strong>Note:</strong> The <code>text-decoration-thickness</code> property also has a special <a href=\"https://drafts.csswg.org/css-text-decor-4/#valdef-text-decoration-thickness-from-font\" rel=\"noopener\"><code>from-font</code> value</a> that instructs browsers to use the font’s own preferred underline width, if available. I <a href=\"https://twitter.com/simevidas/status/1469790544335450112\" rel=\"noopener\">tested</a> this value with a few different fonts, but the underlines were inconsistent.</p>\n\n\n\n<p>OK, so let&#8217;s move on to the two Chrome bugs I noted earlier.</p>\n\n\n\n<h3>Chrome bug 1: Underlines are too thin on macOS</h3>\n\n\n\n<p>If you set the <code>text-decoration-thickness</code> property to a font-relative length value that computes to a non-integer pixel value, Chrome will “floor” that value instead of rounding it to the nearest integer. For example, if the declared thickness is <code>0.06em</code>, and that computes to <code>1.92px</code>, Chrome will paint a thickness of <code>1px</code> instead of <code>2px</code>. This issue is limited to macOS.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  font-size: 2em; /* computes to 32px */\n  text-decoration-thickness: 0.06em; /* computes to 1.92px */\n}</code></pre>\n\n\n\n<p>In the following screenshot, notice how the text decoration lines are twice as thin in Chrome (third row) than in Safari and Firefox.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1042\" height=\"462\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=1042%2C462&#038;ssl=1\" alt=\"\" class=\"wp-image-359843\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?w=1042&amp;ssl=1 1042w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=300%2C133&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=1024%2C454&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=768%2C341&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=1000%2C443&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>From top to bottom: Safari, Firefox, and Chrome on macOS. (<a href=\"https://codepen.io/simevidas/pen/qBPjavx?editors=1100\" rel=\"noopener\">Demo</a>)</figcaption></figure>\n\n\n\n<p class=\"is-style-default\">For more information about this bug, see <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1255280\" rel=\"noopener\">Chromium issue #1255280</a>.</p>\n\n\n\n<h3>Chrome bug 2: Underlines are too low</h3>\n\n\n\n<p>The <code>text-underline-offset</code> property allows us to precisely set the distance between the alphabetic baseline and the underline (the underline’s offset from the baseline). Unfortunately, this feature is currently not implemented correctly in Chrome and, as a result, the underline is positioned too low.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\n  text-decoration: underline;\n  text-decoration-color: #f707;\n\n  /* disable “skip ink” */\n  -webkit-text-decoration-skip: none; /* Safari */\n  text-decoration-skip-ink: none;\n\n  /* cover the entire descender */\n  text-decoration-thickness: 0.175em; /* descender height */\n  text-underline-offset: 0; /* no offset from baseline */\n}</code></pre>\n\n\n\n<p>Because of this bug, it is not possible to move the underline all the way up to the baseline in Chrome.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1316\" height=\"425\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=1316%2C425&#038;ssl=1\" alt=\"\" class=\"wp-image-359846\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?w=1316&amp;ssl=1 1316w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=300%2C97&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=1024%2C331&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=768%2C248&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=1000%2C323&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>From left to right: Safari, Firefox, and Chrome on macOS. View this demo <a href=\"https://codepen.io/simevidas/pen/QWqgVKo?editors=0100\" rel=\"noopener\">on CodePen</a>.</figcaption></figure>\n\n\n\n<p>For more information about this bug, see <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1172623\" rel=\"noopener\">Chromium issue #1172623</a>.</p>\n\n\n\n<p class=\"is-style-explanation\"><strong>Note:</strong> As you might have noticed from the image above, Safari draws underlines on top of descenders instead of beneath them. This is a <a href=\"https://bugs.webkit.org/show_bug.cgi?id=227445\" rel=\"noopener\">WebKit bug</a> that was fixed very recently. The fix should ship in the next version of Safari.</p>\n\n\n\n<h3>Help prioritize the Chrome bugs</h3>\n\n\n\n<p>The two new CSS properties for styling underlines are a welcome addition to CSS. Hopefully, the two related Chrome bugs will be fixed sooner rather than later. If these CSS features are important to you, make your voice heard by starring the bugs in Chromium’s bug tracker.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2000\" height=\"872\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=2000%2C872&#038;ssl=1\" alt=\"\" class=\"wp-image-359848\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=300%2C131&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=1024%2C446&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=768%2C335&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=1536%2C670&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=1000%2C436&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Sign in with your Google account and click the star button on issues <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1172623\" rel=\"noopener\">#1172623</a> and <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1255280\" rel=\"noopener\">#1255280</a>.</figcaption></figure>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/\">CSS Underlines Are Too Thin and Too Low in Chrome</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/feed/</wfw:commentRss>\n\t\t\t<slash:comments>3</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">359838</post-id>\t</item>\n\t\t<item>\n\t\t<title>Jetpack Features We Love and Use at CSS-Tricks</title>\n\t\t<link>https://css-tricks.com/jetpack-features-we-love-and-use-at-css-tricks/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/jetpack-features-we-love-and-use-at-css-tricks/#respond</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Tue, 04 Jan 2022 15:28:03 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[Sponsored]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=360452</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>We use and love <a href=\"https://jetpack.com/?aff=8638\" rel=\"noopener\">Jetpack</a> around here. It&#8217;s a WordPress plugin that brings a whole suite of functionality to your site ranging from security to marketing with lots of ridiculously useful stuff in between! &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/jetpack-features-we-love-and-use-at-css-tricks/\">Jetpack Features We Love and Use at CSS-Tricks</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p><meta charset=\"utf-8\">We use and love <a href=\"https://jetpack.com/?aff=8638\" rel=\"noopener\">Jetpack</a> around here. It&#8217;s a WordPress plugin that brings a whole suite of functionality to your site ranging from security to marketing with lots of ridiculously useful stuff in between! Here&#8217;s our favorite features around&nbsp;here.</p>\n\n\n\n<span id=\"more-360452\"></span>\n\n\n\n<div class=\"wp-block-columns ticss-ddea03eb\">\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-30791cf4 jetpack-box\"><div class=\"wp-block-group__inner-container\">\n<h2 id=\"h-powerful-search\">Powerful Search</h2>\n\n\n\n<p>Jetpack&#8217;s Search feature gives your site an incredibly powerful search engine with the flip of a switch. You get a very fast, truly <strong>intelligent search</strong> for your entire site that is easily sortable and filterable with <a href=\"https://css-tricks.com/jetpack-instant-search/\">literally zero work on your part</a>. You can&#8217;t rely on default WordPress search — this is a must-have. Bonus: it&#8217;s all handled offsite, so there is minimal burden on your server.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2700\" height=\"2278\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=2700%2C2278&#038;ssl=1\" alt=\"Showing the full-page JetPack search feature.\" class=\"wp-image-360439\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?w=2700&amp;ssl=1 2700w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=300%2C253&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=1024%2C864&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=768%2C648&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=1536%2C1296&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=2048%2C1728&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=1000%2C844&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/search/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-634991b5 jetpack-box\"><div class=\"wp-block-group__inner-container\">\n<h2 id=\"h-backups-activity\">Backups &amp; Activity</h2>\n\n\n\n<p>We sleep easy knowing CSS-Tricks is entirely backed up in <strong>real-time</strong>. Everything is backed up from the site&#8217;s content, comments, settings, theme files, media, even WordPress itself. </p>\n\n\n\n<p>An activity log shows off everything that happens on the site, and I use that same log to restore the site to any point in time.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1790\" height=\"1942\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=1790%2C1942&#038;ssl=1\" alt=\"Showing a timeline log of site changes in Jetpack Backup.\" class=\"wp-image-306950\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?w=1790&amp;ssl=1 1790w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=277%2C300&amp;ssl=1 277w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=944%2C1024&amp;ssl=1 944w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=768%2C833&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=1416%2C1536&amp;ssl=1 1416w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=1000%2C1085&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/upgrade/backup/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns ticss-2cedae8d\">\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-335c9a47 jetpack-box\"><div class=\"wp-block-group__inner-container\">\n<h2 id=\"h-image-handling\">Performant Media </h2>\n\n\n\n<p>There are at least four things you have to do with images on websites to make sure you&#8217;re serving them in a performance responsible way: (1) use the responsive images syntax to serve an appropriately sized version, (2) optimize the image, (3) lazy load the image, and (4) serve the image from a CDN. Fortunately, WordPress itself helps with #1, which can be tricky. Jetpack helps with the others with the flip of a switch.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1394\" height=\"584\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=1394%2C584&#038;ssl=1\" alt=\"\" class=\"wp-image-306938\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?w=1394&amp;ssl=1 1394w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=300%2C126&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=1024%2C429&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=768%2C322&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=1000%2C419&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/site-accelerator/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n\n\n\n<p>And don&#8217;t forget about video! <a href=\"https://jetpack.com/videopress/?aff=8638\" rel=\"noopener\">VideoPress</a> does even more for your hosted videos. No ads, beautiful feature-rich player, CDN-hosted optimized video, poster graphics for mobile, and you do absolutely nothing different with your workflow: just drag and drop videos into posts.</p>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<h2 id=\"h-markdown\">Markdown</h2>\n\n\n\n<p>Writing content in Markdown can be awful handy. Especially on a developer-focused site, it makes sense to offer it to users in the comment section. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2360\" height=\"1044\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=2360%2C1044&#038;ssl=1\" alt=\"\" class=\"wp-image-306933\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?w=2360&amp;ssl=1 2360w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=300%2C133&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=1024%2C453&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=768%2C340&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=1536%2C679&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=2048%2C906&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=1000%2C442&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>With Jetpack Markdown, you also get a Markdown block to use in the block editor so you can write in chunks of Markdown wherever needed.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1060\" height=\"428\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=1060%2C428&#038;ssl=1\" alt=\"\" class=\"wp-image-360441\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?w=1060&amp;ssl=1 1060w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=300%2C121&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=1024%2C413&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=768%2C310&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=1000%2C404&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/markdown/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-9decf36b jetpack-box\"><div class=\"wp-block-group__inner-container\">\n<h2 id=\"h-related-posts\">Related Posts</h2>\n\n\n\n<p>CSS-Tricks has thousands of pages of content! It&#8217;s a challenge for us to surface all the best stuff, particularly on a per-topic basis and without having to hand-pick everything. Showing related posts is tricky to pull off and we love that Jetpack does a great job with it, all without burdening our servers the way other related content solutions can.</p>\n</div></div>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2446\" height=\"714\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?fit=1024%2C299&amp;ssl=1\" alt=\"\" class=\"wp-image-306937\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?w=2446&amp;ssl=1 2446w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=300%2C88&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=1024%2C299&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=768%2C224&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=1536%2C448&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=2048%2C598&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=1000%2C292&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/related-posts/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-b9939e63 jetpack-box\"><div class=\"wp-block-group__inner-container\">\n<h2 id=\"h-social-connections\">Social Connections</h2>\n\n\n\n<p>We like to tell the world as best as we can when we publish new content. Rather than having to do that manually, we can share the post to Twitter and Facebook the second we hit that &#8220;Publish&#8221; button. You can always head back to older content and <a href=\"https://jetpack.com/2021/12/07/jetpack-10-4-re-publish-social-posts-from-the-block-editor/?aff=8638\" rel=\"noopener\">re-publish</a> to social media as well.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-10.47.05-AM.png?resize=247%2C366&#038;ssl=1\" alt=\"Showing the Jetpack publishing settings prior to publishing the post. It shows options to publish to Twitter and Facebook and an area to customize the message.\" class=\"wp-image-306947\" width=\"247\" height=\"366\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-10.47.05-AM.png?w=634&amp;ssl=1 634w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-10.47.05-AM.png?resize=202%2C300&amp;ssl=1 202w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/features/traffic/automatic-publishing/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n</div>\n</div>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>This isn&#8217;t a complete list. The official <a href=\"https://jetpack.com/features/?aff=8638\" rel=\"noopener\">features page</a> will show you even more. Every site&#8217;s needs will be different. There are all sorts of security, design, and promotion features that might be <em>your</em> favorites. If you manage a lot of WordPress sites, as agencies often too, take note there is <a href=\"https://jetpack.com/2021/10/27/announcing-jetpack-licensing/?aff=8638\" rel=\"noopener\">a new Licensing Portal</a> to manage billing across multiple sites much more easily.  </p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/jetpack-features-we-love-and-use-at-css-tricks/\">Jetpack Features We Love and Use at CSS-Tricks</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/jetpack-features-we-love-and-use-at-css-tricks/feed/</wfw:commentRss>\n\t\t\t<slash:comments>0</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">360452</post-id>\t</item>\n\t\t<item>\n\t\t<title>CSS-Based Fingerprinting</title>\n\t\t<link>https://css-tricks.com/css-based-fingerprinting/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/css-based-fingerprinting/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Mon, 03 Jan 2022 21:45:10 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[security]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=360385</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Fingerprinting is bad. It&#8217;s a term that refers to building up enough metadata about a user that you can essentially figure out who they are. JavaScript has access to all sorts of fingerprinting possibilities, which then combined with the IP &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-based-fingerprinting/\">CSS-Based Fingerprinting</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>Fingerprinting is bad. It&#8217;s a term that refers to building up enough metadata about a user that you can essentially figure out who they are. JavaScript has access to all sorts of fingerprinting possibilities, which then combined with the IP address that the server has access to, means fingerprinting is all too common. </p>\n\n\n\n<p>You don&#8217;t generally think of CSS as being a fingerprinting vector though, and thus &#8220;safe&#8221; in that way. But Oliver Brotchie <a href=\"https://csstracking.dev/\" rel=\"noopener\">has documented an idea</a> that allows for some degree of<a href=\"https://csstracking.dev/\" rel=\"noopener\"> </a>fingerprinting with CSS alone. </p>\n\n\n\n<span id=\"more-360385\"></span>\n\n\n\n<p>Think of all the <code>@media</code> queries we have. We can test for pointer type with <code>any-pointer</code>. Imagine that for each value, we request a totally unique <code>background-image</code> from a server. If that image was requested, we know those <code>@media</code> queries were true. We can start to fingerprint with something like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.pointer {\n  background-image: url('/unique-id/pointer=none')\n}\n\n@media (any-pointer: coarse) {\n  .pointer {\n    background-image: url('/unique-id/pointer=coarse')\n  }\n}\n\n@media (any-pointer: fine) {\n  .pointer {\n    background-image: url('/unique-id/pointer=fine')\n  }\n}</code></pre>\n\n\n\n<p>Combine that with the fact that we can test for a dark mode preference with <code>prefers-color-scheme</code>, the fingerprint gets a bit clearer. In fact, it&#8217;s the <a href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/#what-lies-ahead\">current draft for CSS</a> user prefer media queries that Oliver is most concerned about:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Not only will the upcoming draft make this method scalable, but it will also increase its precision. Currently, without alternative means, it is hard to conclusively link every request to a specific visitor as the only feasible way to determine their origin, is to group the requests by the IP address of the connection. However, with the new draft, by generating a randomised string and interpolating it into the URL tag for every visitor, we can accurately identify all requests from said visitor.</p></blockquote>\n\n\n\n<p>There are tons more. We can make media queries that are <code>1px</code> apart and request a background image for each, perfectly guessing the visitor&#8217;s window size. There are probably a dozen or more exotic media queries that are rarely used, but are useful specifically to fingerprinting with CSS. Combine that with <code>@supports</code> queries for all sorts of things to essentially guess the exact browser. <em>And combine that</em> with the classic technique of testing for installation of specific local fonts, and you have a half-decent fingerprinting machine. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@font-face {\n  font-family: 'some-font';\n  src: local(some font), url('/unique-id/some-font');\n}\n\n.some-font {\n  font-family:'some-font';\n}</code></pre>\n\n\n\n<p>The generated CSS to do it is massive (<a href=\"https://github.com/OliverBrotchie/CSS-Fingerprint/blob/main/fingerprint.sass\" rel=\"noopener\">here&#8217;s the Sass</a> to generate it), but apparently it&#8217;s heavily reduced once we can use custom properties in URLs. </p>\n\n\n\n<p>I&#8217;m not heavily worried about it, mostly because I don&#8217;t disable JavaScript and JavaScript is so much more widely capable of fingerprinting already. Plus, there are already other types of CSS security vulnerabilities, from reading visited links (which browsers have addressed), keylogging, and user-generated inline styles, among others that folks have pointed out in <a href=\"https://css-tricks.com/css-security-vulnerabilities/\">another article on the topic</a>.</p>\n\n\n\n<p>But Oliver&#8217;s research on fingerprinting is really good and worthy of a look by everyone who knows more about web security than I do.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-based-fingerprinting/\">CSS-Based Fingerprinting</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/css-based-fingerprinting/feed/</wfw:commentRss>\n\t\t\t<slash:comments>3</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">360385</post-id>\t</item>\n\t\t<item>\n\t\t<title>How to Create a Browser Extension</title>\n\t\t<link>https://css-tricks.com/how-to-create-a-browser-extension/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/how-to-create-a-browser-extension/#respond</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Lars Kölker]]></dc:creator>\n\t\t<pubDate>Mon, 03 Jan 2022 15:12:31 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[browser extension]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=359615</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>I’ll bet you are using browser extensions right now. Some of them are extremely popular and useful, like ad blockers, password managers, and PDF viewers. These extensions (or &#8220;add-ons&#8221;) are not limited to those purposes — you can do a &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-create-a-browser-extension/\">How to Create a Browser Extension</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>I’ll bet you are using browser extensions right now. Some of them are extremely popular and useful, like ad blockers, password managers, and PDF viewers. These extensions (or &#8220;add-ons&#8221;) are not limited to those purposes — you can do a lot more with them! In this article, I will give you an introduction on how to create one. Ultimately, we’ll make it work in multiple browsers.</p>\n\n\n\n<span id=\"more-359615\"></span>\n\n\n\n<h3>What we’re making</h3>\n\n\n\n<p>We’re making an extension called <strong>&#8220;Transcribers of Reddit&#8221;</strong> and it’s going to improve Reddit’s accessibility by moving specific comments to the top of the comment section and adding <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\" rel=\"noopener\"><code>aria-</code> attributes</a> for screen readers. We will also take our extension a little further with options for adding borders and backgrounds to comments for better text contrast.</p>\n\n\n\n<p>The whole idea is that you’ll get a nice introduction for how to develop a browser extension. We will start by creating the extension for Chromium-based browsers (e.g. Google Chrome, Microsoft Edge, Brave, etc.). In a future post we will port the extension to work with Firefox, as well as Safari which <a href=\"https://webkit.org/blog/11989/new-webkit-features-in-safari-15/\" rel=\"noopener\">recently added support for Web Extensions</a> in both the MacOS and iOS versions of the browser.</p>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/Lars418/torExtension\" rel=\"noopener\">GitHub repo</a></div>\n</div>\n\n\n\n<p>Ready? Let’s take this one step at a time.</p>\n\n\n\n<h3>Create a working directory</h3>\n\n\n\n<p>Before anything else, we need a working space for our project. All we really need is to create a folder and give it a name (which I’m calling <code>transcribers-of-reddit</code>). Then, create another folder inside that one named <code>src</code> for our source code.</p>\n\n\n\n<h3>Define the entry point</h3>\n\n\n\n<p>The entry point is a file that contains general information about the extension (i.e. extension name, description, etc.) and defines permissions or scripts to execute.</p>\n\n\n\n<p>Our entry point can be a <code>manifest.json</code> file located in the <code>src</code> folder we just created. In it, let’s add the following three properties:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\"\n}</code></pre>\n\n\n\n<p>The <code>manifest_version</code> is similar to version in npm or Node. It defines what APIs are available (or not). We’re going to work on the bleeding edge and use the latest version, 3 (also known as as <code>mv3</code>).</p>\n\n\n\n<p>The second property is <code>name</code> and it specifies our extension name. This name is what’s displayed everywhere our extension appears, like <a href=\"https://chrome.google.com/webstore\" rel=\"noopener\">Chrome Web Store</a> and the <code>chrome://extensions</code> page in the Chrome browser.</p>\n\n\n\n<p>Then there’s <code>version</code>. It labels the extension with a version number. Keep in mind that this property (in contrast to <code>manifest_version</code>) is a string that can only contain numbers and dots (e.g. 1.3.5).</p>\n\n\n\n<h3>More <code>manifest.json</code> information</h3>\n\n\n\n<p>There’s actually a lot more we can add to help add context to our extension. For example, we can provide a <code>description</code> that explains what the extension does. It’s a good idea to provide these sorts of things, as it gives users a better idea of what they’re getting into when they use it.</p>\n\n\n\n<p>In this case, we’re not only adding a description, but supplying icons and a web address that Chrome Web Store points to on the extension’s page.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\"\n}</code></pre>\n\n\n\n<ul><li>The <code>description</code> is displayed on Chrome’s management page (<code>chrome://extensions</code>) and should be brief, less than 132 characters.</li><li>The <code>icons</code> are used in lots of places. As the <a href=\"https://developer.chrome.com/docs/extensions/mv3/manifest/icons/\" rel=\"noopener\">docs</a> state, it’s best to provide three versions of the same icon in different resolutions, preferably as a PNG file. Feel free to use the ones in the <a href=\"https://github.com/Lars418/torExtension/tree/main/src/images/logo\" rel=\"noopener\">GitHub repository</a> for this example.</li><li>The <code>homepage_url</code> can be used to connect your website with the extension. A button including the link will be displayed when clicking on &#8220;More details&#8221; on the management page.</li></ul>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img loading=\"lazy\" width=\"566\" height=\"851\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/image-2.png?resize=566%2C851&#038;ssl=1\" alt=\"\" class=\"wp-image-359642\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/image-2.png?w=566&amp;ssl=1 566w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/image-2.png?resize=200%2C300&amp;ssl=1 200w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Our opened extension card inside the extension management page.</figcaption></figure></div>\n\n\n\n<h3>Setting permissions</h3>\n\n\n\n<p>One major advantage extensions have is that their APIs allow you to interact directly with the browser. But we have to explicitly give the extension those permissions, which also goes inside the <code>manifest.json</code> file.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"13,14,15,16\"><code markup=\"tt\">\n{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\",\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\",\n\n  \"permissions\": [\n    \"storage\",\n    \"webNavigation\"\n  ]\n}</code></pre>\n\n\n\n<p>What did we just give this extension permission to? First, storage. We want this extension to be able to save the user’s settings, so we need to access the browser’s web storage to hold them. For example, if the user wants red borders on the comments, then we’ll save that for next time rather than making them set it again.</p>\n\n\n\n<p>We also gave the extension permission to look at how the user navigated to the current screen. Reddit is a single-page application (SPA) which means it doesn’t trigger a page refresh. We need to &#8220;catch&#8221; this interaction, as Reddit will only load the comments of a post if we click on it. So, that’s why we’re tapping into <code>webNavigation</code>.</p>\n\n\n\n<p>We’ll get to executing code on a page later as it requires a whole new entry inside <code>manifest.json</code>.</p>\n\n\n\n<p>/explanation Depending on which permissions are allowed, the browser might display a warning to the user to accept the permissions. It’s only certain ones, though, and <a href=\"https://developer.chrome.com/docs/extensions/mv3/permission_warnings/#permissions_with_warnings\" rel=\"noopener\">Chrome has a nice outline of them</a>.</p>\n\n\n\n<h3>Managing translations</h3>\n\n\n\n<p>Browser extensions have a built-in internalization (i18n) API. It allows you to manage translations for multiple languages (<a href=\"https://developer.chrome.com/docs/webstore/i18n/#choosing-locales-to-support\" rel=\"noopener\">full list</a>). To use the API, we have to define our translations and default language right in the <code>manifest.json</code> file:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"default_locale\": \"en\"</code></pre>\n\n\n\n<p>This sets English as the language. In the event that a browser is set to any other language that isn’t supported, the extension will fall back to the default locale (<code>en</code> in this example).</p>\n\n\n\n<p>Our translations are defined inside the <code>_locales</code> directory. Let’s create another folder in there each language you want to support. Each subdirectory gets its own <code>messages.json</code> file.</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">src \n └─ _locales\n     └─ en\n        └─ messages.json\n     └─ fr\n        └─ messages.json</code></pre>\n\n\n\n<p>A translation file consists of multiple parts:</p>\n\n\n\n<ul><li><strong>Translation key (&#8220;id&#8221;):</strong> This key is used to reference the translation.</li><li><strong>Message:</strong> The actual translation content</li><li><strong>Description (optional):</strong> Describes the translation (I wouldn’t use them, they just bloat up the file and your translation key should be descriptive enough)</li><li><strong>Placeholders (optional):</strong> Can be used to insert dynamic content inside a translation</li></ul>\n\n\n\n<p>Here’s an example that pulls all that together:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"userGreeting\": { // Translation key (\"id\")\n    \"message\": \"Good $daytime$, $user$!\" // Translation\n    \"description\": \"User Greeting\", // Optional description for translators\n    \"placeholders\": { // Optional placeholders\n      \"daytime\": { // As referenced inside the message\n        \"content\": \"$1\",\n        \"example\": \"morning\" // Example value for our content\n      },\n      \"user\": { \n        \"content\": \"$1\",\n        \"example\": \"Lars\"\n      }\n    }\n  }\n}</code></pre>\n\n\n\n<p>Using placeholders is a bit more challenging. At first we need to define the placeholder inside the message. A placeholder needs to be wrapped in between <code>$</code> characters. Afterwards, we have to add our placeholder to the &#8220;placeholder list.&#8221; This is a bit unintuitive, but Chrome wants to know what value should be inserted for our placeholders. We (obviously) want to use a dynamic value here, so we use the special <code>content</code> value <code>$1</code> which references our inserted value.</p>\n\n\n\n<p>The <code>example</code> property is optional. It can be used to give translators a hint what value the placeholder could be (but is not actually displayed).</p>\n\n\n\n<p>We need to define the following translations for our extension. Copy and paste them into the <code>messages.json</code> file. Feel free to add more languages (e.g. if you speak German, add a <code>de</code> folder inside <code>_locales</code>, and so on).</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"name\": {\n    \"message\": \"Transcribers of Reddit\"\n  },\n  \"description\": {\n    \"message\": \"Accessible image descriptions for subreddits.\"\n  },\n  \"popupManageSettings\": {\n    \"message\": \"Manage settings\"\n  },\n  \"optionsPageTitle\": {\n    \"message\": \"Settings\"\n  },\n  \"sectionGeneral\": {\n    \"message\": \"General settings\"\n  },\n  \"settingBorder\": {\n    \"message\": \"Show comment border\"\n  },\n  \"settingBackground\": {\n    \"message\": \"Show comment background\"\n  }\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">You might be wondering why we registered the permissions when there is no sign of an i18n permission, right? Chrome is a bit weird in that regard, as you don’t need to register every permission. Some (e.g. <code>chrome.i18n</code>) don’t require an entry inside the manifest. Other permissions require an entry but won’t be displayed to the user when installing the extension. Some other permissions are &#8220;hybrid&#8221; (e.g. <code>chrome.runtime</code>), meaning some of their functions can be used without declaring a permission—but other functions of the same API require one entry in the manifest. You’ll want to take a look at the <a href=\"https://developer.chrome.com/docs/extensions/reference/\" rel=\"noopener\">documentation</a> for a solid overview of the differences.</p>\n\n\n\n<h4>Using translations inside the manifest</h4>\n\n\n\n<p>The first thing our end user will see is either the entry inside the Chrome Web Store or the extension overview page. We need to adjust our manifest file to make sure everything os translated.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  // Update these entries\n  \"name\": \"__MSG_name__\",\n  \"description\": \"__MSG_description__\"\n}</code></pre>\n\n\n\n<p>Applying this syntax uses the corresponding translation in our <code>messages.json</code> file (e.g. <code>_MSG_name_</code> uses the <code>name</code> translation).</p>\n\n\n\n<h4>Using translations in HTML pages</h4>\n\n\n\n<p>Applying translations in an HTML file takes a little JavaScript.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.i18n.getMessage('name');</code></pre>\n\n\n\n<p>That code returns our defined translation (which is <code>Transcribers of Reddit</code>). Placeholders can be done in a similar way.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.i18n.getMessage('userGreeting', {\n  daytime: 'morning',\n  user: 'Lars'\n});</code></pre>\n\n\n\n<p>It would be a pain in the butt to apply translations to all elements this way. But we can write a little script that performs the translation based on a <code>data-</code> attribute. So, let’s create a new <code>js</code> folder inside the <code>src</code> directory, then add a new <code>util.js</code> file in it.</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">src \n └─ js\n     └─ util.js</code></pre>\n\n\n\n<p>This gets the job done:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const i18n = document.querySelectorAll(\"[data-intl]\");\ni18n.forEach(msg => {\n  msg.innerHTML = chrome.i18n.getMessage(msg.dataset.intl);\n});\n\nchrome.i18n.getAcceptLanguages(languages => {\n  document.documentElement.lang = languages[0];\n});</code></pre>\n\n\n\n<p>Once that script is added to an HTML page, we can add the <code>data-intl</code> attribute to an element to set its content. The document language will also be set based on the user language.</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- Before JS execution -->\n&lt;html>\n  &lt;body>\n    &lt;button data-intl=\"popupManageSettings\">&lt;/button>\n  &lt;/body>\n&lt;/html></code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- After JS execution -->\n&lt;html lang=\"en\">\n  &lt;body>\n    &lt;button data-intl=\"popupManageSettings\">Manage settings&lt;/button>\n  &lt;/body>\n&lt;/html></code></pre>\n</div>\n</div>\n\n\n\n<h3>Adding a pop-up and options page</h3>\n\n\n\n<p>Before we dive into actual programming, we we need to create two pages:</p>\n\n\n\n<ol><li>An options page that contains user settings</li><li>A pop-up page that opens when interacting with the extension icon right next to our address bar. This page can be used for various scenarios (e.g. for displaying stats or quick settings).</li></ol>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"820\" height=\"298\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?resize=820%2C298&#038;ssl=1\" alt=\"\" class=\"wp-image-359621\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?w=820&amp;ssl=1 820w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?resize=300%2C109&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?resize=768%2C279&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The options page containg our settings.</figcaption></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"356\" height=\"143\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image.png?resize=356%2C143&#038;ssl=1\" alt=\"\" class=\"wp-image-359622\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image.png?w=356&amp;ssl=1 356w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image.png?resize=300%2C121&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The pop-up containg a link to the options page.</figcaption></figure>\n</div>\n</div>\n\n\n\n<p>Here’s an outline of the folders and files we need in order to make the pages:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">src \n ├─ css\n |    └─ paintBucket.css\n ├─ popup\n |    ├─ popup.html\n |    ├─ popup.css\n |    └─ popup.js\n └─ options\n      ├─ options.html\n      ├─ options.css\n      └─ options.js</code></pre>\n\n\n\n<p>The <code>.css</code> files contain plain CSS, nothing more and nothing less. I won’t into detail because I know most of you reading this are already fully aware of how CSS works. You can copy and paste the styles from the <a href=\"https://github.com/Lars418/torExtension/tree/main/src\" rel=\"noopener\">GitHub repository</a> for this project.</p>\n\n\n\n<p class=\"is-style-explanation\">Note that the pop-up is not a tab and that its size depends on the content in it. If you want to use a fixed popup size, you can set the <code>width</code> and <code>height</code> properties on the <code>html</code> element.</p>\n\n\n\n<h4>Creating the pop-up</h4>\n\n\n\n<p>Here’s an HTML skeleton that links up the CSS and JavaScript files and adds a headline and button inside the <code>&lt;body&gt;</code>.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!doctype html>\n&lt;html lang=\"en\">\n  &lt;head>\n    &lt;meta charset=\"UTF-8\">\n    &lt;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    &lt;title data-intl=\"name\">&lt;/title>\n\n    &lt;link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n    &lt;link rel=\"stylesheet\" href=\"popup.css\">\n\n    &lt;!-- Our \"translation\" script -->\n    &lt;script src=\"../js/util.js\" defer>&lt;/script>\n    &lt;script src=\"popup.js\" defer>&lt;/script>\n  &lt;/head>\n  &lt;body>\n    &lt;h1 id=\"title\">&lt;/h1>\n    &lt;button data-intl=\"popupManageSettings\">&lt;/button>\n  &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The <code>h1</code> contains the extension name and version; the <code>button</code> is used to open the options page. The headline will not be filled with a translation (because it lacks a <code>data-intl</code> attribute), and the button doesn’t have any click handler yet, so we need to populate our <code>popup.js</code> file:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const title = document.getElementById('title');\nconst settingsBtn = document.querySelector('button');\nconst manifest = chrome.runtime.getManifest();\n\ntitle.textContent = `${manifest.name} (${manifest.version})`;\n\nsettingsBtn.addEventListener('click', () => {\n  chrome.runtime.openOptionsPage();\n});</code></pre>\n\n\n\n<p>This script first looks for the manifest file. Chrome offers the <code>runtime</code> API which contains the <code>getManifest</code> method (this specific method does not require the <code>runtime</code> permission). It returns our <code>manifest.json</code> as a JSON object. After we populate the title with the extension name and version, we can add an event listener to the settings button. If the user interacts with it, we will open the options page using <code>chrome.runtime.openOptionsPage()</code> (again no permission entry needed).</p>\n\n\n\n<p>The pop-up page is now finished, but the extension doesn’t know it exists yet. We have to register the pop-up by appending the following property to the <code>manifest.json</code> file.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"action\": {\n  \"default_popup\": \"popup/popup.html\",\n  \"default_icon\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  }\n},</code></pre>\n\n\n\n<h4>Creating the options page</h4>\n\n\n\n<p>Creating this page follows a pretty similar process as what we just completed. First, we populate our <code>options.html</code> file. Here’s some markup we can use:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!doctype html>\n&lt;html lang=\"en\">\n&lt;head>\n  &lt;meta charset=\"UTF-8\">\n  &lt;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  &lt;title data-intl=\"name\">&lt;/title>\n\n  &lt;link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n  &lt;link rel=\"stylesheet\" href=\"options.css\">\n\n  &lt;!-- Our \"translation\" script -->\n  &lt;script src=\"../js/util.js\" defer>&lt;/script>\n  &lt;script src=\"options.js\" defer>&lt;/script>\n&lt;/head>\n&lt;body>\n  &lt;header>\n    &lt;h1>\n      &lt;!-- Icon provided by feathericons.com -->\n      &lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" role=\"presentation\">\n        &lt;circle cx=\"12\" cy=\"12\" r=\"3\">&lt;/circle>\n        &lt;path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\">&lt;/path>\n      &lt;/svg>\n      &lt;span data-intl=\"optionsPageTitle\">&lt;/span>\n    &lt;/h1>\n  &lt;/header>\n\n  &lt;main>\n    &lt;section id=\"generalOptions\">\n      &lt;h2 data-intl=\"sectionGeneral\">&lt;/h2>\n\n      &lt;div id=\"generalOptionsWrapper\">&lt;/div>\n    &lt;/section>\n  &lt;/main>\n\n  &lt;footer>\n    &lt;p>Transcribers of Reddit extension by &lt;a href=\"https://lars.koelker.dev\" target=\"_blank\">lars.koelker.dev&lt;/a>.&lt;/p>\n    &lt;p>Reddit is a registered trademark of Reddit, Inc. This extension is not endorsed or affiliated with Reddit, Inc. in any way.&lt;/p>\n  &lt;/footer>\n&lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>There are no actual options yet (just their wrappers). We need to write the script for the options page. First, we define variables to access our wrappers and default settings inside <code>options.js</code>. &#8220;Freezing&#8221; our default settings prevents us from accidentally modifying them later.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const defaultSettings = Object.freeze({\n  border: false,\n  background: false,\n});\nconst generalSection = document.getElementById('generalOptionsWrapper');\n</code></pre>\n\n\n\n<p>Next, we need to load the saved settings. We can use the (previously registered) <code>storage</code> API for that. Specifically, we need to define if we want to store the data locally (<code>chrome.storage.local</code>) or sync settings through all devices the end user is logged in to (<code>chrome.storage.sync</code>). Let’s go with local storage for this project.</p>\n\n\n\n<p>Retrieving values needs to be done with the <code>get</code> method. It accepts two arguments:</p>\n\n\n\n<ol><li>The entries we want to load</li><li>A callback containing the values</li></ol>\n\n\n\n<p>Our entries can either be a string (e.g. like <code>settings</code> below) or an array of entries (useful if we want to load multiple entries). The argument inside the callback function contains an object of all entries we previously defined in <code>{ settings: ... }</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.storage.local.get('settings', ({ settings }) => {\n  const options = settings ?? defaultSettings; // Fall back to default if settings are not defined\n  if (!settings) {\n    chrome.storage.local.set({\n     settings: defaultSettings,\n    });\n }\n\n  // Create and display options\n  const generalOptions = Object.keys(options).filter(x => !x.startsWith('advanced'));\n  \n  generalOptions.forEach(option => createOption(option, options, generalSection));\n});</code></pre>\n\n\n\n<p>To render the options, we also need to create a <code>createOption()</code> function.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function createOption(setting, settingsObject, wrapper) {\n  const settingWrapper = document.createElement(\"div\");\n  settingWrapper.classList.add(\"setting-item\");\n  settingWrapper.innerHTML = `\n  &lt;div class=\"label-wrapper\">\n    &lt;label for=\"${setting}\" id=\"${setting}Desc\">\n      ${chrome.i18n.getMessage(`setting${setting}`)}\n    &lt;/label>\n  &lt;/div>\n\n  &lt;input type=\"checkbox\" ${settingsObject[setting] ? 'checked' : ''} id=\"${setting}\" />\n  &lt;label for=\"${setting}\"\n    tabindex=\"0\"\n    role=\"switch\"\n    aria-checked=\"${settingsObject[setting]}\"\n    aria-describedby=\"${setting}-desc\"\n    class=\"is-switch\"\n  >&lt;/label>\n  `;\n\n  const toggleSwitch = settingWrapper.querySelector(\"label.is-switch\");\n  const input = settingWrapper.querySelector(\"input\");\n\n  input.onchange = () => {\n    toggleSwitch.setAttribute('aria-checked', input.checked);\n    updateSetting(setting, input.checked);\n  };\n\n  toggleSwitch.onkeydown = e => {\n    if(e.key === \" \" || e.key === \"Enter\") {\n      e.preventDefault();\n      toggleSwitch.click();\n    }\n  }\n\n  wrapper.appendChild(settingWrapper);\n}</code></pre>\n\n\n\n<p>Inside the <code>onchange</code> event listener of our switch (aká radio button) we call the function <code>updateSetting</code>. This method will write the updated value of our radio button inside the storage.</p>\n\n\n\n<p>To accomplish this, we will make use of the <code>set</code> function. It has two arguments: The entry we want to overwrite and an (optional) callback (which we don’t use in our case). As our <code>settings</code> entry is not a boolean or a string but an object containing different settings, we use the spread operator (<code>…</code>) and only overwrite our actual key (setting) inside the <code>settings</code> object.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function updateSetting(key, value) {\n  chrome.storage.local.get('settings', ({ settings }) => {\n    chrome.storage.local.set({\n      settings: {\n        ...settings,\n        [key]: value\n      }\n    })\n  });\n}</code></pre>\n\n\n\n<p>Once again, we need to &#8220;inform&#8221; the extension about our options page by appending the following entry to the <code>manifest.json</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"options_ui\": {\n  \"open_in_tab\": true,\n  \"page\": \"options/options.html\"\n},</code></pre>\n\n\n\n<p>Depending on your use case you can also force the options dialog to open as a popup by setting <code>open_in_tab</code> to <code>false</code>.</p>\n\n\n\n<h3>Installing the extension for development</h3>\n\n\n\n<p>Now that we’ve successfully set up the manifest file and have added both the pop-up and options page to the mix, we can install our extension to check if our pages actually work. Navigate to <code>chrome://extensions</code> and enable &#8220;Developer mode.&#8221; Three buttons will appear. Click the one labeled &#8220;Load unpacked&#8221; and select the <code>src</code> folder of your extension to load it up.</p>\n\n\n\n<p>The extension should now be successfully installed and our &#8220;Transcribers of Reddit&#8221; tile should be on the page.</p>\n\n\n\n<p>We can already interact with our extension. Click on the puzzle piece (&#x1f9e9;) icon right next to the browser’s address bar and click on the newly-added &#8220;Transcribers of Reddit&#8221; extension. You should now be greeted by a small pop-up with the button to open the options page.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"356\" height=\"143\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image-1.png?resize=356%2C143&#038;ssl=1\" alt=\"\" class=\"wp-image-359628\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image-1.png?w=356&amp;ssl=1 356w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image-1.png?resize=300%2C121&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Lovely, right? It might look a bit different on your device, as I have dark mode enabled in these screenshots.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1129\" height=\"382\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=1129%2C382&#038;ssl=1\" alt=\"\" class=\"wp-image-359629\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?w=1129&amp;ssl=1 1129w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=300%2C102&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=1024%2C346&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=768%2C260&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=1000%2C338&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you enable the &#8220;Show comment background&#8221; and &#8220;Show comment border&#8221; settings, then reload the page, the state will persist because we’re saving it in the browser’s local storage.</p>\n\n\n\n<h3>Adding the content script</h3>\n\n\n\n<p>OK, so we can already trigger the pop-up and interact with the extension settings, but the extension doesn’t do anything particularly useful yet. To give it some life, we will add a content script.</p>\n\n\n\n<p>Add a file called <code>comment.js</code> inside the <code>js</code> directory and make sure to define it in the <code>manifest.json</code> file:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"content_scripts\": [\n  {\n    \"matches\": [ \"*://www.reddit.com/*\" ],\n    \"js\": [ \"js/comment.js\" ]\n  }\n],</code></pre>\n\n\n\n<p>The <code>content_scripts</code> is made up of two parts:</p>\n\n\n\n<ul><li><code>matches</code>: This array holds URLs that tell the browser where we want our content scripts to run. Being an extension for Reddit and all, we want this to run on any page matching <code>://www.redit.com/*</code>, where the asterisk is a wild card to match anything after the top-level domain.</li><li><code>js</code>: This array contains the actual content scripts.</li></ul>\n\n\n\n<p>Content scripts can’t interact with other (normal) JavaScripts. This means if a website’s scripts defines a variable or function, we can’t access it. For example:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// script_on_website.js\nconst username = 'Lars';\n\n// content_script.js\nconsole.log(username); // Error: username is not defined</code></pre>\n\n\n\n<p>Now let’s start writing our content script. First, we add some constants to <code>comment.js</code>. These constants contain RegEx expressions and selectors that will be used later on. The <code>CommentUtils</code> is used to determine whether or not a post contains a &#8220;tor comment,&#8221; or if comment wrappers exists.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst Selectors = Object.freeze({\n  commentWrapper: 'div[style*=\"--commentswrapper-gradient-color\"] > div, div[style*=\"max-height: unset\"] > div',\n  torComment: 'div[data-tor-comment]',\n  postContent: 'div[data-test-id=\"post-content\"]'\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst CommentUtils = Object.freeze({\n  isTorComment: (comment) => comment.querySelector('[data-test-id=\"comment\"]') ? comment.querySelector('[data-test-id=\"comment\"]').textContent.includes('m a human volunteer content transcriber for Reddit') : false,\n  torCommentsExist: () => !!document.querySelector(Selectors.torComment),\n  commentWrapperExists: () => !!document.querySelector('[data-reddit-comment-wrapper=\"true\"]')\n});</code></pre>\n\n\n\n<p>Next, we check whether or not a user directly opens a comment page (&#8220;post&#8221;), then perform a RegEx check and update the <code>directPage</code> variable. This case occurs when a user directly opens the URL (e.g. by typing it into the address bar or clicking on<code>&lt;a&gt;</code> element on another page, like Twitter).</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let directPage = false;\nif (UrlRegex.commentPage.test(window.location.href)) {\n  directPage = true;\n  moveComments();\n}</code></pre>\n\n\n\n<p>Besides opening a page directly, a user normally interacts with the SPA. To catch this case, we can add a message listener to our <code>comment.js</code> file by using the <code>runtime</code> API.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.runtime.onMessage.addListener(msg => {\n  if (msg.type === messageTypes.COMMENT_PAGE) {\n    waitForComment(moveComments);\n  }\n});</code></pre>\n\n\n\n<p>All we need now are the functions. Let’s create a <code>moveComments()</code> function. It moves the special &#8220;tor comment&#8221; to the start of the comment section. It also conditionally applies a background color and border (if borders are enabled in the settings) to the comment. For this, we call the <code>storage</code> API and load the <code>settings</code> entry:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function moveComments() {\n  if (CommentUtils.commentWrapperExists()) {\n    return;\n  }\n\n  const wrapper = document.querySelector(Selectors.commentWrapper);\n  let comments = wrapper.querySelectorAll(`${Selectors.commentWrapper} > div`);\n  const postContent = document.querySelector(Selectors.postContent);\n\n  wrapper.dataset.redditCommentWrapper = 'true';\n  wrapper.style.flexDirection = 'column';\n  wrapper.style.display = 'flex';\n\n  if (directPage) {\n    comments = document.querySelectorAll(\"[data-reddit-comment-wrapper='true'] > div\");\n  }\n\n  chrome.storage.local.get('settings', ({ settings }) => { // HIGHLIGHT 18\n    comments.forEach(comment => {\n      if (CommentUtils.isTorComment(comment)) {\n        comment.dataset.torComment = 'true';\n        if (settings.background) {\n          comment.style.backgroundColor = 'var(--newCommunityTheme-buttonAlpha05)';\n        }\n        if (settings.border) {\n          comment.style.outline = '2px solid red';\n        }\n        comment.style.order = \"-1\";\n        applyWaiAria(postContent, comment);\n      }\n    });\n  })\n}</code></pre>\n\n\n\n<p>The <code>applyWaiAria()</code> function is called inside the <code>moveComments()</code> function—it adds <code>aria-</code> attributes. The other function creates a unique identifier for use with the <code>aria-</code> attributes.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function applyWaiAria(postContent, comment) {\n  const postMedia = postContent.querySelector('img[class*=\"ImageBox-image\"], video');\n  const commentId = uuidv4();\n\n  if (!postMedia) {\n    return;\n  }\n\n  comment.setAttribute('id', commentId);\n  postMedia.setAttribute('aria-describedby', commentId);\n}\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r &amp; 0x3 | 0x8);\n    return v.toString(16);\n  });\n}</code></pre>\n\n\n\n<p>The following function waits for the comments to load and calls the <code>callback</code> parameter if it finds the comment wrapper.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function waitForComment(callback) {\n  const config = { childList: true, subtree: true };\n  const observer = new MutationObserver(mutations => {\n    for (const mutation of mutations) {\n      if (document.querySelector(Selectors.commentWrapper)) {\n        callback();\n        observer.disconnect();\n        clearTimeout(timeout);\n        break;\n      }\n    }\n  });\n\n  observer.observe(document.documentElement, config);\n  const timeout = startObservingTimeout(observer, 10);\n}\n\nfunction startObservingTimeout(observer, seconds) {\n  return setTimeout(() => {\n    observer.disconnect();\n  }, 1000 * seconds);\n}</code></pre>\n\n\n\n<h3>Adding a service worker</h3>\n\n\n\n<p>Remember when we added a listener for messages inside the content script? This listener isn&#8217;t currently receiving messages. We need to send it to the content script ourselves. For this purpose we need to register a service worker.</p>\n\n\n\n<p>We have to register our service worker inside the <code>manifest.json</code> by appending the following code to it:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"background\": {\n  \"service_worker\": \"sw.js\"\n}</code></pre>\n\n\n\n<p>Don’t forget to create the <code>sw.js</code> file inside the <code>src</code> directory (service workers always need to be created in the extension’s root directory, <code>src</code>.</p>\n\n\n\n<p>Now, let’s create some constants for the message and page types:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst Utils = Object.freeze({\n  getPageType: (url) => {\n    if (new URL(url).pathname === '/') {\n      return messageTypes.MAIN_PAGE;\n    } else if (UrlRegex.commentPage.test(url)) {\n      return messageTypes.COMMENT_PAGE;\n    } else if (UrlRegex.subredditPage.test(url)) {\n      return messageTypes.SUBREDDIT_PAGE;\n    }\n\n    return messageTypes.OTHER_PAGE;\n  }\n});</code></pre>\n\n\n\n<p>We can add the service worker’s actual content. We do this with an event listener on the history state (<code>onHistoryStateUpdated</code>) that detects when a page has been updated with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API\" rel=\"noopener\">History API</a> (which is commonly used in SPAs to navigate without a page refresh). Inside this listener, we query the active tab and extract its <code>tabId</code>. Then we send a message to our content script containing the page type and URL.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.webNavigation.onHistoryStateUpdated.addListener(async ({ url }) => {\n  const [{ id: tabId }] = await chrome.tabs.query({ active: true, currentWindow: true });\n\n  chrome.tabs.sendMessage(tabId, {\n    type: Utils.getPageType(url),\n    url\n  });\n});</code></pre>\n\n\n\n<h3>All done!</h3>\n\n\n\n<p>We’re finished! Navigate to Chrome’s extension management page ( <code>chrome://extensions</code>) and hit the reload icon on the unpacked extension. If you open a Reddit post that contains a &#8220;Transcribers of Reddit&#8221; comment with an image transcription (like <a href=\"https://www.reddit.com/r/ProgrammerHumor/comments/oi8e26/why_would_you_hurt_me_in_such_a_way_the/\" rel=\"noopener\">this one</a>), it will be moved to the start of the comment section and be highlighted as long as we’ve enabled it in the extension settings.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1270\" height=\"1332\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=1270%2C1332&#038;ssl=1\" alt=\"\" class=\"wp-image-359633\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?w=1270&amp;ssl=1 1270w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=286%2C300&amp;ssl=1 286w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=976%2C1024&amp;ssl=1 976w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=768%2C805&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=1000%2C1049&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The &#8220;Transcribers of Reddit&#8221; extension highlights a particular comment by moving it to the top of the Reddit thread’s comment list and giving it a bright red border</figcaption></figure>\n\n\n\n<h3>Conclusion</h3>\n\n\n\n<p>Was that as hard as you thought it would be? It’s definitely a lot more straightforward than I thought before digging in. After setting up the <code>manifest.json</code> and creating any page files and assets we need, all we’re really doing is writing HTML, CSS, and JavaScript like normal.</p>\n\n\n\n<p>If you ever find yourself stuck along the way, the <a href=\"https://developer.chrome.com/docs/extensions/reference/\" rel=\"noopener\">Chrome API</a> documentation is a great resource to get back on track.</p>\n\n\n\n<p>Once again, <a href=\"https://github.com/Lars418/torExtension\" rel=\"noopener\">here’s the GitHub repo</a> with all of the code we walked through in this article. Read it, use it, and let me know what you think of it!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-create-a-browser-extension/\">How to Create a Browser Extension</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/how-to-create-a-browser-extension/feed/</wfw:commentRss>\n\t\t\t<slash:comments>0</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">359615</post-id>\t</item>\n\t\t<item>\n\t\t<title>Thank You (2021 Edition)</title>\n\t\t<link>https://css-tricks.com/thank-you-2021-edition/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/thank-you-2021-edition/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Sat, 01 Jan 2022 17:50:59 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[thank-you]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=359698</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>The year has come to a close and <a href=\"https://css-tricks.com/tag/thank-you/\">it&#8217;s time again</a> for our end-of-year wrapup. The most important message is this: thank you. (<em>thankyouthankyou</em>)</p>\n<p>Thanks for stopping by and reading this site. If you didn&#8217;t, I&#8217;d be out &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/thank-you-2021-edition/\">Thank You (2021 Edition)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>The year has come to a close and <a href=\"https://css-tricks.com/tag/thank-you/\">it&#8217;s time again</a> for our end-of-year wrapup. The most important message is this: thank you. (<em>thankyouthankyou</em>)</p>\n\n\n\n<p>Thanks for stopping by and reading this site. If you didn&#8217;t, I&#8217;d be out of a job around here, and I quite like this job so I owe it all to you. Like a family holiday card, allow me to share how the year went from our perspective, both with numbers and feelings, and then do a review of our goals. </p>\n\n\n\n<span id=\"more-359698\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"641\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=1024%2C641&#038;ssl=1\" alt=\"Thank you from Chris. Clear Ornaments hanging from the sky with gold glitten in them. A cookie candy cane embedded into the ground. Little tiny pine trees with gold stands and frosted white tips. \" class=\"wp-image-359872\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=1024%2C641&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=300%2C188&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=768%2C481&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=1000%2C626&amp;ssl=1 1000w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?w=1224&amp;ssl=1 1224w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3>Overall Traffic Analytics Numbers</h3>\n\n\n\n<p class=\"ticss-a2910f25\">The site saw <strong>88m</strong> pageviews this year <strong>down 6%</strong> from the 93m last year. Traffic has yo-yo&#8217;d up and down a smidge like that a little over the last 4-5 years, but this 6% is a bit of an alarming drop that I don&#8217;t like to see. These numbers are from Google Analytics, and <a href=\"https://css-tricks.com/proxying-third-party-javascript-as-first-party-javascript-and-the-potential-effect-on-analytics/\">some of my own research</a> this year suggests perhaps 20-30% of visitors to this site actually block the run-of-the-mill client-side JavaScript-powered Google Analytics I use. So perhaps the real traffic is higher, but as the analytics implementation is exactly the same and I don&#8217;t see any reason blocking would have skyrocketed just this past year alone, the downward movement seems real.</p>\n\n\n\n<p>A ~3% drop in organic search traffic was largely responsible for the dip. That&#8217;s big, as search is <strong>74.6%</strong> of all traffic. This points to us just not hitting the mark well enough for what people are searching for. A nice 36% increase in direct traffic points to pretty decent brand awareness, but direct traffic is only <strong>5%</strong> of overall traffic anyway so it doesn&#8217;t make much of a difference compared to search engine traffic. Referral traffic is down, social is up, but both are such small slices right now they just don&#8217;t move the needle. </p>\n\n\n\n<p>You might think, <em>well hey content ages out, search engine traffic to existing content will decline over time</em>. That&#8217;s true, but we publish a ton of <em>new</em> content every year as well as maintain and improve existing content, hence the concern. </p>\n\n\n\n<p class=\"ticss-ae4e08a2\">We invest well into 6-figures in new and updated content every year. So seeing a decline in traffic is disheartening. </p>\n\n\n\n<p>But hey that&#8217;s the game sometimes. I suspect it&#8217;s heavy competition in the developer writing space, which is something we all benefit from as developers, so it ain&#8217;t all bad. We&#8217;ll live and learn and do our best to turn it around for the sake of the health of this site. I&#8217;ve already got (counts fingers and toes) a million ideas. </p>\n\n\n\n<p>All that said, while I do think pageviews is an interesting and relevant metric to a site that uses advertising as a primary business model, there are many others. Unique Visitors are <em>up</em> year over year to <strong>26.3m</strong> from 25.8m, suggesting <em>more different people</em> came to the site this year, which is great, they just didn&#8217;t bop around the site as much or come back quite as often. Pages per visit is very steady at <strong>1.35</strong> meaning for the most part people come, they read, they leave. No surprise there. It&#8217;s mostly that &#8220;come back&#8221; thing to work on.</p>\n\n\n\n<h3>The Biggest Leap in Mobile Traffic Yet</h3>\n\n\n\n<p>Pretty big jump in mobile usage this year! </p>\n\n\n\n<p>2021: 20%<br>2020: 15%<br>2019: 15%<br>2018: 12%</p>\n\n\n\n<p>A fifth of all traffic is pretty interesting. Before 2018, even though mobile traffic was surging then too, we were in the low single digits, which I always thought <em>hey this is a reference site for coding and people code on desktop. </em>But clearly, that&#8217;s changing and perhaps people are reading the site in a more <em>news</em> kinda way, which I like. For years I had goals of making this site <em>both</em> full of referential long-green content <em>and</em> a site you could subscribe to for news, like an industry rag. So far so good.</p>\n\n\n\n<h3>Content by the Numbers</h3>\n\n\n\n<p>You&#8217;d think if we missed the mark on new content this year, that perhaps some better year would beat articles-written-in-2021 in traffic, but that&#8217;s not the case. Articles written in 2021 drove the most traffic to the site in 2021 (13.5% of overall traffic). Here are the articles that were top-by-pageviews in 2021 <em>that were written in 2021</em>:</p>\n\n\n\n<ol><li><a href=\"https://css-tricks.com/vs-code-extensions-for-html/\">VS Code Extensions for&nbsp;HTML</a> — Chris Coyier</li><li><a href=\"https://css-tricks.com/how-to-create-neon-text-with-css/\">How to Create Neon Text With&nbsp;CSS</a> — Silvia O&#8217;Dwyer</li><li><a href=\"https://css-tricks.com/animating-with-lottie/\">Animating with Lottie</a> — Idorenyin Udoh&nbsp;</li><li><a href=\"https://css-tricks.com/did-you-know-about-the-has-css-selector/\">Did You Know About the :has CSS&nbsp;Selector?</a> — Robin Rendle</li><li><a href=\"https://css-tricks.com/a-table-with-both-a-sticky-header-and-a-sticky-first-column/\">A table with both a sticky header and a sticky first&nbsp;column</a> — Chris Coyier</li><li><a style=\"font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\" href=\"https://css-tricks.com/comparing-the-new-generation-of-build-tools/\">Comparing the New Generation of Build&nbsp;Tools</a> — Hugh Haworth&nbsp;</li><li><a href=\"https://css-tricks.com/mistakes-ive-made-as-an-engineering-manager/\">Mistakes I’ve Made as an Engineering&nbsp;Manager</a> — Sarah Drasner&nbsp;</li><li><a style=\"font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\" href=\"https://css-tricks.com/lets-create-a-custom-audio-player/\">Let’s Create a Custom Audio&nbsp;Player</a> — Idorenyin Udoh&nbsp;</li><li><a href=\"https://css-tricks.com/html-inputs-and-labels-a-love-story/\">HTML Inputs and Labels: A Love&nbsp;Story</a> — Amber Wilson</li><li><a href=\"https://css-tricks.com/front-end-testing-is-for-everyone/\">Front-End Testing is For&nbsp;Everyone</a> — Evgeny Klimenchenko</li></ol>\n\n\n\n<p class=\"is-style-explanation\">I almost shouldn&#8217;t post these lists! <a href=\"https://www.ctrl.blog/entry/most-copied.html\" rel=\"noopener\">Look at what happens to Daniel&nbsp;Aleksandersen</a>.</p>\n\n\n\n<p>Those articles above range from 100k pageviews to 71k pageviews. What&#8217;s interesting is that if you group together all posts that got 40k or more pageviews, there are 44 of them, putting them at about <strong>2.5-3m</strong> pageviews. That&#8217;s kinda cool I think — the &#8220;medium tail&#8221; of content is pretty thick around here. The flexbox guide page alone did <strong>6.7m</strong> pageviews, so that&#8217;s still a beast, but it is bested by all content published in 2021 which clocks in at 11.8m. So investing in content works, it just needs to get tuned such that we aren&#8217;t dropping overall. Perhaps that means SEO tuning of both new content and old.</p>\n\n\n\n<p>Here&#8217;s 11-20 from 2021 just for fun:</p>\n\n\n\n<ol start=\"11\"><li><a href=\"https://css-tricks.com/to-the-brain-reading-computer-code-is-not-the-same-as-reading-language/\">To the brain, reading computer code is not the same as reading&nbsp;language</a> — Geoff Graham&nbsp;</li><li><a href=\"https://css-tricks.com/in-praise-of-the-unambiguous-click-menu/\">In Praise of the Unambiguous Click&nbsp;Menu</a> — Mark Root-Wiley&nbsp;</li><li><a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\">aspect-ratio</a> — Geoff Graham&nbsp;</li><li><a href=\"https://css-tricks.com/theming-and-theme-switching-with-react-and-styled-components/\">Theming and Theme Switching with React and&nbsp;styled-components</a> — Tapas Adhikary&nbsp;</li><li><a href=\"https://css-tricks.com/the-holy-grail-layout-with-css-grid/\">The Holy Grail Layout with CSS&nbsp;Grid</a> — Chris Coyier</li><li><a href=\"https://css-tricks.com/creating-the-perfect-commit-in-git/\">Creating the Perfect Commit in&nbsp;Git</a> — Tobias Günther&nbsp;</li><li><a href=\"https://css-tricks.com/what-if-you-could-use-visual-studio-code-as-the-editor-of-in-browser-developer-tools/\">What if… you could use Visual Studio Code as the editor of in-browser Developer&nbsp;Tools? </a>— Geoff Graham&nbsp;</li><li><a href=\"https://css-tricks.com/is-css-a-programming-language/\">Is CSS a Programming&nbsp;Language?</a> — Chris Coyier</li><li><a href=\"https://css-tricks.com/a-love-letter-to-html-css/\">A Love Letter to HTML &amp; CSS</a> — Ashley Kolodziej&nbsp;</li><li><a href=\"https://css-tricks.com/json-in-css/\">JSON in CSS</a> — Chris Coyier</li></ol>\n\n\n\n<p>And here&#8217;s the top 10 regardless of year, but still scoped to traffic-in-2021:</p>\n\n\n\n<ol><li><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">A Complete Guide to Flexbox</a></li><li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">A Complete Guide to Grid</a></li><li><a href=\"https://css-tricks.com/perfect-full-page-background-image/\">Perfect Full Page&nbsp;Background&nbsp;Image</a></li><li><a href=\"https://css-tricks.com/using-svg/\">Using SVG</a></li><li><a href=\"https://css-tricks.com/the-shapes-of-css/\">The Shapes of CSS</a></li><li><a href=\"https://css-tricks.com/snippets/css/media-queries-for-standard-devices/\">Media Queries for Standard Devices</a></li><li><a href=\"https://css-tricks.com/almanac/properties/b/box-shadow/\">box-shadow</a></li><li><span style=\"color: initial; font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\"><a href=\"https://css-tricks.com/snippets/css/css-triangle/\">CSS Triangle</a></span></li><li><a href=\"https://css-tricks.com/snippets/css/using-font-face-in-css/\">How to use @font-face in CSS</a></li><li><a href=\"https://css-tricks.com/scale-svg/\">How to Scale&nbsp;SVG</a></li></ol>\n\n\n\n<p>I like seeing the Almanac not only perform pretty well overall but have some individual pages be top-performers on their own. </p>\n\n\n\n<h3>Comments</h3>\n\n\n\n<p>We had about <strong>4,320</strong> legit comments on the site this year, <em>almost exactly</em> the number from last year. Weird!</p>\n\n\n\n<p>That seems like a lot, especially as we approve&#8230; I&#8217;d say half?&#8230; of commenters that are left. There is a lot of junk posts (e.g. &#8220;good post!&#8221; kinda stuff, that we just don&#8217;t post as to not bother the author with useless email notifications of new comments, nor readers with useless content). We just delete those junk posts (as in, not approve them in the first place). </p>\n\n\n\n<p>There is spam too of course. We crossed the <strong>2m</strong> spam comments threshold, but through a combination of <a href=\"https://akismet.com/\" rel=\"noopener\">Akismet</a> and <a href=\"https://wordpress.org/plugins/anti-spam/\" rel=\"noopener\">Anti-Spam</a> not too much spam sneaks through and is easily trashed before approval. </p>\n\n\n\n<p>Mentally, I really rollercoaster on comments. Sometimes they are great and helpful. Sometimes they are full of rudeness, hate, and anger. Those need to be looked at and trashed, meaning comments represent an entry point into my brain for all that negativity. Part of me thinks we should just shut them off, and if people have something important to say, we can encourage them to use their own blog (it ain&#8217;t hard to spin one up!) to comment and we&#8217;ll link to it if it&#8217;s good. </p>\n\n\n\n<p>But then I think of all the helpful comments and comments that help keep me up to date. Heck I just learned that Chrome is postponing all that removal of <code>alert()</code> stuff <a href=\"https://css-tricks.com/choice-words-about-the-upcoming-deprecation-of-javascript-dialogs/#comment-1787573\">via a comment from Kyle</a>, and I probably would have missed that otherwise. Plus the fact that there are <meta charset=\"utf-8\">4,320 of them this year that pass muster feels like the scale is tipped toward keeping them. </p>\n\n\n\n<h3>Newsletter</h3>\n\n\n\n<p>We&#8217;re at about <strong>91,000</strong> newsletter subscribers as this year wraps, up from 81,000 last year. A respectable march forward and makes it likely we&#8217;ll hit that 100k milestone sometime in 2022. </p>\n\n\n\n<p>Huge props to Robin for leading up <a href=\"https://css-tricks.com/newsletters/\">the newsletter</a> with wonderful writing. I think he really found a voice and stride on the newsletter this year. </p>\n\n\n\n<p>We didn&#8217;t miss a single week. Part of what helps there is that they have sponsors so there is some clear obligation to get them out on time, but I think it&#8217;s more like we have <a href=\"https://css-tricks.com/a-gutenburg-powered-newsletter/\">a system</a> and the system works. </p>\n\n\n\n<p>I&#8217;d really like to juice up newsletter subscriptions moreso because I think it&#8217;s actually a darn nice weekly read than for any specific business reason.</p>\n\n\n\n<h3>Video</h3>\n\n\n\n<p>Thanks to <a href=\"https://daverupert.com/\" rel=\"noopener\">Dave&#8217;s</a> idea that we get <a href=\"https://shoptalkshow.com/video/\" rel=\"noopener\">ShopTalk more into video</a>, we&#8217;ve been using the <a href=\"https://www.youtube.com/realcsstricks\" rel=\"noopener\">CSS-Tricks YouTube channel</a> and thus had a banner year in publishing video! <strong>35</strong> brand new videos!</p>\n\n\n\n<h3>Site Updates</h3>\n\n\n\n<p>The design evolved a bit this year, but nothing overly dramatic. Normally this time of year my fingers are itching for a new design, and believe me there are Figma drafts cooking, but I just haven&#8217;t had the time or inspiration for a true v19 just yet. </p>\n\n\n\n<p>So no major changes to the tech behind the site, but plenty of minor ones. For instance:</p>\n\n\n\n<ul><li>The Yoast SEO plugin was giving me problems. It had super frequent updates, which I guess is good, but there was a high frequency of problems with the updates where either the core plugin or the pro plugin wouldn&#8217;t update correctly (up to causing such problems as literally taking down the site) and settings getting messed up during updates. For a while I just turned it off entirely. But then I started hearing good things about <a href=\"https://rankmath.com/\" rel=\"noopener\">RankMath</a> so I&#8217;m trying that, and so far so good. It&#8217;s got me kinda inspired to take content SEO more seriously. Yoast had some claws in the site in other ways, for example it provides a pretty nice Table of Contents block that I&#8217;m still searching for a solution for (maybe it&#8217;s coming to <a href=\"https://github.com/WordPress/gutenberg/pull/29739\" rel=\"noopener\">core?</a>). It also had pretty nice breadcrumbs, and had to switch over to <a href=\"https://mtekk.us/code/breadcrumb-navxt/\" rel=\"noopener\">Breadcrumb NavXT</a>.</li><li><a href=\"https://wordpress.org/plugins/jetpack-boost/\" rel=\"noopener\">Jetpack Boost</a> is new to the site this year, and I&#8217;m impressed at how it handles critical CSS. <a href=\"https://css-tricks.com/jetpack/\">Jetpack</a> (full disclosure: a long time sponsor) is generally extremely helpful. I particularly like how the site search works, which is just out-of-the-box Jetpack Instant Search.</li><li>We really dialed in <a href=\"https://css-tricks.com/auto-generated-social-media-images/\">the social media images</a> this year. </li><li>We also dialed in the eCommerce situation. The <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter membership</a> unlocks additional content on the site, which I can <a href=\"https://css-tricks.com/the-greatest-css-tricks-vol-i-ebook-pdf-and-epub/\">now provide in eBook formats</a>. So I&#8217;m really all set to produce more of that type of content.</li></ul>\n\n\n\n<h3>Goal Review</h3>\n\n\n\n<p><strong>&#x1f6ab; Publish Three Guides. </strong>I thought this would be easy since last year our goal was 2 guides and we published 9! But this year we only managed one: <a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">A Complete Guide to Custom Properties</a>. We did publish some other pretty big series like Tobias Günther&#8217;s <a href=\"https://css-tricks.com/creating-the-perfect-commit-in-git/#advanced-git-series\">9-part Advanced Git series</a> and four more entries in Jay Hoffman&#8217;s <a href=\"https://css-tricks.com/category/history/\">Web History series</a>. </p>\n\n\n\n<p><meta charset=\"utf-8\"><strong>&#x1f6ab;</strong> <strong>Stay focused on how-to technical content around our strengths.</strong> Kind of a close call here. It&#8217;s not like we didn&#8217;t publish quite a bit of how-to technical content. But I&#8217;m going to say we failed because I don&#8217;t think we kept this in mind strongly enough throughout the year. We didn&#8217;t say &#8220;we&#8217;re good at this type of content so we&#8217;re going to lean into that specifically&#8221; like this goal suggested we should. </p>\n\n\n\n<p><meta charset=\"utf-8\"><strong>&#x1f6ab;</strong> <strong>Complete all missing Almanac entries.</strong> I hate marking this as failed, but I&#8217;m only doing that because of how it was worded with &#8220;all&#8221;. I think I had in mind that there was a really clear finite number of Alamanc articles to finish and we just had to do that. I think it&#8217;s a lot more wishy-washy than that, partially because of editorial choices (do you publish a unique entry for every single <a href=\"https://css-tricks.com/css-logical-properties-and-values/\">logical property</a> or group them, for example). </p>\n\n\n\n<p>But also, should we build an SVG-specific section? Should we have a new section for all the @at rules? It&#8217;s hard to say when the Almanac would be &#8220;complete&#8221;, so I&#8217;d just rather not. This page really needs a cleanup, but it&#8217;s got many ideas in there for more work that needs to be done/commissioned if anyone is so inclined.</p>\n\n\n\n<p>We <em>did</em> do a pretty good job on publishing <em>new</em> entries though — more than any relatively recent year! </p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Almanac Entry</th><th>Published</th></tr></thead><tbody><tr><td><a href=\"https://css-tricks.com/almanac/properties/s/scale/\">scale</a></td><td>2021-11-10</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/t/translate/\">translate</a></td><td>2021-11-09</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/r/rotate/\">rotate</a></td><td>2021-11-08</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-border/\">mask-border</a></td><td>2021-11-03</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/p/padding-inline/\">padding-inline</a></td><td>2021-09-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/overscroll-behavior/\">overscroll-behavior</a></td><td>2021-09-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/b/border-block/\">border-block</a></td><td>2021-09-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/outline-color/\">outline-color</a></td><td>2021-09-01</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/a/accent-color/\">accent-color</a></td><td>2021-08-26</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/b/block-size/\">block-size</a></td><td>2021-08-25</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/outline-style/\">outline-style</a></td><td>2021-08-16</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/outline-width/\">outline-width</a></td><td>2021-08-10</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/t/text-emphasis/\">text-emphasis</a></td><td>2021-08-04</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/b/backdrop/\">::backdrop</a></td><td>2021-08-03</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/h/hyphenate-limit-chars/\">hyphenate-limit-chars</a></td><td>2021-07-15</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/f/fullscreen/\">:fullscreen</a></td><td>2021-07-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask/\">mask</a></td><td>2021-07-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/c/content-visibility/\">content-visibility</a></td><td>2021-06-21</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/p/place-content/\">place-content</a></td><td>2021-05-13</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-composite/\">mask-composite</a></td><td>2021-05-10</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/e/empty/\">:empty</a></td><td>2021-04-27</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/w/where/\">:where</a></td><td>2021-03-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/j/justify-self/\">justify-self</a></td><td>2021-03-18</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-type/\">mask-type</a></td><td>2021-03-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/p/place-self/\">place-self</a></td><td>2021-03-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/c/current/\">:current</a></td><td>2021-02-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/f/future/\">:future</a></td><td>2021-02-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/b/border-boundary/\">border-boundary</a></td><td>2021-02-09</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-mode/\">mask-mode</a></td><td>2021-02-03</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/c/caret-shape/\">caret-shape</a></td><td>2021-01-27</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/c/caret/\">caret</a></td><td>2021-01-27</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\">aspect-ratio</a></td><td>2021-01-20</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-inline/\">margin-inline</a></td><td>2021-01-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-inline-end/\">margin-inline-end</a></td><td>2021-01-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-block-start/\">margin-block-start</a></td><td>2021-01-08</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-block-end/\">margin-block-end</a></td><td>2021-01-08</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-block/\">margin-block</a></td><td>2021-01-06</td></tr></tbody></table></figure>\n\n\n\n<h3>Settting 2022 Goals</h3>\n\n\n\n<ul><li><strong>More SEO focus.</strong> I&#8217;ve almost shunned SEO in the past. Partially because the HTML best practices seem pretty easy and obvious, and my inbox is so full of total slimeball link builders I&#8217;d like to see do literally anything else with their time. Butttt. I&#8217;m just being ignorant about it. I think it will be fun, interesting, and likely useful to take a more considered look at SEO best practices for a content site like this and make a stab at improving it. The related goal being: <strong>Gain 10% in pageview traffic.</strong> We lost 6% this year, so I think 10% will get us back on track and moving upward. But it&#8217;s a big goal so I&#8217;m already nervous about it.</li><li><strong>Another digital book.</strong> All the infrastructure is there for this and I&#8217;ve got ideas. I just need to write and put it in place.</li><li><strong>More social media experimentation. </strong>That&#8217;s a loosey-goosey goal but whatever, we&#8217;ve got our work cut out for us in other ways. Like SEO, for a few years there I kinda shunned dedicated social media work for the CSS-Tricks brand. Mostly because when I look at the traffic numbers, <em>so very little of it</em> comes from social media, especially considering how much time we were spending on it in the past. We don&#8217;t really benefit much from brand social media, so why bother? Well, maybe I was thinking about it the wrong way. Maybe we can just not care what <em>traffic</em> it drives but care about the connection with readers directly there. If we&#8217;re more fun and interesting on social media, maybe we continue to build trust in what we&#8217;re doing here. Maybe it can help drive sales if we get that second goal done. Maybe its more directly monetizeable.</li></ul>\n\n\n\n<h3>Thank You</h3>\n\n\n\n<p>Special thanks to <a href=\"https://geoffgraham.me/\" rel=\"noopener\">Geoff</a>! If you didn&#8217;t know, he&#8217;s our lead editor around here and keeping this entire site humming along nicely. You&#8217;ll work with Geoff if you do any <a href=\"https://css-tricks.com/guest-writing-for-css-tricks/\">guest writing</a> here at all. </p>\n\n\n\n<p>Special thanks to our biggest year-long sponsors <a href=\"https://automattic.com/?aff=8638\" rel=\"noopener\">Automattic</a> and <a href=\"https://frontendmasters.com/?utm_source=css-tricks&amp;utm_medium=website&amp;utm_campaign=css-tricks-tags-sidebar\" rel=\"noopener\">Frontend Masters</a>. <a href=\"https://css-tricks.com/category/2021-end-of-year-thoughts/\">Our year-end series</a> is both a thank you to you the readers and to them. </p>\n\n\n\n<p>To another year!</p>\n\n\n\n<p>&#x1f64f;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/thank-you-2021-edition/\">Thank You (2021 Edition)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/thank-you-2021-edition/feed/</wfw:commentRss>\n\t\t\t<slash:comments>6</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">359698</post-id>\t</item>\n\t\t<item>\n\t\t<title>Defensive CSS</title>\n\t\t<link>https://css-tricks.com/defensive-css/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/defensive-css/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Fri, 31 Dec 2021 18:41:47 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=360073</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Ahmad&#160;Shadeed nails it again with <a href=\"https://ishadeed.com/article/defensive-css/\" rel=\"noopener\">&#8220;Defensive CSS.&#8221;</a> The idea is that you should write CSS to be <em>ready for issues caused by dynamic content</em>. </p>\n<p>More items than you thought would be there? No problem, the area can expand or &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/defensive-css/\">Defensive CSS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p><br>Ahmad&nbsp;Shadeed nails it again with <a href=\"https://ishadeed.com/article/defensive-css/\" rel=\"noopener\">&#8220;Defensive CSS.&#8221;</a> The idea is that you should write CSS to be <em>ready for issues caused by dynamic content</em>. </p>\n\n\n\n<p>More items than you thought would be there? No problem, the area can expand or scroll. Title too long? No problem, it either wraps or truncates, and won&#8217;t bump into anything weird because margins or gaps are set up. Image come over in an unexpected size? No worries, the layout is designed to make sure the dedicated area is filled with image and will handle the sizing/cropping accordingly.</p>\n\n\n\n<p>There is no such thing as being a good CSS developer and not coding defensively. This is what being a CSS developer is, especially when you factor in progressive enhancement concepts and cross-browser/device unknowns.</p>\n<p><a href=\"https://ishadeed.com/article/defensive-css/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/defensive-css/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/defensive-css/\">Defensive CSS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/defensive-css/feed/</wfw:commentRss>\n\t\t\t<slash:comments>4</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">360073</post-id>\t</item>\n\t\t<item>\n\t\t<title>The Web is More Gooder, and Other Observations on Today&#8217;s Web Tech</title>\n\t\t<link>https://css-tricks.com/the-web-is-more-gooder-and-other-observations-on-todays-web-tech/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/the-web-is-more-gooder-and-other-observations-on-todays-web-tech/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Thu, 30 Dec 2021 20:08:07 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[opinion]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=359941</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>I&#8217;m actually working on a talk (<em>whew! been a while! kinda feels good!</em>) about just how <em>good</em> the world of building websites has gotten. I plan to cover a wide swath of web tech, on purpose, because I &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-web-is-more-gooder-and-other-observations-on-todays-web-tech/\">The Web is More Gooder, and Other Observations on Today&#8217;s Web Tech</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>I&#8217;m actually working on a talk (<em>whew! been a while! kinda feels good!</em>) about just how <em>good</em> the world of building websites has gotten. I plan to cover a wide swath of web tech, on purpose, because I feel like things have gotten good all around. CSS is doing great, but so is nearly everything else involved in making websites, especially if we take care in what we&#8217;re doing.</p>\n\n\n\n<p>It also strikes me that updates to the web platform and the ecosystem around it are generally <em>additive</em>. If you feel like the web used to be simpler, well, perhaps it was—but it also <em>still is</em>. Whatever you could do then you can do now, if you want to, although, it would be a fair point if you&#8217;re job searching and the expectations to get hired involve a wheelbarrow of complicated tech.</p>\n\n\n\n<span id=\"more-359941\"></span>\n\n\n\n<p>This idea of the web getting better feels like it&#8217;s in the water a bit&#8230;</p>\n\n\n\n<p>Chris Ferdinandi in <a href=\"https://gomakethings.com/web-tech-is-better.-developer-norms-are-worse./\" rel=\"noopener\">&#8220;Web tech is better. Developer norms are worse.&#8221;</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>What the modern web can actually do, easily and out-of-the-box, is amazing. My friend Sarah Dayan started her career at around the same time as me, and has&nbsp;<a href=\"https://twitter.com/frontstuff_io/status/1467551852447379462\" rel=\"noopener\">a wonderful thread on how things have changed since then</a>.<br><br>In particular, Sarah talks about the dramatically improved capabilities of the web&nbsp;<em>and</em>&nbsp;expectations from customers and the people who use it.</p><p><strong>Modern web technology is lightyears ahead of the late 2000s.</strong></p></blockquote>\n\n\n\n<p>Wes and Scott on Syntax.fm 410 also <a href=\"https://syntax.fm/show/410/everything-in-web-dev-is-amazing\" rel=\"noopener\">talk about all kinds of stuff that is great now</a>, from HTML, CSS, and JavaScript to tooling and hosting.</p>\n\n\n\n<p>Simeon Griggs in <a href=\"https://www.simeongriggs.dev/there-has-never-been-a-better-time-to-build-websites\" rel=\"noopener\">&#8220;There&#8217;s never been a better time to build websites&#8221;</a> has a totally different take on what is great on the web these days than mine, but I appreciate that. The <em>options</em> around building websites have also widened, meaning there are approaches to things that just feel better to people who think and work in different ways. </p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>While there&#8217;s absolutely a learning curve to getting started, once you&#8217;ve got momentum, modern web development feels like having rocket boosters. The distance between idea and execution is as short as it&#8217;s ever been.</p></blockquote>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-web-is-more-gooder-and-other-observations-on-todays-web-tech/\">The Web is More Gooder, and Other Observations on Today&#8217;s Web Tech</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/the-web-is-more-gooder-and-other-observations-on-todays-web-tech/feed/</wfw:commentRss>\n\t\t\t<slash:comments>2</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">359941</post-id>\t</item>\n\t</channel>\n</rss>\n"
  },
  "description": "Tips, Tricks, and Techniques on using Cascading Style Sheets.",
  "home_page_url": "https://css-tricks.com",
  "icon": "https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=32%2C32&ssl=1",
  "_ext": {
    "date_published": "2022-01-07T22:31:52.000Z",
    "date_modified": "2022-01-07T22:31:54.000Z"
  }
}