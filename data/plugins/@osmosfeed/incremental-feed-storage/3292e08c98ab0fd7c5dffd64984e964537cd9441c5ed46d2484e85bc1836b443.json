{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "CSS-Tricks",
  "feed_url": "https://css-tricks.com/feed/",
  "items": [
    {
      "id": "https://css-tricks.com/?p=364118",
      "url": "https://css-tricks.com/web-development-bookmarklets/",
      "title": "6 Useful Bookmarklets to Boost Web Development",
      "summary": "A bookmarklet is a JavaScript-based bookmark that adds to a web browser. I’d like to show you some awesome web browser hacks to aid your web development workflow and how to convert those hacks into time-saving bookmarklets.\n\n\nActivating design mode\n\n…\n\n6 Useful Bookmarklets to Boost Web Development originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>A bookmarklet is a JavaScript-based bookmark that adds to a web browser. I’d like to show you some awesome web browser hacks to aid your web development workflow and how to convert those hacks into time-saving bookmarklets.</p>\n\n\n\n<span id=\"more-364118\"></span>\n\n\n<ol class=\"simpletoc-list\"   >\n<li>\n<a  href=\"#activating-design-mode\">Activating design mode</a></li><li>\n<a  href=\"#applying-a-background-to-everything\">Applying a background to everything</a></li><li>\n<a  href=\"#simulating-events\">Simulating events</a></li><li>\n<a  href=\"#setting-cookies\">Setting cookies</a></li><li>\n<a  href=\"#toggling-classes\">Toggling classes</a></li><li>\n<a  href=\"#color-widget-bookmark\">Color widget bookmark</a></li><li>\n<a  href=\"#what-other-bookmarklets-can-you-think-of\">What other bookmarklets can you think of?</a></li></ol>\n\n<h3 id=\"activating-design-mode\">Activating design mode</h3>\n\n\n<p>Design mode (styled as <code>designMode</code> since it’s a <em>JavaScript property</em>) is for who like to experiment with variations of copy on a live website. For example, copywriters who like to observe how content reads within the flow of the website’s design, or, say, designers who want to ensure that text fits comfortably within a certain space at a certain font size.</p>\n\n\n\n<p>JavaScript has a mightily simple feature that can render an entire HTML document editable. It works <em>exactly</em> like HTML’s <code>contenteditable=\"true\"</code> name-value attribute (or <code>contentEditable=\"true\"</code> in JavaScript) but for the whole document. If you’d like to see how it works, start by entering the browser’s console using the relevant keyboard shortcut:</p>\n\n\n\n<ul><li><strong>Chrome:</strong> <kbd>Option</kbd> + <kbd>⌘</kbd> + <kbd>J</kbd> / <kbd>Shift</kbd> + <kbd>CTRL</kbd> + <kbd>J</kbd></li><li><strong>Firefox:</strong> <kbd>Option</kbd> + <kbd>⌘</kbd> + <kbd>K</kbd> / <kbd>Shift</kbd> + <kbd>CTRL</kbd> + <kbd>K</kbd></li><li><strong>Safari:</strong> <kbd>Option</kbd> + <kbd>⌘</kbd> + <kbd>C</kbd> / <kbd>Shift</kbd> + <kbd>CTRL</kbd> + <kbd>C</kbd></li></ul>\n\n\n\n<p>Next, type <code>document.designMode=\"on\"</code> into the console, hit <strong><kbd>Return</kbd></strong>, and then click on any text element. You’ll see that this text element (and all other text elements) are now editable simply by clicking on them. This method of editing text on a live website is <em>much</em> faster than having to open DevTools, then right-clicking and selecting the “Edit Text” option… and <em>much</em> less tiresome.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=2880%2C1800&#038;ssl=1\" alt=\"Showing an edited version of the CSS-Tricks guide landing page using the design mode bookmarklet.\" class=\"wp-image-364119\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=2048%2C1280&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=1000%2C625&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>“Guides and Thangs” — my favorite part of CSS-Tricks</figcaption></figure>\n\n\n\n<p>While I’m not sure that “design mode” is the most accurate description of the feature, it’s super useful nonetheless and it’s actually been around for a really long time, surprisingly.</p>\n\n\n\n<p>And what’s even an even faster way to enable it? A bookmarklet, of course! Create a bookmark using <code>javascript: document.designMode=\"on\";void 0;</code> as the URL.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=2880%2C1800&#038;ssl=1\" alt=\"Showing the bookmarklet installation.\" class=\"wp-image-364120\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=2048%2C1280&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=1000%2C625&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"applying-a-background-to-everything\">Applying a background to everything</h3>\n\n\n<p>When HTML elements don’t have backgrounds, it can be difficult to visualize their bounds and/or accurately measure the distance between them and other elements. Developers might want to better visualize bounds when dealing with <a href=\"https://medium.muz.li/optical-effects-9fca82b4cd9a\" rel=\"noopener\">optical imbalance</a> (i.e. when something “looks off” even though it’s not), <a href=\"https://css-tricks.com/what-you-should-know-about-collapsing-margins/\">margin collapse</a> (when certain margins are ignored), various issues with <code>display:</code>/<code>float:</code>/<code>position:</code>, and more.</p>\n\n\n\n<p>Applying backgrounds means applying a semi-transparent background to all HTML elements in order to better visualize their bounds and spacings. It’s something many of us commonly do by opening up DevTools then typing a CSS declaration like <code>selector { background: rgb(0 0 0 / 10%); }</code> into the “Styles” box. But again, it’s <em>really</em> tiresome and repetitive — and something we can simplify with a bookmarklet.</p>\n\n\n\n<p>Once again, to create a bookmark, we’re going to make a URL. Here’s what we can use for this one:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">javascript: document.querySelectorAll(\"*\").forEach(element => element.style.background=\"rgb(0 0 0 / 10%)\");</code></pre>\n\n\n\n<p class=\"is-style-explanation\">We’re using a semi-transparent background because the transparency stacks, which ensures that every nested element is distinguishable and the distances between them can be measured.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=2880%2C1800&#038;ssl=1\" alt=\"Showing the CSS-Tricks guides landing page with all backgrounds fill with varying shades of gray.\" class=\"wp-image-364121\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=2048%2C1280&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=1000%2C625&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Apply a background to everything to see what’s happening.</figcaption></figure>\n\n\n<h3 id=\"simulating-events\">Simulating events</h3>\n\n\n<p>Have you ever had to test a web event that first requires a series of interactions, or certain conditions to be met? It’s super time-consuming to have to test or debug these kinds of functionalities. This event simulation bookmarklet can be used to instantly trigger specific events, making testing a breeze.</p>\n\n\n\n<p>Simulating an event means coding a “throwaway” button that triggers a JavaScript event, making it much easier to quickly and repeatedly test the event without having to meet any usual user-facing conditions, like needing to be logged in.</p>\n\n\n\n<p>Assuming that you have your <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\" rel=\"noopener\">JavaScript event listeners</a> set up, create a bookmark for each event that you’d like to trigger/simulate and submit the following URL:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">javascript: document.querySelector(\"SELECTOR\").click();</code></pre>\n\n\n\n<p>Replace “SELECTOR” with your unique selector, replace “click” with “focus” or “blur” (when necessary), or extend the snippet to make it trigger more complex events, like <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll\" rel=\"noopener\">scroll</a>.</p>\n\n\n<h3 id=\"setting-cookies\">Setting cookies</h3>\n\n\n<p>Cookies are tokens that are stored on a website visitor’s computer by the website that they’re visiting. Cookies contain data that can be read by the website that created them until they’ve exceeded their expiration date or have been deleted. The mere existence of a cookie can determine whether or not a visitor is logged in, whereas the data itself can store user information.</p>\n\n\n\n<p>An example of a scenario where you might want to set a cookie using a bookmarklet is when you want to force a logged-in state during website testing. Websites often look very different for users that are logged in, however, logging in and out eventually becomes very tedious, so this bookmarklet can save quite a bit of time.</p>\n\n\n\n<p>Manually writing <code>expires=</code> dates for cookies is awkward as heck, but luckily this <a href=\"https://cookie-bookmarklet-generator.com\" rel=\"noopener\">create-your-own-set-cookie-bookmarklet app</a> can generate a bookmarklet for a specific cookie, if you know its exact name.</p>\n\n\n<h3 id=\"toggling-classes\">Toggling classes</h3>\n\n\n<p>You may want to add or remove a class from an HTML element in order to trigger a fresh state or a change in appearance, otherwise known as toggling classes. Class toggling happens behind the scenes of most live websites, but it can also be used during testing to skip having to meet certain user-facing conditions.</p>\n\n\n\n<p>Class toggling can be used to trigger changes in appearance (e.g. alternative themes or states) and even animations, but it can be a little fiddly when doing it with developer tools when it’s only for testing reasons (i.e. the website doesn’t actually function that way for users). Similar to the other bookmarklets, use this one to rapidly toggle classes and save yourself time.</p>\n\n\n\n<p>Create the following bookmarklet to target all elements that match your chosen “SELECTOR”, which, in turn, toggles the “CLASS.”</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">javascript: document.querySelectorAll(\"SELECTOR\").forEach(element => element.classList.toggle(\"CLASS\"));</code></pre>\n\n\n<h3 id=\"color-widget-bookmark\">Color widget bookmark</h3>\n\n\n<p>While not technically a “bookmarklet,” this <a href=\"https://twitter.com/scottjehl/status/1428465011475746820\" rel=\"noopener\">bookmarkable data URI</a> by Scott Jehl opens up an <code>&lt;input type=\"color\"&gt;</code> in a new tab:</p>\n\n\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">So hey here&#8217;s my new color picker app! <br>It&#8217;s um, just an HTML color input wrapped in a data URI so I can bookmark it. (Feel free to do so yourself):<br><br>data:text/html;charset=utf-8,%3Chtml%3E%3Ctitle%3EColor Picker%3C%2Ftitle%3E%3Cinput type%3D&#8221;color&#8221;%3E%3C%2Fhtml%3E <a href=\"https://t.co/0QyFqAsUSq\">pic.twitter.com/0QyFqAsUSq</a></p>— Scott Jehl (@scottjehl) <a href=\"https://twitter.com/scottjehl/status/1428465011475746820?ref_src=twsrc%5Etfw\" rel=\"noopener\">August 19, 2021</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">data:text/html;charset=utf-8,%3Chtml%3E%3Ctitle%3EColor Picker%3C%2Ftitle%3E%3Cinput type%3D\"color\"%3E%3C%2Fhtml%3E</code></pre>\n\n\n\n<p>Why is that cool? Well, how many times have you needed to grab a color value off a page, only to find yourself cracking open DevTools, clicking through a bunch of elements, and pouring over CSS properties to find the value? Better to run this little guy, click the element, and get a color right away!</p>\n\n\n<h3 id=\"what-other-bookmarklets-can-you-think-of\">What other bookmarklets can you think of?</h3>\n\n\n<p>Are there any overly repetitive web development workflows that require you to use the web browser’s sometimes-awkward developer tools? If so, it’s <strong>super easy</strong> to create your own time-saving bookmarklets. Just remember to start the URL with <code>javascript:</code>!</p>\n\n\n\n<p>And if you’ve made a bookmarklet to simplify your workflow, I’d love to see it! Share them here in the comments and let’s get a nice collection going.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/web-development-bookmarklets/\">6 Useful Bookmarklets to Boost Web Development</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "A bookmarklet is a JavaScript-based bookmark that adds to a web browser. I’d like to show you some awesome web browser hacks to aid your web development workflow and how to convert those hacks into time-saving bookmarklets.\n\n\n\n\n\n\n\n\nActivating design mode\nApplying a background to everything\nSimulating events\nSetting cookies\nToggling classes\nColor widget bookmark\nWhat other bookmarklets can you think of?\n\nActivating design mode\n\n\nDesign mode (styled as designMode since it’s a JavaScript property) is for who like to experiment with variations of copy on a live website. For example, copywriters who like to observe how content reads within the flow of the website’s design, or, say, designers who want to ensure that text fits comfortably within a certain space at a certain font size.\n\n\n\nJavaScript has a mightily simple feature that can render an entire HTML document editable. It works exactly like HTML’s contenteditable=\"true\" name-value attribute (or contentEditable=\"true\" in JavaScript) but for the whole document. If you’d like to see how it works, start by entering the browser’s console using the relevant keyboard shortcut:\n\n\n\nChrome: Option + ⌘ + J / Shift + CTRL + JFirefox: Option + ⌘ + K / Shift + CTRL + KSafari: Option + ⌘ + C / Shift + CTRL + C\n\n\n\nNext, type document.designMode=\"on\" into the console, hit Return, and then click on any text element. You’ll see that this text element (and all other text elements) are now editable simply by clicking on them. This method of editing text on a live website is much faster than having to open DevTools, then right-clicking and selecting the “Edit Text” option… and much less tiresome.\n\n\n\n“Guides and Thangs” — my favorite part of CSS-Tricks\n\n\n\nWhile I’m not sure that “design mode” is the most accurate description of the feature, it’s super useful nonetheless and it’s actually been around for a really long time, surprisingly.\n\n\n\nAnd what’s even an even faster way to enable it? A bookmarklet, of course! Create a bookmark using javascript: document.designMode=\"on\";void 0; as the URL.\n\n\n\n\n\n\nApplying a background to everything\n\n\nWhen HTML elements don’t have backgrounds, it can be difficult to visualize their bounds and/or accurately measure the distance between them and other elements. Developers might want to better visualize bounds when dealing with optical imbalance (i.e. when something “looks off” even though it’s not), margin collapse (when certain margins are ignored), various issues with display:/float:/position:, and more.\n\n\n\nApplying backgrounds means applying a semi-transparent background to all HTML elements in order to better visualize their bounds and spacings. It’s something many of us commonly do by opening up DevTools then typing a CSS declaration like selector { background: rgb(0 0 0 / 10%); } into the “Styles” box. But again, it’s really tiresome and repetitive — and something we can simplify with a bookmarklet.\n\n\n\nOnce again, to create a bookmark, we’re going to make a URL. Here’s what we can use for this one:\n\n\n\njavascript: document.querySelectorAll(\"*\").forEach(element => element.style.background=\"rgb(0 0 0 / 10%)\");\n\n\n\nWe’re using a semi-transparent background because the transparency stacks, which ensures that every nested element is distinguishable and the distances between them can be measured.\n\n\n\nApply a background to everything to see what’s happening.\n\n\nSimulating events\n\n\nHave you ever had to test a web event that first requires a series of interactions, or certain conditions to be met? It’s super time-consuming to have to test or debug these kinds of functionalities. This event simulation bookmarklet can be used to instantly trigger specific events, making testing a breeze.\n\n\n\nSimulating an event means coding a “throwaway” button that triggers a JavaScript event, making it much easier to quickly and repeatedly test the event without having to meet any usual user-facing conditions, like needing to be logged in.\n\n\n\nAssuming that you have your JavaScript event listeners set up, create a bookmark for each event that you’d like to trigger/simulate and submit the following URL:\n\n\n\njavascript: document.querySelector(\"SELECTOR\").click();\n\n\n\nReplace “SELECTOR” with your unique selector, replace “click” with “focus” or “blur” (when necessary), or extend the snippet to make it trigger more complex events, like scroll.\n\n\nSetting cookies\n\n\nCookies are tokens that are stored on a website visitor’s computer by the website that they’re visiting. Cookies contain data that can be read by the website that created them until they’ve exceeded their expiration date or have been deleted. The mere existence of a cookie can determine whether or not a visitor is logged in, whereas the data itself can store user information.\n\n\n\nAn example of a scenario where you might want to set a cookie using a bookmarklet is when you want to force a logged-in state during website testing. Websites often look very different for users that are logged in, however, logging in and out eventually becomes very tedious, so this bookmarklet can save quite a bit of time.\n\n\n\nManually writing expires= dates for cookies is awkward as heck, but luckily this create-your-own-set-cookie-bookmarklet app can generate a bookmarklet for a specific cookie, if you know its exact name.\n\n\nToggling classes\n\n\nYou may want to add or remove a class from an HTML element in order to trigger a fresh state or a change in appearance, otherwise known as toggling classes. Class toggling happens behind the scenes of most live websites, but it can also be used during testing to skip having to meet certain user-facing conditions.\n\n\n\nClass toggling can be used to trigger changes in appearance (e.g. alternative themes or states) and even animations, but it can be a little fiddly when doing it with developer tools when it’s only for testing reasons (i.e. the website doesn’t actually function that way for users). Similar to the other bookmarklets, use this one to rapidly toggle classes and save yourself time.\n\n\n\nCreate the following bookmarklet to target all elements that match your chosen “SELECTOR”, which, in turn, toggles the “CLASS.”\n\n\n\njavascript: document.querySelectorAll(\"SELECTOR\").forEach(element => element.classList.toggle(\"CLASS\"));\n\n\nColor widget bookmark\n\n\nWhile not technically a “bookmarklet,” this bookmarkable data URI by Scott Jehl opens up an <input type=\"color\"> in a new tab:\n\n\n\nSo hey here’s my new color picker app! It’s um, just an HTML color input wrapped in a data URI so I can bookmark it. (Feel free to do so yourself):data:text/html;charset=utf-8,%3Chtml%3E%3Ctitle%3EColor Picker%3C%2Ftitle%3E%3Cinput type%3D”color”%3E%3C%2Fhtml%3E pic.twitter.com/0QyFqAsUSq— Scott Jehl (@scottjehl) August 19, 2021 \n\n\n\ndata:text/html;charset=utf-8,%3Chtml%3E%3Ctitle%3EColor Picker%3C%2Ftitle%3E%3Cinput type%3D\"color\"%3E%3C%2Fhtml%3E\n\n\n\nWhy is that cool? Well, how many times have you needed to grab a color value off a page, only to find yourself cracking open DevTools, clicking through a bunch of elements, and pouring over CSS properties to find the value? Better to run this little guy, click the element, and get a color right away!\n\n\nWhat other bookmarklets can you think of?\n\n\nAre there any overly repetitive web development workflows that require you to use the web browser’s sometimes-awkward developer tools? If so, it’s super easy to create your own time-saving bookmarklets. Just remember to start the URL with javascript:!\n\n\n\nAnd if you’ve made a bookmarklet to simplify your workflow, I’d love to see it! Share them here in the comments and let’s get a nice collection going.\n\n6 Useful Bookmarklets to Boost Web Development originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-03-28T18:15:41.000Z",
      "date_modified": "2022-03-28T18:15:41.000Z",
      "_plugin": {
        "pageFilename": "e3eb03a6955e6ad296792107d99b118cfd75e197c9f318cd09dfb60d98b084b5.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363745",
      "url": "https://css-tricks.com/write-html-the-html-way-not-the-xhtml-way/",
      "title": "Write HTML, the HTML Way (Not the XHTML Way)",
      "summary": "You may not use XHTML (anymore), but when you write HTML, you may be more influenced by XHTML than you think. You are very likely writing HTML, the XHTML way.\nWhat is the XHTML way of writing HTML, and what …\n\nWrite HTML, the HTML Way (Not the XHTML Way) originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>You may not use XHTML (anymore), but when you write HTML, you may be more influenced by XHTML than you think. You are very likely writing HTML, the XHTML way.</p>\n\n\n\n<p>What is the XHTML way of writing HTML, and what is the HTML way of writing HTML? Let’s have a look.</p>\n\n\n\n<span id=\"more-363745\"></span>\n\n\n<h3 id=\"html-xhtml-html\">HTML, XHTML, HTML</h3>\n\n\n<p>In the 1990s, there was HTML. In the 2000s, there was XHTML. Then, in the 2010s, we switched back to HTML. That’s the simple story.</p>\n\n\n\n<p>You can tell by the rough dates of the specifications, too: HTML “1” 1992, HTML 2.0 1995, HTML 3.2 1997, HTML 4.01 1999; XHTML 1.0 2000, XHTML 1.1 2001; “HTML5” <a href=\"https://en.wikipedia.org/wiki/HTML5#Timeline\" rel=\"noopener\">2007</a>.</p>\n\n\n\n<p>XHTML became popular when everyone believed XML and XML derivatives were the future. “XML all the things.” For HTML, this had a profound effect: The effect that we learned to write it the XHTML way.</p>\n\n\n<h3 id=\"the-xhtml-way-of-writing-html\">The XHTML way of writing HTML</h3>\n\n\n<p>The XHTML way is well-documented, because XHTML 1.0 describes in great detail in its section on <a href=\"https://www.w3.org/TR/xhtml1/#diffs\" rel=\"noopener\">“Differences with HTML 4”</a>:</p>\n\n\n\n<ul><li>Documents must be well-formed.</li><li>Element and attribute names must be in lower case.</li><li>For non-empty elements, end tags are required.</li><li>Attribute values must always be quoted.</li><li><a href=\"https://www.w3.org/TR/xhtml1/#h-4.5\" rel=\"noopener\">Attribute minimization</a> is not supported.</li><li>Empty elements need to be closed.</li><li>White space handling in attribute values is done according to XML.</li><li>Script and style elements need CDATA sections.</li><li>SGML exclusions are not possible.</li><li>The elements with <code>id</code> and <code>name</code> attributes, like <code>a</code>, <code>applet</code>, <code>form</code>, <code>frame</code>, <code>iframe</code>, <code>img</code>, and <code>map</code>, should only use <code>id</code>.</li><li>Attributes with pre-defined value sets are case-sensitive.</li><li>Entity references as hex values must be in lowercase.</li></ul>\n\n\n\n<p>Does this look familiar? With the exception of marking CDATA content, as well as dealing with SGML exclusions, you probably follow all of these rules. <strong>All of them.</strong></p>\n\n\n\n<p>Although XHTML is dead, many of these rules have never been questioned again. Some have even been elevated to “best practices” for HTML.</p>\n\n\n\n<p>That is the XHTML way of writing HTML, and its lasting impact on the field.</p>\n\n\n<h3 id=\"the-html-way-of-writing-html\">The HTML way of writing HTML</h3>\n\n\n<p>One way of walking us back is to negate the rules imposed by XHTML. Let’s actually do this (without the SGML part, because HTML <a href=\"https://html.spec.whatwg.org/multipage/parsing.html#parsing\" rel=\"noopener\">isn’t based on SGML anymore</a>):</p>\n\n\n\n<ul><li>Documents may not be well-formed.</li><li>Element and attribute names may not be in lower case.</li><li>For non-empty elements, end tags are not always required.</li><li>Attribute values may not always be quoted.</li><li>Attribute minimization is supported.</li><li>Empty elements don’t need to be closed.</li><li>White space handling in attribute values isn’t done according to XML.</li><li>Script and style elements don’t need CDATA sections.</li><li>The elements with <code>id</code> and <code>name</code> attributes may not only use <code>id</code>.</li><li>Attributes with pre-defined value sets are not case-sensitive.</li><li>Entity references as hex values may not only be in lowercase.</li></ul>\n\n\n\n<p>Let’s remove the esoteric things; the things that don’t seem relevant. This includes XML whitespace handling, CDATA sections, doubling of <code>name</code> attribute values, the case of pre-defined value sets, and hexadecimal entity references:</p>\n\n\n\n<ul><li>Documents may not be well-formed.</li><li>Element and attribute names may not be in lowercase.</li><li>For non-empty elements, end tags are not always required.</li><li>Attribute values may not always be quoted.</li><li>Attribute minimization is supported.</li><li>Empty elements don’t need to be closed.</li></ul>\n\n\n\n<p>Peeling away from these rules, this looks a lot less like we’re working with XML, and more like working with HTML. But we’re not done yet.</p>\n\n\n\n<p>“Documents may not be well-formed” suggests that it was fine if HTML code was invalid. It was fine for XHTML to point to wellformedness because of XML’s strict error handling. But while HTML documents work even when they contain severe syntax and wellformedness issues, it’s neither useful for the professional — nor our field — to use and abuse this resilience. (I&#8217;ve argued this case before in my article, <a href=\"https://meiert.com/en/blog/critical-frontend-development/\" rel=\"noopener\">“In Critical Defense of Frontend Development.”</a>)</p>\n\n\n\n<p>The HTML way would therefore not suggest “documents may not be well-formed.” It would also be clear that not only end, but also start tags aren’t always required. Rephrasing and reordering, this is the essence:</p>\n\n\n\n<ul><li>Start and end tags are not always required.</li><li>Empty elements don’t need to be closed.</li><li>Element and attribute names may be lower or upper case.</li><li>Attribute values may not always be quoted.</li><li>Attribute minimization is supported.</li></ul>\n\n\n<h3 id=\"examples\">Examples</h3>\n\n\n<p>How does this look like in practice? For start and end tags, be aware that <a href=\"https://meiert.com/en/blog/optional-html/#toc-tags\" rel=\"noopener\">many tags</a> are optional. A paragraph and a list, for example, are written like this in XHTML:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p>\n&lt;ul>\n  &lt;li>Praesent augue nisl&lt;/li>\n  &lt;li>Lobortis nec bibendum ut&lt;/li>\n  &lt;li>Dictum ac quam&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<p>In HTML, however, you can write them using only this code (which is valid):</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n&lt;ul>\n  &lt;li>Praesent augue nisl\n  &lt;li>Lobortis nec bibendum ut\n  &lt;li>Dictum ac quam\n&lt;/ul></code></pre>\n\n\n\n<p>Developers also learned to write void elements, like so:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;br /></code></pre>\n\n\n\n<p>This is something XHTML brought to HTML, but as <a href=\"https://html.spec.whatwg.org/multipage/syntax.html#start-tags\" rel=\"noopener\">the slash has no effect on void elements</a>, you only need this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;br></code></pre>\n\n\n\n<p>In HTML, you can also just write everything in all caps:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;A HREF=\"https://css-tricks.com/\">CSS-Tricks&lt;/A></code></pre>\n\n\n\n<p>It looks like you’re yelling and you may not like it, but it’s okay to write it like this.</p>\n\n\n\n<p>When you want to condense that link, HTML offers you the option to <a href=\"https://meiert.com/en/blog/optional-html/#toc-quotes\" rel=\"noopener\">leave out certain quotes</a>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;A HREF=https://css-tricks.com/>CSS-Tricks&lt;/A></code></pre>\n\n\n\n<p class=\"is-style-explanation\">As a rule of thumb, when the attribute value doesn’t contain a space or an equal sign, it’s usually fine to drop the quotes.</p>\n\n\n\n<p>Finally, HTML–HTML — not XHTML–HTML — also allows to minimize attributes. That is, instead of marking an <code>input</code> element as required and read-only, like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;input type=\"text\" required=\"required\" readonly=\"readonly\"></code></pre>\n\n\n\n<p>You can minimize the attributes:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;input type=\"text\" required readonly></code></pre>\n\n\n\n<p>If you’re not only taking advantage of the fact that the quotes aren’t needed, but that <code>text</code> is the default for the <code>type</code> attribute here (there are more such <a href=\"https://meiert.com/en/blog/optional-html/#toc-attribute-values\" rel=\"noopener\">unneeded attribute–value combinations</a>), you get an example that shows HTML in all its minimal beauty:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;input required readonly></code></pre>\n\n\n<h3 id=\"write-html-the-html-way\">Write HTML, the HTML way</h3>\n\n\n<p>The above isn’t a representation of where HTML was in the 90s. HTML, back then, was loaded with <code>&lt;table&gt;</code> elements for layout, packed with presentational code, largely invalid (<a href=\"https://meiert.com/en/blog/valid-html-2021/\" rel=\"noopener\">as it’s still today</a>), with wildly varying user agent support. Yet it’s the <em>essence</em> of what we would have wanted to keep if XML and XHTML hadn’t come around.</p>\n\n\n\n<p>If you’re open to a suggestion of what a more comprehensive, contemporary way of writing HTML could look like, I have one. (HTML is my main focus area, so I’m augmenting this by links to some of my articles.)</p>\n\n\n\n<ol><li><strong>Respect syntax and semantics.</strong><ul><li><a href=\"https://meiert.com/en/blog/the-frontend-developer-test/\" rel=\"noopener\">Validate your HTML</a>, and ship only valid HTML.</li></ul></li><li><strong>Use the options HTML gives you, as long as you do so consistently.</strong><ul><li>Remember that element and attribute names may be lowercase or uppercase.</li></ul></li><li><strong>Keep use of HTML to the absolute minimum</strong><ul><li>Remember that presentational and behavioral markup is to be handled by CSS and JavaScript instead.</li><li>Remember that start and end tags are <a href=\"https://meiert.com/en/blog/optional-html/#toc-tags\" rel=\"noopener\">not always</a> required.</li><li>Remember that empty elements don’t need to be closed.</li><li>Remember that some attributes have defaults that allow <a href=\"https://meiert.com/en/blog/optional-html/#toc-attribute-values\" rel=\"noopener\">these attribute–value pairs to be omitted</a>.</li><li>Remember that attribute values may <a href=\"https://meiert.com/en/blog/optional-html/#toc-quotes\" rel=\"noopener\">not always</a> be quoted.</li><li>Remember that attribute minimization is supported.</li></ul></li></ol>\n\n\n\n<p>It’s not a coincidence that this resembles <a href=\"https://meiert.com/en/blog/rules-for-html/\" rel=\"noopener\">the three ground rules for HTML</a>, that it works with the premise of <a href=\"https://meiert.com/en/blog/html-performance/\" rel=\"noopener\">a smaller payload also leading to faster sites</a>, and that this follows <a href=\"https://meiert.com/en/blog/minimal-web-development/\" rel=\"noopener\">the school of minimal web development</a>. None of this is new — our field could merely decide to rediscover it. Tooling is available, too: <a href=\"https://github.com/kangax/html-minifier\" rel=\"noopener\">html-minifier</a> is probably the most established and able to handle all HTML optimizations.</p>\n\n\n\n<p>You’ve learned HTML the XHTML way. HTML isn’t XHTML. Rediscover HTML, and help shape a new, modern way of writing HTML — which acknowledges, but isn’t necessarily based on XML.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/write-html-the-html-way-not-the-xhtml-way/\">Write HTML, the HTML Way (Not the XHTML Way)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "You may not use XHTML (anymore), but when you write HTML, you may be more influenced by XHTML than you think. You are very likely writing HTML, the XHTML way.\n\n\n\nWhat is the XHTML way of writing HTML, and what is the HTML way of writing HTML? Let’s have a look.\n\n\n\n\n\n\nHTML, XHTML, HTML\n\n\nIn the 1990s, there was HTML. In the 2000s, there was XHTML. Then, in the 2010s, we switched back to HTML. That’s the simple story.\n\n\n\nYou can tell by the rough dates of the specifications, too: HTML “1” 1992, HTML 2.0 1995, HTML 3.2 1997, HTML 4.01 1999; XHTML 1.0 2000, XHTML 1.1 2001; “HTML5” 2007.\n\n\n\nXHTML became popular when everyone believed XML and XML derivatives were the future. “XML all the things.” For HTML, this had a profound effect: The effect that we learned to write it the XHTML way.\n\n\nThe XHTML way of writing HTML\n\n\nThe XHTML way is well-documented, because XHTML 1.0 describes in great detail in its section on “Differences with HTML 4”:\n\n\n\nDocuments must be well-formed.Element and attribute names must be in lower case.For non-empty elements, end tags are required.Attribute values must always be quoted.Attribute minimization is not supported.Empty elements need to be closed.White space handling in attribute values is done according to XML.Script and style elements need CDATA sections.SGML exclusions are not possible.The elements with id and name attributes, like a, applet, form, frame, iframe, img, and map, should only use id.Attributes with pre-defined value sets are case-sensitive.Entity references as hex values must be in lowercase.\n\n\n\nDoes this look familiar? With the exception of marking CDATA content, as well as dealing with SGML exclusions, you probably follow all of these rules. All of them.\n\n\n\nAlthough XHTML is dead, many of these rules have never been questioned again. Some have even been elevated to “best practices” for HTML.\n\n\n\nThat is the XHTML way of writing HTML, and its lasting impact on the field.\n\n\nThe HTML way of writing HTML\n\n\nOne way of walking us back is to negate the rules imposed by XHTML. Let’s actually do this (without the SGML part, because HTML isn’t based on SGML anymore):\n\n\n\nDocuments may not be well-formed.Element and attribute names may not be in lower case.For non-empty elements, end tags are not always required.Attribute values may not always be quoted.Attribute minimization is supported.Empty elements don’t need to be closed.White space handling in attribute values isn’t done according to XML.Script and style elements don’t need CDATA sections.The elements with id and name attributes may not only use id.Attributes with pre-defined value sets are not case-sensitive.Entity references as hex values may not only be in lowercase.\n\n\n\nLet’s remove the esoteric things; the things that don’t seem relevant. This includes XML whitespace handling, CDATA sections, doubling of name attribute values, the case of pre-defined value sets, and hexadecimal entity references:\n\n\n\nDocuments may not be well-formed.Element and attribute names may not be in lowercase.For non-empty elements, end tags are not always required.Attribute values may not always be quoted.Attribute minimization is supported.Empty elements don’t need to be closed.\n\n\n\nPeeling away from these rules, this looks a lot less like we’re working with XML, and more like working with HTML. But we’re not done yet.\n\n\n\n“Documents may not be well-formed” suggests that it was fine if HTML code was invalid. It was fine for XHTML to point to wellformedness because of XML’s strict error handling. But while HTML documents work even when they contain severe syntax and wellformedness issues, it’s neither useful for the professional — nor our field — to use and abuse this resilience. (I’ve argued this case before in my article, “In Critical Defense of Frontend Development.”)\n\n\n\nThe HTML way would therefore not suggest “documents may not be well-formed.” It would also be clear that not only end, but also start tags aren’t always required. Rephrasing and reordering, this is the essence:\n\n\n\nStart and end tags are not always required.Empty elements don’t need to be closed.Element and attribute names may be lower or upper case.Attribute values may not always be quoted.Attribute minimization is supported.\n\n\nExamples\n\n\nHow does this look like in practice? For start and end tags, be aware that many tags are optional. A paragraph and a list, for example, are written like this in XHTML:\n\n\n\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n<ul>\n  <li>Praesent augue nisl</li>\n  <li>Lobortis nec bibendum ut</li>\n  <li>Dictum ac quam</li>\n</ul>\n\n\n\nIn HTML, however, you can write them using only this code (which is valid):\n\n\n\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n<ul>\n  <li>Praesent augue nisl\n  <li>Lobortis nec bibendum ut\n  <li>Dictum ac quam\n</ul>\n\n\n\nDevelopers also learned to write void elements, like so:\n\n\n\n<br />\n\n\n\nThis is something XHTML brought to HTML, but as the slash has no effect on void elements, you only need this:\n\n\n\n<br>\n\n\n\nIn HTML, you can also just write everything in all caps:\n\n\n\n<A HREF=\"https://css-tricks.com/\">CSS-Tricks</A>\n\n\n\nIt looks like you’re yelling and you may not like it, but it’s okay to write it like this.\n\n\n\nWhen you want to condense that link, HTML offers you the option to leave out certain quotes:\n\n\n\n<A HREF=https://css-tricks.com/>CSS-Tricks</A>\n\n\n\nAs a rule of thumb, when the attribute value doesn’t contain a space or an equal sign, it’s usually fine to drop the quotes.\n\n\n\nFinally, HTML–HTML — not XHTML–HTML — also allows to minimize attributes. That is, instead of marking an input element as required and read-only, like this:\n\n\n\n<input type=\"text\" required=\"required\" readonly=\"readonly\">\n\n\n\nYou can minimize the attributes:\n\n\n\n<input type=\"text\" required readonly>\n\n\n\nIf you’re not only taking advantage of the fact that the quotes aren’t needed, but that text is the default for the type attribute here (there are more such unneeded attribute–value combinations), you get an example that shows HTML in all its minimal beauty:\n\n\n\n<input required readonly>\n\n\nWrite HTML, the HTML way\n\n\nThe above isn’t a representation of where HTML was in the 90s. HTML, back then, was loaded with <table> elements for layout, packed with presentational code, largely invalid (as it’s still today), with wildly varying user agent support. Yet it’s the essence of what we would have wanted to keep if XML and XHTML hadn’t come around.\n\n\n\nIf you’re open to a suggestion of what a more comprehensive, contemporary way of writing HTML could look like, I have one. (HTML is my main focus area, so I’m augmenting this by links to some of my articles.)\n\n\n\nRespect syntax and semantics.Validate your HTML, and ship only valid HTML.Use the options HTML gives you, as long as you do so consistently.Remember that element and attribute names may be lowercase or uppercase.Keep use of HTML to the absolute minimumRemember that presentational and behavioral markup is to be handled by CSS and JavaScript instead.Remember that start and end tags are not always required.Remember that empty elements don’t need to be closed.Remember that some attributes have defaults that allow these attribute–value pairs to be omitted.Remember that attribute values may not always be quoted.Remember that attribute minimization is supported.\n\n\n\nIt’s not a coincidence that this resembles the three ground rules for HTML, that it works with the premise of a smaller payload also leading to faster sites, and that this follows the school of minimal web development. None of this is new — our field could merely decide to rediscover it. Tooling is available, too: html-minifier is probably the most established and able to handle all HTML optimizations.\n\n\n\nYou’ve learned HTML the XHTML way. HTML isn’t XHTML. Rediscover HTML, and help shape a new, modern way of writing HTML — which acknowledges, but isn’t necessarily based on XML.\n\nWrite HTML, the HTML Way (Not the XHTML Way) originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-03-21T20:08:38.000Z",
      "date_modified": "2022-03-21T20:08:38.000Z",
      "_plugin": {
        "pageFilename": "d86168fdd035e1ec459b23778bdefa631cff1ebda593d1683f393f65c610916a.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=364090",
      "url": "https://css-tricks.com/optimizing-svg-patterns/",
      "title": "Optimizing SVG Patterns to Their Smallest Size",
      "summary": "I recently created a brick wall pattern as part of my #PetitePatterns series, a challenge where I create organic-looking patterns or textures in SVG within 560 bytes (or approximately the size of two tweets). To fit this constraint, I have …\n\nOptimizing SVG Patterns to Their Smallest Size originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>I recently created a brick wall pattern as part of my <a href=\"https://codepen.io/collection/DRMKdB\" rel=\"noopener\">#PetitePatterns</a> series, a challenge where I create organic-looking patterns or textures in SVG within 560 bytes (or approximately the size of two tweets). To fit this constraint, I have gone through a journey that has taught me some radical ways of optimizing SVG patterns so that they contain as little code as possible without affecting the overall image quality.</p>\n\n\n\n<p>I want to walk you through the process and show you how we can take an SVG pattern that starts at 197 bytes all the way down to a mere 44 bytes — a whopping 77.7% reduction!</p>\n\n\n\n<p></p>\n\n\n\n<span id=\"more-364090\"></span>\n\n\n<h3 id=\"the-svg-pattern\">The SVG pattern</h3>\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLPgdgg\" src=\"//codepen.io/anon/embed/yLPgdgg?height=450&amp;theme-id=1&amp;slug-hash=yLPgdgg&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLPgdgg\" title=\"CodePen Embed yLPgdgg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This is what’s called a “running bond” brick pattern. It’s the most common brick pattern out there, and one you’ve surely seen before: each row of bricks is offset by one half the length of a brick, creating a repeating staggered pattern. The arrangement is pretty simple, making SVG’s <code>&lt;pattern&gt;</code> element a perfect fit to reproduce it in code.</p>\n\n\n\n<p>The SVG <code>&lt;pattern&gt;</code> element uses a pre-defined graphic object which can be replicated (or &#8220;tiled&#8221;) at fixed intervals along the horizontal and vertical axes. Essentially, we define a rectangular tile pattern and it gets repeated to paint the fill area.</p>\n\n\n\n<p>First, let’s set the dimensions of a brick and the gap between each brick. For the sake of simplicity, let’s use clean, round numbers: a width of <code>100</code> and a height of <code>30</code> for the brick, and <code>10</code> for the horizontal and vertical gaps between them.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1280\" height=\"750\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058005414_highlight.jpg?resize=1280%2C750&#038;ssl=1\" alt=\"Showing a highlighted portion of a brick wall pattern, which is the example we are using for optimizing SVG patterns.\" class=\"wp-image-364091\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058005414_highlight.jpg?w=1280&amp;ssl=1 1280w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058005414_highlight.jpg?resize=300%2C176&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058005414_highlight.jpg?resize=1024%2C600&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058005414_highlight.jpg?resize=768%2C450&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058005414_highlight.jpg?resize=1000%2C586&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Next, we have to identify our “base” tile. And by “tile” I’m talking about pattern tiles rather than physical tiles, not to be confused with the bricks. Let’s use the highlighted part of the image above as our pattern tile: two whole bricks in the first row, and one whole sandwiched between two half bricks in the second row. Notice how and where the gaps are included, because those need to be included in the repeated pattern tile.</p>\n\n\n\n<p>When using <code>&lt;pattern&gt;</code>, we have to define the pattern’s <code>width</code> and <code>height</code>, which correspond to the width and height of the base tile. To get the dimensions, we need a little math:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">Tile Width  = 2(Brick Width) + 2(Gap) = 2(100) + 2(10) = 220\nTile Height = 2(Bright Height) + 2(Gap) = 2(30) + 2(10) = 80</code></pre>\n\n\n\n<p>Alright, so our pattern tile is <code>220✕80</code>. We also have to set the <code>patternUnits</code> attribute, where the value <code>userSpaceOnUse</code> essentially means pixels. Finally, adding an <code>id</code> to the pattern is necessary so that it can be referenced when we are painting another element with it.</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;pattern id=\"p\" width=\"220\" height=\"80\" patternUnits=\"userSpaceOnUse\">\n  &lt;!-- pattern content here -->\n&lt;/pattern></code></pre>\n\n\n\n<p>Now that we have established the tile dimensions, the challenge is to create the code for the tile in a way that renders the graphic with the smallest number of bytes possible. This is what we hope to end up with at the very end:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644084615761_tile.png?resize=498%2C181&#038;ssl=1\" alt=\"\" class=\"wp-image-364092\" width=\"498\" height=\"181\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644084615761_tile.png?w=495&amp;ssl=1 495w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644084615761_tile.png?resize=300%2C109&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The bricks (in black) and gaps (in white) of the final running bond pattern</figcaption></figure>\n\n\n<h3 id=\"initial-markup-197-bytes\">Initial markup (197 bytes)</h3>\n\n\n<p>The simplest and most declarative approach to recreate this pattern that comes to my mind is to draw five rectangles. By default, the <code>fill</code> of an SVG element is black and the <code>stroke</code> is transparent. This works well for optimizing SVG patterns, as we don’t have to explicitly declare those in the code.</p>\n\n\n\n<p>Each line in the code below defines a rectangle. The <code>width</code> and <code>height</code> are always set, and the <code>x</code> and <code>y</code> positions are only set if a rectangle is offset from the <code>0</code> position.</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;rect width=\"100\" height=\"30\"/>\n&lt;rect x=\"110\" width=\"100\" height=\"30\"/>\n&lt;rect y=\"40\" width=\"45\" height=\"30\"/>\n&lt;rect x=\"55\" y=\"40\" width=\"100\" height=\"30\"/>\n&lt;rect x=\"165\" y=\"40\" width=\"55\" height=\"30\"/></code></pre>\n\n\n\n<p>The top row of the tile contained two full-width bricks, the second brick is positioned to <code>x=\"110\"</code> allowing <code>10</code> pixels of gap before the brick. Similarly there&#8217;s <code>10</code> pixels of gap after, because the brick ends at <code>210</code> pixels  (<code>110 + 100 = 210</code>) on the horizontal axis even though the <code>&lt;pattern&gt;</code> width is <code>220</code> pixels. We need that little bit of extra space; otherwise the second brick would merge with the first brick in the adjacent tile.</p>\n\n\n\n<p>The bricks in the second (bottom) row are offset so the row contains two half bricks and one whole brick. In this case, we want the half-width bricks to merge so there’s no gap at the start or the end, allowing them to seamlessly flow with the bricks in adjoining pattern tiles. When offsetting these bricks, we also have to include half gaps, thus the <code>x</code> values are <code>55</code> and <code>165</code>, respectively.</p>\n\n\n<h3 id=\"element-reuse-43b-154b-total\">Element reuse, (-43B, 154B total)</h3>\n\n\n<p>It seems inefficient to define each brick so explicitly. Isn’t there some way to optimize SVG patterns by reusing the shapes instead?</p>\n\n\n\n<p>I don’t think it’s widely known that SVG has a <code>&lt;use&gt;</code> element. You can reference another element with it and render that referenced element wherever <code>&lt;use&gt;</code> is used. This saves quite a few bytes because we can omit specifying the widths and heights of each brick, except for the first one.</p>\n\n\n\n<p>That said, <code>&lt;use&gt;</code> does come with a little price. That is, we have to add an <code>id</code> for the element we want to reuse.</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;rect id=\"b\" width=\"100\" height=\"30\"/>\n&lt;use href=\"#b\" x=\"110\"/>\n&lt;use href=\"#b\" x=\"-55\" y=\"40\"/>\n&lt;use href=\"#b\" x=\"55\" y=\"40\"/>\n&lt;use href=\"#b\" x=\"165\" y=\"40\"/></code></pre>\n\n\n\n<p>The shortest <code>id</code> possible is one character, so I chose “b” for brick. The <code>&lt;use&gt;</code> element can be positioned similarly to <code>&lt;rect&gt;</code>, with the <code>x</code> and <code>y</code> attributes as offsets. Since each brick is full-width now that we’ve switched to <code>&lt;use&gt;</code> (remember, we explicitly halved the bricks in the second row of the pattern tile), we have to use a negative <code>x</code> value in the second row, then make sure the last brick overflows from the tile for that seamless connection between bricks. These are okay, though, because anything that falls outside of the pattern tile is automatically cut off.</p>\n\n\n\n<p>Can you spot some repeating strings that can be written more efficiently? Let’s work on those next.</p>\n\n\n<h3 id=\"rewriting-to-path-54b-100b-total\">Rewriting to path (-54B, 100B total)</h3>\n\n\n<p><code>&lt;path&gt;</code> is probably the most powerful element in SVG. You can draw just about any shape with “commands” in its <code>d</code> attribute. There are 20 commands available, but we only need the simplest ones for rectangles.</p>\n\n\n\n<p>Here’s where I landed with that:</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;path d=\"M0 0h100v30h-100z\n         M110 0h100v30h-100\n         M0 40h45v30h-45z\n         M55 40h100v30h-100z\n         M165 40h55v30h-55z\"/></code></pre>\n\n\n\n<p>I know, super weird numbers and letters! <a href=\"https://css-tricks.com/svg-path-syntax-illustrated-guide/\">They all have meaning</a>, of course. Here’s what’s happening in this specific case:</p>\n\n\n\n<ul><li><strong><code>M{x} {y}</code>:</strong> Moves to a point based on coordinates.</li><li><strong><code>z</code>:</strong> Closes the current segment.</li><li><strong><code>h{x}</code>:</strong> Draws a horizontal line from the current point, with the length of <code>x</code> in the direction defined by the sign of <code>x</code>. Lowercase <code>x</code> indicates a relative coordinate.</li><li><strong><code>v{y}</code>:</strong> Draws a vertical line from the current point, with the length of <code>y</code> in the direction defined by the sign of <code>y</code>. Lowercase <code>y</code> indicates a relative coordinate.</li></ul>\n\n\n\n<p>This markup is much more terse than the previous one (line breaks and indentation whitespace is only for readability). And, hey, we&#8217;ve managed to cut out half of the initial size, arriving at 100 bytes. Still, something makes me feel like this could be smaller…</p>\n\n\n<h3 id=\"tile-revision-38b-62b-total\">Tile revision (-38B, 62B total)</h3>\n\n\n<p>Doesn’t our pattern tile have repeating parts? It’s clear that in the first row a whole brick is repeated, but what about the second row? It’s a bit harder to see, but if we cut the middle brick in half it becomes obvious.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"495\" height=\"180\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058595954_half.png?resize=495%2C180&#038;ssl=1\" alt=\"The left half preceding the red line is the same as the right side.\" class=\"wp-image-364093\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058595954_half.png?w=495&amp;ssl=1 495w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058595954_half.png?resize=300%2C109&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Well, the middle brick isn’t exactly cut in half. There’s a slight offset because we also have to account for the gap. Anyways, we just found a simpler base tile pattern, which means fewer bytes! This also means we have to halve the <code>width</code> of our <code>&lt;pattern&gt;</code> element from 220 to 110.</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;pattern id=\"p\" width=\"110\" height=\"80\" patternUnits=\"userSpaceOnUse\">\n  &lt;!-- pattern content here -->\n&lt;/pattern></code></pre>\n\n\n\n<p>Now let’s see how the simplified tile is drawn with <code>&lt;path&gt;</code>:</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;path d=\"M0 0h100v30h-100z\n         M0 40h45v30h-45z\n         M55 40h55v30h-55z\"/></code></pre>\n\n\n\n<p>The size is reduced to 62 bytes, which is already less than a third of the original size! But why stop here when there’s even more we can do!</p>\n\n\n<h3 id=\"shortening-path-commands-9b-53b-total\">Shortening path commands (-9B, 53B total)</h3>\n\n\n<p>It’s worth getting a little deeper into the <code>&lt;path&gt;</code> element because it provides more hints for optimizing SVG patterns. One misconception I’ve had when working with <code>&lt;path&gt;</code> is regarding how the <code>fill</code> attribute works. Having played a lot with MS Paint in my childhood, I’ve learned that any shape I want to fill with a solid color has to be closed, i.e. have no open points. Otherwise, the paint will leak out of the shape and spill over everything.</p>\n\n\n\n<p>In SVG, however, this is not true. Let me quote <a href=\"http://www.w3.org/TR/SVG/painting.html#FillProperties\" rel=\"noopener\">the spec</a> itself:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The fill operation fills open subpaths by performing the fill operation as if an additional &#8220;closepath&#8221; command were added to the path to connect the last point of the subpath with the first point of the subpath.</p></blockquote>\n\n\n\n<p>This means we can omit the close path commands (<code>z</code>), because the subpaths are considered automatically closed when filled.</p>\n\n\n\n<p>Another useful thing to know about path commands is that they come in uppercase and lowercase variations. Lowercase letters mean that relative coordinates are used; uppercase letters mean absolute coordinates are used instead.</p>\n\n\n\n<p>It’s a little trickier than that with the <code>H</code> and <code>V</code> commands because they only include one coordinate. Here’s how I would describe these two commands:</p>\n\n\n\n<ul><li><strong><code>H{x}</code>:</strong> Draws a horizontal line from the current point to coordinate <code>x</code>.</li><li><strong><code>V{y}</code>:</strong> Draws a vertical line from the current point to coordinate <code>y</code>.</li></ul>\n\n\n\n<p>When we are drawing the first brick in the pattern tile, we start from the <code>(0,0)</code> coordinates. We then draw a horizontal line to <code>(100,0)</code> and a vertical line to <code>(100,30)</code>, and finally, draw a horizontal line to <code>(0,30)</code>. We used the <code>h-100</code> command in the last line, but it is the equivalent of <code>H0</code>, which is two bytes instead of five. We can replace two similar occurrences and pare the code of our <code>&lt;path&gt;</code> down to this:</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;path d=\"M0 0h100v30H0\n         M0 40h45v30H0\n         M55 40h55v30H55\"/></code></pre>\n\n\n\n<p>Another 9 bytes shaved off — how much smaller can we go?</p>\n\n\n<h3 id=\"bridging-5b-48b-total\">Bridging (-5B, 48B total)</h3>\n\n\n<p>The longest commands standing in our way of a fully-optimized SVG pattern are the “move to” commands which take up 4, 5, and 6 bytes, respectively. One constraint we have is that:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>A path data segment (if there is one) must begin with a &#8220;moveto&#8221; command.</p></blockquote>\n\n\n\n<p>But that’s okay. The first one is the shortest anyways. If we swap the rows, we can come up with a path definition where we only have to move either horizontally or vertically between the bricks. What if we could use the <code>h</code> and <code>v</code> commands there instead of <code>M</code>?</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2127\" height=\"1370\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=2127%2C1370&#038;ssl=1\" alt=\"\" class=\"wp-image-364094\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?w=2127&amp;ssl=1 2127w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=300%2C193&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=1024%2C660&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=768%2C495&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=1536%2C989&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=2048%2C1319&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=1000%2C644&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The path starts from the red dot in the top-left corner. Red are the path commands supported with arrows, black are the coordinates the arrows point to.</figcaption></figure>\n\n\n\n<p>The above diagram shows how the three shapes can be drawn with a single path. Note that we are leveraging the fact that the <code>fill</code> operation automatically closes the open part between <code>(110,0)</code> and <code>(0,0)</code>. With this rearrangement, we also moved the gap to the left of the full-width brick in the second row. Here’s how the code looks, still broken into one brick per line:</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;path d=\"M0 0v30h50V0\n         h10v30h50\n         v10H10v30h100V0\"/></code></pre>\n\n\n\n<p>Surely, we’ve found the absolute smallest solution now that we’re down to 48 bytes, right?! Well…</p>\n\n\n<h3 id=\"digit-trimming-4b-44b-total\">Digit trimming (-4B, 44B total)</h3>\n\n\n<p>If you can be a bit flexible with the dimensions, there&#8217;s another little way we can optimize SVG patterns. We&#8217;ve been working with a brick width of <code>100</code> pixels, but that’s three bytes. Changing it to <code>90</code> means one less byte whenever we need to write it. Similarly, we used a gap of <code>10</code> pixels — but if we change it to <code>8</code> instead, we save a byte on each of those occurrences.</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;path d=\"M0 0v30h45V0\n         h8v30h45\n         v8H8v30h90V0\"/></code></pre>\n\n\n\n<p>Of course, this also means we have to adjust the pattern dimensions accordingly. Here’s the final optimized SVG pattern code:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;pattern id=\"p\" width=\"98\" height=\"76\" patternUnits=\"userSpaceOnUse\">\n  &lt;path d=\"M0 0v30h45V0h8v30h45v8H8v30h90V0\"/>\n&lt;/pattern></code></pre>\n\n\n\n<p>The second line in the above snippet — not counting the indentations — is <strong>44 bytes</strong>. We got here from 197 bytes in six iterations. That’s a chunky <strong>77.7% size reduction</strong>!</p>\n\n\n\n<p>I’m wondering though… is this really the smallest size possible? Have we looked at all possible ways to optimize SVG patterns?</p>\n\n\n\n<p>I invite you to try and further minify this code, or even experiment with alternative methods for optimizing SVG patterns. I would love to see if we could find the true global minimum with the wisdom of the crowd!</p>\n\n\n<h3 id=\"more-on-creating-and-optimizing-svg-patterns\">More on creating and optimizing SVG patterns</h3>\n\n\n<p>If you are interested to learn more about creating and optimizing SVG patterns, read my article about <a href=\"https://css-tricks.com/creating-patterns-with-svg-filters/\">creating patterns with SVG filters</a>. Or, if you want to check out a gallery of 60+ patterns, you can view the <a href=\"https://codepen.io/collection/DRMKdB?grid_type=grid\" rel=\"noopener\">PetitePatterns CodePen Collection</a>. Lastly, you’re welcome to watch <a href=\"https://www.youtube.com/playlist?list=PL59B91voqsL0OeMKH4qImsHdkKQzbzvmJ\" rel=\"noopener\">my tutorials on YouTube</a> to help you get even deeper into SVG patterns.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/optimizing-svg-patterns/\">Optimizing SVG Patterns to Their Smallest Size</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "I recently created a brick wall pattern as part of my #PetitePatterns series, a challenge where I create organic-looking patterns or textures in SVG within 560 bytes (or approximately the size of two tweets). To fit this constraint, I have gone through a journey that has taught me some radical ways of optimizing SVG patterns so that they contain as little code as possible without affecting the overall image quality.\n\n\n\nI want to walk you through the process and show you how we can take an SVG pattern that starts at 197 bytes all the way down to a mere 44 bytes — a whopping 77.7% reduction!\n\n\n\n\n\n\n\n\n\n\nThe SVG pattern\n\n\nCodePen Embed Fallback\n\n\n\nThis is what’s called a “running bond” brick pattern. It’s the most common brick pattern out there, and one you’ve surely seen before: each row of bricks is offset by one half the length of a brick, creating a repeating staggered pattern. The arrangement is pretty simple, making SVG’s <pattern> element a perfect fit to reproduce it in code.\n\n\n\nThe SVG <pattern> element uses a pre-defined graphic object which can be replicated (or “tiled”) at fixed intervals along the horizontal and vertical axes. Essentially, we define a rectangular tile pattern and it gets repeated to paint the fill area.\n\n\n\nFirst, let’s set the dimensions of a brick and the gap between each brick. For the sake of simplicity, let’s use clean, round numbers: a width of 100 and a height of 30 for the brick, and 10 for the horizontal and vertical gaps between them.\n\n\n\n\n\n\n\nNext, we have to identify our “base” tile. And by “tile” I’m talking about pattern tiles rather than physical tiles, not to be confused with the bricks. Let’s use the highlighted part of the image above as our pattern tile: two whole bricks in the first row, and one whole sandwiched between two half bricks in the second row. Notice how and where the gaps are included, because those need to be included in the repeated pattern tile.\n\n\n\nWhen using <pattern>, we have to define the pattern’s width and height, which correspond to the width and height of the base tile. To get the dimensions, we need a little math:\n\n\n\nTile Width  = 2(Brick Width) + 2(Gap) = 2(100) + 2(10) = 220\nTile Height = 2(Bright Height) + 2(Gap) = 2(30) + 2(10) = 80\n\n\n\nAlright, so our pattern tile is 220✕80. We also have to set the patternUnits attribute, where the value userSpaceOnUse essentially means pixels. Finally, adding an id to the pattern is necessary so that it can be referenced when we are painting another element with it.\n\n\n\n<pattern id=\"p\" width=\"220\" height=\"80\" patternUnits=\"userSpaceOnUse\">\n  <!-- pattern content here -->\n</pattern>\n\n\n\nNow that we have established the tile dimensions, the challenge is to create the code for the tile in a way that renders the graphic with the smallest number of bytes possible. This is what we hope to end up with at the very end:\n\n\n\nThe bricks (in black) and gaps (in white) of the final running bond pattern\n\n\nInitial markup (197 bytes)\n\n\nThe simplest and most declarative approach to recreate this pattern that comes to my mind is to draw five rectangles. By default, the fill of an SVG element is black and the stroke is transparent. This works well for optimizing SVG patterns, as we don’t have to explicitly declare those in the code.\n\n\n\nEach line in the code below defines a rectangle. The width and height are always set, and the x and y positions are only set if a rectangle is offset from the 0 position.\n\n\n\n<rect width=\"100\" height=\"30\"/>\n<rect x=\"110\" width=\"100\" height=\"30\"/>\n<rect y=\"40\" width=\"45\" height=\"30\"/>\n<rect x=\"55\" y=\"40\" width=\"100\" height=\"30\"/>\n<rect x=\"165\" y=\"40\" width=\"55\" height=\"30\"/>\n\n\n\nThe top row of the tile contained two full-width bricks, the second brick is positioned to x=\"110\" allowing 10 pixels of gap before the brick. Similarly there’s 10 pixels of gap after, because the brick ends at 210 pixels  (110 + 100 = 210) on the horizontal axis even though the <pattern> width is 220 pixels. We need that little bit of extra space; otherwise the second brick would merge with the first brick in the adjacent tile.\n\n\n\nThe bricks in the second (bottom) row are offset so the row contains two half bricks and one whole brick. In this case, we want the half-width bricks to merge so there’s no gap at the start or the end, allowing them to seamlessly flow with the bricks in adjoining pattern tiles. When offsetting these bricks, we also have to include half gaps, thus the x values are 55 and 165, respectively.\n\n\nElement reuse, (-43B, 154B total)\n\n\nIt seems inefficient to define each brick so explicitly. Isn’t there some way to optimize SVG patterns by reusing the shapes instead?\n\n\n\nI don’t think it’s widely known that SVG has a <use> element. You can reference another element with it and render that referenced element wherever <use> is used. This saves quite a few bytes because we can omit specifying the widths and heights of each brick, except for the first one.\n\n\n\nThat said, <use> does come with a little price. That is, we have to add an id for the element we want to reuse.\n\n\n\n<rect id=\"b\" width=\"100\" height=\"30\"/>\n<use href=\"#b\" x=\"110\"/>\n<use href=\"#b\" x=\"-55\" y=\"40\"/>\n<use href=\"#b\" x=\"55\" y=\"40\"/>\n<use href=\"#b\" x=\"165\" y=\"40\"/>\n\n\n\nThe shortest id possible is one character, so I chose “b” for brick. The <use> element can be positioned similarly to <rect>, with the x and y attributes as offsets. Since each brick is full-width now that we’ve switched to <use> (remember, we explicitly halved the bricks in the second row of the pattern tile), we have to use a negative x value in the second row, then make sure the last brick overflows from the tile for that seamless connection between bricks. These are okay, though, because anything that falls outside of the pattern tile is automatically cut off.\n\n\n\nCan you spot some repeating strings that can be written more efficiently? Let’s work on those next.\n\n\nRewriting to path (-54B, 100B total)\n\n\n<path> is probably the most powerful element in SVG. You can draw just about any shape with “commands” in its d attribute. There are 20 commands available, but we only need the simplest ones for rectangles.\n\n\n\nHere’s where I landed with that:\n\n\n\n<path d=\"M0 0h100v30h-100z\n         M110 0h100v30h-100\n         M0 40h45v30h-45z\n         M55 40h100v30h-100z\n         M165 40h55v30h-55z\"/>\n\n\n\nI know, super weird numbers and letters! They all have meaning, of course. Here’s what’s happening in this specific case:\n\n\n\nM{x} {y}: Moves to a point based on coordinates.z: Closes the current segment.h{x}: Draws a horizontal line from the current point, with the length of x in the direction defined by the sign of x. Lowercase x indicates a relative coordinate.v{y}: Draws a vertical line from the current point, with the length of y in the direction defined by the sign of y. Lowercase y indicates a relative coordinate.\n\n\n\nThis markup is much more terse than the previous one (line breaks and indentation whitespace is only for readability). And, hey, we’ve managed to cut out half of the initial size, arriving at 100 bytes. Still, something makes me feel like this could be smaller…\n\n\nTile revision (-38B, 62B total)\n\n\nDoesn’t our pattern tile have repeating parts? It’s clear that in the first row a whole brick is repeated, but what about the second row? It’s a bit harder to see, but if we cut the middle brick in half it becomes obvious.\n\n\n\n\n\n\n\nWell, the middle brick isn’t exactly cut in half. There’s a slight offset because we also have to account for the gap. Anyways, we just found a simpler base tile pattern, which means fewer bytes! This also means we have to halve the width of our <pattern> element from 220 to 110.\n\n\n\n<pattern id=\"p\" width=\"110\" height=\"80\" patternUnits=\"userSpaceOnUse\">\n  <!-- pattern content here -->\n</pattern>\n\n\n\nNow let’s see how the simplified tile is drawn with <path>:\n\n\n\n<path d=\"M0 0h100v30h-100z\n         M0 40h45v30h-45z\n         M55 40h55v30h-55z\"/>\n\n\n\nThe size is reduced to 62 bytes, which is already less than a third of the original size! But why stop here when there’s even more we can do!\n\n\nShortening path commands (-9B, 53B total)\n\n\nIt’s worth getting a little deeper into the <path> element because it provides more hints for optimizing SVG patterns. One misconception I’ve had when working with <path> is regarding how the fill attribute works. Having played a lot with MS Paint in my childhood, I’ve learned that any shape I want to fill with a solid color has to be closed, i.e. have no open points. Otherwise, the paint will leak out of the shape and spill over everything.\n\n\n\nIn SVG, however, this is not true. Let me quote the spec itself:\n\n\n\nThe fill operation fills open subpaths by performing the fill operation as if an additional “closepath” command were added to the path to connect the last point of the subpath with the first point of the subpath.\n\n\n\nThis means we can omit the close path commands (z), because the subpaths are considered automatically closed when filled.\n\n\n\nAnother useful thing to know about path commands is that they come in uppercase and lowercase variations. Lowercase letters mean that relative coordinates are used; uppercase letters mean absolute coordinates are used instead.\n\n\n\nIt’s a little trickier than that with the H and V commands because they only include one coordinate. Here’s how I would describe these two commands:\n\n\n\nH{x}: Draws a horizontal line from the current point to coordinate x.V{y}: Draws a vertical line from the current point to coordinate y.\n\n\n\nWhen we are drawing the first brick in the pattern tile, we start from the (0,0) coordinates. We then draw a horizontal line to (100,0) and a vertical line to (100,30), and finally, draw a horizontal line to (0,30). We used the h-100 command in the last line, but it is the equivalent of H0, which is two bytes instead of five. We can replace two similar occurrences and pare the code of our <path> down to this:\n\n\n\n<path d=\"M0 0h100v30H0\n         M0 40h45v30H0\n         M55 40h55v30H55\"/>\n\n\n\nAnother 9 bytes shaved off — how much smaller can we go?\n\n\nBridging (-5B, 48B total)\n\n\nThe longest commands standing in our way of a fully-optimized SVG pattern are the “move to” commands which take up 4, 5, and 6 bytes, respectively. One constraint we have is that:\n\n\n\nA path data segment (if there is one) must begin with a “moveto” command.\n\n\n\nBut that’s okay. The first one is the shortest anyways. If we swap the rows, we can come up with a path definition where we only have to move either horizontally or vertically between the bricks. What if we could use the h and v commands there instead of M?\n\n\n\nThe path starts from the red dot in the top-left corner. Red are the path commands supported with arrows, black are the coordinates the arrows point to.\n\n\n\nThe above diagram shows how the three shapes can be drawn with a single path. Note that we are leveraging the fact that the fill operation automatically closes the open part between (110,0) and (0,0). With this rearrangement, we also moved the gap to the left of the full-width brick in the second row. Here’s how the code looks, still broken into one brick per line:\n\n\n\n<path d=\"M0 0v30h50V0\n         h10v30h50\n         v10H10v30h100V0\"/>\n\n\n\nSurely, we’ve found the absolute smallest solution now that we’re down to 48 bytes, right?! Well…\n\n\nDigit trimming (-4B, 44B total)\n\n\nIf you can be a bit flexible with the dimensions, there’s another little way we can optimize SVG patterns. We’ve been working with a brick width of 100 pixels, but that’s three bytes. Changing it to 90 means one less byte whenever we need to write it. Similarly, we used a gap of 10 pixels — but if we change it to 8 instead, we save a byte on each of those occurrences.\n\n\n\n<path d=\"M0 0v30h45V0\n         h8v30h45\n         v8H8v30h90V0\"/>\n\n\n\nOf course, this also means we have to adjust the pattern dimensions accordingly. Here’s the final optimized SVG pattern code:\n\n\n\n<pattern id=\"p\" width=\"98\" height=\"76\" patternUnits=\"userSpaceOnUse\">\n  <path d=\"M0 0v30h45V0h8v30h45v8H8v30h90V0\"/>\n</pattern>\n\n\n\nThe second line in the above snippet — not counting the indentations — is 44 bytes. We got here from 197 bytes in six iterations. That’s a chunky 77.7% size reduction!\n\n\n\nI’m wondering though… is this really the smallest size possible? Have we looked at all possible ways to optimize SVG patterns?\n\n\n\nI invite you to try and further minify this code, or even experiment with alternative methods for optimizing SVG patterns. I would love to see if we could find the true global minimum with the wisdom of the crowd!\n\n\nMore on creating and optimizing SVG patterns\n\n\nIf you are interested to learn more about creating and optimizing SVG patterns, read my article about creating patterns with SVG filters. Or, if you want to check out a gallery of 60+ patterns, you can view the PetitePatterns CodePen Collection. Lastly, you’re welcome to watch my tutorials on YouTube to help you get even deeper into SVG patterns.\n\nOptimizing SVG Patterns to Their Smallest Size originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-03-18T22:31:22.000Z",
      "date_modified": "2022-03-18T22:31:22.000Z",
      "_plugin": {
        "pageFilename": "498da05399d3b64e4e01a44879d5e72177c7ee66d238a2a1372a3cc1c45089d0.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=365042",
      "url": "https://css-tricks.com/css-tricks-is-joining-digitalocean/",
      "title": "CSS-Tricks is joining DigitalOcean!",
      "summary": "Hey hey!\nI’ve got a big announcement to make here. (Where’s my gong? I feel like this really needs a good gong hit.)\nCSS-Tricks, this very website you’re looking at, has been acquired by DigitalOcean!\nYou can hear …\n\nCSS-Tricks is joining DigitalOcean! originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Hey hey!</p>\n\n\n\n<p>I&#8217;ve got a big announcement to make here. (Where&#8217;s my gong? I feel like this really needs a good gong hit.)</p>\n\n\n\n<p id=\"announcement-main\">CSS-Tricks, <em>this very website you&#8217;re looking at</em>, has been acquired by <a href=\"https://www.digitalocean.com/?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=website_link\">DigitalOcean</a>!</p>\n\n\n\n<p>You can <a href=\"https://www.digitalocean.com/blog/css-tricks-joins-digitalocean?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=website_link\">hear from them directly on the DigitalOcean blog</a> as well. </p>\n\n\n\n<span id=\"more-365042\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.digitalocean.com/?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=website_link\"><img loading=\"lazy\" width=\"1024\" height=\"596\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/do-x-css.png?resize=1024%2C596&#038;ssl=1\" alt=\"Digital Ocean logo + CSS-Tricks logo under the sea with little fishies.\" class=\"wp-image-365062\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/do-x-css.png?resize=1024%2C596&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/do-x-css.png?resize=300%2C175&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/do-x-css.png?resize=768%2C447&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/do-x-css.png?w=1100&amp;ssl=1 1100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>This will be the most fun if we have a conversation about it, so allow me to kick it off. I&#8217;ll pretend to be you at first and then you can be you in the comments.</p>\n\n\n\n<div id=\"conversation\" class=\"wp-container-62439ee337e3c wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<p class=\"ticss-8514285b reader\"><strong>Hey, congrats!</strong></p>\n\n\n\n<p>Thanks!&nbsp;</p>\n\n\n\n<p class=\"reader\"><strong>DigitalOcean? Aren&#8217;t they like a… web host?</strong></p>\n\n\n\n<p>They are! A very good one. You can build anything on DigitalOcean infrastructure (probably best to think of them as a <em>cloud computing platform</em> that has tools ranging from servers to managed Kubernetes). One thing I think is particularly cool is their new <a href=\"https://www.digitalocean.com/products/app-platform?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=website_link\">App Platform</a> which to me feels extra aligned with front-end developers like me. We&#8217;ve <a href=\"https://css-tricks.com/app-platform-on-digital-ocean/\">covered that</a> before. Also, their whole concept of <a href=\"https://www.digitalocean.com/products/droplets?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=website_link\">Droplets</a> (super simple servers that are quick to spin up) has been transformative in the industry.&nbsp; But more importantly about this acquisition… have you seen their <a href=\"https://www.digitalocean.com/community?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=website_link\">DigitalOcean Community</a> site? It&#8217;s loaded with top-notch developer education. DigitalOcean has been super committed to that for a long time, and to me makes this a very natural and well-suited move.</p>\n\n\n\n<p class=\"reader\"><strong>What happens to CSS-Tricks?</strong></p>\n\n\n\n<p>The site and content is <em>staying right here</em>. DigitalOcean is committed to continuing to produce high-quality content on front-end development and tending to the trove of content that exists here already.&nbsp;</p>\n\n\n\n<p class=\"reader\"><strong>Will you still be running CSS-Tricks?</strong></p>\n\n\n\n<p>I will be working with the DigitalOcean team as an advisor as we transition CSS-Tricks to DigitalOcean’s management, and will then step back to focus on my other projects.&nbsp;</p>\n\n\n\n<p class=\"reader\"><strong>Why now?</strong></p>\n\n\n\n<p>When I started CSS-Tricks in 2007, I couldn’t have imagined how much it would grow. I <em>wanted</em> it to grow, that was the plan, but now it&#8217;s a far bigger job than any one person can do. That, I was never ready for.&nbsp;</p>\n\n\n\n<p>Let me take a quick moment to give some thanks here. I had the incredible help of <a href=\"https://geoffgraham.me/\" rel=\"noopener\">Geoff</a> as lead editor, sponsor wrangler, and site manager. <a href=\"https://www.robinrendle.com/\" rel=\"noopener\">Robin</a> turned the <a href=\"https://css-tricks.com/newsletters/\">newsletter</a> into the must-read industry rag it is now. It&#8217;s a family business as well! My wife Miranda helped with the books, working with authors, and her guidance on running the site as a proper publication has led the site where it is. I literally couldn&#8217;t have done it without any one of them. And of course, the<a href=\"https://css-tricks.com/authors/\"> incredible group of authors</a>, with a special shout out to <a href=\"https://sarahdrasnerdesign.com/\" rel=\"noopener\">Sarah</a>, a long-time staff writer and friend. </p>\n\n\n\n<p>A small but mighty team, indeed. And that&#8217;s the thing. CSS-Tricks deserves more human muscle behind it than I&#8217;ve been able to provide for it. That&#8217;s where DigitalOcean comes in. That&#8217;s the &#8220;why now.&#8221; They have the resources to put behind CSS-Tricks, and the motivation to do so. I fully trust them to do it, as they&#8217;ve been successfully doing it themselves for a long time.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n</div></div>\n\n\n\n<p>OK! Your turn! If you have any thoughts or questions, feel free to comment below. We&#8217;ll read them all and publish anything useful and constructive.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-tricks-is-joining-digitalocean/\">CSS-Tricks is joining DigitalOcean!</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Hey hey!\n\n\n\nI’ve got a big announcement to make here. (Where’s my gong? I feel like this really needs a good gong hit.)\n\n\n\nCSS-Tricks, this very website you’re looking at, has been acquired by DigitalOcean!\n\n\n\nYou can hear from them directly on the DigitalOcean blog as well. \n\n\n\n\n\n\n\n\n\n\n\nThis will be the most fun if we have a conversation about it, so allow me to kick it off. I’ll pretend to be you at first and then you can be you in the comments.\n\n\n\n\nHey, congrats!\n\n\n\nThanks! \n\n\n\nDigitalOcean? Aren’t they like a… web host?\n\n\n\nThey are! A very good one. You can build anything on DigitalOcean infrastructure (probably best to think of them as a cloud computing platform that has tools ranging from servers to managed Kubernetes). One thing I think is particularly cool is their new App Platform which to me feels extra aligned with front-end developers like me. We’ve covered that before. Also, their whole concept of Droplets (super simple servers that are quick to spin up) has been transformative in the industry.  But more importantly about this acquisition… have you seen their DigitalOcean Community site? It’s loaded with top-notch developer education. DigitalOcean has been super committed to that for a long time, and to me makes this a very natural and well-suited move.\n\n\n\nWhat happens to CSS-Tricks?\n\n\n\nThe site and content is staying right here. DigitalOcean is committed to continuing to produce high-quality content on front-end development and tending to the trove of content that exists here already. \n\n\n\nWill you still be running CSS-Tricks?\n\n\n\nI will be working with the DigitalOcean team as an advisor as we transition CSS-Tricks to DigitalOcean’s management, and will then step back to focus on my other projects. \n\n\n\nWhy now?\n\n\n\nWhen I started CSS-Tricks in 2007, I couldn’t have imagined how much it would grow. I wanted it to grow, that was the plan, but now it’s a far bigger job than any one person can do. That, I was never ready for. \n\n\n\nLet me take a quick moment to give some thanks here. I had the incredible help of Geoff as lead editor, sponsor wrangler, and site manager. Robin turned the newsletter into the must-read industry rag it is now. It’s a family business as well! My wife Miranda helped with the books, working with authors, and her guidance on running the site as a proper publication has led the site where it is. I literally couldn’t have done it without any one of them. And of course, the incredible group of authors, with a special shout out to Sarah, a long-time staff writer and friend. \n\n\n\nA small but mighty team, indeed. And that’s the thing. CSS-Tricks deserves more human muscle behind it than I’ve been able to provide for it. That’s where DigitalOcean comes in. That’s the “why now.” They have the resources to put behind CSS-Tricks, and the motivation to do so. I fully trust them to do it, as they’ve been successfully doing it themselves for a long time.\n\n\n\n\n\n\n\n\nOK! Your turn! If you have any thoughts or questions, feel free to comment below. We’ll read them all and publish anything useful and constructive.\n\nCSS-Tricks is joining DigitalOcean! originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-03-15T12:18:44.000Z",
      "date_modified": "2022-03-15T12:18:44.000Z",
      "_plugin": {
        "pageFilename": "3ddc1a5258469645448d05c0412058e60b9c80704226c2b75fcdfd270a2fcd96.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363972",
      "url": "https://css-tricks.com/the-selectmenu-element/",
      "title": "Say Hello to selectmenu, a Fully Style-able select Element",
      "summary": "I want to introduce you to a new, experimental form control called <selectmenu>. We’ll get deep into it, including how much easier it is to style than a traditional <select> element. But first, let’s fill in some context …\n\nSay Hello to selectmenu, a Fully Style-able select Element originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>I want to introduce you to a new, experimental form control called <code>&lt;selectmenu&gt;</code>. We’ll get deep into it, including how much easier it is to style <a href=\"https://css-tricks.com/the-current-state-of-styling-selects-in-2019/\">than a traditional <code>&lt;select&gt;</code> element</a>. But first, let’s fill in some context about why something like <code>&lt;selectmenu&gt;</code> is needed in the first place, as it’s still evolving and in development.</p>\n\n\n\n<span id=\"more-363972\"></span>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643362344987_smileys.gif\" alt=\"An animated screenshot showing a selectmenu element with emojis as options against a bright teal background.\"/></figure>\n\n\n\n<p>Ask any web developer what they think is missing from the web platform today, chances are the ability to style form controls will be on their list. In fact, form styling was voted as one of the top-10 missing things in the <a href=\"https://2020.stateofcss.com/en-US/opinions/#currently_missing_from_css\" rel=\"noopener\">State of CSS Survey in 2020</a>. It was then further surveyed by <a href=\"https://www.gwhitworth.com\" rel=\"noopener\">Greg Whitworth</a> who <a href=\"https://www.gwhitworth.com/posts/2019/form-controls-components/\" rel=\"noopener\">showed</a> that <code>&lt;select&gt;</code> was the control web developers were having the most problems styling with CSS.</p>\n\n\n\n<p>While it’s relatively easy to style the appearance of the button part of a <code>&lt;select&gt;</code> (the thing you see in the page when the popup is closed), it’s almost impossible to style the options (the thing you see when the popup is open), let alone add more content within the popup.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"571\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-18-at-8.28.46-AM.png?resize=1024%2C571&#038;ssl=1\" alt=\"Showing the default UI of the select element in Safari.\" class=\"wp-image-363976\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-18-at-8.28.46-AM.png?resize=1024%2C571&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-18-at-8.28.46-AM.png?resize=300%2C167&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-18-at-8.28.46-AM.png?resize=768%2C428&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-18-at-8.28.46-AM.png?resize=1000%2C558&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-18-at-8.28.46-AM.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The default UI for a&nbsp;<code>&lt;select&gt;</code>&nbsp;element in Safari</figcaption></figure>\n\n\n\n<p>As a result, design systems and component libraries have been rolling out their own selects, made from scratch using custom HTML markup, CSS, and often a lot of JavaScript, in order to have something that integrates nicely with the other components.</p>\n\n\n\n<p>Unfortunately, doing so correctly with the right accessibility semantics, keyboard support, and popup positioning is not easy. Web developers have poured hours and hours over the years, trying to solve the same problems over and over, and there are many inaccessible selects out there.</p>\n\n\n\n<p>It’s about time we got a properly style-able built-in <code>&lt;select&gt;</code> so we don’t have to write this code ever again!</p>\n\n\n<h3 id=\"the-open-ui-initiative\">The Open UI initiative</h3>\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"512\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-ui-logo.png?resize=1024%2C512&#038;ssl=1\" alt=\"The Open UI logo, which is a green oval with a rounded fork-like shape with three prongs inside.\" class=\"wp-image-363977\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-ui-logo.png?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-ui-logo.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-ui-logo.png?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-ui-logo.png?resize=1000%2C500&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-ui-logo.png?w=1200&amp;ssl=1 1200w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><a href=\"https://open-ui.org/\" rel=\"noopener\">Open UI</a> is a group of developers, designers, and browser implementers who set out to solve this exact problem, and while they’re at it, tackle other missing controls too.</p>\n\n\n\n<p>The purpose of Open UI is to eventually make it possible for web developers to style and extend built-in UI controls (this includes &lt;select&gt;, but dropdowns, checkboxes, radio buttons, and others too). To achieve this, they produce specifications for how these controls should be implemented in the web platform as well as the accessibility requirements they should address.</p>\n\n\n\n<p>The project is still in its infancy, but things are moving fast and, as we’ll see below, exciting things are already happening.</p>\n\n\n\n<p>You can join the group and participate in the meetings, research, and specification efforts.</p>\n\n\n<h3 id=\"thenbspltselectmenugtnbspcontrol\">The <code>&lt;selectmenu&gt;</code> control</h3>\n\n\n<p>Based on the&nbsp;<a href=\"https://open-ui.org/components/select\" target=\"_blank\" rel=\"noreferrer noopener\">Open UI’s&nbsp;<code>&lt;select&gt;</code>&nbsp;proposal</a>, the implementation of a new&nbsp;<code>&lt;selectmenu&gt;</code>&nbsp;control has started in&nbsp;<a href=\"https://chromestatus.com/feature/5737365999976448\" target=\"_blank\" rel=\"noreferrer noopener\">Chromium</a>! The work is done by the Microsoft Edge team, in collaboration with the Google Chrome team.&nbsp;It’s even already available in Chromium-based browsers by enabling the&nbsp;“Experimental&nbsp;Web Platform features”&nbsp;flag in the&nbsp;<code>about:flags&nbsp;page</code>.</p>\n\n\n\n<p><code>&lt;selectmenu&gt;</code>&nbsp;is a new built-in control that provides an option selection user experience, just like&nbsp;<code>&lt;select&gt;</code>, with a button showing the selected value label, a popup that appears when that button is clicked, and a list of options that get displayed.</p>\n\n\n<h4 id=\"why-a-new-name\">Why a new name?</h4>\n\n\n<p>Why not just replace the existing <code>&lt;select&gt;</code> control? The name “selectmenu” started as a working name, but it seems to have stuck so far, and no one has come up with anything better yet.</p>\n\n\n\n<p>More importantly, the existing <code>&lt;select&gt;</code> control has been used on the web for a very long time. As such, it can probably never be changed in any significant way without causing major compatibility issues.</p>\n\n\n\n<p>So, the plan (and remember this is all still very experimental) is for <code>&lt;selectmenu&gt;</code> to be a new control, independent from <code>&lt;select&gt;</code>.</p>\n\n\n<h2 id=\"try-it-out-today\">Try it out today</h2>\n\n\n<p>This isn’t ready for production use yet, but if you’re as excited as I am about using it, here’s how:</p>\n\n\n\n<ol><li>Open a Canary version of a Chromium-based browser (Chrome, Edge).</li><li>Switch the “Experimental Web Platform features” flag in the <code>about:flags</code> page and restart.</li><li>Replace any <code>&lt;select&gt;</code> by <code>&lt;selectmenu&gt;</code> in a web page!</li></ol>\n\n\n\n<p>That’s it! It won’t do much by default, but as we’ll see later, you’ll be able to style and extend the control quite extensively with this one tag name change.</p>\n\n\n<h4 id=\"we-love-feedback\">We love feedback!</h4>\n\n\n<p>Before we go into how to use the control, if you do use it, the Open UI group and people working on the implementation in Chromium would love to hear your feedback if you have any.</p>\n\n\n\n<p>By being an early tester, you can actively help them make the control better for everyone. So, if you encounter bugs or limitations with the design of the control, please send your feedback by <a href=\"https://github.com/openui/open-ui/issues/new?title=%5Bselect%5D%20&amp;labels=select\" rel=\"noopener\">creating an issue on the Open UI GitHub repository</a>!</p>\n\n\n\n<p>And now, let’s talk about how the control works.</p>\n\n\n<h3 id=\"the-anatomy-of-a-ltselectmenugt-control\">The anatomy of a <code>&lt;selectmenu&gt;</code> control</h3>\n\n\n<p>Because the various parts of the selectmenu can be styled, it’s important to first understand its internal anatomy.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1399\" height=\"487\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643363117608_image.png?resize=1399%2C487&#038;ssl=1\" alt=\"Showing the boundaries of a selectmenu element.\" class=\"wp-image-363980\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643363117608_image.png?w=1399&amp;ssl=1 1399w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643363117608_image.png?resize=300%2C104&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643363117608_image.png?resize=1024%2C356&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643363117608_image.png?resize=768%2C267&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643363117608_image.png?resize=1000%2C348&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<ul><li><strong><code>&lt;selectmenu&gt;</code></strong> is the root element that contains the button and listbox.</li><li><strong><code>&lt;button&gt;</code></strong> is the element that triggers the visibility of the listbox.</li><li><strong><code>&lt;selected-value&gt;</code></strong> is the element that displays the value of the currently selection option (optional). Note that this part does not necessarily have to be placed inside the <code>&lt;button&gt;</code> part.</li><li><strong><code>&lt;listbox&gt;</code></strong> is the wrapper that contains the <code>&lt;option&gt;</code>s and <code>&lt;optgroup&gt;</code>s.</li><li><strong><code>&lt;optgroup&gt;</code></strong> groups s together with an optional label.</li><li><strong><code>&lt;option&gt;</code></strong> represents the potential value that can be chosen by the user. There can be one or more.</li></ul>\n\n\n<h3 id=\"default-behavior\">Default behavior</h3>\n\n\n<p>The default behavior of the <code>&lt;selectmenu&gt;</code> control mimics the behavior of the <code>&lt;select&gt;</code> control. You can use it just like a native <code>&lt;select&gt;</code>, with the following minimal markup.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;selectmenu>\n  &lt;option>Option 1&lt;/option>\n  &lt;option>Option 2&lt;/option>\n  &lt;option>Option 3&lt;/option>\n&lt;/selectmenu></code></pre>\n\n\n\n<p>When doing so, the default <code>&lt;button&gt;</code>, <code>&lt;selected-value&gt;</code>, and <code>&lt;listbox</code> &gt;are created for you.</p>\n\n\n<h3 id=\"styling-parts-of-the-control\">Styling parts of the control</h3>\n\n\n<p>This is where things become interesting! One way to style the control to match your requirements is to use the CSS <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::part\" rel=\"noopener\"><code>::part()</code></a> pseudo-element to select the different parts within the control’s anatomy that you wish to style.</p>\n\n\n\n<p>Consider the following example where <code>::part()</code> is used to style the button and the listbox parts:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style>\n  .my-select-menu::part(button) {\n    color: white;\n    background-color: #f00;\n    padding: 5px;\n    border-radius: 5px;\n  }\n\n  .my-select-menu::part(listbox) {\n    padding: 10px;\n    margin-top: 5px;\n    border: 1px solid red;\n    border-radius: 5px;\n  }\n&lt;/style>\n&lt;selectmenu class=\"my-select-menu\">\n  &lt;option>Option 1&lt;/option>\n  &lt;option>Option 2&lt;/option>\n  &lt;option>Option 3&lt;/option>\n&lt;/selectmenu></code></pre>\n\n\n\n<p>The above example results in the following style:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-styling-parts.png?resize=186%2C265&#038;ssl=1\" alt=\"A styled selectmenu element with a red button background and a red border around the listbox.\" class=\"wp-image-363981\" width=\"186\" height=\"265\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><code>::part()</code> can be used to style the <code>&lt;button&gt;</code>, <code>&lt;selected-value&gt;</code>, and <code>&lt;listbox&gt;</code> parts of the control.</p>\n\n\n<h3 id=\"use-your-own-markup\">Use your own markup</h3>\n\n\n<p>If the above isn’t enough for your needs, you can customize the control much more by providing your own markup to replace the default one, and extend or re-order the parts.</p>\n\n\n\n<p>A <code>&lt;selectmenu&gt;</code> has named <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots#adding_flexibility_with_slots\" rel=\"noopener\">slots</a> that can be referenced to replace the default parts. For example, to replace the default button with your own, you can do the following:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style>\n  .my-custom-select [slot='button'] {\n    display: flex;\n    align-content: center;\n  }\n  .my-custom-select button {\n    padding: 5px;\n    border: none;\n    background: #f06;\n    border-radius: 5px 0 0 5px;\n    color: white;\n    font-weight: bold;\n  }\n  .my-custom-select .label {\n    padding: 5px;\n    border: 1px solid #f06;\n    border-radius: 0 5px 5px 0;\n  }\n&lt;/style>\n&lt;selectmenu class=\"my-custom-select\">\n  &lt;div slot=\"button\">\n    &lt;button behavior=\"button\">Open&lt;/button>\n    &lt;span class=\"label\">Choose an option&lt;/span>\n  &lt;/div>\n  &lt;option>Option 1&lt;/option>\n  &lt;option>Option 2&lt;/option>\n  &lt;option>Option 3&lt;/option>\n&lt;/selectmenu></code></pre>\n\n\n\n<p>The <code>slot=\"button\"</code> attribute on the outer <code>&lt;div&gt;</code> tells the <code>&lt;selectmenu&gt;</code> to replace its default button with the contents of the <code>&lt;div&gt;</code>.</p>\n\n\n\n<p>The <code>behavior=\"button\"</code> attribute on the inner <code>&lt;button&gt;</code> tells the browser that this element is what we want to use as the new button. The browser will automatically apply all the click and keyboard handling behavior to this element as well as the appropriate accessibility semantics.</p>\n\n\n\n<p>The above code snippet results in the following style:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"346\" height=\"252\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-replacing-button-part.png?resize=346%2C252&#038;ssl=1\" alt=\"A styled selectmenu with a bright pink open button and a box-shadow around the listbox.\" class=\"wp-image-363982\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-replacing-button-part.png?w=346&amp;ssl=1 346w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-replacing-button-part.png?resize=300%2C218&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Note that the <code>slot</code> and <code>behavior</code> attributes can also be used on the same element.</p>\n\n\n\n<p>You can replace the default listbox part in a similar fashion:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style>\n  .my-custom-select popup {\n    width: 300px;\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n    gap: 10px;\n    padding: 10px;\n    box-shadow: none;\n    margin: 10px 0;\n    border: 1px solid;\n    background: #f7f7f7;\n  }\n&lt;/style>\n&lt;selectmenu class=\"my-custom-select\">\n  &lt;div slot=\"listbox\">\n    &lt;popup behavior=\"listbox\">\n      &lt;option>Option 1&lt;/option>\n      &lt;option>Option 2&lt;/option>\n      &lt;option>Option 3&lt;/option>\n      &lt;option>Option 4&lt;/option>\n      &lt;option>Option 5&lt;/option>\n    &lt;/popup>\n  &lt;/div>\n&lt;/selectmenu></code></pre>\n\n\n\n<p>Interestingly, the <code>&lt;popup&gt;</code> used here is also being <a href=\"https://open-ui.org/components/popup\" rel=\"noopener\">proposed by Open UI</a> and implemented in Chromium at the moment.</p>\n\n\n\n<p>The element with <code>behavior=\"listbox\"</code> is required to be a <code>&lt;popup&gt;</code>. Applying <code>behavior=\"listbox\"</code> tells the browser to open this element when the <code>&lt;selectmenu&gt;</code> button is clicked, and the user can select <code>&lt;option&gt;</code>s inside it with mouse, arrow keys, and touch.</p>\n\n\n\n<p>The above code snippet results in the following style:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"496\" height=\"261\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-replacing-listbox-part.png?resize=496%2C261&#038;ssl=1\" alt=\"A styled selectmenu where the list box is split into two columns.\" class=\"wp-image-363983\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-replacing-listbox-part.png?w=496&amp;ssl=1 496w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-replacing-listbox-part.png?resize=300%2C158&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"extending-the-markup\">Extending the markup</h3>\n\n\n<p>Not only can you replace the default parts with your own, as seen above, you can also extend the control’s markup by adding new elements. This can be useful to augment the listbox or button with extra information, or to add new functionality.</p>\n\n\n\n<p>Consider the following example:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style>\n  .my-custom-select [slot='button'] {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n  .my-custom-select button {\n    border: none;\n    margin: 0;\n    padding: 0;\n    width: 2rem;\n    height: 2rem;\n    border-radius: 50%;\n    display: grid;\n    place-content: center;\n  }\n  .my-custom-select button::before {\n    content: '\\25BC';\n  }\n  .my-custom-select popup {\n    padding: 0;\n  }\n  .my-custom-select .section {\n    padding: 1rem 0 0;\n    background: radial-gradient(ellipse 60% 50px at center top, #000a 0%, transparent 130%);\n  }\n  .my-custom-select h3 {\n    margin: 0 0 1rem 0;\n    text-align: center;\n    color: white;\n  }\n  .my-custom-select option {\n    text-align: center;\n    padding: 0.5rem;\n  }\n&lt;/style>\n&lt;selectmenu class=\"my-custom-select\">\n  &lt;div slot=\"button\">\n    &lt;span class=\"label\">Choose a plant&lt;/span>\n    &lt;span behavior=\"selected-value\" slot=\"selected-value\">&lt;/span>\n    &lt;button behavior=\"button\">&lt;/button>\n  &lt;/div>\n  &lt;div slot=\"listbox\">\n    &lt;popup behavior=\"listbox\">\n      &lt;div class=\"section\">\n        &lt;h3>Flowers&lt;/h3>\n        &lt;option>Rose&lt;/option>\n        &lt;option>Lily&lt;/option>\n        &lt;option>Orchid&lt;/option>\n        &lt;option>Tulip&lt;/option>\n      &lt;/div>\n      &lt;div class=\"section\">\n        &lt;h3>Trees&lt;/h3>\n        &lt;option>Weeping willow&lt;/option>\n        &lt;option>Dragon tree&lt;/option>\n        &lt;option>Giant sequoia&lt;/option>\n      &lt;/div>\n    &lt;/popup>\n  &lt;/div>\n&lt;/selectmenu></code></pre>\n\n\n\n<p>Here we’re using custom markup to wrap the list of options and create our own content as seen below:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"453\" height=\"670\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-using-custom-markup.png?resize=453%2C670&#038;ssl=1\" alt=\"A styled selectmenu that contains options containing sub-options in the listbox.\" class=\"wp-image-363984\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-using-custom-markup.png?w=453&amp;ssl=1 453w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-using-custom-markup.png?resize=203%2C300&amp;ssl=1 203w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"replacing-the-entire-shadow-dom\">Replacing the entire shadow DOM</h3>\n\n\n<p>Finally, and if the above wasn’t enough, you can also extend the control&#8217;s markup by replacing its default shadow DOM altogether by calling <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow\" rel=\"noopener\"><code>attachShadow()</code></a>. For example, the demo in the <a href=\"https://open-ui.org/prototypes/selectmenu#extending-the-markup\" rel=\"noopener\">previous section</a> could be modified as follows:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;selectmenu id=\"my-custom-select\">&lt;/selectmenu>\n&lt;script>\n  const myCustomSelect = document.querySelector('#my-custom-select')\n  const shadow = myCustomSelect.attachShadow({ mode: 'closed' })\n  shadow.innerHTML = `\n    &lt;style>\n    .button-container {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n    }\n    button {\n      border: none;\n      margin: 0;\n      padding: 0;\n      width: 2rem;\n      height: 2rem;\n      border-radius: 50%;\n      display: grid;\n      place-content: center;\n    }\n    button::before {\n      content: '\\\\0025BC';\n    }\n    popup {\n      padding: 0;\n    }\n    .section {\n      padding: 1rem 0 0;\n      background: radial-gradient(ellipse 60% 50px at center top, #000a 0%, transparent 130%);\n    }\n    h3 {\n      margin: 0 0 1rem 0;\n      text-align: center;\n      color: white;\n    }\n    option {\n      text-align: center;\n      padding: 0.5rem;\n    }\n    option:hover {\n      background-color: lightgrey;\n    }\n  &lt;/style>\n  &lt;div class=\"button-container\">\n    &lt;span class=\"label\">Choose a plant&lt;/span>\n    &lt;span behavior=\"selected-value\" slot=\"selected-value\">&lt;/span>\n    &lt;button behavior=\"button\">&lt;/button>\n  &lt;/div>\n  &lt;popup behavior=\"listbox\">\n    &lt;div class=\"section\">\n      &lt;h3>Flowers&lt;/h3>\n      &lt;option>Rose&lt;/option>\n      &lt;option>Lily&lt;/option>\n      &lt;option>Orchid&lt;/option>\n      &lt;option>Tulip&lt;/option>\n    &lt;/div>\n    &lt;div class=\"section\">\n      &lt;h3>Trees&lt;/h3>\n      &lt;option>Weeping willow&lt;/option>\n      &lt;option>Dragon tree&lt;/option>\n      &lt;option>Giant sequoia&lt;/option>\n    &lt;/div>\n  &lt;/popup>\n  `\n&lt;/script></code></pre>\n\n\n\n<p>Written this way, the <code>&lt;selectmenu&gt;</code>&#8216;s custom markup is fully encapsulated in its shadow DOM. The <code>&lt;selectmenu&gt;</code> can therefore be dropped into any page without risk of interference from the surrounding content&#8217;s styles.</p>\n\n\n<h3 id=\"closing-remarks\">Closing remarks</h3>\n\n\n<p>As we’ve seen, the new experimental <code>&lt;selectmenu&gt;</code> control offers a lot of flexibility when it comes to styling and even extending a traditional <code>&lt;select&gt;</code>. And it does this in all the right ways, because it’s built into the browser where accessibility and viewport-aware positioning are handled for you.</p>\n\n\n\n<p>Open UI has <a href=\"https://open-ui.org/prototypes/selectmenu\" rel=\"noopener\">more documentation about <code>&lt;selectmenu&gt;</code></a>, and if you want to see more code showing how to use the <code>&lt;selectmenu&gt;</code>, <a href=\"https://microsoftedge.github.io/Demos/selectmenu/\" rel=\"noopener\">here are a few demos</a> as well.</p>\n\n\n\n<p>Again, this is work in progress and will most certainly change as a result of feedback received by the Open UI group.</p>\n\n\n\n<p>I can’t wait to see specifications start to appear in HTML and CSS standard bodies, and for the implementation to become more stable, as well as see other browser engines getting interested in this. You can help make this happen! Testing the control, <a href=\"https://github.com/openui/open-ui/issues/new?title=%5Bselect%5D%20&amp;labels=select\" rel=\"noopener\">reporting issues</a>, or <a href=\"https://open-ui.org/get-involved\" rel=\"noopener\">getting involved</a> are all great ways to help push this effort forward.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-selectmenu-element/\">Say Hello to selectmenu, a Fully Style-able select Element</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "I want to introduce you to a new, experimental form control called <selectmenu>. We’ll get deep into it, including how much easier it is to style than a traditional <select> element. But first, let’s fill in some context about why something like <selectmenu> is needed in the first place, as it’s still evolving and in development.\n\n\n\n\n\n\n\n\n\n\n\nAsk any web developer what they think is missing from the web platform today, chances are the ability to style form controls will be on their list. In fact, form styling was voted as one of the top-10 missing things in the State of CSS Survey in 2020. It was then further surveyed by Greg Whitworth who showed that <select> was the control web developers were having the most problems styling with CSS.\n\n\n\nWhile it’s relatively easy to style the appearance of the button part of a <select> (the thing you see in the page when the popup is closed), it’s almost impossible to style the options (the thing you see when the popup is open), let alone add more content within the popup.\n\n\n\nThe default UI for a <select> element in Safari\n\n\n\nAs a result, design systems and component libraries have been rolling out their own selects, made from scratch using custom HTML markup, CSS, and often a lot of JavaScript, in order to have something that integrates nicely with the other components.\n\n\n\nUnfortunately, doing so correctly with the right accessibility semantics, keyboard support, and popup positioning is not easy. Web developers have poured hours and hours over the years, trying to solve the same problems over and over, and there are many inaccessible selects out there.\n\n\n\nIt’s about time we got a properly style-able built-in <select> so we don’t have to write this code ever again!\n\n\nThe Open UI initiative\n\n\n\n\n\n\nOpen UI is a group of developers, designers, and browser implementers who set out to solve this exact problem, and while they’re at it, tackle other missing controls too.\n\n\n\nThe purpose of Open UI is to eventually make it possible for web developers to style and extend built-in UI controls (this includes <select>, but dropdowns, checkboxes, radio buttons, and others too). To achieve this, they produce specifications for how these controls should be implemented in the web platform as well as the accessibility requirements they should address.\n\n\n\nThe project is still in its infancy, but things are moving fast and, as we’ll see below, exciting things are already happening.\n\n\n\nYou can join the group and participate in the meetings, research, and specification efforts.\n\n\nThe <selectmenu> control\n\n\nBased on the Open UI’s <select> proposal, the implementation of a new <selectmenu> control has started in Chromium! The work is done by the Microsoft Edge team, in collaboration with the Google Chrome team. It’s even already available in Chromium-based browsers by enabling the “Experimental Web Platform features” flag in the about:flags page.\n\n\n\n<selectmenu> is a new built-in control that provides an option selection user experience, just like <select>, with a button showing the selected value label, a popup that appears when that button is clicked, and a list of options that get displayed.\n\n\nWhy a new name?\n\n\nWhy not just replace the existing <select> control? The name “selectmenu” started as a working name, but it seems to have stuck so far, and no one has come up with anything better yet.\n\n\n\nMore importantly, the existing <select> control has been used on the web for a very long time. As such, it can probably never be changed in any significant way without causing major compatibility issues.\n\n\n\nSo, the plan (and remember this is all still very experimental) is for <selectmenu> to be a new control, independent from <select>.\n\n\nTry it out today\n\n\nThis isn’t ready for production use yet, but if you’re as excited as I am about using it, here’s how:\n\n\n\nOpen a Canary version of a Chromium-based browser (Chrome, Edge).Switch the “Experimental Web Platform features” flag in the about:flags page and restart.Replace any <select> by <selectmenu> in a web page!\n\n\n\nThat’s it! It won’t do much by default, but as we’ll see later, you’ll be able to style and extend the control quite extensively with this one tag name change.\n\n\nWe love feedback!\n\n\nBefore we go into how to use the control, if you do use it, the Open UI group and people working on the implementation in Chromium would love to hear your feedback if you have any.\n\n\n\nBy being an early tester, you can actively help them make the control better for everyone. So, if you encounter bugs or limitations with the design of the control, please send your feedback by creating an issue on the Open UI GitHub repository!\n\n\n\nAnd now, let’s talk about how the control works.\n\n\nThe anatomy of a <selectmenu> control\n\n\nBecause the various parts of the selectmenu can be styled, it’s important to first understand its internal anatomy.\n\n\n\n\n\n\n\n<selectmenu> is the root element that contains the button and listbox.<button> is the element that triggers the visibility of the listbox.<selected-value> is the element that displays the value of the currently selection option (optional). Note that this part does not necessarily have to be placed inside the <button> part.<listbox> is the wrapper that contains the <option>s and <optgroup>s.<optgroup> groups s together with an optional label.<option> represents the potential value that can be chosen by the user. There can be one or more.\n\n\nDefault behavior\n\n\nThe default behavior of the <selectmenu> control mimics the behavior of the <select> control. You can use it just like a native <select>, with the following minimal markup.\n\n\n\n<selectmenu>\n  <option>Option 1</option>\n  <option>Option 2</option>\n  <option>Option 3</option>\n</selectmenu>\n\n\n\nWhen doing so, the default <button>, <selected-value>, and <listbox >are created for you.\n\n\nStyling parts of the control\n\n\nThis is where things become interesting! One way to style the control to match your requirements is to use the CSS ::part() pseudo-element to select the different parts within the control’s anatomy that you wish to style.\n\n\n\nConsider the following example where ::part() is used to style the button and the listbox parts:\n\n\n\n<style>\n  .my-select-menu::part(button) {\n    color: white;\n    background-color: #f00;\n    padding: 5px;\n    border-radius: 5px;\n  }\n\n  .my-select-menu::part(listbox) {\n    padding: 10px;\n    margin-top: 5px;\n    border: 1px solid red;\n    border-radius: 5px;\n  }\n</style>\n<selectmenu class=\"my-select-menu\">\n  <option>Option 1</option>\n  <option>Option 2</option>\n  <option>Option 3</option>\n</selectmenu>\n\n\n\nThe above example results in the following style:\n\n\n\n\n\n\n\n::part() can be used to style the <button>, <selected-value>, and <listbox> parts of the control.\n\n\nUse your own markup\n\n\nIf the above isn’t enough for your needs, you can customize the control much more by providing your own markup to replace the default one, and extend or re-order the parts.\n\n\n\nA <selectmenu> has named slots that can be referenced to replace the default parts. For example, to replace the default button with your own, you can do the following:\n\n\n\n<style>\n  .my-custom-select [slot='button'] {\n    display: flex;\n    align-content: center;\n  }\n  .my-custom-select button {\n    padding: 5px;\n    border: none;\n    background: #f06;\n    border-radius: 5px 0 0 5px;\n    color: white;\n    font-weight: bold;\n  }\n  .my-custom-select .label {\n    padding: 5px;\n    border: 1px solid #f06;\n    border-radius: 0 5px 5px 0;\n  }\n</style>\n<selectmenu class=\"my-custom-select\">\n  <div slot=\"button\">\n    <button behavior=\"button\">Open</button>\n    <span class=\"label\">Choose an option</span>\n  </div>\n  <option>Option 1</option>\n  <option>Option 2</option>\n  <option>Option 3</option>\n</selectmenu>\n\n\n\nThe slot=\"button\" attribute on the outer <div> tells the <selectmenu> to replace its default button with the contents of the <div>.\n\n\n\nThe behavior=\"button\" attribute on the inner <button> tells the browser that this element is what we want to use as the new button. The browser will automatically apply all the click and keyboard handling behavior to this element as well as the appropriate accessibility semantics.\n\n\n\nThe above code snippet results in the following style:\n\n\n\n\n\n\n\nNote that the slot and behavior attributes can also be used on the same element.\n\n\n\nYou can replace the default listbox part in a similar fashion:\n\n\n\n<style>\n  .my-custom-select popup {\n    width: 300px;\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n    gap: 10px;\n    padding: 10px;\n    box-shadow: none;\n    margin: 10px 0;\n    border: 1px solid;\n    background: #f7f7f7;\n  }\n</style>\n<selectmenu class=\"my-custom-select\">\n  <div slot=\"listbox\">\n    <popup behavior=\"listbox\">\n      <option>Option 1</option>\n      <option>Option 2</option>\n      <option>Option 3</option>\n      <option>Option 4</option>\n      <option>Option 5</option>\n    </popup>\n  </div>\n</selectmenu>\n\n\n\nInterestingly, the <popup> used here is also being proposed by Open UI and implemented in Chromium at the moment.\n\n\n\nThe element with behavior=\"listbox\" is required to be a <popup>. Applying behavior=\"listbox\" tells the browser to open this element when the <selectmenu> button is clicked, and the user can select <option>s inside it with mouse, arrow keys, and touch.\n\n\n\nThe above code snippet results in the following style:\n\n\n\n\n\n\nExtending the markup\n\n\nNot only can you replace the default parts with your own, as seen above, you can also extend the control’s markup by adding new elements. This can be useful to augment the listbox or button with extra information, or to add new functionality.\n\n\n\nConsider the following example:\n\n\n\n<style>\n  .my-custom-select [slot='button'] {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n  .my-custom-select button {\n    border: none;\n    margin: 0;\n    padding: 0;\n    width: 2rem;\n    height: 2rem;\n    border-radius: 50%;\n    display: grid;\n    place-content: center;\n  }\n  .my-custom-select button::before {\n    content: '\\25BC';\n  }\n  .my-custom-select popup {\n    padding: 0;\n  }\n  .my-custom-select .section {\n    padding: 1rem 0 0;\n    background: radial-gradient(ellipse 60% 50px at center top, #000a 0%, transparent 130%);\n  }\n  .my-custom-select h3 {\n    margin: 0 0 1rem 0;\n    text-align: center;\n    color: white;\n  }\n  .my-custom-select option {\n    text-align: center;\n    padding: 0.5rem;\n  }\n</style>\n<selectmenu class=\"my-custom-select\">\n  <div slot=\"button\">\n    <span class=\"label\">Choose a plant</span>\n    <span behavior=\"selected-value\" slot=\"selected-value\"></span>\n    <button behavior=\"button\"></button>\n  </div>\n  <div slot=\"listbox\">\n    <popup behavior=\"listbox\">\n      <div class=\"section\">\n        <h3>Flowers</h3>\n        <option>Rose</option>\n        <option>Lily</option>\n        <option>Orchid</option>\n        <option>Tulip</option>\n      </div>\n      <div class=\"section\">\n        <h3>Trees</h3>\n        <option>Weeping willow</option>\n        <option>Dragon tree</option>\n        <option>Giant sequoia</option>\n      </div>\n    </popup>\n  </div>\n</selectmenu>\n\n\n\nHere we’re using custom markup to wrap the list of options and create our own content as seen below:\n\n\n\n\n\n\nReplacing the entire shadow DOM\n\n\nFinally, and if the above wasn’t enough, you can also extend the control’s markup by replacing its default shadow DOM altogether by calling attachShadow(). For example, the demo in the previous section could be modified as follows:\n\n\n\n<selectmenu id=\"my-custom-select\"></selectmenu>\n<script>\n  const myCustomSelect = document.querySelector('#my-custom-select')\n  const shadow = myCustomSelect.attachShadow({ mode: 'closed' })\n  shadow.innerHTML = `\n    <style>\n    .button-container {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n    }\n    button {\n      border: none;\n      margin: 0;\n      padding: 0;\n      width: 2rem;\n      height: 2rem;\n      border-radius: 50%;\n      display: grid;\n      place-content: center;\n    }\n    button::before {\n      content: '\\\\0025BC';\n    }\n    popup {\n      padding: 0;\n    }\n    .section {\n      padding: 1rem 0 0;\n      background: radial-gradient(ellipse 60% 50px at center top, #000a 0%, transparent 130%);\n    }\n    h3 {\n      margin: 0 0 1rem 0;\n      text-align: center;\n      color: white;\n    }\n    option {\n      text-align: center;\n      padding: 0.5rem;\n    }\n    option:hover {\n      background-color: lightgrey;\n    }\n  </style>\n  <div class=\"button-container\">\n    <span class=\"label\">Choose a plant</span>\n    <span behavior=\"selected-value\" slot=\"selected-value\"></span>\n    <button behavior=\"button\"></button>\n  </div>\n  <popup behavior=\"listbox\">\n    <div class=\"section\">\n      <h3>Flowers</h3>\n      <option>Rose</option>\n      <option>Lily</option>\n      <option>Orchid</option>\n      <option>Tulip</option>\n    </div>\n    <div class=\"section\">\n      <h3>Trees</h3>\n      <option>Weeping willow</option>\n      <option>Dragon tree</option>\n      <option>Giant sequoia</option>\n    </div>\n  </popup>\n  `\n</script>\n\n\n\nWritten this way, the <selectmenu>‘s custom markup is fully encapsulated in its shadow DOM. The <selectmenu> can therefore be dropped into any page without risk of interference from the surrounding content’s styles.\n\n\nClosing remarks\n\n\nAs we’ve seen, the new experimental <selectmenu> control offers a lot of flexibility when it comes to styling and even extending a traditional <select>. And it does this in all the right ways, because it’s built into the browser where accessibility and viewport-aware positioning are handled for you.\n\n\n\nOpen UI has more documentation about <selectmenu>, and if you want to see more code showing how to use the <selectmenu>, here are a few demos as well.\n\n\n\nAgain, this is work in progress and will most certainly change as a result of feedback received by the Open UI group.\n\n\n\nI can’t wait to see specifications start to appear in HTML and CSS standard bodies, and for the implementation to become more stable, as well as see other browser engines getting interested in this. You can help make this happen! Testing the control, reporting issues, or getting involved are all great ways to help push this effort forward.\n\nSay Hello to selectmenu, a Fully Style-able select Element originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-03-03T15:35:32.000Z",
      "date_modified": "2022-03-03T15:35:32.000Z",
      "_plugin": {
        "pageFilename": "eef4e943525cb3779b0007d50840d9dacb95426b41e2a1e26f651c98949bf881.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=364001",
      "url": "https://css-tricks.com/build-membership-businesses-with-memberful/",
      "title": "Build Membership Businesses with Memberful",
      "summary": "(This is a sponsored post.)\nWhat would your business be like if you sold memberships? It might be more than fun to think about, in fact, it might just be transformative. With membership, would you include little add-ons or …\n\nBuild Membership Businesses with Memberful originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p><em>What would your business be like if you sold memberships?</em> It might be more than fun to think about, in fact, it might just be transformative. With membership, would you include little add-ons or perks for your biggest fans? Or could it become the entire core of what you do? Likewise, what might you help your clients build?</p>\n\n\n\n<p>Whatever you decide to do (or perhaps what a client has hired you to do), you can get it done with <a href=\"https://srv.buysellads.com/ads/long/x/T6I5BCZ4TTTTTTCLOKGN6TTTTTTKRIEOKVTTTTTTP33JLYETTTTTT7D7PRJNARP3F3UNBWPLC2YICWLDKQQN47I3C7BT\" rel=\"noopener\">Memberful</a>. It&#8217;s the best software for building membership businesses, used by the biggest creators on the web.</p>\n\n\n\n<span id=\"more-364001\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1464\" height=\"1228\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/plan-view-c75eb6fd.png?resize=1464%2C1228&#038;ssl=1\" alt=\"\" class=\"wp-image-364110\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/plan-view-c75eb6fd.png?w=1464&amp;ssl=1 1464w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/plan-view-c75eb6fd.png?resize=300%2C252&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/plan-view-c75eb6fd.png?resize=1024%2C859&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/plan-view-c75eb6fd.png?resize=768%2C644&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/plan-view-c75eb6fd.png?resize=1000%2C839&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"memberful-is-for-developers\">Memberful is for developers.</h3>\n\n\n<p>You have a goal in mind: to build a great member-powered web experience. But you&#8217;re a developer and want to build how you want to build. Good. <a href=\"https://srv.buysellads.com/ads/long/x/T6I5BCZ4TTTTTTCLOKGN6TTTTTTKRIEOKVTTTTTTP33JLYETTTTTT7D7PRJNARP3F3UNBWPLC2YICWLDKQQN47I3C7BT\" rel=\"noopener\">Memberful</a> is here to support that.</p>\n\n\n\n<p>Memberful maintains <a href=\"https://memberful.com/help/custom-development-and-api/memberful-api/\" rel=\"noopener\">a full-featured GraphQL API</a> (complete with GraphiQL explorer), webhooks, and OAth Single Sign-on to make it easy to integrate seamlessly with any stack.</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"587\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-api-explorer-c9719ed0.png?resize=1024%2C587&#038;ssl=1\" alt=\"\" class=\"wp-image-364143\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-api-explorer-c9719ed0.png?resize=1024%2C587&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-api-explorer-c9719ed0.png?resize=300%2C172&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-api-explorer-c9719ed0.png?resize=768%2C441&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-api-explorer-c9719ed0.png?resize=1000%2C574&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-api-explorer-c9719ed0.png?w=1440&amp;ssl=1 1440w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"523\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/api-docs-sidebar-495cc852.png?resize=1024%2C523&#038;ssl=1\" alt=\"\" class=\"wp-image-364144\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/api-docs-sidebar-495cc852.png?resize=1024%2C523&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/api-docs-sidebar-495cc852.png?resize=300%2C153&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/api-docs-sidebar-495cc852.png?resize=768%2C392&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/api-docs-sidebar-495cc852.png?resize=1000%2C510&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/api-docs-sidebar-495cc852.png?w=1440&amp;ssl=1 1440w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n</div>\n\n\n\n<p>Your main site in Rails? No problem. You wanna do a Jamstack thing? Perfect. Do you have a React-powered app through and through? That&#8217;ll work.</p>\n\n\n<h3 id=\"you-dont-have-to-build-entirely-from-scratch\">You don&#8217;t have to build entirely from scratch.</h3>\n\n\n<div class=\"wp-block-image\"><figure class=\"alignright size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/install-plugin-integration-active-24945a9a.png?resize=503%2C357&#038;ssl=1\" alt=\"\" class=\"wp-image-364145\" width=\"503\" height=\"357\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/install-plugin-integration-active-24945a9a.png?w=560&amp;ssl=1 560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/install-plugin-integration-active-24945a9a.png?resize=300%2C213&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure></div>\n\n\n\n<p>For example, Memberful maintains <a href=\"https://memberful.com/help/wordpress-plugin/setup/install-the-memberful-plugin/\" rel=\"noopener\">a best-in-class WordPress plugin</a> that easily gates content and adds membership to your website. So if you happen to use WordPress as your CMS, or are thinking of using it to build your website, you&#8217;ve got a first-class integration to work with.</p>\n\n\n\n<p>If you&#8217;re looking to add membership to your existing business, you&#8217;ll want a solution that <em>works with your existing technology</em>, so you can <em>launch a new revenue stream without rebuilding </em>your entire tech stack.</p>\n\n\n<h3 id=\"you-dont-even-need-to-build-a-website-to-use-memberful\"><strong>You don’t even need to build a website to use Memberful</strong>.</h3>\n\n\n<p>If you&#8217;re not looking to gate access to content on a custom website, you won&#8217;t need a website at all to use Memberful. You can use Memberful&#8217;s hosted landing page feature to sell your memberships, and then deliver your member benefits like a private podcast, protected downloads, and newsletters right through the platform — no website required.</p>\n\n\n\n<p>Say you already use other tools for your business. Maybe you do all your emailing with MailChimp. Great! Memberful fully integrates with MailChimp. Is Discord your community hub? No problem, Memberful seamlessly integrates with Discord, meaning you can offer paid subscribers perks that are unique to Discord, things like special channels or access roles.</p>\n\n\n<h3 id=\"what-are-some-common-use-cases-for-memberful\">What are some common use cases for Memberful?</h3>\n\n\n<div class=\"wp-block-image\"><figure class=\"alignright size-large is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/account-podcasts-subscribe-6c4f5323.png?resize=574%2C605&#038;ssl=1\" alt=\"\" class=\"wp-image-364149\" width=\"574\" height=\"605\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/account-podcasts-subscribe-6c4f5323.png?resize=971%2C1024&amp;ssl=1 971w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/account-podcasts-subscribe-6c4f5323.png?resize=284%2C300&amp;ssl=1 284w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/account-podcasts-subscribe-6c4f5323.png?resize=768%2C810&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/account-podcasts-subscribe-6c4f5323.png?resize=1000%2C1055&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/account-podcasts-subscribe-6c4f5323.png?w=1440&amp;ssl=1 1440w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure></div>\n\n\n\n<ul><li>Private Podcasts</li><li>Subscription Newsletters</li><li>Selling digital goods (or physical!)</li><li>Building communities</li><li>Membership-driven educational courses</li></ul>\n\n\n\n<p>Memberful handles the hard stuff so you can focus on what you do best, while earning revenue quickly. Even advanced features like gift subscriptions, coupons, referrals, free and paid trials and more, are right there for you to take advantage of.</p>\n\n\n<h3 class=\"ticss-d239e00c\" id=\"who-handles-all-the-emails\">Who handles all the emails?</h3>\n\n\n<p>Memberful does, and you get 100% control of the brand. Yet another thing you won&#8217;t need to worry about, which can otherwise be an awful lot of work and technical debt. I&#8217;m talking transactional emails here, like signup confirmation emails, welcome emails, forgot password emails, etc.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/sign-in-email-7b0efbd4.png?resize=539%2C359&#038;ssl=1\" alt=\"\" class=\"wp-image-364147\" width=\"539\" height=\"359\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/sign-in-email-7b0efbd4.png?w=801&amp;ssl=1 801w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/sign-in-email-7b0efbd4.png?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/sign-in-email-7b0efbd4.png?resize=768%2C512&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"how-does-the-money-work\">How does the money work?</h3>\n\n\n<p><a href=\"https://srv.buysellads.com/ads/long/x/T6I5BCZ4TTTTTTCLOKGN6TTTTTTKRIEOKVTTTTTTP33JLYETTTTTT7D7PRJNARP3F3UNBWPLC2YICWLDKQQN47I3C7BT\" rel=\"noopener\">Memberful has a free plan</a> to get your feet wet. You can build 2 subscription plans and do website integrations. The PRO plan starts at $25/month and lowers transaction fees to 4.9% down from 10% on the free plan.</p>\n\n\n\n<p>Where do those subscription payments go? You connect your Stripe account, so that money goes there, which is the best-in-business payment provider. That means you can offer additional features like Apple Pay and Google Pay which are great for lowering checkout friction for potential customers.</p>\n\n\n\n<p>Have questions? <a href=\"https://srv.buysellads.com/ads/long/x/T6I5BCZ4TTTTTTCLOKGN6TTTTTTKRIEOKVTTTTTTP33JLYETTTTTT7D7PRJNARP3F3UNBWPLC2YICWLDKQQN47I3C7BT\" rel=\"noopener\">Memberful</a> has always-real-human based support at all times to help you.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/build-membership-businesses-with-memberful/\">Build Membership Businesses with Memberful</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "(This is a sponsored post.)\nWhat would your business be like if you sold memberships? It might be more than fun to think about, in fact, it might just be transformative. With membership, would you include little add-ons or perks for your biggest fans? Or could it become the entire core of what you do? Likewise, what might you help your clients build?\n\n\n\nWhatever you decide to do (or perhaps what a client has hired you to do), you can get it done with Memberful. It’s the best software for building membership businesses, used by the biggest creators on the web.\n\n\n\n\n\n\n\n\n\n\nMemberful is for developers.\n\n\nYou have a goal in mind: to build a great member-powered web experience. But you’re a developer and want to build how you want to build. Good. Memberful is here to support that.\n\n\n\nMemberful maintains a full-featured GraphQL API (complete with GraphiQL explorer), webhooks, and OAth Single Sign-on to make it easy to integrate seamlessly with any stack.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour main site in Rails? No problem. You wanna do a Jamstack thing? Perfect. Do you have a React-powered app through and through? That’ll work.\n\n\nYou don’t have to build entirely from scratch.\n\n\n\n\n\n\nFor example, Memberful maintains a best-in-class WordPress plugin that easily gates content and adds membership to your website. So if you happen to use WordPress as your CMS, or are thinking of using it to build your website, you’ve got a first-class integration to work with.\n\n\n\nIf you’re looking to add membership to your existing business, you’ll want a solution that works with your existing technology, so you can launch a new revenue stream without rebuilding your entire tech stack.\n\n\nYou don’t even need to build a website to use Memberful.\n\n\nIf you’re not looking to gate access to content on a custom website, you won’t need a website at all to use Memberful. You can use Memberful’s hosted landing page feature to sell your memberships, and then deliver your member benefits like a private podcast, protected downloads, and newsletters right through the platform — no website required.\n\n\n\nSay you already use other tools for your business. Maybe you do all your emailing with MailChimp. Great! Memberful fully integrates with MailChimp. Is Discord your community hub? No problem, Memberful seamlessly integrates with Discord, meaning you can offer paid subscribers perks that are unique to Discord, things like special channels or access roles.\n\n\nWhat are some common use cases for Memberful?\n\n\n\n\n\n\nPrivate PodcastsSubscription NewslettersSelling digital goods (or physical!)Building communitiesMembership-driven educational courses\n\n\n\nMemberful handles the hard stuff so you can focus on what you do best, while earning revenue quickly. Even advanced features like gift subscriptions, coupons, referrals, free and paid trials and more, are right there for you to take advantage of.\n\n\nWho handles all the emails?\n\n\nMemberful does, and you get 100% control of the brand. Yet another thing you won’t need to worry about, which can otherwise be an awful lot of work and technical debt. I’m talking transactional emails here, like signup confirmation emails, welcome emails, forgot password emails, etc.\n\n\n\n\n\n\nHow does the money work?\n\n\nMemberful has a free plan to get your feet wet. You can build 2 subscription plans and do website integrations. The PRO plan starts at $25/month and lowers transaction fees to 4.9% down from 10% on the free plan.\n\n\n\nWhere do those subscription payments go? You connect your Stripe account, so that money goes there, which is the best-in-business payment provider. That means you can offer additional features like Apple Pay and Google Pay which are great for lowering checkout friction for potential customers.\n\n\n\nHave questions? Memberful has always-real-human based support at all times to help you.\n\nBuild Membership Businesses with Memberful originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-03-03T15:33:57.000Z",
      "date_modified": "2022-03-03T15:33:57.000Z",
      "_plugin": {
        "pageFilename": "06796920f06c80eb981f1140e747b168fa1c45dc1127b08e5362ec01f2d7e9ce.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=364350",
      "url": "https://css-tricks.com/performance-links-february-2022/",
      "title": "7 Fresh Links on Performance For March 2022",
      "summary": "I have a handful of good links to articles about performance that are burning a hole in my bookmarks folder, and wanna drop them here to share.\nThe new WebPageTest website design\n\nFrom fonts to SVG: an icon migration strategy\n\n…\n\n7 Fresh Links on Performance For March 2022 originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>I have a handful of good links to articles about performance that are burning a hole in my bookmarks folder, and wanna drop them here to share.</p>\n\n\n\n<span id=\"more-364350\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1280\" height=\"1024\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/new-ui-hero_hyd6gq.webp?resize=1280%2C1024&#038;ssl=1\" alt=\"Screenshot of the new WebPageTest homepage, a tool for testing performance metrics.\" class=\"wp-image-364871\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/new-ui-hero_hyd6gq.webp?w=1280&amp;ssl=1 1280w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/new-ui-hero_hyd6gq.webp?resize=300%2C240&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/new-ui-hero_hyd6gq.webp?resize=1024%2C819&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/new-ui-hero_hyd6gq.webp?resize=768%2C614&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The new WebPageTest website design</figcaption></figure>\n\n\n\n<ul class=\"is-style-super-link-list\"><li><a href=\"https://calendar.perfplanet.com/2021/from-fonts-to-svg-an-icon-migration-strategy/\" rel=\"noopener\">From fonts to SVG: an icon migration strategy</a>— Erwin Hofman notes that he was using icon fonts out of sheer convenience, but that there are loads of reasons not to use them. He provides details on his new strategy for using icons, which is based on the <code>&lt;use&gt;</code> technique. Five years later, I&#8217;m still a big fan of <a href=\"https://css-tricks.com/pretty-good-svg-icon-system/\">just dunking the <code>&lt;svg&gt;</code> in the HTML</a> where you need them. It&#8217;s just an HTML partial like any other. </li><li><a href=\"https://calibreapp.com/blog/nextjs-performance\" rel=\"noopener\">Next.js Performance: Making a Fast Framework Even Faster</a>— Ben Schwarz says that Next.js is already a pretty fast framework in that it does smart things that keep even React powered pages snappy. But performance isn&#8217;t something that can be left entirely to a framework. <em>You</em> have to do work. Fortunately, Next.js has some pretty handy helpers for things like dynamically (lazily) loading components, deferring scripts, optimizing images, and more.</li><li><a href=\"https://calendar.perfplanet.com/2021/redirect-liquidation/\" rel=\"noopener\">Redirect Liquidation</a>— Tim Vereecke covers a fascinating technique where instead of <em>redirecting</em> an old URL to a new URL, you let the old URL load, dynamically load the new content, then <code>history.replaceState</code> the old URL with the new URL. It&#8217;s faster, but just don&#8217;t do it for bots. </li><li><a href=\"https://philipwalton.com/articles/performant-a-b-testing-with-cloudflare-workers/\" rel=\"noopener\">Performant A/B Testing with Cloudflare Workers</a>— Philip Walton covers how A/B testing is a little trickier on static sites than server-backed sites, but you can pull it off (performantly) thanks to Cloudflare Workers which can manipulate HTML before it hits the browser, much like a Service Worker except at the edge rather than at the client. Save a cookie and you can maintain users in their proper groups.</li><li><a href=\"https://calendar.perfplanet.com/2021/a-unified-theory-of-web-performance/\" rel=\"noopener\">A Unified Theory of Web Performance</a>— Alex Russell tries to answer Tanner Hodges&#8217; call for actually defining web performance. It&#8217;s one of those things that seems obvious (like it&#8217;s clear when certain things help and hurt web performance) but actually defining it is tricky. And not just defining it in terms of specific metrics (even that is tricky), but answer questions like: <em>What are this discipline’s guiding principles?</em> <em>What does it look like to practice web performance? How do we do it?</em></li><li><a href=\"https://blog.webpagetest.org/posts/unveiling-the-new-wpt-ui/\" rel=\"noopener\">Unveiling the new WebPageTest UI</a>— I absolutely love seeing WebPageTest&#8217;s design evolve and improve. It&#8217;s one of those products that&#8217;s clearly a best-in-class tool for performance practitioners, yet had a <em>prettttty</em> gnarly design for a lot of years. This is way better. It&#8217;s like when Google Fonts finally got a redesign and the broad community let out a collective exhale of appreciation.</li><li><a href=\"https://simonhearne.com/2022/caching-header-best-practices/\" rel=\"noopener\">Caching Header Best Practices</a>— Simon Hearne&#8217;s dissertation on Cache headers. When I first started caring about web performance, this was, like, the <em>main</em> thing. If you incorrectly send Cache headers, users might be re-downloading a file over and over unnecessarily when they don&#8217;t need to, which is about the worst thing possible. I&#8217;m glad to see headers keep getting attention and re-imagined as the web evolves.</li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/performance-links-february-2022/\">7 Fresh Links on Performance For March 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "I have a handful of good links to articles about performance that are burning a hole in my bookmarks folder, and wanna drop them here to share.\n\n\n\n\n\n\n\nThe new WebPageTest website design\n\n\n\nFrom fonts to SVG: an icon migration strategy— Erwin Hofman notes that he was using icon fonts out of sheer convenience, but that there are loads of reasons not to use them. He provides details on his new strategy for using icons, which is based on the <use> technique. Five years later, I’m still a big fan of just dunking the <svg> in the HTML where you need them. It’s just an HTML partial like any other. Next.js Performance: Making a Fast Framework Even Faster— Ben Schwarz says that Next.js is already a pretty fast framework in that it does smart things that keep even React powered pages snappy. But performance isn’t something that can be left entirely to a framework. You have to do work. Fortunately, Next.js has some pretty handy helpers for things like dynamically (lazily) loading components, deferring scripts, optimizing images, and more.Redirect Liquidation— Tim Vereecke covers a fascinating technique where instead of redirecting an old URL to a new URL, you let the old URL load, dynamically load the new content, then history.replaceState the old URL with the new URL. It’s faster, but just don’t do it for bots. Performant A/B Testing with Cloudflare Workers— Philip Walton covers how A/B testing is a little trickier on static sites than server-backed sites, but you can pull it off (performantly) thanks to Cloudflare Workers which can manipulate HTML before it hits the browser, much like a Service Worker except at the edge rather than at the client. Save a cookie and you can maintain users in their proper groups.A Unified Theory of Web Performance— Alex Russell tries to answer Tanner Hodges’ call for actually defining web performance. It’s one of those things that seems obvious (like it’s clear when certain things help and hurt web performance) but actually defining it is tricky. And not just defining it in terms of specific metrics (even that is tricky), but answer questions like: What are this discipline’s guiding principles? What does it look like to practice web performance? How do we do it?Unveiling the new WebPageTest UI— I absolutely love seeing WebPageTest’s design evolve and improve. It’s one of those products that’s clearly a best-in-class tool for performance practitioners, yet had a prettttty gnarly design for a lot of years. This is way better. It’s like when Google Fonts finally got a redesign and the broad community let out a collective exhale of appreciation.Caching Header Best Practices— Simon Hearne’s dissertation on Cache headers. When I first started caring about web performance, this was, like, the main thing. If you incorrectly send Cache headers, users might be re-downloading a file over and over unnecessarily when they don’t need to, which is about the worst thing possible. I’m glad to see headers keep getting attention and re-imagined as the web evolves.\n\n7 Fresh Links on Performance For March 2022 originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-03-02T21:26:50.000Z",
      "date_modified": "2022-03-02T21:26:50.000Z",
      "_plugin": {
        "pageFilename": "73755a5e83cc8d42f27eff65b8f1e82de9c5e0e8239257664d7222552caf2cee.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363882",
      "url": "https://css-tricks.com/css-raise-the-curtains-effect/",
      "title": "How to Make a “Raise the Curtains” Effect in CSS",
      "summary": "“Raise the curtains” is what I call an effect where the background goes from dark to light on scroll, and the content on top also goes from light to dark while in a sticky position.\nHere’s an example where I …\n\nHow to Make a “Raise the Curtains” Effect in CSS originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>“Raise the curtains” is what I call an effect where the background goes from dark to light on scroll, and the content on top also goes from light to dark while in a sticky position.</p>\n\n\n\n<span id=\"more-363882\"></span>\n\n\n\n<p>Here’s an example where I used the effect on a <a href=\"https://www.wundermobility.com/sharing-ready-vehicles/\" rel=\"noopener\">real-life project</a>:</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='289' src='https://videopress.com/embed/VJgwbTsL?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\"></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>Want to know how it’s done? I will take you behind the curtain and show you how to raise it, with nothing but HTML and CSS.</p>\n\n\n<h3 id=\"lets-start-with-the-html\">Let’s start with the HTML</h3>\n\n\n<p>What we&#8217;re making is sort of a simplified &#8220;raise the curtain&#8221; effect like this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1636\" height=\"736\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?resize=1636%2C736&#038;ssl=1\" alt=\"Showing the raise the curtains effect from dark blue to wheat.\" class=\"wp-image-363923\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?w=1636&amp;ssl=1 1636w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?resize=300%2C135&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?resize=1024%2C461&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?resize=768%2C346&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?resize=1536%2C691&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?resize=1000%2C450&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The background and text both change color while scrolling over the element.</figcaption></figure>\n\n\n\n<p>I’m keeping things simple for the sake of clarity, but we can stub this out with three elements:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"curtain\">\n  &lt;div class=\"invert\">\n    &lt;h2>Section title&lt;/h2>\n  &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<p>First, we need a container for the curtain, which we’ll give a <code>.curtain</code> class. Then, inside the <code>.curtain</code>, we have the an <code>.invert</code> child element that will serve as our “sticky” box. And, finally, we have the content inside this box — a good old-fashioned <code>&lt;h2&gt;</code> element for this specific example.</p>\n\n\n<h3 id=\"lets-set-up-some-css-variables\">Let’s set up some CSS variables</h3>\n\n\n<p>There are three values we know we’ll need upfront. Let’s make CSS variables out of them so it’s easy to write them into our styles and easily change them later if we need to.</p>\n\n\n\n<ul><li><code>--minh</code> &#8211; The height of the container</li><li><code>--color1</code> &#8211; The light color</li><li><code>--color2</code> &#8211; The dark color</li></ul>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\n  --minh: 98vh;\n  --color1: wheat;\n  --color2: midnightblue;\n}</code></pre>\n\n\n<h3 id=\"time-to-draw-the-curtain\">Time to draw the curtain</h3>\n\n\n<p>Next, we can define our <code>.curtain</code> element using the following techniques:</p>\n\n\n\n<ul><li>A <code>linear-gradient</code> for the “split” background</li><li><code>min-height</code> for the extra space at the bottom of the container</li></ul>\n\n\n\n<p>We use the <code>::after</code> pseudo-element to add the extra space to the bottom. This way, our “sticky” content will actually stick to the container while scrolling past the <code>::after</code> element. It’s an illusion.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.curtain {\n  /** create the \"split\" background **/\n  background-image: linear-gradient(to bottom, var(--color2) 50%, var(--color1) 50%);\n}\n\n/** add extra space to the bottom (need this for the \"sticky\" effect) **/\n.curtain::after {\n  content: \"\";\n  display: block;\n  min-height: var(--minh);\n}</code></pre>\n\n\n<h3 id=\"making-sticky-content\">Making sticky content</h3>\n\n\n<p>Next up, we need to make our content “sticky” in the sense that it sits perfectly inside the container as the background and text swap color values. In fact, we already gave the <code>.curtain</code>&#8216;s child element an <code>.invert</code> class that we can use as the sticky container.</p>\n\n\n\n<p>Stay with me for a moment — here’s how this is going to play out:</p>\n\n\n\n<ul><li><code>position: sticky</code> and <code>top</code> define the stickiness and where it sticks.</li><li><code>mix-blend-mode: difference</code> blends the color of the content inside the <code>&lt;h2&gt;</code> element into the <code>.curtain</code>&#8216;s background gradient.</li><li><code>display: flex</code> centers the content for presentation.</li><li><code>min-height</code> defines the height of the container and allows for the extra space at the bottom.</li><li><code>color</code> sets the color of the <code>h2</code> heading.</li></ul>\n\n\n\n<p>Now to put that into CSS code!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.invert {\n  /** make the content sticky **/\n  position: sticky;\n  top: 20px;\n\n  /** blend the content with the contrast effect **/\n  mix-blend-mode: difference;\n\n  /** center the content **/\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  /** set the minimum height of the section **/\n  min-height: var(--minh);\n}\n\nh2 {\n  /** set the color of the text **/\n  color: var(--color1);\n}</code></pre>\n\n\n\n<p>There are many things going on here, so let’s explain each one of them.</p>\n\n\n\n<p>First, we have a sticky position that is self-explanatory and flexbox to help <a href=\"https://css-tricks.com/centering-css-complete-guide/\">center the content</a>. Nothing new or particularly tricky about this.</p>\n\n\n\n<p>The content’s height is set using CSS variable and the value is the same height value as the <code>.curtain::after</code> pseudo-element.</p>\n\n\n\n<p>The <code>mix-blend-mode: difference</code> declaration blends our content with the background. The <code>difference</code> value is complicated, but you might visualize it like inverted text color against the background. Here’s a nice demo from the CSS-Tricks Almanac showing off the different <a href=\"https://css-tricks.com/almanac/properties/m/mix-blend-mode/\"><code>mix-blend-mode</code></a> values:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzWpPLy\" src=\"//codepen.io/anon/embed/YzWpPLy?height=550&amp;theme-id=1&amp;slug-hash=YzWpPLy&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzWpPLy\" title=\"CodePen Embed YzWpPLy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>To make the blending work, we need to set the color of our heading. In this case, we&#8217;re assigning a light color value (<code>wheat</code>) to the <code>--color1</code> variable.</p>\n\n\n<h3 id=\"raise-the-curtains-demo\">&#8220;Raise the Curtains&#8221; Demo</h3>\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzEERmQ\" src=\"//codepen.io/anon/embed/YzEERmQ?height=500&amp;theme-id=1&amp;slug-hash=YzEERmQ&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzEERmQ\" title=\"CodePen Embed YzEERmQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"gotchas\">Gotchas</h3>\n\n\n<p>I experienced a few problems while working out the details of the &#8220;raise the curtain&#8221; effect. If you want to add images to the “sticky” content, for example, avoid using images that don’t look good when their colors are inverted. Here’s a quick demo where I made a simple SVG and transparent PNG image, and it looks good.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ExwRmyp\" src=\"//codepen.io/anon/embed/ExwRmyp?height=650&amp;theme-id=1&amp;slug-hash=ExwRmyp&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ExwRmyp\" title=\"CodePen Embed ExwRmyp\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Another gotcha: there’s no way to set <code>mix-blend-mode: difference</code> on specific child elements, like headings, while avoiding the effect on images. I discovered there are several reasons why it doesn’t work, the first of which is that <code>position: sticky</code> cancels the blending.</p>\n\n\n\n<p>The same goes when using something like <code>transform: skewY</code> on the container to add a little &#8220;tilt&#8221; to things. I suspect other properties don’t play well with the blending, but I didn’t go that far to find out which ones.</p>\n\n\n\n<p>Here’s the demo without scrolling that removes the troubling properties:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ZEXRKxR\" src=\"//codepen.io/anon/embed/ZEXRKxR?height=650&amp;theme-id=1&amp;slug-hash=ZEXRKxR&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ZEXRKxR\" title=\"CodePen Embed ZEXRKxR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"curtain-call\">Curtain call!</h3>\n\n\n<p>I enjoyed building this component, and I always love it when I can accomplish something using only HTML and CSS, especially when they work smoothly on every browser.</p>\n\n\n\n<p>What will make with it? Is there a different way you would approach a “raise the curtain” effect like this? Let me know in the comments!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-raise-the-curtains-effect/\">How to Make a “Raise the Curtains” Effect in CSS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "“Raise the curtains” is what I call an effect where the background goes from dark to light on scroll, and the content on top also goes from light to dark while in a sticky position.\n\n\n\n\n\n\n\nHere’s an example where I used the effect on a real-life project:\n\n\n\n\n\n\n\n\n\nWant to know how it’s done? I will take you behind the curtain and show you how to raise it, with nothing but HTML and CSS.\n\n\nLet’s start with the HTML\n\n\nWhat we’re making is sort of a simplified “raise the curtain” effect like this:\n\n\n\nThe background and text both change color while scrolling over the element.\n\n\n\nI’m keeping things simple for the sake of clarity, but we can stub this out with three elements:\n\n\n\n<div class=\"curtain\">\n  <div class=\"invert\">\n    <h2>Section title</h2>\n  </div>\n</div>\n\n\n\nFirst, we need a container for the curtain, which we’ll give a .curtain class. Then, inside the .curtain, we have the an .invert child element that will serve as our “sticky” box. And, finally, we have the content inside this box — a good old-fashioned <h2> element for this specific example.\n\n\nLet’s set up some CSS variables\n\n\nThere are three values we know we’ll need upfront. Let’s make CSS variables out of them so it’s easy to write them into our styles and easily change them later if we need to.\n\n\n\n--minh – The height of the container--color1 – The light color--color2 – The dark color\n\n\n\n:root {\n  --minh: 98vh;\n  --color1: wheat;\n  --color2: midnightblue;\n}\n\n\nTime to draw the curtain\n\n\nNext, we can define our .curtain element using the following techniques:\n\n\n\nA linear-gradient for the “split” backgroundmin-height for the extra space at the bottom of the container\n\n\n\nWe use the ::after pseudo-element to add the extra space to the bottom. This way, our “sticky” content will actually stick to the container while scrolling past the ::after element. It’s an illusion.\n\n\n\n.curtain {\n  /** create the \"split\" background **/\n  background-image: linear-gradient(to bottom, var(--color2) 50%, var(--color1) 50%);\n}\n\n/** add extra space to the bottom (need this for the \"sticky\" effect) **/\n.curtain::after {\n  content: \"\";\n  display: block;\n  min-height: var(--minh);\n}\n\n\nMaking sticky content\n\n\nNext up, we need to make our content “sticky” in the sense that it sits perfectly inside the container as the background and text swap color values. In fact, we already gave the .curtain‘s child element an .invert class that we can use as the sticky container.\n\n\n\nStay with me for a moment — here’s how this is going to play out:\n\n\n\nposition: sticky and top define the stickiness and where it sticks.mix-blend-mode: difference blends the color of the content inside the <h2> element into the .curtain‘s background gradient.display: flex centers the content for presentation.min-height defines the height of the container and allows for the extra space at the bottom.color sets the color of the h2 heading.\n\n\n\nNow to put that into CSS code!\n\n\n\n.invert {\n  /** make the content sticky **/\n  position: sticky;\n  top: 20px;\n\n  /** blend the content with the contrast effect **/\n  mix-blend-mode: difference;\n\n  /** center the content **/\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  /** set the minimum height of the section **/\n  min-height: var(--minh);\n}\n\nh2 {\n  /** set the color of the text **/\n  color: var(--color1);\n}\n\n\n\nThere are many things going on here, so let’s explain each one of them.\n\n\n\nFirst, we have a sticky position that is self-explanatory and flexbox to help center the content. Nothing new or particularly tricky about this.\n\n\n\nThe content’s height is set using CSS variable and the value is the same height value as the .curtain::after pseudo-element.\n\n\n\nThe mix-blend-mode: difference declaration blends our content with the background. The difference value is complicated, but you might visualize it like inverted text color against the background. Here’s a nice demo from the CSS-Tricks Almanac showing off the different mix-blend-mode values:\n\n\n\nCodePen Embed Fallback\n\n\n\nTo make the blending work, we need to set the color of our heading. In this case, we’re assigning a light color value (wheat) to the --color1 variable.\n\n\n“Raise the Curtains” Demo\n\n\nCodePen Embed Fallback\n\n\nGotchas\n\n\nI experienced a few problems while working out the details of the “raise the curtain” effect. If you want to add images to the “sticky” content, for example, avoid using images that don’t look good when their colors are inverted. Here’s a quick demo where I made a simple SVG and transparent PNG image, and it looks good.\n\n\n\nCodePen Embed Fallback\n\n\n\nAnother gotcha: there’s no way to set mix-blend-mode: difference on specific child elements, like headings, while avoiding the effect on images. I discovered there are several reasons why it doesn’t work, the first of which is that position: sticky cancels the blending.\n\n\n\nThe same goes when using something like transform: skewY on the container to add a little “tilt” to things. I suspect other properties don’t play well with the blending, but I didn’t go that far to find out which ones.\n\n\n\nHere’s the demo without scrolling that removes the troubling properties:\n\n\n\nCodePen Embed Fallback\n\n\nCurtain call!\n\n\nI enjoyed building this component, and I always love it when I can accomplish something using only HTML and CSS, especially when they work smoothly on every browser.\n\n\n\nWhat will make with it? Is there a different way you would approach a “raise the curtain” effect like this? Let me know in the comments!\n\nHow to Make a “Raise the Curtains” Effect in CSS originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-03-02T15:57:32.000Z",
      "date_modified": "2022-03-02T15:57:32.000Z",
      "_plugin": {
        "pageFilename": "c2820fb0522314f634813d97579161d3b3514e3397d4bd0a015fa313842c0388.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363724",
      "url": "https://css-tricks.com/css-custom-highlight-api-early-loo/",
      "title": "CSS Custom Highlight API: The Future of Highlighting Text Ranges on the Web",
      "summary": "Styling ranges of text in software is a very useful thing to be able to do. Thankfully, we have the CSS Custom Highlight API to look forward to because it represents the future of styling text ranges on the web.…\n\nCSS Custom Highlight API: The Future of Highlighting Text Ranges on the Web originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><strong>Styling ranges of text</strong> in software is a very useful thing to be able to do. Thankfully, we have the CSS Custom Highlight API to look forward to because it represents the future of styling text ranges on the web.</p>\n\n\n\n<span id=\"more-363724\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"800\" height=\"733\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1644484463021_highlight-api-demo-no-text-deco.gif?resize=800%2C733&#038;ssl=1\" alt=\"Animation screenshot of the CSS Custom Highlight API demo.\" class=\"wp-image-363729\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>One example: if you’ve ever used text editing software like Google Docs, Word, or Dropbox Paper, you’ll see they detect spelling and grammar errors and displaying nice little squiggly underlines below them to attract attention. Code editors like VS Code do the same for code errors.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"977\" height=\"269\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042116795_image.png?resize=977%2C269&#038;ssl=1\" alt=\"\" class=\"wp-image-363725\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042116795_image.png?w=977&amp;ssl=1 977w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042116795_image.png?resize=300%2C83&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042116795_image.png?resize=768%2C211&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Another very common use case for highlighting text is <strong>search and highlight</strong>, where you’re given a text input box and typing in it searches matching results on the page, and highlights them. Try pressing <code>Ctrl</code>/<code>⌘</code>+ <code>F</code> in your web browser right now and type in some text from this article.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1117\" height=\"951\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042176497_image.png?resize=1117%2C951&#038;ssl=1\" alt=\"\" class=\"wp-image-363726\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042176497_image.png?w=1117&amp;ssl=1 1117w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042176497_image.png?resize=300%2C255&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042176497_image.png?resize=1024%2C872&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042176497_image.png?resize=768%2C654&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042176497_image.png?resize=1000%2C851&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The browser itself often handles these styling situations. Editable areas (like a <code>&lt;textarea&gt;</code>) get spelling squiggles automatically. The find command highlights found text automatically.</p>\n\n\n\n<p>But what about when we want to do this type of styling ourselves? Doing this on the web has been a common problem for a long time. It has probably costed many people a lot more time than it should have.</p>\n\n\n\n<p>This isn’t a simple problem to solve. We aren’t just wrapping text in a <code>&lt;span&gt;</code> with a class and applying some CSS. Indeed, this requires being able to correctly highlight <em>multiple</em> ranges of text across an arbitrarily complex DOM tree, and possibly crossing the boundaries of DOM elements.</p>\n\n\n\n<p>There are two common solutions to this, including:</p>\n\n\n\n<ol><li>styling text range pseudo-elements, and</li><li>creating your own text highlighting system.</li></ol>\n\n\n\n<p>We’ll review them first and then take a look at&nbsp;the&nbsp;upcoming&nbsp;CSS Custom Highlight API&nbsp;that can change it all. but if you&#8217;re </p>\n\n\n<h3 id=\"potential-solution-1-styleable-text-ranges\">Potential Solution #1: Style-able Text Ranges</h3>\n\n\n<p>Probably the most well-known style-able text range is the user selection. When you use your pointing device to select a piece of text in a web page, a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Selection\" rel=\"noopener\"><code>Selection</code></a> object is automatically created. In fact, try selecting text on this page right now, and then run <code>document.getSelection()</code> in the DevTools console. You should see location information about the selected text.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1846\" height=\"1196\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?resize=1846%2C1196&#038;ssl=1\" alt=\"DevTools window showing the position of the current selection in the console.\" class=\"wp-image-363727\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?w=1846&amp;ssl=1 1846w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?resize=300%2C194&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?resize=1024%2C663&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?resize=768%2C498&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?resize=1536%2C995&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?resize=1000%2C648&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It turns out that you can also create a text selection programmatically from JavaScript. Here is an example:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// First, create a Range object.\nconst range = new Range();\n\n// And set its start and end positions.\nrange.setStart(parentNode, startOffset);\nrange.setEnd(parentNode, endOffset);\n\n// Then, set the current selection to this range.\ndocument.getSelection().removeAllRanges();\ndocument.getSelection().addRange(range);</code></pre>\n\n\n\n<p>The last piece of the puzzle is to style this range. CSS has a pseudo-element called <a href=\"https://css-tricks.com/almanac/selectors/s/selection/\"><code>::selection</code></a> to do just that, and it’s supported across <a href=\"https://caniuse.com/css-selection\" rel=\"noopener\">all browsers</a>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">::selection {\n  background-color: #f06;\n  color: white;\n}</code></pre>\n\n\n\n<p>Here is an example using this technique to highlight all words in a page one after the other:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYeYJBx\" src=\"//codepen.io/anon/embed/eYeYJBx?height=450&amp;theme-id=1&amp;slug-hash=eYeYJBx&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYeYJBx\" title=\"CodePen Embed eYeYJBx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>On top of the <code>::selection</code> pseudo-element, there are a number of other pseudo-elements:</p>\n\n\n\n<ul><li><code>::target-text</code> selects the text that has been scrolled to in browsers that support the <a href=\"https://wicg.github.io/scroll-to-text-fragment/\" rel=\"noopener\">scroll-to-text</a> feature. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::target-text\" rel=\"noopener\">MDN</a>)</li><li><code>::spelling-error</code> selects text that is flagged by the browser as containing a spelling error. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::spelling-error\" rel=\"noopener\">MDN</a>)</li><li><code>::grammar-error</code> selects text that is flagged by the browser as containing a grammar error. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::grammar-error\" rel=\"noopener\">MDN</a>)</li></ul>\n\n\n\n<p>Unfortunately browser support isn’t great here and although these ranges are useful in each of their own right, they can’t be used to style custom pieces of text — only browser-predefined ones</p>\n\n\n\n<p>So the user text selection is nice because it’s relatively simple to put in place and doesn’t change the DOM of the page. Indeed, <code>Range</code> objects are essentially coordinates of segments in the page, rather than HTML elements that need to be created to exist.</p>\n\n\n\n<p>One major drawback, however, is that creating a selection resets whatever the user has already manually selected. Try selecting text in the demo above to test this. You’ll see how it goes away as soon as the code moves the selection somewhere else.</p>\n\n\n<h3 id=\"potential-solution-2-custom-highlighting-system\">Potential Solution #2: Custom Highlighting System</h3>\n\n\n<p>This second solution is pretty much the only thing you can do if using the <code>Selection</code> object is insufficient for you. This solution revolves around doing everything yourself, using JavaScript to insert new HTML elements in the DOM where you want the highlighting to appear.</p>\n\n\n\n<p>Unfortunately, this means way more JavaScript to write and maintain, not to mention it forces the browser to re-create the layout of the page whenever the highlighting changes. Plus, there are complicated edge cases, for example, when you want to highlight a piece of text that spans across multiple DOM elements.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1129\" height=\"100\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643109885151_image.png?resize=1129%2C100&#038;ssl=1\" alt=\"Illustration showing a line of HTML with an emphasis element and a strong element with a bright yellow highlight running through them.\" class=\"wp-image-363728\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643109885151_image.png?w=1129&amp;ssl=1 1129w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643109885151_image.png?resize=300%2C27&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643109885151_image.png?resize=1024%2C91&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643109885151_image.png?resize=768%2C68&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643109885151_image.png?resize=1000%2C89&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Interestingly, <a href=\"https://codemirror.net\" rel=\"noopener\">CodeMirror</a> and <a href=\"https://microsoft.github.io/monaco-editor/\" rel=\"noopener\">Monaco</a> (the JavaScript text editor library that powers VS Code) have their own highlighting logic. They use a slightly different approach where the highlights are contained in a separate part of the DOM tree. The lines of text and the highlighted segments are rendered in two different places in the DOM which are then positioned over each other. If you inspect the DOM sub-tree that contains the text, there are no highlights. This way, the highlights can be re-rendered without impacting the lines of text and having to introduce new elements within them.</p>\n\n\n\n<p>Overall, it feels like a browser-powered highlighting feature is missing. Something that would help solve all of these drawbacks (no interference with user text selection, multi-selection support, simple code) and be faster than custom-made solutions.</p>\n\n\n\n<p>Fortunately, that’s what we’re here to talk about!</p>\n\n\n<h3 id=\"enter-the-css-custom-highlight-api\">Enter the CSS Custom Highlight API</h3>\n\n\n<p>The <a href=\"https://www.w3.org/TR/css-highlight-api-1/\" rel=\"noopener\">CSS Custom Highlight API</a> is a new W3C specification (currently in Working Draft status) that makes it possible to style arbitrary text ranges from JavaScript! The approach here is very similar to the user text selection technique we reviewed earlier. It gives developers a way to create arbitrary ranges, from JavaScript, and then style them using CSS.</p>\n\n\n<h4 id=\"creating-ranges-of-text\">Creating Ranges of Text</h4>\n\n\n<p>The first step is to create the ranges of text that you want to highlight. which can be done using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Range\" rel=\"noopener\"><code>Range</code></a> in JavaScript. So, like we did when setting the current selection:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const range = new Range();\nrange.setStart(parentNode, startOffset);\nrange.setEnd(parentNode, endOffset);</code></pre>\n\n\n\n<p>It’s worth noting that the <code>setStart</code> and <code>setEnd</code> methods work differently if the node passed as the first argument is a text node or not. For text nodes, the offset corresponds to the number of characters within the node. For other nodes, the offset corresponds to the number of child nodes within the parent node.</p>\n\n\n\n<p>Also worth noting is that <code>setStart</code> and <code>setEnd</code> aren’t the only ways to describe where a range starts and ends. Take a look at the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Range#methods\" rel=\"noopener\">other methods</a> available on the <code>Range</code> class to see other options.</p>\n\n\n<h4 id=\"creating-highlights\">Creating Highlights</h4>\n\n\n<p>The second step consists in creating <a href=\"https://www.w3.org/TR/css-highlight-api-1/#highlight\" rel=\"noopener\"><code>Highlight</code></a> objects for the ranges created in that last step. A <code>Highlight</code> object can receive one or more <code>Range</code>s. So if you want to highlight a bunch of pieces of text in exactly the same way, you should probably create a single <code>Highlight</code> object and initialize it with all of the <code>Range</code>s that correspond to these pieces of text.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const highlight = new Highlight(range1, range2, ..., rangeN);</code></pre>\n\n\n\n<p>But you can also create as many <code>Highlight</code> objects as you need. For example, if you are building a collaborative text editor where each user gets a different text color, then you can create one <code>Highlight</code> object per user. Each object can then be styled differently, as we’ll see next.</p>\n\n\n<h4 id=\"registering-highlights\">Registering Highlights</h4>\n\n\n<p>Now Highlight objects on their own don’t do anything. They first need to be registered in what is called the highlight registry. This is done by using the <a href=\"https://www.w3.org/TR/css-highlight-api-1/#highlight-registry\" rel=\"noopener\">CSS Highlights API</a>. The registry works like a map where you can register new highlights by giving them names, as well as remove highlights (or even clear the entire registry).</p>\n\n\n\n<p>Here is how to register a single highlight.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">CSS.highlights.set('my-custom-highlight', highlight);</code></pre>\n\n\n\n<p>Where <code>my-custom-highlight</code> is the name of your choosing and <code>highlight</code> is a <code>Highlight</code> object created in the last step.</p>\n\n\n<h4 id=\"styling-highlights\">Styling Highlights</h4>\n\n\n<p>The final step is to actually style the registered highlights. This is done with the new CSS <a href=\"https://www.w3.org/TR/css-highlight-api-1/#custom-highlight-pseudo\" rel=\"noopener\"><code>::highlight()</code></a> pseudo-element, using the name you chose when registering the <code>Highlight</code> object (which is <code>my-custom-highlight</code> in our example above).</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">::highlight(my-custom-highlight) {\n  background-color: yellow;\n  color: black;\n}</code></pre>\n\n\n\n<p>It’s worth noting that, just like <code>::selection</code>, a subset of CSS properties only can be used with the <code>::highlight()</code> pseudo-element:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/almanac/properties/b/background-color/\"><code>background-color</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/c/caret-color/\"><code>caret-color</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/c/color/\"><code>color</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/c/cursor/\"><code>cursor</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/f/fill/\"><code>fill</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/s/stroke/\"><code>stroke</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/s/stroke-width/\"><code>stroke-width</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/t/text-decoration/\"><code>text-decoration</code></a> (which will likely only be supported in the version 2 of the specification)</li><li><a href=\"https://css-tricks.com/almanac/properties/t/text-shadow/\"><code>text-shadow</code></a></li></ul>\n\n\n<h4 id=\"updating-highlights\">Updating Highlights</h4>\n\n\n<p>There are multiple ways to update highlighted text on the page.</p>\n\n\n\n<p>For example, you can clear the highlight registry altogether with <code>CSS.highlights.clear()</code> and then start again from the beginning. Or, you can also update the underlying ranges without having to re-create any of the objects all. For this, use the <code>range.setStart</code> and <code>range.setEnd</code> methods again (or any of the other <code>Range</code> methods) and the highlights will be re-painted by the browser.</p>\n\n\n\n<p>But, the <code>Highlight</code> object works like a JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" rel=\"noopener\"><code>Set</code></a>, so this means you also add new <code>Range</code> objects to an existing <code>Highlight</code> with <code>highlight.add(newRange)</code> or remove a <code>Range</code> with <code>highlight.delete(existingRange)</code>.</p>\n\n\n\n<p>Third, you can also add or remove specific <code>Highlight</code> objects from the <code>CSS.highlights</code> registry. Since this API works like a JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" rel=\"noopener\"><code>Map</code></a>, you can <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\" rel=\"noopener\"><code>set</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\" rel=\"noopener\"><code>delete</code></a> to update the currently registered <code>Highlight</code>s.</p>\n\n\n<h4 id=\"browser-support\">Browser Support</h4>\n\n\n<p>The specification for the CSS Custom Highlight API is relatively new and its implementation in browsers is still incomplete. So, although this is going to be a very useful addition to the web platform, it’s not quite ready for production use.</p>\n\n\n\n<p>The Microsoft Edge team is implementing the CSS Custom Highlight API in Chromium at the moment. In fact, the feature can already be used in Canary versions right now by enabling the Experimental Web Platform features flag (under <code>about:flags</code>). There is currently no firm plan as to when the feature will ship in Chrome, Edge, and other Chromium-based browsers, but it’s getting very close.</p>\n\n\n\n<p>The API is also supported in <a href=\"https://developer.apple.com/safari/technology-preview/release-notes/#r99\" rel=\"noopener\">Safari 99+</a> but behind an experiment flag (Develop → Experimental Features → Highlight API), and the interface is a little bit different in that it uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/StaticRange\" rel=\"noopener\"><code>StaticRange</code></a> objects instead.</p>\n\n\n\n<p>Firefox does not support the API yet, though you can <a href=\"https://github.com/mozilla/standards-positions/issues/482\" rel=\"noopener\">read Mozilla’s position about it</a> for more information.</p>\n\n\n<h3 id=\"demo\">Demo</h3>\n\n\n<p>Speaking of Microsoft Edge, they have a demo set up where you can take the CSS Custom Highlight API for a test drive. But Before trying the demo, be sure you’re using either Chrome or Edge Canary with the Experimental Web Platform features flag in the <code>about:flags</code> page.</p>\n\n\n\n<p>/button <a href=\"https://microsoftedge.github.io/Demos/custom-highlight-api/\" rel=\"noopener\">View the demo</a></p>\n\n\n\n<p>The demo uses the Custom Highlight API to highlight ranges of text in the page based on what you type in the search field at the top of the page.</p>\n\n\n\n<p>After the page loads, JavaScript code retrieves all the text nodes in the page (using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\" rel=\"noopener\">TreeWalker</a>) and when the user types in the search field, the code iterates over these nodes until it finds matches. Those matches are then used to create <code>Range</code> objects, which are then highlighted with the Custom Highlight API.</p>\n\n\n<h3 id=\"closing-thoughts\">Closing Thoughts</h3>\n\n\n<p>So, is this new browser-provided highlighting API really worth it? Totally!</p>\n\n\n\n<p>For one, even if the CSS Custom Highlight API may seem a bit complicated at first (i.e. having to create ranges, then highlights, then registering them, and finally styling them), it’s still way simpler than having to create new DOM elements and insert them in the right places.</p>\n\n\n\n<p>More importantly, browser engines can style these ranges very, very fast.</p>\n\n\n\n<p>The reason only a subset of CSS properties is allowed to be used with the <code>::highlight()</code> pseudo-element is that the subset only contains properties that can be applied by the browser very effectively without having to recreate the layout of the page. Highlighting ranges of text by inserting new DOM elements in the page around them requires the engine to do much more work.</p>\n\n\n\n<p>But don’t take my word for it. <a href=\"https://github.com/ffiori\" rel=\"noopener\">Fernando Fiori</a>, who worked on the API, created this nice <a href=\"https://ffiori.github.io/highlight-api-demos/demo-performance.html\" rel=\"noopener\">performance comparison demo</a>. On my computer, the CSS Custom Highlight API performs on average 5✕ as fast as the DOM-based highlighting.</p>\n\n\n\n<p>With Chromium and Safari experimental support already here, we’re getting close to something that can be used in production. I can’t wait for browsers to support the Custom Highlight API consistently and see what features this will unlock!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-custom-highlight-api-early-loo/\">CSS Custom Highlight API: The Future of Highlighting Text Ranges on the Web</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Styling ranges of text in software is a very useful thing to be able to do. Thankfully, we have the CSS Custom Highlight API to look forward to because it represents the future of styling text ranges on the web.\n\n\n\n\n\n\n\n\n\n\n\nOne example: if you’ve ever used text editing software like Google Docs, Word, or Dropbox Paper, you’ll see they detect spelling and grammar errors and displaying nice little squiggly underlines below them to attract attention. Code editors like VS Code do the same for code errors.\n\n\n\n\n\n\n\nAnother very common use case for highlighting text is search and highlight, where you’re given a text input box and typing in it searches matching results on the page, and highlights them. Try pressing Ctrl/⌘+ F in your web browser right now and type in some text from this article.\n\n\n\n\n\n\n\nThe browser itself often handles these styling situations. Editable areas (like a <textarea>) get spelling squiggles automatically. The find command highlights found text automatically.\n\n\n\nBut what about when we want to do this type of styling ourselves? Doing this on the web has been a common problem for a long time. It has probably costed many people a lot more time than it should have.\n\n\n\nThis isn’t a simple problem to solve. We aren’t just wrapping text in a <span> with a class and applying some CSS. Indeed, this requires being able to correctly highlight multiple ranges of text across an arbitrarily complex DOM tree, and possibly crossing the boundaries of DOM elements.\n\n\n\nThere are two common solutions to this, including:\n\n\n\nstyling text range pseudo-elements, andcreating your own text highlighting system.\n\n\n\nWe’ll review them first and then take a look at the upcoming CSS Custom Highlight API that can change it all. but if you’re \n\n\nPotential Solution #1: Style-able Text Ranges\n\n\nProbably the most well-known style-able text range is the user selection. When you use your pointing device to select a piece of text in a web page, a Selection object is automatically created. In fact, try selecting text on this page right now, and then run document.getSelection() in the DevTools console. You should see location information about the selected text.\n\n\n\n\n\n\n\nIt turns out that you can also create a text selection programmatically from JavaScript. Here is an example:\n\n\n\n// First, create a Range object.\nconst range = new Range();\n\n// And set its start and end positions.\nrange.setStart(parentNode, startOffset);\nrange.setEnd(parentNode, endOffset);\n\n// Then, set the current selection to this range.\ndocument.getSelection().removeAllRanges();\ndocument.getSelection().addRange(range);\n\n\n\nThe last piece of the puzzle is to style this range. CSS has a pseudo-element called ::selection to do just that, and it’s supported across all browsers.\n\n\n\n::selection {\n  background-color: #f06;\n  color: white;\n}\n\n\n\nHere is an example using this technique to highlight all words in a page one after the other:\n\n\n\nCodePen Embed Fallback\n\n\n\nOn top of the ::selection pseudo-element, there are a number of other pseudo-elements:\n\n\n\n::target-text selects the text that has been scrolled to in browsers that support the scroll-to-text feature. (MDN)::spelling-error selects text that is flagged by the browser as containing a spelling error. (MDN)::grammar-error selects text that is flagged by the browser as containing a grammar error. (MDN)\n\n\n\nUnfortunately browser support isn’t great here and although these ranges are useful in each of their own right, they can’t be used to style custom pieces of text — only browser-predefined ones\n\n\n\nSo the user text selection is nice because it’s relatively simple to put in place and doesn’t change the DOM of the page. Indeed, Range objects are essentially coordinates of segments in the page, rather than HTML elements that need to be created to exist.\n\n\n\nOne major drawback, however, is that creating a selection resets whatever the user has already manually selected. Try selecting text in the demo above to test this. You’ll see how it goes away as soon as the code moves the selection somewhere else.\n\n\nPotential Solution #2: Custom Highlighting System\n\n\nThis second solution is pretty much the only thing you can do if using the Selection object is insufficient for you. This solution revolves around doing everything yourself, using JavaScript to insert new HTML elements in the DOM where you want the highlighting to appear.\n\n\n\nUnfortunately, this means way more JavaScript to write and maintain, not to mention it forces the browser to re-create the layout of the page whenever the highlighting changes. Plus, there are complicated edge cases, for example, when you want to highlight a piece of text that spans across multiple DOM elements.\n\n\n\n\n\n\n\nInterestingly, CodeMirror and Monaco (the JavaScript text editor library that powers VS Code) have their own highlighting logic. They use a slightly different approach where the highlights are contained in a separate part of the DOM tree. The lines of text and the highlighted segments are rendered in two different places in the DOM which are then positioned over each other. If you inspect the DOM sub-tree that contains the text, there are no highlights. This way, the highlights can be re-rendered without impacting the lines of text and having to introduce new elements within them.\n\n\n\nOverall, it feels like a browser-powered highlighting feature is missing. Something that would help solve all of these drawbacks (no interference with user text selection, multi-selection support, simple code) and be faster than custom-made solutions.\n\n\n\nFortunately, that’s what we’re here to talk about!\n\n\nEnter the CSS Custom Highlight API\n\n\nThe CSS Custom Highlight API is a new W3C specification (currently in Working Draft status) that makes it possible to style arbitrary text ranges from JavaScript! The approach here is very similar to the user text selection technique we reviewed earlier. It gives developers a way to create arbitrary ranges, from JavaScript, and then style them using CSS.\n\n\nCreating Ranges of Text\n\n\nThe first step is to create the ranges of text that you want to highlight. which can be done using a Range in JavaScript. So, like we did when setting the current selection:\n\n\n\nconst range = new Range();\nrange.setStart(parentNode, startOffset);\nrange.setEnd(parentNode, endOffset);\n\n\n\nIt’s worth noting that the setStart and setEnd methods work differently if the node passed as the first argument is a text node or not. For text nodes, the offset corresponds to the number of characters within the node. For other nodes, the offset corresponds to the number of child nodes within the parent node.\n\n\n\nAlso worth noting is that setStart and setEnd aren’t the only ways to describe where a range starts and ends. Take a look at the other methods available on the Range class to see other options.\n\n\nCreating Highlights\n\n\nThe second step consists in creating Highlight objects for the ranges created in that last step. A Highlight object can receive one or more Ranges. So if you want to highlight a bunch of pieces of text in exactly the same way, you should probably create a single Highlight object and initialize it with all of the Ranges that correspond to these pieces of text.\n\n\n\nconst highlight = new Highlight(range1, range2, ..., rangeN);\n\n\n\nBut you can also create as many Highlight objects as you need. For example, if you are building a collaborative text editor where each user gets a different text color, then you can create one Highlight object per user. Each object can then be styled differently, as we’ll see next.\n\n\nRegistering Highlights\n\n\nNow Highlight objects on their own don’t do anything. They first need to be registered in what is called the highlight registry. This is done by using the CSS Highlights API. The registry works like a map where you can register new highlights by giving them names, as well as remove highlights (or even clear the entire registry).\n\n\n\nHere is how to register a single highlight.\n\n\n\nCSS.highlights.set('my-custom-highlight', highlight);\n\n\n\nWhere my-custom-highlight is the name of your choosing and highlight is a Highlight object created in the last step.\n\n\nStyling Highlights\n\n\nThe final step is to actually style the registered highlights. This is done with the new CSS ::highlight() pseudo-element, using the name you chose when registering the Highlight object (which is my-custom-highlight in our example above).\n\n\n\n::highlight(my-custom-highlight) {\n  background-color: yellow;\n  color: black;\n}\n\n\n\nIt’s worth noting that, just like ::selection, a subset of CSS properties only can be used with the ::highlight() pseudo-element:\n\n\n\nbackground-colorcaret-colorcolorcursorfillstrokestroke-widthtext-decoration (which will likely only be supported in the version 2 of the specification)text-shadow\n\n\nUpdating Highlights\n\n\nThere are multiple ways to update highlighted text on the page.\n\n\n\nFor example, you can clear the highlight registry altogether with CSS.highlights.clear() and then start again from the beginning. Or, you can also update the underlying ranges without having to re-create any of the objects all. For this, use the range.setStart and range.setEnd methods again (or any of the other Range methods) and the highlights will be re-painted by the browser.\n\n\n\nBut, the Highlight object works like a JavaScript Set, so this means you also add new Range objects to an existing Highlight with highlight.add(newRange) or remove a Range with highlight.delete(existingRange).\n\n\n\nThird, you can also add or remove specific Highlight objects from the CSS.highlights registry. Since this API works like a JavaScript Map, you can set and delete to update the currently registered Highlights.\n\n\nBrowser Support\n\n\nThe specification for the CSS Custom Highlight API is relatively new and its implementation in browsers is still incomplete. So, although this is going to be a very useful addition to the web platform, it’s not quite ready for production use.\n\n\n\nThe Microsoft Edge team is implementing the CSS Custom Highlight API in Chromium at the moment. In fact, the feature can already be used in Canary versions right now by enabling the Experimental Web Platform features flag (under about:flags). There is currently no firm plan as to when the feature will ship in Chrome, Edge, and other Chromium-based browsers, but it’s getting very close.\n\n\n\nThe API is also supported in Safari 99+ but behind an experiment flag (Develop → Experimental Features → Highlight API), and the interface is a little bit different in that it uses StaticRange objects instead.\n\n\n\nFirefox does not support the API yet, though you can read Mozilla’s position about it for more information.\n\n\nDemo\n\n\nSpeaking of Microsoft Edge, they have a demo set up where you can take the CSS Custom Highlight API for a test drive. But Before trying the demo, be sure you’re using either Chrome or Edge Canary with the Experimental Web Platform features flag in the about:flags page.\n\n\n\n/button View the demo\n\n\n\nThe demo uses the Custom Highlight API to highlight ranges of text in the page based on what you type in the search field at the top of the page.\n\n\n\nAfter the page loads, JavaScript code retrieves all the text nodes in the page (using a TreeWalker) and when the user types in the search field, the code iterates over these nodes until it finds matches. Those matches are then used to create Range objects, which are then highlighted with the Custom Highlight API.\n\n\nClosing Thoughts\n\n\nSo, is this new browser-provided highlighting API really worth it? Totally!\n\n\n\nFor one, even if the CSS Custom Highlight API may seem a bit complicated at first (i.e. having to create ranges, then highlights, then registering them, and finally styling them), it’s still way simpler than having to create new DOM elements and insert them in the right places.\n\n\n\nMore importantly, browser engines can style these ranges very, very fast.\n\n\n\nThe reason only a subset of CSS properties is allowed to be used with the ::highlight() pseudo-element is that the subset only contains properties that can be applied by the browser very effectively without having to recreate the layout of the page. Highlighting ranges of text by inserting new DOM elements in the page around them requires the engine to do much more work.\n\n\n\nBut don’t take my word for it. Fernando Fiori, who worked on the API, created this nice performance comparison demo. On my computer, the CSS Custom Highlight API performs on average 5✕ as fast as the DOM-based highlighting.\n\n\n\nWith Chromium and Safari experimental support already here, we’re getting close to something that can be used in production. I can’t wait for browsers to support the Custom Highlight API consistently and see what features this will unlock!\n\nCSS Custom Highlight API: The Future of Highlighting Text Ranges on the Web originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-03-01T17:41:13.000Z",
      "date_modified": "2022-03-01T17:41:13.000Z",
      "_plugin": {
        "pageFilename": "79351fea8e8b21c9ade7d89a9460d9b3d06f6e395b4071a149b72c5257736bea.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=364351",
      "url": "https://css-tricks.com/ahmad-shadeed-use-cases-for-css-fit-content/",
      "title": "Ahmad Shadeed: Use Cases For CSS fit-content",
      "summary": "Ahmad Shadeed covers the CSS fit-content sizing keyword. It’s useful! It just doesn’t come up super often. I find myself using min-content a lot more, like when setting up the height of a grid-template-row.\nThe fit-content keyword is actually …\n\nAhmad Shadeed: Use Cases For CSS fit-content originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><a href=\"https://ishadeed.com/snippet/fit-content/\" rel=\"noopener\">Ahmad Shadeed covers</a> the CSS <code>fit-content</code> sizing keyword. It&#8217;s useful! It just doesn&#8217;t come up <em>super</em> often. I find myself using <code>min-content</code> a lot more, like when setting up the height of a <code>grid-template-row</code>.</p>\n\n\n\n<p>The <code>fit-content</code> keyword is actually closely related to <code>min-content</code> and <code>max-content</code> — it just has a little heuristic it follows that Ahmad nicely illustrates as a flow chart.</p>\n\n\n\n<span id=\"more-364351\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1340\" height=\"1158\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/fit-content.png?resize=1340%2C1158&#038;ssl=1\" alt=\"Ahmad Shadeed's flow chat illustrating the way browsers handle the CSS fit-content keyword.\" class=\"wp-image-364363\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/fit-content.png?w=1340&amp;ssl=1 1340w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/fit-content.png?resize=300%2C259&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/fit-content.png?resize=1024%2C885&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/fit-content.png?resize=768%2C664&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/fit-content.png?resize=1000%2C864&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><a href=\"https://ishadeed.com/snippet/fit-content/\" rel=\"noopener\">&#8220;Use Cases For CSS fit-content&#8221;</a> by Ahmad Shadeed</figcaption></figure>\n\n\n\n<p>My favorite use case is covered here: sizing a <code>&lt;figure&gt;</code> with <code>fit-content</code>, so that it neatly wraps around the <code>&lt;img&gt;</code>. That way, even if the image doesn&#8217;t fill the parent space, and it can remain block-level.</p>\n\n\n\n<p>We also covered <a href=\"https://css-tricks.com/fit-content-and-fit-content/\">PPK&#8217;s deep dive on <code>fit-content</code></a> last year. One of the key takeaways for understanding it is knowing that is it essentially a shorthand way of writing:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.box {\n  width: fit-content;\n\n  /* ... is the same as ... */\n  width: auto;\n  min-width: min-content;\n  max-width: max-content;\n}</code></pre>\n<p><a href=\"https://ishadeed.com/snippet/fit-content/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/ahmad-shadeed-use-cases-for-css-fit-content/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/ahmad-shadeed-use-cases-for-css-fit-content/\">Ahmad Shadeed: Use Cases For CSS fit-content</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Ahmad Shadeed covers the CSS fit-content sizing keyword. It’s useful! It just doesn’t come up super often. I find myself using min-content a lot more, like when setting up the height of a grid-template-row.\n\n\n\nThe fit-content keyword is actually closely related to min-content and max-content — it just has a little heuristic it follows that Ahmad nicely illustrates as a flow chart.\n\n\n\n\n\n\n\n“Use Cases For CSS fit-content” by Ahmad Shadeed\n\n\n\nMy favorite use case is covered here: sizing a <figure> with fit-content, so that it neatly wraps around the <img>. That way, even if the image doesn’t fill the parent space, and it can remain block-level.\n\n\n\nWe also covered PPK’s deep dive on fit-content last year. One of the key takeaways for understanding it is knowing that is it essentially a shorthand way of writing:\n\n\n\n.box {\n  width: fit-content;\n\n  /* ... is the same as ... */\n  width: auto;\n  min-width: min-content;\n  max-width: max-content;\n}\nTo Shared Link — Permalink on CSS-Tricks\nAhmad Shadeed: Use Cases For CSS fit-content originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-03-01T15:41:16.000Z",
      "date_modified": "2022-03-01T15:41:16.000Z",
      "_plugin": {
        "pageFilename": "125cb7f7bd7f0ce08270916b966149a48fb7e71aeb23a0cf7c0edd0725890e8d.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=364346",
      "url": "https://css-tricks.com/ie-down-edge-up-global-browser-usage-stats-are-for-cocktail-parties-and-conference-slides/",
      "title": "IE Down, Edge Up… Global Browser Usage Stats Are for Cocktail Parties and Conference Slides",
      "summary": "I enjoy articles like Hartley Charlton’s “Microsoft Edge Looks Set to Overtake Safari as World’s Second Most Popular Desktop Browser.” It’s juicy! We know these massive players in the browser market care very much about their market share, so when …\n\nIE Down, Edge Up… Global Browser Usage Stats Are for Cocktail Parties and Conference Slides originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>I enjoy articles like Hartley Charlton&#8217;s <a href=\"https://www.macrumors.com/2022/02/22/microsoft-edge-to-overtake-safari/\" rel=\"noopener\">&#8220;Microsoft Edge Looks Set to Overtake Safari as World&#8217;s Second Most Popular Desktop Browser.&#8221;</a> It&#8217;s juicy! We know these massive players in the browser market care very much about their market share, so when one passes another it&#8217;s news. Like an Olympic speed skater favored for the gold getting a bronze instead, or the like.</p>\n\n\n\n<span id=\"more-364346\"></span>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Microsoft Edge is now used on 9.54 percent of desktops worldwide, a mere 0.3 percent behind Apple&#8217;s Safari, which stands at 9.84 percent. Google Chrome continues to hold first place with an overwhelming 65.38 percent of the market. Mozilla Firefox takes fourth place with 9.18 percent.</p><p>In January 2021, Safari held a 10.38 percent market share and appears to be gradually losing users to rival browsers over time. If the trend continues, Apple is likely to slip to third or fourth place in the near future.</p></blockquote>\n\n\n\n<p>Scoping the data down even by continent is entirely different. Like in Europe, Edge has already passed Safari, but in North America, the gap is still 5%. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"927\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?resize=1600%2C927&#038;ssl=1\" alt=\"\" class=\"wp-image-364378\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?resize=300%2C174&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?resize=1024%2C593&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?resize=768%2C445&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?resize=1536%2C890&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?resize=1000%2C579&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Source:<a href=\"https://www.macrumors.com/2022/02/22/microsoft-edge-to-overtake-safari/\" rel=\"noopener\"> MacRumors.com</a></figcaption></figure>\n\n\n\n<p>What does it matter to <em>you or me</em>? Nothing, I hope. These global stats <em>should</em> mean very little to us, outside a little casual nerdy cocktail party chatter. Please don&#8217;t make decisions about what to support and not support based on global statistics. Put some kind of basic analytics in place on your site, get data from actual visits, and make choices on <em>that</em> data. That&#8217;s the only data that matters.</p>\n\n\n\n<p>Alan Dávalos&#8217; <a href=\"https://engineering.linecorp.com/en/blog/the-baseline-for-web-development-in-2022/\" rel=\"noopener\">&#8220;The baseline for web development in 2022&#8221;</a> paints a picture of what we should be supporting based again on global browser usage statistics. </p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Globally, IE’s current market share is under 0.5%. And even in Japan, which has a higher market share of IE compared to other countries, IE’s market share is close to 2% and has a downward tendency.<br><br>Until now we kept supporting IE due to its market share. But now, there are basically no good reasons to keep supporting IE.</p></blockquote>\n\n\n\n<p>Again it seems so bizarre to me that any of us would make a choice on what to support based on a global usage statistic. Even when huge players make choices, they do it based on their own data. When Google &#8220;dropped&#8221; IE 11 (they still serve a perfectly fine baseline experience), they <a href=\"https://twitter.com/cramforce/status/1443962459723755533\" rel=\"noopener\">&#8220;did the math.&#8221;</a> WordPress, famously powering somewhere in the &#8220;a third of the whole internet&#8221; range, <a href=\"https://make.wordpress.org/core/2021/03/04/discussion-dropping-support-for-ie11/\" rel=\"noopener\">factored in usage of their own product</a>.</p>\n\n\n\n<p>Even if you&#8217;re building a brand new product and trying to make these choices, you&#8217;ll have analytic data soon enough, and can make future-facing support choices based on that as it rolls in.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/ie-down-edge-up-global-browser-usage-stats-are-for-cocktail-parties-and-conference-slides/\">IE Down, Edge Up&#8230; Global Browser Usage Stats Are for Cocktail Parties and Conference Slides</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "I enjoy articles like Hartley Charlton’s “Microsoft Edge Looks Set to Overtake Safari as World’s Second Most Popular Desktop Browser.” It’s juicy! We know these massive players in the browser market care very much about their market share, so when one passes another it’s news. Like an Olympic speed skater favored for the gold getting a bronze instead, or the like.\n\n\n\n\n\n\n\nMicrosoft Edge is now used on 9.54 percent of desktops worldwide, a mere 0.3 percent behind Apple’s Safari, which stands at 9.84 percent. Google Chrome continues to hold first place with an overwhelming 65.38 percent of the market. Mozilla Firefox takes fourth place with 9.18 percent.In January 2021, Safari held a 10.38 percent market share and appears to be gradually losing users to rival browsers over time. If the trend continues, Apple is likely to slip to third or fourth place in the near future.\n\n\n\nScoping the data down even by continent is entirely different. Like in Europe, Edge has already passed Safari, but in North America, the gap is still 5%. \n\n\n\nSource: MacRumors.com\n\n\n\nWhat does it matter to you or me? Nothing, I hope. These global stats should mean very little to us, outside a little casual nerdy cocktail party chatter. Please don’t make decisions about what to support and not support based on global statistics. Put some kind of basic analytics in place on your site, get data from actual visits, and make choices on that data. That’s the only data that matters.\n\n\n\nAlan Dávalos’ “The baseline for web development in 2022” paints a picture of what we should be supporting based again on global browser usage statistics. \n\n\n\nGlobally, IE’s current market share is under 0.5%. And even in Japan, which has a higher market share of IE compared to other countries, IE’s market share is close to 2% and has a downward tendency.Until now we kept supporting IE due to its market share. But now, there are basically no good reasons to keep supporting IE.\n\n\n\nAgain it seems so bizarre to me that any of us would make a choice on what to support based on a global usage statistic. Even when huge players make choices, they do it based on their own data. When Google “dropped” IE 11 (they still serve a perfectly fine baseline experience), they “did the math.” WordPress, famously powering somewhere in the “a third of the whole internet” range, factored in usage of their own product.\n\n\n\nEven if you’re building a brand new product and trying to make these choices, you’ll have analytic data soon enough, and can make future-facing support choices based on that as it rolls in.\n\nIE Down, Edge Up… Global Browser Usage Stats Are for Cocktail Parties and Conference Slides originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-28T23:14:29.000Z",
      "date_modified": "2022-02-28T23:14:29.000Z",
      "_plugin": {
        "pageFilename": "333c9f4a8ff9b59745d5509aa6d7623122f2a031a5347f6391b10650ea239715.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363929",
      "url": "https://css-tricks.com/web-component-pseudo-classes-and-pseudo-elements/",
      "title": "Web Component Pseudo-Classes and Pseudo-Elements are Easier Than You Think",
      "summary": "We’ve discussed a lot about the internals of using CSS in this ongoing series on web components, but there are a few special pseudo-elements and pseudo-classes that, like good friends, willingly smell your possibly halitotic breath before you go …\n\nWeb Component Pseudo-Classes and Pseudo-Elements are Easier Than You Think originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>We’ve discussed a lot about the internals of using CSS in this <a href=\"https://css-tricks.com/web-components-are-easier-than-you-think/\">ongoing series on web components</a>, but there are a few special pseudo-elements and pseudo-classes that, like good friends, willingly smell your possibly halitotic breath before you go talk to that potential love interest. You know, they help you out when you need it most. And, like a good friend will hand you a breath mint, these pseudo-elements and pseudo-classes provide you with some solutions both from <em>within</em> the web component and from <em>outside</em> the web component — the website where the web component lives.</p>\n\n\n\n<p>I’m specifically referring to the <code>::part</code> and <code>::slotted</code> pseudo-elements, and the <code>:defined</code>, <code>:host</code>, and <code>:host-context</code> pseudo-classes. They give us extra ways to interact with web components. Let&#8217;s examine them closer.</p>\n\n\n\n<span id=\"more-363929\"></span>\n\n\n<h3 id=\"article-series\">Article series</h3>\n\n\n<ul class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/web-components-are-easier-than-you-think/\">Web Components Are Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/interactive-web-components-are-easier-than-you-think/\">Interactive Web Components Are Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/using-web-components-in-wordpress-is-easier-than-you-think/\">Using Web Components in WordPress is Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/supercharging-built-in-elements-with-web-components-is-easier-than-you-think/\">Supercharging Built-In Elements With Web Components &#8220;is&#8221; Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/context-aware-web-components\">Context-Aware Web Components Are Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/web-component-pseudo-classes-and-pseudo-elements\">Web Component Pseudo-Classes and Pseudo-Elements are Easier Than You Think</a> <em>(You are here)</em></li></ul>\n\n\n<h3 id=\"the-part-pseudoelement\">The <code>::part</code> pseudo-element</h3>\n\n\n<p><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::part\" rel=\"noopener\">::part</a></code>, in short, allows you to pierce the shadow tree, which is just my Lord-of-the-Rings-y way to say it lets you style elements <em>inside</em> the shadow DOM from <em>outside</em> the shadow DOM. In theory, you should encapsulate all of your styles for the shadow DOM within the shadow DOM, i.e. within a <code>&lt;style&gt;</code> element in your <code>&lt;template&gt;</code> element.</p>\n\n\n\n<p>So, given something like this from the very <a href=\"https://css-tricks.com/web-components-are-easier-than-you-think/\">first part of this series</a>, where you have an <code>&lt;h2&gt;</code> in your <code>&lt;template&gt;</code>, your styles for that <code>&lt;h2&gt;</code> should all be in the <code>&lt;style&gt;</code> element.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template id=\"zprofiletemplate\">\n  &lt;style>\n    h2 {\n      font-size: 3em;\n      margin: 0 0 0.25em 0;\n      line-height: 0.8;\n    }\n    /* other styles */\n  &lt;/style>\n  &lt;div class=\"profile-wrapper\">\n    &lt;div class=\"info\">\n      &lt;h2>\n        &lt;slot name=\"zombie-name\">Zombie Bob&lt;/slot>\n      &lt;/h2>\n      &lt;!-- other zombie profile info -->\n    &lt;/div>\n&lt;/template></code></pre>\n\n\n\n<p>But sometimes we might need to style an element in the shadow DOM based on information that exists on the page. For instance, let&#8217;s say we have a page for each zombie in the undying love system with matches. We could add a class to profiles based on how close of a match they are. We could then, for instance, highlight a match’s name if he/she/it is a good match. The closeness of a match would vary based on whose list of potential matches is being shown and we won’t know that information until we’re on that page, so we can’t bake the functionality into the web component. Since the <code>&lt;h2&gt;</code> is in the shadow DOM, though, we can’t access or style it from outside the shadow DOM meaning a selector of <code>zombie-profile h2</code> on the matches page won’t work.</p>\n\n\n\n<p>But, if we make a slight adjustment to the <code>&lt;template&gt;</code> markup by adding a <code>part</code> attribute to the <code>&lt;h2&gt;</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template id=\"zprofiletemplate\">\n  &lt;style>\n    h2 {\n      font-size: 3em;\n      margin: 0 0 0.25em 0;\n      line-height: 0.8;\n    }\n    /* other styles */\n  &lt;/style>\n  &lt;div class=\"profile-wrapper\">\n    &lt;div class=\"info\">\n      &lt;h2 part=\"zname\">\n        &lt;slot name=\"zombie-name\">Zombie Bob&lt;/slot>\n      &lt;/h2>\n      &lt;!-- other zombie profile info -->\n    &lt;/div>\n&lt;/template></code></pre>\n\n\n\n<p>Like a spray of Bianca in the mouth, we now have the superpowers to break through the shadow DOM barrier and style those elements from <em>outside</em> of the <code>&lt;template&gt;</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* External stylesheet */\n.high-match::part(zname) {\n  color: blue;\n}\n.medium-match::part(zname) {\n  color: navy;\n}\n.low-match::part(zname) {\n  color: slategray;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_dyVaqWL\" src=\"//codepen.io/anon/embed/dyVaqWL?height=450&amp;theme-id=1&amp;slug-hash=dyVaqWL&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed dyVaqWL\" title=\"CodePen Embed dyVaqWL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>There are lots of things to consider when it comes to using CSS <code>::part</code>. For example, styling an element inside of a part is a no-go:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* frowny-face emoji */\n.high-match::part(zname) span { ... }</code></pre>\n\n\n\n<p>But you can add a <code>part</code> attribute on that element and style it via its own part name.</p>\n\n\n\n<p>What happens if we have a web component inside another web component, though? Will <code>::part</code> still work? If the web component appears in the page’s markup, i.e. you’re slotting it in, <code>::part</code> works just fine from the main page’s CSS.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;zombie-profile class=\"high-match\">\n  &lt;img slot=\"profile-image\" src=\"https://assets.codepen.io/1804713/leroy.png\" />\n  &lt;span slot=\"zombie-name\">Leroy&lt;/span>\n  &lt;zombie-details slot=\"zdetails\">\n    &lt;!-- Leroy's details -->\n  &lt;/zombie-details>\n&lt;/zombie-profile></code></pre>\n\n\n\n<p>But if the web component is in the template/shadow DOM, then <code>::part</code> cannot pierce both shadow trees, just the first one. We need to bring the <code>::part</code> into the light… so to speak. We can do that with an <code>exportparts</code> attribute.</p>\n\n\n\n<p>To demonstrate this we’ll add a “watermark” behind the profiles using a web component. (Why? Believe it or not this was the least contrived example I could come up with.) Here are our templates: (1) the template for <code>&lt;zombie-watermark&gt;</code>, and (2) the same template for <code>&lt;zombie-profile&gt;</code> but with added a <code>&lt;zombie-watermark&gt;</code> element on the end.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template id=\"zwatermarktemplate\">\n  &lt;style>\n    div {\n    text-transform: uppercase;\n      font-size: 2.1em;\n      color: rgb(0 0 0 / 0.1);\n      line-height: 0.75;\n      letter-spacing: -5px;\n    }\n    span {\n      color: rgb( 255 0 0 / 0.15);\n    }\n  &lt;/style>\n  &lt;div part=\"watermark\">\n    U n d y i n g  L o v e  U n d y i n g  L o v e  U n d y i n g  L o v e  &lt;span part=\"copyright\">&copy;2 0 2 7 U n d y i n g  L o v e  U n L t d .&lt;/span>\n  &lt;!-- Repeat this a bunch of times so we can cover the background of the profile -->\n  &lt;/div> \n&lt;/template>\n&lt;template id=\"zprofiletemplate\">\n  &lt;style>\n    ::part(watermark) {\n      color: rgb( 0 0 255 / 0.1);\n    }\n    /* More styles */\n  &lt;/style>\n  &lt;!-- zombie-profile markup -->\n  &lt;zombie-watermark exportparts=\"copyright\">&lt;/zombie-watermark>\n&lt;/template>\n&lt;style>\n  /* External styles */\n  ::part(copyright) {\n    color: rgb( 0 100 0 / 0.125);\n  }\n&lt;/style></code></pre>\n\n\n\n<p>Since <code>::part(watermark)</code> is only one shadow DOM above the <code>&lt;zombie-watermark&gt;</code>, it works fine from within the <code>&lt;zombie-profile&gt;</code>’s template styles. Also, since we’ve used <code>exportparts=\"copyright\"</code> on the <code>&lt;zombie-watermark&gt;</code>, the copyright part has been pushed up into the <code>&lt;zombie-profile&gt;</code>&#8216;s shadow DOM and <code>::part(copyright)</code> now works even in external styles, but <code>::part(watermark)</code> will not work outside the <code>&lt;zombie-profile&gt;</code>’s template.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GROmyLN\" src=\"//codepen.io/anon/embed/GROmyLN?height=450&amp;theme-id=1&amp;slug-hash=GROmyLN&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GROmyLN\" title=\"CodePen Embed GROmyLN\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We can also forward and <strong>rename parts</strong> with that attribute:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;zombie-watermark exportparts=\"copyright: cpyear\">&lt;/zombie-watermark></code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Within zombie-profile's shadow DOM */\n\n/* happy-face emoji */\n::part(cpyear) { ... }\n\n/* frowny-face emoji */\n::part(copyright) { ... }</code></pre>\n\n\n\n<p>Structural pseudo-classes (<code>:nth-child</code>, etc.) don’t work on parts either, but, at least in Safari, you can use pseudo-classes like <code>:hover</code>. Let’s animate the high match names a little and make them shake as they’re lookin’ for some lovin’. Okay, I heard that and agree it&#8217;s awkward. Let’s… uh… make them more, shall we say, noticeable, with a little movement.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.high::part(name):hover {\n  animation: highmatch 1s ease-in-out;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNGVLyE\" src=\"//codepen.io/anon/embed/oNGVLyE?height=450&amp;theme-id=1&amp;slug-hash=oNGVLyE&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNGVLyE\" title=\"CodePen Embed oNGVLyE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"the-slotted-pseudoelement\">The <code>::slotted</code> pseudo-element</h3>\n\n\n<p>The <code>::slotted</code> CSS pseudo-element actually came up when <a href=\"https://css-tricks.com/interactive-web-components-are-easier-than-you-think/\">we covered interactive web components</a>. The basic idea is that <code>::slotted</code> represents any content in a <code>slot</code> in a web component, i.e. the element that has the <code>slot</code> attribute on it. But, where <code>::part</code> pierces through the shadow DOM to make a web component’s elements accessible to outside styles, <code>::slotted</code> remains encapsulated in the <code>&lt;style&gt;</code> element in the component’s <code>&lt;template&gt;</code> and accesses the element that&#8217;s technically outside the shadow DOM.</p>\n\n\n\n<p>In our <code>&lt;zombie-profile&gt;</code> component, for example, each profile image is inserted into the element through the <code>slot=\"profile-image\"</code>.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;zombie-profile>\n  &lt;img slot=\"profile-image\" src=\"photo.jpg\" /> \n  &lt;!-- rest of the content -->\n&lt;/zombie-profile></code></pre>\n\n\n\n<p>That means we can access that image — as well as any image in any other slot — like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">::slotted(img) {\n  width: 100%;\n  max-width: 300px;\n  height: auto;\n  margin: 0 1em 0 0;\n}</code></pre>\n\n\n\n<p>Similarly, we could select <em>all</em> slots with <code>::slotted(*)</code> regardless of what element it is. Just beware that <code>::slotted</code> has to select an element — text nodes are immune to <code>::slotted</code> zombie styles. And children of the element in the slot are inaccessible.</p>\n\n\n<h3 id=\"the-defined-pseudoclass\">The <code>:defined</code> pseudo-class</h3>\n\n\n<p><code>:defined</code> matches all defined elements (I know, surprising, right?), both built-in and custom. If your custom element is shuffling along like a zombie avoiding his girlfriend’s dad’s questions about his “living” situation, you may not want the corpses of the content to show while you’re waiting for them to come back to life errr&#8230; load.</p>\n\n\n\n<p>You can use the <code>:defined</code> pseudo-class to hide a web component before it’s available — or “defined” — like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:not(:defined) {\n  display: none;\n}</code></pre>\n\n\n\n<p>You can see how <code>:defined</code> acts as a sort of mint in the mouth of our component styles, preventing any broken content from showing (or bad breath from leaking) while the page is still loading. Once the element’s defined, it’ll automatically appear because it&#8217;s now, you know, defined and not <em>not</em> defined.</p>\n\n\n\n<p>I added a <code>setTimeout</code> of five seconds to the web component in the following demo. That way, you can see that <code>&lt;zombie-profile&gt;</code> elements are not shown while they are undefined. The <code>&lt;h1&gt;</code> and the <code>&lt;div&gt;</code> that holds the <code>&lt;zombie-profile&gt;</code> components are still there. It’s just the <code>&lt;zombie-profile&gt;</code> web component that gets <code>display: none</code> since they are not yet defined.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNZmozy\" src=\"//codepen.io/anon/embed/WNZmozy?height=450&amp;theme-id=1&amp;slug-hash=WNZmozy&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNZmozy\" title=\"CodePen Embed WNZmozy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"the-host-pseudoclass\">The <code>:host</code> pseudo-class</h3>\n\n\n<p>Let’s say you want to make styling changes to the custom element itself. While you could do this from <em>outside</em> the custom element (like tightening that N95), the result would not be encapsulated, and additional CSS would have to be transferred to wherever this custom element is placed. </p>\n\n\n\n<p>It’d be very convenient then to have a pseudo-class that can reach <em>outside</em> the shadow DOM and select the shadow root. That CSS pseudo-class is <code>:host</code>.</p>\n\n\n\n<p>In previous examples throughout this series, I set the <code>&lt;zombie-profile&gt;</code> width from the main page’s CSS, like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">zombie-profile {\n  width: calc(50% - 1em);\n}</code></pre>\n\n\n\n<p>With <code>:host</code>, however, I can set that width from <em>inside</em> the web component, like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:host {\n  width: calc(50% - 1em);\n}</code></pre>\n\n\n\n<p>In fact, there was a div with a class of <code>.profile-wrapper</code> in my examples that I can now remove because I can use the shadow root as my wrapper with <code>:host</code>. That’s a nice way to slim down the markup.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwLObNP\" src=\"//codepen.io/anon/embed/RwLObNP?height=450&amp;theme-id=1&amp;slug-hash=RwLObNP&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwLObNP\" title=\"CodePen Embed RwLObNP\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>You can do descendant selectors from the <code>:host</code>, but only descendants inside the shadow DOM can be accessed — nothing that’s been slotted into your web component (without using <code>::slotted</code>).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"549\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=2560%2C549&#038;ssl=1\" alt=\"Showing the parts of the HTML that are relevant to the :host pseudo-element.\" class=\"wp-image-363930\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=300%2C64&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=1024%2C220&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=768%2C165&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=1536%2C329&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=2048%2C439&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=1000%2C214&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>That said, <code>:host</code> isn’t a one trick zombie. It can also take a parameter, e.g. a class selector, and will only apply styling if the class is present.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:host(.high) {\n  border: 2px solid blue;\n}</code></pre>\n\n\n\n<p>This allows you to make changes should certain classes be added to the custom element.</p>\n\n\n\n<p>You can also pass pseudo-classes in there, like <code>:host(:last-child)</code> and <code>:host(:hover)</code>.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYGoGmr\" src=\"//codepen.io/anon/embed/eYGoGmr?height=450&amp;theme-id=1&amp;slug-hash=eYGoGmr&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYGoGmr\" title=\"CodePen Embed eYGoGmr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"the-hostcontext-pseudoclass\">The <code>:host-context</code> pseudo-class</h3>\n\n\n<p>Now let’s talk about <code>:host-context</code>. It’s like our friend <code>:host()</code>, but on steroids. While <code>:host</code> gets you the shadow root, it won’t tell you anything about the context in which the custom element lives or its parent and ancestor elements.</p>\n\n\n\n<p><code>:host-context</code>, on the other hand, throws the inhibitions to the wind, allowing you to follow the DOM tree up the rainbow to the leprechaun in a leotard. Just note that at the time I’m writing this, <code>:host-context</code> is unsupported in Firefox or Safari. So use it for progressive enhancement.</p>\n\n\n\n<p>Here’s how it works. We’ll split our list of zombie profiles into two divs. The first div will have all of the high zombie matches with a <code>.bestmatch</code> class. The second div will hold all the medium and low love matches with a <code>.worstmatch</code> class.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"profiles bestmatch\">\n  &lt;zombie-profile class=\"high\">\n    &lt;!-- etc. -->\n  &lt;/zombie-profile>\n  &lt;!-- more profiles -->\n&lt;/div>\n\n&lt;div class=\"profiles worstmatch\">\n  &lt;zombie-profile class=\"medium\">\n    &lt;!-- etc. -->\n  &lt;/zombie-profile>\n  &lt;zombie-profile class=\"low\">\n    &lt;!-- etc. -->\n  &lt;/zombie-profile>\n  &lt;!-- more profiles -->\n&lt;/div></code></pre>\n\n\n\n<p>Let’s say we want to apply different background colors to the <code>.bestmatch</code> and <code>.worstmatch</code> classes. We are unable to do this with just <code>:host</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:host(.bestmatch) {\n  background-color: #eef;\n}\n:host(.worstmatch) {\n  background-color: #ddd;\n}</code></pre>\n\n\n\n<p>That’s because our best and worst match classes are not on our custom elements. What we want is to be able to select the profiles&#8217;s parent elements from within the shadow DOM. <code>:host-context</code> pokes past the custom element to <em>match</em> the, er, match classes we want to style.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:host-context(.bestmatch) {\n  background-color: #eef;\n}\n:host-context(.worstmatch) {\n  background-color: #ddd;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYEXbYg\" src=\"//codepen.io/anon/embed/zYEXbYg?height=450&amp;theme-id=1&amp;slug-hash=zYEXbYg&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYEXbYg\" title=\"CodePen Embed zYEXbYg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Well, thanks for hanging out despite all the bad breath. (I know you couldn&#8217;t tell, but above when I was talking about <em>your</em> breath, I was secretly talking about <em>my</em> breath.)</p>\n\n\n\n<p>How would you use <code>::part</code>, <code>::slotted</code>, <code>:defined</code>, <code>:host</code>, and <code>:host-context</code>  in your web component? Let me know in the comments. (Or if you have cures to chronic halitosis, my wife would be <em>very</em> interested in to hear more.)</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/web-component-pseudo-classes-and-pseudo-elements/\">Web Component Pseudo-Classes and Pseudo-Elements are Easier Than You Think</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "We’ve discussed a lot about the internals of using CSS in this ongoing series on web components, but there are a few special pseudo-elements and pseudo-classes that, like good friends, willingly smell your possibly halitotic breath before you go talk to that potential love interest. You know, they help you out when you need it most. And, like a good friend will hand you a breath mint, these pseudo-elements and pseudo-classes provide you with some solutions both from within the web component and from outside the web component — the website where the web component lives.\n\n\n\nI’m specifically referring to the ::part and ::slotted pseudo-elements, and the :defined, :host, and :host-context pseudo-classes. They give us extra ways to interact with web components. Let’s examine them closer.\n\n\n\n\n\n\nArticle series\n\n\nWeb Components Are Easier Than You ThinkInteractive Web Components Are Easier Than You ThinkUsing Web Components in WordPress is Easier Than You ThinkSupercharging Built-In Elements With Web Components “is” Easier Than You ThinkContext-Aware Web Components Are Easier Than You ThinkWeb Component Pseudo-Classes and Pseudo-Elements are Easier Than You Think (You are here)\n\n\nThe ::part pseudo-element\n\n\n::part, in short, allows you to pierce the shadow tree, which is just my Lord-of-the-Rings-y way to say it lets you style elements inside the shadow DOM from outside the shadow DOM. In theory, you should encapsulate all of your styles for the shadow DOM within the shadow DOM, i.e. within a <style> element in your <template> element.\n\n\n\nSo, given something like this from the very first part of this series, where you have an <h2> in your <template>, your styles for that <h2> should all be in the <style> element.\n\n\n\n<template id=\"zprofiletemplate\">\n  <style>\n    h2 {\n      font-size: 3em;\n      margin: 0 0 0.25em 0;\n      line-height: 0.8;\n    }\n    /* other styles */\n  </style>\n  <div class=\"profile-wrapper\">\n    <div class=\"info\">\n      <h2>\n        <slot name=\"zombie-name\">Zombie Bob</slot>\n      </h2>\n      <!-- other zombie profile info -->\n    </div>\n</template>\n\n\n\nBut sometimes we might need to style an element in the shadow DOM based on information that exists on the page. For instance, let’s say we have a page for each zombie in the undying love system with matches. We could add a class to profiles based on how close of a match they are. We could then, for instance, highlight a match’s name if he/she/it is a good match. The closeness of a match would vary based on whose list of potential matches is being shown and we won’t know that information until we’re on that page, so we can’t bake the functionality into the web component. Since the <h2> is in the shadow DOM, though, we can’t access or style it from outside the shadow DOM meaning a selector of zombie-profile h2 on the matches page won’t work.\n\n\n\nBut, if we make a slight adjustment to the <template> markup by adding a part attribute to the <h2>:\n\n\n\n<template id=\"zprofiletemplate\">\n  <style>\n    h2 {\n      font-size: 3em;\n      margin: 0 0 0.25em 0;\n      line-height: 0.8;\n    }\n    /* other styles */\n  </style>\n  <div class=\"profile-wrapper\">\n    <div class=\"info\">\n      <h2 part=\"zname\">\n        <slot name=\"zombie-name\">Zombie Bob</slot>\n      </h2>\n      <!-- other zombie profile info -->\n    </div>\n</template>\n\n\n\nLike a spray of Bianca in the mouth, we now have the superpowers to break through the shadow DOM barrier and style those elements from outside of the <template>:\n\n\n\n/* External stylesheet */\n.high-match::part(zname) {\n  color: blue;\n}\n.medium-match::part(zname) {\n  color: navy;\n}\n.low-match::part(zname) {\n  color: slategray;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nThere are lots of things to consider when it comes to using CSS ::part. For example, styling an element inside of a part is a no-go:\n\n\n\n/* frowny-face emoji */\n.high-match::part(zname) span { ... }\n\n\n\nBut you can add a part attribute on that element and style it via its own part name.\n\n\n\nWhat happens if we have a web component inside another web component, though? Will ::part still work? If the web component appears in the page’s markup, i.e. you’re slotting it in, ::part works just fine from the main page’s CSS.\n\n\n\n<zombie-profile class=\"high-match\">\n  <img slot=\"profile-image\" src=\"https://assets.codepen.io/1804713/leroy.png\" />\n  <span slot=\"zombie-name\">Leroy</span>\n  <zombie-details slot=\"zdetails\">\n    <!-- Leroy's details -->\n  </zombie-details>\n</zombie-profile>\n\n\n\nBut if the web component is in the template/shadow DOM, then ::part cannot pierce both shadow trees, just the first one. We need to bring the ::part into the light… so to speak. We can do that with an exportparts attribute.\n\n\n\nTo demonstrate this we’ll add a “watermark” behind the profiles using a web component. (Why? Believe it or not this was the least contrived example I could come up with.) Here are our templates: (1) the template for <zombie-watermark>, and (2) the same template for <zombie-profile> but with added a <zombie-watermark> element on the end.\n\n\n\n<template id=\"zwatermarktemplate\">\n  <style>\n    div {\n    text-transform: uppercase;\n      font-size: 2.1em;\n      color: rgb(0 0 0 / 0.1);\n      line-height: 0.75;\n      letter-spacing: -5px;\n    }\n    span {\n      color: rgb( 255 0 0 / 0.15);\n    }\n  </style>\n  <div part=\"watermark\">\n    U n d y i n g  L o v e  U n d y i n g  L o v e  U n d y i n g  L o v e  <span part=\"copyright\">©2 0 2 7 U n d y i n g  L o v e  U n L t d .</span>\n  <!-- Repeat this a bunch of times so we can cover the background of the profile -->\n  </div> \n</template>\n<template id=\"zprofiletemplate\">\n  <style>\n    ::part(watermark) {\n      color: rgb( 0 0 255 / 0.1);\n    }\n    /* More styles */\n  </style>\n  <!-- zombie-profile markup -->\n  <zombie-watermark exportparts=\"copyright\"></zombie-watermark>\n</template>\n<style>\n  /* External styles */\n  ::part(copyright) {\n    color: rgb( 0 100 0 / 0.125);\n  }\n</style>\n\n\n\nSince ::part(watermark) is only one shadow DOM above the <zombie-watermark>, it works fine from within the <zombie-profile>’s template styles. Also, since we’ve used exportparts=\"copyright\" on the <zombie-watermark>, the copyright part has been pushed up into the <zombie-profile>‘s shadow DOM and ::part(copyright) now works even in external styles, but ::part(watermark) will not work outside the <zombie-profile>’s template.\n\n\n\nCodePen Embed Fallback\n\n\n\nWe can also forward and rename parts with that attribute:\n\n\n\n<zombie-watermark exportparts=\"copyright: cpyear\"></zombie-watermark>\n\n\n\n/* Within zombie-profile's shadow DOM */\n\n/* happy-face emoji */\n::part(cpyear) { ... }\n\n/* frowny-face emoji */\n::part(copyright) { ... }\n\n\n\nStructural pseudo-classes (:nth-child, etc.) don’t work on parts either, but, at least in Safari, you can use pseudo-classes like :hover. Let’s animate the high match names a little and make them shake as they’re lookin’ for some lovin’. Okay, I heard that and agree it’s awkward. Let’s… uh… make them more, shall we say, noticeable, with a little movement.\n\n\n\n.high::part(name):hover {\n  animation: highmatch 1s ease-in-out;\n}\n\n\n\nCodePen Embed Fallback\n\n\nThe ::slotted pseudo-element\n\n\nThe ::slotted CSS pseudo-element actually came up when we covered interactive web components. The basic idea is that ::slotted represents any content in a slot in a web component, i.e. the element that has the slot attribute on it. But, where ::part pierces through the shadow DOM to make a web component’s elements accessible to outside styles, ::slotted remains encapsulated in the <style> element in the component’s <template> and accesses the element that’s technically outside the shadow DOM.\n\n\n\nIn our <zombie-profile> component, for example, each profile image is inserted into the element through the slot=\"profile-image\".\n\n\n\n<zombie-profile>\n  <img slot=\"profile-image\" src=\"photo.jpg\" /> \n  <!-- rest of the content -->\n</zombie-profile>\n\n\n\nThat means we can access that image — as well as any image in any other slot — like this:\n\n\n\n::slotted(img) {\n  width: 100%;\n  max-width: 300px;\n  height: auto;\n  margin: 0 1em 0 0;\n}\n\n\n\nSimilarly, we could select all slots with ::slotted(*) regardless of what element it is. Just beware that ::slotted has to select an element — text nodes are immune to ::slotted zombie styles. And children of the element in the slot are inaccessible.\n\n\nThe :defined pseudo-class\n\n\n:defined matches all defined elements (I know, surprising, right?), both built-in and custom. If your custom element is shuffling along like a zombie avoiding his girlfriend’s dad’s questions about his “living” situation, you may not want the corpses of the content to show while you’re waiting for them to come back to life errr… load.\n\n\n\nYou can use the :defined pseudo-class to hide a web component before it’s available — or “defined” — like this:\n\n\n\n:not(:defined) {\n  display: none;\n}\n\n\n\nYou can see how :defined acts as a sort of mint in the mouth of our component styles, preventing any broken content from showing (or bad breath from leaking) while the page is still loading. Once the element’s defined, it’ll automatically appear because it’s now, you know, defined and not not defined.\n\n\n\nI added a setTimeout of five seconds to the web component in the following demo. That way, you can see that <zombie-profile> elements are not shown while they are undefined. The <h1> and the <div> that holds the <zombie-profile> components are still there. It’s just the <zombie-profile> web component that gets display: none since they are not yet defined.\n\n\n\nCodePen Embed Fallback\n\n\nThe :host pseudo-class\n\n\nLet’s say you want to make styling changes to the custom element itself. While you could do this from outside the custom element (like tightening that N95), the result would not be encapsulated, and additional CSS would have to be transferred to wherever this custom element is placed. \n\n\n\nIt’d be very convenient then to have a pseudo-class that can reach outside the shadow DOM and select the shadow root. That CSS pseudo-class is :host.\n\n\n\nIn previous examples throughout this series, I set the <zombie-profile> width from the main page’s CSS, like this:\n\n\n\nzombie-profile {\n  width: calc(50% - 1em);\n}\n\n\n\nWith :host, however, I can set that width from inside the web component, like this:\n\n\n\n:host {\n  width: calc(50% - 1em);\n}\n\n\n\nIn fact, there was a div with a class of .profile-wrapper in my examples that I can now remove because I can use the shadow root as my wrapper with :host. That’s a nice way to slim down the markup.\n\n\n\nCodePen Embed Fallback\n\n\n\nYou can do descendant selectors from the :host, but only descendants inside the shadow DOM can be accessed — nothing that’s been slotted into your web component (without using ::slotted).\n\n\n\n\n\n\n\nThat said, :host isn’t a one trick zombie. It can also take a parameter, e.g. a class selector, and will only apply styling if the class is present.\n\n\n\n:host(.high) {\n  border: 2px solid blue;\n}\n\n\n\nThis allows you to make changes should certain classes be added to the custom element.\n\n\n\nYou can also pass pseudo-classes in there, like :host(:last-child) and :host(:hover).\n\n\n\nCodePen Embed Fallback\n\n\nThe :host-context pseudo-class\n\n\nNow let’s talk about :host-context. It’s like our friend :host(), but on steroids. While :host gets you the shadow root, it won’t tell you anything about the context in which the custom element lives or its parent and ancestor elements.\n\n\n\n:host-context, on the other hand, throws the inhibitions to the wind, allowing you to follow the DOM tree up the rainbow to the leprechaun in a leotard. Just note that at the time I’m writing this, :host-context is unsupported in Firefox or Safari. So use it for progressive enhancement.\n\n\n\nHere’s how it works. We’ll split our list of zombie profiles into two divs. The first div will have all of the high zombie matches with a .bestmatch class. The second div will hold all the medium and low love matches with a .worstmatch class.\n\n\n\n<div class=\"profiles bestmatch\">\n  <zombie-profile class=\"high\">\n    <!-- etc. -->\n  </zombie-profile>\n  <!-- more profiles -->\n</div>\n\n<div class=\"profiles worstmatch\">\n  <zombie-profile class=\"medium\">\n    <!-- etc. -->\n  </zombie-profile>\n  <zombie-profile class=\"low\">\n    <!-- etc. -->\n  </zombie-profile>\n  <!-- more profiles -->\n</div>\n\n\n\nLet’s say we want to apply different background colors to the .bestmatch and .worstmatch classes. We are unable to do this with just :host:\n\n\n\n:host(.bestmatch) {\n  background-color: #eef;\n}\n:host(.worstmatch) {\n  background-color: #ddd;\n}\n\n\n\nThat’s because our best and worst match classes are not on our custom elements. What we want is to be able to select the profiles’s parent elements from within the shadow DOM. :host-context pokes past the custom element to match the, er, match classes we want to style.\n\n\n\n:host-context(.bestmatch) {\n  background-color: #eef;\n}\n:host-context(.worstmatch) {\n  background-color: #ddd;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\n\n\n\n\nWell, thanks for hanging out despite all the bad breath. (I know you couldn’t tell, but above when I was talking about your breath, I was secretly talking about my breath.)\n\n\n\nHow would you use ::part, ::slotted, :defined, :host, and :host-context  in your web component? Let me know in the comments. (Or if you have cures to chronic halitosis, my wife would be very interested in to hear more.)\n\nWeb Component Pseudo-Classes and Pseudo-Elements are Easier Than You Think originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-28T15:37:23.000Z",
      "date_modified": "2022-02-28T15:37:23.000Z",
      "_plugin": {
        "pageFilename": "cd5deda2620a834a2719ef3d4d86bca9727b1e4b9b5810ec9a2a0ff9fbbbf5ec.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=364070",
      "url": "https://css-tricks.com/trailing-slashes-on-urls-contentious-or-settled/",
      "title": "Trailing Slashes on URLs: Contentious or Settled?",
      "summary": "A fun deep dive from Zach. Do you have an opinion on which you should use?\n1) https://website.com/foo/\n2) https://websites.com/foo\nThe first option has a “trailing slash.” The second does not.\nI’ve always preferred this thinking: you use a trailing …\n\nTrailing Slashes on URLs: Contentious or Settled? originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>A fun deep dive from Zach. Do you have an opinion on which you should use?</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">1) https://website.com/foo/\n2) https://websites.com/foo</code></pre>\n\n\n\n<p>The first option has a &#8220;trailing slash.&#8221; The second does not.</p>\n\n\n\n<p>I&#8217;ve always preferred this thinking: you use a trailing slash if that page has child pages (as in, it is something of a directory page, even if has unique content of its own). If it&#8217;s the end-of-the-line (of <em>content</em>), no trailing slash.</p>\n\n\n\n<span id=\"more-364070\"></span>\n\n\n\n<p>I say that, but this very site doesn&#8217;t practice it. Blog posts on this site are like <code>css-tricks.com/blog-post/</code> <em>with</em> a trailing slash and if you leave off the trailing slash, WordPress will redirect to include it. That&#8217;s part of the reason Zach is interested here. Redirects come with a performance penalty, so it&#8217;s ideal to have it happen as infrequently possible.</p>\n\n\n\n<p>Performance is one thing, but SEO is another one. If you render the same content, both with and without a trailing slash, that&#8217;s theoretically a duplicate content penalty and a no-no. (Although that seems weird to me, I would think Google would smart enough not to be terribly concerned by this.)</p>\n\n\n\n<p>Where resources resolve to seems like the biggest deal to me. Here&#8217;s Zach:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>If you’re using relative resource URLs, the assets may be missing on Vercel, Render, and Azure Static Web Apps (depending on which duplicated endpoint you’ve visited).</p><p><code>&lt;img src=\"image.avif\"&gt;</code>&nbsp;on&nbsp;<code>/resource/</code>&nbsp;resolves to&nbsp;<code>/resource/image.avif</code></p><p><code>&lt;img src=\"image.avif\"&gt;</code>&nbsp;on&nbsp;<code>/resource</code>&nbsp;resolves to&nbsp;<code>/image.avif</code></p></blockquote>\n\n\n\n<p>That&#8217;s a non-trivial difference and, to me, a reason the redirect is worth it. Can&#8217;t be having a page with broken resources for something this silly.</p>\n\n\n\n<p>What complicates this is that the site-building framework might have opinions about this <strong>and</strong> a hosting provider might have opinions about this. As Zach notes, there are some disagreements among hosts, so it&#8217;s something to watch for.</p>\n\n\n\n<p>Me, I&#8217;d go with the grain as much as I possibly could. As long as redirects are in place and I don&#8217;t have to override any config, I&#8217;m cool.</p>\n<p><a href=\"https://www.zachleat.com/web/trailing-slash/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/trailing-slashes-on-urls-contentious-or-settled/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/trailing-slashes-on-urls-contentious-or-settled/\">Trailing Slashes on URLs: Contentious or Settled?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "A fun deep dive from Zach. Do you have an opinion on which you should use?\n\n\n\n1) https://website.com/foo/\n2) https://websites.com/foo\n\n\n\nThe first option has a “trailing slash.” The second does not.\n\n\n\nI’ve always preferred this thinking: you use a trailing slash if that page has child pages (as in, it is something of a directory page, even if has unique content of its own). If it’s the end-of-the-line (of content), no trailing slash.\n\n\n\n\n\n\n\nI say that, but this very site doesn’t practice it. Blog posts on this site are like css-tricks.com/blog-post/ with a trailing slash and if you leave off the trailing slash, WordPress will redirect to include it. That’s part of the reason Zach is interested here. Redirects come with a performance penalty, so it’s ideal to have it happen as infrequently possible.\n\n\n\nPerformance is one thing, but SEO is another one. If you render the same content, both with and without a trailing slash, that’s theoretically a duplicate content penalty and a no-no. (Although that seems weird to me, I would think Google would smart enough not to be terribly concerned by this.)\n\n\n\nWhere resources resolve to seems like the biggest deal to me. Here’s Zach:\n\n\n\nIf you’re using relative resource URLs, the assets may be missing on Vercel, Render, and Azure Static Web Apps (depending on which duplicated endpoint you’ve visited).<img src=\"image.avif\"> on /resource/ resolves to /resource/image.avif<img src=\"image.avif\"> on /resource resolves to /image.avif\n\n\n\nThat’s a non-trivial difference and, to me, a reason the redirect is worth it. Can’t be having a page with broken resources for something this silly.\n\n\n\nWhat complicates this is that the site-building framework might have opinions about this and a hosting provider might have opinions about this. As Zach notes, there are some disagreements among hosts, so it’s something to watch for.\n\n\n\nMe, I’d go with the grain as much as I possibly could. As long as redirects are in place and I don’t have to override any config, I’m cool.\nTo Shared Link — Permalink on CSS-Tricks\nTrailing Slashes on URLs: Contentious or Settled? originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-25T21:13:08.000Z",
      "date_modified": "2022-02-25T21:13:08.000Z",
      "_plugin": {
        "pageFilename": "6143cd7329e405f2a65fdb2dd8a3fa81a3528a3f5523ebccbbbe7c559cc65842.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363619",
      "url": "https://css-tricks.com/when-to-avoid-css-text-decoration-shorthand/",
      "title": "When to Avoid the text-decoration Shorthand Property",
      "summary": "In my recent article about CSS underline bugs in Chrome, I discussed text-decoration-thickness and text-underline-offset, two relatively new and widely-supported CSS properties that give us more control over the styling of underlines.\nLet me demonstrate the usefulness of …\n\nWhen to Avoid the text-decoration Shorthand Property originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>In my recent article about <a href=\"https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/\">CSS underline bugs in Chrome</a>, I discussed <code>text-decoration-thickness</code> and <code>text-underline-offset</code>, two relatively new and widely-supported CSS properties that give us more control over the styling of underlines.</p>\n\n\n\n<p>Let me demonstrate the usefulness of <code>text-decoration-thickness</code> on a simple example. The <a href=\"https://fonts.google.com/specimen/Ubuntu\" rel=\"noopener\">Ubuntu web font</a> has a fairly thick default underline. We can make this underline thinner like so:</p>\n\n\n\n<span id=\"more-363619\"></span>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:any-link {\n  text-decoration-thickness: 0.08em;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1226\" height=\"652\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/ubuntu-font-underline-thickness.png?resize=1226%2C652&#038;ssl=1\" alt=\"Showing two links, a default and one that decreases the text-decoration-thickness.\" class=\"wp-image-363621\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/ubuntu-font-underline-thickness.png?w=1226&amp;ssl=1 1226w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/ubuntu-font-underline-thickness.png?resize=300%2C160&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/ubuntu-font-underline-thickness.png?resize=1024%2C545&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/ubuntu-font-underline-thickness.png?resize=768%2C408&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/ubuntu-font-underline-thickness.png?resize=1000%2C532&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>/explanation Throughout this article, I will use the <code>:any-link</code> selector instead of the <code>a</code> element to match hyperlinks. The problem with the <code>a</code> tag as a selector is that it matches all <code>&lt;a&gt;</code> elements, even the ones that don’t have a <code>href</code> attribute and thus <a href=\"https://www.tempertemper.net/blog/links-missing-href-attributes-and-over-engineered-code\" rel=\"noopener\">aren’t hyperlinks</a>. The <code>:any-link</code> selector only matches <code>&lt;a&gt;</code> elements that are hyperlinks. Web browsers also use <code>:any-link</code> instead of <code>a</code> in their user agent stylesheets.</p>\n\n\n<h3 id=\"hover-underlines\">Hover underlines</h3>\n\n\n<p>Many websites, including Google Search and Wikipedia, remove underlines from links and only show them when the user hovers a link. Removing underlines from links in body text is <a href=\"https://adrianroselli.com/2016/06/on-link-underlines.html\" rel=\"noopener\">not a good idea</a>, but it can make sense in places where links are more spaced apart (navigation, footer, etc.). With that being said, here’s a simple implementation of hover underlines for links in the website’s header:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">header :any-link {\n  text-decoration: none;\n}\n\nheader :any-link:hover {\n  text-decoration: underline;\n}</code></pre>\n\n\n\n<p>But there’s a problem. If we tested this code in a browser, we’d notice that the underlines in the header have the default thickness, not the thinner style that we declared earlier. Why did <code>text-decoration-thickness</code> stop working after we added hover underlines?</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKypZyX\" src=\"//codepen.io/anon/embed/KKypZyX?height=450&amp;theme-id=1&amp;slug-hash=KKypZyX&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKypZyX\" title=\"CodePen Embed KKypZyX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Let’s look at the full CSS code again. Can you think of a reason why the custom <code>thickness</code> doesn’t apply to the hover underline?</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:any-link {\n  text-decoration-thickness: 0.08em;\n}\n\nheader :any-link {\n  text-decoration: none;\n}\n\nheader :any-link:hover {\n  text-decoration: underline;\n}</code></pre>\n\n\n\n<p>The reason for this behavior is that <code>text-decoration</code> is a shorthand property and <code>text-decoration-thickness</code> its associated longhand property. Setting <code>text-decoration</code> to <code>none</code> or <code>underline</code> has the side effect of re-initializing the other three text decoration components (<code>thickness</code>, <code>style</code>, and <code>color</code>). This is defined in the <a href=\"https://drafts.csswg.org/css-text-decor-4/#text-decoration-property\" rel=\"noopener\">CSS Text Decoration module</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The <code>text-decoration</code> property is a shorthand for setting <code>text-decoration-line</code>, <code>text-decoration-thickness</code>, <code>text-decoration-style</code>, and <code>text-decoration-color</code> in one declaration. Omitted values are set to their initial values.</p></blockquote>\n\n\n\n<p>You can confirm this in the browser’s DevTools by selecting one of the hyperlinks in the DOM inspector and then expanding the <code>text-decoration</code> property in the CSS pane.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1098\" height=\"534\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/text-decoration-none-devtools.png?resize=1098%2C534&#038;ssl=1\" alt=\"DevTools screenshot showing text-decoration styles on the :any-link pseudo-selector.\" class=\"wp-image-363622\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/text-decoration-none-devtools.png?w=1098&amp;ssl=1 1098w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/text-decoration-none-devtools.png?resize=300%2C146&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/text-decoration-none-devtools.png?resize=1024%2C498&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/text-decoration-none-devtools.png?resize=768%2C374&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/text-decoration-none-devtools.png?resize=1000%2C486&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In order to get <code>text-decoration-thickness</code> to work on hover underlines, we’ll have to make a small change to the above CSS code. There are actually multiple ways to achieve this. We could:</p>\n\n\n\n<ul><li>set <code>text-decoration-thickness</code> after <code>text-decoration</code>,</li><li>declare the thickness in the <code>text-decoration</code> shorthand, or</li><li>use <code>text-decoration-line</code> instead of <code>text-decoration</code>.</li></ul>\n\n\n<h3 id=\"choosing-the-best-textdecoration-option\">Choosing the best text-decoration option</h3>\n\n\n<p>Our first thought might be to simply repeat the <code>text-decoration-thickness</code> declaration in the <code>:hover</code> state. It’s a quick and simple fix that indeed works.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* OPTION A */\n\nheader :any-link {\n  text-decoration: none;\n}\n\nheader :any-link:hover {\n  text-decoration: underline;\n  text-decoration-thickness: 0.08em; /* set thickness again */\n}</code></pre>\n\n\n\n<p>However, since <code>text-decoration</code> is a shorthand and <code>text-decoration-thickness</code> is its associated longhand, there really should be no need to use both at the same time. As a shorthand, <code>text-decoration</code> allows setting both the underline itself and the underline’s thickness, all in one declaration.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* OPTION B */\n\nheader :any-link {\n  text-decoration: none;\n}\n\nheader :any-link:hover {\n  text-decoration: underline 0.08em; /* set both line and thickness */\n}</code></pre>\n\n\n\n<p>If this code looks unfamiliar to you, that could be because the idea of using <code>text-decoration</code> as a shorthand is relatively new. This property was only subsequently turned into a shorthand in the <a href=\"https://drafts.csswg.org/css-text-decor-4/#text-decoration-property\" rel=\"noopener\">CSS Text Decoration module</a>. In the days of <a href=\"https://drafts.csswg.org/css2/#lining-striking-props\" rel=\"noopener\">CSS 2</a>, <code>text-decoration</code> was a simple property.</p>\n\n\n\n<p>Unfortunately, Safari still hasn’t fully caught up with these changes. In the WebKit browser engine, the shorthand variant of <code>text-decoration</code> remains prefixed (<code>-webkit-text-decoration</code>), and it doesn’t support <code>thickness</code> values yet. See <a href=\"https://bugs.webkit.org/show_bug.cgi?id=230083\" rel=\"noopener\">WebKit bug 230083</a> for more information.</p>\n\n\n\n<p>This rules out the <code>text-decoration</code> shorthand syntax. The above code won’t work in Safari, even if we added the <code>-webkit-</code> prefix. Luckily, there’s another way to avoid repeating the <code>text-decoration-thickness</code> declaration.</p>\n\n\n\n<p>When <code>text-decoration</code> was turned into a shorthand, a new <code>text-decoration-line</code> longhand was introduced to take over its old job. We can use this property to hide and show the underline without affecting the other three text decoration components.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* OPTION C */\n\nheader :any-link {\n  text-decoration-line: none;\n}\n\nheader :any-link:hover {\n  text-decoration-line: underline;\n}</code></pre>\n\n\n\n<p>Since we’re only updating the <code>line</code> component of the <code>text-decoration</code> value, the previously declared <code>thickness</code> remains intact. I think that this is the best way to implement hover underlines.</p>\n\n\n<h3 id=\"be-aware-of-shorthands\">Be aware of shorthands</h3>\n\n\n<p>Keep in mind that when you set a shorthand property, e.g., <code>text-decoration: underline</code>, any missing parts in the value are re-initialized. This is also why styles such as <code>background-repeat: no-repeat</code> are undone if you set <code>background: url(flower.jpg)</code> afterwards. See the article <a href=\"https://css-tricks.com/accidental-css-resets/\">“Accidental CSS Resets”</a> for more examples of this behavior.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/when-to-avoid-css-text-decoration-shorthand/\">When to Avoid the text-decoration Shorthand Property</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "In my recent article about CSS underline bugs in Chrome, I discussed text-decoration-thickness and text-underline-offset, two relatively new and widely-supported CSS properties that give us more control over the styling of underlines.\n\n\n\nLet me demonstrate the usefulness of text-decoration-thickness on a simple example. The Ubuntu web font has a fairly thick default underline. We can make this underline thinner like so:\n\n\n\n\n\n\n\n:any-link {\n  text-decoration-thickness: 0.08em;\n}\n\n\n\n\n\n\n\n/explanation Throughout this article, I will use the :any-link selector instead of the a element to match hyperlinks. The problem with the a tag as a selector is that it matches all <a> elements, even the ones that don’t have a href attribute and thus aren’t hyperlinks. The :any-link selector only matches <a> elements that are hyperlinks. Web browsers also use :any-link instead of a in their user agent stylesheets.\n\n\nHover underlines\n\n\nMany websites, including Google Search and Wikipedia, remove underlines from links and only show them when the user hovers a link. Removing underlines from links in body text is not a good idea, but it can make sense in places where links are more spaced apart (navigation, footer, etc.). With that being said, here’s a simple implementation of hover underlines for links in the website’s header:\n\n\n\nheader :any-link {\n  text-decoration: none;\n}\n\nheader :any-link:hover {\n  text-decoration: underline;\n}\n\n\n\nBut there’s a problem. If we tested this code in a browser, we’d notice that the underlines in the header have the default thickness, not the thinner style that we declared earlier. Why did text-decoration-thickness stop working after we added hover underlines?\n\n\n\nCodePen Embed Fallback\n\n\n\nLet’s look at the full CSS code again. Can you think of a reason why the custom thickness doesn’t apply to the hover underline?\n\n\n\n:any-link {\n  text-decoration-thickness: 0.08em;\n}\n\nheader :any-link {\n  text-decoration: none;\n}\n\nheader :any-link:hover {\n  text-decoration: underline;\n}\n\n\n\nThe reason for this behavior is that text-decoration is a shorthand property and text-decoration-thickness its associated longhand property. Setting text-decoration to none or underline has the side effect of re-initializing the other three text decoration components (thickness, style, and color). This is defined in the CSS Text Decoration module:\n\n\n\nThe text-decoration property is a shorthand for setting text-decoration-line, text-decoration-thickness, text-decoration-style, and text-decoration-color in one declaration. Omitted values are set to their initial values.\n\n\n\nYou can confirm this in the browser’s DevTools by selecting one of the hyperlinks in the DOM inspector and then expanding the text-decoration property in the CSS pane.\n\n\n\n\n\n\n\nIn order to get text-decoration-thickness to work on hover underlines, we’ll have to make a small change to the above CSS code. There are actually multiple ways to achieve this. We could:\n\n\n\nset text-decoration-thickness after text-decoration,declare the thickness in the text-decoration shorthand, oruse text-decoration-line instead of text-decoration.\n\n\nChoosing the best text-decoration option\n\n\nOur first thought might be to simply repeat the text-decoration-thickness declaration in the :hover state. It’s a quick and simple fix that indeed works.\n\n\n\n/* OPTION A */\n\nheader :any-link {\n  text-decoration: none;\n}\n\nheader :any-link:hover {\n  text-decoration: underline;\n  text-decoration-thickness: 0.08em; /* set thickness again */\n}\n\n\n\nHowever, since text-decoration is a shorthand and text-decoration-thickness is its associated longhand, there really should be no need to use both at the same time. As a shorthand, text-decoration allows setting both the underline itself and the underline’s thickness, all in one declaration.\n\n\n\n/* OPTION B */\n\nheader :any-link {\n  text-decoration: none;\n}\n\nheader :any-link:hover {\n  text-decoration: underline 0.08em; /* set both line and thickness */\n}\n\n\n\nIf this code looks unfamiliar to you, that could be because the idea of using text-decoration as a shorthand is relatively new. This property was only subsequently turned into a shorthand in the CSS Text Decoration module. In the days of CSS 2, text-decoration was a simple property.\n\n\n\nUnfortunately, Safari still hasn’t fully caught up with these changes. In the WebKit browser engine, the shorthand variant of text-decoration remains prefixed (-webkit-text-decoration), and it doesn’t support thickness values yet. See WebKit bug 230083 for more information.\n\n\n\nThis rules out the text-decoration shorthand syntax. The above code won’t work in Safari, even if we added the -webkit- prefix. Luckily, there’s another way to avoid repeating the text-decoration-thickness declaration.\n\n\n\nWhen text-decoration was turned into a shorthand, a new text-decoration-line longhand was introduced to take over its old job. We can use this property to hide and show the underline without affecting the other three text decoration components.\n\n\n\n/* OPTION C */\n\nheader :any-link {\n  text-decoration-line: none;\n}\n\nheader :any-link:hover {\n  text-decoration-line: underline;\n}\n\n\n\nSince we’re only updating the line component of the text-decoration value, the previously declared thickness remains intact. I think that this is the best way to implement hover underlines.\n\n\nBe aware of shorthands\n\n\nKeep in mind that when you set a shorthand property, e.g., text-decoration: underline, any missing parts in the value are re-initialized. This is also why styles such as background-repeat: no-repeat are undone if you set background: url(flower.jpg) afterwards. See the article “Accidental CSS Resets” for more examples of this behavior.\n\nWhen to Avoid the text-decoration Shorthand Property originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-25T15:28:33.000Z",
      "date_modified": "2022-02-25T15:28:33.000Z",
      "_plugin": {
        "pageFilename": "ae32810c476faec05d80c8808d937bae2f605df14b518d02329b800634815e21.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=364152",
      "url": "https://css-tricks.com/manuel-matuzovics-css-specificity-demo/",
      "title": "Manuel Matuzovic’s CSS Specificity Demo",
      "summary": "If you’re looking for a primer on CSS specificity, we’ve got that. And if you’re trying to get ahead of the game, you should be aware of CSS Cascade Layers as well.\nOne of the ways to help get …\n\nManuel Matuzovic’s CSS Specificity Demo originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>If you&#8217;re looking for <a href=\"https://css-tricks.com/specifics-on-css-specificity/\">a primer on CSS specificity, we&#8217;ve got that</a>. And if you&#8217;re trying to get ahead of the game, you should be aware of <a href=\"https://css-tricks.com/css-cascade-layers/\">CSS Cascade Layers</a> as well.</p>\n\n\n\n<span id=\"more-364152\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2052\" height=\"1440\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=2052%2C1440&#038;ssl=1\" alt=\"Screenshot of the CSS Specificity Demo.\" class=\"wp-image-364163\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?w=2052&amp;ssl=1 2052w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=300%2C211&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=1024%2C719&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=768%2C539&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=1536%2C1078&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=2048%2C1437&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=1000%2C702&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>One of the ways to help get a grasp of CSS specificity is thinking terms of &#8220;what beats what&#8221; or how strong the specificity is. Manuel Matuzovic has <a href=\"https://www.matuzo.at/blog/2022/specificity/\" rel=\"noopener\">a helpful interactive step-by-step demo</a>. You keep clicking the &#8220;Add selector&#8221; button, and the CSS shown (and applied to the page) changes with ever-increasingly-strong selectors applied to the body that change the <code>background-color</code>. At the end, it veers into not-really-selectors trickery, like using <code>@keyframes</code> to override things.</p>\n\n\n<h3 id=\"more-specificity-practice\">More specificity practice</h3>\n\n\n<p>If you enjoyed the trickery at the end, check out Francisco Dias&#8217; <a href=\"https://css-tricks.com/a-specificity-battle/\">A Specificity Battle!</a>, an article we published a few years back that does a back-and-forth styling battle with <em>nineteen</em> steps &#8220;selecting&#8221; the same element to re-style it. CSS is cray sometimes.</p>\n<p><a href=\"https://www.matuzo.at/blog/2022/specificity/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/manuel-matuzovics-css-specificity-demo/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/manuel-matuzovics-css-specificity-demo/\">Manuel Matuzovic&#8217;s CSS Specificity Demo</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "If you’re looking for a primer on CSS specificity, we’ve got that. And if you’re trying to get ahead of the game, you should be aware of CSS Cascade Layers as well.\n\n\n\n\n\n\n\n\n\n\n\nOne of the ways to help get a grasp of CSS specificity is thinking terms of “what beats what” or how strong the specificity is. Manuel Matuzovic has a helpful interactive step-by-step demo. You keep clicking the “Add selector” button, and the CSS shown (and applied to the page) changes with ever-increasingly-strong selectors applied to the body that change the background-color. At the end, it veers into not-really-selectors trickery, like using @keyframes to override things.\n\n\nMore specificity practice\n\n\nIf you enjoyed the trickery at the end, check out Francisco Dias’ A Specificity Battle!, an article we published a few years back that does a back-and-forth styling battle with nineteen steps “selecting” the same element to re-style it. CSS is cray sometimes.\nTo Shared Link — Permalink on CSS-Tricks\nManuel Matuzovic’s CSS Specificity Demo originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-25T15:27:19.000Z",
      "date_modified": "2022-02-25T15:27:19.000Z",
      "_plugin": {
        "pageFilename": "b7aa1b32d8b76e63e173ed576c0dd725db4df13588febe9eb5dc6a4649664695.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=364138",
      "url": "https://css-tricks.com/my-white-whale-a-use-case-for-will-change/",
      "title": "My white whale: A use case for will-change",
      "summary": " Nic Chan:\n\n[…] the will-change property landed in major browsers in August 2015, and I’ve been on the lookout for when to use it ever since. It might seem self-evident to apply it to commonly animated properties such \n\n…\n\nMy white whale: A use case for will-change originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>&nbsp;<a href=\"https://www.nicchan.me/blog/a-use-case-for-will-change/\" rel=\"noopener\">Nic Chan</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>[&#8230;] the&nbsp;<code>will-change</code>&nbsp;property landed in major browsers in August 2015, and I&#8217;ve been on the lookout for when to use it ever since. It might seem self-evident to apply it to commonly animated properties such as transform or opacity, but the&nbsp;<a href=\"https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/\" rel=\"noopener\">browser already classifies them as composite properties</a>, thus, they are known as the few properties that you can already expect decent animation performance from. So, heeding the advice of the great developers who came before me, I was cautious and waited for the right opportunity to come along.</p></blockquote>\n\n\n\n<p>I was thinking-out-loud about this as well on ShopTalk not too long ago. I get the spirit behind <code><a href=\"https://css-tricks.com/almanac/properties/w/will-change/\">will-change</a></code>. It&#8217;s like responsive images or DNS prefetching: you give the browser extra information about what you&#8217;re about to do, and it can optimize it when it happens. But with <code>will-change</code>&#8230; <em>when?</em> Why isn&#8217;t there a simple reduced test case demo to showcase something with bad performance, then <code>will-change</code> being applied, and it becomes good performance?</p>\n\n\n\n<p>Well Nic found one little directly useful case where a hover-transformed pseudo-element leaves a little dingus of color behind in Safari, and that goes away if you use <code>will-change</code>. I tested it in the latest versions of Safari and found it to be true. Alrighty then, one use case! </p>\n\n\n\n<p>I&#8217;d love to see a more obvious direct use case. I imagine the sweet spot is on lower-power devices (that still have GPUs) but are new enough to know what <code>will-change</code> is. </p>\n<p><a href=\"https://www.nicchan.me/blog/a-use-case-for-will-change/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/my-white-whale-a-use-case-for-will-change/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/my-white-whale-a-use-case-for-will-change/\">My white whale: A use case for will-change</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": " Nic Chan:\n\n\n\n[…] the will-change property landed in major browsers in August 2015, and I’ve been on the lookout for when to use it ever since. It might seem self-evident to apply it to commonly animated properties such as transform or opacity, but the browser already classifies them as composite properties, thus, they are known as the few properties that you can already expect decent animation performance from. So, heeding the advice of the great developers who came before me, I was cautious and waited for the right opportunity to come along.\n\n\n\nI was thinking-out-loud about this as well on ShopTalk not too long ago. I get the spirit behind will-change. It’s like responsive images or DNS prefetching: you give the browser extra information about what you’re about to do, and it can optimize it when it happens. But with will-change… when? Why isn’t there a simple reduced test case demo to showcase something with bad performance, then will-change being applied, and it becomes good performance?\n\n\n\nWell Nic found one little directly useful case where a hover-transformed pseudo-element leaves a little dingus of color behind in Safari, and that goes away if you use will-change. I tested it in the latest versions of Safari and found it to be true. Alrighty then, one use case! \n\n\n\nI’d love to see a more obvious direct use case. I imagine the sweet spot is on lower-power devices (that still have GPUs) but are new enough to know what will-change is. \nTo Shared Link — Permalink on CSS-Tricks\nMy white whale: A use case for will-change originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-24T20:59:29.000Z",
      "date_modified": "2022-02-24T20:59:29.000Z",
      "_plugin": {
        "pageFilename": "16c817935038f259db6507a3a91bd212c36daa7bf8ec038e41ab2e781f5e139b.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363553",
      "url": "https://css-tricks.com/explain-the-first-10-lines-of-twitter-source-code/",
      "title": "Explain the First 10 Lines of Twitter’s Source Code to Me",
      "summary": "For the past few weeks, I’ve been hiring for a senior full-stack JavaScript engineer at my rental furniture company, Pabio. Since we’re a remote team, we conduct our interviews on Zoom, and I’ve observed that some developers are not …\n\nExplain the First 10 Lines of Twitter’s Source Code to Me originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>For the past few weeks, I’ve been hiring for a senior <a href=\"https://css-tricks.com/what-does-it-mean-to-be-full-stack/\">full-stack</a> JavaScript engineer at my rental furniture company, <a href=\"https://pabio.com/en-de/\" rel=\"noopener\">Pabio</a>. Since we’re a remote team, we conduct our interviews on Zoom, and I’ve observed that some developers are not great at live-coding or whiteboard interviews, even if they’re good at the job. So, instead, we have an hour-long technical discussion where I ask them questions about web vitals, accessibility, the browser wars, and other similar topics about the web. One of the questions I always like to ask is: <strong>&#8220;Explain the first ten or so lines of the Twitter source code to me.&#8221;</strong></p>\n\n\n\n<p>I think it&#8217;s a simple test that tells me a lot about the depth of fundamental front-end knowledge they have, and this article lists the best answers.</p>\n\n\n\n<span id=\"more-363553\"></span>\n\n\n\n<p>For context, I share my screen, open Twitter.com and click <strong>View source</strong>. Then I ask them to go line-by-line to help me understand the HTML, and they can say as much or as little as they like. I also zoom in to make the text more legible, so you don&#8217;t see the full line but you get an idea. Here&#8217;s what it looks like:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"1600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_1B56F376C1F0FF4107271F0A0DA0CCE65FEA59C4FFF17FD5500C71C0B3B69841_1642491088212_screenshot-twitter-source-scaled.jpg?resize=2560%2C1600&#038;ssl=1\" alt=\"Screenshot of source code from Twitter.\" class=\"wp-image-363554\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_1B56F376C1F0FF4107271F0A0DA0CCE65FEA59C4FFF17FD5500C71C0B3B69841_1642491088212_screenshot-twitter-source-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_1B56F376C1F0FF4107271F0A0DA0CCE65FEA59C4FFF17FD5500C71C0B3B69841_1642491088212_screenshot-twitter-source-scaled.jpg?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_1B56F376C1F0FF4107271F0A0DA0CCE65FEA59C4FFF17FD5500C71C0B3B69841_1642491088212_screenshot-twitter-source-scaled.jpg?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_1B56F376C1F0FF4107271F0A0DA0CCE65FEA59C4FFF17FD5500C71C0B3B69841_1642491088212_screenshot-twitter-source-scaled.jpg?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_1B56F376C1F0FF4107271F0A0DA0CCE65FEA59C4FFF17FD5500C71C0B3B69841_1642491088212_screenshot-twitter-source-scaled.jpg?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_1B56F376C1F0FF4107271F0A0DA0CCE65FEA59C4FFF17FD5500C71C0B3B69841_1642491088212_screenshot-twitter-source-scaled.jpg?resize=2048%2C1280&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_1B56F376C1F0FF4107271F0A0DA0CCE65FEA59C4FFF17FD5500C71C0B3B69841_1642491088212_screenshot-twitter-source-scaled.jpg?resize=1000%2C625&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Note that since our technical discussion is a conversation. I don’t expect a perfect answer from anyone. If I hear some right keywords, I know that the candidate knows the concept, and I try to push them in the right direction.</p>\n\n\n\n<h3 id=\"line-1-doctype-html\">Line 1: <code>&lt;!DOCTYPE html&gt;</code></h3>\n\n\n\n<p>The first line of every document&#8217;s source code is perfect for this interview because how much a candidate knows about the <code>DOCTYPE</code> declaration closely resembles how many years of experience they have. I still remember my Dreamweaver days with the long XHTML DOCTYPE line, like Chris listed in his article <a href=\"https://css-tricks.com/snippets/html/the-common-doctypes/\">&#8220;The Common DOCTYPES”</a> from 2009.</p>\n\n\n\n<p><strong>Perfect answer:</strong> This is the document type (doc-type) declaration that we always put as the first line in HTML files. You might think that this information is redundant because the browser already knows that the MIME type of the response is <code>text/html</code>; but <a href=\"https://css-tricks.com/chapter-8-css/\">in the Netscape/Internet Explorer days</a>, browsers had the difficult task of figuring out which HTML standard to use to render the page from multiple competing versions.</p>\n\n\n\n<p>This was especially annoying because each standard generated a different layout so this tag was adopted to make it easy for browsers. Previously, <code>DOCTYPE</code> tags were long and even included the specification link (kinda like SVGs have today), but luckily the simple <code>&lt;!doctype html&gt;</code> was standardized in HTML5 and still lives on.</p>\n\n\n\n<p><strong>Also accepted:</strong> This is the <code>DOCTYPE</code> tag to let the browser know that this is an HTML5 page and should be rendered as such.</p>\n\n\n\n<h3 id=\"line-2-html-dir-ltr-lang-en\">Line 2: <code>&lt;html dir=\"ltr\" lang=\"en\"&gt;</code></h3>\n\n\n\n<p>This line in the source code tells me if the candidate knows about accessibility and localization. Surprisingly, only a few people knew about the <code>dir</code> attribute in my interviews, but it’s a great segue into a discussion about screen readers. Almost everyone was able to figure out the <code>lang=\"en\"</code> attribute, even if they hadn&#8217;t used it before.</p>\n\n\n\n<p><strong>Perfect answer:</strong> This is the root element of an HTML document and all other elements are inside this one. Here, it has two attributes, direction and language. The direction attribute has the value left-to-right to tell user agents which direction the content is in; other values are right-to-left for languages like Arabic, or just <code>auto</code> which leaves it to the browser to figure out.</p>\n\n\n\n<p>The language attribute tells us that all content inside this tag is in English; you can set this value to any language tag, even to differentiate <code>en-us</code> and <code>en-gb</code>, for example. This is also useful for screen readers to know which language to announce in.</p>\n\n\n\n<h3 id=\"line-3-meta-charset-utf-8\">Line 3: <code>&lt;meta charset=\"utf-8\"&gt;</code></h3>\n\n\n\n<p><strong>Perfect answer:</strong> The meta tag in the source code is for supplying metadata about this document. The character set (char-set) attribute tells the browser which character encoding to use, and Twitter uses the standard UTF-8 encoding. UTF-8 is great because it has many character points so you can use all sorts of symbols and emoji in your source code. It&#8217;s important to put this tag near the beginning of your code so the browser hasn&#8217;t already started parsing too much text when it comes across this line; I think the rule is to put it in the first kilobyte of the document, but I&#8217;d say the best practice is to put it right at the top of <code>&lt;head&gt;</code>.</p>\n\n\n\n<p>As a side note, it looks like Twitter omits the <code>&lt;head&gt;</code> tag for performance reasons (less code to load), but I still like to make it explicit as it&#8217;s a clear home for all metadata, styles, etc.</p>\n\n\n\n<h3 id=\"line-4-meta-name-viewport-content-width-device\">Line 4: <code>&lt;meta name=\"viewport\" content=\"width=device-...</code></h3>\n\n\n\n<p><strong>Perfect answer:</strong> This meta tag in the source code is for properly sizing the webpage on small screens, like smartphones. If you remember the original iPhone keynote, Steve Jobs showed the entire New York Times website on that tiny 4.5-inch screen; back then it was an amazing feature that you had to pinch to zoom to actually be able to read.</p>\n\n\n\n<p>Now that websites are responsive by design, <code>width=device-width</code> tells the browser to use 100% of the device&#8217;s width as the viewport so there&#8217;s no horizontal scrolling, but you can even specify specific pixel values for width. The standard best practice is to set the initial scale to <code>1</code> and the width to <code>device-width</code> so people can still zoom around if they wish.</p>\n\n\n\n<p>The screenshot of the source code doesn&#8217;t show these values but it&#8217;s good to know: Twitter also applies <code>user-scalable=0</code> which, as the name suggests, disables the ability to zoom. This is not good for accessibility but makes the webpage feel more like a native app. It also sets <code>maximum-scale=1</code> for the same reason (you can use minimum and maximum scale to clamp the zoom-ablity between these values). In general, setting the full width and initial scale is enough.</p>\n\n\n\n<h3 id=\"line-5-meta-property-og-site-name-content-twitt\">Line 5: <code>&lt;meta property=\"og:site_name\" content=\"Twitt...</code></h3>\n\n\n\n<p>About 50% of all candidates knew about Open Graph tags, and a good answer to this question shows that they know about SEO.</p>\n\n\n\n<p><strong>Perfect answer:</strong> This tag is an Open Graph (OG) meta tag for the site name, Twitter. <a href=\"https://ogp.me\" rel=\"noopener\">The Open Graph protocol</a> was made by Facebook to make it easier to unfurl links and <a href=\"https://css-tricks.com/microbrowsers-are-everywhere/\">show their previews in a nice card layout</a>; developers can add all sorts of authorship details and cover images for fancy sharing. In fact, these days it&#8217;s even common to auto-generate the open graph image using something like Puppeteer. (<a href=\"https://css-tricks.com/automatic-social-share-images/\">CSS-Tricks uses a WordPress plugin</a> that does it.)</p>\n\n\n\n<p>Another interesting side note is that meta tags usually have the <code>name</code> attribute, but OG uses the non-standard <code>property</code> attribute. I guess that&#8217;s just Facebook being Facebook? The title, URL, and description Open Graph tags are kinda redundant because we already have regular meta tags for these, but people add them just to be safe. Most sites these days use a combination of Open Graph and other metatags and the content on a page to generate rich previews.</p>\n\n\n\n<h3 id=\"line-6-meta-name-apple-mobile-web-app-title-cont\">Line 6: <code>&lt;meta name=\"apple-mobile-web-app-title\" cont...</code></h3>\n\n\n\n<p>Most candidates didn’t know about this one, but experienced developers can talk about how to optimize a website for Apple devices, like <code>apple-touch-icon</code>s and Safari pinned tab SVGs.</p>\n\n\n\n<p><strong>Perfect answer:</strong> You can pin a website on an iPhone&#8217;s homescreen to make it feel like a native app. Safari doesn&#8217;t support progressive web apps and you can&#8217;t really use other browser engines on iOS, so you don&#8217;t really have other options if you want that native-like experience, which Twitter, of course, likes. So they add this to tell Safari that the title of this app is Twitter. The next line is similar and controls how the status bar should look like when the app has launched.</p>\n\n\n\n<h3 id=\"line-8-meta-name-theme-color-content-ffffff\">Line 8: <code>&lt;meta name=\"theme-color\" content=\"#ffffff\"...</code></h3>\n\n\n\n<p><strong>Perfect answer:</strong> This is the proper web standards-esque equivalent of the Apple status bar color meta tag. <a href=\"https://css-tricks.com/meta-theme-color-and-trickery/\">It tells the browser to theme the surrounding UI</a><a href=\"https://css-tricks.com/meta-theme-color-and-trickery/\">.</a> Chrome on Android and Brave on desktop both do a pretty good job with that. You can put any CSS color in the content, and can even use the <code>media</code> attribute to only show this color for a specific media query like, for example, to support a dark theme. You can also define this and additional properties in the web app manifest.</p>\n\n\n\n<h3 id=\"line-9-meta-http-equiv-origin-trial-content\">Line 9: <code>&lt;meta http-equiv=\"origin-trial\" content=\"...</code></h3>\n\n\n\n<p>Nobody I interviewed knew about this one. I would assume that you’d know this only if you have in-depth knowledge about all the new things that are happening on the standards track.</p>\n\n\n\n<p><strong>Perfect answer:</strong> Origin trials let us use new and experimental features on our site and the feedback is tracked by the user agent and reported to the web standards community without users having to opt-in to a feature flag. For example, Edge has an origin trial for dual-screen and foldable device primitives, which is pretty cool as you can make interesting layouts based on whether a foldable phone is opened or closed.</p>\n\n\n\n<p><strong>Also accepted:</strong> I don&#8217;t know about this one.</p>\n\n\n\n<h3 id=\"line-10-html-ms-text-size-adjust-100-webkit-text\">Line 10: <code>html{-ms-text-size-adjust:100%;-webkit-text...</code></h3>\n\n\n\n<p>Almost nobody knew about this one too; only if you know about CSS edge cases and optimizations, you’d be able to figure this line out.</p>\n\n\n\n<p><strong>Perfect answer:</strong> Imagine that you don&#8217;t have a mobile responsive site and you open it on a small screen, so the browser might resize the text to make it bigger so it&#8217;s easier to read. The CSS <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-size-adjust\" rel=\"noopener\"><code>text-size-adjust</code></a> property can either disable this feature with the value none or specify a percentage up to which the browser is allowed to make the text bigger.</p>\n\n\n\n<p>In this case, Twitter says the maximum is <code>100%</code>, so the text should be no bigger than the actual size; they just do that because their site is already responsive and they don&#8217;t want to risk a browser breaking the layout with a larger font size. This is applied to the root HTML tag so it applies to everything inside it. Since this is an experimental CSS property, vendor prefixes are required. Also, there&#8217;s a missing <code>&lt;style&gt;</code> before this CSS, but I&#8217;m guessing that&#8217;s minified in the previous line and we don&#8217;t see it.</p>\n\n\n\n<p><strong>Also accepted:</strong> I don&#8217;t know about this property in specific but the <code>-ms</code> and <code>-webkit-</code> are vendor prefixes needed by Internet Explorer and WebKit-based browsers, respectively, for non-standard properties. We used to require these prefixes when CSS3 came out, but as properties go from experimental to stable or are adopted to a standards track, these prefixes go away in favor of a standardized property.</p>\n\n\n\n<h3 id=\"bonus-line-11-body-margin-0\">Bonus — Line 11: <code>body{margin:0;}</code></h3>\n\n\n\n<p>This line from Twitter&#8217;s source code is particularly fun because you can follow-up with a question about the difference between resetting and normalizing a webpage. Almost everyone knew a version of the right answer.</p>\n\n\n\n<p><strong>Perfect answer:</strong> Because different browsers have different default styles (user agent stylesheet), you want to overwrite them by resetting properties so your site looks the same across devices. In this case, Twitter is telling the browser to remove the body tag’s default margin. This is just to reduce browser inconsistencies, but I prefer normalizing the styles instead of resetting them, i.e., applying the same defaults across browsers rather than removing them altogether. People even used to use <code>* { margin: 0 }</code> which is totally overkill and not great for performance, but now it&#8217;s common to import something like <code>normalize.css</code> or <code>reset.css</code> (or even <a href=\"https://css-tricks.com/an-interview-with-elad-shechter-on-the-new-css-reset/\">something newer</a>) and start from there.</p>\n\n\n\n<h3 id=\"more-lines\">More lines!</h3>\n\n\n\n<p>I always enjoy playing with the browser Inspector tool to see how sites are made, which is how I came up with this idea. Even though I consider myself sort of an expert on semantic HTML, I learn something new every time I do this exercise.</p>\n\n\n\n<p>Since Twitter is mostly a client-side React app, there’s only a few dozen lines in the source code. Even with that, there’s so much to learn! There are a few more interesting lines in the Twitter source code that I leave as an exercise for you, the reader. How many of them could you explain in an interview?</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/opensearch.xml\" title=\"Twitter\"></code></pre>\n\n\n\n<p>…tells browsers that users can add Twitter as a search engine.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;link rel=\"preload\" as=\"script\" crossorigin=\"anonymous\" href=\"https://abs.twimg.com/responsive-web/client-web/polyfills.cad508b5.js\" nonce=\"MGUyZTIyN2ItMDM1ZC00MzE5LWE2YmMtYTU5NTg2MDU0OTM1\" /></code></pre>\n\n\n\n<p>…has many interesting attributes that can be discussed, especially <code>nonce</code>.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;link rel=\"alternate\" hreflang=\"x-default\" href=\"https://twitter.com/\" /></code></pre>\n\n\n\n<p>…for international landing pages.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:focus:not([data-focusvisible-polyfill]){outline: none;}</code></pre>\n\n\n\n<p>…for removing the focus outline when not using keyboard navigation (the CSS <code>:focus-visible</code> selector is polyfilled here).</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/explain-the-first-10-lines-of-twitter-source-code/\">Explain the First 10 Lines of Twitter&#8217;s Source Code to Me</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "For the past few weeks, I’ve been hiring for a senior full-stack JavaScript engineer at my rental furniture company, Pabio. Since we’re a remote team, we conduct our interviews on Zoom, and I’ve observed that some developers are not great at live-coding or whiteboard interviews, even if they’re good at the job. So, instead, we have an hour-long technical discussion where I ask them questions about web vitals, accessibility, the browser wars, and other similar topics about the web. One of the questions I always like to ask is: “Explain the first ten or so lines of the Twitter source code to me.”\n\n\n\nI think it’s a simple test that tells me a lot about the depth of fundamental front-end knowledge they have, and this article lists the best answers.\n\n\n\n\n\n\n\nFor context, I share my screen, open Twitter.com and click View source. Then I ask them to go line-by-line to help me understand the HTML, and they can say as much or as little as they like. I also zoom in to make the text more legible, so you don’t see the full line but you get an idea. Here’s what it looks like:\n\n\n\n\n\n\n\nNote that since our technical discussion is a conversation. I don’t expect a perfect answer from anyone. If I hear some right keywords, I know that the candidate knows the concept, and I try to push them in the right direction.\n\n\n\nLine 1: <!DOCTYPE html>\n\n\n\nThe first line of every document’s source code is perfect for this interview because how much a candidate knows about the DOCTYPE declaration closely resembles how many years of experience they have. I still remember my Dreamweaver days with the long XHTML DOCTYPE line, like Chris listed in his article “The Common DOCTYPES” from 2009.\n\n\n\nPerfect answer: This is the document type (doc-type) declaration that we always put as the first line in HTML files. You might think that this information is redundant because the browser already knows that the MIME type of the response is text/html; but in the Netscape/Internet Explorer days, browsers had the difficult task of figuring out which HTML standard to use to render the page from multiple competing versions.\n\n\n\nThis was especially annoying because each standard generated a different layout so this tag was adopted to make it easy for browsers. Previously, DOCTYPE tags were long and even included the specification link (kinda like SVGs have today), but luckily the simple <!doctype html> was standardized in HTML5 and still lives on.\n\n\n\nAlso accepted: This is the DOCTYPE tag to let the browser know that this is an HTML5 page and should be rendered as such.\n\n\n\nLine 2: <html dir=\"ltr\" lang=\"en\">\n\n\n\nThis line in the source code tells me if the candidate knows about accessibility and localization. Surprisingly, only a few people knew about the dir attribute in my interviews, but it’s a great segue into a discussion about screen readers. Almost everyone was able to figure out the lang=\"en\" attribute, even if they hadn’t used it before.\n\n\n\nPerfect answer: This is the root element of an HTML document and all other elements are inside this one. Here, it has two attributes, direction and language. The direction attribute has the value left-to-right to tell user agents which direction the content is in; other values are right-to-left for languages like Arabic, or just auto which leaves it to the browser to figure out.\n\n\n\nThe language attribute tells us that all content inside this tag is in English; you can set this value to any language tag, even to differentiate en-us and en-gb, for example. This is also useful for screen readers to know which language to announce in.\n\n\n\nLine 3: <meta charset=\"utf-8\">\n\n\n\nPerfect answer: The meta tag in the source code is for supplying metadata about this document. The character set (char-set) attribute tells the browser which character encoding to use, and Twitter uses the standard UTF-8 encoding. UTF-8 is great because it has many character points so you can use all sorts of symbols and emoji in your source code. It’s important to put this tag near the beginning of your code so the browser hasn’t already started parsing too much text when it comes across this line; I think the rule is to put it in the first kilobyte of the document, but I’d say the best practice is to put it right at the top of <head>.\n\n\n\nAs a side note, it looks like Twitter omits the <head> tag for performance reasons (less code to load), but I still like to make it explicit as it’s a clear home for all metadata, styles, etc.\n\n\n\nLine 4: <meta name=\"viewport\" content=\"width=device-...\n\n\n\nPerfect answer: This meta tag in the source code is for properly sizing the webpage on small screens, like smartphones. If you remember the original iPhone keynote, Steve Jobs showed the entire New York Times website on that tiny 4.5-inch screen; back then it was an amazing feature that you had to pinch to zoom to actually be able to read.\n\n\n\nNow that websites are responsive by design, width=device-width tells the browser to use 100% of the device’s width as the viewport so there’s no horizontal scrolling, but you can even specify specific pixel values for width. The standard best practice is to set the initial scale to 1 and the width to device-width so people can still zoom around if they wish.\n\n\n\nThe screenshot of the source code doesn’t show these values but it’s good to know: Twitter also applies user-scalable=0 which, as the name suggests, disables the ability to zoom. This is not good for accessibility but makes the webpage feel more like a native app. It also sets maximum-scale=1 for the same reason (you can use minimum and maximum scale to clamp the zoom-ablity between these values). In general, setting the full width and initial scale is enough.\n\n\n\nLine 5: <meta property=\"og:site_name\" content=\"Twitt...\n\n\n\nAbout 50% of all candidates knew about Open Graph tags, and a good answer to this question shows that they know about SEO.\n\n\n\nPerfect answer: This tag is an Open Graph (OG) meta tag for the site name, Twitter. The Open Graph protocol was made by Facebook to make it easier to unfurl links and show their previews in a nice card layout; developers can add all sorts of authorship details and cover images for fancy sharing. In fact, these days it’s even common to auto-generate the open graph image using something like Puppeteer. (CSS-Tricks uses a WordPress plugin that does it.)\n\n\n\nAnother interesting side note is that meta tags usually have the name attribute, but OG uses the non-standard property attribute. I guess that’s just Facebook being Facebook? The title, URL, and description Open Graph tags are kinda redundant because we already have regular meta tags for these, but people add them just to be safe. Most sites these days use a combination of Open Graph and other metatags and the content on a page to generate rich previews.\n\n\n\nLine 6: <meta name=\"apple-mobile-web-app-title\" cont...\n\n\n\nMost candidates didn’t know about this one, but experienced developers can talk about how to optimize a website for Apple devices, like apple-touch-icons and Safari pinned tab SVGs.\n\n\n\nPerfect answer: You can pin a website on an iPhone’s homescreen to make it feel like a native app. Safari doesn’t support progressive web apps and you can’t really use other browser engines on iOS, so you don’t really have other options if you want that native-like experience, which Twitter, of course, likes. So they add this to tell Safari that the title of this app is Twitter. The next line is similar and controls how the status bar should look like when the app has launched.\n\n\n\nLine 8: <meta name=\"theme-color\" content=\"#ffffff\"...\n\n\n\nPerfect answer: This is the proper web standards-esque equivalent of the Apple status bar color meta tag. It tells the browser to theme the surrounding UI. Chrome on Android and Brave on desktop both do a pretty good job with that. You can put any CSS color in the content, and can even use the media attribute to only show this color for a specific media query like, for example, to support a dark theme. You can also define this and additional properties in the web app manifest.\n\n\n\nLine 9: <meta http-equiv=\"origin-trial\" content=\"...\n\n\n\nNobody I interviewed knew about this one. I would assume that you’d know this only if you have in-depth knowledge about all the new things that are happening on the standards track.\n\n\n\nPerfect answer: Origin trials let us use new and experimental features on our site and the feedback is tracked by the user agent and reported to the web standards community without users having to opt-in to a feature flag. For example, Edge has an origin trial for dual-screen and foldable device primitives, which is pretty cool as you can make interesting layouts based on whether a foldable phone is opened or closed.\n\n\n\nAlso accepted: I don’t know about this one.\n\n\n\nLine 10: html{-ms-text-size-adjust:100%;-webkit-text...\n\n\n\nAlmost nobody knew about this one too; only if you know about CSS edge cases and optimizations, you’d be able to figure this line out.\n\n\n\nPerfect answer: Imagine that you don’t have a mobile responsive site and you open it on a small screen, so the browser might resize the text to make it bigger so it’s easier to read. The CSS text-size-adjust property can either disable this feature with the value none or specify a percentage up to which the browser is allowed to make the text bigger.\n\n\n\nIn this case, Twitter says the maximum is 100%, so the text should be no bigger than the actual size; they just do that because their site is already responsive and they don’t want to risk a browser breaking the layout with a larger font size. This is applied to the root HTML tag so it applies to everything inside it. Since this is an experimental CSS property, vendor prefixes are required. Also, there’s a missing <style> before this CSS, but I’m guessing that’s minified in the previous line and we don’t see it.\n\n\n\nAlso accepted: I don’t know about this property in specific but the -ms and -webkit- are vendor prefixes needed by Internet Explorer and WebKit-based browsers, respectively, for non-standard properties. We used to require these prefixes when CSS3 came out, but as properties go from experimental to stable or are adopted to a standards track, these prefixes go away in favor of a standardized property.\n\n\n\nBonus — Line 11: body{margin:0;}\n\n\n\nThis line from Twitter’s source code is particularly fun because you can follow-up with a question about the difference between resetting and normalizing a webpage. Almost everyone knew a version of the right answer.\n\n\n\nPerfect answer: Because different browsers have different default styles (user agent stylesheet), you want to overwrite them by resetting properties so your site looks the same across devices. In this case, Twitter is telling the browser to remove the body tag’s default margin. This is just to reduce browser inconsistencies, but I prefer normalizing the styles instead of resetting them, i.e., applying the same defaults across browsers rather than removing them altogether. People even used to use * { margin: 0 } which is totally overkill and not great for performance, but now it’s common to import something like normalize.css or reset.css (or even something newer) and start from there.\n\n\n\nMore lines!\n\n\n\nI always enjoy playing with the browser Inspector tool to see how sites are made, which is how I came up with this idea. Even though I consider myself sort of an expert on semantic HTML, I learn something new every time I do this exercise.\n\n\n\nSince Twitter is mostly a client-side React app, there’s only a few dozen lines in the source code. Even with that, there’s so much to learn! There are a few more interesting lines in the Twitter source code that I leave as an exercise for you, the reader. How many of them could you explain in an interview?\n\n\n\n<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/opensearch.xml\" title=\"Twitter\">\n\n\n\n…tells browsers that users can add Twitter as a search engine.\n\n\n\n<link rel=\"preload\" as=\"script\" crossorigin=\"anonymous\" href=\"https://abs.twimg.com/responsive-web/client-web/polyfills.cad508b5.js\" nonce=\"MGUyZTIyN2ItMDM1ZC00MzE5LWE2YmMtYTU5NTg2MDU0OTM1\" />\n\n\n\n…has many interesting attributes that can be discussed, especially nonce.\n\n\n\n<link rel=\"alternate\" hreflang=\"x-default\" href=\"https://twitter.com/\" />\n\n\n\n…for international landing pages.\n\n\n\n:focus:not([data-focusvisible-polyfill]){outline: none;}\n\n\n\n…for removing the focus outline when not using keyboard navigation (the CSS :focus-visible selector is polyfilled here).\n\nExplain the First 10 Lines of Twitter’s Source Code to Me originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-24T15:31:55.000Z",
      "date_modified": "2022-02-24T15:31:55.000Z",
      "_plugin": {
        "pageFilename": "e42cf8fd9496ac8d3dfd6a5ede078351ac0d4e0708926d518ff8831be0e998f9.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363526",
      "url": "https://css-tricks.com/superior-image-optimization-an-ideal-solution-using-gatsby-imageengine/",
      "title": "Superior Image Optimization: An Ideal Solution Using Gatsby & ImageEngine",
      "summary": "(This is a sponsored post.)\nIn recent years, the Jamstack methodology for building websites has become increasingly popular. Performance, scalable, and secure, it’s easy to see why it’s becoming an attractive way to build websites for developers.\nGatsbyJS is …\n\nSuperior Image Optimization: An Ideal Solution Using Gatsby & ImageEngine originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>In recent years, the <a href=\"https://jamstack.org/\" rel=\"noopener\">Jamstack</a> methodology for building websites has become increasingly popular. Performance, scalable, and secure, it’s easy to see why it’s becoming an attractive way to build websites for developers.</p>\n\n\n\n<p>GatsbyJS is a static site generator platform. It’s powered by React, a front-end JavaScript library, for building user interfaces. And uses GraphQL, an open-source data query and manipulation language, to pull structured data from other sources, typically a headless CMS like Contentful.</p>\n\n\n\n<p>While GatsbyJS and similar platforms have revolutionized much about the web development process, one stubborn challenge remains: image optimization. Even using a modern front-end development framework like GatsbyJS, it tends to be a time-intensive and frustrating exercise.</p>\n\n\n\n<p>For most modern websites, it doesn’t help much if you run on a performant technology but your images aren’t optimized. Today, images are the largest contributor to page weight, and <a href=\"https://httparchive.org/reports/state-of-images?start=2017_01_01&amp;end=latest&amp;view=list\" rel=\"noopener\">growing</a>, and have been singled out by Google as presenting the most significant opportunity for <a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/image-optimization\" rel=\"noopener\">improving performance</a>.</p>\n\n\n\n<p>With that in mind, I want to discuss how using an image CDN as part of your technology stack can bring improvements both in terms of website performance and the entire development process.</p>\n\n\n\n<span id=\"more-363526\"></span>\n\n\n\n<h2 id=\"a-quick-introduction-to-gatsby\">A Quick Introduction to Gatsby</h2>\n\n\n\n<p>GatsbyJS is so much more than the conventional static site generators of old. Yes, you still have the ability to integrate with a software version control platform, like Git, as well as to build, deploy, and preview Gatsby projects. However, its services consist of a unified cloud platform that includes high-speed, scalable, and secure hosting as well as expert technical support and powerful third-party integrations.</p>\n\n\n\n<p>What’s more, all of it comes wrapped in a user-friendly development platform that shares many similarities with the most popular CMSs of the day. For example, you can leverage pre-designed site templates or pre-configured functions (effectively website elements and modules) to speed up the production process.</p>\n\n\n\n<p>It also offers many benefits for developers by allowing you to work with leading frameworks and languages, like JavaScript, React, WebPack, and GraphQL as well as baked-in capabilities to deal with performance, development iterations, etc.</p>\n\n\n\n<p>For example, Gatsby does a lot to optimize your performance without any intervention. It comes with built-in code-splitting, prefetching resources, and lazy-loading. Static sites are generally known for being inherently performant, but Gatsby kicks it up a notch.</p>\n\n\n\n<h3 id=\"does-gatsby-provide-built-in-image-optimization\">Does Gatsby Provide Built-in Image Optimization?</h3>\n\n\n\n<p>Gatsby does, in fact, offer built-in image optimization capabilities.</p>\n\n\n\n<p>In fact, it recently upgraded in this regard, replacing the now deprecated gatsby-image package with the brand-new Gatsby image plugin. This plugin consists of two components for static and dynamic images, respectively. Typically, you would use the dynamic component if you’re handling images from a CMS, like Contentful.</p>\n\n\n\n<p>Installing this plugin allows you to programmatically pass commands to the underlying framework in the form of properties, shown below:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Option</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>layout</code></td><td><code>constrained</code> / <code>CONSTRAINED</code></td><td>Determines the size of the image and its resizing behavior.</td></tr><tr><td><code>width</code>/<code>height</code></td><td>Source image size</td><td>Change the size of the image.</td></tr><tr><td><code>aspectRatio</code></td><td>Source image aspect ratio</td><td>Force a specific ratio between the image&#8217;s width and height.</td></tr><tr><td><code>placeholder</code></td><td><code>\"dominantColor\"</code> / <code>DOMINANT_COLOR</code></td><td>Choose the style of temporary image shown while the full image loads.</td></tr><tr><td><code>formats</code></td><td><code>[\"auto\", \"webp\"]</code> / <code>[AUTO,WEBP]</code></td><td>File formats of the images generated.</td></tr><tr><td><code>transformOptions</code></td><td><code>[fit: \"cover\", cropFocus: \"attention\"]</code></td><td>Options to pass to sharp to control cropping and other image manipulations.</td></tr><tr><td><code>sizes</code></td><td>Generated automatically</td><td>The <code>&lt;img&gt;</code> <code>sizes</code> attribute, passed to the img tag. This describes the display size of the image, and does not affect generated images. You are only likely to change this if you are using full width images that do not span the full width of the screen.</td></tr><tr><td><code>quality</code></td><td><code>50</code></td><td>The default image quality generated. This is override by any format-specific option.</td></tr><tr><td><code>outputPixelDensities</code></td><td>For fixed images: <code>[1, 2]</code><br><br>For constrained: <code>[0.25, 0.5, 1, 2]</code></td><td>A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1✕ image. The image is multiple by the image width, to give the generated sizes. For example, a <code>400px</code> wide constrained image would generate <code>100</code>, <code>200</code>, <code>400</code> and <code>800px</code> wide images by default. Ignored for full width layout images, which use <code>breakpoints</code> instead.</td></tr><tr><td><code>breakpoints</code></td><td><code>[750, 1000, 1366, 1920]</code></td><td>Output widths to generate for full width images. Default is to generate widths for common device resolutions. It will never generate an image larger than the source image. The browser will automatically choose the most appropriate.</td></tr><tr><td><code>blurredOptions</code></td><td>None</td><td>Options for the low-resolution placeholder image. Ignored unless <code>placeholder</code> is blurred.</td></tr><tr><td><code>tracedSVGOptions</code></td><td>None</td><td>Options for traced placeholder SVGs. See potrace options. Ignored unless <code>placeholder</code> is traced SVG.</td></tr><tr><td><code>jpgOptions</code></td><td>None</td><td>Options to pass to sharp when generating JPG images.</td></tr></tbody></table></figure>\n\n\n\n<p>As you can see, that’s quite the toolkit to help developers process images in a variety of ways. The various options can be used to transform, style, and optimize images for performance as well as make images behave dynamically in a number of ways.</p>\n\n\n\n<p>In terms of performance optimization, there are a few options that are particularly interesting:</p>\n\n\n\n<ul><li><strong>Lazy-loading:</strong> Defers loading of off-screen images until they are scrolled into view.</li><li><strong>Width/height</strong>: Resize image dimensions according to how they will be used.</li><li><strong>Placeholder:</strong> When lazy-loading or while an image is loading in the background, use a placeholder. This can help to avoid performance penalties for core web vitals, like Cumulative Layout Shift (<a href=\"https://web.dev/cls/\" rel=\"noopener\">CLS</a>).</li><li><strong>Format:</strong> Different formats have inherently more efficient encoding. GatsbyJS supports WebP and AVIF, two of the most performant next-gen image formats.</li><li><strong>Quality:</strong> Apply a specified level of quality compression to the image between 0 and 100.</li><li><strong>Pixel density:</strong> A lower pixel density will save image data and can be optimized according to the screen size and PPI (pixels per inch).</li><li><strong>Breakpoints:</strong> Breakpoints are important for ensuring that you serve a version of an image that’s sized appropriately for a certain threshold of screen sizes, especially that you serve smaller images for smaller screen sizes, like tablets or mobile phones. This is called responsive syntax.</li></ul>\n\n\n\n<p>So, all in all, Gatsby provides developers with a mature and sophisticated framework to process and optimize image content. The only important missing feature that’s missing is some type of built-in support for client hints.</p>\n\n\n\n<p>However, there is one big catch: All of this has to be implemented manually. While GatsbyJS does use default settings for some image properties, it doesn’t offer built-in intelligence to automatically and dynamically process and serve optimized images tailored to the accessing device.</p>\n\n\n\n<p>If you want to create an ideal image optimization solution, your developers will firstly have to implement device detection capabilities. They will then need to develop the logic to dynamically select optimization operations based on the specific device accessing your web app.</p>\n\n\n\n<p>Finally, this code will continually need to be changed and updated. New devices come out all the time with differing properties. What’s more, standards regarding performance as well as image optimization are continually evolving. Even significant changes, additions, or updates to your own image assets may trigger the need to rework your implementation. Not to mention the time it takes to simply stay abreast of the latest information and trends and to make sure development is carried out accordingly.</p>\n\n\n\n<p>Another problem is that you will need to continually test and refine your implementation. Without the help of an intelligent optimization engine, you will need to “feel out” how your settings will affect the visual quality of your images and continually fine-tune your approach to get the right results.</p>\n\n\n\n<p>This will add a considerable amount of overhead to your development workload in the immediate and long term.</p>\n\n\n\n<p>Gatsby also admits that these techniques are quite CPU intensive. In that case, you might want to <a href=\"https://www.gatsbyjs.com/docs/preoptimizing-images/\" rel=\"noopener\">preoptimize images</a>. However, this also needs to be manually implemented in-code on top of being even less dynamic and flexible.</p>\n\n\n\n<p>But, what if there was a better way to optimize your image assets while still enjoying all the benefits of using a platform like Gatsby? The solution I’m about to propose will help solve a number of key issues that arise from using Gatsby (and any development framework, for that matter) for the majority of your image optimization:</p>\n\n\n\n<ul><li>Reduce the impact optimizing images have on the development and design process in the immediate and long term.</li><li>Remove an additional burden and responsibility from your developers’ shoulders, freeing up time and resources to work on the primary aspects of your web app.</li><li>Improve your web app’s ability to dynamically and intelligently optimize image assets for each unique visitor.</li><li>All of this, while still integrating seamlessly with GatsbyJS as well as your CMS (in most cases).</li></ul>\n\n\n\n<h2 id=\"introducing-a-better-way-to-optimize-image-assets-imageengine\">Introducing a Better Way to Optimize Image Assets: ImageEngine</h2>\n\n\n\n<p>In short, ImageEngine is an intelligent, <a href=\"https://imageengine.io/features/what-is-an-image-cdn/\" rel=\"noopener\">device-aware image CDN</a>.</p>\n\n\n\n<p>ImageEngine works just like any other CDN (content delivery network), such as Fastly, Akamai, or Cloudflare. However, it specializes in optimizing and serving image content specifically.&nbsp;</p>\n\n\n\n<p>Like its counterparts, you provide ImageEngine with the location where your image files are stored, it pulls them to its own image optimization servers, and then generates and serves optimized variants of images to your site visitors.</p>\n\n\n\n<p>In doing this, ImageEngine is designed to decrease image payload, <a href=\"https://imageengine.io/features/image-optimization\" rel=\"noopener\">deliver optimized images</a> tailored to each unique device, and serve images from edge nodes across its <a href=\"https://imageengine.io/blog/imageengine-a-next-generation-global-image-cdn\" rel=\"noopener\">global CDN</a>.&nbsp;</p>\n\n\n\n<p>Basically, image CDNs gather information on the accessing device by analyzing the <code>ACCEPT</code> header. A typical <code>ACCEPT</code> header looks like this (for Chrome):</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">image/avif,image/webp,image/apng,image/*,*/*;q=0.8</code></pre>\n\n\n\n<p>As you can see, this only provides the CDN with the accepted image formats and the recommended quality compression.</p>\n\n\n\n<p>More advanced CDNs, ImageEngine, included, can also leverage client hints for more in-depth data points, such as the DPR (device pixel ratio) and Viewport-Width. This allows a larger degree of intelligent decision-making to more effectively optimize image assets while preserving visual quality.</p>\n\n\n\n<p>However, ImageEngine takes things another step further by being the only mainstream image CDN that has built-in WURFL device detection. This gives ImageEngine the ability to read more information on the device, such as the operating system, resolution, and PPI (pixels per inch).</p>\n\n\n\n<p>Using AI and machine-learning algorithms, this extra data means ImageEngine has virtually unparalleled decision-making power. Without any manual intervention, ImageEngine can perform all of the following image optimization operations automatically:</p>\n\n\n\n<ul><li>Resize your images according to the device screen size without the need for responsive syntax.</li><li>Intelligently compress the quality of the image to reduce the payload <a href=\"https://imageengine.io/blog/ensuring-image-quality-with-an-image-cdn\" rel=\"noopener\">while preserving visual quality</a>, using metrics like the Structural Similarity Index Method (SSIM).</li><li>Convert images to the most optimal, <a href=\"https://imageengine.io/features/next-gen-formats\" rel=\"noopener\">next-gen encoding formats</a>. On top of WebP and AVIF, ImagEngine also supports JPEG 2000 (Safari), JPEG XR (Internet Explorer &amp; Edge), and MP4 (for aGIFs).</li></ul>\n\n\n\n<p>These settings also play well with GatsbyJS’ built-in capabilities. So, you can natively implement breakpoints, lazy-loading, and image placeholders that don&#8217;t require any expertise or intelligent decision-making using Gatsby. Then, you can let ImageEngine handle the more advanced and intelligence-driven operations, like quality compression, image formatting, and resizing.</p>\n\n\n\n<p>The best part is that ImageEngine does all of this automatically, making it a completely hands-off image optimization solution. ImageEngine will automatically adjust its approach with time as the digital image landscape and standards change, freeing you from this concern.</p>\n\n\n\n<p>In fact, ImageEngine recommends using default settings for getting the best results in most situations.</p>\n\n\n\n<p>What’s more, this logic is built into the ImageEngine edge servers. Firstly, with over 20 global PoPs, it means that the images are processed and served as close to the end-user as possible. It also means that the majority of processing happens server-side. With the exception of installing the ImageEngine Gatsby plugin, there is virtually no processing overhead at build or runtime.</p>\n\n\n\n<p>This type of dynamic, intelligent decision-making will only become more important in the near and medium-term. Thanks to the number and variety of devices growing by the year, it’s becoming harder and harder to implement image optimization in a way that’s sensitive to every device.</p>\n\n\n\n<p>That’s why ImageEngine can give you the edge in a mobile-first future that’s continually evolving. Simply put, ImageEngine will help futureproof your Gatsby web app.</p>\n\n\n\n<h2 id=\"how-to-integrate-imageengine-with-gatsby-a-quick-guide\">How to Integrate ImageEngine with Gatsby: A Quick Guide</h2>\n\n\n\n<p>Integrating ImageEngine with GatsbyJS is trivial if you have experience installing any other third-party plugins. However, the steps will differ somewhat based on which backend CMS you use with GatsbyJS and where you store your image assets.</p>\n\n\n\n<p>For example, you could use it alongside WordPress, Drupal, Contentful, and a range of other popular CMSs.</p>\n\n\n\n<p>Usually, your stack would look something like this:</p>\n\n\n\n<ul><li>A CMS, like Contentful, to host your “space” where you’ll manage your assets and create structured data. Your images will be uploaded and stored in your space.</li><li>A versioning platform, like Github, to host your code and manage your versions and branches.</li><li>GatsbyJS to host your workspace, where you’ll build, deploy, and host the front end of your website.</li></ul>\n\n\n\n<p>So, the first thing you need to do is set up a site, or project, using GatsbyJS and link it to your CMS.</p>\n\n\n\n<p>Next, you’ll install the ImageEngine plugin for GatsbyJS:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npm install @imageengine/gatsby-plugin-imageengine</code></pre>\n\n\n\n<p>You’ll also need to create a delivery address for your images via ImageEngine. You can get one by signing up for the 30-day trial here. The only thing you need to do is supply ImageEngine with the host origin URL. For Contentful, it’s <code>images.ctfassets.net</code> and for Sanity.io, it’s <code>cdn.sanity.io</code>.</p>\n\n\n\n<p>ImageEngine will then provide you with a delivery address, usually in the format of <code>{random_string}.cdn.imgeng.in</code>.</p>\n\n\n\n<p>You’ll use this delivery address to configure the ImageEngine plugin in your <code>gatsby-config.js</code> file. As part of this, you’ll indicate the source (Contentful, e.g.) as well as provide the ImageEngine delivery address. You can find examples of how that’s done in the documentation <a href=\"https://support.imageengine.io/hc/en-us/articles/4415470516877-Getting-Started-With-ImageEngine-and-GatsbyJS\" rel=\"noopener\">here</a>.</p>\n\n\n\n<p>Note that the ImageEngine plugin features built-in support for Contentful and Sanity.io as asset sources. You can also configure the plugin to pull locally stored images or from another custom source.</p>\n\n\n\n<p>Once that’s done, development can begin!</p>\n\n\n\n<p>Basically, Gatsby will create Graphql Nodes for the elements created in your CMS (e.g., <code>ContentfulAsset</code>, <code>allSanityImageAsset</code>, etc.). ImageEngine will then create a child node of <code>childImageEngineAsset</code> for each applicable element node.</p>\n\n\n\n<p>You’ll then use GraphQL queries in the code for your Gatsby pages to specify the properties of the image variants you want to serve. For example, you can display an image that’s 500 ✕ 300px in the WebP format using the following query:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">gatsbyImageData(width: 500, height: 300, format: jpg)</code></pre>\n\n\n\n<p>Once again, you should refer to the documentation for a more thorough treatment. You can find guides for integrating ImageEngine with <a href=\"https://support.imageengine.io/hc/en-us/articles/4415478443405-How-to-use-ImageEngine-and-Contentful-with-GatsbyJS\" rel=\"noopener\">Contentful</a>, <a href=\"https://support.imageengine.io/hc/en-us/articles/4415463696525-How-to-use-ImageEngine-and-Sanity-io-with-GatsbyJS\" rel=\"noopener\">Sanity.io</a>, and any other <a href=\"https://support.imageengine.io/hc/en-us/articles/4415470516877-Getting-Started-With-ImageEngine-and-GatsbyJS\" rel=\"noopener\">Gatsby project</a>.</p>\n\n\n\n<p>For a competent Gatsby user, integrating ImageEngine will only take a few minutes. And, ongoing maintenance will be minimal. If you know how to use GraphQL, then the familiar syntax to send directives and create specific image variants will be nearly effortless and should take about the same time as manually optimizing images using standard Gatsby React.</p>\n\n\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n\n\n<p>For most web projects, ImageEngine can reduce image payloads by up to 80%. That number can go up if you have especially high-res images.</p>\n\n\n\n<p>However, you can really get the most out of your image optimization by combining the best parts of a static front-end development framework like Gatsby and an image CDN like ImageEngine. Specifically, you can use both to target Google’s <a href=\"https://web.dev/vitals/\" rel=\"noopener\">core web vitals</a>:</p>\n\n\n\n<ul><li>ImageEngine’s dynamic, intelligent, run-time optimization will optimize payloads to improve LCP, SI, FCP, and other data size-related metrics.</li><li>Using Gatsby, you can optimize for CLS and FID using best practices and by natively implementing lazy loading and image placeholders.</li></ul>\n\n\n\n<p>ImageEngine provides an <a href=\"https://imageengine.io/developers/image-speed-test\" rel=\"noopener\">Image Speed Test tool</a> where you can quickly evaluate your current performance and see the impact of ImageEngine on key metrics. Even for a simple GatsbyJS project, the results in the Demo tool can be impressive. If you extrapolate those percentages for a larger, image-heavy site, combining Gatsby with ImageEngine could have a dramatic impact on the performance and user experience of your web app. What’s more, your developers will thank you for sparing them from the challenging and time-consuming chore of manual image optimization.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/superior-image-optimization-an-ideal-solution-using-gatsby-imageengine/\">Superior Image Optimization: An Ideal Solution Using Gatsby &#038; ImageEngine</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "(This is a sponsored post.)\nIn recent years, the Jamstack methodology for building websites has become increasingly popular. Performance, scalable, and secure, it’s easy to see why it’s becoming an attractive way to build websites for developers.\n\n\n\nGatsbyJS is a static site generator platform. It’s powered by React, a front-end JavaScript library, for building user interfaces. And uses GraphQL, an open-source data query and manipulation language, to pull structured data from other sources, typically a headless CMS like Contentful.\n\n\n\nWhile GatsbyJS and similar platforms have revolutionized much about the web development process, one stubborn challenge remains: image optimization. Even using a modern front-end development framework like GatsbyJS, it tends to be a time-intensive and frustrating exercise.\n\n\n\nFor most modern websites, it doesn’t help much if you run on a performant technology but your images aren’t optimized. Today, images are the largest contributor to page weight, and growing, and have been singled out by Google as presenting the most significant opportunity for improving performance.\n\n\n\nWith that in mind, I want to discuss how using an image CDN as part of your technology stack can bring improvements both in terms of website performance and the entire development process.\n\n\n\n\n\n\n\nA Quick Introduction to Gatsby\n\n\n\nGatsbyJS is so much more than the conventional static site generators of old. Yes, you still have the ability to integrate with a software version control platform, like Git, as well as to build, deploy, and preview Gatsby projects. However, its services consist of a unified cloud platform that includes high-speed, scalable, and secure hosting as well as expert technical support and powerful third-party integrations.\n\n\n\nWhat’s more, all of it comes wrapped in a user-friendly development platform that shares many similarities with the most popular CMSs of the day. For example, you can leverage pre-designed site templates or pre-configured functions (effectively website elements and modules) to speed up the production process.\n\n\n\nIt also offers many benefits for developers by allowing you to work with leading frameworks and languages, like JavaScript, React, WebPack, and GraphQL as well as baked-in capabilities to deal with performance, development iterations, etc.\n\n\n\nFor example, Gatsby does a lot to optimize your performance without any intervention. It comes with built-in code-splitting, prefetching resources, and lazy-loading. Static sites are generally known for being inherently performant, but Gatsby kicks it up a notch.\n\n\n\nDoes Gatsby Provide Built-in Image Optimization?\n\n\n\nGatsby does, in fact, offer built-in image optimization capabilities.\n\n\n\nIn fact, it recently upgraded in this regard, replacing the now deprecated gatsby-image package with the brand-new Gatsby image plugin. This plugin consists of two components for static and dynamic images, respectively. Typically, you would use the dynamic component if you’re handling images from a CMS, like Contentful.\n\n\n\nInstalling this plugin allows you to programmatically pass commands to the underlying framework in the form of properties, shown below:\n\n\n\nOptionDefaultDescriptionlayoutconstrained / CONSTRAINEDDetermines the size of the image and its resizing behavior.width/heightSource image sizeChange the size of the image.aspectRatioSource image aspect ratioForce a specific ratio between the image’s width and height.placeholder\"dominantColor\" / DOMINANT_COLORChoose the style of temporary image shown while the full image loads.formats[\"auto\", \"webp\"] / [AUTO,WEBP]File formats of the images generated.transformOptions[fit: \"cover\", cropFocus: \"attention\"]Options to pass to sharp to control cropping and other image manipulations.sizesGenerated automaticallyThe <img> sizes attribute, passed to the img tag. This describes the display size of the image, and does not affect generated images. You are only likely to change this if you are using full width images that do not span the full width of the screen.quality50The default image quality generated. This is override by any format-specific option.outputPixelDensitiesFor fixed images: [1, 2]For constrained: [0.25, 0.5, 1, 2]A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1✕ image. The image is multiple by the image width, to give the generated sizes. For example, a 400px wide constrained image would generate 100, 200, 400 and 800px wide images by default. Ignored for full width layout images, which use breakpoints instead.breakpoints[750, 1000, 1366, 1920]Output widths to generate for full width images. Default is to generate widths for common device resolutions. It will never generate an image larger than the source image. The browser will automatically choose the most appropriate.blurredOptionsNoneOptions for the low-resolution placeholder image. Ignored unless placeholder is blurred.tracedSVGOptionsNoneOptions for traced placeholder SVGs. See potrace options. Ignored unless placeholder is traced SVG.jpgOptionsNoneOptions to pass to sharp when generating JPG images.\n\n\n\nAs you can see, that’s quite the toolkit to help developers process images in a variety of ways. The various options can be used to transform, style, and optimize images for performance as well as make images behave dynamically in a number of ways.\n\n\n\nIn terms of performance optimization, there are a few options that are particularly interesting:\n\n\n\nLazy-loading: Defers loading of off-screen images until they are scrolled into view.Width/height: Resize image dimensions according to how they will be used.Placeholder: When lazy-loading or while an image is loading in the background, use a placeholder. This can help to avoid performance penalties for core web vitals, like Cumulative Layout Shift (CLS).Format: Different formats have inherently more efficient encoding. GatsbyJS supports WebP and AVIF, two of the most performant next-gen image formats.Quality: Apply a specified level of quality compression to the image between 0 and 100.Pixel density: A lower pixel density will save image data and can be optimized according to the screen size and PPI (pixels per inch).Breakpoints: Breakpoints are important for ensuring that you serve a version of an image that’s sized appropriately for a certain threshold of screen sizes, especially that you serve smaller images for smaller screen sizes, like tablets or mobile phones. This is called responsive syntax.\n\n\n\nSo, all in all, Gatsby provides developers with a mature and sophisticated framework to process and optimize image content. The only important missing feature that’s missing is some type of built-in support for client hints.\n\n\n\nHowever, there is one big catch: All of this has to be implemented manually. While GatsbyJS does use default settings for some image properties, it doesn’t offer built-in intelligence to automatically and dynamically process and serve optimized images tailored to the accessing device.\n\n\n\nIf you want to create an ideal image optimization solution, your developers will firstly have to implement device detection capabilities. They will then need to develop the logic to dynamically select optimization operations based on the specific device accessing your web app.\n\n\n\nFinally, this code will continually need to be changed and updated. New devices come out all the time with differing properties. What’s more, standards regarding performance as well as image optimization are continually evolving. Even significant changes, additions, or updates to your own image assets may trigger the need to rework your implementation. Not to mention the time it takes to simply stay abreast of the latest information and trends and to make sure development is carried out accordingly.\n\n\n\nAnother problem is that you will need to continually test and refine your implementation. Without the help of an intelligent optimization engine, you will need to “feel out” how your settings will affect the visual quality of your images and continually fine-tune your approach to get the right results.\n\n\n\nThis will add a considerable amount of overhead to your development workload in the immediate and long term.\n\n\n\nGatsby also admits that these techniques are quite CPU intensive. In that case, you might want to preoptimize images. However, this also needs to be manually implemented in-code on top of being even less dynamic and flexible.\n\n\n\nBut, what if there was a better way to optimize your image assets while still enjoying all the benefits of using a platform like Gatsby? The solution I’m about to propose will help solve a number of key issues that arise from using Gatsby (and any development framework, for that matter) for the majority of your image optimization:\n\n\n\nReduce the impact optimizing images have on the development and design process in the immediate and long term.Remove an additional burden and responsibility from your developers’ shoulders, freeing up time and resources to work on the primary aspects of your web app.Improve your web app’s ability to dynamically and intelligently optimize image assets for each unique visitor.All of this, while still integrating seamlessly with GatsbyJS as well as your CMS (in most cases).\n\n\n\nIntroducing a Better Way to Optimize Image Assets: ImageEngine\n\n\n\nIn short, ImageEngine is an intelligent, device-aware image CDN.\n\n\n\nImageEngine works just like any other CDN (content delivery network), such as Fastly, Akamai, or Cloudflare. However, it specializes in optimizing and serving image content specifically. \n\n\n\nLike its counterparts, you provide ImageEngine with the location where your image files are stored, it pulls them to its own image optimization servers, and then generates and serves optimized variants of images to your site visitors.\n\n\n\nIn doing this, ImageEngine is designed to decrease image payload, deliver optimized images tailored to each unique device, and serve images from edge nodes across its global CDN. \n\n\n\nBasically, image CDNs gather information on the accessing device by analyzing the ACCEPT header. A typical ACCEPT header looks like this (for Chrome):\n\n\n\nimage/avif,image/webp,image/apng,image/*,*/*;q=0.8\n\n\n\nAs you can see, this only provides the CDN with the accepted image formats and the recommended quality compression.\n\n\n\nMore advanced CDNs, ImageEngine, included, can also leverage client hints for more in-depth data points, such as the DPR (device pixel ratio) and Viewport-Width. This allows a larger degree of intelligent decision-making to more effectively optimize image assets while preserving visual quality.\n\n\n\nHowever, ImageEngine takes things another step further by being the only mainstream image CDN that has built-in WURFL device detection. This gives ImageEngine the ability to read more information on the device, such as the operating system, resolution, and PPI (pixels per inch).\n\n\n\nUsing AI and machine-learning algorithms, this extra data means ImageEngine has virtually unparalleled decision-making power. Without any manual intervention, ImageEngine can perform all of the following image optimization operations automatically:\n\n\n\nResize your images according to the device screen size without the need for responsive syntax.Intelligently compress the quality of the image to reduce the payload while preserving visual quality, using metrics like the Structural Similarity Index Method (SSIM).Convert images to the most optimal, next-gen encoding formats. On top of WebP and AVIF, ImagEngine also supports JPEG 2000 (Safari), JPEG XR (Internet Explorer & Edge), and MP4 (for aGIFs).\n\n\n\nThese settings also play well with GatsbyJS’ built-in capabilities. So, you can natively implement breakpoints, lazy-loading, and image placeholders that don’t require any expertise or intelligent decision-making using Gatsby. Then, you can let ImageEngine handle the more advanced and intelligence-driven operations, like quality compression, image formatting, and resizing.\n\n\n\nThe best part is that ImageEngine does all of this automatically, making it a completely hands-off image optimization solution. ImageEngine will automatically adjust its approach with time as the digital image landscape and standards change, freeing you from this concern.\n\n\n\nIn fact, ImageEngine recommends using default settings for getting the best results in most situations.\n\n\n\nWhat’s more, this logic is built into the ImageEngine edge servers. Firstly, with over 20 global PoPs, it means that the images are processed and served as close to the end-user as possible. It also means that the majority of processing happens server-side. With the exception of installing the ImageEngine Gatsby plugin, there is virtually no processing overhead at build or runtime.\n\n\n\nThis type of dynamic, intelligent decision-making will only become more important in the near and medium-term. Thanks to the number and variety of devices growing by the year, it’s becoming harder and harder to implement image optimization in a way that’s sensitive to every device.\n\n\n\nThat’s why ImageEngine can give you the edge in a mobile-first future that’s continually evolving. Simply put, ImageEngine will help futureproof your Gatsby web app.\n\n\n\nHow to Integrate ImageEngine with Gatsby: A Quick Guide\n\n\n\nIntegrating ImageEngine with GatsbyJS is trivial if you have experience installing any other third-party plugins. However, the steps will differ somewhat based on which backend CMS you use with GatsbyJS and where you store your image assets.\n\n\n\nFor example, you could use it alongside WordPress, Drupal, Contentful, and a range of other popular CMSs.\n\n\n\nUsually, your stack would look something like this:\n\n\n\nA CMS, like Contentful, to host your “space” where you’ll manage your assets and create structured data. Your images will be uploaded and stored in your space.A versioning platform, like Github, to host your code and manage your versions and branches.GatsbyJS to host your workspace, where you’ll build, deploy, and host the front end of your website.\n\n\n\nSo, the first thing you need to do is set up a site, or project, using GatsbyJS and link it to your CMS.\n\n\n\nNext, you’ll install the ImageEngine plugin for GatsbyJS:\n\n\n\nnpm install @imageengine/gatsby-plugin-imageengine\n\n\n\nYou’ll also need to create a delivery address for your images via ImageEngine. You can get one by signing up for the 30-day trial here. The only thing you need to do is supply ImageEngine with the host origin URL. For Contentful, it’s images.ctfassets.net and for Sanity.io, it’s cdn.sanity.io.\n\n\n\nImageEngine will then provide you with a delivery address, usually in the format of {random_string}.cdn.imgeng.in.\n\n\n\nYou’ll use this delivery address to configure the ImageEngine plugin in your gatsby-config.js file. As part of this, you’ll indicate the source (Contentful, e.g.) as well as provide the ImageEngine delivery address. You can find examples of how that’s done in the documentation here.\n\n\n\nNote that the ImageEngine plugin features built-in support for Contentful and Sanity.io as asset sources. You can also configure the plugin to pull locally stored images or from another custom source.\n\n\n\nOnce that’s done, development can begin!\n\n\n\nBasically, Gatsby will create Graphql Nodes for the elements created in your CMS (e.g., ContentfulAsset, allSanityImageAsset, etc.). ImageEngine will then create a child node of childImageEngineAsset for each applicable element node.\n\n\n\nYou’ll then use GraphQL queries in the code for your Gatsby pages to specify the properties of the image variants you want to serve. For example, you can display an image that’s 500 ✕ 300px in the WebP format using the following query:\n\n\n\ngatsbyImageData(width: 500, height: 300, format: jpg)\n\n\n\nOnce again, you should refer to the documentation for a more thorough treatment. You can find guides for integrating ImageEngine with Contentful, Sanity.io, and any other Gatsby project.\n\n\n\nFor a competent Gatsby user, integrating ImageEngine will only take a few minutes. And, ongoing maintenance will be minimal. If you know how to use GraphQL, then the familiar syntax to send directives and create specific image variants will be nearly effortless and should take about the same time as manually optimizing images using standard Gatsby React.\n\n\n\nConclusion\n\n\n\nFor most web projects, ImageEngine can reduce image payloads by up to 80%. That number can go up if you have especially high-res images.\n\n\n\nHowever, you can really get the most out of your image optimization by combining the best parts of a static front-end development framework like Gatsby and an image CDN like ImageEngine. Specifically, you can use both to target Google’s core web vitals:\n\n\n\nImageEngine’s dynamic, intelligent, run-time optimization will optimize payloads to improve LCP, SI, FCP, and other data size-related metrics.Using Gatsby, you can optimize for CLS and FID using best practices and by natively implementing lazy loading and image placeholders.\n\n\n\nImageEngine provides an Image Speed Test tool where you can quickly evaluate your current performance and see the impact of ImageEngine on key metrics. Even for a simple GatsbyJS project, the results in the Demo tool can be impressive. If you extrapolate those percentages for a larger, image-heavy site, combining Gatsby with ImageEngine could have a dramatic impact on the performance and user experience of your web app. What’s more, your developers will thank you for sparing them from the challenging and time-consuming chore of manual image optimization.\n\nSuperior Image Optimization: An Ideal Solution Using Gatsby & ImageEngine originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-24T15:31:49.000Z",
      "date_modified": "2022-02-24T15:31:49.000Z",
      "_plugin": {
        "pageFilename": "f9c6db379186924a0dae26981e81f0b3e2f057af6eb428934ee1e818e59d5790.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363937",
      "url": "https://css-tricks.com/css-database-queries/",
      "title": "CSS Database Queries? Sure We Can!",
      "summary": "Kinda silly sounding, isn’t it? CSS database queries. But, hey, CSS is capable of talking to other languages in the sense that it can set the values of things that they can read. Plus, CSS can request other files, and …\n\nCSS Database Queries? Sure We Can! originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Kinda silly sounding, isn&#8217;t it? CSS database queries. But, hey, CSS is capable of talking to other languages in the sense that it can set the values of things that they can read. Plus, CSS can request other files, and I suppose a server could respond to that request with something it requested from a database.</p>\n\n\n\n<p>But I&#8217;m getting ahead of myself. The idea of CSS database queries was a joke tweet going around the other day about recruiters looking for a developer who can connect to a database with CSS. Lee Meichin wrote <a href=\"https://www.leemeichin.com/posts/yes-i-can-connect-to-a-db-in-css.html\" rel=\"noopener\">&#8220;Yes, I can connect to a DB in CSS&#8221;</a> as an equally funny retort.</p>\n\n\n\n<span id=\"more-363937\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"828\" height=\"567\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/tweet.jpg?resize=828%2C567&#038;ssl=1\" alt=\"Screenshot of a tweet sarcastically looking for someone who can do CSS database queries.\" class=\"wp-image-363953\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/tweet.jpg?w=828&amp;ssl=1 828w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/tweet.jpg?resize=300%2C205&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/tweet.jpg?resize=768%2C526&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 id=\"what-s-the-trick-behind-css-database-queries\">What&#8217;s the trick behind CSS database queries?</h3>\n\n\n\n<p>It&#8217;s nicely elaborate:</p>\n\n\n\n<ol><li>Use a hand-modified-to-ESM version of <a href=\"https://sql.js.org/#/\" rel=\"noopener\">SQL.js</a>, which is <a href=\"https://www.sqlite.org/index.html\" rel=\"noopener\">SQLite</a> in JavaScript.</li><li>Get a database ready that SQL.js can query. </li><li>Build a Houdini <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet\" rel=\"noopener\"><code>PaintWorklet</code></a> that executes queries in JavaScript and paints the results back to the screen in that <code>&lt;canvas&gt;</code>-y way that <code>PaintWorklets</code> do.</li><li>Pass the query you want to run into the worklet by way of a CSS custom property.</li></ol>\n\n\n\n<p>So, the usage is like this in the end:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  CSS.paintWorklet.addModule('./cssdb.js')\n&lt;/script>\n&lt;style>\n  main {\n    --sql-query: SELECT name FROM test;\n    background: paint(sql-db);\n  }\n&lt;/style></code></pre>\n\n\n\n<p>Which, you gotta admit, is connecting and querying a database in CSS.</p>\n\n\n\n<p>This reminds me that Simon Willison <a href=\"https://simonwillison.net/2021/Jan/7/css-apis-no-javascript/\" rel=\"noopener\">did this</a> last year with a totally different approach. His concept was that you have RESTful endpoints, like <code>/api/roadside_attractions</code>, that return JSON data. But then as an alternative endpoint, you could make that <code>/api/roadside_attractions.css</code> which would return a valid CSS file with all the data as <a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">CSS custom properties</a>.</p>\n\n\n\n<p>So, instead it looks like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;link rel=\"stylesheet\" href=\"/api/roadside_attractions.css\">\n\n&lt;style>\n  .attraction-name:after { content: var(--name); }\n  .attraction-address:after { content: var(--address); }\n&lt;/style>\n\n&lt;p class=\"attraction-name\">Attraction name: &lt;/p>\n&lt;p class=\"attraction-address\">Address: &lt;/p></code></pre>\n\n\n\n<p>Which, again, is essentially connecting to a database in CSS (with HTML required, though). You can literally <a href=\"https://codepen.io/simonwillison/pen/MWjXRdP\" rel=\"noopener\">see it work</a>.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-database-queries/\">CSS Database Queries? Sure We Can!</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Kinda silly sounding, isn’t it? CSS database queries. But, hey, CSS is capable of talking to other languages in the sense that it can set the values of things that they can read. Plus, CSS can request other files, and I suppose a server could respond to that request with something it requested from a database.\n\n\n\nBut I’m getting ahead of myself. The idea of CSS database queries was a joke tweet going around the other day about recruiters looking for a developer who can connect to a database with CSS. Lee Meichin wrote “Yes, I can connect to a DB in CSS” as an equally funny retort.\n\n\n\n\n\n\n\n\n\n\n\nWhat’s the trick behind CSS database queries?\n\n\n\nIt’s nicely elaborate:\n\n\n\nUse a hand-modified-to-ESM version of SQL.js, which is SQLite in JavaScript.Get a database ready that SQL.js can query. Build a Houdini PaintWorklet that executes queries in JavaScript and paints the results back to the screen in that <canvas>-y way that PaintWorklets do.Pass the query you want to run into the worklet by way of a CSS custom property.\n\n\n\nSo, the usage is like this in the end:\n\n\n\n<script>\n  CSS.paintWorklet.addModule('./cssdb.js')\n</script>\n<style>\n  main {\n    --sql-query: SELECT name FROM test;\n    background: paint(sql-db);\n  }\n</style>\n\n\n\nWhich, you gotta admit, is connecting and querying a database in CSS.\n\n\n\nThis reminds me that Simon Willison did this last year with a totally different approach. His concept was that you have RESTful endpoints, like /api/roadside_attractions, that return JSON data. But then as an alternative endpoint, you could make that /api/roadside_attractions.css which would return a valid CSS file with all the data as CSS custom properties.\n\n\n\nSo, instead it looks like this:\n\n\n\n<link rel=\"stylesheet\" href=\"/api/roadside_attractions.css\">\n\n<style>\n  .attraction-name:after { content: var(--name); }\n  .attraction-address:after { content: var(--address); }\n</style>\n\n<p class=\"attraction-name\">Attraction name: </p>\n<p class=\"attraction-address\">Address: </p>\n\n\n\nWhich, again, is essentially connecting to a database in CSS (with HTML required, though). You can literally see it work.\n\nCSS Database Queries? Sure We Can! originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-23T20:04:39.000Z",
      "date_modified": "2022-02-23T20:04:39.000Z",
      "_plugin": {
        "pageFilename": "8ce6d33807e824ecb13cfb9b3b00aa2243177826439e011550995aefae0c1f5a.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363532",
      "url": "https://css-tricks.com/5-accessibility-quick-wins-you-can-implement-today/",
      "title": "5 Accessibility Quick Wins You Can Implement Today",
      "summary": "Let’s face it: building an AA or AAA-accessible product can be quite daunting. Luckily, having an accessible product isn’t all-or-nothing. Even seemingly small improvements can have nice quality of life benefits for many people.\nIn that spirit, here are five …\n\n5 Accessibility Quick Wins You Can Implement Today originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Let’s face it: building an AA or AAA-accessible product can be quite daunting. Luckily, having an accessible product isn’t all-or-nothing. Even seemingly small improvements can have nice quality of life benefits for many people.</p>\n\n\n\n<p>In that spirit, here are five accessibility quick wins you can implement today.</p>\n\n\n\n<span id=\"more-363532\"></span>\n\n\n\n<h3 id=\"quick-win-1-indicate-the-current-page\">Quick Win 1: Indicate the Current Page</h3>\n\n\n\n<p>It’s probably safe to assume that a different style is the most common way to communicate the current page of a site or app. However, even if those styles are clear and with great contrast ratios, they’re still only a visual cue.</p>\n\n\n\n<p>So what happens if a person with limited vision cannot see that separation? How will they know what page they’re on?</p>\n\n\n\n<p>Creating an accessible product is to ensure its markup communicates as clearly as its design.</p>\n\n\n\n<p>Adding <code>aria-current=\"page\"</code> to the active navigation element is one way to ensure markup and design communicate the same information with or without assistive technologies.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;a aria-current=\"page\" href=\"/\">Home&lt;/a></code></pre>\n\n\n\n<h4 id=\"bonus\">&#x1f389; Bonus</h4>\n\n\n\n<p>Use CSS attribute selectors to style the <code>aria-current=\"page\"</code> element to keep the visual and markup cues linked.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[aria-current=\"page\"] { \n  /* Active element styles */\n}</code></pre>\n\n\n\n<h3 id=\"quick-win-2-document-language\">Quick Win 2: Document Language</h3>\n\n\n\n<p>While some people can visit a website and determine the language or locale of its content, not all people have that luxury. Again, markup must communicate the same information as the visual design — even if that information may seem implied.</p>\n\n\n\n<p>Add the <code>lang</code> attribute to the <code>&lt;html&gt;</code> tag to communicate not only the document’s language, but its locale. This will help assistive technologies like screen readers understand and communicate the content. Even if the app only supports one language, this can be a nice quality of life improvement for many people.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;html lang=\"en-US\"></code></pre>\n\n\n\n<p>For apps which support multiple languages, the <code>&lt;html&gt;</code> element is likely not the only one to need its <code>lang</code> value defined. Use the <code>lang</code> attribute on specific elements whose language differs from the rest of the document, like links within a language toggle menu. In this case, pair the use of <code>lang</code> with <a href=\"https://developers.google.com/search/docs/advanced/crawling/localized-versions\" rel=\"noopener\">the <code>hreflang</code> attribute</a> to not only communicate the language of the link itself, but also of its destination.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;a lang=\"fi\" hreflang=\"fi\" href=\"/\" title=\"Suomeksi\">\n  &lt;bdi>Suomeksi&lt;/bdi>\n&lt;/a></code></pre>\n\n\n\n<h3 id=\"quick-win-3-use-prefers-reduced-motion\">Quick Win 3: Use <code>prefers-reduced-motion</code></h3>\n\n\n\n<p>Whether drawing attention to actions or updates, or creating a sense of life and charm, adding motion to an app can really elevate its experience. However, some people may find that experience disorienting.</p>\n\n\n\n<p>Windows and MacOS both offer a setting at the OS level for people to greatly reduce the amount of motion when using their systems. The <code><a href=\"https://css-tricks.com/revisiting-prefers-reduced-motion/\"><code>prefers-reduced-motion</code></a></code> setting can greatly improve the experience on a computer, but it does not extends beyond the UI of the operating system. So wouldn’t it be nice if our apps could respect that same system setting and provide a more static experience for those who prefer it?</p>\n\n\n\n<p>Well, with CSS media queries, they can.</p>\n\n\n\n<p>The <code>prefers-reduced-motion</code> media query can be used to greatly reduce or remove all motion from an app whenever the system setting is enabled.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYEgoEp\" src=\"//codepen.io/anon/embed/zYEgoEp?height=450&amp;theme-id=1&amp;slug-hash=zYEgoEp&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYEgoEp\" title=\"CodePen Embed zYEgoEp\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}</code></pre>\n\n\n\n<p>The blanket approach shown here prevents <em>all</em> motion, <a href=\"https://css-tricks.com/nuking-motion-with-prefers-reduced-motion/\">but it can leave little room for nuance</a>. It’d be best to review the needs of those using the product, but consider these other options as well.</p>\n\n\n\n<p>One approach could be to only animate one property at a time in <code>prefers-reduced-motion</code> settings. So consider a <code>&lt;Modal /&gt;</code> that fades and scales into view with <code>opacity</code> and <code>transform</code>. In reduced motion environments, only the <code>opacity</code> would transition. The scaling effect would be removed as they are more commonly problematic than fading.</p>\n\n\n\n<p>Another option could be to look at the <code>prefers-reduced-motion</code> environment a bit more literally and remove all <em>motion</em>. This would do away with our scaling modals, sliding drawers, and bouncing notifications, but would still leave room for color transitions on links and buttons.</p>\n\n\n\n<h3 id=\"quick-win-4-indicate-data-sorting-state\">Quick Win 4: Indicate Data Sorting State</h3>\n\n\n\n<p>A common theme across all of these tips is to ensure that an app’s visual design and markup communicate the same things. So, when the design uses an arrow to indicate the sort direction of a table column, how can that also be communicated in the markup?</p>\n\n\n\n<p>Setting the <code>aria-sort</code> attribute to <code>ascending</code> /<code>descending</code> on the header of the actively-sorted column allows the markup to communicate the same content structure as a visual indicator in the UI.</p>\n\n\n\n<p>This will help ensure that people using assistive technologies and those who aren’t can understand the content in the same way.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;thead>\n  &lt;tr>\n    &lt;th>First Name&lt;/th>\n    &lt;th aria-sort=\"ascending\">Last Name&lt;/th>\n  &lt;/tr>\n&lt;/thead></code></pre>\n\n\n\n<h3 id=\"quick-win-5-lazy-loading-lists\">Quick Win 5: Lazy Loading Lists</h3>\n\n\n\n<p>Whether scrolling through an endless stream of tweets or through an impossible-to-decide list of products, the web has fully embraced lazy loading long lists of data (and alliteration, apparently).</p>\n\n\n\n<p>This is when the <code>aria-setsize</code> and <code>aria-posinset</code> attributes become very valuable. While a person’s progression through the list can be communicated visually in many different ways, these attributes are used to communicate that same progression to many assistive technologies.</p>\n\n\n\n<p>As developers, we likely have access to the length of an entire list as well as the index of the current items being displayed. With that, the <code>aria-setsize</code> attribute would define the total length of the list, while the <code>aria-posinset</code> attribute would define an item’s specific position (or index) within that list.</p>\n\n\n\n<p>If the total length of the list is not known, then <code>aria-setsize</code> should be set to <code>-1</code>.</p>\n\n\n\n<p>With these attributes, assistive technologies can better interpret a list and a person can better understand their position within it.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;h2 id=\"top-artists-title\">Top Artists of 2021&lt;/h2>\n&lt;ul role=\"listbox\" aria-labelledby=\"top-artists-title\">\n  &lt;li role=\"option\" aria-setsize=\"20\" aria-posinset=\"5\">Bloodbound&lt;/li>\n  &lt;li role=\"option\" aria-setsize=\"20\" aria-posinset=\"6\">Manimal&lt;/li>\n  &lt;li role=\"option\" aria-setsize=\"20\" aria-posinset=\"7\">Powerwolf&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<p>Take a listen to how these attributes are announced using MacOS VoiceOver.</p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-vimeo wp-block-embed-vimeo\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"aria-setsize-demo\" src=\"https://player.vimeo.com/video/672659433?h=88c93cde2a&amp;dnt=1&amp;app_id=122963\" width=\"500\" height=\"281\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<h3 id=\"bonus-win-axe-devtools-extension\">&#x1f389; Bonus Win: Axe-DevTools Extension</h3>\n\n\n\n<p>Implementing those five accessibility quick wins is a great start, but that’s exactly what it is —a start. There’s a sprawling landscape of assistive technologies and sets of abilities a person can posses, and navigating it all alone can feel overwhelming.</p>\n\n\n\n<p>Fortunately, there are plenty of tools to help with auditing a product’s accessibility that make the journey much more manageable. My personal favorite — my trusty accessibility compass — is the <a href=\"https://www.deque.com/axe/devtools/\" rel=\"noopener\">Axe-DevTools browser extension</a>.</p>\n\n\n\n<p>Running the Axe-DevTools accessibility scanner can return tons of valuable information. Not only will it display all issues and warnings found on the page, but it groups them by approximate severity. It can also highlight the element on the page or in the Elements tab and provide links to learn more about the specific issue.</p>\n\n\n\n<p>However, most importantly, it will offer clear and concise approaches to fix the specific issue.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"3840\" height=\"1950\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_E707ED010C33F3A82B427E1A756AE52FE1625C3C43F4EF4867C4CB49ACCD5BD6_1643268885745_image.png?resize=3840%2C1950&#038;ssl=1\" alt=\"A screenshot of an Axe-DevTools accessibility report. Using the extension can lead to accessibility quick wins.\" class=\"wp-image-363533\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_E707ED010C33F3A82B427E1A756AE52FE1625C3C43F4EF4867C4CB49ACCD5BD6_1643268885745_image.png?w=3840&amp;ssl=1 3840w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_E707ED010C33F3A82B427E1A756AE52FE1625C3C43F4EF4867C4CB49ACCD5BD6_1643268885745_image.png?resize=300%2C152&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_E707ED010C33F3A82B427E1A756AE52FE1625C3C43F4EF4867C4CB49ACCD5BD6_1643268885745_image.png?resize=1024%2C520&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_E707ED010C33F3A82B427E1A756AE52FE1625C3C43F4EF4867C4CB49ACCD5BD6_1643268885745_image.png?resize=768%2C390&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_E707ED010C33F3A82B427E1A756AE52FE1625C3C43F4EF4867C4CB49ACCD5BD6_1643268885745_image.png?resize=1536%2C780&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_E707ED010C33F3A82B427E1A756AE52FE1625C3C43F4EF4867C4CB49ACCD5BD6_1643268885745_image.png?resize=2048%2C1040&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_E707ED010C33F3A82B427E1A756AE52FE1625C3C43F4EF4867C4CB49ACCD5BD6_1643268885745_image.png?resize=1000%2C508&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_E707ED010C33F3A82B427E1A756AE52FE1625C3C43F4EF4867C4CB49ACCD5BD6_1643268885745_image.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n\n\n\n<p>A product isn’t made accessible overnight; nor is a product’s accessibility work ever really complete. Like anything else on the web, accessibility evolves and requires maintenance. However, even seemingly small additions can have an impact on a product’s accessibility and a person’s overall experience.</p>\n\n\n\n<p>After stepping into a new codebase, these are often some of the first few things I look into — some “low-hanging fruit” of accessibility, if you will.</p>\n\n\n\n<p>Reaching AAA or even AA conformance can feel like scaling an 8,000 meter peak. These steps won’t carry you to the summit, but an expedition is never completed in a single stride.</p>\n\n\n\n<h3 id=\"resources\">Resources</h3>\n\n\n\n<ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current\" rel=\"noopener\">Learn more about the <code>aria-current</code> attribute</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang\" rel=\"noopener\">Learn more about the <code>lang</code> attribute</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel#attr-alternate\" rel=\"noopener\">Learn more about the <code>hreflang</code> attribute</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\" rel=\"noopener\">Learn more about <code>prefers-reduced-motion</code></a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-sort\" rel=\"noopener\">Learn more about the <code>aria-sort</code> attribute</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-setsize\" rel=\"noopener\">Learn more about the <code>aria-setsize</code> attribute</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-posinset\" rel=\"noopener\">Learn more about the <code>aria-posinset</code> attribute</a></li><li><a href=\"https://www.deque.com/axe/devtools/\" rel=\"noopener\">Axe-DevTools browser extension</a></li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/5-accessibility-quick-wins-you-can-implement-today/\">5 Accessibility Quick Wins You Can Implement Today</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Let’s face it: building an AA or AAA-accessible product can be quite daunting. Luckily, having an accessible product isn’t all-or-nothing. Even seemingly small improvements can have nice quality of life benefits for many people.\n\n\n\nIn that spirit, here are five accessibility quick wins you can implement today.\n\n\n\n\n\n\n\nQuick Win 1: Indicate the Current Page\n\n\n\nIt’s probably safe to assume that a different style is the most common way to communicate the current page of a site or app. However, even if those styles are clear and with great contrast ratios, they’re still only a visual cue.\n\n\n\nSo what happens if a person with limited vision cannot see that separation? How will they know what page they’re on?\n\n\n\nCreating an accessible product is to ensure its markup communicates as clearly as its design.\n\n\n\nAdding aria-current=\"page\" to the active navigation element is one way to ensure markup and design communicate the same information with or without assistive technologies.\n\n\n\n<a aria-current=\"page\" href=\"/\">Home</a>\n\n\n\n🎉 Bonus\n\n\n\nUse CSS attribute selectors to style the aria-current=\"page\" element to keep the visual and markup cues linked.\n\n\n\n[aria-current=\"page\"] { \n  /* Active element styles */\n}\n\n\n\nQuick Win 2: Document Language\n\n\n\nWhile some people can visit a website and determine the language or locale of its content, not all people have that luxury. Again, markup must communicate the same information as the visual design — even if that information may seem implied.\n\n\n\nAdd the lang attribute to the <html> tag to communicate not only the document’s language, but its locale. This will help assistive technologies like screen readers understand and communicate the content. Even if the app only supports one language, this can be a nice quality of life improvement for many people.\n\n\n\n<html lang=\"en-US\">\n\n\n\nFor apps which support multiple languages, the <html> element is likely not the only one to need its lang value defined. Use the lang attribute on specific elements whose language differs from the rest of the document, like links within a language toggle menu. In this case, pair the use of lang with the hreflang attribute to not only communicate the language of the link itself, but also of its destination.\n\n\n\n<a lang=\"fi\" hreflang=\"fi\" href=\"/\" title=\"Suomeksi\">\n  <bdi>Suomeksi</bdi>\n</a>\n\n\n\nQuick Win 3: Use prefers-reduced-motion\n\n\n\nWhether drawing attention to actions or updates, or creating a sense of life and charm, adding motion to an app can really elevate its experience. However, some people may find that experience disorienting.\n\n\n\nWindows and MacOS both offer a setting at the OS level for people to greatly reduce the amount of motion when using their systems. The prefers-reduced-motion setting can greatly improve the experience on a computer, but it does not extends beyond the UI of the operating system. So wouldn’t it be nice if our apps could respect that same system setting and provide a more static experience for those who prefer it?\n\n\n\nWell, with CSS media queries, they can.\n\n\n\nThe prefers-reduced-motion media query can be used to greatly reduce or remove all motion from an app whenever the system setting is enabled.\n\n\n\nCodePen Embed Fallback\n\n\n\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n\n\n\nThe blanket approach shown here prevents all motion, but it can leave little room for nuance. It’d be best to review the needs of those using the product, but consider these other options as well.\n\n\n\nOne approach could be to only animate one property at a time in prefers-reduced-motion settings. So consider a <Modal /> that fades and scales into view with opacity and transform. In reduced motion environments, only the opacity would transition. The scaling effect would be removed as they are more commonly problematic than fading.\n\n\n\nAnother option could be to look at the prefers-reduced-motion environment a bit more literally and remove all motion. This would do away with our scaling modals, sliding drawers, and bouncing notifications, but would still leave room for color transitions on links and buttons.\n\n\n\nQuick Win 4: Indicate Data Sorting State\n\n\n\nA common theme across all of these tips is to ensure that an app’s visual design and markup communicate the same things. So, when the design uses an arrow to indicate the sort direction of a table column, how can that also be communicated in the markup?\n\n\n\nSetting the aria-sort attribute to ascending /descending on the header of the actively-sorted column allows the markup to communicate the same content structure as a visual indicator in the UI.\n\n\n\nThis will help ensure that people using assistive technologies and those who aren’t can understand the content in the same way.\n\n\n\n<thead>\n  <tr>\n    <th>First Name</th>\n    <th aria-sort=\"ascending\">Last Name</th>\n  </tr>\n</thead>\n\n\n\nQuick Win 5: Lazy Loading Lists\n\n\n\nWhether scrolling through an endless stream of tweets or through an impossible-to-decide list of products, the web has fully embraced lazy loading long lists of data (and alliteration, apparently).\n\n\n\nThis is when the aria-setsize and aria-posinset attributes become very valuable. While a person’s progression through the list can be communicated visually in many different ways, these attributes are used to communicate that same progression to many assistive technologies.\n\n\n\nAs developers, we likely have access to the length of an entire list as well as the index of the current items being displayed. With that, the aria-setsize attribute would define the total length of the list, while the aria-posinset attribute would define an item’s specific position (or index) within that list.\n\n\n\nIf the total length of the list is not known, then aria-setsize should be set to -1.\n\n\n\nWith these attributes, assistive technologies can better interpret a list and a person can better understand their position within it.\n\n\n\n<h2 id=\"top-artists-title\">Top Artists of 2021</h2>\n<ul role=\"listbox\" aria-labelledby=\"top-artists-title\">\n  <li role=\"option\" aria-setsize=\"20\" aria-posinset=\"5\">Bloodbound</li>\n  <li role=\"option\" aria-setsize=\"20\" aria-posinset=\"6\">Manimal</li>\n  <li role=\"option\" aria-setsize=\"20\" aria-posinset=\"7\">Powerwolf</li>\n</ul>\n\n\n\nTake a listen to how these attributes are announced using MacOS VoiceOver.\n\n\n\n\n\n\n\n\n\n🎉 Bonus Win: Axe-DevTools Extension\n\n\n\nImplementing those five accessibility quick wins is a great start, but that’s exactly what it is —a start. There’s a sprawling landscape of assistive technologies and sets of abilities a person can posses, and navigating it all alone can feel overwhelming.\n\n\n\nFortunately, there are plenty of tools to help with auditing a product’s accessibility that make the journey much more manageable. My personal favorite — my trusty accessibility compass — is the Axe-DevTools browser extension.\n\n\n\nRunning the Axe-DevTools accessibility scanner can return tons of valuable information. Not only will it display all issues and warnings found on the page, but it groups them by approximate severity. It can also highlight the element on the page or in the Elements tab and provide links to learn more about the specific issue.\n\n\n\nHowever, most importantly, it will offer clear and concise approaches to fix the specific issue.\n\n\n\n\n\n\n\nWrapping Up\n\n\n\nA product isn’t made accessible overnight; nor is a product’s accessibility work ever really complete. Like anything else on the web, accessibility evolves and requires maintenance. However, even seemingly small additions can have an impact on a product’s accessibility and a person’s overall experience.\n\n\n\nAfter stepping into a new codebase, these are often some of the first few things I look into — some “low-hanging fruit” of accessibility, if you will.\n\n\n\nReaching AAA or even AA conformance can feel like scaling an 8,000 meter peak. These steps won’t carry you to the summit, but an expedition is never completed in a single stride.\n\n\n\nResources\n\n\n\nLearn more about the aria-current attributeLearn more about the lang attributeLearn more about the hreflang attributeLearn more about prefers-reduced-motionLearn more about the aria-sort attributeLearn more about the aria-setsize attributeLearn more about the aria-posinset attributeAxe-DevTools browser extension\n\n5 Accessibility Quick Wins You Can Implement Today originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-23T15:15:33.000Z",
      "date_modified": "2022-02-23T15:15:33.000Z",
      "_plugin": {
        "pageFilename": "57102a5a2945d8ebda26c81befa88cb3a738ca2722f378fa1cc116ef66f2b00f.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363998",
      "url": "https://css-tricks.com/before-i-go-when-it-comes-to-complaining-about-web-browsers/",
      "title": "Before I go: When it comes to complaining about web browsers",
      "summary": "That’s a damn one-two punch from Dave. He goes for the ultimate clickbait title¹, then follows up with a pile of epic advice for us all. If you want web browsers to get better, listen up:\n\nComplaining on \n\n…\n\nBefore I go: When it comes to complaining about web browsers originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>That&#8217;s a damn one-two punch from Dave. He goes for the ultimate clickbait title<a id=\"fn:1-back\" href=\"#fn:1\">¹</a>, then follows up with a pile of epic advice for us all. If you want web browsers to get better, listen up:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Complaining on Twitter sure does feel good but it doesn’t do much other than burning bridges and burning through people’s patience. I guess you may also get hit with the mute button which is probably the opposite effect you were hoping for. Despite how good or valid your complaint is, combativeness results in immediate dismissal by your target audience… not once, but for years. People hold grudges for a shockingly long time.</p></blockquote>\n\n\n\n<p>And so:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>The best thing I’ve ever done in my career is blog about my specific problems with browsers (or any software you’re passionate about). This goes for software beyond browsers too. I’ve done this for IE, Safari, Edge, Firefox, Chrome, Windows 10, WSL and I’ve seen first hand how a “friction log” can become a powerful tool in an organization.</p><p>Behind the scenes, your posts will get picked up by external-facing developer advocates and shared internally. A single blog post is worth 10,000 tweets.</p></blockquote>\n\n\n\n<div id=\"fn:1\" class=\"wp-container-6220023496f2c wp-block-group footnotes\"><div class=\"wp-block-group__inner-container\">\n<ol><li>Stay tuned for my upcoming blog post “I fell into a cement mixer and here’s everything I know about Cascade Layers.” <a href=\"#fn:1-back\">⮑</a></li></ol>\n</div></div>\n<p><a href=\"https://daverupert.com/2022/02/complaining-about-web-browsers/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/before-i-go-when-it-comes-to-complaining-about-web-browsers/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/before-i-go-when-it-comes-to-complaining-about-web-browsers/\">Before I go: When it comes to complaining about web browsers</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "That’s a damn one-two punch from Dave. He goes for the ultimate clickbait title¹, then follows up with a pile of epic advice for us all. If you want web browsers to get better, listen up:\n\n\n\nComplaining on Twitter sure does feel good but it doesn’t do much other than burning bridges and burning through people’s patience. I guess you may also get hit with the mute button which is probably the opposite effect you were hoping for. Despite how good or valid your complaint is, combativeness results in immediate dismissal by your target audience… not once, but for years. People hold grudges for a shockingly long time.\n\n\n\nAnd so:\n\n\n\nThe best thing I’ve ever done in my career is blog about my specific problems with browsers (or any software you’re passionate about). This goes for software beyond browsers too. I’ve done this for IE, Safari, Edge, Firefox, Chrome, Windows 10, WSL and I’ve seen first hand how a “friction log” can become a powerful tool in an organization.Behind the scenes, your posts will get picked up by external-facing developer advocates and shared internally. A single blog post is worth 10,000 tweets.\n\n\n\n\nStay tuned for my upcoming blog post “I fell into a cement mixer and here’s everything I know about Cascade Layers.” ⮑\n\nTo Shared Link — Permalink on CSS-Tricks\nBefore I go: When it comes to complaining about web browsers originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-22T20:06:57.000Z",
      "date_modified": "2022-02-22T20:06:57.000Z",
      "_plugin": {
        "pageFilename": "9eb5c0783a040a22128a02ac257ee31cccd84cee36f294e48c191932711351aa.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363511",
      "url": "https://css-tricks.com/send-an-http-request-on-page-exit/",
      "title": "Reliably Send an HTTP Request as a User Leaves a Page",
      "summary": "On several occasions, I’ve needed to send off an HTTP request with some data to log when a user does something like navigate to a different page or submit a form. Consider this contrived example of sending some information to …\n\nReliably Send an HTTP Request as a User Leaves a Page originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>On several occasions, I’ve needed to send off an <code>HTTP</code> request with some data to log when a user does something like navigate to a different page or submit a form. Consider this contrived example of sending some information to an external service when a link is clicked:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;a href=\"/some-other-page\" id=\"link\">Go to Page&lt;/a>\n\n&lt;script>\ndocument.getElementById('link').addEventListener('click', (e) => {\n  fetch(\"/log\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }, \n    body: JSON.stringify({\n      some: \"data\"\n    })\n  });\n});\n&lt;/script></code></pre>\n\n\n\n<p>There’s nothing terribly complicated going on here. The link is permitted to behave as it normally would (I’m not using <code>e.preventDefault()</code>), but before that behavior occurs, a <code>POST</code> request is triggered on <code>click</code>. There’s no need to wait for any sort of response. <strong>I just want it to be sent</strong> to whatever service I’m hitting.</p>\n\n\n\n<span id=\"more-363511\"></span>\n\n\n\n<p>On first glance, you might expect the dispatch of that request to be synchronous, after which we&#8217;d continue navigating away from the page while some other server successfully handles that request. But as it turns out, that’s not what always happens.</p>\n\n\n\n<h3 id=\"browsers-don-t-guarantee-to-preserve-open-http-requests\">Browsers don’t guarantee to preserve open HTTP requests</h3>\n\n\n\n<p>When something occurs to terminate a page in the browser, there’s no guarantee that an in-process <code>HTTP</code> request will be successful (<a href=\"https://developers.google.com/web/updates/2018/07/page-lifecycle-api\" rel=\"noopener\">see more</a> about the &#8220;terminated&#8221; and other states of a page’s lifecycle). The reliability of those requests may depend on several things — network connection, application performance, and even the configuration of the external service itself.</p>\n\n\n\n<p>As a result, sending data at those moments can be anything but reliable, which presents a potentially significant problem if you’re relying on those logs to make data-sensitive business decisions.</p>\n\n\n\n<p>To help illustrate this unreliability, I set up a small Express application with a page using the code included above. When the link is clicked, the browser navigates to <code>/other</code>, but before that happens, a <code>POST</code> request is fired off.</p>\n\n\n\n<p>While everything happens, I have the browser’s Network tab open, and I’m using a “Slow 3G” connection speed. Once the page loads and I&#8217;ve cleared the log out, things look pretty quiet:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2000\" height=\"946\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/initial-load-1.png?resize=2000%2C946&#038;ssl=1\" alt=\"Viewing HTTP request in the network tab\" class=\"wp-image-363578\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/initial-load-1.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/initial-load-1.png?resize=300%2C142&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/initial-load-1.png?resize=1024%2C484&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/initial-load-1.png?resize=768%2C363&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/initial-load-1.png?resize=1536%2C727&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/initial-load-1.png?resize=1000%2C473&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But as soon as the link is clicked, things go awry. When navigation occurs, the request is cancelled.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1000\" height=\"472\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/request-failed-1.gif?resize=1000%2C472&#038;ssl=1\" alt=\"Viewing HTTP request fail in the network tab\" class=\"wp-image-363579\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>And that leaves us with little confidence that the external service was actually able process the request. Just to verify this behavior, it also occurs when we navigate programmatically with <code>window.location</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.getElementById('link').addEventListener('click', (e) => {\n+ e.preventDefault();\n\n  // Request is queued, but cancelled as soon as navigation occurs. \n  fetch(\"/log\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }, \n    body: JSON.stringify({\n      some: 'data'\n    }),\n  });\n\n+ window.location = e.target.href;\n});</code></pre>\n\n\n\n<p>Regardless of how or when navigation occurs and the active page is terminated, those unfinished requests are at risk for being abandoned.</p>\n\n\n\n<h3 id=\"but-why-are-they-cancelled\">But why are they cancelled?</h3>\n\n\n\n<p>The root of the issue is that, by default, XHR requests (via <code>fetch</code> or <code>XMLHttpRequest</code>) are asynchronous and non-blocking. As soon as the request is queued, the actual <em>work</em> of the request is handed off to a browser-level API behind the scenes.</p>\n\n\n\n<p>As it relates to performance, this is good — you don’t want requests hogging the main thread. But it also means there’s a risk of them being deserted when a page enters into that “terminated” state, leaving no guarantee that any of that behind-the-scenes work reaches completion. <a href=\"https://developers.google.com/web/updates/2018/07/page-lifecycle-api#states\" rel=\"noopener\">Here’s how Google summarizes</a> that specific lifecycle state:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>A page is in the terminated state once it has started being unloaded and cleared from memory by the browser. No <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-task\" rel=\"noopener\">new tasks</a> can start in this state, and in-progress tasks may be killed if they run too long.</p></blockquote>\n\n\n\n<p>In short, the browser is designed with the assumption that when a page is dismissed, there&#8217;s no need to continue to process any background processes queued by it.</p>\n\n\n\n<h3 id=\"so-what-are-our-options\">So, what are our options?</h3>\n\n\n\n<p>Perhaps the most obvious approach to avoid this problem is, as much as possible, to delay the user action until the request returns a response. In the past, this has been done the wrong way by use of the <a href=\"https://xhr.spec.whatwg.org/#synchronous-flag\" rel=\"noopener\">synchronous flag</a> supported within <code>XMLHttpRequest</code>. But using it completely blocks the main thread, causing a host of performance issues — <a href=\"https://macarthur.me/posts/use-web-workers-for-your-event-listeners\" rel=\"noopener\">I’ve written</a> about some of this in the past — so the idea shouldn’t even be entertained. In fact, it’s on its way out of the platform (Chrome v80+ <a href=\"https://developers.google.com/web/updates/2019/12/chrome-80-deps-rems\" rel=\"noopener\">has already</a> removed it).</p>\n\n\n\n<p>Instead, if you’re going to take this type of approach, it’s better to wait for a <code>Promise</code> to resolve as a response is returned. After it’s back, you can safely perform the behavior. Using our snippet from earlier, that might look something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.getElementById('link').addEventListener('click', async (e) => {\n  e.preventDefault();\n\n  // Wait for response to come back...\n  await fetch(\"/log\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }, \n    body: JSON.stringify({\n      some: 'data'\n    }),\n  });\n\n  // ...and THEN navigate away.\n   window.location = e.target.href;\n});</code></pre>\n\n\n\n<p>That gets the job done, but there are some non-trivial drawbacks.</p>\n\n\n\n<p><strong>First, it compromises the user’s experience by delaying the desired behavior from occurring.</strong> Collecting analytics data certainly benefits the business (and hopefully future users), but it’s less than ideal to make your <em>present</em> users to pay the cost to realize those benefits. Not to mention, as an external dependency, any latency or other performance issues within the service itself will be surfaced to the user. If timeouts from your analytics service cause a customer from completing a high-value action, everyone loses.</p>\n\n\n\n<p><strong>Second, this approach isn’t as reliable as it initially sounds, since some termination behaviors can’t be programmatically delayed.</strong> For example, <code>e.preventDefault()</code> is useless in delaying someone from closing a browser tab. So, at best, it’ll cover collecting data for <em>some</em> user actions, but not enough to be able to trust it comprehensively.</p>\n\n\n\n<h3 id=\"instructing-the-browser-to-preserve-outstanding-requests\">Instructing the browser to preserve outstanding requests</h3>\n\n\n\n<p>Thankfully, there are options to <em>preserve</em> outstanding <code>HTTP</code> requests that are built into the vast majority of browsers, and that don’t require user experience to be compromised.</p>\n\n\n\n<h4 id=\"using-fetch-s-keepalive-flag\">Using Fetch’s <code>keepalive</code> flag</h4>\n\n\n\n<p>If the <a href=\"https://fetch.spec.whatwg.org/#request-keepalive-flag\" rel=\"noopener\"><code>keepalive</code> flag</a> is set to <code>true</code> when using <code>fetch()</code>, the corresponding request will remain open, even if the page that initiated that request is terminated. Using our initial example, that’d make for an implementation that looks like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"12\"><code markup=\"tt\">&lt;a href=\"/some-other-page\" id=\"link\">Go to Page&lt;/a>\n\n&lt;script>\n  document.getElementById('link').addEventListener('click', (e) => {\n    fetch(\"/log\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }, \n      body: JSON.stringify({\n        some: \"data\"\n      }), \n      keepalive: true\n    });\n  });\n&lt;/script></code></pre>\n\n\n\n<p>When that link is clicked and page navigation occurs, no request cancellation occurs:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1000\" height=\"472\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/request-succeeded.gif?resize=1000%2C472&#038;ssl=1\" alt=\"Viewing HTTP request succeed in the network tab\" class=\"wp-image-363580\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>Instead, we’re left with an <code>(unknown)</code> status, simply because the active page never waited around to receive any sort of response.</p>\n\n\n\n<p>A one-liner like this an easy fix, especially when it’s part of a commonly used browser API. But if you’re looking for a more focused option with a simpler interface, there’s another way with virtually the same browser support.</p>\n\n\n\n<h4 id=\"using-navigator-sendbeacon\">Using <code>Navigator.sendBeacon()</code></h4>\n\n\n\n<p>The <code>Navigator.sendBeacon()</code>function is specifically intended for sending one-way requests (<a href=\"https://w3c.github.io/beacon/#sec-processing-model\" rel=\"noopener\">beacons</a>). A basic implementation looks like this, sending a <code>POST</code> with stringified JSON and a “text/plain” <code>Content-Type</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">navigator.sendBeacon('/log', JSON.stringify({\n  some: \"data\"\n}));</code></pre>\n\n\n\n<p>But this API doesn’t permit you to send custom headers. So, in order for us to send our data as “application/json”, we’ll need to make a small tweak and use a <code>Blob</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;a href=\"/some-other-page\" id=\"link\">Go to Page&lt;/a>\n\n&lt;script>\n  document.getElementById('link').addEventListener('click', (e) => {\n    const blob = new Blob([JSON.stringify({ some: \"data\" })], { type: 'application/json; charset=UTF-8' });\n    navigator.sendBeacon('/log', blob));\n  });\n&lt;/script></code></pre>\n\n\n\n<p>In the end, we get the same result — a request that’s allowed to complete even after page navigation. But there&#8217;s something more going on that may give it an edge over <code>fetch()</code>: beacons are sent with a low priority.</p>\n\n\n\n<p>To demonstrate, here’s what’s shown in the Network tab when both <code>fetch()</code> with <code>keepalive</code> <em>and</em> <code>sendBeacon()</code> are used at the same time:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2000\" height=\"946\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/request-priorities.png?resize=2000%2C946&#038;ssl=1\" alt=\"Viewing HTTP request in the network tab\" class=\"wp-image-363581\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/request-priorities.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/request-priorities.png?resize=300%2C142&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/request-priorities.png?resize=1024%2C484&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/request-priorities.png?resize=768%2C363&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/request-priorities.png?resize=1536%2C727&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/request-priorities.png?resize=1000%2C473&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>By default, <code>fetch()</code> gets a “High” priority, while the beacon (noted as the “ping” type above) have the “Lowest” priority. For requests that aren’t critical to the functionality of the page, this is a good thing. Taken straight from the <a href=\"https://www.w3.org/TR/beacon/\" rel=\"noopener\">Beacon specification</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>This specification defines an interface that [&#8230;] minimizes resource contention with other time-critical operations, while ensuring that such requests are still processed and delivered to destination.</p></blockquote>\n\n\n\n<p>Put another way, <code>sendBeacon()</code> ensures its requests stay out of the way of those that really matter for your application and your user&#8217;s experience.</p>\n\n\n\n<h4 id=\"an-honorable-mention-for-the-ping-attribute\">An honorable mention for the <code>ping</code> attribute</h4>\n\n\n\n<p>It’s worth mentioning that a growing number of browsers support <a href=\"https://css-tricks.com/the-ping-attribute-on-anchor-links/\">the <code>ping</code> attribute</a>. When attached to links, it’ll fire off a small <code>POST</code> request:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;a href=\"http://localhost:3000/other\" ping=\"http://localhost:3000/log\">\n  Go to Other Page\n&lt;/a></code></pre>\n\n\n\n<p>And those requests headers will contain the page on which the link was clicked (<code>ping-from</code>), as well as the <code>href</code> value of that link (<code>ping-to</code>):</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">headers: {\n  'ping-from': 'http://localhost:3000/',\n  'ping-to': 'http://localhost:3000/other'\n  'content-type': 'text/ping'\n  // ...other headers\n},</code></pre>\n\n\n\n<p>It’s technically similar to sending a beacon, but has a few notable limitations:</p>\n\n\n\n<ol><li><strong>It’s strictly limited for use on links,</strong> which makes it a non-starter if you need to track data associated with other interactions, like button clicks or form submissions.</li><li><strong>Browser support is good, <a href=\"https://caniuse.com/ping\" rel=\"noopener\">but not great</a>.</strong> At the time of this writing, Firefox specifically doesn’t have it enabled by default.</li><li><strong>You&#8217;re unable to send any custom data along with the request.</strong> As mentioned, the most you&#8217;ll get is a couple of  <code>ping-*</code> headers, along with whatever other headers are along for the ride.</li></ol>\n\n\n\n<p>All things considered, <code>ping</code> is a good tool if you’re fine with sending simple requests and don&#8217;t want to write any custom JavaScript. But if you’re needing to send anything of more substance, it might not be the best thing to reach for.</p>\n\n\n\n<h3 id=\"so-which-one-should-i-reach-for\">So, which one <em>should</em> I reach for?</h3>\n\n\n\n<p>There are definitely tradeoffs to using either <code>fetch</code> with <code>keepalive</code> or <code>sendBeacon()</code> to send your last-second requests. To help discern which is the most appropriate for different circumstances, here are some things to consider:</p>\n\n\n\n<h4 id=\"you-might-go-with-fetch-keepalive-if\">You might go with <code>fetch()</code> + <code>keepalive</code> if:</h4>\n\n\n\n<ul><li>You need to easily pass custom headers with the request.</li><li>You want to make a <code>GET</code> request to a service, rather than a <code>POST</code>.</li><li>You’re supporting older browsers (like IE) and already have a <code>fetch</code> polyfill being loaded.</li></ul>\n\n\n\n<h4 id=\"but-sendbeacon-might-be-a-better-choice-if\">But <code>sendBeacon()</code> might be a better choice if:</h4>\n\n\n\n<ul><li>You’re making simple service requests that don’t need much customization.</li><li>You prefer the cleaner, more elegant API.</li><li>You want to guarantee that your requests don’t compete with other high-priority requests being sent in the application.</li></ul>\n\n\n\n<h3 id=\"avoid-repeating-my-mistakes\">Avoid repeating my mistakes</h3>\n\n\n\n<p>There’s a reason I chose to do a deep dive into the nature of how browsers handle in-process requests as a page is terminated. A while back, my team saw a sudden change in the frequency of a particular type of analytics log after we began firing the request just as a form was being submitted. The change was abrupt and significant — a ~30% drop from what we had been seeing historically. </p>\n\n\n\n<p>Digging into the reasons this problem arose, as well as the tools that are available to avoid it again, saved the day. So, if anything, I’m hoping that understanding the nuances of these challenges help someone avoid some of the pain we ran into. Happy logging!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/send-an-http-request-on-page-exit/\">Reliably Send an HTTP Request as a User Leaves a Page</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "On several occasions, I’ve needed to send off an HTTP request with some data to log when a user does something like navigate to a different page or submit a form. Consider this contrived example of sending some information to an external service when a link is clicked:\n\n\n\n<a href=\"/some-other-page\" id=\"link\">Go to Page</a>\n\n<script>\ndocument.getElementById('link').addEventListener('click', (e) => {\n  fetch(\"/log\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }, \n    body: JSON.stringify({\n      some: \"data\"\n    })\n  });\n});\n</script>\n\n\n\nThere’s nothing terribly complicated going on here. The link is permitted to behave as it normally would (I’m not using e.preventDefault()), but before that behavior occurs, a POST request is triggered on click. There’s no need to wait for any sort of response. I just want it to be sent to whatever service I’m hitting.\n\n\n\n\n\n\n\nOn first glance, you might expect the dispatch of that request to be synchronous, after which we’d continue navigating away from the page while some other server successfully handles that request. But as it turns out, that’s not what always happens.\n\n\n\nBrowsers don’t guarantee to preserve open HTTP requests\n\n\n\nWhen something occurs to terminate a page in the browser, there’s no guarantee that an in-process HTTP request will be successful (see more about the “terminated” and other states of a page’s lifecycle). The reliability of those requests may depend on several things — network connection, application performance, and even the configuration of the external service itself.\n\n\n\nAs a result, sending data at those moments can be anything but reliable, which presents a potentially significant problem if you’re relying on those logs to make data-sensitive business decisions.\n\n\n\nTo help illustrate this unreliability, I set up a small Express application with a page using the code included above. When the link is clicked, the browser navigates to /other, but before that happens, a POST request is fired off.\n\n\n\nWhile everything happens, I have the browser’s Network tab open, and I’m using a “Slow 3G” connection speed. Once the page loads and I’ve cleared the log out, things look pretty quiet:\n\n\n\n\n\n\n\nBut as soon as the link is clicked, things go awry. When navigation occurs, the request is cancelled.\n\n\n\n\n\n\n\nAnd that leaves us with little confidence that the external service was actually able process the request. Just to verify this behavior, it also occurs when we navigate programmatically with window.location:\n\n\n\ndocument.getElementById('link').addEventListener('click', (e) => {\n+ e.preventDefault();\n\n  // Request is queued, but cancelled as soon as navigation occurs. \n  fetch(\"/log\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }, \n    body: JSON.stringify({\n      some: 'data'\n    }),\n  });\n\n+ window.location = e.target.href;\n});\n\n\n\nRegardless of how or when navigation occurs and the active page is terminated, those unfinished requests are at risk for being abandoned.\n\n\n\nBut why are they cancelled?\n\n\n\nThe root of the issue is that, by default, XHR requests (via fetch or XMLHttpRequest) are asynchronous and non-blocking. As soon as the request is queued, the actual work of the request is handed off to a browser-level API behind the scenes.\n\n\n\nAs it relates to performance, this is good — you don’t want requests hogging the main thread. But it also means there’s a risk of them being deserted when a page enters into that “terminated” state, leaving no guarantee that any of that behind-the-scenes work reaches completion. Here’s how Google summarizes that specific lifecycle state:\n\n\n\nA page is in the terminated state once it has started being unloaded and cleared from memory by the browser. No new tasks can start in this state, and in-progress tasks may be killed if they run too long.\n\n\n\nIn short, the browser is designed with the assumption that when a page is dismissed, there’s no need to continue to process any background processes queued by it.\n\n\n\nSo, what are our options?\n\n\n\nPerhaps the most obvious approach to avoid this problem is, as much as possible, to delay the user action until the request returns a response. In the past, this has been done the wrong way by use of the synchronous flag supported within XMLHttpRequest. But using it completely blocks the main thread, causing a host of performance issues — I’ve written about some of this in the past — so the idea shouldn’t even be entertained. In fact, it’s on its way out of the platform (Chrome v80+ has already removed it).\n\n\n\nInstead, if you’re going to take this type of approach, it’s better to wait for a Promise to resolve as a response is returned. After it’s back, you can safely perform the behavior. Using our snippet from earlier, that might look something like this:\n\n\n\ndocument.getElementById('link').addEventListener('click', async (e) => {\n  e.preventDefault();\n\n  // Wait for response to come back...\n  await fetch(\"/log\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }, \n    body: JSON.stringify({\n      some: 'data'\n    }),\n  });\n\n  // ...and THEN navigate away.\n   window.location = e.target.href;\n});\n\n\n\nThat gets the job done, but there are some non-trivial drawbacks.\n\n\n\nFirst, it compromises the user’s experience by delaying the desired behavior from occurring. Collecting analytics data certainly benefits the business (and hopefully future users), but it’s less than ideal to make your present users to pay the cost to realize those benefits. Not to mention, as an external dependency, any latency or other performance issues within the service itself will be surfaced to the user. If timeouts from your analytics service cause a customer from completing a high-value action, everyone loses.\n\n\n\nSecond, this approach isn’t as reliable as it initially sounds, since some termination behaviors can’t be programmatically delayed. For example, e.preventDefault() is useless in delaying someone from closing a browser tab. So, at best, it’ll cover collecting data for some user actions, but not enough to be able to trust it comprehensively.\n\n\n\nInstructing the browser to preserve outstanding requests\n\n\n\nThankfully, there are options to preserve outstanding HTTP requests that are built into the vast majority of browsers, and that don’t require user experience to be compromised.\n\n\n\nUsing Fetch’s keepalive flag\n\n\n\nIf the keepalive flag is set to true when using fetch(), the corresponding request will remain open, even if the page that initiated that request is terminated. Using our initial example, that’d make for an implementation that looks like this:\n\n\n\n<a href=\"/some-other-page\" id=\"link\">Go to Page</a>\n\n<script>\n  document.getElementById('link').addEventListener('click', (e) => {\n    fetch(\"/log\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }, \n      body: JSON.stringify({\n        some: \"data\"\n      }), \n      keepalive: true\n    });\n  });\n</script>\n\n\n\nWhen that link is clicked and page navigation occurs, no request cancellation occurs:\n\n\n\n\n\n\n\nInstead, we’re left with an (unknown) status, simply because the active page never waited around to receive any sort of response.\n\n\n\nA one-liner like this an easy fix, especially when it’s part of a commonly used browser API. But if you’re looking for a more focused option with a simpler interface, there’s another way with virtually the same browser support.\n\n\n\nUsing Navigator.sendBeacon()\n\n\n\nThe Navigator.sendBeacon()function is specifically intended for sending one-way requests (beacons). A basic implementation looks like this, sending a POST with stringified JSON and a “text/plain” Content-Type:\n\n\n\nnavigator.sendBeacon('/log', JSON.stringify({\n  some: \"data\"\n}));\n\n\n\nBut this API doesn’t permit you to send custom headers. So, in order for us to send our data as “application/json”, we’ll need to make a small tweak and use a Blob:\n\n\n\n<a href=\"/some-other-page\" id=\"link\">Go to Page</a>\n\n<script>\n  document.getElementById('link').addEventListener('click', (e) => {\n    const blob = new Blob([JSON.stringify({ some: \"data\" })], { type: 'application/json; charset=UTF-8' });\n    navigator.sendBeacon('/log', blob));\n  });\n</script>\n\n\n\nIn the end, we get the same result — a request that’s allowed to complete even after page navigation. But there’s something more going on that may give it an edge over fetch(): beacons are sent with a low priority.\n\n\n\nTo demonstrate, here’s what’s shown in the Network tab when both fetch() with keepalive and sendBeacon() are used at the same time:\n\n\n\n\n\n\n\nBy default, fetch() gets a “High” priority, while the beacon (noted as the “ping” type above) have the “Lowest” priority. For requests that aren’t critical to the functionality of the page, this is a good thing. Taken straight from the Beacon specification:\n\n\n\nThis specification defines an interface that […] minimizes resource contention with other time-critical operations, while ensuring that such requests are still processed and delivered to destination.\n\n\n\nPut another way, sendBeacon() ensures its requests stay out of the way of those that really matter for your application and your user’s experience.\n\n\n\nAn honorable mention for the ping attribute\n\n\n\nIt’s worth mentioning that a growing number of browsers support the ping attribute. When attached to links, it’ll fire off a small POST request:\n\n\n\n<a href=\"http://localhost:3000/other\" ping=\"http://localhost:3000/log\">\n  Go to Other Page\n</a>\n\n\n\nAnd those requests headers will contain the page on which the link was clicked (ping-from), as well as the href value of that link (ping-to):\n\n\n\nheaders: {\n  'ping-from': 'http://localhost:3000/',\n  'ping-to': 'http://localhost:3000/other'\n  'content-type': 'text/ping'\n  // ...other headers\n},\n\n\n\nIt’s technically similar to sending a beacon, but has a few notable limitations:\n\n\n\nIt’s strictly limited for use on links, which makes it a non-starter if you need to track data associated with other interactions, like button clicks or form submissions.Browser support is good, but not great. At the time of this writing, Firefox specifically doesn’t have it enabled by default.You’re unable to send any custom data along with the request. As mentioned, the most you’ll get is a couple of  ping-* headers, along with whatever other headers are along for the ride.\n\n\n\nAll things considered, ping is a good tool if you’re fine with sending simple requests and don’t want to write any custom JavaScript. But if you’re needing to send anything of more substance, it might not be the best thing to reach for.\n\n\n\nSo, which one should I reach for?\n\n\n\nThere are definitely tradeoffs to using either fetch with keepalive or sendBeacon() to send your last-second requests. To help discern which is the most appropriate for different circumstances, here are some things to consider:\n\n\n\nYou might go with fetch() + keepalive if:\n\n\n\nYou need to easily pass custom headers with the request.You want to make a GET request to a service, rather than a POST.You’re supporting older browsers (like IE) and already have a fetch polyfill being loaded.\n\n\n\nBut sendBeacon() might be a better choice if:\n\n\n\nYou’re making simple service requests that don’t need much customization.You prefer the cleaner, more elegant API.You want to guarantee that your requests don’t compete with other high-priority requests being sent in the application.\n\n\n\nAvoid repeating my mistakes\n\n\n\nThere’s a reason I chose to do a deep dive into the nature of how browsers handle in-process requests as a page is terminated. A while back, my team saw a sudden change in the frequency of a particular type of analytics log after we began firing the request just as a form was being submitted. The change was abrupt and significant — a ~30% drop from what we had been seeing historically. \n\n\n\nDigging into the reasons this problem arose, as well as the tools that are available to avoid it again, saved the day. So, if anything, I’m hoping that understanding the nuances of these challenges help someone avoid some of the pain we ran into. Happy logging!\n\nReliably Send an HTTP Request as a User Leaves a Page originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-22T15:24:01.000Z",
      "date_modified": "2022-02-22T15:24:01.000Z",
      "_plugin": {
        "pageFilename": "c35f077ae3cba143c0b2148ca20a0db97a766c94b5699e6f78376de0fb8ce9bc.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363766",
      "url": "https://css-tricks.com/css-cascade-layers/",
      "title": "A Complete Guide to CSS Cascade Layers",
      "summary": "This is your complete guide to CSS cascade layers, a CSS feature that allows us to define explicit contained layers of specificity, so that we have full control over which styles take priority in a project without relying on specificity …\n\nA Complete Guide to CSS Cascade Layers originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>This is your complete guide to CSS cascade layers, a CSS feature that allows us to define explicit contained layers of specificity, so that we have full control over which styles take priority in a project without relying on specificity hacks or <code>!important</code>. This guide is intended to help you fully understand what cascade layers are for, how and why you might choose to use them, the current levels of support, and the syntax of how you use them.</p>\n\n\n\n<span id=\"more-363766\"></span>\n\n\n<h2 class=\"simpletoc-title\">Table of Contents</h2><ul class=\"simpletoc-list\"   >\n<li>\n<a  href=\"#quick-example\">Quick example</a></li><li>\n<a  href=\"#introduction-what-are-cascade-layers\">Introduction: what are cascade layers?</a></li><li>\n<a  href=\"#where-do-layers-fit-in-the-cascade\">Where do layers fit in the cascade?</a></li><li>\n<a  href=\"#important-origins-context-and-layers-are-reversed\">!important origins, context, and layers are reversed!</a></li><li>\n<a  href=\"#establishing-a-layer-order\">Establishing a layer order</a></li><li>\n<a  href=\"#syntax-working-with-cascade-layers\">Syntax: Working with cascade layers</a></li><li>\n<a  href=\"#use-cases-when-would-i-want-to-use-cascade-layers\">Use cases: When would I want to use cascade layers?</a></li><li>\n<a  href=\"#test-your-knowledge-which-style-wins\">Test your knowledge: Which style wins?</a></li><li>\n<a  href=\"#debugging-layer-conflicts-in-browser-developer-tools\">Debugging layer conflicts in browser developer tools</a></li><li>\n<a  href=\"#browser-support-and-fallbacks\">Browser support and fallbacks</a></li><li>\n<a  href=\"#more-resources\">More resources</a></li></ul>\n</li></ul>\n\n<h3 id=\"quick-example\">Quick example</h3>\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css ticss-a8840c73\" data-line=\"\"><code markup=\"tt\">/* establish a layer order up-front, from lowest to highest priority */\n@layer reset, defaults, patterns, components, utilities, overrides;\n\n/* import stylesheets into a layer (dot syntax represents nesting) */\n@import url('framework.css') layer(components.framework);\n\n/* add styles to layers */\n@layer utilities {\n  /* high layer priority, despite low specificity */\n  [data-color='brand'] { \n    color: var(--brand, rebeccapurple);\n  }\n}\n\n@layer defaults {\n  /* higher specificity, but lower layer priority */\n  a:any-link { color: maroon; }\n}\n\n/* un-layered styles have the highest priority */\na {\n  color: mediumvioletred;\n}</code></pre>\n\n\n<h3 id=\"introduction-what-are-cascade-layers\">Introduction: what are cascade layers?</h3>\n\n\n<p>CSS Cascade Layers are intended to solve tricky problems in CSS. Let’s take a look at <strong>the main problem</strong> and how cascade layers aim to solve it.</p>\n\n\n<h4 id=\"problem-specificity-conflicts-escalate\">Problem: Specificity conflicts escalate</h4>\n\n\n<p>Many of us have been in situations where we want to override styles from elsewhere in our code (or a third-party tool), due to conflicting selectors. And over the years, authors have developed a number of “methodologies” and “best practices” to avoid these situations — such as “only using a single class” for all selectors. These rules are usually more about avoiding the cascade, rather than <a href=\"https://css-tricks.com/dont-fight-the-cascade-control-it/\">putting it to use</a>.</p>\n\n\n\n<p>Managing cascade conflicts and selector specificity has often been considered one of the harder — or at least more confusing — aspects of CSS. That may be partly because few other languages rely on a cascade as their central feature, but it’s also true that the original cascade relies heavily on <em>heuristics</em> (an educated-guess or assumption built into the code) rather than providing direct and explicit control to web authors.</p>\n\n\n\n<p><dfn>Selector specificity</dfn>, for example — our primary interaction with the cascade — is based on the assumption that more narrowly targeted styles (like IDs that are only used once) are likely more important than more generic and reusable styles (like classes and attributes). That is to say: how <em>specific</em> the selector is. That’s a good guess, but it’s not a totally reliable rule, and that causes some issues:</p>\n\n\n\n<ul><li>It combines the act of <em>selecting elements</em>, with the act of <em>prioritizing rule-sets</em>.</li><li>The simplest way to ‘fix’ a conflict with specificity is to escalate the problem by adding otherwise unnecessary selectors, or (gasp) <a href=\"https://css-tricks.com/when-using-important-is-the-right-choice/\">throwing the</a> <a href=\"https://css-tricks.com/when-using-important-is-the-right-choice/\"><code>!important</code> hand-grenade</a>.</li></ul>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.overly#powerful .framework.widget {\n  color: maroon;\n}\n\n.my-single_class { /* add some IDs to this ??? */\n  color: rebeccapurple; /* add !important ??? */\n}</code></pre>\n\n\n<h4 id=\"solution-cascade-layers-provide-control\">Solution: cascade layers provide control</h4>\n\n\n<p><dfn>Cascade layers</dfn> give CSS authors more direct control over the cascade so we can build more intentionally cascading systems without relying as much on heuristic assumptions that are tied to selection.</p>\n\n\n\n<p>Using the <code>@layer</code> at-rule and layered <code>@import</code>s, we can establish our own <em>layers of the cascade</em> — building from low-priority styles like resets and defaults, through themes, frameworks, and design systems, up to highest-priority styles, like components, utilities, and overrides. Specificity is still applied to conflicts <em>within each layer</em>, but conflicts between layers are always resolved by using the higher-priority layer styles.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer framework {\n  .overly#powerful .framework.widget {\n    color: maroon;\n  }\n}\n\n@layer site {\n  .my-single_class {\n    color: rebeccapurple;\n  }\n}</code></pre>\n\n\n\n<p>These layers are ordered and grouped so that they don’t escalate in the same way that specificity and importance can. Cascade layers aren’t cumulative like selectors. Adding <em>more layers</em> doesn’t make something <em>more important</em>. They’re also not binary like importance — suddenly jumping to the top of a stack — or numbered like <code>z-index</code>, where we have to guess a big number (<code>z-index:</code> <code>9999999</code>?). In fact, by default, layered styles are <em>less important</em> than un-layered styles.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer defaults {\n  a:any-link { color: maroon; }\n}\n\n/* un-layered styles have the highest priority */\na {\n  color: mediumvioletred;\n}</code></pre>\n\n\n<h3 id=\"where-do-layers-fit-in-the-cascade\">Where do layers fit in the cascade?</h3>\n\n\n<p>The cascade is a series of steps (an algorithm) for resolving conflicts between styles.</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html { --button: teal; }\nbutton { background: rebeccapurple !important; }\n.warning { background: maroon; }</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button class=\"warning\" style=\"background: var(--button);\">\n  what color background?\n&lt;/button></code></pre>\n</div>\n</div>\n\n\n\n<p>With the addition of cascade layers, those steps are:</p>\n\n\n\n<img src=\"https://css-tricks.com/wp-content/uploads/2022/02/layers-tall-outlines2.svg\" alt=\"Illustration of the various specificity levels of the CSS cascade and where CSS Cascade Layers fit in it.\" width=\"650\">\n\n\n\n<div style=\"height:26px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n\n\n\n<p><em>Selector specificity</em> is only one small part of the cascade, but it’s also the step we interact with most, and is often used to refer more generally to overall <em>cascade priority</em>. People might say that the <code>!important</code> flag or the <code>style</code> attribute “adds specificity” — a quick way of expressing that the style becomes higher priority in the cascade. Since cascade layers have been added directly above specificity, it’s reasonable to think about them in a similar way: one step more powerful than ID selectors.</p>\n\n\n\n<p>However, CSS Cascade Layers also make it more essential that we fully understand the role of <code>!important</code> in the cascade — not just as a tool for “increasing specificity” but as a system for balancing concerns.</p>\n\n\n<h3 id=\"important-origins-context-and-layers-are-reversed\"><code>!important</code> origins, context, and layers are reversed!</h3>\n\n\n<p>As web authors, we often think of <code>!important</code> as a way of increasing specificity, to override inline styles or highly specific selectors. That works OK in most cases (if you’re OK with the escalation) but it leaves out the primary purpose of <em>importance</em> as a feature in the overall cascade.</p>\n\n\n\n<p>Importance isn’t there to simply increase power — but to balance the power between various competing concerns.</p>\n\n\n<h4 id=\"important-origins\">Important origins</h4>\n\n\n<p>It all starts with <dfn>origins</dfn>, where a style comes from in the web ecosystem. There are three basic origins in CSS:</p>\n\n\n\n<ul><li>The <strong>browser</strong> (or user agent)</li><li>The <strong>user</strong> (often via browser preferences)</li><li>Web <strong>authors</strong> (that’s us!)</li></ul>\n\n\n\n<p>Browsers provide readable defaults for all the elements, and then users set their preferences, and then we (authors) provide the intended design for our web pages. So, by default, browsers have the lowest priority, user preferences override the browser defaults, and we’re able to override everyone.</p>\n\n\n\n<p>But the creators of CSS were very clear that we should not actually have the final word:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If conflicts arise <strong>the user should have the last word</strong>, but one should also allow the author to attach style hints.</p><cite>— Håkon Lie (emphasis added)</cite></blockquote>\n\n\n\n<p>So <em>importance</em> provides a way for the browser and users to re-claim their priority when it matters most. When the <code>!important</code> flag is added to a style, three new layers are created — and the order is reversed!</p>\n\n\n\n<ol><li><code>!important</code> browser styles (most powerful)</li><li><code>!important</code> user preferences</li><li><code>!important</code> author styles</li><li>normal author styles</li><li>normal user preferences</li><li>normal browser styles (least powerful)</li></ol>\n\n\n\n<p>For us, adding <code>!important</code> doesn’t change much — our important styles are pretty close to our normal styles — but for the browser and user it’s a very powerful tool for regaining control. Browser default style sheets include a number of important styles that it would be impossible for us to override, such as:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">iframe:fullscreen {\n  /* iframes in full-screen mode don't show a border. */\n  border: none !important;\n  padding: unset !important;\n}</code></pre>\n\n\n\n<p>While most of the popular browsers have made it difficult to upload actual user stylesheets, they all offer user preferences: a graphic interface for establishing specific user styles. In that interface, there is always a checkbox available for users to choose if a site is allowed to override their preferences or not. This is the same as setting <code>!important</code> in a user stylesheet:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1320\" height=\"996\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643829199568_ScreenShot2022-02-02at12.11.33PM.jpg?resize=1320%2C996&#038;ssl=1\" alt=\"Screenshot of user font preferences.\" class=\"wp-image-363777\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643829199568_ScreenShot2022-02-02at12.11.33PM.jpg?w=1320&amp;ssl=1 1320w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643829199568_ScreenShot2022-02-02at12.11.33PM.jpg?resize=300%2C226&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643829199568_ScreenShot2022-02-02at12.11.33PM.jpg?resize=1024%2C773&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643829199568_ScreenShot2022-02-02at12.11.33PM.jpg?resize=768%2C579&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643829199568_ScreenShot2022-02-02at12.11.33PM.jpg?resize=1000%2C755&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h4 id=\"important-context\">Important context</h4>\n\n\n<p>The same basic logic is applied to <em>context</em> in the cascade. By default, styles from the host document (light DOM) override styles from an embedded context (shadow DOM). However, adding <code>!important</code> reverses the order:</p>\n\n\n\n<ol><li><code>!important</code> shadow context (most powerful)</li><li><code>!important</code> host context</li><li>normal host context</li><li>normal shadow context (least powerful)</li></ol>\n\n\n\n<p>Important styles that come from inside a shadow context override important styles defined by the host document. Here’s an <code>odd-bird</code> <a href=\"https://css-tricks.com/an-introduction-to-web-components/\">custom element</a> with some styles written in the element template (shadow DOM), and some styles in the host page (light DOM) stylesheet:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwjRrEE\" src=\"//codepen.io/anon/embed/RwjRrEE?height=450&amp;theme-id=1&amp;slug-hash=RwjRrEE&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwjRrEE\" title=\"CodePen Embed RwjRrEE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Both <code>color</code> declarations have normal importance, and so the host page <code>mediumvioletred</code> takes priority. But the <code>font-family</code> declarations are flagged <code>!important</code>, giving advantage to the shadow-context, where <code>fantasy</code> is defined.</p>\n\n\n<h4 id=\"important-layers\">Important layers</h4>\n\n\n<p>Cascade layers work the same way as both origins and context, with the important layers in reverse-order. The only difference is that layers make that behavior much more noticeable.</p>\n\n\n\n<p>Once we start using cascade layers, we will need to be much more cautious and intentional about how we use <code>!important</code>. It’s no longer a quick way to jump to the top of the priorities — but an integrated part of our cascade layering; a way for lower layers to <em>insist</em> that some of their styles are essential.</p>\n\n\n\n<p>Since cascade layers are customizable, there’s no pre-defined order. But we can imagine starting with three layers:</p>\n\n\n\n<ol><li>utilities (most powerful)</li><li>components</li><li>defaults (least powerful)</li></ol>\n\n\n\n<p>When styles in those layers are marked as important, they would generate three new, reversed important layers:</p>\n\n\n\n<ol><li><code>!important</code> defaults (most powerful)</li><li><code>!important</code> components</li><li><code>!important</code> utilities</li><li>normal utilities</li><li>normal components</li><li>normal defaults (least powerful)</li></ol>\n\n\n\n<p>In this example, the color is defined by all three normal layers, and the <code>utilities</code> layer wins the conflict, applying the <code>maroon</code> color, as the <code>utilities</code> layer has a higher priority in <code>@layers</code>. But notice that the <code>text-decoration</code> property is marked <code>!important</code> in both the <code>defaults</code> and <code>components</code> layers, where important <code>defaults</code> take priority, applying the underline declared by <code>defaults</code>:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdqEEzB\" src=\"//codepen.io/anon/embed/mdqEEzB?height=450&amp;theme-id=1&amp;slug-hash=mdqEEzB&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdqEEzB\" title=\"CodePen Embed mdqEEzB\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"establishing-a-layer-order\">Establishing a layer order</h3>\n\n\n<p>We can create any number of layers and name them or group them in various ways. But the most important thing to do is to make sure our layers are applied in the right order of priority.</p>\n\n\n\n<p>A single layer can be used multiple times throughout the codebase — cascade layers stack in the order they <em>first appear</em>. The first layer encountered sits at the bottom (least powerful), and the last layer at the top (most powerful). But then, above that, <strong>un-layered styles have the highest priority</strong>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer layer-1 { a { color: red; } }\n@layer layer-2 { a { color: orange; } }\n@layer layer-3 { a { color: yellow; } }\n/* un-layered */ a { color: green; }</code></pre>\n\n\n\n<ol><li>un-layered styles (most powerful)</li><li>layer-3</li><li>layer-2</li><li>layer-1 (least powerful)</li></ol>\n\n\n\n<p>Then, as discussed above, any important styles are applied in a reverse order:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer layer-1 { a { color: red !important; } }\n@layer layer-2 { a { color: orange !important; } }\n@layer layer-3 { a { color: yellow !important; } }\n/* un-layered */ a { color: green !important; }</code></pre>\n\n\n\n<ol><li><code>!important</code> layer-1 (most powerful)</li><li><code>!important</code> layer-2</li><li><code>!important</code> layer-3</li><li><code>!important</code> un-layered styles</li><li>normal un-layered styles</li><li>normal layer-3</li><li>normal layer-2</li><li>normal layer-1 (least powerful)</li></ol>\n\n\n\n<p>Layers can also be grouped, allowing us to do more complicated sorting of top-level and nested layers:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer layer-1 { a { color: red; } }\n@layer layer-2 { a { color: orange; } }\n@layer layer-3 {\n  @layer sub-layer-1 { a { color: yellow; } }\n  @layer sub-layer-2 { a { color: green; } }\n  /* un-nested */ a { color: blue; }\n}\n/* un-layered */ a { color: indigo; }</code></pre>\n\n\n\n<ol><li>un-layered styles (most powerful)</li><li>layer-3<ol><li>layer-3 un-nested</li><li>layer-3 sub-layer-2</li><li>layer-3 sub-layer-1</li></ol></li><li>layer-2</li><li>layer-1 (least powerful)</li></ol>\n\n\n\n<p class=\"is-style-explanation\">Grouped layers always stay together in the final layer order (for example, sub-layers of layer-3 will all be next to each other), but this otherwise behaves the same as if the list was “flattened” — turning this into a single six-item list. When reversing <code>!important</code> layer order, the entire list flattened is reversed.</p>\n\n\n\n<p>But layers don’t have to be defined once in a single location. We give them names so that layers can be defined in one place (to establish layer order), and then we can append styles to them from anywhere:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* describe the layer in one place */\n@layer my-layer;\n\n/* append styles to it from anywhere */\n@layer my-layer { a { color: red; } }</code></pre>\n\n\n\n<p>We can even define a whole ordered list of layers in a single declaration:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer one, two, three, four, five, etc;</code></pre>\n\n\n\n<p>This makes it possible for the author of a site to have final say over the layer order. By providing a layer order up-front, before any third party code is imported, the order can be established and rearranged in one place without worrying about how layers are used in any third-party tool.</p>\n\n\n<h3 id=\"syntax-working-with-cascade-layers\">Syntax: Working with cascade layers</h3>\n\n\n<p>Let’s take a look at the syntax!</p>\n\n\n<h4 id=\"ordersetting-layer-statements\">Order-setting <code>@layer</code> statements</h4>\n\n\n<p>Since layers are stacked in the order they are defined, it’s important that we have a tool for establishing that order all in one place!</p>\n\n\n\n<p>We can use <code>@layer</code> statements to do that. The syntax is:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer &lt;layer-name>#;</code></pre>\n\n\n\n<p>That hash (<code>#</code>) means we can add as many layer names as we want in a comma-separated list:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer reset, defaults, framework, components, utilities;</code></pre>\n\n\n\n<p>That will establish the layer order:</p>\n\n\n\n<ol><li>un-layered styles (most powerful)</li><li>utilities</li><li>components</li><li>framework</li><li>defaults</li><li>reset (least powerful)</li></ol>\n\n\n\n<p>We can do this as many times as we want, but remember: what matters is the order each name <em>first appears</em>. So this will have the same result:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer reset, defaults, framework;\n@layer components, defaults, framework, reset, utilities;</code></pre>\n\n\n\n<p>The ordering logic will ignore the order of <code>reset</code>, <code>defaults</code>, and <code>framework</code> in the second <code>@layer</code> rule because those layers have already been established. This <code>@layer</code> list syntax doesn’t add any special magic to the layer ordering logic: layers are stacked based on <em>the order in which the layers first appear in your code</em>. In this case, <code>reset</code> appears first in the first <code>@layer</code> list. Any <code>@layer</code> statement that comes later can only append layer names to the list, <em>but can’t move layers that already exist</em>. This ensures that you can always control the final overall layer order from one location — at the very start of your styles.</p>\n\n\n\n<p>These layer-ordering statements are allowed at the top of a stylesheet, before the <code>@import</code> rule (but not between imports). We highly recommend using this feature to establish all your layers up-front in a single place so you always know where to look or make changes.</p>\n\n\n<h4 id=\"block-layer-rules\">Block <code>@layer</code> rules</h4>\n\n\n<p>The block version of the <code>@layer</code> rule only takes a single layer name, but then allows you to add styles to that layer:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer &lt;layer-name> {\n  /* styles added to the layer */\n}</code></pre>\n\n\n\n<p>You can put most things inside an <code>@layer</code> block — media queries, selectors and styles, support queries, etc. The only things you can’t put inside a layer block are things like charset, imports, and namespaces. But don’t worry, there is a syntax for importing styles into a layer.</p>\n\n\n\n<p>If the layer name hasn’t been established before, this layer rule will add it to the layer order. But if the name has been established, this allows you to add styles to existing layers from anywhere in the document — without changing the priority of each layer.</p>\n\n\n\n<p>If we’ve established our layer-order up-front with the layer statement rule, we no longer need to worry about the order of these layer blocks:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* establish the order up-front */\n@layer defaults, components, utilities;\n\n/* add styles to layers in any order */\n@layer utilities {\n  [hidden] { display: none; }\n}\n\n/* utilities will override defaults, based on established order */\n@layer defaults {\n  * { box-sizing: border-box; }\n  img { display: block; }\n}</code></pre>\n\n\n<h4 id=\"grouping-nested-layers\">Grouping (nested) layers</h4>\n\n\n<p>Layers can be grouped, by nesting layer rules:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer one {\n  /* sorting the sub-layers */\n  @layer two, three;\n\n  /* styles ... */\n  @layer three { /* styles ... */ }\n  @layer two { /* styles ... */ }\n}</code></pre>\n\n\n\n<p>This generates grouped layers that can be represented by joining the parent and child names with a period. That means the resulting sub-layers can also be accessed directly from outside the group:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* sorting nested layers directly */\n@layer one.two, one.three;\n\n/* adding to nested layers directly */\n@layer one.three { /* ... */ }\n@layer one.two { /* ... */ }</code></pre>\n\n\n\n<p>The rules of layer-ordering apply at each level of nesting. Any styles that are not further nested are considered “un-layered” in that context, and have priority over further nested styles:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer defaults {\n  /* un-layered defaults (higher priority) */\n  :any-link { color: rebeccapurple; }\n\n  /* layered defaults (lower priority) */\n  @layer reset {\n    a[href] { color: blue; }\n  }\n}</code></pre>\n\n\n\n<p>Grouped layers are also contained within their parent, so that the layer order does not intermix across groups. In this example, the top level layers are sorted first, and then the layers are sorted within each group:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer reset.type, default.type, reset.media, default.media;</code></pre>\n\n\n\n<p>Resulting in a layer order of:</p>\n\n\n\n<ul><li><em>un-layered</em> (most powerful)</li><li>default group<ul><li>default <em>un-layered</em></li><li>default.media</li><li>default.type</li></ul></li><li>reset group<ul><li>reset <em>un-layered</em></li><li>reset.media</li><li>reset.type</li></ul></li></ul>\n\n\n\n<p>Note that layer names are also scoped so that they don’t interact or conflict with similarly-named layers outside their nested context. Both groups can have distinct <code>media</code> sub-layers.</p>\n\n\n\n<p>This grouping becomes especially important when using <code>@import</code> or <code>&lt;link&gt;</code> to layer entire stylesheets. A third-party tool, like <a href=\"https://getbootstrap.com\" rel=\"noopener\">Bootstrap</a>, could use layers internally — but we can nest those layers into a shared <code>bootstrap</code> layer-group on import, to avoid potential layer-naming conflicts.</p>\n\n\n<h4 id=\"layering-entire-stylesheets-with-import-or-ltlinkgt\">Layering entire stylesheets with <code>@import</code> or <code>&lt;link&gt;</code></h4>\n\n\n<p>Entire stylesheets can be added to a layer using the new <code>layer()</code> function syntax with <code>@import</code> rules:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* styles imported into to the &lt;layer-name> layer */\n@import url('example.css') layer(&lt;layer-name>);</code></pre>\n\n\n\n<p>There is also a proposal to add a <code>layer</code> attribute in the HTML <code>&lt;link&gt;</code> element — although this is still under development, and <a href=\"https://css.oddbird.net/layers/guide/#assigning-layers-in-html-with-the-link-tag\" rel=\"noopener\">not yet supported anywhere</a>. This can be used to import third-party tools or component libraries, while grouping any internal layers together under a single layer name — or as a way of organizing layers into distinct files.</p>\n\n\n<h4 id=\"anonymous-unnamed-layers\">Anonymous (un-named) layers</h4>\n\n\n<p><dfn>Layer names</dfn> are helpful as they allow us to access the same layer from multiple places for sorting or combining layer blocks — but they are not required.</p>\n\n\n\n<p>It’s possible to create <em>anonymous</em> (un-named) layers using the block layer rule:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer { /* ... */ }\n@layer { /* ... */ }</code></pre>\n\n\n\n<p>Or using the import syntax, with a <code>layer</code> keyword in place of the <code>layer()</code> function:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* styles imported into to a new anonymous layer */\n@import url('../example.css') layer;</code></pre>\n\n\n\n<p>Each anonymous layer is unique, and added to the layer order where it is encountered. Anonymous layers can’t be referenced from other layer rules for sorting or appending more styles.</p>\n\n\n\n<p>These should probably be used sparingly, but there might be a few use cases:</p>\n\n\n\n<ul><li>Projects could ensure that all styles for a given layer are required to be located in a single place.</li><li>Third-party tools could “hide” their internal layering inside anonymous layers so that they don’t become part of the tool’s public API.</li></ul>\n\n\n<h4 id=\"reverting-values-to-the-previous-layer\">Reverting values to the previous layer</h4>\n\n\n<p>There are several ways that we can use to &#8220;revert&#8221; a style in the cascade to a previous value, defined by a lower priority origin or layer. That includes a number of existing global CSS values, and a new <code>revert-layer</code> keyword that will also be global (works on any property).</p>\n\n\n<h5 id=\"context-existing-global-cascade-keywords\">Context: Existing global cascade keywords*</h5>\n\n\n<p>CSS has several <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/all#values\" rel=\"noopener\">global keywords</a> which can be used on any property to help roll-back the cascade in various ways.</p>\n\n\n\n<ul><li><code><strong>initial</strong></code> sets a property to the <em>specified</em> value before any styles (including browser defaults) are applied. This can be surprising as we often think of browser styles as the initial value — but, for example, the <code>initial</code> value of <code>display</code> is <code>inline</code>, no matter what element we use it on.</li><li><code><strong>inherit</strong></code> sets the property to apply a value from its parent element. This is the default for inherited properties, but can still be used to remove a previous value.</li><li><code><strong>unset</strong></code> acts as though simply removing all previous values — so that inherited properties once again <code>inherit</code>, while non-inherited properties return to their <code>initial</code> value.</li><li><code><strong>revert</strong></code> only removes values that we’ve applied in the author origin (i.e. the site styles). This is what we want in most cases, since it allows the browser and user styles to remain intact.</li></ul>\n\n\n<h5 id=\"new-the-revertlayer-keyword\">New: the <code>revert-layer</code> keyword</h5>\n\n\n<p>Cascade layers add a new global <code>revert-layer</code> keyword. It works the same as <code>revert</code>, but only removes values that we’ve applied in the current cascade layer. We can use that to roll back the cascade, and use whatever value was defined in the previous layers.</p>\n\n\n\n<p>In this example, the <code>no-theme</code> class removes any values set in the <code>theme</code> layer.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer default {\n  a { color: maroon; }\n}\n\n@layer theme {\n  a { color: var(--brand-primary, purple); }\n\n  .no-theme {\n    color: revert-layer;\n  }\n}</code></pre>\n\n\n\n<p>So a link tag with the <code>.no-theme</code> class will roll back to use the value set in the <code>default</code> layer. When <code>revert-layer</code> is used in un-layered styles, it behaves the same as <code>revert</code> — rolling back to the previous origin.</p>\n\n\n<h5 id=\"reverting-important-layers\">Reverting important layers</h5>\n\n\n<p>Things get interesting if we add <code>!important</code> to the <code>revert-layer</code> keyword. Because each layer has two distinct “normal” and “important” <a href=\"https://css.oddbird.net/layers/guide/#important-layers\" rel=\"noopener\">positions in the cascade</a>, this doesn’t simply change the priority of the declaration — it changes what layers are reverted.</p>\n\n\n\n<p>Let’s assume we have three layers defined, in a layer stack that looks like this:</p>\n\n\n\n<ol><li>utilities (most powerful)</li><li>components</li><li>defaults (least powerful)</li></ol>\n\n\n\n<p>We can flesh that out to include not just normal and important positions of each layer, but also un-layered styles, and animations:</p>\n\n\n\n<ol><li><code>!important</code> defaults (most powerful)</li><li><code>!important</code> components</li><li><code>!important</code> utilities</li><li><code>!important</code> un-layered styles</li><li>CSS animations</li><li>normal un-layered styles</li><li>normal utilities</li><li>normal components</li><li>normal defaults (least powerful)</li></ol>\n\n\n\n<p>Now, when we use <code>revert-layer</code> in a normal layer (let’s use <code>utilities</code>) the result is fairly direct. We revert <em>only that layer</em>, while everything else applies normally:</p>\n\n\n\n<ol><li>&#x2705; <code>!important</code> defaults (most powerful)</li><li>&#x2705; <code>!important</code> components</li><li>&#x2705; <code>!important</code> utilities</li><li>&#x2705; <code>!important</code> un-layered styles</li><li>&#x2705; CSS animations</li><li>&#x2705; normal un-layered styles</li><li>&#x274c; normal utilities</li><li>&#x2705; normal components</li><li>&#x2705; normal defaults (least powerful)</li></ol>\n\n\n\n<p>But when we move that <code>revert-layer</code> into the important position, we revert both the normal and important versions <em>along with everything in-between</em>:</p>\n\n\n\n<ol><li>&#x2705; <code>!important</code> defaults (most powerful)</li><li>&#x2705; <code>!important</code> components</li><li>&#x274c; <code>!important</code> utilities</li><li>&#x274c; <code>!important</code> un-layered styles</li><li>&#x274c; CSS animations</li><li>&#x274c; normal un-layered styles</li><li>&#x274c; normal utilities</li><li>&#x2705; normal components</li><li>&#x2705; normal defaults (least powerful)</li></ol>\n\n\n<h3 id=\"use-cases-when-would-i-want-to-use-cascade-layers\">Use cases: When would I want to use cascade layers?</h3>\n\n\n<p>So what sort of situations might we find ourselves using cascade layers? Here are several examples of when cascade layers make a lot of sense, as well as others where they <em>do not</em> make a lot sense.</p>\n\n\n<h4 id=\"less-intrusive-resets-and-defaults\">Less intrusive resets and defaults</h4>\n\n\n<p>One of the clearest initial use cases would be to make low-priority defaults that are easy to override.</p>\n\n\n\n<p>Some resets have been doing this already by applying the <code>:where()</code> pseudo-class around each selector. <code>:where()</code> removes all specificity from the selectors it is applied to, which has the basic impact desired, but also some downsides:</p>\n\n\n\n<ul><li>It has to be applied to each selector individually</li><li>Conflicts inside the reset have to be resolved without specificity</li></ul>\n\n\n\n<p>Layers allow us to more simply wrap the entire reset stylesheet, either using the block <code>@layer</code> rule:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* reset.css */\n@layer reset {\n  /* all reset styles in here */\n}</code></pre>\n\n\n\n<p>Or when you import the reset:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* reset.css */\n@import url(reset.css) layer(reset);</code></pre>\n\n\n\n<p class=\"is-style-explanation\">Or both! Layers can be nested without changing their priority. This way, you can use a third-party reset, and ensure it gets added to the layer you want whether or not the reset stylesheet itself is written using layers internally.</p>\n\n\n\n<p>Since layered styles have a lower priority than default “un-layered” styles, this is a good way to start using cascade layers without re-writing your entire CSS codebase.</p>\n\n\n\n<p>The reset selectors still have specificity information to help resolve internal conflicts, without wrapping each individual selector — but you also get the desired outcome of a reset stylesheet that is easy to override.</p>\n\n\n<h4 id=\"managing-a-complex-css-architecture\">Managing a complex CSS architecture</h4>\n\n\n<p>As projects become larger and more complex, it can be useful to define clearer boundaries for naming and organizing CSS code. But the more CSS we have, the more potential we have for conflicts — especially from different parts of a system like a “theme” or a “component library” or a set of “utility classes.”</p>\n\n\n\n<p>Not only do we want these organized by function, but it can also be useful to organize them based on what parts of the system take priority in the case of a conflict. <a href=\"https://csswizardry.com/2018/11/itcss-and-skillshare/\" rel=\"noopener\">Harry Robert’s Inverted Triangle CSS</a> does a good job visualizing what those layers might contain.</p>\n\n\n\n<figure class=\"wp-block-image is-resized ticss-818e5b53\"><img loading=\"lazy\" src=\"https://paper-attachments.dropbox.com/s_B537A5BED99F493B05AC662831B02D71D0E588F0E159BD62B299D5F9F4173CB4_1644605716738_itcss-layers2.svg\" alt=\"\" width=\"650\" height=\"389\"/></figure>\n\n\n\n<p>In fact, the initial pitch for adding layers to the CSS cascade used the ITCSS methodology as a primary example, and a guide for developing the feature.</p>\n\n\n\n<p>There is no particular technique required for this, but it’s likely helpful to restrict projects to a pre-defined set of top-level layers and then extend that set with nested layers as appropriate.</p>\n\n\n\n<p>For example:</p>\n\n\n\n<ol><li><strong>low level reset</strong> and normalization styles</li><li><strong>element defaults</strong>, for basic typography and legibility</li><li><strong>themes</strong>, like light and dark modes</li><li><strong>re-usable patterns</strong> that might appear across multiple components</li><li><strong>layouts</strong> and larger page structures</li><li>individual <strong>components</strong></li><li><strong>overrides</strong> and <strong>utilities</strong></li></ol>\n\n\n\n<p>We can create that top-level layer stack at the very start of our CSS, with a single layer statement:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer\n  reset,\n  default,\n  themes,\n  patterns,\n  layouts,\n  components,\n  utilities;</code></pre>\n\n\n\n<p>The exact layers needed, and how you name those layers, might change from one project to the next.</p>\n\n\n\n<p>From there, we create even more detailed layer breakdowns. Maybe our components themselves have defaults, structures, themes, and utilities internally.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer components {\n  @layer defaults, structures, themes, utilities;\n}</code></pre>\n\n\n\n<p>Without changing the top-level structure, we now have a way to further layer the styles within each component.</p>\n\n\n<h4 id=\"using-thirdparty-tools-and-frameworks\">Using third-party tools and frameworks</h4>\n\n\n<p>Integrating third-party CSS with a project is one of the most common places to run into cascade issues. Whether we’re using a shared reset like Normalizer or CSS Remedy, a generic design system like Material Design, a framework like Bootstrap, or a utility toolkit like Tailwind — we can’t always control the selector specificity or importance of all the CSS being used on our sites. Sometimes, this even extends to internal libraries, design systems, and tools managed elsewhere in an organization.</p>\n\n\n\n<p>As a result, we often have to structure our internal CSS around the third-party code, or escalate conflicts when they come up — with artificially high specificity or <code>!important</code> flags. And then we have to maintain those hacks over time, adapting to upstream changes.</p>\n\n\n\n<p>Cascade layers give us a way to slot third-party code into the cascade of any project exactly where we want it to live — no matter how selectors are written internally. Depending on the type of library we’re using, we might do that in various ways. Let’s start with a basic layer-stack, working our way up from resets to utilities:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer reset, type, theme, components, utilities;</code></pre>\n\n\n\n<p>And then we can incorporate some tools…</p>\n\n\n<h5 id=\"using-a-reset\">Using a reset</h5>\n\n\n<p>If we’re using a tool like <a href=\"https://css-tricks.com/css-remedy/\">CSS Remedy</a>, we might also have some reset styles of our own that we want to include. Let’s import CSS Remedy into a sub-layer of <code>reset</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@import url('remedy.css') layer(reset.remedy);</code></pre>\n\n\n\n<p>Now we can add our own reset styles to the <code>reset</code> layer, without any further nesting (unless we want it). Since styles directly in <code>reset</code> will override any further nested styles, we can be sure our styles will always take priority over CSS Remedy if there’s a conflict — no matter what changes in a new release:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@import url('remedy.css') layer(reset.remedy);\n\n@layer reset {\n  :is(ol, ul)[role='list'] {\n    list-style: none;\n    padding-inline-start: 0;\n  }\n}</code></pre>\n\n\n\n<p>And since the <code>reset</code> layer is at the bottom of the stack, the rest of the CSS in our system will override both Remedy, and our own local reset additions.</p>\n\n\n<h5 id=\"using-utility-classes\">Using utility classes</h5>\n\n\n<p>At the other end of our stack, “utility classes” in CSS can be a useful way to reproduce common patterns (like additional context for screen readers) in a broadly-applicable way. Utilities tend to break the specificity heuristic, since we want them defined broadly (resulting in a low specificity), but we also generally want them to “win” conflicts.</p>\n\n\n\n<p>By having a <code>utilities</code> layer at the top of our layer stack, we can make that possible. We can use that in a similar way to the reset example, both loading external utilities into a sub-layer, and providing our own:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@import url('tailwind.css') layer(utilities.tailwind);\n\n@layer utilities {\n  /* from https://kittygiraudel.com/snippets/sr-only-class/ */\n  /* but with !important removed from the properties */\n  .sr-only {\n    border: 0;\n    clip: rect(1px, 1px, 1px, 1px);\n    -webkit-clip-path: inset(50%);\n    clip-path: inset(50%);\n    height: 1px;\n    overflow: hidden;\n    margin: -1px;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n    white-space: nowrap;\n  }\n}</code></pre>\n\n\n<h5 id=\"using-design-systems-and-component-libraries\">Using design systems and component libraries</h5>\n\n\n<p>There are a lot of CSS tools that fall somewhere in the middle of our layer stack — combining typography defaults, themes, components, and other aspects of a system.</p>\n\n\n\n<p>Depending on the particular tool, we might do something similar to the reset and utility examples above — but there are a few other options. A highly integrated tool might deserve a top-level layer:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer reset, bootstrap, utilities;\n@import url('bootstrap.css') layer(bootstrap);</code></pre>\n\n\n\n<p>If these tools start to provide layers as part of their public API, we could also break it down into parts — allowing us to intersperse our code with the library:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@import url('bootstrap/reset.css') layer(reset.bootstrap);\n@import url('bootstrap/theme.css') layer(theme.bootstrap);\n@import url('bootstrap/components.css') layer(components.bootstrap);\n\n@layer theme.local {\n  /* styles here will override theme.bootstrap */\n  /* but not interfere with styles from components.bootstrap */\n}</code></pre>\n\n\n<h4 id=\"using-layers-with-existing-unlayered-importantfilled-frameworks\">Using layers with existing (un-layered, !important-filled) frameworks</h4>\n\n\n<p>As with any major language change, there’s going to be an adjustment period when CSS Cascade Layers become widely adopted. What happens if your team is ready to start using layers next month, but your favorite framework decides to wait another three years before they switch over to layered styles? Many frameworks will likely still use <code>!important</code> more often than we&#8217;d like! With <code>!important</code> layers reversed, that’s not ideal.</p>\n\n\n\n<p>Still, layers can still help us solve the problem. We just have to get clever about it. We decide what layers we want for our project, and that means we can add layers above <em>and</em> also below the framework layers we create.</p>\n\n\n\n<p>For now, though, we can use a lower layer to override <code>!important</code> styles from the framework, and a higher layer to override normal styles. Something like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer framework.important, framework.bootstrap, framework.local;\n@import url('bootstrap.css') layer(framework.bootstrap);\n\n@layer framework.local {\n  /* most of our normal framework overrides can live here */\n}\n\n@layer framework.important {\n  /* add !important styles in a lower layer */\n  /* to override any !important framework styles */\n}</code></pre>\n\n\n\n<p>It still feels like a bit of a hack, but it helps move us in the right direction — towards a more structured cascade. Hopefully it’s a temporary fix.</p>\n\n\n<h4 id=\"designing-a-css-tool-or-framework\">Designing a CSS tool or framework</h4>\n\n\n<p>For anyone maintaining a CSS library, cascade layers can help with internal organization, and even become part of the developer API. By naming internal layers of a library, we can allow users of our framework to hook into those layers when customizing or overriding our provided styles.</p>\n\n\n\n<p>For example, Bootstrap could expose layers for their “reboot,” “grid,” and “utilities” — likely stacked in that order. Now a user can decide if they want to load those Bootstrap layers into different local layers:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@import url(bootstrap/reboot.css) layer(reset); /* reboot » reset.reboot */\n@import url(bootstrap/grid.css) layer(layout); /* grid » layout.grid */\n@import url(bootstrap/utils.css) layer(override); /* utils » override.utils */</code></pre>\n\n\n\n<p>Or the user might load them into a Bootstrap layer, with local layers interspersed:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer bs.reboot, bs.grid, bs.grid-overrides, bs.utils, bs.util-overrides;\n@import url('bootstrap-all.css') layer(bs);</code></pre>\n\n\n\n<p>It’s also possible to hide internal layering from users, when desired, by grouping any private/internal layers inside an anonymous (un-named) layer. Anonymous layers will get added to the layer order where they are encountered, but will not be exposed to users re-arranging or appending styles.</p>\n\n\n<h4 id=\"i-just-want-this-one-property-to-be-more-important\">I just want this one property to be more <code>!important</code></h4>\n\n\n<p>Counter to some expectations, layers don’t make it easy to quickly escalate a particular style so that it overrides another.</p>\n\n\n\n<p>If the majority of our styles are un-layered, then any new layer will be <em>de-prioritized</em> in relation to the default. We could do that to individual style blocks, but it would quickly become difficult to track.</p>\n\n\n\n<p>Layers are intended to be more foundational, not style-by-style, but establishing consistent patterns across a project. Ideally, if we’ve set that up right, we get the correct result by moving our style to the appropriate (and pre-defined) layer.</p>\n\n\n\n<div class=\"wp-container-621eb477cd179 wp-block-group ticss-27d72f02 has-white-color has-text-color has-background\" style=\"background:linear-gradient(135deg,rgb(31,31,31) 0%,rgb(84,88,93) 100%)\"><div class=\"wp-block-group__inner-container\">\n<p>If the majority of our styles already fall into well-defined layers, we can always consider adding a new highest-power layer at the top of a given stack, or using un-layered styles to override the layers. We might even consider having a <code>debug</code> layer at the top of the stack, for doing exploratory work outside of production.</p>\n</div></div>\n\n\n\n<p>But adding new layers on-the-fly can defeat the organizational utility of this feature, and should be used carefully. It’s best to ask: <em>Why should this style override the other?</em></p>\n\n\n\n<p>If the answer has to do with one <em>type of style</em> always overriding another type, layers are probably the right solution. That might be because we’re overriding styles that come from a place we don’t control, or because we’re writing a utility, and it should move into our <code>utilities</code> layer. If the answer has to do with more targeted styles overriding less targeted styles, we might consider making the selectors reflect that specificity.</p>\n\n\n\n<p>Or, on rare occasions, we might even have styles that really are <em>important</em> — the feature simply doesn’t work if you override this particular style. We might say adding <code>display: none</code> to the <code>[hidden]</code> attribute belongs in our lowest-priority reset, but should still be hard to override. In that case, <code>!important</code> really is the right tool for the job:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer reset {\n  [hidden] { display: none !important; }\n}</code></pre>\n\n\n<h4 id=\"scoping-and-namespacing-styles-nope\">Scoping and name-spacing styles? Nope!</h4>\n\n\n<p>Cascade layers are clearly an organizational tool, and one that ‘captures’ the impact of selectors, especially when they conflict. So it can be tempting at first glance to see them as a solution for managing scope or name-spacing.</p>\n\n\n\n<p>A common first-instinct is to create a layer for each component in a project — hoping that will ensure (for example) that <code>.post-title</code> is only applied inside a <code>.post</code>.</p>\n\n\n\n<p>But cascade conflicts are not the same as naming conflicts, and layers aren’t particularly well designed for this type of scoped organization. Cascade layers don’t constrain how selectors match or apply to the HTML, only how they cascade together. So unless we can be sure that component X <em>always</em> override component Y, individual component layers won’t help much. Instead, we’ll need to keep an eye on the <a href=\"https://www.w3.org/TR/css-cascade-6/\" rel=\"noopener\">proposed <code>@scope</code> spec</a> that is being developed.</p>\n\n\n\n<p>It can be useful to think of layers and component-scopes instead as overlapping concerns:</p>\n\n\n\n<figure class=\"wp-block-image size-large ticss-7bab32e4\"><img loading=\"lazy\" width=\"1024\" height=\"711\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/layers-scope-01.png?resize=1024%2C711&#038;ssl=1\" alt=\"An illustration showing how CSS Cascade Layers can be organized by scope, such as buttons, cards, and login layers that fall into component, theme, and default scopes.\" class=\"wp-image-364132\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/layers-scope-01.png?resize=1024%2C711&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/layers-scope-01.png?resize=300%2C208&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/layers-scope-01.png?resize=768%2C533&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/layers-scope-01.png?resize=1000%2C694&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/layers-scope-01.png?w=1164&amp;ssl=1 1164w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><dfn>Scopes</dfn> describe <em>what</em> we are styling, while layers describe <em>why</em> we are styling. We can also think of layers as representing <em>where the style comes from</em>, while scopes represent <em>what the style will attach to</em>.</p>\n\n\n<h3 id=\"test-your-knowledge-which-style-wins\">Test your knowledge: Which style wins?</h3>\n\n\n<p>For each situation, assume this paragraph:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;p id=\"intro\">Hello, World!&lt;/p></code></pre>\n\n\n<h4 id=\"question-1\">Question 1</h4>\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer ultra-high-priority {\n  #intro {\n    color: red;\n  }\n}\n\np {\n  color: green;\n}</code></pre>\n\n\n\n<details >\n  <summary>\n          What color is the paragraph?      </summary>\n  \n\n<p>Despite the layer having a name that <em>sounds pretty important</em>, un-layered styles have a higher priority in the cascade. So the paragraph will be <code>green</code>.</p>\n\n\n</details>\n\n<h4 id=\"question-2\">Question 2</h4>\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer ren, stimpy;\n\n@layer ren {\n  p { color: red !important; }\n}\n\np { color: green; }\n\n@layer stimpy {\n  p { color: blue !important; }\n}</code></pre>\n\n\n\n<details >\n  <summary>\n          What color is the paragraph?      </summary>\n  \n\n<p>Our normal layer order is established at the start — <code>ren</code> at the bottom, then <code>stimpy</code>, then (as always) un-layered styles at the top. But these styles aren’t all <code>normal</code>, some of them are important. Right away, we can filter down to just the <code>!important</code> styles, and ignore the unimportant <code>green</code>. Remember that ‘origins and importance’ are the first step of the cascade, before we even take layering into account.</p>\n\n\n\n<p>That leaves us with two important styles, both in layers. Since our important layers are reversed, <code>ren</code> moves to the top, and <code>stimpy</code> to the bottom. The paragraph will be <code>red</code>.</p>\n\n\n</details>\n\n<h4 id=\"question-3\">Question 3</h4>\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer Montagues, Capulets, Verona;\n\n@layer Montagues.Romeo { #intro { color: red; } }\n@layer Montagues.Benvolio { p { color: orange; } }\n\n@layer Capulets.Juliet { p { color: yellow; } }\n@layer Verona { * { color: blue; } }\n@layer Capulets.Tybalt { #intro { color: green; } }</code></pre>\n\n\n\n<details >\n  <summary>\n          What color is the paragraph?      </summary>\n  \n\n<p>All our styles are in the same origin and context, none are marked as important, and none of them are inline styles. We do have a broad range of selectors here, from a highly specific ID <code>#intro</code> to a zero specificity universal <code>*</code> selector. But layers are resolved before we take specificity into account, so we can ignore the selectors for now.</p>\n\n\n\n<p>The primary layer order is established up front, and then sub-layers are added internally. But sub-layers are sorted along with their parent layer — meaning all the <code>Montagues</code> will have lowest priority, followed by all the <code>Capulets</code>, and then <code>Verona</code> has final say in the layer order. So we can immediately filter down to just the <code>Verona</code> styles, which take precedence. Even though the <code>*</code> selector has zero specificity, it will win.</p>\n\n\n\n<p>Be careful about putting universal selectors in powerful layers!</p>\n\n\n</details>\n\n<h3 id=\"debugging-layer-conflicts-in-browser-developer-tools\">Debugging layer conflicts in browser developer tools</h3>\n\n\n<p>Chrome, Safari, Firefox, and Edge browsers all have developer tools that allow you to inspect the styles being applied to a given element on the page. The styles panel of this element inspector will show applied selectors, sorted by their cascade priority (highest priority at the top), and then inherited styles below. Styles that are not being applied for any reason will generally be grayed out, or even crossed out — sometimes with additional information about <em>why</em> the style is not applied. This is the first place to look when debugging any aspect of the cascade, including layer conflicts.</p>\n\n\n\n<p>Safari Technology Preview and Firefox Nightly already show (and sort) cascade layers in this panel. This tooling is expected to role out in the stable versions at the same time as cascade layers. The layer of each selector is listed directly above the selector itself:</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\" style=\"flex-basis:35%\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1040\" height=\"770\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643914232341_ScreenShot2022-02-03at11.35.41AM.jpg?resize=1040%2C770&#038;ssl=1\" alt=\"Showing CSS Cascade Layers in Safari DevTools.\" class=\"wp-image-363787\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643914232341_ScreenShot2022-02-03at11.35.41AM.jpg?w=1040&amp;ssl=1 1040w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643914232341_ScreenShot2022-02-03at11.35.41AM.jpg?resize=300%2C222&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643914232341_ScreenShot2022-02-03at11.35.41AM.jpg?resize=1024%2C758&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643914232341_ScreenShot2022-02-03at11.35.41AM.jpg?resize=768%2C569&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643914232341_ScreenShot2022-02-03at11.35.41AM.jpg?resize=1000%2C740&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Safari</figcaption></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:65%\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1338\" height=\"608\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643914232366_ScreenShot2022-02-03at11.39.41AM.jpg?resize=1338%2C608&#038;ssl=1\" alt=\"Showing CSS Cascade Layers in FireFox DevTools.\" class=\"wp-image-363788\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643914232366_ScreenShot2022-02-03at11.39.41AM.jpg?w=1338&amp;ssl=1 1338w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643914232366_ScreenShot2022-02-03at11.39.41AM.jpg?resize=300%2C136&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643914232366_ScreenShot2022-02-03at11.39.41AM.jpg?resize=1024%2C465&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643914232366_ScreenShot2022-02-03at11.39.41AM.jpg?resize=768%2C349&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_7269BD7CFF110C0C4578DCFE42CFC0B66C7F29AA3E50D4ABC024C679BD62AAD8_1643914232366_ScreenShot2022-02-03at11.39.41AM.jpg?resize=1000%2C454&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Firefox</figcaption></figure>\n</div>\n</div>\n\n\n\n<p>Chrome/Edge are working on similar tools and expect to have them available in Canary (nightly) releases by the time cascade layers land in the stable release. We’ll make updates here as those tools change and improve.</p>\n\n\n<h3 id=\"browser-support-and-fallbacks\">Browser support and fallbacks</h3>\n\n\n<p>Cascade layers are (or will soon be) available by default in all the three major browser engines:</p>\n\n\n\n<ul><li>Chrome/Edge 99+</li><li>Firefox 97+</li><li>Safari (currently in the Technology Preview)</li></ul>\n\n\n\n<p>Since layers are intended as foundational building blocks of an entire CSS architecture, it is difficult to imagine building manual fallbacks in the same way you might for other CSS features. The fallbacks would likely involve duplicating large sections of code, with different selectors to manage cascade layering — or providing a much simpler fallback stylesheet.</p>\n\n\n<h4 id=\"query-feature-support-using-supports\">Query feature support using <code>@supports</code></h4>\n\n\n<p>There is a <a href=\"https://css-tricks.com/how-supports-works/\"><code>@supports</code> feature in CSS</a> that will allow authors to test for support of <code>@layer</code> and other at-rules:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@supports at-rule(@layer) {\n  /* code applied for browsers with layer support */\n}\n\n@supports not at-rule(@layer) {\n  /* fallback applied for browsers without layer support */\n}</code></pre>\n\n\n\n<p>However, it’s also not clear when this query itself will be supported in browsers.</p>\n\n\n<h4 id=\"assigning-layers-in-html-with-the-ltlinkgt-tag\">Assigning layers in HTML with the <code>&lt;link&gt;</code> tag</h4>\n\n\n<p>There is no official specification yet for a syntax to layer entire stylesheets from the html <code>&lt;link&gt;</code> tag, but there is a <a href=\"https://github.com/whatwg/html/issues/7540\" rel=\"noopener\">proposal being developed</a>. That proposal includes a new <code>layer</code> attribute which can be used to assign the styles to a named or anonymous layer:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- styles imported into to the &lt;layer-name> layer -->\n&lt;link rel=\"stylesheet\" href=\"example.css\" layer=\"&lt;layer-name>\">\n\n&lt;!-- styles imported into to a new anonymous layer -->\n&lt;link rel=\"stylesheet\" href=\"example.css\" layer></code></pre>\n\n\n\n<p>However, old browsers without support for the <code>layer</code> attribute will ignore it completely, and continue to load the stylesheet without any layering. The results could be pretty unexpected. So the proposal also extends the existing <code>media</code> attribute, so that it allows feature support queries in a <code>support()</code> function.</p>\n\n\n\n<p>That would allow us to make layered links conditional, based on support for layering:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;link rel=\"stylesheet\" layer=\"bootstrap\" media=\"supports(at-rule(@layer))\" href=\"bootstrap.css\"></code></pre>\n\n\n<h4 id=\"potential-polyfills-and-workarounds\">Potential polyfills and workarounds</h4>\n\n\n<p>The major browsers have all moved to an <a href=\"https://css-tricks.com/evergreen-does-not-mean-immediately-available/\">“evergreen” model</a> with updates pushed to users on a fairly short release cycle. Even Safari regularly releases new features in “patch” updates between their more rare-seeming major versions.</p>\n\n\n\n<p>That means we can expect browser support for these features to ramp up very quickly. For many of us, it may be reasonable to start using layers in only a few months, without much concern for old browsers.</p>\n\n\n\n<p>For others, it may take longer to feel comfortable with the native browser support. There are many other ways to <a href=\"https://css-tricks.com/dont-fight-the-cascade-control-it/\">manage the cascade</a>, using selectors, <a href=\"https://css-tricks.com/using-custom-property-stacks-to-tame-the-cascade/\">custom properties</a>, and other tools. It’s also theoretically possible to mimic (or polyfill) the basic behavior. There are people working on that polyfill, but it’s not clear when that will be ready either.</p>\n\n\n<h3 id=\"more-resources\">More resources</h3>\n\n\n<p>CSS Cascade Layers is still evolving but there is already a lot of resources, including documentation, articles, videos, and demos to help you get even more familiar with layers and how they work.</p>\n\n\n<h4 id=\"reference\">Reference</h4>\n\n\n<ul><li><a href=\"https://www.w3.org/TR/css-cascade-5/#layering\" rel=\"noopener\">Cascading &amp; Inheritance Level 5 Specification</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@layer\" rel=\"noopener\">MDN Documentation</a></li></ul>\n\n\n<h4 id=\"articles\">Articles</h4>\n\n\n<ul><li><a href=\"https://www.bram.us/2021/09/15/the-future-of-css-cascade-layers-css-at-layer/\" rel=\"noopener\">The Future of CSS: Cascade Layers (CSS <code>@layer</code>)</a> by Bramus Van Damme</li><li><a href=\"https://www.smashingmagazine.com/2022/01/introduction-css-cascade-layers/\" rel=\"noopener\">Getting Started With CSS Cascade Layers</a> by Stephanie Eckles, <em>Smashing Magazine</em></li><li><a href=\"https://developer.chrome.com/blog/cascade-layers/\" rel=\"noopener\">Cascade layers are coming to your browser</a> by Una Kravets, <em>Chrome Developers</em></li></ul>\n\n\n<h4 id=\"videos\">Videos</h4>\n\n\n<ul><li><a href=\"https://youtu.be/dS123IXPcJ0\" rel=\"noopener\">How does CSS !important actually work?</a> by Una Kravets</li><li><a href=\"https://youtu.be/ilrPpSQJb3U\" rel=\"noopener\">An overview of the new @layer and layer() CSS primitives</a> by Una Kravets</li><li><a href=\"https://www.youtube.com/watch?v=2wSckPwaC_A\" rel=\"noopener\">CSS Revert &amp; Revert-Layer Keywords</a> by Una Kravets</li></ul>\n\n\n<h4 id=\"demos\">Demos</h4>\n\n\n<ul><li><a href=\"https://codepen.io/collection/BNjmma\" rel=\"noopener\">Layers CodePen collection</a></li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-cascade-layers/\">A Complete Guide to CSS Cascade Layers</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "This is your complete guide to CSS cascade layers, a CSS feature that allows us to define explicit contained layers of specificity, so that we have full control over which styles take priority in a project without relying on specificity hacks or !important. This guide is intended to help you fully understand what cascade layers are for, how and why you might choose to use them, the current levels of support, and the syntax of how you use them.\n\n\n\n\n\n\nTable of Contents\n\nQuick example\nIntroduction: what are cascade layers?\nWhere do layers fit in the cascade?\n!important origins, context, and layers are reversed!\nEstablishing a layer order\nSyntax: Working with cascade layers\nUse cases: When would I want to use cascade layers?\nTest your knowledge: Which style wins?\nDebugging layer conflicts in browser developer tools\nBrowser support and fallbacks\nMore resources\n\n\nQuick example\n\n\n/* establish a layer order up-front, from lowest to highest priority */\n@layer reset, defaults, patterns, components, utilities, overrides;\n\n/* import stylesheets into a layer (dot syntax represents nesting) */\n@import url('framework.css') layer(components.framework);\n\n/* add styles to layers */\n@layer utilities {\n  /* high layer priority, despite low specificity */\n  [data-color='brand'] { \n    color: var(--brand, rebeccapurple);\n  }\n}\n\n@layer defaults {\n  /* higher specificity, but lower layer priority */\n  a:any-link { color: maroon; }\n}\n\n/* un-layered styles have the highest priority */\na {\n  color: mediumvioletred;\n}\n\n\nIntroduction: what are cascade layers?\n\n\nCSS Cascade Layers are intended to solve tricky problems in CSS. Let’s take a look at the main problem and how cascade layers aim to solve it.\n\n\nProblem: Specificity conflicts escalate\n\n\nMany of us have been in situations where we want to override styles from elsewhere in our code (or a third-party tool), due to conflicting selectors. And over the years, authors have developed a number of “methodologies” and “best practices” to avoid these situations — such as “only using a single class” for all selectors. These rules are usually more about avoiding the cascade, rather than putting it to use.\n\n\n\nManaging cascade conflicts and selector specificity has often been considered one of the harder — or at least more confusing — aspects of CSS. That may be partly because few other languages rely on a cascade as their central feature, but it’s also true that the original cascade relies heavily on heuristics (an educated-guess or assumption built into the code) rather than providing direct and explicit control to web authors.\n\n\n\nSelector specificity, for example — our primary interaction with the cascade — is based on the assumption that more narrowly targeted styles (like IDs that are only used once) are likely more important than more generic and reusable styles (like classes and attributes). That is to say: how specific the selector is. That’s a good guess, but it’s not a totally reliable rule, and that causes some issues:\n\n\n\nIt combines the act of selecting elements, with the act of prioritizing rule-sets.The simplest way to ‘fix’ a conflict with specificity is to escalate the problem by adding otherwise unnecessary selectors, or (gasp) throwing the !important hand-grenade.\n\n\n\n.overly#powerful .framework.widget {\n  color: maroon;\n}\n\n.my-single_class { /* add some IDs to this ??? */\n  color: rebeccapurple; /* add !important ??? */\n}\n\n\nSolution: cascade layers provide control\n\n\nCascade layers give CSS authors more direct control over the cascade so we can build more intentionally cascading systems without relying as much on heuristic assumptions that are tied to selection.\n\n\n\nUsing the @layer at-rule and layered @imports, we can establish our own layers of the cascade — building from low-priority styles like resets and defaults, through themes, frameworks, and design systems, up to highest-priority styles, like components, utilities, and overrides. Specificity is still applied to conflicts within each layer, but conflicts between layers are always resolved by using the higher-priority layer styles.\n\n\n\n@layer framework {\n  .overly#powerful .framework.widget {\n    color: maroon;\n  }\n}\n\n@layer site {\n  .my-single_class {\n    color: rebeccapurple;\n  }\n}\n\n\n\nThese layers are ordered and grouped so that they don’t escalate in the same way that specificity and importance can. Cascade layers aren’t cumulative like selectors. Adding more layers doesn’t make something more important. They’re also not binary like importance — suddenly jumping to the top of a stack — or numbered like z-index, where we have to guess a big number (z-index: 9999999?). In fact, by default, layered styles are less important than un-layered styles.\n\n\n\n@layer defaults {\n  a:any-link { color: maroon; }\n}\n\n/* un-layered styles have the highest priority */\na {\n  color: mediumvioletred;\n}\n\n\nWhere do layers fit in the cascade?\n\n\nThe cascade is a series of steps (an algorithm) for resolving conflicts between styles.\n\n\n\n\n\nhtml { --button: teal; }\nbutton { background: rebeccapurple !important; }\n.warning { background: maroon; }\n\n\n\n\n\n<button class=\"warning\" style=\"background: var(--button);\">\n  what color background?\n</button>\n\n\n\n\n\nWith the addition of cascade layers, those steps are:\n\n\n\n\n\n\n\n\n\n\n\nSelector specificity is only one small part of the cascade, but it’s also the step we interact with most, and is often used to refer more generally to overall cascade priority. People might say that the !important flag or the style attribute “adds specificity” — a quick way of expressing that the style becomes higher priority in the cascade. Since cascade layers have been added directly above specificity, it’s reasonable to think about them in a similar way: one step more powerful than ID selectors.\n\n\n\nHowever, CSS Cascade Layers also make it more essential that we fully understand the role of !important in the cascade — not just as a tool for “increasing specificity” but as a system for balancing concerns.\n\n\n!important origins, context, and layers are reversed!\n\n\nAs web authors, we often think of !important as a way of increasing specificity, to override inline styles or highly specific selectors. That works OK in most cases (if you’re OK with the escalation) but it leaves out the primary purpose of importance as a feature in the overall cascade.\n\n\n\nImportance isn’t there to simply increase power — but to balance the power between various competing concerns.\n\n\nImportant origins\n\n\nIt all starts with origins, where a style comes from in the web ecosystem. There are three basic origins in CSS:\n\n\n\nThe browser (or user agent)The user (often via browser preferences)Web authors (that’s us!)\n\n\n\nBrowsers provide readable defaults for all the elements, and then users set their preferences, and then we (authors) provide the intended design for our web pages. So, by default, browsers have the lowest priority, user preferences override the browser defaults, and we’re able to override everyone.\n\n\n\nBut the creators of CSS were very clear that we should not actually have the final word:\n\n\n\nIf conflicts arise the user should have the last word, but one should also allow the author to attach style hints.— Håkon Lie (emphasis added)\n\n\n\nSo importance provides a way for the browser and users to re-claim their priority when it matters most. When the !important flag is added to a style, three new layers are created — and the order is reversed!\n\n\n\n!important browser styles (most powerful)!important user preferences!important author stylesnormal author stylesnormal user preferencesnormal browser styles (least powerful)\n\n\n\nFor us, adding !important doesn’t change much — our important styles are pretty close to our normal styles — but for the browser and user it’s a very powerful tool for regaining control. Browser default style sheets include a number of important styles that it would be impossible for us to override, such as:\n\n\n\niframe:fullscreen {\n  /* iframes in full-screen mode don't show a border. */\n  border: none !important;\n  padding: unset !important;\n}\n\n\n\nWhile most of the popular browsers have made it difficult to upload actual user stylesheets, they all offer user preferences: a graphic interface for establishing specific user styles. In that interface, there is always a checkbox available for users to choose if a site is allowed to override their preferences or not. This is the same as setting !important in a user stylesheet:\n\n\n\n\n\n\nImportant context\n\n\nThe same basic logic is applied to context in the cascade. By default, styles from the host document (light DOM) override styles from an embedded context (shadow DOM). However, adding !important reverses the order:\n\n\n\n!important shadow context (most powerful)!important host contextnormal host contextnormal shadow context (least powerful)\n\n\n\nImportant styles that come from inside a shadow context override important styles defined by the host document. Here’s an odd-bird custom element with some styles written in the element template (shadow DOM), and some styles in the host page (light DOM) stylesheet:\n\n\n\nCodePen Embed Fallback\n\n\n\nBoth color declarations have normal importance, and so the host page mediumvioletred takes priority. But the font-family declarations are flagged !important, giving advantage to the shadow-context, where fantasy is defined.\n\n\nImportant layers\n\n\nCascade layers work the same way as both origins and context, with the important layers in reverse-order. The only difference is that layers make that behavior much more noticeable.\n\n\n\nOnce we start using cascade layers, we will need to be much more cautious and intentional about how we use !important. It’s no longer a quick way to jump to the top of the priorities — but an integrated part of our cascade layering; a way for lower layers to insist that some of their styles are essential.\n\n\n\nSince cascade layers are customizable, there’s no pre-defined order. But we can imagine starting with three layers:\n\n\n\nutilities (most powerful)componentsdefaults (least powerful)\n\n\n\nWhen styles in those layers are marked as important, they would generate three new, reversed important layers:\n\n\n\n!important defaults (most powerful)!important components!important utilitiesnormal utilitiesnormal componentsnormal defaults (least powerful)\n\n\n\nIn this example, the color is defined by all three normal layers, and the utilities layer wins the conflict, applying the maroon color, as the utilities layer has a higher priority in @layers. But notice that the text-decoration property is marked !important in both the defaults and components layers, where important defaults take priority, applying the underline declared by defaults:\n\n\n\nCodePen Embed Fallback\n\n\nEstablishing a layer order\n\n\nWe can create any number of layers and name them or group them in various ways. But the most important thing to do is to make sure our layers are applied in the right order of priority.\n\n\n\nA single layer can be used multiple times throughout the codebase — cascade layers stack in the order they first appear. The first layer encountered sits at the bottom (least powerful), and the last layer at the top (most powerful). But then, above that, un-layered styles have the highest priority:\n\n\n\n@layer layer-1 { a { color: red; } }\n@layer layer-2 { a { color: orange; } }\n@layer layer-3 { a { color: yellow; } }\n/* un-layered */ a { color: green; }\n\n\n\nun-layered styles (most powerful)layer-3layer-2layer-1 (least powerful)\n\n\n\nThen, as discussed above, any important styles are applied in a reverse order:\n\n\n\n@layer layer-1 { a { color: red !important; } }\n@layer layer-2 { a { color: orange !important; } }\n@layer layer-3 { a { color: yellow !important; } }\n/* un-layered */ a { color: green !important; }\n\n\n\n!important layer-1 (most powerful)!important layer-2!important layer-3!important un-layered stylesnormal un-layered stylesnormal layer-3normal layer-2normal layer-1 (least powerful)\n\n\n\nLayers can also be grouped, allowing us to do more complicated sorting of top-level and nested layers:\n\n\n\n@layer layer-1 { a { color: red; } }\n@layer layer-2 { a { color: orange; } }\n@layer layer-3 {\n  @layer sub-layer-1 { a { color: yellow; } }\n  @layer sub-layer-2 { a { color: green; } }\n  /* un-nested */ a { color: blue; }\n}\n/* un-layered */ a { color: indigo; }\n\n\n\nun-layered styles (most powerful)layer-3layer-3 un-nestedlayer-3 sub-layer-2layer-3 sub-layer-1layer-2layer-1 (least powerful)\n\n\n\nGrouped layers always stay together in the final layer order (for example, sub-layers of layer-3 will all be next to each other), but this otherwise behaves the same as if the list was “flattened” — turning this into a single six-item list. When reversing !important layer order, the entire list flattened is reversed.\n\n\n\nBut layers don’t have to be defined once in a single location. We give them names so that layers can be defined in one place (to establish layer order), and then we can append styles to them from anywhere:\n\n\n\n/* describe the layer in one place */\n@layer my-layer;\n\n/* append styles to it from anywhere */\n@layer my-layer { a { color: red; } }\n\n\n\nWe can even define a whole ordered list of layers in a single declaration:\n\n\n\n@layer one, two, three, four, five, etc;\n\n\n\nThis makes it possible for the author of a site to have final say over the layer order. By providing a layer order up-front, before any third party code is imported, the order can be established and rearranged in one place without worrying about how layers are used in any third-party tool.\n\n\nSyntax: Working with cascade layers\n\n\nLet’s take a look at the syntax!\n\n\nOrder-setting @layer statements\n\n\nSince layers are stacked in the order they are defined, it’s important that we have a tool for establishing that order all in one place!\n\n\n\nWe can use @layer statements to do that. The syntax is:\n\n\n\n@layer <layer-name>#;\n\n\n\nThat hash (#) means we can add as many layer names as we want in a comma-separated list:\n\n\n\n@layer reset, defaults, framework, components, utilities;\n\n\n\nThat will establish the layer order:\n\n\n\nun-layered styles (most powerful)utilitiescomponentsframeworkdefaultsreset (least powerful)\n\n\n\nWe can do this as many times as we want, but remember: what matters is the order each name first appears. So this will have the same result:\n\n\n\n@layer reset, defaults, framework;\n@layer components, defaults, framework, reset, utilities;\n\n\n\nThe ordering logic will ignore the order of reset, defaults, and framework in the second @layer rule because those layers have already been established. This @layer list syntax doesn’t add any special magic to the layer ordering logic: layers are stacked based on the order in which the layers first appear in your code. In this case, reset appears first in the first @layer list. Any @layer statement that comes later can only append layer names to the list, but can’t move layers that already exist. This ensures that you can always control the final overall layer order from one location — at the very start of your styles.\n\n\n\nThese layer-ordering statements are allowed at the top of a stylesheet, before the @import rule (but not between imports). We highly recommend using this feature to establish all your layers up-front in a single place so you always know where to look or make changes.\n\n\nBlock @layer rules\n\n\nThe block version of the @layer rule only takes a single layer name, but then allows you to add styles to that layer:\n\n\n\n@layer <layer-name> {\n  /* styles added to the layer */\n}\n\n\n\nYou can put most things inside an @layer block — media queries, selectors and styles, support queries, etc. The only things you can’t put inside a layer block are things like charset, imports, and namespaces. But don’t worry, there is a syntax for importing styles into a layer.\n\n\n\nIf the layer name hasn’t been established before, this layer rule will add it to the layer order. But if the name has been established, this allows you to add styles to existing layers from anywhere in the document — without changing the priority of each layer.\n\n\n\nIf we’ve established our layer-order up-front with the layer statement rule, we no longer need to worry about the order of these layer blocks:\n\n\n\n/* establish the order up-front */\n@layer defaults, components, utilities;\n\n/* add styles to layers in any order */\n@layer utilities {\n  [hidden] { display: none; }\n}\n\n/* utilities will override defaults, based on established order */\n@layer defaults {\n  * { box-sizing: border-box; }\n  img { display: block; }\n}\n\n\nGrouping (nested) layers\n\n\nLayers can be grouped, by nesting layer rules:\n\n\n\n@layer one {\n  /* sorting the sub-layers */\n  @layer two, three;\n\n  /* styles ... */\n  @layer three { /* styles ... */ }\n  @layer two { /* styles ... */ }\n}\n\n\n\nThis generates grouped layers that can be represented by joining the parent and child names with a period. That means the resulting sub-layers can also be accessed directly from outside the group:\n\n\n\n/* sorting nested layers directly */\n@layer one.two, one.three;\n\n/* adding to nested layers directly */\n@layer one.three { /* ... */ }\n@layer one.two { /* ... */ }\n\n\n\nThe rules of layer-ordering apply at each level of nesting. Any styles that are not further nested are considered “un-layered” in that context, and have priority over further nested styles:\n\n\n\n@layer defaults {\n  /* un-layered defaults (higher priority) */\n  :any-link { color: rebeccapurple; }\n\n  /* layered defaults (lower priority) */\n  @layer reset {\n    a[href] { color: blue; }\n  }\n}\n\n\n\nGrouped layers are also contained within their parent, so that the layer order does not intermix across groups. In this example, the top level layers are sorted first, and then the layers are sorted within each group:\n\n\n\n@layer reset.type, default.type, reset.media, default.media;\n\n\n\nResulting in a layer order of:\n\n\n\nun-layered (most powerful)default groupdefault un-layereddefault.mediadefault.typereset groupreset un-layeredreset.mediareset.type\n\n\n\nNote that layer names are also scoped so that they don’t interact or conflict with similarly-named layers outside their nested context. Both groups can have distinct media sub-layers.\n\n\n\nThis grouping becomes especially important when using @import or <link> to layer entire stylesheets. A third-party tool, like Bootstrap, could use layers internally — but we can nest those layers into a shared bootstrap layer-group on import, to avoid potential layer-naming conflicts.\n\n\nLayering entire stylesheets with @import or <link>\n\n\nEntire stylesheets can be added to a layer using the new layer() function syntax with @import rules:\n\n\n\n/* styles imported into to the <layer-name> layer */\n@import url('example.css') layer(<layer-name>);\n\n\n\nThere is also a proposal to add a layer attribute in the HTML <link> element — although this is still under development, and not yet supported anywhere. This can be used to import third-party tools or component libraries, while grouping any internal layers together under a single layer name — or as a way of organizing layers into distinct files.\n\n\nAnonymous (un-named) layers\n\n\nLayer names are helpful as they allow us to access the same layer from multiple places for sorting or combining layer blocks — but they are not required.\n\n\n\nIt’s possible to create anonymous (un-named) layers using the block layer rule:\n\n\n\n@layer { /* ... */ }\n@layer { /* ... */ }\n\n\n\nOr using the import syntax, with a layer keyword in place of the layer() function:\n\n\n\n/* styles imported into to a new anonymous layer */\n@import url('../example.css') layer;\n\n\n\nEach anonymous layer is unique, and added to the layer order where it is encountered. Anonymous layers can’t be referenced from other layer rules for sorting or appending more styles.\n\n\n\nThese should probably be used sparingly, but there might be a few use cases:\n\n\n\nProjects could ensure that all styles for a given layer are required to be located in a single place.Third-party tools could “hide” their internal layering inside anonymous layers so that they don’t become part of the tool’s public API.\n\n\nReverting values to the previous layer\n\n\nThere are several ways that we can use to “revert” a style in the cascade to a previous value, defined by a lower priority origin or layer. That includes a number of existing global CSS values, and a new revert-layer keyword that will also be global (works on any property).\n\n\nContext: Existing global cascade keywords*\n\n\nCSS has several global keywords which can be used on any property to help roll-back the cascade in various ways.\n\n\n\ninitial sets a property to the specified value before any styles (including browser defaults) are applied. This can be surprising as we often think of browser styles as the initial value — but, for example, the initial value of display is inline, no matter what element we use it on.inherit sets the property to apply a value from its parent element. This is the default for inherited properties, but can still be used to remove a previous value.unset acts as though simply removing all previous values — so that inherited properties once again inherit, while non-inherited properties return to their initial value.revert only removes values that we’ve applied in the author origin (i.e. the site styles). This is what we want in most cases, since it allows the browser and user styles to remain intact.\n\n\nNew: the revert-layer keyword\n\n\nCascade layers add a new global revert-layer keyword. It works the same as revert, but only removes values that we’ve applied in the current cascade layer. We can use that to roll back the cascade, and use whatever value was defined in the previous layers.\n\n\n\nIn this example, the no-theme class removes any values set in the theme layer.\n\n\n\n@layer default {\n  a { color: maroon; }\n}\n\n@layer theme {\n  a { color: var(--brand-primary, purple); }\n\n  .no-theme {\n    color: revert-layer;\n  }\n}\n\n\n\nSo a link tag with the .no-theme class will roll back to use the value set in the default layer. When revert-layer is used in un-layered styles, it behaves the same as revert — rolling back to the previous origin.\n\n\nReverting important layers\n\n\nThings get interesting if we add !important to the revert-layer keyword. Because each layer has two distinct “normal” and “important” positions in the cascade, this doesn’t simply change the priority of the declaration — it changes what layers are reverted.\n\n\n\nLet’s assume we have three layers defined, in a layer stack that looks like this:\n\n\n\nutilities (most powerful)componentsdefaults (least powerful)\n\n\n\nWe can flesh that out to include not just normal and important positions of each layer, but also un-layered styles, and animations:\n\n\n\n!important defaults (most powerful)!important components!important utilities!important un-layered stylesCSS animationsnormal un-layered stylesnormal utilitiesnormal componentsnormal defaults (least powerful)\n\n\n\nNow, when we use revert-layer in a normal layer (let’s use utilities) the result is fairly direct. We revert only that layer, while everything else applies normally:\n\n\n\n✅ !important defaults (most powerful)✅ !important components✅ !important utilities✅ !important un-layered styles✅ CSS animations✅ normal un-layered styles❌ normal utilities✅ normal components✅ normal defaults (least powerful)\n\n\n\nBut when we move that revert-layer into the important position, we revert both the normal and important versions along with everything in-between:\n\n\n\n✅ !important defaults (most powerful)✅ !important components❌ !important utilities❌ !important un-layered styles❌ CSS animations❌ normal un-layered styles❌ normal utilities✅ normal components✅ normal defaults (least powerful)\n\n\nUse cases: When would I want to use cascade layers?\n\n\nSo what sort of situations might we find ourselves using cascade layers? Here are several examples of when cascade layers make a lot of sense, as well as others where they do not make a lot sense.\n\n\nLess intrusive resets and defaults\n\n\nOne of the clearest initial use cases would be to make low-priority defaults that are easy to override.\n\n\n\nSome resets have been doing this already by applying the :where() pseudo-class around each selector. :where() removes all specificity from the selectors it is applied to, which has the basic impact desired, but also some downsides:\n\n\n\nIt has to be applied to each selector individuallyConflicts inside the reset have to be resolved without specificity\n\n\n\nLayers allow us to more simply wrap the entire reset stylesheet, either using the block @layer rule:\n\n\n\n/* reset.css */\n@layer reset {\n  /* all reset styles in here */\n}\n\n\n\nOr when you import the reset:\n\n\n\n/* reset.css */\n@import url(reset.css) layer(reset);\n\n\n\nOr both! Layers can be nested without changing their priority. This way, you can use a third-party reset, and ensure it gets added to the layer you want whether or not the reset stylesheet itself is written using layers internally.\n\n\n\nSince layered styles have a lower priority than default “un-layered” styles, this is a good way to start using cascade layers without re-writing your entire CSS codebase.\n\n\n\nThe reset selectors still have specificity information to help resolve internal conflicts, without wrapping each individual selector — but you also get the desired outcome of a reset stylesheet that is easy to override.\n\n\nManaging a complex CSS architecture\n\n\nAs projects become larger and more complex, it can be useful to define clearer boundaries for naming and organizing CSS code. But the more CSS we have, the more potential we have for conflicts — especially from different parts of a system like a “theme” or a “component library” or a set of “utility classes.”\n\n\n\nNot only do we want these organized by function, but it can also be useful to organize them based on what parts of the system take priority in the case of a conflict. Harry Robert’s Inverted Triangle CSS does a good job visualizing what those layers might contain.\n\n\n\n\n\n\n\nIn fact, the initial pitch for adding layers to the CSS cascade used the ITCSS methodology as a primary example, and a guide for developing the feature.\n\n\n\nThere is no particular technique required for this, but it’s likely helpful to restrict projects to a pre-defined set of top-level layers and then extend that set with nested layers as appropriate.\n\n\n\nFor example:\n\n\n\nlow level reset and normalization styleselement defaults, for basic typography and legibilitythemes, like light and dark modesre-usable patterns that might appear across multiple componentslayouts and larger page structuresindividual componentsoverrides and utilities\n\n\n\nWe can create that top-level layer stack at the very start of our CSS, with a single layer statement:\n\n\n\n@layer\n  reset,\n  default,\n  themes,\n  patterns,\n  layouts,\n  components,\n  utilities;\n\n\n\nThe exact layers needed, and how you name those layers, might change from one project to the next.\n\n\n\nFrom there, we create even more detailed layer breakdowns. Maybe our components themselves have defaults, structures, themes, and utilities internally.\n\n\n\n@layer components {\n  @layer defaults, structures, themes, utilities;\n}\n\n\n\nWithout changing the top-level structure, we now have a way to further layer the styles within each component.\n\n\nUsing third-party tools and frameworks\n\n\nIntegrating third-party CSS with a project is one of the most common places to run into cascade issues. Whether we’re using a shared reset like Normalizer or CSS Remedy, a generic design system like Material Design, a framework like Bootstrap, or a utility toolkit like Tailwind — we can’t always control the selector specificity or importance of all the CSS being used on our sites. Sometimes, this even extends to internal libraries, design systems, and tools managed elsewhere in an organization.\n\n\n\nAs a result, we often have to structure our internal CSS around the third-party code, or escalate conflicts when they come up — with artificially high specificity or !important flags. And then we have to maintain those hacks over time, adapting to upstream changes.\n\n\n\nCascade layers give us a way to slot third-party code into the cascade of any project exactly where we want it to live — no matter how selectors are written internally. Depending on the type of library we’re using, we might do that in various ways. Let’s start with a basic layer-stack, working our way up from resets to utilities:\n\n\n\n@layer reset, type, theme, components, utilities;\n\n\n\nAnd then we can incorporate some tools…\n\n\nUsing a reset\n\n\nIf we’re using a tool like CSS Remedy, we might also have some reset styles of our own that we want to include. Let’s import CSS Remedy into a sub-layer of reset:\n\n\n\n@import url('remedy.css') layer(reset.remedy);\n\n\n\nNow we can add our own reset styles to the reset layer, without any further nesting (unless we want it). Since styles directly in reset will override any further nested styles, we can be sure our styles will always take priority over CSS Remedy if there’s a conflict — no matter what changes in a new release:\n\n\n\n@import url('remedy.css') layer(reset.remedy);\n\n@layer reset {\n  :is(ol, ul)[role='list'] {\n    list-style: none;\n    padding-inline-start: 0;\n  }\n}\n\n\n\nAnd since the reset layer is at the bottom of the stack, the rest of the CSS in our system will override both Remedy, and our own local reset additions.\n\n\nUsing utility classes\n\n\nAt the other end of our stack, “utility classes” in CSS can be a useful way to reproduce common patterns (like additional context for screen readers) in a broadly-applicable way. Utilities tend to break the specificity heuristic, since we want them defined broadly (resulting in a low specificity), but we also generally want them to “win” conflicts.\n\n\n\nBy having a utilities layer at the top of our layer stack, we can make that possible. We can use that in a similar way to the reset example, both loading external utilities into a sub-layer, and providing our own:\n\n\n\n@import url('tailwind.css') layer(utilities.tailwind);\n\n@layer utilities {\n  /* from https://kittygiraudel.com/snippets/sr-only-class/ */\n  /* but with !important removed from the properties */\n  .sr-only {\n    border: 0;\n    clip: rect(1px, 1px, 1px, 1px);\n    -webkit-clip-path: inset(50%);\n    clip-path: inset(50%);\n    height: 1px;\n    overflow: hidden;\n    margin: -1px;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n    white-space: nowrap;\n  }\n}\n\n\nUsing design systems and component libraries\n\n\nThere are a lot of CSS tools that fall somewhere in the middle of our layer stack — combining typography defaults, themes, components, and other aspects of a system.\n\n\n\nDepending on the particular tool, we might do something similar to the reset and utility examples above — but there are a few other options. A highly integrated tool might deserve a top-level layer:\n\n\n\n@layer reset, bootstrap, utilities;\n@import url('bootstrap.css') layer(bootstrap);\n\n\n\nIf these tools start to provide layers as part of their public API, we could also break it down into parts — allowing us to intersperse our code with the library:\n\n\n\n@import url('bootstrap/reset.css') layer(reset.bootstrap);\n@import url('bootstrap/theme.css') layer(theme.bootstrap);\n@import url('bootstrap/components.css') layer(components.bootstrap);\n\n@layer theme.local {\n  /* styles here will override theme.bootstrap */\n  /* but not interfere with styles from components.bootstrap */\n}\n\n\nUsing layers with existing (un-layered, !important-filled) frameworks\n\n\nAs with any major language change, there’s going to be an adjustment period when CSS Cascade Layers become widely adopted. What happens if your team is ready to start using layers next month, but your favorite framework decides to wait another three years before they switch over to layered styles? Many frameworks will likely still use !important more often than we’d like! With !important layers reversed, that’s not ideal.\n\n\n\nStill, layers can still help us solve the problem. We just have to get clever about it. We decide what layers we want for our project, and that means we can add layers above and also below the framework layers we create.\n\n\n\nFor now, though, we can use a lower layer to override !important styles from the framework, and a higher layer to override normal styles. Something like this:\n\n\n\n@layer framework.important, framework.bootstrap, framework.local;\n@import url('bootstrap.css') layer(framework.bootstrap);\n\n@layer framework.local {\n  /* most of our normal framework overrides can live here */\n}\n\n@layer framework.important {\n  /* add !important styles in a lower layer */\n  /* to override any !important framework styles */\n}\n\n\n\nIt still feels like a bit of a hack, but it helps move us in the right direction — towards a more structured cascade. Hopefully it’s a temporary fix.\n\n\nDesigning a CSS tool or framework\n\n\nFor anyone maintaining a CSS library, cascade layers can help with internal organization, and even become part of the developer API. By naming internal layers of a library, we can allow users of our framework to hook into those layers when customizing or overriding our provided styles.\n\n\n\nFor example, Bootstrap could expose layers for their “reboot,” “grid,” and “utilities” — likely stacked in that order. Now a user can decide if they want to load those Bootstrap layers into different local layers:\n\n\n\n@import url(bootstrap/reboot.css) layer(reset); /* reboot » reset.reboot */\n@import url(bootstrap/grid.css) layer(layout); /* grid » layout.grid */\n@import url(bootstrap/utils.css) layer(override); /* utils » override.utils */\n\n\n\nOr the user might load them into a Bootstrap layer, with local layers interspersed:\n\n\n\n@layer bs.reboot, bs.grid, bs.grid-overrides, bs.utils, bs.util-overrides;\n@import url('bootstrap-all.css') layer(bs);\n\n\n\nIt’s also possible to hide internal layering from users, when desired, by grouping any private/internal layers inside an anonymous (un-named) layer. Anonymous layers will get added to the layer order where they are encountered, but will not be exposed to users re-arranging or appending styles.\n\n\nI just want this one property to be more !important\n\n\nCounter to some expectations, layers don’t make it easy to quickly escalate a particular style so that it overrides another.\n\n\n\nIf the majority of our styles are un-layered, then any new layer will be de-prioritized in relation to the default. We could do that to individual style blocks, but it would quickly become difficult to track.\n\n\n\nLayers are intended to be more foundational, not style-by-style, but establishing consistent patterns across a project. Ideally, if we’ve set that up right, we get the correct result by moving our style to the appropriate (and pre-defined) layer.\n\n\n\n\nIf the majority of our styles already fall into well-defined layers, we can always consider adding a new highest-power layer at the top of a given stack, or using un-layered styles to override the layers. We might even consider having a debug layer at the top of the stack, for doing exploratory work outside of production.\n\n\n\n\nBut adding new layers on-the-fly can defeat the organizational utility of this feature, and should be used carefully. It’s best to ask: Why should this style override the other?\n\n\n\nIf the answer has to do with one type of style always overriding another type, layers are probably the right solution. That might be because we’re overriding styles that come from a place we don’t control, or because we’re writing a utility, and it should move into our utilities layer. If the answer has to do with more targeted styles overriding less targeted styles, we might consider making the selectors reflect that specificity.\n\n\n\nOr, on rare occasions, we might even have styles that really are important — the feature simply doesn’t work if you override this particular style. We might say adding display: none to the [hidden] attribute belongs in our lowest-priority reset, but should still be hard to override. In that case, !important really is the right tool for the job:\n\n\n\n@layer reset {\n  [hidden] { display: none !important; }\n}\n\n\nScoping and name-spacing styles? Nope!\n\n\nCascade layers are clearly an organizational tool, and one that ‘captures’ the impact of selectors, especially when they conflict. So it can be tempting at first glance to see them as a solution for managing scope or name-spacing.\n\n\n\nA common first-instinct is to create a layer for each component in a project — hoping that will ensure (for example) that .post-title is only applied inside a .post.\n\n\n\nBut cascade conflicts are not the same as naming conflicts, and layers aren’t particularly well designed for this type of scoped organization. Cascade layers don’t constrain how selectors match or apply to the HTML, only how they cascade together. So unless we can be sure that component X always override component Y, individual component layers won’t help much. Instead, we’ll need to keep an eye on the proposed @scope spec that is being developed.\n\n\n\nIt can be useful to think of layers and component-scopes instead as overlapping concerns:\n\n\n\n\n\n\n\nScopes describe what we are styling, while layers describe why we are styling. We can also think of layers as representing where the style comes from, while scopes represent what the style will attach to.\n\n\nTest your knowledge: Which style wins?\n\n\nFor each situation, assume this paragraph:\n\n\n\n<p id=\"intro\">Hello, World!</p>\n\n\nQuestion 1\n\n\n@layer ultra-high-priority {\n  #intro {\n    color: red;\n  }\n}\n\np {\n  color: green;\n}\n\n\n\n\n  \n          What color is the paragraph?      \n  \n\nDespite the layer having a name that sounds pretty important, un-layered styles have a higher priority in the cascade. So the paragraph will be green.\n\n\n\n\nQuestion 2\n\n\n@layer ren, stimpy;\n\n@layer ren {\n  p { color: red !important; }\n}\n\np { color: green; }\n\n@layer stimpy {\n  p { color: blue !important; }\n}\n\n\n\n\n  \n          What color is the paragraph?      \n  \n\nOur normal layer order is established at the start — ren at the bottom, then stimpy, then (as always) un-layered styles at the top. But these styles aren’t all normal, some of them are important. Right away, we can filter down to just the !important styles, and ignore the unimportant green. Remember that ‘origins and importance’ are the first step of the cascade, before we even take layering into account.\n\n\n\nThat leaves us with two important styles, both in layers. Since our important layers are reversed, ren moves to the top, and stimpy to the bottom. The paragraph will be red.\n\n\n\n\nQuestion 3\n\n\n@layer Montagues, Capulets, Verona;\n\n@layer Montagues.Romeo { #intro { color: red; } }\n@layer Montagues.Benvolio { p { color: orange; } }\n\n@layer Capulets.Juliet { p { color: yellow; } }\n@layer Verona { * { color: blue; } }\n@layer Capulets.Tybalt { #intro { color: green; } }\n\n\n\n\n  \n          What color is the paragraph?      \n  \n\nAll our styles are in the same origin and context, none are marked as important, and none of them are inline styles. We do have a broad range of selectors here, from a highly specific ID #intro to a zero specificity universal * selector. But layers are resolved before we take specificity into account, so we can ignore the selectors for now.\n\n\n\nThe primary layer order is established up front, and then sub-layers are added internally. But sub-layers are sorted along with their parent layer — meaning all the Montagues will have lowest priority, followed by all the Capulets, and then Verona has final say in the layer order. So we can immediately filter down to just the Verona styles, which take precedence. Even though the * selector has zero specificity, it will win.\n\n\n\nBe careful about putting universal selectors in powerful layers!\n\n\n\n\nDebugging layer conflicts in browser developer tools\n\n\nChrome, Safari, Firefox, and Edge browsers all have developer tools that allow you to inspect the styles being applied to a given element on the page. The styles panel of this element inspector will show applied selectors, sorted by their cascade priority (highest priority at the top), and then inherited styles below. Styles that are not being applied for any reason will generally be grayed out, or even crossed out — sometimes with additional information about why the style is not applied. This is the first place to look when debugging any aspect of the cascade, including layer conflicts.\n\n\n\nSafari Technology Preview and Firefox Nightly already show (and sort) cascade layers in this panel. This tooling is expected to role out in the stable versions at the same time as cascade layers. The layer of each selector is listed directly above the selector itself:\n\n\n\n\n\nSafari\n\n\n\n\n\nFirefox\n\n\n\n\n\nChrome/Edge are working on similar tools and expect to have them available in Canary (nightly) releases by the time cascade layers land in the stable release. We’ll make updates here as those tools change and improve.\n\n\nBrowser support and fallbacks\n\n\nCascade layers are (or will soon be) available by default in all the three major browser engines:\n\n\n\nChrome/Edge 99+Firefox 97+Safari (currently in the Technology Preview)\n\n\n\nSince layers are intended as foundational building blocks of an entire CSS architecture, it is difficult to imagine building manual fallbacks in the same way you might for other CSS features. The fallbacks would likely involve duplicating large sections of code, with different selectors to manage cascade layering — or providing a much simpler fallback stylesheet.\n\n\nQuery feature support using @supports\n\n\nThere is a @supports feature in CSS that will allow authors to test for support of @layer and other at-rules:\n\n\n\n@supports at-rule(@layer) {\n  /* code applied for browsers with layer support */\n}\n\n@supports not at-rule(@layer) {\n  /* fallback applied for browsers without layer support */\n}\n\n\n\nHowever, it’s also not clear when this query itself will be supported in browsers.\n\n\nAssigning layers in HTML with the <link> tag\n\n\nThere is no official specification yet for a syntax to layer entire stylesheets from the html <link> tag, but there is a proposal being developed. That proposal includes a new layer attribute which can be used to assign the styles to a named or anonymous layer:\n\n\n\n<!-- styles imported into to the <layer-name> layer -->\n<link rel=\"stylesheet\" href=\"example.css\" layer=\"<layer-name>\">\n\n<!-- styles imported into to a new anonymous layer -->\n<link rel=\"stylesheet\" href=\"example.css\" layer>\n\n\n\nHowever, old browsers without support for the layer attribute will ignore it completely, and continue to load the stylesheet without any layering. The results could be pretty unexpected. So the proposal also extends the existing media attribute, so that it allows feature support queries in a support() function.\n\n\n\nThat would allow us to make layered links conditional, based on support for layering:\n\n\n\n<link rel=\"stylesheet\" layer=\"bootstrap\" media=\"supports(at-rule(@layer))\" href=\"bootstrap.css\">\n\n\nPotential polyfills and workarounds\n\n\nThe major browsers have all moved to an “evergreen” model with updates pushed to users on a fairly short release cycle. Even Safari regularly releases new features in “patch” updates between their more rare-seeming major versions.\n\n\n\nThat means we can expect browser support for these features to ramp up very quickly. For many of us, it may be reasonable to start using layers in only a few months, without much concern for old browsers.\n\n\n\nFor others, it may take longer to feel comfortable with the native browser support. There are many other ways to manage the cascade, using selectors, custom properties, and other tools. It’s also theoretically possible to mimic (or polyfill) the basic behavior. There are people working on that polyfill, but it’s not clear when that will be ready either.\n\n\nMore resources\n\n\nCSS Cascade Layers is still evolving but there is already a lot of resources, including documentation, articles, videos, and demos to help you get even more familiar with layers and how they work.\n\n\nReference\n\n\nCascading & Inheritance Level 5 SpecificationMDN Documentation\n\n\nArticles\n\n\nThe Future of CSS: Cascade Layers (CSS @layer) by Bramus Van DammeGetting Started With CSS Cascade Layers by Stephanie Eckles, Smashing MagazineCascade layers are coming to your browser by Una Kravets, Chrome Developers\n\n\nVideos\n\n\nHow does CSS !important actually work? by Una KravetsAn overview of the new @layer and layer() CSS primitives by Una KravetsCSS Revert & Revert-Layer Keywords by Una Kravets\n\n\nDemos\n\n\nLayers CodePen collection\n\nA Complete Guide to CSS Cascade Layers originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-21T15:40:35.000Z",
      "date_modified": "2022-02-21T15:40:35.000Z",
      "_plugin": {
        "pageFilename": "0a6bc1ecfe82af1ad28c4afab328b6d1910aa2eaafd066d954af6ca92a7307e9.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363467",
      "url": "https://css-tricks.com/node-javascript-compared-to-javascript/",
      "title": "Comparing Node JavaScript to JavaScript in the Browser",
      "summary": "Being able to understand Node continues to be an important skill if you’re a front-end developer. Deno has arrived as another way to run JavaScript outside the browser, but the huge ecosystem of tools and software built with Node mean …\n\nComparing Node JavaScript to JavaScript in the Browser originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Being able to understand <a href=\"https://nodejs.org/en/\" rel=\"noopener\">Node</a> continues to be an important skill if you’re a front-end developer. <a href=\"https://deno.land/\" rel=\"noopener\">Deno</a> has arrived as another way to run JavaScript outside the browser, but the huge ecosystem of tools and software built with Node mean it’s not going anywhere anytime soon.</p>\n\n\n\n<p>If you’ve mainly written JavaScript that runs in the browser and you’re looking to get more of an understanding of the server side, many articles will tell you that Node JavaScript is a great way to write server-side code and capitalize on your JavaScript experience.</p>\n\n\n\n<span id=\"more-363467\"></span>\n\n\n\n<p>I agree, but there are a lot of challenges jumping into Node.js, even if you’re experienced at authoring client-side JavaScript. This article assumes you’ve got Node installed, and you’ve used it to build front-end apps, but want to write your own APIs and tools using Node.</p>\n\n\n\n<p class=\"is-style-explanation\">For a beginners explanation of Node and npm you can check out Jamie Corkhill’s <a href=\"https://www.smashingmagazine.com/2019/02/node-api-http-es6-javascript/#the-node-package-manager\" rel=\"noopener\">“Getting Started With Node”</a> on Smashing Magazine.</p>\n\n\n<h3 id=\"asynchronous-javascript\">Asynchronous JavaScript</h3>\n\n\n<p>We don’t need to write a whole lot of asynchronous code on the browser. The most common usage of asynchronous code on the browser is fetching data from an API using <code>fetch</code> (or <code>XMLHttpRequest</code> if you’re old-school). Other uses of async code might include using <code>setInterval</code>, <code>setTimeout</code>, or responding to user input events, but we can get pretty far writing JavaScript UI without being asynchronous JavaScript geniuses.</p>\n\n\n\n<p>If you&#8217;re using Node, you will nearly <em>always</em> be writing asynchronous code. From the beginning, Node has been built to leverage a single-threaded event loop using asynchronous callbacks. The Node team <a href=\"https://nodejs.org/en/knowledge/getting-started/control-flow/how-to-write-asynchronous-code/\" rel=\"noopener\">blogged in 2011</a> about how “Node.js promotes an asynchronous coding style from the ground up.” In <a href=\"https://www.youtube.com/watch?v=ztspvPYybIY\" rel=\"noopener\">Ryan Dahl’s talk announcing Node.js in 2009</a>, he talks about the performance benefits of doubling down on asynchronous JavaScript.</p>\n\n\n\n<p>The asynchronous-first style is part of the reason Node gained popularity over other attempts at server-side JavaScript implementations such as <a href=\"https://docs.oracle.com/cd/E19957-01/816-6411-10/contents.htm\" rel=\"noopener\">Netscape’s application servers</a> or <a href=\"https://narwhaljs.org/\" rel=\"noopener\">Narwhal</a>. However, being forced to write asynchronous JavaScript might cause friction if you aren’t ready for it.</p>\n\n\n<h3 id=\"setting-up-an-example\">Setting up an example</h3>\n\n\n<p>Let&#8217;s say we’re writing a quiz app. We’re going to allow users to build quizes out of multichoice questions to test their friends’ knowledge. You can find a more complete version of what we’ll build at this <a href=\"https://github.com/Elliotclyde/quiz-app/tree/main/backend\" rel=\"noopener\">GitHub repo</a>. You could also clone the <a href=\"https://github.com/Elliotclyde/quiz-app\" rel=\"noopener\">entire front-end and back-end</a> to see how it all fits together, or you can take a look at this <a href=\"https://codesandbox.io/s/youthful-framework-3rj3c\" rel=\"noopener\">CodeSandbox</a> (run <code>npm run start</code> to fire it up) and get an idea of what we’re making from there.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1434\" height=\"956\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-09-at-7.32.49-AM.png?resize=1434%2C956&#038;ssl=1\" alt=\"Screenshot of a quiz editor written in Node JavaScript that contains four inputs two checkboxes and four buttons.\" class=\"wp-image-363468\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-09-at-7.32.49-AM.png?w=1434&amp;ssl=1 1434w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-09-at-7.32.49-AM.png?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-09-at-7.32.49-AM.png?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-09-at-7.32.49-AM.png?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-09-at-7.32.49-AM.png?resize=1000%2C667&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The quizzes in our app will consist of a bunch of questions, and each of these questions will have a number of answers to choose from, with only one answer being correct.</p>\n\n\n\n<p>We can hold this data in an <a href=\"https://www.sqlite.org/index.html\" rel=\"noopener\">SQLite database</a>. Our database will contain:</p>\n\n\n\n<ul><li>A table for quizzes with two columns:<ul><li>an integer ID</li><li>a text title</li></ul></li><li>A table for questions with three columns:<ul><li>an integer ID</li><li>body text</li><li>An integer reference matching the ID of the quiz each question belongs to</li></ul></li><li>A table for answers with four columns:<ul><li>an integer ID</li><li>body text</li><li>whether the answer is correct or not</li><li>an integer reference matching the ID of the question each answer belongs to</li></ul></li></ul>\n\n\n\n<p>SQLite doesn’t have a boolean data type, so we can hold whether an answer is correct in an integer where <code>0</code> is false and <code>1</code> is true.</p>\n\n\n\n<p>First, we’ll need to initialize npm and install the <a href=\"https://www.npmjs.com/package/sqlite3\" rel=\"noopener\">sqlite3 npm package</a> from the command line:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npm init -y\nnpm install sqlite3</code></pre>\n\n\n\n<p>This will create a <code>package.json</code> file. Let’s edit it and add:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"type\":\"module\"</code></pre>\n\n\n\n<p>To the top-level JSON object. This will allow us to use modern ES6 module syntax. Now we can create a node script to set up our tables. Let’s call our script <code>migrate.js</code>.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// migrate.js\n\nimport sqlite3 from \"sqlite3\"; \n\nlet db = new sqlite3.Database(\"quiz.db\");\n    db.serialize(function () {\n      // Setting up our tables:\n      db.run(\"CREATE TABLE quiz (quizid INTEGER PRIMARY KEY, title TEXT)\");\n      db.run(\"CREATE TABLE question (questionid INTEGER PRIMARY KEY, body TEXT, questionquiz INTEGER, FOREIGN KEY(questionquiz) REFERENCES quiz(quizid))\");\n      db.run(\"CREATE TABLE answer (answerid INTEGER PRIMARY KEY, body TEXT, iscorrect INTEGER, answerquestion INTEGER, FOREIGN KEY(answerquestion) REFERENCES question(questionid))\");\n      // Create a quiz with an id of 0 and a title \"my quiz\" \n      db.run(\"INSERT INTO quiz VALUES(0,\\\"my quiz\\\")\");\n      // Create a question with an id of 0, a question body\n      // and a link to the quiz using the id 0\n      db.run(\"INSERT INTO question VALUES(0,\\\"What is the capital of France?\\\", 0)\");\n      // Create four answers with unique ids, answer bodies, an integer for whether\n      // they're correct or not, and a link to the first question using the id 0\n      db.run(\"INSERT INTO answer VALUES(0,\\\"Madrid\\\",0, 0)\");\n      db.run(\"INSERT INTO answer VALUES(1,\\\"Paris\\\",1, 0)\");\n      db.run(\"INSERT INTO answer VALUES(2,\\\"London\\\",0, 0)\");\n      db.run(\"INSERT INTO answer VALUES(3,\\\"Amsterdam\\\",0, 0)\");\n  });\ndb.close();</code></pre>\n\n\n\n<p>I’m not going to explain this code in detail, but it creates the tables we need to hold our data. It will also create a quiz, a question, and four answers, and store all of this in a file called <code>quiz.db</code>. After saving this file, we can run our script from the command line using this command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">node migrate.js</code></pre>\n\n\n\n<p>If you like, you can open the database file using a tool like <a href=\"https://sqlitebrowser.org/\" rel=\"noopener\">DB Browser for SQLite</a> to double check that the data has been created.</p>\n\n\n<h3 id=\"changing-the-way-you-write-javascript\">Changing the way you write JavaScript</h3>\n\n\n<p>Let’s write some code to query the data we’ve created.</p>\n\n\n\n<p>Create a new file and call it <code>index.js</code> .To access our database, we can import <code>sqlite3</code>, create a new <code>sqlite3.Database</code>, and pass the database file path as an argument. On this database object, we can call the <code>get</code> function, passing in an <a href=\"https://en.wikipedia.org/wiki/SQL\" rel=\"noopener\">SQL</a> string to select our quiz and a callback that will log the result:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// index.js\nimport sqlite3 from \"sqlite3\";\n\nlet db = new sqlite3.Database(\"quiz.db\");\n\ndb.get(`SELECT * FROM quiz WHERE quizid  = 0`, (err, row) => {\n  if (err) {\n    console.error(err.message);\n  }\n  console.log(row);\n  db.close();\n});</code></pre>\n\n\n\n<p>Running this should print <code>{ quizid: 0, title: 'my quiz' }</code> in the console.</p>\n\n\n<h3 id=\"how-not-to-use-callbacks\">How <em>not</em> to use callbacks</h3>\n\n\n<p>Now let’s wrap this code in a function where we can pass the ID in as an argument; we want to access any quiz by its ID. This function will return the database row object we get from <code>db</code>.</p>\n\n\n\n<p>Here’s where we start running into trouble. We can’t simply return the object inside of the callback we pass to <code>db</code> and walk away. This won’t change what our outer function returns. Instead, you might think we can create a variable (let’s call it <code>result</code>) in the outer function and reassign this variable in the callback. Here is how we might attempt this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// index.js\n// Be warned! This code contains BUGS\nimport sqlite3 from \"sqlite3\";\n\nfunction getQuiz(id) {\n  let db = new sqlite3.Database(\"quiz.db\");\n  let result;\n  db.get(`SELECT * FROM quiz WHERE quizid  = ?`, [id], (err, row) => {\n    if (err) {\n      return console.error(err.message);\n    }\n    db.close();\n    result = row;\n  });\n  return result;\n}\nconsole.log(getQuiz(0));</code></pre>\n\n\n\n<p>If you run this code, the console log will print out <code>undefined</code>! What happened?</p>\n\n\n\n<p>We’ve run into a disconnect between how we expect JavaScript to run (top to bottom), and how asynchronous callbacks run. The <code>getQuiz</code> function in the above example runs like this:</p>\n\n\n\n<ol><li>We declare the <code>result</code> variable with <code>let result;</code>. We haven’t assigned anything to this variable so its value is <code>undefined</code>.</li><li>We call the <code>db.get()</code> function. We pass it an SQL string, the ID, and a callback. But our callback won’t run yet! Instead, the SQLite package starts a task in the background to read from the <code>quiz.db</code> file. Reading from the file system takes a relatively long time, so this API lets our user code move to the next line while Node.js reads from the disk in the background.</li><li>Our function returns <code>result</code>. As our callback hasn’t run yet, <code>result</code> still holds a value of <code>undefined</code>.</li><li>SQLite finishes reading from the file system and runs the callback we passed, closing the database and assigning the row to the <code>result</code> variable. Assigning this variable makes no difference as the function has already returned its result.</li></ol>\n\n\n<h3 id=\"passing-in-callbacks\">Passing in callbacks</h3>\n\n\n<p>How do we fix this? Before 2015, the way to fix this would be to use callbacks. Instead of only passing the quiz ID to our function, we pass the quiz ID <em>and</em> a callback which will receive the row object as an argument.</p>\n\n\n\n<p>Here’s how this looks:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// index.js\nimport sqlite3 from \"sqlite3\";\nfunction getQuiz(id, callback) {\n  let db = new sqlite3.Database(\"quiz.db\");\n  db.get(`SELECT * FROM quiz WHERE quizid  = ?`, [id], (err, row) => {\n    if (err) {\n       console.error(err.message);\n    }\n    else {\n       callback(row);\n    }\n    db.close();\n  });\n}\ngetQuiz(0,(quiz)=>{\n  console.log(quiz);\n});</code></pre>\n\n\n\n<p>That does it. It’s a subtle difference, and one that forces you to change the way your user code looks, but it means now our <code>console.log</code> runs <em>after</em> the query is complete.</p>\n\n\n<h3 id=\"callback-hell\">Callback hell</h3>\n\n\n<p>But what if we need to do multiple consecutive asynchronous calls? For instance, what if we were trying to find out which quiz an answer belonged to, and we only had the ID of the answer.</p>\n\n\n\n<p>First, I’m going to refactor <code>getQuiz</code> to a more general <code>get</code> function, so we can pass in the table and column to query, as well as the ID:</p>\n\n\n\n<p class=\"is-style-explanation\">Unfortunately, we are unable to use the (more secure) SQL parameters for parameterizing the table name, so we’re going to switch to using a template string instead. In production code you would need to scrub this string to prevent SQL injection.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function get(params, callback) {\n  // In production these strings should be scrubbed to prevent SQL injection\n  const { table, column, value } = params;\n  let db = new sqlite3.Database(\"quiz.db\");\n  db.get(`SELECT * FROM ${table} WHERE ${column} = ${value}`, (err, row) => {\n    callback(err, row);\n    db.close();\n  });\n}</code></pre>\n\n\n\n<p>Another issue is that there might be an error reading from the database. Our user code will need to know whether each database query has had an error; otherwise it shouldn’t continue querying the data. We’ll use the Node.js convention of passing an error object as the first argument of our callback. Then we can check if there’s an error before moving forward.</p>\n\n\n\n<p>Let’s take our answer with an <code>id</code> of <code>2</code> and check which quiz it belongs to. Here’s how we can do this with callbacks:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// index.js\nimport sqlite3 from \"sqlite3\";\n\nfunction get(params, callback) {\n  // In production these strings should be scrubbed to prevent SQL injection\n  const { table, column, value } = params;\n  let db = new sqlite3.Database(\"quiz.db\");\n  db.get(`SELECT * FROM ${table} WHERE ${column} = ${value}`, (err, row) => {\n    callback(err, row);\n    db.close();\n  });\n}\n\nget({ table: \"answer\", column: \"answerid\", value: 2 }, (err, answer) => {\n  if (err) {\n    console.log(err);\n  } else {\n    get(\n      { table: \"question\", column: \"questionid\", value: answer.answerquestion },\n      (err, question) => {\n        if (err) {\n          console.log(err);\n        } else {\n          get(\n            { table: \"quiz\", column: \"quizid\", value: question.questionquiz },\n            (err, quiz) => {\n              if (err) {\n                console.log(err);\n              } else {\n                // This is the quiz our answer belongs to\n                console.log(quiz);\n              }\n            }\n          );\n        }\n      }\n    );\n  }\n});</code></pre>\n\n\n\n<p>Woah, that’s a lot of nesting! Every time we get an answer back from the database, we have to add two layers of nesting — one to check for an error, and one for the next callback. As we chain more and more asynchronous calls our code gets deeper and deeper.</p>\n\n\n\n<p>We could partially prevent this by using named functions instead of anonymous functions, which would keep the nesting lower, but make our code our code less concise. We’d also have to think of names for all of these intermediate functions. Thankfully, <a href=\"https://nodejs.org/en/blog/release/v4.0.0/\" rel=\"noopener\">promises arrived in Node back in 2015</a> to help with chained asynchronous calls like this.</p>\n\n\n<h3 id=\"promises\">Promises</h3>\n\n\n<p>Wrapping asynchronous tasks with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"noopener\">promises</a> allows you to prevent a lot of the nesting in the previous example. Rather than having deeper and deeper nested callbacks, we can pass a callback to a <code>Promise</code>’s <code>then</code> function.</p>\n\n\n\n<p>First, let’s change our <code>get</code> function so it wraps the database query with a <code>Promise</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// index.js\nimport sqlite3 from \"sqlite3\";\nfunction get(params) {\n  // In production these strings should be scrubbed to prevent SQL injection\n  const { table, column, value } = params;\n  let db = new sqlite3.Database(\"quiz.db\");\n\n  return new Promise(function (resolve, reject) {\n    db.get(`SELECT * FROM ${table} WHERE ${column} = ${value}`, (err, row) => {\n      if (err) {\n        return reject(err);\n      }\n      db.close();\n      resolve(row);\n    });\n  });\n}</code></pre>\n\n\n\n<p>Now our code to search for which quiz an answer is a part of can look like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">get({ table: \"answer\", column: \"answerid\", value: 2 })\n  .then((answer) => {\n    return get({\n      table: \"question\",\n      column: \"questionid\",\n      value: answer.answerquestion,\n    });\n  })\n  .then((question) => {\n    return get({\n      table: \"quiz\",\n      column: \"quizid\",\n      value: question.questionquiz,\n    });\n  })\n  .then((quiz) => {\n    console.log(quiz);\n  })\n  .catch((error) => {\n    console.log(error);\n  }\n);</code></pre>\n\n\n\n<p>That’s a much nicer way to handle our asynchronous code. And we no longer have to individually handle errors for each call, but can use the <code>catch</code> function to handle any errors that happen in our chain of functions.</p>\n\n\n\n<p>We still need to write a lot of callbacks to get this working. Thankfully, there’s a newer API to help! When Node <a href=\"https://github.com/nodejs/node/pull/11185\" rel=\"noopener\">7.6.0</a> was released, it updated its JavaScript engine to <a href=\"https://v8.dev/blog/v8-release-55\" rel=\"noopener\">V8 5.5</a> which includes the ability to write <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" rel=\"noopener\">ES2017 <code>async</code>/<code>await</code> functions</a>.</p>\n\n\n<h3 id=\"asyncawait\">Async/Await</h3>\n\n\n<p>With <code>async</code>/<code>await</code> we can write our asynchronouse code almost the same way we write synchronous code. <a href=\"https://css-tricks.com/understanding-async-await/\" data-type=\"URL\" data-id=\"https://css-tricks.com/understanding-async-await/\">Sarah Drasner has a great post explaining <code>async</code>/<code>await</code></a>.</p>\n\n\n\n<p>When you have a function that returns a <code>Promise</code>, you can use the <code>await</code> keyword before calling it, and it will prevent your code from moving to the next line until the <code>Promise</code> is resolved. As we’ve already refactored the <code>get()</code> function to return a promise, we only need to change our user-code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">async function printQuizFromAnswer() {\n  const answer = await get({ table: \"answer\", column: \"answerid\", value: 2 });\n  const question = await get({\n    table: \"question\",\n    column: \"questionid\",\n    value: answer.answerquestion,\n  });\n  const quiz = await get({\n    table: \"quiz\",\n    column: \"quizid\",\n    value: question.questionquiz,\n  });\n  console.log(quiz);\n}\n\nprintQuizFromAnswer();</code></pre>\n\n\n\n<p>This looks much more familiar to code that we’re used to reading. Just this year, Node released top-level <code>await</code>. This means we can make this example even more concise by removing the <code>printQuizFromAnswer()</code> function wrapping our <code>get()</code> function calls.</p>\n\n\n\n<p>Now we have concise code that will sequentially perform each of these asynchronous tasks. We would also be able to simultaneously fire off other asynchronous functions (like reading from files, or responding to HTTP requests) while we’re waiting for this code to run. This is the benefit of all the asynchronous style.</p>\n\n\n\n<p>As there are so many asynchronous tasks in Node, such as reading from the network or accessing a database or filesystem. It’s especially important to understand these concepts. It also has a bit of a learning curve.</p>\n\n\n<h3 id=\"using-sql-to-its-full-potential\">Using SQL to its full potential</h3>\n\n\n<p>There’s an even better way! Instead of having to worry about these asynchronous calls to get each piece of data, we could use SQL to grab all the data we need in one big query. We can do this with an SQL <code>JOIN</code> query:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// index.js\nimport sqlite3 from \"sqlite3\";\n\nfunction quizFromAnswer(answerid, callback) {\n  let db = new sqlite3.Database(\"quiz.db\");\n  db.get(\n    `SELECT *,a.body AS answerbody, ques.body AS questionbody FROM answer a \n    INNER JOIN question ques ON a.answerquestion=ques.questionid \n    INNER JOIN quiz quiz ON ques.questionquiz = quiz.quizid \n    WHERE a.answerid = ?;`,\n    [answerid],\n    (err, row) => {\n      if (err) {\n        console.log(err);\n      }\n      callback(err, row);\n      db.close();\n    }\n  );\n}\nquizFromAnswer(2, (e, r) => {\n  console.log(r);\n});</code></pre>\n\n\n\n<p>This will return us all the data we need about our answer, question, and quiz in one big object. We’ve also renamed each <code>body</code> column for answers and questions to <code>answerbody</code> and <code>questionbody</code> to differentiate them. As you can see, dropping more logic into the database layer can simplify your JavaScript (as well as possibly improve performance).</p>\n\n\n\n<p>If you’re using a relational database like SQLite, then you have a whole other language to learn, with a whole lot of different features that could save time and effort and increase performance. This adds more to the pile of things to learn for writing Node.</p>\n\n\n<h3 id=\"node-apis-and-conventions\">Node APIs and conventions</h3>\n\n\n<p>There are a lot of new node APIs to learn when switching from browser code to Node.js.</p>\n\n\n\n<p>Any <a href=\"https://expressjs.com/en/guide/database-integration.html\" rel=\"noopener\">database connections</a> and/or <a href=\"https://nodejs.dev/learn/reading-files-with-nodejs\" rel=\"noopener\">reads of the filesystem</a> use APIs that we don’t have in the browser (yet). We also have new APIs to set up <a href=\"https://nodejs.dev/learn/build-an-http-server\" rel=\"noopener\">HTTP servers</a>. We can make checks on the operating system using the <a href=\"https://nodejs.org/dist/latest-v17.x/docs/api/os.html\" rel=\"noopener\">OS module</a>, and we can encrypt data with the <a href=\"https://nodejs.org/en/knowledge/cryptography/how-to-use-crypto-module/\" rel=\"noopener\">Crypto module</a>. Also, to make an HTTP request from node (something we do in the browser all the time), we don’t have a <code>fetch</code> or <code>XMLHttpRequest</code> function. Instead, we need to import the <a href=\"https://nodejs.dev/learn/making-http-requests-with-nodejs\" rel=\"noopener\"><code>https</code> module</a>. However, a recent pull request in the node.js repository shows that <a href=\"https://github.com/nodejs/node/pull/41749\" rel=\"noopener\">fetch in node appears to be on the way</a>! There are still many mismatches between browser and Node APIs. This is one of the problems that Deno has set out to solve.</p>\n\n\n\n<p>We also need to know about Node conventions, including the <code>package.json</code> file. Most front-end developers will be pretty familiar with this if they’ve used build tools. If you’re looking to publish a library, the part you might not be used to is the <code>main</code> property in the <code>package.json</code> file. This property contains a path that will point to the entry-point of the library.</p>\n\n\n\n<p>There are also conventions like error-first callbacks: where a Node API will take a callback which takes an error as the first argument and the result as the second argument. You could see this earlier in our database code and below using the <code>readFile</code> function.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import fs from 'fs';\n\nfs.readFile('myfile.txt', 'utf8' , (err, data) => {\n  if (err) {\n    console.error(err)\n    return\n  }\n  console.log(data)\n})</code></pre>\n\n\n<h3 id=\"different-types-of-modules\">Different types of modules</h3>\n\n\n<p>Earlier on, I casually instructed you to throw <code>\"type\":\"module\"</code> in your <code>package.json</code> file to get the code samples working. When Node was created in 2009, the creators needed a module system, but none existed in the JavaScript specification. They came up with <a href=\"https://requirejs.org/docs/commonjs.html\" rel=\"noopener\">Common.js modules</a> to solve this problem. In 2015, a module spec was introduced to JavaScript, causing Node.js to have a module system that was different from native JavaScript modules. After a herculean effort from the Node team <a href=\"https://nodejs.org/api/esm.html#modules-ecmascript-modules\" rel=\"noopener\">we are now able to use these native JavaScript modules in Node</a>.</p>\n\n\n\n<p>Unfortunately, this means a lot of blog posts and resources will be written using the older module system. It also means that many npm packages won&#8217;t use native JavaScript modules, and sometimes there will be libraries that use native JavaScript modules in incompatible ways!</p>\n\n\n<h3 id=\"other-concerns\">Other concerns</h3>\n\n\n<p>There are a few other concerns we need to think about when writing Node. If you&#8217;re running a Node server and there is a fatal exception, the server will terminate and will stop responding to any requests. This means if you make a mistake that&#8217;s bad enough on a Node server, your app is broken for everyone. This is different from client-side JavaScript where an edge-case that causes a fatal bug is experienced by one user at a time, and that user has the option of refreshing the page.</p>\n\n\n\n<p>Security is something we should already be worried about in the front end with cross-site scripting and cross-site request forgery. But a back-end server has a wider surface area for attacks with vulnerabilities including brute force attacks and SQL injection. If you&#8217;re storing and accessing people&#8217;s information with Node you&#8217;ve got a big responsibility to keep their data safe.</p>\n\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n\n<p>Node is a great way to use your JavaScript skills to build servers and command line tools. JavaScript is a user-friendly language we’re used to writing. And Node’s async-first nature means you can smash through concurrent tasks quickly. But there are a lot of new things to learn when getting started. Here are the resources I wish I saw before jumping in:</p>\n\n\n\n<ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous\" rel=\"noopener\">Asynchronous JavaScript</a> (MDN)</li><li><a href=\"https://css-tricks.com/understanding-async-await/\">Understanding Async Await</a> (Sarah Drasner)</li><li><a href=\"https://nodejs.dev/learn\" rel=\"noopener\">Introduction to Node.js</a> (Node.js Documentation)</li><li><a href=\"https://www.smashingmagazine.com/2019/02/node-api-http-es6-javascript/#the-node-package-manager\" rel=\"noopener\">Get Started With Node</a> (Jamie Corkhill)</li><li><a href=\"https://www.youtube.com/watch?v=ztspvPYybIY\" rel=\"noopener\">Original Node.js presentation</a> (Ryan Dahl)</li><li><a href=\"https://nodejs.org/api/esm.html\" rel=\"noopener\">Native JavaScript modules</a> (Node.js Documentation)</li></ul>\n\n\n\n<p>And if you are planning to hold data in an SQL database, read up on <a href=\"https://www.dataquest.io/blog/sql-basics/\" rel=\"noopener\">SQL Basics</a>.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/node-javascript-compared-to-javascript/\">Comparing Node JavaScript to JavaScript in the Browser</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Being able to understand Node continues to be an important skill if you’re a front-end developer. Deno has arrived as another way to run JavaScript outside the browser, but the huge ecosystem of tools and software built with Node mean it’s not going anywhere anytime soon.\n\n\n\nIf you’ve mainly written JavaScript that runs in the browser and you’re looking to get more of an understanding of the server side, many articles will tell you that Node JavaScript is a great way to write server-side code and capitalize on your JavaScript experience.\n\n\n\n\n\n\n\nI agree, but there are a lot of challenges jumping into Node.js, even if you’re experienced at authoring client-side JavaScript. This article assumes you’ve got Node installed, and you’ve used it to build front-end apps, but want to write your own APIs and tools using Node.\n\n\n\nFor a beginners explanation of Node and npm you can check out Jamie Corkhill’s “Getting Started With Node” on Smashing Magazine.\n\n\nAsynchronous JavaScript\n\n\nWe don’t need to write a whole lot of asynchronous code on the browser. The most common usage of asynchronous code on the browser is fetching data from an API using fetch (or XMLHttpRequest if you’re old-school). Other uses of async code might include using setInterval, setTimeout, or responding to user input events, but we can get pretty far writing JavaScript UI without being asynchronous JavaScript geniuses.\n\n\n\nIf you’re using Node, you will nearly always be writing asynchronous code. From the beginning, Node has been built to leverage a single-threaded event loop using asynchronous callbacks. The Node team blogged in 2011 about how “Node.js promotes an asynchronous coding style from the ground up.” In Ryan Dahl’s talk announcing Node.js in 2009, he talks about the performance benefits of doubling down on asynchronous JavaScript.\n\n\n\nThe asynchronous-first style is part of the reason Node gained popularity over other attempts at server-side JavaScript implementations such as Netscape’s application servers or Narwhal. However, being forced to write asynchronous JavaScript might cause friction if you aren’t ready for it.\n\n\nSetting up an example\n\n\nLet’s say we’re writing a quiz app. We’re going to allow users to build quizes out of multichoice questions to test their friends’ knowledge. You can find a more complete version of what we’ll build at this GitHub repo. You could also clone the entire front-end and back-end to see how it all fits together, or you can take a look at this CodeSandbox (run npm run start to fire it up) and get an idea of what we’re making from there.\n\n\n\n\n\n\n\nThe quizzes in our app will consist of a bunch of questions, and each of these questions will have a number of answers to choose from, with only one answer being correct.\n\n\n\nWe can hold this data in an SQLite database. Our database will contain:\n\n\n\nA table for quizzes with two columns:an integer IDa text titleA table for questions with three columns:an integer IDbody textAn integer reference matching the ID of the quiz each question belongs toA table for answers with four columns:an integer IDbody textwhether the answer is correct or notan integer reference matching the ID of the question each answer belongs to\n\n\n\nSQLite doesn’t have a boolean data type, so we can hold whether an answer is correct in an integer where 0 is false and 1 is true.\n\n\n\nFirst, we’ll need to initialize npm and install the sqlite3 npm package from the command line:\n\n\n\nnpm init -y\nnpm install sqlite3\n\n\n\nThis will create a package.json file. Let’s edit it and add:\n\n\n\n\"type\":\"module\"\n\n\n\nTo the top-level JSON object. This will allow us to use modern ES6 module syntax. Now we can create a node script to set up our tables. Let’s call our script migrate.js.\n\n\n\n// migrate.js\n\nimport sqlite3 from \"sqlite3\"; \n\nlet db = new sqlite3.Database(\"quiz.db\");\n    db.serialize(function () {\n      // Setting up our tables:\n      db.run(\"CREATE TABLE quiz (quizid INTEGER PRIMARY KEY, title TEXT)\");\n      db.run(\"CREATE TABLE question (questionid INTEGER PRIMARY KEY, body TEXT, questionquiz INTEGER, FOREIGN KEY(questionquiz) REFERENCES quiz(quizid))\");\n      db.run(\"CREATE TABLE answer (answerid INTEGER PRIMARY KEY, body TEXT, iscorrect INTEGER, answerquestion INTEGER, FOREIGN KEY(answerquestion) REFERENCES question(questionid))\");\n      // Create a quiz with an id of 0 and a title \"my quiz\" \n      db.run(\"INSERT INTO quiz VALUES(0,\\\"my quiz\\\")\");\n      // Create a question with an id of 0, a question body\n      // and a link to the quiz using the id 0\n      db.run(\"INSERT INTO question VALUES(0,\\\"What is the capital of France?\\\", 0)\");\n      // Create four answers with unique ids, answer bodies, an integer for whether\n      // they're correct or not, and a link to the first question using the id 0\n      db.run(\"INSERT INTO answer VALUES(0,\\\"Madrid\\\",0, 0)\");\n      db.run(\"INSERT INTO answer VALUES(1,\\\"Paris\\\",1, 0)\");\n      db.run(\"INSERT INTO answer VALUES(2,\\\"London\\\",0, 0)\");\n      db.run(\"INSERT INTO answer VALUES(3,\\\"Amsterdam\\\",0, 0)\");\n  });\ndb.close();\n\n\n\nI’m not going to explain this code in detail, but it creates the tables we need to hold our data. It will also create a quiz, a question, and four answers, and store all of this in a file called quiz.db. After saving this file, we can run our script from the command line using this command:\n\n\n\nnode migrate.js\n\n\n\nIf you like, you can open the database file using a tool like DB Browser for SQLite to double check that the data has been created.\n\n\nChanging the way you write JavaScript\n\n\nLet’s write some code to query the data we’ve created.\n\n\n\nCreate a new file and call it index.js .To access our database, we can import sqlite3, create a new sqlite3.Database, and pass the database file path as an argument. On this database object, we can call the get function, passing in an SQL string to select our quiz and a callback that will log the result:\n\n\n\n// index.js\nimport sqlite3 from \"sqlite3\";\n\nlet db = new sqlite3.Database(\"quiz.db\");\n\ndb.get(`SELECT * FROM quiz WHERE quizid  = 0`, (err, row) => {\n  if (err) {\n    console.error(err.message);\n  }\n  console.log(row);\n  db.close();\n});\n\n\n\nRunning this should print { quizid: 0, title: 'my quiz' } in the console.\n\n\nHow not to use callbacks\n\n\nNow let’s wrap this code in a function where we can pass the ID in as an argument; we want to access any quiz by its ID. This function will return the database row object we get from db.\n\n\n\nHere’s where we start running into trouble. We can’t simply return the object inside of the callback we pass to db and walk away. This won’t change what our outer function returns. Instead, you might think we can create a variable (let’s call it result) in the outer function and reassign this variable in the callback. Here is how we might attempt this:\n\n\n\n// index.js\n// Be warned! This code contains BUGS\nimport sqlite3 from \"sqlite3\";\n\nfunction getQuiz(id) {\n  let db = new sqlite3.Database(\"quiz.db\");\n  let result;\n  db.get(`SELECT * FROM quiz WHERE quizid  = ?`, [id], (err, row) => {\n    if (err) {\n      return console.error(err.message);\n    }\n    db.close();\n    result = row;\n  });\n  return result;\n}\nconsole.log(getQuiz(0));\n\n\n\nIf you run this code, the console log will print out undefined! What happened?\n\n\n\nWe’ve run into a disconnect between how we expect JavaScript to run (top to bottom), and how asynchronous callbacks run. The getQuiz function in the above example runs like this:\n\n\n\nWe declare the result variable with let result;. We haven’t assigned anything to this variable so its value is undefined.We call the db.get() function. We pass it an SQL string, the ID, and a callback. But our callback won’t run yet! Instead, the SQLite package starts a task in the background to read from the quiz.db file. Reading from the file system takes a relatively long time, so this API lets our user code move to the next line while Node.js reads from the disk in the background.Our function returns result. As our callback hasn’t run yet, result still holds a value of undefined.SQLite finishes reading from the file system and runs the callback we passed, closing the database and assigning the row to the result variable. Assigning this variable makes no difference as the function has already returned its result.\n\n\nPassing in callbacks\n\n\nHow do we fix this? Before 2015, the way to fix this would be to use callbacks. Instead of only passing the quiz ID to our function, we pass the quiz ID and a callback which will receive the row object as an argument.\n\n\n\nHere’s how this looks:\n\n\n\n// index.js\nimport sqlite3 from \"sqlite3\";\nfunction getQuiz(id, callback) {\n  let db = new sqlite3.Database(\"quiz.db\");\n  db.get(`SELECT * FROM quiz WHERE quizid  = ?`, [id], (err, row) => {\n    if (err) {\n       console.error(err.message);\n    }\n    else {\n       callback(row);\n    }\n    db.close();\n  });\n}\ngetQuiz(0,(quiz)=>{\n  console.log(quiz);\n});\n\n\n\nThat does it. It’s a subtle difference, and one that forces you to change the way your user code looks, but it means now our console.log runs after the query is complete.\n\n\nCallback hell\n\n\nBut what if we need to do multiple consecutive asynchronous calls? For instance, what if we were trying to find out which quiz an answer belonged to, and we only had the ID of the answer.\n\n\n\nFirst, I’m going to refactor getQuiz to a more general get function, so we can pass in the table and column to query, as well as the ID:\n\n\n\nUnfortunately, we are unable to use the (more secure) SQL parameters for parameterizing the table name, so we’re going to switch to using a template string instead. In production code you would need to scrub this string to prevent SQL injection.\n\n\n\nfunction get(params, callback) {\n  // In production these strings should be scrubbed to prevent SQL injection\n  const { table, column, value } = params;\n  let db = new sqlite3.Database(\"quiz.db\");\n  db.get(`SELECT * FROM ${table} WHERE ${column} = ${value}`, (err, row) => {\n    callback(err, row);\n    db.close();\n  });\n}\n\n\n\nAnother issue is that there might be an error reading from the database. Our user code will need to know whether each database query has had an error; otherwise it shouldn’t continue querying the data. We’ll use the Node.js convention of passing an error object as the first argument of our callback. Then we can check if there’s an error before moving forward.\n\n\n\nLet’s take our answer with an id of 2 and check which quiz it belongs to. Here’s how we can do this with callbacks:\n\n\n\n// index.js\nimport sqlite3 from \"sqlite3\";\n\nfunction get(params, callback) {\n  // In production these strings should be scrubbed to prevent SQL injection\n  const { table, column, value } = params;\n  let db = new sqlite3.Database(\"quiz.db\");\n  db.get(`SELECT * FROM ${table} WHERE ${column} = ${value}`, (err, row) => {\n    callback(err, row);\n    db.close();\n  });\n}\n\nget({ table: \"answer\", column: \"answerid\", value: 2 }, (err, answer) => {\n  if (err) {\n    console.log(err);\n  } else {\n    get(\n      { table: \"question\", column: \"questionid\", value: answer.answerquestion },\n      (err, question) => {\n        if (err) {\n          console.log(err);\n        } else {\n          get(\n            { table: \"quiz\", column: \"quizid\", value: question.questionquiz },\n            (err, quiz) => {\n              if (err) {\n                console.log(err);\n              } else {\n                // This is the quiz our answer belongs to\n                console.log(quiz);\n              }\n            }\n          );\n        }\n      }\n    );\n  }\n});\n\n\n\nWoah, that’s a lot of nesting! Every time we get an answer back from the database, we have to add two layers of nesting — one to check for an error, and one for the next callback. As we chain more and more asynchronous calls our code gets deeper and deeper.\n\n\n\nWe could partially prevent this by using named functions instead of anonymous functions, which would keep the nesting lower, but make our code our code less concise. We’d also have to think of names for all of these intermediate functions. Thankfully, promises arrived in Node back in 2015 to help with chained asynchronous calls like this.\n\n\nPromises\n\n\nWrapping asynchronous tasks with promises allows you to prevent a lot of the nesting in the previous example. Rather than having deeper and deeper nested callbacks, we can pass a callback to a Promise’s then function.\n\n\n\nFirst, let’s change our get function so it wraps the database query with a Promise:\n\n\n\n// index.js\nimport sqlite3 from \"sqlite3\";\nfunction get(params) {\n  // In production these strings should be scrubbed to prevent SQL injection\n  const { table, column, value } = params;\n  let db = new sqlite3.Database(\"quiz.db\");\n\n  return new Promise(function (resolve, reject) {\n    db.get(`SELECT * FROM ${table} WHERE ${column} = ${value}`, (err, row) => {\n      if (err) {\n        return reject(err);\n      }\n      db.close();\n      resolve(row);\n    });\n  });\n}\n\n\n\nNow our code to search for which quiz an answer is a part of can look like this:\n\n\n\nget({ table: \"answer\", column: \"answerid\", value: 2 })\n  .then((answer) => {\n    return get({\n      table: \"question\",\n      column: \"questionid\",\n      value: answer.answerquestion,\n    });\n  })\n  .then((question) => {\n    return get({\n      table: \"quiz\",\n      column: \"quizid\",\n      value: question.questionquiz,\n    });\n  })\n  .then((quiz) => {\n    console.log(quiz);\n  })\n  .catch((error) => {\n    console.log(error);\n  }\n);\n\n\n\nThat’s a much nicer way to handle our asynchronous code. And we no longer have to individually handle errors for each call, but can use the catch function to handle any errors that happen in our chain of functions.\n\n\n\nWe still need to write a lot of callbacks to get this working. Thankfully, there’s a newer API to help! When Node 7.6.0 was released, it updated its JavaScript engine to V8 5.5 which includes the ability to write ES2017 async/await functions.\n\n\nAsync/Await\n\n\nWith async/await we can write our asynchronouse code almost the same way we write synchronous code. Sarah Drasner has a great post explaining async/await.\n\n\n\nWhen you have a function that returns a Promise, you can use the await keyword before calling it, and it will prevent your code from moving to the next line until the Promise is resolved. As we’ve already refactored the get() function to return a promise, we only need to change our user-code:\n\n\n\nasync function printQuizFromAnswer() {\n  const answer = await get({ table: \"answer\", column: \"answerid\", value: 2 });\n  const question = await get({\n    table: \"question\",\n    column: \"questionid\",\n    value: answer.answerquestion,\n  });\n  const quiz = await get({\n    table: \"quiz\",\n    column: \"quizid\",\n    value: question.questionquiz,\n  });\n  console.log(quiz);\n}\n\nprintQuizFromAnswer();\n\n\n\nThis looks much more familiar to code that we’re used to reading. Just this year, Node released top-level await. This means we can make this example even more concise by removing the printQuizFromAnswer() function wrapping our get() function calls.\n\n\n\nNow we have concise code that will sequentially perform each of these asynchronous tasks. We would also be able to simultaneously fire off other asynchronous functions (like reading from files, or responding to HTTP requests) while we’re waiting for this code to run. This is the benefit of all the asynchronous style.\n\n\n\nAs there are so many asynchronous tasks in Node, such as reading from the network or accessing a database or filesystem. It’s especially important to understand these concepts. It also has a bit of a learning curve.\n\n\nUsing SQL to its full potential\n\n\nThere’s an even better way! Instead of having to worry about these asynchronous calls to get each piece of data, we could use SQL to grab all the data we need in one big query. We can do this with an SQL JOIN query:\n\n\n\n// index.js\nimport sqlite3 from \"sqlite3\";\n\nfunction quizFromAnswer(answerid, callback) {\n  let db = new sqlite3.Database(\"quiz.db\");\n  db.get(\n    `SELECT *,a.body AS answerbody, ques.body AS questionbody FROM answer a \n    INNER JOIN question ques ON a.answerquestion=ques.questionid \n    INNER JOIN quiz quiz ON ques.questionquiz = quiz.quizid \n    WHERE a.answerid = ?;`,\n    [answerid],\n    (err, row) => {\n      if (err) {\n        console.log(err);\n      }\n      callback(err, row);\n      db.close();\n    }\n  );\n}\nquizFromAnswer(2, (e, r) => {\n  console.log(r);\n});\n\n\n\nThis will return us all the data we need about our answer, question, and quiz in one big object. We’ve also renamed each body column for answers and questions to answerbody and questionbody to differentiate them. As you can see, dropping more logic into the database layer can simplify your JavaScript (as well as possibly improve performance).\n\n\n\nIf you’re using a relational database like SQLite, then you have a whole other language to learn, with a whole lot of different features that could save time and effort and increase performance. This adds more to the pile of things to learn for writing Node.\n\n\nNode APIs and conventions\n\n\nThere are a lot of new node APIs to learn when switching from browser code to Node.js.\n\n\n\nAny database connections and/or reads of the filesystem use APIs that we don’t have in the browser (yet). We also have new APIs to set up HTTP servers. We can make checks on the operating system using the OS module, and we can encrypt data with the Crypto module. Also, to make an HTTP request from node (something we do in the browser all the time), we don’t have a fetch or XMLHttpRequest function. Instead, we need to import the https module. However, a recent pull request in the node.js repository shows that fetch in node appears to be on the way! There are still many mismatches between browser and Node APIs. This is one of the problems that Deno has set out to solve.\n\n\n\nWe also need to know about Node conventions, including the package.json file. Most front-end developers will be pretty familiar with this if they’ve used build tools. If you’re looking to publish a library, the part you might not be used to is the main property in the package.json file. This property contains a path that will point to the entry-point of the library.\n\n\n\nThere are also conventions like error-first callbacks: where a Node API will take a callback which takes an error as the first argument and the result as the second argument. You could see this earlier in our database code and below using the readFile function.\n\n\n\nimport fs from 'fs';\n\nfs.readFile('myfile.txt', 'utf8' , (err, data) => {\n  if (err) {\n    console.error(err)\n    return\n  }\n  console.log(data)\n})\n\n\nDifferent types of modules\n\n\nEarlier on, I casually instructed you to throw \"type\":\"module\" in your package.json file to get the code samples working. When Node was created in 2009, the creators needed a module system, but none existed in the JavaScript specification. They came up with Common.js modules to solve this problem. In 2015, a module spec was introduced to JavaScript, causing Node.js to have a module system that was different from native JavaScript modules. After a herculean effort from the Node team we are now able to use these native JavaScript modules in Node.\n\n\n\nUnfortunately, this means a lot of blog posts and resources will be written using the older module system. It also means that many npm packages won’t use native JavaScript modules, and sometimes there will be libraries that use native JavaScript modules in incompatible ways!\n\n\nOther concerns\n\n\nThere are a few other concerns we need to think about when writing Node. If you’re running a Node server and there is a fatal exception, the server will terminate and will stop responding to any requests. This means if you make a mistake that’s bad enough on a Node server, your app is broken for everyone. This is different from client-side JavaScript where an edge-case that causes a fatal bug is experienced by one user at a time, and that user has the option of refreshing the page.\n\n\n\nSecurity is something we should already be worried about in the front end with cross-site scripting and cross-site request forgery. But a back-end server has a wider surface area for attacks with vulnerabilities including brute force attacks and SQL injection. If you’re storing and accessing people’s information with Node you’ve got a big responsibility to keep their data safe.\n\n\nConclusion\n\n\nNode is a great way to use your JavaScript skills to build servers and command line tools. JavaScript is a user-friendly language we’re used to writing. And Node’s async-first nature means you can smash through concurrent tasks quickly. But there are a lot of new things to learn when getting started. Here are the resources I wish I saw before jumping in:\n\n\n\nAsynchronous JavaScript (MDN)Understanding Async Await (Sarah Drasner)Introduction to Node.js (Node.js Documentation)Get Started With Node (Jamie Corkhill)Original Node.js presentation (Ryan Dahl)Native JavaScript modules (Node.js Documentation)\n\n\n\nAnd if you are planning to hold data in an SQL database, read up on SQL Basics.\n\nComparing Node JavaScript to JavaScript in the Browser originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-18T19:01:08.000Z",
      "date_modified": "2022-02-18T19:01:08.000Z",
      "_plugin": {
        "pageFilename": "6205bbbfb813d4d32be2ee31545df67fb0882e2f4f6be9be9ad1dfc4bd066a47.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363911",
      "url": "https://css-tricks.com/jay-freestone-front-end-predictions-for-2022/",
      "title": "(Jay Freestone’s) Front-End Predictions for 2022",
      "summary": "I linked to Jay’s front-end predictions last year and I think they panned out pretty well. I think he’s got a bit of a knack for that wide-scope look at front-end, including tooling and architecture, as well as browser tech. …\n\n(Jay Freestone’s) Front-End Predictions for 2022 originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>I linked to <a href=\"https://css-tricks.com/jay-freestones-front-end-predictions-for-2021/\">Jay&#8217;s front-end predictions last year</a> and I think they panned out pretty well. I think he&#8217;s got a bit of a knack for that wide-scope look at front-end, including tooling and architecture, as well as browser tech. Let&#8217;s review.</p>\n\n\n\n<span id=\"more-363911\"></span>\n\n\n<h3 id=\"jays-frontend-predictions-for-2021\">Jay&#8217;s front-end predictions for 2021</h3>\n\n\n<ul><li>&#x1f44d; <strong>React framework maturity</strong> is here in the fact that big players like <a href=\"https://nextjs.org/\" rel=\"noopener\">Next</a> and <a href=\"https://www.gatsbyjs.com/\" rel=\"noopener\">Gatsby</a> are stable and have found pretty big markets. New players like <a href=\"https://remix.run/\" rel=\"noopener\">Remix</a> are arriving to clear success. Frameworks like <a href=\"https://astro.build/\" rel=\"noopener\">Astro</a> support React because it means picking up users who have less to learn.</li><li>&#x1f44d; <strong>Early container queries</strong> are here for sure. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries\" rel=\"noopener\">The syntax</a> has nestled in a little bit, there are multiple browsers playing, and <a href=\"https://css-tricks.com/a-new-container-query-polyfill-that-just-works/\">a polyfill is available</a>. We&#8217;re even seeing early days of <a href=\"https://css-tricks.com/container-units-should-be-pretty-handy/\">container <em>units</em></a>. </li><li>&#x1f44d; <strong>WASM adoption</strong> is more iffy to me. I don&#8217;t run in the circles that would be early adopters of it, but anecdotally, I probably heard it talked about more this year than any year past. That tells me it&#8217;s still of high interest.</li><li>&#x1f44d; <strong>Monoliths</strong>, if we&#8217;re just talking site building tools that &#8220;do it all&#8221; probably never stopped being popular, especially if you consider that&#8217;s what WordPress is and has only grown in popularity and usage. Perhaps Jamstack usage is growing, too, which decouples a lot of services. But the biggest players in helping you build Jamstack architectures <em>also</em> help you bring all those services under one roof. Services like Netlify and Vercel are Jamstack hosts, but will also run your serverless functions. <a href=\"https://www.netlify.com/blog/announcing-netlify-graph-a-faster-way-for-teams-to-develop-web-apps-with-apis\" rel=\"noopener\">Netlify Graph</a> is a clear stab at helping you work with APIs in an in-house way, not to mention other features like form processing and auth that help make the approach feel more monolith-y. DigitalOcean&#8217;s App Platform is a Jamstack host, but designed such that any other additional services are right there. The same is true for AWS Amplify or Azure Static Web Apps.</li></ul>\n\n\n\n<p>I added to Jay&#8217;s list the <code>inert</code> attribute, which certainly didn&#8217;t get widely shipped, but we are seeing a smidge of progress on it, with <a href=\"https://firt.dev/ios-15.4b\" rel=\"noopener\">Safari being the first-mover</a>.</p>\n\n\n<h3 id=\"jays-frontend-predictions-for-2022\">Jay&#8217;s front-end predictions for 2022</h3>\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1440\" height=\"810\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/jay-freestone-micro.png?resize=1440%2C810&#038;ssl=1\" alt=\"Illustration of one of Jay's front-end predictions for 2022, micro-frontends.\" class=\"wp-image-363945\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/jay-freestone-micro.png?w=1440&amp;ssl=1 1440w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/jay-freestone-micro.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/jay-freestone-micro.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/jay-freestone-micro.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/jay-freestone-micro.png?resize=1000%2C563&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Source: <a href=\"https://www.jayfreestone.com/writing/frontend-predictions-2022/\" rel=\"noopener\">jayfreestone.com</a></figcaption></figure>\n\n\n\n<p>Let&#8217;s break <a href=\"https://www.jayfreestone.com/writing/frontend-predictions-2022/\" rel=\"noopener\">them</a> down:</p>\n\n\n\n<ul><li><strong>Micro-frontends</strong>. I&#8217;m on the fence here, as I literally don&#8217;t get it. I think I&#8217;ll need to read more about it and see clear examples before I can weigh in on the technical choice here. But from a people perspective, it seems like a questionable move right out of the gate. I get that it&#8217;s complicated to get teams to work together perfectly, but splitting up their responsibilities and depth of technical knowledge doesn&#8217;t seem like a healthy solution that builds great sites.</li><li><strong>The death of Jamstack</strong> (but not really). It&#8217;s mostly about <em>the term itself</em>, which I agree has gotten <a href=\"https://css-tricks.com/the-semantics-of-jamstack/\">far too loaded and, thus, is losing meaning</a>. <em>&#8220;I think in 2022 we’ll see the confusion and exhaustion culminate in a gradual retreat from the term.&#8221;</em> I can see that. Even using it in this post doesn&#8217;t feel quite right anymore. </li><li><strong>Progressive enhancement.</strong> Jay points to frameworks producing functional sites that don&#8217;t require client-side JavaScript, which I agree is a major trend that has all sorts of positive fall-out. And I love it. I generally think of progressive enhancement as developers building interactive components — components that require tech that not all browsers support — and making sure they have some baseline functionality, even if JavaScript, or whatever other tech, fails. I never see that grow in popularity. I think it&#8217;s related to <a href=\"https://css-tricks.com/why-dont-developers-take-accessibility-seriously/\">the things Melanie talks about here</a>.</li><li><strong>Functional JavaScript.</strong> Wild card choice! I like it! I can&#8217;t opine, but this is the kind of thing Jay is good at when it comes to front-end predictions.</li></ul>\n\n\n\n<p></p>\n<p><a href=\"https://www.jayfreestone.com/writing/frontend-predictions-2022/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/jay-freestone-front-end-predictions-for-2022/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/jay-freestone-front-end-predictions-for-2022/\">(Jay Freestone’s) Front-End Predictions for 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "I linked to Jay’s front-end predictions last year and I think they panned out pretty well. I think he’s got a bit of a knack for that wide-scope look at front-end, including tooling and architecture, as well as browser tech. Let’s review.\n\n\n\n\n\n\nJay’s front-end predictions for 2021\n\n\n👍 React framework maturity is here in the fact that big players like Next and Gatsby are stable and have found pretty big markets. New players like Remix are arriving to clear success. Frameworks like Astro support React because it means picking up users who have less to learn.👍 Early container queries are here for sure. The syntax has nestled in a little bit, there are multiple browsers playing, and a polyfill is available. We’re even seeing early days of container units. 👍 WASM adoption is more iffy to me. I don’t run in the circles that would be early adopters of it, but anecdotally, I probably heard it talked about more this year than any year past. That tells me it’s still of high interest.👍 Monoliths, if we’re just talking site building tools that “do it all” probably never stopped being popular, especially if you consider that’s what WordPress is and has only grown in popularity and usage. Perhaps Jamstack usage is growing, too, which decouples a lot of services. But the biggest players in helping you build Jamstack architectures also help you bring all those services under one roof. Services like Netlify and Vercel are Jamstack hosts, but will also run your serverless functions. Netlify Graph is a clear stab at helping you work with APIs in an in-house way, not to mention other features like form processing and auth that help make the approach feel more monolith-y. DigitalOcean’s App Platform is a Jamstack host, but designed such that any other additional services are right there. The same is true for AWS Amplify or Azure Static Web Apps.\n\n\n\nI added to Jay’s list the inert attribute, which certainly didn’t get widely shipped, but we are seeing a smidge of progress on it, with Safari being the first-mover.\n\n\nJay’s front-end predictions for 2022\n\n\nSource: jayfreestone.com\n\n\n\nLet’s break them down:\n\n\n\nMicro-frontends. I’m on the fence here, as I literally don’t get it. I think I’ll need to read more about it and see clear examples before I can weigh in on the technical choice here. But from a people perspective, it seems like a questionable move right out of the gate. I get that it’s complicated to get teams to work together perfectly, but splitting up their responsibilities and depth of technical knowledge doesn’t seem like a healthy solution that builds great sites.The death of Jamstack (but not really). It’s mostly about the term itself, which I agree has gotten far too loaded and, thus, is losing meaning. “I think in 2022 we’ll see the confusion and exhaustion culminate in a gradual retreat from the term.” I can see that. Even using it in this post doesn’t feel quite right anymore. Progressive enhancement. Jay points to frameworks producing functional sites that don’t require client-side JavaScript, which I agree is a major trend that has all sorts of positive fall-out. And I love it. I generally think of progressive enhancement as developers building interactive components — components that require tech that not all browsers support — and making sure they have some baseline functionality, even if JavaScript, or whatever other tech, fails. I never see that grow in popularity. I think it’s related to the things Melanie talks about here.Functional JavaScript. Wild card choice! I like it! I can’t opine, but this is the kind of thing Jay is good at when it comes to front-end predictions.\n\n\n\n\nTo Shared Link — Permalink on CSS-Tricks\n(Jay Freestone’s) Front-End Predictions for 2022 originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-18T15:34:39.000Z",
      "date_modified": "2022-02-18T15:34:39.000Z",
      "_plugin": {
        "pageFilename": "f705e3b70a24ba3590ba8007c1096340eeb054e8c10fd5a01df8f39b4a2b1941.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363179",
      "url": "https://css-tricks.com/subsetting-font-awesome-to-improve-performance/",
      "title": "Subsetting Font Awesome to Improve Performance",
      "summary": "Font Awesome is an incredibly popular icon library. Unfortunately, it’s somewhat easy to use in a way that results in less-than-ideal performance. By subsetting Font Awesome, we can remove any unused glyphs from the font files it provides. This will …\n\nSubsetting Font Awesome to Improve Performance originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><a href=\"https://fontawesome.com/\" rel=\"noopener\">Font Awesome</a> is an incredibly popular icon library. Unfortunately, it’s somewhat easy to use in a way that results in less-than-ideal performance. By subsetting Font Awesome, we can remove any unused glyphs from the font files it provides. This will reduce the number of bytes transmitted over the wire, and improve performance.</p>\n\n\n\n<p>Let’s subset fonts together in a Font Awesome project to see the difference it makes. As we go, I’ll assume you’re importing the CSS file Font Awesome provides, and using its web fonts to display icons.</p>\n\n\n\n<span id=\"more-363179\"></span>\n\n\n<h3 id=\"lets-set-things-up\">Let’s set things up</h3>\n\n\n<p>For the sake of demonstration, I have nothing but an HTML file that imports <a href=\"https://github.com/FortAwesome/Font-Awesome/blob/master/css/fontawesome.min.css\" rel=\"noopener\">Font Awesome’s base CSS file</a>. To get a reasonable sample of icons, I’ve listed out each one that I use on one of my side projects.</p>\n\n\n\n<p>Here’s what our HTML file looks like in the browser before subsetting fonts:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2034\" height=\"150\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172569956_image.png?resize=2034%2C150&#038;ssl=1\" alt=\"Screenshot of a webpage with 54 various icons in a single row.\" class=\"wp-image-363180\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172569956_image.png?w=2034&amp;ssl=1 2034w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172569956_image.png?resize=300%2C22&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172569956_image.png?resize=1024%2C76&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172569956_image.png?resize=768%2C57&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172569956_image.png?resize=1536%2C113&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172569956_image.png?resize=1000%2C74&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Here’s a look at DevTool’s Network tab to see what’s coming down.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1398\" height=\"126\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172623223_image-1.png?resize=1398%2C126&#038;ssl=1\" alt=\"Screenshot of DevTools Network tab showing a stylesheet without font subsetting that weighs 33.4 kilobytes.\" class=\"wp-image-363192\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172623223_image-1.png?w=1398&amp;ssl=1 1398w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172623223_image-1.png?resize=300%2C27&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172623223_image-1.png?resize=1024%2C92&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172623223_image-1.png?resize=768%2C69&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172623223_image-1.png?resize=1000%2C90&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now let’s see how many bytes our font files take to render all that.</p>\n\n\n<h3 id=\"heres-our-base-case\">Here’s our base case</h3>\n\n\n<p>We want to see what the most straightforward, least performant use of Font Awesome looks like. In other words, we want the slowest possible implementation with no optimization. I’m importing the <a href=\"https://github.com/FortAwesome/Font-Awesome/blob/master/css/all.min.css\" rel=\"noopener\"><code>all.min.css</code></a> file Font Awesome provides.</p>\n\n\n\n<p>As we saw above, the gzipped file weighs in at 33.4KB, which isn’t bad at all. Unfortunately, when we peek into DevTool’s Font tab, things get a little worse.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1540\" height=\"568\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172682055_image-1.png?resize=1540%2C568&#038;ssl=1\" alt=\"Screenshot of DevTools Font tab showing five loaded woff-2 files, ranging in size from 138 kilobytes to 185.\" class=\"wp-image-363191\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172682055_image-1.png?w=1540&amp;ssl=1 1540w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172682055_image-1.png?resize=300%2C111&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172682055_image-1.png?resize=1024%2C378&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172682055_image-1.png?resize=768%2C283&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172682055_image-1.png?resize=1536%2C567&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643172682055_image-1.png?resize=1000%2C369&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Yikes. 757KB just for font files. For 54 icons.</figcaption></figure>\n\n\n\n<p>While font files are not as <a href=\"https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4\" rel=\"noopener\">expensive a resource for your browser to handle as JavaScript</a>, those are still bytes your browser needs to pull down, just for some little icons. Consider that some of your users might be browsing your site on mobile, away from a strong or fast internet connection.</p>\n\n\n<h3 id=\"first-attempt-using-purifycss\">First attempt using PurifyCSS</h3>\n\n\n<p>Font Awesome’s main stylesheet contains definitions for literally thousands of icons. But what if we only need a few dozen at most? Surely we could trim out the unneeded stuff?</p>\n\n\n\n<p>There are many tools out there that will analyze your code, and <a href=\"https://css-tricks.com/how-do-you-remove-unused-css-from-a-site/\">remove unused styles from a stylesheet</a>. I happen to be using <a href=\"https://github.com/purifycss/purifycss\" rel=\"noopener\">PurifyCSS</a>. While this library isn’t actively maintained anymore, the idea is the same, and in the end, this isn’t the solution we’re looking for. But let’s see what happens when we trim our CSS down to only what’s needed, which we can do with this script:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const purify = require(\"purify-css\");\n\nconst content = [\"./dist/**/*.js\"]; // Vite-built content\n\npurify(content, [\"./css/fontawesome/css/all.css\"], {\n  minify: true,\n  output: \"./css/fontawesome/css/font-awesome-minimal-build.css\"\n});</code></pre>\n\n\n\n<p>And when we load that newly built CSS file, our CSS bytes over the wire drop quite a bit, from 33KB to just 7.1KB!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1392\" height=\"118\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643173244370_image.png?resize=1392%2C118&#038;ssl=1\" alt=\"Screenshot of the DevTools Network tab showing a loaded stylesheet that is 7.1 kilobytes, thanks to removing unused CSS.\" class=\"wp-image-363183\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643173244370_image.png?w=1392&amp;ssl=1 1392w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643173244370_image.png?resize=300%2C25&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643173244370_image.png?resize=1024%2C87&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643173244370_image.png?resize=768%2C65&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643173244370_image.png?resize=1000%2C85&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But unfortunately, our other Font Awesome font files are unchanged.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1584\" height=\"350\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643173277729_image.png?resize=1584%2C350&#038;ssl=1\" alt=\"Screenshot of the DevTools Font tab showing five loaded font files.\" class=\"wp-image-363184\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643173277729_image.png?w=1584&amp;ssl=1 1584w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643173277729_image.png?resize=300%2C66&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643173277729_image.png?resize=1024%2C226&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643173277729_image.png?resize=768%2C170&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643173277729_image.png?resize=1536%2C339&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643173277729_image.png?resize=1000%2C221&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>What happened? PurifyCSS did its job. It indeed removed the CSS rules for all the unused icons. Unfortunately, it wasn’t capable of reaching into the actual <strong>font files</strong> to trim down the glyphs, in addition to the CSS rules.</p>\n\n\n\n<p>If only there was a tool like PurifyCSS that handles font files…</p>\n\n\n<h3 id=\"subsetters-to-the-rescue\">Subsetters to the rescue!</h3>\n\n\n<p>There are, of course, tools that are capable of removing unused content from font files, and they’re called <strong>subsetters</strong>. A <dfn>subsetter</dfn> analyzes your webpage, looks at your font files, and trims out the unused characters. There are a bunch of tools for subsetting fonts out there, like Zach Leatherman’s <a href=\"https://www.afasterweb.com/2018/03/09/subsetting-fonts-with-glyphhanger/\" rel=\"noopener\">Glyphhanger</a>. As it turns out, subsetting Font Awesome is pretty straightforward because it ships its own built-in subsetters. Let’s take a look.</p>\n\n\n<h3 id=\"subsetting-fonts-automatically\">Subsetting fonts automatically</h3>\n\n\n<p class=\"is-style-explanation\">The auto subsetting and manual subsetting tools I’m about to show you require a paid <a href=\"https://fontawesome.com/plans\" rel=\"noopener\">Font Awesome</a> <a href=\"https://fontawesome.com/plans\" rel=\"noopener\">Pro subscription</a>.</p>\n\n\n\n<p>Font Awesome allows you to set up what it calls <strong>kits</strong>, which are described in the <a href=\"https://fontawesome.com/v6.0/docs/web/setup/use-kit\" rel=\"noopener\">Font Awesome docs</a> as a “knapsack that carries all the icons and awesomeness you need in a neat little lightweight bundle you can sling on the back of your project with ease.” So, rather than importing any and every CSS file, a kit gives you a single script tag you can add to your HTML file’s <code>&lt;head&gt;</code>, and from there, the kit only sends down the font glyphs you actually need from the font file.</p>\n\n\n\n<p>Creating a kit takes about a minute. You’re handed script tag that looks something like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script src=\"https://kit.fontawesome.com/xyzabc.js\" crossorigin=\"anonymous\">&lt;/script></code></pre>\n\n\n\n<p>When the script loads, we now have no CSS files at all, and the JavaScript file is a mere 4KB. Let’s look again at the DevTools Fonts tab to see which font files are loaded now that we&#8217;ve done some subsetting.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1594\" height=\"1136\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174227463_image.png?resize=1594%2C1136&#038;ssl=1\" alt=\"Screenshot of DevTools Font tab showing 24 loaded font files from subsetting Font Awesome with its auto subsetter.\" class=\"wp-image-363185\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174227463_image.png?w=1594&amp;ssl=1 1594w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174227463_image.png?resize=300%2C214&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174227463_image.png?resize=1024%2C730&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174227463_image.png?resize=768%2C547&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174227463_image.png?resize=1536%2C1095&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174227463_image.png?resize=1000%2C713&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We’ve gone from 757KB down to 331KB. <strong>That’s a more than 50% reduction</strong>. But we can still do better than that, especially if all we’re rendering is 54 icons. That&#8217;s where Font Awesome’s manual font subsetter comes into play.</p>\n\n\n<h3 id=\"subsetting-fonts-manually\">Subsetting fonts manually</h3>\n\n\n<p>Wouldn’t it be nice if Font Awesome gave us a tool to literally pick the exact icons we wanted, and then provide a custom build for <em>that</em>? Well, they do. They don’t advertise this too loudly for some reason, but they actually have a desktop application exactly for subsetting fonts manually. The app is <a href=\"https://fontawesome.com/download\" rel=\"noopener\">available to download from their site</a> — but, like the automatic subsetter, this app requires a paid Font Awesome subscription to actually use.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2388\" height=\"1450\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174483712_image.png?resize=2388%2C1450&#038;ssl=1\" alt=\"Screenshot of the Font Awesome desktop app. Icons are displayed as tiles in a grid layout.\" class=\"wp-image-363186\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174483712_image.png?w=2388&amp;ssl=1 2388w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174483712_image.png?resize=300%2C182&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174483712_image.png?resize=1024%2C622&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174483712_image.png?resize=768%2C466&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174483712_image.png?resize=1536%2C933&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174483712_image.png?resize=2048%2C1244&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174483712_image.png?resize=1000%2C607&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Search the icons, choose the family, add what you want, and then click the big blue <strong>Build</strong> button. That’s really all it takes to generate a custom subset of Font Awesome icons.</p>\n\n\n\n<p>Once you hit the button, Font Awesome will ask where it should save your custom build, then it dumps a ZIP file that contains everything you need. In fact, the structure you’ll get is exactly the same as the normal Font Awesome download, which makes things especially simple. And naturally, it lets you save the custom build as a project file so you can open it back up later to add or remove icons as needed.</p>\n\n\n\n<p>We’ll open up DevTools to see the final size of the icons we’re loading, but first, let’s look at the actual font files themselves. The custom build creates many different types, depending on what your browser uses. Let’s focus on the <code>.woff2</code> files, which is what Chrome loads. The same light, regular, duotone, solid, and brand files that were there before are still in place, except this time no file is larger than 5KB… and that’s before they’re gzipped!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"568\" height=\"413\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174820525_image.png?resize=568%2C413&#038;ssl=1\" alt=\"Screenshot of the various font files in a project directory.\" class=\"wp-image-363187\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174820525_image.png?w=568&amp;ssl=1 568w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643174820525_image.png?resize=300%2C218&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>And what about the CSS file? It slims down to just 8KB. With gzip, it’s only 2KB!</p>\n\n\n\n<p>Here’s the final tally in DevTools:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1540\" height=\"348\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175463374_image.png?resize=1540%2C348&#038;ssl=1\" alt=\"Screenshot of the DevTools Network tab showing five loaded fonts with Base64 encoding from font subsetting.\" class=\"wp-image-363188\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175463374_image.png?w=1540&amp;ssl=1 1540w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175463374_image.png?resize=300%2C68&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175463374_image.png?resize=1024%2C231&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175463374_image.png?resize=768%2C174&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175463374_image.png?resize=1536%2C347&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175463374_image.png?resize=1000%2C226&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Before we go, take a quick peek at those font filenames. The <code>fa-light-300.woff2</code> font file is still there, but the others look different. That’s because <a href=\"https://css-tricks.com/adding-vite-to-your-existing-web-app/\">I’m using</a> <a href=\"https://css-tricks.com/adding-vite-to-your-existing-web-app/\">Vite</a> here, and it decided to automatically inline the font files into the CSS, since they&#8217;re so tiny.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2530\" height=\"572\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175643888_image.png?resize=2530%2C572&#038;ssl=1\" alt=\"Screenshot of the inlined Base64 encoding in th at-font-face declaration of a CSS file.\" class=\"wp-image-363189\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175643888_image.png?w=2530&amp;ssl=1 2530w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175643888_image.png?resize=300%2C68&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175643888_image.png?resize=1024%2C232&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175643888_image.png?resize=768%2C174&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175643888_image.png?resize=1536%2C347&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175643888_image.png?resize=2048%2C463&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175643888_image.png?resize=1000%2C226&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>That’s why our CSS file looks a little bigger in the DevTools Network tab than the 2KB we saw before on disk. The tradeoff is that most of those font “files” from above aren’t files at all, but rather Base64-encoded strings embedded right in this CSS file, saving us additional network requests.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1564\" height=\"346\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175596516_image.png?resize=1564%2C346&#038;ssl=1\" alt=\"Screenshot of the DevTools Network tab showing a single CSS file that weighs 20.7 kilobytes.\" class=\"wp-image-363190\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175596516_image.png?w=1564&amp;ssl=1 1564w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175596516_image.png?resize=300%2C66&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175596516_image.png?resize=1024%2C227&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175596516_image.png?resize=768%2C170&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175596516_image.png?resize=1536%2C340&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_B9D1570F104904BAD8AD25E90D25C9285E520182C1D3D9A51CCBAF8563B4D0E8_1643175596516_image.png?resize=1000%2C221&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>All that said, Vite is inlining many different font formats that the browser will never use. But overall it’s a pretty small number of bytes, especially compared to what we were seeing before.</p>\n\n\n\n<p>Before leaving, if you’re wondering whether that desktop font subsetting GUI tool comes in a CLI that can integrate with CI/CD to generate these files at build time, the answer is… not yet. I emailed the Font Awesome folks, and they said something is planned. That&#8217;ll allow users to streamline their build process if and when it ships.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>As you&#8217;ve seen, using something like Font Awesome for icons is super cool. But the default usage might not always be the best approach for your project. To get the smallest file size possible, subsetting fonts is something we can do to trim what we don&#8217;t need, and only serve what we do. That’s the kind of performance we want, especially when it comes to loading fonts, which have <a href=\"https://css-tricks.com/fout-foit-foft/\">traditionally been tough to wrangle</a>.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/subsetting-font-awesome-to-improve-performance/\">Subsetting Font Awesome to Improve Performance</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Font Awesome is an incredibly popular icon library. Unfortunately, it’s somewhat easy to use in a way that results in less-than-ideal performance. By subsetting Font Awesome, we can remove any unused glyphs from the font files it provides. This will reduce the number of bytes transmitted over the wire, and improve performance.\n\n\n\nLet’s subset fonts together in a Font Awesome project to see the difference it makes. As we go, I’ll assume you’re importing the CSS file Font Awesome provides, and using its web fonts to display icons.\n\n\n\n\n\n\nLet’s set things up\n\n\nFor the sake of demonstration, I have nothing but an HTML file that imports Font Awesome’s base CSS file. To get a reasonable sample of icons, I’ve listed out each one that I use on one of my side projects.\n\n\n\nHere’s what our HTML file looks like in the browser before subsetting fonts:\n\n\n\n\n\n\n\nHere’s a look at DevTool’s Network tab to see what’s coming down.\n\n\n\n\n\n\n\nNow let’s see how many bytes our font files take to render all that.\n\n\nHere’s our base case\n\n\nWe want to see what the most straightforward, least performant use of Font Awesome looks like. In other words, we want the slowest possible implementation with no optimization. I’m importing the all.min.css file Font Awesome provides.\n\n\n\nAs we saw above, the gzipped file weighs in at 33.4KB, which isn’t bad at all. Unfortunately, when we peek into DevTool’s Font tab, things get a little worse.\n\n\n\nYikes. 757KB just for font files. For 54 icons.\n\n\n\nWhile font files are not as expensive a resource for your browser to handle as JavaScript, those are still bytes your browser needs to pull down, just for some little icons. Consider that some of your users might be browsing your site on mobile, away from a strong or fast internet connection.\n\n\nFirst attempt using PurifyCSS\n\n\nFont Awesome’s main stylesheet contains definitions for literally thousands of icons. But what if we only need a few dozen at most? Surely we could trim out the unneeded stuff?\n\n\n\nThere are many tools out there that will analyze your code, and remove unused styles from a stylesheet. I happen to be using PurifyCSS. While this library isn’t actively maintained anymore, the idea is the same, and in the end, this isn’t the solution we’re looking for. But let’s see what happens when we trim our CSS down to only what’s needed, which we can do with this script:\n\n\n\nconst purify = require(\"purify-css\");\n\nconst content = [\"./dist/**/*.js\"]; // Vite-built content\n\npurify(content, [\"./css/fontawesome/css/all.css\"], {\n  minify: true,\n  output: \"./css/fontawesome/css/font-awesome-minimal-build.css\"\n});\n\n\n\nAnd when we load that newly built CSS file, our CSS bytes over the wire drop quite a bit, from 33KB to just 7.1KB!\n\n\n\n\n\n\n\nBut unfortunately, our other Font Awesome font files are unchanged.\n\n\n\n\n\n\n\nWhat happened? PurifyCSS did its job. It indeed removed the CSS rules for all the unused icons. Unfortunately, it wasn’t capable of reaching into the actual font files to trim down the glyphs, in addition to the CSS rules.\n\n\n\nIf only there was a tool like PurifyCSS that handles font files…\n\n\nSubsetters to the rescue!\n\n\nThere are, of course, tools that are capable of removing unused content from font files, and they’re called subsetters. A subsetter analyzes your webpage, looks at your font files, and trims out the unused characters. There are a bunch of tools for subsetting fonts out there, like Zach Leatherman’s Glyphhanger. As it turns out, subsetting Font Awesome is pretty straightforward because it ships its own built-in subsetters. Let’s take a look.\n\n\nSubsetting fonts automatically\n\n\nThe auto subsetting and manual subsetting tools I’m about to show you require a paid Font Awesome Pro subscription.\n\n\n\nFont Awesome allows you to set up what it calls kits, which are described in the Font Awesome docs as a “knapsack that carries all the icons and awesomeness you need in a neat little lightweight bundle you can sling on the back of your project with ease.” So, rather than importing any and every CSS file, a kit gives you a single script tag you can add to your HTML file’s <head>, and from there, the kit only sends down the font glyphs you actually need from the font file.\n\n\n\nCreating a kit takes about a minute. You’re handed script tag that looks something like this:\n\n\n\n<script src=\"https://kit.fontawesome.com/xyzabc.js\" crossorigin=\"anonymous\"></script>\n\n\n\nWhen the script loads, we now have no CSS files at all, and the JavaScript file is a mere 4KB. Let’s look again at the DevTools Fonts tab to see which font files are loaded now that we’ve done some subsetting.\n\n\n\n\n\n\n\nWe’ve gone from 757KB down to 331KB. That’s a more than 50% reduction. But we can still do better than that, especially if all we’re rendering is 54 icons. That’s where Font Awesome’s manual font subsetter comes into play.\n\n\nSubsetting fonts manually\n\n\nWouldn’t it be nice if Font Awesome gave us a tool to literally pick the exact icons we wanted, and then provide a custom build for that? Well, they do. They don’t advertise this too loudly for some reason, but they actually have a desktop application exactly for subsetting fonts manually. The app is available to download from their site — but, like the automatic subsetter, this app requires a paid Font Awesome subscription to actually use.\n\n\n\n\n\n\n\nSearch the icons, choose the family, add what you want, and then click the big blue Build button. That’s really all it takes to generate a custom subset of Font Awesome icons.\n\n\n\nOnce you hit the button, Font Awesome will ask where it should save your custom build, then it dumps a ZIP file that contains everything you need. In fact, the structure you’ll get is exactly the same as the normal Font Awesome download, which makes things especially simple. And naturally, it lets you save the custom build as a project file so you can open it back up later to add or remove icons as needed.\n\n\n\nWe’ll open up DevTools to see the final size of the icons we’re loading, but first, let’s look at the actual font files themselves. The custom build creates many different types, depending on what your browser uses. Let’s focus on the .woff2 files, which is what Chrome loads. The same light, regular, duotone, solid, and brand files that were there before are still in place, except this time no file is larger than 5KB… and that’s before they’re gzipped!\n\n\n\n\n\n\n\nAnd what about the CSS file? It slims down to just 8KB. With gzip, it’s only 2KB!\n\n\n\nHere’s the final tally in DevTools:\n\n\n\n\n\n\n\nBefore we go, take a quick peek at those font filenames. The fa-light-300.woff2 font file is still there, but the others look different. That’s because I’m using Vite here, and it decided to automatically inline the font files into the CSS, since they’re so tiny.\n\n\n\n\n\n\n\nThat’s why our CSS file looks a little bigger in the DevTools Network tab than the 2KB we saw before on disk. The tradeoff is that most of those font “files” from above aren’t files at all, but rather Base64-encoded strings embedded right in this CSS file, saving us additional network requests.\n\n\n\n\n\n\n\nAll that said, Vite is inlining many different font formats that the browser will never use. But overall it’s a pretty small number of bytes, especially compared to what we were seeing before.\n\n\n\nBefore leaving, if you’re wondering whether that desktop font subsetting GUI tool comes in a CLI that can integrate with CI/CD to generate these files at build time, the answer is… not yet. I emailed the Font Awesome folks, and they said something is planned. That’ll allow users to streamline their build process if and when it ships.\n\n\n\n\n\n\n\nAs you’ve seen, using something like Font Awesome for icons is super cool. But the default usage might not always be the best approach for your project. To get the smallest file size possible, subsetting fonts is something we can do to trim what we don’t need, and only serve what we do. That’s the kind of performance we want, especially when it comes to loading fonts, which have traditionally been tough to wrangle.\n\nSubsetting Font Awesome to Improve Performance originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-17T15:21:41.000Z",
      "date_modified": "2022-02-17T15:21:41.000Z",
      "_plugin": {
        "pageFilename": "c0bf76405706fc36061b3b1207ab19b8f6ff5492b8e232ba3d3e79606439d7ec.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363872",
      "url": "https://css-tricks.com/top-things-you-didnt-know-you-could-do-with-netlify-cli/",
      "title": "Top Things You Didn’t Know You Could Do With Netlify CLI",
      "summary": "(This is a sponsored post.)\nFirst things first, if you didn’t know Netlify had a CLI, they do.  One of my favorite things about it running the command netlify dev on nearly any static-site generator project is seeing it …\n\nTop Things You Didn’t Know You Could Do With Netlify CLI originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>First things first, if you didn&#8217;t know Netlify had a CLI, <a href=\"https://www.netlify.com/products/cli\" rel=\"noopener\">they do</a>.&nbsp;&nbsp;One of my favorite things about it running the command <code>netlify dev</code> on nearly any static-site generator project is seeing it detect what it should be doing and spinning the site up in a dev server for you. But not just any dev server, a dev server that replicates the Netlify environment, meaning things like running your serverless functions and making your environment variables available.</p>\n\n\n\n<p>Here are five more things you can do with it that you might not realize.</p>\n\n\n\n<span id=\"more-363872\"></span>\n\n\n<h3 id=\"1-create-a-new-site-from-a-template\">1) Create a new site from a template</h3>\n\n\n<p>That&#8217;s right, spin up a new site by typing a single command and walking through the steps. Try it:</p>\n\n\n\n<pre rel=\"Command Line\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">netlify sites:create-template</code></pre>\n\n\n\n<p class=\"is-style-explanation\">There is a shorthand to the CLI as well! Try the above as <code>ntl sites:create-template</code></p>\n\n\n\n<p>As <a href=\"https://www.netlify.com/blog/create-a-site-from-a-template-using-the-netlify-cli\" rel=\"noopener\">Charlie Gerard writes in a blog post</a> about this: </p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>At the moment, our templates include a&nbsp;<a href=\"https://github.com/netlify-templates/gatsby-starter-netlify-cms\" rel=\"noopener\">Gatsby</a>&nbsp;and&nbsp;<a href=\"https://github.com/netlify-templates/one-click-hugo-cms\" rel=\"noopener\">Hugo</a>&nbsp;starter with the Netlify CMS, as well as a&nbsp;<a href=\"https://github.com/netlify-templates/next-netlify-starter\" rel=\"noopener\">Next.js</a>&nbsp;starter.&nbsp;</p><p></p></blockquote>\n\n\n<h3 id=\"2-manage-your-environment-variablesnbsp\">2) Manage your environment variables </h3>\n\n\n<p>The <code>netlify env</code> command, <a href=\"https://cli.netlify.com/commands/env\" rel=\"noopener\">now in Beta</a>, allows you to control environment variables. You can list them out with <code>netlify env:list</code>, get and set (and unset) them. My favorite: move a whole set of them from one site to another like <code>netlify env:migrate --to &lt;to-site-id&gt;</code>.</p>\n\n\n<h3 id=\"3-test-serverless-functions\">3) Test serverless functions</h3>\n\n\n<p>By virtue of spinning up your site locally with the Netlify CLI, your serverless functions will run. You can test that they are working and inspect the network traffic and such that way. But the CLI can help you as well, <a href=\"https://cli.netlify.com/commands/functions\" rel=\"noopener\">the <code>netlify functions</code> command</a> is capable of testing functions at the command line level. For example, <code>netlify functions:invoke</code> can trigger a function with simulated data.</p>\n\n\n<h3 id=\"4-live-stream-your-dev-environment\">4) Live stream your Dev environment</h3>\n\n\n<p>Here&#8217;s <a href=\"https://www.netlify.com/blog/2021/12/14/test-debug-or-live-stream-your-local-development-environment-with-netlify-cli/\" rel=\"noopener\">Melanie Crissey on the Netlify Blog</a> about this: </p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>While Netlify’s collaborative Deploy Previews are our go-to for asynchronous feedback, sometimes you need to drop everything and pair on an issue together. That’s when Netlify Live really shines.</p><p>For example, just last week, our team was working quickly to debug some funky edge case issues with authentication for the&nbsp;<a href=\"https://your-year-on.netlify.com/\" rel=\"noopener\">Your Year on Netlify</a>&nbsp;project. Zach Leatherman, who was working on the fix, spun up a local version of the app with Netlify Live. Within minutes, he was able to see the logs, identify the issue, and make a few changes. Meanwhile, I was able to test out the fix before it was ever deployed—without pulling down a copy of his latest version from a repo. Netlify CLI to the rescue and problem solved!</p></blockquote>\n\n\n\n<p>Remember how I mentioned you spin up a dev environment locally with <code>netlify dev</code>? The trick here is to do <code>netlify dev --live</code>. So rather than a <code>localhost</code> URL that only you would be able to see, you&#8217;ll get a special <code>netlify.live</code> URL that the world can see. </p>\n\n\n<h3 id=\"5-run-netlify-switch-to-switch-between-different-netlify-accounts-like-from-your-personal-side-project-to-a-work-project\">5) Run <code>netlify switch</code> to switch between different Netlify accounts, like from your personal side project to a work project</h3>\n\n\n<p>You literally auth with the CLI (<code>netlify login</code>, imagine that), so that you can act on behalf of your own Netlify account. Deploy sites and whatnot. But it&#8217;s perfectly reasonable that you have multiple Netlify accounts (like work and personal). Running <code>netlify switch</code> makes it trivial to move between accounts. </p>\n\n\n<h3 id=\"bonus\">BONUS!</h3>\n\n\n<p>This video is 50 seconds long and shows how you can go from having some static files locally to a deployed with the CLI:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"Code faster! How to put a site live in 30 seconds with the Netlify CLI\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/4qR_Qs7s7CQ?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/top-things-you-didnt-know-you-could-do-with-netlify-cli/\">Top Things You Didn’t Know You Could Do With Netlify CLI</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "(This is a sponsored post.)\nFirst things first, if you didn’t know Netlify had a CLI, they do.  One of my favorite things about it running the command netlify dev on nearly any static-site generator project is seeing it detect what it should be doing and spinning the site up in a dev server for you. But not just any dev server, a dev server that replicates the Netlify environment, meaning things like running your serverless functions and making your environment variables available.\n\n\n\nHere are five more things you can do with it that you might not realize.\n\n\n\n\n\n\n1) Create a new site from a template\n\n\nThat’s right, spin up a new site by typing a single command and walking through the steps. Try it:\n\n\n\nnetlify sites:create-template\n\n\n\nThere is a shorthand to the CLI as well! Try the above as ntl sites:create-template\n\n\n\nAs Charlie Gerard writes in a blog post about this: \n\n\n\nAt the moment, our templates include a Gatsby and Hugo starter with the Netlify CMS, as well as a Next.js starter. \n\n\n2) Manage your environment variables \n\n\nThe netlify env command, now in Beta, allows you to control environment variables. You can list them out with netlify env:list, get and set (and unset) them. My favorite: move a whole set of them from one site to another like netlify env:migrate --to <to-site-id>.\n\n\n3) Test serverless functions\n\n\nBy virtue of spinning up your site locally with the Netlify CLI, your serverless functions will run. You can test that they are working and inspect the network traffic and such that way. But the CLI can help you as well, the netlify functions command is capable of testing functions at the command line level. For example, netlify functions:invoke can trigger a function with simulated data.\n\n\n4) Live stream your Dev environment\n\n\nHere’s Melanie Crissey on the Netlify Blog about this: \n\n\n\nWhile Netlify’s collaborative Deploy Previews are our go-to for asynchronous feedback, sometimes you need to drop everything and pair on an issue together. That’s when Netlify Live really shines.For example, just last week, our team was working quickly to debug some funky edge case issues with authentication for the Your Year on Netlify project. Zach Leatherman, who was working on the fix, spun up a local version of the app with Netlify Live. Within minutes, he was able to see the logs, identify the issue, and make a few changes. Meanwhile, I was able to test out the fix before it was ever deployed—without pulling down a copy of his latest version from a repo. Netlify CLI to the rescue and problem solved!\n\n\n\nRemember how I mentioned you spin up a dev environment locally with netlify dev? The trick here is to do netlify dev --live. So rather than a localhost URL that only you would be able to see, you’ll get a special netlify.live URL that the world can see. \n\n\n5) Run netlify switch to switch between different Netlify accounts, like from your personal side project to a work project\n\n\nYou literally auth with the CLI (netlify login, imagine that), so that you can act on behalf of your own Netlify account. Deploy sites and whatnot. But it’s perfectly reasonable that you have multiple Netlify accounts (like work and personal). Running netlify switch makes it trivial to move between accounts. \n\n\nBONUS!\n\n\nThis video is 50 seconds long and shows how you can go from having some static files locally to a deployed with the CLI:\n\n\n\n\n\n\n\n\n\n\n\nTop Things You Didn’t Know You Could Do With Netlify CLI originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-17T13:00:00.000Z",
      "date_modified": "2022-02-17T13:00:00.000Z",
      "_plugin": {
        "pageFilename": "c271b23e3d5c19315de157288e23b52439bc1ed47ccf6b5b3d2f7f11598bbed5.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363861",
      "url": "https://css-tricks.com/add-to-calendar-button-ui-widget/",
      "title": "Add-to-Calendar Button UI Widget",
      "summary": "A useful little UI widget thingy here from Jens Kuerschner. Click the add-to-calendar button, get a list of calendar apps, the user selects which one they actually use, and they get what they need for that calendar. Could be a …\n\nAdd-to-Calendar Button UI Widget originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><a href=\"https://jekuer.github.io/add-to-calendar-button/\" rel=\"noopener\">A useful little UI widget thingy</a> here from Jens Kuerschner. Click the add-to-calendar button, get a list of calendar apps, the user selects which one they actually use, and they get what they need for that calendar. Could be a specialized URL they get sent to, or even an <code>.ics</code> file that gets downloaded.</p>\n\n\n\n<span id=\"more-363861\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1280\" height=\"640\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/repo_image.png?resize=1280%2C640&#038;ssl=1\" alt=\"Add-to-Calendar Button banner from the GitHub repo.\" class=\"wp-image-363871\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/repo_image.png?w=1280&amp;ssl=1 1280w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/repo_image.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/repo_image.png?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/repo_image.png?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/repo_image.png?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It&#8217;s pretty easy to use. Here&#8217;s me using the library off of CDNs for both the JavaScript and CSS:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKyXGzm\" src=\"//codepen.io/anon/embed/KKyXGzm?height=450&amp;theme-id=1&amp;slug-hash=KKyXGzm&amp;default-tab=js,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKyXGzm\" title=\"CodePen Embed KKyXGzm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Let&#8217;s do a thought dump!</p>\n\n\n<h3 id=\"the-configuration-as-a-big-chunk-of-json-sitting-in-the-html-as-a-string-is-a-little-weird-to-me\">The configuration as &#8220;a big chunk of JSON sitting in the HTML as a string&#8221; is a little weird to me.</h3>\n\n\n<p>I see the hack where it uses <code>display: none;</code> on the parent to hide that text from rendering, but I think I like the setup where that&#8217;s put into a <code>&lt;script type=\"application/ld+json\"&gt;</code> tag much better. </p>\n\n\n<h3 id=\"the-fallback-for-these-assuming-javascript-doesnt-load-or-execute-correctly-is-nothing\">The fallback for these, assuming JavaScript doesn&#8217;t load or execute correctly, is nothing.</h3>\n\n\n<p>I&#8217;m torn there. Maybe it&#8217;s fine? This seems like bonus functionality anyway. And it&#8217;s presumably sitting next to actual content about the event that a user could add to their calendar however they want. I certainly wouldn&#8217;t want to see non-interactive text saying &#8220;Add to Calendar&#8221; because that&#8217;s worse than nothing. But maybe there could be some kind of generically useful hyperlink that can act as the fallback?</p>\n\n\n<h3 id=\"an-addtocalendar-button-seems-like-a-good-use-case-for-a-web-component\">An add-to-calendar button seems like a good use case for a web component.</h3>\n\n\n<p>Why not an <code>&lt;add-to-calendar&gt;</code> element? That way, the script and styles could be isolated and probably a bit safer for general usage. But how do you do JSON config for a web component? Maybe every single property becomes an attribute? Maybe something like: <code>&lt;add-to-calendar options=\"Apple, Google\", startTime=\"10:15\" /&gt;</code></p>\n\n\n<h3 id=\"the-biggest-problem-to-address-up-front-though-is-that-it-looks-like-the-interactive-element-is-a-ltdivgt-with-all-javascript-handlers\">The biggest problem to address up front, though, is that it looks like the interactive element is a <code>&lt;div&gt;</code> with all JavaScript handlers.</h3>\n\n\n<p>You can&#8217;t <kbd>Tab</kbd> to it at all, so there is no way to activate it. There are no CSS states — it&#8217;s all classes updated by JavaScript. I&#8217;d definitely get this thing updated to be a <code>&lt;button&gt;</code>. And maybe it&#8217;s good timing to <a href=\"https://css-tricks.com/how-to-implement-and-style-the-dialog-element/\">make use of a <code>&lt;dialog&gt;</code> element</a> for the options and use <code>dialog<a href=\"https://css-tricks.com/almanac/selectors/b/backdrop/\">::backdrop</a></code> for that fancy <code><a href=\"https://css-tricks.com/almanac/properties/b/backdrop-filter/\">backdrop-filter</a></code> background.</p>\n\n\n\n<p>Just some constructive criticism, Jens —&nbsp;keep on keepin&#8217; on.</p>\n<p><a href=\"https://jekuer.github.io/add-to-calendar-button/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/add-to-calendar-button-ui-widget/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/add-to-calendar-button-ui-widget/\">Add-to-Calendar Button UI Widget</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "A useful little UI widget thingy here from Jens Kuerschner. Click the add-to-calendar button, get a list of calendar apps, the user selects which one they actually use, and they get what they need for that calendar. Could be a specialized URL they get sent to, or even an .ics file that gets downloaded.\n\n\n\n\n\n\n\n\n\n\n\nIt’s pretty easy to use. Here’s me using the library off of CDNs for both the JavaScript and CSS:\n\n\n\nCodePen Embed Fallback\n\n\n\nLet’s do a thought dump!\n\n\nThe configuration as “a big chunk of JSON sitting in the HTML as a string” is a little weird to me.\n\n\nI see the hack where it uses display: none; on the parent to hide that text from rendering, but I think I like the setup where that’s put into a <script type=\"application/ld+json\"> tag much better. \n\n\nThe fallback for these, assuming JavaScript doesn’t load or execute correctly, is nothing.\n\n\nI’m torn there. Maybe it’s fine? This seems like bonus functionality anyway. And it’s presumably sitting next to actual content about the event that a user could add to their calendar however they want. I certainly wouldn’t want to see non-interactive text saying “Add to Calendar” because that’s worse than nothing. But maybe there could be some kind of generically useful hyperlink that can act as the fallback?\n\n\nAn add-to-calendar button seems like a good use case for a web component.\n\n\nWhy not an <add-to-calendar> element? That way, the script and styles could be isolated and probably a bit safer for general usage. But how do you do JSON config for a web component? Maybe every single property becomes an attribute? Maybe something like: <add-to-calendar options=\"Apple, Google\", startTime=\"10:15\" />\n\n\nThe biggest problem to address up front, though, is that it looks like the interactive element is a <div> with all JavaScript handlers.\n\n\nYou can’t Tab to it at all, so there is no way to activate it. There are no CSS states — it’s all classes updated by JavaScript. I’d definitely get this thing updated to be a <button>. And maybe it’s good timing to make use of a <dialog> element for the options and use dialog::backdrop for that fancy backdrop-filter background.\n\n\n\nJust some constructive criticism, Jens — keep on keepin’ on.\nTo Shared Link — Permalink on CSS-Tricks\nAdd-to-Calendar Button UI Widget originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-17T01:14:21.000Z",
      "date_modified": "2022-02-17T01:14:21.000Z",
      "_plugin": {
        "pageFilename": "b2f1a768bf729fa7f67d32a4850e507f910066c7a39c63bc15fab086084d4442.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363541",
      "url": "https://css-tricks.com/an-auto-filling-css-grid-with-max-columns/",
      "title": "An Auto-Filling CSS Grid With Max Columns of a Minimum Size",
      "summary": "Within Drupal 10 core, we’re implementing a new auto-filling CSS Grid technique that I think is cool enough to share with the world.\nThe requirements are:\n\nThe user specifies a maximum number of columns. This is the auto-filling grid’s “natural” \n\n…\n\nAn Auto-Filling CSS Grid With Max Columns of a Minimum Size originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Within <a href=\"https://www.drupal.org/about/10\" rel=\"noopener\">Drupal 10</a> core, we’re implementing a new auto-filling CSS Grid technique that I think is cool enough to share with the world.</p>\n\n\n\n<p>The requirements are:</p>\n\n\n\n<ul><li>The user specifies a maximum number of columns. This is the auto-filling grid’s “natural” state.</li><li>If a grid cell goes under a user-specified width, the auto-filling grid will readjust itself and decrease the number of columns.</li><li>The grid cells should always stretch to fit the auto-filling grid container’s width, no matter the column count.</li><li>All of this should work independent of viewport width and should not require JavaScript.</li></ul>\n\n\n\n<span id=\"more-363541\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"941\" height=\"735\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CD67796D801BBAFDAD436B33F0CF2F124B6302EF30F4DD7D9B5D738D649D6787_1642520830735_image.png?resize=941%2C735&#038;ssl=1\" alt=\"Screenshot showing the auto-filling CSS Grid's settings in Drupal.\" class=\"wp-image-363542\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CD67796D801BBAFDAD436B33F0CF2F124B6302EF30F4DD7D9B5D738D649D6787_1642520830735_image.png?w=941&amp;ssl=1 941w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CD67796D801BBAFDAD436B33F0CF2F124B6302EF30F4DD7D9B5D738D649D6787_1642520830735_image.png?resize=300%2C234&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CD67796D801BBAFDAD436B33F0CF2F124B6302EF30F4DD7D9B5D738D649D6787_1642520830735_image.png?resize=768%2C600&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"the-autofilling-css-grid-in-action\">The auto-filling CSS Grid in action</h3>\n\n\n<p>Here’s how the resulting auto-filling CSS grid behaves when it is compressed by the draggable div element to its left.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='281' src='https://videopress.com/embed/LDxJCgzV?cover=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\"></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n<h3 id=\"heres-the-code\">Here’s the code</h3>\n\n\n<p>If you’re not looking for the theory behind the auto-filling grid, and just want to copy/paste code, here you go!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid-container {\n  /**\n   * User input values.\n   */\n  --grid-layout-gap: 10px;\n  --grid-column-count: 4;\n  --grid-item--min-width: 100px;\n\n  /**\n   * Calculated values.\n   */\n  --gap-count: calc(var(--grid-column-count) - 1);\n  --total-gap-width: calc(var(--gap-count) * var(--grid-layout-gap));\n  --grid-item--max-width: calc((100% - var(--total-gap-width)) / var(--grid-column-count));\n\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(max(var(--grid-item--min-width), var(--grid-item--max-width)), 1fr));\n  grid-gap: var(--grid-layout-gap);\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxXXbog\" src=\"//codepen.io/anon/embed/xxXXbog?height=750&amp;theme-id=1&amp;slug-hash=xxXXbog&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxXXbog\" title=\"CodePen Embed xxXXbog\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"theory-and-tools-behind-the-autofilling-css-grid\">Theory and tools behind the auto-filling CSS Grid</h3>\n\n\n<p>The code above uses several modern CSS tools including CSS Grid’s <code>repeat()</code>, <code>auto-fill()</code>, and <code>minmax()</code> functions, as well as the CSS <code>max()</code>, and <code>calc()</code> functions. Here’s how it works.</p>\n\n\n<h4 id=\"css-grids-autofill-function\">CSS Grid’s <code>auto-fill()</code> function</h4>\n\n\n<p>The key to all of this is <code>auto-fill()</code>. We need each row to fill up with as many columns as possible. For more info on <code>auto-fill</code>, check out Sara Soueidan’s awesome article on <a href=\"https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\">the difference between <code>auto-fill</code> and <code>auto-fit</code></a>, which includes this helpful video showing how it works.</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://css-tricks.com/wp-content/uploads/2017/12/auto-fill-devtools.mov\" playsinline></video></figure>\n\n\n\n<p>But how to we make sure that it doesn’t fill in <em>too many</em> columns?</p>\n\n\n<h4 id=\"the-css-max-function\">The CSS <code>max()</code> function</h4>\n\n\n<p>That’s where the <code>max()</code> function comes in! We want each grid cell’s width to max out at a certain percentage, say <code>25%</code> for a four-column grid. But, we can’t have it go below the user-specified minimum width.</p>\n\n\n\n<p>So, assuming a four-column grid and minimum cell width of <code>100px</code>, the <code>max()</code> function would look something like: <code>max(25%, 100px)</code>.</p>\n\n\n\n<p>However, the <code>25%</code> value is still not quite correct because it doesn’t take the grid gaps into account. What we really need is something like this instead:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">max(calc(25% - &lt;grid-gap-for-one-cell>), 100px)</code></pre>\n\n\n\n<p>We can <code>calc()</code>-ulate this in CSS! (Who says CSS isn’t programming?)</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--gap-count: calc(var(--grid-column-count) - 1);\n--total-gap-width: calc(var(--gap-count) * var(--grid-layout-gap));\n--grid-item--max-width: calc((100% - var(--total-gap-width)) / var(--grid-column-count));</code></pre>\n\n\n\n<p>Now we have another key to making this work! This will tell the grid cell to go to its maximum width — which takes into account the user-specified columns) — but will never go under <code>100px</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">max(100px, var(--grid-item--max-width))</code></pre>\n\n\n\n<p>Learn more about the <code>max()</code> function with Chris Coyier&#8217;s article on <a href=\"https://css-tricks.com/min-max-and-clamp-are-css-magic/\">the CSS <code>min()</code>,<code>max()</code>, and <code>clamp()</code> functions</a>.</p>\n\n\n<h4 id=\"css-grids-minmax-function\">CSS Grid’s <code>minmax()</code> function</h4>\n\n\n<p>We’re getting close, but there’s one key ingredient that’s missing: The grid doesn’t always stretch to its parent’s container’s width.</p>\n\n\n\n<p>This is exactly what the <code>minmax()</code> function is designed to do. The following CSS will set the minimum width to the <code>&lt;grid-item-width&gt;</code>, and if it has room, it’ll stretch all the cells out equally to fit the parent’s width!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">minmax(&lt;grid-item-width>, 1fr)</code></pre>\n\n\n<h4 id=\"lets-put-it-all-together-and-make-some-magic\">Let’s put it all together and make some magic!</h4>\n\n\n<p>Using the tools above, we can put together this magic bit of code that does exactly what we want!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--gap-count: calc(var(--grid-column-count) - 1);\n--total-gap-width: calc(var(--gap-count) * var(--grid-layout-gap));\n--grid-item--max-width: calc((100% - var(--total-gap-width)) / var(--grid-column-count));\n\ngrid-template-columns: repeat(auto-fill, minmax(max(var(--grid-item--min-width), var(--grid-item--max-width)), 1fr));</code></pre>\n\n\n<h3 id=\"css-is-fun\">CSS is fun!</h3>\n\n\n<p>CSS has really come a long way. I had a lot of fun working on this, and I’m so happy that use-cases like this are now possible without the use of JavaScript.</p>\n\n\n\n<p>Special thanks to Andy Blum, who suggested <code>auto-fill()</code> over <code>auto-fit()</code>. Also, an extremely special thanks to all of the implementors and spec writers who make advanced functions like this standardized and possible.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/an-auto-filling-css-grid-with-max-columns/\">An Auto-Filling CSS Grid With Max Columns of a Minimum Size</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Within Drupal 10 core, we’re implementing a new auto-filling CSS Grid technique that I think is cool enough to share with the world.\n\n\n\nThe requirements are:\n\n\n\nThe user specifies a maximum number of columns. This is the auto-filling grid’s “natural” state.If a grid cell goes under a user-specified width, the auto-filling grid will readjust itself and decrease the number of columns.The grid cells should always stretch to fit the auto-filling grid container’s width, no matter the column count.All of this should work independent of viewport width and should not require JavaScript.\n\n\n\n\n\n\n\n\n\n\nThe auto-filling CSS Grid in action\n\n\nHere’s how the resulting auto-filling CSS grid behaves when it is compressed by the draggable div element to its left.\n\n\n\n\n\n\n\n\nHere’s the code\n\n\nIf you’re not looking for the theory behind the auto-filling grid, and just want to copy/paste code, here you go!\n\n\n\n.grid-container {\n  /**\n   * User input values.\n   */\n  --grid-layout-gap: 10px;\n  --grid-column-count: 4;\n  --grid-item--min-width: 100px;\n\n  /**\n   * Calculated values.\n   */\n  --gap-count: calc(var(--grid-column-count) - 1);\n  --total-gap-width: calc(var(--gap-count) * var(--grid-layout-gap));\n  --grid-item--max-width: calc((100% - var(--total-gap-width)) / var(--grid-column-count));\n\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(max(var(--grid-item--min-width), var(--grid-item--max-width)), 1fr));\n  grid-gap: var(--grid-layout-gap);\n}\n\n\n\nCodePen Embed Fallback\n\n\nTheory and tools behind the auto-filling CSS Grid\n\n\nThe code above uses several modern CSS tools including CSS Grid’s repeat(), auto-fill(), and minmax() functions, as well as the CSS max(), and calc() functions. Here’s how it works.\n\n\nCSS Grid’s auto-fill() function\n\n\nThe key to all of this is auto-fill(). We need each row to fill up with as many columns as possible. For more info on auto-fill, check out Sara Soueidan’s awesome article on the difference between auto-fill and auto-fit, which includes this helpful video showing how it works.\n\n\n\n\n\n\n\nBut how to we make sure that it doesn’t fill in too many columns?\n\n\nThe CSS max() function\n\n\nThat’s where the max() function comes in! We want each grid cell’s width to max out at a certain percentage, say 25% for a four-column grid. But, we can’t have it go below the user-specified minimum width.\n\n\n\nSo, assuming a four-column grid and minimum cell width of 100px, the max() function would look something like: max(25%, 100px).\n\n\n\nHowever, the 25% value is still not quite correct because it doesn’t take the grid gaps into account. What we really need is something like this instead:\n\n\n\nmax(calc(25% - <grid-gap-for-one-cell>), 100px)\n\n\n\nWe can calc()-ulate this in CSS! (Who says CSS isn’t programming?)\n\n\n\n--gap-count: calc(var(--grid-column-count) - 1);\n--total-gap-width: calc(var(--gap-count) * var(--grid-layout-gap));\n--grid-item--max-width: calc((100% - var(--total-gap-width)) / var(--grid-column-count));\n\n\n\nNow we have another key to making this work! This will tell the grid cell to go to its maximum width — which takes into account the user-specified columns) — but will never go under 100px.\n\n\n\nmax(100px, var(--grid-item--max-width))\n\n\n\nLearn more about the max() function with Chris Coyier’s article on the CSS min(),max(), and clamp() functions.\n\n\nCSS Grid’s minmax() function\n\n\nWe’re getting close, but there’s one key ingredient that’s missing: The grid doesn’t always stretch to its parent’s container’s width.\n\n\n\nThis is exactly what the minmax() function is designed to do. The following CSS will set the minimum width to the <grid-item-width>, and if it has room, it’ll stretch all the cells out equally to fit the parent’s width!\n\n\n\nminmax(<grid-item-width>, 1fr)\n\n\nLet’s put it all together and make some magic!\n\n\nUsing the tools above, we can put together this magic bit of code that does exactly what we want!\n\n\n\n--gap-count: calc(var(--grid-column-count) - 1);\n--total-gap-width: calc(var(--gap-count) * var(--grid-layout-gap));\n--grid-item--max-width: calc((100% - var(--total-gap-width)) / var(--grid-column-count));\n\ngrid-template-columns: repeat(auto-fill, minmax(max(var(--grid-item--min-width), var(--grid-item--max-width)), 1fr));\n\n\nCSS is fun!\n\n\nCSS has really come a long way. I had a lot of fun working on this, and I’m so happy that use-cases like this are now possible without the use of JavaScript.\n\n\n\nSpecial thanks to Andy Blum, who suggested auto-fill() over auto-fit(). Also, an extremely special thanks to all of the implementors and spec writers who make advanced functions like this standardized and possible.\n\nAn Auto-Filling CSS Grid With Max Columns of a Minimum Size originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-16T15:06:57.000Z",
      "date_modified": "2022-02-16T15:06:57.000Z",
      "_plugin": {
        "pageFilename": "0da6f2e50643979f00796a411a5adad89ab0ecd502a255fdbedb8abe28fa4d6f.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363604",
      "url": "https://css-tricks.com/gsap-flip-plugin-for-animation/",
      "title": "GSAP Flip Plugin for Animation",
      "summary": "Greensock made the GSAP Flip plugin free in the 3.9 release. FLIP is an animation concept that helps make super performance state-change animations. Ryan Mulligan has a good blog post: \n\nFLIP, coined by Paul Lewis, is an \n\n…\n\nGSAP Flip Plugin for Animation originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><a href=\"https://greensock.com/\" rel=\"noopener\">Greensock</a> made the <a href=\"https://greensock.com/docs/v3/Plugins/Flip\" rel=\"noopener\">GSAP Flip plugin</a> free in the <a href=\"https://greensock.com/3-9/\" rel=\"noopener\">3.9 release</a>. FLIP is an animation concept that helps make super performance state-change animations. Ryan Mulligan <a href=\"https://ryanmulligan.dev/blog/gsap-flip-cart/\" rel=\"noopener\">has a good blog post</a>: </p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>FLIP, coined by&nbsp;<a href=\"https://aerotwist.com/blog/flip-your-animations/\" rel=\"noopener\">Paul Lewis</a>, is an acronym for First, Last, Invert, and Play. The Flip plugin harnesses this technique so that web developers can effortlessly and smoothly transition elements between states.</p></blockquote>\n\n\n\n<span id=\"more-363604\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"512\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/gsap-flip-plugin.png?resize=1024%2C512&#038;ssl=1\" alt=\"GSAP Flip plugin logo.\" class=\"wp-image-363636\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/gsap-flip-plugin.png?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/gsap-flip-plugin.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/gsap-flip-plugin.png?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/gsap-flip-plugin.png?resize=1000%2C500&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/gsap-flip-plugin.png?w=1200&amp;ssl=1 1200w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"examples-using-the-gsap-flip-plugin\">Examples using the GSAP Flip plugin</h3>\n\n\n<p>Taking advantage of FLIP &#8220;by hand&#8221; is certainly possible, but tricky. It&#8217;s an absolutely perfect thing for an animation library to do for us. Greenstock nailed it, as Ryan says:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>1. Get the current state<br>2. Make your state changes<br>3. Call&nbsp;<code>Flip.from(state, options)</code></p></blockquote>\n\n\n\n<p>Deliciously simple. Ryan made an &#8220;add to cart&#8221; effect with it:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwLQLop\" src=\"//codepen.io/anon/embed/RwLQLop?height=480&amp;theme-id=1&amp;slug-hash=RwLQLop&amp;default-tab=result\" height=\"480\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwLQLop\" title=\"CodePen Embed RwLQLop\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I used it just the other day to make a &#8220;mini photo gallery&#8221; that could rotate which image was the big one on top:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ExwXaKy\" src=\"//codepen.io/anon/embed/ExwXaKy?height=550&amp;theme-id=1&amp;slug-hash=ExwXaKy&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ExwXaKy\" title=\"CodePen Embed ExwXaKy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Which, coincidently, is exactly why I ended up blogging <a href=\"https://css-tricks.com/cycle-through-classes-html-element/\">&#8220;How to Cycle Through Classes on an HTML&nbsp;Element&#8221;</a> the other day.</p>\n<p><a href=\"https://greensock.com/docs/v3/Plugins/Flip\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/gsap-flip-plugin-for-animation/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/gsap-flip-plugin-for-animation/\">GSAP Flip Plugin for Animation</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Greensock made the GSAP Flip plugin free in the 3.9 release. FLIP is an animation concept that helps make super performance state-change animations. Ryan Mulligan has a good blog post: \n\n\n\nFLIP, coined by Paul Lewis, is an acronym for First, Last, Invert, and Play. The Flip plugin harnesses this technique so that web developers can effortlessly and smoothly transition elements between states.\n\n\n\n\n\n\n\n\n\n\nExamples using the GSAP Flip plugin\n\n\nTaking advantage of FLIP “by hand” is certainly possible, but tricky. It’s an absolutely perfect thing for an animation library to do for us. Greenstock nailed it, as Ryan says:\n\n\n\n1. Get the current state2. Make your state changes3. Call Flip.from(state, options)\n\n\n\nDeliciously simple. Ryan made an “add to cart” effect with it:\n\n\n\nCodePen Embed Fallback\n\n\n\nI used it just the other day to make a “mini photo gallery” that could rotate which image was the big one on top:\n\n\n\nCodePen Embed Fallback\n\n\n\nWhich, coincidently, is exactly why I ended up blogging “How to Cycle Through Classes on an HTML Element” the other day.\nTo Shared Link — Permalink on CSS-Tricks\nGSAP Flip Plugin for Animation originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-15T21:41:10.000Z",
      "date_modified": "2022-02-15T21:41:10.000Z",
      "_plugin": {
        "pageFilename": "517641e0976c25eec75f82465f31f5e65231284a970aafb451307601e1499a47.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363124",
      "url": "https://css-tricks.com/css-link-hover-effects/",
      "title": "6 Creative Ideas for CSS Link Hover Effects",
      "summary": "Creating CSS link hover effects can add a bit of flair to an otherwise bland webpage. If you’ve ever found yourself stumped trying to make a slick hover effect, then I have six CSS effects for you to take and …\n\n6 Creative Ideas for CSS Link Hover Effects originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Creating CSS link hover effects can add a bit of flair to an otherwise bland webpage. If you’ve ever found yourself stumped trying to make a slick hover effect, then I have six CSS effects for you to take and use for your next project.</p>\n\n\n\n<span id=\"more-363124\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1200\" height=\"478\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/default-link-styled-link-hover.jpg?resize=1200%2C478&#038;ssl=1\" alt=\"A default link hover effect above a styled link hover effect with a rainbow underline.\" class=\"wp-image-363169\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/default-link-styled-link-hover.jpg?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/default-link-styled-link-hover.jpg?resize=300%2C120&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/default-link-styled-link-hover.jpg?resize=1024%2C408&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/default-link-styled-link-hover.jpg?resize=768%2C306&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/default-link-styled-link-hover.jpg?resize=1000%2C398&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Let’s get right to it!</p>\n\n\n\n<p class=\"is-style-explanation\">I know we&#8217;re talking about <code>:hover</code> and all, but it can sometimes (but maybe <a href=\"https://zellwk.com/blog/style-hover-focus-active-states/\" rel=\"noopener\">not always</a>) be a good idea lump <code>:focus</code> in as well, as not all interactions are directly from a mouse, but perhaps a tap or keystroke. </p>\n\n\n<h3 id=\"the-sliding-highlight-link-hover-effect\">The Sliding Highlight Link Hover Effect</h3>\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='281' src='https://videopress.com/embed/iqZZCOBd?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\"></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>This effect applies a box shadow to the inline link, altering the color of the link text in the process. We start with padding all around the link, then add a negative margin of the same value to prevent the padding from disrupting the text flow.</p>\n\n\n\n<p>We will use <code>box-shadow</code> instead of the background property since it allows us to transition.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  box-shadow: inset 0 0 0 0 #54b3d6;\n  color: #54b3d6;\n  margin: 0 -.25rem;\n  padding: 0 .25rem;\n  transition: color .3s ease-in-out, box-shadow .3s ease-in-out;\n}\na:hover {\n  box-shadow: inset 100px 0 0 0 #54b3d6;\n  color: white;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOXMLLY\" src=\"//codepen.io/anon/embed/gOXMLLY?height=300&amp;theme-id=1&amp;slug-hash=gOXMLLY&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOXMLLY\" title=\"CodePen Embed gOXMLLY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"the-text-swappin-link-hover-effect\">The Text Swappin’ Link Hover Effect</h3>\n\n\n<p>Here’s a fun one where we swap the text of the link with some other text on hover. Hover over the text and the linked text slides out as new text slides in.</p>\n\n\n\n<p>Easier to show than tell.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='281' src='https://videopress.com/embed/beZKuNra?cover=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\"></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>There’s quite a bit of trickery happening in this link hover effect. But the magic sauce is using a <a href=\"https://css-tricks.com/a-complete-guide-to-data-attributes/\">data-attribute</a> to define the text that slides in and call it with the <code>content</code> property of the link’s <code>::after</code> pseudo-element.</p>\n\n\n\n<p>First off, the HTML markup:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;p>Hover &lt;a href=\"#\" data-replace=\"get a link\">&lt;span>get a link&lt;/span>&lt;/a>&lt;/p></code></pre>\n\n\n\n<p>That’s a lot of inline markup, but you’re looking at a paragraph tag that contains a link and a span.</p>\n\n\n\n<p>Let’s give link some base styles. We need to give it relative positioning to hold the pseudo-elements — which will be absolutely positioned — in place, make sure it’s displayed as <code>inline-block</code> to get box element styling affordances, and hide any overflow the pseudo-elements might cause.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n}</code></pre>\n\n\n\n<p>The <code>::before</code> and <code>::after</code> pseudo-elements should have some absolute positioning so they stack with the actual link. We’ll make sure they are set to the link’s full width with a zero offset in the left position, setting them up for some sliding action.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a::before,\na::after {\n content: '';\n  position: absolute;\n  width: 100%;\n  left: 0;\n}</code></pre>\n\n\n\n<p>The <code>::after</code> pseudo-element gets the content from the link’s data-attribute that’s in the HTML markup:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a::after {\n  content: attr(data-replace);\n}</code></pre>\n\n\n\n<p>Now we can <code>transform: translate3d()</code> the <code>::after</code> pseudo-element element to the right by 200%. We move it back into position on <code>:hover</code>. While we’re at it, we can give this a zero offset n the <code>top</code> direction. This’ll be important later when we use the <code>::before</code> pseudo-element like an underline below the text.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a::after {\n  content: attr(data-replace);\n  top: 0;\n  transform-origin: 100% 50%;\n  transform: translate3d(200%, 0, 0);\n}\n\na:hover::after,\na:focus::after {\n  transform: translate3d(0, 0, 0);\n}</code></pre>\n\n\n\n<p>We’re also going to <code>transform: scale()</code> the <code>::before</code> pseudo-element so it’s hidden by default, then scale it back up on <code>:hover</code>. We’ll make it small, like <code>2px</code> in height, and pin it to the <code>bottom</code> so it looks like an underline on the text that swaps in with <code>::after</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a::before {\n  background-color: #54b3d6;\n  height: 2px;\n  bottom: 0;\n  transform-origin: 100% 50%;\n  transform: scaleX(0);\n}\n\na:hover::before,\na:focus::before {\n  transform-origin: 0% 50%;\n  transform: scaleX(1);\n}</code></pre>\n\n\n\n<p>The rest is all preference! We drop in a <code>transition</code> on the <code>transform</code> effects, some colors, and whatnot to get the full effect. Those values are totally up to you.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jOarVmy\" src=\"//codepen.io/anon/embed/jOarVmy?height=300&amp;theme-id=1&amp;slug-hash=jOarVmy&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jOarVmy\" title=\"CodePen Embed jOarVmy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<details >\n  <summary>\n          View full CSS      </summary>\n  \n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n}\n\na::before,\na::after {\n content: '';\n  position: absolute;\n  width: 100%;\n  left: 0;\n}\na::before {\n  background-color: #54b3d6;\n  height: 2px;\n  bottom: 0;\n  transform-origin: 100% 50%;\n  transform: scaleX(0);\n  transition: transform .3s cubic-bezier(0.76, 0, 0.24, 1);\n}\na::after {\n  content: attr(data-replace);\n  height: 100%;\n  top: 0;\n  transform-origin: 100% 50%;\n  transform: translate3d(200%, 0, 0);\n  transition: transform .3s cubic-bezier(0.76, 0, 0.24, 1);\n  color: #54b3d6;\n}\n\na:hover::before {\n  transform-origin: 0% 50%;\n  transform: scaleX(1);\n}\na:hover::after {\n  transform: translate3d(0, 0, 0);\n}\n\na span {\n  display: inline-block;\n  transition: transform .3s cubic-bezier(0.76, 0, 0.24, 1);\n}\n\na:hover span {\n  transform: translate3d(-200%, 0, 0);\n}</code></pre>\n\n\n</details>\n\n<h3 id=\"the-growing-background-link-hover-effect\">The Growing Background Link Hover Effect</h3>\n\n\n<p>This is a pretty popular effect I’ve seen used in quite a few places. The idea is that you use the link’s <code>::before</code> pseudo-element as a thick underline that sits slightly behind the actual text of the link. Then, on hover, the pseudo-element expands to cover the whole thing.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='281' src='https://videopress.com/embed/wjEeQ9QG?cover=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\"></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>OK, some base styles for the link. We want no <code>text-decoration</code> since <code>::before</code> will act like one, then some relative positioning to hold <code>::before</code> in place when we give that absolute positioning.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  text-decoration: none;\n  position: relative;\n}</code></pre>\n\n\n\n<p>Now let’s set up <code>::before</code> by making it something like <code>8px</code> tall so it looks like a thick underline. We’ll also give it absolute positioning so we have control to make it the full width of the actual link while offsetting it so it’s at the <code>left</code> and is just a smidge off the <code>bottom</code> so it looks like it’s subtly highlighting the link. May as well give it <code>z-index: -1</code> so we’re assured it sits behind the link.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a::before {\n  content: '';\n  background-color: hsla(196, 61%, 58%, .75);\n  position: absolute;\n  left: 0;\n  bottom: 3px;\n  width: 100%;\n  height: 8px;\n  z-index: -1;\n}</code></pre>\n\n\n\n<p>Nice, nice. Let’s make it appear as though <code>::before</code> is growing when the link is hovered. All we need is to change the height from <code>3px</code> to <code>100%</code>. Notice that I’m also dropping the <code>bottom</code> offset back to zero so the background covers more space when it grows.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a:hover::before {\n  bottom: 0;\n  height: 100%;\n}</code></pre>\n\n\n\n<p>Now for slight transition on those changes:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"10\"><code markup=\"tt\">a::before {\n  content: '';\n  background-color: hsla(196, 61%, 58%, .75);\n  position: absolute;\n  left: 0;\n  bottom: 3px;\n  width: 100%;\n  height: 8px;\n  z-index: -1;\n  transition: all .3s ease-in-out;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxPORam\" src=\"//codepen.io/anon/embed/xxPORam?height=300&amp;theme-id=1&amp;slug-hash=xxPORam&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxPORam\" title=\"CodePen Embed xxPORam\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<details >\n  <summary>\n          View full CSS      </summary>\n  \n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  text-decoration: none;\n  color: #18272F;\n  font-weight: 700;\n  position: relative;\n}\n\na::before {\n  content: '';\n  background-color: hsla(196, 61%, 58%, .75);\n  position: absolute;\n  left: 0;\n  bottom: 3px;\n  width: 100%;\n  height: 8px;\n  z-index: -1;\n  transition: all .3s ease-in-out;\n}\n\na:hover::before {\n  bottom: 0;\n  height: 100%;\n}</code></pre>\n\n\n</details>\n\n<h3 id=\"the-righttoleft-color-swap-link-hover-effect\">The Right-to-Left Color Swap Link Hover Effect</h3>\n\n\n<p>I personally like using this effect for links in a navigation. The link starts in one color without an underline. Then, on hover, a new color slides in from the right while an underline slides in from the left.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='281' src='https://videopress.com/embed/rGcFEGjy?cover=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\"></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>Neat, right? There’s a lot of motion happening in there, so you might consider the accessibility implications and wrap it all in a <code>prefers-reduced-motion</code> query to replace it with something more subtle for those with motion sensitivities.</p>\n\n\n\n<p>Here’s how it works. We give the link a linear background gradient with a hard stop between two colors at the halfway mark.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  background-image: linear-gradient(\n    to right,\n    #54b3d6,\n    #54b3d6 50%,\n    #000 50%\n  );\n}</code></pre>\n\n\n\n<p>We make the background double the link’s width, or <code>200%</code>, and position it all the way over to the left. That way, it’s like only one of the gradients two colors is showing.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"8,9\"><code markup=\"tt\">a {\n  background-image: linear-gradient(\n    to right,\n    #54b3d6,\n    #54b3d6 50%,\n    #000 50%\n  );\n  background-size: 200% 100%;\n  background-position: -100%;\n}</code></pre>\n\n\n\n<p>The magic happens when we reach for a couple of non-standard <code>-webkit-</code>prefixed properties. One strips the color out of the text to make it transparent. The other clips the background gradient to the text so it appears the text is actually the color of the background.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"10,11\"><code markup=\"tt\">a {\n  background-image: linear-gradient(\n    to right,\n    #54b3d6,\n    #54b3d6 50%,\n    #000 50%\n  );\n  background-size: 200% 100%;\n  background-position: -100%;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}</code></pre>\n\n\n\n<p>Still with me? Now let’s make the link’s faux underline by putting <code>::before</code> to use. We’ll give it the same color we gave the on the hidden portion of the link’s background gradient and position it under the actual link so it looks like a proper <code>text-decoration: underline</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a:before {\n  content: '';\n  background: #54b3d6;\n  display: block;\n  position: absolute;\n  bottom: -3px;\n  left: 0;\n  width: 0;\n  height: 3px;\n}</code></pre>\n\n\n\n<p>On hover, we slide <code>::before</code> into place, coming in from the left:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a:hover {\n background-position: 0;\n}</code></pre>\n\n\n\n<p>Now, this is a little tricky. On hover, we make the link’s <code>::before</code> pseudo-element 100% of the link’s width. If we were to apply this directly to the link’s hover, we’d make the link itself full-width, which moves it around the screen. Yikes!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a:hover::before {\n  width: 100%;\n}</code></pre>\n\n\n\n<p>Add a little transition to smooth things out:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"12\"><code markup=\"tt\">a {\n  background-image: linear-gradient(\n    to right,\n    #54b3d6,\n    #54b3d6 50%,\n    #000 50%\n  );\n  background-size: 200% 100%;\n  background-position: -100%;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  transition: all 0.3s ease-in-out;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJOXWPp\" src=\"//codepen.io/anon/embed/OJOXWPp?height=300&amp;theme-id=1&amp;slug-hash=OJOXWPp&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJOXWPp\" title=\"CodePen Embed OJOXWPp\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<details >\n  <summary>\n          View full CSS      </summary>\n  \n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  background-image: linear-gradient(\n    to right,\n    #54b3d6,\n    #54b3d6 50%,\n    #000 50%\n  );\n  background-size: 200% 100%;\n  background-position: -100%;\n  display: inline-block;\n  padding: 5px 0;\n  position: relative;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  transition: all 0.3s ease-in-out;\n}\n\na:before {\n  content: '';\n  background: #54b3d6;\n  display: block;\n  position: absolute;\n  bottom: -3px;\n  left: 0;\n  width: 0;\n  height: 3px;\n  transition: all 0.3s ease-in-out;\n}\n\na:hover {\n background-position: 0;\n}\n\na:hover::before {\n  width:100%;\n}</code></pre>\n\n\n</details>\n\n<h3 id=\"the-rainbow-underline-link-hover-effect\">The Rainbow Underline Link Hover Effect</h3>\n\n\n<p>We can’t do <code>text-decoration-color: rainbow</code>, but we can fake it with a little <code>background</code> magic mixed with linear gradients.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='281' src='https://videopress.com/embed/5Ziv8a9R?cover=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\"></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>First, we remove the link’s <code>text-decoration</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  text-decoration: none;\n}</code></pre>\n\n\n\n<p>Now for those gradients. We chain two linear gradients together on the same <code>background</code> property. One gradient is the initial color before hover. The second is the rainbow on hover.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  background:\n    linear-gradient(\n      to right,\n      rgba(100, 200, 200, 1),\n      rgba(100, 200, 200, 1)\n    ),\n    linear-gradient(\n      to right,\n      rgba(255, 0, 0, 1),\n      rgba(255, 0, 180, 1),\n      rgba(0, 100, 200, 1)\n  );\n}</code></pre>\n\n\n\n<p>Let’s make the background size a mere <code>3px</code> tall so it looks like, you know, an underline. We can size both gradients together on the <code>background-size</code> property so that the initial gradient is full width and <code>3px</code> tall, and the rainbow is zero width.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"14\"><code markup=\"tt\">a {\n  background:\n    linear-gradient(\n      to right,\n      rgba(100, 200, 200, 1),\n      rgba(100, 200, 200, 1)\n    ),\n    linear-gradient(\n      to right,\n      rgba(255, 0, 0, 1),\n      rgba(255, 0, 180, 1),\n      rgba(0, 100, 200, 1)\n  );\n  background-size: 100% 3px, 0 3px;\n}</code></pre>\n\n\n\n<p>Now we can position the background gradients — at the same time on the <code>background-position</code> property — so that the first gradient is fully in view and the rainbow is pushed out of view. Oh, and let’s make sure the background isn’t repeating while we’re at it.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"15,16\"><code markup=\"tt\">a {\n  background:\n    linear-gradient(\n      to right,\n      rgba(100, 200, 200, 1),\n      rgba(100, 200, 200, 1)\n    ),\n    linear-gradient(\n      to right,\n      rgba(255, 0, 0, 1),\n      rgba(255, 0, 180, 1),\n      rgba(0, 100, 200, 1)\n  );\n  background-size: 100% 3px, 0 3px;\n  background-position: 100% 100%, 0 100%;\n  background-repeat: no-repeat;\n}</code></pre>\n\n\n\n<p>Let’s update the <code>background-size</code> on hover so that the gradients swap values:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a:hover {\n  background-size: 0 3px, 100% 3px;\n}</code></pre>\n\n\n\n<p>And, finally, a little transition when the hover takes place:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"17\"><code markup=\"tt\">a {\n  background:\n    linear-gradient(\n      to right,\n      rgba(100, 200, 200, 1),\n      rgba(100, 200, 200, 1)\n    ),\n    linear-gradient(\n      to right,\n      rgba(255, 0, 0, 1),\n      rgba(255, 0, 180, 1),\n      rgba(0, 100, 200, 1)\n  );\n  background-size: 100% 3px, 0 3px;\n  background-position: 100% 100%, 0 100%;\n  background-repeat: no-repeat;\n  transition: background-size 400ms;\n}</code></pre>\n\n\n\n<p>Voilà!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOXMgxR\" src=\"//codepen.io/anon/embed/gOXMgxR?height=300&amp;theme-id=1&amp;slug-hash=gOXMgxR&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOXMgxR\" title=\"CodePen Embed gOXMgxR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"the-passing-underline-link-hover-effect\">The Passing Underline Link Hover Effect</h3>\n\n\n<p>Geoff Graham actually <a href=\"https://css-tricks.com/adam-argyles-sick-mouse-out-css-hover-effect/\">covered this same one</a> recently when he dissected Adam Argyle’s slick hover effect. In his demo, a background color enters from the left behind the link, then exits to the right on mouse out.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='281' src='https://videopress.com/embed/OQg9SgcI?cover=1&amp;playsinline=1&amp;posterUrl=https%3A%2F%2Fcss-tricks.com%2Fwp-content%2Fuploads%2F2021%2F12%2Fadam-cool-link-effect-1_mp4_hd_1080p.original-1.jpg&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\"></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>My version pares down the background so it’s more of an underline.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  position: relative;\n}\n\na::before {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 4px;\n    border-radius: 4px;\n    background-color: #18272F;\n    bottom: 0;\n    left: 0;\n    transform-origin: right;\n    transform: scaleX(0);\n    transition: transform .3s ease-in-out;\n  }\n\na:hover::before {\n  transform-origin: left;\n  transform: scaleX(1);\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxPOgmZ\" src=\"//codepen.io/anon/embed/xxPOgmZ?height=300&amp;theme-id=1&amp;slug-hash=xxPOgmZ&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxPOgmZ\" title=\"CodePen Embed xxPOgmZ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>That&#8217;s not the only way to accomplish this! <a href=\"https://css-tricks.com/adam-argyles-sick-mouse-out-css-hover-effect/#comment-1787995\">Here&#8217;s another one by Justin Wong</a> using <code>background</code> instead:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwMBgZB\" src=\"//codepen.io/anon/embed/VwMBgZB?height=350&amp;theme-id=1&amp;slug-hash=VwMBgZB&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwMBgZB\" title=\"CodePen Embed VwMBgZB\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">Geoff also has a <a href=\"https://css-tricks.com/having-fun-with-link-hover-effects/\">roundup of CSS link hover effects</a>, ranging from neat to downright absurd. Worth checking out!</p>\n\n\n<h3 id=\"have-a-blast-linking\">Have a blast linking!</h3>\n\n\n<p>There are a lot of options when it comes to creating your own hover effect for in-line links with CSS. You can even play with these effects and create something new. I hope you liked the article. Keep experimenting!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-link-hover-effects/\">6 Creative Ideas for CSS Link Hover Effects</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Creating CSS link hover effects can add a bit of flair to an otherwise bland webpage. If you’ve ever found yourself stumped trying to make a slick hover effect, then I have six CSS effects for you to take and use for your next project.\n\n\n\n\n\n\n\n\n\n\n\nLet’s get right to it!\n\n\n\nI know we’re talking about :hover and all, but it can sometimes (but maybe not always) be a good idea lump :focus in as well, as not all interactions are directly from a mouse, but perhaps a tap or keystroke. \n\n\nThe Sliding Highlight Link Hover Effect\n\n\n\n\n\n\n\n\nThis effect applies a box shadow to the inline link, altering the color of the link text in the process. We start with padding all around the link, then add a negative margin of the same value to prevent the padding from disrupting the text flow.\n\n\n\nWe will use box-shadow instead of the background property since it allows us to transition.\n\n\n\na {\n  box-shadow: inset 0 0 0 0 #54b3d6;\n  color: #54b3d6;\n  margin: 0 -.25rem;\n  padding: 0 .25rem;\n  transition: color .3s ease-in-out, box-shadow .3s ease-in-out;\n}\na:hover {\n  box-shadow: inset 100px 0 0 0 #54b3d6;\n  color: white;\n}\n\n\n\nCodePen Embed Fallback\n\n\nThe Text Swappin’ Link Hover Effect\n\n\nHere’s a fun one where we swap the text of the link with some other text on hover. Hover over the text and the linked text slides out as new text slides in.\n\n\n\nEasier to show than tell.\n\n\n\n\n\n\n\n\n\nThere’s quite a bit of trickery happening in this link hover effect. But the magic sauce is using a data-attribute to define the text that slides in and call it with the content property of the link’s ::after pseudo-element.\n\n\n\nFirst off, the HTML markup:\n\n\n\n<p>Hover <a href=\"#\" data-replace=\"get a link\"><span>get a link</span></a></p>\n\n\n\nThat’s a lot of inline markup, but you’re looking at a paragraph tag that contains a link and a span.\n\n\n\nLet’s give link some base styles. We need to give it relative positioning to hold the pseudo-elements — which will be absolutely positioned — in place, make sure it’s displayed as inline-block to get box element styling affordances, and hide any overflow the pseudo-elements might cause.\n\n\n\na {\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n}\n\n\n\nThe ::before and ::after pseudo-elements should have some absolute positioning so they stack with the actual link. We’ll make sure they are set to the link’s full width with a zero offset in the left position, setting them up for some sliding action.\n\n\n\na::before,\na::after {\n content: '';\n  position: absolute;\n  width: 100%;\n  left: 0;\n}\n\n\n\nThe ::after pseudo-element gets the content from the link’s data-attribute that’s in the HTML markup:\n\n\n\na::after {\n  content: attr(data-replace);\n}\n\n\n\nNow we can transform: translate3d() the ::after pseudo-element element to the right by 200%. We move it back into position on :hover. While we’re at it, we can give this a zero offset n the top direction. This’ll be important later when we use the ::before pseudo-element like an underline below the text.\n\n\n\na::after {\n  content: attr(data-replace);\n  top: 0;\n  transform-origin: 100% 50%;\n  transform: translate3d(200%, 0, 0);\n}\n\na:hover::after,\na:focus::after {\n  transform: translate3d(0, 0, 0);\n}\n\n\n\nWe’re also going to transform: scale() the ::before pseudo-element so it’s hidden by default, then scale it back up on :hover. We’ll make it small, like 2px in height, and pin it to the bottom so it looks like an underline on the text that swaps in with ::after.\n\n\n\na::before {\n  background-color: #54b3d6;\n  height: 2px;\n  bottom: 0;\n  transform-origin: 100% 50%;\n  transform: scaleX(0);\n}\n\na:hover::before,\na:focus::before {\n  transform-origin: 0% 50%;\n  transform: scaleX(1);\n}\n\n\n\nThe rest is all preference! We drop in a transition on the transform effects, some colors, and whatnot to get the full effect. Those values are totally up to you.\n\n\n\nCodePen Embed Fallback\n\n\n\n\n  \n          View full CSS      \n  \n\na {\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n}\n\na::before,\na::after {\n content: '';\n  position: absolute;\n  width: 100%;\n  left: 0;\n}\na::before {\n  background-color: #54b3d6;\n  height: 2px;\n  bottom: 0;\n  transform-origin: 100% 50%;\n  transform: scaleX(0);\n  transition: transform .3s cubic-bezier(0.76, 0, 0.24, 1);\n}\na::after {\n  content: attr(data-replace);\n  height: 100%;\n  top: 0;\n  transform-origin: 100% 50%;\n  transform: translate3d(200%, 0, 0);\n  transition: transform .3s cubic-bezier(0.76, 0, 0.24, 1);\n  color: #54b3d6;\n}\n\na:hover::before {\n  transform-origin: 0% 50%;\n  transform: scaleX(1);\n}\na:hover::after {\n  transform: translate3d(0, 0, 0);\n}\n\na span {\n  display: inline-block;\n  transition: transform .3s cubic-bezier(0.76, 0, 0.24, 1);\n}\n\na:hover span {\n  transform: translate3d(-200%, 0, 0);\n}\n\n\n\n\nThe Growing Background Link Hover Effect\n\n\nThis is a pretty popular effect I’ve seen used in quite a few places. The idea is that you use the link’s ::before pseudo-element as a thick underline that sits slightly behind the actual text of the link. Then, on hover, the pseudo-element expands to cover the whole thing.\n\n\n\n\n\n\n\n\n\nOK, some base styles for the link. We want no text-decoration since ::before will act like one, then some relative positioning to hold ::before in place when we give that absolute positioning.\n\n\n\na {\n  text-decoration: none;\n  position: relative;\n}\n\n\n\nNow let’s set up ::before by making it something like 8px tall so it looks like a thick underline. We’ll also give it absolute positioning so we have control to make it the full width of the actual link while offsetting it so it’s at the left and is just a smidge off the bottom so it looks like it’s subtly highlighting the link. May as well give it z-index: -1 so we’re assured it sits behind the link.\n\n\n\na::before {\n  content: '';\n  background-color: hsla(196, 61%, 58%, .75);\n  position: absolute;\n  left: 0;\n  bottom: 3px;\n  width: 100%;\n  height: 8px;\n  z-index: -1;\n}\n\n\n\nNice, nice. Let’s make it appear as though ::before is growing when the link is hovered. All we need is to change the height from 3px to 100%. Notice that I’m also dropping the bottom offset back to zero so the background covers more space when it grows.\n\n\n\na:hover::before {\n  bottom: 0;\n  height: 100%;\n}\n\n\n\nNow for slight transition on those changes:\n\n\n\na::before {\n  content: '';\n  background-color: hsla(196, 61%, 58%, .75);\n  position: absolute;\n  left: 0;\n  bottom: 3px;\n  width: 100%;\n  height: 8px;\n  z-index: -1;\n  transition: all .3s ease-in-out;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\n\n  \n          View full CSS      \n  \n\na {\n  text-decoration: none;\n  color: #18272F;\n  font-weight: 700;\n  position: relative;\n}\n\na::before {\n  content: '';\n  background-color: hsla(196, 61%, 58%, .75);\n  position: absolute;\n  left: 0;\n  bottom: 3px;\n  width: 100%;\n  height: 8px;\n  z-index: -1;\n  transition: all .3s ease-in-out;\n}\n\na:hover::before {\n  bottom: 0;\n  height: 100%;\n}\n\n\n\n\nThe Right-to-Left Color Swap Link Hover Effect\n\n\nI personally like using this effect for links in a navigation. The link starts in one color without an underline. Then, on hover, a new color slides in from the right while an underline slides in from the left.\n\n\n\n\n\n\n\n\n\nNeat, right? There’s a lot of motion happening in there, so you might consider the accessibility implications and wrap it all in a prefers-reduced-motion query to replace it with something more subtle for those with motion sensitivities.\n\n\n\nHere’s how it works. We give the link a linear background gradient with a hard stop between two colors at the halfway mark.\n\n\n\na {\n  background-image: linear-gradient(\n    to right,\n    #54b3d6,\n    #54b3d6 50%,\n    #000 50%\n  );\n}\n\n\n\nWe make the background double the link’s width, or 200%, and position it all the way over to the left. That way, it’s like only one of the gradients two colors is showing.\n\n\n\na {\n  background-image: linear-gradient(\n    to right,\n    #54b3d6,\n    #54b3d6 50%,\n    #000 50%\n  );\n  background-size: 200% 100%;\n  background-position: -100%;\n}\n\n\n\nThe magic happens when we reach for a couple of non-standard -webkit-prefixed properties. One strips the color out of the text to make it transparent. The other clips the background gradient to the text so it appears the text is actually the color of the background.\n\n\n\na {\n  background-image: linear-gradient(\n    to right,\n    #54b3d6,\n    #54b3d6 50%,\n    #000 50%\n  );\n  background-size: 200% 100%;\n  background-position: -100%;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n\n\n\nStill with me? Now let’s make the link’s faux underline by putting ::before to use. We’ll give it the same color we gave the on the hidden portion of the link’s background gradient and position it under the actual link so it looks like a proper text-decoration: underline.\n\n\n\na:before {\n  content: '';\n  background: #54b3d6;\n  display: block;\n  position: absolute;\n  bottom: -3px;\n  left: 0;\n  width: 0;\n  height: 3px;\n}\n\n\n\nOn hover, we slide ::before into place, coming in from the left:\n\n\n\na:hover {\n background-position: 0;\n}\n\n\n\nNow, this is a little tricky. On hover, we make the link’s ::before pseudo-element 100% of the link’s width. If we were to apply this directly to the link’s hover, we’d make the link itself full-width, which moves it around the screen. Yikes!\n\n\n\na:hover::before {\n  width: 100%;\n}\n\n\n\nAdd a little transition to smooth things out:\n\n\n\na {\n  background-image: linear-gradient(\n    to right,\n    #54b3d6,\n    #54b3d6 50%,\n    #000 50%\n  );\n  background-size: 200% 100%;\n  background-position: -100%;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  transition: all 0.3s ease-in-out;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\n\n  \n          View full CSS      \n  \n\na {\n  background-image: linear-gradient(\n    to right,\n    #54b3d6,\n    #54b3d6 50%,\n    #000 50%\n  );\n  background-size: 200% 100%;\n  background-position: -100%;\n  display: inline-block;\n  padding: 5px 0;\n  position: relative;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  transition: all 0.3s ease-in-out;\n}\n\na:before {\n  content: '';\n  background: #54b3d6;\n  display: block;\n  position: absolute;\n  bottom: -3px;\n  left: 0;\n  width: 0;\n  height: 3px;\n  transition: all 0.3s ease-in-out;\n}\n\na:hover {\n background-position: 0;\n}\n\na:hover::before {\n  width:100%;\n}\n\n\n\n\nThe Rainbow Underline Link Hover Effect\n\n\nWe can’t do text-decoration-color: rainbow, but we can fake it with a little background magic mixed with linear gradients.\n\n\n\n\n\n\n\n\n\nFirst, we remove the link’s text-decoration:\n\n\n\na {\n  text-decoration: none;\n}\n\n\n\nNow for those gradients. We chain two linear gradients together on the same background property. One gradient is the initial color before hover. The second is the rainbow on hover.\n\n\n\na {\n  background:\n    linear-gradient(\n      to right,\n      rgba(100, 200, 200, 1),\n      rgba(100, 200, 200, 1)\n    ),\n    linear-gradient(\n      to right,\n      rgba(255, 0, 0, 1),\n      rgba(255, 0, 180, 1),\n      rgba(0, 100, 200, 1)\n  );\n}\n\n\n\nLet’s make the background size a mere 3px tall so it looks like, you know, an underline. We can size both gradients together on the background-size property so that the initial gradient is full width and 3px tall, and the rainbow is zero width.\n\n\n\na {\n  background:\n    linear-gradient(\n      to right,\n      rgba(100, 200, 200, 1),\n      rgba(100, 200, 200, 1)\n    ),\n    linear-gradient(\n      to right,\n      rgba(255, 0, 0, 1),\n      rgba(255, 0, 180, 1),\n      rgba(0, 100, 200, 1)\n  );\n  background-size: 100% 3px, 0 3px;\n}\n\n\n\nNow we can position the background gradients — at the same time on the background-position property — so that the first gradient is fully in view and the rainbow is pushed out of view. Oh, and let’s make sure the background isn’t repeating while we’re at it.\n\n\n\na {\n  background:\n    linear-gradient(\n      to right,\n      rgba(100, 200, 200, 1),\n      rgba(100, 200, 200, 1)\n    ),\n    linear-gradient(\n      to right,\n      rgba(255, 0, 0, 1),\n      rgba(255, 0, 180, 1),\n      rgba(0, 100, 200, 1)\n  );\n  background-size: 100% 3px, 0 3px;\n  background-position: 100% 100%, 0 100%;\n  background-repeat: no-repeat;\n}\n\n\n\nLet’s update the background-size on hover so that the gradients swap values:\n\n\n\na:hover {\n  background-size: 0 3px, 100% 3px;\n}\n\n\n\nAnd, finally, a little transition when the hover takes place:\n\n\n\na {\n  background:\n    linear-gradient(\n      to right,\n      rgba(100, 200, 200, 1),\n      rgba(100, 200, 200, 1)\n    ),\n    linear-gradient(\n      to right,\n      rgba(255, 0, 0, 1),\n      rgba(255, 0, 180, 1),\n      rgba(0, 100, 200, 1)\n  );\n  background-size: 100% 3px, 0 3px;\n  background-position: 100% 100%, 0 100%;\n  background-repeat: no-repeat;\n  transition: background-size 400ms;\n}\n\n\n\nVoilà!\n\n\n\nCodePen Embed Fallback\n\n\nThe Passing Underline Link Hover Effect\n\n\nGeoff Graham actually covered this same one recently when he dissected Adam Argyle’s slick hover effect. In his demo, a background color enters from the left behind the link, then exits to the right on mouse out.\n\n\n\n\n\n\n\n\n\nMy version pares down the background so it’s more of an underline.\n\n\n\na {\n  position: relative;\n}\n\na::before {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 4px;\n    border-radius: 4px;\n    background-color: #18272F;\n    bottom: 0;\n    left: 0;\n    transform-origin: right;\n    transform: scaleX(0);\n    transition: transform .3s ease-in-out;\n  }\n\na:hover::before {\n  transform-origin: left;\n  transform: scaleX(1);\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nThat’s not the only way to accomplish this! Here’s another one by Justin Wong using background instead:\n\n\n\nCodePen Embed Fallback\n\n\n\nGeoff also has a roundup of CSS link hover effects, ranging from neat to downright absurd. Worth checking out!\n\n\nHave a blast linking!\n\n\nThere are a lot of options when it comes to creating your own hover effect for in-line links with CSS. You can even play with these effects and create something new. I hope you liked the article. Keep experimenting!\n\n6 Creative Ideas for CSS Link Hover Effects originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-15T15:37:04.000Z",
      "date_modified": "2022-02-15T15:37:04.000Z",
      "_plugin": {
        "pageFilename": "5c65df51b6319cd7e1aa6e715545f8d85092df5bf6dfaba23308e04170aa5b74.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363739",
      "url": "https://css-tricks.com/wordpress-com-has-a-new-home-on-youtube/",
      "title": "WordPress.com Has a New Home on YouTube",
      "summary": "(This is a sponsored post.)\n✋ High fives to WordPress for releasing version 5.9 on January 29! This was the long-awaited introduction of the Site Editor and the reverberations are still being felt across the 43% slice of the …\n\nWordPress.com Has a New Home on YouTube originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>&#x270b; High fives to WordPress for <a href=\"https://wordpress.org/support/wordpress-version/version-5-9/\" rel=\"noopener\">releasing version 5.9</a> on January 29! This was the long-awaited introduction of the Site Editor and the reverberations are still being felt across the 43% slice of the web that is powered by WordPress.</p>\n\n\n\n<p>The Site Editor is more than a neat feature: it&#8217;s a completely new approach to theming in WordPress. What makes it a big deal is that it lowers what was once a pretty high barrier to entry for anyone who wants to create or customize a WordPress theme, thanks to a visual interface that takes the PHP out of everything. If you&#8217;re interested more in this transition, check out Ganesh Dahal&#8217;s <a href=\"https://css-tricks.com/a-deep-introduction-to-wordpress-block-themes/\">Deep Introduction to WordPress Block Themes</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2828\" height=\"1862\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-3.16.09-PM.png?resize=2828%2C1862&#038;ssl=1\" alt=\"\" class=\"wp-image-363740\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-3.16.09-PM.png?w=2828&amp;ssl=1 2828w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-3.16.09-PM.png?resize=300%2C198&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-3.16.09-PM.png?resize=1024%2C674&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-3.16.09-PM.png?resize=768%2C506&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-3.16.09-PM.png?resize=1536%2C1011&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-3.16.09-PM.png?resize=2048%2C1348&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-3.16.09-PM.png?resize=1000%2C658&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Need a new template? All it takes is a click and dropping some blocks into place.</figcaption></figure>\n\n\n<h3 id=\"learn-the-site-editor-on-wordpresscoms-youtube-page\">Learn the Site Editor on WordPress.com&#8217;s YouTube Page</h3>\n\n\n<p>The Site Editor, like many things about WordPress, is intuitive as heck. But it&#8217;s still such a new concept that it might be worth getting a few pointers on how to use it.</p>\n\n\n\n<p>That&#8217;s why <a href=\"https://wordpress.com/blog/2022/02/01/wordpress-com-has-a-new-home-on-youtube/?aff=8638\" rel=\"noopener\">the WordPress.com team set up</a> a <a href=\"https://www.youtube.com/wordpressdotcom\" rel=\"noopener\">brand spankin&#8217; new YouTube channel </a>full of fresh videos that walk you through it, including how full-site editing works, how to set up a homepage, and much more.</p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"WordPress.com Has a New Home on YouTube\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/02orlyrlNHs?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p>The idea is that this WordPress.com YouTube channel can be your go-to for all sorts of educational resources to support your ongoing website-building needs. There&#8217;s already a good amount of content in there with plans for more videos released regularly.</p>\n\n\n\n<p>And just because the videos center around WordPress.com, anyone running a WordPress site, self-hosted or not, will benefit from these step-by-step tutorials.</p>\n\n\n\n<div class=\"wp-container-6216c512f0e9b wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://www.youtube.com/wordpressdotcom\" rel=\"noopener\">Subscribe on YouTube</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/wordpress-com-has-a-new-home-on-youtube/\">WordPress.com Has a New Home on YouTube</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "(This is a sponsored post.)\n✋ High fives to WordPress for releasing version 5.9 on January 29! This was the long-awaited introduction of the Site Editor and the reverberations are still being felt across the 43% slice of the web that is powered by WordPress.\n\n\n\nThe Site Editor is more than a neat feature: it’s a completely new approach to theming in WordPress. What makes it a big deal is that it lowers what was once a pretty high barrier to entry for anyone who wants to create or customize a WordPress theme, thanks to a visual interface that takes the PHP out of everything. If you’re interested more in this transition, check out Ganesh Dahal’s Deep Introduction to WordPress Block Themes.\n\n\n\nNeed a new template? All it takes is a click and dropping some blocks into place.\n\n\nLearn the Site Editor on WordPress.com’s YouTube Page\n\n\nThe Site Editor, like many things about WordPress, is intuitive as heck. But it’s still such a new concept that it might be worth getting a few pointers on how to use it.\n\n\n\nThat’s why the WordPress.com team set up a brand spankin’ new YouTube channel full of fresh videos that walk you through it, including how full-site editing works, how to set up a homepage, and much more.\n\n\n\n\n\n\n\n\n\nThe idea is that this WordPress.com YouTube channel can be your go-to for all sorts of educational resources to support your ongoing website-building needs. There’s already a good amount of content in there with plans for more videos released regularly.\n\n\n\nAnd just because the videos center around WordPress.com, anyone running a WordPress site, self-hosted or not, will benefit from these step-by-step tutorials.\n\n\n\n\nSubscribe on YouTube\n\n\nWordPress.com Has a New Home on YouTube originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-15T15:35:35.000Z",
      "date_modified": "2022-02-15T15:35:35.000Z",
      "_plugin": {
        "pageFilename": "ce1cbd9ec30c5fc38452eeacde42c99b886623d6c4695ae5b8cc95c849884045.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363555",
      "url": "https://css-tricks.com/why-are-hyperlinks-blue/",
      "title": "Why are hyperlinks blue?",
      "summary": "Last year, Elise Blanchard did some great historical research and discovered that blue hyperlinks replaced black hyperlinks in 1993. They’ve been blue for so long now that the general advice I always hear is to keep them that way. There …\n\nWhy are hyperlinks blue? originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Last year, Elise Blanchard <a href=\"https://blog.mozilla.org/en/internet-culture/deep-dives/why-are-hyperlinks-blue/\" rel=\"noopener\">did some great historical research</a> and discovered that blue hyperlinks replaced black hyperlinks in 1993. They&#8217;ve been blue for so long now that the general advice I always hear is to keep them that way. There is  powerful societal muscle memory for &#8220;blue text is a clickable link.&#8221;</p>\n\n\n\n<p><em>BUT WHY?!</em></p>\n\n\n\n<span id=\"more-363555\"></span>\n\n\n\n<p>On a hot tip, Elise <a href=\"https://blog.mozilla.org/en/internet-culture/why-are-hyperlinks-blue-revisited/\" rel=\"noopener\">kept digging and published a follow-up</a> and identified the source of blue hyperlinks:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>[&#8230;] it is Prof. Ben Shneiderman whom we can thank for the modern blue hyperlink.</p></blockquote>\n\n\n\n<p>But it didn&#8217;t start on the web. It was more about <a href=\"https://css-tricks.com/chapter-1-birth/\">operating systems in the very early 1990s</a> that started using blue for interactive components and highlighted text. </p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>The decision to make hyperlinks blue in Mosaic, and the reason why we see it happening in Cello at the same time, is that by 1993, blue was becoming the industry standard for interaction for hypertext. It had been eight years since the initial research on blue as a hyperlink color. This data had been shared, presented at conferences, and printed in industry magazines. Hypertext went on to be discussed in multiple forums. Diverse teams’ research came to the same conclusion – color mattered. If it didn’t inspire Marc Andreessen and Eric Bina directly, it inspired those around them and those in their industry.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/windows-3.1-1024x467-1.png?resize=649%2C296&#038;ssl=1\" alt=\"Windows 3.1 screenshot showing hyperlinks blue.\" class=\"wp-image-363557\" width=\"649\" height=\"296\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/windows-3.1-1024x467-1.png?w=1024&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/windows-3.1-1024x467-1.png?resize=300%2C137&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/windows-3.1-1024x467-1.png?resize=768%2C350&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/windows-3.1-1024x467-1.png?resize=1000%2C456&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p> Because research:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>[&#8230;] the blue hyperlink was indeed inspired by the research done at the University of Maryland.</p></blockquote>\n<p><a href=\"https://blog.mozilla.org/en/internet-culture/deep-dives/why-are-hyperlinks-blue/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/why-are-hyperlinks-blue/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/why-are-hyperlinks-blue/\">Why are hyperlinks blue?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Last year, Elise Blanchard did some great historical research and discovered that blue hyperlinks replaced black hyperlinks in 1993. They’ve been blue for so long now that the general advice I always hear is to keep them that way. There is  powerful societal muscle memory for “blue text is a clickable link.”\n\n\n\nBUT WHY?!\n\n\n\n\n\n\n\nOn a hot tip, Elise kept digging and published a follow-up and identified the source of blue hyperlinks:\n\n\n\n[…] it is Prof. Ben Shneiderman whom we can thank for the modern blue hyperlink.\n\n\n\nBut it didn’t start on the web. It was more about operating systems in the very early 1990s that started using blue for interactive components and highlighted text. \n\n\n\nThe decision to make hyperlinks blue in Mosaic, and the reason why we see it happening in Cello at the same time, is that by 1993, blue was becoming the industry standard for interaction for hypertext. It had been eight years since the initial research on blue as a hyperlink color. This data had been shared, presented at conferences, and printed in industry magazines. Hypertext went on to be discussed in multiple forums. Diverse teams’ research came to the same conclusion – color mattered. If it didn’t inspire Marc Andreessen and Eric Bina directly, it inspired those around them and those in their industry.\n\n\n\n\n\n\n\n Because research:\n\n\n\n[…] the blue hyperlink was indeed inspired by the research done at the University of Maryland.\nTo Shared Link — Permalink on CSS-Tricks\nWhy are hyperlinks blue? originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-14T20:13:31.000Z",
      "date_modified": "2022-02-14T20:13:31.000Z",
      "_plugin": {
        "pageFilename": "8ba48a5b37e8654d5200a04733a24d378ac394c89fd3997ccae109c467a16883.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363339",
      "url": "https://css-tricks.com/getting-started-with-the-file-system-access-api/",
      "title": "Getting Started With the File System Access API",
      "summary": "The File System Access API is a web API that allows read and write access to a user’s local files. It unlocks new capabilities to build powerful web applications, such as text editors or IDEs, image editing tools, improved …\n\nGetting Started With the File System Access API originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>The File System Access API is a web API that allows read and write access to a user&#8217;s local files. It unlocks new capabilities to build powerful web applications, such as text editors or <abbr>IDE</abbr>s, image editing tools, improved import/export, all in the frontend. Let’s look into how to get started using this API.</p>\n\n\n\n<span id=\"more-363339\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1994\" height=\"1262\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/file-system-prompt.png.webp?resize=1994%2C1262&#038;ssl=1\" alt=\"Screenshot of an alert popup asking the user if they want the site to be able to view their files via the File System Access API.\" class=\"wp-image-363344\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/file-system-prompt.png.webp?w=1994&amp;ssl=1 1994w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/file-system-prompt.png.webp?resize=300%2C190&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/file-system-prompt.png.webp?resize=1024%2C648&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/file-system-prompt.png.webp?resize=768%2C486&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/file-system-prompt.png.webp?resize=1536%2C972&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/file-system-prompt.png.webp?resize=1000%2C633&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"reading-files-with-the-file-system-access-api\">Reading files with the File System Access API</h3>\n\n\n<p>Before diving into the code required to read a file from the user&#8217;s system, an important detail to keep in mind is that <strong>calling the File System Access API needs to be done by a user gesture, in a secure context</strong>. In the following example, we&#8217;ll use a click event.</p>\n\n\n<h4 id=\"reading-from-a-single-file\">Reading from a single file</h4>\n\n\n<p>Reading data from a file can be done in less than 10 lines of code. Here&#8217;s an example code sample:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let fileHandle;\n \ndocument.querySelector(\".pick-file\").onclick = async () => {\n [fileHandle] = await window.showOpenFilePicker();\n \n const file = await fileHandle.getFile();\n const content = await file.text();\n \n return content;\n};</code></pre>\n\n\n\n<p>Let&#8217;s imagine we have a button in our HTML with the class <code>.pick-file</code>. When clicking on this button, we launch the file picker by calling <code>window.showOpenFilePicker()</code>, and we store the result from this query in a variable called <code>fileHandle</code>.&nbsp;</p>\n\n\n\n<p>What we get back from calling <code>showOpenFilePicker()</code> is an array of <a href=\"https://wicg.github.io/file-system-access/#api-filesystemfilehandle\" rel=\"noopener\"><code>FileSystemFileHandle</code></a> objects representing each file we selected. As this example is for a single file, we destructure the result. I&#8217;ll show how to select multiple files a bit later.</p>\n\n\n\n<p>These objects contain a <code>kind</code> and <code>name</code> property. If you were to use <code>console.log(fileHandle)</code>, you would see the following object:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">FileSystemFileHandle {kind: 'file', name: 'data.txt'}</code></pre>\n\n\n\n<p>The <code>kind</code> can either be <code>file</code> or <code>directory</code>.</p>\n\n\n\n<p>On <code>fileHandle</code>, we can then call the <code>getFile()</code> method to get details about our file. Calling this method returns an object with a few properties, including a timestamp of when the file was last modified, the name of the file, its size, and type.</p>\n\n\n\n<p>Finally, we can call <code>text()</code> on the file to get its content.</p>\n\n\n<h4 id=\"reading-from-multiple-files\">Reading from multiple files</h4>\n\n\n<p>To read from multiple files, we need to pass an <code>options</code> object to <code>showOpenFilePicker()</code>.</p>\n\n\n\n<p>For example:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let fileHandles;\nconst options = {\n multiple: true,\n};\n \ndocument.querySelector(\".pick-file\").onclick = async () => {\n fileHandles = await window.showOpenFilePicker(options);\n \n // The rest of the code will be shown below\n};</code></pre>\n\n\n\n<p>By default, the <code>multiple</code> property is set to <code>false</code>. Other options can be used to indicate the types of files that can be selected.</p>\n\n\n\n<p>For example, if we only wanted to accept <code>.jpeg</code> files, the options object would include the following:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const options = {\n types: [\n   {\n     description: \"Images\",\n     accept: {\n       \"image/jpeg\": \".jpeg\",\n     },\n   },\n ],\n excludeAcceptAllOption: true,\n};</code></pre>\n\n\n\n<p>In this example, <code>fileHandles</code> is an array containing multiple files, so getting their content would be done in the following way:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let fileHandles;\nconst options = {\n multiple: true,\n};\n \ndocument.querySelector(\".pick-file\").onclick = async () => {\n fileHandles = await window.showOpenFilePicker(options);\n \n const allContent = await Promise.all(\n   fileHandles.map(async (fileHandle) => {\n     const file = await fileHandle.getFile();\n     const content = await file.text();\n     return content;\n   })\n );\n \n console.log(allContent);\n};</code></pre>\n\n\n<h3 id=\"writing-to-a-file-with-the-file-system-access-api\">Writing to a file with the File System Access API</h3>\n\n\n<p>The File System Access API also allows you to write content to files. First, let&#8217;s look into how to save a new file.</p>\n\n\n<h4 id=\"writing-to-a-new-file\">Writing to a new file</h4>\n\n\n<p>Writing to a new file can also be done in a very short amount of code!</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.querySelector(\".save-file\").onclick = async () => {\n const options = {\n   types: [\n     {\n       description: \"Test files\",\n       accept: {\n         \"text/plain\": [\".txt\"],\n       },\n     },\n   ],\n };\n \n const handle = await window.showSaveFilePicker(options);\n const writable = await handle.createWritable();\n \n await writable.write(\"Hello World\");\n await writable.close();\n \n return handle;\n};</code></pre>\n\n\n\n<p>If we imagine a second button with the class <code>save-file</code>, on click, we open the file picker with the method <code>showSaveFilePicker()</code> and we pass in an <code>option</code> object containing the type of file to be saved, here a <code>.txt</code> file.</p>\n\n\n\n<p>Calling this method will also return a <code>FileSystemFileHandle</code> object like in the first section. On this object, we can call the <code>createWritable()</code> method that will return a <code>FileSystemWritableFileStream</code> object. We can then write some content to this stream with the <code>write()</code> method in which we need to pass the content.</p>\n\n\n\n<p>Finally, we need to call the <code>close()</code> method to close the file and finish writing the content to disk.</p>\n\n\n\n<p>If you wanted to write some HTML code to a file for example, you would only need to change what&#8217;s in the <code>options</code> object to accept <code>\"text/html\": [\".html\"]</code>&nbsp; and pass some HTML content to the <code>write()</code> method.</p>\n\n\n<h4 id=\"editing-an-existing-file\">Editing an existing file</h4>\n\n\n<p>If you&#8217;d like to import a file and edit it with the File System Access API,&nbsp; an example code sample would look like:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let fileHandle;\n \ndocument.querySelector(\".pick-file\").onclick = async () => {\n [fileHandle] = await window.showOpenFilePicker();\n \n const file = await fileHandle.getFile();\n const writable = await fileHandle.createWritable();\n \n await writable.write(\"This is a new line\");\n await writable.close();\n};</code></pre>\n\n\n\n<p>If you&#8217;ve been following the rest of this post, you might recognize that we start with the <code>showOpenFilePicker()</code> and <code>getFile()</code> methods to read a file and we then use <code>createWritable()</code>, <code>write()</code> and <code>close()</code> to write to that same file.</p>\n\n\n\n<p>If the file you&#8217;re importing already has content, this code sample will replace the current content with the new one passed into the <code>write()</code> method.</p>\n\n\n<h3 id=\"additional-file-system-access-api-features\">Additional File System Access API features</h3>\n\n\n<p>Without going into too much detail, the File System Access API also lets you list files in directories and delete files or directories.</p>\n\n\n<h4 id=\"read-directories\">Read directories</h4>\n\n\n<p>Reading directories can be done with a tiny bit of code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.querySelector(\".read-dir\").onclick = async () => {\n const directoryHandle = await window.showDirectoryPicker();\n \n for await (const entry of directoryHandle.values()) {\n   console.log(entry.kind, entry.name);\n }\n};</code></pre>\n\n\n\n<p>If we add a new button with the class <code>.read-dir</code>, on click, calling the <code>showDirectoryPicker()</code> method will open the file picker and, when selecting a directory on your computer, this code will list the files found in that directory.</p>\n\n\n<h4 id=\"delete-files\">Delete files</h4>\n\n\n<p>Deleting a file in a directory can be done with the following code sample:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.querySelector(\".pick-file\").onclick = async () => {\n const [fileHandle] = await window.showOpenFilePicker();\n await fileHandle.remove();\n};</code></pre>\n\n\n\n<p>If you want to delete a folder, you only need to make a small change to the code sample above:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.querySelector(\".read-dir\").onclick = async () => {\n const directoryHandle = await window.showDirectoryPicker();\n await directoryHandle.remove();\n};</code></pre>\n\n\n\n<p>Finally, if you want to remove a specific file when selecting a folder, you could write it like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Delete a single file named data.txt in the selected folder\ndocument.querySelector(\".pick-folder\").onclick = async () => {\n   const directoryHandle = await window.showDirectoryPicker();\n   await directoryHandle.removeEntry(\"data.txt\");\n};</code></pre>\n\n\n\n<p>And if you want to remove an entire folder, you would need the following lines:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Recursively delete the folder named \"data\"\ndocument.querySelector(\".pick-folder\").onclick = async () => {\n   const directoryHandle = await window.showDirectoryPicker();\n   await directoryHandle.removeEntry('data', { recursive: true });\n};</code></pre>\n\n\n<h3 id=\"file-system-access-api-browser-support\">File System Access API browser support</h3>\n\n\n<p>At the moment, IE and Firefox don&#8217;t seem to be supporting the File System Access API. However, there exists a <a href=\"https://github.com/sindresorhus/ponyfill\" rel=\"noopener\">ponyfill</a> called <a href=\"https://github.com/GoogleChromeLabs/browser-fs-access\" rel=\"noopener\">browser-fs-access</a>.</p>\n\n\n<div class=\"caniuse\"><div class=\"caniuse-header\"><p>This browser support data is from <a href=\"http://caniuse.com/#feat=native-filesystem-api\" rel=\"noopener\">Caniuse</a>, which has more detail. A number indicates that browser supports the feature at that version and up.</p></div><div class=\"caniuse-section\"><h4>Desktop</h4><table class=\"browser-support-table\"><thead><tr><th class=\"chrome\"><span>Chrome</span></th><th class=\"firefox\"><span>Firefox</span></th><th class=\"ie\"><span>IE</span></th><th class=\"edge\"><span>Edge</span></th><th class=\"safari\"><span>Safari</span></th></tr></thead><tbody><tr><td class=\"a yep-nope yep-nope-partial\" title=\"Chrome - \"><span class=\"caniuse-agents-version version\">101</span></td><td class=\"n nope\" title=\"Firefox - \"><span class=\"caniuse-agents-version version\">No</span></td><td class=\"n nope\" title=\"IE - \"><span class=\"caniuse-agents-version version\">No</span></td><td class=\"a yep-nope yep-nope-partial\" title=\"Edge - \"><span class=\"caniuse-agents-version version\">98</span></td><td class=\"a yep-nope yep-nope-partial\" title=\"Safari - \"><span class=\"caniuse-agents-version version\">TP</span></td></tr></table></div><div class=\"caniuse-section\"><h4>Mobile / Tablet</h4><table class=\"browser-support-table\"><thead><tr><th class=\"and_chr\"><span>Android Chrome</span></th><th class=\"and_ff\"><span>Android Firefox</span></th><th class=\"android\"><span>Android</span></th><th class=\"ios_saf\"><span>iOS Safari</span></th></tr></thead><tbody><tr><td class=\"n nope\" title=\"Android Chrome - \"><span class=\"caniuse-agents-version version\">No</span></td><td class=\"n nope\" title=\"Android Firefox - \"><span class=\"caniuse-agents-version version\">No</span></td><td class=\"n nope\" title=\"Android - \"><span class=\"caniuse-agents-version version\">No</span></td><td class=\"a yep-nope yep-nope-partial\" title=\"iOS Safari - \"><span class=\"caniuse-agents-version version\">15.4</span></td></tr></table></div></div>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>If you&#8217;d like to try the File System Access API, check out this <a href=\"https://googlechromelabs.github.io/text-editor/\" rel=\"noopener\">live demo text editor</a> built by Google engineers. Otherwise, if you&#8217;d like to learn more about this API and all its features, here are some resources:</p>\n\n\n\n<ul><li><a href=\"https://wicg.github.io/file-system-access/\" rel=\"noopener\">File System Access API</a> (W3C Specification)</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API\" rel=\"noopener\">File System Access API</a> (MDN)</li><li><a href=\"https://css-tricks.com/weekly-platform-news-contrast-ratio-range-replaceall-method-native-file-system-api/#aa-try-out-the-native-file-system-api-in-chrome\">Contrast Ratio Range, replaceAll Method, Native File System API</a> (Šime Vidas)</li><li><a href=\"https://web.dev/file-system-access/#deleting-files-and-folders-in-a-directory\" rel=\"noopener\">The File System Access API: simplifying access to local files</a> (web.dev)</li><li><a href=\"https://web.dev/browser-fs-access/\" rel=\"noopener\">Reading and writing files and directories with the browser-fs-access library</a> (web.dev)</li><li><a href=\"https://github.com/GoogleChromeLabs/browser-fs-access\" rel=\"noopener\">browser-fs-access repo</a> (GitHub)</li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/getting-started-with-the-file-system-access-api/\">Getting Started With the File System Access API</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "The File System Access API is a web API that allows read and write access to a user’s local files. It unlocks new capabilities to build powerful web applications, such as text editors or IDEs, image editing tools, improved import/export, all in the frontend. Let’s look into how to get started using this API.\n\n\n\n\n\n\n\n\n\n\nReading files with the File System Access API\n\n\nBefore diving into the code required to read a file from the user’s system, an important detail to keep in mind is that calling the File System Access API needs to be done by a user gesture, in a secure context. In the following example, we’ll use a click event.\n\n\nReading from a single file\n\n\nReading data from a file can be done in less than 10 lines of code. Here’s an example code sample:\n\n\n\nlet fileHandle;\n \ndocument.querySelector(\".pick-file\").onclick = async () => {\n [fileHandle] = await window.showOpenFilePicker();\n \n const file = await fileHandle.getFile();\n const content = await file.text();\n \n return content;\n};\n\n\n\nLet’s imagine we have a button in our HTML with the class .pick-file. When clicking on this button, we launch the file picker by calling window.showOpenFilePicker(), and we store the result from this query in a variable called fileHandle. \n\n\n\nWhat we get back from calling showOpenFilePicker() is an array of FileSystemFileHandle objects representing each file we selected. As this example is for a single file, we destructure the result. I’ll show how to select multiple files a bit later.\n\n\n\nThese objects contain a kind and name property. If you were to use console.log(fileHandle), you would see the following object:\n\n\n\nFileSystemFileHandle {kind: 'file', name: 'data.txt'}\n\n\n\nThe kind can either be file or directory.\n\n\n\nOn fileHandle, we can then call the getFile() method to get details about our file. Calling this method returns an object with a few properties, including a timestamp of when the file was last modified, the name of the file, its size, and type.\n\n\n\nFinally, we can call text() on the file to get its content.\n\n\nReading from multiple files\n\n\nTo read from multiple files, we need to pass an options object to showOpenFilePicker().\n\n\n\nFor example:\n\n\n\nlet fileHandles;\nconst options = {\n multiple: true,\n};\n \ndocument.querySelector(\".pick-file\").onclick = async () => {\n fileHandles = await window.showOpenFilePicker(options);\n \n // The rest of the code will be shown below\n};\n\n\n\nBy default, the multiple property is set to false. Other options can be used to indicate the types of files that can be selected.\n\n\n\nFor example, if we only wanted to accept .jpeg files, the options object would include the following:\n\n\n\nconst options = {\n types: [\n   {\n     description: \"Images\",\n     accept: {\n       \"image/jpeg\": \".jpeg\",\n     },\n   },\n ],\n excludeAcceptAllOption: true,\n};\n\n\n\nIn this example, fileHandles is an array containing multiple files, so getting their content would be done in the following way:\n\n\n\nlet fileHandles;\nconst options = {\n multiple: true,\n};\n \ndocument.querySelector(\".pick-file\").onclick = async () => {\n fileHandles = await window.showOpenFilePicker(options);\n \n const allContent = await Promise.all(\n   fileHandles.map(async (fileHandle) => {\n     const file = await fileHandle.getFile();\n     const content = await file.text();\n     return content;\n   })\n );\n \n console.log(allContent);\n};\n\n\nWriting to a file with the File System Access API\n\n\nThe File System Access API also allows you to write content to files. First, let’s look into how to save a new file.\n\n\nWriting to a new file\n\n\nWriting to a new file can also be done in a very short amount of code!\n\n\n\ndocument.querySelector(\".save-file\").onclick = async () => {\n const options = {\n   types: [\n     {\n       description: \"Test files\",\n       accept: {\n         \"text/plain\": [\".txt\"],\n       },\n     },\n   ],\n };\n \n const handle = await window.showSaveFilePicker(options);\n const writable = await handle.createWritable();\n \n await writable.write(\"Hello World\");\n await writable.close();\n \n return handle;\n};\n\n\n\nIf we imagine a second button with the class save-file, on click, we open the file picker with the method showSaveFilePicker() and we pass in an option object containing the type of file to be saved, here a .txt file.\n\n\n\nCalling this method will also return a FileSystemFileHandle object like in the first section. On this object, we can call the createWritable() method that will return a FileSystemWritableFileStream object. We can then write some content to this stream with the write() method in which we need to pass the content.\n\n\n\nFinally, we need to call the close() method to close the file and finish writing the content to disk.\n\n\n\nIf you wanted to write some HTML code to a file for example, you would only need to change what’s in the options object to accept \"text/html\": [\".html\"]  and pass some HTML content to the write() method.\n\n\nEditing an existing file\n\n\nIf you’d like to import a file and edit it with the File System Access API,  an example code sample would look like:\n\n\n\nlet fileHandle;\n \ndocument.querySelector(\".pick-file\").onclick = async () => {\n [fileHandle] = await window.showOpenFilePicker();\n \n const file = await fileHandle.getFile();\n const writable = await fileHandle.createWritable();\n \n await writable.write(\"This is a new line\");\n await writable.close();\n};\n\n\n\nIf you’ve been following the rest of this post, you might recognize that we start with the showOpenFilePicker() and getFile() methods to read a file and we then use createWritable(), write() and close() to write to that same file.\n\n\n\nIf the file you’re importing already has content, this code sample will replace the current content with the new one passed into the write() method.\n\n\nAdditional File System Access API features\n\n\nWithout going into too much detail, the File System Access API also lets you list files in directories and delete files or directories.\n\n\nRead directories\n\n\nReading directories can be done with a tiny bit of code:\n\n\n\ndocument.querySelector(\".read-dir\").onclick = async () => {\n const directoryHandle = await window.showDirectoryPicker();\n \n for await (const entry of directoryHandle.values()) {\n   console.log(entry.kind, entry.name);\n }\n};\n\n\n\nIf we add a new button with the class .read-dir, on click, calling the showDirectoryPicker() method will open the file picker and, when selecting a directory on your computer, this code will list the files found in that directory.\n\n\nDelete files\n\n\nDeleting a file in a directory can be done with the following code sample:\n\n\n\ndocument.querySelector(\".pick-file\").onclick = async () => {\n const [fileHandle] = await window.showOpenFilePicker();\n await fileHandle.remove();\n};\n\n\n\nIf you want to delete a folder, you only need to make a small change to the code sample above:\n\n\n\ndocument.querySelector(\".read-dir\").onclick = async () => {\n const directoryHandle = await window.showDirectoryPicker();\n await directoryHandle.remove();\n};\n\n\n\nFinally, if you want to remove a specific file when selecting a folder, you could write it like this:\n\n\n\n// Delete a single file named data.txt in the selected folder\ndocument.querySelector(\".pick-folder\").onclick = async () => {\n   const directoryHandle = await window.showDirectoryPicker();\n   await directoryHandle.removeEntry(\"data.txt\");\n};\n\n\n\nAnd if you want to remove an entire folder, you would need the following lines:\n\n\n\n// Recursively delete the folder named \"data\"\ndocument.querySelector(\".pick-folder\").onclick = async () => {\n   const directoryHandle = await window.showDirectoryPicker();\n   await directoryHandle.removeEntry('data', { recursive: true });\n};\n\n\nFile System Access API browser support\n\n\nAt the moment, IE and Firefox don’t seem to be supporting the File System Access API. However, there exists a ponyfill called browser-fs-access.\n\n\nThis browser support data is from Caniuse, which has more detail. A number indicates that browser supports the feature at that version and up.DesktopChromeFirefoxIEEdgeSafari101NoNo98TPMobile / TabletAndroid ChromeAndroid FirefoxAndroidiOS SafariNoNoNo15.4\n\n\nWrapping up\n\n\nIf you’d like to try the File System Access API, check out this live demo text editor built by Google engineers. Otherwise, if you’d like to learn more about this API and all its features, here are some resources:\n\n\n\nFile System Access API (W3C Specification)File System Access API (MDN)Contrast Ratio Range, replaceAll Method, Native File System API (Šime Vidas)The File System Access API: simplifying access to local files (web.dev)Reading and writing files and directories with the browser-fs-access library (web.dev)browser-fs-access repo (GitHub)\n\nGetting Started With the File System Access API originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-14T16:01:21.000Z",
      "date_modified": "2022-02-14T16:01:21.000Z",
      "_plugin": {
        "pageFilename": "6bdb5e5bb6b6f4846b346e14895d2bf89b997e58f3a71afca3fed3b6adbf1d4c.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363498",
      "url": "https://css-tricks.com/your-css-reset-needs-text-size-adjust-probably/",
      "title": "Your CSS reset needs text-size-adjust (probably)",
      "summary": "Kilian Valkhof:\n\n[…] Mobile Safari increases the default font-size when you switch a website from portrait to landscape. On phones that is, it doesn’t do it on iPad. Safari has been doing this for a long time, as a \n\n…\n\nYour CSS reset needs text-size-adjust (probably) originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><a href=\"https://kilianvalkhof.com/2022/css-html/your-css-reset-needs-text-size-adjust-probably/\" rel=\"noopener\">Kilian Valkhof</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>[&#8230;] Mobile Safari increases the default font-size when you switch a website from portrait to landscape. On phones that is, it doesn’t do it on iPad. Safari has been doing this for a long time, as a way to improve readability on non-mobile optimized websites. While undoubtedly useful in a time when literally no website was optimized for mobile, it’s significantly less helpful nowadays. [&#8230;] Text size increasing randomly in a single situation is exactly the type of thing you want to guard for with a CSS reset.</p></blockquote>\n\n\n\n<p>This is very literally what <code>text-size-adjust</code> does. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-size-adjust\" rel=\"noopener\">MDN</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>When an element containing text uses 100% of the screen&#8217;s width, the algorithm increases its text size, but without modifying the layout. The&nbsp;<code>text-size-adjust</code>&nbsp;property allows web authors to disable or modify this behavior, as web pages designed with small screens in mind do not need it.</p></blockquote>\n\n\n\n<p>You can see <a href=\"https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/AdjustingtheTextSize/AdjustingtheTextSize.html\" rel=\"noopener\">Apple&#8217;s own docs</a> showing off this is exactly what they do (on iPhones). There is <a href=\"https://bugs.webkit.org/show_bug.cgi?id=56543\" rel=\"noopener\">an ancient bug</a> where this would prevent zooming, but probably not a huge concern anymore.</p>\n\n\n\n<p>Kilian&#8217;s recommendation:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n  -moz-text-size-adjust: none;\n  -webkit-text-size-adjust: none;\n  text-size-adjust: none;\n}</code></pre>\n\n\n\n<p>Firefox doesn&#8217;t even support it, so I&#8217;d maybe lose that vendor prefix, but otherwise I&#8217;d say I&#8217;m on board. I&#8217;d like to think I can handle my own text sizing. </p>\n\n\n\n<p>Reminds me of how <a href=\"https://twitter.com/joshwcomeau/status/1379782931116351490\" rel=\"noopener\">Mobile Safari does that zooming thing</a> with text inputs under <code>16px</code>, so watch out for that too.</p>\n<p><a href=\"https://kilianvalkhof.com/2022/css-html/your-css-reset-needs-text-size-adjust-probably/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/your-css-reset-needs-text-size-adjust-probably/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/your-css-reset-needs-text-size-adjust-probably/\">Your CSS reset needs text-size-adjust (probably)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Kilian Valkhof:\n\n\n\n[…] Mobile Safari increases the default font-size when you switch a website from portrait to landscape. On phones that is, it doesn’t do it on iPad. Safari has been doing this for a long time, as a way to improve readability on non-mobile optimized websites. While undoubtedly useful in a time when literally no website was optimized for mobile, it’s significantly less helpful nowadays. […] Text size increasing randomly in a single situation is exactly the type of thing you want to guard for with a CSS reset.\n\n\n\nThis is very literally what text-size-adjust does. MDN:\n\n\n\nWhen an element containing text uses 100% of the screen’s width, the algorithm increases its text size, but without modifying the layout. The text-size-adjust property allows web authors to disable or modify this behavior, as web pages designed with small screens in mind do not need it.\n\n\n\nYou can see Apple’s own docs showing off this is exactly what they do (on iPhones). There is an ancient bug where this would prevent zooming, but probably not a huge concern anymore.\n\n\n\nKilian’s recommendation:\n\n\n\nhtml {\n  -moz-text-size-adjust: none;\n  -webkit-text-size-adjust: none;\n  text-size-adjust: none;\n}\n\n\n\nFirefox doesn’t even support it, so I’d maybe lose that vendor prefix, but otherwise I’d say I’m on board. I’d like to think I can handle my own text sizing. \n\n\n\nReminds me of how Mobile Safari does that zooming thing with text inputs under 16px, so watch out for that too.\nTo Shared Link — Permalink on CSS-Tricks\nYour CSS reset needs text-size-adjust (probably) originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-12T00:46:40.000Z",
      "date_modified": "2022-02-12T00:46:40.000Z",
      "_plugin": {
        "pageFilename": "ea213ce1edb12206c7bfc2c52101d58f92eb83c6f6da03a77e73cdd939d60786.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363396",
      "url": "https://css-tricks.com/9-new-react-and-javascript-links-for-february-2022/",
      "title": "9 New React and JavaScript Links for February 2022",
      "summary": "Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. Like React and JavaScript! Here’s a list of nine links to other articles about them that I’ve been saving up and …\n\n9 New React and JavaScript Links for February 2022 originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. Like React and JavaScript! Here’s a list of nine links to other articles about them that I’ve been saving up and think are worth sharing.</p>\n\n\n\n<span id=\"more-363396\"></span>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/jsx-conditional-cheatsheet-b8767f76d64c89489aee556042b356d5.png?resize=767%2C528&#038;ssl=1\" alt=\"React and JavaScript code snippets with colorful hand-marked scribbles of notes.\" class=\"wp-image-363425\" width=\"767\" height=\"528\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/jsx-conditional-cheatsheet-b8767f76d64c89489aee556042b356d5.png?w=780&amp;ssl=1 780w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/jsx-conditional-cheatsheet-b8767f76d64c89489aee556042b356d5.png?resize=300%2C207&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/jsx-conditional-cheatsheet-b8767f76d64c89489aee556042b356d5.png?resize=768%2C529&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Source: <a href=\"https://thoughtspile.github.io/2022/01/17/jsx-conditionals/\" rel=\"noopener\">&#8220;Good advice on JSX conditionals&#8221;</a>  by Vladimir Klepov</figcaption></figure>\n\n\n\n<ul class=\"is-style-default\"><li><strong><a href=\"https://remix.run/blog/seed-funding-for-remix\" rel=\"noopener\">Seed Funding for Remix</a></strong><br><a href=\"https://remix.run/\" rel=\"noopener\">Remix</a> went open source after taking funding which seems like a solid move. It&#8217;s a for-now-React-only framework, so I think it&#8217;s fair that everyone asks how does it compare to <a href=\"https://nextjs.org/\" rel=\"noopener\">Next.js</a>. Which <a href=\"https://remix.run/blog/remix-vs-next\" rel=\"noopener\">they answered</a>. Probably worth noting again for us CSS folks, Kent <a href=\"https://css-tricks.com/learn-from-remix/\">mentioned</a>: &#8220;Because Remix allows me to easily control which of my CSS files is on the page at any given time, I don’t have all the problems that triggered the JavaScript community to invent workarounds like CSS-in-JS.&#8221;</li><li><strong><a href=\"https://remix.run/blog/react-router-v6\" rel=\"noopener\">React Router v6</a></strong><br>Speaking of that gang, they released React Router v6, which looks like a positive move — all hooks based, 50% smaller than v5 — but is yet another major version with API changes. React Router has a history of API changes like this and they trigger plenty of grumbling in the community. There is plenty of that again.</li><li><a href=\"https://react-spectrum.adobe.com/react-aria/\" rel=\"noopener\"><strong>React Aria</strong></a><br>&#8220;A library of React Hooks that provides accessible UI primitives for your design system&#8221;<em> </em>from&#8230; Adobe. Interesting. Looks like some pretty hard problems being solved here, like <a href=\"https://react-spectrum.adobe.com/react-aria/FocusScope.html\" rel=\"noopener\">FocusScope</a> (&#8220;When the&nbsp;<code>contain</code>&nbsp;prop is set, focus is contained within the scope.&#8221;) and interesting color inputs, like <a href=\"https://react-spectrum.adobe.com/react-aria/useColorField.html\" rel=\"noopener\">useColorField</a>, <a href=\"https://react-spectrum.adobe.com/react-aria/useColorSlider.html\" rel=\"noopener\">useColorSlider</a>, and <a href=\"https://react-spectrum.adobe.com/react-aria/useColorWheel.html\" rel=\"noopener\">useColorWheel</a>. There are 59 hooks in all, ranging from interactions and forms to overlays and internationalization, with plenty of others in between.</li><li><a href=\"https://www.taniarascia.com/front-end-tables-sort-filter-paginate/\" rel=\"noopener\"><strong>Front End Tables: Sorting, Filtering, and Pagination</strong></a><br>Tania Rascia: &#8220;One thing I&#8217;ve had to do at every job I&#8217;ve had is implement a table on the front end of an application that has sorting, filtering, and pagination.&#8221; No shame in reaching for a big library with all these features, but sometimes it&#8217;s best to DIY. </li><li><a href=\"https://thoughtspile.github.io/2022/01/17/jsx-conditionals/\" rel=\"noopener\"><strong>Good advice on JSX conditionals</strong></a><br>Vladimir Klepov covers the (weirdly) many ways fairly simple conditionals can go wrong, like the number <code>0</code> leaking into your markup, and how to manage update versus remount in conditionals.</li><li><a href=\"https://github.com/ponymessenger/use-prosemirror\" rel=\"noopener\"><strong>useProseMirror</strong></a><br>I&#8217;ve found <a href=\"https://prosemirror.net/\" rel=\"noopener\">ProseMirror</a> to be a pretty nice rich text editor in the past. The library itself isn&#8217;t actually in React, so I think it&#8217;s a smart call here to make a modern React wrapper for it. </li><li><a href=\"https://react.holiday/2021/23/\" rel=\"noopener\"><strong>Spead up sluggish inputs with useDeferredValue</strong></a><br>You can introduce gnarly input delay the more work that an <code>onChange</code> function has to do on a text input. <em>&#8220;</em><code>useDeferredValue</code>&nbsp;gives us a way to separate high priority updates from low priority updates for cases like this.&#8221;</li><li><a href=\"https://www.youtube.com/watch?v=HktWin_LPf4\" rel=\"noopener\"><strong>&#x1f3a5; A Cartoon Intro to WebAssembly</strong></a><br>If you don&#8217;t have a good understanding of what WebAssembly is, then Lin Clark will get you there in this video from JSConf EU 2017. So, no, not a new link or anything, but it&#8217;s new to me!</li><li><a href=\"https://www.youtube.com/watch?v=YX5yoApjI3M&amp;t=2s\" rel=\"noopener\"><strong>&#x1f3a5; Turborepo Demo and Walkthrough</strong></a><br><a href=\"https://vercel.com/blog/vercel-acquires-turborepo\" rel=\"noopener\">Vercel</a> bought <a href=\"https://turborepo.org/\" rel=\"noopener\">Turborepo</a>. Turborepo is specifically focused on making <a href=\"https://css-tricks.com/monorepo/\">monorepos</a> better. As someone who&#8217;s main codebase is a monorepo with Lerna and Yarn Workspaces such that we can have multiple different sites all share things like a design system, this is right up our alley. This video is with the Turborepo creator Jared Palmer and Lee Robinson, head of developer relations at Vercel. In this video, you get to see it all work.</li></ul>\n\n\n\n<p></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/9-new-react-and-javascript-links-for-february-2022/\">9 New React and JavaScript Links for February 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. Like React and JavaScript! Here’s a list of nine links to other articles about them that I’ve been saving up and think are worth sharing.\n\n\n\n\n\n\n\nSource: “Good advice on JSX conditionals”  by Vladimir Klepov\n\n\n\nSeed Funding for RemixRemix went open source after taking funding which seems like a solid move. It’s a for-now-React-only framework, so I think it’s fair that everyone asks how does it compare to Next.js. Which they answered. Probably worth noting again for us CSS folks, Kent mentioned: “Because Remix allows me to easily control which of my CSS files is on the page at any given time, I don’t have all the problems that triggered the JavaScript community to invent workarounds like CSS-in-JS.”React Router v6Speaking of that gang, they released React Router v6, which looks like a positive move — all hooks based, 50% smaller than v5 — but is yet another major version with API changes. React Router has a history of API changes like this and they trigger plenty of grumbling in the community. There is plenty of that again.React Aria“A library of React Hooks that provides accessible UI primitives for your design system” from… Adobe. Interesting. Looks like some pretty hard problems being solved here, like FocusScope (“When the contain prop is set, focus is contained within the scope.”) and interesting color inputs, like useColorField, useColorSlider, and useColorWheel. There are 59 hooks in all, ranging from interactions and forms to overlays and internationalization, with plenty of others in between.Front End Tables: Sorting, Filtering, and PaginationTania Rascia: “One thing I’ve had to do at every job I’ve had is implement a table on the front end of an application that has sorting, filtering, and pagination.” No shame in reaching for a big library with all these features, but sometimes it’s best to DIY. Good advice on JSX conditionalsVladimir Klepov covers the (weirdly) many ways fairly simple conditionals can go wrong, like the number 0 leaking into your markup, and how to manage update versus remount in conditionals.useProseMirrorI’ve found ProseMirror to be a pretty nice rich text editor in the past. The library itself isn’t actually in React, so I think it’s a smart call here to make a modern React wrapper for it. Spead up sluggish inputs with useDeferredValueYou can introduce gnarly input delay the more work that an onChange function has to do on a text input. “useDeferredValue gives us a way to separate high priority updates from low priority updates for cases like this.”🎥 A Cartoon Intro to WebAssemblyIf you don’t have a good understanding of what WebAssembly is, then Lin Clark will get you there in this video from JSConf EU 2017. So, no, not a new link or anything, but it’s new to me!🎥 Turborepo Demo and WalkthroughVercel bought Turborepo. Turborepo is specifically focused on making monorepos better. As someone who’s main codebase is a monorepo with Lerna and Yarn Workspaces such that we can have multiple different sites all share things like a design system, this is right up our alley. This video is with the Turborepo creator Jared Palmer and Lee Robinson, head of developer relations at Vercel. In this video, you get to see it all work.\n\n\n\n\n\n9 New React and JavaScript Links for February 2022 originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-11T23:11:28.000Z",
      "date_modified": "2022-02-11T23:11:28.000Z",
      "_plugin": {
        "pageFilename": "852dad9909c96032531562108beba87fa74b84eee2ebcc8d97574281c5154f73.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363027",
      "url": "https://css-tricks.com/optional-custom-property-values-trick/",
      "title": "Multi-Value CSS Properties With Optional Custom Property Values",
      "summary": "Imagine you have an element with a multi-value CSS property, such as transform: optional custom property values:\n.el {\n  transform: translate(100px) scale(1.5) skew(5deg);\n}\nNow imagine you don’t always want all the transform values to be applied, so some …\n\nMulti-Value CSS Properties With Optional Custom Property Values originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Imagine you have an element with a multi-value CSS property, such as <code>transform</code>: optional custom property values:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.el {\n  transform: translate(100px) scale(1.5) skew(5deg);\n}</code></pre>\n\n\n\n<p>Now imagine you don’t <em>always</em> want all the <code>transform</code> values to be applied, so some are optional. You might think of CSS optional custom property values:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.el {\n  /*         |-- default ---| |-- optional --| */\n  transform: translate(100px) var(--transform);\n}</code></pre>\n\n\n\n<span id=\"more-363027\"></span>\n\n\n\n<p>But surprisingly using optional custom property values like this does not work as intended. If the <code>--transform</code> variable is <em>not</em> defined the whole property will not be applied. I’ve got a little “trick” to fix this and it looks like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.el {\n  transform: translate(100px) var(--transform, );\n}</code></pre>\n\n\n\n<p>Notice the difference? There is a fallback defined in there that is <strong>set to an empty value</strong>: (<code>, )</code></p>\n\n\n\n<p>That’s the trick, and it’s very useful! Here’s what <a href=\"https://www.w3.org/TR/css-variables-1/#using-variables\" rel=\"noopener\">the spec</a><a href=\"https://www.w3.org/TR/css-variables-1/#using-variables\" rel=\"noopener\">ification</a> has to say:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>In an exception to the usual comma elision rules, which require commas to be omitted when they’re not separating values, a bare comma, with nothing following it, must be treated as valid in <code>var()</code>, indicating an empty fallback value.</p></blockquote>\n\n\n\n<p>This is somewhat spiritually related to the <a href=\"https://css-tricks.com/the-css-custom-property-toggle-trick/\">The CSS Custom Property Toggle Trick</a> that takes advantage of a custom property having the value of an empty space.</p>\n\n\n<h3 id=\"demo\">Demo</h3>\n\n\n<p>Like I said, this is useful and works for any multi-value CSS property. The following demo shows it using <code>text-shadow</code>, <code>background</code>, and <code>filter</code> in addition to the <code>transform</code> example we just discussed.</p>\n\n\n\n<p class=\"codepen\" data-height=\"300\" style=\"height: 300px; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1rem 0; padding: 1rem; overflow: auto;\" data-default-tab=\"css,result\" data-slug-hash=\"ZEXwaQQ\" data-editable=\"true\" data-user=\"vsync\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/vsync/pen/ZEXwaQQ\" rel=\"noopener\">\n  CSS var &#8211; Fallback To Nothing</a> by Yair Even Or (<a href=\"https://codepen.io/vsync\" rel=\"noopener\">@vsync</a>)\n  on <a href=\"https://codepen.io\" rel=\"noopener\">CodePen</a>.</span>\n</p>\n\n\n\n<p>Some properties that accept multiple values, like <code>text-shadow</code>, require special treatment because they only work with a comma delimiter. In those cases, when the CSS custom property is defined, you (as the code author) know it is only to be used in a situation where a value is already defined where the custom property is used. Then a comma should be inserted directly in the custom property before the first value, like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--text-shadow: ,0 0 5px black;</code></pre>\n\n\n\n<p>This, of course, inhibits the ability to use this variable in places where it’s the only value of some property. That can be solved, though, by creating “layers” of variables for abstraction purposes, i.e. the custom property is pointing to lower level custom properties.</p>\n\n\n<h3 id=\"beware-of-sass-compiler\">Beware of Sass compiler</h3>\n\n\n<p>While exploring this trick, I uncovered a bug in the Sass compiler that strips away the empty value (<code>,</code>) fallback, which goes against the spec. <a href=\"https://github.com/sass/dart-sass/issues/1593\" rel=\"noopener\">I’ve reported the bug</a> and hope it will be fixed up soon.</p>\n\n\n\n<p>As a temporary workaround, a fallback that causes no rendering can be used, such as:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">transform: translate(100px) var(--transform, scale(1));</code></pre>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/optional-custom-property-values-trick/\">Multi-Value CSS Properties With Optional Custom Property Values</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Imagine you have an element with a multi-value CSS property, such as transform: optional custom property values:\n\n\n\n.el {\n  transform: translate(100px) scale(1.5) skew(5deg);\n}\n\n\n\nNow imagine you don’t always want all the transform values to be applied, so some are optional. You might think of CSS optional custom property values:\n\n\n\n.el {\n  /*         |-- default ---| |-- optional --| */\n  transform: translate(100px) var(--transform);\n}\n\n\n\n\n\n\n\nBut surprisingly using optional custom property values like this does not work as intended. If the --transform variable is not defined the whole property will not be applied. I’ve got a little “trick” to fix this and it looks like this:\n\n\n\n.el {\n  transform: translate(100px) var(--transform, );\n}\n\n\n\nNotice the difference? There is a fallback defined in there that is set to an empty value: (, )\n\n\n\nThat’s the trick, and it’s very useful! Here’s what the specification has to say:\n\n\n\nIn an exception to the usual comma elision rules, which require commas to be omitted when they’re not separating values, a bare comma, with nothing following it, must be treated as valid in var(), indicating an empty fallback value.\n\n\n\nThis is somewhat spiritually related to the The CSS Custom Property Toggle Trick that takes advantage of a custom property having the value of an empty space.\n\n\nDemo\n\n\nLike I said, this is useful and works for any multi-value CSS property. The following demo shows it using text-shadow, background, and filter in addition to the transform example we just discussed.\n\n\n\n\n  See the Pen \n  CSS var – Fallback To Nothing by Yair Even Or (@vsync)\n  on CodePen.\n\n\n\n\nSome properties that accept multiple values, like text-shadow, require special treatment because they only work with a comma delimiter. In those cases, when the CSS custom property is defined, you (as the code author) know it is only to be used in a situation where a value is already defined where the custom property is used. Then a comma should be inserted directly in the custom property before the first value, like this:\n\n\n\n--text-shadow: ,0 0 5px black;\n\n\n\nThis, of course, inhibits the ability to use this variable in places where it’s the only value of some property. That can be solved, though, by creating “layers” of variables for abstraction purposes, i.e. the custom property is pointing to lower level custom properties.\n\n\nBeware of Sass compiler\n\n\nWhile exploring this trick, I uncovered a bug in the Sass compiler that strips away the empty value (,) fallback, which goes against the spec. I’ve reported the bug and hope it will be fixed up soon.\n\n\n\nAs a temporary workaround, a fallback that causes no rendering can be used, such as:\n\n\n\ntransform: translate(100px) var(--transform, scale(1));\n\nMulti-Value CSS Properties With Optional Custom Property Values originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-11T15:30:11.000Z",
      "date_modified": "2022-02-11T15:30:11.000Z",
      "_plugin": {
        "pageFilename": "aa20f5c7f699e5d082267a90e9fafae462b23be878137d9bff41486c75d54dbd.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362285",
      "url": "https://css-tricks.com/new-css-color-features-preview/",
      "title": "A Whistle-Stop Tour of 4 New CSS Color Features",
      "summary": "I was just writing in my “What’s new in since CSS3?” article about recent and possible future changes to CSS colors. It’s weirdly a lot. There are just as many or more new and upcoming ways to define colors than …\n\nA Whistle-Stop Tour of 4 New CSS Color Features originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>I was just writing in my <a href=\"https://css-tricks.com/whats-new-since-css3/#aa-color-changes\">&#8220;What&#8217;s new in since CSS3?&#8221;</a> article about recent and possible future changes to CSS colors. It&#8217;s weirdly a lot. There are just as many or more new and upcoming ways to define colors than what we have now. I thought we&#8217;d take a really quick look. </p>\n\n\n\n<p>First, a major heads up. This stuff is so complicated. <strong>I barely understand it.</strong> But here are some aspects:</p>\n\n\n\n<ul><li>Before all this upcoming change, we <em>only</em> had RGB as a color model, and everything dealt with that.</li><li>We had different &#8220;color spaces&#8221; that handled it differently (e.g. the <code>rgb()</code> function mapped that RGB color model as a cube with linear coordinates, the <code>hsl()</code> function mapped that RGB color model as a cylinder) but it was all sRGB gamut.</li><li>With the upcoming changes, we&#8217;re getting new color models <em>and</em> (!) we&#8217;re getting new functions that map that color model differently. So I think it&#8217;s kind of a double-triple whammy.</li></ul>\n\n\n\n<p>I can&#8217;t personally educate you on all the nitty-gritty details — I&#8217;m writing this because I bet there are a lot of you like me, <strong>wondering why you should care at all about this, and this is my attempt to understand why <em>I</em> should care about all of it.</strong> </p>\n\n\n\n<span id=\"more-362285\"></span>\n\n\n\n<h3 id=\"display-p3-is-one-that-opens-up-a-ton-of-more-vibrant-color-that-was-able-to-be-expressed-before\">Display-P3 is one that opens up a ton of more vibrant color that was able to be expressed before.</h3>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  background: color(display-p3 1 0.08 0); /* super red! */\n}</code></pre>\n\n\n\n<p>It turns out that modern monitors can display way more colors, particularly extra vibrant ones, but we just have no way of defining those colors with classic CSS color syntaxes, like HEX, RGB, and HSL. Super weird, right?! But if you use <a href=\"https://www.w3.org/TR/css-color-4/#predefined\" rel=\"noopener\">Display-P3</a>, you get a wider range of access to these vibrant colors.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2310\" height=\"2300\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/CleanShot-2022-02-02-at-07.02.33@2x.png?resize=2310%2C2300&#038;ssl=1\" alt=\"Screenshot of a super bright pink in a CodePen preview using the display-p3 CSS color syntax.\" class=\"wp-image-363066\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/CleanShot-2022-02-02-at-07.02.33@2x.png?w=2310&amp;ssl=1 2310w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/CleanShot-2022-02-02-at-07.02.33@2x.png?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/CleanShot-2022-02-02-at-07.02.33@2x.png?resize=1024%2C1020&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/CleanShot-2022-02-02-at-07.02.33@2x.png?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/CleanShot-2022-02-02-at-07.02.33@2x.png?resize=768%2C765&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/CleanShot-2022-02-02-at-07.02.33@2x.png?resize=1536%2C1529&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/CleanShot-2022-02-02-at-07.02.33@2x.png?resize=2048%2C2039&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/CleanShot-2022-02-02-at-07.02.33@2x.png?resize=1000%2C996&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/CleanShot-2022-02-02-at-07.02.33@2x.png?resize=100%2C100&amp;ssl=1 100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>That white line in Safari DevTools is showing us the &#8220;extra&#8221; range of Display-P3</figcaption></figure>\n\n\n\n<p>The dev shop Panic latched onto this early on and started using these colors as a &#8220;secret weapon&#8221;:</p>\n\n\n\n<blockquote class=\"twitter-tweet\" style=\"margin: 0 0 1.5rem 0\"><p lang=\"en\" dir=\"ltr\">&#x1f308; Along with WebGL, p3 colors are now a big part of the Panic website secret weapon pile. Shh, don’t tell anyone, but you should see this page on an iMac Pro screen! <a href=\"https://t.co/glrhPNuCdR\">https://t.co/glrhPNuCdR</a></p>— Panic (@panic) <a href=\"https://twitter.com/panic/status/1131779438914392064?ref_src=twsrc%5Etfw\" rel=\"noopener\">May 24, 2019</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n<p>Jen Simmons also covers how to use them, including a fallback for non-supporting browsers:</p>\n\n\n\n<blockquote class=\"twitter-tweet\"  style=\"margin: 0 0 1.5rem 0\"><p lang=\"en\" dir=\"ltr\">Display P3 color. Designing in the browser. Amazing. <br><br>Let me show you how to switch over to P3, find a color, and then find a fallback color for older browsers. All while working inside Safari Web Inspector. (Turn sound on to hear me explain!) <a href=\"https://t.co/AaKhrn2s3e\">pic.twitter.com/AaKhrn2s3e</a></p>— Jen Simmons (@jensimmons) <a href=\"https://twitter.com/jensimmons/status/1478858248677736454?ref_src=twsrc%5Etfw\" rel=\"noopener\">January 5, 2022</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n<h4 id=\"resources-3\">Resources</h4>\n\n\n\n<ul><li><a href=\"https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/\" rel=\"noopener\">Wide Gamut Color in CSS with Display-P3</a> (WebKit Blog)</li><li><a href=\"https://css-tricks.com/the-expanding-gamut-of-color-on-the-web/\">The Expanding Gamut of Color on the&nbsp;Web</a> (Ollie Williams)</li></ul>\n\n\n\n<h3 id=\"hwb-is-the-one-that-is-more-for-humans-except-that-s-a-bit-debatable-and-it-s-still-based-on-srgb\">HWB is the one that is more &#8220;for humans&#8221; except that&#8217;s a bit debatable and it&#8217;s still based on sRGB.</h3>\n\n\n\n<p>I had no idea <code>hwb()</code> was a thing — shout out to Stefan Judis for <a href=\"https://www.stefanjudis.com/blog/hwb-a-color-notation-for-humans/\" rel=\"noopener\">blogging about it</a>. </p>\n\n\n\n<p>I normally think of HSL as the CSS color format that is &#8220;for humans&#8221; (and good <a href=\"https://css-tricks.com/hsl-hsla-is-great-for-programmatic-color-control/\">for programmatic control</a>) because, well, manipulating 360° of Hue and 0-100% of both Saturation and Lightness make some kind of obvious sense. </p>\n\n\n\n<p>But in <code>hwb()</code>, we&#8217;ve got <strong>Hue</strong> (the same as HSL, I think), then <strong>Whiteness</strong> and <strong>Blackness</strong>. Stefan:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Adding White and Black to a color affects its saturation. Suppose you add the same amount of White and Black to a color, the color tone stays the same, but color loses saturation. This works up to 50% White and 50% Black (<code>hwb(0deg 50% 50%</code>)), which results in an achromatic color.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1100\" height=\"545\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/hwb.png?resize=1100%2C545&#038;ssl=1\" alt=\"Showing six gradients going from red to black and the impact that change CSS color values in hwb has on the transition between colors.\" class=\"wp-image-363078\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/hwb.png?w=1100&amp;ssl=1 1100w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/hwb.png?resize=300%2C149&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/hwb.png?resize=1024%2C507&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/hwb.png?resize=768%2C381&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/hwb.png?resize=1000%2C495&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Stefan expressed some doubt that this is any easier to understand than HSL, and I tend to agree. I probably just need to get more used to it, but it seems to be more <em>abstract</em> than simply changing the lightness or saturation. </p>\n\n\n\n<p class=\"is-style-explanation\">HWB is limited to the same color gamut (sRGB) as all the old color formats all. No new colors are unlocked here. </p>\n\n\n\n<h4 id=\"resources-2\">Resources</h4>\n\n\n\n<ul><li><a href=\"https://www.w3docs.com/tools/color-hwb\" rel=\"noopener\">HWB Color Picker</a></li><li><a href=\"https://www.stefanjudis.com/blog/hwb-a-color-notation-for-humans/\" rel=\"noopener\">hwb() – a color notation for humans?</a> (Stefan Judis)</li></ul>\n\n\n\n<h3 id=\"lab-is-like-rgb-of-a-much-wider-gamut\">LAB is like <code>rgb()</code> of a much wider gamut</h3>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div {\n  background: lab(150% -400 400);\n}</code></pre>\n\n\n\n<p>I liked Eric Portis&#8217; explanation of LAB when I went around asking about it:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>LAB is like RGB in that there are three linear components. Lower numbers mean less of the thing, bigger numbers mean more of the thing. So you could use LAB to specify the brightest, greenest green that ever bright-greened, and it&#8217;ll be super bright and green for everybody, but brighter and greener on monitors with wider gamuts.</p></blockquote>\n\n\n\n<p>So, we get all the extra color, which is awesome, but sRGB had this <em>other</em> problem (aside from being limited in color expression), that it isn&#8217;t <em>perceptually uniform</em>. <a href=\"https://bkardell.com/blog/Unlocking-Colors.html\" rel=\"noopener\">Brian Kardell</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>The sRGB space is not perceptually uniform. The same mathematical movement has different degrees of perceived effect depending on where you are at in the color space. If you want to read a designer&#8217;s experience with this, here&#8217;s an&nbsp;<a href=\"https://v6.robweychert.com/blog/2019/12/dynamic-color-javascript-hsl/\" rel=\"noopener\">interesting example</a>&nbsp;which does a good job struggling to do well.</p></blockquote>\n\n\n\n<p>The classic example here is how, in HSL, colors with the exact same &#8220;Lightness&#8221; really don&#8217;t feel the same at all. </p>\n\n\n\n<blockquote class=\"twitter-tweet\" style=\"margin: 0 0 1.5rem 0\"><p lang=\"en\" dir=\"ltr\">HSL vs LAB:: lightness &#x1f4a1;<br><br>Same colors from our tricky color poll, but this time I&#8217;ve shown LAB&#8217;s version of the same color over top. Notice how much closer LAB&#8217;s lightness value is to the results of our poll! <br><br>&#x1f3a8; color spaces aren&#8217;t all the same y&#8217;all! <a href=\"https://t.co/AIEs0amdWY\">https://t.co/AIEs0amdWY</a> <a href=\"https://t.co/xkEguq3KZG\">pic.twitter.com/xkEguq3KZG</a></p>— Adam Argyle (@argyleink) <a href=\"https://twitter.com/argyleink/status/1201908189257555968?ref_src=twsrc%5Etfw\" rel=\"noopener\">December 3, 2019</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n<p>But in LAB, apparently, it is perceptually uniform, meaning that programmatically manipulating colors is a much more sane task. And another bonus is that LAB colors are specced as being device-independent. <a href=\"https://www.smashingmagazine.com/2021/11/guide-modern-css-colors/#lab\" rel=\"noopener\">Here&#8217;s Michelle Barker</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>LAB and LCH are defined in the&nbsp;<a href=\"https://www.w3.org/TR/css-color-4/#specifying-lab-lch\" rel=\"noopener\">specification</a>&nbsp;as&nbsp;<strong>device-independent colors</strong>. LAB is a color space that can be accessed in software like Photoshop and is recommended if you want a color to look the same on-screen as, say, printed on a t-shirt.</p></blockquote>\n\n\n\n<h4 id=\"resources\">Resources</h4>\n\n\n\n<ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/lab()\" rel=\"noopener\"> <code>lab()</code></a> (MDN)</li><li><a href=\"https://www.smashingmagazine.com/2021/11/guide-modern-css-colors/#lab\" rel=\"noopener\">A Guide To Modern CSS Colors With RGB, HSL, HWB, LAB And LCH</a> (Michelle Barker)</li></ul>\n\n\n\n<h3 id=\"lch-is-like-hsl-of-a-much-wider-gamut\">LCH is like <code>hsl()</code> of a much wider gamut</h3>\n\n\n\n<p>Remember how I said HSL is &#8220;for humans&#8221; in that it is easier understand than RGB? Changing the Hue, Saturation, and Lightness makes a lot of logical sense. Similar here with <code>lch()</code> where we&#8217;ve got <strong>Lightness</strong>, <strong>Chroma</strong>, and <strong>Hue</strong>. Back to my conversation with Eric Portis:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>LCH is more like HSL: a polar space. H = hue = a circle. So doing math to pick complementary colors (or whatever transforms you&#8217;re after) becomes trivial (just add 180 — or whatever!)</p></blockquote>\n\n\n\n<p>I suppose you&#8217;d pick LCH just because you like the syntax of it or because it makes some complicated programmatic thing you&#8217;re trying to do easier — and you get the fact that it can express 50% more colors for free.</p>\n\n\n\n<p>We get the perceptual uniformity here, too. <a href=\"https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/\" rel=\"noopener\">Here&#8217;s Lea Verou</a> who seems excited that lightness will actually mean something:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>In HSL, lightness is meaningless. Colors can have the same lightness value, with wildly different perceptual lightness. [&#8230;] With LCH, any colors with the same lightness are equally perceptually light, and any colors with the same chroma are equally perceptually saturated.</p><p><a href=\"https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/#how-does-lch-work\" rel=\"noopener\"></a></p></blockquote>\n\n\n\n<p>Another benefit of the new model is that we can wipe our hands clean of <a href=\"https://css-tricks.com/the-gray-dead-zone-of-gradients/\">the &#8220;gray dead zone&#8221;</a> in CSS color gradients. I think because of this perceptual uniformity stuff, two rich colors won&#8217;t get cheeky and gradient themselves through non-rich territory.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2000\" height=\"772\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/6-modern-css-color-1.webp?resize=2000%2C772&#038;ssl=1\" alt=\"Two gradients going from blue to pink, one on top of the other. The first uses the LCH CSS color syntax and the second use HSL. HSL has noticeable gray areas.\" class=\"wp-image-363120\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/6-modern-css-color-1.webp?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/6-modern-css-color-1.webp?resize=300%2C116&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/6-modern-css-color-1.webp?resize=1024%2C395&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/6-modern-css-color-1.webp?resize=768%2C296&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/6-modern-css-color-1.webp?resize=1536%2C593&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/6-modern-css-color-1.webp?resize=1000%2C386&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>There will always be tradeoffs in color models, <a href=\"https://twitter.com/argyleink/status/1490376117064065025\" rel=\"noopener\"><em>especially</em> with gradients</a>. (<a href=\"https://codepen.io/smashingmag/pen/VwzqjzW\" rel=\"noopener\">Demo</a>)</figcaption></figure>\n\n\n\n<p class=\"is-style-explanation\">Here&#8217;s a small personal prediction: I&#8217;d say that <code>lch()</code> is probably going to be a designer favorite. Soon there are going to be a ton of new color choices and it&#8217;s too difficult and weird to always be picking different ones. LCH seems to have the most bang for the mental buck. </p>\n\n\n\n<h4 id=\"resources-1\">Resources</h4>\n\n\n\n<ul><li><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/lch()\" rel=\"noopener\">lch()</a></code> (MDN)</li><li><a href=\"https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/\" rel=\"noopener\">LCH colors in CSS: what, why, and how?</a> (Lea Verou)</li><li><span style=\"color: initial; font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\"><a href=\"https://css.land/lch/\" rel=\"noopener\">LCH Colour Picker</a></span></li></ul>\n\n\n\n<h3 id=\"ok\">&#8220;OK&#8221;</h3>\n\n\n\n<p>LAB &#8216;n&#8217; friends seems <em>so new</em> because it is new&#8230; to CSS. But LAB <a href=\"https://www.xrite.com/blog/lab-color-space\" rel=\"noopener\">was invented in the 1940s</a>. In a conversation with Adam Argyle, he used a memorable phrase: <em>All the color spaces have an Achilles&#8217; heel</em>. That is, something they kinda suck at. For sRGB, it&#8217;s the grey dead zone thing, as well as the limited color gamut. LAB is great and all, but it certainly has its own weaknesses. For example, a blue-to-white gradient in LAB travels pretty awkwardly through purpletown. </p>\n\n\n\n<p>In December 2020, Björn Ottosson is all like <a href=\"https://bottosson.github.io/posts/oklab/\" rel=\"noopener\">&#8220;Hey, a new color space just dropped,&#8221;</a> and now OKLAB exists. Apparently the CSS powers-that-be see enough value in that color space that both <code>oklab()</code> and <code>oklch()</code> <a href=\"https://www.w3.org/TR/css-color-4/#resolving-oklab-oklch-values\" rel=\"noopener\">are already specced</a>. I guess we should care because they are just <em>generally better</em>, but don&#8217;t quote me on that.</p>\n\n\n\n<h3 id=\"why-is-it-display-p3-uses-the-color-function-but-the-other-s-don-t\">Why is it Display P3 uses the <code>color()</code> function but the other&#8217;s don&#8217;t?</h3>\n\n\n\n<p>I don&#8217;t really know. I think the CSS <code>color()</code> function is a bit newer and that&#8217;s just how Safari dunked it in there to start. I have no idea if Display P3 will get its own dedicated function, or if we all should just start using CSS <code>color()</code>, or what.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"13\"><code markup=\"tt\">/* This is how you use Display P3 */\ncolor(display-p3 1 0.08 0); \n\n/* But this doesn't work */\ncolor(oklch 42.1% 0.192 328.6);\n\n/* You gotta do this instead &#x1f937;&#x200d;&#x2640;&#xfe0f; */\noklch(42.1% 0.192 328.6);\n\n/* But you can use the color space within a gradient... */\nbackground-image: linear-gradient(\n    to right \n    in oklch,\n    lch(50% 100 100), \n    lch(50% 100 250)\n  );</code></pre>\n\n\n\n<h3 id=\"the-relative-color-syntax-is-super-useful\">The relative color syntax is super useful.</h3>\n\n\n\n<p>There is this really cool ability called &#8220;relative color syntax&#8221; where you can basically deconstruct a CSS color while moving it into another format. Say you have the (obviously) most famous CSS HEX color ever, fog dog, and you wanna kick it into HSL instead:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  background: hsl(from #f06d06 h s l);\n}</code></pre>\n\n\n\n<p>Maybe that&#8217;s not all that useful immediately, but hey, now we&#8217;re able to add alpha to it! There is literally no other way to apply alpha to an existing HEX color, so that&#8217;s kinda huge:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  background: hsl(from #f06d06 h s l / 0.5);\n}</code></pre>\n\n\n\n<p>But I can also mess with it. Say I wanna saturate fog dog a bit before I add opacity because the lower opacity will naturally dull it out and I wanna combat that. I can use <code>calc()</code> on the implied variables there:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  background: hsl(from #f06d06 h calc(s + 20%) l / 0.5);\n}</code></pre>\n\n\n\n<p>That&#8217;s so cool. I&#8217;m sure we&#8217;ll see some <em>amazing</em> things come from this. And it certainly isn&#8217;t limited to HSL. I was just using HSL because it&#8217;s what is comfortable to me right now. I could start with the named color <code>red</code> and mess with it in LCH if I want:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  background: lch(from red l calc(c + 15) h / 0.25);\n}</code></pre>\n\n\n\n<p>This stuff is going to be most useful when liberally combined with <a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">custom properties</a>. </p>\n\n\n\n<h3 id=\"there-are-no-special-functions-just-for-alpha-anymore\">There are no special functions just for alpha anymore.</h3>\n\n\n\n<p>Just to be clear: no commas preceding the alpha value in a CSS color function — just a forward slash instead:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Old! */\nrgb(255, 0, 0);\nrgba(255, 0, 0, 0.5);\n\n/* New! */\nrgb(255 0 0);\nrgb(255 0 0 / 0.5);\nhsl(0deg 40% 40%)\nhsl(0deg 40% 40% / 90%) /* can be percentage rather than 0.9 or whatever */\n\n/* The New color stuff ONLY has the single base function, no alpha secondardy function */\nlab(49% 39 80)\nlab(49% 39 80 / 0.25)\n\n/* Display P3, with the color function, essentially works the same way with the slash */\ncolor(display-p3 1 0.08 0 / 0.25); </code></pre>\n\n\n\n<h3 id=\"you-can-even-define-your-own-css-color-space\">You can even define your own CSS color space.</h3>\n\n\n\n<p>But I literally can&#8217;t even think about that. It blows my mind, sorry.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/new-css-color-features-preview/\">A Whistle-Stop Tour of 4 New CSS Color Features</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "I was just writing in my “What’s new in since CSS3?” article about recent and possible future changes to CSS colors. It’s weirdly a lot. There are just as many or more new and upcoming ways to define colors than what we have now. I thought we’d take a really quick look. \n\n\n\nFirst, a major heads up. This stuff is so complicated. I barely understand it. But here are some aspects:\n\n\n\nBefore all this upcoming change, we only had RGB as a color model, and everything dealt with that.We had different “color spaces” that handled it differently (e.g. the rgb() function mapped that RGB color model as a cube with linear coordinates, the hsl() function mapped that RGB color model as a cylinder) but it was all sRGB gamut.With the upcoming changes, we’re getting new color models and (!) we’re getting new functions that map that color model differently. So I think it’s kind of a double-triple whammy.\n\n\n\nI can’t personally educate you on all the nitty-gritty details — I’m writing this because I bet there are a lot of you like me, wondering why you should care at all about this, and this is my attempt to understand why I should care about all of it. \n\n\n\n\n\n\n\nDisplay-P3 is one that opens up a ton of more vibrant color that was able to be expressed before.\n\n\n\nbody {\n  background: color(display-p3 1 0.08 0); /* super red! */\n}\n\n\n\nIt turns out that modern monitors can display way more colors, particularly extra vibrant ones, but we just have no way of defining those colors with classic CSS color syntaxes, like HEX, RGB, and HSL. Super weird, right?! But if you use Display-P3, you get a wider range of access to these vibrant colors.\n\n\n\nThat white line in Safari DevTools is showing us the “extra” range of Display-P3\n\n\n\nThe dev shop Panic latched onto this early on and started using these colors as a “secret weapon”:\n\n\n\n🌈 Along with WebGL, p3 colors are now a big part of the Panic website secret weapon pile. Shh, don’t tell anyone, but you should see this page on an iMac Pro screen! https://t.co/glrhPNuCdR— Panic (@panic) May 24, 2019 \n\n\n\nJen Simmons also covers how to use them, including a fallback for non-supporting browsers:\n\n\n\nDisplay P3 color. Designing in the browser. Amazing. Let me show you how to switch over to P3, find a color, and then find a fallback color for older browsers. All while working inside Safari Web Inspector. (Turn sound on to hear me explain!) pic.twitter.com/AaKhrn2s3e— Jen Simmons (@jensimmons) January 5, 2022 \n\n\n\nResources\n\n\n\nWide Gamut Color in CSS with Display-P3 (WebKit Blog)The Expanding Gamut of Color on the Web (Ollie Williams)\n\n\n\nHWB is the one that is more “for humans” except that’s a bit debatable and it’s still based on sRGB.\n\n\n\nI had no idea hwb() was a thing — shout out to Stefan Judis for blogging about it. \n\n\n\nI normally think of HSL as the CSS color format that is “for humans” (and good for programmatic control) because, well, manipulating 360° of Hue and 0-100% of both Saturation and Lightness make some kind of obvious sense. \n\n\n\nBut in hwb(), we’ve got Hue (the same as HSL, I think), then Whiteness and Blackness. Stefan:\n\n\n\nAdding White and Black to a color affects its saturation. Suppose you add the same amount of White and Black to a color, the color tone stays the same, but color loses saturation. This works up to 50% White and 50% Black (hwb(0deg 50% 50%)), which results in an achromatic color.\n\n\n\n\n\n\n\nStefan expressed some doubt that this is any easier to understand than HSL, and I tend to agree. I probably just need to get more used to it, but it seems to be more abstract than simply changing the lightness or saturation. \n\n\n\nHWB is limited to the same color gamut (sRGB) as all the old color formats all. No new colors are unlocked here. \n\n\n\nResources\n\n\n\nHWB Color Pickerhwb() – a color notation for humans? (Stefan Judis)\n\n\n\nLAB is like rgb() of a much wider gamut\n\n\n\ndiv {\n  background: lab(150% -400 400);\n}\n\n\n\nI liked Eric Portis’ explanation of LAB when I went around asking about it:\n\n\n\nLAB is like RGB in that there are three linear components. Lower numbers mean less of the thing, bigger numbers mean more of the thing. So you could use LAB to specify the brightest, greenest green that ever bright-greened, and it’ll be super bright and green for everybody, but brighter and greener on monitors with wider gamuts.\n\n\n\nSo, we get all the extra color, which is awesome, but sRGB had this other problem (aside from being limited in color expression), that it isn’t perceptually uniform. Brian Kardell:\n\n\n\nThe sRGB space is not perceptually uniform. The same mathematical movement has different degrees of perceived effect depending on where you are at in the color space. If you want to read a designer’s experience with this, here’s an interesting example which does a good job struggling to do well.\n\n\n\nThe classic example here is how, in HSL, colors with the exact same “Lightness” really don’t feel the same at all. \n\n\n\nHSL vs LAB:: lightness 💡Same colors from our tricky color poll, but this time I’ve shown LAB’s version of the same color over top. Notice how much closer LAB’s lightness value is to the results of our poll! 🎨 color spaces aren’t all the same y’all! https://t.co/AIEs0amdWY pic.twitter.com/xkEguq3KZG— Adam Argyle (@argyleink) December 3, 2019 \n\n\n\nBut in LAB, apparently, it is perceptually uniform, meaning that programmatically manipulating colors is a much more sane task. And another bonus is that LAB colors are specced as being device-independent. Here’s Michelle Barker:\n\n\n\nLAB and LCH are defined in the specification as device-independent colors. LAB is a color space that can be accessed in software like Photoshop and is recommended if you want a color to look the same on-screen as, say, printed on a t-shirt.\n\n\n\nResources\n\n\n\n lab() (MDN)A Guide To Modern CSS Colors With RGB, HSL, HWB, LAB And LCH (Michelle Barker)\n\n\n\nLCH is like hsl() of a much wider gamut\n\n\n\nRemember how I said HSL is “for humans” in that it is easier understand than RGB? Changing the Hue, Saturation, and Lightness makes a lot of logical sense. Similar here with lch() where we’ve got Lightness, Chroma, and Hue. Back to my conversation with Eric Portis:\n\n\n\nLCH is more like HSL: a polar space. H = hue = a circle. So doing math to pick complementary colors (or whatever transforms you’re after) becomes trivial (just add 180 — or whatever!)\n\n\n\nI suppose you’d pick LCH just because you like the syntax of it or because it makes some complicated programmatic thing you’re trying to do easier — and you get the fact that it can express 50% more colors for free.\n\n\n\nWe get the perceptual uniformity here, too. Here’s Lea Verou who seems excited that lightness will actually mean something:\n\n\n\nIn HSL, lightness is meaningless. Colors can have the same lightness value, with wildly different perceptual lightness. […] With LCH, any colors with the same lightness are equally perceptually light, and any colors with the same chroma are equally perceptually saturated.\n\n\n\nAnother benefit of the new model is that we can wipe our hands clean of the “gray dead zone” in CSS color gradients. I think because of this perceptual uniformity stuff, two rich colors won’t get cheeky and gradient themselves through non-rich territory.\n\n\n\nThere will always be tradeoffs in color models, especially with gradients. (Demo)\n\n\n\nHere’s a small personal prediction: I’d say that lch() is probably going to be a designer favorite. Soon there are going to be a ton of new color choices and it’s too difficult and weird to always be picking different ones. LCH seems to have the most bang for the mental buck. \n\n\n\nResources\n\n\n\nlch() (MDN)LCH colors in CSS: what, why, and how? (Lea Verou)LCH Colour Picker\n\n\n\n“OK”\n\n\n\nLAB ‘n’ friends seems so new because it is new… to CSS. But LAB was invented in the 1940s. In a conversation with Adam Argyle, he used a memorable phrase: All the color spaces have an Achilles’ heel. That is, something they kinda suck at. For sRGB, it’s the grey dead zone thing, as well as the limited color gamut. LAB is great and all, but it certainly has its own weaknesses. For example, a blue-to-white gradient in LAB travels pretty awkwardly through purpletown. \n\n\n\nIn December 2020, Björn Ottosson is all like “Hey, a new color space just dropped,” and now OKLAB exists. Apparently the CSS powers-that-be see enough value in that color space that both oklab() and oklch() are already specced. I guess we should care because they are just generally better, but don’t quote me on that.\n\n\n\nWhy is it Display P3 uses the color() function but the other’s don’t?\n\n\n\nI don’t really know. I think the CSS color() function is a bit newer and that’s just how Safari dunked it in there to start. I have no idea if Display P3 will get its own dedicated function, or if we all should just start using CSS color(), or what.\n\n\n\n/* This is how you use Display P3 */\ncolor(display-p3 1 0.08 0); \n\n/* But this doesn't work */\ncolor(oklch 42.1% 0.192 328.6);\n\n/* You gotta do this instead 🤷‍♀️ */\noklch(42.1% 0.192 328.6);\n\n/* But you can use the color space within a gradient... */\nbackground-image: linear-gradient(\n    to right \n    in oklch,\n    lch(50% 100 100), \n    lch(50% 100 250)\n  );\n\n\n\nThe relative color syntax is super useful.\n\n\n\nThere is this really cool ability called “relative color syntax” where you can basically deconstruct a CSS color while moving it into another format. Say you have the (obviously) most famous CSS HEX color ever, fog dog, and you wanna kick it into HSL instead:\n\n\n\nbody {\n  background: hsl(from #f06d06 h s l);\n}\n\n\n\nMaybe that’s not all that useful immediately, but hey, now we’re able to add alpha to it! There is literally no other way to apply alpha to an existing HEX color, so that’s kinda huge:\n\n\n\nbody {\n  background: hsl(from #f06d06 h s l / 0.5);\n}\n\n\n\nBut I can also mess with it. Say I wanna saturate fog dog a bit before I add opacity because the lower opacity will naturally dull it out and I wanna combat that. I can use calc() on the implied variables there:\n\n\n\nbody {\n  background: hsl(from #f06d06 h calc(s + 20%) l / 0.5);\n}\n\n\n\nThat’s so cool. I’m sure we’ll see some amazing things come from this. And it certainly isn’t limited to HSL. I was just using HSL because it’s what is comfortable to me right now. I could start with the named color red and mess with it in LCH if I want:\n\n\n\nbody {\n  background: lch(from red l calc(c + 15) h / 0.25);\n}\n\n\n\nThis stuff is going to be most useful when liberally combined with custom properties. \n\n\n\nThere are no special functions just for alpha anymore.\n\n\n\nJust to be clear: no commas preceding the alpha value in a CSS color function — just a forward slash instead:\n\n\n\n/* Old! */\nrgb(255, 0, 0);\nrgba(255, 0, 0, 0.5);\n\n/* New! */\nrgb(255 0 0);\nrgb(255 0 0 / 0.5);\nhsl(0deg 40% 40%)\nhsl(0deg 40% 40% / 90%) /* can be percentage rather than 0.9 or whatever */\n\n/* The New color stuff ONLY has the single base function, no alpha secondardy function */\nlab(49% 39 80)\nlab(49% 39 80 / 0.25)\n\n/* Display P3, with the color function, essentially works the same way with the slash */\ncolor(display-p3 1 0.08 0 / 0.25); \n\n\n\nYou can even define your own CSS color space.\n\n\n\nBut I literally can’t even think about that. It blows my mind, sorry.\n\nA Whistle-Stop Tour of 4 New CSS Color Features originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-10T23:01:55.000Z",
      "date_modified": "2022-02-10T23:01:55.000Z",
      "_plugin": {
        "pageFilename": "59322c0a8763a5c67833f05a4e1a4e377de5eb1f23127d7fc6dd9b3bbb46bdf1.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363480",
      "url": "https://css-tricks.com/developers-speculating-about-the-long-distant-future-2022/",
      "title": "Developers Speculating About the Long-Distant Future: 2022",
      "summary": "This is a wonderful roundup from Jeremy, who I picture circling January 1, 2022, in red marker on a giant paper calendar back in 2008 and patiently counting the days.\nSee, there was a little smattering of internet drama …\n\nDevelopers Speculating About the Long-Distant Future: 2022 originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><a href=\"https://adactio.com/journal/18743\" rel=\"noopener\">This is a wonderful roundup from Jeremy</a>, who I picture circling January 1, 2022, in red marker on a giant paper calendar back in 2008 and patiently counting the days.</p>\n\n\n\n<p>See, there was a little smattering of internet drama back in 2008 (weird, right?) where Hixie kind of &#8220;officially speculated&#8221; that HTML5 would take 19 years to make it to full &#8220;recommended&#8221; status (2003-2022). Seems like <em>most</em> web developers at the time were quite certain HTML, and perhaps the internet as we know it, would be essentially obsolete by 2022. They were not right. </p>\n<p><a href=\"https://adactio.com/journal/18743\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/developers-speculating-about-the-long-distant-future-2022/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/developers-speculating-about-the-long-distant-future-2022/\">Developers Speculating About the Long-Distant Future: 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "This is a wonderful roundup from Jeremy, who I picture circling January 1, 2022, in red marker on a giant paper calendar back in 2008 and patiently counting the days.\n\n\n\nSee, there was a little smattering of internet drama back in 2008 (weird, right?) where Hixie kind of “officially speculated” that HTML5 would take 19 years to make it to full “recommended” status (2003-2022). Seems like most web developers at the time were quite certain HTML, and perhaps the internet as we know it, would be essentially obsolete by 2022. They were not right. \nTo Shared Link — Permalink on CSS-Tricks\nDevelopers Speculating About the Long-Distant Future: 2022 originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-10T21:45:09.000Z",
      "date_modified": "2022-02-10T21:45:09.000Z",
      "_plugin": {
        "pageFilename": "28e44b822d2329105301390baf0e4b079dab49e5a170f0d091244fb0bd34c9dc.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363079",
      "url": "https://css-tricks.com/nextjs-chrome-extension-starter/",
      "title": "Helpful Tips for Starting a Next.js Chrome Extension",
      "summary": "I recently rewrote one of my projects — Minimal Theme for Twitter — as a Next.js Chrome extension because I wanted to use React for the pop-up. Using React would allow me to clearly separate my extension’s pop-up component and …\n\nHelpful Tips for Starting a Next.js Chrome Extension originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>I recently rewrote one of my projects — <a href=\"https://github.com/thomaswang/minimal-twitter\" rel=\"noopener\">Minimal Theme for Twitter</a> — as a Next.js Chrome extension because I wanted to use React for the pop-up. Using React would allow me to clearly separate my extension’s pop-up component and its application logic from its <a href=\"https://developer.chrome.com/docs/extensions/mv3/content_scripts/\" rel=\"noopener\">content scripts</a>, which are the CSS and JavaScript files needed to execute the functionality of the extension.</p>\n\n\n\n<p>As you may know, there are several ways to get started with React, from simply <a href=\"https://reactjs.org/docs/add-react-to-a-website.html#step-2-add-the-script-tags\" rel=\"noopener\">adding script tags</a> to using a recommended <a href=\"https://reactjs.org/docs/create-a-new-react-app.html\" rel=\"noopener\">toolchain</a> like <a href=\"https://www.gatsbyjs.com/\" rel=\"noopener\">Create React App</a>, <a href=\"https://nextjs.org/\" rel=\"noopener\">Gatsby</a>, or <a href=\"https://nextjs.org/\" rel=\"noopener\">Next.js</a>. There are some <a href=\"https://nextjs.org/docs/advanced-features/static-html-export#supported-features\" rel=\"noopener\">immediate benefits</a> you get from Next.js as a React framework, like the static HTML feature you get with <code>next export</code>. While features like preloading JavaScript and built-in routing are great, my main goal with rewriting my Chrome extension was better code organization, and that’s really where Next.js shines. It gives you the most out-of-the-box for the least amount of unnecessary files and configuration. I tried fiddling around with Create React App and it has a <a href=\"https://create-react-app.dev/docs/getting-started#output\" rel=\"noopener\">surprising amount of boilerplate code</a> that I didn’t need.</p>\n\n\n\n<p>I thought it might be straightforward to convert over to a Next.js Chrome extension since it’s possible to export a Next.js application to static HTML. However, there are some gotchas involved, and this article is where I tell you about them so you can avoid some mistakes I made.</p>\n\n\n\n<span id=\"more-363079\"></span>\n\n\n\n<p>First, here’s <a href=\"https://github.com/thomaswang/next-chrome\" rel=\"noopener\">the GitHub repo</a> if you want to skip straight to the code.</p>\n\n\n\n<p class=\"is-style-explanation\">New to developing Chrome extensions? Sarah Drasner has a <a href=\"https://css-tricks.com/how-to-build-a-chrome-extension/\">primer to get you started</a>.</p>\n\n\n\n<h3 id=\"folder-structure\">Folder structure</h3>\n\n\n\n<p><code>next-export</code> is a post-processing step that compiles your Next.js code, so we don’t need to include the actual Next.js or React code in the extension. This allows us to keep our extension at its lowest possible file size, which is what we want for when the extension is eventually <a href=\"https://developer.chrome.com/docs/webstore/publish/\" rel=\"noopener\">published to the Chrome Web Store</a>.</p>\n\n\n\n<p>So, here’s how the code for my Next.js Chrome extension is organized. There are two directories — one for the extension’s code, and one containing the Next.js app.</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">&#x1f4c2; extension\n  &#x1f4c4; manifest.json\n&#x1f4c2; next-app\n  &#x1f4c2; pages\n  &#x1f4c2; public\n  &#x1f4c2; styles\n  &#x1f4c4; package.json\nREADME.md</code></pre>\n\n\n\n<h3 id=\"the-build-script\">The build script</h3>\n\n\n\n<p>To use <code>next export</code> in a normal web project, you would modify the default Next.js build script in <code>package.json</code> to this:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"scripts\": {\n  \"build\": \"next build &amp;&amp; next export\"\n}</code></pre>\n\n\n\n<p>Then, running <code>npm run build</code> (or <code>yarn build</code>) generates an <code>out</code> directory.</p>\n\n\n\n<p>In this case involving a Chrome extension, however, we need to export the output to our <code>extension</code> directory instead of <code>out</code>. Plus, we have to rename any files that begin with an underscore (<code>_</code>), as Chrome will fire off a warning that “Filenames starting with &#8220;_&#8221; are reserved for use by the system.”</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"3358\" height=\"2228\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1642397608126_CleanShot2022-01-17at00.32.342x.png?resize=3358%2C2228&#038;ssl=1\" alt=\"Screenshot of the Next.js Chrome Extension Chrome Extension Store with a failed to load extension error pop-up.\" class=\"wp-image-363080\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1642397608126_CleanShot2022-01-17at00.32.342x.png?w=3358&amp;ssl=1 3358w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1642397608126_CleanShot2022-01-17at00.32.342x.png?resize=300%2C199&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1642397608126_CleanShot2022-01-17at00.32.342x.png?resize=1024%2C679&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1642397608126_CleanShot2022-01-17at00.32.342x.png?resize=768%2C510&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1642397608126_CleanShot2022-01-17at00.32.342x.png?resize=1536%2C1019&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1642397608126_CleanShot2022-01-17at00.32.342x.png?resize=2048%2C1359&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1642397608126_CleanShot2022-01-17at00.32.342x.png?resize=1000%2C663&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1642397608126_CleanShot2022-01-17at00.32.342x.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>What we need is a way to customize those filenames so Chrome is less cranky.</figcaption></figure>\n\n\n\n<p>This leads us to have a new build script like this:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"scripts\": {\n  \"build\": \"next build &amp;&amp; next export &amp;&amp; mv out/_next out/next &amp;&amp; sed -i '' -e 's/\\\\/_next/\\\\.\\\\/next/g' out/**.html &amp;&amp; mv out/index.html ../extension &amp;&amp; rsync -va --delete-after out/next/ ../extension/next/\"\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\"><code>sed</code> on works differently on MacOS than it does on Linux. MacOS requires the <code>'' -e</code> flag to work correctly. If you’re on Linux you can omit that additional flag.</p>\n\n\n\n<h4 id=\"assets\">Assets</h4>\n\n\n\n<p>If you are using any assets in the <code>public</code> folder of your Next.js project, we need to bring that into our Chrome extension folder as well. For organization, adding a <code>next-assets</code> folder inside <code>public</code> ensures your assets aren’t output directly into the <code>extension</code> directory.</p>\n\n\n\n<p>The full build script with assets is this, and it’s a big one:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"scripts\": {\n  \"build\": \"next build &amp;&amp; next export &amp;&amp; mv out/_next out/next &amp;&amp; sed -i '' -e 's/\\\\/_next/\\\\.\\\\/next/g' out/**.html &amp;&amp; mv out/index.html ../extension &amp;&amp; rsync -va --delete-after out/next/ ../extension/next/ &amp;&amp; rm -rf out &amp;&amp; rsync -va --delete-after public/next-assets ../extension/\"\n}</code></pre>\n\n\n\n<h3 id=\"chrome-extension-manifest\">Chrome Extension Manifest</h3>\n\n\n\n<p>The most common pattern for activating a Chrome extension is to trigger a pop-up when the extension is clicked. We can do that in <a href=\"https://developer.chrome.com/docs/extensions/mv3/intro/\" rel=\"noopener\">Manifest V3</a> by using the <code>action</code> keyword. And in that, we can specify <code>default_popup</code> so that it points to an HTML file.</p>\n\n\n\n<p>Here we are pointing to an <code>index.html</code> from Next.js:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"6,7,8,9\"><code markup=\"tt\">{\n  \"name\": \"Next Chrome\",\n  \"description\": \"Next.js Chrome Extension starter\",\n  \"version\": \"0.0.1\",\n  \"manifest_version\": 3,\n  \"action\": {\n    \"default_title\": \"Next.js app\",\n    \"default_popup\": \"index.html\"\n  }\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">The <a href=\"https://developer.chrome.com/docs/extensions/reference/action/\" rel=\"noopener\"><code>action</code></a> API replaced <a href=\"https://developer.chrome.com/docs/extensions/reference/browserAction/\" rel=\"noopener\"><code>browserAction</code></a> and <a href=\"https://developer.chrome.com/docs/extensions/reference/pageAction/\" rel=\"noopener\"><code>pageAction</code></a>` in Manifest V3.</p>\n\n\n\n<h3 id=\"next-js-features-that-are-unsupported-by-chrome-extensions\">Next.js features that are unsupported by Chrome extensions</h3>\n\n\n\n<p>Some Next.js features require a Node.js web server, so <a href=\"https://nextjs.org/docs/advanced-features/static-html-export#unsupported-features\" rel=\"noopener\">server-related features</a>, like <a href=\"https://nextjs.org/docs/api-reference/next/image\" rel=\"noopener\"><code>next/image</code></a>, are unsupported by a Chrome extension.</p>\n\n\n\n<h3 id=\"start-developing\">Start developing</h3>\n\n\n\n<p>Last step is to test the updated Next.js Chrome extension. Run <code>npm build</code> (or <code>yarn build</code>) from the <code>next-app</code> directory, while making sure that the <code>manifest.json</code> file is in the <code>extension</code> directory.</p>\n\n\n\n<p>Then, head over to <code>chrome://extensions</code> in a new Chrome browser window, enable <strong>Developer Mode</strong>*,* and click on the <strong>Load Unpacked</strong> button. Select your <code>extension</code> directory, and you should be able to start developing!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1363\" height=\"966\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1643392246905_screenshot.png?resize=1363%2C966&#038;ssl=1\" alt=\"Screenshot of Chrome open to Google's homepage and a Next.js Chrome extension pop-up along the right side.\" class=\"wp-image-363084\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1643392246905_screenshot.png?w=1363&amp;ssl=1 1363w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1643392246905_screenshot.png?resize=300%2C213&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1643392246905_screenshot.png?resize=1024%2C726&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1643392246905_screenshot.png?resize=768%2C544&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_EC3F93C336EF3FAA64B8384642A6F175FADA3A235447EC3A34E69E391074F1AA_1643392246905_screenshot.png?resize=1000%2C709&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n\n<p>That’s it! Like I said, none of this was immediately obvious to me as I was getting started with my Chrome extension rewrite. But hopefully now you see how relatively straightforward it is to get the benefits of Next.js development for developing a Chrome extension. And I hope it saves you the time it took me to figure it out!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/nextjs-chrome-extension-starter/\">Helpful Tips for Starting a Next.js Chrome Extension</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "I recently rewrote one of my projects — Minimal Theme for Twitter — as a Next.js Chrome extension because I wanted to use React for the pop-up. Using React would allow me to clearly separate my extension’s pop-up component and its application logic from its content scripts, which are the CSS and JavaScript files needed to execute the functionality of the extension.\n\n\n\nAs you may know, there are several ways to get started with React, from simply adding script tags to using a recommended toolchain like Create React App, Gatsby, or Next.js. There are some immediate benefits you get from Next.js as a React framework, like the static HTML feature you get with next export. While features like preloading JavaScript and built-in routing are great, my main goal with rewriting my Chrome extension was better code organization, and that’s really where Next.js shines. It gives you the most out-of-the-box for the least amount of unnecessary files and configuration. I tried fiddling around with Create React App and it has a surprising amount of boilerplate code that I didn’t need.\n\n\n\nI thought it might be straightforward to convert over to a Next.js Chrome extension since it’s possible to export a Next.js application to static HTML. However, there are some gotchas involved, and this article is where I tell you about them so you can avoid some mistakes I made.\n\n\n\n\n\n\n\nFirst, here’s the GitHub repo if you want to skip straight to the code.\n\n\n\nNew to developing Chrome extensions? Sarah Drasner has a primer to get you started.\n\n\n\nFolder structure\n\n\n\nnext-export is a post-processing step that compiles your Next.js code, so we don’t need to include the actual Next.js or React code in the extension. This allows us to keep our extension at its lowest possible file size, which is what we want for when the extension is eventually published to the Chrome Web Store.\n\n\n\nSo, here’s how the code for my Next.js Chrome extension is organized. There are two directories — one for the extension’s code, and one containing the Next.js app.\n\n\n\n📂 extension\n  📄 manifest.json\n📂 next-app\n  📂 pages\n  📂 public\n  📂 styles\n  📄 package.json\nREADME.md\n\n\n\nThe build script\n\n\n\nTo use next export in a normal web project, you would modify the default Next.js build script in package.json to this:\n\n\n\n\"scripts\": {\n  \"build\": \"next build && next export\"\n}\n\n\n\nThen, running npm run build (or yarn build) generates an out directory.\n\n\n\nIn this case involving a Chrome extension, however, we need to export the output to our extension directory instead of out. Plus, we have to rename any files that begin with an underscore (_), as Chrome will fire off a warning that “Filenames starting with “_” are reserved for use by the system.”\n\n\n\nWhat we need is a way to customize those filenames so Chrome is less cranky.\n\n\n\nThis leads us to have a new build script like this:\n\n\n\n\"scripts\": {\n  \"build\": \"next build && next export && mv out/_next out/next && sed -i '' -e 's/\\\\/_next/\\\\.\\\\/next/g' out/**.html && mv out/index.html ../extension && rsync -va --delete-after out/next/ ../extension/next/\"\n}\n\n\n\nsed on works differently on MacOS than it does on Linux. MacOS requires the '' -e flag to work correctly. If you’re on Linux you can omit that additional flag.\n\n\n\nAssets\n\n\n\nIf you are using any assets in the public folder of your Next.js project, we need to bring that into our Chrome extension folder as well. For organization, adding a next-assets folder inside public ensures your assets aren’t output directly into the extension directory.\n\n\n\nThe full build script with assets is this, and it’s a big one:\n\n\n\n\"scripts\": {\n  \"build\": \"next build && next export && mv out/_next out/next && sed -i '' -e 's/\\\\/_next/\\\\.\\\\/next/g' out/**.html && mv out/index.html ../extension && rsync -va --delete-after out/next/ ../extension/next/ && rm -rf out && rsync -va --delete-after public/next-assets ../extension/\"\n}\n\n\n\nChrome Extension Manifest\n\n\n\nThe most common pattern for activating a Chrome extension is to trigger a pop-up when the extension is clicked. We can do that in Manifest V3 by using the action keyword. And in that, we can specify default_popup so that it points to an HTML file.\n\n\n\nHere we are pointing to an index.html from Next.js:\n\n\n\n{\n  \"name\": \"Next Chrome\",\n  \"description\": \"Next.js Chrome Extension starter\",\n  \"version\": \"0.0.1\",\n  \"manifest_version\": 3,\n  \"action\": {\n    \"default_title\": \"Next.js app\",\n    \"default_popup\": \"index.html\"\n  }\n}\n\n\n\nThe action API replaced browserAction and pageAction` in Manifest V3.\n\n\n\nNext.js features that are unsupported by Chrome extensions\n\n\n\nSome Next.js features require a Node.js web server, so server-related features, like next/image, are unsupported by a Chrome extension.\n\n\n\nStart developing\n\n\n\nLast step is to test the updated Next.js Chrome extension. Run npm build (or yarn build) from the next-app directory, while making sure that the manifest.json file is in the extension directory.\n\n\n\nThen, head over to chrome://extensions in a new Chrome browser window, enable Developer Mode*,* and click on the Load Unpacked button. Select your extension directory, and you should be able to start developing!\n\n\n\n\n\n\n\nWrapping up\n\n\n\nThat’s it! Like I said, none of this was immediately obvious to me as I was getting started with my Chrome extension rewrite. But hopefully now you see how relatively straightforward it is to get the benefits of Next.js development for developing a Chrome extension. And I hope it saves you the time it took me to figure it out!\n\nHelpful Tips for Starting a Next.js Chrome Extension originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-10T15:24:02.000Z",
      "date_modified": "2022-02-10T15:24:02.000Z",
      "_plugin": {
        "pageFilename": "7c68fb11b59f7c1266355947ecfeffb5a4a3299ed9a8b1264ff911444980dd7f.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362991",
      "url": "https://css-tricks.com/a-chrome-extension-for-cloudinary-that-helps-you-pluck-out-useful-media-urls-from-your-library-quickly/",
      "title": "A Chrome Extension for Cloudinary That Helps You Pluck Out Useful Media URLs From Your Library Quickly",
      "summary": "(This is a sponsored post.)\nCloudinary is a host for your digital assets like images and video. If you don’t already know them, you should, because you can build it into the asset management you almost certainly need to …\n\nA Chrome Extension for Cloudinary That Helps You Pluck Out Useful Media URLs From Your Library Quickly originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p><a href=\"https://srv.buysellads.com/ads/long/x/TFSQE3Z4TTTTTTHFEY3N6TTTTTT4S2T4KVTTTTTTETSTPYETTTTTTSP3KJSF67ZEKYBILJLZV7SNB7LZK2DNAMBPQ27T\" rel=\"noopener\">Cloudinary </a>is a host for your digital assets like images and video. If you don&#8217;t already know them, you should, because you can build it into the asset management you almost certainly need to do if you run any size of website. Cloudinary helps you serve the assets as efficiently as technologically possible, meaning optimization, resizing, CDN hosting, and goes further in allowing interesting transforms on those assets.</p>\n\n\n\n<p>If you already use it, unless you use it entirely through the APIs, you&#8217;ll know Cloudinary has a Media Library that gives you a UI dashboard for everything you&#8217;ve ever uploaded to Cloudinary. This is where you find your assets and open them up to play with the settings and transformations and such (e.g. <em>blur it — then serve in the best possible format with automatic quality adjustments</em>). You can always pop over to cloudinary.com to use this. But wouldn&#8217;t it be nice if this process was made a bit easier?</p>\n\n\n\n<span id=\"more-362991\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2834\" height=\"2052\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.37.41@2x.png?resize=2834%2C2052&#038;ssl=1\" alt=\"\" class=\"wp-image-362995\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.37.41@2x.png?w=2834&amp;ssl=1 2834w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.37.41@2x.png?resize=300%2C217&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.37.41@2x.png?resize=1024%2C741&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.37.41@2x.png?resize=768%2C556&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.37.41@2x.png?resize=1536%2C1112&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.37.41@2x.png?resize=2048%2C1483&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.37.41@2x.png?resize=1000%2C724&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>That clutch moment where you get the URL of the image you need. </figcaption></figure>\n\n\n\n<p>There are all sorts of moments while bopping the web around doing our jobs as developers where you might need to get your fingers on an asset URL. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"800\" height=\"304\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.29.48.gif?resize=800%2C304&#038;ssl=1\" alt=\"\" class=\"wp-image-362996\" data-recalc-dims=\"1\"/><figcaption>Gimme that URL!</figcaption></figure>\n\n\n\n<p>Here&#8217;s a personal example: we have a little custom CMS thing for building our weekly email The CodePen Spark. It expects a URL to an image. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2245\" height=\"2317\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.40.38@2x.png?resize=2245%2C2317&#038;ssl=1\" alt=\"\" class=\"wp-image-362997\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.40.38@2x.png?w=2245&amp;ssl=1 2245w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.40.38@2x.png?resize=291%2C300&amp;ssl=1 291w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.40.38@2x.png?resize=992%2C1024&amp;ssl=1 992w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.40.38@2x.png?resize=768%2C793&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.40.38@2x.png?resize=1488%2C1536&amp;ssl=1 1488w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.40.38@2x.png?resize=1984%2C2048&amp;ssl=1 1984w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.40.38@2x.png?resize=1000%2C1032&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>This is the exact kind of moment that the <strong><em>brand new</em></strong> <a href=\"https://srv.buysellads.com/ads/long/x/TFSQE3Z4TTTTTTHFEY3N6TTTTTT4M2T4KVTTTTTTETSTPYETTTTTTKSPGTBUCNZ32M7UWKPHCQPHEMIJQJPW6RZ3CJFT\" rel=\"noopener\">Chrome Media Library Extension</a> could help. Essentially it gives you a context menu you can use right in the browser to snag a URL to an asset. Right click, <strong>Insert and Asset URL</strong>. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1230\" height=\"814\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.45.08@2x.png?resize=1230%2C814&#038;ssl=1\" alt=\"\" class=\"wp-image-362999\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.45.08@2x.png?w=1230&amp;ssl=1 1230w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.45.08@2x.png?resize=300%2C199&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.45.08@2x.png?resize=1024%2C678&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.45.08@2x.png?resize=768%2C508&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.45.08@2x.png?resize=1000%2C662&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It pops up a UI right inline (where you are on the web) of your Media Library, and you pick an image from there. Find the one you want, open it up, and you can either &#8220;edit&#8221; it to customize it to your liking, or just <strong>Insert</strong> it straight away. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"784\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.46.25@2x.png?resize=1024%2C784&#038;ssl=1\" alt=\"\" class=\"wp-image-363000\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.46.25@2x.png?resize=1024%2C784&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.46.25@2x.png?resize=300%2C230&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.46.25@2x.png?resize=768%2C588&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.46.25@2x.png?resize=1536%2C1175&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.46.25@2x.png?resize=2048%2C1567&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.46.25@2x.png?resize=1000%2C765&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Then it plops the URL right onto the site (probably an input) where you need it. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1042\" height=\"436\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.47.46@2x.png?resize=1042%2C436&#038;ssl=1\" alt=\"\" class=\"wp-image-363001\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.47.46@2x.png?w=1042&amp;ssl=1 1042w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.47.46@2x.png?resize=300%2C126&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.47.46@2x.png?resize=1024%2C428&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.47.46@2x.png?resize=768%2C321&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-31-at-15.47.46@2x.png?resize=1000%2C418&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>You can set up defaults to your liking, but I really like how the defaults are <code>f_auto</code> and <code>q_auto</code> which are Cloudinary classics that you&#8217;ll almost surely want. They mean &#8220;serve in the best possible format&#8221; and &#8220;optimize it intelligently&#8221;. </p>\n\n\n\n<p>Sharon Yelenik <a href=\"https://srv.buysellads.com/ads/long/x/TFSQE3Z4TTTTTTHFEY3N6TTTTTT4M2T4KVTTTTTTETSTPYETTTTTTKSPGTBUCNZ32M7UWKPHCQPHEMIJQJPW6RZ3CJFT\" rel=\"noopener\">introduced it on the Cloudinary blog</a>: </p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Say your team creates social posts on a browser tab on an automated marketing application. To locate a media asset, you must open another tab to search for the asset within the Media Library, copy the related URL, and paste it into the app. In some cases, you even have to download an asset and then upload it into the app.</p><p>Talk about a classic example of menial, mundane, and repetitive chores!</p></blockquote>\n\n\n\n<p>Exactly. I like the idea of having tools to optimize workflows that <em>should</em> be easy. I&#8217;d also call Cloudinary a bit of a technical/developer tool, and there is an aspect to this that could be set up on anyone&#8217;s machine that would allow them to pick assets from your Media Library easily, without any access control worries.</p>\n\n\n\n<p>If all this appeals to you:</p>\n\n\n\n<div class=\"wp-container-620ee303cf00a wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://srv.buysellads.com/ads/long/x/TFSQE3Z4TTTTTTHFEY3N6TTTTTTPHGY4KVTTTTTTETSTPYETTTTTTKPCG3DFTASZCQTN6BBU52PCPRQ7KJSUK2DWCQPE\" rel=\"noopener\">Get the Chrome Extension</a></div>\n</div>\n\n\n\n<p>Or see more at <a href=\"https://srv.buysellads.com/ads/long/x/TFSQE3Z4TTTTTTHFEY3N6TTTTTT472T4KVTTTTTTETSTPYETTTTTTKP2C2Q6AKLK53IMLWB5G3IN5R4FPHQ6K2SQK74E\" rel=\"noopener\">Cloudinary Labs</a>, <a href=\"https://srv.buysellads.com/ads/long/x/TFSQE3Z4TTTTTTHFEY3N6TTTTTT4U2T4KVTTTTTTETSTPYETTTTTTSSJPRLDE2DNGQKIL7QYCH36BEZL27AD4IZU5RCT\" rel=\"noopener\">documentation</a>, and <a href=\"https://srv.buysellads.com/ads/long/x/TFSQE3Z4TTTTTTHFEY3N6TTTTTT4M2T4KVTTTTTTETSTPYETTTTTTKSPGTBUCNZ32M7UWKPHCQPHEMIJQJPW6RZ3CJFT\" rel=\"noopener\">blog post</a>.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-chrome-extension-for-cloudinary-that-helps-you-pluck-out-useful-media-urls-from-your-library-quickly/\">A Chrome Extension for Cloudinary That Helps You Pluck Out Useful Media URLs From Your Library Quickly</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "(This is a sponsored post.)\nCloudinary is a host for your digital assets like images and video. If you don’t already know them, you should, because you can build it into the asset management you almost certainly need to do if you run any size of website. Cloudinary helps you serve the assets as efficiently as technologically possible, meaning optimization, resizing, CDN hosting, and goes further in allowing interesting transforms on those assets.\n\n\n\nIf you already use it, unless you use it entirely through the APIs, you’ll know Cloudinary has a Media Library that gives you a UI dashboard for everything you’ve ever uploaded to Cloudinary. This is where you find your assets and open them up to play with the settings and transformations and such (e.g. blur it — then serve in the best possible format with automatic quality adjustments). You can always pop over to cloudinary.com to use this. But wouldn’t it be nice if this process was made a bit easier?\n\n\n\n\n\n\n\nThat clutch moment where you get the URL of the image you need. \n\n\n\nThere are all sorts of moments while bopping the web around doing our jobs as developers where you might need to get your fingers on an asset URL. \n\n\n\nGimme that URL!\n\n\n\nHere’s a personal example: we have a little custom CMS thing for building our weekly email The CodePen Spark. It expects a URL to an image. \n\n\n\n\n\n\n\nThis is the exact kind of moment that the brand new Chrome Media Library Extension could help. Essentially it gives you a context menu you can use right in the browser to snag a URL to an asset. Right click, Insert and Asset URL. \n\n\n\n\n\n\n\nIt pops up a UI right inline (where you are on the web) of your Media Library, and you pick an image from there. Find the one you want, open it up, and you can either “edit” it to customize it to your liking, or just Insert it straight away. \n\n\n\n\n\n\n\nThen it plops the URL right onto the site (probably an input) where you need it. \n\n\n\n\n\n\n\nYou can set up defaults to your liking, but I really like how the defaults are f_auto and q_auto which are Cloudinary classics that you’ll almost surely want. They mean “serve in the best possible format” and “optimize it intelligently”. \n\n\n\nSharon Yelenik introduced it on the Cloudinary blog: \n\n\n\nSay your team creates social posts on a browser tab on an automated marketing application. To locate a media asset, you must open another tab to search for the asset within the Media Library, copy the related URL, and paste it into the app. In some cases, you even have to download an asset and then upload it into the app.Talk about a classic example of menial, mundane, and repetitive chores!\n\n\n\nExactly. I like the idea of having tools to optimize workflows that should be easy. I’d also call Cloudinary a bit of a technical/developer tool, and there is an aspect to this that could be set up on anyone’s machine that would allow them to pick assets from your Media Library easily, without any access control worries.\n\n\n\nIf all this appeals to you:\n\n\n\n\nGet the Chrome Extension\n\n\n\n\nOr see more at Cloudinary Labs, documentation, and blog post.\n\nA Chrome Extension for Cloudinary That Helps You Pluck Out Useful Media URLs From Your Library Quickly originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-10T15:23:31.000Z",
      "date_modified": "2022-02-10T15:23:31.000Z",
      "_plugin": {
        "pageFilename": "089b8447749cf1451868f4d06f42078df588e092b2844fb93a36fe8778e56789.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362777",
      "url": "https://css-tricks.com/svgcode-raster-to-vector/",
      "title": "SVGcode for “Live Tracing” Raster Images",
      "summary": "Say you have a bitmap graphic — like a JPG, PNG, or GIF — and you wish it was vector, like SVG. What do you do? You could trace it yourself in some kind of design software. Or tools within …\n\nSVGcode for “Live Tracing” Raster Images originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Say you have a bitmap graphic — like a JPG, PNG, or GIF — and you wish it was vector, like SVG. What do you do? You could trace it yourself in some kind of design software. Or tools within design software can help. </p>\n\n\n\n<p>(I don&#8217;t wanna delay the lede here, there is a free online tool for it now called <a href=\"https://svgco.de/\" rel=\"noopener\">SVGcode</a>.)</p>\n\n\n\n<p>I remember when Adobe Illustrator CS2 dropped in 2005 it had a feature called &#8220;Live Trace&#8221; and I totally made it <em>my aesthetic</em>. I used to make business cards for my folk band and they all had the look of a photograph-gone-vector. These days they apparently call it Image Trace. </p>\n\n\n\n<span id=\"more-362777\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1238\" height=\"1400\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/image-trace.png?resize=1238%2C1400&#038;ssl=1\" alt=\"Showing two images comparing a raster image to the Image Trace effect in Adobe Illustrator.\" class=\"wp-image-362994\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/image-trace.png?w=1238&amp;ssl=1 1238w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/image-trace.png?resize=265%2C300&amp;ssl=1 265w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/image-trace.png?resize=906%2C1024&amp;ssl=1 906w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/image-trace.png?resize=768%2C868&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/image-trace.png?resize=1000%2C1131&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 id=\"svgcode-does-exactly-this-for-free\">SVGcode does exactly this, for free</h3>\n\n\n\n<p>Adobe software costs money though, so what other options are out there? I imagine they are out there, but now there is a wonderfully single-purpose web app called <a href=\"https://svgco.de/\" rel=\"noopener\">SVGcode</a> for it by <a href=\"https://blog.tomayac.com/about\" rel=\"noopener\">Thomas Steiner</a>! He&#8217;s written about it in a couple of places:</p>\n\n\n\n<ul><li><a href=\"https://blog.tomayac.com/2021/11/22/releasing-svgcode/\" rel=\"noopener\">Releasing SVGcode</a></li><li><a href=\"https://web.dev/svgcode/\" rel=\"noopener\">SVGcode: a PWA to convert raster images to SVG vector graphics</a></li></ul>\n\n\n\n<p>I think it&#8217;s so cool both in what it does (super useful!) but also in the approach (so impressive what web apps can do these days!):</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>It uses the File System Access API, the Async Clipboard API, the File Handling API, and Window Controls Overlay customization. [&#8230;]<br><br>Credit where credit is due: I didn&#8217;t invent this. With SVGcode, I just stand on the shoulders of a command line tool called&nbsp;<a href=\"http://potrace.sourceforge.net/\" rel=\"noopener\">Potrace</a>&nbsp;by&nbsp;<a href=\"https://www.mathstat.dal.ca/~selinger/\" rel=\"noopener\">Peter Selinger</a>&nbsp;that I have&nbsp;<a href=\"https://www.npmjs.com/package/esm-potrace-wasm\" rel=\"noopener\">converted to Web Assembly</a>, so it can be used in a Web app.</p></blockquote>\n\n\n\n<p>My just-out-of-college aesthetic is gonna live on people!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"3008\" height=\"2736\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/svgcode-example.png?resize=3008%2C2736&#038;ssl=1\" alt=\"Showing the Image Trace effect previewed in SVGcode.\" class=\"wp-image-363360\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/svgcode-example.png?w=3008&amp;ssl=1 3008w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/svgcode-example.png?resize=300%2C273&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/svgcode-example.png?resize=1024%2C931&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/svgcode-example.png?resize=768%2C699&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/svgcode-example.png?resize=1536%2C1397&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/svgcode-example.png?resize=2048%2C1863&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/svgcode-example.png?resize=1000%2C910&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Thomas joined me and Dave <a href=\"https://shoptalkshow.com/497/\" rel=\"noopener\">over on ShopTalk episode #497</a> if you&#8217;re interested in hearing straight from Thomas about not just this, but the whole world of capable web apps. That episode was sort of designed as a follow-up to an article I wrote that asks: <a href=\"https://css-tricks.com/why-would-a-business-push-a-native-app-over-a-website/\">&#8220;Why would a business push a native app over a&nbsp;website?&#8221;</a></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/svgcode-raster-to-vector/\">SVGcode for &#8220;Live Tracing&#8221; Raster Images</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Say you have a bitmap graphic — like a JPG, PNG, or GIF — and you wish it was vector, like SVG. What do you do? You could trace it yourself in some kind of design software. Or tools within design software can help. \n\n\n\n(I don’t wanna delay the lede here, there is a free online tool for it now called SVGcode.)\n\n\n\nI remember when Adobe Illustrator CS2 dropped in 2005 it had a feature called “Live Trace” and I totally made it my aesthetic. I used to make business cards for my folk band and they all had the look of a photograph-gone-vector. These days they apparently call it Image Trace. \n\n\n\n\n\n\n\n\n\n\n\nSVGcode does exactly this, for free\n\n\n\nAdobe software costs money though, so what other options are out there? I imagine they are out there, but now there is a wonderfully single-purpose web app called SVGcode for it by Thomas Steiner! He’s written about it in a couple of places:\n\n\n\nReleasing SVGcodeSVGcode: a PWA to convert raster images to SVG vector graphics\n\n\n\nI think it’s so cool both in what it does (super useful!) but also in the approach (so impressive what web apps can do these days!):\n\n\n\nIt uses the File System Access API, the Async Clipboard API, the File Handling API, and Window Controls Overlay customization. […]Credit where credit is due: I didn’t invent this. With SVGcode, I just stand on the shoulders of a command line tool called Potrace by Peter Selinger that I have converted to Web Assembly, so it can be used in a Web app.\n\n\n\nMy just-out-of-college aesthetic is gonna live on people!\n\n\n\n\n\n\n\n\n\n\n\nThomas joined me and Dave over on ShopTalk episode #497 if you’re interested in hearing straight from Thomas about not just this, but the whole world of capable web apps. That episode was sort of designed as a follow-up to an article I wrote that asks: “Why would a business push a native app over a website?”\n\nSVGcode for “Live Tracing” Raster Images originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-09T21:39:41.000Z",
      "date_modified": "2022-02-09T21:39:41.000Z",
      "_plugin": {
        "pageFilename": "ce88fe0e6348fbbcd47b1485ce0c0d14aa9fbe7bd5c4c21fbb1a5fb1af0cbf38.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362940",
      "url": "https://css-tricks.com/css-slanted-containers/",
      "title": "How to Make CSS Slanted Containers",
      "summary": "I was updating my portfolio and wanted to use the forward slash (/) as a visual element for the site’s main layout. I hadn’t attempted to create a slanted container in CSS before, but it seemed like it …\n\nHow to Make CSS Slanted Containers originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>I was updating my portfolio and wanted to use the forward slash (<code>/</code>) as a visual element for the site’s main layout. I hadn&#8217;t attempted to create a slanted container in CSS before, but it seemed like it would be easy at first glance. As I began digging into it more, however, there were actually a few very interesting challenges to get a working CSS slanted container that supports text and media.</p>\n\n\n\n<span id=\"more-362940\"></span>\n\n\n\n<p>Here’s what was going for and where I finally landed:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNGgYWg\" src=\"//codepen.io/anon/embed/rNGgYWg?height=450&amp;theme-id=1&amp;slug-hash=rNGgYWg&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNGgYWg\" title=\"CodePen Embed rNGgYWg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I started by looking around for examples of non-rectangular containers that allowed text to flow naturally inside of them. I assumed it’d be possible with CSS since programs like Adobe Illustrator and Microsoft Word have been doing it for years.</p>\n\n\n\n<h3 id=\"step-1-make-a-css-slanted-container-with-transforms\">Step 1: Make a CSS slanted container with transforms</h3>\n\n\n\n<p>I found the <a href=\"https://drafts.csswg.org/css-shapes/#shape-outside-property\" rel=\"noopener\">CSS Shapes Module</a> and that works very well for <a href=\"https://codepen.io/web-tiki/pen/vExNjp\" rel=\"noopener\">simple text content</a> if we put the <code><a href=\"https://css-tricks.com/almanac/properties/s/shape-outside/\">shape-outside</a></code> property to use. It can even fully justify the text. But what it doesn&#8217;t do is allow content to scroll <em>within</em> the container. So, as the user scrolls down, the entire slanted container appears to move left, which isn’t the effect I wanted. Instead, I took a simpler approach by adding <code><a href=\"https://css-tricks.com/almanac/properties/t/transform/#aa-skew\">transform: skew()</a></code> to the container.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.slant-container {\n  transform: skew(14deg);\n}</code></pre>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='417' src='https://videopress.com/embed/xkUzbskB?cover=1&amp;autoPlay=1&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\"></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>That was a good start! The container was definitely slanted and scrolling worked as expected while pure CSS handled the resizing for images. The obvious problem, however, is that the text and images became slanted as well, making the content more difficult to read and the images distorted.</p>\n\n\n\n<h3 id=\"step-2-reverse-the-font\">Step 2: Reverse the font</h3>\n\n\n\n<p>I made a few attempts to solve the issues with slanted text and images with CSS but eventually came up with an even simpler solution: <strong>create a new font using</strong> <strong>FontForge</strong> <strong>to reverse the text’s slant.</strong></p>\n\n\n\n<p><a href=\"https://fontforge.org/en-US/\" rel=\"noopener\">FontForge</a> is an open-source font editor. I’d chosen <a href=\"https://fonts.google.com/specimen/Roboto+Condensed\" rel=\"noopener\">Roboto Condensed Light</a> for the site’s main content, so I downloaded the <code>.ttf</code> file and opened it up in FontForge. From there, I selected all the glyphs and applied a skew of <code>14deg</code> to compensate for the slanting caused by the CSS transform on the container. I saved the new font file as <code>Roboto-Rev-Italic.ttf</code> and called it from my stylesheet.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2160\" height=\"1008\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8C44FC5FBEFCE491D28207B8D7A84D74DAECF0E41EDC36D0CED2DD3F1269DC90_1630503823656_font.png?resize=2160%2C1008&#038;ssl=1\" alt=\"A screenshot of FontForge displaying glyphs from the Roboto font file in square tiles. The letters and symbols are slanted toward the left, opposite of a normal italic font style.\" class=\"wp-image-362943\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8C44FC5FBEFCE491D28207B8D7A84D74DAECF0E41EDC36D0CED2DD3F1269DC90_1630503823656_font.png?w=2160&amp;ssl=1 2160w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8C44FC5FBEFCE491D28207B8D7A84D74DAECF0E41EDC36D0CED2DD3F1269DC90_1630503823656_font.png?resize=300%2C140&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8C44FC5FBEFCE491D28207B8D7A84D74DAECF0E41EDC36D0CED2DD3F1269DC90_1630503823656_font.png?resize=1024%2C478&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8C44FC5FBEFCE491D28207B8D7A84D74DAECF0E41EDC36D0CED2DD3F1269DC90_1630503823656_font.png?resize=768%2C358&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8C44FC5FBEFCE491D28207B8D7A84D74DAECF0E41EDC36D0CED2DD3F1269DC90_1630503823656_font.png?resize=1536%2C717&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8C44FC5FBEFCE491D28207B8D7A84D74DAECF0E41EDC36D0CED2DD3F1269DC90_1630503823656_font.png?resize=2048%2C956&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8C44FC5FBEFCE491D28207B8D7A84D74DAECF0E41EDC36D0CED2DD3F1269DC90_1630503823656_font.png?resize=1000%2C467&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>There we go. Now the font is slanted in the <em>opposite</em> direction by the same amount of the container&#8217;s slant, offsetting things so that the content appears like the normal Roboto font I was originally using.</p>\n\n\n\n<h3 id=\"step-3-refine-images-and-videos\">Step 3: Refine images and videos</h3>\n\n\n\n<p>That worked great for the text! Selecting the text even functioned normally. From there, all I needed to do was reverse the slant for block-level image and video elements using a negative <code>skew()</code> value that offsets the value applied to the container:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">img,\nvideo {\n  transform: skew(-14deg);\n}</code></pre>\n\n\n\n<p>I did wind up wrapping images and videos in extra divs, though. That way, I could give them nice backgrounds that appear to square nicely with the container. What I did was hook into the <code>::after</code> pseudo-element and position it with a background that extends beyond the slanted container’s left and right edges.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">img::after,\nvideo::after {\n  content: '';\n  display: block;\n  background: rgba(0, 0, 0, 0.5);\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 200%;\n  height: 100%;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='417' src='https://videopress.com/embed/nyLgQseL?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\"></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div><figcaption>It’s subtle, but notice that the top-right and bottom-left corners of the image are filled in by the background of its ::after pseudo-element, making things feel more balanced.</figcaption></figure>\n\n\n\n<h3 id=\"final-demo\">Final demo</h3>\n\n\n\n<p>Here’s that final demo again:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNGgYWg\" src=\"//codepen.io/anon/embed/rNGgYWg?height=650&amp;theme-id=1&amp;slug-hash=rNGgYWg&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNGgYWg\" title=\"CodePen Embed rNGgYWg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I’m using this effect right now on <a href=\"https://daveseidman.com\" rel=\"noopener\">my personal website</a> and love it so far. But have you done something similar with a different approach? Definitely let me know in the comments so we can compare notes!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-slanted-containers/\">How to Make CSS Slanted Containers</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "I was updating my portfolio and wanted to use the forward slash (/) as a visual element for the site’s main layout. I hadn’t attempted to create a slanted container in CSS before, but it seemed like it would be easy at first glance. As I began digging into it more, however, there were actually a few very interesting challenges to get a working CSS slanted container that supports text and media.\n\n\n\n\n\n\n\nHere’s what was going for and where I finally landed:\n\n\n\nCodePen Embed Fallback\n\n\n\nI started by looking around for examples of non-rectangular containers that allowed text to flow naturally inside of them. I assumed it’d be possible with CSS since programs like Adobe Illustrator and Microsoft Word have been doing it for years.\n\n\n\nStep 1: Make a CSS slanted container with transforms\n\n\n\nI found the CSS Shapes Module and that works very well for simple text content if we put the shape-outside property to use. It can even fully justify the text. But what it doesn’t do is allow content to scroll within the container. So, as the user scrolls down, the entire slanted container appears to move left, which isn’t the effect I wanted. Instead, I took a simpler approach by adding transform: skew() to the container.\n\n\n\n.slant-container {\n  transform: skew(14deg);\n}\n\n\n\n\n\n\n\n\n\nThat was a good start! The container was definitely slanted and scrolling worked as expected while pure CSS handled the resizing for images. The obvious problem, however, is that the text and images became slanted as well, making the content more difficult to read and the images distorted.\n\n\n\nStep 2: Reverse the font\n\n\n\nI made a few attempts to solve the issues with slanted text and images with CSS but eventually came up with an even simpler solution: create a new font using FontForge to reverse the text’s slant.\n\n\n\nFontForge is an open-source font editor. I’d chosen Roboto Condensed Light for the site’s main content, so I downloaded the .ttf file and opened it up in FontForge. From there, I selected all the glyphs and applied a skew of 14deg to compensate for the slanting caused by the CSS transform on the container. I saved the new font file as Roboto-Rev-Italic.ttf and called it from my stylesheet.\n\n\n\n\n\n\n\nThere we go. Now the font is slanted in the opposite direction by the same amount of the container’s slant, offsetting things so that the content appears like the normal Roboto font I was originally using.\n\n\n\nStep 3: Refine images and videos\n\n\n\nThat worked great for the text! Selecting the text even functioned normally. From there, all I needed to do was reverse the slant for block-level image and video elements using a negative skew() value that offsets the value applied to the container:\n\n\n\nimg,\nvideo {\n  transform: skew(-14deg);\n}\n\n\n\nI did wind up wrapping images and videos in extra divs, though. That way, I could give them nice backgrounds that appear to square nicely with the container. What I did was hook into the ::after pseudo-element and position it with a background that extends beyond the slanted container’s left and right edges.\n\n\n\nimg::after,\nvideo::after {\n  content: '';\n  display: block;\n  background: rgba(0, 0, 0, 0.5);\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 200%;\n  height: 100%;\n}\n\n\n\n\n\nIt’s subtle, but notice that the top-right and bottom-left corners of the image are filled in by the background of its ::after pseudo-element, making things feel more balanced.\n\n\n\nFinal demo\n\n\n\nHere’s that final demo again:\n\n\n\nCodePen Embed Fallback\n\n\n\nI’m using this effect right now on my personal website and love it so far. But have you done something similar with a different approach? Definitely let me know in the comments so we can compare notes!\n\nHow to Make CSS Slanted Containers originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-09T15:19:47.000Z",
      "date_modified": "2022-02-09T15:19:47.000Z",
      "_plugin": {
        "pageFilename": "fab7fa1102066f86e798053e6a556e4e94c538d41f26f79d31b94e5adc8bf44b.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363057",
      "url": "https://css-tricks.com/nuking-motion-with-prefers-reduced-motion/",
      "title": "No Motion Isn’t Always prefers-reduced-motion",
      "summary": "There is a code snippet that I see all the time when the media query prefers-reduced-motion is talked about. Here it is:\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  \n…\n\nNo Motion Isn’t Always prefers-reduced-motion originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>There is a code snippet that I see all the time when the media query <code>prefers-reduced-motion</code> is talked about. Here it is:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}</code></pre>\n\n\n\n<p>This is CSS that attempts to obliterate any motion on a website under the condition that the user has specified a preference for reduced motion in the accessibility preferences of their operating system.</p>\n\n\n\n<span id=\"more-363057\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1560\" height=\"1176\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/09/macos-preference-motion.png?resize=1560%2C1176&#038;ssl=1\" alt=\"prefers-reduced-motion settings in MacOS.\" class=\"wp-image-322302\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/09/macos-preference-motion.png?w=1560&amp;ssl=1 1560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/09/macos-preference-motion.png?resize=300%2C226&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/09/macos-preference-motion.png?resize=1024%2C772&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/09/macos-preference-motion.png?resize=768%2C579&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/09/macos-preference-motion.png?resize=1536%2C1158&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/09/macos-preference-motion.png?resize=1000%2C754&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 id=\"why-prefers-reduced-motion-matters\">Why <code>prefers-reduced-motion</code> matters</h3>\n\n\n\n<p>The reason this setting exists is that on-screen movement is an accessibility concern. <a href=\"https://css-tricks.com/introduction-reduced-motion-media-query/\">Here&#8217;s Eric Bailey</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p><a href=\"http://a11yproject.com/posts/understanding-vestibular-disorders/\" rel=\"noopener\">Vestibular disorders</a>&nbsp;can cause your vestibular system to struggle to make sense of what is happening, resulting in loss of balance and vertigo, migraines, nausea, and hearing loss. Anyone who has spun around too quickly is familiar with a confused vestibular system.</p><p>Vestibular disorders can be caused by both genetic and environmental factors. It’s part of the larger&nbsp;<a href=\"http://webaim.org/intro/\" rel=\"noopener\">spectrum of conditions</a>&nbsp;that make up accessibility concerns and it affects more than&nbsp;<a href=\"http://vestibular.org/understanding-vestibular-disorder\" rel=\"noopener\">70 million people</a>.</p></blockquote>\n\n\n\n<p>Here he is again in <a href=\"https://css-tricks.com/revisiting-prefers-reduced-motion-the-reduced-motion-media-query/\">a follow-up article</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>If you have a vestibular disorder or have certain kinds of migraine or seizure triggers,&nbsp;<a href=\"https://source.opennews.org/articles/motion-sick/\" rel=\"noopener\">navigating the web can be a lot like walking through a minefield</a>&nbsp;— you’re perpetually one click away from activating an unannounced animation. And that’s just for casual browsing.</p></blockquote>\n\n\n\n<h3 id=\"reduced-motion-vs-nuked-motion\">Reduced motion vs. nuked motion</h3>\n\n\n\n<p>Knowing this, the temptation might be high to go nuclear on the motion and wipe it out entirely when a user has specified a reduced motion preference. The trouble with that is — to quote Eric again — &#8220;animation isn&#8217;t unnecessary.&#8221; Some of it might be, but animation can also <em>help</em> accessibility. For example, a <a href=\"https://css-tricks.com/transitional-interfaces-coded/\">&#8220;transitional interface&#8221;</a> (e.g. a list that animates an opening for a new item to slide into it) can be very helpful:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Animation can be a great tool to help combat some forms of cognitive disability by using it to break down complicated concepts, or communicate the relationship between seemingly disparate objects.&nbsp;<a href=\"http://alistapart.com/article/designing-safer-web-animation-for-motion-sensitivity/#section6\" rel=\"noopener\">Val Head’s article on&nbsp;<em>A List Apart</em></a>&nbsp;highlights some other&nbsp;<a href=\"http://alistapart.com/article/designing-safer-web-animation-for-motion-sensitivity/#section6\" rel=\"noopener\">very well-researched benefits</a>, including helping to increase problem-solving ability, recall, and skill acquisition, as well as reducing&nbsp;<a href=\"https://en.m.wikipedia.org/wiki/Cognitive_load\" rel=\"noopener\">cognitive load</a>&nbsp;and your susceptibility to&nbsp;<a href=\"https://en.m.wikipedia.org/wiki/Change_blindness\" rel=\"noopener\">change blindness</a>.</p></blockquote>\n\n\n\n<figure class=\"wp-block-video aligncenter wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\" style=\"max-width:466px;margin:auto\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='245' src='https://videopress.com/embed/eq2asP9g?cover=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\"></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>In this case, you would lose the helpful contextual movement if you just nuked it all. You just might want to take a different approach when in a <code>prefers-reduced-motion</code> scenario. Perhaps less, slower, or removed <em>motion</em> while leaning harder on color and fading transitions. </p>\n\n\n\n<p>Ban Nadel recently wrote <a href=\"https://www.bennadel.com/blog/4132-applying-multiple-animation-keyframes-to-support-prefers-reduced-motion-in-css.htm\" rel=\"noopener\">&#8220;Applying Multiple Animation @keyframes To Support Prefers-Reduced-Motion In CSS&#8221;</a> and covered a similar example. A modal entrance animation uses both a fade-in and scale-in effect by default. Then, in a <code>prefers-reduced-motion</code> scenario, it uses the fade-in but not the scaling. The scaling causes movement in a way the fading doesn&#8217;t. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* \n  By default, we'll use the REDUCED MOTION version of the animation.\n*/\n@keyframes modal-enter {\n  from {\n    opacity: 0 ;\n  }\n  to {\n    opacity: 1 ;\n  }\n}\n\n/*\n  Then, if the user has NO PREFERENCE for motion, we can OVERRIDE the\n  animation definition to include both the motion and non-motion properties.\n*/\n@media ( prefers-reduced-motion: no-preference ) {\n  @keyframes modal-enter {\n    from {\n      opacity: 0 ;\n      transform: scale(0.7) ;\n    }\n    to {\n      opacity: 1 ;\n      transform: scale(1.0) ;\n    }\n  }\n}</code></pre>\n\n\n\n<p><a href=\"https://bennadel-cdn.com/resources/uploads/2021/multi-keyframes-reduced-motion-css.gif\" rel=\"noopener\">See the GIF demo</a> on Ben&#8217;s site if you&#8217;d like to see a quick comparison. </p>\n\n\n\n<p>I like how this style of approach is <em>think about the problem and come up with a reduced motion solution</em>, rather than <em>screw it all, no movement period!!</em></p>\n\n\n\n<h3 id=\"but-not-all-motion-is-driven-by-css\">But not all motion is driven by CSS</h3>\n\n\n\n<p>While we&#8217;re on the topic of that screw-all-motion CSS snippet, note that it&#8217;s only effective at doing what it sets out to do on sites where all the movement<em> is entirely CSS-driven</em>. If you&#8217;re using JavaScript-powered animations beware that this nuclear snippet might&#8230; well <a href=\"https://www.joshwcomeau.com/react/prefers-reduced-motion/\" rel=\"noopener\">here&#8217;s Josh Comeau</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>If your animations are entirely driven by CSS, this works great… But I&#8217;ve had weird issues when running animations in <abbr>JS</abbr>. Specifically, I&#8217;ve seen this reset have the opposite effect, and make animations&nbsp;<em>super fast and dizzying</em>. </p></blockquote>\n\n\n\n<p>That&#8217;s right: It might do quite literally the opposite of what you are trying to do. </p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/nuking-motion-with-prefers-reduced-motion/\">No Motion Isn&#8217;t Always prefers-reduced-motion</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "There is a code snippet that I see all the time when the media query prefers-reduced-motion is talked about. Here it is:\n\n\n\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n\n\n\nThis is CSS that attempts to obliterate any motion on a website under the condition that the user has specified a preference for reduced motion in the accessibility preferences of their operating system.\n\n\n\n\n\n\n\n\n\n\n\nWhy prefers-reduced-motion matters\n\n\n\nThe reason this setting exists is that on-screen movement is an accessibility concern. Here’s Eric Bailey:\n\n\n\nVestibular disorders can cause your vestibular system to struggle to make sense of what is happening, resulting in loss of balance and vertigo, migraines, nausea, and hearing loss. Anyone who has spun around too quickly is familiar with a confused vestibular system.Vestibular disorders can be caused by both genetic and environmental factors. It’s part of the larger spectrum of conditions that make up accessibility concerns and it affects more than 70 million people.\n\n\n\nHere he is again in a follow-up article:\n\n\n\nIf you have a vestibular disorder or have certain kinds of migraine or seizure triggers, navigating the web can be a lot like walking through a minefield — you’re perpetually one click away from activating an unannounced animation. And that’s just for casual browsing.\n\n\n\nReduced motion vs. nuked motion\n\n\n\nKnowing this, the temptation might be high to go nuclear on the motion and wipe it out entirely when a user has specified a reduced motion preference. The trouble with that is — to quote Eric again — “animation isn’t unnecessary.” Some of it might be, but animation can also help accessibility. For example, a “transitional interface” (e.g. a list that animates an opening for a new item to slide into it) can be very helpful:\n\n\n\nAnimation can be a great tool to help combat some forms of cognitive disability by using it to break down complicated concepts, or communicate the relationship between seemingly disparate objects. Val Head’s article on A List Apart highlights some other very well-researched benefits, including helping to increase problem-solving ability, recall, and skill acquisition, as well as reducing cognitive load and your susceptibility to change blindness.\n\n\n\n\n\n\n\n\n\nIn this case, you would lose the helpful contextual movement if you just nuked it all. You just might want to take a different approach when in a prefers-reduced-motion scenario. Perhaps less, slower, or removed motion while leaning harder on color and fading transitions. \n\n\n\nBan Nadel recently wrote “Applying Multiple Animation @keyframes To Support Prefers-Reduced-Motion In CSS” and covered a similar example. A modal entrance animation uses both a fade-in and scale-in effect by default. Then, in a prefers-reduced-motion scenario, it uses the fade-in but not the scaling. The scaling causes movement in a way the fading doesn’t. \n\n\n\n/* \n  By default, we'll use the REDUCED MOTION version of the animation.\n*/\n@keyframes modal-enter {\n  from {\n    opacity: 0 ;\n  }\n  to {\n    opacity: 1 ;\n  }\n}\n\n/*\n  Then, if the user has NO PREFERENCE for motion, we can OVERRIDE the\n  animation definition to include both the motion and non-motion properties.\n*/\n@media ( prefers-reduced-motion: no-preference ) {\n  @keyframes modal-enter {\n    from {\n      opacity: 0 ;\n      transform: scale(0.7) ;\n    }\n    to {\n      opacity: 1 ;\n      transform: scale(1.0) ;\n    }\n  }\n}\n\n\n\nSee the GIF demo on Ben’s site if you’d like to see a quick comparison. \n\n\n\nI like how this style of approach is think about the problem and come up with a reduced motion solution, rather than screw it all, no movement period!!\n\n\n\nBut not all motion is driven by CSS\n\n\n\nWhile we’re on the topic of that screw-all-motion CSS snippet, note that it’s only effective at doing what it sets out to do on sites where all the movement is entirely CSS-driven. If you’re using JavaScript-powered animations beware that this nuclear snippet might… well here’s Josh Comeau:\n\n\n\nIf your animations are entirely driven by CSS, this works great… But I’ve had weird issues when running animations in JS. Specifically, I’ve seen this reset have the opposite effect, and make animations super fast and dizzying. \n\n\n\nThat’s right: It might do quite literally the opposite of what you are trying to do. \n\nNo Motion Isn’t Always prefers-reduced-motion originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-08T20:55:51.000Z",
      "date_modified": "2022-02-08T20:55:51.000Z",
      "_plugin": {
        "pageFilename": "ff8bcf351e4079b7cfc64dc00af4acd1e22888be32e391cec97c1d81a5ca7a55.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362672",
      "url": "https://css-tricks.com/replace-javascript-dialogs-html-dialog-element/",
      "title": "Replace JavaScript Dialogs With the New HTML Dialog Element",
      "summary": "You know how there are JavaScript dialogs for alerting, confirming, and prompting user actions? Say you want to replace JavaScript dialogs with the new HTML dialog element.\nLet me explain.\nI recently worked on a project with a lot of …\n\nReplace JavaScript Dialogs With the New HTML Dialog Element originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>You know how there are JavaScript dialogs for alerting, confirming, and prompting user actions? Say you want to replace JavaScript dialogs with the new HTML dialog element.</p>\n\n\n\n<span id=\"more-362672\"></span>\n\n\n\n<p>Let me explain.</p>\n\n\n\n<p>I recently worked on a project with a lot of API calls and user feedback gathered with JavaScript dialogs. While I was waiting for another developer to code the <code>&lt;Modal /&gt;</code> component, I used <code>alert()</code>, <code>confirm()</code> and <code>prompt()</code> in my code. For instance:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const deleteLocation = confirm('Delete location');\nif (deleteLocation) {\n  alert('Location deleted');\n}</code></pre>\n\n\n\n<p>Then it hit me: you get <strong>a lot of modal-related features</strong> for free with <code>alert()</code>, <code>confirm()</code>, and <code>prompt()</code> that often go overlooked:</p>\n\n\n\n<ul><li><strong>It’s a true modal.</strong> As in, it will always be on top of the stack — even on top of that <code>&lt;div&gt;</code> with <code>z-index: 99999;</code>.</li><li><strong>It’s accessible with the keyboard.</strong> Press <code>Enter</code> to accept and <code>Escape</code> to cancel.</li><li><strong>It’s screen reader-friendly.</strong> It moves focus and allows the modal content to be read aloud.</li><li><strong>It traps focus.</strong> Pressing <code>Tab</code> will not reach any focusable elements on the main page, but in Firefox and Safari it does indeed move focus to the browser UI. What’s weird though is that you can’t move focus to the “accept” or “cancel” buttons in <em>any</em> browser using the <code>Tab</code> key.</li><li><strong>It supports user preferences.</strong> We get automatic light and dark mode support right out of the box.</li><li><strong>It pauses code-execution.</strong>, Plus, it waits for user input.</li></ul>\n\n\n\n<p>These three JavaScripts methods work 99% of the time when I need any of these functionalities. So why don’t I — or really any other web developer — use them? Probably because they look like system errors that cannot be styled. Another big consideration: there has been movement toward their deprecation. <a href=\"https://css-tricks.com/choice-words-about-the-upcoming-deprecation-of-javascript-dialogs/\">First removal from cross-domain iframes</a> and, word is, from the web platform entirely, although it also <a href=\"https://css-tricks.com/choice-words-about-the-upcoming-deprecation-of-javascript-dialogs/#comment-1787573\">sounds like</a> plans for that are on hold.</p>\n\n\n\n<p>With that big consideration in mind, what are <code>alert()</code>, <code>confirm()</code> and <code>prompt()</code> alternatives do we have to replace them? You may have already heard about the <a href=\"https://css-tricks.com/some-hands-on-with-the-html-dialog-element/\"><code>&lt;dialog&gt;</code> HTML element</a> and that’s what I want to look at in this article, using it alongside a JavaScript <code>class</code>.</p>\n\n\n\n<p>It’s impossible to <em>completely</em> replace Javascript dialogs with identical functionality, but if we use the <code>showModal()</code> method of <code>&lt;dialog&gt;</code> combined with a <code>Promise</code> that can either <code>resolve</code> (accept) or <code>reject</code> (cancel) — then we have something <em>almost</em> as good. Heck, while we’re at it, let’s add sound to the HTML dialog element — just like real system dialogs!</p>\n\n\n\n<p>If you’d like to see the demo right away, <a href=\"https://codepen.io/stoumann/pen/bGovmLa\" rel=\"noopener\">it’s here</a>.</p>\n\n\n\n<h3 id=\"a-dialog-class\">A dialog class</h3>\n\n\n\n<p>First, we need a basic JavaScript <code>Class</code> with a <code>settings</code> object that will be merged with the default settings. These settings will be used for all dialogs, unless you overwrite them when invoking them (but more on that later).</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export default class Dialog {\nconstructor(settings = {}) {\n  this.settings = Object.assign(\n    {\n      /* DEFAULT SETTINGS - see description below */\n    },\n    settings\n  )\n  this.init()\n}</code></pre>\n\n\n\n<p>The settings are:</p>\n\n\n\n<ul><li><strong><code>accept</code>:</strong> This is the “Accept” button’s label.</li><li><strong><code>bodyClass</code>:</strong> This is a CSS class that is added to <code>&lt;body&gt;</code> element when the dialog is <code>open</code> and <code>&lt;dialog&gt;</code> is unsupported by the browser.</li><li><strong><code>cancel</code>:</strong> This is the “Cancel” button’s label.</li><li><strong><code>dialogClass</code>: </strong>This is a custom CSS class added to the <code>&lt;dialog&gt;</code> element.</li><li><strong><code>message</code>:</strong> This is the content inside the <code>&lt;dialog&gt;</code>.</li><li><strong><code>soundAccept</code>:</strong> This is the URL to the sound file we’ll play when the user hits the “Accept” button.</li><li><strong><code>soundOpen</code>:</strong> This is the URL to the sound file we’ll play when the user opens the dialog.</li><li><strong><code>template</code>:</strong> This is an optional, little HTML template that’s injected into the <code>&lt;dialog&gt;</code>.</li></ul>\n\n\n\n<h3 id=\"the-initial-template-to-replace-javascript-dialogs\">The initial template to replace JavaScript dialogs</h3>\n\n\n\n<p>In the <code>init</code> method, we’ll add a helper function for detecting support for the HTML dialog element in browsers, and set up the basic HTML:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">init() {\n  // Testing for &lt;dialog> support\n  this.dialogSupported = typeof HTMLDialogElement === 'function'\n  this.dialog = document.createElement('dialog')\n  this.dialog.dataset.component = this.dialogSupported ? 'dialog' : 'no-dialog'\n  this.dialog.role = 'dialog'\n  \n  // HTML template\n  this.dialog.innerHTML = `\n  &lt;form method=\"dialog\" data-ref=\"form\">\n    &lt;fieldset data-ref=\"fieldset\" role=\"document\">\n      &lt;legend data-ref=\"message\" id=\"${(Math.round(Date.now())).toString(36)}\">\n      &lt;/legend>\n      &lt;div data-ref=\"template\">&lt;/div>\n    &lt;/fieldset>\n    &lt;menu>\n      &lt;button data-ref=\"cancel\" value=\"cancel\">&lt;/button>\n      &lt;button data-ref=\"accept\" value=\"default\">&lt;/button>\n    &lt;/menu>\n    &lt;audio data-ref=\"soundAccept\">&lt;/audio>\n    &lt;audio data-ref=\"soundOpen\">&lt;/audio>\n  &lt;/form>`\n\n  document.body.appendChild(this.dialog)\n\n  // ...\n}</code></pre>\n\n\n\n<h4 id=\"checking-for-support\">Checking for support</h4>\n\n\n\n<p>The road for browsers to support <code>&lt;dialog&gt;</code> has been long. Safari picked it up <a href=\"https://webkit.org/blog/12033/release-notes-for-safari-technology-preview-134/\" rel=\"noopener\">pretty recently</a>. Firefox <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1733536\" rel=\"noopener\">even more recently</a>, though not the <code>&lt;form method=\"dialog\"&gt;</code> part. So, we need to add <code>type=\"button\"</code> to the “Accept” and “Cancel” buttons we’re mimicking. Otherwise, they’ll <code>POST</code> the form and cause a page refresh and we want to avoid that.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;button${this.dialogSupported ? '' : ` type=\"button\"`}...>&lt;/button></code></pre>\n\n\n\n<h4 id=\"dom-node-references\">DOM node references</h4>\n\n\n\n<p>Did you notice all the <code>data-ref</code>-attributes? We’ll use these for getting references to the DOM nodes:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">this.elements = {}\nthis.dialog.querySelectorAll('[data-ref]').forEach(el => this.elements[el.dataset.ref] = el)</code></pre>\n\n\n\n<p>So far, <code>this.elements.accept</code> is a reference to the “Accept” button, and <code>this.elements.cancel</code> refers to the “Cancel” button.</p>\n\n\n\n<h4 id=\"button-attributes\">Button attributes</h4>\n\n\n\n<p>For screen readers, we need an <code>aria-labelledby</code> attribute pointing to the ID of the tag that describes the dialog — that’s the <code>&lt;legend&gt;</code> tag and it will contain the <code>message</code>.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">this.dialog.setAttribute('aria-labelledby', this.elements.message.id)</code></pre>\n\n\n\n<p>That <code>id</code>? It’s a unique reference to this part of the <code>&lt;legend&gt;</code> element:</p>\n\n\n\n<h4 id=\"the-cancel-button\">The “Cancel” button</h4>\n\n\n\n<p>Good news! The HTML dialog element has a built-in <code>cancel()</code> method making it easier to replace JavaScript dialogs calling the <code>confirm()</code> method. Let’s emit that event when we click the “Cancel” button:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">this.elements.cancel.addEventListener('click', () => { \n  this.dialog.dispatchEvent(new Event('cancel')) \n})</code></pre>\n\n\n\n<p>That’s the framework for our <code>&lt;dialog&gt;</code> to replace <code>alert()</code>, <code>confirm()</code>, and <code>prompt()</code>.</p>\n\n\n\n<h3 id=\"polyfilling-unsupported-browsers\">Polyfilling unsupported browsers</h3>\n\n\n\n<p>We need to hide the HTML dialog element for browsers that do not support it. To do that, we’ll wrap the logic for showing and hiding the dialog in a new method, <code>toggle()</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">toggle(open = false) {\n  if (this.dialogSupported &amp;&amp; open) this.dialog.showModal()\n  if (!this.dialogSupported) {\n    document.body.classList.toggle(this.settings.bodyClass, open)\n    this.dialog.hidden = !open\n    /* If a `target` exists, set focus on it when closing */\n    if (this.elements.target &amp;&amp; !open) {\n      this.elements.target.focus()\n    }\n  }\n}\n/* Then call it at the end of `init`: */\nthis.toggle()</code></pre>\n\n\n\n<h3 id=\"keyboard-navigation\">Keyboard navigation</h3>\n\n\n\n<p>Next up, let’s implement a way to trap focus so that the user can tab between the buttons in the dialog without inadvertently exiting the dialog. There are many ways to do this. I like <a href=\"https://css-tricks.com/a-css-approach-to-trap-focus-inside-of-an-element/\">the CSS way</a>, but unfortunately, it’s unreliable. Instead, let’s grab all focusable elements from the dialog as a <code>NodeList</code> and store it in <code>this.focusable</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">getFocusable() {\n  return [...this.dialog.querySelectorAll('button,[href],select,textarea,input:not([type=&amp;quot;hidden&amp;quot;]),[tabindex]:not([tabindex=&amp;quot;-1&amp;quot;])')]\n}</code></pre>\n\n\n\n<p>Next, we’ll add a <code>keydown</code> event listener, handling all our keyboard navigation logic:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">this.dialog.addEventListener('keydown', e => {\n  if (e.key === 'Enter') {\n    if (!this.dialogSupported) e.preventDefault()\n    this.elements.accept.dispatchEvent(new Event('click'))\n  }\n  if (e.key === 'Escape') this.dialog.dispatchEvent(new Event('cancel'))\n  if (e.key === 'Tab') {\n    e.preventDefault()\n    const len =  this.focusable.length - 1;\n    let index = this.focusable.indexOf(e.target);\n    index = e.shiftKey ? index-1 : index+1;\n    if (index &lt; 0) index = len;\n    if (index > len) index = 0;\n    this.focusable[index].focus();\n  }\n})</code></pre>\n\n\n\n<p>For <kbd>Enter</kbd>, we need to prevent the <code>&lt;form&gt;</code> from submitting in browsers where the <code>&lt;dialog&gt;</code> element is unsupported. <code>Escape</code> will emit a <code>cancel</code> event. Pressing the <kbd>Tab</kbd> key will find the current element in the node list of focusable elements, <code>this.focusable</code>, and set focus on the next item (or the previous one if you hold down the <kbd>Shift</kbd> key at the same time).</p>\n\n\n\n<h3 id=\"displaying-the-dialog\">Displaying the <code>&lt;dialog&gt;</code></h3>\n\n\n\n<p>Now let’s show the dialog! For this, we need a small method that merges an optional <code>settings</code> object with the default values. In this object — exactly like the default <code>settings</code> object — we can add or change the settings for a specific dialog.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">open(settings = {}) {\n  const dialog = Object.assign({}, this.settings, settings)\n  this.dialog.className = dialog.dialogClass || ''\n\n  /* set innerText of the elements */\n  this.elements.accept.innerText = dialog.accept\n  this.elements.cancel.innerText = dialog.cancel\n  this.elements.cancel.hidden = dialog.cancel === ''\n  this.elements.message.innerText = dialog.message\n\n  /* If sounds exists, update `src` */\n  this.elements.soundAccept.src = dialog.soundAccept || ''\n  this.elements.soundOpen.src = dialog.soundOpen || ''\n\n  /* A target can be added (from the element invoking the dialog */\n  this.elements.target = dialog.target || ''\n\n  /* Optional HTML for custom dialogs */\n  this.elements.template.innerHTML = dialog.template || ''\n\n  /* Grab focusable elements */\n  this.focusable = this.getFocusable()\n  this.hasFormData = this.elements.fieldset.elements.length > 0\n  if (dialog.soundOpen) {\n    this.elements.soundOpen.play()\n  }\n  this.toggle(true)\n  if (this.hasFormData) {\n    /* If form elements exist, focus on that first */\n    this.focusable[0].focus()\n    this.focusable[0].select()\n  }\n  else {\n    this.elements.accept.focus()\n  }\n}</code></pre>\n\n\n\n<p>Phew! That was <strong>a lot of code</strong>. Now we can show the <code>&lt;dialog&gt;</code> element in all browsers. But we still need to mimic the functionality that waits for a user’s input after execution, like the native <code>alert()</code>, <code>confirm()</code>, and <code>prompt()</code> methods. For that, we need a <code>Promise</code> and a new method I’m calling <code>waitForUser()</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">waitForUser() {\n  return new Promise(resolve => {\n    this.dialog.addEventListener('cancel', () => { \n      this.toggle()\n      resolve(false)\n    }, { once: true })\n    this.elements.accept.addEventListener('click', () => {\n      let value = this.hasFormData ? \n        this.collectFormData(new FormData(this.elements.form)) : true;\n      if (this.elements.soundAccept.src) this.elements.soundAccept.play()\n      this.toggle()\n      resolve(value)\n    }, { once: true })\n  })\n}</code></pre>\n\n\n\n<p>This method returns a <code>Promise</code>. Within that, we add event listeners for “cancel” and “accept” that either resolve <code>false</code> (cancel), or <code>true</code> (accept). If <code>formData</code> exists (for custom dialogs or <code>prompt</code>), these will be collected with a <a href=\"https://stackoverflow.com/questions/41431322/how-to-convert-formdata-html5-object-to-json/46774073#46774073\" rel=\"noopener\">helper method</a>, then returned in an object:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">collectFormData(formData) {\n  const object = {};\n  formData.forEach((value, key) => {\n    if (!Reflect.has(object, key)) {\n      object[key] = value\n      return\n    }\n    if (!Array.isArray(object[key])) {\n      object[key] = [object[key]]\n    }\n    object[key].push(value)\n  })\n  return object\n}</code></pre>\n\n\n\n<p>We can remove the event listeners immediately, using <code>{ once: true }</code>.</p>\n\n\n\n<p class=\"is-style-explanation\">To keep it simple, I don’t use <code>reject()</code> but rather simply resolve <code>false</code>.</p>\n\n\n\n<h3 id=\"hiding-the-dialog\">Hiding the <code>&lt;dialog&gt;</code></h3>\n\n\n\n<p>Earlier on, we added event listeners for the built-in <code>cancel</code> event. We call this event when the user clicks the “cancel” button <em>or</em> presses the <kbd>Escape</kbd> key. The <code>cancel</code> event removes the <code>open</code> attribute on the <code>&lt;dialog&gt;</code>, thus hiding it.</p>\n\n\n\n<h3 id=\"where-to-focus\">Where to <code>:focus</code>?</h3>\n\n\n\n<p>In our <code>open()</code> method, we focus on either the first focusable form field <em>or</em> the “Accept” button:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">if (this.hasFormData) {\n  this.focusable[0].focus()\n  this.focusable[0].select()\n}\nelse {\n  this.elements.accept.focus()\n}</code></pre>\n\n\n\n<p>But is this correct? In the <a href=\"https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html\" rel=\"noopener\">W3’s “Modal Dialog” example</a>, this is indeed the case. In <a href=\"http://scottaohara.github.io/accessible_modal_window/\" rel=\"noopener\">Scott Ohara’s example</a> though, the focus is on the dialog itself — which makes sense if the screen reader should read the text we defined in the <code>aria-labelledby</code> attribute earlier. I’m not sure which is correct or best, but if we want to use Scott’s method. we need to add a <code>tabindex=\"-1\"</code> to the <code>&lt;dialog&gt;</code> in our <code>init</code> method:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">this.dialog.tabIndex = -1</code></pre>\n\n\n\n<p>Then, in the <code>open()</code> method, we’ll replace the focus code with this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">this.dialog.focus()</code></pre>\n\n\n\n<p>We can check the <code>activeElement</code> (the element that has focus) at any given time in DevTools by clicking the “eye” icon and typing <code>document.activeElement</code> in the console. Try tabbing around to see it update:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"186\" height=\"82\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CDAB8A0C7FFEC1010ECB97057AEEA4FE9884EE3F7B9D2CC22A75478BC745422_1642492707991_activelement.png?resize=186%2C82&#038;ssl=1\" alt=\"Showing the eye icon in DevTools, highlighted in bright green.\" class=\"wp-image-362674\" data-recalc-dims=\"1\"/><figcaption>Clicking the “eye” icon</figcaption></figure>\n\n\n\n<h3 id=\"adding-alert-confirm-and-prompt\">Adding alert, confirm, and prompt</h3>\n\n\n\n<p>We’re finally ready to add <code>alert()</code>, <code>confirm()</code> and <code>prompt()</code> to our <code>Dialog</code> class. These will be small helper methods that replace JavaScript dialogs and the original syntax of those methods. All of them call the <code>open()</code>method we created earlier, but with a <code>settings</code> object that matches the way we trigger the original methods.</p>\n\n\n\n<p>Let’s compare with the original syntax.</p>\n\n\n\n<h4 id=\"alert-is-normally-triggered-like-this\"><code>alert()</code> is normally triggered like this:</h4>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">window.alert(message);</code></pre>\n\n\n\n<p>In our Dialog, we’ll add an <code>alert()</code> method that’ll mimic this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">/* dialog.alert() */\nalert(message, config = { target: event.target }) {\n  const settings = Object.assign({}, config, { cancel: '', message, template: '' })\n  this.open(settings)\n  return this.waitForUser()\n}</code></pre>\n\n\n\n<p>We set <code>cancel</code> and <code>template</code> to empty strings, so that — even if we had set default values earlier — these will not be hidden, and only <code>message</code> and <code>accept</code> are shown.</p>\n\n\n\n<h4 id=\"confirm-is-normally-triggered-like-this\"><code>confirm()</code> is normally triggered like this:</h4>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">window.confirm(message);</code></pre>\n\n\n\n<p>In our version, similar to <code>alert()</code>, we create a custom method that shows the <code>message</code>, <code>cancel</code> and <code>accept</code> items:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">/* dialog.confirm() */\nconfirm(message, config = { target: event.target }) {\n  const settings = Object.assign({}, config, { message, template: '' })\n  this.open(settings)\n  return this.waitForUser()\n}</code></pre>\n\n\n\n<h4 id=\"prompt-is-normally-triggered-like-this\"><code>prompt()</code> is normally triggered like this:</h4>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">window.prompt(message, default);</code></pre>\n\n\n\n<p>Here, we need to add a <code>template</code> with an <code>&lt;input&gt;</code> that we’ll wrap in a <code>&lt;label&gt;</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">/* dialog.prompt() */\nprompt(message, value, config = { target: event.target }) {\n  const template = `\n  &lt;label aria-label=\"${message}\">\n    &lt;input name=\"prompt\" value=\"${value}\">\n  &lt;/label>`\n  const settings = Object.assign({}, config, { message, template })\n  this.open(settings)\n  return this.waitForUser()\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\"><code>{ target: event.target }</code> is a reference to the DOM element that calls the method. We’ll use that to refocus on that element when we close the <code>&lt;dialog&gt;</code>, returning the user to where they were before the dialog was fired.</p>\n\n\n\n<h3 id=\"we-ought-to-test-this\">We ought to test this</h3>\n\n\n\n<p>It’s time to test and make sure everything is working as expected. Let’s create a new HTML file, import the class, and create an instance:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script type=\"module\">\n  import Dialog from './dialog.js';\n  const dialog = new Dialog();\n&lt;/script></code></pre>\n\n\n\n<p>Try out the following use cases one at a time!</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">/* alert */\ndialog.alert('Please refresh your browser')\n/* or */\ndialog.alert('Please refresh your browser').then((res) => {  console.log(res) })\n\n/* confirm */\ndialog.confirm('Do you want to continue?').then((res) => { console.log(res) })\n\n/* prompt */\ndialog.prompt('The meaning of life?', 42).then((res) => { console.log(res) })</code></pre>\n\n\n\n<p>Then watch the console as you click “Accept” or “Cancel.” Try again while pressing the <kbd>Escape</kbd> or <kbd>Enter</kbd> keys instead.</p>\n\n\n\n<h3 id=\"async-await\">Async/Await</h3>\n\n\n\n<p>We can also use the <code>async/await</code> way of doing this. We&#8217;re replacing JavaScript dialogs even more by mimicking the original syntax, but it requires the wrapping function to be <code>async</code>, while the code within requires the <code>await</code> keyword:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.getElementById('promptButton').addEventListener('click', async (e) => {\n  const value = await dialog.prompt('The meaning of life?', 42);\n  console.log(value);\n});</code></pre>\n\n\n\n<h3 id=\"cross-browser-styling\">Cross-browser styling</h3>\n\n\n\n<p>We now have a fully-functional cross-browser and screen reader-friendly HTML dialog element that replaces JavaScript dialogs! We’ve covered a lot. But the styling could use a lot of love. Let’s utilize the existing <code>data-component</code> and <code>data-ref</code>-attributes to add cross-browser styling — no need for additional classes or other attributes!</p>\n\n\n\n<p>We’ll use the CSS <code><a href=\"https://css-tricks.com/almanac/selectors/w/where/\">:where</a></code> pseudo-selector to keep our default styles <a href=\"https://css-tricks.com/dont-fight-the-cascade-control-it/#aa-o-cascade-where-art-thou\">free from specificity</a>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where([data-component*=\"dialog\"] *) {  \n  box-sizing: border-box;\n  outline-color: var(--dlg-outline-c, hsl(218, 79.19%, 35%))\n}\n:where([data-component*=\"dialog\"]) {\n  --dlg-gap: 1em;\n  background: var(--dlg-bg, #fff);\n  border: var(--dlg-b, 0);\n  border-radius: var(--dlg-bdrs, 0.25em);\n  box-shadow: var(--dlg-bxsh, 0px 25px 50px -12px rgba(0, 0, 0, 0.25));\n  font-family:var(--dlg-ff, ui-sansserif, system-ui, sans-serif);\n  min-inline-size: var(--dlg-mis, auto);\n  padding: var(--dlg-p, var(--dlg-gap));\n  width: var(--dlg-w, fit-content);\n}\n:where([data-component=\"no-dialog\"]:not([hidden])) {\n  display: block;\n  inset-block-start: var(--dlg-gap);\n  inset-inline-start: 50%;\n  position: fixed;\n  transform: translateX(-50%);\n}\n:where([data-component*=\"dialog\"] menu) {\n  display: flex;\n  gap: calc(var(--dlg-gap) / 2);\n  justify-content: var(--dlg-menu-jc, flex-end);\n  margin: 0;\n  padding: 0;\n}\n:where([data-component*=\"dialog\"] menu button) {\n  background-color: var(--dlg-button-bgc);\n  border: 0;\n  border-radius: var(--dlg-bdrs, 0.25em);\n  color: var(--dlg-button-c);\n  font-size: var(--dlg-button-fz, 0.8em);\n  padding: var(--dlg-button-p, 0.65em 1.5em);\n}\n:where([data-component*=\"dialog\"] [data-ref=\"accept\"]) {\n  --dlg-button-bgc: var(--dlg-accept-bgc, hsl(218, 79.19%, 46.08%));\n  --dlg-button-c: var(--dlg-accept-c, #fff);\n}\n:where([data-component*=\"dialog\"] [data-ref=\"cancel\"]) {\n  --dlg-button-bgc: var(--dlg-cancel-bgc, transparent);\n  --dlg-button-c: var(--dlg-cancel-c, inherit);\n}\n:where([data-component*=\"dialog\"] [data-ref=\"fieldset\"]) {\n  border: 0;\n  margin: unset;\n  padding: unset;\n}\n:where([data-component*=\"dialog\"] [data-ref=\"message\"]) {\n  font-size: var(--dlg-message-fz, 1.25em);\n  margin-block-end: var(--dlg-gap);\n}\n:where([data-component*=\"dialog\"] [data-ref=\"template\"]:not(:empty)) {\n  margin-block-end: var(--dlg-gap);\n  width: 100%;\n}</code></pre>\n\n\n\n<p>You can style these as you’d like, of course. Here’s what the above CSS will give you:</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"668\" height=\"306\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CDAB8A0C7FFEC1010ECB97057AEEA4FE9884EE3F7B9D2CC22A75478BC745422_1641134617420_Screenshot2022-01-02at15.43.13.png?resize=668%2C306&#038;ssl=1\" alt=\"Showing how to replace JavaScript dialogs that use the alert method. The modal is white against a gray background. The content reads please refresh your browser and is followed by a blue button with a white label that says OK.\" class=\"wp-image-362676\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CDAB8A0C7FFEC1010ECB97057AEEA4FE9884EE3F7B9D2CC22A75478BC745422_1641134617420_Screenshot2022-01-02at15.43.13.png?w=668&amp;ssl=1 668w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CDAB8A0C7FFEC1010ECB97057AEEA4FE9884EE3F7B9D2CC22A75478BC745422_1641134617420_Screenshot2022-01-02at15.43.13.png?resize=300%2C137&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><code>alert()</code></figcaption></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/D8xfi66Q.png?resize=199%2C104&#038;ssl=1\" alt=\"Showing how to replace JavaScript dialogs that use the confirm method. The modal is white against a gray background. The content reads please do you want to continue? and is followed by a black link that says cancel, and a blue button with a white label that says OK.\" class=\"wp-image-362677\" width=\"199\" height=\"104\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/D8xfi66Q.png?w=610&amp;ssl=1 610w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/D8xfi66Q.png?resize=300%2C158&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><code>confirm()</code></figcaption></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"542\" height=\"444\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CDAB8A0C7FFEC1010ECB97057AEEA4FE9884EE3F7B9D2CC22A75478BC745422_1641134568390_Screenshot2022-01-02at15.42.04.png?resize=542%2C444&#038;ssl=1\" alt=\"Showing how to replace JavaScript dialogs that use the prompt method. The modal is white against a gray background. The content reads the meaning of life, and is followed by a a text input filled with the number 42, which is followed by a black link that says cancel, and a blue button with a white label that says OK.\" class=\"wp-image-362678\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CDAB8A0C7FFEC1010ECB97057AEEA4FE9884EE3F7B9D2CC22A75478BC745422_1641134568390_Screenshot2022-01-02at15.42.04.png?w=542&amp;ssl=1 542w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CDAB8A0C7FFEC1010ECB97057AEEA4FE9884EE3F7B9D2CC22A75478BC745422_1641134568390_Screenshot2022-01-02at15.42.04.png?resize=300%2C246&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><code>prompt()</code></figcaption></figure>\n</div>\n</div>\n\n\n\n<p>To overwrite these styles and use your own, add a class in <code>dialogClass</code>,</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">dialogClass: 'custom'</code></pre>\n\n\n\n<p>…then add the class in CSS, and update the CSS custom property values:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.custom {\n  --dlg-accept-bgc: hsl(159, 65%, 75%);\n  --dlg-accept-c: #000;\n  /* etc. */\n}</code></pre>\n\n\n\n<h3 id=\"a-custom-dialog-example\">A custom dialog example</h3>\n\n\n\n<p>What if the standard <code>alert()</code>, <code>confirm()</code> and <code>prompt()</code> methods we are mimicking won’t do the trick for your specific use case? We can actually do a bit more to make the <code>&lt;dialog&gt;</code> more flexible to cover more than the content, buttons, and functionality we’ve covered so far — and it’s not much more work.</p>\n\n\n\n<p>Earlier, I teased the idea of adding a sound to the dialog. Let’s do that.</p>\n\n\n\n<p>You can use the <code>template</code> property of the <code>settings</code> object to inject more HTML. Here’s a custom example, invoked from a <code>&lt;button&gt;</code> with <code>id=\"btnCustom\"</code> that triggers a fun little sound from an MP3 file:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.getElementById('btnCustom').addEventListener('click', (e) => {\n  dialog.open({\n    accept: 'Sign in',\n    dialogClass: 'custom',\n    message: 'Please enter your credentials',\n    soundAccept: 'https://assets.yourdomain.com/accept.mp3',\n    soundOpen: 'https://assets.yourdomain.com/open.mp3',\n    target: e.target,\n    template: `\n    &lt;label>Username&lt;input type=\"text\" name=\"username\" value=\"admin\">&lt;/label>\n    &lt;label>Password&lt;input type=\"password\" name=\"password\" value=\"password\">&lt;/label>`\n  })\n  dialog.waitForUser().then((res) => {  console.log(res) })\n});</code></pre>\n\n\n\n<h3 id=\"live-demo\">Live demo</h3>\n\n\n\n<p>Here’s a Pen with everything we built! Open the console, click the buttons, and play around with the dialogs, clicking the buttons and using the keyboard to accept and cancel.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bGovmLa\" src=\"//codepen.io/anon/embed/bGovmLa?height=450&amp;theme-id=1&amp;slug-hash=bGovmLa&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bGovmLa\" title=\"CodePen Embed bGovmLa\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>So, what do you think? Is this a good way to replace JavaScript dialogs with the newer HTML dialog element? Or have you tried doing it another way? Let me know in the comments!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/replace-javascript-dialogs-html-dialog-element/\">Replace JavaScript Dialogs With the New HTML Dialog Element</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "You know how there are JavaScript dialogs for alerting, confirming, and prompting user actions? Say you want to replace JavaScript dialogs with the new HTML dialog element.\n\n\n\n\n\n\n\nLet me explain.\n\n\n\nI recently worked on a project with a lot of API calls and user feedback gathered with JavaScript dialogs. While I was waiting for another developer to code the <Modal /> component, I used alert(), confirm() and prompt() in my code. For instance:\n\n\n\nconst deleteLocation = confirm('Delete location');\nif (deleteLocation) {\n  alert('Location deleted');\n}\n\n\n\nThen it hit me: you get a lot of modal-related features for free with alert(), confirm(), and prompt() that often go overlooked:\n\n\n\nIt’s a true modal. As in, it will always be on top of the stack — even on top of that <div> with z-index: 99999;.It’s accessible with the keyboard. Press Enter to accept and Escape to cancel.It’s screen reader-friendly. It moves focus and allows the modal content to be read aloud.It traps focus. Pressing Tab will not reach any focusable elements on the main page, but in Firefox and Safari it does indeed move focus to the browser UI. What’s weird though is that you can’t move focus to the “accept” or “cancel” buttons in any browser using the Tab key.It supports user preferences. We get automatic light and dark mode support right out of the box.It pauses code-execution., Plus, it waits for user input.\n\n\n\nThese three JavaScripts methods work 99% of the time when I need any of these functionalities. So why don’t I — or really any other web developer — use them? Probably because they look like system errors that cannot be styled. Another big consideration: there has been movement toward their deprecation. First removal from cross-domain iframes and, word is, from the web platform entirely, although it also sounds like plans for that are on hold.\n\n\n\nWith that big consideration in mind, what are alert(), confirm() and prompt() alternatives do we have to replace them? You may have already heard about the <dialog> HTML element and that’s what I want to look at in this article, using it alongside a JavaScript class.\n\n\n\nIt’s impossible to completely replace Javascript dialogs with identical functionality, but if we use the showModal() method of <dialog> combined with a Promise that can either resolve (accept) or reject (cancel) — then we have something almost as good. Heck, while we’re at it, let’s add sound to the HTML dialog element — just like real system dialogs!\n\n\n\nIf you’d like to see the demo right away, it’s here.\n\n\n\nA dialog class\n\n\n\nFirst, we need a basic JavaScript Class with a settings object that will be merged with the default settings. These settings will be used for all dialogs, unless you overwrite them when invoking them (but more on that later).\n\n\n\nexport default class Dialog {\nconstructor(settings = {}) {\n  this.settings = Object.assign(\n    {\n      /* DEFAULT SETTINGS - see description below */\n    },\n    settings\n  )\n  this.init()\n}\n\n\n\nThe settings are:\n\n\n\naccept: This is the “Accept” button’s label.bodyClass: This is a CSS class that is added to <body> element when the dialog is open and <dialog> is unsupported by the browser.cancel: This is the “Cancel” button’s label.dialogClass: This is a custom CSS class added to the <dialog> element.message: This is the content inside the <dialog>.soundAccept: This is the URL to the sound file we’ll play when the user hits the “Accept” button.soundOpen: This is the URL to the sound file we’ll play when the user opens the dialog.template: This is an optional, little HTML template that’s injected into the <dialog>.\n\n\n\nThe initial template to replace JavaScript dialogs\n\n\n\nIn the init method, we’ll add a helper function for detecting support for the HTML dialog element in browsers, and set up the basic HTML:\n\n\n\ninit() {\n  // Testing for <dialog> support\n  this.dialogSupported = typeof HTMLDialogElement === 'function'\n  this.dialog = document.createElement('dialog')\n  this.dialog.dataset.component = this.dialogSupported ? 'dialog' : 'no-dialog'\n  this.dialog.role = 'dialog'\n  \n  // HTML template\n  this.dialog.innerHTML = `\n  <form method=\"dialog\" data-ref=\"form\">\n    <fieldset data-ref=\"fieldset\" role=\"document\">\n      <legend data-ref=\"message\" id=\"${(Math.round(Date.now())).toString(36)}\">\n      </legend>\n      <div data-ref=\"template\"></div>\n    </fieldset>\n    <menu>\n      <button data-ref=\"cancel\" value=\"cancel\"></button>\n      <button data-ref=\"accept\" value=\"default\"></button>\n    </menu>\n    <audio data-ref=\"soundAccept\"></audio>\n    <audio data-ref=\"soundOpen\"></audio>\n  </form>`\n\n  document.body.appendChild(this.dialog)\n\n  // ...\n}\n\n\n\nChecking for support\n\n\n\nThe road for browsers to support <dialog> has been long. Safari picked it up pretty recently. Firefox even more recently, though not the <form method=\"dialog\"> part. So, we need to add type=\"button\" to the “Accept” and “Cancel” buttons we’re mimicking. Otherwise, they’ll POST the form and cause a page refresh and we want to avoid that.\n\n\n\n<button${this.dialogSupported ? '' : ` type=\"button\"`}...></button>\n\n\n\nDOM node references\n\n\n\nDid you notice all the data-ref-attributes? We’ll use these for getting references to the DOM nodes:\n\n\n\nthis.elements = {}\nthis.dialog.querySelectorAll('[data-ref]').forEach(el => this.elements[el.dataset.ref] = el)\n\n\n\nSo far, this.elements.accept is a reference to the “Accept” button, and this.elements.cancel refers to the “Cancel” button.\n\n\n\nButton attributes\n\n\n\nFor screen readers, we need an aria-labelledby attribute pointing to the ID of the tag that describes the dialog — that’s the <legend> tag and it will contain the message.\n\n\n\nthis.dialog.setAttribute('aria-labelledby', this.elements.message.id)\n\n\n\nThat id? It’s a unique reference to this part of the <legend> element:\n\n\n\nThe “Cancel” button\n\n\n\nGood news! The HTML dialog element has a built-in cancel() method making it easier to replace JavaScript dialogs calling the confirm() method. Let’s emit that event when we click the “Cancel” button:\n\n\n\nthis.elements.cancel.addEventListener('click', () => { \n  this.dialog.dispatchEvent(new Event('cancel')) \n})\n\n\n\nThat’s the framework for our <dialog> to replace alert(), confirm(), and prompt().\n\n\n\nPolyfilling unsupported browsers\n\n\n\nWe need to hide the HTML dialog element for browsers that do not support it. To do that, we’ll wrap the logic for showing and hiding the dialog in a new method, toggle():\n\n\n\ntoggle(open = false) {\n  if (this.dialogSupported && open) this.dialog.showModal()\n  if (!this.dialogSupported) {\n    document.body.classList.toggle(this.settings.bodyClass, open)\n    this.dialog.hidden = !open\n    /* If a `target` exists, set focus on it when closing */\n    if (this.elements.target && !open) {\n      this.elements.target.focus()\n    }\n  }\n}\n/* Then call it at the end of `init`: */\nthis.toggle()\n\n\n\nKeyboard navigation\n\n\n\nNext up, let’s implement a way to trap focus so that the user can tab between the buttons in the dialog without inadvertently exiting the dialog. There are many ways to do this. I like the CSS way, but unfortunately, it’s unreliable. Instead, let’s grab all focusable elements from the dialog as a NodeList and store it in this.focusable:\n\n\n\ngetFocusable() {\n  return [...this.dialog.querySelectorAll('button,[href],select,textarea,input:not([type=&quot;hidden&quot;]),[tabindex]:not([tabindex=&quot;-1&quot;])')]\n}\n\n\n\nNext, we’ll add a keydown event listener, handling all our keyboard navigation logic:\n\n\n\nthis.dialog.addEventListener('keydown', e => {\n  if (e.key === 'Enter') {\n    if (!this.dialogSupported) e.preventDefault()\n    this.elements.accept.dispatchEvent(new Event('click'))\n  }\n  if (e.key === 'Escape') this.dialog.dispatchEvent(new Event('cancel'))\n  if (e.key === 'Tab') {\n    e.preventDefault()\n    const len =  this.focusable.length - 1;\n    let index = this.focusable.indexOf(e.target);\n    index = e.shiftKey ? index-1 : index+1;\n    if (index < 0) index = len;\n    if (index > len) index = 0;\n    this.focusable[index].focus();\n  }\n})\n\n\n\nFor Enter, we need to prevent the <form> from submitting in browsers where the <dialog> element is unsupported. Escape will emit a cancel event. Pressing the Tab key will find the current element in the node list of focusable elements, this.focusable, and set focus on the next item (or the previous one if you hold down the Shift key at the same time).\n\n\n\nDisplaying the <dialog>\n\n\n\nNow let’s show the dialog! For this, we need a small method that merges an optional settings object with the default values. In this object — exactly like the default settings object — we can add or change the settings for a specific dialog.\n\n\n\nopen(settings = {}) {\n  const dialog = Object.assign({}, this.settings, settings)\n  this.dialog.className = dialog.dialogClass || ''\n\n  /* set innerText of the elements */\n  this.elements.accept.innerText = dialog.accept\n  this.elements.cancel.innerText = dialog.cancel\n  this.elements.cancel.hidden = dialog.cancel === ''\n  this.elements.message.innerText = dialog.message\n\n  /* If sounds exists, update `src` */\n  this.elements.soundAccept.src = dialog.soundAccept || ''\n  this.elements.soundOpen.src = dialog.soundOpen || ''\n\n  /* A target can be added (from the element invoking the dialog */\n  this.elements.target = dialog.target || ''\n\n  /* Optional HTML for custom dialogs */\n  this.elements.template.innerHTML = dialog.template || ''\n\n  /* Grab focusable elements */\n  this.focusable = this.getFocusable()\n  this.hasFormData = this.elements.fieldset.elements.length > 0\n  if (dialog.soundOpen) {\n    this.elements.soundOpen.play()\n  }\n  this.toggle(true)\n  if (this.hasFormData) {\n    /* If form elements exist, focus on that first */\n    this.focusable[0].focus()\n    this.focusable[0].select()\n  }\n  else {\n    this.elements.accept.focus()\n  }\n}\n\n\n\nPhew! That was a lot of code. Now we can show the <dialog> element in all browsers. But we still need to mimic the functionality that waits for a user’s input after execution, like the native alert(), confirm(), and prompt() methods. For that, we need a Promise and a new method I’m calling waitForUser():\n\n\n\nwaitForUser() {\n  return new Promise(resolve => {\n    this.dialog.addEventListener('cancel', () => { \n      this.toggle()\n      resolve(false)\n    }, { once: true })\n    this.elements.accept.addEventListener('click', () => {\n      let value = this.hasFormData ? \n        this.collectFormData(new FormData(this.elements.form)) : true;\n      if (this.elements.soundAccept.src) this.elements.soundAccept.play()\n      this.toggle()\n      resolve(value)\n    }, { once: true })\n  })\n}\n\n\n\nThis method returns a Promise. Within that, we add event listeners for “cancel” and “accept” that either resolve false (cancel), or true (accept). If formData exists (for custom dialogs or prompt), these will be collected with a helper method, then returned in an object:\n\n\n\ncollectFormData(formData) {\n  const object = {};\n  formData.forEach((value, key) => {\n    if (!Reflect.has(object, key)) {\n      object[key] = value\n      return\n    }\n    if (!Array.isArray(object[key])) {\n      object[key] = [object[key]]\n    }\n    object[key].push(value)\n  })\n  return object\n}\n\n\n\nWe can remove the event listeners immediately, using { once: true }.\n\n\n\nTo keep it simple, I don’t use reject() but rather simply resolve false.\n\n\n\nHiding the <dialog>\n\n\n\nEarlier on, we added event listeners for the built-in cancel event. We call this event when the user clicks the “cancel” button or presses the Escape key. The cancel event removes the open attribute on the <dialog>, thus hiding it.\n\n\n\nWhere to :focus?\n\n\n\nIn our open() method, we focus on either the first focusable form field or the “Accept” button:\n\n\n\nif (this.hasFormData) {\n  this.focusable[0].focus()\n  this.focusable[0].select()\n}\nelse {\n  this.elements.accept.focus()\n}\n\n\n\nBut is this correct? In the W3’s “Modal Dialog” example, this is indeed the case. In Scott Ohara’s example though, the focus is on the dialog itself — which makes sense if the screen reader should read the text we defined in the aria-labelledby attribute earlier. I’m not sure which is correct or best, but if we want to use Scott’s method. we need to add a tabindex=\"-1\" to the <dialog> in our init method:\n\n\n\nthis.dialog.tabIndex = -1\n\n\n\nThen, in the open() method, we’ll replace the focus code with this:\n\n\n\nthis.dialog.focus()\n\n\n\nWe can check the activeElement (the element that has focus) at any given time in DevTools by clicking the “eye” icon and typing document.activeElement in the console. Try tabbing around to see it update:\n\n\n\nClicking the “eye” icon\n\n\n\nAdding alert, confirm, and prompt\n\n\n\nWe’re finally ready to add alert(), confirm() and prompt() to our Dialog class. These will be small helper methods that replace JavaScript dialogs and the original syntax of those methods. All of them call the open()method we created earlier, but with a settings object that matches the way we trigger the original methods.\n\n\n\nLet’s compare with the original syntax.\n\n\n\nalert() is normally triggered like this:\n\n\n\nwindow.alert(message);\n\n\n\nIn our Dialog, we’ll add an alert() method that’ll mimic this:\n\n\n\n/* dialog.alert() */\nalert(message, config = { target: event.target }) {\n  const settings = Object.assign({}, config, { cancel: '', message, template: '' })\n  this.open(settings)\n  return this.waitForUser()\n}\n\n\n\nWe set cancel and template to empty strings, so that — even if we had set default values earlier — these will not be hidden, and only message and accept are shown.\n\n\n\nconfirm() is normally triggered like this:\n\n\n\nwindow.confirm(message);\n\n\n\nIn our version, similar to alert(), we create a custom method that shows the message, cancel and accept items:\n\n\n\n/* dialog.confirm() */\nconfirm(message, config = { target: event.target }) {\n  const settings = Object.assign({}, config, { message, template: '' })\n  this.open(settings)\n  return this.waitForUser()\n}\n\n\n\nprompt() is normally triggered like this:\n\n\n\nwindow.prompt(message, default);\n\n\n\nHere, we need to add a template with an <input> that we’ll wrap in a <label>:\n\n\n\n/* dialog.prompt() */\nprompt(message, value, config = { target: event.target }) {\n  const template = `\n  <label aria-label=\"${message}\">\n    <input name=\"prompt\" value=\"${value}\">\n  </label>`\n  const settings = Object.assign({}, config, { message, template })\n  this.open(settings)\n  return this.waitForUser()\n}\n\n\n\n{ target: event.target } is a reference to the DOM element that calls the method. We’ll use that to refocus on that element when we close the <dialog>, returning the user to where they were before the dialog was fired.\n\n\n\nWe ought to test this\n\n\n\nIt’s time to test and make sure everything is working as expected. Let’s create a new HTML file, import the class, and create an instance:\n\n\n\n<script type=\"module\">\n  import Dialog from './dialog.js';\n  const dialog = new Dialog();\n</script>\n\n\n\nTry out the following use cases one at a time!\n\n\n\n/* alert */\ndialog.alert('Please refresh your browser')\n/* or */\ndialog.alert('Please refresh your browser').then((res) => {  console.log(res) })\n\n/* confirm */\ndialog.confirm('Do you want to continue?').then((res) => { console.log(res) })\n\n/* prompt */\ndialog.prompt('The meaning of life?', 42).then((res) => { console.log(res) })\n\n\n\nThen watch the console as you click “Accept” or “Cancel.” Try again while pressing the Escape or Enter keys instead.\n\n\n\nAsync/Await\n\n\n\nWe can also use the async/await way of doing this. We’re replacing JavaScript dialogs even more by mimicking the original syntax, but it requires the wrapping function to be async, while the code within requires the await keyword:\n\n\n\ndocument.getElementById('promptButton').addEventListener('click', async (e) => {\n  const value = await dialog.prompt('The meaning of life?', 42);\n  console.log(value);\n});\n\n\n\nCross-browser styling\n\n\n\nWe now have a fully-functional cross-browser and screen reader-friendly HTML dialog element that replaces JavaScript dialogs! We’ve covered a lot. But the styling could use a lot of love. Let’s utilize the existing data-component and data-ref-attributes to add cross-browser styling — no need for additional classes or other attributes!\n\n\n\nWe’ll use the CSS :where pseudo-selector to keep our default styles free from specificity:\n\n\n\n:where([data-component*=\"dialog\"] *) {  \n  box-sizing: border-box;\n  outline-color: var(--dlg-outline-c, hsl(218, 79.19%, 35%))\n}\n:where([data-component*=\"dialog\"]) {\n  --dlg-gap: 1em;\n  background: var(--dlg-bg, #fff);\n  border: var(--dlg-b, 0);\n  border-radius: var(--dlg-bdrs, 0.25em);\n  box-shadow: var(--dlg-bxsh, 0px 25px 50px -12px rgba(0, 0, 0, 0.25));\n  font-family:var(--dlg-ff, ui-sansserif, system-ui, sans-serif);\n  min-inline-size: var(--dlg-mis, auto);\n  padding: var(--dlg-p, var(--dlg-gap));\n  width: var(--dlg-w, fit-content);\n}\n:where([data-component=\"no-dialog\"]:not([hidden])) {\n  display: block;\n  inset-block-start: var(--dlg-gap);\n  inset-inline-start: 50%;\n  position: fixed;\n  transform: translateX(-50%);\n}\n:where([data-component*=\"dialog\"] menu) {\n  display: flex;\n  gap: calc(var(--dlg-gap) / 2);\n  justify-content: var(--dlg-menu-jc, flex-end);\n  margin: 0;\n  padding: 0;\n}\n:where([data-component*=\"dialog\"] menu button) {\n  background-color: var(--dlg-button-bgc);\n  border: 0;\n  border-radius: var(--dlg-bdrs, 0.25em);\n  color: var(--dlg-button-c);\n  font-size: var(--dlg-button-fz, 0.8em);\n  padding: var(--dlg-button-p, 0.65em 1.5em);\n}\n:where([data-component*=\"dialog\"] [data-ref=\"accept\"]) {\n  --dlg-button-bgc: var(--dlg-accept-bgc, hsl(218, 79.19%, 46.08%));\n  --dlg-button-c: var(--dlg-accept-c, #fff);\n}\n:where([data-component*=\"dialog\"] [data-ref=\"cancel\"]) {\n  --dlg-button-bgc: var(--dlg-cancel-bgc, transparent);\n  --dlg-button-c: var(--dlg-cancel-c, inherit);\n}\n:where([data-component*=\"dialog\"] [data-ref=\"fieldset\"]) {\n  border: 0;\n  margin: unset;\n  padding: unset;\n}\n:where([data-component*=\"dialog\"] [data-ref=\"message\"]) {\n  font-size: var(--dlg-message-fz, 1.25em);\n  margin-block-end: var(--dlg-gap);\n}\n:where([data-component*=\"dialog\"] [data-ref=\"template\"]:not(:empty)) {\n  margin-block-end: var(--dlg-gap);\n  width: 100%;\n}\n\n\n\nYou can style these as you’d like, of course. Here’s what the above CSS will give you:\n\n\n\n\n\nalert()\n\n\n\n\n\nconfirm()\n\n\n\n\n\nprompt()\n\n\n\n\n\nTo overwrite these styles and use your own, add a class in dialogClass,\n\n\n\ndialogClass: 'custom'\n\n\n\n…then add the class in CSS, and update the CSS custom property values:\n\n\n\n.custom {\n  --dlg-accept-bgc: hsl(159, 65%, 75%);\n  --dlg-accept-c: #000;\n  /* etc. */\n}\n\n\n\nA custom dialog example\n\n\n\nWhat if the standard alert(), confirm() and prompt() methods we are mimicking won’t do the trick for your specific use case? We can actually do a bit more to make the <dialog> more flexible to cover more than the content, buttons, and functionality we’ve covered so far — and it’s not much more work.\n\n\n\nEarlier, I teased the idea of adding a sound to the dialog. Let’s do that.\n\n\n\nYou can use the template property of the settings object to inject more HTML. Here’s a custom example, invoked from a <button> with id=\"btnCustom\" that triggers a fun little sound from an MP3 file:\n\n\n\ndocument.getElementById('btnCustom').addEventListener('click', (e) => {\n  dialog.open({\n    accept: 'Sign in',\n    dialogClass: 'custom',\n    message: 'Please enter your credentials',\n    soundAccept: 'https://assets.yourdomain.com/accept.mp3',\n    soundOpen: 'https://assets.yourdomain.com/open.mp3',\n    target: e.target,\n    template: `\n    <label>Username<input type=\"text\" name=\"username\" value=\"admin\"></label>\n    <label>Password<input type=\"password\" name=\"password\" value=\"password\"></label>`\n  })\n  dialog.waitForUser().then((res) => {  console.log(res) })\n});\n\n\n\nLive demo\n\n\n\nHere’s a Pen with everything we built! Open the console, click the buttons, and play around with the dialogs, clicking the buttons and using the keyboard to accept and cancel.\n\n\n\nCodePen Embed Fallback\n\n\n\nSo, what do you think? Is this a good way to replace JavaScript dialogs with the newer HTML dialog element? Or have you tried doing it another way? Let me know in the comments!\n\nReplace JavaScript Dialogs With the New HTML Dialog Element originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-08T15:09:40.000Z",
      "date_modified": "2022-02-08T15:09:40.000Z",
      "_plugin": {
        "pageFilename": "344fa1bc884376f44790ff6c838e81c2a8484edd43fbc781f197e83418b03c69.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363380",
      "url": "https://css-tricks.com/netlify-has-scheduled-functions/",
      "title": "Netlify Has Scheduled Functions",
      "summary": "(This is a sponsored post.)\nHey! Scheduled Functions are cool! Think of them like a CRON job. I want this code to run every Monday at 2pm. I want this code run every hour on the hour. That kind …\n\nNetlify Has Scheduled Functions originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>Hey! <a href=\"https://www.netlify.com/blog/quirrel-joins-netlify-and-scheduled-functions-launches-in-beta\" rel=\"noopener\">Scheduled Functions</a> are cool! Think of them like a CRON job. <strong>I want this code to run every Monday at 2pm. I want this code run every hour on the hour.</strong> That kind of thing. Why would you want to do that? There are tons of reasons! Perhaps something like &#8220;send my newsletter&#8221; where you write it on your site in Markdown, it gets processed into an email template and sent out via a <a href=\"https://www.netlify.com/products/functions/\" rel=\"noopener\">Netlify Function</a>. Now you could make that happen on a set schedule. Or something like &#8220;send all my new blog posts out, if there are any.&#8221;</p>\n\n\n\n<p>This is pretty near and dear to me, because I&#8217;ve reached for paid outside services to do this for me in the past!</p>\n\n\n\n<span id=\"more-363380\"></span>\n\n\n\n<p>See, I have <a href=\"https://github.com/CSS-Tricks/conferences\" rel=\"noopener\">a little mini site</a> right here on CSS-Tricks that is <em>very time-based</em> in that it <a href=\"https://conferences.css-tricks.com/\">lists upcoming conferences</a>. It&#8217;s a totally static site, so once a date is passed, it, uh, kinda doesn&#8217;t matter, the site just stays how it is. But there <a href=\"https://github.com/CSS-Tricks/conferences/blob/master/.eleventy.js#L10-L12\" rel=\"noopener\">is code</a> that during the build process, it only builds out conferences in the future, not the past. <strong>So the trick is to run the build process every day. </strong></p>\n\n\n\n<p>Before Scheduled Functions, I used Zapier to do this, which has been humming along doing this just fine for years:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/zapier-netlify-build.png?resize=436%2C666&#038;ssl=1\" alt=\"\" class=\"wp-image-363384\" width=\"436\" height=\"666\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/zapier-netlify-build.png?w=1742&amp;ssl=1 1742w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/zapier-netlify-build.png?resize=196%2C300&amp;ssl=1 196w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/zapier-netlify-build.png?resize=670%2C1024&amp;ssl=1 670w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/zapier-netlify-build.png?resize=768%2C1174&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/zapier-netlify-build.png?resize=1004%2C1536&amp;ssl=1 1004w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/zapier-netlify-build.png?resize=1339%2C2048&amp;ssl=1 1339w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/zapier-netlify-build.png?resize=1000%2C1529&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But the knowlege of how that works is basically locked up in my head. Plus, I&#8217;m doing it on a non-free third-party service, and there is always a little bit of Rube Goldberg-y technical debt to that. </p>\n\n\n\n<p>I&#8217;m literally switching up how I&#8217;m doing it right this second as I type out this blog post. I&#8217;m just going to write the dumbest function ever that kicks a POST request to the URL that Netlify gives me to trigger builds and do it once a day. That&#8217;s it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2684\" height=\"1126\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-07-at-3.13.48-PM.png?resize=2684%2C1126&#038;ssl=1\" alt=\"\" class=\"wp-image-363385\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-07-at-3.13.48-PM.png?w=2684&amp;ssl=1 2684w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-07-at-3.13.48-PM.png?resize=300%2C126&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-07-at-3.13.48-PM.png?resize=1024%2C430&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-07-at-3.13.48-PM.png?resize=768%2C322&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-07-at-3.13.48-PM.png?resize=1536%2C644&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-07-at-3.13.48-PM.png?resize=2048%2C859&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-07-at-3.13.48-PM.png?resize=1000%2C420&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Might as well keep that URL as an <a href=\"https://docs.netlify.com/configure-builds/environment-variables/\" rel=\"noopener\">&#8220;Enviornment Variable&#8221;</a> like <code>process.env.BUILD_SECRET</code> or whatever</figcaption></figure>\n\n\n\n<p>With this in place, I&#8217;m gonna switch off my Zap and just rest easy knowing all this functionality is now shored up in one place. </p>\n\n\n\n<p>This is a <strong>Beta</strong> feature, for the record. Netlify doesn&#8217;t recommend it for production just <em>quiiiiite</em> yet, as per <a href=\"https://github.com/netlify/labs/blob/main/features/scheduled-functions/documentation/README.md\" rel=\"noopener\">the Labs documentation</a>. But my thing isn&#8217;t <em>super</em> mission-critical so I&#8217;m giving it a shot. </p>\n\n\n\n<p>What else might you use them for? <a href=\"https://www.netlify.com/blog/quirrel-joins-netlify-and-scheduled-functions-launches-in-beta\" rel=\"noopener\">The blog post about the new feature</a> has some ideas:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>• Invoke a set of APIs to collate data for a report at the end of every week</p><p>• Back up data from one data store to another at the end of every night</p><p>• Build and deploy all your static content every hour instead of for every authored or merged pull request, or</p><p>• Anything else you can imagine you might want to invoke on a regular basis!</p><p></p></blockquote>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/netlify-has-scheduled-functions/\">Netlify Has Scheduled Functions</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "(This is a sponsored post.)\nHey! Scheduled Functions are cool! Think of them like a CRON job. I want this code to run every Monday at 2pm. I want this code run every hour on the hour. That kind of thing. Why would you want to do that? There are tons of reasons! Perhaps something like “send my newsletter” where you write it on your site in Markdown, it gets processed into an email template and sent out via a Netlify Function. Now you could make that happen on a set schedule. Or something like “send all my new blog posts out, if there are any.”\n\n\n\nThis is pretty near and dear to me, because I’ve reached for paid outside services to do this for me in the past!\n\n\n\n\n\n\n\nSee, I have a little mini site right here on CSS-Tricks that is very time-based in that it lists upcoming conferences. It’s a totally static site, so once a date is passed, it, uh, kinda doesn’t matter, the site just stays how it is. But there is code that during the build process, it only builds out conferences in the future, not the past. So the trick is to run the build process every day. \n\n\n\nBefore Scheduled Functions, I used Zapier to do this, which has been humming along doing this just fine for years:\n\n\n\n\n\n\n\nBut the knowlege of how that works is basically locked up in my head. Plus, I’m doing it on a non-free third-party service, and there is always a little bit of Rube Goldberg-y technical debt to that. \n\n\n\nI’m literally switching up how I’m doing it right this second as I type out this blog post. I’m just going to write the dumbest function ever that kicks a POST request to the URL that Netlify gives me to trigger builds and do it once a day. That’s it.\n\n\n\nMight as well keep that URL as an “Enviornment Variable” like process.env.BUILD_SECRET or whatever\n\n\n\nWith this in place, I’m gonna switch off my Zap and just rest easy knowing all this functionality is now shored up in one place. \n\n\n\nThis is a Beta feature, for the record. Netlify doesn’t recommend it for production just quiiiiite yet, as per the Labs documentation. But my thing isn’t super mission-critical so I’m giving it a shot. \n\n\n\nWhat else might you use them for? The blog post about the new feature has some ideas:\n\n\n\n• Invoke a set of APIs to collate data for a report at the end of every week• Back up data from one data store to another at the end of every night• Build and deploy all your static content every hour instead of for every authored or merged pull request, or• Anything else you can imagine you might want to invoke on a regular basis!\n\nNetlify Has Scheduled Functions originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-08T15:08:47.000Z",
      "date_modified": "2022-02-08T15:08:47.000Z",
      "_plugin": {
        "pageFilename": "99560c83861fc8d1d655df50d5d978d7cd675c2f6bcb092ca0fea2d44e9f692c.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=363102",
      "url": "https://css-tricks.com/color-spaces-for-more-interesting-css-gradients/",
      "title": "Using Different Color Spaces for Non-Boring Gradients",
      "summary": "A little gradient generator tool from Tom Quinonero. You’d think fading one color to another would be an obvious, simple, solved problem — it’s actually anything but!\nTom’s generator does two things that help make a gradient better:\n\nYou \n\n…\n\nUsing Different Color Spaces for Non-Boring Gradients originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p><a href=\"https://non-boring-gradients.netlify.app/\" rel=\"noopener\">A little gradient generator tool</a> from <a href=\"https://tomquinonero.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Tom Quinonero</a>. You&#8217;d think fading one color to another would be an obvious, simple, solved problem — it&#8217;s actually anything but!</p>\n\n\n\n<p>Tom&#8217;s generator does two things that help make a gradient better:</p>\n\n\n\n<ol><li>You can pick an &#8220;interpolation space.&#8221; Gradients that use the sRGB color space (pretty much all the color stuff we have in CSS today) have a bad habit of going through <a href=\"https://css-tricks.com/the-gray-dead-zone-of-gradients/\">a gray dead zone</a>, and if you interpolate the gradient in another color space, it can turn out nicer (and yet convert it back to RGB to use today). </li><li><a href=\"https://css-tricks.com/easing-linear-gradients/\">Easing</a> the colors, though the use of multiple color-stops, which can result in a less abrupt and more pleasing look. </li></ol>\n\n\n\n<span id=\"more-363102\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"290\" height=\"324\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/unnamed-1.png?resize=290%2C324&#038;ssl=1\" alt=\"Showing a color wheel with a line indicating the two colors in a gradient that goes from yellow to light blue. The resulting gradient is at top showing some gray tones as a result of the color space.\" class=\"wp-image-335428\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/unnamed-1.png?w=290&amp;ssl=1 290w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/unnamed-1.png?resize=269%2C300&amp;ssl=1 269w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>See the gray in the middle there?</figcaption></figure>\n\n\n\n<h2 id=\"different-gradient-apps-with-different-color-spaces\">Different gradient apps with different color spaces</h2>\n\n\n\n<p>Josh has <a href=\"https://www.joshwcomeau.com/gradient-generator/\" rel=\"noopener\">another similar app</a>, as <a href=\"https://learnui.design/tools/gradient-generator.html\" rel=\"noopener\">does Erik Kennedy</a>. So stinkin&#8217; interesting how different gradients are in different color spaces. Think of the color spaces as a physical map where individual colors are points on the map. Gradients are dumb. They just walk straight from one point on the map to the next. The colors underneath their feet as they walk make a massive difference in how the gradient turns out. </p>\n\n\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Safari Tech Preview has experimental CSS gradient colorspaces and I had tons of fun playing around last night with it!<br><br>&#8220;`<a href=\"https://twitter.com/hashtag/css?src=hash&amp;ref_src=twsrc%5Etfw\" rel=\"noopener\">#css</a><br>background: linear-gradient(<br> to right in var(&#8211;colorspace),<br> black, white<br>);<br>&#8220;`<br><br>basic black to white can be so different!<a href=\"https://t.co/ltCWtzUD23\">https://t.co/ltCWtzUD23</a> <a href=\"https://t.co/rlUIiDFJu9\">pic.twitter.com/rlUIiDFJu9</a></p>— Adam Argyle (@argyleink) <a href=\"https://twitter.com/argyleink/status/1490376117064065025?ref_src=twsrc%5Etfw\" rel=\"noopener\">February 6, 2022</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p><a href=\"https://non-boring-gradients.netlify.app/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/color-spaces-for-more-interesting-css-gradients/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/color-spaces-for-more-interesting-css-gradients/\">Using Different Color Spaces for Non-Boring Gradients</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "A little gradient generator tool from Tom Quinonero. You’d think fading one color to another would be an obvious, simple, solved problem — it’s actually anything but!\n\n\n\nTom’s generator does two things that help make a gradient better:\n\n\n\nYou can pick an “interpolation space.” Gradients that use the sRGB color space (pretty much all the color stuff we have in CSS today) have a bad habit of going through a gray dead zone, and if you interpolate the gradient in another color space, it can turn out nicer (and yet convert it back to RGB to use today). Easing the colors, though the use of multiple color-stops, which can result in a less abrupt and more pleasing look. \n\n\n\n\n\n\n\nSee the gray in the middle there?\n\n\n\nDifferent gradient apps with different color spaces\n\n\n\nJosh has another similar app, as does Erik Kennedy. So stinkin’ interesting how different gradients are in different color spaces. Think of the color spaces as a physical map where individual colors are points on the map. Gradients are dumb. They just walk straight from one point on the map to the next. The colors underneath their feet as they walk make a massive difference in how the gradient turns out. \n\n\n\nSafari Tech Preview has experimental CSS gradient colorspaces and I had tons of fun playing around last night with it!“`#cssbackground: linear-gradient( to right in var(–colorspace), black, white);“`basic black to white can be so different!https://t.co/ltCWtzUD23 pic.twitter.com/rlUIiDFJu9— Adam Argyle (@argyleink) February 6, 2022 \nTo Shared Link — Permalink on CSS-Tricks\nUsing Different Color Spaces for Non-Boring Gradients originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-07T21:46:18.000Z",
      "date_modified": "2022-02-07T21:46:18.000Z",
      "_plugin": {
        "pageFilename": "70e065bea891a186b487f07e4d2556acaa66e9ec21f693d08e70a0dddf286780.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362616",
      "url": "https://css-tricks.com/css-scroll-snap-slide-deck/",
      "title": "CSS Scroll Snap Slide Deck That Supports Live Coding",
      "summary": "Virtual conferences have changed the game in terms of how a presenter is able to deliver content to an audience. At a live event it’s likely you just have your laptop, but at home, you may have multiple monitors so …\n\nCSS Scroll Snap Slide Deck That Supports Live Coding originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>Virtual conferences have changed the game in terms of how a presenter is able to deliver content to an audience. At a live event it’s likely you just have your laptop, but at home, you may have multiple monitors so that you can move around windows and make off-screen changes when delivering live coding demos. However, as some events go back to in-person, you may be in a similar boat as me wondering how to bring an equivalent experience to a live venue.</p>\n\n\n\n<p>With a bit of creativity using native web functionality and modern CSS, like CSS scroll snap, we’ll be building a no-JavaScript slide deck that allows live editing of CSS demos. The final deck will be responsive and shareable, thanks to living inside of a CodePen.</p>\n\n\n\n<span id=\"more-362616\"></span>\n\n\n\n<p>To make this slide deck, we’ll learn about:</p>\n\n\n\n<ul><li>CSS scroll snap, counters, and grid layout</li><li>The <code>contenteditable</code> attribute</li><li>Using custom properties and HSL for theming</li><li>Gradient text</li><li>Styling the <code>&lt;style&gt;</code> element</li></ul>\n\n\n\n<h3 id=\"slide-templates\">Slide templates</h3>\n\n\n\n<p>When making a slide deck of a bunch of different slides, it’s likely that you’ll need different <em>types</em> of slides. So we’ll create these three essential templates:</p>\n\n\n\n<ul><li><strong>Text:</strong> open for any text you need to include</li><li><strong>Title:</strong> emphasizing a headline to break up sections of content</li><li><strong>Demo:</strong> split layout with a code block and the preview</li></ul>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2044\" height=\"1074\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?resize=2044%2C1074&#038;ssl=1\" alt=\"Screenshot of the text slide containing a heading, byline, and Twitter handle. The text is dark blue and the background has a light blue. There is the number one in white inside a bright blue circle located in the bottom-left corner of the slide indicating the page title.\" class=\"wp-image-362635\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?w=2044&amp;ssl=1 2044w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?resize=300%2C158&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?resize=1024%2C538&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?resize=768%2C404&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?resize=1536%2C807&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?resize=1000%2C525&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Text presentation slide</figcaption></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2044\" height=\"1074\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?resize=2044%2C1074&#038;ssl=1\" alt=\"A slide with the text Topic 1 in dark blue and a soft linear gradient that goes from a super light blue to a brighter blue, going from left to right.\" class=\"wp-image-362619\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?w=2044&amp;ssl=1 2044w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?resize=300%2C158&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?resize=1024%2C538&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?resize=768%2C404&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?resize=1536%2C807&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?resize=1000%2C525&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Title presentation slide</figcaption></figure>\n\n\n\n<p></p>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2044\" height=\"1074\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?resize=2044%2C1074&#038;ssl=1\" alt=\"Slide deck screenshot showing the split view with live code on the left and the output on the right. The page number of the slide is shown in the bottom-left corner and includes the word CSS after the page number.\" class=\"wp-image-362637\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?w=2044&amp;ssl=1 2044w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?resize=300%2C158&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?resize=1024%2C538&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?resize=768%2C404&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?resize=1536%2C807&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?resize=1000%2C525&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Demo presentation slide</figcaption></figure>\n</div>\n</div>\n\n\n\n<h3 id=\"html-templates\">HTML templates</h3>\n\n\n\n<p>Let’s start creating our HTML. We’ll use an ordered list with the ID of <code>slides</code> and go ahead and populate a text and title slide.</p>\n\n\n\n<p>Each slide is one of the list elements with the class of <code>slide</code>, as well as a modifier class to indicate the template type. For these text-based slides, we’ve nested a <code>&lt;div&gt;</code> with the class of <code>content</code> and then added a bit of boilerplate text.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;ol id=\"slides\">\n  &lt;li class=\"slide slide--text\">\n    &lt;div class=\"content\">\n      &lt;h1>Presentation Title&lt;/h1>\n      &lt;p>Presented by Your Name&lt;/p>\n      &lt;p>&lt;a target=\"_blank\" href=\"&lt;https://twitter.com/5t3ph>\">@5t3ph&lt;/a>&lt;/p>\n    &lt;/div>\n  &lt;/li>\n  &lt;li class=\"slide slide--title\">\n    &lt;div class=\"content\">\n      &lt;h2>Topic 1&lt;/h2>\n    &lt;/div>\n  &lt;/li>\n&lt;/ol></code></pre>\n\n\n\n<p class=\"is-style-explanation\">We’re using <code>target=\"_blank\"</code> on the link due to CodePen using iframes for the preview, so it’s necessary to “escape” the iframe and load the link.</p>\n\n\n\n<h3 id=\"base-styles\">Base styles</h3>\n\n\n\n<p>Next, we’ll begin to add some styles. If you are using CodePen, these styles assume you’re <em>not</em> loading one of the resets. Our reset wipes out margin and ensures the <code>&lt;body&gt;</code> element takes up the total available height, which is all we really need here. And, we’ll make a basic font stack update.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">* {\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  min-height: 100vh;\n  font-family: system-ui, sans-serif;\n  font-size: 1.5rem;\n}</code></pre>\n\n\n\n<p>Next, we’ll define that all our major layout elements will use a <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">CSS grid</a>, remove list styling from <code>#slides</code>, and make each slide take up the size of the viewport. Finally, we’ll use the <code>place-content</code> shorthand to center the <code>slide--text</code> and <code>slide--title</code> slide content.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body,\n#slides,\n.slide {\n  display: grid;\n}\n\n#slides {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.slide {\n  width: 100vw;\n  height: 100vh;\n}\n\n.slide--text,\n.slide--title {\n  place-content: center;\n}</code></pre>\n\n\n\n<p>Then, we’ll add some lightweight text styles. Since this is intended to be a presentation with one big point being made at a time, as opposed to an article-like format, we’ll bump the base <code>font-size</code> to <code>2rem</code>. Be sure to adjust this value as you test out your final slides in full screen. You may decide it feels too small for your content versus your presentation viewport size.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1, h2 {\n  line-height: 1.1;\n}\n\na {\n  color: inherit;\n}\n\n.content {\n  padding: 2rem;\n  font-size: 2rem;\n  line-height: 1.5;\n}\n\n.content * + * {\n  margin-top: 0.5em;\n}\n\n.slide--text .content {\n  max-width: 40ch;\n}</code></pre>\n\n\n\n<p>At this point, we have some large text centered within a container the size of the viewport. Let’s add a touch of color by creating a simple theme system.</p>\n\n\n\n<p>We’ll be using the <a href=\"https://css-tricks.com/hsl-hsla-is-great-for-programmatic-color-control/\"><code>hsl</code> color space</a> for the theme while setting a custom property of <code>--theme-hue</code> and <code>--theme-saturation</code>. The hue value of <code>230</code> corresponds to a blue. For ease of use, we’ll then combine those into the <code>--theme-hs</code> value to drop into instances of <code>hsl</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\n  --theme-hue: 230;\n  --theme-saturation: 85%;\n  --theme-hs: var(--theme-hue), var(--theme-saturation);\n}</code></pre>\n\n\n\n<p>We can adjust the lightness values for backgrounds and text. The slides will feel cohesive since they will be tints of that base hue.</p>\n\n\n\n<p>Back in our main <code>&lt;body&gt;</code> style, we can apply this idea to create a very light version of the color for a background, and a dark version for the text.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  /* ... existing styles */\n  background-color: hsl(var(--theme-hs), 95%);\n  color: hsl(var(--theme-hs), 25%);\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"516\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040273308_slide-theme.png?resize=1024%2C516&#038;ssl=1\" alt=\"Screenshot of a CSS scroll snap slide  with the presentation title, a byline, and a Twitter handle. The text is dark blue and the background is a light blue.\" class=\"wp-image-362618\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040273308_slide-theme.png?resize=1024%2C516&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040273308_slide-theme.png?resize=300%2C151&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040273308_slide-theme.png?resize=768%2C387&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040273308_slide-theme.png?resize=1536%2C774&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040273308_slide-theme.png?resize=2048%2C1032&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040273308_slide-theme.png?resize=1000%2C504&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Let’s also give <code>.slide--title</code> a little bit of extra pizazz by adding a subtle gradient background.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.slide--title {\n  background-image: \n    linear-gradient(125deg, \n      hsl(var(--theme-hs), 95%), \n      hsl(var(--theme-hs), 75%)\n    );\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2044\" height=\"1074\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?resize=2044%2C1074&#038;ssl=1\" alt=\"A slide with the text Topic 1 in dark blue and a soft linear gradient that goes from a super light blue to a brighter blue, going from left to right.\" class=\"wp-image-362619\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?w=2044&amp;ssl=1 2044w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?resize=300%2C158&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?resize=1024%2C538&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?resize=768%2C404&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?resize=1536%2C807&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040298608_title-slide.png?resize=1000%2C525&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 id=\"demo-slide-template\">Demo slide template</h3>\n\n\n\n<p>Our demo slide breaks the mold so far and requires two main elements:</p>\n\n\n\n<ul><li>a <code>.style</code> container around an inline <code>&lt;style&gt;</code> element with actual written styles that you intend to both be visible on screen and apply to the demo</li><li>a <code>.demo</code> container to hold the demo preview with whatever markup is appropriate for that</li></ul>\n\n\n\n<p>If you’re using CodePen to create this deck, you’ll want to update the “Behavior” setting to turn off “Format on Save.” This is because we don’t want extra tabs/spaces prior to the styles block. Exactly why will become clear in a moment.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1382\" height=\"720\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CB14231AAE38F647B14B55BCB55C475DA5948E9758E068017A7573EAEC1AA989_1643138081502_ScreenShot2022-01-25at11.14.01AM.png?resize=1382%2C720&#038;ssl=1\" alt=\"Screenshot of a CodePen's HTMLand CSS code panels. The settings menu for the HTML panel is open and highlighting the first item, which is Format HTML.\" class=\"wp-image-362622\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CB14231AAE38F647B14B55BCB55C475DA5948E9758E068017A7573EAEC1AA989_1643138081502_ScreenShot2022-01-25at11.14.01AM.png?w=1382&amp;ssl=1 1382w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CB14231AAE38F647B14B55BCB55C475DA5948E9758E068017A7573EAEC1AA989_1643138081502_ScreenShot2022-01-25at11.14.01AM.png?resize=300%2C156&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CB14231AAE38F647B14B55BCB55C475DA5948E9758E068017A7573EAEC1AA989_1643138081502_ScreenShot2022-01-25at11.14.01AM.png?resize=1024%2C533&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CB14231AAE38F647B14B55BCB55C475DA5948E9758E068017A7573EAEC1AA989_1643138081502_ScreenShot2022-01-25at11.14.01AM.png?resize=768%2C400&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CB14231AAE38F647B14B55BCB55C475DA5948E9758E068017A7573EAEC1AA989_1643138081502_ScreenShot2022-01-25at11.14.01AM.png?resize=1000%2C521&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Here’s our demo slide content:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;li class=\"slide slide--demo\">\n  &lt;div class=\"style\">\n  &lt;style contenteditable=\"true\"> \n.modern-container {\n  --container-width: 40ch;\n\n  width: min(\n    var(--container-width), 100% - 3rem\n  );\n  margin-inline: auto;\n}\n  &lt;/style>\n  &lt;/div>\n  &lt;div class=\"demo\">\n    &lt;div class=\"modern-container\">\n      &lt;div class=\"box\">container&lt;/div>\n    &lt;/div>\n  &lt;/div>\n&lt;/li></code></pre>\n\n\n\n<p>Note that extra <code>contenteditable=\"true\"</code> attribute on the <code>&lt;style&gt;</code> block . <strong>This is a native HTML feature that allows you to <a href=\"https://css-tricks.com/the-browser-can-remember-edited-content/\">mark any element as editable</a>.</strong> It is not a replacement for form inputs and textareas and typically requires JavaScript for more full-featured functionality. But for our purposes, it’s the magic that enables “live” coding. Ultimately, we’ll be able to make changes to the content in here and the style changes will apply immediately. Pretty fancy, hold tight.</p>\n\n\n\n<p>However, if you view this so far, you won’t see the style block displayed. You will see the outcome of the .modern-container demo styles are being applied, though.</p>\n\n\n\n<p class=\"is-style-explanation\">Another relevant note here is that HTML5 included validating a <code>&lt;style&gt;</code> block anywhere; not just in the <code>&lt;head&gt;</code>.</p>\n\n\n\n<p>What we’re going to do next will feel strange, but we can actually use <code>display</code> properties on <code>&lt;style&gt;</code> to make it visible. We’ve placed it within another container to use a little extra positioning for it and make it a resizable area. Then, we’ve set the <code>&lt;style&gt;</code> element itself to <code>display: block</code> and applied properties to give it a code editor look and feel.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.style {\n  display: grid;\n  align-items: center;\n  background-color: hsl(var(--theme-hs), 5%);\n  padding-inline: max(5vw, 2rem) 3rem;\n  font-size: 1.35rem;\n  overflow-y: hidden;\n  resize: horizontal;\n}\n\nstyle {\n  display: block;\n  outline: none;\n  font-family: Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace;\n  color: hsl(var(--theme-hs), 85%);\n  background: none;\n  white-space: pre;\n  line-height: 1.65;\n  tab-size: 2;\n  hyphens: none;\n}</code></pre>\n\n\n\n<p>Then, we need to create the <code>.slide--demo</code> rule and use CSS grid to display the styles and demo, side-by-side. As a reminder, we’ve already set up the base <code>.slide</code> class to use grid, so now we’ll create a rule for <code>grid-template-columns</code> just for this template.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.slide--demo {\n  grid-template-columns: fit-content(85ch) 1fr;\n}</code></pre>\n\n\n\n<p>If you’re unfamiliar with the grid function <a href=\"https://css-tricks.com/fit-content-and-fit-content/\"><code>fit-content()</code></a>, it allows an element to use its intrinsic width up until the maximum value defined in the function. So, this rule says the style block can grow to a maximum of <code>85ch</code> wide. When your <code>&lt;style&gt;</code> content is narrow, the column will only be as wide as it needs to be. This is really nice visually as it won’t create extra horizontal space while still ultimately capping the allowed width.</p>\n\n\n\n<p>To round out this template, we’ll add some padding for the <code>.demo</code>. You may have also noticed that extra class within the demo of <code>.box</code>. This is a convention I like to use for demos to provide a visual of element boundaries when the size and position of something are important.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.demo {\n  padding: 2rem;\n}\n\n.box {\n  background-color: hsl(var(--theme-hs), 85%);\n  border: 2px dashed;\n  border-radius: .5em;\n  padding: 1rem;\n  font-size: 1.35rem;\n  text-align: center;\n}</code></pre>\n\n\n\n<p>Here’s the result of our code template:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"711\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040357306_code-template.png?resize=1024%2C711&#038;ssl=1\" alt=\"Screenshot of a slide that's split in half vertically, the left side with a almost black dark blue background and code that is a lighter blue in a mono font. The right side has a light blue background and an element at the top that says container, with a dashed border and slightly darker blue background.\" class=\"wp-image-362624\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040357306_code-template.png?resize=1024%2C711&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040357306_code-template.png?resize=300%2C208&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040357306_code-template.png?resize=768%2C533&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040357306_code-template.png?resize=1536%2C1066&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040357306_code-template.png?resize=2048%2C1422&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040357306_code-template.png?resize=1000%2C694&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 id=\"live-editing-functionality\">Live-editing functionality</h3>\n\n\n\n<p>Interacting with the displayed styles will actually update the preview! Additionally, since we created the <code>.style</code> container as a resizable area, you can grab the resize handle in the lower right to grow and shrink the preview area as needed.</p>\n\n\n\n<p>The one caveat for our live-editing ability is that browsers treat it differently.</p>\n\n\n\n<ul><li><strong>Firefox:</strong> This provides the best result as it allows both changing the loaded styles and full functionality of adding new properties and even new rules.</li><li><strong>Chromium and Safari:</strong> These allow changing values in loaded styles, but not adding new properties or new rules.</li></ul>\n\n\n\n<p>As a presenter, you’ll likely want to use Firefox. As for viewers utilizing the presentation link, they’ll still be able to get the intention of your slides and shouldn’t have issues with the display (unless their browser doesn’t support your demoed code). But outside of Firefox, they may be unable to manipulate the demos as fully as you may show in your presentation.</p>\n\n\n\n<p>You may want to “Fork” your finished presentation pen and actually remove the editable behavior on <code>&lt;style&gt;</code> blocks and instead display final versions of your demos styles, as applicable.</p>\n\n\n\n<p class=\"is-style-explanation\">Reminder: styles you include in demos can potentially affect slide layout and other demos! You may want to scope demo styles under a slide-specific class to prevent unintended style changes across your deck.</p>\n\n\n\n<h3 id=\"code-highlighting\">Code highlighting</h3>\n\n\n\n<p>While we won’t be able to achieve full syntax highlighting without JavaScript, we can create a method to highlight certain parts of the code block for emphasis.</p>\n\n\n\n<p>To do this, we’ll pair up <code>linear-gradient</code> with the <code>-webkit</code> properties that enable using an element’s background as the text effect. Then, using custom properties, we can define how many “lines” of the style block to highlight.</p>\n\n\n\n<p>First, we’ll place the required <code>-webkit</code> properties directly on the <code>&lt;style&gt;</code> element. This will cause the visible text to disappear, but we’ll make it visible in a moment by adding a background. Although these are <code>-webkit</code> prefixed, they are <a href=\"https://caniuse.com/background-clip-text\" rel=\"noopener\">supported cross-browser.</a></p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">style {\n  /* ...existing styles */\n  -webkit-text-fill-color: transparent;\n  -webkit-background-clip: text;\n}</code></pre>\n\n\n\n<p>The highlighting effect will work by creating a <code>linear-gradient</code> with two colors where the lighter color shows through as the text color for the lines to highlight. As a default, we’ll bookend the highlight with a darker color such that it appears that the first property is highlighted.</p>\n\n\n\n<p>Here’s a preview of the initial effect:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1222\" height=\"676\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040392095_highlight-preview.png?resize=1222%2C676&#038;ssl=1\" alt=\"An up-close screenshot of the live code panel of the slide, with the second line of code a lighter blue than the rest, indicating that it is emphasized.\" class=\"wp-image-362626\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040392095_highlight-preview.png?w=1222&amp;ssl=1 1222w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040392095_highlight-preview.png?resize=300%2C166&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040392095_highlight-preview.png?resize=1024%2C566&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040392095_highlight-preview.png?resize=768%2C425&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040392095_highlight-preview.png?resize=1000%2C553&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>To create this effect, we need to work out how to calculate the height of the highlight color. In our <code>&lt;style&gt;</code> element’s rules, we’ve already set the <code>line-height</code> to <code>1.65</code>, which corresponds to a total computed line height of <code>1.65em</code>. So, you may think that we multiply that by the number of lines and call it a day.</p>\n\n\n\n<p>However, due to the visible style block being rendered using <code>white-space: pre</code> to preserve line breaks, there’s technically a sneaky invisible line before the first line of text. This is created from formatting the <code>&lt;style&gt;</code> tag on an actual line prior to the first line of CSS code. This is also why I noted that preventing auto-formatting in CodePen is important — otherwise, you would also have extra left padding.</p>\n\n\n\n<p>With these caveats in mind, we’ll set up three custom properties to help compute the values we need and add them to the beginning of our <code>.style</code> ruleset. The final <code>--lines</code> height value first takes into account that invisible line and the selector.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">style {\n  --line-height: 1.65em;\n  --highlight-start: calc(2 * var(--line-height));\n  --lines: calc(var(--highlight-start) + var(--num-lines, 1) * var(--line-height));\n}</code></pre>\n\n\n\n<p>Now we can apply the values to create the <code>linear-gradient</code>. To create the sharp transitions we need for this effect, we ensure the gradient stops from one color to the next match.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">style {\n  background-image: linear-gradient(\n    hsl(var(--theme-hs), 75%) 0 var(--highlight-start),\n    hsl(var(--theme-hs), 90%) var(--highlight-start) var(--lines),\n    hsl(var(--theme-hs), 75%) var(--lines) 100%\n  );\n}</code></pre>\n\n\n\n<p>To help visualize what’s happening, I’ve commented out the <code>-webkit</code> lines to reveal the gradient being created.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1222\" height=\"676\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040416019_highlight-gradient.png?resize=1222%2C676&#038;ssl=1\" alt=\"A close-up screenshot of the live code example, but with a bright blue background to reveal the near-white gradient that highlights the second line of code.\" class=\"wp-image-362628\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040416019_highlight-gradient.png?w=1222&amp;ssl=1 1222w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040416019_highlight-gradient.png?resize=300%2C166&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040416019_highlight-gradient.png?resize=1024%2C566&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040416019_highlight-gradient.png?resize=768%2C425&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040416019_highlight-gradient.png?resize=1000%2C553&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Within our <code>--lines</code> calculation, we also included a <code>--num-lines</code> property. This will let you adjust the number of lines to highlight per demo via an inline style. This example adjusts the highlight to three lines:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style contenteditable=\"true\" style=\"--num-lines: 3\"></code></pre>\n\n\n\n<p>We can also pass a recalculated <code>--highlight-start</code> to change the initial line highlighted:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style contenteditable=\"true\" style=\"--num-lines: 3; --highlight-start: calc(4 * var(--line-height))\"></code></pre>\n\n\n\n<p>Let’s look at the outcome of the previous adjustment:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1222\" height=\"676\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040434622_highlight-adjustment.png?resize=1222%2C676&#038;ssl=1\" alt=\"Showing the live code example with lines 3 through 6 highlighted in a lighter blue than the rest of the code.\" class=\"wp-image-362631\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040434622_highlight-adjustment.png?w=1222&amp;ssl=1 1222w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040434622_highlight-adjustment.png?resize=300%2C166&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040434622_highlight-adjustment.png?resize=1024%2C566&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040434622_highlight-adjustment.png?resize=768%2C425&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040434622_highlight-adjustment.png?resize=1000%2C553&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now, if you add or remove lines during your presentation, the highlighting will not adjust. But it’s still nice as a tool to help direct your viewers’ attention.</p>\n\n\n\n<p>There are two utility classes we’ll add for highlighting the rule only or removing highlighting altogether. To use, apply directly to the <code>&lt;style&gt;</code> element for the demo.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.highlight--rule-only {\n  --highlight-start: calc(1 * var(--line-height))\n}\n\n.highlight--none {\n  background-image: none;\n  background-color: currentColor;\n}</code></pre>\n\n\n\n<h3 id=\"slide-motion-with-css-scroll-snap\">Slide motion with CSS scroll snap</h3>\n\n\n\n<p>Alright, we have some nice-looking initial slides. But it’s not quite feeling like a slide deck yet. We’ll resolve that in two parts:</p>\n\n\n\n<ol><li>Reflow the slides horizontally</li><li>Use <a href=\"https://css-tricks.com/practical-css-scroll-snapping/\">CSS scroll snap</a> to enforce scrolling one slide at a time</li></ol>\n\n\n\n<p>Our initial styles already defined the <code>#slides</code> ordered list as a grid container. To accomplish a horizontal layout, we need to add one extra property since the <code>.slides</code> have already included dimensions to fill the viewport.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#slides {\n  /* ...existing styles */\n  grid-auto-flow: column;\n}</code></pre>\n\n\n\n<p>For CSS scroll snap to work, we need to define which axis allows overflow, so for horizontal scrolling, that’s <code>x</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#slides {\n  overflow-x: auto;\n}</code></pre>\n\n\n\n<p>The final property we need for scroll snapping for the <code>#slides</code> container is to define <a href=\"https://css-tricks.com/almanac/properties/s/scroll-snap-type/\"><code>scroll-snap-type</code></a>. This is a shorthand where we select the <code>x</code> axis, and the <code>mandatory</code> behavior, which means initiating scrolling should always trigger snapping to the next element.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#slides {\n  scroll-snap-type: x mandatory;\n}</code></pre>\n\n\n\n<p>If you try it at this point, you won’t experience the scroll snapping behavior yet because we have two properties to add to the child <code>.slide</code> elements. Use of <a href=\"https://css-tricks.com/almanac/properties/s/scroll-snap-align/\"><code>scroll-snap-align</code></a> tells the browser where to “snap” to, and setting <a href=\"https://css-tricks.com/almanac/properties/s/scroll-snap-stop/\"><code>scroll-snap-stop</code></a>to <code>always</code> prevents scrolling past one of the child elements.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.slide {\n  /* ...existing styles */\n  scroll-snap-align: center;\n  scroll-snap-stop: always;\n}</code></pre>\n\n\n\n<p>The scroll snapping behavior should work either by scrolling across your slide or using left and right arrow keys.</p>\n\n\n\n<p>There are more properties that can be set for CSS scroll snap, you can <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap/Basic_concepts\" rel=\"noopener\">review the MDN docs</a> to learn what all is available. CSS scroll snap also has a bit different behavior cross-browser, and across input types, like touch versus mouse, or touchpad versus mouse wheel, or via scrollbar arrows. For our presentation, if you find that scrolling isn’t very smooth or “snapping” then try using arrow keys instead.</p>\n\n\n\n<p>Currently, there isn’t a way to customize the CSS scroll snap sliding animation easing or speed. Perhaps that is important to you for your presentation, and you don’t need the other features we’ve developed for modifying the code samples. In that case, you may want to choose a “real” presentation application.</p>\n\n\n\n<p class=\"is-style-explanation\">CSS scroll snap is very cool but also has some caveats to be aware of if you’re thinking of using it beyond our slide deck context. Check out <a href=\"https://smolcss.dev/#smol-scroll-snap\" rel=\"noopener\">another scroll snapping demo and more information on SmolCSS.dev</a>.</p>\n\n\n\n<h3 id=\"slide-numbers\">Slide numbers</h3>\n\n\n\n<p>An optional feature is adding visible slide numbers. Using a CSS counter, we can get the current slide number and display it however we’d like as the value of a pseudo-element. And using <a href=\"https://css-tricks.com/a-complete-guide-to-data-attributes/\">data attributes</a>, we can even append the current topic.</p>\n\n\n\n<p>The first step is giving our counter a name, which is done via the <a href=\"https://css-tricks.com/almanac/properties/c/counter-reset/\"><code>counter-reset</code></a> property. This is placed on the element that contains items to be counted, so we’ll add it to <code>#slides</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#slides {\n  counter-reset: slides;\n}</code></pre>\n\n\n\n<p>Then, on the elements to be counted (<code>.slide</code>), we add the <a href=\"https://css-tricks.com/almanac/properties/c/counter-increment/\"><code>counter-increment</code></a> property and callback to the name of the counter we defined.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.slide {\n  counter-increment: slides;\n}</code></pre>\n\n\n\n<p>To access the current count, we’ll set up a pseudo element. Within the <code>content</code> property, the <code>counter()</code> function is available. This function accepts the name of our counter and returns the current number.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.slide::before {\n  content: counter(slides);\n}</code></pre>\n\n\n\n<p>The number is now appearing but not where we want it. Because our slide content is variable, we’ll use classic absolute positioning to place the slide number in the bottom-left corner. And we’ll add some visual styles to make it enclosed in a nice little circle.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.slide::before {\n  content: counter(slides);\n  position: absolute;\n  left: 1rem;\n  bottom: 1rem;\n  width: 1.65em;\n  height: 1.65em;\n  display: grid;\n  place-content: center;\n  border-radius: 50%;\n  font-size: 1.25rem;\n  color: hsl(var(--theme-hs), 95%);\n  background-color: hsl(var(--theme-hs), 55%);\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2044\" height=\"1074\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?resize=2044%2C1074&#038;ssl=1\" alt=\"Screenshot of the text slide containing a heading, byline, and Twitter handle. The text is dark blue and the background has a light blue. There is the number one in white inside a bright blue circle located in the bottom-left corner of the slide indicating the page title.\" class=\"wp-image-362635\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?w=2044&amp;ssl=1 2044w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?resize=300%2C158&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?resize=1024%2C538&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?resize=768%2C404&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?resize=1536%2C807&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040682660_slide-number.png?resize=1000%2C525&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We can enhance our slide numbers by grabbing the value of a data attribute to also append a short topic title. This means first adding an attribute to each <code>&lt;li&gt;</code> element where we want this to happen. We’ll add <code>data-topic</code> to the <code>&lt;li&gt;</code> for the title and code demo slides. The value can be whatever you want, but shorter strings will display best.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;li class=\"slide slide--title\" data-topic=\"CSS\"></code></pre>\n\n\n\n<p>We’ll use the attribute as a selector to change the pseudo element. We can get the value by using the <code>attr()</code> function, which we’ll concatenate with the slide number and add a colon for a separator. Since the element was previously a circle, there are a few other properties to update.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[data-topic]::before {\n  content: counter(slides) \": \" attr(data-topic);\n  padding: 0.25em 0.4em;\n  width: auto;\n  border-radius: 0.5rem;\n}</code></pre>\n\n\n\n<p>With that added, here’s the code demo slide showing the added topic of “CSS”:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2044\" height=\"1074\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?resize=2044%2C1074&#038;ssl=1\" alt=\"Slide deck screenshot showing the split view with live code on the left and the output on the right. The page number of the slide is shown in the bottom-left corner and includes the word CSS after the page number.\" class=\"wp-image-362637\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?w=2044&amp;ssl=1 2044w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?resize=300%2C158&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?resize=1024%2C538&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?resize=768%2C404&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?resize=1536%2C807&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_7D85D8A43A72F77C800DD73331D3BC4CD2768EE61D1955657BAA888C80FC51B0_1642040704100_slide-topic.png?resize=1000%2C525&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 id=\"small-viewport-styles\">Small viewport styles</h3>\n\n\n\n<p>Our slides are already somewhat responsive, but eventually, there will be problems with horizontal scrolling on smaller viewports. My suggestion is to remove the CSS scroll snap and let the slides flow vertically.</p>\n\n\n\n<p>To accomplish this will just be a handful of updates, including adding a border to help separate slide content.</p>\n\n\n\n<p>First, we’ll move the CSS scroll snap related properties for <code>#slides</code> into a media query to only apply above <code>120ch</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media screen and (min-width: 120ch) {\n  #slides {\n    grid-auto-flow: column;\n    overflow-x: auto; \n    scroll-snap-type: x mandatory;\n  }\n}</code></pre>\n\n\n\n<p>Next, we’ll move the CSS scroll snap and dimension properties for <code>.slide</code> into this media query as well.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media screen and (min-width: 120ch) {\n  .slide {\n    width: 100vw;\n    height: 100vh;\n    scroll-snap-align: center;\n    scroll-snap-stop: always;\n  }\n}</code></pre>\n\n\n\n<p>To stack the demo content, we’ll move our entire rule for <code>.slide--demo</code> into this media query:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media screen and (min-width: 120ch) {\n  .slide--demo {\n    grid-template-columns: fit-content(85ch) 1fr;\n  }\n}</code></pre>\n\n\n\n<p>Now everything is stacked, but we want to bring back a minimum height for each slide and then add the border I mentioned earlier:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media (max-width: 120ch) {\n  .slide {\n    min-height: 80vh;\n  }\n\n  .slide + .slide {\n    border-top: 1px dashed;\n  }\n}</code></pre>\n\n\n\n<p>Your content also might be at risk of overflow on smaller viewports, so we’ll do a couple of adjustments for <code>.content</code> to try to prevent that We’ll add a default width that will be used on small viewports, and move our previous <code>max-width</code> constraint into the media query. Also shown is a quick method updating our <code>&lt;h1&gt;</code> to use fluid type.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\n  font-size: clamp(2rem, 8vw + 1rem, 3.25rem);\n}\n\n.content {\n  /* remove max-width rule from here */\n  width: calc(100vw - 2rem);\n}\n\n@media screen and (min-width: 120ch) {\n  .content {\n    width: unset;\n    max-width: 45ch;\n  }\n}</code></pre>\n\n\n\n<p>Additionally, I found it helps to reposition the slide counter. For that, we’ll adjust the initial styles to place it in the top-left, then move it back to the bottom in our media query.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.slide {\n  /* adjust default here, removing the old \"bottom\" value */\n  top: 0.25rem;\n  left: 0.25rem;\n}\n\n@media (min-width: 120ch) {\n  .slide::before {\n    top: auto;\n    bottom: 1rem;\n    left: 1rem;\n  }\n}</code></pre>\n\n\n\n<h3 id=\"final-slide-deck\">Final slide deck</h3>\n\n\n\n<p>The embed will likely be showing the stacked small viewport version, so be sure to open the full version in CodePen, or jump to the live view. As a reminder, the editing ability works best in Firefox.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_652097fa9ce1150aeb5400637ab91b63\" src=\"//codepen.io/anon/embed/652097fa9ce1150aeb5400637ab91b63?height=550&amp;theme-id=1&amp;slug-hash=652097fa9ce1150aeb5400637ab91b63&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 652097fa9ce1150aeb5400637ab91b63\" title=\"CodePen Embed 652097fa9ce1150aeb5400637ab91b63\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If you’re interested in seeing a fully finished deck in action, I used this technique to present <a href=\"https://codepen.io/5t3ph/pen/LYzvrGv?editors=0100\" rel=\"noopener\">my modern CSS toolkit</a>.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-scroll-snap-slide-deck/\">CSS Scroll Snap Slide Deck That Supports Live Coding</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "Virtual conferences have changed the game in terms of how a presenter is able to deliver content to an audience. At a live event it’s likely you just have your laptop, but at home, you may have multiple monitors so that you can move around windows and make off-screen changes when delivering live coding demos. However, as some events go back to in-person, you may be in a similar boat as me wondering how to bring an equivalent experience to a live venue.\n\n\n\nWith a bit of creativity using native web functionality and modern CSS, like CSS scroll snap, we’ll be building a no-JavaScript slide deck that allows live editing of CSS demos. The final deck will be responsive and shareable, thanks to living inside of a CodePen.\n\n\n\n\n\n\n\nTo make this slide deck, we’ll learn about:\n\n\n\nCSS scroll snap, counters, and grid layoutThe contenteditable attributeUsing custom properties and HSL for themingGradient textStyling the <style> element\n\n\n\nSlide templates\n\n\n\nWhen making a slide deck of a bunch of different slides, it’s likely that you’ll need different types of slides. So we’ll create these three essential templates:\n\n\n\nText: open for any text you need to includeTitle: emphasizing a headline to break up sections of contentDemo: split layout with a code block and the preview\n\n\n\n\n\nText presentation slide\n\n\n\n\n\nTitle presentation slide\n\n\n\n\n\n\n\n\n\nDemo presentation slide\n\n\n\n\n\nHTML templates\n\n\n\nLet’s start creating our HTML. We’ll use an ordered list with the ID of slides and go ahead and populate a text and title slide.\n\n\n\nEach slide is one of the list elements with the class of slide, as well as a modifier class to indicate the template type. For these text-based slides, we’ve nested a <div> with the class of content and then added a bit of boilerplate text.\n\n\n\n<ol id=\"slides\">\n  <li class=\"slide slide--text\">\n    <div class=\"content\">\n      <h1>Presentation Title</h1>\n      <p>Presented by Your Name</p>\n      <p><a target=\"_blank\" href=\"<https://twitter.com/5t3ph>\">@5t3ph</a></p>\n    </div>\n  </li>\n  <li class=\"slide slide--title\">\n    <div class=\"content\">\n      <h2>Topic 1</h2>\n    </div>\n  </li>\n</ol>\n\n\n\nWe’re using target=\"_blank\" on the link due to CodePen using iframes for the preview, so it’s necessary to “escape” the iframe and load the link.\n\n\n\nBase styles\n\n\n\nNext, we’ll begin to add some styles. If you are using CodePen, these styles assume you’re not loading one of the resets. Our reset wipes out margin and ensures the <body> element takes up the total available height, which is all we really need here. And, we’ll make a basic font stack update.\n\n\n\n* {\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  min-height: 100vh;\n  font-family: system-ui, sans-serif;\n  font-size: 1.5rem;\n}\n\n\n\nNext, we’ll define that all our major layout elements will use a CSS grid, remove list styling from #slides, and make each slide take up the size of the viewport. Finally, we’ll use the place-content shorthand to center the slide--text and slide--title slide content.\n\n\n\nbody,\n#slides,\n.slide {\n  display: grid;\n}\n\n#slides {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.slide {\n  width: 100vw;\n  height: 100vh;\n}\n\n.slide--text,\n.slide--title {\n  place-content: center;\n}\n\n\n\nThen, we’ll add some lightweight text styles. Since this is intended to be a presentation with one big point being made at a time, as opposed to an article-like format, we’ll bump the base font-size to 2rem. Be sure to adjust this value as you test out your final slides in full screen. You may decide it feels too small for your content versus your presentation viewport size.\n\n\n\nh1, h2 {\n  line-height: 1.1;\n}\n\na {\n  color: inherit;\n}\n\n.content {\n  padding: 2rem;\n  font-size: 2rem;\n  line-height: 1.5;\n}\n\n.content * + * {\n  margin-top: 0.5em;\n}\n\n.slide--text .content {\n  max-width: 40ch;\n}\n\n\n\nAt this point, we have some large text centered within a container the size of the viewport. Let’s add a touch of color by creating a simple theme system.\n\n\n\nWe’ll be using the hsl color space for the theme while setting a custom property of --theme-hue and --theme-saturation. The hue value of 230 corresponds to a blue. For ease of use, we’ll then combine those into the --theme-hs value to drop into instances of hsl.\n\n\n\n:root {\n  --theme-hue: 230;\n  --theme-saturation: 85%;\n  --theme-hs: var(--theme-hue), var(--theme-saturation);\n}\n\n\n\nWe can adjust the lightness values for backgrounds and text. The slides will feel cohesive since they will be tints of that base hue.\n\n\n\nBack in our main <body> style, we can apply this idea to create a very light version of the color for a background, and a dark version for the text.\n\n\n\nbody {\n  /* ... existing styles */\n  background-color: hsl(var(--theme-hs), 95%);\n  color: hsl(var(--theme-hs), 25%);\n}\n\n\n\n\n\n\n\nLet’s also give .slide--title a little bit of extra pizazz by adding a subtle gradient background.\n\n\n\n.slide--title {\n  background-image: \n    linear-gradient(125deg, \n      hsl(var(--theme-hs), 95%), \n      hsl(var(--theme-hs), 75%)\n    );\n}\n\n\n\n\n\n\n\nDemo slide template\n\n\n\nOur demo slide breaks the mold so far and requires two main elements:\n\n\n\na .style container around an inline <style> element with actual written styles that you intend to both be visible on screen and apply to the demoa .demo container to hold the demo preview with whatever markup is appropriate for that\n\n\n\nIf you’re using CodePen to create this deck, you’ll want to update the “Behavior” setting to turn off “Format on Save.” This is because we don’t want extra tabs/spaces prior to the styles block. Exactly why will become clear in a moment.\n\n\n\n\n\n\n\nHere’s our demo slide content:\n\n\n\n<li class=\"slide slide--demo\">\n  <div class=\"style\">\n  <style contenteditable=\"true\"> \n.modern-container {\n  --container-width: 40ch;\n\n  width: min(\n    var(--container-width), 100% - 3rem\n  );\n  margin-inline: auto;\n}\n  </style>\n  </div>\n  <div class=\"demo\">\n    <div class=\"modern-container\">\n      <div class=\"box\">container</div>\n    </div>\n  </div>\n</li>\n\n\n\nNote that extra contenteditable=\"true\" attribute on the <style> block . This is a native HTML feature that allows you to mark any element as editable. It is not a replacement for form inputs and textareas and typically requires JavaScript for more full-featured functionality. But for our purposes, it’s the magic that enables “live” coding. Ultimately, we’ll be able to make changes to the content in here and the style changes will apply immediately. Pretty fancy, hold tight.\n\n\n\nHowever, if you view this so far, you won’t see the style block displayed. You will see the outcome of the .modern-container demo styles are being applied, though.\n\n\n\nAnother relevant note here is that HTML5 included validating a <style> block anywhere; not just in the <head>.\n\n\n\nWhat we’re going to do next will feel strange, but we can actually use display properties on <style> to make it visible. We’ve placed it within another container to use a little extra positioning for it and make it a resizable area. Then, we’ve set the <style> element itself to display: block and applied properties to give it a code editor look and feel.\n\n\n\n.style {\n  display: grid;\n  align-items: center;\n  background-color: hsl(var(--theme-hs), 5%);\n  padding-inline: max(5vw, 2rem) 3rem;\n  font-size: 1.35rem;\n  overflow-y: hidden;\n  resize: horizontal;\n}\n\nstyle {\n  display: block;\n  outline: none;\n  font-family: Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace;\n  color: hsl(var(--theme-hs), 85%);\n  background: none;\n  white-space: pre;\n  line-height: 1.65;\n  tab-size: 2;\n  hyphens: none;\n}\n\n\n\nThen, we need to create the .slide--demo rule and use CSS grid to display the styles and demo, side-by-side. As a reminder, we’ve already set up the base .slide class to use grid, so now we’ll create a rule for grid-template-columns just for this template.\n\n\n\n.slide--demo {\n  grid-template-columns: fit-content(85ch) 1fr;\n}\n\n\n\nIf you’re unfamiliar with the grid function fit-content(), it allows an element to use its intrinsic width up until the maximum value defined in the function. So, this rule says the style block can grow to a maximum of 85ch wide. When your <style> content is narrow, the column will only be as wide as it needs to be. This is really nice visually as it won’t create extra horizontal space while still ultimately capping the allowed width.\n\n\n\nTo round out this template, we’ll add some padding for the .demo. You may have also noticed that extra class within the demo of .box. This is a convention I like to use for demos to provide a visual of element boundaries when the size and position of something are important.\n\n\n\n.demo {\n  padding: 2rem;\n}\n\n.box {\n  background-color: hsl(var(--theme-hs), 85%);\n  border: 2px dashed;\n  border-radius: .5em;\n  padding: 1rem;\n  font-size: 1.35rem;\n  text-align: center;\n}\n\n\n\nHere’s the result of our code template:\n\n\n\n\n\n\n\nLive-editing functionality\n\n\n\nInteracting with the displayed styles will actually update the preview! Additionally, since we created the .style container as a resizable area, you can grab the resize handle in the lower right to grow and shrink the preview area as needed.\n\n\n\nThe one caveat for our live-editing ability is that browsers treat it differently.\n\n\n\nFirefox: This provides the best result as it allows both changing the loaded styles and full functionality of adding new properties and even new rules.Chromium and Safari: These allow changing values in loaded styles, but not adding new properties or new rules.\n\n\n\nAs a presenter, you’ll likely want to use Firefox. As for viewers utilizing the presentation link, they’ll still be able to get the intention of your slides and shouldn’t have issues with the display (unless their browser doesn’t support your demoed code). But outside of Firefox, they may be unable to manipulate the demos as fully as you may show in your presentation.\n\n\n\nYou may want to “Fork” your finished presentation pen and actually remove the editable behavior on <style> blocks and instead display final versions of your demos styles, as applicable.\n\n\n\nReminder: styles you include in demos can potentially affect slide layout and other demos! You may want to scope demo styles under a slide-specific class to prevent unintended style changes across your deck.\n\n\n\nCode highlighting\n\n\n\nWhile we won’t be able to achieve full syntax highlighting without JavaScript, we can create a method to highlight certain parts of the code block for emphasis.\n\n\n\nTo do this, we’ll pair up linear-gradient with the -webkit properties that enable using an element’s background as the text effect. Then, using custom properties, we can define how many “lines” of the style block to highlight.\n\n\n\nFirst, we’ll place the required -webkit properties directly on the <style> element. This will cause the visible text to disappear, but we’ll make it visible in a moment by adding a background. Although these are -webkit prefixed, they are supported cross-browser.\n\n\n\nstyle {\n  /* ...existing styles */\n  -webkit-text-fill-color: transparent;\n  -webkit-background-clip: text;\n}\n\n\n\nThe highlighting effect will work by creating a linear-gradient with two colors where the lighter color shows through as the text color for the lines to highlight. As a default, we’ll bookend the highlight with a darker color such that it appears that the first property is highlighted.\n\n\n\nHere’s a preview of the initial effect:\n\n\n\n\n\n\n\nTo create this effect, we need to work out how to calculate the height of the highlight color. In our <style> element’s rules, we’ve already set the line-height to 1.65, which corresponds to a total computed line height of 1.65em. So, you may think that we multiply that by the number of lines and call it a day.\n\n\n\nHowever, due to the visible style block being rendered using white-space: pre to preserve line breaks, there’s technically a sneaky invisible line before the first line of text. This is created from formatting the <style> tag on an actual line prior to the first line of CSS code. This is also why I noted that preventing auto-formatting in CodePen is important — otherwise, you would also have extra left padding.\n\n\n\nWith these caveats in mind, we’ll set up three custom properties to help compute the values we need and add them to the beginning of our .style ruleset. The final --lines height value first takes into account that invisible line and the selector.\n\n\n\nstyle {\n  --line-height: 1.65em;\n  --highlight-start: calc(2 * var(--line-height));\n  --lines: calc(var(--highlight-start) + var(--num-lines, 1) * var(--line-height));\n}\n\n\n\nNow we can apply the values to create the linear-gradient. To create the sharp transitions we need for this effect, we ensure the gradient stops from one color to the next match.\n\n\n\nstyle {\n  background-image: linear-gradient(\n    hsl(var(--theme-hs), 75%) 0 var(--highlight-start),\n    hsl(var(--theme-hs), 90%) var(--highlight-start) var(--lines),\n    hsl(var(--theme-hs), 75%) var(--lines) 100%\n  );\n}\n\n\n\nTo help visualize what’s happening, I’ve commented out the -webkit lines to reveal the gradient being created.\n\n\n\n\n\n\n\nWithin our --lines calculation, we also included a --num-lines property. This will let you adjust the number of lines to highlight per demo via an inline style. This example adjusts the highlight to three lines:\n\n\n\n<style contenteditable=\"true\" style=\"--num-lines: 3\">\n\n\n\nWe can also pass a recalculated --highlight-start to change the initial line highlighted:\n\n\n\n<style contenteditable=\"true\" style=\"--num-lines: 3; --highlight-start: calc(4 * var(--line-height))\">\n\n\n\nLet’s look at the outcome of the previous adjustment:\n\n\n\n\n\n\n\nNow, if you add or remove lines during your presentation, the highlighting will not adjust. But it’s still nice as a tool to help direct your viewers’ attention.\n\n\n\nThere are two utility classes we’ll add for highlighting the rule only or removing highlighting altogether. To use, apply directly to the <style> element for the demo.\n\n\n\n.highlight--rule-only {\n  --highlight-start: calc(1 * var(--line-height))\n}\n\n.highlight--none {\n  background-image: none;\n  background-color: currentColor;\n}\n\n\n\nSlide motion with CSS scroll snap\n\n\n\nAlright, we have some nice-looking initial slides. But it’s not quite feeling like a slide deck yet. We’ll resolve that in two parts:\n\n\n\nReflow the slides horizontallyUse CSS scroll snap to enforce scrolling one slide at a time\n\n\n\nOur initial styles already defined the #slides ordered list as a grid container. To accomplish a horizontal layout, we need to add one extra property since the .slides have already included dimensions to fill the viewport.\n\n\n\n#slides {\n  /* ...existing styles */\n  grid-auto-flow: column;\n}\n\n\n\nFor CSS scroll snap to work, we need to define which axis allows overflow, so for horizontal scrolling, that’s x:\n\n\n\n#slides {\n  overflow-x: auto;\n}\n\n\n\nThe final property we need for scroll snapping for the #slides container is to define scroll-snap-type. This is a shorthand where we select the x axis, and the mandatory behavior, which means initiating scrolling should always trigger snapping to the next element.\n\n\n\n#slides {\n  scroll-snap-type: x mandatory;\n}\n\n\n\nIf you try it at this point, you won’t experience the scroll snapping behavior yet because we have two properties to add to the child .slide elements. Use of scroll-snap-align tells the browser where to “snap” to, and setting scroll-snap-stopto always prevents scrolling past one of the child elements.\n\n\n\n.slide {\n  /* ...existing styles */\n  scroll-snap-align: center;\n  scroll-snap-stop: always;\n}\n\n\n\nThe scroll snapping behavior should work either by scrolling across your slide or using left and right arrow keys.\n\n\n\nThere are more properties that can be set for CSS scroll snap, you can review the MDN docs to learn what all is available. CSS scroll snap also has a bit different behavior cross-browser, and across input types, like touch versus mouse, or touchpad versus mouse wheel, or via scrollbar arrows. For our presentation, if you find that scrolling isn’t very smooth or “snapping” then try using arrow keys instead.\n\n\n\nCurrently, there isn’t a way to customize the CSS scroll snap sliding animation easing or speed. Perhaps that is important to you for your presentation, and you don’t need the other features we’ve developed for modifying the code samples. In that case, you may want to choose a “real” presentation application.\n\n\n\nCSS scroll snap is very cool but also has some caveats to be aware of if you’re thinking of using it beyond our slide deck context. Check out another scroll snapping demo and more information on SmolCSS.dev.\n\n\n\nSlide numbers\n\n\n\nAn optional feature is adding visible slide numbers. Using a CSS counter, we can get the current slide number and display it however we’d like as the value of a pseudo-element. And using data attributes, we can even append the current topic.\n\n\n\nThe first step is giving our counter a name, which is done via the counter-reset property. This is placed on the element that contains items to be counted, so we’ll add it to #slides.\n\n\n\n#slides {\n  counter-reset: slides;\n}\n\n\n\nThen, on the elements to be counted (.slide), we add the counter-increment property and callback to the name of the counter we defined.\n\n\n\n.slide {\n  counter-increment: slides;\n}\n\n\n\nTo access the current count, we’ll set up a pseudo element. Within the content property, the counter() function is available. This function accepts the name of our counter and returns the current number.\n\n\n\n.slide::before {\n  content: counter(slides);\n}\n\n\n\nThe number is now appearing but not where we want it. Because our slide content is variable, we’ll use classic absolute positioning to place the slide number in the bottom-left corner. And we’ll add some visual styles to make it enclosed in a nice little circle.\n\n\n\n.slide::before {\n  content: counter(slides);\n  position: absolute;\n  left: 1rem;\n  bottom: 1rem;\n  width: 1.65em;\n  height: 1.65em;\n  display: grid;\n  place-content: center;\n  border-radius: 50%;\n  font-size: 1.25rem;\n  color: hsl(var(--theme-hs), 95%);\n  background-color: hsl(var(--theme-hs), 55%);\n}\n\n\n\n\n\n\n\nWe can enhance our slide numbers by grabbing the value of a data attribute to also append a short topic title. This means first adding an attribute to each <li> element where we want this to happen. We’ll add data-topic to the <li> for the title and code demo slides. The value can be whatever you want, but shorter strings will display best.\n\n\n\n<li class=\"slide slide--title\" data-topic=\"CSS\">\n\n\n\nWe’ll use the attribute as a selector to change the pseudo element. We can get the value by using the attr() function, which we’ll concatenate with the slide number and add a colon for a separator. Since the element was previously a circle, there are a few other properties to update.\n\n\n\n[data-topic]::before {\n  content: counter(slides) \": \" attr(data-topic);\n  padding: 0.25em 0.4em;\n  width: auto;\n  border-radius: 0.5rem;\n}\n\n\n\nWith that added, here’s the code demo slide showing the added topic of “CSS”:\n\n\n\n\n\n\n\nSmall viewport styles\n\n\n\nOur slides are already somewhat responsive, but eventually, there will be problems with horizontal scrolling on smaller viewports. My suggestion is to remove the CSS scroll snap and let the slides flow vertically.\n\n\n\nTo accomplish this will just be a handful of updates, including adding a border to help separate slide content.\n\n\n\nFirst, we’ll move the CSS scroll snap related properties for #slides into a media query to only apply above 120ch.\n\n\n\n@media screen and (min-width: 120ch) {\n  #slides {\n    grid-auto-flow: column;\n    overflow-x: auto; \n    scroll-snap-type: x mandatory;\n  }\n}\n\n\n\nNext, we’ll move the CSS scroll snap and dimension properties for .slide into this media query as well.\n\n\n\n@media screen and (min-width: 120ch) {\n  .slide {\n    width: 100vw;\n    height: 100vh;\n    scroll-snap-align: center;\n    scroll-snap-stop: always;\n  }\n}\n\n\n\nTo stack the demo content, we’ll move our entire rule for .slide--demo into this media query:\n\n\n\n@media screen and (min-width: 120ch) {\n  .slide--demo {\n    grid-template-columns: fit-content(85ch) 1fr;\n  }\n}\n\n\n\nNow everything is stacked, but we want to bring back a minimum height for each slide and then add the border I mentioned earlier:\n\n\n\n@media (max-width: 120ch) {\n  .slide {\n    min-height: 80vh;\n  }\n\n  .slide + .slide {\n    border-top: 1px dashed;\n  }\n}\n\n\n\nYour content also might be at risk of overflow on smaller viewports, so we’ll do a couple of adjustments for .content to try to prevent that We’ll add a default width that will be used on small viewports, and move our previous max-width constraint into the media query. Also shown is a quick method updating our <h1> to use fluid type.\n\n\n\nh1 {\n  font-size: clamp(2rem, 8vw + 1rem, 3.25rem);\n}\n\n.content {\n  /* remove max-width rule from here */\n  width: calc(100vw - 2rem);\n}\n\n@media screen and (min-width: 120ch) {\n  .content {\n    width: unset;\n    max-width: 45ch;\n  }\n}\n\n\n\nAdditionally, I found it helps to reposition the slide counter. For that, we’ll adjust the initial styles to place it in the top-left, then move it back to the bottom in our media query.\n\n\n\n.slide {\n  /* adjust default here, removing the old \"bottom\" value */\n  top: 0.25rem;\n  left: 0.25rem;\n}\n\n@media (min-width: 120ch) {\n  .slide::before {\n    top: auto;\n    bottom: 1rem;\n    left: 1rem;\n  }\n}\n\n\n\nFinal slide deck\n\n\n\nThe embed will likely be showing the stacked small viewport version, so be sure to open the full version in CodePen, or jump to the live view. As a reminder, the editing ability works best in Firefox.\n\n\n\nCodePen Embed Fallback\n\n\n\nIf you’re interested in seeing a fully finished deck in action, I used this technique to present my modern CSS toolkit.\n\nCSS Scroll Snap Slide Deck That Supports Live Coding originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-07T15:24:44.000Z",
      "date_modified": "2022-02-07T15:24:44.000Z",
      "_plugin": {
        "pageFilename": "f24f74bc6de6ff53bd10104fbb048552c6c683d8f5ab9ed65e64167acb32d578.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362799",
      "url": "https://css-tricks.com/a-deep-introduction-to-wordpress-block-themes/",
      "title": "A Deep Introduction to WordPress Block Themes",
      "summary": "The relatively new WordPress editor, also known as the WordPress Block Editor, always under development via the Gutenberg plugin, has been with us since 2018. You can use the block editor on any WordPress theme, provided the theme …\n\nA Deep Introduction to WordPress Block Themes originally published on CSS-Tricks. You should get the newsletter.",
      "content_html": "<p>The relatively new <a href=\"https://wordpress.org/support/article/wordpress-editor/\" rel=\"noopener\">WordPress editor</a>, also known as the <a href=\"https://developer.wordpress.org/block-editor/\" rel=\"noopener\">WordPress Block Editor</a>, always under development via the <a href=\"https://wordpress.org/plugins/gutenberg/\" rel=\"noopener\">Gutenberg</a> plugin, has been with us since 2018. You can use the block editor on <em>any</em> WordPress theme, provided the theme loads CSS that the blocks use. But there are new themes that lean into the Block Editor much more deeply.</p>\n\n\n\n<p>WordPress Block Themes allow you to build out the entire site using blocks, meaning the theme’s responsibility is mostly design guidelines, and less about controlling the pages and the content on them. This is referred to as <strong>Full-Site Editing</strong> in WordPress and the themes that are built for this are called <strong>Block Themes</strong>, because you build out everything with blocks.</p>\n\n\n\n<p>Let’s dig into all this.</p>\n\n\n\n<span id=\"more-362799\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1264\" height=\"857\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/5-9-inline-v2.png.webp?resize=1264%2C857&#038;ssl=1\" alt=\"Illustration of a black vinyl record coming out of a record sleep sleeve from the left that contains a blue tinted image of jazz singer Joséphine Baker's profile looking right with a soft smile and parted lips. The image includes white text that says WordPress 5.9 and code is poetry.\" class=\"wp-image-362847\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/5-9-inline-v2.png.webp?w=1264&amp;ssl=1 1264w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/5-9-inline-v2.png.webp?resize=300%2C203&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/5-9-inline-v2.png.webp?resize=1024%2C694&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/5-9-inline-v2.png.webp?resize=768%2C521&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/5-9-inline-v2.png.webp?resize=1000%2C678&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Credit: <a href=\"https://wordpress.org/news/2022/01/josephine/\" rel=\"noopener\">WordPress.org</a></figcaption></figure>\n\n\n<div class=\"simpletoc  \"><h2 class=\"simpletoc-title\">Table of Contents</h2><ul class=\"simpletoc-list\" >\n<li>\n<a  href=\"#introduction\">Introduction</a></li><li>\n<a  href=\"#related-terminology\">Related terminology</a></li><li>\n<a  href=\"#using-the-block-editor-with-classic-themes\">Using the block editor with classic themes</a></li><li>\n<a  href=\"#the-anatomy-of-blockbased-themes\">The anatomy of block-based themes</a></li><li>\n<a  href=\"#creating-wordpress-block-themes\">Creating WordPress Block Themes</a></li><li>\n<a  href=\"#global-settings-and-styles-themejson\">Global settings and styles (theme.json)</a></li><li>\n<a  href=\"#wordpress-block-theme-approaches\">WordPress Block Theme approaches</a></li><li>\n<a  href=\"#block-themes-that-are-currently-in-use\">Block themes that are currently in use</a></li><li>\n<a  href=\"#building-block-child-themes\">Building Block Child Themes</a></li><li>\n<a  href=\"#some-personal-thoughts\">Some personal thoughts</a></li><li>\n<a  href=\"#resources\">Resources</a></li></ul>\n</li></ul></div>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n\n<p>Except for those who follow its day-to-day development iterations at <a href=\"https://github.com/WordPress/gutenberg\" rel=\"noopener\">GitHub,</a> most development surrounding the block editor is largely visible to users — and that’s not necessarily a bad thing. I have been personally trying to keep myself updated with the block editor through <a href=\"https://wptavern.com/tag/gutenberg\" rel=\"noopener\">WP Tavern</a> and <a href=\"https://make.wordpress.org/core/tag/gutenberg-new/\" rel=\"noopener\">Gutenberg</a> posts, and have been using both the legacy — or “<a href=\"https://wordpress.org/plugins/classic-editor/\" rel=\"noopener\">Classic</a>” editor — as well as the block editor in my personal learning project sites.</p>\n\n\n\n<p>After taking a detour to <a href=\"https://css-tricks.com/my-long-journey-to-a-decoupled-wordpress-gatsby-site/\">learn and experience headless WordPress sites</a> with <a href=\"https://www.gatsbyjs.com/\" rel=\"noopener\">Gatsby</a> and <a href=\"https://frontity.org/\" rel=\"noopener\">Frontity</a> frameworks, I am now back to my native WordPress home.</p>\n\n\n\n<p>Though I have been aware of the <a href=\"https://github.com/WordPress/theme-experiments\" rel=\"noopener\">WordPress theme-experiment</a> GitHub repository for a while — themes made completely out of blocks! — I have only started digging into block themes recently. In fact, I have been using an experimental block-based theme <a href=\"https://justwrite.atsixtyseven.com/this-site-is-powered-by-labre-blocks/\" target=\"_blank\" rel=\"noreferrer noopener\">here in this project site</a>.</p>\n\n\n\n<p>WordPress 5.9 is now out in the wild and with it comes block-based theming for the masses. This release, dubbed <a href=\"https://wordpress.org/news/2022/01/josephine/\" rel=\"noopener\">Joséphine</a>, is the formal introduction to WordPress full site editing and Block Themes.</p>\n\n\n\n<p>Even though the block-based theming functionality has been available in various iterative forms in previous releases, this is a <strong>big deal</strong> for the WordPress platform and the ecosystem that relies on it. I’ve had my hands on it and thought I’d share what I’ve learned about block themes in my hands-on experience, as well as some personal thoughts on how it works.</p>\n\n\n\n<p><strong>Disclaimer:</strong> I am <em>not</em> a block themes expert by any stretch. I am well-versed in WordPress and a major fan of the content management system. My goal here is not to critique WordPress 5.9 or steer you in the direction of whether or not you should like it or want to use it. I’m merely coming from the perspective of an open-minded learner who is building personal sites with fairly deep understanding and familiarity with the WordPress Block Editor.</p>\n\n\n<h3 id=\"related-terminology\">Related terminology</h3>\n\n\n<p>Before we dive straight into block themes, I think it’s a good idea to form a baseline understanding of just what we’re talking about when we’re tossing around terms, like <em>blocks</em> and <em>site editing</em>, as they’re so incredibly new and game-changing relative to what we’ve known and loved about WordPress for decades.</p>\n\n\n<h4 id=\"block-editor\">Block Editor</h4>\n\n\n<p>This is really what we mean any time we refer to the “WordPress Editor.” We call the WordPress Editor the Block Editor because it allows us to create pages and posts where each element— including text, images, videos, headers, footers, etc. — is inserted into the post using <a href=\"https://wordpress.org/support/article/wordpress-editor/#blocks\" rel=\"noopener\">blocks</a> that can be arranged modularly to complete page layouts. It evolved from what’s now called the “classic” editor, which was more squarely based on entering content to be published on a page or post in a predefined layout.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"677\" height=\"380\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/block-editor.png?resize=677%2C380&#038;ssl=1\" alt=\"A full screenshot of the WordPress Block editor split into three numbers parts that are highlighted in red.\" class=\"wp-image-362862\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/block-editor.png?w=677&amp;ssl=1 677w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/block-editor.png?resize=300%2C168&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>WordPress Block Editor including the block inserter (1), block editor content area (2), and  the document and block settings (3)<br>Credit: <a href=\"https://developer.wordpress.org/block-editor/\" target=\"_blank\" rel=\"noreferrer noopener\">WordPress Block Editor Handbook</a>.</figcaption></figure>\n\n\n\n<p>It’s sort of like content and layout coming together, where both are managed in the WordPress Editor. So, where we used to rely on the editor for content and (more or less) theme templates to define layout, both are directly editable in the WordPress Editor interface.</p>\n\n\n\n<p>You can find more detail <a href=\"https://wordpress.org/support/article/wordpress-editor/\" rel=\"noopener\">here on using the Block Editor</a>.</p>\n\n\n<h4 id=\"block-theme\">Block Theme</h4>\n\n\n<p>As explained in the <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/\" rel=\"noopener\">WordPress doc</a><a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/\" rel=\"noopener\">s</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>A block theme is a WordPress theme with templates entirely composed of blocks so that in addition to the post content of the different post types (pages, posts, …), the block editor can also be used to edit all areas of the site: headers, footers, sidebars, etc.</p></blockquote>\n\n\n\n<p>This WordPress documentation provides an <a href=\"https://wordpress.org/support/article/block-themes/\" rel=\"noopener\">overview of block themes</a> in its knowledgebase, including <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/\" rel=\"noopener\">how to create block themes and styling</a> <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/\" rel=\"noopener\">in this primer</a>.</p>\n\n\n\n<p>The bottom line: Block themes are <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/#what-is-the-structure-of-a-block-theme\" rel=\"noopener\">different than “classic” WordPress themes</a>. Rather than relying strictly on PHP files that conform to the <a href=\"https://developer.wordpress.org/themes/basics/template-hierarchy/\" rel=\"noopener\">WordPress Template Hierarchy</a>, a WordPress Block Theme consists of block-based HTML templates — assembled groups of blocks that can be styled and arranged in the WordPress Site Editor (that’s coming up next) as well as using a <code>theme.json</code> file for global styling tokens.</p>\n\n\n<h4 id=\"site-editor\">Site Editor</h4>\n\n\n<p>This is the crown jewel of WordPress 5.9. While it is officially called the WordPress Site Editor, it’s largely been referred to as <a href=\"https://developer.wordpress.org/block-editor/getting-started/full-site-editing/\" rel=\"noopener\">Full-Site Editing</a>** (FSE) during development and is described as “the cohesive experience that allows you to directly edit and navigate between various templates, template parts, styling options, and more.” Phew, that’s a lot!</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='277' src='https://videopress.com/embed/qXxhSEIq?cover=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\"></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div><figcaption>Credit: <a href=\"https://wordpress.org/support/article/site-editor/\" target=\"_blank\" rel=\"noreferrer noopener\">WordPress Support</a></figcaption></figure>\n\n\n\n<p>The WordPress Site Editor allows us to create and editing templates that are made of blocks. So the idea is that we can assemble a group of blocks that can be applied globally to a site. Like a header component, for example. That might consist of blocks for a site logo, a primary menu, and a tagline. The site editor allows us to create a new block theme or modify an existing theme to give the site’s global appearance a completely new look without writing a line of code.</p>\n\n\n\n<p>So, you know how you’ve had to build a theme in the past with a bunch of PHP templates? That’s no longer the case. Theme “development” now has a UI that’s available directly in WordPress.</p>\n\n\n\n<p>More detail on using site editor is in the <a href=\"https://wordpress.org/support/article/site-editor/\" rel=\"noopener\">WordPress documentation</a>.</p>\n\n\n\n<p class=\"is-style-explanation\">The official <a href=\"https://developer.wordpress.org/block-editor/explanations/glossary/\" rel=\"noopener\">WordPress Glossary</a> has additional terms and definitions you may want to explore as we dig deeper into WordPress Block Themes and FSE.</p>\n\n\n<h3 id=\"using-the-block-editor-with-classic-themes\">Using the block editor with classic themes</h3>\n\n\n<p>The WordPress Block Editor can be used in both the classic and block themes. When the Gutenberg editor project began, the classic TinyMCE-based editor was detached from WordPress Core into the <a href=\"https://wordpress.org/plugins/classic-editor/\" rel=\"noopener\">Classic Editor plugin</a>. As long as the Classic Editor plugin is installed and active, content writing is pretty normal as it was before blocks were introduced.</p>\n\n\n\n<p>Prior to the formal introduction of block editor features, we had to install the experimental <a href=\"https://wordpress.org/plugins/gutenberg/\" rel=\"noopener\">Gutenberg plugin</a>. By simply switching plugins, individual page or post contents could be created with either editor. The <a href=\"https://wordpress.org/news/2018/12/bebo/\" rel=\"noopener\">WordPress 5.0 release</a> introduced the block editor alongside the default <a href=\"https://github.com/WordPress/twentynineteen/\" rel=\"noopener\">Twenty Nineteen</a> theme, demonstrating how to <a href=\"https://github.com/WordPress/twentynineteen/blob/master/functions.php#L98-L102\" rel=\"noopener\">add block editor features</a> and <a href=\"https://youtu.be/72xdCU__XCk\" rel=\"noopener\">explore its power</a>.</p>\n\n\n\n<p>In other words, <a href=\"https://css-tricks.com/the-wordpress-evolution-toward-full-site-editing/\">the evolution toward FSE</a> has been building for a while. And because of that, we get to enjoy a high level of backwards compatibility that allows us all to adopt block-based features when we’re good and ready.</p>\n\n\n<h3 id=\"the-anatomy-of-blockbased-themes\">The anatomy of block-based themes</h3>\n\n\n<p><a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/\" rel=\"noopener\">Experimental block-based themes</a> have been in development <a href=\"https://make.wordpress.org/themes/2020/03/01/call-for-experimental-themes/\" rel=\"noopener\">since early 2020</a>. At the time I’m writing this, the <a href=\"https://github.com/WordPress/theme-experiments\" rel=\"noopener\">GitHub theme experiment repository</a> lists 12 block themes that explore some aspect of creating themes using blocks or block templates.</p>\n\n\n\n<p>But it was probably the <a href=\"https://github.com/WordPress/twentytwentyone\" rel=\"noopener\">Twenty Twenty-One theme</a> that was the first “default” theme to make blocks a first-class citizen, introducing <a href=\"https://github.com/WordPress/twentytwentyone/tree/trunk/inc\" rel=\"noopener\">block styles and block patterns</a>, though the recently updated versions of Twenty Nineteen, and Twenty Twenty also include bundled block styling and block patterns. Currently, there are more than <a href=\"https://wordpress.org/themes/tags/block-patterns+block-styles/\" rel=\"noopener\">130 themes</a> from the community with bundled block editor patterns, block styles feature, including my favorite, Anders Noren’s <a href=\"https://wordpress.org/themes/eksell/\" rel=\"noopener\">Eksell theme</a>.</p>\n\n\n\n<p>With the ongoing development of the WordPress Block Editor’s FSE features, even more <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/\" rel=\"noopener\">block-based themes</a> are also being introduced.</p>\n\n\n\n<p>So, what does the development of block-based themes mean for those of us who are deeply entrenched in the “classic” way of building WordPress themes? That’s what I want to look at in this section.</p>\n\n\n<h4 id=\"the-file-structure-of-block-themes\">The file structure of block themes</h4>\n\n\n<p>In classic PHP-powered theming, markup elements are generated with PHP and JavaScript, while in block themes those templates are entirely composed of HTML blocks and structural CSS provided by the block editor. This might sound scary for lots of folks, but it’s easy to imagine just how liberating it is for others as it lowers the bar when it comes to developing a WordPress theme.</p>\n\n\n\n<p>The structure of a block theme is drastically different from the classic <a href=\"https://developer.wordpress.org/themes/basics/template-hierarchy/\" rel=\"noopener\">WordPress Template Hierarchy</a> that we all are used to. In classic PHP-based themes, page element markup has to be generated with PHP and JavaScript, whereas in block themes, the <a href=\"https://make.wordpress.org/core/\" rel=\"noopener\">WordPress Core</a> provides both the markup and basic styling. For example, the default Twenty Twenty-One theme contains 48 PHP files and 11 JavaScript files weighing in at 4.5 MB. Its block-based sibling, the experimental <a href=\"https://github.com/WordPress/theme-experiments/tree/master/tt1-blocks\" rel=\"noopener\">TT1 Blocks</a> theme, contains only four PHP files, one JavaScript file, and eight HTML files at 3.5 MB.</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1674\" height=\"1420\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310596538_wp-2021-files.png?resize=1674%2C1420&#038;ssl=1\" alt=\"Screenshot of a Mac window open to the default Twenty Twenty-One WordPress theme, displaying a long list of files.\" class=\"wp-image-362801\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310596538_wp-2021-files.png?w=1674&amp;ssl=1 1674w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310596538_wp-2021-files.png?resize=300%2C254&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310596538_wp-2021-files.png?resize=1024%2C869&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310596538_wp-2021-files.png?resize=768%2C651&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310596538_wp-2021-files.png?resize=1536%2C1303&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310596538_wp-2021-files.png?resize=1000%2C848&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Twenty Twenty-One theme folder</figcaption></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1674\" height=\"1418\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310627080_wp-tt1-files.png?resize=1674%2C1418&#038;ssl=1\" alt=\"Screenshot of a Mac window open to the TT1 theme folder, showing that WordPress Block Themes contain fewer files.\" class=\"wp-image-362802\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310627080_wp-tt1-files.png?w=1674&amp;ssl=1 1674w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310627080_wp-tt1-files.png?resize=300%2C254&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310627080_wp-tt1-files.png?resize=1024%2C867&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310627080_wp-tt1-files.png?resize=768%2C651&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310627080_wp-tt1-files.png?resize=1536%2C1301&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_EBAA84AD47536B9542B6D7A4234203A0E8BAA168FB21BF8FB62F5108E79E7B7C_1643310627080_wp-tt1-files.png?resize=1000%2C847&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>TT1 theme folder</figcaption></figure>\n</div>\n</div>\n\n\n\n<p>A block theme structure can be very simple with just a few <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/create-block-theme/#required-files-and-file-structure\" rel=\"noopener\">required files</a> : <code>index.php</code>, <code>style.css</code> and <code>template/index.html</code>. The following is a typical block theme file structure, pulled from the <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/\" rel=\"noopener\">WordPress Editor Handbook</a>:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">#! basic block-theme structure\ntheme\n|__ style.css\n|__ functions.php\n|__ index.php\n|__ theme.json\n|__ templates\n    |__ index.html\n    |__ single.html\n    |__ archive.html\n    |__ ...\n|__ parts\n    |__ header.html\n    |__ footer.html\n    |__ sidebar.html\n    |__ ...</code></pre>\n\n\n\n<ul><li><code>styles.css</code>: Contains theme’s style sheet</li><li><code>functions.php</code>: Contains theme setup and may include additional files, enable an editor style sheet, and enqueue <code>style.css</code>, if there are any</li><li><code>index.php</code>: An empty file to switch to default file in case the block theme is activated without the WordPress Block Editor.</li><li><code>theme.json</code>: Optional configuration file used to enable or disable features and set default styles for both the website and blocks</li><li><code>templates</code>: Contains page templates that are composed of blocks. These files follow the same template hierarchy as traditional themes.<ul><li><code>index.html</code>: The primary template to generate a post or page, analogous to <code>index.php</code> in classic themes</li><li><code>single.html</code>: The template to generate single posts or pages</li><li><code>archive.html</code>: The template to generate archive lists of posts</li></ul></li><li><code>parts</code>: The common collections of blocks to be used in block templates<ul><li><code>header.html</code>: The global header block</li><li><code>footer.html</code>: The global footer block</li><li><code>sidebar.html</code>: An optional global sidebar block</li></ul></li></ul>\n\n\n\n<p class=\"is-style-explanation\">A list of theme blocks including that are <strong>specific to block themes</strong> is available in <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/#theme-blocks\" rel=\"noopener\">WordPress Block Editor Handbook</a>.</p>\n\n\n<h4 id=\"templates-and-template-parts\">Templates and template parts</h4>\n\n\n<p><a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/#what-is-a-block-template\" rel=\"noopener\">Templates</a> are basically group of assembled blocks that might include reusable block parts, like a site header or footer. Different blocks are used to compose a page template. For example, that might be a list of blog posts, a list of products, or even a widget.</p>\n\n\n\n<p>Here’s an example of a block template <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/#what-is-a-block-template\" rel=\"noopener\">pulled from the WordPress Block Editor Handbook</a>.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">\n&lt;!-- wp:site-title /-->\n\n&lt;!-- wp:image {\"sizeSlug\":\"large\"} -->\n&lt;figure class=\"wp-block-image size-large\">\n    &lt;img src=\"https://cldup.com/0BNcqkoMdq.jpg\" alt=\"\" />\n&lt;/figure>\n&lt;!-- /wp:image -->\n\n&lt;!-- wp:group -->\n&lt;div class=\"wp-block-group\">\n    &lt;!-- wp:post-title /-->\n    &lt;!-- wp:post-content /-->\n&lt;/div>\n&lt;!-- /wp:group -->\n\n&lt;!-- wp:group -->\n&lt;div class=\"wp-block-group\">\n    &lt;!-- wp:heading -->\n    &lt;h2>Footer&lt;/h2>\n    &lt;!-- /wp:heading -->\n&lt;/div>\n&lt;!-- /wp:group --></code></pre>\n\n\n<h3 id=\"creating-wordpress-block-themes\">Creating WordPress Block Themes</h3>\n\n\n<p>The WordPress Site Editor is now the primary tool for defining the look and feel of a WordPress website. You may be used to using the WordPress Customizer to do these things — and some themes have heavily tapped into that to do what the site editor is now designed to do.</p>\n\n\n\n<p>So, no longer is the block editor for pages and posts; it’s the way WordPress themes are created.</p>\n\n\n\n<p>I’m assuming that many of you have already used the block editor, and don’t really need a deep lesson on what it is or how to use it. That said, it’s worth poking at it a bit since it’s the impetus for everything related to WordPress theming moving forward, now that WordPress 5.9 is in the wild.</p>\n\n\n\n<p>In fact, when we talk about block editing and theming, yes, we’re talking about the block editor. But really what we’re talking about is the WordPress Site Editor.</p>\n\n\n<h4 id=\"the-wordpress-site-editor-interface\">The WordPress Site Editor interface</h4>\n\n\n<p>Even as an early adopter of the Gutenberg plugin, I find the experience of the site editor intimidating and frustrating. It changes frequently and often drastically with each new release. I am hopeful, though, that WordPress 5.9 is a sort of line in the sand that helps stabilize that rocky feeling.</p>\n\n\n\n<p>The site editor is accessed the same way you’re already used to accessing the WordPress Customizer. It’s located under <strong>Appearance</strong> in the dashboard menu, called <strong>Editor</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1015\" height=\"328\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1641579182160_editor-scr.png?resize=1015%2C328&#038;ssl=1\" alt=\"Screenshots of the WordPress admin Themes screen side-by-side, the first showing the classic WordPress menu items like Customize, Widgets, and Menus, while the second shows how a WordPress Block Themes only displays a single Editor menu item.\" class=\"wp-image-362806\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1641579182160_editor-scr.png?w=1015&amp;ssl=1 1015w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1641579182160_editor-scr.png?resize=300%2C97&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1641579182160_editor-scr.png?resize=768%2C248&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1641579182160_editor-scr.png?resize=1000%2C323&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The site editor option is available only when a block theme is activated. If you’re using a classic theme, you’ll get the classic UI to go with it.</figcaption></figure>\n\n\n\n<p>Let’s briefly walk-through the new Editor interface.</p>\n\n\n\n<p>First, navigate to the site editor by clicking <strong>Appearance → Editor</strong> from the WordPress admin menu. That menu item may have a red “beta” label on it, like it currently does in WordPress 5.9.</p>\n\n\n\n<p>That takes you to the site editor, which displays either your homepage or post archive, depending on what you have your homepage set to in <strong>Settings → Reading</strong>. From there it sort of looks like the fullscreen version of the block editor when creating or editing a page or post. But click on the WordPress logo in the top-left of the screen, and a left panel opens up revealing the WordPress Site Editor and its menu to navigate between different parts of the site. This includes <strong>Site</strong>, <strong>Templates</strong>, and <strong>Template Parts</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1024\" height=\"342\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/be-ui-1-1024x342-1.png?resize=1024%2C342&#038;ssl=1\" alt=\"Screenshot of the WordPress Site Editor. There is a dark gray left panel open with an Editor heading and three links for Site, Templates, and Template Parts. The main content shows a preview of the site homepage in the WordPress Block Editor.\" class=\"wp-image-362808\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/be-ui-1-1024x342-1.png?w=1024&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/be-ui-1-1024x342-1.png?resize=300%2C100&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/be-ui-1-1024x342-1.png?resize=768%2C257&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/be-ui-1-1024x342-1.png?resize=1000%2C334&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Let’s click into Templates. This shows us a list of the available templates provided by the theme, complete with a description of each one and where it is registered (e.g. the parent or a child theme).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1024\" height=\"456\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/be-ui-2-1024x456-1.png?resize=1024%2C456&#038;ssl=1\" alt=\"Screenshot of the site editor's Templates screen which shows a two-column table listing template on the left and who a template was added by on the right.\" class=\"wp-image-362811\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/be-ui-2-1024x456-1.png?w=1024&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/be-ui-2-1024x456-1.png?resize=300%2C134&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/be-ui-2-1024x456-1.png?resize=768%2C342&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/be-ui-2-1024x456-1.png?resize=1000%2C445&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The other way to get to this screen is from the initial page we landed on when entering the site editor. Click the name of the template in the top admin bar to reveal a button that takes you directly to the same Templates screen.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1100\" height=\"453\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657311335_be-ui-3.png?resize=1100%2C453&#038;ssl=1\" alt=\"Screenshot of the Home template open in the WordPress Site Editor. The template name is at the top of the screen in a white toolbar and is expanded with a submenu that describes the template and provides a black button with white text to view all templates.\" class=\"wp-image-362814\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657311335_be-ui-3.png?w=1100&amp;ssl=1 1100w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657311335_be-ui-3.png?resize=300%2C124&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657311335_be-ui-3.png?resize=1024%2C422&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657311335_be-ui-3.png?resize=768%2C316&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657311335_be-ui-3.png?resize=1000%2C412&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Any of templates can be edited just like any page or post in the block editor. Let’s say I don’t like to have a featured image on my index page and want to remove it. Simply delete the featured image block and save the template.</p>\n\n\n\n<p>The other key part of the site editor UI is a list view that outlines the current blocks that are placed in the template. This has been a feature in WordPress since the introduction of the block editor, but what’s new this time around is that you can open and close parent blocks that contain child blocks like an accordion. Not only that, but it supports dragging and dropping blocks to change the layout directly from there.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1142\" height=\"584\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657329116_be-ui-4.png?resize=1142%2C584&#038;ssl=1\" alt=\"The WordPress Site Editor with a white left panel expanded revealing an outline of the current blocks that are applied to the template.\" class=\"wp-image-362818\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657329116_be-ui-4.png?w=1142&amp;ssl=1 1142w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657329116_be-ui-4.png?resize=300%2C153&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657329116_be-ui-4.png?resize=1024%2C524&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657329116_be-ui-4.png?resize=768%2C393&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657329116_be-ui-4.png?resize=1000%2C511&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>One more thing in the site editor UI: you can clear out customizations with the click of a button. From the Templates screen, click the kebob menu next to a template and select the option to <strong>Clear customizations</strong>. This is a nice way to reset and start from scratch, should you need to.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1022\" height=\"373\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657350471_be-ui-5.png?resize=1022%2C373&#038;ssl=1\" alt=\"Screenshot of the Template Parts screen in the WordPress Site Editor, showing a two-column able with a column that displays template names, and a column that identifies the location of the template part.\" class=\"wp-image-362821\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657350471_be-ui-5.png?w=1022&amp;ssl=1 1022w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657350471_be-ui-5.png?resize=300%2C109&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657350471_be-ui-5.png?resize=768%2C280&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657350471_be-ui-5.png?resize=1000%2C365&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The WordPress Core team publishes regular updates on what’s new at <a href=\"https://make.wordpress.org/core/\" rel=\"noopener\">Make WordPress Core</a>. It’s worth bookmarking that to stay posted on the latest changes to the WordPress Block Editor and Site Editor.</p>\n\n\n<h4 id=\"creating-templates-and-template-parts\">Creating Templates and Template Parts</h4>\n\n\n<p>Templates, as you know, are core to WordPress theming. They enforce consistent and reusable layouts. That doesn’t change in WordPress 5.9. And neither does the fact that we can create <strong>template parts</strong> that are like module pieces that can be used in multiple template, say a post query that lives in an archive template and the home template.</p>\n\n\n\n<p>What’s different in WordPress 5.9 is that they are created and managed with the site editor rather than PHP files that live in the theme folder.</p>\n\n\n\n<p>The <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/create-block-theme/#creating-the-templates-and-template-parts\" rel=\"noopener\">Block Editor Handbook</a> lists three ways to create templates and template parts: (a) <strong>manually</strong>, by creating HTML files containing block markup, (b) <strong>using the site editor</strong>, and (c) <strong>using the template editing mode</strong> in the block editor.</p>\n\n\n\n<p>Brief descriptions of <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/create-block-theme/#template-creation-in-the-site-editor\" rel=\"noopener\">creating template in the site editor</a> and <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/create-block-theme/#template-editing-mode\" rel=\"noopener\">template editing mode</a> are available in the <em>Block Theme handbook</em>. The WordPress 5.9 allows to create a new template using editor mode.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1022\" height=\"713\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657585247_temp-create-1.png?resize=1022%2C713&#038;ssl=1\" alt=\"Screenshot of the Template Parts screen open in the WordPress Site Editor. A modal is open above the UI that contains an interface to create a template part, including the part's name and area.\" class=\"wp-image-362825\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657585247_temp-create-1.png?w=1022&amp;ssl=1 1022w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657585247_temp-create-1.png?resize=300%2C209&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657585247_temp-create-1.png?resize=768%2C536&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657585247_temp-create-1.png?resize=1000%2C698&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The customized templates can then be <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/create-block-theme/#exporting\" rel=\"noopener\">exported</a> to include in a block theme. So, yeah, we now have the ability to create a fully functioning WordPress theme without writing a line of code! The exported folder currently does not contain <code>theme.json</code> file, however <a href=\"https://github.com/WordPress/gutenberg/issues/27941\" rel=\"noopener\">there is a proposal over at GitHub</a> to allow exporting both block themes and styles.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1022\" height=\"473\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657611951_temp-create-2.png?resize=1022%2C473&#038;ssl=1\" alt=\"Screenshot of the WordPress Site Editor preferences panel open as a white panel to the left of the screen.\" class=\"wp-image-362829\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657611951_temp-create-2.png?w=1022&amp;ssl=1 1022w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657611951_temp-create-2.png?resize=300%2C139&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657611951_temp-create-2.png?resize=768%2C355&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639657611951_temp-create-2.png?resize=1000%2C463&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But for those who prefer working more closely with code, then manually creating WordPress templates and template parts is still a thing. You can still crack open a code editor and create HTML files containing block markup.</p>\n\n\n<h3 id=\"global-settings-and-styles-themejson\">Global settings and styles (<code>theme.json</code>)</h3>\n\n\n<p>In classic themes, we write the styling rules in a <code>style.css</code> file. In block themes, styling is more challenging because CSS comes from different sources (e.g. core blocks, themes, and users). WordPress 5.8 introduced a concept of <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/\" rel=\"noopener\">Global Styles</a> — which is essentially a <code>theme.json</code> file — that, <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/#rationale\" rel=\"noopener\">according to the docs</a>, consolidate “the various APIs related to styles into a single point – a <code>theme.json</code> file that should be located inside the root of the theme directory.“</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"906\" height=\"786\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/bb-child-4.png?resize=906%2C786&#038;ssl=1\" alt=\"Screenshot of a theme dot jayson file open in the VS Code editor. The file contains objects for version and settings. The settings object contains a color object. The color object contains a palette objects which contains properties for slightly, color, name, and default.\" class=\"wp-image-362831\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/bb-child-4.png?w=906&amp;ssl=1 906w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/bb-child-4.png?resize=300%2C260&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/bb-child-4.png?resize=768%2C666&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The <code>theme.json</code> file is said to have been designed to offer more <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/#styles-are-managed\" rel=\"noopener\">granular styling structure</a> for theme authors with options to manage and customize the CSS styles coming from various origins. For example, a theme author may <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/#settings-for-the-block-editor\" rel=\"noopener\">set certain styling features</a> that are hidden from users, define default colors, font sizes and other features available to the user, and may set the default layout of the editor as well. Plus, <code>theme.json</code> allows you to <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/#settings-can-be-controlled-per-block\" rel=\"noopener\">customize styling on a per-block basis</a>. It’s powerful, flexible, and super maintainable!</p>\n\n\n\n<p>The block editor is expected to provide all the basic styling that theme authors are allowed to customize style, as defined by the <code>theme.json</code> file. However, the <code>theme.json</code> file could get quite long for a complex theme, and currently there is no way to partition it in a more digestible way. There is a <a href=\"https://github.com/WordPress/gutenberg/issues/36548#issue-1055300957\" rel=\"noopener\">GitHub ticket</a> to restructure it so that different <code>theme.json</code> files map to theme hierarchy to <code>/styles</code> folder. That would be a nice enhancement for developer experience.</p>\n\n\n\n<p>The default <a href=\"https://wordpress.org/themes/twentytwentytwo/\" rel=\"noopener\">Twenty Twenty-Two theme</a> is a good example of how WordPress full-site editing features use <code>theme.json</code> for global settings and styling blocks.</p>\n\n\n<h3 id=\"wordpress-block-theme-approaches\">WordPress Block Theme approaches</h3>\n\n\n<p>Maybe you’ve always made WordPress themes from scratch. Perhaps you’ve relied on the Underscores theme as a starting point. Or maybe you have a favorite theme you extend with a child theme. The new features of the WordPress Site Editor really change the way we make themes.</p>\n\n\n\n<p>Following are a few emerging strategies for block-based theme development that are deeply integrated with the WordPress Site Editor.</p>\n\n\n<h4 id=\"universal-themes\">Universal themes</h4>\n\n\n<p>The Automattic team has built a <a href=\"https://blockbasetheme.com/\" rel=\"noopener\">Blockbase universal theme</a> that’s dubbed as a new way to build themes, sort of similar to the <a href=\"https://underscores.me\" rel=\"noopener\">Underscores</a> <a href=\"https://underscores.me\" rel=\"noopener\">starter theme</a>. The Blockbase theme provides temporary “ponyfill” styles that the block editor “does not yet take into account on <code>theme.json</code> ‘custom’ properties” and that may eventually become obsolete once the Gutenberg plugin fully matures and is integrated into WordPress Core.</p>\n\n\n\n<p>Using the <a href=\"https://themeshaper.com/2021/10/06/universal-themes/\" rel=\"noopener\">universal parent theme</a> approach, the Automattic has already released <a href=\"https://wordpress.org/themes/tags/full-site-editing/\" rel=\"noopener\">eight Blockbase child themes</a>, and several others are <a href=\"https://github.com/Automattic/themes\" rel=\"noopener\">in progress over at GitHub</a>.</p>\n\n\n<h4 id=\"twenty-twentytwo-default-theme\">Twenty Twenty-Two default theme</h4>\n\n\n<p>The <a href=\"https://github.com/WordPress/twentytwentytwo\" rel=\"noopener\">Twenty Twenty-Two</a> default theme is another excellent starting point, as it’s really the first WordPress theme that ships with WordPress that is designed to work with the site editor.</p>\n\n\n\n<p>In my opinion, this theme is excellent for theme developers who are already familiar with FSE features to showcase what is possible. For others users who are not developers and are not familiar with FSE features, customizations it in the block editor, then exporting it as a child theme could be painfully frustrating and overwhelming.</p>\n\n\n<h4 id=\"hybrid-themes\">Hybrid themes</h4>\n\n\n<p>The concept of “Hybrid” themes in the context of FSE is discussed in <a href=\"https://github.com/WordPress/gutenberg/issues/29024\" rel=\"noopener\">this GitHub ticket</a>. The idea is to provide paths for any user to <a href=\"https://wptavern.com/universal-wordpress-themes-virtual-hallway-hangout-planned-for-may-14\" rel=\"noopener\">use the site or template editor to override traditional theme templates</a>.</p>\n\n\n\n<p>Justin Tadlock in <a href=\"https://wptavern.com/universal-wordpress-themes-virtual-hallway-hangout-planned-for-may-14\" rel=\"noopener\">this WP Tavern post</a> predicts four types of themes — block only, universal, hybrid, and classic — and speculates that theme authors may split between “block themes and a mashup of classic/hybrid themes.”</p>\n\n\n\n<p>Proof in the pudding is provided by Frank Klein in <a href=\"https://wpdevelopment.courses/articles/hybrid-theme-learnings/\" rel=\"noopener\">“What I Learned Building a Hybrid Theme</a>”:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>A <strong>hybrid theme</strong> mixes the traditional theming approach with full-site editing features. A key component here is the <code>theme.json</code> file. It offers more control over the block editor’s settings, and simplifies styling blocks. A hybrid theme can use block templates as well, but that’s optional.</p></blockquote>\n\n\n\n<p>Frank is the author of the <a href=\"https://wordpress.org/themes/block-based-bosco/\" rel=\"noopener\">Block-Based Bosco</a> theme and has expanded further on what a “hybrid theme” is by creating a <a href=\"https://github.com/WP-Development-Courses/hybrid-twenty-twenty\" rel=\"noopener\">hybrid version of the default Twenty Twenty theme</a>. The theme is <a href=\"https://github.com/WP-Development-Courses/hybrid-twenty-twenty\" rel=\"noopener\">available on GitHub</a>. Currently, there are no hybrid themes in the <a href=\"https://wordpress.org/themes/\" rel=\"noopener\">WordPres Theme Directory</a>.</p>\n\n\n<h4 id=\"wordpress-community-themes\">WordPress community themes</h4>\n\n\n<p>At the time of writing, there are 47 block-based themes with FSE features available in the <a href=\"https://wordpress.org/themes/tags/full-site-editing/\" rel=\"noopener\">theme directory</a>. As expected, this approach is widely varied.</p>\n\n\n\n<p>For example, <a href=\"https://www.elmastudio.de/en/wordpress-block-themes-introduction-part-one/\" rel=\"noopener\">in this post</a>, Aino block theme author <a href=\"https://github.com/ellenbauer\" rel=\"noopener\">Ellen Bower</a> discusses how they converted their classic theme into a block theme, detailing what makes a theme a “block” theme. The file structure of this approach <a href=\"https://github.com/elmastudio/aino-blocks\" rel=\"noopener\">looks different</a> from the standard block theme structure we covered earlier.</p>\n\n\n\n<p>Another popular block theme, <a href=\"https://wordpress.org/themes/tove/\" rel=\"noopener\">Tove</a> by <a href=\"https://andersnoren.se/about-anders-noren/\" rel=\"noopener\">Andars Noren</a>, is described as a <a href=\"https://andersnoren.se/introducing-tove/\" rel=\"noopener\">flexible base theme</a> that follows the standard block theme file structure.</p>\n\n\n\n<p>There’s also a very simple single page proof of the concept theme by Carolina Nymark that contains nothing but a single <code>index.html</code> called <a href=\"https://wordpress.org/themes/miniblock-ooak/\" rel=\"noopener\">Miniblock OOAK</a>. It’s already available in the theme directory, as is <a href=\"https://github.com/x3p0-dev/x3p0-profile/tree/e65b2604c3bd695c67cb16062673519cd48c9ea1\" rel=\"noopener\">another one from Justin Tadlock</a> that’s a work in progress (and he wrote up his process <a href=\"https://wptavern.com/if-this-is-modern-wordpress-theme-development-sign-me-up\" rel=\"noopener\">in a separate article</a>).</p>\n\n\n<h4 id=\"block-theme-generator-app\">Block Theme Generator app</h4>\n\n\n<p>Even though we’ve already established how friendly WordPress Block Themes are for non-developers, there are tools that help create complete block themes or merely a customized <code>theme.json</code> file.</p>\n\n\n\n<p><a href=\"https://twitter.com/dgwyer\" rel=\"noopener\">David Gwyer</a>, an Automattic engineer, has been working on a <a href=\"https://themegen.app/\" rel=\"noopener\">Block theme generator</a> app which, at the time of writing, is in beta and available for testing by request.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"988\" height=\"744\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639654350325_themegenapp.png?resize=988%2C744&#038;ssl=1\" alt=\"Screenshot of the Block Theme Generator app homepage. It has a bright blue background and dark blue text that welcomes you to the site, and a screenshot of the app.\" class=\"wp-image-362833\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639654350325_themegenapp.png?w=988&amp;ssl=1 988w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639654350325_themegenapp.png?resize=300%2C226&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0575E34E9913D73AAE970189AC09E725229C0389CB98795BA5FA7CF6108359BF_1639654350325_themegenapp.png?resize=768%2C578&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In my brief testing, the app only allowed me to generate customized <code>theme.json</code> file. But <a href=\"https://wptavern.com/david-gwyer-teases-block-theme-generator-app-plans-for-a-community-of-creators\" rel=\"noopener\">Gwyer told to WP Tavern</a> that the app isn’t fully baked just yet, but features are being added often. Once complete, this could be a very helpful resource for theme authors to create customized block themes.</p>\n\n\n<h3 id=\"block-themes-that-are-currently-in-use\">Block themes that are currently in use</h3>\n\n\n<p>This <a href=\"https://twitter.com/carolinapoena/status/1481886005804384258?cxt=HHwWhIC-2ZHe25ApAAAA\" rel=\"noopener\">Twitter thread</a> from Carolina Nymark shows some examples of block themes that are live and in production at the time of this writing. In a <a href=\"https://yoast.com/full-site-editing-in-wordpress/\" rel=\"noopener\">recent Yoast article</a>, Carolina listed a bunch of personal and business websites that use block themes.</p>\n\n\n<h4 id=\"personal-sites\">Personal sites</h4>\n\n\n<ul><li><a href=\"https://femkreations.com/\" rel=\"noopener\">femcreations.com</a></li><li><a href=\"https://femkreations.com/\" rel=\"noopener\">helen.blog</a></li><li><a href=\"https://richtabor.com/\" rel=\"noopener\">Rich Tabor</a></li><li><a href=\"https://lesley.pizza/\" rel=\"noopener\">Lesly.pizza</a></li><li><a href=\"https://damonacook.com/\" rel=\"noopener\">dimonacook.com</a></li><li><a href=\"https://ryelle.codes/2021/12/switching-to-a-block-based-theme/\" rel=\"noopener\">ryelle.codes</a></li></ul>\n\n\n<h4 id=\"business-sites\">Business sites</h4>\n\n\n<ul><li><a href=\"https://fullsiteediting.com/\" rel=\"noopener\">fullsiteediting.com</a></li><li><a href=\"https://sitefly.be/\" rel=\"noopener\">sitefly.be</a></li><li><a href=\"https://wpvip.com/\" rel=\"noopener\">wpvip.com</a></li><li><a href=\"https://ainoblocks.io/\" rel=\"noopener\">Ainoblocks</a></li><li><a href=\"https://pagely.com/\" rel=\"noopener\">pagely.com</a></li><li><a href=\"https://frostwp.com/\" rel=\"noopener\">frostwp.com</a></li><li><a href=\"https://wptavern.com/\" rel=\"noopener\">WP Tavern</a></li></ul>\n\n\n\n<p>As I mentioned earlier, I also have been using a block theme for <a href=\"https://justwrite.atsixtyseven.com/\" rel=\"noopener\">one of my personal websites</a> for a while. The default Twenty Twenty-Two theme also currently shows <a href=\"https://wordpress.org/themes/twentytwentytwo/\" target=\"_blank\" rel=\"noreferrer noopener\">more than 60,000 active installs</a>, which tells me there are many more examples of block-based theme implementations in the wild.</p>\n\n\n<h3 id=\"building-block-child-themes\">Building Block Child Themes</h3>\n\n\n<p>Child theming is still a thing in this new era of WordPress blocks, though something that’s still in early days. In other words, there is no clear approach to do make a block-based child theme, and there are no existing tools to help at the moment.</p>\n\n\n\n<p>That said, a few approaches for creating WordPress child block themes are emerging.</p>\n\n\n<h4 id=\"create-blockbase-theme-plugin\">Create Blockbase Theme plugin</h4>\n\n\n<p>The Automattic team is working on a plugin called <a href=\"https://github.com/Automattic/create-blockbase-theme\" rel=\"noopener\">Create Blockbase Theme</a>. This will make it fairly trivial to create child themes based on the Blockbase universal theme we talked about earlier. Ben Dwyer has discussed how theme authors can <a href=\"https://themeshaper.com/2021/11/17/create-a-blockbase-child-theme/\" rel=\"noopener\">build Blockbase child themes with simple six steps</a> and without writing a line of code.</p>\n\n\n\n<p>I tested the plugin in my own local environment, making only small changes to my Blockbase theme install, and everything appeared to work. Just note that the plugin is still experimental and under development, though you can <a href=\"https://github.com/Automattic/create-blockbase-theme\" rel=\"noopener\">follow the roadmap</a> to see what’s up.</p>\n\n\n<h4 id=\"using-an-alternate-themejson-file\">Using an alternate <code>theme.json</code> file</h4>\n\n\n<p><a href=\"https://twitter.com/kjellr\" rel=\"noopener\">Kjell Reigstad</a>, author of the default WordPress Twenty Twenty-Two theme, demonstrates how swapping a single <code>theme.json</code> file with another <code>theme.json</code> file that contains different style configurations can change the look and feel of a block-based theme design.</p>\n\n\n\n<blockquote class=\"twitter-tweet\"><p dir=\"ltr\" lang=\"en\">Last week I created a quick demo of how the visual aesthetic of Twenty Twenty-Two can be drastically changed through its theme.json settings. This example swaps the default json file for one with different font, color, duotone, and spacing values. <a href=\"https://t.co/ab9tyGwLOS\">pic.twitter.com/ab9tyGwLOS</a></p>— kjellr (@kjellr) <a href=\"https://twitter.com/kjellr/status/1451536195616395272?ref_src=twsrc%5Etfw\" rel=\"noopener\">October 22, 2021</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n<p>Kjell has opened a <a href=\"https://github.com/WordPress/theme-experiments/pull/292\" rel=\"noopener\">pull request</a> that shows off several experimental child themes that are available for testing at the <a href=\"https://github.com/WordPress/theme-experiments/tree/add/tt2-child-themes\" rel=\"noopener\">GitHub theme-experiment</a> GitHub repository.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"746\" height=\"442\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/tt2-variations.png?resize=746%2C442&#038;ssl=1\" alt=\"A three-by-two grid of screenshots of child themes based on the default WordPress Twenty Twenty-Two theme in alternate colors schemes.\" class=\"wp-image-362836\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/tt2-variations.png?w=746&amp;ssl=1 746w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/tt2-variations.png?resize=300%2C178&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Along these same lines, <a href=\"https://github.com/ryanwelcher/\" rel=\"noopener\">Ryan Welcher</a> is in the process of developing a <a href=\"https://github.com/ryanwelcher/theme-json-builder\" rel=\"noopener\"><code>theme.json</code> builder</a> tool that will generate a customized <code>theme.json</code> file to facilitate non-coders to create similar child themes. More can be found in <a href=\"https://wptavern.com/skins-are-back-in-style-proposal-for-themes-to-bundle-user-selectable-design-variations\" rel=\"noopener\">this WP Tavern post</a>.</p>\n\n\n\n<p>The <a href=\"https://wordpress.org/themes/framboise/\" target=\"_blank\" rel=\"noreferrer noopener\">Framboise</a> child theme (available in theme directory) is an early example of that approach which includes only a single <code>theme.json</code> file.</p>\n\n\n<h4 id=\"is-there-even-a-need-for-child-themes\">Is there even a need for child themes?</h4>\n\n\n<p>Rich Tabor asks the question:</p>\n\n\n\n<blockquote class=\"twitter-tweet\"><p dir=\"ltr\" lang=\"en\">If a theme consist of JSON and block templates that can both be modified via Global Styles, then what are child themes for?</p>— Rich Tabor (@richard_tabor) <a href=\"https://twitter.com/richard_tabor/status/1452611152089862160?ref_src=twsrc%5Etfw\" rel=\"noopener\">October 25, 2021</a></blockquote>\n\n\n\n<p>Indeed, <a href=\"https://wptavern.com/designing-block-based-wordpress-child-themes-with-a-single-json-file\" rel=\"noopener\">a single <code>theme.json</code> file</a> could serve as a child theme on its own. There is an <a href=\"https://github.com/WordPress/gutenberg/pull/35619\" rel=\"noopener\">ongoing discussion</a> about allowing theme authors to ship multiple <code>theme.json</code> files with block themes that offer multiple global style variations. This way, a WordPress user could pick one of the variations to use on the site.</p>\n\n\n\n<p>Some features of <a href=\"https://github.com/WordPress/gutenberg/pull/35619\" rel=\"noopener\">global style variations</a> are already included in <a href=\"https://github.com/WordPress/gutenberg/releases/tag/v12.5.0-rc.1\" target=\"_blank\" rel=\"noreferrer noopener\">Gutenberg v12. 5</a> and expected to be available with <a href=\"https://make.wordpress.org/core/2022/01/26/preliminary-roadmap-for-6-0/\" rel=\"noopener\">WordPress 6.0.</a></p>\n\n\n<h3 id=\"some-personal-thoughts\">Some personal thoughts</h3>\n\n\n<p>I’d be remiss to end this without weighing in on all this from a personal level. I’ll do this briefly in a few points.</p>\n\n\n<h4 id=\"block-themes-are-a-wordpress-answer-to-jamstack-criticisms\">Block themes are a WordPress answer to Jamstack criticisms</h4>\n\n\n<p>Jamstack enthusiasts have lobbed criticisms at the WordPress platform, most notably that WordPress themes are bloated with PHP files. Well, that’s no longer the case with WordPress Block Themes.</p>\n\n\n\n<p>We saw earlier how an entire theme can be a single <code>index.html</code> file and a <code>theme.json</code> file. No bloat there. And nothing but markup.</p>\n\n\n<h4 id=\"i-miss-the-wordpress-customizer\">I miss the WordPress Customizer</h4>\n\n\n<p>Especially the ability to inject custom code. From here on out, it’s going to require a deep level of familiarity with the WordPress Site Editor UI to accomplish the same thing. </p>\n\n\n<h4 id=\"customizations-a-site-is-easypeasy\">Customizations a site is easy-peasy.</h4>\n\n\n<p>Customizing a classic theme — even something as minimal as changing fonts — can be difficult if you don’t know what you’re doing. That’s changed now with the site editor and the introduction of the <code>theme.json</code> file, where a theme can be customized (and even exported!) without writing a single line of code.</p>\n\n\n\n<p>I still hold my opinion, though that the site editor interface is confusing. I think a pleasant user experience is a far ways off but looking forward to the <a href=\"https://make.wordpress.org/core/2022/01/26/preliminary-roadmap-for-6-0/\" rel=\"noopener\">next WordPress 6.0 release</a> for better user experience.</p>\n\n\n<h4 id=\"barriers-to-designing-themes-is-getting-lower\">Barriers to designing themes is getting lower.</h4>\n\n\n<p>It’s less about PHP and template files, and more about developing patterns and creating content. That sounds exactly what a content management system should be designed to do! I am already excited with <a href=\"https://make.wordpress.org/core/2022/01/26/preliminary-roadmap-for-6-0/\" rel=\"noopener\">new features</a> being considered for the WordPress 6.0 release.</p>\n\n\n<h3 id=\"resources\">Resources</h3>\n\n\n<p>There is already a <em>ton</em> of other articles that cover WordPress Block Themes, full-site editing, and the block editor. And many of those came <em>before</em> WordPress 5.9 was released!</p>\n\n\n\n<p>So, in addition to this article, here’s a collection of others for you to consider as you begin or continue down your journey of WordPress blocks and site editing.</p>\n\n\n<h4 id=\"wordpress-59\">WordPress 5.9</h4>\n\n\n<ul><li><strong><a href=\"https://youtu.be/XvEG9XWD4JI\" rel=\"noopener\">Introducing WordPress 5.9</a></strong> (official release video)</li><li><strong><a href=\"https://youtu.be/r59aR1tmY6k\" rel=\"noopener\">Exploring WordPress 5.9</a></strong> (video by Ann McCarthy)</li><li><strong><a href=\"https://youtu.be/U7NkL8YKfUA\" rel=\"noopener\">Exploring Navigation Block</a></strong> (video by Ann McCarthy)</li><li><strong><a href=\"https://make.wordpress.org/core/2021/10/06/introducing-twenty-twenty-two/\" rel=\"noopener\">Introducing Twenty Twenty-Two</a></strong> (Kjell Reigstad)</li><li><strong><a href=\"https://gutenbergtimes.com/how-5-9-creates-a-strong-foundation-for-the-future/\" rel=\"noopener\">How 5.9 creates a strong foundation for the future</a></strong> (Gutenberg Times)</li><li><strong><a href=\"https://yoast.com/full-site-editing-in-wordpress/\" rel=\"noopener\">What is full site editing (FSE) in WordPress?</a></strong> (Yoast)</li></ul>\n\n\n<h4 id=\"site-editor-and-block-themes\">Site editor and block themes</h4>\n\n\n<ul><li><strong><a href=\"https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/\" rel=\"noopener\">WordPress Block Editor Handbook</a></strong></li><li><strong><a href=\"https://wordpress.org/patterns/\" rel=\"noopener\">WordPress Pattern Directory</a></strong></li><li><strong><a href=\"https://github.com/WordPress/theme-experiments\" rel=\"noopener\">WordPress Theme Experiments</a></strong> (GitHub)</li><li><strong><a href=\"https://www.youtube.com/watch?v=fKbZuxo7RxE\" rel=\"noopener\">WordPress Gutenberg Blocks Basics</a></strong> (video by WP Apprentice)</li><li><strong><a href=\"https://www.youtube.com/watch?v=S-6c-TrTC6Y\" rel=\"noopener\">Introduction to Block-based themes</a></strong> (video, Kjell Reigstad)</li><li><strong><a href=\"https://learn.wordpress.org/course/simple-site-design-with-full-site-editing/\" rel=\"noopener\">Simple Site Design with Full Site Editing</a></strong> (Learn WordPress)</li><li><strong><a href=\"https://fullsiteediting.com/lessons/how-to-use-php-templates-in-block-themes/\" rel=\"noopener\">How to use PHP templates in block themes</a></strong> (Carolina Nymark)</li></ul>\n\n\n<h4 id=\"selected-blog-posts\">Selected blog posts</h4>\n\n\n<ul><li><strong><a href=\"https://andersnoren.se/a-new-era-for-wordpress-themes/\" rel=\"noopener\">A New Era for WordPress Themes</a></strong> (Anders Noren)</li><li><strong><a href=\"https://publishing-project.rivendellweb.net/gutenberg-full-site-editing-and-block-based-themes/\" rel=\"noopener\">Gutenberg Full Site Editing and Block-Based Themes</a></strong> (The Publishing Project)</li><li><strong><a href=\"https://wordpress.org/news/2021/03/so-you-want-to-make-block-patterns/\" rel=\"noopener\">So you want to make block patterns?</a></strong> (WordPress.org news)</li><li><strong><a href=\"https://matiasventura.com/post/the-theme-json-horizon/\" rel=\"noopener\">The theme.json horizon</a></strong> (Matia Ventura)</li><li><strong><a href=\"https://ryelle.codes/2021/12/switching-to-a-block-based-theme/\" rel=\"noopener\">Switching to a block-based theme</a></strong> (Kelly Ryelle)</li></ul>\n\n\n<h4 id=\"other-useful-links\">Other useful links</h4>\n\n\n<ul><li><strong><a href=\"https://wptavern.com/\" rel=\"noopener\">WP Tavern</a>:</strong> The site covers <a href=\"https://wptavern.com/category/themes\" rel=\"noopener\">block themes</a>, <a href=\"https://wptavern.com/tag/gutenberg\" rel=\"noopener\">Gutenberg releases</a> and plugins helping readers to learn what is new on World Press.</li><li><strong><a href=\"https://gutenbergtimes.com/\" rel=\"noopener\">Gutenberg Times</a>:</strong> The site covers important Gutenberg news and links to related to block editor, full site editing, every week.</li><li><strong><a href=\"https://make.wordpress.org/themes/\" rel=\"noopener\">Make WordPress Themes</a>:</strong> Published meeting notes on themes and Gutenberg + Theme series.</li><li><strong><a href=\"https://make.wordpress.org/core/\" rel=\"noopener\">Make WordPress Core</a>:</strong> Publishes new content following every Gutenberg release on a bi-weekly basis.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>As expected in beta testing, the site editor is still intimating and confusing, nevertheless, I am finding it a fun to work with block themes. Indeed, I have been already modifying Twenty Twenty-Two as a child theme and plan to create style alternatives using single <code>theme.json</code> file.  </p>\n\n\n\n<p>Have you been using block themes in your project, if so, share your experience and thoughts; I love reading any comments and feedback!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-deep-introduction-to-wordpress-block-themes/\">A Deep Introduction to WordPress Block Themes</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>",
      "content_text": "The relatively new WordPress editor, also known as the WordPress Block Editor, always under development via the Gutenberg plugin, has been with us since 2018. You can use the block editor on any WordPress theme, provided the theme loads CSS that the blocks use. But there are new themes that lean into the Block Editor much more deeply.\n\n\n\nWordPress Block Themes allow you to build out the entire site using blocks, meaning the theme’s responsibility is mostly design guidelines, and less about controlling the pages and the content on them. This is referred to as Full-Site Editing in WordPress and the themes that are built for this are called Block Themes, because you build out everything with blocks.\n\n\n\nLet’s dig into all this.\n\n\n\n\n\n\n\nCredit: WordPress.org\n\n\nTable of Contents\n\nIntroduction\nRelated terminology\nUsing the block editor with classic themes\nThe anatomy of block-based themes\nCreating WordPress Block Themes\nGlobal settings and styles (theme.json)\nWordPress Block Theme approaches\nBlock themes that are currently in use\nBuilding Block Child Themes\nSome personal thoughts\nResources\n\n\nIntroduction\n\n\nExcept for those who follow its day-to-day development iterations at GitHub, most development surrounding the block editor is largely visible to users — and that’s not necessarily a bad thing. I have been personally trying to keep myself updated with the block editor through WP Tavern and Gutenberg posts, and have been using both the legacy — or “Classic” editor — as well as the block editor in my personal learning project sites.\n\n\n\nAfter taking a detour to learn and experience headless WordPress sites with Gatsby and Frontity frameworks, I am now back to my native WordPress home.\n\n\n\nThough I have been aware of the WordPress theme-experiment GitHub repository for a while — themes made completely out of blocks! — I have only started digging into block themes recently. In fact, I have been using an experimental block-based theme here in this project site.\n\n\n\nWordPress 5.9 is now out in the wild and with it comes block-based theming for the masses. This release, dubbed Joséphine, is the formal introduction to WordPress full site editing and Block Themes.\n\n\n\nEven though the block-based theming functionality has been available in various iterative forms in previous releases, this is a big deal for the WordPress platform and the ecosystem that relies on it. I’ve had my hands on it and thought I’d share what I’ve learned about block themes in my hands-on experience, as well as some personal thoughts on how it works.\n\n\n\nDisclaimer: I am not a block themes expert by any stretch. I am well-versed in WordPress and a major fan of the content management system. My goal here is not to critique WordPress 5.9 or steer you in the direction of whether or not you should like it or want to use it. I’m merely coming from the perspective of an open-minded learner who is building personal sites with fairly deep understanding and familiarity with the WordPress Block Editor.\n\n\nRelated terminology\n\n\nBefore we dive straight into block themes, I think it’s a good idea to form a baseline understanding of just what we’re talking about when we’re tossing around terms, like blocks and site editing, as they’re so incredibly new and game-changing relative to what we’ve known and loved about WordPress for decades.\n\n\nBlock Editor\n\n\nThis is really what we mean any time we refer to the “WordPress Editor.” We call the WordPress Editor the Block Editor because it allows us to create pages and posts where each element— including text, images, videos, headers, footers, etc. — is inserted into the post using blocks that can be arranged modularly to complete page layouts. It evolved from what’s now called the “classic” editor, which was more squarely based on entering content to be published on a page or post in a predefined layout.\n\n\n\nWordPress Block Editor including the block inserter (1), block editor content area (2), and  the document and block settings (3)Credit: WordPress Block Editor Handbook.\n\n\n\nIt’s sort of like content and layout coming together, where both are managed in the WordPress Editor. So, where we used to rely on the editor for content and (more or less) theme templates to define layout, both are directly editable in the WordPress Editor interface.\n\n\n\nYou can find more detail here on using the Block Editor.\n\n\nBlock Theme\n\n\nAs explained in the WordPress docs:\n\n\n\nA block theme is a WordPress theme with templates entirely composed of blocks so that in addition to the post content of the different post types (pages, posts, …), the block editor can also be used to edit all areas of the site: headers, footers, sidebars, etc.\n\n\n\nThis WordPress documentation provides an overview of block themes in its knowledgebase, including how to create block themes and styling in this primer.\n\n\n\nThe bottom line: Block themes are different than “classic” WordPress themes. Rather than relying strictly on PHP files that conform to the WordPress Template Hierarchy, a WordPress Block Theme consists of block-based HTML templates — assembled groups of blocks that can be styled and arranged in the WordPress Site Editor (that’s coming up next) as well as using a theme.json file for global styling tokens.\n\n\nSite Editor\n\n\nThis is the crown jewel of WordPress 5.9. While it is officially called the WordPress Site Editor, it’s largely been referred to as Full-Site Editing** (FSE) during development and is described as “the cohesive experience that allows you to directly edit and navigate between various templates, template parts, styling options, and more.” Phew, that’s a lot!\n\n\n\n\n\nCredit: WordPress Support\n\n\n\nThe WordPress Site Editor allows us to create and editing templates that are made of blocks. So the idea is that we can assemble a group of blocks that can be applied globally to a site. Like a header component, for example. That might consist of blocks for a site logo, a primary menu, and a tagline. The site editor allows us to create a new block theme or modify an existing theme to give the site’s global appearance a completely new look without writing a line of code.\n\n\n\nSo, you know how you’ve had to build a theme in the past with a bunch of PHP templates? That’s no longer the case. Theme “development” now has a UI that’s available directly in WordPress.\n\n\n\nMore detail on using site editor is in the WordPress documentation.\n\n\n\nThe official WordPress Glossary has additional terms and definitions you may want to explore as we dig deeper into WordPress Block Themes and FSE.\n\n\nUsing the block editor with classic themes\n\n\nThe WordPress Block Editor can be used in both the classic and block themes. When the Gutenberg editor project began, the classic TinyMCE-based editor was detached from WordPress Core into the Classic Editor plugin. As long as the Classic Editor plugin is installed and active, content writing is pretty normal as it was before blocks were introduced.\n\n\n\nPrior to the formal introduction of block editor features, we had to install the experimental Gutenberg plugin. By simply switching plugins, individual page or post contents could be created with either editor. The WordPress 5.0 release introduced the block editor alongside the default Twenty Nineteen theme, demonstrating how to add block editor features and explore its power.\n\n\n\nIn other words, the evolution toward FSE has been building for a while. And because of that, we get to enjoy a high level of backwards compatibility that allows us all to adopt block-based features when we’re good and ready.\n\n\nThe anatomy of block-based themes\n\n\nExperimental block-based themes have been in development since early 2020. At the time I’m writing this, the GitHub theme experiment repository lists 12 block themes that explore some aspect of creating themes using blocks or block templates.\n\n\n\nBut it was probably the Twenty Twenty-One theme that was the first “default” theme to make blocks a first-class citizen, introducing block styles and block patterns, though the recently updated versions of Twenty Nineteen, and Twenty Twenty also include bundled block styling and block patterns. Currently, there are more than 130 themes from the community with bundled block editor patterns, block styles feature, including my favorite, Anders Noren’s Eksell theme.\n\n\n\nWith the ongoing development of the WordPress Block Editor’s FSE features, even more block-based themes are also being introduced.\n\n\n\nSo, what does the development of block-based themes mean for those of us who are deeply entrenched in the “classic” way of building WordPress themes? That’s what I want to look at in this section.\n\n\nThe file structure of block themes\n\n\nIn classic PHP-powered theming, markup elements are generated with PHP and JavaScript, while in block themes those templates are entirely composed of HTML blocks and structural CSS provided by the block editor. This might sound scary for lots of folks, but it’s easy to imagine just how liberating it is for others as it lowers the bar when it comes to developing a WordPress theme.\n\n\n\nThe structure of a block theme is drastically different from the classic WordPress Template Hierarchy that we all are used to. In classic PHP-based themes, page element markup has to be generated with PHP and JavaScript, whereas in block themes, the WordPress Core provides both the markup and basic styling. For example, the default Twenty Twenty-One theme contains 48 PHP files and 11 JavaScript files weighing in at 4.5 MB. Its block-based sibling, the experimental TT1 Blocks theme, contains only four PHP files, one JavaScript file, and eight HTML files at 3.5 MB.\n\n\n\n\n\nTwenty Twenty-One theme folder\n\n\n\n\n\nTT1 theme folder\n\n\n\n\n\nA block theme structure can be very simple with just a few required files : index.php, style.css and template/index.html. The following is a typical block theme file structure, pulled from the WordPress Editor Handbook:\n\n\n\n#! basic block-theme structure\ntheme\n|__ style.css\n|__ functions.php\n|__ index.php\n|__ theme.json\n|__ templates\n    |__ index.html\n    |__ single.html\n    |__ archive.html\n    |__ ...\n|__ parts\n    |__ header.html\n    |__ footer.html\n    |__ sidebar.html\n    |__ ...\n\n\n\nstyles.css: Contains theme’s style sheetfunctions.php: Contains theme setup and may include additional files, enable an editor style sheet, and enqueue style.css, if there are anyindex.php: An empty file to switch to default file in case the block theme is activated without the WordPress Block Editor.theme.json: Optional configuration file used to enable or disable features and set default styles for both the website and blockstemplates: Contains page templates that are composed of blocks. These files follow the same template hierarchy as traditional themes.index.html: The primary template to generate a post or page, analogous to index.php in classic themessingle.html: The template to generate single posts or pagesarchive.html: The template to generate archive lists of postsparts: The common collections of blocks to be used in block templatesheader.html: The global header blockfooter.html: The global footer blocksidebar.html: An optional global sidebar block\n\n\n\nA list of theme blocks including that are specific to block themes is available in WordPress Block Editor Handbook.\n\n\nTemplates and template parts\n\n\nTemplates are basically group of assembled blocks that might include reusable block parts, like a site header or footer. Different blocks are used to compose a page template. For example, that might be a list of blog posts, a list of products, or even a widget.\n\n\n\nHere’s an example of a block template pulled from the WordPress Block Editor Handbook.\n\n\n\n\n<!-- wp:site-title /-->\n\n<!-- wp:image {\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\">\n    <img src=\"https://cldup.com/0BNcqkoMdq.jpg\" alt=\"\" />\n</figure>\n<!-- /wp:image -->\n\n<!-- wp:group -->\n<div class=\"wp-block-group\">\n    <!-- wp:post-title /-->\n    <!-- wp:post-content /-->\n</div>\n<!-- /wp:group -->\n\n<!-- wp:group -->\n<div class=\"wp-block-group\">\n    <!-- wp:heading -->\n    <h2>Footer</h2>\n    <!-- /wp:heading -->\n</div>\n<!-- /wp:group -->\n\n\nCreating WordPress Block Themes\n\n\nThe WordPress Site Editor is now the primary tool for defining the look and feel of a WordPress website. You may be used to using the WordPress Customizer to do these things — and some themes have heavily tapped into that to do what the site editor is now designed to do.\n\n\n\nSo, no longer is the block editor for pages and posts; it’s the way WordPress themes are created.\n\n\n\nI’m assuming that many of you have already used the block editor, and don’t really need a deep lesson on what it is or how to use it. That said, it’s worth poking at it a bit since it’s the impetus for everything related to WordPress theming moving forward, now that WordPress 5.9 is in the wild.\n\n\n\nIn fact, when we talk about block editing and theming, yes, we’re talking about the block editor. But really what we’re talking about is the WordPress Site Editor.\n\n\nThe WordPress Site Editor interface\n\n\nEven as an early adopter of the Gutenberg plugin, I find the experience of the site editor intimidating and frustrating. It changes frequently and often drastically with each new release. I am hopeful, though, that WordPress 5.9 is a sort of line in the sand that helps stabilize that rocky feeling.\n\n\n\nThe site editor is accessed the same way you’re already used to accessing the WordPress Customizer. It’s located under Appearance in the dashboard menu, called Editor.\n\n\n\nThe site editor option is available only when a block theme is activated. If you’re using a classic theme, you’ll get the classic UI to go with it.\n\n\n\nLet’s briefly walk-through the new Editor interface.\n\n\n\nFirst, navigate to the site editor by clicking Appearance → Editor from the WordPress admin menu. That menu item may have a red “beta” label on it, like it currently does in WordPress 5.9.\n\n\n\nThat takes you to the site editor, which displays either your homepage or post archive, depending on what you have your homepage set to in Settings → Reading. From there it sort of looks like the fullscreen version of the block editor when creating or editing a page or post. But click on the WordPress logo in the top-left of the screen, and a left panel opens up revealing the WordPress Site Editor and its menu to navigate between different parts of the site. This includes Site, Templates, and Template Parts.\n\n\n\n\n\n\n\nLet’s click into Templates. This shows us a list of the available templates provided by the theme, complete with a description of each one and where it is registered (e.g. the parent or a child theme).\n\n\n\n\n\n\n\nThe other way to get to this screen is from the initial page we landed on when entering the site editor. Click the name of the template in the top admin bar to reveal a button that takes you directly to the same Templates screen.\n\n\n\n\n\n\n\nAny of templates can be edited just like any page or post in the block editor. Let’s say I don’t like to have a featured image on my index page and want to remove it. Simply delete the featured image block and save the template.\n\n\n\nThe other key part of the site editor UI is a list view that outlines the current blocks that are placed in the template. This has been a feature in WordPress since the introduction of the block editor, but what’s new this time around is that you can open and close parent blocks that contain child blocks like an accordion. Not only that, but it supports dragging and dropping blocks to change the layout directly from there.\n\n\n\n\n\n\n\nOne more thing in the site editor UI: you can clear out customizations with the click of a button. From the Templates screen, click the kebob menu next to a template and select the option to Clear customizations. This is a nice way to reset and start from scratch, should you need to.\n\n\n\n\n\n\n\nThe WordPress Core team publishes regular updates on what’s new at Make WordPress Core. It’s worth bookmarking that to stay posted on the latest changes to the WordPress Block Editor and Site Editor.\n\n\nCreating Templates and Template Parts\n\n\nTemplates, as you know, are core to WordPress theming. They enforce consistent and reusable layouts. That doesn’t change in WordPress 5.9. And neither does the fact that we can create template parts that are like module pieces that can be used in multiple template, say a post query that lives in an archive template and the home template.\n\n\n\nWhat’s different in WordPress 5.9 is that they are created and managed with the site editor rather than PHP files that live in the theme folder.\n\n\n\nThe Block Editor Handbook lists three ways to create templates and template parts: (a) manually, by creating HTML files containing block markup, (b) using the site editor, and (c) using the template editing mode in the block editor.\n\n\n\nBrief descriptions of creating template in the site editor and template editing mode are available in the Block Theme handbook. The WordPress 5.9 allows to create a new template using editor mode.\n\n\n\n\n\n\n\nThe customized templates can then be exported to include in a block theme. So, yeah, we now have the ability to create a fully functioning WordPress theme without writing a line of code! The exported folder currently does not contain theme.json file, however there is a proposal over at GitHub to allow exporting both block themes and styles.\n\n\n\n\n\n\n\nBut for those who prefer working more closely with code, then manually creating WordPress templates and template parts is still a thing. You can still crack open a code editor and create HTML files containing block markup.\n\n\nGlobal settings and styles (theme.json)\n\n\nIn classic themes, we write the styling rules in a style.css file. In block themes, styling is more challenging because CSS comes from different sources (e.g. core blocks, themes, and users). WordPress 5.8 introduced a concept of Global Styles — which is essentially a theme.json file — that, according to the docs, consolidate “the various APIs related to styles into a single point – a theme.json file that should be located inside the root of the theme directory.“\n\n\n\n\n\n\n\nThe theme.json file is said to have been designed to offer more granular styling structure for theme authors with options to manage and customize the CSS styles coming from various origins. For example, a theme author may set certain styling features that are hidden from users, define default colors, font sizes and other features available to the user, and may set the default layout of the editor as well. Plus, theme.json allows you to customize styling on a per-block basis. It’s powerful, flexible, and super maintainable!\n\n\n\nThe block editor is expected to provide all the basic styling that theme authors are allowed to customize style, as defined by the theme.json file. However, the theme.json file could get quite long for a complex theme, and currently there is no way to partition it in a more digestible way. There is a GitHub ticket to restructure it so that different theme.json files map to theme hierarchy to /styles folder. That would be a nice enhancement for developer experience.\n\n\n\nThe default Twenty Twenty-Two theme is a good example of how WordPress full-site editing features use theme.json for global settings and styling blocks.\n\n\nWordPress Block Theme approaches\n\n\nMaybe you’ve always made WordPress themes from scratch. Perhaps you’ve relied on the Underscores theme as a starting point. Or maybe you have a favorite theme you extend with a child theme. The new features of the WordPress Site Editor really change the way we make themes.\n\n\n\nFollowing are a few emerging strategies for block-based theme development that are deeply integrated with the WordPress Site Editor.\n\n\nUniversal themes\n\n\nThe Automattic team has built a Blockbase universal theme that’s dubbed as a new way to build themes, sort of similar to the Underscores starter theme. The Blockbase theme provides temporary “ponyfill” styles that the block editor “does not yet take into account on theme.json ‘custom’ properties” and that may eventually become obsolete once the Gutenberg plugin fully matures and is integrated into WordPress Core.\n\n\n\nUsing the universal parent theme approach, the Automattic has already released eight Blockbase child themes, and several others are in progress over at GitHub.\n\n\nTwenty Twenty-Two default theme\n\n\nThe Twenty Twenty-Two default theme is another excellent starting point, as it’s really the first WordPress theme that ships with WordPress that is designed to work with the site editor.\n\n\n\nIn my opinion, this theme is excellent for theme developers who are already familiar with FSE features to showcase what is possible. For others users who are not developers and are not familiar with FSE features, customizations it in the block editor, then exporting it as a child theme could be painfully frustrating and overwhelming.\n\n\nHybrid themes\n\n\nThe concept of “Hybrid” themes in the context of FSE is discussed in this GitHub ticket. The idea is to provide paths for any user to use the site or template editor to override traditional theme templates.\n\n\n\nJustin Tadlock in this WP Tavern post predicts four types of themes — block only, universal, hybrid, and classic — and speculates that theme authors may split between “block themes and a mashup of classic/hybrid themes.”\n\n\n\nProof in the pudding is provided by Frank Klein in “What I Learned Building a Hybrid Theme”:\n\n\n\nA hybrid theme mixes the traditional theming approach with full-site editing features. A key component here is the theme.json file. It offers more control over the block editor’s settings, and simplifies styling blocks. A hybrid theme can use block templates as well, but that’s optional.\n\n\n\nFrank is the author of the Block-Based Bosco theme and has expanded further on what a “hybrid theme” is by creating a hybrid version of the default Twenty Twenty theme. The theme is available on GitHub. Currently, there are no hybrid themes in the WordPres Theme Directory.\n\n\nWordPress community themes\n\n\nAt the time of writing, there are 47 block-based themes with FSE features available in the theme directory. As expected, this approach is widely varied.\n\n\n\nFor example, in this post, Aino block theme author Ellen Bower discusses how they converted their classic theme into a block theme, detailing what makes a theme a “block” theme. The file structure of this approach looks different from the standard block theme structure we covered earlier.\n\n\n\nAnother popular block theme, Tove by Andars Noren, is described as a flexible base theme that follows the standard block theme file structure.\n\n\n\nThere’s also a very simple single page proof of the concept theme by Carolina Nymark that contains nothing but a single index.html called Miniblock OOAK. It’s already available in the theme directory, as is another one from Justin Tadlock that’s a work in progress (and he wrote up his process in a separate article).\n\n\nBlock Theme Generator app\n\n\nEven though we’ve already established how friendly WordPress Block Themes are for non-developers, there are tools that help create complete block themes or merely a customized theme.json file.\n\n\n\nDavid Gwyer, an Automattic engineer, has been working on a Block theme generator app which, at the time of writing, is in beta and available for testing by request.\n\n\n\n\n\n\n\nIn my brief testing, the app only allowed me to generate customized theme.json file. But Gwyer told to WP Tavern that the app isn’t fully baked just yet, but features are being added often. Once complete, this could be a very helpful resource for theme authors to create customized block themes.\n\n\nBlock themes that are currently in use\n\n\nThis Twitter thread from Carolina Nymark shows some examples of block themes that are live and in production at the time of this writing. In a recent Yoast article, Carolina listed a bunch of personal and business websites that use block themes.\n\n\nPersonal sites\n\n\nfemcreations.comhelen.blogRich TaborLesly.pizzadimonacook.comryelle.codes\n\n\nBusiness sites\n\n\nfullsiteediting.comsitefly.bewpvip.comAinoblockspagely.comfrostwp.comWP Tavern\n\n\n\nAs I mentioned earlier, I also have been using a block theme for one of my personal websites for a while. The default Twenty Twenty-Two theme also currently shows more than 60,000 active installs, which tells me there are many more examples of block-based theme implementations in the wild.\n\n\nBuilding Block Child Themes\n\n\nChild theming is still a thing in this new era of WordPress blocks, though something that’s still in early days. In other words, there is no clear approach to do make a block-based child theme, and there are no existing tools to help at the moment.\n\n\n\nThat said, a few approaches for creating WordPress child block themes are emerging.\n\n\nCreate Blockbase Theme plugin\n\n\nThe Automattic team is working on a plugin called Create Blockbase Theme. This will make it fairly trivial to create child themes based on the Blockbase universal theme we talked about earlier. Ben Dwyer has discussed how theme authors can build Blockbase child themes with simple six steps and without writing a line of code.\n\n\n\nI tested the plugin in my own local environment, making only small changes to my Blockbase theme install, and everything appeared to work. Just note that the plugin is still experimental and under development, though you can follow the roadmap to see what’s up.\n\n\nUsing an alternate theme.json file\n\n\nKjell Reigstad, author of the default WordPress Twenty Twenty-Two theme, demonstrates how swapping a single theme.json file with another theme.json file that contains different style configurations can change the look and feel of a block-based theme design.\n\n\n\nLast week I created a quick demo of how the visual aesthetic of Twenty Twenty-Two can be drastically changed through its theme.json settings. This example swaps the default json file for one with different font, color, duotone, and spacing values. pic.twitter.com/ab9tyGwLOS— kjellr (@kjellr) October 22, 2021 \n\n\n\nKjell has opened a pull request that shows off several experimental child themes that are available for testing at the GitHub theme-experiment GitHub repository.\n\n\n\n\n\n\n\nAlong these same lines, Ryan Welcher is in the process of developing a theme.json builder tool that will generate a customized theme.json file to facilitate non-coders to create similar child themes. More can be found in this WP Tavern post.\n\n\n\nThe Framboise child theme (available in theme directory) is an early example of that approach which includes only a single theme.json file.\n\n\nIs there even a need for child themes?\n\n\nRich Tabor asks the question:\n\n\n\nIf a theme consist of JSON and block templates that can both be modified via Global Styles, then what are child themes for?— Rich Tabor (@richard_tabor) October 25, 2021\n\n\n\nIndeed, a single theme.json file could serve as a child theme on its own. There is an ongoing discussion about allowing theme authors to ship multiple theme.json files with block themes that offer multiple global style variations. This way, a WordPress user could pick one of the variations to use on the site.\n\n\n\nSome features of global style variations are already included in Gutenberg v12. 5 and expected to be available with WordPress 6.0.\n\n\nSome personal thoughts\n\n\nI’d be remiss to end this without weighing in on all this from a personal level. I’ll do this briefly in a few points.\n\n\nBlock themes are a WordPress answer to Jamstack criticisms\n\n\nJamstack enthusiasts have lobbed criticisms at the WordPress platform, most notably that WordPress themes are bloated with PHP files. Well, that’s no longer the case with WordPress Block Themes.\n\n\n\nWe saw earlier how an entire theme can be a single index.html file and a theme.json file. No bloat there. And nothing but markup.\n\n\nI miss the WordPress Customizer\n\n\nEspecially the ability to inject custom code. From here on out, it’s going to require a deep level of familiarity with the WordPress Site Editor UI to accomplish the same thing. \n\n\nCustomizations a site is easy-peasy.\n\n\nCustomizing a classic theme — even something as minimal as changing fonts — can be difficult if you don’t know what you’re doing. That’s changed now with the site editor and the introduction of the theme.json file, where a theme can be customized (and even exported!) without writing a single line of code.\n\n\n\nI still hold my opinion, though that the site editor interface is confusing. I think a pleasant user experience is a far ways off but looking forward to the next WordPress 6.0 release for better user experience.\n\n\nBarriers to designing themes is getting lower.\n\n\nIt’s less about PHP and template files, and more about developing patterns and creating content. That sounds exactly what a content management system should be designed to do! I am already excited with new features being considered for the WordPress 6.0 release.\n\n\nResources\n\n\nThere is already a ton of other articles that cover WordPress Block Themes, full-site editing, and the block editor. And many of those came before WordPress 5.9 was released!\n\n\n\nSo, in addition to this article, here’s a collection of others for you to consider as you begin or continue down your journey of WordPress blocks and site editing.\n\n\nWordPress 5.9\n\n\nIntroducing WordPress 5.9 (official release video)Exploring WordPress 5.9 (video by Ann McCarthy)Exploring Navigation Block (video by Ann McCarthy)Introducing Twenty Twenty-Two (Kjell Reigstad)How 5.9 creates a strong foundation for the future (Gutenberg Times)What is full site editing (FSE) in WordPress? (Yoast)\n\n\nSite editor and block themes\n\n\nWordPress Block Editor HandbookWordPress Pattern DirectoryWordPress Theme Experiments (GitHub)WordPress Gutenberg Blocks Basics (video by WP Apprentice)Introduction to Block-based themes (video, Kjell Reigstad)Simple Site Design with Full Site Editing (Learn WordPress)How to use PHP templates in block themes (Carolina Nymark)\n\n\nSelected blog posts\n\n\nA New Era for WordPress Themes (Anders Noren)Gutenberg Full Site Editing and Block-Based Themes (The Publishing Project)So you want to make block patterns? (WordPress.org news)The theme.json horizon (Matia Ventura)Switching to a block-based theme (Kelly Ryelle)\n\n\nOther useful links\n\n\nWP Tavern: The site covers block themes, Gutenberg releases and plugins helping readers to learn what is new on World Press.Gutenberg Times: The site covers important Gutenberg news and links to related to block editor, full site editing, every week.Make WordPress Themes: Published meeting notes on themes and Gutenberg + Theme series.Make WordPress Core: Publishes new content following every Gutenberg release on a bi-weekly basis.\n\n\n\n\n\n\n\nAs expected in beta testing, the site editor is still intimating and confusing, nevertheless, I am finding it a fun to work with block themes. Indeed, I have been already modifying Twenty Twenty-Two as a child theme and plan to create style alternatives using single theme.json file.  \n\n\n\nHave you been using block themes in your project, if so, share your experience and thoughts; I love reading any comments and feedback!\n\nA Deep Introduction to WordPress Block Themes originally published on CSS-Tricks. You should get the newsletter.",
      "date_published": "2022-02-04T15:07:04.000Z",
      "date_modified": "2022-02-04T15:07:04.000Z",
      "_plugin": {
        "pageFilename": "a299eee96bf8fd1ac4808b448cf42a942c56a6c13d4c5539f7bb2c1832aa1715.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362884",
      "url": "https://css-tricks.com/building-a-newbie-friendly-codebase/",
      "title": "Building a newbie-friendly codebase",
      "summary": "Pedro Santos suggests:\n\nUsing naming conventions such that you can learn them once and apply them everywhere\nUnidirectional data flows. Make it easy to follow the app flow.\nNo magic numbers. I’d add they are even worse in CSS\n\n…\n\nBuilding a newbie-friendly codebase originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p><a href=\"https://doist.dev/posts/building-a-newbie-friendly-codebase\" rel=\"noopener\">Pedro Santos suggests</a>:</p>\n\n\n\n<ol><li>Using naming conventions such that you can learn them once and apply them everywhere</li><li>Unidirectional data flows. Make it easy to follow the app flow.</li><li>No magic numbers. I&#8217;d add they are <a href=\"https://css-tricks.com/magic-numbers-in-css/\">even worse in CSS</a> as it&#8217;s both the confusion they cause and how they are often tied to awkward or incorrect assumptions.</li><li>Using data structures. Like state machines.</li><li>Testing everything</li><li>Good code &gt; good comments</li><li>Avoiding acronyms</li><li>Refactoring opportunistically</li></ol>\n\n\n\n<p></p>\n\n\n\n<p></p>\n<p><a href=\"https://doist.dev/posts/building-a-newbie-friendly-codebase\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/building-a-newbie-friendly-codebase/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/building-a-newbie-friendly-codebase/\">Building a newbie-friendly codebase</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Pedro Santos suggests:\n\n\n\nUsing naming conventions such that you can learn them once and apply them everywhereUnidirectional data flows. Make it easy to follow the app flow.No magic numbers. I’d add they are even worse in CSS as it’s both the confusion they cause and how they are often tied to awkward or incorrect assumptions.Using data structures. Like state machines.Testing everythingGood code > good commentsAvoiding acronymsRefactoring opportunistically\n\n\n\n\n\n\n\n\nTo Shared Link — Permalink on CSS-Tricks\nBuilding a newbie-friendly codebase originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-02-03T22:32:58.000Z",
      "date_modified": "2022-02-03T22:32:58.000Z",
      "_plugin": {
        "pageFilename": "443515a5828b42dcd96510c6829ea3882c0503192a30893719f59dd82a2848a5.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362578",
      "url": "https://css-tricks.com/thierry-koblentz-atomic-css/",
      "title": "The Making of Atomic CSS: An Interview With Thierry Koblentz",
      "summary": "I interviewed Thierry Koblentz, creator of Atomic CSS, to understand the history and background that led to making of the popular CSS framework. Thierry, now retired, has vast experience writing CSS at large scale and has previously worked …\n\nThe Making of Atomic CSS: An Interview With Thierry Koblentz originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I interviewed <a href=\"https://twitter.com/7h1322yk0813n72\" rel=\"noopener\">Thierry Koblentz</a>, creator of <a href=\"https://acss.io/\" rel=\"noopener\">Atomic CSS</a>, to understand the history and background that led to making of the popular CSS framework. Thierry, now retired, has vast experience writing CSS at large scale and has previously worked as a front-end engineer at Yahoo!.</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\" style=\"flex-basis:66.66%\">\n<p>Thierry is widely credited with bringing the concept of Atomic CSS to the mainstream, thanks to his now classic 2013 article on Smashing Magazine, <a href=\"https://www.smashingmagazine.com/2013/10/challenging-css-best-practices-atomic-approach/\" rel=\"noopener\">“Challenging CSS Best Practices.”</a> That article paved the way for many popular CSS libraries over the years. In this interview, Thierry returns to chronicle the history of Atomic CSS and reflect on its ongoing legacy.</p>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:33.33%\">\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/thierry.jpg?resize=200%2C200&#038;ssl=1\" alt=\"Photo of Thierry Koblentz smiling.\" class=\"wp-image-362586\" width=\"200\" height=\"200\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/thierry.jpg?w=400&amp;ssl=1 400w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/thierry.jpg?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/thierry.jpg?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/thierry.jpg?resize=100%2C100&amp;ssl=1 100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Thierry Koblentz</figcaption></figure>\n</div>\n</div>\n\n\n\n<span id=\"more-362578\"></span>\n\n\n<h3 id=\"rolling-back-the-years-to-the-early-2000s-how-did-you-get-into-web-development-especially-writing-css-to-make-a-living\">Rolling back the years to the early 2000’s, how did you get into web development, especially writing CSS to make a living?</h3>\n\n\n<p><strong>Thierry Koblentz:</strong> I taught myself HTML, CSS, and JavaScript as a hobby after moving to the U.S. in 1997.</p>\n\n\n\n<p>At the time, I was using FrontPage and was relying heavily on Newsgroups for guidance. I quickly became a regular on Macromedia NewsGroups and on <a href=\"https://www.css-discuss.org/\" rel=\"noopener\">CSS-Discuss</a>. Early on, I espoused the philosophy of the <a href=\"https://en.wikipedia.org/wiki/Web_Standards_Project\" rel=\"noopener\">Web Standard Project</a> and got really interested in Accessibility. For years, front-end was nothing more than a hobby for me (my real job was an antique dealer). I would create a website once in a while but I was mostly writing and publishing (many) articles, sharing techniques I&#8217;d learned or &#8220;discovered.&#8221;</p>\n\n\n\n<p>This paid off in the form of a phone call from Yahoo! in 2007, asking if I could help fixing and building stylesheets for the Yahoo! Site Solutions (YSS) website builder template. The job description: no HTML, no JavaScript, just CSS! <em>And a lot of it!</em></p>\n\n\n<h3 id=\"what-was-your-day-job-at-yahoo-like\">What was your day job at Yahoo! like?</h3>\n\n\n<p><strong>TK:</strong> My role at Yahoo! changed a lot through the years.</p>\n\n\n\n<p>My first job was to create stylesheets (à la <a href=\"http://www.csszengarden.com\" rel=\"noopener\">CSS Zen Garden</a>) for the YSS template. I then rewrote the markup and styles of the YSS website just before YSS was &#8220;shipped&#8221; to Bangalore (India) — where I was sent with my colleagues for &#8220;transfer of knowledge&#8221; purposes.</p>\n\n\n\n<p>As a sidenote, it was the challenge of swapping stylesheets to create different designs for YSS that forced us to find a <em>light</em> (non-js) solution for resizing videos on the fly; and that&#8217;s how I came up with <a href=\"https://alistapart.com/article/creating-intrinsic-ratios-for-video/\" rel=\"noopener\">&#8220;Creating Intrinsic Ratios for Video.&#8221;</a></p>\n\n\n\n<p>After YSS, I had the opportunity to only work on projects that started <em>from scratch</em> (rewrites or otherwise) and I got more and more involved with Yahoo! FE. I edited and created many internal docs (i.e. CSS Coding Standards); participated in the hiring process (like everybody else in my team); led code review sessions; ran CSS classes and workshops; spoke at FED London; helped other teams with HTML/CSS/accessibility; was involved in decisions regarding technology adoption (i.e. Bootstrap or not Bootstrap); created libraries; reviewed internal papers; wrote proposals; etc.</p>\n\n\n\n<p>Another sidenote, during my eight years at Yahoo!, I may have written less than 100 lines of JavaScript. And if I didn&#8217;t quit or get fired from my job, it is thanks to <a href=\"https://www.linkedin.com/in/lingyan-zhu-a867795/\" rel=\"noopener\">Lingyan Zhu</a> and <a href=\"https://www.linkedin.com/in/renatoiwashima/\" rel=\"noopener\">Renato Iwashima</a>; they helped me tirelessly when it came to setting up my environment or dealing with the command line (because, to this day, I am terrible at that).</p>\n\n\n<h3 id=\"what-were-the-popular-css-writing-practices-prevalent-at-the-time\">What were the popular CSS writing practices prevalent at the time?</h3>\n\n\n<p><strong>TK:</strong> In the early days, there were neither libraries nor published methodologies; it was the Wild West, everything went: &#8220;non-semantic&#8221; classes, IDs, CSS hacks, conditional comments, frames, CSS expressions, &#8220;JS sniffing,&#8221; designing primarily for Internet Explorer, etc. On my old website, I even had this comment:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!--MSIE5 Mac needs this comment --></code></pre>\n\n\n\n<p>Everything was fair game and everything was abused as we had a very limited set of tools with the demand to do a lot.</p>\n\n\n\n<p>But things had changed dramatically by the time I joined Yahoo!. Devs from the U.K. were strong supporters of <a href=\"https://css-tricks.com/short-history-wasp-web-standards-matter/\">Web Standards</a> and I credit them for greatly influencing how HTML and CSS were written at Yahoo!. Semantic markup was a reality and CSS was written following the Separation of Concern (SoC) principle to the &#8220;T&#8221; (which was overzealous for my liking at times though).</p>\n\n\n\n<p><a href=\"https://clarle.github.io/yui3/\" rel=\"noopener\">YUI</a> had CSS components but did not have a CSS framework yet. There was an in-house CSS library (called Lego) but I never had to use it. Methodologies and libraries, like OOCSS, SMACSS, ECSS (shoutout to <a href=\"https://ecss.benfrain.com/\" rel=\"noopener\">Ben</a>), BEM, Bootstrap, Pure, and others would come shortly after.</p>\n\n\n<h3 id=\"what-led-to-the-idea-of-atomic-css\">What led to the idea of Atomic CSS?</h3>\n\n\n<p><strong>TK:</strong> Before YSS was moved to India, my manager, <a href=\"https://www.linkedin.com/in/pmichaelmontesano/\" rel=\"noopener\">Michael Montesano</a>, asked if there was a way for the new team in Bangalore to avoid having to edit the stylesheet, and thus <em>reducing the risks of breakage</em>. I guess the YSS template experience (paying customers complaining about broken pages) made him pretty paranoid when it came to making any change to a stylesheet.</p>\n\n\n\n<p>So I created a &#8220;utility-sheet&#8221; in the spirit of my <a href=\"https://web.archive.org/web/20100219215305/http://www.ez-css.org/layouts\" rel=\"noopener\">ez-css</a> library — a sheet meant to let developers achieve their styling <em>without the need to edit or add rules in a stylesheet</em>.</p>\n\n\n\n<p>A couple of years later, Michael, then Director of Engineering, asked me if I could redesign Yahoo!’s <a href=\"https://my.yahoo.com/\" rel=\"noopener\">Home Page</a> using utility classes <em>only</em>, knowing that, once again, we wouldn’t be in charge of the website maintenance. We talked about prioritizing utility classes <em>over</em> semantic classes, something I don&#8217;t think existed at such a level at the time. It was a very bold move.</p>\n\n\n\n<p>This large scale exercise quickly became a proof of concept that showed the many benefits that came with styling <em>via markup</em>. It checked so many boxes that it was decided that we&#8217;d use that &#8220;static&#8221; stylesheet (called Stencil) to redesign the Yahoo! My Home Page product.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1630\" height=\"754\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/acss-header.png?resize=1630%2C754&#038;ssl=1\" alt=\"Screenshot of the Atomic CSS homepage. The background is bright blue with white text that says Atomic CSS on Steroids with a Get Started button below. At the bottom is a small blurb that reads CSS for component-based frameworks.\" class=\"wp-image-362582\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/acss-header.png?w=1630&amp;ssl=1 1630w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/acss-header.png?resize=300%2C139&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/acss-header.png?resize=1024%2C474&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/acss-header.png?resize=768%2C355&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/acss-header.png?resize=1536%2C711&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/acss-header.png?resize=1000%2C463&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"what-were-the-guiding-principles-while-designing-atomic-css-acss-and-who-were-the-people-involved\">What were the guiding principles while designing Atomic CSS (ACSS) and who were the people involved?</h3>\n\n\n<p><strong>TK:</strong> Our Stencil library being static was a great tool to impose/enforce a design style — which we thought Yahoo! was about to adopt across all its properties. We quickly realized that this was not going to happen. Every Yahoo! design team had their own view of what was the perfect font size, the perfect margin, etc., and we were constantly receiving requests to add very specific styles to the library.</p>\n\n\n\n<p>That situation was unmaintainable so we decided to come up with a tool that would let developers <em>create their own styles on the fly</em>, while respecting the Atomic nature of the authoring method. And that&#8217;s how <a href=\"https://acss.io/guides/atomizer.html\" rel=\"noopener\">Atomizer</a> was born. We stopped worrying about adding styles — CSS declarations — and instead focused on creating a rich vocabulary to give developers a wide array of styling, like media queries, descendant selectors, and pseudo-classes, among other things.</p>\n\n\n\n<p>With <a href=\"https://acss.io\" rel=\"noopener\">ACSS</a>, developers were free to use whatever they wanted; hence teams were able to adopt different design styles and styles guides while using the exact same library. And there were some immediate benefits that were new to the way developers were used to writing styles. They no longer had to worry about breaking the page with their styling or worry about writing selectors to style their components.</p>\n\n\n\n<p>ACSS was built first and foremost to address Yahoo!’s problems and to work in Yahoo!’s environment.</p>\n\n\n\n<p>The people involved with Atomic CSS were <a href=\"https://acss.io/humans.txt\" rel=\"noopener\">Renato Iwashima, Steve Carlson, and myself</a>. Renato and Steve created <a href=\"https://acss.io/guides/atomizer.html\" rel=\"noopener\">Atomizer</a>.</p>\n\n\n<h3 id=\"what-misconceptions-do-people-have-about-css-when-they-dont-write-css-for-large-enterprises\">What misconceptions do people have about CSS when they don’t write CSS for large enterprises?</h3>\n\n\n<p><strong>TK:</strong> When I joined Yahoo! in 2007, I quickly learned how enormous a codebase could be. There were teams working across many locations/timezones; a myriad of products; hundreds of shared components; third-party code; A/B testing strategies; scaling as a requirement; different script directions; localization and internationalization; various release cycles; complex deployment mechanisms; tons of metrics; legacies of all sorts; strict coding standards; build processes; politics; and more politics; etc.</p>\n\n\n\n<p>Most of that was totally new to me and I had to learn if and how any of it could influence the way I was writing CSS. I started to revisit and challenge all my beliefs as many techniques or methods that were common practice to me seemed to be unfit, or at least counter-productive, for complex apps.</p>\n\n\n\n<p>One “reality check” relates to style abstraction. We all have read articles saying that mapping a <code>M-10</code> class to <code>margin: 10px</code> was not a good idea as it meant to edit <em>both the HTML and CSS</em> to change the styling. Unfortunately, this is what happens in large/complex projects:</p>\n\n\n\n<ul><li><strong>Designer:</strong> I want a <code>15px</code> gap</li><li><strong>Developer:</strong> OK, that&#8217;s <code>M-3x</code> (<code>5px</code> increment)</li><li><strong>Designer:</strong> Sure, whatever!</li><li><strong>Developer:</strong> Done!</li><li><strong>Designer:</strong> Actually, <code>15px</code> is a bit too big, can you make it <code>12px</code>?</li><li><strong>Developer:</strong> No, we don&#8217;t have that, it&#8217;s either <code>10px</code> or <code>15px</code>.</li><li><strong>Designer:</strong> Sorry, that doesn&#8217;t work for me. Can we change <code>M-3x</code> to be <code>12px</code>?</li><li><strong>Developer:</strong> Nope! We can&#8217;t do that because other teams expect <code>M-3x</code> to be <code>15px</code>.</li><li><strong>Designer:</strong> OK, try to figure a way because we want the margin to be <code>12px</code>. <code>15px</code> is too much and <code>10px</code> is too little.</li><li><strong>Developer:</strong> (F*ck this!)</li></ul>\n\n\n\n<p>To anticipate such a problem, one needs to understand the designer&#8217;s intent behind their request: is the style chosen because of its abstraction, e.g. color primary, or for its specific value, e.g. a margin of <code>15px</code> in our <code>M-3x</code> case? If a style guide exists to enforce design principles, then classes like <code>M-3x</code> may be OK, but if design teams can request <em>any style</em> they want, then it is much safer to stay away from naming conventions that will lead to ambiguous styling. In my experience, anything ambiguous leads, sooner or later, to breakages.</p>\n\n\n\n<p>Relying on the structure of a document or component for its styling — via combinators like <code>&gt;</code> or <code>+</code> — sounds like a clean approach to authoring a stylesheet, but it is ignoring the fact that in a complex environment one cannot assume any specific markup, or construct, to be immutable.</p>\n\n\n\n<p>You think <code>z-index</code> is complicated? Think again when you do not even own the scope of the stack your component lives in. That&#8217;s one of the most complex issues to address in a large project where teams are in charge of different parts of the page. I once wrote a <a href=\"https://www.sitepoint.com/managing-css-stacking-contexts-hostile-environment/\" rel=\"noopener\">proposal</a> about this.</p>\n\n\n\n<p>Qualifying selectors — like <code>input.required</code> vs. <code>.input.required</code> — may look good and semantic but it creates an unnecessary specificity level — like <a href=\"https://polypane.app/css-specificity-calculator/\" rel=\"noopener\">0.1.1 vs. 0.2.0</a> — and prevents markup change; two things easy to avoid by making sure you do not qualify your selector.</p>\n\n\n\n<p>Relying on the universal selector, <code>*</code>, for styling global scope? In a very large project, it could mean you are styling someone else&#8217;s component. Don&#8217;t make styling decisions for people unless you know their requirements.</p>\n\n\n\n<p>I am sure you have read that IDs are bad and that specificity is evil but. in fact. high specificity is not as much of a problem as the number of specificity levels your rules create. It is much easier to style within an environment where only two or three levels exist — like 1.1.0, 0.1.0, 0.2.0 — rather than an environment where specificity is rather low but follows a &#8220;free for all&#8221; approach — like 0.1.0, 0.1.1, 0.2.0, 0.2.1, 0.2.2, etc. — which often comes as a defensive mechanism in large projects as a mean to &#8220;sandbox&#8221; styles.</p>\n\n\n\n<p>Blindly following advice from the CSS community may lead to unpleasant surprises. Never jump on new techniques that have not yet been battle tested. Remember <a href=\"https://web.archive.org/web/20170606134841/http://cssmojo.com/the-dark-side-of-the-will-change-property/\" rel=\"noopener\"><code>will-change</code></a>? And always know what every style you use does or may trigger. For example, <code>position</code> can create a stacking context and a containing block, while <code>overflow</code> can create a block-formatting context.</p>\n\n\n\n<p>In my experience, knowing CSS inside-out is not enough to write CSS efficiently for a large organization. During my tenure at Yahoo!, I often found myself in contradiction with people I used to be aligned with years before. <strong>The environment is brutal and one needs to be very pragmatic to avoid many pitfalls.</strong> Next time you look at the source code of a large project and see something that makes no sense to you, remember this <a href=\"https://twitter.com/slicknet/status/300625746966241280\" rel=\"noopener\">tweet</a> from Nicholas Zakas:</p>\n\n\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Instead of assuming that people are dumb, ignorant, and making mistakes, assume they are smart, doing their best, and that you lack context.</p>— Nicholas C. Zakas (@slicknet) <a href=\"https://twitter.com/slicknet/status/300625746966241280?ref_src=twsrc%5Etfw\" rel=\"noopener\">February 10, 2013</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n<h3 id=\"how-was-yahoos-transition-to-atomic-css-received-internally\">How was Yahoo!’s transition to Atomic CSS received internally?</h3>\n\n\n<p><strong>TK:</strong> ACSS was well accepted by our My Home Page team, but it didn&#8217;t go well outside of that. Our first interaction was with the Sports team based in Santa Monica. Steve and I were in a conference call trying to convince the developers that not following the Separation of Concern&#8217; principle was the way to go and that it would not create chaos. </p>\n\n\n\n<p>We pointed them to a piece that <a href=\"https://nicolasgallagher.com/about-html-semantics-front-end-architecture/\" rel=\"noopener\">Nicolas Gallagher</a> had recently written, thinking that an article from an &#8220;outsider&#8221; would help, but nope! Things didn&#8217;t go well and there was a lot of friction. The main issue was the fact that the library was made of utility classes, but its <em>syntax</em> did not help to ease the conversation.</p>\n\n\n\n<p>I recall also meeting with the Mail team who didn&#8217;t push back on the idea of Atomic CSS, but wanted to come up with their own JavaScript approach to use “plain” CSS declarations — as they <em>could not stand</em> the ACSS syntax. In any case, the <em>data</em> in favor of the library (~36% less <a href=\"https://youtu.be/ojj_-6Xiud4?t=2152\" rel=\"noopener\">CSS</a> <em>and</em> <a href=\"https://youtu.be/ojj_-6Xiud4?t=2028\" rel=\"noopener\">HTML</a>) was speaking for itself, so ACSS was eventually adopted. And today, seven-plus years later, Yahoo! Home Page, Yahoo! Sports, Yahoo! News, Yahoo! Finance, and other Yahoo! Products are all still using ACSS.</p>\n\n\n\n<p>To better understand how an approach like ACSS can benefit projects where component reusability is paramount, copy the markup of a component from <a href=\"https://finance.yahoo.com\" rel=\"noopener\">Yahoo! Finance</a> and paste it inside <a href=\"https://news.yahoo.com\" rel=\"noopener\">Yahoo! News</a>. That component should look like it belongs to the page. This is because ACSS makes these components page agnostic.</p>\n\n\n<h3 id=\"how-did-the-idea-of-using-parentheses-for-class-names-manifest-was-the-syntax-inspired-from-how-functions-are-written\">How did the idea of using parentheses for class names manifest? Was the syntax inspired from how functions are written?</h3>\n\n\n<p><strong>TK:</strong> We had identified — through many iterations — two sets of “candidates” to be used as delimiters for property values: parentheses, <code>()</code>, and brackets, <code>[]</code>.</p>\n\n\n\n<p>Renato remembers that we picked parentheses over brackets because of familiarity with functions in JavaScript, even if it came at the cost of an extra <code>Shift</code> keystroke. The ACSS <a href=\"https://acss.io/guides/syntax.html\" rel=\"noopener\">syntax</a> was designed to:</p>\n\n\n\n<ul><li>facilitate the automatic generation of rules, via <a href=\"https://acss.io/guides/atomizer.html\" rel=\"noopener\">Atomizer</a></li><li>allow developers to create any arbitrary or complex styles they want</li><li>reduce the learning curve to a minimum</li></ul>\n\n\n\n<p>It looks like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[&lt;context>[:&lt;pseudo-class>]&lt;combinator>]&lt;Style>[(&lt;value>,&lt;value>?,...)][&lt;!>][:&lt;pseudo-class>][::&lt;pseudo-element>][--&lt;breakpoint_identifier>]</code></pre>\n\n\n\n<p>Developers build their classes following the above construct. The core syntax is based on <a href=\"https://docs.emmet.io/css-abbreviations/\" rel=\"noopener\">Emmet</a>, a popular toolkit. We adopted the Emmet approach to reduce idiosyncrasies as core classes are explicit property/value pairs rather than <em>arbitrary</em> strings.</p>\n\n\n\n<p>We also created a dozen of <a href=\"https://acss.io/guides/helper-classes.html\" rel=\"noopener\">helper</a> classes. Those apply multiple style declarations and are either shortcuts, like hiding content from sighted users, or hacks, like using <code>.Cf</code> for clearfix. And we gave developers even more latitude through the use of a config file in which they can create variables — like <code>.PrimaryColor</code> — breakpoints, and much more.</p>\n\n\n\n<p>People who’ve never worked with ACSS will tell you that the syntax is too weird (at best), but people familiar with it will tell you it’s <em>clever in many ways</em>.</p>\n\n\n<h3 id=\"talk-about-how-your-challenging-css-best-practices-article-for-smashing-magazine-came-to-fruition\">Talk about how your “Challenging CSS Best Practices” article for Smashing Magazine came to fruition?</h3>\n\n\n<p><strong>TK:</strong> I had written many articles in various online publications before, so it was natural for me to write an article about this &#8220;challenging&#8221; approach.</p>\n\n\n\n<p>Yahoo! was sponsoring a front-end conference in October 2013 where Renato had a talk scheduled to present our solution, and I was trying to get the article published before that. I chose to not publish it on Yahoo! Developer Network because the website did not offer a comment section. A List Apart could not publish it in time, but Smashing Magazine accelerated its review process to be able to publish the piece before the end of October.</p>\n\n\n\n<p>My choice of going with a publisher who had a comment section paid off as the article received 200-plus comments which turned out to be very time consuming — and frustrating — for me who had to respond to them.</p>\n\n\n<h3 id=\"does-it-feel-strange-that-the-article-still-carries-the-disclaimer-about-the-techniques-discussed-even-though-it-is-widely-popular-in-the-industry-now\">Does it feel strange that the article still carries the disclaimer about the techniques discussed, even though it is widely popular in the industry now?</h3>\n\n\n<p><strong>TK:</strong> When the article was published, I told Vitaly [Friedman, Smashing Magazine co-founder] that that note sounded like some type of a disclaimer to me; that it would sway people in their reading of the article. But I didn&#8217;t really push back as I understood where Vitaly was coming from. I do find it amusing that note is still there now this methodology has become mainstream.</p>\n\n\n<h3 id=\"given-that-hindsight-is-2020-is-there-anything-that-you-want-to-change-about-atomic-css\">Given that hindsight is 20/20, is there anything that you want to change about Atomic CSS?</h3>\n\n\n<p><strong>TK:</strong> There is always room for improvement, even more so when you’ve pioneered the solution. You can’t look at what others have done to learn from their mistakes or shortcomings. You don’t have material to improve upon. So, it’d be pretentious for us to think we nailed it on our first try.</p>\n\n\n\n<p>On the Atomic CSS side, we had a lot of experience for having developed and used a “static” stylesheet on a large project for more than a year. But on the dynamic side — the tooling side — it’s not like we could find much inspiration out there. Remember that it took <em>six years</em> for other libraries to follow suit.</p>\n\n\n\n<p>In French, we say: <em>essuyer les plâtres.</em></p>\n\n\n\n<p>One mistake we made was to use “Atomic CSS&#8221; as the title for <a href=\"https://acss.io\" rel=\"noopener\">acss.io</a>, because as John Polacek <a href=\"https://css-tricks.com/lets-define-exactly-atomic-css/\">pointed out</a>, it created some confusion. We’ve changed that title since then.</p>\n\n\n\n<p>The only regret I have is how the community has treated Atomic CSS/ACSS through the years, which recently lead to a weird exchange, where somebody <strong>explained to me</strong> what “Atomic CSS” means:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The Atomic CSS library [ACSS] uses the name but I think this is misleading, because the feature you&#8217;re talking about is the dynamic style generation. &#8220;Atomic CSS&#8221; as a generic term designates small selectors as atoms, but they&#8217;re static.</p></blockquote>\n\n\n\n<p>Talk about being erased. ;)</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>A big thanks to Thierry for participating in this interview and allowing us to publish it for the community.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/thierry-koblentz-atomic-css/\">The Making of Atomic CSS: An Interview With Thierry Koblentz</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I interviewed Thierry Koblentz, creator of Atomic CSS, to understand the history and background that led to making of the popular CSS framework. Thierry, now retired, has vast experience writing CSS at large scale and has previously worked as a front-end engineer at Yahoo!.\n\n\n\n\n\nThierry is widely credited with bringing the concept of Atomic CSS to the mainstream, thanks to his now classic 2013 article on Smashing Magazine, “Challenging CSS Best Practices.” That article paved the way for many popular CSS libraries over the years. In this interview, Thierry returns to chronicle the history of Atomic CSS and reflect on its ongoing legacy.\n\n\n\n\n\nThierry Koblentz\n\n\n\n\n\n\n\n\nRolling back the years to the early 2000’s, how did you get into web development, especially writing CSS to make a living?\n\n\nThierry Koblentz: I taught myself HTML, CSS, and JavaScript as a hobby after moving to the U.S. in 1997.\n\n\n\nAt the time, I was using FrontPage and was relying heavily on Newsgroups for guidance. I quickly became a regular on Macromedia NewsGroups and on CSS-Discuss. Early on, I espoused the philosophy of the Web Standard Project and got really interested in Accessibility. For years, front-end was nothing more than a hobby for me (my real job was an antique dealer). I would create a website once in a while but I was mostly writing and publishing (many) articles, sharing techniques I’d learned or “discovered.”\n\n\n\nThis paid off in the form of a phone call from Yahoo! in 2007, asking if I could help fixing and building stylesheets for the Yahoo! Site Solutions (YSS) website builder template. The job description: no HTML, no JavaScript, just CSS! And a lot of it!\n\n\nWhat was your day job at Yahoo! like?\n\n\nTK: My role at Yahoo! changed a lot through the years.\n\n\n\nMy first job was to create stylesheets (à la CSS Zen Garden) for the YSS template. I then rewrote the markup and styles of the YSS website just before YSS was “shipped” to Bangalore (India) — where I was sent with my colleagues for “transfer of knowledge” purposes.\n\n\n\nAs a sidenote, it was the challenge of swapping stylesheets to create different designs for YSS that forced us to find a light (non-js) solution for resizing videos on the fly; and that’s how I came up with “Creating Intrinsic Ratios for Video.”\n\n\n\nAfter YSS, I had the opportunity to only work on projects that started from scratch (rewrites or otherwise) and I got more and more involved with Yahoo! FE. I edited and created many internal docs (i.e. CSS Coding Standards); participated in the hiring process (like everybody else in my team); led code review sessions; ran CSS classes and workshops; spoke at FED London; helped other teams with HTML/CSS/accessibility; was involved in decisions regarding technology adoption (i.e. Bootstrap or not Bootstrap); created libraries; reviewed internal papers; wrote proposals; etc.\n\n\n\nAnother sidenote, during my eight years at Yahoo!, I may have written less than 100 lines of JavaScript. And if I didn’t quit or get fired from my job, it is thanks to Lingyan Zhu and Renato Iwashima; they helped me tirelessly when it came to setting up my environment or dealing with the command line (because, to this day, I am terrible at that).\n\n\nWhat were the popular CSS writing practices prevalent at the time?\n\n\nTK: In the early days, there were neither libraries nor published methodologies; it was the Wild West, everything went: “non-semantic” classes, IDs, CSS hacks, conditional comments, frames, CSS expressions, “JS sniffing,” designing primarily for Internet Explorer, etc. On my old website, I even had this comment:\n\n\n\n<!--MSIE5 Mac needs this comment -->\n\n\n\nEverything was fair game and everything was abused as we had a very limited set of tools with the demand to do a lot.\n\n\n\nBut things had changed dramatically by the time I joined Yahoo!. Devs from the U.K. were strong supporters of Web Standards and I credit them for greatly influencing how HTML and CSS were written at Yahoo!. Semantic markup was a reality and CSS was written following the Separation of Concern (SoC) principle to the “T” (which was overzealous for my liking at times though).\n\n\n\nYUI had CSS components but did not have a CSS framework yet. There was an in-house CSS library (called Lego) but I never had to use it. Methodologies and libraries, like OOCSS, SMACSS, ECSS (shoutout to Ben), BEM, Bootstrap, Pure, and others would come shortly after.\n\n\nWhat led to the idea of Atomic CSS?\n\n\nTK: Before YSS was moved to India, my manager, Michael Montesano, asked if there was a way for the new team in Bangalore to avoid having to edit the stylesheet, and thus reducing the risks of breakage. I guess the YSS template experience (paying customers complaining about broken pages) made him pretty paranoid when it came to making any change to a stylesheet.\n\n\n\nSo I created a “utility-sheet” in the spirit of my ez-css library — a sheet meant to let developers achieve their styling without the need to edit or add rules in a stylesheet.\n\n\n\nA couple of years later, Michael, then Director of Engineering, asked me if I could redesign Yahoo!’s Home Page using utility classes only, knowing that, once again, we wouldn’t be in charge of the website maintenance. We talked about prioritizing utility classes over semantic classes, something I don’t think existed at such a level at the time. It was a very bold move.\n\n\n\nThis large scale exercise quickly became a proof of concept that showed the many benefits that came with styling via markup. It checked so many boxes that it was decided that we’d use that “static” stylesheet (called Stencil) to redesign the Yahoo! My Home Page product.\n\n\n\n\n\n\nWhat were the guiding principles while designing Atomic CSS (ACSS) and who were the people involved?\n\n\nTK: Our Stencil library being static was a great tool to impose/enforce a design style — which we thought Yahoo! was about to adopt across all its properties. We quickly realized that this was not going to happen. Every Yahoo! design team had their own view of what was the perfect font size, the perfect margin, etc., and we were constantly receiving requests to add very specific styles to the library.\n\n\n\nThat situation was unmaintainable so we decided to come up with a tool that would let developers create their own styles on the fly, while respecting the Atomic nature of the authoring method. And that’s how Atomizer was born. We stopped worrying about adding styles — CSS declarations — and instead focused on creating a rich vocabulary to give developers a wide array of styling, like media queries, descendant selectors, and pseudo-classes, among other things.\n\n\n\nWith ACSS, developers were free to use whatever they wanted; hence teams were able to adopt different design styles and styles guides while using the exact same library. And there were some immediate benefits that were new to the way developers were used to writing styles. They no longer had to worry about breaking the page with their styling or worry about writing selectors to style their components.\n\n\n\nACSS was built first and foremost to address Yahoo!’s problems and to work in Yahoo!’s environment.\n\n\n\nThe people involved with Atomic CSS were Renato Iwashima, Steve Carlson, and myself. Renato and Steve created Atomizer.\n\n\nWhat misconceptions do people have about CSS when they don’t write CSS for large enterprises?\n\n\nTK: When I joined Yahoo! in 2007, I quickly learned how enormous a codebase could be. There were teams working across many locations/timezones; a myriad of products; hundreds of shared components; third-party code; A/B testing strategies; scaling as a requirement; different script directions; localization and internationalization; various release cycles; complex deployment mechanisms; tons of metrics; legacies of all sorts; strict coding standards; build processes; politics; and more politics; etc.\n\n\n\nMost of that was totally new to me and I had to learn if and how any of it could influence the way I was writing CSS. I started to revisit and challenge all my beliefs as many techniques or methods that were common practice to me seemed to be unfit, or at least counter-productive, for complex apps.\n\n\n\nOne “reality check” relates to style abstraction. We all have read articles saying that mapping a M-10 class to margin: 10px was not a good idea as it meant to edit both the HTML and CSS to change the styling. Unfortunately, this is what happens in large/complex projects:\n\n\n\nDesigner: I want a 15px gapDeveloper: OK, that’s M-3x (5px increment)Designer: Sure, whatever!Developer: Done!Designer: Actually, 15px is a bit too big, can you make it 12px?Developer: No, we don’t have that, it’s either 10px or 15px.Designer: Sorry, that doesn’t work for me. Can we change M-3x to be 12px?Developer: Nope! We can’t do that because other teams expect M-3x to be 15px.Designer: OK, try to figure a way because we want the margin to be 12px. 15px is too much and 10px is too little.Developer: (F*ck this!)\n\n\n\nTo anticipate such a problem, one needs to understand the designer’s intent behind their request: is the style chosen because of its abstraction, e.g. color primary, or for its specific value, e.g. a margin of 15px in our M-3x case? If a style guide exists to enforce design principles, then classes like M-3x may be OK, but if design teams can request any style they want, then it is much safer to stay away from naming conventions that will lead to ambiguous styling. In my experience, anything ambiguous leads, sooner or later, to breakages.\n\n\n\nRelying on the structure of a document or component for its styling — via combinators like > or + — sounds like a clean approach to authoring a stylesheet, but it is ignoring the fact that in a complex environment one cannot assume any specific markup, or construct, to be immutable.\n\n\n\nYou think z-index is complicated? Think again when you do not even own the scope of the stack your component lives in. That’s one of the most complex issues to address in a large project where teams are in charge of different parts of the page. I once wrote a proposal about this.\n\n\n\nQualifying selectors — like input.required vs. .input.required — may look good and semantic but it creates an unnecessary specificity level — like 0.1.1 vs. 0.2.0 — and prevents markup change; two things easy to avoid by making sure you do not qualify your selector.\n\n\n\nRelying on the universal selector, *, for styling global scope? In a very large project, it could mean you are styling someone else’s component. Don’t make styling decisions for people unless you know their requirements.\n\n\n\nI am sure you have read that IDs are bad and that specificity is evil but. in fact. high specificity is not as much of a problem as the number of specificity levels your rules create. It is much easier to style within an environment where only two or three levels exist — like 1.1.0, 0.1.0, 0.2.0 — rather than an environment where specificity is rather low but follows a “free for all” approach — like 0.1.0, 0.1.1, 0.2.0, 0.2.1, 0.2.2, etc. — which often comes as a defensive mechanism in large projects as a mean to “sandbox” styles.\n\n\n\nBlindly following advice from the CSS community may lead to unpleasant surprises. Never jump on new techniques that have not yet been battle tested. Remember will-change? And always know what every style you use does or may trigger. For example, position can create a stacking context and a containing block, while overflow can create a block-formatting context.\n\n\n\nIn my experience, knowing CSS inside-out is not enough to write CSS efficiently for a large organization. During my tenure at Yahoo!, I often found myself in contradiction with people I used to be aligned with years before. The environment is brutal and one needs to be very pragmatic to avoid many pitfalls. Next time you look at the source code of a large project and see something that makes no sense to you, remember this tweet from Nicholas Zakas:\n\n\n\nInstead of assuming that people are dumb, ignorant, and making mistakes, assume they are smart, doing their best, and that you lack context.— Nicholas C. Zakas (@slicknet) February 10, 2013 \n\n\nHow was Yahoo!’s transition to Atomic CSS received internally?\n\n\nTK: ACSS was well accepted by our My Home Page team, but it didn’t go well outside of that. Our first interaction was with the Sports team based in Santa Monica. Steve and I were in a conference call trying to convince the developers that not following the Separation of Concern’ principle was the way to go and that it would not create chaos. \n\n\n\nWe pointed them to a piece that Nicolas Gallagher had recently written, thinking that an article from an “outsider” would help, but nope! Things didn’t go well and there was a lot of friction. The main issue was the fact that the library was made of utility classes, but its syntax did not help to ease the conversation.\n\n\n\nI recall also meeting with the Mail team who didn’t push back on the idea of Atomic CSS, but wanted to come up with their own JavaScript approach to use “plain” CSS declarations — as they could not stand the ACSS syntax. In any case, the data in favor of the library (~36% less CSS and HTML) was speaking for itself, so ACSS was eventually adopted. And today, seven-plus years later, Yahoo! Home Page, Yahoo! Sports, Yahoo! News, Yahoo! Finance, and other Yahoo! Products are all still using ACSS.\n\n\n\nTo better understand how an approach like ACSS can benefit projects where component reusability is paramount, copy the markup of a component from Yahoo! Finance and paste it inside Yahoo! News. That component should look like it belongs to the page. This is because ACSS makes these components page agnostic.\n\n\nHow did the idea of using parentheses for class names manifest? Was the syntax inspired from how functions are written?\n\n\nTK: We had identified — through many iterations — two sets of “candidates” to be used as delimiters for property values: parentheses, (), and brackets, [].\n\n\n\nRenato remembers that we picked parentheses over brackets because of familiarity with functions in JavaScript, even if it came at the cost of an extra Shift keystroke. The ACSS syntax was designed to:\n\n\n\nfacilitate the automatic generation of rules, via Atomizerallow developers to create any arbitrary or complex styles they wantreduce the learning curve to a minimum\n\n\n\nIt looks like this:\n\n\n\n[<context>[:<pseudo-class>]<combinator>]<Style>[(<value>,<value>?,...)][<!>][:<pseudo-class>][::<pseudo-element>][--<breakpoint_identifier>]\n\n\n\nDevelopers build their classes following the above construct. The core syntax is based on Emmet, a popular toolkit. We adopted the Emmet approach to reduce idiosyncrasies as core classes are explicit property/value pairs rather than arbitrary strings.\n\n\n\nWe also created a dozen of helper classes. Those apply multiple style declarations and are either shortcuts, like hiding content from sighted users, or hacks, like using .Cf for clearfix. And we gave developers even more latitude through the use of a config file in which they can create variables — like .PrimaryColor — breakpoints, and much more.\n\n\n\nPeople who’ve never worked with ACSS will tell you that the syntax is too weird (at best), but people familiar with it will tell you it’s clever in many ways.\n\n\nTalk about how your “Challenging CSS Best Practices” article for Smashing Magazine came to fruition?\n\n\nTK: I had written many articles in various online publications before, so it was natural for me to write an article about this “challenging” approach.\n\n\n\nYahoo! was sponsoring a front-end conference in October 2013 where Renato had a talk scheduled to present our solution, and I was trying to get the article published before that. I chose to not publish it on Yahoo! Developer Network because the website did not offer a comment section. A List Apart could not publish it in time, but Smashing Magazine accelerated its review process to be able to publish the piece before the end of October.\n\n\n\nMy choice of going with a publisher who had a comment section paid off as the article received 200-plus comments which turned out to be very time consuming — and frustrating — for me who had to respond to them.\n\n\nDoes it feel strange that the article still carries the disclaimer about the techniques discussed, even though it is widely popular in the industry now?\n\n\nTK: When the article was published, I told Vitaly [Friedman, Smashing Magazine co-founder] that that note sounded like some type of a disclaimer to me; that it would sway people in their reading of the article. But I didn’t really push back as I understood where Vitaly was coming from. I do find it amusing that note is still there now this methodology has become mainstream.\n\n\nGiven that hindsight is 20/20, is there anything that you want to change about Atomic CSS?\n\n\nTK: There is always room for improvement, even more so when you’ve pioneered the solution. You can’t look at what others have done to learn from their mistakes or shortcomings. You don’t have material to improve upon. So, it’d be pretentious for us to think we nailed it on our first try.\n\n\n\nOn the Atomic CSS side, we had a lot of experience for having developed and used a “static” stylesheet on a large project for more than a year. But on the dynamic side — the tooling side — it’s not like we could find much inspiration out there. Remember that it took six years for other libraries to follow suit.\n\n\n\nIn French, we say: essuyer les plâtres.\n\n\n\nOne mistake we made was to use “Atomic CSS” as the title for acss.io, because as John Polacek pointed out, it created some confusion. We’ve changed that title since then.\n\n\n\nThe only regret I have is how the community has treated Atomic CSS/ACSS through the years, which recently lead to a weird exchange, where somebody explained to me what “Atomic CSS” means:\n\n\n\nThe Atomic CSS library [ACSS] uses the name but I think this is misleading, because the feature you’re talking about is the dynamic style generation. “Atomic CSS” as a generic term designates small selectors as atoms, but they’re static.\n\n\n\nTalk about being erased. ;)\n\n\n\n\n\n\n\nA big thanks to Thierry for participating in this interview and allowing us to publish it for the community.\n\nThe Making of Atomic CSS: An Interview With Thierry Koblentz originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-02-03T15:24:01.000Z",
      "date_modified": "2022-02-03T15:24:01.000Z",
      "_plugin": {
        "pageFilename": "4c629c66f4ea46d9a567cd57289c9538b49f4a6ed77d248dcc70e3d9024b934d.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362893",
      "url": "https://css-tricks.com/building-a-scrollable-and-draggable-timeline-with-gsap/",
      "title": "Building a Scrollable and Draggable Timeline with GSAP",
      "summary": "Here’s a super classy demo from Michelle Barker over on Codrops that shows how to build a scrollable and draggable timeline with GSAP. It’s an interesting challenge to have two different interactions (vertical scrolling and horizontal dragging) be tied together …\n\nBuilding a Scrollable and Draggable Timeline with GSAP originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Here&#8217;s a <a href=\"https://tympanus.net/codrops/2022/01/03/building-a-scrollable-and-draggable-timeline-with-gsap/\" rel=\"noopener\">super classy demo from Michelle Barker</a> over on Codrops that shows how to build a scrollable and draggable timeline with GSAP. It&#8217;s an interesting challenge to have two different interactions (vertical scrolling and horizontal dragging) be tied together and react to each other. I love seeing it all done with nice semantic markup, code that&#8217;s easy to follow, clear abstractions, and accessibility considered all the way through.</p>\n\n\n\n<span id=\"more-362893\"></span>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_597a468071d4dce3f7bf0ce80d6cb8d3\" src=\"//codepen.io/anon/embed/597a468071d4dce3f7bf0ce80d6cb8d3?height=750&amp;theme-id=1&amp;slug-hash=597a468071d4dce3f7bf0ce80d6cb8d3&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 597a468071d4dce3f7bf0ce80d6cb8d3\" title=\"CodePen Embed 597a468071d4dce3f7bf0ce80d6cb8d3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n<p><a href=\"https://tympanus.net/codrops/2022/01/03/building-a-scrollable-and-draggable-timeline-with-gsap/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/building-a-scrollable-and-draggable-timeline-with-gsap/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/building-a-scrollable-and-draggable-timeline-with-gsap/\">Building a Scrollable and Draggable Timeline with GSAP</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Here’s a super classy demo from Michelle Barker over on Codrops that shows how to build a scrollable and draggable timeline with GSAP. It’s an interesting challenge to have two different interactions (vertical scrolling and horizontal dragging) be tied together and react to each other. I love seeing it all done with nice semantic markup, code that’s easy to follow, clear abstractions, and accessibility considered all the way through.\n\n\n\n\n\n\n\nCodePen Embed Fallback\nTo Shared Link — Permalink on CSS-Tricks\nBuilding a Scrollable and Draggable Timeline with GSAP originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-02-02T21:11:55.000Z",
      "date_modified": "2022-02-02T21:11:55.000Z",
      "_plugin": {
        "pageFilename": "481f6e91eddd9ed66ab4d25e313ff34d68a2d407bcbf76ce580c5e17e8904507.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362521",
      "url": "https://css-tricks.com/user-registration-authentication-firebase-react/",
      "title": "User Registration and Auth Using Firebase and React",
      "summary": "The ability to identify users is vital for maintaining the security of any applications. Equally important is the code that’s written to manage user identities, particularly when it comes to avoiding loopholes for unauthorized access to data held by an …\n\nUser Registration and Auth Using Firebase and React originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>The ability to identify users is vital for maintaining the security of any applications. Equally important is the code that’s written to manage user identities, particularly when it comes to avoiding loopholes for unauthorized access to data held by an application. Writing authentication code without a framework or libraries available can take a ton of time to do right — not to mention the ongoing maintainance of that custom code.</p>\n\n\n\n<p>This is where <a href=\"https://firebase.google.com/\" rel=\"noopener\">Firebase</a> comes to the rescue. Its ready-to-use and intuitive methods make setting up effective user identity management on a site happen in no time. This tutorial will work us through on how to do that: implementing user registration, verification, and authentication.</p>\n\n\n\n<span id=\"more-362521\"></span>\n\n\n\n<p><a href=\"https://firebase.googleblog.com/2021/08/deep-dive-into-the-new-firebase-js-sdk-design.html\" rel=\"noopener\">Firebase v9 SDK</a> introduces a new modular API surface, resulting in a change to several of its services, one of which is Firebase Authentication. This tutorial is current to the changes in v9.</p>\n\n\n\n<div class=\"wp-container-62045066da6aa wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://tammibriggs-firebase-user-auth.netlify.app\" rel=\"noopener\">View Demo</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/Tammibriggs/Firebase_user_auth/tree/main\" rel=\"noopener\">GitHub Repo</a></div>\n</div>\n\n\n\n<p class=\"is-style-explanation\">To follow along with this tutorial, you should be familiar with React, React hooks, and Firebase version 8. You should also have a Google account and Node installed on your machine.</p>\n\n\n<h2 class=\"simpletoc-title\">Table of Contents</h2><ul class=\"simpletoc\">\n<li>\n<a  href=\"#setting-up-firebase\">Setting up Firebase</a></li><li>\n<a  href=\"#cloning-and-setting-up-the-starter-repo\">Cloning and setting up the starter repo</a></li><li>\n<a  href=\"#integrating-firebase-into-our-react-app\">Integrating Firebase into our React app</a></li><li>\n<a  href=\"#creating-user-registration-functionality\">Creating User Registration functionality</a></li><li>\n<a  href=\"#managing-user-state-with-react-context-api\">Managing User State with React Context API</a></li><li>\n<a  href=\"#send-a-verification-email-to-a-registered-user\">Send a verification email to a registered user</a></li><li>\n<a  href=\"#working-on-the-user-profile-page\">Working on the user profile page</a></li><li>\n<a  href=\"#creating-a-private-route-for-the-profile-component\">Creating a Private Route for the Profile component</a></li><li>\n<a  href=\"#creating-login-functionality\">Creating login functionality</a></li><li>\n<a  href=\"#conclusion\">Conclusion</a></li><li>\n<a  href=\"#references\">References</a></li></ul>\n\n<h3 id=\"setting-up-firebase\">Setting up Firebase</h3>\n\n\n<p>Before we start using Firebase for our registration and authentication requirements, we have to first set up our Firebase project and also the authentication method we’re using.</p>\n\n\n\n<p>To add a project, make sure you are logged into your Google account, then navigate to the <a href=\"https://console.firebase.google.com/\" rel=\"noopener\">Firebase console</a> and click on <strong>Add project</strong>. From there, give the project a name (I’m using “Firebase-user-reg-auth”) and we should be all set to continue.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"979\" height=\"477\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639602653249_create-project.png?resize=979%2C477&#038;ssl=1\" alt=\"\" class=\"wp-image-362523\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639602653249_create-project.png?w=979&amp;ssl=1 979w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639602653249_create-project.png?resize=300%2C146&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639602653249_create-project.png?resize=768%2C374&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>You may be prompted to enable Google Analytics at some point. There’s no need for it for this tutorial, so feel free to skip that step.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1049\" height=\"573\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639603868869_firebase-project-page.png?resize=1049%2C573&#038;ssl=1\" alt=\"\" class=\"wp-image-362524\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639603868869_firebase-project-page.png?w=1049&amp;ssl=1 1049w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639603868869_firebase-project-page.png?resize=300%2C164&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639603868869_firebase-project-page.png?resize=1024%2C559&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639603868869_firebase-project-page.png?resize=768%2C420&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639603868869_firebase-project-page.png?resize=1000%2C546&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Firebase has various authentication methods for both mobile and web, but before we start using any of them, we have to first enable it on the Firebase Authentication page. From the sidebar menu, click on the <strong>Authentication</strong> icon, then, on the next page, click on <strong>Get started</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1089\" height=\"570\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639606421398_firebase-auth-methods.png?resize=1089%2C570&#038;ssl=1\" alt=\"\" class=\"wp-image-362525\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639606421398_firebase-auth-methods.png?w=1089&amp;ssl=1 1089w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639606421398_firebase-auth-methods.png?resize=300%2C157&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639606421398_firebase-auth-methods.png?resize=1024%2C536&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639606421398_firebase-auth-methods.png?resize=768%2C402&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639606421398_firebase-auth-methods.png?resize=1000%2C523&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We are going to use Email/Password authentication. Click on it and we will be prompted with a screen to enable it, which is exactly what we want to do.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"801\" height=\"384\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639606625227_email-pass-auth-method.png?resize=801%2C384&#038;ssl=1\" alt=\"\" class=\"wp-image-362526\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639606625227_email-pass-auth-method.png?w=801&amp;ssl=1 801w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639606625227_email-pass-auth-method.png?resize=300%2C144&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639606625227_email-pass-auth-method.png?resize=768%2C368&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"cloning-and-setting-up-the-starter-repo\">Cloning and setting up the starter repo</h3>\n\n\n<p>I have already created a simple template we can use for this tutorial so that we can focus specifically on learning how to implement the functionalities. So what we need to do now is clone the GitHub repo.</p>\n\n\n\n<p>Fire up your terminal. Here’s what we can run from the command line:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">git clone -b starter https://github.com/Tammibriggs/Firebase_user_auth.git\n\ncd Firebase_user_auth\n\nnpm install</code></pre>\n\n\n\n<p>I have also included Firebase version 9 in the dependency object of the <code>package.json</code> file. So, by running the <code>npm install</code> command, Firebase v9 — along with all other dependencies — will be installed.</p>\n\n\n\n<p>With done that, let&#8217;s start the app with <code>npm start</code>!</p>\n\n\n<h3 id=\"integrating-firebase-into-our-react-app\">Integrating Firebase into our React app</h3>\n\n\n<p>To integrate Firebase, we need to first get the web configuration object and then use it to initialize Firebase in our React app. Go over to the Firebase project page and we will see a set of options as icons like this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1040\" height=\"251\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_4D04DBDB13BF3572FAE649D29FE6F3035C778258CBAC7EDAE8C4EBC9A33EF49F_1637968487487_project-page.png?resize=1040%2C251&#038;ssl=1\" alt=\"\" class=\"wp-image-362528\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_4D04DBDB13BF3572FAE649D29FE6F3035C778258CBAC7EDAE8C4EBC9A33EF49F_1637968487487_project-page.png?w=1040&amp;ssl=1 1040w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_4D04DBDB13BF3572FAE649D29FE6F3035C778258CBAC7EDAE8C4EBC9A33EF49F_1637968487487_project-page.png?resize=300%2C72&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_4D04DBDB13BF3572FAE649D29FE6F3035C778258CBAC7EDAE8C4EBC9A33EF49F_1637968487487_project-page.png?resize=1024%2C247&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_4D04DBDB13BF3572FAE649D29FE6F3035C778258CBAC7EDAE8C4EBC9A33EF49F_1637968487487_project-page.png?resize=768%2C185&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_4D04DBDB13BF3572FAE649D29FE6F3035C778258CBAC7EDAE8C4EBC9A33EF49F_1637968487487_project-page.png?resize=1000%2C241&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Click on the web (<code>&lt;/&gt;</code>) icon to configure our Firebase project for the web, and we will see a page like this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"967\" height=\"396\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A986A200EF2B78874B5E5750470A8485EE5F9D512DFC588587E5149C99C8D56D_1634086619100_Screenshot152.png?resize=967%2C396&#038;ssl=1\" alt=\"\" class=\"wp-image-362529\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A986A200EF2B78874B5E5750470A8485EE5F9D512DFC588587E5149C99C8D56D_1634086619100_Screenshot152.png?w=967&amp;ssl=1 967w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A986A200EF2B78874B5E5750470A8485EE5F9D512DFC588587E5149C99C8D56D_1634086619100_Screenshot152.png?resize=300%2C123&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A986A200EF2B78874B5E5750470A8485EE5F9D512DFC588587E5149C99C8D56D_1634086619100_Screenshot152.png?resize=768%2C315&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Enter <strong>firebase-user-auth</strong> as the name of the web app. After that, click on the <strong>Register app</strong> button, which takes us to the next step where our <code>firebaseConfig</code> object is provided.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1231\" height=\"557\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639691812908_firebase-config.png?resize=1231%2C557&#038;ssl=1\" alt=\"\" class=\"wp-image-362530\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639691812908_firebase-config.png?w=1231&amp;ssl=1 1231w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639691812908_firebase-config.png?resize=300%2C136&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639691812908_firebase-config.png?resize=1024%2C463&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639691812908_firebase-config.png?resize=768%2C348&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639691812908_firebase-config.png?resize=1000%2C452&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Copy the config to the clipboard as we will need it later on to initialize Firebase. Then click on the <strong>Continue to console</strong> button to complete the process.</p>\n\n\n\n<p>Now, let&#8217;s initialize Firebase and Firebase Authentication so that we can start using them in our app. In the <code>src</code> directory of our React app, create a <code>firebase.js</code> file and add the following imports:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/firebase.js\nimport { initializeApp } from 'firebase/app'\nimport {getAuth} from 'firebase/auth'</code></pre>\n\n\n\n<p>Now, paste the config we copied earlier after the imports and add the following lines of code to initialize Firebase and Firebase Authentication.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/firebase.js\nconst app = initializeApp(firebaseConfig)\nconst auth = getAuth(app)\n\nexport {auth}</code></pre>\n\n\n\n<p>Our <code>firebase.js</code> file should now look something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src.firebase.js\nimport { initializeApp } from \"firebase/app\"\nimport { getAuth } from \"firebase/auth\"\n\nconst firebaseConfig = {\n  apiKey: \"API_KEY\",\n  authDomain: \"AUTH_DOMAIN\",\n  projectId: \"PROJECT_ID\",\n  storageBucket: \"STORAGE_BUCKET\",\n  messagingSenderId: \"MESSAGING_SENDER_ID\",\n  appId: \"APP_ID\"\n}\n\n// Initialize Firebase and Firebase Authentication\nconst app = initializeApp(firebaseConfig)\nconst auth = getAuth(app)\nexport {auth}</code></pre>\n\n\n\n<p>Next up, we’re going to cover how to use the ready-to-use functions provided by Firebase to add registration, email verification, and login functionality to the template we cloned.</p>\n\n\n<h3 id=\"creating-user-registration-functionality\">Creating User Registration functionality</h3>\n\n\n<p>In Firebase version 9, we can build functionality for user registration with the <code>createUserWithEmailAndPassword</code> function. This function takes three arguments:</p>\n\n\n\n<ul><li>auth instance/service</li><li>email</li><li>password</li></ul>\n\n\n\n<p>Services are always passed as the first arguments in version 9. In our case, it&#8217;s the auth service.</p>\n\n\n\n<p>To create this functionality, we will be working with the <code>Register.js</code> file in the <code>src</code> directory of our cloned template. What I did in this file is create three form fields — email, password, and confirm password — and input is controlled by the state. Now, let’s get to business.</p>\n\n\n\n<p>Let’s start by adding a function that validates the password and confirm password inputs, checking if they are not empty and are the same: Add the following lines of code after the states in the <code>Register</code> component:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Register.js\n// ...\n\nconst validatePassword = () => {\n  let isValid = true\n  if (password !== '' &amp;&amp; confirmPassword !== ''){\n    if (password !== confirmPassword) {\n      isValid = false\n      setError('Passwords does not match')\n    }\n  }\n  return isValid\n}\n\n// ...</code></pre>\n\n\n\n<p>In the above function, we return an <code>isValid</code> variable which can return either <strong>true</strong> or <strong>false</strong> based on the validity of the passwords. Later on, we will use the value of this variable to create a condition where the Firebase function responsible for registering users will only be invoked if <code>isValid</code> is true.</p>\n\n\n\n<p>To create the registration functionality, let&#8217;s start by making the necessary imports to the <code>Register.js</code> file:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Register.js\nimport {auth} from './firebase'\nimport {createUserWithEmailAndPassword} from 'firebase/auth'</code></pre>\n\n\n\n<p>Now, add the following lines of code after the <code>validatePassword</code> password function:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Register.js\n// ...\n\nconst register = e => {\n  e.preventDefault()\n  setError('')\n  if(validatePassword()) {\n    // Create a new user with email and password using firebase\n      createUserWithEmailAndPassword(auth, email, password)\n      .then((res) => {\n          console.log(res.user)\n        })\n      .catch(err => setError(err.message))\n  }\n  setEmail('')\n  setPassword('')\n  setConfirmPassword('')\n}\n\n// ...</code></pre>\n\n\n\n<p>In the above function, we set a condition to call the <code>createUserWithEmailAndPassword</code> function only when the value returning from <code>validatePassword</code> is <strong>true</strong>.</p>\n\n\n\n<p>For this to start working, let&#8217;s call the <code>register</code> function when the form is submitted. We can do this by adding an <code>onSubmit</code> event to the form. Modify the opening tag of the <code>registration_form</code> to look like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Register.js\n&lt;form onSubmit={register} name='registration_form'></code></pre>\n\n\n\n<p>With this, we can now register a new user on our site. To test this by going over to <code>http://localhost:3000/register</code> in the browser, filling in the form, then clicking on the <strong>Register</strong> button.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1091\" height=\"423\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639698454107_register-page.png?resize=1091%2C423&#038;ssl=1\" alt=\"Showing a user registration form with fields to enter an email. a password, and password confirmation. A gray button labeled Register is below the three stacked fields.\" class=\"wp-image-362535\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639698454107_register-page.png?w=1091&amp;ssl=1 1091w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639698454107_register-page.png?resize=300%2C116&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639698454107_register-page.png?resize=1024%2C397&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639698454107_register-page.png?resize=768%2C298&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639698454107_register-page.png?resize=1000%2C388&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>After clicking the <strong>Register</strong> button, if we open the browser’s console we will see details of the newly registered user.</p>\n\n\n<h3 id=\"managing-user-state-with-react-context-api\">Managing User State with React Context API</h3>\n\n\n<p><a href=\"https://reactjs.org/docs/context.html\" rel=\"noopener\">Context API</a> is a way to share data with components at any level of the React component tree <a href=\"https://css-tricks.com/putting-things-in-context-with-react/\">without having to pass it down as props</a>. Since a user might be required by a different component in the tree, using the Context API is great for managing the user state.</p>\n\n\n\n<p>Before we start using the Context API, there are a few things we need to set up:</p>\n\n\n\n<ul><li>Create a context object using the <code>createContext()</code> method</li><li>Pass the components we want to share the user state with as children of <a href=\"https://reactjs.org/docs/context.html#contextprovider\" rel=\"noopener\">Context.Provider</a></li><li>Pass the value we want the children/consuming component to access as props to <code>Context.Provider</code></li></ul>\n\n\n\n<p>Let’s get to it. In the <code>src</code> directory, create an <code>AuthContext.js</code> file and add the following lines of code to it:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/AuthContext.js\nimport React, {useContext} from 'react'\n\nconst AuthContext = React.createContext()\n\nexport function AuthProvider({children, value}) {\n  return (\n    &lt;AuthContext.Provider value={value}>\n      {children}\n    &lt;/AuthContext.Provider>\n  )\n}\n\nexport function useAuthValue(){\n  return useContext(AuthContext)\n}</code></pre>\n\n\n\n<p>In the above code, we created a context called <code>AuthContext</code> along with that we also created two other functions that will allow us to easily use the Context API which is <code>AuthProvider</code> and <code>useAuthValue</code>.</p>\n\n\n\n<p>The <code>AuthProvider</code> function allows us to share the value of the user’s state to all the children of <code>AuthContext.Provider</code> while <code>useAuthValue</code> allows us to easily access the value passed to <code>AuthContext.Provider</code>.</p>\n\n\n\n<p>Now, to provide the children and value props to <code>AuthProvider</code>, modify the <code>App.js</code> file to look something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"3,4,7,11,15\"><code markup=\"tt\">// src/App.js\n// ...\nimport {useState} from 'react'\nimport {AuthProvider} from './AuthContext'\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null)\n\n  return (\n    &lt;Router>\n      &lt;AuthProvider value={{currentUser}}>\n        &lt;Switch>\n         ...\n        &lt;/Switch>\n      &lt;/AuthProvider>\n    &lt;/Router>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Here, we’re wrapping <code>AuthProvider</code> around the components rendered by <code>App</code>. This way, the <code>currentUser</code> value supplied to <code>AuthProvider</code> will be available for use by all the components in our app except the <code>App</code> component.</p>\n\n\n\n<p>That’s it as far as setting up the Context API! To use it, we have to import the <code>useAuthValue</code> function and invoke it in any of the child components of <code>AuthProvider</code>, like <code>Login</code>. The code looks something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { useAuthValue } from \"./AuthContext\"\n\nfunction childOfAuthProvider(){\n  const {currentUser} = useAuthValue()\n  console.log(currentUser)\n\n  return ...\n}</code></pre>\n\n\n\n<p>Right now, <code>currentUser</code> will always be <code>null</code> because we are not setting its value to anything. To set its value, we need to first get the current user from Firebase which can be done either by using the auth instance that was initialized in our <code>firebase.js</code> file (<code>auth.currentUser</code>), or the <code>onAuthStateChanged</code> function, which actually happens to be the recommended way to get the current user. That way, we ensure that the Auth object isn&#8217;t in an intermediate state — such as initialization — when we get the current user.</p>\n\n\n\n<p>In the <code>App.js</code> file, add a <code>useEffect</code> import along with <code>useState</code> and also add the following imports:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/App.js\nimport {useState, useEffect} from 'react'\nimport {auth} from './firebase'\nimport {onAuthStateChanged} from 'firebase/auth'</code></pre>\n\n\n\n<p>Now add the following line of code after the <code>currentUser</code> state in the App component:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/App.js\n// ...\n\nuseEffect(() => {\n  onAuthStateChanged(auth, (user) => {\n    setCurrentUser(user)\n   })\n}, [])\n\n// ...</code></pre>\n\n\n\n<p>In the above code, we are getting the current user and setting it in the state when the component renders. Now when we register a user the <code>currentUser</code> state will be set with an object containing the user’s info.</p>\n\n\n<h3 id=\"send-a-verification-email-to-a-registered-user\">Send a verification email to a registered user</h3>\n\n\n<p>Once a user is registered, we want them to verify their email address before being able to access the homepage of our site. We can use the <code>sendEmailVerification</code> function for this. It takes only one argument which is the object of the currently registered user. When invoked, Firebase sends an email to the registered user&#8217;s email address with a link where the user can verify their email.</p>\n\n\n\n<p>Let’s head over to the <code>Register.js</code> file and modify the <code>Link</code> and <code>createUserWithEmailAndPassword</code> import to look like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Register.js\nimport {useHistory, Link} from 'react-router-dom'\nimport {createUserWithEmailAndPassword, sendEmailVerification} from 'firebase/auth'</code></pre>\n\n\n\n<p>In the above code, we have also imported the <code>useHistory</code> hook. This will help us access and manipulate the browser&#8217;s history which, in short, means we can use it to switch between pages in our app. But before we can use it we need to call it, so let’s add the following line of code after the <code>error</code> state:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Register.js\n// ...\nconst history = useHistory()\n\n// ...</code></pre>\n\n\n\n<p>Now, modify the <code>.then</code> method of the <code>createUserWithEmailAndPassword</code> function to look like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Register.js\n// ...\n.then(() => {\n  sendEmailVerification(auth.currentUser)\n  .then(() => {\n    history.push('/verify-email')\n  }).catch((err) => alert(err.message))\n})\n// ...</code></pre>\n\n\n\n<p>What’s happening here is that when a user registers a valid email address, they will be sent a verification email, then taken to the <strong>verify-email</strong> page.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1190\" height=\"303\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639991126098_verify-email-page.png?resize=1190%2C303&#038;ssl=1\" alt=\"\" class=\"wp-image-362541\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639991126098_verify-email-page.png?w=1190&amp;ssl=1 1190w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639991126098_verify-email-page.png?resize=300%2C76&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639991126098_verify-email-page.png?resize=1024%2C261&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639991126098_verify-email-page.png?resize=768%2C196&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1639991126098_verify-email-page.png?resize=1000%2C255&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>There are several things we need to do on this page:</p>\n\n\n\n<ul><li>Display the user&#8217;s email after the part that says <strong>“A verification email has been sent to:”</strong></li><li>Make the <strong>Resend Email</strong> button work</li><li>Create functionality for disabling the <strong>Resend Email</strong> button for 60 seconds after it is clicked</li><li>Take the user to their profile page once the email has been verified</li></ul>\n\n\n\n<p>We will start by displaying the registered user’s email. This calls for the use of the <code>AuthContext</code> we created earlier. In the <code>VerifyEmail.js</code> file, add the following import:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\nimport {useAuthValue} from './AuthContext'</code></pre>\n\n\n\n<p>Then, add the following code before the <code>return</code> statement in the <code>VerifyEmail</code> component:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\nconst {currentUser} = useAuthValue()</code></pre>\n\n\n\n<p>Now, to display the email, add the following code after the <code>&lt;br/&gt;</code> tag in the <code>return</code> statement.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\n// ...\n&lt;span>{currentUser?.email}&lt;/span>\n// ...</code></pre>\n\n\n\n<p>In the above code, we are using optional chaining to get the user&#8217;s email so that when the email is null our code will throw no errors.</p>\n\n\n\n<p>Now, when we refresh the <strong>verify-email</strong> page, we should see the email of the registered user.</p>\n\n\n\n<p>Let’s move to the next thing which is making the <strong>Resend Email</strong> button work. First, let&#8217;s make the necessary imports. Add the following imports to the <code>VerifyEmail.js</code> file:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\nimport {useState} from 'react'\nimport {auth} from './firebase'\nimport {sendEmailVerification} from 'firebase/auth'</code></pre>\n\n\n\n<p>Now, let&#8217;s add a state that will be responsible for disabling and enabling the <strong>Resend Email</strong> button based on whether or not the verification email has been sent. This code goes after <code>currentUser</code> in the <code>VerifyEmail</code> component:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\nconst [buttonDisabled, setButtonDisabled] = useState(false)</code></pre>\n\n\n\n<p>For the function that handles resending the verification email and disabling/enabling the button, we need this after the <code>buttonDisabled</code> state:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\n// ...\n\nconst resendEmailVerification = () => {\n  setButtonDisabled(true)\n  sendEmailVerification(auth.currentUser)\n  .then(() => {\n    setButtonDisabled(false)\n  }).catch((err) => {\n    alert(err.message)\n    setButtonDisabled(false)\n  })\n}\n\n// ...</code></pre>\n\n\n\n<p>Next, in the <code>return</code> statement, modify the <strong>Resend Email</strong> button like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// ...\n&lt;button \n  onClick={resendEmailVerification}\n  disabled={buttonDisabled}\n  >Resend Email&lt;/button>\n// ...</code></pre>\n\n\n\n<p>Now, if we go over to the verify-email page and click the button, another email will be sent to us. But there is a problem with how we created this functionality because if we try to click the button again in less than a minute, we get an error from Firebase saying we sent too many requests. This is because Firebase has a one minute interval before being able to send another email to the same address. That’s the net thing we need to address.</p>\n\n\n\n<p>What we need to do is make the button stay disabled for 60 seconds (or more) after a verification email is sent. We can enhance the user experience a bit by displaying a countdown timer in <strong>Resend Email</strong> button to let the user know the button is only temporarily disabled.</p>\n\n\n\n<p>In the <code>VerifyEmail.js</code> file, add a <code>useEffect</code> import:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import {useState, useEffect} from 'react'</code></pre>\n\n\n\n<p>Next, add the following after the <code>buttonDisabled</code> state:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\nconst [time, setTime] = useState(60)\nconst [timeActive, setTimeActive] = useState(false)</code></pre>\n\n\n\n<p>In the above code, we have created a <code>time</code> state which will be used for the 60-second countdown and also a <code>timeActive</code> state which will be used to control when the count down will start.</p>\n\n\n\n<p>Add the following lines of code after the states we just created:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\n// ...\n\nuseEffect(() => {\n  let interval = null\n  if(timeActive &amp;&amp; time !== 0 ){\n    interval = setInterval(() => {\n      setTime((time) => time - 1)\n    }, 1000)\n  }else if(time === 0){\n    setTimeActive(false)\n    setTime(60)\n    clearInterval(interval)\n  }\n  return () => clearInterval(interval);\n}, [timeActive, time])\n\n// ...</code></pre>\n\n\n\n<p>In the above code, we created a <code>useEffect</code> hook that only runs when the <code>timeActive</code> or <code>time</code> state changes. In this hook, we are decreasing the previous value of the <code>time</code> state by one every second using the <code>setInterval</code> method, then we are stopping the decrementing of the <code>time</code> state when its value equals zero.</p>\n\n\n\n<p>Since the <code>useEffect</code> hook is dependent on the <code>timeActive</code> and <code>time</code> state, one of these states has to change before the time count down can start. Changing the <code>time</code> state is not an option because the countdown has to start only when a verification email has been sent. So, instead, we need to change the <code>timeActive</code> state.</p>\n\n\n\n<p>In the <code>resendEmailVerification</code> function, modify the <code>.then</code> method of <code>sendEmailVerification</code> to look like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\n// ...\n.then(() => {\n  setButtonDisabled(false)\n  setTimeActive(true)\n})\n// ...</code></pre>\n\n\n\n<p>Now, when an email is sent, the <code>timeActive</code> state will change to <strong>true</strong> and the count down will start. In the code above we need to change how we are disabling the button because, when the count down is active, we want the disabled button.</p>\n\n\n\n<p>We will do that shortly, but right now, let&#8217;s make the countdown timer visible to the user. Modify the <strong>Resend Email</strong> button to look like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\n&lt;button \n  onClick={resendEmailVerification}\n  disabled={buttonDisabled}\n>Resend Email {timeActive &amp;&amp; time}&lt;/button></code></pre>\n\n\n\n<p>To keep the button in a disabled state while the countdown is active, let’s modify the <code>disabled</code> attribute of the button to look like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">disabled={timeActive}</code></pre>\n\n\n\n<p>With this, the button will be disabled for a minute when a verification email is sent. Now we can go ahead and remove the <code>buttonDisabled</code> state from our code.</p>\n\n\n\n<p>Although this functionality works, there is still one problem with how we implemented it: when a user registers and is taken to the <strong>verify-email</strong> page when they have not received an email yet, they may try to click the <strong>Resend Email</strong> button, and if they do that in less than a minute, Firebase will error out again because we’ve made too many requests.</p>\n\n\n\n<p>To fix this, we need to make the <strong>Resend Email</strong> button disabled for 60 seconds <em>after</em> an email is sent to the newly registered user. This means we need a way to change the <code>timeActive</code> state within the <code>Register</code> component. We can also use the Context API for this. It will allow us to globally manipulate and access the <code>timeActive</code> state.</p>\n\n\n\n<p>Let’s make a few modifications to our code to make things work properly. In the <code>VerifyEmail</code> component, cut the <code>timeActive</code> state and paste it into the <code>App</code> component after the <code>currentUser</code> state.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/App.js\nfunction App() {\n  // ...\n  const [timeActive, setTimeActive] = useState(false)\n\n  // ...</code></pre>\n\n\n\n<p>Next, put <code>timeActive</code> and <code>setTimeActive</code> inside the object of <code>AuthProvider</code> value prop. It should look like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/App.js\n// ...\n&lt;AuthProvider value={{currentUser, timeActive, setTimeActive}}>\n// ...\n</code></pre>\n\n\n\n<p>Now we can access <code>timeActive</code> and <code>setTimeActive</code> within the children of <code>AuthProvider</code>. To fix the error in our code, go to the <code>VerifyEmail.js</code> file and de-structure both <code>timeActive</code> and <code>setTimeActive</code> from <code>useAuthProvider</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\nconst {timeActive, setTimeActive} = useAuthValue()</code></pre>\n\n\n\n<p>Now, to change the <code>timeActive</code> state after a verification email has been sent to the registered user, add the following import in the <code>Register.js</code> file:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Register.js\nimport {useAuthValue} from './AuthContext'</code></pre>\n\n\n\n<p>Next, de-structure <code>setTimeActive</code> from <code>useAuthValue</code> with this snippet among the other states in the <code>Register</code> component:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Register.js\nconst {setTimeActive} = useAuthValue()</code></pre>\n\n\n\n<p>Finally, in the <code>register</code> function, set the <code>timeActive</code> state with the <code>.then</code> the method of <code>sendEmailVerification</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Register.js\n// ...\n.then(() => {\n  setTimeActive(true)\n  history.push('/verify-email')\n})\n// ...</code></pre>\n\n\n\n<p>With this, a user will be able to send a verification email without getting any errors from Firebase.</p>\n\n\n\n<p>The last thing to fix concerning user verification is to take the user to their profile page after they have verified their email. To do this, we will use a <code>reload</code> function in the <code>currentUser</code> object. It allows us to reload the user object coming from Firebase, that way we will know when something has changed.</p>\n\n\n\n<p>First, let’s make the needed imports. In the <code>VerifyEmail.js</code> file, let’s add this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\nimport {useHistory} from 'react-router-dom'</code></pre>\n\n\n\n<p>We are importing <code>useHistory</code> so that we can use to navigate the user to the profile page. Next, add the following line of code after the states:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\nconst history = useHistory()</code></pre>\n\n\n\n<p>And, finally, add the following lines of code after the <code>history</code> variable:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/VerifyEmail.js\n// ...\n\nuseEffect(() => {\n  const interval = setInterval(() => {\n    currentUser?.reload()\n    .then(() => {\n      if(currentUser?.emailVerified){\n        clearInterval(interval)\n        history.push('/')\n      }\n    })\n    .catch((err) => {\n      alert(err.message)\n    })\n  }, 1000)\n}, [history, currentUser])\n\n// ...</code></pre>\n\n\n\n<p>In the above code, we are running the <code>reload</code> function every one second until the user’s email has been verified, and, if it has, we are navigating the user to their profile page.</p>\n\n\n\n<p>To test this, let’s verify our email by following the instructions in the email sent from Firebase. If all is good, we will be automatically taken to our profile page.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1117\" height=\"254\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1640205649723_profile-page-with-no-details.png?resize=1117%2C254&#038;ssl=1\" alt=\"\" class=\"wp-image-362549\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1640205649723_profile-page-with-no-details.png?w=1117&amp;ssl=1 1117w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1640205649723_profile-page-with-no-details.png?resize=300%2C68&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1640205649723_profile-page-with-no-details.png?resize=1024%2C233&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1640205649723_profile-page-with-no-details.png?resize=768%2C175&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_0B89F8A8A3DFCA52D079654D1401D01E4B44702C269CD265117469E9C8CFED27_1640205649723_profile-page-with-no-details.png?resize=1000%2C227&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Right now the profile page is showing no user data and he <strong>Sign Out</strong> link does not work. That’s ur next task.</p>\n\n\n<h3 id=\"working-on-the-user-profile-page\">Working on the user profile page</h3>\n\n\n<p>Let’s start by displaying the <strong>Email</strong> and <strong>Email verified</strong> values. For this, we will make use of the <code>currentUser</code> state in <code>AuthContext</code>. What we need to do is import <code>useAuthValue</code>, de-structure <code>currentUser</code> from it, and then display the <strong>Email</strong> and <strong>Email verified</strong> value from the user object.</p>\n\n\n\n<p>Here is what the <code>Profile.js</code> file should look like:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Profile.js\nimport './profile.css'\nimport {useAuthValue} from './AuthContext'\n\nfunction Profile() {\n  const {currentUser} = useAuthValue()\n\n  return (\n    &lt;div className='center'>\n      &lt;div className='profile'>\n        &lt;h1>Profile&lt;/h1>\n        &lt;p>&lt;strong>Email: &lt;/strong>{currentUser?.email}&lt;/p>\n        &lt;p>\n          &lt;strong>Email verified: &lt;/strong>\n          {`${currentUser?.emailVerified}`}\n        &lt;/p>\n        &lt;span>Sign Out&lt;/span>\n      &lt;/div>\n    &lt;/div>\n  )\n}\n\nexport default Profile</code></pre>\n\n\n\n<p>With this, the <strong>Email</strong> and <strong>Email verified</strong> value should now be displayed on our profile page.</p>\n\n\n\n<p>To get the <strong>sign out</strong> functionality working, we will use the <code>signOut</code> function. It takes only one argument, which is the <code>auth</code> instance. So, in <code>Profile.js</code>. let’s add those imports.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Profile.js\nimport { signOut } from 'firebase/auth' \nimport { auth } from './firebase'</code></pre>\n\n\n\n<p>Now, in the <code>return</code> statement, modify the <code>&lt;span&gt;</code> that contains “Sign Out” so that is calls the <code>signOut</code> function when clicked:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Profile.js\n// ...\n&lt;span onClick={() => signOut(auth)}>Sign Out&lt;/span>\n// ...</code></pre>\n\n\n<h3 id=\"creating-a-private-route-for-the-profile-component\">Creating a Private Route for the Profile component</h3>\n\n\n<p>Right now, even with an unverified email address, a user can access the profile page. We don’t want that. Unverified users should be redirected to the login page when they try to access the profile. This is where private routes come in.</p>\n\n\n\n<p>In the <code>src</code> directory, let’s create a new <code>PrivateRoute.js</code> file and add the following code to it:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/PrivateRoute.js\nimport {Route, Redirect} from 'react-router-dom'\nimport {useAuthValue} from './AuthContext'\n\nexport default function PrivateRoute({component:Component, ...rest}) {\n  const {currentUser} = useAuthValue()\n\n  return (\n    &lt;Route\n      {...rest}\n      render={props => {\n        return currentUser?.emailVerified ? &lt;Component {...props} /> : &lt;Redirect to='/login' />\n    }}>\n    &lt;/Route>\n  )\n}</code></pre>\n\n\n\n<p>This <code>PrivateRoute</code> is almost similar to using the <code>Route</code>. The difference is that we are using a <code>render</code> prop to redirect the user to the profile page if their email is unverified.</p>\n\n\n\n<p>We want the profile page to be private, so well import <code>PrivateRoute</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/App.js\nimport PrivateRoute from './PrivateRoute'</code></pre>\n\n\n\n<p>Then we can replace <code>Route</code> with <code>PrivateRoute</code> in the <code>Profile</code> component. The <code>Profile</code> route should now look like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/App.js\n&lt;PrivateRoute exact path=\"/\" component={Profile} /></code></pre>\n\n\n\n<p>Nice! We have made the profile page accessible only to users with verified emails.</p>\n\n\n<h3 id=\"creating-login-functionality\">Creating login functionality</h3>\n\n\n<p>Since only users with verified emails can access their profile page when logged in with the <code>signInWithEmailAndPassword</code> function, we also need to check if their email has been verified and, if it is unverified, the user should be redirected to the <strong>verify-email</strong> page where the sixty-second countdown should also start.</p>\n\n\n\n<p>These are the imports we need to add to the <code>Login.js</code> file:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import {signInWithEmailAndPassword, sendEmailVerification} from 'firebase/auth'\nimport {auth} from './firebase'\nimport {useHistory} from 'react-router-dom'\nimport {useAuthValue} from './AuthContext'</code></pre>\n\n\n\n<p>Next, add the following line of code among the states in the <code>Login</code> component.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Login.js\nconst {setTimeActive} = useAuthValue()\nconst history = useHistory()</code></pre>\n\n\n\n<p>Then add the following function after the <code>history</code> variable:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Login.js\n// ...\n\nconst login = e => {\n  e.preventDefault()\n  signInWithEmailAndPassword(auth, email, password)\n  .then(() => {\n    if(!auth.currentUser.emailVerified) {\n      sendEmailVerification(auth.currentUser)\n      .then(() => {\n        setTimeActive(true)\n        history.push('/verify-email')\n      })\n    .catch(err => alert(err.message))\n  }else{\n    history.push('/')\n  }\n  })\n  .catch(err => setError(err.message))\n}\n\n// ...</code></pre>\n\n\n\n<p>This logs in a user and then check if whether they are verified or not. If they are verified, we navigate them to their profile page. But if they are unverified, we send a verification email, then redirect them to the <strong>verify-email</strong> page.</p>\n\n\n\n<p>All we need to do to make this work is call the <code>login</code> function when the form is submitted. So, let’s modify the opening tag of the <code>login_form</code> to this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// src/Login.js\n&lt;form onSubmit={login} name='login_form'></code></pre>\n\n\n\n<p>And, hey, we’re done!</p>\n\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n\n<p>In this tutorial, we have learned how to use version 9 of the Firebase Authentication to build a fully functioning user registration and authentication service in React. Is it super easy? No, there are a few thing we need to juggle. But is it a heck of a lot easier than building our own service from scratch? You bet it is! And that’s what I hope you got from reading this.</p>\n\n\n<h3 id=\"references\">References</h3>\n\n\n<ul><li><a href=\"https://firebase.google.com/docs/auth/web/start\" rel=\"noopener\">Get Started with Firebase Authentication on Websites</a> (Firebase documentation)</li><li><a href=\"https://firebase.google.com/docs/auth/web/manage-users\" rel=\"noopener\">Manage Users in Firebase</a> (Firebase documentation)</li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/user-registration-authentication-firebase-react/\">User Registration and Auth Using Firebase and React</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "The ability to identify users is vital for maintaining the security of any applications. Equally important is the code that’s written to manage user identities, particularly when it comes to avoiding loopholes for unauthorized access to data held by an application. Writing authentication code without a framework or libraries available can take a ton of time to do right — not to mention the ongoing maintainance of that custom code.\n\n\n\nThis is where Firebase comes to the rescue. Its ready-to-use and intuitive methods make setting up effective user identity management on a site happen in no time. This tutorial will work us through on how to do that: implementing user registration, verification, and authentication.\n\n\n\n\n\n\n\nFirebase v9 SDK introduces a new modular API surface, resulting in a change to several of its services, one of which is Firebase Authentication. This tutorial is current to the changes in v9.\n\n\n\n\nView Demo\n\n\n\nGitHub Repo\n\n\n\n\nTo follow along with this tutorial, you should be familiar with React, React hooks, and Firebase version 8. You should also have a Google account and Node installed on your machine.\n\n\nTable of Contents\n\nSetting up Firebase\nCloning and setting up the starter repo\nIntegrating Firebase into our React app\nCreating User Registration functionality\nManaging User State with React Context API\nSend a verification email to a registered user\nWorking on the user profile page\nCreating a Private Route for the Profile component\nCreating login functionality\nConclusion\nReferences\n\nSetting up Firebase\n\n\nBefore we start using Firebase for our registration and authentication requirements, we have to first set up our Firebase project and also the authentication method we’re using.\n\n\n\nTo add a project, make sure you are logged into your Google account, then navigate to the Firebase console and click on Add project. From there, give the project a name (I’m using “Firebase-user-reg-auth”) and we should be all set to continue.\n\n\n\n\n\n\n\nYou may be prompted to enable Google Analytics at some point. There’s no need for it for this tutorial, so feel free to skip that step.\n\n\n\n\n\n\n\nFirebase has various authentication methods for both mobile and web, but before we start using any of them, we have to first enable it on the Firebase Authentication page. From the sidebar menu, click on the Authentication icon, then, on the next page, click on Get started.\n\n\n\n\n\n\n\nWe are going to use Email/Password authentication. Click on it and we will be prompted with a screen to enable it, which is exactly what we want to do.\n\n\n\n\n\n\nCloning and setting up the starter repo\n\n\nI have already created a simple template we can use for this tutorial so that we can focus specifically on learning how to implement the functionalities. So what we need to do now is clone the GitHub repo.\n\n\n\nFire up your terminal. Here’s what we can run from the command line:\n\n\n\ngit clone -b starter https://github.com/Tammibriggs/Firebase_user_auth.git\n\ncd Firebase_user_auth\n\nnpm install\n\n\n\nI have also included Firebase version 9 in the dependency object of the package.json file. So, by running the npm install command, Firebase v9 — along with all other dependencies — will be installed.\n\n\n\nWith done that, let’s start the app with npm start!\n\n\nIntegrating Firebase into our React app\n\n\nTo integrate Firebase, we need to first get the web configuration object and then use it to initialize Firebase in our React app. Go over to the Firebase project page and we will see a set of options as icons like this:\n\n\n\n\n\n\n\nClick on the web (</>) icon to configure our Firebase project for the web, and we will see a page like this:\n\n\n\n\n\n\n\nEnter firebase-user-auth as the name of the web app. After that, click on the Register app button, which takes us to the next step where our firebaseConfig object is provided.\n\n\n\n\n\n\n\nCopy the config to the clipboard as we will need it later on to initialize Firebase. Then click on the Continue to console button to complete the process.\n\n\n\nNow, let’s initialize Firebase and Firebase Authentication so that we can start using them in our app. In the src directory of our React app, create a firebase.js file and add the following imports:\n\n\n\n// src/firebase.js\nimport { initializeApp } from 'firebase/app'\nimport {getAuth} from 'firebase/auth'\n\n\n\nNow, paste the config we copied earlier after the imports and add the following lines of code to initialize Firebase and Firebase Authentication.\n\n\n\n// src/firebase.js\nconst app = initializeApp(firebaseConfig)\nconst auth = getAuth(app)\n\nexport {auth}\n\n\n\nOur firebase.js file should now look something like this:\n\n\n\n// src.firebase.js\nimport { initializeApp } from \"firebase/app\"\nimport { getAuth } from \"firebase/auth\"\n\nconst firebaseConfig = {\n  apiKey: \"API_KEY\",\n  authDomain: \"AUTH_DOMAIN\",\n  projectId: \"PROJECT_ID\",\n  storageBucket: \"STORAGE_BUCKET\",\n  messagingSenderId: \"MESSAGING_SENDER_ID\",\n  appId: \"APP_ID\"\n}\n\n// Initialize Firebase and Firebase Authentication\nconst app = initializeApp(firebaseConfig)\nconst auth = getAuth(app)\nexport {auth}\n\n\n\nNext up, we’re going to cover how to use the ready-to-use functions provided by Firebase to add registration, email verification, and login functionality to the template we cloned.\n\n\nCreating User Registration functionality\n\n\nIn Firebase version 9, we can build functionality for user registration with the createUserWithEmailAndPassword function. This function takes three arguments:\n\n\n\nauth instance/serviceemailpassword\n\n\n\nServices are always passed as the first arguments in version 9. In our case, it’s the auth service.\n\n\n\nTo create this functionality, we will be working with the Register.js file in the src directory of our cloned template. What I did in this file is create three form fields — email, password, and confirm password — and input is controlled by the state. Now, let’s get to business.\n\n\n\nLet’s start by adding a function that validates the password and confirm password inputs, checking if they are not empty and are the same: Add the following lines of code after the states in the Register component:\n\n\n\n// src/Register.js\n// ...\n\nconst validatePassword = () => {\n  let isValid = true\n  if (password !== '' && confirmPassword !== ''){\n    if (password !== confirmPassword) {\n      isValid = false\n      setError('Passwords does not match')\n    }\n  }\n  return isValid\n}\n\n// ...\n\n\n\nIn the above function, we return an isValid variable which can return either true or false based on the validity of the passwords. Later on, we will use the value of this variable to create a condition where the Firebase function responsible for registering users will only be invoked if isValid is true.\n\n\n\nTo create the registration functionality, let’s start by making the necessary imports to the Register.js file:\n\n\n\n// src/Register.js\nimport {auth} from './firebase'\nimport {createUserWithEmailAndPassword} from 'firebase/auth'\n\n\n\nNow, add the following lines of code after the validatePassword password function:\n\n\n\n// src/Register.js\n// ...\n\nconst register = e => {\n  e.preventDefault()\n  setError('')\n  if(validatePassword()) {\n    // Create a new user with email and password using firebase\n      createUserWithEmailAndPassword(auth, email, password)\n      .then((res) => {\n          console.log(res.user)\n        })\n      .catch(err => setError(err.message))\n  }\n  setEmail('')\n  setPassword('')\n  setConfirmPassword('')\n}\n\n// ...\n\n\n\nIn the above function, we set a condition to call the createUserWithEmailAndPassword function only when the value returning from validatePassword is true.\n\n\n\nFor this to start working, let’s call the register function when the form is submitted. We can do this by adding an onSubmit event to the form. Modify the opening tag of the registration_form to look like this:\n\n\n\n// src/Register.js\n<form onSubmit={register} name='registration_form'>\n\n\n\nWith this, we can now register a new user on our site. To test this by going over to http://localhost:3000/register in the browser, filling in the form, then clicking on the Register button.\n\n\n\n\n\n\n\nAfter clicking the Register button, if we open the browser’s console we will see details of the newly registered user.\n\n\nManaging User State with React Context API\n\n\nContext API is a way to share data with components at any level of the React component tree without having to pass it down as props. Since a user might be required by a different component in the tree, using the Context API is great for managing the user state.\n\n\n\nBefore we start using the Context API, there are a few things we need to set up:\n\n\n\nCreate a context object using the createContext() methodPass the components we want to share the user state with as children of Context.ProviderPass the value we want the children/consuming component to access as props to Context.Provider\n\n\n\nLet’s get to it. In the src directory, create an AuthContext.js file and add the following lines of code to it:\n\n\n\n// src/AuthContext.js\nimport React, {useContext} from 'react'\n\nconst AuthContext = React.createContext()\n\nexport function AuthProvider({children, value}) {\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport function useAuthValue(){\n  return useContext(AuthContext)\n}\n\n\n\nIn the above code, we created a context called AuthContext along with that we also created two other functions that will allow us to easily use the Context API which is AuthProvider and useAuthValue.\n\n\n\nThe AuthProvider function allows us to share the value of the user’s state to all the children of AuthContext.Provider while useAuthValue allows us to easily access the value passed to AuthContext.Provider.\n\n\n\nNow, to provide the children and value props to AuthProvider, modify the App.js file to look something like this:\n\n\n\n// src/App.js\n// ...\nimport {useState} from 'react'\nimport {AuthProvider} from './AuthContext'\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null)\n\n  return (\n    <Router>\n      <AuthProvider value={{currentUser}}>\n        <Switch>\n         ...\n        </Switch>\n      </AuthProvider>\n    </Router>\n  );\n}\n\nexport default App;\n\n\n\nHere, we’re wrapping AuthProvider around the components rendered by App. This way, the currentUser value supplied to AuthProvider will be available for use by all the components in our app except the App component.\n\n\n\nThat’s it as far as setting up the Context API! To use it, we have to import the useAuthValue function and invoke it in any of the child components of AuthProvider, like Login. The code looks something like this:\n\n\n\nimport { useAuthValue } from \"./AuthContext\"\n\nfunction childOfAuthProvider(){\n  const {currentUser} = useAuthValue()\n  console.log(currentUser)\n\n  return ...\n}\n\n\n\nRight now, currentUser will always be null because we are not setting its value to anything. To set its value, we need to first get the current user from Firebase which can be done either by using the auth instance that was initialized in our firebase.js file (auth.currentUser), or the onAuthStateChanged function, which actually happens to be the recommended way to get the current user. That way, we ensure that the Auth object isn’t in an intermediate state — such as initialization — when we get the current user.\n\n\n\nIn the App.js file, add a useEffect import along with useState and also add the following imports:\n\n\n\n// src/App.js\nimport {useState, useEffect} from 'react'\nimport {auth} from './firebase'\nimport {onAuthStateChanged} from 'firebase/auth'\n\n\n\nNow add the following line of code after the currentUser state in the App component:\n\n\n\n// src/App.js\n// ...\n\nuseEffect(() => {\n  onAuthStateChanged(auth, (user) => {\n    setCurrentUser(user)\n   })\n}, [])\n\n// ...\n\n\n\nIn the above code, we are getting the current user and setting it in the state when the component renders. Now when we register a user the currentUser state will be set with an object containing the user’s info.\n\n\nSend a verification email to a registered user\n\n\nOnce a user is registered, we want them to verify their email address before being able to access the homepage of our site. We can use the sendEmailVerification function for this. It takes only one argument which is the object of the currently registered user. When invoked, Firebase sends an email to the registered user’s email address with a link where the user can verify their email.\n\n\n\nLet’s head over to the Register.js file and modify the Link and createUserWithEmailAndPassword import to look like this:\n\n\n\n// src/Register.js\nimport {useHistory, Link} from 'react-router-dom'\nimport {createUserWithEmailAndPassword, sendEmailVerification} from 'firebase/auth'\n\n\n\nIn the above code, we have also imported the useHistory hook. This will help us access and manipulate the browser’s history which, in short, means we can use it to switch between pages in our app. But before we can use it we need to call it, so let’s add the following line of code after the error state:\n\n\n\n// src/Register.js\n// ...\nconst history = useHistory()\n\n// ...\n\n\n\nNow, modify the .then method of the createUserWithEmailAndPassword function to look like this:\n\n\n\n// src/Register.js\n// ...\n.then(() => {\n  sendEmailVerification(auth.currentUser)\n  .then(() => {\n    history.push('/verify-email')\n  }).catch((err) => alert(err.message))\n})\n// ...\n\n\n\nWhat’s happening here is that when a user registers a valid email address, they will be sent a verification email, then taken to the verify-email page.\n\n\n\n\n\n\n\nThere are several things we need to do on this page:\n\n\n\nDisplay the user’s email after the part that says “A verification email has been sent to:”Make the Resend Email button workCreate functionality for disabling the Resend Email button for 60 seconds after it is clickedTake the user to their profile page once the email has been verified\n\n\n\nWe will start by displaying the registered user’s email. This calls for the use of the AuthContext we created earlier. In the VerifyEmail.js file, add the following import:\n\n\n\n// src/VerifyEmail.js\nimport {useAuthValue} from './AuthContext'\n\n\n\nThen, add the following code before the return statement in the VerifyEmail component:\n\n\n\n// src/VerifyEmail.js\nconst {currentUser} = useAuthValue()\n\n\n\nNow, to display the email, add the following code after the <br/> tag in the return statement.\n\n\n\n// src/VerifyEmail.js\n// ...\n<span>{currentUser?.email}</span>\n// ...\n\n\n\nIn the above code, we are using optional chaining to get the user’s email so that when the email is null our code will throw no errors.\n\n\n\nNow, when we refresh the verify-email page, we should see the email of the registered user.\n\n\n\nLet’s move to the next thing which is making the Resend Email button work. First, let’s make the necessary imports. Add the following imports to the VerifyEmail.js file:\n\n\n\n// src/VerifyEmail.js\nimport {useState} from 'react'\nimport {auth} from './firebase'\nimport {sendEmailVerification} from 'firebase/auth'\n\n\n\nNow, let’s add a state that will be responsible for disabling and enabling the Resend Email button based on whether or not the verification email has been sent. This code goes after currentUser in the VerifyEmail component:\n\n\n\n// src/VerifyEmail.js\nconst [buttonDisabled, setButtonDisabled] = useState(false)\n\n\n\nFor the function that handles resending the verification email and disabling/enabling the button, we need this after the buttonDisabled state:\n\n\n\n// src/VerifyEmail.js\n// ...\n\nconst resendEmailVerification = () => {\n  setButtonDisabled(true)\n  sendEmailVerification(auth.currentUser)\n  .then(() => {\n    setButtonDisabled(false)\n  }).catch((err) => {\n    alert(err.message)\n    setButtonDisabled(false)\n  })\n}\n\n// ...\n\n\n\nNext, in the return statement, modify the Resend Email button like this:\n\n\n\n// ...\n<button \n  onClick={resendEmailVerification}\n  disabled={buttonDisabled}\n  >Resend Email</button>\n// ...\n\n\n\nNow, if we go over to the verify-email page and click the button, another email will be sent to us. But there is a problem with how we created this functionality because if we try to click the button again in less than a minute, we get an error from Firebase saying we sent too many requests. This is because Firebase has a one minute interval before being able to send another email to the same address. That’s the net thing we need to address.\n\n\n\nWhat we need to do is make the button stay disabled for 60 seconds (or more) after a verification email is sent. We can enhance the user experience a bit by displaying a countdown timer in Resend Email button to let the user know the button is only temporarily disabled.\n\n\n\nIn the VerifyEmail.js file, add a useEffect import:\n\n\n\nimport {useState, useEffect} from 'react'\n\n\n\nNext, add the following after the buttonDisabled state:\n\n\n\n// src/VerifyEmail.js\nconst [time, setTime] = useState(60)\nconst [timeActive, setTimeActive] = useState(false)\n\n\n\nIn the above code, we have created a time state which will be used for the 60-second countdown and also a timeActive state which will be used to control when the count down will start.\n\n\n\nAdd the following lines of code after the states we just created:\n\n\n\n// src/VerifyEmail.js\n// ...\n\nuseEffect(() => {\n  let interval = null\n  if(timeActive && time !== 0 ){\n    interval = setInterval(() => {\n      setTime((time) => time - 1)\n    }, 1000)\n  }else if(time === 0){\n    setTimeActive(false)\n    setTime(60)\n    clearInterval(interval)\n  }\n  return () => clearInterval(interval);\n}, [timeActive, time])\n\n// ...\n\n\n\nIn the above code, we created a useEffect hook that only runs when the timeActive or time state changes. In this hook, we are decreasing the previous value of the time state by one every second using the setInterval method, then we are stopping the decrementing of the time state when its value equals zero.\n\n\n\nSince the useEffect hook is dependent on the timeActive and time state, one of these states has to change before the time count down can start. Changing the time state is not an option because the countdown has to start only when a verification email has been sent. So, instead, we need to change the timeActive state.\n\n\n\nIn the resendEmailVerification function, modify the .then method of sendEmailVerification to look like this:\n\n\n\n// src/VerifyEmail.js\n// ...\n.then(() => {\n  setButtonDisabled(false)\n  setTimeActive(true)\n})\n// ...\n\n\n\nNow, when an email is sent, the timeActive state will change to true and the count down will start. In the code above we need to change how we are disabling the button because, when the count down is active, we want the disabled button.\n\n\n\nWe will do that shortly, but right now, let’s make the countdown timer visible to the user. Modify the Resend Email button to look like this:\n\n\n\n// src/VerifyEmail.js\n<button \n  onClick={resendEmailVerification}\n  disabled={buttonDisabled}\n>Resend Email {timeActive && time}</button>\n\n\n\nTo keep the button in a disabled state while the countdown is active, let’s modify the disabled attribute of the button to look like this:\n\n\n\ndisabled={timeActive}\n\n\n\nWith this, the button will be disabled for a minute when a verification email is sent. Now we can go ahead and remove the buttonDisabled state from our code.\n\n\n\nAlthough this functionality works, there is still one problem with how we implemented it: when a user registers and is taken to the verify-email page when they have not received an email yet, they may try to click the Resend Email button, and if they do that in less than a minute, Firebase will error out again because we’ve made too many requests.\n\n\n\nTo fix this, we need to make the Resend Email button disabled for 60 seconds after an email is sent to the newly registered user. This means we need a way to change the timeActive state within the Register component. We can also use the Context API for this. It will allow us to globally manipulate and access the timeActive state.\n\n\n\nLet’s make a few modifications to our code to make things work properly. In the VerifyEmail component, cut the timeActive state and paste it into the App component after the currentUser state.\n\n\n\n// src/App.js\nfunction App() {\n  // ...\n  const [timeActive, setTimeActive] = useState(false)\n\n  // ...\n\n\n\nNext, put timeActive and setTimeActive inside the object of AuthProvider value prop. It should look like this:\n\n\n\n// src/App.js\n// ...\n<AuthProvider value={{currentUser, timeActive, setTimeActive}}>\n// ...\n\n\n\n\nNow we can access timeActive and setTimeActive within the children of AuthProvider. To fix the error in our code, go to the VerifyEmail.js file and de-structure both timeActive and setTimeActive from useAuthProvider:\n\n\n\n// src/VerifyEmail.js\nconst {timeActive, setTimeActive} = useAuthValue()\n\n\n\nNow, to change the timeActive state after a verification email has been sent to the registered user, add the following import in the Register.js file:\n\n\n\n// src/Register.js\nimport {useAuthValue} from './AuthContext'\n\n\n\nNext, de-structure setTimeActive from useAuthValue with this snippet among the other states in the Register component:\n\n\n\n// src/Register.js\nconst {setTimeActive} = useAuthValue()\n\n\n\nFinally, in the register function, set the timeActive state with the .then the method of sendEmailVerification:\n\n\n\n// src/Register.js\n// ...\n.then(() => {\n  setTimeActive(true)\n  history.push('/verify-email')\n})\n// ...\n\n\n\nWith this, a user will be able to send a verification email without getting any errors from Firebase.\n\n\n\nThe last thing to fix concerning user verification is to take the user to their profile page after they have verified their email. To do this, we will use a reload function in the currentUser object. It allows us to reload the user object coming from Firebase, that way we will know when something has changed.\n\n\n\nFirst, let’s make the needed imports. In the VerifyEmail.js file, let’s add this:\n\n\n\n// src/VerifyEmail.js\nimport {useHistory} from 'react-router-dom'\n\n\n\nWe are importing useHistory so that we can use to navigate the user to the profile page. Next, add the following line of code after the states:\n\n\n\n// src/VerifyEmail.js\nconst history = useHistory()\n\n\n\nAnd, finally, add the following lines of code after the history variable:\n\n\n\n// src/VerifyEmail.js\n// ...\n\nuseEffect(() => {\n  const interval = setInterval(() => {\n    currentUser?.reload()\n    .then(() => {\n      if(currentUser?.emailVerified){\n        clearInterval(interval)\n        history.push('/')\n      }\n    })\n    .catch((err) => {\n      alert(err.message)\n    })\n  }, 1000)\n}, [history, currentUser])\n\n// ...\n\n\n\nIn the above code, we are running the reload function every one second until the user’s email has been verified, and, if it has, we are navigating the user to their profile page.\n\n\n\nTo test this, let’s verify our email by following the instructions in the email sent from Firebase. If all is good, we will be automatically taken to our profile page.\n\n\n\n\n\n\n\nRight now the profile page is showing no user data and he Sign Out link does not work. That’s ur next task.\n\n\nWorking on the user profile page\n\n\nLet’s start by displaying the Email and Email verified values. For this, we will make use of the currentUser state in AuthContext. What we need to do is import useAuthValue, de-structure currentUser from it, and then display the Email and Email verified value from the user object.\n\n\n\nHere is what the Profile.js file should look like:\n\n\n\n// src/Profile.js\nimport './profile.css'\nimport {useAuthValue} from './AuthContext'\n\nfunction Profile() {\n  const {currentUser} = useAuthValue()\n\n  return (\n    <div className='center'>\n      <div className='profile'>\n        <h1>Profile</h1>\n        <p><strong>Email: </strong>{currentUser?.email}</p>\n        <p>\n          <strong>Email verified: </strong>\n          {`${currentUser?.emailVerified}`}\n        </p>\n        <span>Sign Out</span>\n      </div>\n    </div>\n  )\n}\n\nexport default Profile\n\n\n\nWith this, the Email and Email verified value should now be displayed on our profile page.\n\n\n\nTo get the sign out functionality working, we will use the signOut function. It takes only one argument, which is the auth instance. So, in Profile.js. let’s add those imports.\n\n\n\n// src/Profile.js\nimport { signOut } from 'firebase/auth' \nimport { auth } from './firebase'\n\n\n\nNow, in the return statement, modify the <span> that contains “Sign Out” so that is calls the signOut function when clicked:\n\n\n\n// src/Profile.js\n// ...\n<span onClick={() => signOut(auth)}>Sign Out</span>\n// ...\n\n\nCreating a Private Route for the Profile component\n\n\nRight now, even with an unverified email address, a user can access the profile page. We don’t want that. Unverified users should be redirected to the login page when they try to access the profile. This is where private routes come in.\n\n\n\nIn the src directory, let’s create a new PrivateRoute.js file and add the following code to it:\n\n\n\n// src/PrivateRoute.js\nimport {Route, Redirect} from 'react-router-dom'\nimport {useAuthValue} from './AuthContext'\n\nexport default function PrivateRoute({component:Component, ...rest}) {\n  const {currentUser} = useAuthValue()\n\n  return (\n    <Route\n      {...rest}\n      render={props => {\n        return currentUser?.emailVerified ? <Component {...props} /> : <Redirect to='/login' />\n    }}>\n    </Route>\n  )\n}\n\n\n\nThis PrivateRoute is almost similar to using the Route. The difference is that we are using a render prop to redirect the user to the profile page if their email is unverified.\n\n\n\nWe want the profile page to be private, so well import PrivateRoute:\n\n\n\n// src/App.js\nimport PrivateRoute from './PrivateRoute'\n\n\n\nThen we can replace Route with PrivateRoute in the Profile component. The Profile route should now look like this:\n\n\n\n// src/App.js\n<PrivateRoute exact path=\"/\" component={Profile} />\n\n\n\nNice! We have made the profile page accessible only to users with verified emails.\n\n\nCreating login functionality\n\n\nSince only users with verified emails can access their profile page when logged in with the signInWithEmailAndPassword function, we also need to check if their email has been verified and, if it is unverified, the user should be redirected to the verify-email page where the sixty-second countdown should also start.\n\n\n\nThese are the imports we need to add to the Login.js file:\n\n\n\nimport {signInWithEmailAndPassword, sendEmailVerification} from 'firebase/auth'\nimport {auth} from './firebase'\nimport {useHistory} from 'react-router-dom'\nimport {useAuthValue} from './AuthContext'\n\n\n\nNext, add the following line of code among the states in the Login component.\n\n\n\n// src/Login.js\nconst {setTimeActive} = useAuthValue()\nconst history = useHistory()\n\n\n\nThen add the following function after the history variable:\n\n\n\n// src/Login.js\n// ...\n\nconst login = e => {\n  e.preventDefault()\n  signInWithEmailAndPassword(auth, email, password)\n  .then(() => {\n    if(!auth.currentUser.emailVerified) {\n      sendEmailVerification(auth.currentUser)\n      .then(() => {\n        setTimeActive(true)\n        history.push('/verify-email')\n      })\n    .catch(err => alert(err.message))\n  }else{\n    history.push('/')\n  }\n  })\n  .catch(err => setError(err.message))\n}\n\n// ...\n\n\n\nThis logs in a user and then check if whether they are verified or not. If they are verified, we navigate them to their profile page. But if they are unverified, we send a verification email, then redirect them to the verify-email page.\n\n\n\nAll we need to do to make this work is call the login function when the form is submitted. So, let’s modify the opening tag of the login_form to this:\n\n\n\n// src/Login.js\n<form onSubmit={login} name='login_form'>\n\n\n\nAnd, hey, we’re done!\n\n\nConclusion\n\n\nIn this tutorial, we have learned how to use version 9 of the Firebase Authentication to build a fully functioning user registration and authentication service in React. Is it super easy? No, there are a few thing we need to juggle. But is it a heck of a lot easier than building our own service from scratch? You bet it is! And that’s what I hope you got from reading this.\n\n\nReferences\n\n\nGet Started with Firebase Authentication on Websites (Firebase documentation)Manage Users in Firebase (Firebase documentation)\n\nUser Registration and Auth Using Firebase and React originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-02-02T15:42:43.000Z",
      "date_modified": "2022-02-02T15:42:43.000Z",
      "_plugin": {
        "pageFilename": "192e4b4a0d9d23007a06a41fcd6dfbea42a73762e2e8615a858af1153ce403dc.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362169",
      "url": "https://css-tricks.com/evergreen-does-not-mean-immediately-available/",
      "title": "“Evergreen” Does Not Mean Immediately Available",
      "summary": "I have a coworker who is smart, capable, and technologically-literate. Like me, they work on the web full-time.\nWhen they are sharing their screen in a meeting, I find myself disassociating fixating on the red update button in their copy …\n\n“Evergreen” Does Not Mean Immediately Available originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I have a coworker who is smart, capable, and technologically-literate. Like me, they work on the web full-time.</p>\n\n\n\n<p>When they are sharing their screen in a meeting, I find myself <s>disassociating</s> fixating on the red update button in their copy of Chrome.</p>\n\n\n\n<span id=\"more-362169\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"620\" height=\"279\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/update.png?resize=620%2C279&#038;ssl=1\" alt=\"An angry red button labeled &quot;Update&quot;.\" class=\"wp-image-362237\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/update.png?w=620&amp;ssl=1 620w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/update.png?resize=300%2C135&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Clicking this button would start the process to update Chrome to the latest stable version.</p>\n\n\n\n<p>I’ve asked some probing questions about how frequently they reboot, which would also force Chrome to update upon relaunch. That’s the point of an “evergreen” browser, right? It’s easy to make sure you’re always using the latest and greatest version.</p>\n\n\n\n<p>It turns out they prefer to wait until they absolutely have to because of the disruption it would cause in their daily workflow. Their behavior makes sense. They are prioritizing the quality of their overall computing experience, rather than catering to the demands of one specific app.</p>\n\n\n\n<p>Like me, my coworker also uses a top-of-the-line laptop to get things done. This means that the laptop can go for months without needing a reboot. Ironically, this might be a situation where a <a href=\"https://css-tricks.com/test-your-product-on-a-crappy-laptop/\">craptop</a> is conditionally forced to have a faster browser upgrade path.</p>\n\n\n<h3 id=\"evergreen-browsers\">Evergreen browsers</h3>\n\n\n<p>Before the advent of evergreen browsers, you would need to go to the manufacturer’s website and manually download and install the update. Prior to that you had to use a CD or floppy disk.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"1707\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641571594625_Floppy_Disk_of_Netscape_Navigator-scaled.jpg?resize=2560%2C1707&#038;ssl=1\" alt=\"A floppy disk used for installing Netscape Navigator.\" class=\"wp-image-362179\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641571594625_Floppy_Disk_of_Netscape_Navigator-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641571594625_Floppy_Disk_of_Netscape_Navigator-scaled.jpg?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641571594625_Floppy_Disk_of_Netscape_Navigator-scaled.jpg?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641571594625_Floppy_Disk_of_Netscape_Navigator-scaled.jpg?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641571594625_Floppy_Disk_of_Netscape_Navigator-scaled.jpg?resize=1536%2C1024&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641571594625_Floppy_Disk_of_Netscape_Navigator-scaled.jpg?resize=2048%2C1365&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641571594625_Floppy_Disk_of_Netscape_Navigator-scaled.jpg?resize=1000%2C667&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Source:&nbsp;<a target=\"_blank\" href=\"https://commons.wikimedia.org/wiki/File:Floppy_Disk_of_Netscape_Navigator.jpg\" rel=\"noreferrer noopener\">Floppy Disk of Netscape Navigator</a>. Toshihiro Oimatsu,&nbsp;<a target=\"_blank\" href=\"https://creativecommons.org/licenses/by/2.0\" rel=\"noreferrer noopener\">CC BY 2.0</a>, via Wikimedia Commons.</figcaption></figure>\n\n\n\n<p>By contrast, an <dfn>evergreen browser</dfn> is any browser that can automatically update itself. By this, I mean the browser will automatically pull down the code required to add new features and fix bugs once it has been released by the browser’s manufacturer. The update itself occurs with:</p>\n\n\n\n<ul><li>a prompt shown to the person using the browser that triggers an application restart,</li><li>a download that happens in the background and gets applied on application restart, or</li><li>on device restart.</li></ul>\n\n\n<h4 id=\"the-browsers-themselves\">The browsers themselves</h4>\n\n\n<p>Nearly all major browsers are evergreen. This includes Google Chrome, Microsoft Edge, and Mozilla Firefox.</p>\n\n\n\n<p><a href=\"https://thingsthemselves.com/reminder-safari-is-not-an-evergreen-browser/\" rel=\"noopener\">Apple Safari is quasi-evergreen</a>. By this I mean it automatically receives updates, but awkwardly requires them to be done via the macOS operating system update interface, where other system-wide updates are located.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1560\" height=\"1030\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641825666666_safari-update.png?resize=1560%2C1030&#038;ssl=1\" alt=\"A sub-window floating over macOS’s Software Update preference pane. It shows options for updating macOS Big Sur to version 11.6.2, Command Line Tools for Xcode to version 13.2, Safari to version 15.2, and Safari Technology Preview to version 137, all of which are considered Evergreen software. Screenshot.\" class=\"wp-image-362183\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641825666666_safari-update.png?w=1560&amp;ssl=1 1560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641825666666_safari-update.png?resize=300%2C198&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641825666666_safari-update.png?resize=1024%2C676&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641825666666_safari-update.png?resize=768%2C507&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641825666666_safari-update.png?resize=1536%2C1014&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_D0AD31FBF658C09667EF06883B4D142FA961BADADF5839F7F681E757E12AFFB1_1641825666666_safari-update.png?resize=1000%2C660&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you haven’t been paying attention, <a href=\"https://developer.apple.com/documentation/safari-release-notes\" rel=\"noopener\">the Safari team has been making a ton of improvements</a> to their browser in the past few months—I’d love to see them continue with this trend by making the browser update path decoupled from existing macOS and iOS upgrade workflows.</p>\n\n\n<h4 id=\"the-situation\">The situation</h4>\n\n\n<p>With <a href=\"https://www.theverge.com/2021/5/19/22443997/microsoft-internet-explorer-end-of-support-date\" rel=\"noopener\">the actual, final, no-seriously-we-mean-it-this-time death of Internet Explorer</a>, evergreen browsers are now the main consideration for desktop and laptop browsers. This is great! It means we can spend a lot less time fretting about who can use what.</p>\n\n\n\n<p>Spending <em>less</em> time does not mean spending <em>no</em> time, however.</p>\n\n\n<h3 id=\"delayed-effects\">Delayed effects</h3>\n\n\n<p>Support from all evergreen browsers on <a href=\"https://caniuse.com/\" rel=\"noopener\">caniuse.com</a> does not necessarily mean support exists on the device a person is using—updates that have been pushed out don’t automatically get instantly applied.</p>\n\n\n\n<p>Because of these two factors, I advocate for tempering your excitement with some restraint. It can be very tempting to rush and use the new and the shiny. Believe me, I’m not exempt from this urge—<a href=\"https://www.bram.us/2021/12/27/css-in-2022/\" rel=\"noopener\">CSS is about to go from great to amazing</a>, and the urge to use new features is very real.</p>\n\n\n\n<p>Instead, wait a bit. Work with the platform’s ability to create <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Progressive_Enhancement\" rel=\"noopener\">progressively enhanced experiences</a> with CSS and JavaScript.</p>\n\n\n<h3 id=\"leverage-the-platform\">Leverage the platform</h3>\n\n\n<p><a href=\"https://resilientwebdesign.com\" rel=\"noopener\">The web is really good at being resilient</a>, provided you work with <a href=\"https://frankchimero.com/blog/2015/the-webs-grain/\" rel=\"noopener\">its grain</a>.</p>\n\n\n\n<p>Both CSS and JavaScript have the ability to conditionally serve up experiences for browsers that support new features while providing alternatives for those that don’t.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Instead of looking at the support table for something on caniuse.com and thinking, “I wish more browsers supported this feature so that I could use it!”, you can instead think “I’m going to use this feature today, but treat it as an experimental feature.”</p><cite>—Jeremy Keith, <a href=\"https://adactio.com/journal/17537\" rel=\"noopener\">“Continuous partial browser support”</a></cite></blockquote>\n\n\n<h4 id=\"javascript\">JavaScript</h4>\n\n\n<p>You can use JavaScript to query whether or not a browser supports a certain feature. For example, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator\" rel=\"noopener\">the <code>Navigator</code> interface</a> provides a mechanism for querying a user agent’s capabilities.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">if (!(“geolocation” in navigator)) {\n  // Logic if a user's current geographic location isn't available\n} else {\n  // Logic that is based on a user's current geographic location\n}</code></pre>\n\n\n\n<p>In this example, I am inverting a request for support for a browser’s <code>Geolocation</code> interface. Although its syntax is initially a little confusing to parse, it helps emphasize a progressive enhancement approach.</p>\n\n\n\n<p>Assume geolocation functionality isn’t supported to start and provide a way to accommodate the person using this browser (say manually typing in a ZIP Code, etc.). With this use case covered, you can then confidently build an experience for browser that support geolocation.</p>\n\n\n\n<p>This thinking also extends to all other browser features and capabilities.</p>\n\n\n<h4 id=\"css\">CSS</h4>\n\n\n<p>Like most other programming languages, CSS also lets us use <code>if</code>-like statements.</p>\n\n\n\n<p>For example, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@supports\" rel=\"noopener\"><code>@supports</code> at rule</a> allows you to create a conditional statement that targets whether or not a browser supports something, and then apply logic to it. Browsers that honor the feature will utilize those styles, and browsers that don’t will ignore them. It is a concise, clever, adaptable solution.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.component {\n  /* Base appearance */\n}\n\n@supports (grid-template-columns: subgrid;) {\n  .component {\n    /* Styling and positioning enhancement tweaks if subgrid is supported */\n  }\n}</code></pre>\n\n\n\n<p>For this example, this progressive enhancement approach ensures that a component’s content and functionality is preserved for every browser, but only creates fancy layouts for browsers capable of supporting them.</p>\n\n\n<h3 id=\"when-can-i-remove-this-stuff\">When can I remove this stuff?</h3>\n\n\n<p>Yes, this approach adds more code, and more code means more complexity and maintenance. But it’s very important code. You might even call it technical debt and you’d be correct. But technical debt can be a good thing, <a href=\"https://css-tricks.com/defining-and-dealing-with-technical-debt/#aa-prudent-debt\">like an investment in the future</a>.</p>\n\n\n\n<p>You may want to remove that complexity when it’s no longer needed. Knowing the right time to do that in this age of evergreen browsers is difficult, but I have a couple of suggestions:</p>\n\n\n<h4 id=\"patience-is-a-virtue\">Patience is a virtue</h4>\n\n\n<p>In terms of waiting, I’d advise a conservative 6-ish months from release of a new feature before even beginning to think about investigating if you can remove feature detection. This accounts for:</p>\n\n\n\n<ul><li>Reboots</li><li>Update procrastinators</li><li>Update avoiders</li><li>Hardware refresh cycles</li><li>Corporate update policies,</li><li>etc.</li></ul>\n\n\n\n<p>I would also say that rough six month timeframe is in terms of a general, <a href=\"https://engineering.linecorp.com/en/blog/the-baseline-for-web-development-in-2022/\" rel=\"noopener\">global web audience</a>. This guesstimate changes if you cater to a specialized audience. The way to know who you actually serve? Analytics, yes, but also <a href=\"https://abookapart.com/products/just-enough-research\" rel=\"noopener\">talking to people</a>.</p>\n\n\n<h4 id=\"maybe-dont\">Maybe don’t</h4>\n\n\n<p>Remember: <a href=\"https://en.wikipedia.org/wiki/Survivorship_bias\" rel=\"noopener\">survivor bias</a> is real. Is the brand new feature you’re using preventing someone from using your website or web app? I say this because some people:</p>\n\n\n\n<ul><li>are forced to use a device that is managed by a third party,</li><li><a href=\"https://ericwbailey.design/writing/truths-about-digital-accessibility/#assistive-technology-may-not-be-running-on-high-powered-devices%252C-or-be-running-the-latest-software\" rel=\"noopener\">deliberately avoid updating their hardware and software</a> for fear of losing the ability to interact with the world,</li><li>understand their device is the problem, but <a href=\"https://blog.jim-nielsen.com/2022/a-web-for-all/\" rel=\"noopener\">don’t have the knowledge for how to fix it</a>, and</li><li>use “dead” evergreen browsers, devices that used to receive browser updates, but are no longer supported by their manufacturer.</li></ul>\n\n\n\n<p><strong>There isn’t a single, specific device, browser, and person we cater to when creating a web experience.</strong> Websites and web apps need to adapt to a near-infinite combination of these circumstances to be effective. This adaptability is a large part of what makes the web such a successful medium.</p>\n\n\n\n<p>Consider doing the hard work to make it easy and never remove feature queries and <code>@supports</code> statements. This creates a robust approach that can gracefully adapt to the past, as well as the future.</p>\n\n\n<h3 id=\"the-future-is-uncertain\">The future is uncertain</h3>\n\n\n<p>We’re long past the age of desktop computers. Browsers are showing up in more and more places: phones, tablets, watches, ebook readers, digital cameras, kiosks, televisions, home assistants, vending machines, photo frames, graphing calculators, ATMs, point of sale terminals, exercise equipment, video game consoles, billboards, refrigerators, virtual reality, and cars.</p>\n\n\n\n<p>Who knows what devices browsers will be included with in the future, or what capabilities they’ll have? Future-proof (and, er, past-proof) yourself with an approach that accommodates it.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p><small>Thank you to to <a href=\"https://www.jim-nielsen.com/\" rel=\"noopener\">Jim Nielsen</a> for their feedback.</small></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/evergreen-does-not-mean-immediately-available/\">“Evergreen” Does Not Mean Immediately Available</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I have a coworker who is smart, capable, and technologically-literate. Like me, they work on the web full-time.\n\n\n\nWhen they are sharing their screen in a meeting, I find myself disassociating fixating on the red update button in their copy of Chrome.\n\n\n\n\n\n\n\n\n\n\n\nClicking this button would start the process to update Chrome to the latest stable version.\n\n\n\nI’ve asked some probing questions about how frequently they reboot, which would also force Chrome to update upon relaunch. That’s the point of an “evergreen” browser, right? It’s easy to make sure you’re always using the latest and greatest version.\n\n\n\nIt turns out they prefer to wait until they absolutely have to because of the disruption it would cause in their daily workflow. Their behavior makes sense. They are prioritizing the quality of their overall computing experience, rather than catering to the demands of one specific app.\n\n\n\nLike me, my coworker also uses a top-of-the-line laptop to get things done. This means that the laptop can go for months without needing a reboot. Ironically, this might be a situation where a craptop is conditionally forced to have a faster browser upgrade path.\n\n\nEvergreen browsers\n\n\nBefore the advent of evergreen browsers, you would need to go to the manufacturer’s website and manually download and install the update. Prior to that you had to use a CD or floppy disk.\n\n\n\nSource: Floppy Disk of Netscape Navigator. Toshihiro Oimatsu, CC BY 2.0, via Wikimedia Commons.\n\n\n\nBy contrast, an evergreen browser is any browser that can automatically update itself. By this, I mean the browser will automatically pull down the code required to add new features and fix bugs once it has been released by the browser’s manufacturer. The update itself occurs with:\n\n\n\na prompt shown to the person using the browser that triggers an application restart,a download that happens in the background and gets applied on application restart, oron device restart.\n\n\nThe browsers themselves\n\n\nNearly all major browsers are evergreen. This includes Google Chrome, Microsoft Edge, and Mozilla Firefox.\n\n\n\nApple Safari is quasi-evergreen. By this I mean it automatically receives updates, but awkwardly requires them to be done via the macOS operating system update interface, where other system-wide updates are located.\n\n\n\n\n\n\n\nIf you haven’t been paying attention, the Safari team has been making a ton of improvements to their browser in the past few months—I’d love to see them continue with this trend by making the browser update path decoupled from existing macOS and iOS upgrade workflows.\n\n\nThe situation\n\n\nWith the actual, final, no-seriously-we-mean-it-this-time death of Internet Explorer, evergreen browsers are now the main consideration for desktop and laptop browsers. This is great! It means we can spend a lot less time fretting about who can use what.\n\n\n\nSpending less time does not mean spending no time, however.\n\n\nDelayed effects\n\n\nSupport from all evergreen browsers on caniuse.com does not necessarily mean support exists on the device a person is using—updates that have been pushed out don’t automatically get instantly applied.\n\n\n\nBecause of these two factors, I advocate for tempering your excitement with some restraint. It can be very tempting to rush and use the new and the shiny. Believe me, I’m not exempt from this urge—CSS is about to go from great to amazing, and the urge to use new features is very real.\n\n\n\nInstead, wait a bit. Work with the platform’s ability to create progressively enhanced experiences with CSS and JavaScript.\n\n\nLeverage the platform\n\n\nThe web is really good at being resilient, provided you work with its grain.\n\n\n\nBoth CSS and JavaScript have the ability to conditionally serve up experiences for browsers that support new features while providing alternatives for those that don’t.\n\n\n\nInstead of looking at the support table for something on caniuse.com and thinking, “I wish more browsers supported this feature so that I could use it!”, you can instead think “I’m going to use this feature today, but treat it as an experimental feature.”—Jeremy Keith, “Continuous partial browser support”\n\n\nJavaScript\n\n\nYou can use JavaScript to query whether or not a browser supports a certain feature. For example, the Navigator interface provides a mechanism for querying a user agent’s capabilities.\n\n\n\nif (!(“geolocation” in navigator)) {\n  // Logic if a user's current geographic location isn't available\n} else {\n  // Logic that is based on a user's current geographic location\n}\n\n\n\nIn this example, I am inverting a request for support for a browser’s Geolocation interface. Although its syntax is initially a little confusing to parse, it helps emphasize a progressive enhancement approach.\n\n\n\nAssume geolocation functionality isn’t supported to start and provide a way to accommodate the person using this browser (say manually typing in a ZIP Code, etc.). With this use case covered, you can then confidently build an experience for browser that support geolocation.\n\n\n\nThis thinking also extends to all other browser features and capabilities.\n\n\nCSS\n\n\nLike most other programming languages, CSS also lets us use if-like statements.\n\n\n\nFor example, the @supports at rule allows you to create a conditional statement that targets whether or not a browser supports something, and then apply logic to it. Browsers that honor the feature will utilize those styles, and browsers that don’t will ignore them. It is a concise, clever, adaptable solution.\n\n\n\n.component {\n  /* Base appearance */\n}\n\n@supports (grid-template-columns: subgrid;) {\n  .component {\n    /* Styling and positioning enhancement tweaks if subgrid is supported */\n  }\n}\n\n\n\nFor this example, this progressive enhancement approach ensures that a component’s content and functionality is preserved for every browser, but only creates fancy layouts for browsers capable of supporting them.\n\n\nWhen can I remove this stuff?\n\n\nYes, this approach adds more code, and more code means more complexity and maintenance. But it’s very important code. You might even call it technical debt and you’d be correct. But technical debt can be a good thing, like an investment in the future.\n\n\n\nYou may want to remove that complexity when it’s no longer needed. Knowing the right time to do that in this age of evergreen browsers is difficult, but I have a couple of suggestions:\n\n\nPatience is a virtue\n\n\nIn terms of waiting, I’d advise a conservative 6-ish months from release of a new feature before even beginning to think about investigating if you can remove feature detection. This accounts for:\n\n\n\nRebootsUpdate procrastinatorsUpdate avoidersHardware refresh cyclesCorporate update policies,etc.\n\n\n\nI would also say that rough six month timeframe is in terms of a general, global web audience. This guesstimate changes if you cater to a specialized audience. The way to know who you actually serve? Analytics, yes, but also talking to people.\n\n\nMaybe don’t\n\n\nRemember: survivor bias is real. Is the brand new feature you’re using preventing someone from using your website or web app? I say this because some people:\n\n\n\nare forced to use a device that is managed by a third party,deliberately avoid updating their hardware and software for fear of losing the ability to interact with the world,understand their device is the problem, but don’t have the knowledge for how to fix it, anduse “dead” evergreen browsers, devices that used to receive browser updates, but are no longer supported by their manufacturer.\n\n\n\nThere isn’t a single, specific device, browser, and person we cater to when creating a web experience. Websites and web apps need to adapt to a near-infinite combination of these circumstances to be effective. This adaptability is a large part of what makes the web such a successful medium.\n\n\n\nConsider doing the hard work to make it easy and never remove feature queries and @supports statements. This creates a robust approach that can gracefully adapt to the past, as well as the future.\n\n\nThe future is uncertain\n\n\nWe’re long past the age of desktop computers. Browsers are showing up in more and more places: phones, tablets, watches, ebook readers, digital cameras, kiosks, televisions, home assistants, vending machines, photo frames, graphing calculators, ATMs, point of sale terminals, exercise equipment, video game consoles, billboards, refrigerators, virtual reality, and cars.\n\n\n\nWho knows what devices browsers will be included with in the future, or what capabilities they’ll have? Future-proof (and, er, past-proof) yourself with an approach that accommodates it.\n\n\n\n\n\n\n\nThank you to to Jim Nielsen for their feedback.\n\n“Evergreen” Does Not Mean Immediately Available originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-02-01T15:38:41.000Z",
      "date_modified": "2022-02-01T15:38:41.000Z",
      "_plugin": {
        "pageFilename": "945d7970b97ebb904c6a777bdb868831549603bee47ef276c1f08209c3be89ba.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362886",
      "url": "https://css-tricks.com/metaphors-we-web-by/",
      "title": "Metaphors We Web By",
      "summary": "Maggie Appleton gets into what is perhaps the foremost metaphor the web is founded on: paper. \n\nPaper documents were the original metaphor for the web. […]\nThe page you’re reading this on still mimics paper. We still call it \n\n…\n\nMetaphors We Web By originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Maggie Appleton gets into what is perhaps <a href=\"https://maggieappleton.com/metaphors-web\" rel=\"noopener\">the foremost metaphor the web is founded on</a>: paper. </p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p><strong>Paper documents</strong>&nbsp;were the original metaphor for the web. [&#8230;]</p><p>The page you&#8217;re reading this on still mimics paper. We still call it a&nbsp;<em>page</em>&nbsp;or an HTML&nbsp;<em>document</em>. It follows the same typographic rules and conventions – black text on white backgrounds and a top-to-bottom / left-to-right heirarchical structure.</p></blockquote>\n\n\n\n<span id=\"more-362886\"></span>\n\n\n\n<p>Over in the <a href=\"https://www.patreon.com/shoptalkshow\" rel=\"noopener\">ShopTalk Discord</a>, the idea of CSS custom properties named <code>--ink</code> and <code>--paper</code> came up the other day as abstractions for <code>color</code> and <code>background-color</code> and I kinda like it. There&#8217;s something <em>more</em> clear about the meanings of those terms to me.</p>\n\n\n\n<p>But Maggie gets into some of the downsides of the paper-based metaphors, pointing out Ted Nelson&#8217;s <a href=\"https://www.xanadu.net/XanaduSpace/btf.htm\" rel=\"noopener\">critiques</a>. This is interesting:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>We treat the page as the smallest unit of linkable information, instead of the sentence or paragraph.</p></blockquote>\n\n\n\n<p>That kind of ignores the idea of <a href=\"https://css-tricks.com/a-complete-guide-to-links-and-buttons/#aa-a-jump-link\">jump links</a> or Chrome&#8217;s new-ish <a href=\"https://www.macrumors.com/how-to/link-to-highlighted-text-webpage-chrome/\" rel=\"noopener\">link to highlight</a>, but I take the point.</p>\n\n\n\n<p>Will the main metaphor of the web as paper change in time? I&#8217;d say it&#8217;s highly likely. The interactivity and behavior we expect on the web today is a million miles different than we expected in the past and that&#8217;s going to keep happening. These updates accelerate the change. Perhaps someday the metaphors will have shifted to &#8220;alternate neighborhood,&#8221; &#8220;second brain,&#8221; or &#8220;dedicated assistant.&#8221;</p>\n<p><a href=\"https://maggieappleton.com/metaphors-web\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/metaphors-we-web-by/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/metaphors-we-web-by/\">Metaphors We Web By</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Maggie Appleton gets into what is perhaps the foremost metaphor the web is founded on: paper. \n\n\n\nPaper documents were the original metaphor for the web. […]The page you’re reading this on still mimics paper. We still call it a page or an HTML document. It follows the same typographic rules and conventions – black text on white backgrounds and a top-to-bottom / left-to-right heirarchical structure.\n\n\n\n\n\n\n\nOver in the ShopTalk Discord, the idea of CSS custom properties named --ink and --paper came up the other day as abstractions for color and background-color and I kinda like it. There’s something more clear about the meanings of those terms to me.\n\n\n\nBut Maggie gets into some of the downsides of the paper-based metaphors, pointing out Ted Nelson’s critiques. This is interesting:\n\n\n\nWe treat the page as the smallest unit of linkable information, instead of the sentence or paragraph.\n\n\n\nThat kind of ignores the idea of jump links or Chrome’s new-ish link to highlight, but I take the point.\n\n\n\nWill the main metaphor of the web as paper change in time? I’d say it’s highly likely. The interactivity and behavior we expect on the web today is a million miles different than we expected in the past and that’s going to keep happening. These updates accelerate the change. Perhaps someday the metaphors will have shifted to “alternate neighborhood,” “second brain,” or “dedicated assistant.”\nTo Shared Link — Permalink on CSS-Tricks\nMetaphors We Web By originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-02-01T00:03:57.000Z",
      "date_modified": "2022-02-01T00:03:57.000Z",
      "_plugin": {
        "pageFilename": "87307065b38d2f063b0d1028ef0e0c8926bb9ad138f2dcdda1f5edb754c869e7.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362730",
      "url": "https://css-tricks.com/css-scroll-timeline-reverse-motion-preference/",
      "title": "Notes on Reverse-Scrolling Columns With CSS Scroll-Timeline",
      "summary": "Lemme do this one quick-hits style:\n\nMary Lou published a quintessentially-Codrops-y demo called Alternate Column Scroll.\nThe scrolling effect is powered by Locomotive Scroll, which we’ve coincidentally covered before.\nBramus has been exploring native CSS scrolling effects \n\n…\n\nNotes on Reverse-Scrolling Columns With CSS Scroll-Timeline originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Lemme do this one quick-hits style:</p>\n\n\n\n<ul><li>Mary Lou published a quintessentially-Codrops-y demo called <a href=\"https://tympanus.net/Development/ColumnScroll/\" rel=\"noopener\">Alternate Column Scroll</a>.</li><li>The scrolling effect is powered by <a href=\"https://locomotivemtl.github.io/locomotive-scroll/\" rel=\"noopener\">Locomotive Scroll</a>, which <a href=\"https://css-tricks.com/how-to-use-the-locomotive-scroll-for-all-kinds-of-scrolling-effects/\">we&#8217;ve coincidentally covered before</a>.</li><li>Bramus has been exploring native CSS scrolling effects using the future CSS Scroll-Timeline feature for a while now. He&#8217;s got a four-parter that digs deep into it, <a href=\"https://www.bram.us/2021/02/23/the-future-of-css-scroll-linked-animations-part-1/\" rel=\"noopener\">starting here</a>.</li><li>It&#8217;s <a href=\"https://caniuse.com/css-scroll-timeline\" rel=\"noopener\">early days</a> for it, but <code>@scroll-timeline</code> is flagged in Chrome-land. Bramus has also shown us how incredibly useful this feature will be <a href=\"https://css-tricks.com/practical-use-cases-for-scroll-linked-animations-in-css-with-scroll-timelines/\">right here on CSS-Tricks</a>, especially when <a href=\"https://css-tricks.com/scroll-linked-animations-with-the-web-animations-api-waapi-and-scrolltimeline/\">combined with WAAPI</a>. </li><li>So, Bramus <a href=\"https://www.bram.us/2022/01/01/reverse-scrolling-columns-with-css-scroll-timeline/\" rel=\"noopener\">set out to re-build the scrolling</a> aspects of the demo (the middle column scrolls naturally and the outer two columns scroll in reverse). Turns out you can <a href=\"https://github.com/flackr/scroll-timeline\" rel=\"noopener\">polyfill it</a> and sprinkle in some WAAPI to <a href=\"https://codepen.io/bramus/pen/jOGGKRq\" rel=\"noopener\">replicate it nicely</a>. Cool.</li></ul>\n\n\n\n<span id=\"more-362730\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"718\" height=\"458\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/reverse-scroll-timeline-columns.gif?resize=718%2C458&#038;ssl=1\" alt=\"Showing three columns of photos of actresses demonstrating the CSS scroll-timeline effect. The first and their columns scroll up and down together. The second columns scrolls the opposite direction.\" class=\"wp-image-362774\" data-recalc-dims=\"1\"/></figure>\n\n\n<h3 id=\"css-scrolltimeline-with-prefersreducedmotion\">CSS Scroll-Timeline with <code>prefers-reduced-motion</code></h3>\n\n\n<p>The only thing I&#8217;d add is something to honor <code>prefers-reduced-motion</code>, as I could see this sort of scrolling motion affecting someone with motion sickness. To do that, you could combine tests in the same line the support test is being done in JavaScript:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">if (\n    !CSS.supports(\"animation-timeline: foo\") &amp;&amp; \n    !window.matchMedia('(prefers-reduced-motion: reduce)').matches\n   ) {\n     // Do fancy stuff\n}</code></pre>\n\n\n\n<p>I&#8217;m not 100% if it&#8217;s best to test for <code>no-preference</code> or the opposite of <code>reduce</code>. Either way, the trick in CSS is to wrap anything you&#8217;re going to do with <code>@scroll-timeline</code> and <code>animation-timeline</code> in an <code>@supports</code> test (in case you want to do something different otherwise) and then <em>wrap that</em> in a preference test:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media (prefers-reduced-motion: no-preference) {\n\n    @supports (animation-timeline: works) {\n\n      /* Do fancy stuff */\n\n    }\n\n}</code></pre>\n\n\n\n<p><a href=\"https://codepen.io/chriscoyier/pen/gOXbJVB\" rel=\"noopener\">Here&#8217;s a demo of that</a>, with all the real credit to Bramus here for getting it going. </p>\n\n\n\n<p>Ooo and ya know what? The CSS gets nicer should <code><a href=\"https://css-tricks.com/proposal-for-css-when/\">@when</a></code> land as a feature:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@when supports(animation-timeline: works) and media(prefers-reduced-motion: no-preference) {\n\n} @else {\n\n}</code></pre>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-scroll-timeline-reverse-motion-preference/\">Notes on Reverse-Scrolling Columns With CSS Scroll-Timeline</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Lemme do this one quick-hits style:\n\n\n\nMary Lou published a quintessentially-Codrops-y demo called Alternate Column Scroll.The scrolling effect is powered by Locomotive Scroll, which we’ve coincidentally covered before.Bramus has been exploring native CSS scrolling effects using the future CSS Scroll-Timeline feature for a while now. He’s got a four-parter that digs deep into it, starting here.It’s early days for it, but @scroll-timeline is flagged in Chrome-land. Bramus has also shown us how incredibly useful this feature will be right here on CSS-Tricks, especially when combined with WAAPI. So, Bramus set out to re-build the scrolling aspects of the demo (the middle column scrolls naturally and the outer two columns scroll in reverse). Turns out you can polyfill it and sprinkle in some WAAPI to replicate it nicely. Cool.\n\n\n\n\n\n\n\n\n\n\nCSS Scroll-Timeline with prefers-reduced-motion\n\n\nThe only thing I’d add is something to honor prefers-reduced-motion, as I could see this sort of scrolling motion affecting someone with motion sickness. To do that, you could combine tests in the same line the support test is being done in JavaScript:\n\n\n\nif (\n    !CSS.supports(\"animation-timeline: foo\") && \n    !window.matchMedia('(prefers-reduced-motion: reduce)').matches\n   ) {\n     // Do fancy stuff\n}\n\n\n\nI’m not 100% if it’s best to test for no-preference or the opposite of reduce. Either way, the trick in CSS is to wrap anything you’re going to do with @scroll-timeline and animation-timeline in an @supports test (in case you want to do something different otherwise) and then wrap that in a preference test:\n\n\n\n@media (prefers-reduced-motion: no-preference) {\n\n    @supports (animation-timeline: works) {\n\n      /* Do fancy stuff */\n\n    }\n\n}\n\n\n\nHere’s a demo of that, with all the real credit to Bramus here for getting it going. \n\n\n\nOoo and ya know what? The CSS gets nicer should @when land as a feature:\n\n\n\n@when supports(animation-timeline: works) and media(prefers-reduced-motion: no-preference) {\n\n} @else {\n\n}\n\nNotes on Reverse-Scrolling Columns With CSS Scroll-Timeline originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-31T21:02:06.000Z",
      "date_modified": "2022-01-31T21:02:06.000Z",
      "_plugin": {
        "pageFilename": "dca04dbcafc08601f33675154416ffbe6bdff07713918467b9655ec417d1bd1f.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362478",
      "url": "https://css-tricks.com/the-relevance-of-typescript-in-2022/",
      "title": "The Relevance of TypeScript in 2022",
      "summary": "It’s 2022. And the current relevance of TypeScript is undisputed. TypeScript has dominated the front-end developer experience by many, many accounts. By now you likely already know that TypeScript is a superset of JavaScript, building on JavaScript by adding …\n\nThe Relevance of TypeScript in 2022 originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>It’s 2022. And the current relevance of <a href=\"https://www.typescriptlang.org/\" rel=\"noopener\">TypeScript</a> is undisputed. TypeScript has dominated the front-end developer experience by <a href=\"https://octoverse.github.com/#top-languages-over-the-years\" rel=\"noopener\">many</a>, <a href=\"https://insights.stackoverflow.com/survey/2021#technology-most-popular-technologies\" rel=\"noopener\">many</a> accounts. By now you likely already know that TypeScript is a superset of JavaScript, building on JavaScript by adding syntax for type declarations, classes, and other object-oriented features with type-checking.</p>\n\n\n\n<p>And when I say dominated, I mean TypeScript has exploded loudly on the scene since it was introduced in 2012.</p>\n\n\n\n<span id=\"more-362478\"></span>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_5CED64AC3EA086E1D141F51D788F6CC598BB641383ED7E635CB2C07A7B22391E_1642692515547_Screen+Shot+2022-01-20+at+7.24.47+AM.png\" alt=\"The relevance of TypeScript illustrated in a line chart showing the popularity of multiple languages since 2014. TypeScript's popularity has risen the fastest among 10 popular languages and ranks fourth overall.\"/><figcaption>Source:&nbsp;<a target=\"_blank\" href=\"https://octoverse.github.com/#top-languages-over-the-years\" rel=\"noreferrer noopener\">State of the Octoverse 2021</a>&nbsp;(GitHub)</figcaption></figure>\n\n\n\n<p>That sort of growth is incredible, especially considering it <em>really</em> started taking off in 2017. But as we get into 2022, just how relevant is TypeScript going to be moving forward? It’s not like TypeScript will continue to grow leaps and bounds this way forever… right?!</p>\n\n\n\n<p>It’s interesting to poke at the idea a bit to see where TypeScript is today and how it will continue playing a role in front-end development into the future. Jake Albaugh has already poked at the relevance of TypeScript himself, but from the perspective of whether or not <a href=\"https://css-tricks.com/typescript-relevance/\">knowing JavaScript makes <em>you</em> relevant as a developer</a>.</p>\n\n\n\n<p>So, what&#8217;s the future relevance of TypeScript look like? Let&#8217;s see.</p>\n\n\n<h3 id=\"typescripts-roots\">TypeScript’s roots</h3>\n\n\n<p>OK, so we know TypeScript adds syntax to JavaScript. This syntax is used by <a href=\"https://www.typescriptlang.org/docs/handbook/2/basic-types.html#tsc-the-typescript-compiler\" rel=\"noopener\">TypeScript’s</a> <a href=\"https://www.typescriptlang.org/docs/handbook/2/basic-types.html#tsc-the-typescript-compiler\" rel=\"noopener\">compiler</a> to sniff out code errors before they happen, then it spits out vanilla JavaScript that browsers can understand. It’s also worth mentioned that TypeScript is maintained by Microsoft, <a href=\"https://github.com/microsoft/TypeScript/blob/main/LICENSE.txt\" rel=\"noopener\">licensed under Apache 2 license</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1076\" height=\"306\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1641271877106_Presentation1.png?resize=1076%2C306&#038;ssl=1\" alt=\"A blue oval labeled TypeScript code with an arrow to the right pointing at a green oval labeled TypeScript compiler, followed by another arrow pointing right toward a red oval labeled JavaScript code.\" class=\"wp-image-362479\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1641271877106_Presentation1.png?w=1076&amp;ssl=1 1076w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1641271877106_Presentation1.png?resize=300%2C85&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1641271877106_Presentation1.png?resize=1024%2C291&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1641271877106_Presentation1.png?resize=768%2C218&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1641271877106_Presentation1.png?resize=1000%2C284&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>And we can’t really talk about TypeScript without also calling out ECMAScript (ES), the JavaScript standard and scripting language specification standardized by <a href=\"https://www.ecma-international.org/\" rel=\"noopener\">ECMA International</a>. The JavaScript naming convention started with ES1 and has evolved to ES6. The most recent version, the 12<sup>th</sup> edition — or <a href=\"https://262.ecma-international.org/12.0/\" rel=\"noopener\">ECMAScript 2021</a> — was published in June 2021.</p>\n\n\n\n<p>TypeScript is a strict superset of ECMAScript 2015. That means JavaScript syntax is also Typescript syntax. Conversely, a TypeScript program can effortlessly consume JavaScript.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1640195232849_Fig2.webp?resize=287%2C287&#038;ssl=1\" alt=\"Concentric circles in blue, orange, green, and magenta showing how TypeScript encompasses ES 2016, ES 2015, and ES 5.\" class=\"wp-image-362480\" width=\"287\" height=\"287\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1640195232849_Fig2.webp?w=383&amp;ssl=1 383w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1640195232849_Fig2.webp?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1640195232849_Fig2.webp?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1640195232849_Fig2.webp?resize=100%2C100&amp;ssl=1 100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Credit:&nbsp;<a target=\"_blank\" href=\"https://github.com/seema1711/typescript-hello-world\" rel=\"noreferrer noopener\">Seema Saharan</a></figcaption></figure>\n\n\n\n<p>It’s important to know all this because we need to know where TypeScript gets its roots in order to poke at its possible future.</p>\n\n\n<h3 id=\"typescripts-components\">TypeScript’s components</h3>\n\n\n<p>There are three fundamental components of TypeScript that make it as awesome as it is. Not only do we get the aforementioned type-checking that comes with the TypeScript language, but we get the TypeScript compiler and <a href=\"https://github.com/Microsoft/TypeScript/wiki/Using-the-Language-Service-API\" rel=\"noopener\">language service</a> as well.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1010\" height=\"648\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1642879057315_Fig3.jpg?resize=1010%2C648&#038;ssl=1\" alt=\"A tree chart showing TypeScript at the top with three branches representing its language, compiler, and language service. Each of those has a single branch explaining what those components do.\" class=\"wp-image-362481\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1642879057315_Fig3.jpg?w=1010&amp;ssl=1 1010w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1642879057315_Fig3.jpg?resize=300%2C192&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1642879057315_Fig3.jpg?resize=768%2C493&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1642879057315_Fig3.jpg?resize=1000%2C642&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>These are the pieces that keep TypeScript relevant, so to speak. The language is what developers love writing. The compiler is what interprets the language for browsers. The service processes the language on demand with blazing speed. Without these, TypeScript just ain’t what it is.</p>\n\n\n<h3 id=\"typescript-support\">TypeScript support</h3>\n\n\n<p>There’s another key piece to TypeScript’s relevance that often goes overlooked: <strong>it’s super well-supported by text editors.</strong> TypeScript’s relevance is only as good as it is accessible and something that can be picked up by just about any front-ender.</p>\n\n\n\n<p>TypeScript was initially supported only in <a href=\"https://visualstudio.microsoft.com/\" rel=\"noopener\">Microsoft&#8217;s Visual Studio</a> code editor. Makes sense, right? I mean, TypeScript is maintained by Microsoft and all. But as TypeScript grew legs, more code editors and IDEs began started supporting it either natively or with plugins.</p>\n\n\n\n<p>Some of the most popular editors and IDEs, besides Visual Studio Code, include:</p>\n\n\n\n<ul><li><a href=\"https://atom.io/docs\" rel=\"noopener\">Atom</a></li><li><a href=\"https://www.sublimetext.com/blog/articles/sublime-text-4\" rel=\"noopener\">Sublime Text</a></li><li><a href=\"https://www.jetbrains.com/webstorm/\" rel=\"noopener\">WebStorm</a></li><li><a href=\"https://www.gnu.org/software/emacs/documentation.html\" rel=\"noopener\">Emacs</a></li><li><a href=\"https://netbeans.apache.org/kb/docs/platform/index.html\" rel=\"noopener\">NetBeans</a></li><li><a href=\"https://help.eclipse.org/latest/index.jsp\" rel=\"noopener\">Eclipse</a></li><li><a href=\"https://neovim.io/doc/general/\" rel=\"noopener\">NeoVim</a></li></ul>\n\n\n\n<p>And with more support comes more TypeScript relevance. The fact that you can pick up nearly any code editor and start hammering out TypeScript code makes it more and more a go-to choice as it’s simply available where you want it.</p>\n\n\n<h3 id=\"typescripts-evolution\">TypeScript’s evolution</h3>\n\n\n<p>From its initial release in 2012 to the present day (early 2022), there have been many improvements released in each version of TypeScript, like:</p>\n\n\n\n<ul><li>TypeScript 1.6 introduced the <code>.tsx</code> file extension, which <a href=\"https://www.typescriptlang.org/docs/handbook/jsx.html\" rel=\"noopener\">enabled JSX within TypeScript files</a> and made the new <code>as</code> operator the default way to cast.</li><li>TypeScript 2 brought in a major improvement by allowing developers to optionally prevent variables from being assigned null values.</li><li>Version 2.3 of TypeScript introduced support for ES6 features, such as <a href=\"https://www.typescriptlang.org/docs/handbook/iterators-and-generators.html\" rel=\"noopener\">generators and iterators</a>.</li><li>TypeScript 3 brought in language enhancements, such as <a href=\"https://www.typescriptlang.org/play/typescript/type-primitives/tuples.ts.html\" rel=\"noopener\">tuples</a> in REST parameters and spread expressions.</li><li><a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html\" rel=\"noopener\">TypeScript 4</a> (we’re currently at 4.5.2 at the time of this writing) continues the evolution with refinements to tuples, template literal types, smarter type alias preservation, and improvements to <code>Awaited</code> and <code>Promise</code>.</li></ul>\n\n\n\n<p>This is exactly the sort of speed at which you might expect to see a blossoming programming language iterating and releasing new features. Again, good context when evaluating the relevance of TypeScript moving forward.</p>\n\n\n<h3 id=\"typescripts-popularity\">TypeScript’s popularity</h3>\n\n\n<p>We’ve already established that TypeScript is, like, super popular. The chart that kicked off this post showed TypeScript growing at breakneck speed in a matter of a few years to rank as the fourth most popular language. But don’t just take my word and GitHub’s word for it (it is owned by Microsoft after all). Here’s a bunch of published research from various places saying the same thing.</p>\n\n\n<h4 id=\"redmonk\">RedMonk</h4>\n\n\n<p>RedMonk, a development industry analysis firm has <a href=\"https://redmonk.com/sogrady/2021/08/05/language-rankings-6-21/\" rel=\"noopener\">this to say</a> about ranking TypeScript eighth in its 2021 list of most popular languages:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Does [TypeScript] have the capacity to move up and outperform long term incumbents such as C#, C++ or even PHP eventually, or is TypeScript essentially at or near the limits of its potential? It’s impossible to say with any reliability, but it is interesting to note that a year ago at this time TypeScript lagged the fifth place languages by six points in the combined score that the rankings are based on, but in this run the gap was only two points. Past performance doesn’t always predict future performance, of course, but it suggests at least that TypeScript might yet have some room in front of it.</p></blockquote>\n\n\n<h4 id=\"pypl-index\">PYPL Index</h4>\n\n\n<p>The <a href=\"https://pypl.github.io/PYPL.html\" rel=\"noopener\">PYPL Index</a> is a measure of Google searches for programming language tutorials. It’s not exact science, but a good indicator of interest. And, over time, TypeScript appears to be trending in a flat direction. TypeScript currently ranks eighth and, compared to a year ago at this time, PYPL indicates that TyeScript is trending flat overall while other languages, like Python and C++ are trending up year-over-year.</p>\n\n\n<h4 id=\"stack-overflow-2021-developer-survey\">Stack Overflow 2021 Developer Survey</h4>\n\n\n<p>According to Stack Overflow’s <a href=\"https://insights.stackoverflow.com/survey/2021#most-popular-technologies-language\" rel=\"noopener\">2021 Developer Survey</a>, TypeScript is about as popular as PYPL indicates it is, coming in as the seventh most popular language, as ranked by approximately 83,000 developers.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1458\" height=\"893\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0064.jpeg?resize=1458%2C893&#038;ssl=1\" alt=\"An orange bar chart on a dark background showing TypeScript ranking seventh behind the likes of JavaScript, HTML/CSS, Python, SWL, Java, and Node.\" class=\"wp-image-362502\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0064.jpeg?w=1458&amp;ssl=1 1458w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0064.jpeg?resize=300%2C184&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0064.jpeg?resize=1024%2C627&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0064.jpeg?resize=768%2C470&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0064.jpeg?resize=1000%2C612&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The Stack Overflow annual survey is one of the most credible and most-awaited developer surveys. It uses a humongous developer base from all over the world to arrive at its conclusions. And how relevant does this say TypeScript is in the front-end community? Well, it’s not only the seventh most popular language, but it the <a href=\"https://insights.stackoverflow.com/survey/2021#section-most-loved-dreaded-and-wanted-programming-scripting-and-markup-languages\" rel=\"noopener\">second technology that developers want to work with the most</a> (followed by Python), and the third most loved language (behind Rust and Clojure).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1082\" height=\"886\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0065.jpeg?resize=1082%2C886&#038;ssl=1\" alt=\"\" class=\"wp-image-362486\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0065.jpeg?w=1082&amp;ssl=1 1082w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0065.jpeg?resize=300%2C246&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0065.jpeg?resize=1024%2C839&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0065.jpeg?resize=768%2C629&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0065.jpeg?resize=1000%2C819&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Source: <a href=\"https://insights.stackoverflow.com/survey/2021#most-loved-dreaded-and-wanted-language-want\" rel=\"noopener\">Stack Overflow Developer Survey 2021</a></figcaption></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n<h4 id=\"2020-state-of-javascript\">2020 State of JavaScript</h4>\n\n\n<p>This annual survey (the next one is <a href=\"https://stateofjs.com\" rel=\"noopener\">open now</a>!) shows that TypeScript boasts a sparkling 93% satisfaction rate (up from 89% in 2019) among developers which is tops in the rankings. It also took top prize in interest (70%, up from 66%), usage (78%, up from 66%), and awareness (100% which is shockingly flat from 2019).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1573\" height=\"670\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1640195329231_Fig6.jpg?resize=1573%2C670&#038;ssl=1\" alt=\"Screenshot of the 2021 State of JavaScript survey chart of popular JavaScript flavors. TypeScript was second in 2016 but took first place in 2017 and has remained there since, above PostScript, Reason, Elm, and ClojureScript.\" class=\"wp-image-362482\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1640195329231_Fig6.jpg?w=1573&amp;ssl=1 1573w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1640195329231_Fig6.jpg?resize=300%2C128&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1640195329231_Fig6.jpg?resize=1024%2C436&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1640195329231_Fig6.jpg?resize=768%2C327&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1640195329231_Fig6.jpg?resize=1536%2C654&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A61586A4505EA5B9BA50CB828D9A6F7080E646C3ED069BA649FC253715E4FA86_1640195329231_Fig6.jpg?resize=1000%2C426&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h4 id=\"githut-20-language-rankings\">GitHut 2.0 Language Rankings</h4>\n\n\n<p><a href=\"https://madnight.github.io/githut\" rel=\"noopener\">This ranking</a> is an analysis that interacts with GitHub to suss out the most used languages across GitHub. And it’s indicative of TypeScript’s relevance in that TypeScript ranked seventh in the first quarter of 2021 before leaping up to fourth in the fourth quarter, and with the highest year-over-year change.</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2387\" height=\"1243\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0067.jpeg?resize=2387%2C1243&#038;ssl=1\" alt=\"Showing TypeScript ranking seventh in a data table.\" class=\"wp-image-362489\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0067.jpeg?w=2387&amp;ssl=1 2387w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0067.jpeg?resize=300%2C156&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0067.jpeg?resize=1024%2C533&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0067.jpeg?resize=768%2C400&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0067.jpeg?resize=1536%2C800&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0067.jpeg?resize=2048%2C1066&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0067.jpeg?resize=1000%2C521&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><a href=\"https://madnight.github.io/githut/#/pull_requests/2021/1\" rel=\"noopener\">Source</a></figcaption></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2389\" height=\"1249\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0068.jpeg?resize=2389%2C1249&#038;ssl=1\" alt=\"Showing TypeScript ranking fourth in a data table.\" class=\"wp-image-362488\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0068.jpeg?w=2389&amp;ssl=1 2389w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0068.jpeg?resize=300%2C157&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0068.jpeg?resize=1024%2C535&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0068.jpeg?resize=768%2C402&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0068.jpeg?resize=1536%2C803&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0068.jpeg?resize=2048%2C1071&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/IMG_0068.jpeg?resize=1000%2C523&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><a href=\"https://madnight.github.io/githut/#/pull_requests/2021/4\" rel=\"noopener\">Source</a></figcaption></figure>\n</div>\n</div>\n\n\n\n<p>OK, so it’s clear that TypeScript is a big deal. But again, how relevant will it be moving forward?</p>\n\n\n<h3 id=\"the-relevance-of-typescript-in-2022-and-beyond\">The relevance of TypeScript in 2022 and beyond</h3>\n\n\n<p>So far, I’ve tried to paint a picture that identifies where TypeScript fits into the front-end development landscape, showing how it’s quickly evolved into a mature and serious contender as a programming language, and is fast-becoming both the programming language of choice and the one people like most.</p>\n\n\n\n<p>In other words: <strong>TypeScript is relevant today.</strong></p>\n\n\n\n<p>But if we want to take a guess at where TypeScript’s current success is taking it, then it’s worth taking a peek the <a href=\"https://github.com/Microsoft/TypeScript/wiki/Roadmap\" rel=\"noopener\">official TypeScript roadmap</a> over at GitHub.</p>\n\n\n\n<p>Here’s what we have to look forward to:</p>\n\n\n\n<ul><li><code>typeof</code> class changes</li><li>Allow more code before super calls in subclasses</li><li>Generalized index signatures</li><li><code>--noImplicitOverride</code> and the <code>override</code> keyword</li><li>Static index signatures</li><li>Use <code>unknown</code> as the type for catch clause variables</li><li>Investigate nominal typing support</li><li>Flattening declarations</li><li>Implement the ES decorator proposal</li><li>Investigate ambient, deprecated, and conditional decorators</li><li>Investigate partial type argument inference</li><li>Implement a quick fix to scaffold local <code>@types</code> packages</li><li>Investigate error messages in haiku or iambic pentameter</li><li>Implement decorators for function expressions and arrow functions</li></ul>\n\n\n\n<p>I think all of these roadmapped features are both exciting and will play a big role in maintaining the relevance of TypeScript for the foreseeable future. And while I think all of them are worthy of deeper discussion, here are a few I believe are core for TypeScript in 2022 and beyond.</p>\n\n\n<h4 id=\"flattening-declarations\">Flattening declarations</h4>\n\n\n<p>The <a href=\"https://github.com/Microsoft/TypeScript/issues/4433\" rel=\"noopener\">flattening declarations proposal</a>, for example, aims to enable bundling declarations for TypeScript projects so that a library can be consumed with a single TypeScript file, regardless of how many modules it may contain internally.</p>\n\n\n\n<p>The idea with flattening declarations is that a single amalgamated and flattened <code>.d.ts</code> file, in addition to a single output <code>.js</code> file, should be emitted by the TypeScript compiler. Access modifiers should be taken into consideration and respected when generating the DTS. Having a single declaration file with flattened declarations will make things much easier for developers and improve maintainability in the long run.</p>\n\n\n<h4 id=\"ambient-deprecated-and-conditional-decorators\">Ambient, Deprecated, and Conditional decorators</h4>\n\n\n<p>Design time decorators— such as <a href=\"https://github.com/Microsoft/TypeScript/issues/2900\" rel=\"noopener\">ambient</a> and <a href=\"https://github.com/Microsoft/TypeScript/issues/3538\" rel=\"noopener\">conditional</a> decorators — are another feature to look forward to. Decorators enable developers to add both annotations and metadata to existing code in a declarative way. In TypeScript, each decorator has a special name starting with <code>@</code> that will not be emitted in the converted JavaScript, but can be persisted in <code>.d.ts</code> outputs.</p>\n\n\n\n<p>Consider, for example, if you could issue a warning whenever someone attempts to employ a deprecated method or property so that they could upgrade to a newer library version. By having ambient, deprecated, and conditional decorators as part of the TypeScript specification in the future, the language will provide more powerful ways for developers to annotate their code and include metadata in it.</p>\n\n\n<h4 id=\"decorators-for-function-expressionsarrow-functions\">Decorators for function expressions/arrow functions</h4>\n\n\n<p>Decorators for function and arrow expressions is another feature I think will build on TypeScript’s ongoing relevance. Adding annotations or metadata to those expressions will enable developers to determine at runtime information about which the decorator has been applied.</p>\n\n\n<h4 id=\"investigate-error-messages-in-haiku-or-iambic-pentameter\">Investigate error messages in haiku or iambic pentameter</h4>\n\n\n<p>OK, so maybe this one isn’t so much about the relevance of TypeScript&#8217;s robust feature set, but I think the personality it adds to the language is part of the overall package that makes TypeScript a pleasure to use. How cool (and pleasant) would it be to get an error message like this:</p>\n\n\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">My code is breaking<br>Ignore this error message<br>Everything is good <br> <a href=\"https://twitter.com/hashtag/TSConf?src=hash&amp;ref_src=twsrc%5Etfw\" rel=\"noopener\">#TSConf</a></p>— Nick Nisi (@nicknisi) <a href=\"https://twitter.com/nicknisi/status/973607269005799425?ref_src=twsrc%5Etfw\" rel=\"noopener\">March 13, 2018</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n<p>Sure beats a programmatic message that can sometimes feel like a scolding! And while there has been no progress on this proposed feature in the last two years, it still exists on the official roadmap which means someone will eventually work on it.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Microsoft unveiled Visual Studio 2022 Preview 3 <a href=\"https://devblogs.microsoft.com/visualstudio/visual-studio-2022-preview-3-now-available/\" rel=\"noopener\">back in August 2021</a>. There was a lot to get excited about with that release, like new JavaScript and TypeScript tools to enhance the experience for single-page applications and front-end development. Plus, it included a new JavaScript/TypeScript project type to facilitate developers building standalone Angular, React, and Vue projects. Then there’s the enhancement that Visual Studio will leverage the native CLIs of each JavaScript framework to build front-end project templates.</p>\n\n\n\n<p>All of this to say that TypeScript is not just evolving; it is exploding and only gaining momentum as we settle in 2022. So, yes, TypeScript is relevant in 2022… and will continue to be for some time to come.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-relevance-of-typescript-in-2022/\">The Relevance of TypeScript in 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "It’s 2022. And the current relevance of TypeScript is undisputed. TypeScript has dominated the front-end developer experience by many, many accounts. By now you likely already know that TypeScript is a superset of JavaScript, building on JavaScript by adding syntax for type declarations, classes, and other object-oriented features with type-checking.\n\n\n\nAnd when I say dominated, I mean TypeScript has exploded loudly on the scene since it was introduced in 2012.\n\n\n\n\n\n\n\nSource: State of the Octoverse 2021 (GitHub)\n\n\n\nThat sort of growth is incredible, especially considering it really started taking off in 2017. But as we get into 2022, just how relevant is TypeScript going to be moving forward? It’s not like TypeScript will continue to grow leaps and bounds this way forever… right?!\n\n\n\nIt’s interesting to poke at the idea a bit to see where TypeScript is today and how it will continue playing a role in front-end development into the future. Jake Albaugh has already poked at the relevance of TypeScript himself, but from the perspective of whether or not knowing JavaScript makes you relevant as a developer.\n\n\n\nSo, what’s the future relevance of TypeScript look like? Let’s see.\n\n\nTypeScript’s roots\n\n\nOK, so we know TypeScript adds syntax to JavaScript. This syntax is used by TypeScript’s compiler to sniff out code errors before they happen, then it spits out vanilla JavaScript that browsers can understand. It’s also worth mentioned that TypeScript is maintained by Microsoft, licensed under Apache 2 license.\n\n\n\n\n\n\n\nAnd we can’t really talk about TypeScript without also calling out ECMAScript (ES), the JavaScript standard and scripting language specification standardized by ECMA International. The JavaScript naming convention started with ES1 and has evolved to ES6. The most recent version, the 12th edition — or ECMAScript 2021 — was published in June 2021.\n\n\n\nTypeScript is a strict superset of ECMAScript 2015. That means JavaScript syntax is also Typescript syntax. Conversely, a TypeScript program can effortlessly consume JavaScript.\n\n\n\nCredit: Seema Saharan\n\n\n\nIt’s important to know all this because we need to know where TypeScript gets its roots in order to poke at its possible future.\n\n\nTypeScript’s components\n\n\nThere are three fundamental components of TypeScript that make it as awesome as it is. Not only do we get the aforementioned type-checking that comes with the TypeScript language, but we get the TypeScript compiler and language service as well.\n\n\n\n\n\n\n\nThese are the pieces that keep TypeScript relevant, so to speak. The language is what developers love writing. The compiler is what interprets the language for browsers. The service processes the language on demand with blazing speed. Without these, TypeScript just ain’t what it is.\n\n\nTypeScript support\n\n\nThere’s another key piece to TypeScript’s relevance that often goes overlooked: it’s super well-supported by text editors. TypeScript’s relevance is only as good as it is accessible and something that can be picked up by just about any front-ender.\n\n\n\nTypeScript was initially supported only in Microsoft’s Visual Studio code editor. Makes sense, right? I mean, TypeScript is maintained by Microsoft and all. But as TypeScript grew legs, more code editors and IDEs began started supporting it either natively or with plugins.\n\n\n\nSome of the most popular editors and IDEs, besides Visual Studio Code, include:\n\n\n\nAtomSublime TextWebStormEmacsNetBeansEclipseNeoVim\n\n\n\nAnd with more support comes more TypeScript relevance. The fact that you can pick up nearly any code editor and start hammering out TypeScript code makes it more and more a go-to choice as it’s simply available where you want it.\n\n\nTypeScript’s evolution\n\n\nFrom its initial release in 2012 to the present day (early 2022), there have been many improvements released in each version of TypeScript, like:\n\n\n\nTypeScript 1.6 introduced the .tsx file extension, which enabled JSX within TypeScript files and made the new as operator the default way to cast.TypeScript 2 brought in a major improvement by allowing developers to optionally prevent variables from being assigned null values.Version 2.3 of TypeScript introduced support for ES6 features, such as generators and iterators.TypeScript 3 brought in language enhancements, such as tuples in REST parameters and spread expressions.TypeScript 4 (we’re currently at 4.5.2 at the time of this writing) continues the evolution with refinements to tuples, template literal types, smarter type alias preservation, and improvements to Awaited and Promise.\n\n\n\nThis is exactly the sort of speed at which you might expect to see a blossoming programming language iterating and releasing new features. Again, good context when evaluating the relevance of TypeScript moving forward.\n\n\nTypeScript’s popularity\n\n\nWe’ve already established that TypeScript is, like, super popular. The chart that kicked off this post showed TypeScript growing at breakneck speed in a matter of a few years to rank as the fourth most popular language. But don’t just take my word and GitHub’s word for it (it is owned by Microsoft after all). Here’s a bunch of published research from various places saying the same thing.\n\n\nRedMonk\n\n\nRedMonk, a development industry analysis firm has this to say about ranking TypeScript eighth in its 2021 list of most popular languages:\n\n\n\nDoes [TypeScript] have the capacity to move up and outperform long term incumbents such as C#, C++ or even PHP eventually, or is TypeScript essentially at or near the limits of its potential? It’s impossible to say with any reliability, but it is interesting to note that a year ago at this time TypeScript lagged the fifth place languages by six points in the combined score that the rankings are based on, but in this run the gap was only two points. Past performance doesn’t always predict future performance, of course, but it suggests at least that TypeScript might yet have some room in front of it.\n\n\nPYPL Index\n\n\nThe PYPL Index is a measure of Google searches for programming language tutorials. It’s not exact science, but a good indicator of interest. And, over time, TypeScript appears to be trending in a flat direction. TypeScript currently ranks eighth and, compared to a year ago at this time, PYPL indicates that TyeScript is trending flat overall while other languages, like Python and C++ are trending up year-over-year.\n\n\nStack Overflow 2021 Developer Survey\n\n\nAccording to Stack Overflow’s 2021 Developer Survey, TypeScript is about as popular as PYPL indicates it is, coming in as the seventh most popular language, as ranked by approximately 83,000 developers.\n\n\n\n\n\n\n\nThe Stack Overflow annual survey is one of the most credible and most-awaited developer surveys. It uses a humongous developer base from all over the world to arrive at its conclusions. And how relevant does this say TypeScript is in the front-end community? Well, it’s not only the seventh most popular language, but it the second technology that developers want to work with the most (followed by Python), and the third most loved language (behind Rust and Clojure).\n\n\n\nSource: Stack Overflow Developer Survey 2021\n\n\n\n\n\n\n2020 State of JavaScript\n\n\nThis annual survey (the next one is open now!) shows that TypeScript boasts a sparkling 93% satisfaction rate (up from 89% in 2019) among developers which is tops in the rankings. It also took top prize in interest (70%, up from 66%), usage (78%, up from 66%), and awareness (100% which is shockingly flat from 2019).\n\n\n\n\n\n\nGitHut 2.0 Language Rankings\n\n\nThis ranking is an analysis that interacts with GitHub to suss out the most used languages across GitHub. And it’s indicative of TypeScript’s relevance in that TypeScript ranked seventh in the first quarter of 2021 before leaping up to fourth in the fourth quarter, and with the highest year-over-year change.\n\n\n\n\n\nSource\n\n\n\n\n\nSource\n\n\n\n\n\nOK, so it’s clear that TypeScript is a big deal. But again, how relevant will it be moving forward?\n\n\nThe relevance of TypeScript in 2022 and beyond\n\n\nSo far, I’ve tried to paint a picture that identifies where TypeScript fits into the front-end development landscape, showing how it’s quickly evolved into a mature and serious contender as a programming language, and is fast-becoming both the programming language of choice and the one people like most.\n\n\n\nIn other words: TypeScript is relevant today.\n\n\n\nBut if we want to take a guess at where TypeScript’s current success is taking it, then it’s worth taking a peek the official TypeScript roadmap over at GitHub.\n\n\n\nHere’s what we have to look forward to:\n\n\n\ntypeof class changesAllow more code before super calls in subclassesGeneralized index signatures--noImplicitOverride and the override keywordStatic index signaturesUse unknown as the type for catch clause variablesInvestigate nominal typing supportFlattening declarationsImplement the ES decorator proposalInvestigate ambient, deprecated, and conditional decoratorsInvestigate partial type argument inferenceImplement a quick fix to scaffold local @types packagesInvestigate error messages in haiku or iambic pentameterImplement decorators for function expressions and arrow functions\n\n\n\nI think all of these roadmapped features are both exciting and will play a big role in maintaining the relevance of TypeScript for the foreseeable future. And while I think all of them are worthy of deeper discussion, here are a few I believe are core for TypeScript in 2022 and beyond.\n\n\nFlattening declarations\n\n\nThe flattening declarations proposal, for example, aims to enable bundling declarations for TypeScript projects so that a library can be consumed with a single TypeScript file, regardless of how many modules it may contain internally.\n\n\n\nThe idea with flattening declarations is that a single amalgamated and flattened .d.ts file, in addition to a single output .js file, should be emitted by the TypeScript compiler. Access modifiers should be taken into consideration and respected when generating the DTS. Having a single declaration file with flattened declarations will make things much easier for developers and improve maintainability in the long run.\n\n\nAmbient, Deprecated, and Conditional decorators\n\n\nDesign time decorators— such as ambient and conditional decorators — are another feature to look forward to. Decorators enable developers to add both annotations and metadata to existing code in a declarative way. In TypeScript, each decorator has a special name starting with @ that will not be emitted in the converted JavaScript, but can be persisted in .d.ts outputs.\n\n\n\nConsider, for example, if you could issue a warning whenever someone attempts to employ a deprecated method or property so that they could upgrade to a newer library version. By having ambient, deprecated, and conditional decorators as part of the TypeScript specification in the future, the language will provide more powerful ways for developers to annotate their code and include metadata in it.\n\n\nDecorators for function expressions/arrow functions\n\n\nDecorators for function and arrow expressions is another feature I think will build on TypeScript’s ongoing relevance. Adding annotations or metadata to those expressions will enable developers to determine at runtime information about which the decorator has been applied.\n\n\nInvestigate error messages in haiku or iambic pentameter\n\n\nOK, so maybe this one isn’t so much about the relevance of TypeScript’s robust feature set, but I think the personality it adds to the language is part of the overall package that makes TypeScript a pleasure to use. How cool (and pleasant) would it be to get an error message like this:\n\n\n\nMy code is breakingIgnore this error messageEverything is good  #TSConf— Nick Nisi (@nicknisi) March 13, 2018 \n\n\n\nSure beats a programmatic message that can sometimes feel like a scolding! And while there has been no progress on this proposed feature in the last two years, it still exists on the official roadmap which means someone will eventually work on it.\n\n\n\n\n\n\n\nMicrosoft unveiled Visual Studio 2022 Preview 3 back in August 2021. There was a lot to get excited about with that release, like new JavaScript and TypeScript tools to enhance the experience for single-page applications and front-end development. Plus, it included a new JavaScript/TypeScript project type to facilitate developers building standalone Angular, React, and Vue projects. Then there’s the enhancement that Visual Studio will leverage the native CLIs of each JavaScript framework to build front-end project templates.\n\n\n\nAll of this to say that TypeScript is not just evolving; it is exploding and only gaining momentum as we settle in 2022. So, yes, TypeScript is relevant in 2022… and will continue to be for some time to come.\n\nThe Relevance of TypeScript in 2022 originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-31T15:16:01.000Z",
      "date_modified": "2022-01-31T15:16:01.000Z",
      "_plugin": {
        "pageFilename": "946fb2176be5995417f0baa3c961f665d2bfb96f5691fd6828f2a7948cb8df56.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362890",
      "url": "https://css-tricks.com/the-optional-chaining-operator-modern-browsers-and-my-mom/",
      "title": "The Optional Chaining Operator, “Modern” Browsers, and My Mom",
      "summary": "Jim Nielsen’s mom couldn’t open a website. Jim worked on confirming the issue and documented how he got to the bottom of it:\n\n“[…] well it can’t be a browser issue. It’s not like my Mom is using Internet Explorer! \n\n…\n\nThe Optional Chaining Operator, “Modern” Browsers, and My Mom originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p><a href=\"https://blog.jim-nielsen.com/2022/a-web-for-all/\" rel=\"noopener\">Jim Nielsen&#8217;s mom couldn&#8217;t open a website.</a> Jim worked on confirming the issue and documented how he got to the bottom of it:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>“[&#8230;] well it can’t be a browser issue. It’s not like my Mom is using Internet Explorer! She has relatively modern tech: an iPad (Safari) and a Chromebox (Google Chrome).”</p><p>But the more I thought about it—a website that works on some devices but not on others—the more I realized this had to be a browser issue.</p><p>So I looked at the version of Chrome on my parent’s computer. Version 76! I knew we were at ninety-something in 2022, so I figured that was the culprit. “I’ll just update Chrome,” I thought.</p><p>Turns out, you can’t.</p></blockquote>\n\n\n\n<span id=\"more-362890\"></span>\n\n\n\n<p>I absolutely celebrate the idea of evergreen browsers. It&#8217;s one of the absolute most important things that has happened to the web in recent-ish years. It enables a much quicker evolution for the web, and all browsers are taking advantage of it. </p>\n\n\n\n<p>But even browsers that I think of as evergreen <em><a href=\"https://css-tricks.com/evergreen-does-not-mean-immediately-available/\">aren&#8217;t always</a></em>. Eventually, hardware limits the software. The logic isn’t as simple as “if Chrome, then evergreeen,” for example. </p>\n\n\n\n<p>Safari normally updates via system updates, but in this case it was a first-generation iPad Air stuck on iOS 12, and no more updates were possible for what Apple considers a <a href=\"https://support.apple.com/en-us/HT201624\" rel=\"noopener\">&#8220;vintage&#8221; device</a>. Same deal <a href=\"https://chromebookdb.com/chromebooks/?eol\" rel=\"noopener\">with a Chromebook</a> stuck at Chrome 76.</p>\n\n\n\n<p>A couple of little optional chaining question mark (<code>?</code>) characters borked the whole dang site. Unfortunate. That <a href=\"https://philipwalton.com/articles/deploying-es2015-code-in-production-today/\" rel=\"noopener\">&#8220;serve two bundles, modern and legacy&#8221;</a> idea is still pretty smart. </p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Speaking of moms, I was reminded of an older episode of ShopTalk <a href=\"https://shoptalkshow.com/166-with-lisa-irish/\" rel=\"noopener\">we did with Paul Irish&#8217;s mom</a> that has a lot of this &#8220;regular person using the internet&#8221; vibes.  </p>\n<p><a href=\"https://blog.jim-nielsen.com/2022/a-web-for-all/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/the-optional-chaining-operator-modern-browsers-and-my-mom/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-optional-chaining-operator-modern-browsers-and-my-mom/\">The Optional Chaining Operator, “Modern” Browsers, and My Mom</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Jim Nielsen’s mom couldn’t open a website. Jim worked on confirming the issue and documented how he got to the bottom of it:\n\n\n\n“[…] well it can’t be a browser issue. It’s not like my Mom is using Internet Explorer! She has relatively modern tech: an iPad (Safari) and a Chromebox (Google Chrome).”But the more I thought about it—a website that works on some devices but not on others—the more I realized this had to be a browser issue.So I looked at the version of Chrome on my parent’s computer. Version 76! I knew we were at ninety-something in 2022, so I figured that was the culprit. “I’ll just update Chrome,” I thought.Turns out, you can’t.\n\n\n\n\n\n\n\nI absolutely celebrate the idea of evergreen browsers. It’s one of the absolute most important things that has happened to the web in recent-ish years. It enables a much quicker evolution for the web, and all browsers are taking advantage of it. \n\n\n\nBut even browsers that I think of as evergreen aren’t always. Eventually, hardware limits the software. The logic isn’t as simple as “if Chrome, then evergreeen,” for example. \n\n\n\nSafari normally updates via system updates, but in this case it was a first-generation iPad Air stuck on iOS 12, and no more updates were possible for what Apple considers a “vintage” device. Same deal with a Chromebook stuck at Chrome 76.\n\n\n\nA couple of little optional chaining question mark (?) characters borked the whole dang site. Unfortunate. That “serve two bundles, modern and legacy” idea is still pretty smart. \n\n\n\n\n\n\n\nSpeaking of moms, I was reminded of an older episode of ShopTalk we did with Paul Irish’s mom that has a lot of this “regular person using the internet” vibes.  \nTo Shared Link — Permalink on CSS-Tricks\nThe Optional Chaining Operator, “Modern” Browsers, and My Mom originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-30T21:49:15.000Z",
      "date_modified": "2022-02-02T01:14:18.000Z",
      "_plugin": {
        "pageFilename": "2fc0f504b2db14844dd59ce61f1ffb06d100769972f45a4772d387663d3e58b6.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362382",
      "url": "https://css-tricks.com/from-font-value-text-decoration-thickness/",
      "title": "The CSS from-font Value Explained in 4 Demos",
      "summary": "I was doing my Advent of UI Components, and I stumbled upon the from-font value for the text-decoration-thickness CSS property. I was curious about it, so I did a little research and I think what I found (and learned) …\n\nThe CSS from-font Value Explained in 4 Demos originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I was doing my <a href=\"https://www.silvestar.codes/side-projects/advent/\" rel=\"noopener\">Advent of UI Components</a>, and I stumbled upon the <a href=\"https://css-tricks.com/almanac/properties/t/text-decoration-thickness/#aa-values\"><code>from-font</code></a> value for the <code>text-decoration-thickness</code> CSS property. I was curious about it, so I did a little research and I think what I found (and learned) is both interesting and worth sharing.</p>\n\n\n\n<span id=\"more-362382\"></span>\n\n\n<h3 id=\"about-the-fromfont-value\">About the <code>from-font</code> value</h3>\n\n\n<p>Here’s how <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness\" rel=\"noopener\">MDN defines the <code>from-font</code> value</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If the font file includes information about a preferred thickness, use that value. If the font file doesn&#8217;t include this information, behave as if <code>auto</code> was set, with the browser choosing an appropriate thickness.</p></blockquote>\n\n\n\n<p>So, the <code>from-font</code> value is used only if the font file has the definition for the thickness of the line. Otherwise, browsers use the <code>auto</code> value, which tells the browser to choose the thickness. I wanted to find out how that works, so I made a few demos comparing it to the other values.</p>\n\n\n<h3 id=\"demo-1-textdecorationthickness-auto\">Demo 1: <code>text-decoration-thickness: auto</code></h3>\n\n\n<p>In the first demo, I wanted to see how the <code>auto</code> value for thickness works with under, over, and strikethrough lines for the default font family.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vYedbMe\" src=\"//codepen.io/anon/embed/vYedbMe?height=450&amp;theme-id=1&amp;slug-hash=vYedbMe&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vYedbMe\" title=\"CodePen Embed vYedbMe\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I didn’t find anything particularly interesting here, except that some combinations don’t work very well for strikethrough text (if you ask me). For example, using a wavy decoration with strikethrough isn’t readable, but that might be the desired output in some scenarios, I guess.</p>\n\n\n<h3 id=\"demo-2-textdecorationthickness-0px\">Demo 2: <code>text-decoration-thickness: 0px</code></h3>\n\n\n<p>In the second demo, I wanted to see how the text works with thin lines.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYERXqR\" src=\"//codepen.io/anon/embed/zYERXqR?height=450&amp;theme-id=1&amp;slug-hash=zYERXqR&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYERXqR\" title=\"CodePen Embed zYERXqR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The lines work with paragraphs or smaller text, but the thin strikethrough line doesn’t work very well with large text as the strikethrough line is hard to detect.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-1.04.31-PM.png?resize=501%2C57&#038;ssl=1\" alt=\"Showing the from-font value on larger text. The text is black and the line through the text is thin and barely noticeable.\" class=\"wp-image-362385\" width=\"501\" height=\"57\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-1.04.31-PM.png?w=1002&amp;ssl=1 1002w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-1.04.31-PM.png?resize=300%2C34&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-1.04.31-PM.png?resize=768%2C87&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-1.04.31-PM.png?resize=1000%2C114&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I also learned that you cannot set the line thickness below <code>1px</code>. In the demo, the line thickness is set to <code>0px</code>, but the browser renders a <code>1px</code> line anyway.</p>\n\n\n<h3 id=\"demo-3-textdecorationthickness-fromfont-and-fontweight\">Demo 3: <code>text-decoration-thickness: from-font and font-weight</code></h3>\n\n\n<p>Next, I wanted to see if the <code>text-decoration-thickness: from-font</code> declaration changes with the font weight. On the left, the value is set to <code>from-font</code>; on the right, the value is set to <code>auto.</code></p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abLqXjv\" src=\"//codepen.io/anon/embed/abLqXjv?height=450&amp;theme-id=1&amp;slug-hash=abLqXjv&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abLqXjv\" title=\"CodePen Embed abLqXjv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The <code>from-font</code> value doesn’t seem to follow changes to the text’s font weight, at least not with when Roboto is the font family. There is no difference between how big or bold the text is set. The line thickness is the same if the value is set to <code>from-font</code>.</p>\n\n\n\n<p class=\"is-style-explanation\">It is worth noting that Firefox renders the line thickness the same for both values, so my guess is that Firefox actually uses the <code>from-font</code> value for the <code>auto</code> value.</p>\n\n\n<h3 id=\"demo-4-textdecorationthickness-fromfont-and-fontfamily\">Demo 4: <code>text-decoration-thickness: from-font</code> and <code>font-family</code></h3>\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNGJPga\" src=\"//codepen.io/anon/embed/rNGJPga?height=450&amp;theme-id=1&amp;slug-hash=rNGJPga&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNGJPga\" title=\"CodePen Embed rNGJPga\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>In this final demo, I wanted to see how the <code>from-font</code> value works with different font families. It doesn’t impact the paragraphs or the smaller font sizes because it renders the smallest value, <code>1px</code>. The difference is visible for the bigger font sizes, like default <code>&lt;h1&gt;</code> elements, but only if you look very closely. Also, the strikethrough line is once again too thin on bigger text. This is something that font designers and developers might consider when designing and defining fonts.</p>\n\n\n<h3 id=\"browser-support\">Browser support</h3>\n\n\n<p>You can most certainly use the <code>text-decoration-thickness</code> property today since most modern browsers support this property.</p>\n\n\n<h3 id=\"so-should-you-use-it\">So, should you use it?</h3>\n\n\n<p>Although the <code>from-font</code> value might <em>seem</em> like a good idea, I don’t think it should be used just yet. There are too many inconsistencies with the default <code>text-decoration-thickness</code> value across the browsers (which <a href=\"https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome\">Šime Vidas has covered</a> in great depth), so it is no surprise that the <code>from-font</code> value is still not working that well. Maybe the <code>from-font</code> value should be defined in percentages or some other relative unit so that it changes with the font size. Maybe font designers feel that it shouldn’t work that way. Either way, it seems like more discussion is warranted to nail down the property value’s default behavior and how it renders.</p>\n\n\n\n<p>I am using the <code>from-font</code> value on my personal site for the link underlines <a href=\"https://www.silvestar.codes/articles/\" rel=\"noopener\">in the articles</a>, and I think it works great. The line is subtle, but it still communicates the interaction.</p>\n\n\n\n<p>I look forward to seeing more options for the <code>text-decoration-thickness</code> in the future.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/from-font-value-text-decoration-thickness/\">The CSS from-font Value Explained in 4 Demos</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I was doing my Advent of UI Components, and I stumbled upon the from-font value for the text-decoration-thickness CSS property. I was curious about it, so I did a little research and I think what I found (and learned) is both interesting and worth sharing.\n\n\n\n\n\n\nAbout the from-font value\n\n\nHere’s how MDN defines the from-font value:\n\n\n\nIf the font file includes information about a preferred thickness, use that value. If the font file doesn’t include this information, behave as if auto was set, with the browser choosing an appropriate thickness.\n\n\n\nSo, the from-font value is used only if the font file has the definition for the thickness of the line. Otherwise, browsers use the auto value, which tells the browser to choose the thickness. I wanted to find out how that works, so I made a few demos comparing it to the other values.\n\n\nDemo 1: text-decoration-thickness: auto\n\n\nIn the first demo, I wanted to see how the auto value for thickness works with under, over, and strikethrough lines for the default font family.\n\n\n\nCodePen Embed Fallback\n\n\n\nI didn’t find anything particularly interesting here, except that some combinations don’t work very well for strikethrough text (if you ask me). For example, using a wavy decoration with strikethrough isn’t readable, but that might be the desired output in some scenarios, I guess.\n\n\nDemo 2: text-decoration-thickness: 0px\n\n\nIn the second demo, I wanted to see how the text works with thin lines.\n\n\n\nCodePen Embed Fallback\n\n\n\nThe lines work with paragraphs or smaller text, but the thin strikethrough line doesn’t work very well with large text as the strikethrough line is hard to detect.\n\n\n\n\n\n\n\nI also learned that you cannot set the line thickness below 1px. In the demo, the line thickness is set to 0px, but the browser renders a 1px line anyway.\n\n\nDemo 3: text-decoration-thickness: from-font and font-weight\n\n\nNext, I wanted to see if the text-decoration-thickness: from-font declaration changes with the font weight. On the left, the value is set to from-font; on the right, the value is set to auto.\n\n\n\nCodePen Embed Fallback\n\n\n\nThe from-font value doesn’t seem to follow changes to the text’s font weight, at least not with when Roboto is the font family. There is no difference between how big or bold the text is set. The line thickness is the same if the value is set to from-font.\n\n\n\nIt is worth noting that Firefox renders the line thickness the same for both values, so my guess is that Firefox actually uses the from-font value for the auto value.\n\n\nDemo 4: text-decoration-thickness: from-font and font-family\n\n\nCodePen Embed Fallback\n\n\n\nIn this final demo, I wanted to see how the from-font value works with different font families. It doesn’t impact the paragraphs or the smaller font sizes because it renders the smallest value, 1px. The difference is visible for the bigger font sizes, like default <h1> elements, but only if you look very closely. Also, the strikethrough line is once again too thin on bigger text. This is something that font designers and developers might consider when designing and defining fonts.\n\n\nBrowser support\n\n\nYou can most certainly use the text-decoration-thickness property today since most modern browsers support this property.\n\n\nSo, should you use it?\n\n\nAlthough the from-font value might seem like a good idea, I don’t think it should be used just yet. There are too many inconsistencies with the default text-decoration-thickness value across the browsers (which Šime Vidas has covered in great depth), so it is no surprise that the from-font value is still not working that well. Maybe the from-font value should be defined in percentages or some other relative unit so that it changes with the font size. Maybe font designers feel that it shouldn’t work that way. Either way, it seems like more discussion is warranted to nail down the property value’s default behavior and how it renders.\n\n\n\nI am using the from-font value on my personal site for the link underlines in the articles, and I think it works great. The line is subtle, but it still communicates the interaction.\n\n\n\nI look forward to seeing more options for the text-decoration-thickness in the future.\n\nThe CSS from-font Value Explained in 4 Demos originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-28T18:37:52.000Z",
      "date_modified": "2022-01-28T18:37:52.000Z",
      "_plugin": {
        "pageFilename": "981f11b161b66fbe3cda322b51339493ef24be6eb3b2f788743181ddedccb1e4.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360998",
      "url": "https://css-tricks.com/git-switching-unstaged-changes-to-a-new-branch/",
      "title": "Git: Switching Unstaged Changes to a New Branch",
      "summary": "I’m always on the wrong branch. I’m either on master or main working on something that should be on a fix or feature branch. Or I’m on the last branch I was working on and should have cut a new …\n\nGit: Switching Unstaged Changes to a New Branch originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I&#8217;m always on the wrong branch. I&#8217;m either on <code>master</code> or <code>main</code> working on something that should be on a <code>fix</code> or <code>feature</code> branch. Or I&#8217;m on the last branch I was working on and should have cut a new branch. Oh well. It&#8217;s never <em>that</em> big of a deal. Basically means switching unstaged changes to a new branch. This is what I normally do:</p>\n\n\n\n<ul><li>Stash all the changed-but-unstaged files</li><li>Move back to master</li><li>Pull master to make sure it&#8217;s up to date</li><li>Cut a new branch from master</li><li>Move to the new branch</li><li>Unstash those changed files</li></ul>\n\n\n\n<span id=\"more-360998\"></span>\n\n\n\n<p class=\"is-style-explanation\">Want a bunch of other Git tips? Our <a href=\"https://css-tricks.com/creating-the-perfect-commit-in-git/\">&#8220;Advanced Git&#8221; series</a> has got a ton of them.</p>\n\n\n<h3 id=\"switching-unstaged-changes-to-a-new-branch-with-the-git-cli-it-looks-like-this\">Switching unstaged changes to a new branch with the Git CLI it looks like this</h3>\n\n\n<p>Here&#8217;s how I generally switch unstaged changes to a new branch in Git:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">git status\ngit stash --include-untracked\ngit checkout master\ngit pull\ngit branch content/sharis\ngit checkout content/sharis\ngit stash pop</code></pre>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"cli-mp4\" width='500' height='328' src='https://videopress.com/embed/6XU3VUgZ?cover=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div><figcaption>Yeah I commit jpgs right to git. </figcaption></figure>\n\n\n<h3 id=\"switching-unstaged-changes-to-a-new-branch-in-git-tower-it-looks-like-this\">Switching unstaged changes to a new branch in Git Tower it looks like this</h3>\n\n\n<p>I think you could theoretically do each of those steps to switch unstaged changed to a new branch, one-by-one, in Git Tower, too, but the shortcut is that you can make the branch and double-click over to it.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"cleanshot-2022-01-21-at-13-28-33-mp4\" width='500' height='265' src='https://videopress.com/embed/Rw6VaIqk?cover=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>Sorry, I&#8217;m just doing Git Tower but there are lots of other Git GUIs that probably have clever ways of doing this as well.</p>\n\n\n<h3 id=\"but-there-is-a-new-fancy-way\">But there is a new fancy way!</h3>\n\n\n<p>This way of switching unstaged changes to a new branch is new to me anyway, and it was new to Wes when he tweeted this: </p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">TIL about `git switch`, which allows you to move your unstaged changes to a new branch.  <br><br>Seems fairly new. I used to `git stash`, new branch, and then `git stash apply` <a href=\"https://t.co/6Rd0fCJOcV\">pic.twitter.com/6Rd0fCJOcV</a></p>&mdash; Wes Bos (@wesbos) <a href=\"https://twitter.com/wesbos/status/1479129404500594691?ref_src=twsrc%5Etfw\" rel=\"noopener\">January 6, 2022</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>Cool. That&#8217;s:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">git switch -c new-branch</code></pre>\n\n\n\n<p><a href=\"https://git-scm.com/docs/git-switch\" rel=\"noopener\">Documentation for that here.</a></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/git-switching-unstaged-changes-to-a-new-branch/\">Git: Switching Unstaged Changes to a New Branch</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I’m always on the wrong branch. I’m either on master or main working on something that should be on a fix or feature branch. Or I’m on the last branch I was working on and should have cut a new branch. Oh well. It’s never that big of a deal. Basically means switching unstaged changes to a new branch. This is what I normally do:\n\n\n\nStash all the changed-but-unstaged filesMove back to masterPull master to make sure it’s up to dateCut a new branch from masterMove to the new branchUnstash those changed files\n\n\n\n\n\n\n\nWant a bunch of other Git tips? Our “Advanced Git” series has got a ton of them.\n\n\nSwitching unstaged changes to a new branch with the Git CLI it looks like this\n\n\nHere’s how I generally switch unstaged changes to a new branch in Git:\n\n\n\ngit status\ngit stash --include-untracked\ngit checkout master\ngit pull\ngit branch content/sharis\ngit checkout content/sharis\ngit stash pop\n\n\n\n\n\nYeah I commit jpgs right to git. \n\n\nSwitching unstaged changes to a new branch in Git Tower it looks like this\n\n\nI think you could theoretically do each of those steps to switch unstaged changed to a new branch, one-by-one, in Git Tower, too, but the shortcut is that you can make the branch and double-click over to it.\n\n\n\n\n\n\n\n\n\nSorry, I’m just doing Git Tower but there are lots of other Git GUIs that probably have clever ways of doing this as well.\n\n\nBut there is a new fancy way!\n\n\nThis way of switching unstaged changes to a new branch is new to me anyway, and it was new to Wes when he tweeted this: \n\n\n\n\nTIL about `git switch`, which allows you to move your unstaged changes to a new branch.  Seems fairly new. I used to `git stash`, new branch, and then `git stash apply` pic.twitter.com/6Rd0fCJOcV— Wes Bos (@wesbos) January 6, 2022\n\n\n\n\nCool. That’s:\n\n\n\ngit switch -c new-branch\n\n\n\nDocumentation for that here.\n\nGit: Switching Unstaged Changes to a New Branch originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-27T23:49:45.000Z",
      "date_modified": "2022-01-27T23:49:45.000Z",
      "_plugin": {
        "pageFilename": "f131a087b4fdd1e6d79ef2439832baaf194f1a66c96ac16b60eb83161b0a976c.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362091",
      "url": "https://css-tricks.com/typescript-discriminated-unions/",
      "title": "Demystifying TypeScript Discriminated Unions",
      "summary": "TypeScript is a wonderful tool for writing JavaScript that scales. It’s more or less the de facto standard for the web when it comes to large JavaScript projects. As outstanding as it is, there are some tricky pieces for the …\n\nDemystifying TypeScript Discriminated Unions originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>TypeScript is a wonderful tool for writing JavaScript that scales. It’s more or less the de facto standard for the web when it comes to large JavaScript projects. As outstanding as it is, there are some <a href=\"https://css-tricks.com/typescript-relevance/\">tricky pieces for the unaccustomed</a>. One such area is TypeScript discriminated unions.</p>\n\n\n\n<p>Specifically, given this code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">interface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}\nlet animal: Dog | Cat;</code></pre>\n\n\n\n<p>&#8230;many developers are surprised (and maybe even angry) to discover that when they do <code>animal.</code>, only the <code>weight</code> property is valid, and not <code>whiskers</code> or <code>friendly</code>. By the end of this post, this will make perfect sense.</p>\n\n\n\n<span id=\"more-362091\"></span>\n\n\n\n<p>Before we dive in, let’s do a quick (and necessary) review of structural typing, and how it differs from nominal typing. This will set up our discussion of TypeScript&#8217;s discriminated unions nicely.</p>\n\n\n<h3 id=\"structural-typing\">Structural typing</h3>\n\n\n<p>The best way to introduce structural typing is to compare it to <em>what it’s not</em>. Most typed languages you’ve probably used are nominally typed. Consider this C# code (Java or C++ would look similar):</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">class Foo {\n  public int x;\n}\nclass Blah {\n  public int x;\n}</code></pre>\n\n\n\n<p>Even though <code>Foo</code> and <code>Blah</code> are structured exactly the same, they cannot be assigned to one another. The following code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">Blah b = new Foo();</code></pre>\n\n\n\n<p>…generates this error:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">Cannot implicitly convert type 'Foo' to 'Blah'</code></pre>\n\n\n\n<p>The <em>structure</em> of these classes is irrelevant. A variable of type <code>Foo</code> can only be assigned to instances of the <code>Foo</code> class (or subclasses thereof).</p>\n\n\n\n<p>TypeScript operates the opposite way. TypeScript considers types to be compatible if they have the same <em>structure</em>—hence the name, <strong>structural typing</strong>. Get it?</p>\n\n\n\n<p>So, the following runs without error:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">class Foo {\n  x: number = 0;\n}\nclass Blah {\n  x: number = 0;\n}\nlet f: Foo = new Blah();\nlet b: Blah = new Foo();</code></pre>\n\n\n<h3 id=\"types-as-sets-of-matching-values\">Types as sets of matching values</h3>\n\n\n<p>Let’s hammer this home. Given this code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">class Foo {\n  x: number = 0;\n}\n\nlet f: Foo;</code></pre>\n\n\n\n<p><code>f</code> is a variable holding any object that matches the <em>structure</em> of instances created by the <code>Foo</code> class which, in this case, means an <code>x</code> property that represents a number. That means even a plain JavaScript object will be accepted.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let f: Foo;\nf = {\n  x: 0\n}</code></pre>\n\n\n<h3 id=\"unions\">Unions</h3>\n\n\n<p>Thanks for sticking with me so far. Let’s get back to the code from the beginning:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">interface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}</code></pre>\n\n\n\n<p>We know that this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog;</code></pre>\n\n\n\n<p>&#8230;makes <code>animal</code> any object that has the same structure as the <code>Dog</code> interface. So what does the following mean?</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat;</code></pre>\n\n\n\n<p>This types <code>animal</code> as any object that matches the <code>Dog</code> interface, <strong>or any object that matches the <code>Cat</code> interface</strong>.</p>\n\n\n\n<p>So why does <code>animal</code>—as it exists now—only allow us to access the <code>weight</code> property? To put it simply, it’s because TypeScript does not know which type it is. TypeScript knows that <code>animal</code> has to be either a <code>Dog</code> or <code>Cat</code>, but it <em>could</em> be either (or both at the same time, but let&#8217;s keep it simple). We’d likely get runtime errors if we were allowed to access the <code>friendly</code> property, but the instance wound up being a <code>Cat</code> instead of a <code>Dog</code>. Likewise for the <code>whiskers</code> property if the object wound up being a <code>Dog</code>.</p>\n\n\n\n<p>Type unions are unions of valid values rather than unions of properties. Developers often write something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat;</code></pre>\n\n\n\n<p>&#8230;and expect <code>animal</code> to have the union of <code>Dog</code> and <code>Cat</code> properties. But again, that’s a mistake. This specifies <code>animal</code> as having a <strong>value</strong> that matches the union of valid <code>Dog</code> values and valid <code>Cat</code> values. But TypeScript will only allow you to access properties it <em>knows</em> are there. For now, that means properties on all the types in the union.</p>\n\n\n<h3 id=\"narrowing\">Narrowing</h3>\n\n\n<p>Right now, we have this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat;</code></pre>\n\n\n\n<p>How do we properly treat <code>animal</code> as a <code>Dog</code> when it’s a <code>Dog</code>, and access properties on the <code>Dog</code> interface, and likewise when it’s a <code>Cat</code>? For now, we can use the <code>in</code> operator. This is an old-school JavaScript operator you probably don’t see very often, but it essentially allows us to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\" rel=\"noopener\">test if a property is in an object</a>. Like this:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">let o = { a: 12 };\n\n\"a\" in o; // true\n\"x\" in o; // false</code></pre>\n\n\n\n<p>It turns out TypeScript is deeply integrated with the <code>in</code> operator. Let’s see how:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat = {} as any;\n\nif (\"friendly\" in animal) {\n  console.log(animal.friendly);\n} else {\n  console.log(animal.whiskers);\n}</code></pre>\n\n\n\n<p>This code produces no errors. When inside the <code>if</code> block, TypeScript knows there’s a <code>friendly</code> property, and therefore casts <code>animal</code> as a <code>Dog</code>. And when inside the <code>else</code> block, TypeScript similarly treats <code>animal</code> as a <code>Cat</code>. You can even see this if you hover over the animal object inside these blocks in your code editor:</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"530\" height=\"240\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631612006_image.png?resize=530%2C240&#038;ssl=1\" alt=\"Showing a tooltip open on top of a a TypeScript discriminated unions example that shows `let animal: Dog`.\" class=\"wp-image-362094\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631612006_image.png?w=530&amp;ssl=1 530w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631612006_image.png?resize=300%2C136&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"546\" height=\"238\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631569569_image.png?resize=546%2C238&#038;ssl=1\" alt=\"Showing a tooltip open on top of a a TypeScript discriminated union example that shows `let animal: Cat`.\" class=\"wp-image-362095\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631569569_image.png?w=546&amp;ssl=1 546w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631569569_image.png?resize=300%2C131&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n</div>\n\n\n<h3 id=\"discriminated-unions\">Discriminated unions</h3>\n\n\n<p>You might expect the blog post to end here but, unfortunately, narrowing type unions by checking for the existence of properties is incredibly limited. It worked well for our trivial <code>Dog</code> and <code>Cat</code> types, but things can easily get more complicated, and more fragile, when we have more types, as well as more overlap between those types.</p>\n\n\n\n<p>This is where discriminated unions come in handy. We’ll keep everything the same from before, except add a property to each type whose only job is to distinguish (or “discriminate”) between the types:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">interface Cat {\n  weight: number;\n  whiskers: number;\n  ANIMAL_TYPE: \"CAT\";\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n  ANIMAL_TYPE: \"DOG\";\n}</code></pre>\n\n\n\n<p>Note the <code>ANIMAL_TYPE</code> property on both types. Don’t mistake this as a string with two different values; this is a literal type. <code>ANIMAL_TYPE: \"CAT\";</code> means a type that holds exactly the string <code>\"CAT\"</code>, and nothing else.</p>\n\n\n\n<p>And now our check becomes a bit more reliable:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat = {} as any;\n\nif (animal.ANIMAL_TYPE === \"DOG\") {\n  console.log(animal.friendly);\n} else {\n  console.log(animal.whiskers);\n}</code></pre>\n\n\n\n<p>Assuming each type participating in the union has a distinct value for the <code>ANIMAL_TYPE</code> property, this check becomes foolproof.</p>\n\n\n\n<p>The only downside is that you now have a new property to deal with. Any time you create an instance of a <code>Dog</code> or a <code>Cat</code>, you have to supply the <em>single</em> correct value for the <code>ANIMAL_TYPE</code>. But don’t worry about forgetting because TypeScript will remind you. &#x1f642;</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"942\" height=\"268\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719169299_image.png?resize=942%2C268&#038;ssl=1\" alt=\"Showing the TypeScript discriminated union for a createDog function that returns weight and friendly properties.\" class=\"wp-image-362099\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719169299_image.png?w=942&amp;ssl=1 942w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719169299_image.png?resize=300%2C85&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719169299_image.png?resize=768%2C218&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1832\" height=\"428\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=1832%2C428&#038;ssl=1\" alt=\"Screenshot of TypeScript displaying a warning in the code editor as a result of not providing a single value for the ANIMAL_TYPE property.\" class=\"wp-image-362098\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?w=1832&amp;ssl=1 1832w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=300%2C70&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=1024%2C239&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=768%2C179&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=1536%2C359&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=1000%2C234&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p></p>\n\n\n<h2 id=\"further-reading\"><br>Further reading</h2>\n\n\n<p>If you&#8217;d like to learn more, I&#8217;d recommend the TypeScript <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\" rel=\"noopener\">docs on narrowing</a>. That&#8217;ll provide some deeper coverage of what we went over here. Inside of that link is a section on <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\" rel=\"noopener\">type predicates</a>. These allow you to define your own, custom checks to narrow types, without needing to use type discriminators, and without relying on the <code>in</code> keyword.</p>\n\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n\n<p>At the beginning of this article, I said it would make sense why <code>weight</code> is the only accessible property in the following example:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">interface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}\nlet animal: Dog | Cat;</code></pre>\n\n\n\n<p>What we learned is that TypeScript only knows that <code>animal</code> could be either a <code>Dog</code> or a <code>Cat</code>, but not both. As such, all we get is <code>weight</code>, which is the only common property between the two.</p>\n\n\n\n<p>The concept of <strong>discriminated unions</strong> is how TypeScript differentiates between those objects and does so in a way that scales extremely well, even with larger sets of objects. As such, we had to create a new <code>ANIMAL_TYPE</code> property on both types that holds a single literal value we can use to check against. Sure, it’s another thing to track, but it also produces more reliable results—which is what we want from TypeScript in the first place.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/typescript-discriminated-unions/\">Demystifying TypeScript Discriminated Unions</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "TypeScript is a wonderful tool for writing JavaScript that scales. It’s more or less the de facto standard for the web when it comes to large JavaScript projects. As outstanding as it is, there are some tricky pieces for the unaccustomed. One such area is TypeScript discriminated unions.\n\n\n\nSpecifically, given this code:\n\n\n\ninterface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}\nlet animal: Dog | Cat;\n\n\n\n…many developers are surprised (and maybe even angry) to discover that when they do animal., only the weight property is valid, and not whiskers or friendly. By the end of this post, this will make perfect sense.\n\n\n\n\n\n\n\nBefore we dive in, let’s do a quick (and necessary) review of structural typing, and how it differs from nominal typing. This will set up our discussion of TypeScript’s discriminated unions nicely.\n\n\nStructural typing\n\n\nThe best way to introduce structural typing is to compare it to what it’s not. Most typed languages you’ve probably used are nominally typed. Consider this C# code (Java or C++ would look similar):\n\n\n\nclass Foo {\n  public int x;\n}\nclass Blah {\n  public int x;\n}\n\n\n\nEven though Foo and Blah are structured exactly the same, they cannot be assigned to one another. The following code:\n\n\n\nBlah b = new Foo();\n\n\n\n…generates this error:\n\n\n\nCannot implicitly convert type 'Foo' to 'Blah'\n\n\n\nThe structure of these classes is irrelevant. A variable of type Foo can only be assigned to instances of the Foo class (or subclasses thereof).\n\n\n\nTypeScript operates the opposite way. TypeScript considers types to be compatible if they have the same structure—hence the name, structural typing. Get it?\n\n\n\nSo, the following runs without error:\n\n\n\nclass Foo {\n  x: number = 0;\n}\nclass Blah {\n  x: number = 0;\n}\nlet f: Foo = new Blah();\nlet b: Blah = new Foo();\n\n\nTypes as sets of matching values\n\n\nLet’s hammer this home. Given this code:\n\n\n\nclass Foo {\n  x: number = 0;\n}\n\nlet f: Foo;\n\n\n\nf is a variable holding any object that matches the structure of instances created by the Foo class which, in this case, means an x property that represents a number. That means even a plain JavaScript object will be accepted.\n\n\n\nlet f: Foo;\nf = {\n  x: 0\n}\n\n\nUnions\n\n\nThanks for sticking with me so far. Let’s get back to the code from the beginning:\n\n\n\ninterface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}\n\n\n\nWe know that this:\n\n\n\nlet animal: Dog;\n\n\n\n…makes animal any object that has the same structure as the Dog interface. So what does the following mean?\n\n\n\nlet animal: Dog | Cat;\n\n\n\nThis types animal as any object that matches the Dog interface, or any object that matches the Cat interface.\n\n\n\nSo why does animal—as it exists now—only allow us to access the weight property? To put it simply, it’s because TypeScript does not know which type it is. TypeScript knows that animal has to be either a Dog or Cat, but it could be either (or both at the same time, but let’s keep it simple). We’d likely get runtime errors if we were allowed to access the friendly property, but the instance wound up being a Cat instead of a Dog. Likewise for the whiskers property if the object wound up being a Dog.\n\n\n\nType unions are unions of valid values rather than unions of properties. Developers often write something like this:\n\n\n\nlet animal: Dog | Cat;\n\n\n\n…and expect animal to have the union of Dog and Cat properties. But again, that’s a mistake. This specifies animal as having a value that matches the union of valid Dog values and valid Cat values. But TypeScript will only allow you to access properties it knows are there. For now, that means properties on all the types in the union.\n\n\nNarrowing\n\n\nRight now, we have this:\n\n\n\nlet animal: Dog | Cat;\n\n\n\nHow do we properly treat animal as a Dog when it’s a Dog, and access properties on the Dog interface, and likewise when it’s a Cat? For now, we can use the in operator. This is an old-school JavaScript operator you probably don’t see very often, but it essentially allows us to test if a property is in an object. Like this:\n\n\n\nlet o = { a: 12 };\n\n\"a\" in o; // true\n\"x\" in o; // false\n\n\n\nIt turns out TypeScript is deeply integrated with the in operator. Let’s see how:\n\n\n\nlet animal: Dog | Cat = {} as any;\n\nif (\"friendly\" in animal) {\n  console.log(animal.friendly);\n} else {\n  console.log(animal.whiskers);\n}\n\n\n\nThis code produces no errors. When inside the if block, TypeScript knows there’s a friendly property, and therefore casts animal as a Dog. And when inside the else block, TypeScript similarly treats animal as a Cat. You can even see this if you hover over the animal object inside these blocks in your code editor:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiscriminated unions\n\n\nYou might expect the blog post to end here but, unfortunately, narrowing type unions by checking for the existence of properties is incredibly limited. It worked well for our trivial Dog and Cat types, but things can easily get more complicated, and more fragile, when we have more types, as well as more overlap between those types.\n\n\n\nThis is where discriminated unions come in handy. We’ll keep everything the same from before, except add a property to each type whose only job is to distinguish (or “discriminate”) between the types:\n\n\n\ninterface Cat {\n  weight: number;\n  whiskers: number;\n  ANIMAL_TYPE: \"CAT\";\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n  ANIMAL_TYPE: \"DOG\";\n}\n\n\n\nNote the ANIMAL_TYPE property on both types. Don’t mistake this as a string with two different values; this is a literal type. ANIMAL_TYPE: \"CAT\"; means a type that holds exactly the string \"CAT\", and nothing else.\n\n\n\nAnd now our check becomes a bit more reliable:\n\n\n\nlet animal: Dog | Cat = {} as any;\n\nif (animal.ANIMAL_TYPE === \"DOG\") {\n  console.log(animal.friendly);\n} else {\n  console.log(animal.whiskers);\n}\n\n\n\nAssuming each type participating in the union has a distinct value for the ANIMAL_TYPE property, this check becomes foolproof.\n\n\n\nThe only downside is that you now have a new property to deal with. Any time you create an instance of a Dog or a Cat, you have to supply the single correct value for the ANIMAL_TYPE. But don’t worry about forgetting because TypeScript will remind you. 🙂\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFurther reading\n\n\nIf you’d like to learn more, I’d recommend the TypeScript docs on narrowing. That’ll provide some deeper coverage of what we went over here. Inside of that link is a section on type predicates. These allow you to define your own, custom checks to narrow types, without needing to use type discriminators, and without relying on the in keyword.\n\n\nConclusion\n\n\nAt the beginning of this article, I said it would make sense why weight is the only accessible property in the following example:\n\n\n\ninterface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}\nlet animal: Dog | Cat;\n\n\n\nWhat we learned is that TypeScript only knows that animal could be either a Dog or a Cat, but not both. As such, all we get is weight, which is the only common property between the two.\n\n\n\nThe concept of discriminated unions is how TypeScript differentiates between those objects and does so in a way that scales extremely well, even with larger sets of objects. As such, we had to create a new ANIMAL_TYPE property on both types that holds a single literal value we can use to check against. Sure, it’s another thing to track, but it also produces more reliable results—which is what we want from TypeScript in the first place.\n\nDemystifying TypeScript Discriminated Unions originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-27T15:20:57.000Z",
      "date_modified": "2022-01-27T15:20:57.000Z",
      "_plugin": {
        "pageFilename": "d99716728de07e515a52720d5540470b466a29149828c2eabc2fbf26c0d37660.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361971",
      "url": "https://css-tricks.com/design-systems-with-backlight/",
      "title": "Build, Ship, & Maintain Design Systems with Backlight",
      "summary": "(This is a sponsored post.)\nDesign systems are an entire job these days. Agencies are hired to create them. In-house teams are formed to handle them, shipping them so that other teams can use them and helping ensure they …\n\nBuild, Ship, & Maintain Design Systems with Backlight originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>Design systems are an entire job these days. Agencies are hired to create them. In-house teams are formed to handle them, shipping them so that other teams can use them and helping ensure they do. Design systems aren&#8217;t a fad, they are a positive evolution of how digital design is done. <a href=\"https://srv.buysellads.com/ads/long/x/TFIVHAD3TTTTTT3JJUSC4TTTTTTVTWGUK6TTTTTTLTNGTYVTTTTTTMLMFHLDKBIGVQ2DE7I3VHIW6LDD22WNPAB322JE\" rel=\"noopener\">Backlight</a> is the ultimate all-in-one development tool for design systems.</p>\n\n\n\n<p>I think it&#8217;s interesting to start thinking about this at the end. What&#8217;s the best-case scenario for a design system for websites? I think it&#8217;s when you&#8217;ve published a versioned design system to npm. That way teams can pull it in as a dependency on the project and use it. How do you do that? Your design system is on GitHub and you publish from there. How do you do that? You work on your design system through a development environment that pushes to GitHub. What is Backlight? It&#8217;s that development environment. </p>\n\n\n\n<span id=\"more-361971\"></span>\n\n\n<h3 id=\"spin-up-a-complete-design-system-in-seconds\">Spin up a complete design system in seconds</h3>\n\n\n<p>Wanna watch me do it?</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"cleanshot-2022-01-21-at-13-58-34-mp4\" width='500' height='377' src='https://videopress.com/embed/wOa1BB7c?cover=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>You don&#8217;t <em>have</em> to pick a starter template, but it&#8217;s enlightening to see all the possibilities. Backlight isn&#8217;t particularly opinionated about what technology you want to use for the system. Lit and Web Components? Great. React and Emotion? Cool. Just Vue? All good. Nunjucks and Sass? That works.</p>\n\n\n\n<p>Having a starter design system really gives you a leg up here. If you&#8217;re cool with using something off-the-shelf and then customizing it, you&#8217;ll be off and running incredibly quickly. Something that you might assume would take a few weeks to figure out and settle into is done in an instant. And if you want to be 100% custom about everything, that&#8217;s still completely on the table. </p>\n\n\n<h3 id=\"kick-it-up-to-github\">Kick it up to GitHub</h3>\n\n\n<p>Even if you&#8217;re still just testing, I think it&#8217;s amazingly easy and impressive how you can just create a GitHub (or GitLab) repo and push to it in a few clicks.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"731\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=1024%2C731&#038;ssl=1\" alt=\"\" class=\"wp-image-362414\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=1024%2C731&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=300%2C214&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=768%2C548&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=1536%2C1096&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=2048%2C1462&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=1000%2C714&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"731\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=1024%2C731&#038;ssl=1\" alt=\"\" class=\"wp-image-362415\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=1024%2C731&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=300%2C214&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=768%2C548&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=1536%2C1096&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=2048%2C1462&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=1000%2C714&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"874\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=1024%2C874&#038;ssl=1\" alt=\"\" class=\"wp-image-362416\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=1024%2C874&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=300%2C256&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=768%2C656&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=1536%2C1311&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=2048%2C1748&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=1000%2C854&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>To me, this is the moment it really becomes real. This isn&#8217;t some third-party tool where everyone is 100% forced to use it and you&#8217;re locked into it forever and it&#8217;s only really useful when people buy into the third-party tool. <a href=\"https://srv.buysellads.com/ads/long/x/TFIVHAD3TTTTTT3JJUSC4TTTTTTVTWGUK6TTTTTTLTNGTYVTTTTTTMLMFHLDKBIGVQ2DE7I3VHIW6LDD22WNPAB322JE\" rel=\"noopener\">Backlight</a> just takes very industry-standard practices and makes them easier and more convenient to work with. </p>\n\n\n<h3 id=\"then-kick-it-to-a-registry\">Then, kick it to a registry.</h3>\n\n\n<p>Like I said at the top, this is the big moment for any design system. When you send it to a package registry like <a href=\"https://www.npmjs.com/\" rel=\"noopener\">npm</a> or <a href=\"https://github.com/features/packages\" rel=\"noopener\">GitHub packages</a>, that means that anyone hoping to use your design system can now install it and use it like any other dependency. </p>\n\n\n\n<p>In Backlight, this is just a matter of clicking a few buttons. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"778\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=1024%2C778&#038;ssl=1\" alt=\"\" class=\"wp-image-362605\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=1024%2C778&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=300%2C228&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=768%2C583&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=1536%2C1167&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=2048%2C1556&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=1000%2C760&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>With a PRO membership, you can change the scope to your own organization. Soon you&#8217;ll be handling all your design system releases right from here, including major, minor, and patch versions. </p>\n\n\n<h3 id=\"make-a-component\">Make a Component</h3>\n\n\n<p>I&#8217;d never used Backlight before, nobody helped me, and I didn&#8217;t read any of the (robust) documentation. I just clicked around and created a new Component easily. In my case here, I made a new Nunjucks <code>macro</code>, made some SCSS styles, then created a demo of it as a Storybook &#8220;story&#8221;. All I did was reference an existing component to see how it all worked. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"635\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=1024%2C635&#038;ssl=1\" alt=\"\" class=\"wp-image-362417\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=1024%2C635&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=300%2C186&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=768%2C477&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=1536%2C953&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=2048%2C1271&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=1000%2C621&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>As one of the creators of CodePen, of course, I highly appreciated the in-browser IDE qualities to all this. It runs re-builds your code changes (looks like a Vite process) super quickly, alerting you helpfully to any errors. </p>\n\n\n\n<p>Now because this is a Very Real Serious Design System, I wouldn&#8217;t push this new component directly to <code>master</code> in our repository, first it becomes a branch, and then I commit to that. I wouldn&#8217;t have to know anything at all about Git to pull this off, look how easy it is:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"635\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=1024%2C635&#038;ssl=1\" alt=\"\" class=\"wp-image-362418\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=1024%2C635&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=300%2C186&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=768%2C477&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=1536%2C953&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=2048%2C1271&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=1000%2C621&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"howdy-stakeholders\">Howdy, Stakeholders!</h3>\n\n\n<p>Design systems are as much of a people concern as they are a technological concern. Design systems need to get talked about. I really appreciate how I can share Backlight with anyone, even if they aren&#8217;t logged in. Just copy a sharing link (that nobody could ever guess) and away you go. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"671\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=1024%2C671&#038;ssl=1\" alt=\"\" class=\"wp-image-362419\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=1024%2C671&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=300%2C197&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=768%2C504&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=1536%2C1007&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=2048%2C1343&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=1000%2C656&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"there-is-a-lot-here\">There is a lot here.</h3>\n\n\n<p>You can manage an entire design system in here. You&#8217;re managing things from the atomic token level all the way up to building example pages and piecing together the system. You&#8217;re literally writing the code to build all this stuff, including the templates, stories, and tests, right there in Backlight. </p>\n\n\n\n<p class=\"is-style-explanation\">What about those people on your team who really just can&#8217;t be persuaded to leave their local development environment. Backlight understands this, and it doesn&#8217;t force them to! Backlight has <a href=\"https://backlight.dev/docs/cli\" rel=\"noopener\">a CLI</a> which enables local development, including spinning up a server to preview active work. </p>\n\n\n\n<p>But it doesn&#8217;t stop there. You can build documentation for everything right in Backlight. Design systems are often best explained in words! And design systems might actually start life (or live a parallel life) in entirely design-focused software like Figma, Sketch, or Adobe XD. It&#8217;s possible to link design documents right in Backlight, making them easy to find and much more organized. </p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>I&#8217;m highly impressed! I wasn&#8217;t sure at first what to make of a tool that wants to be a complete tool for design systems, knowing how complex that whole world is, but <a href=\"https://srv.buysellads.com/ads/long/x/TFIVHAD3TTTTTT3JJUSC4TTTTTTVTWGUK6TTTTTTLTNGTYVTTTTTTMLMFHLDKBIGVQ2DE7I3VHIW6LDD22WNPAB322JE\" rel=\"noopener\">Backlight</a> really delivers in a way that I find highly satisfying, especially coming at it from the role of a front-end developer, designer, and manager.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/design-systems-with-backlight/\">Build, Ship, &#038; Maintain Design Systems with Backlight</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "(This is a sponsored post.)\nDesign systems are an entire job these days. Agencies are hired to create them. In-house teams are formed to handle them, shipping them so that other teams can use them and helping ensure they do. Design systems aren’t a fad, they are a positive evolution of how digital design is done. Backlight is the ultimate all-in-one development tool for design systems.\n\n\n\nI think it’s interesting to start thinking about this at the end. What’s the best-case scenario for a design system for websites? I think it’s when you’ve published a versioned design system to npm. That way teams can pull it in as a dependency on the project and use it. How do you do that? Your design system is on GitHub and you publish from there. How do you do that? You work on your design system through a development environment that pushes to GitHub. What is Backlight? It’s that development environment. \n\n\n\n\n\n\nSpin up a complete design system in seconds\n\n\nWanna watch me do it?\n\n\n\n\n\n\n\n\n\nYou don’t have to pick a starter template, but it’s enlightening to see all the possibilities. Backlight isn’t particularly opinionated about what technology you want to use for the system. Lit and Web Components? Great. React and Emotion? Cool. Just Vue? All good. Nunjucks and Sass? That works.\n\n\n\nHaving a starter design system really gives you a leg up here. If you’re cool with using something off-the-shelf and then customizing it, you’ll be off and running incredibly quickly. Something that you might assume would take a few weeks to figure out and settle into is done in an instant. And if you want to be 100% custom about everything, that’s still completely on the table. \n\n\nKick it up to GitHub\n\n\nEven if you’re still just testing, I think it’s amazingly easy and impressive how you can just create a GitHub (or GitLab) repo and push to it in a few clicks.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo me, this is the moment it really becomes real. This isn’t some third-party tool where everyone is 100% forced to use it and you’re locked into it forever and it’s only really useful when people buy into the third-party tool. Backlight just takes very industry-standard practices and makes them easier and more convenient to work with. \n\n\nThen, kick it to a registry.\n\n\nLike I said at the top, this is the big moment for any design system. When you send it to a package registry like npm or GitHub packages, that means that anyone hoping to use your design system can now install it and use it like any other dependency. \n\n\n\nIn Backlight, this is just a matter of clicking a few buttons. \n\n\n\n\n\n\n\nWith a PRO membership, you can change the scope to your own organization. Soon you’ll be handling all your design system releases right from here, including major, minor, and patch versions. \n\n\nMake a Component\n\n\nI’d never used Backlight before, nobody helped me, and I didn’t read any of the (robust) documentation. I just clicked around and created a new Component easily. In my case here, I made a new Nunjucks macro, made some SCSS styles, then created a demo of it as a Storybook “story”. All I did was reference an existing component to see how it all worked. \n\n\n\n\n\n\n\nAs one of the creators of CodePen, of course, I highly appreciated the in-browser IDE qualities to all this. It runs re-builds your code changes (looks like a Vite process) super quickly, alerting you helpfully to any errors. \n\n\n\nNow because this is a Very Real Serious Design System, I wouldn’t push this new component directly to master in our repository, first it becomes a branch, and then I commit to that. I wouldn’t have to know anything at all about Git to pull this off, look how easy it is:\n\n\n\n\n\n\nHowdy, Stakeholders!\n\n\nDesign systems are as much of a people concern as they are a technological concern. Design systems need to get talked about. I really appreciate how I can share Backlight with anyone, even if they aren’t logged in. Just copy a sharing link (that nobody could ever guess) and away you go. \n\n\n\n\n\n\nThere is a lot here.\n\n\nYou can manage an entire design system in here. You’re managing things from the atomic token level all the way up to building example pages and piecing together the system. You’re literally writing the code to build all this stuff, including the templates, stories, and tests, right there in Backlight. \n\n\n\nWhat about those people on your team who really just can’t be persuaded to leave their local development environment. Backlight understands this, and it doesn’t force them to! Backlight has a CLI which enables local development, including spinning up a server to preview active work. \n\n\n\nBut it doesn’t stop there. You can build documentation for everything right in Backlight. Design systems are often best explained in words! And design systems might actually start life (or live a parallel life) in entirely design-focused software like Figma, Sketch, or Adobe XD. It’s possible to link design documents right in Backlight, making them easy to find and much more organized. \n\n\n\n\n\n\n\nI’m highly impressed! I wasn’t sure at first what to make of a tool that wants to be a complete tool for design systems, knowing how complex that whole world is, but Backlight really delivers in a way that I find highly satisfying, especially coming at it from the role of a front-end developer, designer, and manager.\n\nBuild, Ship, & Maintain Design Systems with Backlight originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-27T15:18:25.000Z",
      "date_modified": "2022-01-27T15:18:25.000Z",
      "_plugin": {
        "pageFilename": "0e4cbfda8cf51d0c6c62053ad7c590a4c1a1dd4ab498b9ccbe222a6f747e6f7e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361200",
      "url": "https://css-tricks.com/cycle-through-classes-html-element/",
      "title": "How to Cycle Through Classes on an HTML Element",
      "summary": "Say you have three HTML classes, and a DOM element should only have one of them at a time:\n<div class=\"state-1\"</div<div class=\"state-2\"</div<div class=\"state-3\"</div\nNow your job is to rotate them. That is, cycle through classes …\n\nHow to Cycle Through Classes on an HTML Element originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Say you have three HTML classes, and a DOM element should only have one of them at a time:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"state-1\">&lt;/div>\n&lt;div class=\"state-2\">&lt;/div>\n&lt;div class=\"state-3\">&lt;/div></code></pre>\n\n\n\n<p>Now your job is to rotate them. That is, cycle through classes on an HTML element. When some event occurs, if the element has <code>state-1</code> on it, remove <code>state-1</code> and add <code>state-2</code>. If it has <code>state-2</code> on it, remove that and add <code>state-3</code>. On the last state, remove it, and cycle back to <code>state-1</code>.</p>\n\n\n\n<span id=\"more-361200\"></span>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-19-at-07.02.53.gif?resize=538%2C339&#038;ssl=1\" alt=\"Example of how to Cycle Through Classes on an HTML Element. Here a large <button&gt; with an <svg&gt; inside cycles through state-1, state-2, and state-3 classes, turning from red to yellow to green.\" class=\"wp-image-362171\" width=\"538\" height=\"339\" data-recalc-dims=\"1\" /></figure></div>\n\n\n\n<p>It&#8217;s notable that we&#8217;re talking about 3+ classes here. The DOM has a <code>.classList.toggle()</code> function, even one that takes a conditional as a second parameter, but that&#8217;s primarily useful in a two-class on/off situation, not cycling through classes.</p>\n\n\n\n<p class=\"is-style-explanation\"><strong>Why?</strong> There is a number of reasons. Changing a class name gives you lots of power to re-style things in the DOM, and state management like that is a cornerstone of modern web development. But to be specific, in my case, I was wanting to do <a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\">FLIP animations</a> where I&#8217;d change a layout and trigger a tween animation between the different states.</p>\n\n\n\n<p class=\"is-style-explanation\"><strong>Careful</strong> about existing classes! I saw some ideas that overwrote <code>.className</code>, which isn&#8217;t friendly toward other classes that might be on the DOM element. All these are &#8220;safe&#8221; choices for cycling through classes in that way.</p>\n\n\n\n<p>Because this is programming, there are <em>lots</em> of ways to get this done. Let&#8217;s cover a bunch of them — <em>for fun.</em> I <a href=\"https://twitter.com/chriscoyier/status/1481028373002473472\" rel=\"noopener\">tweeted about this issue</a>, so many of these solutions are from people who chimed into that discussion.</p>\n\n\n<h3 id=\"a-verbose-ifelse-statement-to-cycle-through-classes\">A verbose if/else statement to cycle through classes</h3>\n\n\n<p>This is what I did at first to cycle through classes. That&#8217;s how my brain works. Just write out very specific instructions for exactly what you want to happen:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">if (el.classList.contains(\"state-1\")) {\n  el.classList.remove(\"state-1\");\n  el.classList.add(\"state-2\");\n} else if (el.classList.contains(\"state-2\")) {\n  el.classList.remove(\"state-2\");\n  el.classList.add(\"state-3\");\n} else {\n  el.classList.remove(\"state-3\");\n  el.classList.add(\"state-1\");\n}</code></pre>\n\n\n\n<p>I don&#8217;t mind the verbosity here, because to me it&#8217;s super clear what&#8217;s going on and will be easy to return to this code and &#8220;reason about it,&#8221; as they say. You could consider the verbosity a problem — surely there is a way to cycle through classes with less code. But a bigger issue is that it isn&#8217;t very extensible. There is no semblance of configuration (e.g. change the names of the classes easily) or simple way to add classes to the party, or remove them. </p>\n\n\n\n<p>We could use constants, at least:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const STATE_1 = \"state-1\";\nconst STATE_2 = \"state-2\";\nconst STATE_3 = \"state-3\";\n\nif (el.classList.contains(STATE_1)) {\n  el.classList.remove(STATE_1);\n  el.classList.add(STATE_2);\n} else if (el.classList.contains(STATE_2)) {\n  el.classList.remove(STATE_2);\n  el.classList.add(STATE_3);\n} else {\n  el.classList.remove(STATE_3);\n  el.classList.add(STATE_1);\n}</code></pre>\n\n\n\n<p>But that&#8217;s not wildly different or better.</p>\n\n\n<h3 id=\"regex-off-the-old-class-increment-state-then-readd\">RegEx off the old class, increment state, then re-add</h3>\n\n\n<p>This one <a href=\"https://twitter.com/tabatkins/status/1481030336481947648\" rel=\"noopener\">comes from Tab Atkins</a>. Since we know the format of the class, <code>state-N</code>, we can look for that, pluck off the number, use a little ternary to increment it (but not higher than the highest state), then add/remove the classes as a way of cycling through them:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const oldN = +/\\bstate-(\\d+)\\b/.exec(el.getAttribute('class'))[1];\nconst newN = oldN >= 3 ? 1 : oldN+1;\nel.classList.remove(`state-${oldN}`);\nel.classList.add(`state-${newN}`);</code></pre>\n\n\n<h3 id=\"find-the-index-of-the-class-then-removeadd\">Find the index of the class, then remove/add</h3>\n\n\n<p>A bunch of techniques to cycle through classes center around setting up an array of classes up front. This acts as configuration for cycling through classes, which I think is a smart way to do it. Once you have that, you can find the relevant classes for adding and removing them. This one is <a href=\"https://twitter.com/ckirknielsen/status/1481047709654167553\" rel=\"noopener\">from Christopher Kirk-Nielsen</a>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const classes = [\"state-1\", \"state-2\", \"state-3\"];\nconst activeIndex = classes.findIndex((c) => el.classList.contains(c));\nconst nextIndex = (activeIndex + 1) % classes.length;\n\nel.classList.remove(classes[activeIndex]);\nel.classList.add(classes[nextIndex]);</code></pre>\n\n\n\n<p>Christopher had a nice idea for making the add/remove technique shorter as well. Turns out it&#8217;s the same&#8230;</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">el.classList.remove(classes[activeIndex]);\nel.classList.add(classes[nextIndex]);\n\n// Does the same thing.\nel.classList.replace(classes[activeIndex], classes[nextIndex]);</code></pre>\n\n\n\n<p><a href=\"https://twitter.com/m_yxnk/status/1481037368220164097\" rel=\"noopener\">Mayank had a similar idea</a> for cycling through classes by finding the class in an array, only rather than using <code>classList.contains()</code>, you check the classes currently on the DOM element with what is in the array.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const states = [\"state-1\", \"state-2\", \"state-3\"];\nconst current = [...el.classList].find(cls => states.includes(cls));\nconst next = states[(states.indexOf(current) + 1) % states.length];\nel.classList.remove(current);\nel.classList.add(next);</code></pre>\n\n\n\n<p>Variations of this were the most common idea. <a href=\"https://twitter.com/jh3yy/status/1481034247473438725\" rel=\"noopener\">Here&#8217;s Jhey&#8217;s</a> and <a href=\"https://twitter.com/mike_wagz/status/1481032265333415941\" rel=\"noopener\">here&#8217;s Mike Wagz</a> which sets up functions for moving forward and backward.</p>\n\n\n<h3 id=\"cascading-replace-statements\">Cascading replace statements</h3>\n\n\n<p>Speaking of that <code>replace</code> API, <a href=\"https://twitter.com/ccalo/status/1481221461293600772\" rel=\"noopener\">Chris Calo had a clever idea</a> where you chain them with the <code>or</code> operator and rely on the fact that it returns true/false if it works or doesn&#8217;t. So you do all three and one of them will work!</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\"> el.classList.replace(\"state-1\", \"state-2\") ||\n el.classList.replace(\"state-2\", \"state-3\") ||\n el.classList.replace(\"state-3\", \"state-1\");</code></pre>\n\n\n\n<p><a href=\"https://twitter.com/NicoloRibaudo\" rel=\"noopener\"></a><a href=\"https://twitter.com/NicoloRibaudo/status/1481037397995438081\" rel=\"noopener\">Nicolò Ribaudo came to</a> the same conclusion.</p>\n\n\n<h3 id=\"just-cycle-through-class-numbers\">Just cycle through class numbers</h3>\n\n\n<p>If you pre-configured a <code>1</code> upfront, you could cycle through classes 1-3 and add/remove them based on that. This is <a href=\"https://twitter.com/zzzzBov/status/1481032199835201537\" rel=\"noopener\">from Timothy Leverett</a> who lists another similar option in the same tweet. </p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Assumes a `let s = 1` upfront\nel.classList.remove(`state-${s + 1}`);\ns = (s + 1) % 3;\nel.classList.add(`state-${s + 1}`);</code></pre>\n\n\n<h3 id=\"use-data-attributes-instead\">Use <code>data-*</code> attributes instead</h3>\n\n\n<p><a href=\"https://css-tricks.com/a-complete-guide-to-data-attributes/\">Data attributes</a> have the same specificity power, so I have no issue with this. They might actually be more clear in terms of state handling, but even better, they have <a href=\"https://css-tricks.com/a-complete-guide-to-data-attributes/#aa-accessing-data-attributes-in-javascript\">a special API</a> that makes them nice to manipulate. <a href=\"https://twitter.com/munawwarfiroz/status/1481156536277864450\" rel=\"noopener\">Munawwar Firoz had an idea</a> that gets this down to a one-liner:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">el.dataset.state = (+el.dataset.state % 3) + 1</code></pre>\n\n\n<h3 id=\"a-data-attribute-state-machine\">A data attribute state machine</h3>\n\n\n<p>You can <a href=\"https://twitter.com/DavidKPiano/status/1481044698152280068\" rel=\"noopener\">count on David Khourshid</a> to be ready with a state machine:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const simpleMachine = {\n  \"1\": \"2\",\n  \"2\": \"3\",\n  \"3\": \"1\"\n};\nel.dataset.state = simpleMachine[el.dataset.state];</code></pre>\n\n\n<h3 id=\"youll-almost-surely-want-a-function\">You&#8217;ll almost surely want a function</h3>\n\n\n<p>Give yourself a little abstraction, right? Many of the ideas wrote code this way, but so far I&#8217;ve move it out to focus on the idea itself. Here, I&#8217;ll leave the function in. This one is <a href=\"https://twitter.com/WebReflection/status/1481188307526631428\" rel=\"noopener\">from Andrea Giammarchi</a> in which a unique function for cycling through classes is set up ahead of time, then you call it as needed:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const rotator = (classes) => ({ classList }) => {\n  const current = classes.findIndex((cls) => classList.contains(cls));\n  classList.remove(...classes);\n  classList.add(classes[(current + 1) % classes.length]);\n};\n\nconst rotate = rotator([\"state-1\", \"state-2\", \"state-3\"]);\nrotate(el);</code></pre>\n\n\n\n<p>I heard from Kyle Simpson who had this same idea, almost character for character.</p>\n\n\n<h3 id=\"others\">Others?</h3>\n\n\n<p>There were more ideas in the replies to my <a href=\"https://twitter.com/chriscoyier/status/1481028373002473472\" rel=\"noopener\">original tweet</a>, but are, best I can tell, variations on what I&#8217;ve already shared above. Apologies if I missed yours! Feel free to share your idea again in the comments here. I see nobody used a <code>switch</code> statements — that could be a possibility!</p>\n\n\n\n<p>David Desandro went as far as recording a video, which is wonderful as it slowly abstracts the concepts further and further until it&#8217;s succinct but still readable and much more flexible:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"State variable and cycling through an array\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/hXrHZ_LSzkk?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p>And here&#8217;s a demo Pen with all the code for each example in there. They are numbered, so to test out another one, comment out the one that is uncommented, and uncomment another example:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxXeXPN\" src=\"//codepen.io/anon/embed/xxXeXPN?height=550&amp;theme-id=1&amp;slug-hash=xxXeXPN&amp;default-tab=js,result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxXeXPN\" title=\"CodePen Embed xxXeXPN\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/cycle-through-classes-html-element/\">How to Cycle Through Classes on an HTML Element</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Say you have three HTML classes, and a DOM element should only have one of them at a time:\n\n\n\n<div class=\"state-1\"></div>\n<div class=\"state-2\"></div>\n<div class=\"state-3\"></div>\n\n\n\nNow your job is to rotate them. That is, cycle through classes on an HTML element. When some event occurs, if the element has state-1 on it, remove state-1 and add state-2. If it has state-2 on it, remove that and add state-3. On the last state, remove it, and cycle back to state-1.\n\n\n\n\n\n\n\n\n\n\n\nIt’s notable that we’re talking about 3+ classes here. The DOM has a .classList.toggle() function, even one that takes a conditional as a second parameter, but that’s primarily useful in a two-class on/off situation, not cycling through classes.\n\n\n\nWhy? There is a number of reasons. Changing a class name gives you lots of power to re-style things in the DOM, and state management like that is a cornerstone of modern web development. But to be specific, in my case, I was wanting to do FLIP animations where I’d change a layout and trigger a tween animation between the different states.\n\n\n\nCareful about existing classes! I saw some ideas that overwrote .className, which isn’t friendly toward other classes that might be on the DOM element. All these are “safe” choices for cycling through classes in that way.\n\n\n\nBecause this is programming, there are lots of ways to get this done. Let’s cover a bunch of them — for fun. I tweeted about this issue, so many of these solutions are from people who chimed into that discussion.\n\n\nA verbose if/else statement to cycle through classes\n\n\nThis is what I did at first to cycle through classes. That’s how my brain works. Just write out very specific instructions for exactly what you want to happen:\n\n\n\nif (el.classList.contains(\"state-1\")) {\n  el.classList.remove(\"state-1\");\n  el.classList.add(\"state-2\");\n} else if (el.classList.contains(\"state-2\")) {\n  el.classList.remove(\"state-2\");\n  el.classList.add(\"state-3\");\n} else {\n  el.classList.remove(\"state-3\");\n  el.classList.add(\"state-1\");\n}\n\n\n\nI don’t mind the verbosity here, because to me it’s super clear what’s going on and will be easy to return to this code and “reason about it,” as they say. You could consider the verbosity a problem — surely there is a way to cycle through classes with less code. But a bigger issue is that it isn’t very extensible. There is no semblance of configuration (e.g. change the names of the classes easily) or simple way to add classes to the party, or remove them. \n\n\n\nWe could use constants, at least:\n\n\n\nconst STATE_1 = \"state-1\";\nconst STATE_2 = \"state-2\";\nconst STATE_3 = \"state-3\";\n\nif (el.classList.contains(STATE_1)) {\n  el.classList.remove(STATE_1);\n  el.classList.add(STATE_2);\n} else if (el.classList.contains(STATE_2)) {\n  el.classList.remove(STATE_2);\n  el.classList.add(STATE_3);\n} else {\n  el.classList.remove(STATE_3);\n  el.classList.add(STATE_1);\n}\n\n\n\nBut that’s not wildly different or better.\n\n\nRegEx off the old class, increment state, then re-add\n\n\nThis one comes from Tab Atkins. Since we know the format of the class, state-N, we can look for that, pluck off the number, use a little ternary to increment it (but not higher than the highest state), then add/remove the classes as a way of cycling through them:\n\n\n\nconst oldN = +/\\bstate-(\\d+)\\b/.exec(el.getAttribute('class'))[1];\nconst newN = oldN >= 3 ? 1 : oldN+1;\nel.classList.remove(`state-${oldN}`);\nel.classList.add(`state-${newN}`);\n\n\nFind the index of the class, then remove/add\n\n\nA bunch of techniques to cycle through classes center around setting up an array of classes up front. This acts as configuration for cycling through classes, which I think is a smart way to do it. Once you have that, you can find the relevant classes for adding and removing them. This one is from Christopher Kirk-Nielsen:\n\n\n\nconst classes = [\"state-1\", \"state-2\", \"state-3\"];\nconst activeIndex = classes.findIndex((c) => el.classList.contains(c));\nconst nextIndex = (activeIndex + 1) % classes.length;\n\nel.classList.remove(classes[activeIndex]);\nel.classList.add(classes[nextIndex]);\n\n\n\nChristopher had a nice idea for making the add/remove technique shorter as well. Turns out it’s the same…\n\n\n\nel.classList.remove(classes[activeIndex]);\nel.classList.add(classes[nextIndex]);\n\n// Does the same thing.\nel.classList.replace(classes[activeIndex], classes[nextIndex]);\n\n\n\nMayank had a similar idea for cycling through classes by finding the class in an array, only rather than using classList.contains(), you check the classes currently on the DOM element with what is in the array.\n\n\n\nconst states = [\"state-1\", \"state-2\", \"state-3\"];\nconst current = [...el.classList].find(cls => states.includes(cls));\nconst next = states[(states.indexOf(current) + 1) % states.length];\nel.classList.remove(current);\nel.classList.add(next);\n\n\n\nVariations of this were the most common idea. Here’s Jhey’s and here’s Mike Wagz which sets up functions for moving forward and backward.\n\n\nCascading replace statements\n\n\nSpeaking of that replace API, Chris Calo had a clever idea where you chain them with the or operator and rely on the fact that it returns true/false if it works or doesn’t. So you do all three and one of them will work!\n\n\n\n el.classList.replace(\"state-1\", \"state-2\") ||\n el.classList.replace(\"state-2\", \"state-3\") ||\n el.classList.replace(\"state-3\", \"state-1\");\n\n\n\nNicolò Ribaudo came to the same conclusion.\n\n\nJust cycle through class numbers\n\n\nIf you pre-configured a 1 upfront, you could cycle through classes 1-3 and add/remove them based on that. This is from Timothy Leverett who lists another similar option in the same tweet. \n\n\n\n// Assumes a `let s = 1` upfront\nel.classList.remove(`state-${s + 1}`);\ns = (s + 1) % 3;\nel.classList.add(`state-${s + 1}`);\n\n\nUse data-* attributes instead\n\n\nData attributes have the same specificity power, so I have no issue with this. They might actually be more clear in terms of state handling, but even better, they have a special API that makes them nice to manipulate. Munawwar Firoz had an idea that gets this down to a one-liner:\n\n\n\nel.dataset.state = (+el.dataset.state % 3) + 1\n\n\nA data attribute state machine\n\n\nYou can count on David Khourshid to be ready with a state machine:\n\n\n\nconst simpleMachine = {\n  \"1\": \"2\",\n  \"2\": \"3\",\n  \"3\": \"1\"\n};\nel.dataset.state = simpleMachine[el.dataset.state];\n\n\nYou’ll almost surely want a function\n\n\nGive yourself a little abstraction, right? Many of the ideas wrote code this way, but so far I’ve move it out to focus on the idea itself. Here, I’ll leave the function in. This one is from Andrea Giammarchi in which a unique function for cycling through classes is set up ahead of time, then you call it as needed:\n\n\n\nconst rotator = (classes) => ({ classList }) => {\n  const current = classes.findIndex((cls) => classList.contains(cls));\n  classList.remove(...classes);\n  classList.add(classes[(current + 1) % classes.length]);\n};\n\nconst rotate = rotator([\"state-1\", \"state-2\", \"state-3\"]);\nrotate(el);\n\n\n\nI heard from Kyle Simpson who had this same idea, almost character for character.\n\n\nOthers?\n\n\nThere were more ideas in the replies to my original tweet, but are, best I can tell, variations on what I’ve already shared above. Apologies if I missed yours! Feel free to share your idea again in the comments here. I see nobody used a switch statements — that could be a possibility!\n\n\n\nDavid Desandro went as far as recording a video, which is wonderful as it slowly abstracts the concepts further and further until it’s succinct but still readable and much more flexible:\n\n\n\n\n\n\n\n\n\nAnd here’s a demo Pen with all the code for each example in there. They are numbered, so to test out another one, comment out the one that is uncommented, and uncomment another example:\n\n\n\nCodePen Embed Fallback\n\nHow to Cycle Through Classes on an HTML Element originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-26T19:48:49.000Z",
      "date_modified": "2022-01-26T19:48:49.000Z",
      "_plugin": {
        "pageFilename": "d3e050b389f75661dfcdc959e62ae848a59f1f574ac5ea9c58867eaba24ae310.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362018",
      "url": "https://css-tricks.com/css-borders-using-masks/",
      "title": "Fancy CSS Borders Using Masks",
      "summary": "Have you ever tried to make CSS borders in a repeating zig-zag pattern? Like where a colored section of a website ends and another differently colored section begins — not with a straight line, but angled zig zags, rounded humps, …\n\nFancy CSS Borders Using Masks originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Have you ever tried to make CSS borders in a repeating zig-zag pattern? Like where a colored section of a website ends and another differently colored section begins — not with a straight line, but angled zig zags, rounded humps, or waves. There are a number of ways you could do this sort of CSS border, dating all the way back to using a <code>background-image</code>. But we can get more modern and programmatic with it. In this article, we’ll look at some modern CSS mask techniques to achieve the look.</p>\n\n\n\n<span id=\"more-362018\"></span>\n\n\n\n<p>Before we dig into the technical parts, though, let’s take a look at what we are building. I have made a <a href=\"https://css-generators.com/custom-borders/\" target=\"_blank\" rel=\"noreferrer noopener\">CSS border generator</a> where you can easily generate any kind of border within a few seconds and get the CSS code.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"usage-of-the-generator-mp4\" width='500' height='207' src='https://videopress.com/embed/KzpD7MM6?cover=1&amp;muted=1&amp;persistVolume=0&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>Did you see that? With the <a href=\"https://css-tricks.com/almanac/properties/m/mask/\">CSS <code>mask</code> property</a> and a few <a href=\"https://css-tricks.com/a-complete-guide-to-css-gradients/\">CSS gradients</a>, we get a responsive and cool-looking border — all with CSS by itself. Not only this, but such effect can be applied to any element where we can have any kind of coloration (e.g. image, gradient, etc). We get all this without extra elements, pseudo elements, or magic numbers coming from nowhere!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Oh great! All I have to do is to copy/paste code and it’s done!</p></blockquote>\n\n\n\n<p>True, but it’s good to understand the logic to be able to manually adjust the code if you need to.</p>\n\n\n<h3 id=\"masking-things\">Masking things</h3>\n\n\n<p>Since all our effects rely on the CSS <code>mask</code> property, let’s take a quick refresh on how it works. Straight from <a href=\"https://drafts.fxtf.org/css-masking/#masking\" rel=\"noopener\">the spec</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The effect of applying a mask to a graphical object is as if the graphical object will be painted onto the background through a mask, thus completely or partially masking out parts of the graphical object.</p></blockquote>\n\n\n\n<p>If we check the <a href=\"https://drafts.fxtf.org/css-masking/#the-mask-image\" rel=\"noopener\">formal syntax</a> of the <code>mask</code> property we can see it accepts an <code>&lt;image&gt;</code> as a value, meaning either a URL of an image or a color gradient. Gradients are what we’ll be using here. Let’s start with basic examples:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYGMjmO\" src=\"//codepen.io/anon/embed/eYGMjmO?height=300&amp;theme-id=1&amp;slug-hash=eYGMjmO&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYGMjmO\" title=\"CodePen Embed eYGMjmO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>In the first example of this demo, a gradient is used to make it appear as though the image is fading away. The second example, meanwhile, also uses a gradient, but rather than a soft transition between colors, a <a href=\"https://css-tricks.com/books/greatest-css-tricks/hard-stop-gradients/\">hard color stop</a> is used to hide (or mask) half of the image. That second example illustrates the technique we will be using to create our fancy borders.</p>\n\n\n\n<p>Oh, and the CSS <code>mask</code> property can take multiple gradients as long as they are comma-separated. That means we have even more control to mask additional parts of the image.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJxvwVZ\" src=\"//codepen.io/anon/embed/OJxvwVZ?height=300&amp;theme-id=1&amp;slug-hash=OJxvwVZ&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJxvwVZ\" title=\"CodePen Embed OJxvwVZ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>That example showing multiple masking gradients may look a bit tricky at first glance, but what’s happening is the same as applying the multiple gradients on the <code>background</code> property. But instead of using a color that blends in with the page background, we use a “transparent” black value (<code>#0000</code>) for the hidden parts of the image and full black (<code>#000</code>) for the visible parts.</p>\n\n\n\n<p>That’s it! Now we can tackle our fancy borders.</p>\n\n\n<h3 id=\"zigzag-css-borders\">Zig-Zag CSS borders</h3>\n\n\n<p>As we saw in the video at the start of this article, <a href=\"https://css-generators.com/custom-borders/\" target=\"_blank\" rel=\"noreferrer noopener\">the generator</a> can apply borders on one side, two sides, or all sides. Let’s start with the bottom side using a step-by-step illustration:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNGqMQE\" src=\"//codepen.io/anon/embed/oNGqMQE?height=510&amp;theme-id=1&amp;slug-hash=oNGqMQE&amp;default-tab=result\" height=\"510\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNGqMQE\" title=\"CodePen Embed oNGqMQE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<ol><li>We start by adding the first gradient layer with a solid color (<code>red</code>) at the top. A height that’s equal to <code>calc(100% - 40px)</code> is used to leave <code>40px</code> of empty space at the bottom.</li><li>We add a second gradient placed at the bottom that takes the remaining height of the container. There&#8217;s a little bit of geometry happening to make this work.</li></ol>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"918\" height=\"329\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641129713838_image.png?resize=918%2C329&#038;ssl=1\" alt=\"Diagram showing how the shape of a zig-zag is created in CSS. An upside down triangle in blue represents the shape and green areas to the left and right of it show the leftover space that is masked out with CSS.\" class=\"wp-image-362029\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641129713838_image.png?w=918&amp;ssl=1 918w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641129713838_image.png?resize=300%2C108&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641129713838_image.png?resize=768%2C275&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<ol start=\"3\"><li>Next, we repeat the last gradient horizontally (replacing <code>no-repeat</code> with <code>repeat-x</code>). We can already see the zig-zag shape!</li><li>Gradients are known to have anti-aliasing issues creating jagged edges (especially on Chrome). To avoid this, we add a slight transition between the colors, changing <code>blue 90deg, green 0</code> to <code>green, blue 1deg 89deg, green 90deg</code>.</li><li>Then we update the colors to have a uniform shape</li><li>Last, we use everything inside the <code>mask</code> property!</li></ol>\n\n\n\n<p>We can extract two variables from those steps to define our shape: size (<code>40px</code>) and angle (<code>90deg</code>). Here’s how we can express that using placeholders for those variables. I will be using JavaScript to replace those variables with their final values.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(red 0 0) top/100% calc(100% - {size}) no-repeat,\n  conic-gradient(\n    from {-angle/2} at bottom,\n    #0000, #000 1deg {angle - 1} ,#0000 {angle}\n  ) bottom/{size*2*tan(angle/2)} {size} repeat-x;</code></pre>\n\n\n\n<p>We can use CSS custom properties for the size and the angle, but trigonometric functions are unsupported features at this moment. In the future, we’ll be able to do something like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--size: 40px;\n--angle: 90deg;\nmask:\n  linear-gradient(red 0 0) top/100% calc(100% - var(--size)) no-repeat,\n  conic-gradient(\n    from calc(var(--angle)/-2) at bottom,\n    #0000, #000 1deg calc(var(--angle) - 1deg), #0000 var(--angle)\n  ) bottom/calc(var(--size)*2*tan(var(--angle)/2)) var(--size) repeat-x;</code></pre>\n\n\n\n<p>Similar to the bottom border, the top one will have almost the same code with a few adjustments:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(red 0 0) bottom/100% calc(100% - {size}) no-repeat,\n  conic-gradient(\n    from {180deg - angle/2} at top,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) top/{size*2*tan(angle/2)} {size} repeat-x;</code></pre>\n\n\n\n<p>We changed <code>bottom</code> with <code>top</code> and <code>top</code> with <code>bottom</code>, then updated the rotation of the gradient to <code>180deg - angle/2</code> instead of <code>-angle/2</code>. As simple as that!</p>\n\n\n\n<p>That’s the pattern we can use for the rest of the sides, like the left:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(red 0 0) right/calc(100% - {size}) 100% no-repeat,\n  conic-gradient(\n    from {90deg - angle/2} at left,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) left/{size} {size*2*tan(angle/2)} repeat-y;</code></pre>\n\n\n\n<p>…and the right:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(red 0 0) left/calc(100% - {size}) 100% no-repeat,\n  conic-gradient(\n    from {-90deg - angle/2} at right,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) right/{size} {size*2*tan(angle/2)} repeat-y;</code></pre>\n\n\n\n<p>Let’s make the borders for when they’re applied to two sides at once. We can actually reuse the same code. To get both the top and bottom borders, we simply combine the code of both the top and bottom border.</p>\n\n\n\n<p>We use the <code>conic-gradient()</code> of the top side,  the <code>conic-gradient()</code> of the bottom side plus a <code>linear-gradient()</code> to cover the middle area. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(#000 0 0) center/100% calc(100% - {2*size}) no-repeat,\n  conic-gradient(\n    from {-angle/2} at bottom,\n    #0000, #000 1deg {angle - 1},\n    #0000 {angle}\n  ) bottom/{size*2*tan(angle/2)} {size} repeat-x;\n  conic-gradient(\n    from {180deg - angle/2} at top, \n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) top/{size*2*tan(angle/2)} {size} repeat-x;</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWaYOOM\" src=\"//codepen.io/anon/embed/NWaYOOM?height=450&amp;theme-id=1&amp;slug-hash=NWaYOOM&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWaYOOM\" title=\"CodePen Embed NWaYOOM\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The same goes when applying borders to the left and right sides together:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(#000 0 0) center/calc(100% - {2*size}) 100% no-repeat,\n  conic-gradient(\n    from {90deg - angle/2} at left,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) left/{size} {size*2*tan(angle/2)} repeat-y,\n  conic-gradient(\n    from {-90deg - angle/2} at right,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) right/{size} {size*2*tan(angle/2)} repeat-y;</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWEVPxx\" src=\"//codepen.io/anon/embed/MWEVPxx?height=400&amp;theme-id=1&amp;slug-hash=MWEVPxx&amp;default-tab=result\" height=\"400\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWEVPxx\" title=\"CodePen Embed MWEVPxx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>So, if we want to apply borders to all of the sides at once, we add all the gradients together, right?</p></blockquote>\n\n\n\n<p>Exactly! We have four conic gradients (one on each side) and one <code>linear-gradient()</code> in the middle. We set a fixed angle equal to <code>90deg</code> because it the only one that results in nicer corners without weird overlapping. Note that I’m also using <code>space</code> instead of <code>repeat-x</code> or <code>repeat-y</code> to avoid bad result on corners like this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYzavXq\" src=\"//codepen.io/anon/embed/LYzavXq?height=500&amp;theme-id=1&amp;slug-hash=LYzavXq&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYzavXq\" title=\"CodePen Embed LYzavXq\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"background-space-mp4\" width='500' height='267' src='https://videopress.com/embed/VYDliPCk?cover=1&amp;controls=0&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div><figcaption>Resizing a container with four sides configuration</figcaption></figure>\n\n\n<h3 id=\"rounded-css-borders\">Rounded CSS borders</h3>\n\n\n<p>Now let’s tackle rounded borders!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Oh no! another long explanation with a lot of calculation?!</p></blockquote>\n\n\n\n<p>Not at all! There is nothing to explain here. We take everything from the zig-zag example and update the <code>conic-gradient()</code> with a <code>radial-gradient()</code>. It’s even easier because we don’t have any angles to deal with — only the size variable.</p>\n\n\n\n<p>Here is an illustration for one side to see how little we need to do to switch from the zig-zag border to the rounded border:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_BawxaKV\" src=\"//codepen.io/anon/embed/BawxaKV?height=600&amp;theme-id=1&amp;slug-hash=BawxaKV&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed BawxaKV\" title=\"CodePen Embed BawxaKV\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Again, all I did there was replace the <code>conic-gradient()</code> with this (using placeholders for size):</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">background: \n  radial-gradient(circle farthest-side, #0000 98%, #000) \n  50% calc(100% + {size})/{1.85*size} {2*size} repeat-x</code></pre>\n\n\n\n<p>And this for the second one:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">background:\n  radial-gradient(circle farthest-side, #000 98%, #0000) \n  bottom/{1.85*size} {2*size} repeat-x</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What is the logic behind the magic numbers 1.85 and 98%?</p></blockquote>\n\n\n\n<p>Logically, we should use <code>100%</code> instead of <code>98%</code> to have a circle that touches the edges of the background area; but again, it’s the anti-aliasing issue and those jagged edges. We use a slightly smaller value to prevent weird overlapping.</p>\n\n\n\n<p>The <code>1.85</code> value is more of a personal preference than anything. I initially used <code>2</code> which is the logical value to get a perfect circle, but the result doesn&#8217;t look quite as nice, so the smaller value creates a more seamless overlap between the circles.</p>\n\n\n\n<p>Here’s the difference:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNGvNzO\" src=\"//codepen.io/anon/embed/rNGvNzO?height=600&amp;theme-id=1&amp;slug-hash=rNGvNzO&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNGvNzO\" title=\"CodePen Embed rNGvNzO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now we need to replicate this for the rest of the sides, just as we did with the zig-zag CSS border. </p>\n\n\n\n<p>There is a small difference, however, when applying all four sides at once.  You will notice that for one of the rounded borders, I used only one <code>radial-gradient()</code> instead of four. That makes sense since we can repeat a circular shape over all the sides using one gradient like illustrated below:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ZEXoEVW\" src=\"//codepen.io/anon/embed/ZEXoEVW?height=525&amp;theme-id=1&amp;slug-hash=ZEXoEVW&amp;default-tab=result\" height=\"525\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ZEXoEVW\" title=\"CodePen Embed ZEXoEVW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here’s the final CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(#000 0 0) center/calc(100% - {1.85*size}) calc(100% - {1.85*size}) no-repeat,\n  radial-gradient(farthest-side,#000 98%,#0000) 0 0/{2*size} {2*size} round;</code></pre>\n\n\n\n<p class=\"is-style-explanation\">Note how I’m using the <code>round</code> value instead of <code>repeat</code>. That’s to make sure we don&#8217;t cut off any of the circles. And, again, that <code>1.85</code> value is a personal preference value.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"all-sides-rounded-mp4\" width='500' height='267' src='https://videopress.com/embed/fRRg3xQp?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>For the other type of rounded border, we still have to use four radial gradients, but I had to introduce the CSS <a href=\"https://css-tricks.com/almanac/properties/c/clip-path/\"><code>clip-path</code></a> property to correct an overlapping issue at the corners. You can see the difference between with and without <code>clip-path</code> in the following demo:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoJewpM\" src=\"//codepen.io/anon/embed/PoJewpM?height=300&amp;theme-id=1&amp;slug-hash=PoJewpM&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoJewpM\" title=\"CodePen Embed PoJewpM\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>It’s an eight-point path to cut the corners:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: polygon(\n   {2*size} 0,calc(100% - {2*size}) 0,\n   100% {2*size},100% calc(100% - {2*size}),\n   calc(100% - {2*size}) 100%,{2*size} 100%,\n   0 calc(100% - {2*size}),0 {2*size}\n);</code></pre>\n\n\n<h3 id=\"wavy-css-borders\">Wavy CSS borders</h3>\n\n\n<p>Both the zig-zag and rounded CSS borders needed one gradient to get the shapes we wanted. What about a wavy sort of border? That take two gradients. Below is an illustration to understand how we create one wave with two radial gradients.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"717\" height=\"396\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641213151962_image.png?resize=717%2C396&#038;ssl=1\" alt=\"Showing three diagrams of CSS borders, each with a piece of the border and an accompanying snippet of CSS to achieve the effect.It shows how one part cuts a circular white shape out of a red rectangle. The second part showing how to create a red circle shape. The third part shows two radial gradients used to position the two circles so they combine to create the wave shape.\" class=\"wp-image-362031\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641213151962_image.png?w=717&amp;ssl=1 717w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641213151962_image.png?resize=300%2C166&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We repeat that shape at the bottom plus a linear gradient at the top and we get the wavy border at the bottom side. </p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNYNdqv\" src=\"//codepen.io/anon/embed/rNYNdqv?height=500&amp;theme-id=1&amp;slug-hash=rNYNdqv&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNYNdqv\" title=\"CodePen Embed rNYNdqv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask: \n  linear-gradient(#000 0 0) top/100% calc(100% - {2*size}) no-repeat,\n  radial-gradient(circle {size} at 75% 100%,#0000 98%,#000) 50% calc(100% - {size})/{4*size} {size} repeat-x,\n  radial-gradient(circle closest-side at 25% 50%,#000 99%,#0000 101%) bottom/{4*size} {2*size} repeat-x;</code></pre>\n\n\n\n<p>We do the same process for the other sides as we did with the zig-zag and rounded CSS borders. All we need is to update a few variables to have a different wave for each side.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"870\" height=\"467\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641215714172_image.png?resize=870%2C467&#038;ssl=1\" alt=\"\" class=\"wp-image-362034\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641215714172_image.png?w=870&amp;ssl=1 870w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641215714172_image.png?resize=300%2C161&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641215714172_image.png?resize=768%2C412&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Showing part of the CSS for each side.&nbsp;You can find the full code&nbsp;over at&nbsp;<a target=\"_blank\" href=\"https://css-generators.com/custom-borders/\" rel=\"noreferrer noopener\">the generator</a>.</figcaption></figure>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What about applying a wavy CSS border on all four sides? Will we have 9 gradients in total??”</p></blockquote>\n\n\n\n<p>Nope, and that’s because there is no demo where a wavy border is applied to all four sides. I was unable to find a combination of gradients that gives a good result on the corners. Maybe someone reading this knows a good approach? &#x1f609;</p>\n\n\n<h3 id=\"thats-borderline-great-stuff\">That’s <em>border</em>line great stuff!</h3>\n\n\n<p>So, you know the ins and outs of <a href=\"https://css-generators.com/custom-borders/\" target=\"_blank\" rel=\"noreferrer noopener\">my cool little online CSS border generator</a>! Sure, you can use the code it spits out and do just fine — but now you have the secret sauce recipe that makes it work.</p>\n\n\n\n<p>Specifically, we saw how gradients can be used to mask portions of an element. Then we went to work on <em>multiple</em> gradients to make certain shapes from those gradient CSS masks. And the result is a pattern that can be used along the edges of an element, creating the appearance of fancy borders that you might otherwise result to <code>background-image</code> for. Only this way, all it takes is swapping out some values to change the appearance rather than replace an entire raster image file or something.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-borders-using-masks/\">Fancy CSS Borders Using Masks</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Have you ever tried to make CSS borders in a repeating zig-zag pattern? Like where a colored section of a website ends and another differently colored section begins — not with a straight line, but angled zig zags, rounded humps, or waves. There are a number of ways you could do this sort of CSS border, dating all the way back to using a background-image. But we can get more modern and programmatic with it. In this article, we’ll look at some modern CSS mask techniques to achieve the look.\n\n\n\n\n\n\n\nBefore we dig into the technical parts, though, let’s take a look at what we are building. I have made a CSS border generator where you can easily generate any kind of border within a few seconds and get the CSS code.\n\n\n\n\n\n\n\n\n\nDid you see that? With the CSS mask property and a few CSS gradients, we get a responsive and cool-looking border — all with CSS by itself. Not only this, but such effect can be applied to any element where we can have any kind of coloration (e.g. image, gradient, etc). We get all this without extra elements, pseudo elements, or magic numbers coming from nowhere!\n\n\n\nOh great! All I have to do is to copy/paste code and it’s done!\n\n\n\nTrue, but it’s good to understand the logic to be able to manually adjust the code if you need to.\n\n\nMasking things\n\n\nSince all our effects rely on the CSS mask property, let’s take a quick refresh on how it works. Straight from the spec:\n\n\n\nThe effect of applying a mask to a graphical object is as if the graphical object will be painted onto the background through a mask, thus completely or partially masking out parts of the graphical object.\n\n\n\nIf we check the formal syntax of the mask property we can see it accepts an <image> as a value, meaning either a URL of an image or a color gradient. Gradients are what we’ll be using here. Let’s start with basic examples:\n\n\n\nCodePen Embed Fallback\n\n\n\nIn the first example of this demo, a gradient is used to make it appear as though the image is fading away. The second example, meanwhile, also uses a gradient, but rather than a soft transition between colors, a hard color stop is used to hide (or mask) half of the image. That second example illustrates the technique we will be using to create our fancy borders.\n\n\n\nOh, and the CSS mask property can take multiple gradients as long as they are comma-separated. That means we have even more control to mask additional parts of the image.\n\n\n\nCodePen Embed Fallback\n\n\n\nThat example showing multiple masking gradients may look a bit tricky at first glance, but what’s happening is the same as applying the multiple gradients on the background property. But instead of using a color that blends in with the page background, we use a “transparent” black value (#0000) for the hidden parts of the image and full black (#000) for the visible parts.\n\n\n\nThat’s it! Now we can tackle our fancy borders.\n\n\nZig-Zag CSS borders\n\n\nAs we saw in the video at the start of this article, the generator can apply borders on one side, two sides, or all sides. Let’s start with the bottom side using a step-by-step illustration:\n\n\n\nCodePen Embed Fallback\n\n\n\nWe start by adding the first gradient layer with a solid color (red) at the top. A height that’s equal to calc(100% - 40px) is used to leave 40px of empty space at the bottom.We add a second gradient placed at the bottom that takes the remaining height of the container. There’s a little bit of geometry happening to make this work.\n\n\n\n\n\n\n\nNext, we repeat the last gradient horizontally (replacing no-repeat with repeat-x). We can already see the zig-zag shape!Gradients are known to have anti-aliasing issues creating jagged edges (especially on Chrome). To avoid this, we add a slight transition between the colors, changing blue 90deg, green 0 to green, blue 1deg 89deg, green 90deg.Then we update the colors to have a uniform shapeLast, we use everything inside the mask property!\n\n\n\nWe can extract two variables from those steps to define our shape: size (40px) and angle (90deg). Here’s how we can express that using placeholders for those variables. I will be using JavaScript to replace those variables with their final values.\n\n\n\nmask:\n  linear-gradient(red 0 0) top/100% calc(100% - {size}) no-repeat,\n  conic-gradient(\n    from {-angle/2} at bottom,\n    #0000, #000 1deg {angle - 1} ,#0000 {angle}\n  ) bottom/{size*2*tan(angle/2)} {size} repeat-x;\n\n\n\nWe can use CSS custom properties for the size and the angle, but trigonometric functions are unsupported features at this moment. In the future, we’ll be able to do something like this:\n\n\n\n--size: 40px;\n--angle: 90deg;\nmask:\n  linear-gradient(red 0 0) top/100% calc(100% - var(--size)) no-repeat,\n  conic-gradient(\n    from calc(var(--angle)/-2) at bottom,\n    #0000, #000 1deg calc(var(--angle) - 1deg), #0000 var(--angle)\n  ) bottom/calc(var(--size)*2*tan(var(--angle)/2)) var(--size) repeat-x;\n\n\n\nSimilar to the bottom border, the top one will have almost the same code with a few adjustments:\n\n\n\nmask:\n  linear-gradient(red 0 0) bottom/100% calc(100% - {size}) no-repeat,\n  conic-gradient(\n    from {180deg - angle/2} at top,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) top/{size*2*tan(angle/2)} {size} repeat-x;\n\n\n\nWe changed bottom with top and top with bottom, then updated the rotation of the gradient to 180deg - angle/2 instead of -angle/2. As simple as that!\n\n\n\nThat’s the pattern we can use for the rest of the sides, like the left:\n\n\n\nmask:\n  linear-gradient(red 0 0) right/calc(100% - {size}) 100% no-repeat,\n  conic-gradient(\n    from {90deg - angle/2} at left,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) left/{size} {size*2*tan(angle/2)} repeat-y;\n\n\n\n…and the right:\n\n\n\nmask:\n  linear-gradient(red 0 0) left/calc(100% - {size}) 100% no-repeat,\n  conic-gradient(\n    from {-90deg - angle/2} at right,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) right/{size} {size*2*tan(angle/2)} repeat-y;\n\n\n\nLet’s make the borders for when they’re applied to two sides at once. We can actually reuse the same code. To get both the top and bottom borders, we simply combine the code of both the top and bottom border.\n\n\n\nWe use the conic-gradient() of the top side,  the conic-gradient() of the bottom side plus a linear-gradient() to cover the middle area. \n\n\n\nmask:\n  linear-gradient(#000 0 0) center/100% calc(100% - {2*size}) no-repeat,\n  conic-gradient(\n    from {-angle/2} at bottom,\n    #0000, #000 1deg {angle - 1},\n    #0000 {angle}\n  ) bottom/{size*2*tan(angle/2)} {size} repeat-x;\n  conic-gradient(\n    from {180deg - angle/2} at top, \n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) top/{size*2*tan(angle/2)} {size} repeat-x;\n\n\n\nCodePen Embed Fallback\n\n\n\nThe same goes when applying borders to the left and right sides together:\n\n\n\nmask:\n  linear-gradient(#000 0 0) center/calc(100% - {2*size}) 100% no-repeat,\n  conic-gradient(\n    from {90deg - angle/2} at left,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) left/{size} {size*2*tan(angle/2)} repeat-y,\n  conic-gradient(\n    from {-90deg - angle/2} at right,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) right/{size} {size*2*tan(angle/2)} repeat-y;\n\n\n\nCodePen Embed Fallback\n\n\n\nSo, if we want to apply borders to all of the sides at once, we add all the gradients together, right?\n\n\n\nExactly! We have four conic gradients (one on each side) and one linear-gradient() in the middle. We set a fixed angle equal to 90deg because it the only one that results in nicer corners without weird overlapping. Note that I’m also using space instead of repeat-x or repeat-y to avoid bad result on corners like this:\n\n\n\nCodePen Embed Fallback\n\n\n\n\n\nResizing a container with four sides configuration\n\n\nRounded CSS borders\n\n\nNow let’s tackle rounded borders!\n\n\n\nOh no! another long explanation with a lot of calculation?!\n\n\n\nNot at all! There is nothing to explain here. We take everything from the zig-zag example and update the conic-gradient() with a radial-gradient(). It’s even easier because we don’t have any angles to deal with — only the size variable.\n\n\n\nHere is an illustration for one side to see how little we need to do to switch from the zig-zag border to the rounded border:\n\n\n\nCodePen Embed Fallback\n\n\n\nAgain, all I did there was replace the conic-gradient() with this (using placeholders for size):\n\n\n\nbackground: \n  radial-gradient(circle farthest-side, #0000 98%, #000) \n  50% calc(100% + {size})/{1.85*size} {2*size} repeat-x\n\n\n\nAnd this for the second one:\n\n\n\nbackground:\n  radial-gradient(circle farthest-side, #000 98%, #0000) \n  bottom/{1.85*size} {2*size} repeat-x\n\n\n\nWhat is the logic behind the magic numbers 1.85 and 98%?\n\n\n\nLogically, we should use 100% instead of 98% to have a circle that touches the edges of the background area; but again, it’s the anti-aliasing issue and those jagged edges. We use a slightly smaller value to prevent weird overlapping.\n\n\n\nThe 1.85 value is more of a personal preference than anything. I initially used 2 which is the logical value to get a perfect circle, but the result doesn’t look quite as nice, so the smaller value creates a more seamless overlap between the circles.\n\n\n\nHere’s the difference:\n\n\n\nCodePen Embed Fallback\n\n\n\nNow we need to replicate this for the rest of the sides, just as we did with the zig-zag CSS border. \n\n\n\nThere is a small difference, however, when applying all four sides at once.  You will notice that for one of the rounded borders, I used only one radial-gradient() instead of four. That makes sense since we can repeat a circular shape over all the sides using one gradient like illustrated below:\n\n\n\nCodePen Embed Fallback\n\n\n\nHere’s the final CSS:\n\n\n\nmask:\n  linear-gradient(#000 0 0) center/calc(100% - {1.85*size}) calc(100% - {1.85*size}) no-repeat,\n  radial-gradient(farthest-side,#000 98%,#0000) 0 0/{2*size} {2*size} round;\n\n\n\nNote how I’m using the round value instead of repeat. That’s to make sure we don’t cut off any of the circles. And, again, that 1.85 value is a personal preference value.\n\n\n\n\n\n\n\n\n\nFor the other type of rounded border, we still have to use four radial gradients, but I had to introduce the CSS clip-path property to correct an overlapping issue at the corners. You can see the difference between with and without clip-path in the following demo:\n\n\n\nCodePen Embed Fallback\n\n\n\nIt’s an eight-point path to cut the corners:\n\n\n\nclip-path: polygon(\n   {2*size} 0,calc(100% - {2*size}) 0,\n   100% {2*size},100% calc(100% - {2*size}),\n   calc(100% - {2*size}) 100%,{2*size} 100%,\n   0 calc(100% - {2*size}),0 {2*size}\n);\n\n\nWavy CSS borders\n\n\nBoth the zig-zag and rounded CSS borders needed one gradient to get the shapes we wanted. What about a wavy sort of border? That take two gradients. Below is an illustration to understand how we create one wave with two radial gradients.\n\n\n\n\n\n\n\nWe repeat that shape at the bottom plus a linear gradient at the top and we get the wavy border at the bottom side. \n\n\n\nCodePen Embed Fallback\n\n\n\nmask: \n  linear-gradient(#000 0 0) top/100% calc(100% - {2*size}) no-repeat,\n  radial-gradient(circle {size} at 75% 100%,#0000 98%,#000) 50% calc(100% - {size})/{4*size} {size} repeat-x,\n  radial-gradient(circle closest-side at 25% 50%,#000 99%,#0000 101%) bottom/{4*size} {2*size} repeat-x;\n\n\n\nWe do the same process for the other sides as we did with the zig-zag and rounded CSS borders. All we need is to update a few variables to have a different wave for each side.\n\n\n\nShowing part of the CSS for each side. You can find the full code over at the generator.\n\n\n\nWhat about applying a wavy CSS border on all four sides? Will we have 9 gradients in total??”\n\n\n\nNope, and that’s because there is no demo where a wavy border is applied to all four sides. I was unable to find a combination of gradients that gives a good result on the corners. Maybe someone reading this knows a good approach? 😉\n\n\nThat’s borderline great stuff!\n\n\nSo, you know the ins and outs of my cool little online CSS border generator! Sure, you can use the code it spits out and do just fine — but now you have the secret sauce recipe that makes it work.\n\n\n\nSpecifically, we saw how gradients can be used to mask portions of an element. Then we went to work on multiple gradients to make certain shapes from those gradient CSS masks. And the result is a pattern that can be used along the edges of an element, creating the appearance of fancy borders that you might otherwise result to background-image for. Only this way, all it takes is swapping out some values to change the appearance rather than replace an entire raster image file or something.\n\nFancy CSS Borders Using Masks originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-26T14:26:49.000Z",
      "date_modified": "2022-01-26T14:26:49.000Z",
      "_plugin": {
        "pageFilename": "de13b1aa5b89e8e64affe9380c204e7fb63e33dd9bf1fe85767d7f120bf8eacf.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362044",
      "url": "https://css-tricks.com/component-spacing-design-system/",
      "title": "How Do You Handle Component Spacing in a Design System?",
      "summary": "Say you’ve got a <Card /> component. It’s highly likely it shouldn’t be butted right up against any other components with no spacing around it. That’s true for… pretty much every component. So, how do you handle component spacing in …\n\nHow Do You Handle Component Spacing in a Design System? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Say you&#8217;ve got a <code>&lt;Card /&gt;</code> component. It&#8217;s highly likely it shouldn&#8217;t be butted right up against any other components with no spacing around it. That&#8217;s true for&#8230; pretty much every component. So, how do you handle component spacing in a design system?</p>\n\n\n\n<p>Do you apply spacing using margin directly on the <code>&lt;Card /&gt;</code>? Perhaps <code>margin-block-end: 1rem; margin-inline-end: 1rem;</code> so it pushes away from the two sides where more content natural flows? That&#8217;s a little presumptuous. Perhaps the cards are children inside a <code>&lt;Grid /&gt;</code> component and the grid applies a <code>gap: 1rem</code>.  That&#8217;s awkward, as now the <code>&lt;Card /&gt;</code> component spacing is going to conflict with the <code>&lt;Grid /&gt;</code> component spacing, which is very likely not what you want, not to mention the amount of space is hard coded.</p>\n\n\n\n<span id=\"more-362044\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1709\" height=\"1048\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=1709%2C1048&#038;ssl=1\" alt=\"Example of a component spacing where a card component is to the left of an accordion component and above an article, with 50 pixels of spacing between all three elements. Lorem i-sum text throughout in a mono font. The card has a Calvin and Hobbes comic image.\" class=\"wp-image-362229\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?w=1709&amp;ssl=1 1709w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=300%2C184&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=1024%2C628&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=768%2C471&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=1536%2C942&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=1000%2C613&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Adding space to the inline start and block end of a card component.</figcaption></figure>\n\n\n<h2 id=\"different-perspectives-on-component-spacing\">Different perspectives on component spacing</h2>\n\n\n<p>Eric Bailey <a href=\"https://ericwbailey.design/writing/where-do-you-put-spacing-on-design-system-components/\" rel=\"noopener\">got into this recently</a> and looked at some options:</p>\n\n\n\n<ul><li>You could bake spacing into every component and try to be as clever as you can about it. (But that&#8217;s pretty limiting.)</li><li>You could pass in component spacing, like <code>&lt;Card space=\"xxl\" /&gt;</code>. (That can be a good approach, likely needs more than one prop, maybe even one for each direction, which is quite verbose.)</li><li>You could use no component spacing and create something like a <code>&lt;Spacer /&gt;</code> or <code>&lt;Layout /&gt;</code> component specifically for spacing between components. (It breaks up the job of components nicely, but can also be verbose and add unnecessary DOM weight.)</li></ul>\n\n\n\n<p>This conversation has a wide spectrum of viewpoints, some as extreme as Max Stoiber saying <a href=\"https://mxstbr.com/thoughts/margin/\" rel=\"noopener\">just never use <code>margin</code> ever at all</a>. That&#8217;s a little dogmatic for me, but I like that it&#8217;s trying to rethink things. I do like the idea of taking the job of spacing and layout away from components themselves — like, for example, those content components should completely not care where they are used and let layout happen a level up from them. </p>\n\n\n\n<p>Adam Argyle <a href=\"https://dev.to/argyleink/5-css-predictions-for-2020-pl3\" rel=\"noopener\">predicted a few years back</a> that the use of <code>margin</code> in CSS would decline as the use of <code>gap</code> rises. He&#8217;s probably going to end up right about this, especially now that <a href=\"https://css-tricks.com/gaps-gasp/\">flexbox has <code>gap</code></a> and that developers have an appetite these days to use CSS Flexbox and Grid on nearly everything at both a macro and micro level.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/component-spacing-design-system/\">How Do You Handle Component Spacing in a Design System?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Say you’ve got a <Card /> component. It’s highly likely it shouldn’t be butted right up against any other components with no spacing around it. That’s true for… pretty much every component. So, how do you handle component spacing in a design system?\n\n\n\nDo you apply spacing using margin directly on the <Card />? Perhaps margin-block-end: 1rem; margin-inline-end: 1rem; so it pushes away from the two sides where more content natural flows? That’s a little presumptuous. Perhaps the cards are children inside a <Grid /> component and the grid applies a gap: 1rem.  That’s awkward, as now the <Card /> component spacing is going to conflict with the <Grid /> component spacing, which is very likely not what you want, not to mention the amount of space is hard coded.\n\n\n\n\n\n\n\nAdding space to the inline start and block end of a card component.\n\n\nDifferent perspectives on component spacing\n\n\nEric Bailey got into this recently and looked at some options:\n\n\n\nYou could bake spacing into every component and try to be as clever as you can about it. (But that’s pretty limiting.)You could pass in component spacing, like <Card space=\"xxl\" />. (That can be a good approach, likely needs more than one prop, maybe even one for each direction, which is quite verbose.)You could use no component spacing and create something like a <Spacer /> or <Layout /> component specifically for spacing between components. (It breaks up the job of components nicely, but can also be verbose and add unnecessary DOM weight.)\n\n\n\nThis conversation has a wide spectrum of viewpoints, some as extreme as Max Stoiber saying just never use margin ever at all. That’s a little dogmatic for me, but I like that it’s trying to rethink things. I do like the idea of taking the job of spacing and layout away from components themselves — like, for example, those content components should completely not care where they are used and let layout happen a level up from them. \n\n\n\nAdam Argyle predicted a few years back that the use of margin in CSS would decline as the use of gap rises. He’s probably going to end up right about this, especially now that flexbox has gap and that developers have an appetite these days to use CSS Flexbox and Grid on nearly everything at both a macro and micro level.\n\nHow Do You Handle Component Spacing in a Design System? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-25T23:10:20.000Z",
      "date_modified": "2022-01-25T23:10:20.000Z",
      "_plugin": {
        "pageFilename": "db32fbf0f0c3a182d313c09db828695401ead6d2bc6b2c8a960f44bed9b0256f.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360550",
      "url": "https://css-tricks.com/scroll-triggered-animation-vanilla-javascript/",
      "title": "How to Make a Scroll-Triggered Animation With Basic JavaScript",
      "summary": "A little bit of animation on a site can add some flair, impress users, and get their attention. You could have them run, no matter where they are on the page, immediately when the page loads. But what if your …\n\nHow to Make a Scroll-Triggered Animation With Basic JavaScript originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>A little bit of animation on a site can add some flair, impress users, and get their attention. You could have them run, no matter where they are on the page, immediately when the page loads. But what if your website is fairly long so it took some time for the user to scroll down to that element? They might miss it.</p>\n\n\n\n<p>You could have them run all the time, but perhaps the animation is best designed so that you for sure see the beginning of it. The trick is to start the animation when the user scrolls down to that element — scroll-triggered animation, if you will.</p>\n\n\n\n<span id=\"more-360550\"></span>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwMvbbg\" src=\"//codepen.io/anon/embed/VwMvbbg?height=450&amp;theme-id=1&amp;slug-hash=VwMvbbg&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwMvbbg\" title=\"CodePen Embed VwMvbbg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>To tackle this we use <strong>scroll triggers</strong>. When the user scrolls down to any particular element, we can use that event to do something. It could be anything, even the beginning of an animation. It could even be scroll-triggered lazy loading on images or lazy loading a whole comments section. In that way, we won’t force users to download elements that aren’t in the viewport on initial page load. Many users may never scroll down at all, so we really save them (and us) bandwidth and load time.</p>\n\n\n\n<p>Scroll triggers are very useful. There are many libraries out there that you can use to implement them, like <a href=\"https://greensock.com/scrolltrigger/\" rel=\"noopener\">Greensock’s popular ScrollTrigger plugin</a>. But you don’t <em>have</em> to use a third-party library, particularly for fairly simple ideas. In fact, you can implement it yourself using only a small handful of vanilla JavaScript. That is what we are going to do in this article.</p>\n\n\n<h3 id=\"heres-how-well-make-our-scrolltriggered-event\">Here&#8217;s how we&#8217;ll make our scroll-triggered event</h3>\n\n\n<ul><li>Create a function called <code>scrollTrigger</code> we can apply to certain elements</li><li>Apply an <code>.active</code> class on an element when it enters the viewport</li><li>Animate that .<code>active</code> class with CSS</li></ul>\n\n\n\n<p>There are times where adding a <code>.active</code> class is not enough. For example, we might want to execute a custom function instead. That means we should be able to pass a custom function that executes when the element is visible. Like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">scrollTrigger('.loader', {\n  cb: function(el) {\n    el.innerText = 'Loading ...'\n    loadContent()\n  }\n})</code></pre>\n\n\n\n<p>We’ll also attempt to handle scroll triggers for older non-supporting browsers.</p>\n\n\n<h3 id=\"but-first-the-intersectionobserver-api\">But first, the <code>IntersectionObserver</code> API</h3>\n\n\n<p>The main JavaScript feature we’re going to use is the <a href=\"https://css-tricks.com/an-explanation-of-how-the-intersection-observer-watches/\">Intersection Observer</a>. This API provides a way to <em>asynchronously</em> observe changes in the intersection of a target element — and it does so more in a more performant way than watching for <code>scroll</code> events. We will use <code>IntersectionObserver</code> to monitor when scrolling reaches the point where certain elements are visible on the page.</p>\n\n\n<h3 id=\"lets-start-building-the-scroll-trigger\">Let’s start building the scroll trigger</h3>\n\n\n<p>We want to create a function called <code>scrollTrigger</code> and this function should take a selector as its argument.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function scrollTrigger(selector) {\n  // Multiple element can have same class/selector,\n  // so we are using querySelectorAll\n  let els = document.querySelectorAll(selector)\n  // The above `querySelectorAll` returns a nodeList,\n  // so we are converting it to an array\n  els = Array.from(els)\n  // Now we are iterating over the elements array\n  els.forEach(el => {\n    // `addObserver function` will attach the IntersectionObserver to the element\n    // We will create this function next\n    addObserver(el)\n  })\n}\n// Example usage\nscrollTrigger('.scroll-reveal')</code></pre>\n\n\n\n<p>Now let’s create the <code>addObserver</code> function that want to attach to the element using <code>IntersectionObserver</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function scrollTrigger(selector){\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el)\n  })\n}\nfunction addObserver(el){\n    // We are creating a new IntersectionObserver instance\n    let observer = new IntersectionObserver((entries, observer) => { // This takes a callback function that receives two arguments: the elements list and the observer instance.\n      entries.forEach(entry => {\n        // `entry.isIntersecting` will be true if the element is visible\n      if(entry.isIntersecting) {\n        entry.target.classList.add('active')\n        // We are removing the observer from the element after adding the active class\n        observer.unobserve(entry.target)\n      }\n    })\n  })\n  // Adding the observer to the element\n  observer.observe(el)\n}\n// Example usage\nscrollTrigger('.scroll-reveal')</code></pre>\n\n\n\n<p>If we do this and scroll to an element with a <code>.scroll-reveal</code> class, an <code>.active</code> class is added to that element. But notice that the <code>active</code> class is added as soon as any small part of the element is visible.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/scrolltrigger.gif?resize=1920%2C1080&#038;ssl=1\" alt=\"Animated screenshot of the scroll-triggered animation with the code for it to the left and DevTools open on the right.\" class=\"wp-image-360567\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>But that might be overkill. Instead, we might want the <code>.active</code> class to be added once a <em>bigger</em> part of the element is visible. Well, thankfully, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#creating_an_intersection_observer\" rel=\"noopener\"><code>IntersectionObserver</code> accepts some options for that</a> as its second argument. Let&#8217;s apply those to our <code>scrollTrigger</code> function:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"27\"><code markup=\"tt\">// Receiving options as an object\n// If the user doesn't pass any options, the default will be `{}`\nfunction scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    // Passing the options object to the addObserver function\n    addObserver(el, options)\n  })\n}\n// Receiving options passed from the scrollTrigger function\nfunction addObserver(el, options) {\n  let observer = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      if(entry.isIntersecting) {\n        entry.target.classList.add('active')\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options) // Passing the options object to the observer\n  observer.observe(el)\n}\n// Example usage 1:\n// scrollTrigger('.scroll-reveal')\n// Example usage 2:\nscrollTrigger('.scroll-reveal', {\n  rootMargin: '-200px'\n})</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_CD503958969E4F5622656FA7ED4FB1213AF5585B5A906D3210B0301CA7387C42_1639110569153_demo_2.gif\" alt=\"\"/></figure>\n\n\n\n<p>And just like that, our first two agenda items are fulfilled!</p>\n\n\n\n<p>Let’s move on to the third item — adding the ability to execute a callback function when we scroll to a targeted element. Specifically, let’s pass the callback function in our options object as <code>cb</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"12,13,14\"><code markup=\"tt\">function scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el, options)\n  })\n}\nfunction addObserver(el, options){\n  let observer = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      if(entry.isIntersecting){\n        if(options.cb) {\n          // If we've passed a callback function, we'll call it\n          options.cb(el)\n        } else{\n          // If we haven't, we'll just add the active class\n          entry.target.classList.add('active')\n        }\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options)\n  observer.observe(el)\n}\n// Example usage:\nscrollTrigger('.loader', {\n  rootMargin: '-200px',\n  cb: function(el){\n    el.innerText = 'Loading...'\n    // Done loading\n    setTimeout(() => {\n      el.innerText = 'Task Complete!'\n    }, 1000)\n  }\n})</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/kHk-F7QE.gif?resize=1920%2C1080&#038;ssl=1\" alt=\"An updated animated screenshot of the same scroll-triggered animation. As boxes enter the screen from the bottom, a they rotate. A &quot;loading&quot; message that changes to &quot;finished loading&quot; message is the last element to scroll into view. The code is open to the left of the animation.\" class=\"wp-image-360570\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>Great! There’s one last thing that we need to take care of: legacy browser support. Certain browsers might lack support for <code>IntersectionObserver</code>, so let’s handle that case in our <code>addObserver</code> function:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"10\"><code markup=\"tt\">function scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el, options)\n  })\n}\nfunction addObserver(el, options) {\n  // Check if `IntersectionObserver` is supported\n  if(!('IntersectionObserver' in window)) {\n    // Simple fallback\n    // The animation/callback will be called immediately so\n    // the scroll animation doesn't happen on unsupported browsers\n    if(options.cb){\n      options.cb(el)\n    } else{\n      entry.target.classList.add('active')\n    }\n    // We don't need to execute the rest of the code\n    return\n  }\n  let observer = new IntersectionObserver((entries, observer) =>; {\n    entries.forEach(entry => {\n      if(entry.isIntersecting) {\n        if(options.cb) {\n          options.cb(el)\n        } else{\n          entry.target.classList.add('active')\n        }\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options)\n  observer.observe(el)\n}\n// Example usages:\nscrollTrigger('.intro-text')\nscrollTrigger('.scroll-reveal', {\n  rootMargin: '-200px',\n})\nscrollTrigger('.loader', {\n  rootMargin: '-200px',\n  cb: function(el){\n    el.innerText = 'Loading...'\n    setTimeout(() => {\n      el.innerText = 'Task Complete!'\n    }, 1000)\n  }\n})</code></pre>\n\n\n\n<p>Here’s that live demo again:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwMvbbg\" src=\"//codepen.io/anon/embed/VwMvbbg?height=450&amp;theme-id=1&amp;slug-hash=VwMvbbg&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwMvbbg\" title=\"CodePen Embed VwMvbbg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And that&#8217;s all for this little journey! I hope you enjoyed it and learned something new in the process.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/scroll-triggered-animation-vanilla-javascript/\">How to Make a Scroll-Triggered Animation With Basic JavaScript</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "A little bit of animation on a site can add some flair, impress users, and get their attention. You could have them run, no matter where they are on the page, immediately when the page loads. But what if your website is fairly long so it took some time for the user to scroll down to that element? They might miss it.\n\n\n\nYou could have them run all the time, but perhaps the animation is best designed so that you for sure see the beginning of it. The trick is to start the animation when the user scrolls down to that element — scroll-triggered animation, if you will.\n\n\n\n\n\n\n\nCodePen Embed Fallback\n\n\n\nTo tackle this we use scroll triggers. When the user scrolls down to any particular element, we can use that event to do something. It could be anything, even the beginning of an animation. It could even be scroll-triggered lazy loading on images or lazy loading a whole comments section. In that way, we won’t force users to download elements that aren’t in the viewport on initial page load. Many users may never scroll down at all, so we really save them (and us) bandwidth and load time.\n\n\n\nScroll triggers are very useful. There are many libraries out there that you can use to implement them, like Greensock’s popular ScrollTrigger plugin. But you don’t have to use a third-party library, particularly for fairly simple ideas. In fact, you can implement it yourself using only a small handful of vanilla JavaScript. That is what we are going to do in this article.\n\n\nHere’s how we’ll make our scroll-triggered event\n\n\nCreate a function called scrollTrigger we can apply to certain elementsApply an .active class on an element when it enters the viewportAnimate that .active class with CSS\n\n\n\nThere are times where adding a .active class is not enough. For example, we might want to execute a custom function instead. That means we should be able to pass a custom function that executes when the element is visible. Like this:\n\n\n\nscrollTrigger('.loader', {\n  cb: function(el) {\n    el.innerText = 'Loading ...'\n    loadContent()\n  }\n})\n\n\n\nWe’ll also attempt to handle scroll triggers for older non-supporting browsers.\n\n\nBut first, the IntersectionObserver API\n\n\nThe main JavaScript feature we’re going to use is the Intersection Observer. This API provides a way to asynchronously observe changes in the intersection of a target element — and it does so more in a more performant way than watching for scroll events. We will use IntersectionObserver to monitor when scrolling reaches the point where certain elements are visible on the page.\n\n\nLet’s start building the scroll trigger\n\n\nWe want to create a function called scrollTrigger and this function should take a selector as its argument.\n\n\n\nfunction scrollTrigger(selector) {\n  // Multiple element can have same class/selector,\n  // so we are using querySelectorAll\n  let els = document.querySelectorAll(selector)\n  // The above `querySelectorAll` returns a nodeList,\n  // so we are converting it to an array\n  els = Array.from(els)\n  // Now we are iterating over the elements array\n  els.forEach(el => {\n    // `addObserver function` will attach the IntersectionObserver to the element\n    // We will create this function next\n    addObserver(el)\n  })\n}\n// Example usage\nscrollTrigger('.scroll-reveal')\n\n\n\nNow let’s create the addObserver function that want to attach to the element using IntersectionObserver:\n\n\n\nfunction scrollTrigger(selector){\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el)\n  })\n}\nfunction addObserver(el){\n    // We are creating a new IntersectionObserver instance\n    let observer = new IntersectionObserver((entries, observer) => { // This takes a callback function that receives two arguments: the elements list and the observer instance.\n      entries.forEach(entry => {\n        // `entry.isIntersecting` will be true if the element is visible\n      if(entry.isIntersecting) {\n        entry.target.classList.add('active')\n        // We are removing the observer from the element after adding the active class\n        observer.unobserve(entry.target)\n      }\n    })\n  })\n  // Adding the observer to the element\n  observer.observe(el)\n}\n// Example usage\nscrollTrigger('.scroll-reveal')\n\n\n\nIf we do this and scroll to an element with a .scroll-reveal class, an .active class is added to that element. But notice that the active class is added as soon as any small part of the element is visible.\n\n\n\n\n\n\n\nBut that might be overkill. Instead, we might want the .active class to be added once a bigger part of the element is visible. Well, thankfully, IntersectionObserver accepts some options for that as its second argument. Let’s apply those to our scrollTrigger function:\n\n\n\n// Receiving options as an object\n// If the user doesn't pass any options, the default will be `{}`\nfunction scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    // Passing the options object to the addObserver function\n    addObserver(el, options)\n  })\n}\n// Receiving options passed from the scrollTrigger function\nfunction addObserver(el, options) {\n  let observer = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      if(entry.isIntersecting) {\n        entry.target.classList.add('active')\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options) // Passing the options object to the observer\n  observer.observe(el)\n}\n// Example usage 1:\n// scrollTrigger('.scroll-reveal')\n// Example usage 2:\nscrollTrigger('.scroll-reveal', {\n  rootMargin: '-200px'\n})\n\n\n\n\n\n\n\nAnd just like that, our first two agenda items are fulfilled!\n\n\n\nLet’s move on to the third item — adding the ability to execute a callback function when we scroll to a targeted element. Specifically, let’s pass the callback function in our options object as cb:\n\n\n\nfunction scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el, options)\n  })\n}\nfunction addObserver(el, options){\n  let observer = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      if(entry.isIntersecting){\n        if(options.cb) {\n          // If we've passed a callback function, we'll call it\n          options.cb(el)\n        } else{\n          // If we haven't, we'll just add the active class\n          entry.target.classList.add('active')\n        }\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options)\n  observer.observe(el)\n}\n// Example usage:\nscrollTrigger('.loader', {\n  rootMargin: '-200px',\n  cb: function(el){\n    el.innerText = 'Loading...'\n    // Done loading\n    setTimeout(() => {\n      el.innerText = 'Task Complete!'\n    }, 1000)\n  }\n})\n\n\n\n\n\n\n\nGreat! There’s one last thing that we need to take care of: legacy browser support. Certain browsers might lack support for IntersectionObserver, so let’s handle that case in our addObserver function:\n\n\n\nfunction scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el, options)\n  })\n}\nfunction addObserver(el, options) {\n  // Check if `IntersectionObserver` is supported\n  if(!('IntersectionObserver' in window)) {\n    // Simple fallback\n    // The animation/callback will be called immediately so\n    // the scroll animation doesn't happen on unsupported browsers\n    if(options.cb){\n      options.cb(el)\n    } else{\n      entry.target.classList.add('active')\n    }\n    // We don't need to execute the rest of the code\n    return\n  }\n  let observer = new IntersectionObserver((entries, observer) =>; {\n    entries.forEach(entry => {\n      if(entry.isIntersecting) {\n        if(options.cb) {\n          options.cb(el)\n        } else{\n          entry.target.classList.add('active')\n        }\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options)\n  observer.observe(el)\n}\n// Example usages:\nscrollTrigger('.intro-text')\nscrollTrigger('.scroll-reveal', {\n  rootMargin: '-200px',\n})\nscrollTrigger('.loader', {\n  rootMargin: '-200px',\n  cb: function(el){\n    el.innerText = 'Loading...'\n    setTimeout(() => {\n      el.innerText = 'Task Complete!'\n    }, 1000)\n  }\n})\n\n\n\nHere’s that live demo again:\n\n\n\nCodePen Embed Fallback\n\n\n\nAnd that’s all for this little journey! I hope you enjoyed it and learned something new in the process.\n\nHow to Make a Scroll-Triggered Animation With Basic JavaScript originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-25T14:14:11.000Z",
      "date_modified": "2022-01-25T14:14:11.000Z",
      "_plugin": {
        "pageFilename": "7e83d7f1552a958ced40e301926e846eca2c85f14e589a9c82606176f4bda9ee.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360811",
      "url": "https://css-tricks.com/why-dont-developers-take-accessibility-seriously/",
      "title": "Why Don’t Developers Take Accessibility Seriously?",
      "summary": "You know that joke, “Two front-end developers walk into a bar and find they have nothing in common”? It’s funny, yet frustrating, because it’s true.\nThis article will present three different perspectives on accessibility in web design and development. Three …\n\nWhy Don’t Developers Take Accessibility Seriously? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>You know that joke, “Two front-end developers walk into a bar and find they have nothing in common”? It’s funny, yet frustrating, because it’s true.</p>\n\n\n\n<p>This article will present three different perspectives on accessibility in web design and development. Three perspectives that could help us bridge the great divide between users and designers/developers. It might help us find the common ground to building a better web and a better future.</p>\n\n\n\n<span id=\"more-360811\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1200\" height=\"600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=1200%2C600&#038;ssl=1\" alt=\"The corner of a white and blue building in focus, with white on the left and blue on the right representing the divide between developers when it comes to accessibility practices.\" class=\"wp-image-360818\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Photo by&nbsp;<a href=\"https://unsplash.com/@alexandernaglestad?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Alexander Naglestad</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/collections/487461/divisions?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Unsplash</a></figcaption></figure>\n\n\n\n<h3 class=\"ticss-462d3495\">Act 1</h3>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>“I just don’t know how developers don’t think about accessibility.”</p></blockquote>\n\n\n\n<p>Someone once said that to me. Let’s stop and think about it for a minute. Maybe there’s a perspective to be had.</p>\n\n\n\n<p>Think about how <em>many things</em> you have to know as a developer to successfully build a website. In any given day, for any given job position in web development, <a href=\"https://css-tricks.com/front-end-developer-aware/\">there are <em>the other details</em> of web development that come up</a>. Meaning, it’s more than <em>“just”</em> knowing HTML, CSS, ARIA, and JavaScript. Developers will also learn other things over the course of their careers, based on what they need to do.</p>\n\n\n\n<p>This could be package management, workspaces, code generators, collaboration tools, asset loading, asset management, CDN optimizations, bundle optimizations, unit tests, integration tests, visual regression tests, browser integration tests, code reviews, linting, formatting, communication through examples, changelogs, documentation, semantic versioning, security, app deployment, package releases, rollbacks, incremental improvements, incremental testing, continuous deployments, merge management, user experience, user interaction design, typography scales, aspect ratios for responsive design, data management, and… well, the list could go on, but you get the idea.</p>\n\n\n\n<p>As a developer, I consider myself to be pretty gosh darn smart for knowing how to do most these things! Stop and consider this: if you think about how many people are in the world, and compare that to how many people in the world can build websites, it’s proportionally a very small percentage. That’s kind of… <em>cool</em>. Incredible, even. On top of that, think about the last time you shipped code and how good that felt. “I figured out a hard thing and made it work! Ahhhhh! I feel amazing!”</p>\n\n\n\n<p>That kind of emotional high is pretty great, isn’t it? It makes me smile just to think about it.</p>\n\n\n\n<p>Now, imagine that an accessibility subject-matter expert comes along and essentially tells you that not only are you <em>not</em> particularly smart, but you have been doing things <em>wrong</em> for a long time.</p>\n\n\n\n<p>Ouch. Suddenly you don’t feel very good. Wrong? <em>Me??</em> What??? Your adrenaline can even kick in and you start to feel defensive. Time to stick up for yourself… right? Time to dig those heels.</p>\n\n\n\n<p>The cognitive dissonance can even be really overwhelming. It feels bad to find out that not only are you not good at the thing you thought you were really good at doing, but you’ve also been saying, “Screw you, who cares about you <em>anyway</em>,” to a whole bunch of people who can’t use the websites you’ve helped build because you (accidentally or otherwise) ignored that they even existed, that you ignored users who needed something more than the cleverness you were delivering for all these years. Ow.</p>\n\n\n\n<p>All things considered, it is quite understandable to me that a developer would want to put their fingers in their ears and pretend that <em>none</em> of this has happened at <em>all</em>, that they are still very clever and awesome. That the <em>one</em> “expert” telling you that you did it <em>wrong</em> is just one person. And one person is easy to ignore.</p>\n\n\n\n<p>— <em>end scene.</em></p>\n\n\n\n<h3>Act 2</h3>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>“I feel like I don’t matter at all.”</p></blockquote>\n\n\n\n<p>This is a common refrain I hear from people who need assistive technology to use websites, but often find them unusable for <a href=\"https://noti.st/melsumner/Phhimm/dont-break-the-web#sPuy1Xd\" rel=\"noopener\">any number of reasons</a>. Maybe they can’t read the text because the website’s design has ignored color contrast. Maybe there are nested interactive elements, so they <em>can’t even log in</em> to do things like pay a utility bill or buy essential items on their own. Maybe their favorite singer has finally set up an online shop but the user with assistive technology cannot even navigate the site because, while it might look interactive from a sighted-user’s perspective, all the buttons are divs and are not interactive with a keyboard… at all.</p>\n\n\n\n<p>This frustration can boil over and spill out; the brunt of this frustration is often borne by the folks who are trying to deliver more inclusive products. The result is a negative feedback cycle; some tech folks opt out of listening because “it’s rude” (and completely missing the irony of that statement). Other tech folks struggle with the emotional weight that so often accompanies working in accessibility-focused design and development. </p>\n\n\n\n<p>The thing is, these users have been ignored for so long that it can feel like they are screaming into a void. <em>Isn’t anyone listening? Doesn’t anyone care?</em> It seems like the only way to even be acknowledged is to demand the treatment that the law affords them! Even then, they often feel ignored and forgotten. Are lawsuits the only recourse?</p>\n\n\n\n<p>It increasingly seems that being loud and militant is the only way to be heard, and even then it might be a long time before anything happens.</p>\n\n\n\n<p>— <em>end scene.</em></p>\n\n\n\n<h3>Act 3</h3>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>“I know it doesn’t pass color contrast, but I feel like it’s just so <strong>restrictive</strong> on my creativity as a designer. I don’t like the way this <strong>looks</strong>, at all.”</p></blockquote>\n\n\n\n<p>I’ve heard this a lot across the span of my career. To some, inclusive design is not the necessary guardrail to ensure that our websites can be used by all, but rather a dampener on their creative freedom.</p>\n\n\n\n<p>If you are a designer who thinks this way, please consider this: you’re not designing for yourself. This is not like physical art; while your visual design can be artistic, it’s still on the web. It’s still <em>for</em> the web. Web designers have a higher challenge—their artistic vision needs to be usable by everyone. Challenge yourself to move the conversation into a different space: you just haven’t found the right design <em>yet</em>. It’s a false choice to think that a design can either be beautiful or accessible; don’t fall into that trap.</p>\n\n\n\n<p>— <em>end scene.</em></p>\n\n\n\n<h3>Let’s re-frame the conversation</h3>\n\n\n\n<p>These are just three of the perspectives we could consider when it comes to digital accessibility.</p>\n\n\n\n<p>We could talk about the project manager that “just wants to ship features” and says that “we can come back to accessibility later.” We could talk about the developer who jokes that “they wouldn’t use the internet if they were blind anyway,” or the one that says they will only pay attention to accessibility “once browsers make them do it.”</p>\n\n\n\n<p>We could, but we don’t really need to. We know how these these conversations go, because many of us have lived these experiences. The project never gets retrofitted. The company pays once to develop the product, then pays for an accessibility audit, then pays for the re-write after the audit shows that a retrofit is going to be more costly than building something new. We know the developer who insists they should only be forced to do something if the browser otherwise disallows it, and that they are unlikely to be convinced that the inclusive architecture of their code is not only beneficial, but necessary.</p>\n\n\n\n<p>So what <em>should</em> we be talking about, then?</p>\n\n\n\n<p>We need to acknowledge that designers and developers need to be learning about accessibility much sooner in their careers. I think of it with this analogy: Imagine you’ve learned a foreign language, but you only learned that language’s slang. Your words are technically correct, but there are a lot of native speakers of that language who will never be able to understand you. JavaScript-first web developers are often technically correct from a JavaScript perspective, but they also frequently create solutions that leave out a whole lotta people in the end.</p>\n\n\n\n<p>How do we correct for this? I’m going to be resolute here, as we all must be. We need to make sure that any documentation we produce includes accessible code samples. Designs must contain accessible annotations. Our conference talks must include accessibility. The cool fun toys we make to make our lives easier? They must be accessible, and there must be no excuse for anything less This becomes our new minimum-viable product for anything related to the web.</p>\n\n\n\n<p>But what about the code that already exists? What about the thousands of articles already written, talks already given, libraries already produced? How do we get past that? Even as I write this article for CSS-Tricks, I think about all of the articles I’ve read and the disappointment I’ve felt when I knew the end result was inaccessible. Or the really fun code-generating tools that don’t produce accessible code. Or the popular CSS frameworks that fail to consider tab order or color contrast. Do I want all of those people to feel bad, or be punished somehow?</p>\n\n\n\n<p>Nope. Not even remotely. Nothing good comes from that kind of thinking. The good comes from the places we already know—compassion and curiosity.</p>\n\n\n\n<p>We approach this with compassion and curiosity, because these are sustainable ways to improve. We will never improve if we wallow in the guilt of past actions, berating ourselves or others for ignoring accessibility for all these years. Frankly, we wouldn’t get anything done if we had to somehow pay for past ignorant actions; because yes, we did ignore it. In many ways, we still do ignore it.</p>\n\n\n\n<p>Real examples: the Google Developer training teaches a lot of things, but it&nbsp;doesn’t teach anything more than the <a href=\"https://web.dev/accessible/\" rel=\"noopener\">super basic parts of accessibility</a>. JavaScript frameworks get so caught up in the cleverness and complexity of JavaScript that they completely forget that HTML already exists. Even then, accessibility can still take a back seat. Ember existed for about eight years before adding an accessibility-focused community group (even if they have made <a href=\"https://noti.st/melsumner/FfqsyB/accessibility-is-reach\" rel=\"noopener\">a lot of progress</a> since then). React had to have a completely different <a href=\"https://reach.tech/router/\" rel=\"noopener\">router solution</a> created. Vue hasn’t even begun to publicly address accessibility in the core framework (although there are <a href=\"https://vue-a11y.com/\" rel=\"noopener\">community efforts</a>). Accessibility engineers have been begging for <a href=\"https://github.com/WICG/inert\" rel=\"noopener\"><code>inert</code></a> to be implemented in browsers natively, but it often is underfunded and de-prioritized.</p>\n\n\n\n<p>But we are technologists and artists, so our curiosity wins when we read <a href=\"https://alistapart.com/article/semantics-to-screen-readers/\" rel=\"noopener\">interesting articles</a> about how the accessibility object model and how our code can be translated by operating systems and fed into assistive technology. That’s pretty cool. After all, writing machine code so it can talk to another machine is probably more of what we imagined we’d be doing, right?</p>\n\n\n\n<p>The thing is, we can only start to be compassionate toward other people once we are able to be compassionate toward ourselves. Sure, we messed up—but we don’t have to stay ignorant. Think about that time you debugged your code for hours and hours and it ended up being a typo or a missing semicolon. Do you still beat yourself up over that? No, you developed compassion through logical thinking. Think about the junior developer that started to be discouraged, and how you motivated them to keep trying and that we all have good days and bad. That’s compassion.</p>\n\n\n\n<p>Here’s the cool part: not only do we have the technology, we are <em>literally</em> the ones that can fix it. We can get up and try to do better tomorrow. We can make some time to read about accessibility, and keep reading about it every day until we know it just as well as we do other things. It will be hard at first, just like the first time we tried… writing tests. Writing CSS. Working with that one API that is forever burned in our memory. But with repetition and practice, we got better. It got easier.</p>\n\n\n\n<p>Logically, we know we can learn hard things; we have already learned hard things, time and time again. This is the life and the career we signed up for. This is what gets us out of bed every morning. We love challenges and we love figuring them out. We are totally here for this.</p>\n\n\n\n<h3>What can we do? Here are some action steps.</h3>\n\n\n\n<p>Perhaps I have lost some readers by this point. But, if you’ve gotten this far, maybe you’re asking, “Melanie, you’ve convinced me, but what can I do <em>right now</em>?” I will give you two lists to empower you to take action by giving you a place to start.</p>\n\n\n\n<h4>Compassionately improve yourself:</h4>\n\n\n\n<ol><li><strong>Start following some folks with disabilities</strong> who are on social media with the goal of learning from their experiences. Listen to what they have to say. Don’t argue with them. Don’t tone police them. Listen to <em>what</em> they are trying to tell you. Maybe it won’t always come out in the way you’d prefer, but listen anyway.</li><li><strong>Retro-fit your knowledge.</strong> Try to start writing your next component with HTML first, then add functionality with JavaScript. <a href=\"https://codepen.io/melsumner/pen/ExYwqxZ\" rel=\"noopener\">Learn what you get for free</a> from HTML and the browser. Take some courses that are focused on accessibility for engineers. Invest in your own improvement for the sake of improving your craft.</li><li><strong>Turn on a screen reader.</strong> Learn how it works. Figure out the settings—how do you turn on a text-only version? How do you change the voice? How do you make it stop talking, or make it talk faster? How do you browse by headings? How do you get a list of links? What are the <a href=\"https://dequeuniversity.com/screenreaders/\" rel=\"noopener\">keyboard shortcuts</a>?</li></ol>\n\n\n\n<p><strong>Bonus Challenge:</strong> Try your hand at building some accessibility-related tooling. Check out <a href=\"https://a11y-automation.dev/\" rel=\"noopener\">A11y Automation Tracker</a>, an open source project that intends to track what automation could exist, but just hasn’t been created yet.</p>\n\n\n\n<h4>Incrementally improve your code</h4>\n\n\n\n<p>There are critical blockers that stop people from using your website. Don’t stop and feel bad about them; propel yourself into action and make your code even <strong>better</strong> than it was before.</p>\n\n\n\n<p>Here are some of the worst ones:</p>\n\n\n\n<ol><li><a href=\"https://github.com/ember-template-lint/ember-template-lint/blob/master/docs/rule/no-nested-interactive.md\" rel=\"noopener\">Nested interactive elements.</a> Like putting a button inside of a link. Or another button inside of a button.</li><li>Missing <a href=\"https://www.w3.org/WAI/tutorials/forms/labels/\" rel=\"noopener\">labels on input fields</a> (or non-associated labels)</li><li>Keyboard traps stop your users in their tracks. <a href=\"https://www.w3.org/WAI/WCAG21/quickref/#keyboard-accessible\" rel=\"noopener\">Learn what they are</a> and how to avoid them.</li><li>Are the images on your site important for users? Do they have <a href=\"https://noti.st/melsumner/Phhimm/dont-break-the-web#sVVa2ve\" rel=\"noopener\">the <code>alt</code> attribute</a> with a meaningful value?</li><li>Are there empty links on your site? Did you <a href=\"https://marcysutton.com/links-vs-buttons-in-modern-web-applications\" rel=\"noopener\">use a link</a> when you should have used a button?</li></ol>\n\n\n\n<p><strong>Suggestion:</strong> Read through the <a href=\"https://www.a11yproject.com/checklist/\" rel=\"noopener\">c</a><a href=\"https://www.a11yproject.com/checklist/\" rel=\"noopener\">hecklist on The A11y Project</a>. It’s by no means exhaustive, but it will get you started.</p>\n\n\n\n<p>And you know what? A good place to start is <em>exactly</em> where you are. A good time to start? Today.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p class=\"ticss-11061302\">Featured header photo by&nbsp;<a href=\"https://unsplash.com/@scottrodgerson?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Scott Rodgerson</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/s/photos/warning?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Unsplash</a></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/why-dont-developers-take-accessibility-seriously/\">Why Don&#8217;t Developers Take Accessibility Seriously?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "You know that joke, “Two front-end developers walk into a bar and find they have nothing in common”? It’s funny, yet frustrating, because it’s true.\n\n\n\nThis article will present three different perspectives on accessibility in web design and development. Three perspectives that could help us bridge the great divide between users and designers/developers. It might help us find the common ground to building a better web and a better future.\n\n\n\n\n\n\n\nPhoto by Alexander Naglestad on Unsplash\n\n\n\nAct 1\n\n\n\n“I just don’t know how developers don’t think about accessibility.”\n\n\n\nSomeone once said that to me. Let’s stop and think about it for a minute. Maybe there’s a perspective to be had.\n\n\n\nThink about how many things you have to know as a developer to successfully build a website. In any given day, for any given job position in web development, there are the other details of web development that come up. Meaning, it’s more than “just” knowing HTML, CSS, ARIA, and JavaScript. Developers will also learn other things over the course of their careers, based on what they need to do.\n\n\n\nThis could be package management, workspaces, code generators, collaboration tools, asset loading, asset management, CDN optimizations, bundle optimizations, unit tests, integration tests, visual regression tests, browser integration tests, code reviews, linting, formatting, communication through examples, changelogs, documentation, semantic versioning, security, app deployment, package releases, rollbacks, incremental improvements, incremental testing, continuous deployments, merge management, user experience, user interaction design, typography scales, aspect ratios for responsive design, data management, and… well, the list could go on, but you get the idea.\n\n\n\nAs a developer, I consider myself to be pretty gosh darn smart for knowing how to do most these things! Stop and consider this: if you think about how many people are in the world, and compare that to how many people in the world can build websites, it’s proportionally a very small percentage. That’s kind of… cool. Incredible, even. On top of that, think about the last time you shipped code and how good that felt. “I figured out a hard thing and made it work! Ahhhhh! I feel amazing!”\n\n\n\nThat kind of emotional high is pretty great, isn’t it? It makes me smile just to think about it.\n\n\n\nNow, imagine that an accessibility subject-matter expert comes along and essentially tells you that not only are you not particularly smart, but you have been doing things wrong for a long time.\n\n\n\nOuch. Suddenly you don’t feel very good. Wrong? Me?? What??? Your adrenaline can even kick in and you start to feel defensive. Time to stick up for yourself… right? Time to dig those heels.\n\n\n\nThe cognitive dissonance can even be really overwhelming. It feels bad to find out that not only are you not good at the thing you thought you were really good at doing, but you’ve also been saying, “Screw you, who cares about you anyway,” to a whole bunch of people who can’t use the websites you’ve helped build because you (accidentally or otherwise) ignored that they even existed, that you ignored users who needed something more than the cleverness you were delivering for all these years. Ow.\n\n\n\nAll things considered, it is quite understandable to me that a developer would want to put their fingers in their ears and pretend that none of this has happened at all, that they are still very clever and awesome. That the one “expert” telling you that you did it wrong is just one person. And one person is easy to ignore.\n\n\n\n— end scene.\n\n\n\nAct 2\n\n\n\n“I feel like I don’t matter at all.”\n\n\n\nThis is a common refrain I hear from people who need assistive technology to use websites, but often find them unusable for any number of reasons. Maybe they can’t read the text because the website’s design has ignored color contrast. Maybe there are nested interactive elements, so they can’t even log in to do things like pay a utility bill or buy essential items on their own. Maybe their favorite singer has finally set up an online shop but the user with assistive technology cannot even navigate the site because, while it might look interactive from a sighted-user’s perspective, all the buttons are divs and are not interactive with a keyboard… at all.\n\n\n\nThis frustration can boil over and spill out; the brunt of this frustration is often borne by the folks who are trying to deliver more inclusive products. The result is a negative feedback cycle; some tech folks opt out of listening because “it’s rude” (and completely missing the irony of that statement). Other tech folks struggle with the emotional weight that so often accompanies working in accessibility-focused design and development. \n\n\n\nThe thing is, these users have been ignored for so long that it can feel like they are screaming into a void. Isn’t anyone listening? Doesn’t anyone care? It seems like the only way to even be acknowledged is to demand the treatment that the law affords them! Even then, they often feel ignored and forgotten. Are lawsuits the only recourse?\n\n\n\nIt increasingly seems that being loud and militant is the only way to be heard, and even then it might be a long time before anything happens.\n\n\n\n— end scene.\n\n\n\nAct 3\n\n\n\n“I know it doesn’t pass color contrast, but I feel like it’s just so restrictive on my creativity as a designer. I don’t like the way this looks, at all.”\n\n\n\nI’ve heard this a lot across the span of my career. To some, inclusive design is not the necessary guardrail to ensure that our websites can be used by all, but rather a dampener on their creative freedom.\n\n\n\nIf you are a designer who thinks this way, please consider this: you’re not designing for yourself. This is not like physical art; while your visual design can be artistic, it’s still on the web. It’s still for the web. Web designers have a higher challenge—their artistic vision needs to be usable by everyone. Challenge yourself to move the conversation into a different space: you just haven’t found the right design yet. It’s a false choice to think that a design can either be beautiful or accessible; don’t fall into that trap.\n\n\n\n— end scene.\n\n\n\nLet’s re-frame the conversation\n\n\n\nThese are just three of the perspectives we could consider when it comes to digital accessibility.\n\n\n\nWe could talk about the project manager that “just wants to ship features” and says that “we can come back to accessibility later.” We could talk about the developer who jokes that “they wouldn’t use the internet if they were blind anyway,” or the one that says they will only pay attention to accessibility “once browsers make them do it.”\n\n\n\nWe could, but we don’t really need to. We know how these these conversations go, because many of us have lived these experiences. The project never gets retrofitted. The company pays once to develop the product, then pays for an accessibility audit, then pays for the re-write after the audit shows that a retrofit is going to be more costly than building something new. We know the developer who insists they should only be forced to do something if the browser otherwise disallows it, and that they are unlikely to be convinced that the inclusive architecture of their code is not only beneficial, but necessary.\n\n\n\nSo what should we be talking about, then?\n\n\n\nWe need to acknowledge that designers and developers need to be learning about accessibility much sooner in their careers. I think of it with this analogy: Imagine you’ve learned a foreign language, but you only learned that language’s slang. Your words are technically correct, but there are a lot of native speakers of that language who will never be able to understand you. JavaScript-first web developers are often technically correct from a JavaScript perspective, but they also frequently create solutions that leave out a whole lotta people in the end.\n\n\n\nHow do we correct for this? I’m going to be resolute here, as we all must be. We need to make sure that any documentation we produce includes accessible code samples. Designs must contain accessible annotations. Our conference talks must include accessibility. The cool fun toys we make to make our lives easier? They must be accessible, and there must be no excuse for anything less This becomes our new minimum-viable product for anything related to the web.\n\n\n\nBut what about the code that already exists? What about the thousands of articles already written, talks already given, libraries already produced? How do we get past that? Even as I write this article for CSS-Tricks, I think about all of the articles I’ve read and the disappointment I’ve felt when I knew the end result was inaccessible. Or the really fun code-generating tools that don’t produce accessible code. Or the popular CSS frameworks that fail to consider tab order or color contrast. Do I want all of those people to feel bad, or be punished somehow?\n\n\n\nNope. Not even remotely. Nothing good comes from that kind of thinking. The good comes from the places we already know—compassion and curiosity.\n\n\n\nWe approach this with compassion and curiosity, because these are sustainable ways to improve. We will never improve if we wallow in the guilt of past actions, berating ourselves or others for ignoring accessibility for all these years. Frankly, we wouldn’t get anything done if we had to somehow pay for past ignorant actions; because yes, we did ignore it. In many ways, we still do ignore it.\n\n\n\nReal examples: the Google Developer training teaches a lot of things, but it doesn’t teach anything more than the super basic parts of accessibility. JavaScript frameworks get so caught up in the cleverness and complexity of JavaScript that they completely forget that HTML already exists. Even then, accessibility can still take a back seat. Ember existed for about eight years before adding an accessibility-focused community group (even if they have made a lot of progress since then). React had to have a completely different router solution created. Vue hasn’t even begun to publicly address accessibility in the core framework (although there are community efforts). Accessibility engineers have been begging for inert to be implemented in browsers natively, but it often is underfunded and de-prioritized.\n\n\n\nBut we are technologists and artists, so our curiosity wins when we read interesting articles about how the accessibility object model and how our code can be translated by operating systems and fed into assistive technology. That’s pretty cool. After all, writing machine code so it can talk to another machine is probably more of what we imagined we’d be doing, right?\n\n\n\nThe thing is, we can only start to be compassionate toward other people once we are able to be compassionate toward ourselves. Sure, we messed up—but we don’t have to stay ignorant. Think about that time you debugged your code for hours and hours and it ended up being a typo or a missing semicolon. Do you still beat yourself up over that? No, you developed compassion through logical thinking. Think about the junior developer that started to be discouraged, and how you motivated them to keep trying and that we all have good days and bad. That’s compassion.\n\n\n\nHere’s the cool part: not only do we have the technology, we are literally the ones that can fix it. We can get up and try to do better tomorrow. We can make some time to read about accessibility, and keep reading about it every day until we know it just as well as we do other things. It will be hard at first, just like the first time we tried… writing tests. Writing CSS. Working with that one API that is forever burned in our memory. But with repetition and practice, we got better. It got easier.\n\n\n\nLogically, we know we can learn hard things; we have already learned hard things, time and time again. This is the life and the career we signed up for. This is what gets us out of bed every morning. We love challenges and we love figuring them out. We are totally here for this.\n\n\n\nWhat can we do? Here are some action steps.\n\n\n\nPerhaps I have lost some readers by this point. But, if you’ve gotten this far, maybe you’re asking, “Melanie, you’ve convinced me, but what can I do right now?” I will give you two lists to empower you to take action by giving you a place to start.\n\n\n\nCompassionately improve yourself:\n\n\n\nStart following some folks with disabilities who are on social media with the goal of learning from their experiences. Listen to what they have to say. Don’t argue with them. Don’t tone police them. Listen to what they are trying to tell you. Maybe it won’t always come out in the way you’d prefer, but listen anyway.Retro-fit your knowledge. Try to start writing your next component with HTML first, then add functionality with JavaScript. Learn what you get for free from HTML and the browser. Take some courses that are focused on accessibility for engineers. Invest in your own improvement for the sake of improving your craft.Turn on a screen reader. Learn how it works. Figure out the settings—how do you turn on a text-only version? How do you change the voice? How do you make it stop talking, or make it talk faster? How do you browse by headings? How do you get a list of links? What are the keyboard shortcuts?\n\n\n\nBonus Challenge: Try your hand at building some accessibility-related tooling. Check out A11y Automation Tracker, an open source project that intends to track what automation could exist, but just hasn’t been created yet.\n\n\n\nIncrementally improve your code\n\n\n\nThere are critical blockers that stop people from using your website. Don’t stop and feel bad about them; propel yourself into action and make your code even better than it was before.\n\n\n\nHere are some of the worst ones:\n\n\n\nNested interactive elements. Like putting a button inside of a link. Or another button inside of a button.Missing labels on input fields (or non-associated labels)Keyboard traps stop your users in their tracks. Learn what they are and how to avoid them.Are the images on your site important for users? Do they have the alt attribute with a meaningful value?Are there empty links on your site? Did you use a link when you should have used a button?\n\n\n\nSuggestion: Read through the checklist on The A11y Project. It’s by no means exhaustive, but it will get you started.\n\n\n\nAnd you know what? A good place to start is exactly where you are. A good time to start? Today.\n\n\n\n\n\n\n\nFeatured header photo by Scott Rodgerson on Unsplash\n\nWhy Don’t Developers Take Accessibility Seriously? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-24T14:49:18.000Z",
      "date_modified": "2022-01-24T14:49:18.000Z",
      "_plugin": {
        "pageFilename": "1ed0c702d9c1230109de0447b797edd1444512d575242ccf71cde0e7b27625e5.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360346",
      "url": "https://css-tricks.com/using-svg-in-wordpress/",
      "title": "Using SVG in WordPress (2 Helpful Plugin Recommendations)",
      "summary": "SVG is a great image format, so it's nice to able to use it in WordPress. If you're looking to be using SVG in WordPress. , we've got you covered here with all the best options.\n\nUsing SVG in WordPress (2 Helpful Plugin Recommendations) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>There is a little legwork to do if you plan on using SVG in WordPress. For fair-enough reasons, WordPress doesn&#8217;t allow SVG out of the box. SVG is a markup syntax that has lots of power, including the ability to load other resources and run JavaScript. So, if WordPress were to blanket-ly allow SVG by default, users even with quite limited roles could upload SVG and <a href=\"https://css-tricks.com/svg-uploads-wordpress-inconvenient-truth/\">cause problems</a>, like XSS vulnerabilities.</p>\n\n\n\n<p>But say that&#8217;s not a problem for your site and you just use SVG gosh darn it. First, let&#8217;s be clear what we mean by using SVG in WordPress: <strong>uploading SVG through the media uploader and using the SVG images within post content and as featured images. </strong></p>\n\n\n\n<span id=\"more-360346\"></span>\n\n\n\n<p>There is nothing stopping you from, say, using SVG in your templates. Meaning inline <code>&lt;svg&gt;</code> or SVG files you link up as images in your template from your CSS or whatnot. That&#8217;s completely fine and <em>you don&#8217;t need to do anything special</em> for that to work in WordPress.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2884\" height=\"2322\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=2884%2C2322&#038;ssl=1\" alt=\"Example of Using SVG in WordPress. the media library is open and shows tile previews of different SVG files.\" class=\"wp-image-362072\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?w=2884&amp;ssl=1 2884w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=300%2C242&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=1024%2C824&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=768%2C618&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=1536%2C1237&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=2048%2C1649&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=1000%2C805&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3>Taking matters into your own hands</h3>\n\n\n\n<p>What prevents you from using SVG in WordPress is that the Media Library Uploader rejects the file&#8217;s MIME type. To allow SVG in WordPress, you really just need this filter. This would go in your <code>functions.php</code> or a functionality plugin:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function cc_mime_types($mimes) {\n  $mimes['svg'] = 'image/svg+xml';\n  return $mimes;\n}\nadd_filter('upload_mimes', 'cc_mime_types');</code></pre>\n\n\n\n<p>But the problem after that is that the SVG file usually won&#8217;t display correctly in the various places it needs to, like the Media Library&#8217;s image previews, the Featured Image widget, and possibly even the classic or Block Editor. I have a <a href=\"https://css-tricks.com/snippets/wordpress/allow-svg-through-wordpress-media-uploader/\">snippet of CSS that can be injected to fix this</a>. But — and this is kinda why I&#8217;m writing this new post — that doesn&#8217;t seem to work for me anymore, which has got me thinking.</p>\n\n\n\n<h3>Plugins for using SVG in WordPress</h3>\n\n\n\n<p>I used to think, eh, why bother, it&#8217;s so little code to allow this might that I may as well just do it myself with the function. But WordPress, of course, has a way of shifting over time, and since supporting SVG isn&#8217;t something WordPress is going to do out of the box, this is actually a great idea for a plugin to handle. That way, the SVG plugin can evolve to handle quirks as WordPress evolves and, theoretically, if enough people use the SVG plugin, it will be maintained.</p>\n\n\n\n<p>So, with that, here are a couple of plugin recommendations for using SVG in WordPress.</p>\n\n\n\n<h4><a href=\"https://wordpress.org/plugins/svg-support/\" rel=\"noopener\">SVG Support</a></h4>\n\n\n\n<p><a href=\"https://wordpress.org/plugins/svg-support/\" rel=\"noopener\">This is the one</a> I&#8217;ve been using lately and it seems to work great for me. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2912\" height=\"2604\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=2912%2C2604&#038;ssl=1\" alt=\"Screenshot of the SVG Support plugin for WordPress in the WordPress Plugin Directory.\" class=\"wp-image-362069\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?w=2912&amp;ssl=1 2912w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=300%2C268&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=1024%2C916&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=768%2C687&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=1536%2C1374&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=2048%2C1831&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=1000%2C894&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I just install it, activate it, and do nothing else. It does have a settings screen, but I don&#8217;t need any of those things. I really like how it asks you if it&#8217;s OK to load additional CSS on the front-end (for me, it&#8217;s not OK, so I leave it off) — although even better would be for the plugin to show you what it&#8217;s going to load so you can add it to your own CSS if you want.</p>\n\n\n\n<p>The setting to restrict uploading SVG in WordPress to admins is smart, although if you want to be more serious about SVG safety, you could use this next plugin instead&#8230;</p>\n\n\n\n<h4><a href=\"https://wordpress.org/plugins/safe-svg/\" rel=\"noopener\">Safe SVG</a></h4>\n\n\n\n<p><a href=\"https://wordpress.org/plugins/safe-svg/\" rel=\"noopener\">This</a> one hasn&#8217;t been updated in years, but it goes the extra mile for SVG safety in that it literally sanitizes SVG files as you upload them, and even optimizes them while it adds the SVG in WordPress. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2680\" height=\"2666\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=2680%2C2666&#038;ssl=1\" alt=\"Screenshot of the Safe SVG plugin in the WordPress Plugin Directory.\" class=\"wp-image-362071\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?w=2680&amp;ssl=1 2680w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=300%2C298&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=1024%2C1019&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=768%2C764&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=1536%2C1528&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=2048%2C2037&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=1000%2C995&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=100%2C100&amp;ssl=1 100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We have fairly tight editorial control over authors and such here on this site, so the security aspects of this SVG plugin aren&#8217;t a big worry to me. Plus, I like to be in charge of my own SVG optimization, so this one isn&#8217;t as perfect for me, though I&#8217;d probably recommend it to a site with less technical expertise at the site owner level.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Looks like there is <a href=\"https://wordpress.org/plugins/easy-svg/\" rel=\"noopener\">Easy SVG Support</a> as well, but it doesn&#8217;t seem to be as nice as the Support SVG plugin and hasn&#8217;t been updated recently, so I can&#8217;t recommend that. </p>\n\n\n\n<p>What plugins have you successfully tried for using SVG in WordPress? Any recommendations you&#8217;d like to add?</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/using-svg-in-wordpress/\">Using SVG in WordPress (2 Helpful Plugin Recommendations)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "There is a little legwork to do if you plan on using SVG in WordPress. For fair-enough reasons, WordPress doesn’t allow SVG out of the box. SVG is a markup syntax that has lots of power, including the ability to load other resources and run JavaScript. So, if WordPress were to blanket-ly allow SVG by default, users even with quite limited roles could upload SVG and cause problems, like XSS vulnerabilities.\n\n\n\nBut say that’s not a problem for your site and you just use SVG gosh darn it. First, let’s be clear what we mean by using SVG in WordPress: uploading SVG through the media uploader and using the SVG images within post content and as featured images. \n\n\n\n\n\n\n\nThere is nothing stopping you from, say, using SVG in your templates. Meaning inline <svg> or SVG files you link up as images in your template from your CSS or whatnot. That’s completely fine and you don’t need to do anything special for that to work in WordPress.\n\n\n\n\n\n\n\nTaking matters into your own hands\n\n\n\nWhat prevents you from using SVG in WordPress is that the Media Library Uploader rejects the file’s MIME type. To allow SVG in WordPress, you really just need this filter. This would go in your functions.php or a functionality plugin:\n\n\n\nfunction cc_mime_types($mimes) {\n  $mimes['svg'] = 'image/svg+xml';\n  return $mimes;\n}\nadd_filter('upload_mimes', 'cc_mime_types');\n\n\n\nBut the problem after that is that the SVG file usually won’t display correctly in the various places it needs to, like the Media Library’s image previews, the Featured Image widget, and possibly even the classic or Block Editor. I have a snippet of CSS that can be injected to fix this. But — and this is kinda why I’m writing this new post — that doesn’t seem to work for me anymore, which has got me thinking.\n\n\n\nPlugins for using SVG in WordPress\n\n\n\nI used to think, eh, why bother, it’s so little code to allow this might that I may as well just do it myself with the function. But WordPress, of course, has a way of shifting over time, and since supporting SVG isn’t something WordPress is going to do out of the box, this is actually a great idea for a plugin to handle. That way, the SVG plugin can evolve to handle quirks as WordPress evolves and, theoretically, if enough people use the SVG plugin, it will be maintained.\n\n\n\nSo, with that, here are a couple of plugin recommendations for using SVG in WordPress.\n\n\n\nSVG Support\n\n\n\nThis is the one I’ve been using lately and it seems to work great for me. \n\n\n\n\n\n\n\nI just install it, activate it, and do nothing else. It does have a settings screen, but I don’t need any of those things. I really like how it asks you if it’s OK to load additional CSS on the front-end (for me, it’s not OK, so I leave it off) — although even better would be for the plugin to show you what it’s going to load so you can add it to your own CSS if you want.\n\n\n\nThe setting to restrict uploading SVG in WordPress to admins is smart, although if you want to be more serious about SVG safety, you could use this next plugin instead…\n\n\n\nSafe SVG\n\n\n\nThis one hasn’t been updated in years, but it goes the extra mile for SVG safety in that it literally sanitizes SVG files as you upload them, and even optimizes them while it adds the SVG in WordPress. \n\n\n\n\n\n\n\nWe have fairly tight editorial control over authors and such here on this site, so the security aspects of this SVG plugin aren’t a big worry to me. Plus, I like to be in charge of my own SVG optimization, so this one isn’t as perfect for me, though I’d probably recommend it to a site with less technical expertise at the site owner level.\n\n\n\n\n\n\n\nLooks like there is Easy SVG Support as well, but it doesn’t seem to be as nice as the Support SVG plugin and hasn’t been updated recently, so I can’t recommend that. \n\n\n\nWhat plugins have you successfully tried for using SVG in WordPress? Any recommendations you’d like to add?\n\nUsing SVG in WordPress (2 Helpful Plugin Recommendations) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-21T19:35:31.000Z",
      "date_modified": "2022-01-21T19:35:31.000Z",
      "_plugin": {
        "pageFilename": "7a2ad8ce809f3c3f16e66496c4586b31732ef67985a96e9acac0b81f54e1920c.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360665",
      "url": "https://css-tricks.com/context-aware-web-components/",
      "title": "Context-Aware Web Components Are Easier Than You Think",
      "summary": "Another aspect of web components that we haven’t talked about yet is that a JavaScript function is called whenever a web component is added or removed from a page. These lifecycle callbacks can be used for many things, including making …\n\nContext-Aware Web Components Are Easier Than You Think originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Another aspect of web components that we haven’t talked about yet is that a JavaScript function is called whenever a web component is added or removed from a page. These lifecycle callbacks can be used for many things, including making an element aware of its context.</p>\n\n\n\n<span id=\"more-360665\"></span>\n\n\n\n<h2>Article series</h2>\n\n\n\n<ul class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/web-components-are-easier-than-you-think/\">Web Components Are Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/interactive-web-components-are-easier-than-you-think/\">Interactive Web Components Are Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/using-web-components-in-wordpress-is-easier-than-you-think/\">Using Web Components in WordPress is Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/supercharging-built-in-elements-with-web-components-is-easier-than-you-think/\">Supercharging Built-In Elements With Web Components &#8220;is&#8221; Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/context-aware-web-components\">Context-Aware Web Components Are Easier Than You Think</a> (<em>You are here!</em>)</li></ul>\n\n\n\n<h3>The four lifecycle callbacks of web components</h3>\n\n\n\n<p>There are <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks\" rel=\"noopener\">four lifecycle callbacks</a> that can be used with web components:</p>\n\n\n\n<ul><li><code>connectedCallback</code>: This callback fires when the custom element is <em>attached</em> to the element.</li><li><code>disconnectedCallback</code>: This callback fires when the element is <em>removed</em> from the document.</li><li><code>adoptedCallback</code>: This callback fires when the element is <em>added</em> to a new document.</li><li><code>attributeChangedCallback</code>: This callback fires when an <em>attribute</em> is changed, added or removed, as long as that attribute is being observed.</li></ul>\n\n\n\n<p>Let&#8217;s look at each of these in action.</p>\n\n\n\n<h3>Our post-apocalyptic person component</h3>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1520\" height=\"712\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=1520%2C712&#038;ssl=1\" alt=\"Two renderings of the web component side-by-side, the left is a human, and the right is a zombie.\" class=\"wp-image-360671\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?w=1520&amp;ssl=1 1520w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=300%2C141&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=1024%2C480&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=768%2C360&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=1000%2C468&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We’ll start by creating a web component called <code>&lt;postapocalyptic-person&gt;</code>. Every person after the apocalypse is either a human or a zombie and we’ll know which one based on a class — either <code>.human</code> or <code>.zombie</code> — that’s applied to the parent element of the <code>&lt;postapocalyptic-person&gt;</code> component. We won’t do anything fancy with it (yet), but we’ll add a <code>shadowRoot</code> we can use to attach a corresponding image based on that classification.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">customElements.define(\n  \"postapocalyptic-person\",\n  class extends HTMLElement {\n    constructor() {\n      super();\n      const shadowRoot = this.attachShadow({ mode: \"open\" });\n    }\n}</code></pre>\n\n\n\n<p>Our HTML looks like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"humans\">\n  &lt;postapocalyptic-person>&lt;/postapocalyptic-person>\n&lt;/div>\n&lt;div class=\"zombies\">\n  &lt;postapocalyptic-person>&lt;/postapocalyptic-person>\n&lt;/div></code></pre>\n\n\n\n<h3>Inserting people with <code>connectedCallback</code></h3>\n\n\n\n<p>When a <code>&lt;postapocalyptic-person&gt;</code> is loaded on the page, the <code>connectedCallback()</code> function is called.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">connectedCallback() {\n  let image = document.createElement(\"img\");\n  if (this.parentNode.classList.contains(\"humans\")) {\n    image.src = \"https://assets.codepen.io/1804713/lady.png\";\n    this.shadowRoot.appendChild(image);\n  } else if (this.parentNode.classList.contains(\"zombies\")) {\n    image.src = \"https://assets.codepen.io/1804713/ladyz.png\";\n    this.shadowRoot.appendChild(image);\n  }\n}</code></pre>\n\n\n\n<p>This makes sure that an image of a human is output when the <code>&lt;postapocalyptic-person&gt;</code> is a human, and a zombie image when the component is a zombie.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYErBJQ\" src=\"//codepen.io/anon/embed/zYErBJQ?height=450&amp;theme-id=1&amp;slug-hash=zYErBJQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYErBJQ\" title=\"CodePen Embed zYErBJQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">Be careful working with <code>connectedCallback</code>. It runs more often than you might realize, firing any time the element is moved and could (baffling-ly) even run <em>after</em> the node is no longer connected — which can be an expensive performance cost. You can use <code>this.isConnected</code> to know whether the element is connected or not.</p>\n\n\n\n<h3>Counting people with <code>connectedCallback()</code> when they are added</h3>\n\n\n\n<p>Let&#8217;s get a little more complex by adding a couple of buttons to the mix. One will add a <code>&lt;postapocalyptic-person&gt;</code>, using a &#8220;coin flip&#8221; approach to decide whether it’s a human or a zombie. The other button will do the opposite, removing a <code>&lt;postapocalyptic-person&gt;</code> at random. We&#8217;ll keep track of how many humans and zombies are in view while we’re at it.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"btns\">\n  &lt;button id=\"addbtn\">Add Person&lt;/button>\n  &lt;button id=\"rmvbtn\">Remove Person&lt;/button> \n  &lt;span class=\"counts\">\n    Humans: &lt;span id=\"human-count\">0&lt;/span> \n    Zombies: &lt;span id=\"zombie-count\">0&lt;/span>\n  &lt;/span>\n&lt;/div></code></pre>\n\n\n\n<p>Here’s what our buttons will do:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let zombienest = document.querySelector(\".zombies\"),\n  humancamp = document.querySelector(\".humans\");\n\ndocument.getElementById(\"addbtn\").addEventListener(\"click\", function () {\n  // Flips a \"coin\" and adds either a zombie or a human\n  if (Math.random() > 0.5) {\n    zombienest.appendChild(document.createElement(\"postapocalyptic-person\"));\n  } else {\n    humancamp.appendChild(document.createElement(\"postapocalyptic-person\"));\n  }\n});\ndocument.getElementById(\"rmvbtn\").addEventListener(\"click\", function () {\n  // Flips a \"coin\" and removes either a zombie or a human\n  // A console message is logged if no more are available to remove.\n  if (Math.random() > 0.5) {\n    if (zombienest.lastElementChild) {\n      zombienest.lastElementChild.remove();\n    } else {\n      console.log(\"No more zombies to remove\");\n    }\n  } else {\n    if (humancamp.lastElementChild) {\n      humancamp.lastElementChild.remove();\n    } else {\n      console.log(\"No more humans to remove\");\n    }\n  }\n});</code></pre>\n\n\n\n<p>Here’s the code in <code>connectedCallback()</code> that counts the humans and zombies as they are added:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">connectedCallback() {\n  let image = document.createElement(\"img\");\n  if (this.parentNode.classList.contains(\"humans\")) {\n    image.src = \"https://assets.codepen.io/1804713/lady.png\";\n    this.shadowRoot.appendChild(image);\n    // Get the existing human count.\n    let humancount = document.getElementById(\"human-count\");\n    // Increment it\n    humancount.innerHTML = parseInt(humancount.textContent) + 1;\n  } else if (this.parentNode.classList.contains(\"zombies\")) {\n    image.src = \"https://assets.codepen.io/1804713/ladyz.png\";\n    this.shadowRoot.appendChild(image);\n    // Get the existing zombie count.\n    let zombiecount = document.getElementById(\"zombie-count\");\n    // Increment it\n    zombiecount.innerHTML = parseInt(zombiecount.textContent) + 1;\n  }\n}</code></pre>\n\n\n\n<h3>Updating counts with <code>disconnectedCallback</code></h3>\n\n\n\n<p>Next, we can use <code>disconnectedCallback()</code> to decrement the number as a humans and zombies are removed. However, we are unable to check the class of the parent element because the parent element with the corresponding class is already gone by the time <code>disconnectedCallback</code> is called. We could set an attribute on the element, or add a property to the object, but since the image’s <code>src</code> attribute is already determined by its parent element, we can use that as a proxy for knowing whether the web component being removed is a human or zombie.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">disconnectedCallback() {\n  let image = this.shadowRoot.querySelector('img');\n  // Test for the human image\n  if (image.src == \"https://assets.codepen.io/1804713/lady.png\") {\n    let humancount = document.getElementById(\"human-count\");\n    humancount.innerHTML = parseInt(humancount.textContent) - 1; // Decrement count\n  // Test for the zombie image\n  } else if (image.src == \"https://assets.codepen.io/1804713/ladyz.png\") {\n    let zombiecount = document.getElementById(\"zombie-count\");\n    zombiecount.innerHTML = parseInt(zombiecount.textContent) - 1; // Decrement count\n  }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWqNjKp\" src=\"//codepen.io/anon/embed/QWqNjKp?height=600&amp;theme-id=1&amp;slug-hash=QWqNjKp&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWqNjKp\" title=\"CodePen Embed QWqNjKp\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Beware of clowns!</h3>\n\n\n\n<p>Now (and I’m speaking from experience here, of course) the only thing scarier than a horde of zombies bearing down on your position is a clown — all it takes is one! So, even though we’re already dealing with frightening post-apocalyptic zombies, let’s add the possibility of a clown entering the scene for even more horror. In fact, we’ll do it in such a way that there’s a possibility any human or zombie on the screen is secretly a clown in disguise!</p>\n\n\n\n<p>I take back what I said earlier: a single zombie clown is scarier than even a group of &#8220;normal&#8221; clowns. Let’s say that if any sort of clown is found — be it human or zombie — we separate them from the human and zombie populations by sending them to a whole different document — an <code>&lt;iframe&gt;</code> jail, if you will. (I hear that &#8220;clowning&#8221; may be even more contagious than zombie contagion.)</p>\n\n\n\n<p>And when we move a suspected clown from the current document to an <code>&lt;iframe&gt;</code>, it doesn’t destroy and recreate the original node; rather it adopts and connects said node, first calling <code>adoptedCallback</code> then <code>connectedCallback</code>.</p>\n\n\n\n<p>We don’t need anything in the <code>&lt;iframe&gt;</code> document except a body with a <code>.clowns</code> class. As long as this document is in the iframe of the main document — not viewed separately — we don’t even need the <code>&lt;postapocalyptic-person&gt;</code> instantiation code. We’ll include one space for humans, another space for zombies, and yes, the clowns’s jail… errr&#8230; <code>&lt;iframe&gt;</code> of&#8230; fun.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"btns\">\n  &lt;button id=\"addbtn\">Add Person&lt;/button>\n  &lt;button id=\"jailbtn\">Jail Potential Clown&lt;/button>\n&lt;/div>\n&lt;div class=\"humans\">\n  &lt;postapocalyptic-person>&lt;/postapocalyptic-person>\n&lt;/div>\n&lt;div class=\"zombies\">\n  &lt;postapocalyptic-person>&lt;/postapocalyptic-person>\n&lt;/div>\n&lt;iframe class=\"clowniframeoffun” src=\"adoptedCallback-iframe.html\">\n&lt;/iframe></code></pre>\n\n\n\n<p>Our &#8220;Add Person&#8221; button works the same as it did in the last example: it flips a digital coin to randomly insert either a human or a zombie. When we hit the &#8220;Jail Potential Clown&#8221; button another coin is flipped and takes either a zombie or a human, handing them over to <code>&lt;iframe&gt;</code> jail.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.getElementById(\"jailbtn\").addEventListener(\"click\", function () {\n  if (Math.random() > 0.5) {\n    let human = humancamp.querySelector('postapocalyptic-person');\n    if (human) {\n      clowncollege.contentDocument.querySelector('body').appendChild(document.adoptNode(human));\n    } else {\n      console.log(\"No more potential clowns at the human camp\");\n    }\n  } else {\n    let zombie = zombienest.querySelector('postapocalyptic-person');\n    if (zombie) {\n      clowncollege.contentDocument.querySelector('body').appendChild(document.adoptNode(zombie));\n    } else {\n      console.log(\"No more potential clowns at the zombie nest\");\n    }\n  }\n});</code></pre>\n\n\n\n<h3>Revealing clowns with <code>adoptedCallback</code></h3>\n\n\n\n<p>In the <code>adoptedCallback</code> we’ll determine whether the clown is of the zombie human variety based on their corresponding image and then change the image accordingly. <code>connectedCallback</code> will be called after that, but we don’t have anything it needs to do, and what it does won’t interfere with our changes. So we can leave it as is.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">adoptedCallback() {\n  let image = this.shadowRoot.querySelector(\"img\");\n  if (this.parentNode.dataset.type == \"clowns\") {\n    if (image.src.indexOf(\"lady.png\") != -1) { \n      // Sometimes, the full URL path including the domain is saved in `image.src`.\n      // Using `indexOf` allows us to skip the unnecessary bits. \n      image.src = \"ladyc.png\";\n      this.shadowRoot.appendChild(image);\n    } else if (image.src.indexOf(\"ladyz.png\") != -1) {\n      image.src = \"ladyzc.png\";\n      this.shadowRoot.appendChild(image);\n    }\n  }\n}</code></pre>\n\n\n\n<iframe loading=\"lazy\" title=\"Humans and Zombies Web Component Demo\" src=\"https://undead.institute/files/adoptedCallback/index.html\" width=\"800\" height=\"600\"></iframe>\n\n\n\n<h3>Detecting hidden clowns with <code>attributeChangedCallback</code></h3>\n\n\n\n<p>Finally, we have the <code>attributeChangedCallback</code>. Unlike the the other three lifecycle callbacks, we need to observe the attributes of our web component in order for the the callback to fire. We can do this by adding an <code>observedAttributes()</code> function to the custom element’s class and have that function return an array of attribute names.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">static get observedAttributes() {\n  return [“attribute-name”];\n}</code></pre>\n\n\n\n<p>Then, if that attribute changes — including being added or removed — the <code>attributeChangedCallback</code> fires.</p>\n\n\n\n<p>Now, the thing you have to worry about with clowns is that some of the humans you know and love (or the ones that you knew and loved before they turned into zombies) could secretly be clowns in disguise. I’ve set up a clown detector that looks at a group of humans and zombies and, when you click the &#8220;Reveal Clowns&#8221; button, the detector will (through completely scientific and totally trustworthy means that are <strong>not</strong> based on random numbers choosing an index) apply <code>data-clown=\"true\"</code> to the component. And when this attribute is applied, <code>attributeChangedCallback</code> fires and updates the component’s image to uncover their clownish colors.</p>\n\n\n\n<p>I should also note that the <code>attributeChangedCallback</code> takes three parameters:</p>\n\n\n\n<ul><li>the name of the attribute</li><li>the previous value of the attribute</li><li>the new value of the attribute</li></ul>\n\n\n\n<p>Further, the callback lets you make changes based on how much the attribute has changed, or based on the transition between two states.</p>\n\n\n\n<p>Here’s our <code>attributeChangedCallback</code> code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">attributeChangedCallback(name, oldValue, newValue) {\n  let image = this.shadowRoot.querySelector(\"img\");\n  // Ensures that `data-clown` was the attribute that changed,\n  // that its value is true, and that it had an image in its `shadowRoot`\n  if (name=\"data-clown\" &amp;&amp; this.dataset.clown &amp;&amp; image) {\n    // Setting and updating the counts of humans, zombies,\n    // and clowns on the page\n    let clowncount = document.getElementById(\"clown-count\"),\n    humancount = document.getElementById(\"human-count\"),\n    zombiecount = document.getElementById(\"zombie-count\");\n    if (image.src.indexOf(\"lady.png\") != -1) {\n      image.src = \"https://assets.codepen.io/1804713/ladyc.png\";\n      this.shadowRoot.appendChild(image);\n      // Update counts\n      clowncount.innerHTML = parseInt(clowncount.textContent) + 1;\n      humancount.innerHTML = parseInt(humancount.textContent) - 1;\n    } else if (image.src.indexOf(\"ladyz.png\") != -1) {\n      image.src = \"https://assets.codepen.io/1804713/ladyzc.png\";\n      this.shadowRoot.appendChild(image);\n      // Update counts\n      clowncount.innerHTML = parseInt(clowncount.textContent) + 1;\n      zombiecount.innerHTML = parseInt(zombiecount.textContent) - 1;\n    }\n  }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzrWdvW\" src=\"//codepen.io/anon/embed/YzrWdvW?height=900&amp;theme-id=1&amp;slug-hash=YzrWdvW&amp;default-tab=result\" height=\"900\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzrWdvW\" title=\"CodePen Embed YzrWdvW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And there you have it! Not only have we found out that web component callbacks and creating context-aware custom elements are easier than you may have thought, but detecting post-apocalyptic clowns, though terrifying, is also easier that you thought. What kind of devious, post-apocalyptic clowns can you detect with these web component callback functions?</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/context-aware-web-components/\">Context-Aware Web Components Are Easier Than You Think</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Another aspect of web components that we haven’t talked about yet is that a JavaScript function is called whenever a web component is added or removed from a page. These lifecycle callbacks can be used for many things, including making an element aware of its context.\n\n\n\n\n\n\n\nArticle series\n\n\n\nWeb Components Are Easier Than You ThinkInteractive Web Components Are Easier Than You ThinkUsing Web Components in WordPress is Easier Than You ThinkSupercharging Built-In Elements With Web Components “is” Easier Than You ThinkContext-Aware Web Components Are Easier Than You Think (You are here!)\n\n\n\nThe four lifecycle callbacks of web components\n\n\n\nThere are four lifecycle callbacks that can be used with web components:\n\n\n\nconnectedCallback: This callback fires when the custom element is attached to the element.disconnectedCallback: This callback fires when the element is removed from the document.adoptedCallback: This callback fires when the element is added to a new document.attributeChangedCallback: This callback fires when an attribute is changed, added or removed, as long as that attribute is being observed.\n\n\n\nLet’s look at each of these in action.\n\n\n\nOur post-apocalyptic person component\n\n\n\n\n\n\n\nWe’ll start by creating a web component called <postapocalyptic-person>. Every person after the apocalypse is either a human or a zombie and we’ll know which one based on a class — either .human or .zombie — that’s applied to the parent element of the <postapocalyptic-person> component. We won’t do anything fancy with it (yet), but we’ll add a shadowRoot we can use to attach a corresponding image based on that classification.\n\n\n\ncustomElements.define(\n  \"postapocalyptic-person\",\n  class extends HTMLElement {\n    constructor() {\n      super();\n      const shadowRoot = this.attachShadow({ mode: \"open\" });\n    }\n}\n\n\n\nOur HTML looks like this:\n\n\n\n<div class=\"humans\">\n  <postapocalyptic-person></postapocalyptic-person>\n</div>\n<div class=\"zombies\">\n  <postapocalyptic-person></postapocalyptic-person>\n</div>\n\n\n\nInserting people with connectedCallback\n\n\n\nWhen a <postapocalyptic-person> is loaded on the page, the connectedCallback() function is called.\n\n\n\nconnectedCallback() {\n  let image = document.createElement(\"img\");\n  if (this.parentNode.classList.contains(\"humans\")) {\n    image.src = \"https://assets.codepen.io/1804713/lady.png\";\n    this.shadowRoot.appendChild(image);\n  } else if (this.parentNode.classList.contains(\"zombies\")) {\n    image.src = \"https://assets.codepen.io/1804713/ladyz.png\";\n    this.shadowRoot.appendChild(image);\n  }\n}\n\n\n\nThis makes sure that an image of a human is output when the <postapocalyptic-person> is a human, and a zombie image when the component is a zombie.\n\n\n\nCodePen Embed Fallback\n\n\n\nBe careful working with connectedCallback. It runs more often than you might realize, firing any time the element is moved and could (baffling-ly) even run after the node is no longer connected — which can be an expensive performance cost. You can use this.isConnected to know whether the element is connected or not.\n\n\n\nCounting people with connectedCallback() when they are added\n\n\n\nLet’s get a little more complex by adding a couple of buttons to the mix. One will add a <postapocalyptic-person>, using a “coin flip” approach to decide whether it’s a human or a zombie. The other button will do the opposite, removing a <postapocalyptic-person> at random. We’ll keep track of how many humans and zombies are in view while we’re at it.\n\n\n\n<div class=\"btns\">\n  <button id=\"addbtn\">Add Person</button>\n  <button id=\"rmvbtn\">Remove Person</button> \n  <span class=\"counts\">\n    Humans: <span id=\"human-count\">0</span> \n    Zombies: <span id=\"zombie-count\">0</span>\n  </span>\n</div>\n\n\n\nHere’s what our buttons will do:\n\n\n\nlet zombienest = document.querySelector(\".zombies\"),\n  humancamp = document.querySelector(\".humans\");\n\ndocument.getElementById(\"addbtn\").addEventListener(\"click\", function () {\n  // Flips a \"coin\" and adds either a zombie or a human\n  if (Math.random() > 0.5) {\n    zombienest.appendChild(document.createElement(\"postapocalyptic-person\"));\n  } else {\n    humancamp.appendChild(document.createElement(\"postapocalyptic-person\"));\n  }\n});\ndocument.getElementById(\"rmvbtn\").addEventListener(\"click\", function () {\n  // Flips a \"coin\" and removes either a zombie or a human\n  // A console message is logged if no more are available to remove.\n  if (Math.random() > 0.5) {\n    if (zombienest.lastElementChild) {\n      zombienest.lastElementChild.remove();\n    } else {\n      console.log(\"No more zombies to remove\");\n    }\n  } else {\n    if (humancamp.lastElementChild) {\n      humancamp.lastElementChild.remove();\n    } else {\n      console.log(\"No more humans to remove\");\n    }\n  }\n});\n\n\n\nHere’s the code in connectedCallback() that counts the humans and zombies as they are added:\n\n\n\nconnectedCallback() {\n  let image = document.createElement(\"img\");\n  if (this.parentNode.classList.contains(\"humans\")) {\n    image.src = \"https://assets.codepen.io/1804713/lady.png\";\n    this.shadowRoot.appendChild(image);\n    // Get the existing human count.\n    let humancount = document.getElementById(\"human-count\");\n    // Increment it\n    humancount.innerHTML = parseInt(humancount.textContent) + 1;\n  } else if (this.parentNode.classList.contains(\"zombies\")) {\n    image.src = \"https://assets.codepen.io/1804713/ladyz.png\";\n    this.shadowRoot.appendChild(image);\n    // Get the existing zombie count.\n    let zombiecount = document.getElementById(\"zombie-count\");\n    // Increment it\n    zombiecount.innerHTML = parseInt(zombiecount.textContent) + 1;\n  }\n}\n\n\n\nUpdating counts with disconnectedCallback\n\n\n\nNext, we can use disconnectedCallback() to decrement the number as a humans and zombies are removed. However, we are unable to check the class of the parent element because the parent element with the corresponding class is already gone by the time disconnectedCallback is called. We could set an attribute on the element, or add a property to the object, but since the image’s src attribute is already determined by its parent element, we can use that as a proxy for knowing whether the web component being removed is a human or zombie.\n\n\n\ndisconnectedCallback() {\n  let image = this.shadowRoot.querySelector('img');\n  // Test for the human image\n  if (image.src == \"https://assets.codepen.io/1804713/lady.png\") {\n    let humancount = document.getElementById(\"human-count\");\n    humancount.innerHTML = parseInt(humancount.textContent) - 1; // Decrement count\n  // Test for the zombie image\n  } else if (image.src == \"https://assets.codepen.io/1804713/ladyz.png\") {\n    let zombiecount = document.getElementById(\"zombie-count\");\n    zombiecount.innerHTML = parseInt(zombiecount.textContent) - 1; // Decrement count\n  }\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nBeware of clowns!\n\n\n\nNow (and I’m speaking from experience here, of course) the only thing scarier than a horde of zombies bearing down on your position is a clown — all it takes is one! So, even though we’re already dealing with frightening post-apocalyptic zombies, let’s add the possibility of a clown entering the scene for even more horror. In fact, we’ll do it in such a way that there’s a possibility any human or zombie on the screen is secretly a clown in disguise!\n\n\n\nI take back what I said earlier: a single zombie clown is scarier than even a group of “normal” clowns. Let’s say that if any sort of clown is found — be it human or zombie — we separate them from the human and zombie populations by sending them to a whole different document — an <iframe> jail, if you will. (I hear that “clowning” may be even more contagious than zombie contagion.)\n\n\n\nAnd when we move a suspected clown from the current document to an <iframe>, it doesn’t destroy and recreate the original node; rather it adopts and connects said node, first calling adoptedCallback then connectedCallback.\n\n\n\nWe don’t need anything in the <iframe> document except a body with a .clowns class. As long as this document is in the iframe of the main document — not viewed separately — we don’t even need the <postapocalyptic-person> instantiation code. We’ll include one space for humans, another space for zombies, and yes, the clowns’s jail… errr… <iframe> of… fun.\n\n\n\n<div class=\"btns\">\n  <button id=\"addbtn\">Add Person</button>\n  <button id=\"jailbtn\">Jail Potential Clown</button>\n</div>\n<div class=\"humans\">\n  <postapocalyptic-person></postapocalyptic-person>\n</div>\n<div class=\"zombies\">\n  <postapocalyptic-person></postapocalyptic-person>\n</div>\n<iframe class=\"clowniframeoffun” src=\"adoptedCallback-iframe.html\">\n</iframe>\n\n\n\nOur “Add Person” button works the same as it did in the last example: it flips a digital coin to randomly insert either a human or a zombie. When we hit the “Jail Potential Clown” button another coin is flipped and takes either a zombie or a human, handing them over to <iframe> jail.\n\n\n\ndocument.getElementById(\"jailbtn\").addEventListener(\"click\", function () {\n  if (Math.random() > 0.5) {\n    let human = humancamp.querySelector('postapocalyptic-person');\n    if (human) {\n      clowncollege.contentDocument.querySelector('body').appendChild(document.adoptNode(human));\n    } else {\n      console.log(\"No more potential clowns at the human camp\");\n    }\n  } else {\n    let zombie = zombienest.querySelector('postapocalyptic-person');\n    if (zombie) {\n      clowncollege.contentDocument.querySelector('body').appendChild(document.adoptNode(zombie));\n    } else {\n      console.log(\"No more potential clowns at the zombie nest\");\n    }\n  }\n});\n\n\n\nRevealing clowns with adoptedCallback\n\n\n\nIn the adoptedCallback we’ll determine whether the clown is of the zombie human variety based on their corresponding image and then change the image accordingly. connectedCallback will be called after that, but we don’t have anything it needs to do, and what it does won’t interfere with our changes. So we can leave it as is.\n\n\n\nadoptedCallback() {\n  let image = this.shadowRoot.querySelector(\"img\");\n  if (this.parentNode.dataset.type == \"clowns\") {\n    if (image.src.indexOf(\"lady.png\") != -1) { \n      // Sometimes, the full URL path including the domain is saved in `image.src`.\n      // Using `indexOf` allows us to skip the unnecessary bits. \n      image.src = \"ladyc.png\";\n      this.shadowRoot.appendChild(image);\n    } else if (image.src.indexOf(\"ladyz.png\") != -1) {\n      image.src = \"ladyzc.png\";\n      this.shadowRoot.appendChild(image);\n    }\n  }\n}\n\n\n\n\n\n\n\nDetecting hidden clowns with attributeChangedCallback\n\n\n\nFinally, we have the attributeChangedCallback. Unlike the the other three lifecycle callbacks, we need to observe the attributes of our web component in order for the the callback to fire. We can do this by adding an observedAttributes() function to the custom element’s class and have that function return an array of attribute names.\n\n\n\nstatic get observedAttributes() {\n  return [“attribute-name”];\n}\n\n\n\nThen, if that attribute changes — including being added or removed — the attributeChangedCallback fires.\n\n\n\nNow, the thing you have to worry about with clowns is that some of the humans you know and love (or the ones that you knew and loved before they turned into zombies) could secretly be clowns in disguise. I’ve set up a clown detector that looks at a group of humans and zombies and, when you click the “Reveal Clowns” button, the detector will (through completely scientific and totally trustworthy means that are not based on random numbers choosing an index) apply data-clown=\"true\" to the component. And when this attribute is applied, attributeChangedCallback fires and updates the component’s image to uncover their clownish colors.\n\n\n\nI should also note that the attributeChangedCallback takes three parameters:\n\n\n\nthe name of the attributethe previous value of the attributethe new value of the attribute\n\n\n\nFurther, the callback lets you make changes based on how much the attribute has changed, or based on the transition between two states.\n\n\n\nHere’s our attributeChangedCallback code:\n\n\n\nattributeChangedCallback(name, oldValue, newValue) {\n  let image = this.shadowRoot.querySelector(\"img\");\n  // Ensures that `data-clown` was the attribute that changed,\n  // that its value is true, and that it had an image in its `shadowRoot`\n  if (name=\"data-clown\" && this.dataset.clown && image) {\n    // Setting and updating the counts of humans, zombies,\n    // and clowns on the page\n    let clowncount = document.getElementById(\"clown-count\"),\n    humancount = document.getElementById(\"human-count\"),\n    zombiecount = document.getElementById(\"zombie-count\");\n    if (image.src.indexOf(\"lady.png\") != -1) {\n      image.src = \"https://assets.codepen.io/1804713/ladyc.png\";\n      this.shadowRoot.appendChild(image);\n      // Update counts\n      clowncount.innerHTML = parseInt(clowncount.textContent) + 1;\n      humancount.innerHTML = parseInt(humancount.textContent) - 1;\n    } else if (image.src.indexOf(\"ladyz.png\") != -1) {\n      image.src = \"https://assets.codepen.io/1804713/ladyzc.png\";\n      this.shadowRoot.appendChild(image);\n      // Update counts\n      clowncount.innerHTML = parseInt(clowncount.textContent) + 1;\n      zombiecount.innerHTML = parseInt(zombiecount.textContent) - 1;\n    }\n  }\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nAnd there you have it! Not only have we found out that web component callbacks and creating context-aware custom elements are easier than you may have thought, but detecting post-apocalyptic clowns, though terrifying, is also easier that you thought. What kind of devious, post-apocalyptic clowns can you detect with these web component callback functions?\n\nContext-Aware Web Components Are Easier Than You Think originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-21T14:08:05.000Z",
      "date_modified": "2022-01-21T14:08:05.000Z",
      "_plugin": {
        "pageFilename": "c53b25c4d1e20b0f265b82dcbf7dfaa468bd1b7b7817faf124e2425ce9b4a98e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361210",
      "url": "https://css-tricks.com/a-complete-beginners-guide-to-npm/",
      "title": "A Complete Beginner’s Guide to npm",
      "summary": "(This is a sponsored post.)\nI remember vividly a period early in my coding career when I began to feel that things were changing away from what I knew, and headed towards a more complex set of tools and …\n\nA Complete Beginner’s Guide to npm originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>I remember vividly a period early in my coding career when I began to feel that things were changing away from what I knew, and headed towards a more complex set of tools and practices, anchored in the command line and something called <a href=\"https://www.npmjs.com/\" rel=\"noopener\">npm</a>.</p>\n\n\n\n<p>This is the first part of a beginner’s guide where we cover the broad topic of Node Package Manager, or npm. We often take those three little letters—npm—for granted as we type them into the command line, but npm is part of a much larger ecosystem that can often be intimidating or confusing to anyone jumping in for the first time. This guide will help de-mystify that ecosystem and help you not only understand what npm is and does, but ultimately feel comfortable working with it.</p>\n\n\n\n<span id=\"more-361210\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"#aa-who-the-heck-is-this-guide-for\">Who the Heck is This Guide For?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"512\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=1024%2C512&#038;ssl=1\" alt=\"The npm logo in white against a gradient background tat goes from bright red to orange from left to right to kick off this npm guide.\" class=\"wp-image-285418\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=1000%2C500&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?w=1200&amp;ssl=1 1200w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Modern <a href=\"https://css-tricks.com/front-of-the-front-back-of-the-front/\">“back-of-the-front-end” development</a>—which npm is a part of—seems complex because it’s one name for lots of interconnected tools. When you add in the fact that the front-end world seems to move much more quickly than it actually does, producing a feeling that you will be left behind for not jumping on the newest thing right away, everything about it can seem unapproachable.</p>\n\n\n\n<p>That’s why we’re starting this guide—to make the technology more accessible for you to use in your own work.</p>\n\n\n\n<h3>Who the heck is this guide for?</h3>\n\n\n\n<p>In my own personal development learning journey, I would read guides about technologies that excited me, then get to a part that said “just <code>npm install</code>&#8221; this or that, and I’d heave yet another disappointed sigh and give up on using whatever that cool-looking thing was. Or, on more adventurous days, I might copy the command, but then inevitably end up either at another step I didn’t understand (“just,” they always said, “do [some thing I had no idea about]”), or get an error message the guide didn’t explain that stops me in my tracks.</p>\n\n\n\n<p><strong>Whatever npm was—whatever those commands did and wherever you were supposed to type them—nobody had ever taken the time to explain it to me.</strong> And the more I read guides written by people who took that knowledge for granted, the more I felt isolated.</p>\n\n\n\n<p><strong>If any of that sounds familiar: this series is for you</strong>.</p>\n\n\n\n<p>You most likely fall well within the group that’s been described in recent years as “<a href=\"https://bradfrost.com/blog/post/front-of-the-front-end-and-back-of-the-front-end-web-development/\" rel=\"noopener\">front-of-the-front-end</a>.” Like me, you probably know your stuff when it comes to HTML and CSS. Maybe you also know some JavaScript, either “vanilla” JavaScript, or by way of jQuery. Either way is fine, both for the purposes of this article and in general.</p>\n\n\n\n<p>Maybe you’ve even tried out a framework like React or Vue, but you mostly just copied and pasted some stuff to get your project up and running, and weren’t exactly sure what that stuff actually <em>did.</em></p>\n\n\n\n<ul><li><strong>This post is for you</strong> if you sense <a href=\"https://css-tricks.com/the-great-divide/\">The Great Divide</a> between the more traditional and &#8220;modern&#8221; definitions of front-end development—and if you worry that you might be hurting your career if you don&#8217;t bridge that chasm.</li><li><strong>This post is for you</strong> if you aren’t really sure what all the fuss about terminals and command lines is about, and you’d much prefer to just never touch one at all.</li><li><strong>This post is for you</strong> if you wonder why other developers seem to love making things <em>so damn complicated</em>, and what the point of all that command line junk is in the first place, when you could just write plain, simple HTML, CSS and JavaScript instead.</li><li><strong>This post is for you</strong> if you feel left out. If you sense there&#8217;s some <em>thing,</em> some <em>really big thing</em>, that nobody’s ever really bothered explaining to you, and you’re worried you’re the only one who doesn’t get it.</li></ul>\n\n\n\n<p>Know this, my fellow front-end developer: <strong>you are not alone.</strong> You are far from it. You are exactly where I was not so long ago, and the unsettled memory of that place is still fresh in my mind.</p>\n\n\n\n<p>Let me try to answer the questions you probably have—the same ones that I had—in the way I wish somebody would have for me, before I even knew how to ask them.</p>\n\n\n\n<h3>What is covered in this guide</h3>\n\n\n\n<p>This guide is a series of articles. That’s not because this stuff is extremely difficult to understand in and of itself; it’s because there are many parts to it, and each one bears explanation on its own. This is wide territory with a number of rabbit holes to explore. Focusing on one solid step at a time allows us to spend time on making things clear and understandable. The goal isn&#8217;t to cover everything, but I do want to be more thorough than quick.</p>\n\n\n\n<p>We’ll start by talking about the current lay of the land; what npm is, a bit about where it came from, and how we got here. From there, we’ll cover what Node itself is, followed by what package managers are in general, before actually working with npm. We’ll finish by installing Node and npm (if they’re not already), initializing a project to get an idea of how it works, and finally, installing a real-life npm project from GitHub with all its packages and commands.</p>\n\n\n\n<p>Some (or all) of that may sound very intimidating right now, but don’t worry. That’s why we’re spending the length of an entire guide together.</p>\n\n\n\n<h3>What to know before we begin</h3>\n\n\n\n<p>I&#8217;ll do my best to assume as little as possible about you, beyond that you are a web developer who generally knows how to build a website with HTML and CSS. You won’t need to know much about JavaScript or write any for the purposes of following this guide, but it will definitely help if you have at least a foundational understanding of what JavaScript is and how it works.</p>\n\n\n\n<p>JSON is the only other bit it might be helpful to know before getting started. If you’re unfamiliar with JSON, it might be worth glancing over this <a href=\"https://www.w3schools.com/whatis/whatis_json.asp\" rel=\"noopener\">guide to JSON</a>, or at least having it ready for when we do get to that part.</p>\n\n\n\n<p>Beyond that, I may reference specific tools, projects, and frameworks like <a href=\"https://getbootstrap.com\" rel=\"noopener\">Bootstrap</a>, <a href=\"https://reactjs.org\" rel=\"noopener\">React</a>, <a href=\"http://vuejs.org\" rel=\"noopener\">Vue</a> and <a href=\"https://kit.svelte.dev\" rel=\"noopener\">SvelteKit</a>, but I won’t assume you have any any hands-on experience with them whatsoever, nor will I assume that you’ve ever used npm or the command line before.</p>\n\n\n\n<p>Ready to get started? Let’s begin by clarifying what we mean by &#8220;npm,&#8221; such as what it stands for and how it fits into modern web development.</p>\n\n\n\n<div class=\"wp-container-61f87aa1ee653 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">Chapter 2 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm/\">A Complete Beginner&#8217;s Guide to npm</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "(This is a sponsored post.)\nI remember vividly a period early in my coding career when I began to feel that things were changing away from what I knew, and headed towards a more complex set of tools and practices, anchored in the command line and something called npm.\n\n\n\nThis is the first part of a beginner’s guide where we cover the broad topic of Node Package Manager, or npm. We often take those three little letters—npm—for granted as we type them into the command line, but npm is part of a much larger ecosystem that can often be intimidating or confusing to anyone jumping in for the first time. This guide will help de-mystify that ecosystem and help you not only understand what npm is and does, but ultimately feel comfortable working with it.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For? (You are here!)What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\n\n\n\n\nModern “back-of-the-front-end” development—which npm is a part of—seems complex because it’s one name for lots of interconnected tools. When you add in the fact that the front-end world seems to move much more quickly than it actually does, producing a feeling that you will be left behind for not jumping on the newest thing right away, everything about it can seem unapproachable.\n\n\n\nThat’s why we’re starting this guide—to make the technology more accessible for you to use in your own work.\n\n\n\nWho the heck is this guide for?\n\n\n\nIn my own personal development learning journey, I would read guides about technologies that excited me, then get to a part that said “just npm install” this or that, and I’d heave yet another disappointed sigh and give up on using whatever that cool-looking thing was. Or, on more adventurous days, I might copy the command, but then inevitably end up either at another step I didn’t understand (“just,” they always said, “do [some thing I had no idea about]”), or get an error message the guide didn’t explain that stops me in my tracks.\n\n\n\nWhatever npm was—whatever those commands did and wherever you were supposed to type them—nobody had ever taken the time to explain it to me. And the more I read guides written by people who took that knowledge for granted, the more I felt isolated.\n\n\n\nIf any of that sounds familiar: this series is for you.\n\n\n\nYou most likely fall well within the group that’s been described in recent years as “front-of-the-front-end.” Like me, you probably know your stuff when it comes to HTML and CSS. Maybe you also know some JavaScript, either “vanilla” JavaScript, or by way of jQuery. Either way is fine, both for the purposes of this article and in general.\n\n\n\nMaybe you’ve even tried out a framework like React or Vue, but you mostly just copied and pasted some stuff to get your project up and running, and weren’t exactly sure what that stuff actually did.\n\n\n\nThis post is for you if you sense The Great Divide between the more traditional and “modern” definitions of front-end development—and if you worry that you might be hurting your career if you don’t bridge that chasm.This post is for you if you aren’t really sure what all the fuss about terminals and command lines is about, and you’d much prefer to just never touch one at all.This post is for you if you wonder why other developers seem to love making things so damn complicated, and what the point of all that command line junk is in the first place, when you could just write plain, simple HTML, CSS and JavaScript instead.This post is for you if you feel left out. If you sense there’s some thing, some really big thing, that nobody’s ever really bothered explaining to you, and you’re worried you’re the only one who doesn’t get it.\n\n\n\nKnow this, my fellow front-end developer: you are not alone. You are far from it. You are exactly where I was not so long ago, and the unsettled memory of that place is still fresh in my mind.\n\n\n\nLet me try to answer the questions you probably have—the same ones that I had—in the way I wish somebody would have for me, before I even knew how to ask them.\n\n\n\nWhat is covered in this guide\n\n\n\nThis guide is a series of articles. That’s not because this stuff is extremely difficult to understand in and of itself; it’s because there are many parts to it, and each one bears explanation on its own. This is wide territory with a number of rabbit holes to explore. Focusing on one solid step at a time allows us to spend time on making things clear and understandable. The goal isn’t to cover everything, but I do want to be more thorough than quick.\n\n\n\nWe’ll start by talking about the current lay of the land; what npm is, a bit about where it came from, and how we got here. From there, we’ll cover what Node itself is, followed by what package managers are in general, before actually working with npm. We’ll finish by installing Node and npm (if they’re not already), initializing a project to get an idea of how it works, and finally, installing a real-life npm project from GitHub with all its packages and commands.\n\n\n\nSome (or all) of that may sound very intimidating right now, but don’t worry. That’s why we’re spending the length of an entire guide together.\n\n\n\nWhat to know before we begin\n\n\n\nI’ll do my best to assume as little as possible about you, beyond that you are a web developer who generally knows how to build a website with HTML and CSS. You won’t need to know much about JavaScript or write any for the purposes of following this guide, but it will definitely help if you have at least a foundational understanding of what JavaScript is and how it works.\n\n\n\nJSON is the only other bit it might be helpful to know before getting started. If you’re unfamiliar with JSON, it might be worth glancing over this guide to JSON, or at least having it ready for when we do get to that part.\n\n\n\nBeyond that, I may reference specific tools, projects, and frameworks like Bootstrap, React, Vue and SvelteKit, but I won’t assume you have any any hands-on experience with them whatsoever, nor will I assume that you’ve ever used npm or the command line before.\n\n\n\nReady to get started? Let’s begin by clarifying what we mean by “npm,” such as what it stands for and how it fits into modern web development.\n\n\n\n\nChapter 2 →\n\n\nA Complete Beginner’s Guide to npm originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:07:32.000Z",
      "date_modified": "2022-01-20T15:07:32.000Z",
      "_plugin": {
        "pageFilename": "c3ec78e452240cc716b56c68b425503537b7ac566efdb2cebdd38b0a3b7a1969.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361214",
      "url": "https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does/",
      "title": "What the Heck Does “npm” Mean?",
      "summary": "One of the things that makes this new, tooling-heavy era of front-end development so seemingly hard to understand at first is that, while we often call things by a singular name, they tend to be actually comprised of several different …\n\nWhat the Heck Does “npm” Mean? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>One of the things that makes this new, tooling-heavy era of front-end development so seemingly hard to understand at first is that, while we often <em>call</em> things by a singular name, they tend to be actually comprised of several different interconnected pieces. The same is true for npm and the ecosystem around it.</p>\n\n\n\n<p>For example: Think of how we casually refer to “the internet,” even though the web itself is not a single, unified thing, but a collection of protocols, DNS, servers, browsers, networks, requests and responses, plus lots of other things assembled over years of iterations. For that matter, even the browser itself is one machine with many parts.</p>\n\n\n\n<span id=\"more-361214\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>npm is a collection of technologies</h3>\n\n\n\n<p>In that same way, what we generally think of as “npm” (yes, <a href=\"https://github.com/npm/cli#faq-on-branding\" rel=\"noopener\">all lowercase</a>) and “back-of-the-front-end” in particular is a single name for a collection of many different individual technologies and systems; a sort of <a href=\"https://en.wikipedia.org/wiki/Rube_Goldberg_machine\" rel=\"noopener\">Rube Goldberg machine</a> to generate browser-friendly code.</p>\n\n\n\n<p>I mentioned the command line already; that’s a big part of the ecosystem because it’s how we interact with it. But more on that in the <a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">next chapter</a>.</p>\n\n\n\n<p>And then there’s npm, which is in a category known as “package management” software. We’ll cover that as well. In fact, you&#8217;ll likely see me refer to npm as a package manager throughout this guide.</p>\n\n\n\n<p>And finally, there’s <a href=\"https://nodejs.org/\" rel=\"noopener\">Node</a> itself, which is so tricky to explain succinctly I often describe it by paraphrasing <a href=\"https://douglasadams.com\" rel=\"noopener\">Douglas Adams</a>: it&#8217;s a programming language that’s almost—but not quite—entirely like JavaScript.</p>\n\n\n\n<h3>npm manages project tools</h3>\n\n\n\n<p>To further muddy the waters, many projects where you type <code>npm install</code> into the command line might come with pre-installed tools to help you do a wide variety of things in your project, like process your code (e.g., turn Sass code into CSS). There are many all-in-one, preconfigured projects out there just waiting for you to install them and get started (<a href=\"https://create-react-app.dev/\" rel=\"noopener\">Create React App</a>, <a href=\"https://nextjs.org/\" rel=\"noopener\">Next</a>, <a href=\"https://nuxtjs.org/\" rel=\"noopener\">Nuxt</a>, and <a href=\"https://kit.svelte.dev/\" rel=\"noopener\">SvelteKit</a>, to name a few). This is convenient when done well, of course, but it&#8217;s also added complexity—meaning many more names we need to add to our list of back-of-the-front-end things.</p>\n\n\n\n<p>This list often includes tools like <a href=\"https://babeljs.io\" rel=\"noopener\">Babel</a> (for compiling JavaScript), <a href=\"https://babeljs.io\" rel=\"noopener\">Sass</a> (for compiling CSS), <a href=\"https://webpack.js.org\" rel=\"noopener\">webpack</a> (for asset bundling), <a href=\"https://vitejs.dev\" rel=\"noopener\">Vite</a> (for development servers and other tooling), <a href=\"https://postcss.org\" rel=\"noopener\">PostCSS</a> (for transforming one syntax into another); <a href=\"https://autoprefixer.github.io\" rel=\"noopener\">Autoprefixer</a> (which can be a PostCSS plugin for CSS vendor prefixes); <a href=\"https://www.typescriptlang.org\" rel=\"noopener\">TypeScript</a> (for additional JavaScript syntax); <a href=\"https://eslint.org\" rel=\"noopener\">ESlint</a> (for checking code quality); <a href=\"https://prettier.io\" rel=\"noopener\">Prettier</a> (for formatting code), and testing libraries like <a href=\"https://jestjs.io\" rel=\"noopener\">Jest</a> or <a href=\"https://www.cypress.io\" rel=\"noopener\">Cypress</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1200\" height=\"600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=1200%2C600&#038;ssl=1\" alt=\"The stark stark white interior of a library building with multiple floors and bookcases filled with brightly colored books, illustrating how npm manages front-end development tools.\" class=\"wp-image-361219\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>npm is like a library building with floors of book collections that are organized, making things easier to find and manage. (Photo: <a href=\"https://unsplash.com/@leonardo_64?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Johannes Mändle</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/s/photos/library?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Unsplash</a>)</figcaption></figure>\n\n\n\n<p>All those things (and more) fall into this broad, general category of tools that often come <em>with</em> npm-installed projects—or that can be installed and used via npm—but are not actually part of npm itself. They’re just examples of modern tools that help us do nice things with our code, and I mention them here only because it’s worth noting the distinction, to get a sense of where the boundaries lie in this large, new world.</p>\n\n\n\n<p>And by the way, if you didn’t know what most (or <em>any</em>) of those tools mentioned above are, that’s ok. Maybe you haven’t come across them yet, or maybe you’ve worked on a project that had them installed without knowing them by name. Either way, all of this is merely for additional context.</p>\n\n\n\n<h3>Let’s break here</h3>\n\n\n\n<p>If you’re already feeling a bit overwhelmed at this point: don’t sweat it. The key thing I want you to walk away with after reading this specific chapter is that what we think of as “npm” (or maybe more casually as “all that command line, back-end-y stuff”) is not really one thing, but a collection of things that work together to make development easier for us.</p>\n\n\n\n<p>And yes: while all that complication seems intimidating up-front, it <em>does</em> actually make things better. I promise.</p>\n\n\n\n<p>While front-end <em>seems</em> to move very quickly, <strong>no, you have not been left behind</strong>. You may just have a bit of continuing education to get caught up on.</p>\n\n\n\n<div class=\"wp-container-61f727ec20486 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">← Chapter 1</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">Chapter 3 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does/\">What the Heck Does “npm” Mean?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "One of the things that makes this new, tooling-heavy era of front-end development so seemingly hard to understand at first is that, while we often call things by a singular name, they tend to be actually comprised of several different interconnected pieces. The same is true for npm and the ecosystem around it.\n\n\n\nFor example: Think of how we casually refer to “the internet,” even though the web itself is not a single, unified thing, but a collection of protocols, DNS, servers, browsers, networks, requests and responses, plus lots of other things assembled over years of iterations. For that matter, even the browser itself is one machine with many parts.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean? (You are here!)What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\nnpm is a collection of technologies\n\n\n\nIn that same way, what we generally think of as “npm” (yes, all lowercase) and “back-of-the-front-end” in particular is a single name for a collection of many different individual technologies and systems; a sort of Rube Goldberg machine to generate browser-friendly code.\n\n\n\nI mentioned the command line already; that’s a big part of the ecosystem because it’s how we interact with it. But more on that in the next chapter.\n\n\n\nAnd then there’s npm, which is in a category known as “package management” software. We’ll cover that as well. In fact, you’ll likely see me refer to npm as a package manager throughout this guide.\n\n\n\nAnd finally, there’s Node itself, which is so tricky to explain succinctly I often describe it by paraphrasing Douglas Adams: it’s a programming language that’s almost—but not quite—entirely like JavaScript.\n\n\n\nnpm manages project tools\n\n\n\nTo further muddy the waters, many projects where you type npm install into the command line might come with pre-installed tools to help you do a wide variety of things in your project, like process your code (e.g., turn Sass code into CSS). There are many all-in-one, preconfigured projects out there just waiting for you to install them and get started (Create React App, Next, Nuxt, and SvelteKit, to name a few). This is convenient when done well, of course, but it’s also added complexity—meaning many more names we need to add to our list of back-of-the-front-end things.\n\n\n\nThis list often includes tools like Babel (for compiling JavaScript), Sass (for compiling CSS), webpack (for asset bundling), Vite (for development servers and other tooling), PostCSS (for transforming one syntax into another); Autoprefixer (which can be a PostCSS plugin for CSS vendor prefixes); TypeScript (for additional JavaScript syntax); ESlint (for checking code quality); Prettier (for formatting code), and testing libraries like Jest or Cypress.\n\n\n\nnpm is like a library building with floors of book collections that are organized, making things easier to find and manage. (Photo: Johannes Mändle on Unsplash)\n\n\n\nAll those things (and more) fall into this broad, general category of tools that often come with npm-installed projects—or that can be installed and used via npm—but are not actually part of npm itself. They’re just examples of modern tools that help us do nice things with our code, and I mention them here only because it’s worth noting the distinction, to get a sense of where the boundaries lie in this large, new world.\n\n\n\nAnd by the way, if you didn’t know what most (or any) of those tools mentioned above are, that’s ok. Maybe you haven’t come across them yet, or maybe you’ve worked on a project that had them installed without knowing them by name. Either way, all of this is merely for additional context.\n\n\n\nLet’s break here\n\n\n\nIf you’re already feeling a bit overwhelmed at this point: don’t sweat it. The key thing I want you to walk away with after reading this specific chapter is that what we think of as “npm” (or maybe more casually as “all that command line, back-end-y stuff”) is not really one thing, but a collection of things that work together to make development easier for us.\n\n\n\nAnd yes: while all that complication seems intimidating up-front, it does actually make things better. I promise.\n\n\n\nWhile front-end seems to move very quickly, no, you have not been left behind. You may just have a bit of continuing education to get caught up on.\n\n\n\n\n← Chapter 1\n\n\n\nChapter 3 →\n\n\nWhat the Heck Does “npm” Mean? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:04:15.000Z",
      "date_modified": "2022-01-20T15:04:15.000Z",
      "_plugin": {
        "pageFilename": "4604248a12b2dc290d40a9f9e5064fe4b9e9eb0158ceeb86c9d7b846e911a299.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361226",
      "url": "https://css-tricks.com/a-deep-look-at-the-command-line/",
      "title": "What the Heck is the Command Line?",
      "summary": "Now that we know what npm stands for and have a super general idea of what it does and how it fits into web development, we ought to spend a little bit of time looking at the command line, because …\n\nWhat the Heck is the Command Line? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Now that we know <a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">what npm stands for</a> and have a super general idea of what it does and how it fits into web development, we ought to spend a little bit of time looking at the command line, because it’s how we interact with npm.</p>\n\n\n\n<span id=\"more-361226\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>An overview of the command line</h3>\n\n\n\n<p>The command line is a place we can type (predictably enough) <em>commands</em> to be executed directly by our computer. It’s extremely fast, and allows greater admin permissions than most apps that attempt to handle the command line for you. Need to install something on your system, or perhaps update it? The command line can do that, not to mention uninstall them, too. Heck, even server-side languages can run on the command line, opening up a wide range of tools and development techniques.</p>\n\n\n\n<p>It’s for those reasons the command line is considered an indispensable tool for many developers. Even if you&#8217;re not a developer, odds are you’ve encountered the command line at some point. Maybe you’ve accessed it when you opened the Terminal app in MacOS. Maybe you’ve used one built directly into your code editor—<a href=\"https://code.visualstudio.com/\" rel=\"noopener\">VS Code</a> and many other code editors come with integrated terminal. Perhaps you’ve even come across third-party terminal apps like <a href=\"https://iterm2.com/\" rel=\"noopener\">iTerm</a> or <a href=\"https://hyper.is/\" rel=\"noopener\">Hyper</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1200\" height=\"600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=1200%2C600&#038;ssl=1\" alt=\"A collage of screenshots showing a terminal and the command line in different applications.\" class=\"wp-image-361228\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you&#8217;ve used the terminal, it&#8217;s possible that much of your command line usage to this point has simply been typing (or pasting) commands somebody else gave you. That’s fine; that’s often how we get things done.</p>\n\n\n\n<p>But let’s take a moment to understand exactly what the command line <em>is,</em> and why it’s so broadly used.</p>\n\n\n\n<h3>Command line vs. terminal</h3>\n\n\n\n<p>The “command line” and the “terminal” are technically two different and distinct things, but are often used interchangeably. You may also hear the command line called a “shell” or see it abbreviated as “CLI” which is short for “command line interface.”</p>\n\n\n\n<p>Pedantic distinctions aside, the terms are often used to mean pretty much the same thing. So just to keep things as simple as possible, I&#8217;ll be using them interchangeably from here on out.</p>\n\n\n\n<h3>Opening the command line</h3>\n\n\n\n<p>Whatever you want to call it, you probably know the command line as that scary-looking window, perhaps with a dark background and white (sometimes greenish) text, where you type commands that your computer seems to understand, even if you do not.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1836\" height=\"1072\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=1836%2C1072&#038;ssl=1\" alt=\"Screenshot of a blank open terminal window with a dark background.\" class=\"wp-image-361447\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?w=1836&amp;ssl=1 1836w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=300%2C175&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=1024%2C598&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=768%2C448&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=1536%2C897&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=1000%2C584&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>By default, a terminal window probably looks something like this, though its appearance can vary.</figcaption></figure>\n\n\n\n<p>Depending on where and how you&#8217;re working on the command line, one of the first things you might notice is an inconspicuous dollar sign character, <code>$</code>, that’s displayed on the first line where you’re able to start typing. You may have even seen it in other articles or documentation.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1532\" height=\"624\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=1532%2C624&#038;ssl=1\" alt=\"This screenshot of Vue’s documentation for using npm includes the $ character in a command example.\" class=\"wp-image-361445\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?w=1532&amp;ssl=1 1532w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=300%2C122&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=1024%2C417&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=768%2C313&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=1000%2C407&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It’s common convention to prefix commands with a <code>$</code> character—but it’s a confusing convention for sure. That’s because there’s no need to type it. It’s literally <em>not</em> part of the command. Instead, <code>$</code> signifies a command that’s meant to be run in a terminal.</p>\n\n\n\n<p>So here’s the first rule to know about working with the command line: if you find yourself typing or copying an instruction that includes the <code>$</code> character, know that there is no need to include it in your work; the terminal’s got it covered.</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">## No need to copy the $\n$ npm run build</code></pre>\n\n\n\n<p>You may see something else beginning a line instead of <code>$</code>, like <code>&gt;</code>, <code>_</code> , or even an arrow. Again, whatever it is, it’s almost certainly not meant to be typed or pasted directly into the command line. Whether or not documentation or other tutorials should include the starting character of a line is an entirely different conversation (one that <a href=\"https://css-tricks.com/to-or-not-to-displaying-terminal-code-snippets/\">Chris has discussed at length</a>). Either way, it has the potential to be confusing, so I want to make sure that’s called out.</p>\n\n\n\n<h3>What does the command line do?</h3>\n\n\n\n<p>Movies and TV shows often portray a terminal as something fast-typing hackers use in a dark, secluded room. That’s partly just because it makes for good entertainment for folks who probably wouldn’t know a real terminal from the cascading letters in <em>The Matrix</em>. (Nor should they; I couldn’t tell if a surgery portrayed on a TV show is accurate, and am perfectly content leaving that distinction to the professionals.)</p>\n\n\n\n<p>But the command line isn’t exactly for writing code. As the name “command line” implies, it&#8217;s for writing <em>commands.</em> I suppose you could say that <em>all</em> coding is commands to some extent, so this is admittedly a bit of a blurry line. But generally speaking, code in a terminal is written differently than it is in a code editor. Instead, you use the terminal to boss your computer around with commands you want it to run <em>immediately</em>.</p>\n\n\n\n<h3>The advantages of the command line</h3>\n\n\n\n<p>You may wonder why developers like to work in the command line in the first place. You might prefer a nice app, or graphical user interface (GUI for short, sometimes pronounced “gooey”) where you can <em>see</em> all your options and find the best one visually. That’s perfectly fine, and we’ll talk a bit about GUIs in this chapter and provide examples of them.</p>\n\n\n\n<p>Many developers feel that way, even if it doesn’t seem like it. But working within the command line brings some advantages that aren’t always easy to replicate in a visual app.</p>\n\n\n\n<h4>It grants you god-like system privileges</h4>\n\n\n\n<p>The command line is what computer science-y people refer to as a “privileged environment.” That might sound like it refers to a Yale frat house, but it just means it’s a place where there are very few restrictions on what you are allowed to do; a place without guardrails.</p>\n\n\n\n<p>This is where the command line’s daunting reputation comes from—whatever command you type, as far as it’s valid, is executed immediately and, often, irreversibly. It’s capable of interacting with the hidden files your operating system tries to prevent you from editing. You have the <em>power</em> to access anything in the system. You even have the power to interact with similar core files on a remote server—and we all know the adage that great responsibility comes with that kind of power.</p>\n\n\n\n<p>It might be helpful to think of the command line like a lazy security guard. It assumes you <em>always</em> know what you’re doing and lets you right through the entrance. That makes it a bit risky, yes, but it also makes it very powerful, and the perfect choice for certain tasks and projects.</p>\n\n\n\n<h4>It’s super fast</h4>\n\n\n\n<p>Another advantage the command line has over typical apps is: <strong>it’s fast</strong>.</p>\n\n\n\n<p>This isn’t always the case; the command line’s speed tends to be overstated and depends largely on the task in question. But when it <em>is</em> faster, it can often be <em>many times</em> faster. Plus, the place where the command line really shines tends to be exactly the place where code projects need speed the most, which is downloading and creating files.</p>\n\n\n\n<p>As we’ll see in other chapters of this guide, a key part of what npm does is install things on your machine (usually in a folder that’s designated for the project you’re working on). That’s what makes the command line great for working with a package manager (we&#8217;ll get to what that means, too) like npm—it downloads and transmits files between computers—generally much, <em>much</em> faster than, say, using a browser to do it.</p>\n\n\n\n<p>The command line enables npm to generate tons of files with incredible speed. The ability to run a single command that installs, updates, or deletes those files together in one fell swoop at high speed makes the terminal the fastest, most efficient tool for many jobs.</p>\n\n\n\n<h4>It does what other languages cannot</h4>\n\n\n\n<p>One more other reason working in the terminal is so advantageous is that it’s the place where many of the tools you might want to use in your project are already available to you without any additional setup.</p>\n\n\n\n<p>But let’s back up a bit.</p>\n\n\n\n<p>When you hear the phrase “server-side language,” you might think of PHP, Ruby, or Java. Maybe it’s even newer entries into the space, like Rust or Go. You might even already know that Node belongs on that list, but if not, forgive me for jumping ahead just a bit.</p>\n\n\n\n<p>Anyway, when most people think of server-side languages like these, they tend to think of a web server waiting for requests and then responding to them. WordPress, for example, sits idle until it receives a request that fires up PHP. When you send a new tweet, that’s a request on Twitter&#8217;s servers that eventually hits a Ruby method in Rails.</p>\n\n\n\n<p>Server-side languages are rightly considered more powerful, so to speak, than web languages. HTML, CSS, and JavaScript are wonderful, but they can’t work with a file system, send email, process images, issue system commands, interact with the operating system, or run scheduled tasks; among many, many other things an app or website might need to do. By default, JavaScript in the browser can’t even <em>run</em> unless somebody is actively looking at the web page in their browser.</p>\n\n\n\n<p>It’s normal to think of server-side languages as the powerful engine behind more robust apps and software. And, in many cases, that’s accurate. But let’s take a moment to recognize that for the purpose of running code, <em>your machine is a server.</em> Not a <em>web</em> server although (it <em>could</em> be one, but that would be weird and probably unwise). But a server, nonetheless.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"800\" height=\"600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/r_1963500_fWs1u.jpg?resize=800%2C600&#038;ssl=1\" alt=\"A photo of a laptop that is half-closed with a sheet of paper from a yellow legal pad that says This 9s a server (yes, really), do not close the lid!\" class=\"wp-image-361231\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/r_1963500_fWs1u.jpg?w=800&amp;ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/r_1963500_fWs1u.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/r_1963500_fWs1u.jpg?resize=768%2C576&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>You probably don’t think of your machine as a server—nor should you. But it can run server-side programming languages.</figcaption></figure>\n\n\n\n<p>You can install and run any of the server-side languages we&#8217;ve mentioned, and perhaps you’ve already even done so at some point (or at least tried to). You might have installed PHP so you can run WordPress (though these days there are much <a href=\"https://css-tricks.com/using-local-with-flywheel/\">nicer ways to do it</a>), or you may have installed Ruby so that you could follow some tutorials about Rails, just as examples.</p>\n\n\n\n<p>Or, maybe not. Maybe you’ve never installed a whole dang programming language before. Either way, just know that these languages run <em>on a server</em> rather than a web browser—and for that purpose, your machine is a server.</p>\n\n\n\n<p>Beyond that, many of the tools you might want to use with your development workflow—things like Sass for compiling CSS—actually <em>run</em> on server-side languages. So using the command line puts you in the place where all the most powerful tools are readily available.</p>\n\n\n\n<h3>Using an app instead of the command line</h3>\n\n\n\n<p>We briefly touched on GUIs earlier in this article. It’s worth noting that some command line tasks have corresponding GUIs that make working with the command line more visual and programmatic.</p>\n\n\n\n<p>Good examples include <a href=\"https://desktop.github.com/\" rel=\"noopener\">GitHub Desktop</a> (for managing code repositories) and <a href=\"https://codekitapp.com/\" rel=\"noopener\">CodeKit</a> (for processing, bundling and compiling assets), though the Source Control tab in VS Code also qualifies. Even though GUIs like these are generally focused on specific duties, they let you get things done through a nice visual user interface, in an actual app window that’s outside of the terminal window.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1892\" height=\"1312\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=1892%2C1312&#038;ssl=1\" alt=\"Screenshot of the CodeKit app after running ESlint showing how an app can visualize the command line.\" class=\"wp-image-361234\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?w=1892&amp;ssl=1 1892w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=300%2C208&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=1024%2C710&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=768%2C533&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=1536%2C1065&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=1000%2C693&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>CodeKit can execute a command to check code formatting with tools like ESLint without directly using the command line.</figcaption></figure>\n\n\n\n<p>A GUI is lovely to have as an option, and even though I’ve become quite comfortable working on the command line over the years, I still wish there were more GUIs to do the things the command line makes possible—both for my own convenience and to lower the barrier to entry for new developers.</p>\n\n\n\n<p>I believe the reason there aren’t more such apps, however, is because of speed. It’s much quicker and easier to build a command line interface (CLI) than it is to put together a full-fledged app, often by orders of magnitude. So if we want nice things <em>today</em>, the command line is often the place we need to go for them.</p>\n\n\n\n<h3>What’s next</h3>\n\n\n\n<p>We just spent some time getting acquainted with the command line. Even though the command line is not <em>specific</em> to npm, it’s core to working <em>with</em> npm. It’s the interface from which we tell the system what to do, granting us incredible powers at the system or server level to complete tasks in large swaths at breakneck speeds. As a package manager, npm is in the business of installing, updating, and deleting files (among other things) for a web project. The command line is how we communicate with npm to do all of that.</p>\n\n\n\n<p>Next up, we’re going to break down what npm is a little more by focusing on the first letter in the abbreviation: “n” for Node. What the heck is that and why is it in the name? That’s where we turn our focus next.</p>\n\n\n\n<div class=\"wp-container-61f727ec26681 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">← Chapter 2</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">Chapter 4 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-deep-look-at-the-command-line/\">What the Heck is the Command Line?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Now that we know what npm stands for and have a super general idea of what it does and how it fits into web development, we ought to spend a little bit of time looking at the command line, because it’s how we interact with npm.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line? (You are here!)What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\nAn overview of the command line\n\n\n\nThe command line is a place we can type (predictably enough) commands to be executed directly by our computer. It’s extremely fast, and allows greater admin permissions than most apps that attempt to handle the command line for you. Need to install something on your system, or perhaps update it? The command line can do that, not to mention uninstall them, too. Heck, even server-side languages can run on the command line, opening up a wide range of tools and development techniques.\n\n\n\nIt’s for those reasons the command line is considered an indispensable tool for many developers. Even if you’re not a developer, odds are you’ve encountered the command line at some point. Maybe you’ve accessed it when you opened the Terminal app in MacOS. Maybe you’ve used one built directly into your code editor—VS Code and many other code editors come with integrated terminal. Perhaps you’ve even come across third-party terminal apps like iTerm or Hyper.\n\n\n\n\n\n\n\nIf you’ve used the terminal, it’s possible that much of your command line usage to this point has simply been typing (or pasting) commands somebody else gave you. That’s fine; that’s often how we get things done.\n\n\n\nBut let’s take a moment to understand exactly what the command line is, and why it’s so broadly used.\n\n\n\nCommand line vs. terminal\n\n\n\nThe “command line” and the “terminal” are technically two different and distinct things, but are often used interchangeably. You may also hear the command line called a “shell” or see it abbreviated as “CLI” which is short for “command line interface.”\n\n\n\nPedantic distinctions aside, the terms are often used to mean pretty much the same thing. So just to keep things as simple as possible, I’ll be using them interchangeably from here on out.\n\n\n\nOpening the command line\n\n\n\nWhatever you want to call it, you probably know the command line as that scary-looking window, perhaps with a dark background and white (sometimes greenish) text, where you type commands that your computer seems to understand, even if you do not.\n\n\n\nBy default, a terminal window probably looks something like this, though its appearance can vary.\n\n\n\nDepending on where and how you’re working on the command line, one of the first things you might notice is an inconspicuous dollar sign character, $, that’s displayed on the first line where you’re able to start typing. You may have even seen it in other articles or documentation.\n\n\n\n\n\n\n\nIt’s common convention to prefix commands with a $ character—but it’s a confusing convention for sure. That’s because there’s no need to type it. It’s literally not part of the command. Instead, $ signifies a command that’s meant to be run in a terminal.\n\n\n\nSo here’s the first rule to know about working with the command line: if you find yourself typing or copying an instruction that includes the $ character, know that there is no need to include it in your work; the terminal’s got it covered.\n\n\n\n## No need to copy the $\n$ npm run build\n\n\n\nYou may see something else beginning a line instead of $, like >, _ , or even an arrow. Again, whatever it is, it’s almost certainly not meant to be typed or pasted directly into the command line. Whether or not documentation or other tutorials should include the starting character of a line is an entirely different conversation (one that Chris has discussed at length). Either way, it has the potential to be confusing, so I want to make sure that’s called out.\n\n\n\nWhat does the command line do?\n\n\n\nMovies and TV shows often portray a terminal as something fast-typing hackers use in a dark, secluded room. That’s partly just because it makes for good entertainment for folks who probably wouldn’t know a real terminal from the cascading letters in The Matrix. (Nor should they; I couldn’t tell if a surgery portrayed on a TV show is accurate, and am perfectly content leaving that distinction to the professionals.)\n\n\n\nBut the command line isn’t exactly for writing code. As the name “command line” implies, it’s for writing commands. I suppose you could say that all coding is commands to some extent, so this is admittedly a bit of a blurry line. But generally speaking, code in a terminal is written differently than it is in a code editor. Instead, you use the terminal to boss your computer around with commands you want it to run immediately.\n\n\n\nThe advantages of the command line\n\n\n\nYou may wonder why developers like to work in the command line in the first place. You might prefer a nice app, or graphical user interface (GUI for short, sometimes pronounced “gooey”) where you can see all your options and find the best one visually. That’s perfectly fine, and we’ll talk a bit about GUIs in this chapter and provide examples of them.\n\n\n\nMany developers feel that way, even if it doesn’t seem like it. But working within the command line brings some advantages that aren’t always easy to replicate in a visual app.\n\n\n\nIt grants you god-like system privileges\n\n\n\nThe command line is what computer science-y people refer to as a “privileged environment.” That might sound like it refers to a Yale frat house, but it just means it’s a place where there are very few restrictions on what you are allowed to do; a place without guardrails.\n\n\n\nThis is where the command line’s daunting reputation comes from—whatever command you type, as far as it’s valid, is executed immediately and, often, irreversibly. It’s capable of interacting with the hidden files your operating system tries to prevent you from editing. You have the power to access anything in the system. You even have the power to interact with similar core files on a remote server—and we all know the adage that great responsibility comes with that kind of power.\n\n\n\nIt might be helpful to think of the command line like a lazy security guard. It assumes you always know what you’re doing and lets you right through the entrance. That makes it a bit risky, yes, but it also makes it very powerful, and the perfect choice for certain tasks and projects.\n\n\n\nIt’s super fast\n\n\n\nAnother advantage the command line has over typical apps is: it’s fast.\n\n\n\nThis isn’t always the case; the command line’s speed tends to be overstated and depends largely on the task in question. But when it is faster, it can often be many times faster. Plus, the place where the command line really shines tends to be exactly the place where code projects need speed the most, which is downloading and creating files.\n\n\n\nAs we’ll see in other chapters of this guide, a key part of what npm does is install things on your machine (usually in a folder that’s designated for the project you’re working on). That’s what makes the command line great for working with a package manager (we’ll get to what that means, too) like npm—it downloads and transmits files between computers—generally much, much faster than, say, using a browser to do it.\n\n\n\nThe command line enables npm to generate tons of files with incredible speed. The ability to run a single command that installs, updates, or deletes those files together in one fell swoop at high speed makes the terminal the fastest, most efficient tool for many jobs.\n\n\n\nIt does what other languages cannot\n\n\n\nOne more other reason working in the terminal is so advantageous is that it’s the place where many of the tools you might want to use in your project are already available to you without any additional setup.\n\n\n\nBut let’s back up a bit.\n\n\n\nWhen you hear the phrase “server-side language,” you might think of PHP, Ruby, or Java. Maybe it’s even newer entries into the space, like Rust or Go. You might even already know that Node belongs on that list, but if not, forgive me for jumping ahead just a bit.\n\n\n\nAnyway, when most people think of server-side languages like these, they tend to think of a web server waiting for requests and then responding to them. WordPress, for example, sits idle until it receives a request that fires up PHP. When you send a new tweet, that’s a request on Twitter’s servers that eventually hits a Ruby method in Rails.\n\n\n\nServer-side languages are rightly considered more powerful, so to speak, than web languages. HTML, CSS, and JavaScript are wonderful, but they can’t work with a file system, send email, process images, issue system commands, interact with the operating system, or run scheduled tasks; among many, many other things an app or website might need to do. By default, JavaScript in the browser can’t even run unless somebody is actively looking at the web page in their browser.\n\n\n\nIt’s normal to think of server-side languages as the powerful engine behind more robust apps and software. And, in many cases, that’s accurate. But let’s take a moment to recognize that for the purpose of running code, your machine is a server. Not a web server although (it could be one, but that would be weird and probably unwise). But a server, nonetheless.\n\n\n\nYou probably don’t think of your machine as a server—nor should you. But it can run server-side programming languages.\n\n\n\nYou can install and run any of the server-side languages we’ve mentioned, and perhaps you’ve already even done so at some point (or at least tried to). You might have installed PHP so you can run WordPress (though these days there are much nicer ways to do it), or you may have installed Ruby so that you could follow some tutorials about Rails, just as examples.\n\n\n\nOr, maybe not. Maybe you’ve never installed a whole dang programming language before. Either way, just know that these languages run on a server rather than a web browser—and for that purpose, your machine is a server.\n\n\n\nBeyond that, many of the tools you might want to use with your development workflow—things like Sass for compiling CSS—actually run on server-side languages. So using the command line puts you in the place where all the most powerful tools are readily available.\n\n\n\nUsing an app instead of the command line\n\n\n\nWe briefly touched on GUIs earlier in this article. It’s worth noting that some command line tasks have corresponding GUIs that make working with the command line more visual and programmatic.\n\n\n\nGood examples include GitHub Desktop (for managing code repositories) and CodeKit (for processing, bundling and compiling assets), though the Source Control tab in VS Code also qualifies. Even though GUIs like these are generally focused on specific duties, they let you get things done through a nice visual user interface, in an actual app window that’s outside of the terminal window.\n\n\n\nCodeKit can execute a command to check code formatting with tools like ESLint without directly using the command line.\n\n\n\nA GUI is lovely to have as an option, and even though I’ve become quite comfortable working on the command line over the years, I still wish there were more GUIs to do the things the command line makes possible—both for my own convenience and to lower the barrier to entry for new developers.\n\n\n\nI believe the reason there aren’t more such apps, however, is because of speed. It’s much quicker and easier to build a command line interface (CLI) than it is to put together a full-fledged app, often by orders of magnitude. So if we want nice things today, the command line is often the place we need to go for them.\n\n\n\nWhat’s next\n\n\n\nWe just spent some time getting acquainted with the command line. Even though the command line is not specific to npm, it’s core to working with npm. It’s the interface from which we tell the system what to do, granting us incredible powers at the system or server level to complete tasks in large swaths at breakneck speeds. As a package manager, npm is in the business of installing, updating, and deleting files (among other things) for a web project. The command line is how we communicate with npm to do all of that.\n\n\n\nNext up, we’re going to break down what npm is a little more by focusing on the first letter in the abbreviation: “n” for Node. What the heck is that and why is it in the name? That’s where we turn our focus next.\n\n\n\n\n← Chapter 2\n\n\n\nChapter 4 →\n\n\nWhat the Heck is the Command Line? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:04:09.000Z",
      "date_modified": "2022-01-20T15:04:09.000Z",
      "_plugin": {
        "pageFilename": "bb54b9d5684637dc48e2590cbc5f924dc5381b4690c5bcb55dd46f9b614e1832.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361241",
      "url": "https://css-tricks.com/node-and-how-it-works-with-npm/",
      "title": "What the Heck is Node?",
      "summary": "(This is a sponsored post.)\nHere’s what you need to know about Node.js (or simply Node) and how it relates to npm right off the bat:\n\nNode is JavaScript, but as a server-side language.\nThis is possible because of \n\n…\n\nWhat the Heck is Node? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>Here’s what you need to know about Node.js (or simply Node) and how it relates to npm right off the bat:</p>\n\n\n\n<ul><li>Node is JavaScript, but as a server-side language.</li><li>This is possible because of V8, Chromium’s JavaScript engine, which can run on its own, outside the confines of the browser.</li><li>Node and browser-based JavaScript can be very different, and have different capabilities, though both are JavaScript at their core.</li><li>You don’t need to know Node to use npm.</li></ul>\n\n\n\n<p>As you may know by now, npm stands for <strong>Node Package Manager</strong> (even if the official <a href=\"https://www.npmjs.com/\" rel=\"noopener\">npm website</a> displays amusing alternative names in its header on each page load, like “Ninja Pumpkin Mutants”).</p>\n\n\n\n<p>The key thing to understand right away is this: “Node” and “Package Manager” are the two big, distinct pieces that combine to make npm.</p>\n\n\n\n<p>We’ll cover what a package manager is and why you might consider using one when we get to the next chapter in this npm guide. For now, though, let’s focus on understanding what Node is, as it’s is a key part to understanding modern web development.</p>\n\n\n\n<span id=\"more-361241\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>Node is JavaScript, but without all the browser</h3>\n\n\n\n<p>You likely know JavaScript primarily as a language that runs in the browser, similar to HTML and CSS. Yes, each of these languages has abstractions and supersets (like <a href=\"https://haml.info\" rel=\"noopener\">HAML</a> for HTML, Sass for CSS, and TypeScript for JavaScript, as examples), as well as compilers and transpilers and all kinds of things that transform them into this shape or that. But ultimately, what these tools generate is vanilla (i.e., pure) code in the correct syntax, as if the abstractions were never used, to run in the browser and in the browser alone.</p>\n\n\n\n<p>That’s the thing that took me the longest time to understand, and which, honestly, might be an even bigger missed memo than the whole npm thing. JavaScript doesn’t need a browser anymore in order to run. So, you&#8217;ll sometimes see me refer to Node JavaScript when distinguishing between it and &#8220;browser-based&#8221; JavaScript.</p>\n\n\n\n<h3>Server-side vs. client-side languages</h3>\n\n\n\n<p>At this point, I feel it’s worth taking a moment to explore the distinction between client-side languages (HTML, CSS, JavaScript), and server-side languages (basically all the rest of them). I won’t assume you have any experience with server-side languages, like PHP, Ruby, or Python, but if the <em>concept</em> of server-side languages is entirely new to you, it may be worth <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Introduction\" rel=\"noopener\">reading up on what they are</a>. (To summarize: they&#8217;re code languages that run purely on a server instead of the browser, and generally have much broader and more powerful capabilities.)</p>\n\n\n\n<p>This is relevant because several years ago, circa 2009, there were some very smart people who <em>really</em> liked JavaScript. In particular, they liked how <em>fast</em> JavaScript is (especially compared to the dominant server-side languages at the time, most notably, PHP and Ruby), and they wanted to have JavaScript <em>everywhere</em>, not just in a browser.</p>\n\n\n\n<p><a href=\"https://en.wikipedia.org/wiki/Ryan_Dahl\" rel=\"noopener\">Ryan Dahl</a> is the most prominent figure among them, and is credited with the invention of Node (and more recently, <a href=\"https://deno.land/\" rel=\"noopener\">Deno</a>, which is an anagram of Node). That’s a fun thing to know, but otherwise not strictly relevant to this topic.</p>\n\n\n\n<h3>How Node works</h3>\n\n\n\n<p>What is relevant, though, is that <strong>Node is essentially JavaScript as a server-side language that runs <em>outside</em> <em>of</em> the browser</strong>.</p>\n\n\n\n<p>How is that possible? Under the hood, each browser has its own individual JavaScript engine. This is the part of the browser that actually <em>runs</em> JavaScript. Yes, that’s apparently a separate piece of the browser and not part of the same bits that do the HTML and CSS—which I guess makes sense when you think about the fact that we have literal APIs between the document and JavaScript. Heck, even <a href=\"https://css-tricks.com/dom/\">the concept of a DOM</a> makes more sense when you think of the department that handles JavaScript as a makeshift office down the hall from the HTML department.</p>\n\n\n\n<p>The JavaScript engine in Chromium-based browsers is called V8, presumably after <a href=\"https://en.wikipedia.org/wiki/V8_engine\" rel=\"noopener\">a specific kind of car engine</a> (not the “<a href=\"https://www.campbells.com/v8/\" rel=\"noopener\">vegetable drink</a>” made mostly of tomato juice). V8 is by far the most popular JavaScript engine. Thanks to <a href=\"https://en.wikipedia.org/wiki/ECMAScript\" rel=\"noopener\">ECMAScript</a> standardization efforts over approximately the last 15 years, there aren’t really any major differences between JavaScript engines anymore as far as browsers go. The engine used in Chrome is a lot like the engine that runs in Firefox, which is a lot like Safari, and so on. V8’s popularity these days has less to do with its distinctions, and more to do with Chrome’s self-sustaining ubiquity.</p>\n\n\n\n<p>(Side note: Firefox’s JavaScript engine is named SpiderMonkey. That’s not particularly relevant, but it <em>is</em> further proof that Firefox is the coolest.)</p>\n\n\n\n<p>Why does this matter? Well, it turns out, you can take the JavaScript engine <em>out</em> of a browser, and with some modification, run it on its own—kind of like if you decided to pull the stereo out of a car, tinker a bit, and make it into a stereo system for your home instead. V8 (and, presumably, a car’s stereo) can function perfectly fine as a standalone unit in <em>any</em> environment.</p>\n\n\n\n<p>In other words: V8 makes it possible to run JavaScript <em>anywhere</em>. That&#8217;s why we have &#8220;Node&#8221; JavaScript and &#8220;browser-based&#8221; JavaScript.</p>\n\n\n\n<h3>Node is almost (but not exactly) JavaScript</h3>\n\n\n\n<p>To recap: JavaScript is a server-side language now! It’s called Node, and it <em>could</em> mean you don’t even <em>need</em> to learn anything about other server-side languages. We are front-end developers, and <a href=\"https://css-tricks.com/video-screencasts/160-the-all-powerful-front-end-developer/\">we have super-powers now</a>.</p>\n\n\n\n<p>Having said all this, however, <strong>Node and the JavaScript you’re used to running in the browser are both similar and very different from each other.</strong></p>\n\n\n\n<p>At the risk of veering too far into the weeds here: while both are JavaScript at their core, and while the language and syntax is the same, many staples of JavaScript in the browser (like the <code>window</code> or <code>document</code>, and even the oft-taken-for-granted <code>alert</code>) are not present in a purely server-side Node environment. There <em>is</em> no window, of course, when the language is just running on its own, and not in a browser. New Node JavaScript developers are often surprised to learn that even <code>fetch</code> is actually a browser API, not &#8220;pure&#8221; JavaScript.</p>\n\n\n\n<p>Fear not, however. <code>console.log</code> is still your best friend, and there are many <em>new</em>, environment-specific features of Node JavaScript that differ from the browser’s implementation of JavaScript, such as the <code>process</code> object, which contains all the details about any processes that are currently running.</p>\n\n\n\n<p>Node and its ecosystem have often, out of necessity, grown in a very different direction than browser-based JavaScript over the years. (As an obvious example: the syntax for imports between the two has been different for years, and only now is beginning to merge together again. We&#8217;ll talk about that a little more in <a href=\"https://css-tricks.com/how-to-install-an-npm-project\">the final chapter</a>.)</p>\n\n\n\n<p>Node long held the privilege of being able to move much faster than browsers when it comes to gaining new features, and has had its own set of concerns to deal with as well. It began to power server-side apps the same way Ruby and PHP had been doing for years, even while browsers were still trying to coalesce on standards. This has resulted in Node JavaScript and browser-based JavaScript becoming more like cousins than clones.</p>\n\n\n\n<p>Here’s what I think is a fair analogy to explain the differences between the two JavaScript cousins: consider two similar musical instruments, say an upright bass and a modern electric bass guitar. Both instruments are tuned the same, and play the same notes; if you know one, in many ways, you kind of know the other. But while you’ll find it much easier to learn one after you’ve learned the other, <em>playing</em> the new one will be very different from what you’re used to.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=1024%2C576&#038;ssl=1\" alt=\"\" class=\"wp-image-361921\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=1000%2C563&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?w=1280&amp;ssl=1 1280w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The same, but different (Photos: <a href=\"https://commons.wikimedia.org\" rel=\"noopener\">Wikimedia Commons</a>, <a href=\"https://unsplash.com\" rel=\"noopener\">Unplash</a>)</figcaption></figure>\n\n\n\n<p>Similarly, while one developer might write one type of JavaScript and a second developer writes in another type of JavaScript, their jobs are unlikely to look the same.</p>\n\n\n\n<p>Node is JavaScript, with the capabilities of other server-side languages mentioned before—things like reading from and writing to the file system, access to system-level APIs, email, the ability to listen for and respond to requests, scheduled tasks… the list goes on.</p>\n\n\n\n<p>I won’t say more on that here, but just know that while both are JavaScript at the end of the day, they run in different environments and are each capable of doing some things the other can’t. Even if you’ve written browser-based JavaScript before, Node will still likely feel a bit foreign to you beyond the foundational syntax, and will often be used in very different ways.</p>\n\n\n\n<h3>Running Node locally</h3>\n\n\n\n<p>As is generally the case with server-side languages, you <em>do</em> need to install Node before you can use it.</p>\n\n\n\n<p>Node is commonly installed alongside npm, together as one, since the package manager part needs Node, and the Node part is more useful with a package manager. (You could say they’re a <em>package</em> deal. No, I will not apologize for that joke. I am a dad, after all.)</p>\n\n\n\n<p>I’d like to stress at this point that <strong>you don’t need to know anything about Node to use npm</strong>. So, even though I&#8217;m about to cover some Node examples here, please consider this entire section something that’s nice to know, but inessential to that end. I feel it’s still useful to get a slightly better idea of how Node works, just for the sake of painting a more complete picture.</p>\n\n\n\n<p class=\"is-style-explanation\">We will cover <a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">how to install Node and npm</a> in an upcoming chapter of this guide. So, if you don’t have it installed already, you can either just glance over this part, or come back here when you do have it ready. Either way, this won’t be crucial for following along with this npm guide.</p>\n\n\n\n<p>If you would like to try it out, you can create a new <code>test.js</code> file and put some generic JavaScript in it. Something contrived like the following code that logs some content to the console should do the trick:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">console.log('Look, ma, Node hands!')\n\nconst oneThroughFive = [1, 2, 3, 4, 5]\n\noneThroughFive.forEach(number => {\n  console.log(number)\n})</code></pre>\n\n\n\n<p>Let’s say you save that code, then open the command line in a terminal window, navigate to where the file is (using <code>cd</code>, or “change directory&#8221;), and run <code>node test.js</code> to get the following output:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">Look, ma, Node hands!\n1\n2\n3\n4\n5</code></pre>\n\n\n\n<p>You can <em>also</em> enter <code>node</code> by itself (no filename afterwards) to open an interactive terminal where you can run arbitrary Node JavaScript. If you’ve ever popped open the console in your browser&#8217;s DevTools to type out some code, that’s <em>exactly</em> what this is, just on the command line with Node instead.</p>\n\n\n\n<p>Try it out if you’d like to, assuming you do have Node installed. But again, this is all just for illustration and not required for using npm.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1714\" height=\"878\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=1714%2C878&#038;ssl=1\" alt=\"A screenshot of an open terminal window showing Node version 17.0.1 running and the output from the previous example under it.\" class=\"wp-image-361246\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?w=1714&amp;ssl=1 1714w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=300%2C154&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=1024%2C525&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=768%2C393&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=1536%2C787&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=1000%2C512&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3>What’s next</h3>\n\n\n\n<p>Everything we covered in this chapter is nifty and hopefully helps to show you (however simply) the way Node works. Remember, while we didn’t cover any specific example of it, Node is capable of doing anything a server-side language can do. It’s hopefully not too hard to picture how running some JavaScript to do virtually anything you can think of on the system level or even on a remote server is very appealing and advantageous.</p>\n\n\n\n<p>The concept of Node started as a way to run JavaScript outside of the browser. As such, we have Node-based packages of scripts that are used to help us with front-end development. So how do we install those packages and make sure they’re not only updated but that they can be uninstalled? That’s contained in the last two letters in the npm abbreviation: <em>package manager</em>.</p>\n\n\n\n<p>In other words, npm is a tool that manages packages written in Node JavaScript. What exactly is a package manager and how does npm qualify as one? That’s up next in our npm guide.</p>\n\n\n\n<div class=\"wp-container-61f727ec2d1a6 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">← Chapter 3</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">Chapter 5 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/node-and-how-it-works-with-npm/\">What the Heck is Node?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "(This is a sponsored post.)\nHere’s what you need to know about Node.js (or simply Node) and how it relates to npm right off the bat:\n\n\n\nNode is JavaScript, but as a server-side language.This is possible because of V8, Chromium’s JavaScript engine, which can run on its own, outside the confines of the browser.Node and browser-based JavaScript can be very different, and have different capabilities, though both are JavaScript at their core.You don’t need to know Node to use npm.\n\n\n\nAs you may know by now, npm stands for Node Package Manager (even if the official npm website displays amusing alternative names in its header on each page load, like “Ninja Pumpkin Mutants”).\n\n\n\nThe key thing to understand right away is this: “Node” and “Package Manager” are the two big, distinct pieces that combine to make npm.\n\n\n\nWe’ll cover what a package manager is and why you might consider using one when we get to the next chapter in this npm guide. For now, though, let’s focus on understanding what Node is, as it’s is a key part to understanding modern web development.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node? (You are here!)What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\nNode is JavaScript, but without all the browser\n\n\n\nYou likely know JavaScript primarily as a language that runs in the browser, similar to HTML and CSS. Yes, each of these languages has abstractions and supersets (like HAML for HTML, Sass for CSS, and TypeScript for JavaScript, as examples), as well as compilers and transpilers and all kinds of things that transform them into this shape or that. But ultimately, what these tools generate is vanilla (i.e., pure) code in the correct syntax, as if the abstractions were never used, to run in the browser and in the browser alone.\n\n\n\nThat’s the thing that took me the longest time to understand, and which, honestly, might be an even bigger missed memo than the whole npm thing. JavaScript doesn’t need a browser anymore in order to run. So, you’ll sometimes see me refer to Node JavaScript when distinguishing between it and “browser-based” JavaScript.\n\n\n\nServer-side vs. client-side languages\n\n\n\nAt this point, I feel it’s worth taking a moment to explore the distinction between client-side languages (HTML, CSS, JavaScript), and server-side languages (basically all the rest of them). I won’t assume you have any experience with server-side languages, like PHP, Ruby, or Python, but if the concept of server-side languages is entirely new to you, it may be worth reading up on what they are. (To summarize: they’re code languages that run purely on a server instead of the browser, and generally have much broader and more powerful capabilities.)\n\n\n\nThis is relevant because several years ago, circa 2009, there were some very smart people who really liked JavaScript. In particular, they liked how fast JavaScript is (especially compared to the dominant server-side languages at the time, most notably, PHP and Ruby), and they wanted to have JavaScript everywhere, not just in a browser.\n\n\n\nRyan Dahl is the most prominent figure among them, and is credited with the invention of Node (and more recently, Deno, which is an anagram of Node). That’s a fun thing to know, but otherwise not strictly relevant to this topic.\n\n\n\nHow Node works\n\n\n\nWhat is relevant, though, is that Node is essentially JavaScript as a server-side language that runs outside of the browser.\n\n\n\nHow is that possible? Under the hood, each browser has its own individual JavaScript engine. This is the part of the browser that actually runs JavaScript. Yes, that’s apparently a separate piece of the browser and not part of the same bits that do the HTML and CSS—which I guess makes sense when you think about the fact that we have literal APIs between the document and JavaScript. Heck, even the concept of a DOM makes more sense when you think of the department that handles JavaScript as a makeshift office down the hall from the HTML department.\n\n\n\nThe JavaScript engine in Chromium-based browsers is called V8, presumably after a specific kind of car engine (not the “vegetable drink” made mostly of tomato juice). V8 is by far the most popular JavaScript engine. Thanks to ECMAScript standardization efforts over approximately the last 15 years, there aren’t really any major differences between JavaScript engines anymore as far as browsers go. The engine used in Chrome is a lot like the engine that runs in Firefox, which is a lot like Safari, and so on. V8’s popularity these days has less to do with its distinctions, and more to do with Chrome’s self-sustaining ubiquity.\n\n\n\n(Side note: Firefox’s JavaScript engine is named SpiderMonkey. That’s not particularly relevant, but it is further proof that Firefox is the coolest.)\n\n\n\nWhy does this matter? Well, it turns out, you can take the JavaScript engine out of a browser, and with some modification, run it on its own—kind of like if you decided to pull the stereo out of a car, tinker a bit, and make it into a stereo system for your home instead. V8 (and, presumably, a car’s stereo) can function perfectly fine as a standalone unit in any environment.\n\n\n\nIn other words: V8 makes it possible to run JavaScript anywhere. That’s why we have “Node” JavaScript and “browser-based” JavaScript.\n\n\n\nNode is almost (but not exactly) JavaScript\n\n\n\nTo recap: JavaScript is a server-side language now! It’s called Node, and it could mean you don’t even need to learn anything about other server-side languages. We are front-end developers, and we have super-powers now.\n\n\n\nHaving said all this, however, Node and the JavaScript you’re used to running in the browser are both similar and very different from each other.\n\n\n\nAt the risk of veering too far into the weeds here: while both are JavaScript at their core, and while the language and syntax is the same, many staples of JavaScript in the browser (like the window or document, and even the oft-taken-for-granted alert) are not present in a purely server-side Node environment. There is no window, of course, when the language is just running on its own, and not in a browser. New Node JavaScript developers are often surprised to learn that even fetch is actually a browser API, not “pure” JavaScript.\n\n\n\nFear not, however. console.log is still your best friend, and there are many new, environment-specific features of Node JavaScript that differ from the browser’s implementation of JavaScript, such as the process object, which contains all the details about any processes that are currently running.\n\n\n\nNode and its ecosystem have often, out of necessity, grown in a very different direction than browser-based JavaScript over the years. (As an obvious example: the syntax for imports between the two has been different for years, and only now is beginning to merge together again. We’ll talk about that a little more in the final chapter.)\n\n\n\nNode long held the privilege of being able to move much faster than browsers when it comes to gaining new features, and has had its own set of concerns to deal with as well. It began to power server-side apps the same way Ruby and PHP had been doing for years, even while browsers were still trying to coalesce on standards. This has resulted in Node JavaScript and browser-based JavaScript becoming more like cousins than clones.\n\n\n\nHere’s what I think is a fair analogy to explain the differences between the two JavaScript cousins: consider two similar musical instruments, say an upright bass and a modern electric bass guitar. Both instruments are tuned the same, and play the same notes; if you know one, in many ways, you kind of know the other. But while you’ll find it much easier to learn one after you’ve learned the other, playing the new one will be very different from what you’re used to.\n\n\n\nThe same, but different (Photos: Wikimedia Commons, Unplash)\n\n\n\nSimilarly, while one developer might write one type of JavaScript and a second developer writes in another type of JavaScript, their jobs are unlikely to look the same.\n\n\n\nNode is JavaScript, with the capabilities of other server-side languages mentioned before—things like reading from and writing to the file system, access to system-level APIs, email, the ability to listen for and respond to requests, scheduled tasks… the list goes on.\n\n\n\nI won’t say more on that here, but just know that while both are JavaScript at the end of the day, they run in different environments and are each capable of doing some things the other can’t. Even if you’ve written browser-based JavaScript before, Node will still likely feel a bit foreign to you beyond the foundational syntax, and will often be used in very different ways.\n\n\n\nRunning Node locally\n\n\n\nAs is generally the case with server-side languages, you do need to install Node before you can use it.\n\n\n\nNode is commonly installed alongside npm, together as one, since the package manager part needs Node, and the Node part is more useful with a package manager. (You could say they’re a package deal. No, I will not apologize for that joke. I am a dad, after all.)\n\n\n\nI’d like to stress at this point that you don’t need to know anything about Node to use npm. So, even though I’m about to cover some Node examples here, please consider this entire section something that’s nice to know, but inessential to that end. I feel it’s still useful to get a slightly better idea of how Node works, just for the sake of painting a more complete picture.\n\n\n\nWe will cover how to install Node and npm in an upcoming chapter of this guide. So, if you don’t have it installed already, you can either just glance over this part, or come back here when you do have it ready. Either way, this won’t be crucial for following along with this npm guide.\n\n\n\nIf you would like to try it out, you can create a new test.js file and put some generic JavaScript in it. Something contrived like the following code that logs some content to the console should do the trick:\n\n\n\nconsole.log('Look, ma, Node hands!')\n\nconst oneThroughFive = [1, 2, 3, 4, 5]\n\noneThroughFive.forEach(number => {\n  console.log(number)\n})\n\n\n\nLet’s say you save that code, then open the command line in a terminal window, navigate to where the file is (using cd, or “change directory”), and run node test.js to get the following output:\n\n\n\nLook, ma, Node hands!\n1\n2\n3\n4\n5\n\n\n\nYou can also enter node by itself (no filename afterwards) to open an interactive terminal where you can run arbitrary Node JavaScript. If you’ve ever popped open the console in your browser’s DevTools to type out some code, that’s exactly what this is, just on the command line with Node instead.\n\n\n\nTry it out if you’d like to, assuming you do have Node installed. But again, this is all just for illustration and not required for using npm.\n\n\n\n\n\n\n\nWhat’s next\n\n\n\nEverything we covered in this chapter is nifty and hopefully helps to show you (however simply) the way Node works. Remember, while we didn’t cover any specific example of it, Node is capable of doing anything a server-side language can do. It’s hopefully not too hard to picture how running some JavaScript to do virtually anything you can think of on the system level or even on a remote server is very appealing and advantageous.\n\n\n\nThe concept of Node started as a way to run JavaScript outside of the browser. As such, we have Node-based packages of scripts that are used to help us with front-end development. So how do we install those packages and make sure they’re not only updated but that they can be uninstalled? That’s contained in the last two letters in the npm abbreviation: package manager.\n\n\n\nIn other words, npm is a tool that manages packages written in Node JavaScript. What exactly is a package manager and how does npm qualify as one? That’s up next in our npm guide.\n\n\n\n\n← Chapter 3\n\n\n\nChapter 5 →\n\n\nWhat the Heck is Node? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:04:03.000Z",
      "date_modified": "2022-01-20T15:04:03.000Z",
      "_plugin": {
        "pageFilename": "a4f22e7cf06e40f068f42a08a5394a57eeda88b96f4a1a7a09bb953dc68bc55e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361257",
      "url": "https://css-tricks.com/what-the-heck-is-a-package-manager/",
      "title": "What the Heck is a Package Manager?",
      "summary": "If you’re keeping score, so far in this npm guide we’ve developed a general understanding of what npm is—notably, that it stands for Node Package Manager. In the process, we’ve discussed the importance of the command line and how it’s …\n\nWhat the Heck is a Package Manager? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>If you’re keeping score, so far in this npm guide we&#8217;ve developed a general understanding of what npm is—notably, that it stands for Node Package Manager. In the process, we’ve discussed the importance of the command line and how it&#8217;s used with npm.</p>\n\n\n\n<p>We also looked specifically at the “n” in npm—Node—and learned that Node is a lot like the JavaScript code we write to run on websites in a browser. In fact, Node <em>is</em> JavaScript; it just runs outside of the browser, and is capable of doing different things than its browser-based counterpart.</p>\n\n\n\n<span id=\"more-361257\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This </a><a href=\"http://a-complete-beginners-guide-to-npm\">Guide</a> <a href=\"http://a-complete-beginners-guide-to-npm\">For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>What we mean by “package”</h3>\n\n\n\n<p>Now let’s turn our attention to the last two letters in npm, namely the “package manager” part. In order to fully understand what npm is, we need to know what a package manager is. So it naturally follows that in order to understand <em>that</em>, we need to understand what the heck a “package” is.</p>\n\n\n\n<p>“<dfn>Package</dfn>” is a catch-all term for any external code files that you pull into a project and use in some way. Perhaps you’ve used <a href=\"https://jquery.com\" rel=\"noopener\">jQuery</a>, <a href=\"https://getbootstrap.com\" rel=\"noopener\">Bootstrap</a>, or <a href=\"https://axios-http.com\" rel=\"noopener\">Axios</a> on a project in the past. Those are common examples of packages.</p>\n\n\n\n<p>We call these “packages” because they’re “packaged up” and ready to be used. Some languages call them by other names (Ruby calls them “gems” for example), but the concept is the same. At the risk of oversimplifying, <strong>a <dfn>package</dfn> is code that you didn’t write but got from some public source to use in your project.</strong> You know, third-party code.</p>\n\n\n\n<p>Or, if you prefer musical parodies for your mnemonic devices:</p>\n\n\n\n<p>&#x1f3b5; <em>When there’s code that you choose</em><br>&#x1f3b5; <em>That’s not yours, but you use</em><br>&#x1f3b5; <em>That’s a package</em><br>&#x1f3b5; <em>When it’s stuff you install</em><br>&#x1f3b5; <em>That you import and call,</em><br>&#x1f3b5; <em>That’s a package</em></p>\n\n\n\n<p>Packages are also often also referred to as “dependencies,” because the code you write <em>depends</em> on them being present. Code written using jQuery’s <code>$</code> won’t work right if jQuery itself isn’t already loaded, for instance. (For this reason, package managers are also sometimes called “dependency managers.”)</p>\n\n\n\n<p>Packages can be big or small in terms of how much code they contain. A package might do something huge that changes how you write your whole project (like an entire framework), or it might do something very small and focused that you sprinkle in only where needed (like a widget, or a helper for a specific task).</p>\n\n\n\n<h3>Using packages without a package manager</h3>\n\n\n\n<p>Most likely, if you have used a package in the past, you’ve simply applied it with a script tag in the HTML that pulls from an external URL (ideally <a href=\"https://css-tricks.com/adding-a-cdn-to-your-website/\">from a CDN</a>). Here’s how you might include jQuery in the HTML of your site:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js\">&lt;/script></code></pre>\n\n\n\n<p>Another approach is to download a copy of the package, add it to your project’s files, and link to it locally, like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script src=\"/jquery.min.js\">&lt;/script></code></pre>\n\n\n\n<h3>What package managers solve</h3>\n\n\n\n<p>These two approaches have worked well for years. It’s simple. It’s clean. It generally lets you “set it and forget it” as far as the package goes. So why would you need something else?</p>\n\n\n\n<p>You can probably imagine how owning a car might seem unappealing to somebody who has ready access to convenient transit, or who has no need for long-distance travel. (This will tie back into the package manager talk, I promise. Stick with me.)</p>\n\n\n\n<p>If you have easy access to convenient and efficient mass transit, then paying a large price for a massive machine that you have to store somewhere, regularly clean, maintain, and fill with costly fuel probably won’t carry much upside from your perspective. In that specific case, the benefits are negligible; the costs are comparatively overwhelming. Someone in that hypothetical position might even wonder why anybody wants a car at all!</p>\n\n\n\n<p>I bring up this analogy because learning about a new technology can be very hard when <em>it solves a problem you don’t have</em>, in very much the same way that buying a car might fail to solve transportation you already have. It might seem like a massive, needless expenditure.</p>\n\n\n\n<p>What a package manager solves, then, is more a matter of scaling and handling concerns. Simply linking to a package in a script tag works well, as long as:</p>\n\n\n\n<ul><li>the number of projects you have is manageable;</li><li>the number of people working on the projects is manageable;</li><li>the number of updates that need to be made to the packages are manageable; and, most crucially,</li><li>every package used in your projects is client-side (browser) JavaScript or CSS.</li></ul>\n\n\n\n<p>That last one is the doozy, because there’s a plethora of tooling you can’t ever use if you <em>only</em> run things in the browser (more on that in a moment).</p>\n\n\n\n<p>If you <em>do</em> check all of those boxes, you might not ever outgrow this approach. Your development approach might just look like this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1280\" height=\"720\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=1280%2C720&#038;ssl=1\" alt=\"A black and white line illustration showing the diagram of packages with a package manager. A cloud labelled packages is followed by three files, HTML, CSS, and JavaScript, which are followed by the browser.\" class=\"wp-image-361261\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?w=1280&amp;ssl=1 1280w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=1000%2C563&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But even in that case, when you have multiple <code>&lt;script&gt;</code> tags, each linking to a specific version of some script or library, the <em>only</em> way to get any visibility at all into what packages you’re using—and whether they’re up-to-date—is to go manually open up the HTML and look at the code.</p>\n\n\n\n<p>That’s not much of an issue in and of itself, but it’s a problem that grows exponentially as the size and scope of a project ramps up. You may be able to keep track of a few packages manually, but how could you possibly do that when we’re talking about hundreds—if not thousands—of packages? And even if you could manually track those, that’s still introducing a high risk of human error.</p>\n\n\n\n<p><strong>It’s not HTML’s job to be the source of truth for all of the packages used on a project.</strong> Aside from mixing concerns, it also potentially introduces conflicts when trying to merge unrelated work between teammates.</p>\n\n\n\n<p>All this is important, but it’s the smallest part of a larger problem. Understand that client-side JavaScript probably isn’t the <em>only</em> type of package you’ll want to include in your projects forever, even if it is at the moment—and that’s where things <em>really</em> start to fall apart.</p>\n\n\n\n<p>Many production apps use some combination of the following tools and packages, if not all of them:</p>\n\n\n\n<ul><li>Sass (makes writing CSS easier)</li><li>PostCSS (enhances CSS for maximum efficiency and compatibility)</li><li>Babel (transpiles newer JavaScript to run in older browsers)</li><li>TypeScript (adds type checking to JavaScript)</li><li>Hot module reloading by a dev server that auto-refreshes the browser to show your changes</li><li>Additional utilities for code bundling, minification and/or concatenation</li><li>Automatic image compression</li><li>Testing libraries</li><li>Linters</li></ul>\n\n\n\n<p>That all sounds wonderful—and it is!—but notice that you now have multiple dependencies that are not only <em>not</em> present in your script tags, but are <em>not accounted for anywhere in your project at all</em>! There’s no way for anybody—including your future self—to have any idea what tools were used or are required to to get this project running.</p>\n\n\n\n<p>And even if you could know exactly what the project needed that way, you’d still need to go locate, download, and install all of those packages yourself… manually. Depending on the project, this could easily be a day-long task, or longer.</p>\n\n\n\n<p>All this means your workflow now looks a little more like this:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=1024%2C576&#038;ssl=1\" alt=\"A black and white line illustration showing the diagram of packages without a package manager. A group that consists of templates, Sass, and TypeScript or followed by static HTML, CSS, and JavaScript files, which are followed by a group that contains PostCSS and Babel, which is followed by a build tool, which is followed by two forks, one the dev server preview and the other the production browser.\" class=\"wp-image-361263\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=1000%2C563&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?w=1280&amp;ssl=1 1280w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Again, this is all good. This toolchain means that what gets shipped to the browser is highly optimized—but it’s also additional overhead and complexity.</figcaption></figure>\n\n\n\n<p><strong>Convenient as all the tools above are, you still need to <em>manage</em> them</strong>. Dependencies are projects, too, and they ship updates to patch bugs and introduce new features. As such, it’s unrealistic to simply paste a script tag in the HTML with a link that points to package on a CDN then call it good. You have to make sure each thing is installed and working properly not just on <em>your</em> machine, but on every collaborator’s machine, too.</p>\n\n\n\n<p>Package managers exist to make the packages—or dependencies—of a project manageable by knowing what is installed, what’s available to update, and whether one package might create conflicts with another. And the beauty of a package manager is that it accomplishes all of this directly from the command line, with minimal effort.</p>\n\n\n\n<p>Many package managers, especially npm, also provide additional features that open up even more possibilities to make development more efficient. But managing packages is the main attraction.</p>\n\n\n\n<h3>There are package managers that aren’t npm</h3>\n\n\n\n<p>This part isn’t super relevant to npm itself, but for the sake of completeness, I should also mention that npm isn’t the <em>only</em> JavaScript package manager. For example, you may see <a href=\"https://yarnpkg.com/\" rel=\"noopener\">Yarn</a> referenced in code examples. Yarn and npm work much the same way, to the extent that a great deal of interoperability between the two is purposely built in.</p>\n\n\n\n<p>Some folks prefer one package manager over another. Personally, I think the differences between npm and Yarn were more pronounced at first, but the two are now more similar than not.</p>\n\n\n\n<p>You may see code examples (including some in CSS-Tricks articles) that reference both <code>yarn</code> and <code>npm</code> together. That’s to let the reader know that either approach is fine, rather than the need to use both of them together.</p>\n\n\n\n<p>The syntax for Yarn and npm differ at times, but where only one is present, it’s generally trivial to convert a command or project from one to the other. Functionally, it rarely (if ever) matters which one you use—except, of course, that everybody working on the same project together will want to be using the same one to ensure compatibility and consistency.</p>\n\n\n\n<p>While npm and Yarn make up the vast majority of package managers that developers use, <a href=\"https://pnpm.io\" rel=\"noopener\">there’s another package manager called PnPm</a> that is effectively npm, but more performant and efficient. The tradeoff is that PnPm requires a bit more technical know-how in some cases, so it’s a bit more of an advanced option.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637444428589_20-40-h5en5-kw94x.png\" alt=\"Three examples of installing Vite in terminal via command line. First is npm, then Yarn, then PNPM.\"/><figcaption>The syntax differences between different package managers are generally minimal.&nbsp;(Source:&nbsp;<a target=\"_blank\" href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noreferrer noopener\">Vite</a>)</figcaption></figure>\n\n\n\n<h3>What makes npm the “standard” package manager</h3>\n\n\n\n<p>Again, I only bring up other package managers to illustrate that npm isn’t the only package manager out there—but it is generally the standard.</p>\n\n\n\n<p>What makes it the “standard” among package managers? Other languages, including Ruby and PHP, have had package managers for many years; JavaScript really didn’t have any good ones before npm.</p>\n\n\n\n<p>npm started as an independent, open-source project, but was <a href=\"https://www.cnbc.com/2020/03/16/microsoft-github-agrees-to-buy-code-distribution-start-up-npm.html\" rel=\"noopener\">acquired by Microsoft in 2020</a>. It technically has two parts: the actual package manager itself; and the package registry, which is an ever-growing list of <em>nearly two million</em> packages available to install.</p>\n\n\n\n<p>You could think of npm as the app store for anything you might want to use on a front-end or Node-based project. Find what you want and install it to your system via the command line. You might update that package when a new version is released, or delete it altogether if the project no longer depends on it.</p>\n\n\n\n<h3>A note on npx</h3>\n\n\n\n<p>You may <em>also</em> see <code>npx</code> commands floating out there. <a href=\"https://docs.npmjs.com/cli/v7/commands/npx\" rel=\"noopener\">npx</a> is actually a part of npm, but by using <code>npx</code> in a command instead of <code>npm</code> , you can execute the code of a package <em>without</em> <em>permanently</em> <em>installing it</em>. NPX just installs what it needs to, runs it, and dumps it.</p>\n\n\n\n<p>This is helpful if, for example, you want to run an installer script. Rather than downloading the installer, <em>then</em> running it, npx lets you simply run the installer directly, leaving nothing on your machine afterward. It’s like the house guest that cleans up after themselves.</p>\n\n\n\n<p>Another cool example: you could run <code>npx sass</code> (along with the necessary input and output arguments) if you wanted to compile your project’s Sass files just once without going to the trouble of completely installing Sass. This probably isn’t practical in most cases, but if you just needed a quick one-off compilation here and there, npx would be a handy way to do it, as it means fewer installed packages that need to be updated and maintained.</p>\n\n\n\n<h3>What&#8217;s next</h3>\n\n\n\n<p>Alright, so that&#8217;s a deep dive into what we mean when we call something a package manager. In the case of npm, it is used specifically to install and manage Node packages, tools that help add features to a project, add handy developer conveniences&#8230; or all of the above!</p>\n\n\n\n<p>Next up, we&#8217;re going to take our first step into <em>using</em> npm. And to do that, we need to install it to our system. That&#8217;s next up in this complete guide to npm.</p>\n\n\n\n<div class=\"wp-container-61f32eefa219c wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">← Chapter 4</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">Chapter 6 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/what-the-heck-is-a-package-manager/\">What the Heck is a Package Manager?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "If you’re keeping score, so far in this npm guide we’ve developed a general understanding of what npm is—notably, that it stands for Node Package Manager. In the process, we’ve discussed the importance of the command line and how it’s used with npm.\n\n\n\nWe also looked specifically at the “n” in npm—Node—and learned that Node is a lot like the JavaScript code we write to run on websites in a browser. In fact, Node is JavaScript; it just runs outside of the browser, and is capable of doing different things than its browser-based counterpart.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager? (You are here!)How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\nWhat we mean by “package”\n\n\n\nNow let’s turn our attention to the last two letters in npm, namely the “package manager” part. In order to fully understand what npm is, we need to know what a package manager is. So it naturally follows that in order to understand that, we need to understand what the heck a “package” is.\n\n\n\n“Package” is a catch-all term for any external code files that you pull into a project and use in some way. Perhaps you’ve used jQuery, Bootstrap, or Axios on a project in the past. Those are common examples of packages.\n\n\n\nWe call these “packages” because they’re “packaged up” and ready to be used. Some languages call them by other names (Ruby calls them “gems” for example), but the concept is the same. At the risk of oversimplifying, a package is code that you didn’t write but got from some public source to use in your project. You know, third-party code.\n\n\n\nOr, if you prefer musical parodies for your mnemonic devices:\n\n\n\n🎵 When there’s code that you choose🎵 That’s not yours, but you use🎵 That’s a package🎵 When it’s stuff you install🎵 That you import and call,🎵 That’s a package\n\n\n\nPackages are also often also referred to as “dependencies,” because the code you write depends on them being present. Code written using jQuery’s $ won’t work right if jQuery itself isn’t already loaded, for instance. (For this reason, package managers are also sometimes called “dependency managers.”)\n\n\n\nPackages can be big or small in terms of how much code they contain. A package might do something huge that changes how you write your whole project (like an entire framework), or it might do something very small and focused that you sprinkle in only where needed (like a widget, or a helper for a specific task).\n\n\n\nUsing packages without a package manager\n\n\n\nMost likely, if you have used a package in the past, you’ve simply applied it with a script tag in the HTML that pulls from an external URL (ideally from a CDN). Here’s how you might include jQuery in the HTML of your site:\n\n\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n\n\n\nAnother approach is to download a copy of the package, add it to your project’s files, and link to it locally, like this:\n\n\n\n<script src=\"/jquery.min.js\"></script>\n\n\n\nWhat package managers solve\n\n\n\nThese two approaches have worked well for years. It’s simple. It’s clean. It generally lets you “set it and forget it” as far as the package goes. So why would you need something else?\n\n\n\nYou can probably imagine how owning a car might seem unappealing to somebody who has ready access to convenient transit, or who has no need for long-distance travel. (This will tie back into the package manager talk, I promise. Stick with me.)\n\n\n\nIf you have easy access to convenient and efficient mass transit, then paying a large price for a massive machine that you have to store somewhere, regularly clean, maintain, and fill with costly fuel probably won’t carry much upside from your perspective. In that specific case, the benefits are negligible; the costs are comparatively overwhelming. Someone in that hypothetical position might even wonder why anybody wants a car at all!\n\n\n\nI bring up this analogy because learning about a new technology can be very hard when it solves a problem you don’t have, in very much the same way that buying a car might fail to solve transportation you already have. It might seem like a massive, needless expenditure.\n\n\n\nWhat a package manager solves, then, is more a matter of scaling and handling concerns. Simply linking to a package in a script tag works well, as long as:\n\n\n\nthe number of projects you have is manageable;the number of people working on the projects is manageable;the number of updates that need to be made to the packages are manageable; and, most crucially,every package used in your projects is client-side (browser) JavaScript or CSS.\n\n\n\nThat last one is the doozy, because there’s a plethora of tooling you can’t ever use if you only run things in the browser (more on that in a moment).\n\n\n\nIf you do check all of those boxes, you might not ever outgrow this approach. Your development approach might just look like this:\n\n\n\n\n\n\n\nBut even in that case, when you have multiple <script> tags, each linking to a specific version of some script or library, the only way to get any visibility at all into what packages you’re using—and whether they’re up-to-date—is to go manually open up the HTML and look at the code.\n\n\n\nThat’s not much of an issue in and of itself, but it’s a problem that grows exponentially as the size and scope of a project ramps up. You may be able to keep track of a few packages manually, but how could you possibly do that when we’re talking about hundreds—if not thousands—of packages? And even if you could manually track those, that’s still introducing a high risk of human error.\n\n\n\nIt’s not HTML’s job to be the source of truth for all of the packages used on a project. Aside from mixing concerns, it also potentially introduces conflicts when trying to merge unrelated work between teammates.\n\n\n\nAll this is important, but it’s the smallest part of a larger problem. Understand that client-side JavaScript probably isn’t the only type of package you’ll want to include in your projects forever, even if it is at the moment—and that’s where things really start to fall apart.\n\n\n\nMany production apps use some combination of the following tools and packages, if not all of them:\n\n\n\nSass (makes writing CSS easier)PostCSS (enhances CSS for maximum efficiency and compatibility)Babel (transpiles newer JavaScript to run in older browsers)TypeScript (adds type checking to JavaScript)Hot module reloading by a dev server that auto-refreshes the browser to show your changesAdditional utilities for code bundling, minification and/or concatenationAutomatic image compressionTesting librariesLinters\n\n\n\nThat all sounds wonderful—and it is!—but notice that you now have multiple dependencies that are not only not present in your script tags, but are not accounted for anywhere in your project at all! There’s no way for anybody—including your future self—to have any idea what tools were used or are required to to get this project running.\n\n\n\nAnd even if you could know exactly what the project needed that way, you’d still need to go locate, download, and install all of those packages yourself… manually. Depending on the project, this could easily be a day-long task, or longer.\n\n\n\nAll this means your workflow now looks a little more like this:\n\n\n\nAgain, this is all good. This toolchain means that what gets shipped to the browser is highly optimized—but it’s also additional overhead and complexity.\n\n\n\nConvenient as all the tools above are, you still need to manage them. Dependencies are projects, too, and they ship updates to patch bugs and introduce new features. As such, it’s unrealistic to simply paste a script tag in the HTML with a link that points to package on a CDN then call it good. You have to make sure each thing is installed and working properly not just on your machine, but on every collaborator’s machine, too.\n\n\n\nPackage managers exist to make the packages—or dependencies—of a project manageable by knowing what is installed, what’s available to update, and whether one package might create conflicts with another. And the beauty of a package manager is that it accomplishes all of this directly from the command line, with minimal effort.\n\n\n\nMany package managers, especially npm, also provide additional features that open up even more possibilities to make development more efficient. But managing packages is the main attraction.\n\n\n\nThere are package managers that aren’t npm\n\n\n\nThis part isn’t super relevant to npm itself, but for the sake of completeness, I should also mention that npm isn’t the only JavaScript package manager. For example, you may see Yarn referenced in code examples. Yarn and npm work much the same way, to the extent that a great deal of interoperability between the two is purposely built in.\n\n\n\nSome folks prefer one package manager over another. Personally, I think the differences between npm and Yarn were more pronounced at first, but the two are now more similar than not.\n\n\n\nYou may see code examples (including some in CSS-Tricks articles) that reference both yarn and npm together. That’s to let the reader know that either approach is fine, rather than the need to use both of them together.\n\n\n\nThe syntax for Yarn and npm differ at times, but where only one is present, it’s generally trivial to convert a command or project from one to the other. Functionally, it rarely (if ever) matters which one you use—except, of course, that everybody working on the same project together will want to be using the same one to ensure compatibility and consistency.\n\n\n\nWhile npm and Yarn make up the vast majority of package managers that developers use, there’s another package manager called PnPm that is effectively npm, but more performant and efficient. The tradeoff is that PnPm requires a bit more technical know-how in some cases, so it’s a bit more of an advanced option.\n\n\n\nThe syntax differences between different package managers are generally minimal. (Source: Vite)\n\n\n\nWhat makes npm the “standard” package manager\n\n\n\nAgain, I only bring up other package managers to illustrate that npm isn’t the only package manager out there—but it is generally the standard.\n\n\n\nWhat makes it the “standard” among package managers? Other languages, including Ruby and PHP, have had package managers for many years; JavaScript really didn’t have any good ones before npm.\n\n\n\nnpm started as an independent, open-source project, but was acquired by Microsoft in 2020. It technically has two parts: the actual package manager itself; and the package registry, which is an ever-growing list of nearly two million packages available to install.\n\n\n\nYou could think of npm as the app store for anything you might want to use on a front-end or Node-based project. Find what you want and install it to your system via the command line. You might update that package when a new version is released, or delete it altogether if the project no longer depends on it.\n\n\n\nA note on npx\n\n\n\nYou may also see npx commands floating out there. npx is actually a part of npm, but by using npx in a command instead of npm , you can execute the code of a package without permanently installing it. NPX just installs what it needs to, runs it, and dumps it.\n\n\n\nThis is helpful if, for example, you want to run an installer script. Rather than downloading the installer, then running it, npx lets you simply run the installer directly, leaving nothing on your machine afterward. It’s like the house guest that cleans up after themselves.\n\n\n\nAnother cool example: you could run npx sass (along with the necessary input and output arguments) if you wanted to compile your project’s Sass files just once without going to the trouble of completely installing Sass. This probably isn’t practical in most cases, but if you just needed a quick one-off compilation here and there, npx would be a handy way to do it, as it means fewer installed packages that need to be updated and maintained.\n\n\n\nWhat’s next\n\n\n\nAlright, so that’s a deep dive into what we mean when we call something a package manager. In the case of npm, it is used specifically to install and manage Node packages, tools that help add features to a project, add handy developer conveniences… or all of the above!\n\n\n\nNext up, we’re going to take our first step into using npm. And to do that, we need to install it to our system. That’s next up in this complete guide to npm.\n\n\n\n\n← Chapter 4\n\n\n\nChapter 6 →\n\n\nWhat the Heck is a Package Manager? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:03:59.000Z",
      "date_modified": "2022-01-20T15:03:59.000Z",
      "_plugin": {
        "pageFilename": "04679475a4382d05bf3b39a273162f66ea12143610ac8730f9e825135eabda3b.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361270",
      "url": "https://css-tricks.com/how-to-install-npm-node-nvm/",
      "title": "How the Heck Do You Install npm?",
      "summary": "Feel like you have a pretty good idea of what a package manager is? We’ve certainly covered a lot of ground getting familiar with all the terms and concepts of package managers, but I’d say it’s high time we actually …\n\nHow the Heck Do You Install npm? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Feel like you have a pretty good idea of what a package manager is? We’ve certainly covered a lot of ground getting familiar with all the terms and concepts of package managers, but I’d say it’s high time we actually <em>do</em> something with our newfound knowledge. But first, we need to install npm.</p>\n\n\n\n<p>To that end, we’re going to make sure we have Node and npm installed, then make a little sample project to give you real hands-on experience working with the npm basics and what it looks like to use npm in your front-end development workflow.</p>\n\n\n\n<span id=\"more-361270\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>Confirm whether npm is already installed</h3>\n\n\n\n<p>Before installing npm, we should confirm whether it&#8217;s already installed! If you’re unsure whether or not npm is already installed on your system, open your terminal of choice, whether it’s the Terminal app in MacOS, the integrated terminal in a code editor like VS Code, or some other terminal where you have access to the command line.</p>\n\n\n\n<p>Ready? Start with this command (notice we’re not including the <code>$</code> character in these examples):</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">node -v</code></pre>\n\n\n\n<p>That command displays the current version of Node—that is, if it is installed. If Node <em>is</em> installed, the command line will respond with the Node version number that is currently installed:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">v16.9.1</code></pre>\n\n\n\n<p>Your version may be different, of course. Either way, the fact that you see a version number confirms that npm is installed on your system! Let me stress that <strong>the numbers themselves are unimportant</strong>, just as long as we get <em>some</em> version number.</p>\n\n\n\n<p>If npm or Node is <em>not</em> currently installed, you’ll see a message along the lines of “Command not found” instead. In the unlikely event that npm is installed but Node is not (or vice versa), then it’s probably worth uninstalling it before continuing.</p>\n\n\n\n<p>Assuming you <em>do</em> need to install npm and Node (and if you don’t, you’re welcome to skip ahead to the next section), we’re going to take the advice of <a href=\"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\" rel=\"noopener\">the official NPM directions</a> and do so via a program called <a href=\"https://github.com/nvm-sh/nvm\" rel=\"noopener\">nvm</a>.</p>\n\n\n\n<h3>Installing Node Version Manager</h3>\n\n\n\n<p>Node Version Manager, or nvm, allows you to install, update, and uninstall Node on your system, and also to manage multiple versions of Node that you can switch between.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2424\" height=\"1802\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=2424%2C1802&#038;ssl=1\" alt=\"Screenshot of the Node Version Manager repository on GitHub which is closely related to how to install npm in terms of installing Node itself.\" class=\"wp-image-361275\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?w=2424&amp;ssl=1 2424w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=1024%2C761&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=768%2C571&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=1536%2C1142&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=2048%2C1522&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=1000%2C743&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The <a href=\"https://github.com/nvm-sh/nvm\" rel=\"noopener\">Node Version Manager repository</a> on GitHub</figcaption></figure>\n\n\n\n<p class=\"is-style-explanation\">As you may know, server-side languages have their own release versions, e.g., Node 17.1.0, rather than being tied to browser versions, such as Chrome 96. We won’t need any version of Node but the latest, so this won’t be necessary for us right now, although it may be advantageous for you down the road.</p>\n\n\n\n<p>I know, it may seem like a lot of extra work to install one program just to install another, but again, this is the recommended path, and doing things the right way from the start makes them much easier in the long run. I’d rather set you up for success than make things briefly easier at the expense of more complexity later.</p>\n\n\n\n<h4>Installing nvm on Windows</h4>\n\n\n\n<p>If you’re on Windows, you’ll actually have an easier time here. You’ll need nvm for Windows specifically, but luckily, Windows already has an installer you simply download and run. The directions are in the <a href=\"https://github.com/coreybutler/nvm-windows\" rel=\"noopener\">NVM for Windows</a> repo over at GitHub.</p>\n\n\n\n<ul><li>Download the <a href=\"https://github.com/coreybutler/nvm-windows/releases\" rel=\"noopener\">latest version of NVM for Windows</a>. It can be <a href=\"https://github.com/coreybutler/nvm-windows/wiki#manual-installation\" rel=\"noopener\">installed manually</a>, if you prefer.</li><li>Open the terminal and run the <code>nvm list available</code> command to see a list of Node versions that are available to download and install.</li><li>Run the <code>nvm use</code> command, followed by the version number of Node you want to use (e.g. <code>nvm use 16.9.1</code>) to use a specific version. Alternatively, you can use use <code>latest</code>, <code>lts</code>, or <code>newest</code> instead of a specific version number, where <code>newest</code> is the latest <em>installed</em> version.</li></ul>\n\n\n\n<p>Once it’s installed, nvm will work the same way on your Windows machine as it does on any other system.</p>\n\n\n\n<h4>Installing nvm on MacOS</h4>\n\n\n\n<p>To install nvm on MacOS, the first step is to download it with this command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</code></pre>\n\n\n\n<p class=\"is-style-explanation\"><code>0.39.0</code> is the latest version at publish time, but it may be worth checking the <a href=\"https://github.com/nvm-sh/nvm#installing-and-updating\" rel=\"noopener\">nvm installation readme</a> and getting the latest, if different.</p>\n\n\n\n<p>Once you’ve pasted that command into the terminal and hit <kbd>Enter</kbd>, you’ll see your terminal output a bunch of stuff that doesn’t really matter. In fact, I’ll let you in on a little secret: nobody reads the things in their terminals most of the time. All we care about is that&#8230;</p>\n\n\n\n<ol><li>the command eventually finishes; and</li><li>it doesn’t end with an error message.</li></ol>\n\n\n\n<p class=\"is-style-explanation\">If you are prompted for a command in the middle of the installation, hit the <kbd>q</kbd> key to quit and continue.</p>\n\n\n\n<p>You’ll know the command is finished running when the typing cursor starts blinking again, indicating the terminal is waiting for your typed input. You might even see this right after nvm has completed installing:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">=> Close and reopen your terminal to start using nvm or run the following to use it now:\n</code></pre>\n\n\n\n<p>Assuming you see no errors at this point, I would recommend the simpler option of quitting and restarting whatever terminal app you’re using before moving on. It&#8217;s a nice way to make sure you&#8217;re working with a clean slate.</p>\n\n\n\n<h3>How to install npm via Node</h3>\n\n\n\n<p>Now that nvm is installed, we’re ready to do what we <em>really</em> wanted to do in the first place: install npm and Node on our system.</p>\n\n\n\n<p>It’s not a bad idea to confirm nvm is installed properly, by running <code>nvm -v</code>. If the terminal shows you the installed version number, you’re good to go! If not, remember that you might have to restart your terminal app before the installation fully processes.</p>\n\n\n\n<p>Now that we have nvm, installing Node is a super short command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">nvm install node</code></pre>\n\n\n\n<p>Simple enough, eh?</p>\n\n\n\n<p>You should see a message along the lines of <code>Downloading and installing node v17.1.0</code>, though the version number may not match, which is fine. You’ll get whatever the latest stable version is at runtime. Wait until the command has finished running—again, you’ll know it’s done once you are back at the default prompt and you’re able to type more commands.</p>\n\n\n\n<p>After that, you’re all done here! That simple command not only installs Node, but it will install npm as well. Again, you can verify everything is installed and up to date with <code>npm -v</code> and <code>node -v</code>. If all is good, you’ll get a version number.</p>\n\n\n\n<h3>What’s next</h3>\n\n\n\n<p>Alright, at this point, we have nvm for installing and managing Node, Node itself, and npm for handling Node packages. Next up in this npm guide, we’re going to install some packages into a project!</p>\n\n\n\n<div class=\"wp-container-61f32eefa68c6 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">← Chapter 5</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/how-to-install-npm-packages\">Chapter 7 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-install-npm-node-nvm/\">How the Heck Do You Install npm?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Feel like you have a pretty good idea of what a package manager is? We’ve certainly covered a lot of ground getting familiar with all the terms and concepts of package managers, but I’d say it’s high time we actually do something with our newfound knowledge. But first, we need to install npm.\n\n\n\nTo that end, we’re going to make sure we have Node and npm installed, then make a little sample project to give you real hands-on experience working with the npm basics and what it looks like to use npm in your front-end development workflow.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm? (You are here!)How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\nConfirm whether npm is already installed\n\n\n\nBefore installing npm, we should confirm whether it’s already installed! If you’re unsure whether or not npm is already installed on your system, open your terminal of choice, whether it’s the Terminal app in MacOS, the integrated terminal in a code editor like VS Code, or some other terminal where you have access to the command line.\n\n\n\nReady? Start with this command (notice we’re not including the $ character in these examples):\n\n\n\nnode -v\n\n\n\nThat command displays the current version of Node—that is, if it is installed. If Node is installed, the command line will respond with the Node version number that is currently installed:\n\n\n\nv16.9.1\n\n\n\nYour version may be different, of course. Either way, the fact that you see a version number confirms that npm is installed on your system! Let me stress that the numbers themselves are unimportant, just as long as we get some version number.\n\n\n\nIf npm or Node is not currently installed, you’ll see a message along the lines of “Command not found” instead. In the unlikely event that npm is installed but Node is not (or vice versa), then it’s probably worth uninstalling it before continuing.\n\n\n\nAssuming you do need to install npm and Node (and if you don’t, you’re welcome to skip ahead to the next section), we’re going to take the advice of the official NPM directions and do so via a program called nvm.\n\n\n\nInstalling Node Version Manager\n\n\n\nNode Version Manager, or nvm, allows you to install, update, and uninstall Node on your system, and also to manage multiple versions of Node that you can switch between.\n\n\n\nThe Node Version Manager repository on GitHub\n\n\n\nAs you may know, server-side languages have their own release versions, e.g., Node 17.1.0, rather than being tied to browser versions, such as Chrome 96. We won’t need any version of Node but the latest, so this won’t be necessary for us right now, although it may be advantageous for you down the road.\n\n\n\nI know, it may seem like a lot of extra work to install one program just to install another, but again, this is the recommended path, and doing things the right way from the start makes them much easier in the long run. I’d rather set you up for success than make things briefly easier at the expense of more complexity later.\n\n\n\nInstalling nvm on Windows\n\n\n\nIf you’re on Windows, you’ll actually have an easier time here. You’ll need nvm for Windows specifically, but luckily, Windows already has an installer you simply download and run. The directions are in the NVM for Windows repo over at GitHub.\n\n\n\nDownload the latest version of NVM for Windows. It can be installed manually, if you prefer.Open the terminal and run the nvm list available command to see a list of Node versions that are available to download and install.Run the nvm use command, followed by the version number of Node you want to use (e.g. nvm use 16.9.1) to use a specific version. Alternatively, you can use use latest, lts, or newest instead of a specific version number, where newest is the latest installed version.\n\n\n\nOnce it’s installed, nvm will work the same way on your Windows machine as it does on any other system.\n\n\n\nInstalling nvm on MacOS\n\n\n\nTo install nvm on MacOS, the first step is to download it with this command:\n\n\n\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n\n\n\n0.39.0 is the latest version at publish time, but it may be worth checking the nvm installation readme and getting the latest, if different.\n\n\n\nOnce you’ve pasted that command into the terminal and hit Enter, you’ll see your terminal output a bunch of stuff that doesn’t really matter. In fact, I’ll let you in on a little secret: nobody reads the things in their terminals most of the time. All we care about is that…\n\n\n\nthe command eventually finishes; andit doesn’t end with an error message.\n\n\n\nIf you are prompted for a command in the middle of the installation, hit the q key to quit and continue.\n\n\n\nYou’ll know the command is finished running when the typing cursor starts blinking again, indicating the terminal is waiting for your typed input. You might even see this right after nvm has completed installing:\n\n\n\n=> Close and reopen your terminal to start using nvm or run the following to use it now:\n\n\n\n\nAssuming you see no errors at this point, I would recommend the simpler option of quitting and restarting whatever terminal app you’re using before moving on. It’s a nice way to make sure you’re working with a clean slate.\n\n\n\nHow to install npm via Node\n\n\n\nNow that nvm is installed, we’re ready to do what we really wanted to do in the first place: install npm and Node on our system.\n\n\n\nIt’s not a bad idea to confirm nvm is installed properly, by running nvm -v. If the terminal shows you the installed version number, you’re good to go! If not, remember that you might have to restart your terminal app before the installation fully processes.\n\n\n\nNow that we have nvm, installing Node is a super short command:\n\n\n\nnvm install node\n\n\n\nSimple enough, eh?\n\n\n\nYou should see a message along the lines of Downloading and installing node v17.1.0, though the version number may not match, which is fine. You’ll get whatever the latest stable version is at runtime. Wait until the command has finished running—again, you’ll know it’s done once you are back at the default prompt and you’re able to type more commands.\n\n\n\nAfter that, you’re all done here! That simple command not only installs Node, but it will install npm as well. Again, you can verify everything is installed and up to date with npm -v and node -v. If all is good, you’ll get a version number.\n\n\n\nWhat’s next\n\n\n\nAlright, at this point, we have nvm for installing and managing Node, Node itself, and npm for handling Node packages. Next up in this npm guide, we’re going to install some packages into a project!\n\n\n\n\n← Chapter 5\n\n\n\nChapter 7 →\n\n\nHow the Heck Do You Install npm? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:03:53.000Z",
      "date_modified": "2022-01-20T15:03:53.000Z",
      "_plugin": {
        "pageFilename": "ab50461aad749f8fc5ba5e1543cb2586ae75633e36e26b68fa714c191e913323.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361300",
      "url": "https://css-tricks.com/how-to-install-npm-packages/",
      "title": "How the Heck Do You Install npm Packages?",
      "summary": "By now, you’re becoming quite knowledgeable with npm! So far, we’ve broken down the three letters in “npm” to gain a better understand of Node and package managers. In the previous chapter, we even installed Node and npm while …\n\nHow the Heck Do You Install npm Packages? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>By now, you’re becoming quite knowledgeable with npm! So far, we’ve broken down the three letters in “npm” to gain a better understand of Node and package managers. In the <a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">previous chapter</a>, we even installed Node and npm while getting acquainted with Node Version Manager, or nvm. Next up in this beginner’s guide to npm is likely why you’re here in the first place: <strong>installing npm packages</strong>.</p>\n\n\n\n<span id=\"more-361300\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h2>A quick example</h2>\n\n\n\n<p>We can install our very first package with the <code>npm install</code> command (or <code>npm i</code> for short), followed by the name of the packages we want to add to our project. For example, the <a href=\"https://www.npmjs.com/package/sass\" rel=\"noopener\">Node package for Sass</a> is simply called “sass” which means we can add to a project like this (just be sure you&#8217;re in a new folder you created for this little project first):</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm install sass</code></pre>\n\n\n\n<p>That’s all you need! Type that and npm goes straight to work:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1844\" height=\"1340\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?resize=1844%2C1340&#038;ssl=1\" alt=\"Screenshot of a dark terminal window with a project called nom-test. The first command is npm install which adds 17 total npm packages with zero vulnerabilities.\" class=\"wp-image-361303\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?w=1844&amp;ssl=1 1844w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?resize=1024%2C744&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?resize=768%2C558&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?resize=1536%2C1116&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?resize=1000%2C727&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>What’s happening behind the scenes there is that npm tries to find a package named <code>sass</code> in the npm package registry. If it finds that package (which it does), npm installs it to the project in an automatically generated <code>node_modules</code> folder (more on this <a href=\"#aa-node_modules\">in a bit</a>) located in the project root folder, including everything the package needs to run. (This is why you see that npm added 16 packages and audited a total of 17 npm packages, instead of the Sass package alone—it, too, has dependencies!)</p>\n\n\n\n<p>Once we’ve run the <code>install</code> command, you may notice that you do <em>not</em> see anything named “sass” in the project folder as you might expect. Oddly, however, we <em>do</em> see a three new items in the project folder: two JSON files named <code>package.json</code> and <code>package-lock.json</code>, plus one entirely new <code>node_modules</code> folder.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2784\" height=\"1638\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=2784%2C1638&#038;ssl=1\" alt=\"Screenshot of the VS Code editor with a package.json file open. The file contains the project name, npm-test, and includes a dependencies section that contains the Sass npm package.\" class=\"wp-image-361306\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?w=2784&amp;ssl=1 2784w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=300%2C177&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=1024%2C602&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=768%2C452&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=1536%2C904&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=2048%2C1205&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=1000%2C588&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>What are these!? We asked npm to install Sass, not all this stuff. That’s not part of Sass… right? Well, that’s correct, but there’s a very good explanation why those new items were generated in the project folder. Let’s look at what just happened.</p>\n\n\n\n<h3>What happens when you install a package</h3>\n\n\n\n<p>When you install (or uninstall, or update) a package, npm does most, if not all, of the following four things:</p>\n\n\n\n<ol><li>Updates the <code>package.json</code> file in your project, if needed;</li><li>updates the <code>package-lock.json</code> file (called the “lockfile”) that contains all of the technical specifics;</li><li>installs the actual package files—and any other packages the original package might depend on (inside of the <code>node_modules</code> folder); and</li><li>runs an audit of the installed packages.</li></ol>\n\n\n\n<p>Let’s step through those one-by-one.</p>\n\n\n\n<h4><code>package.json</code> and <code>package-lock.json</code></h4>\n\n\n\n<p>These two JSON files work together to ensure an accurate record of all the dependencies in your project (and all of <em>their</em> dependencies, and all of their dependencies’ dependencies, and so on). The difference is a little technical, but loosely explained: the lockfile is the in-depth, precise snapshot of the project’s dependency tree, and <code>package.json</code> is a high level overview, which can also contain other things. <strong>The main packages you install may be listed in <code>package.json</code>, but <code>package-lock.json</code> is where the entire dependency tree is tracked.</strong></p>\n\n\n\n<p>The lockfile is also never supposed to be updated by hand; only by npm. So be sure to avoid mistaking the lockfile with the <code>package.json</code> file.</p>\n\n\n\n<p>When you share or collaborate with others on a project, npm knows where the project came from and exactly what you have installed in the project by these two files. It can replicate that environment precisely on anyone else’s machine, thanks to their info. Both files are meant to be committed to your Git repo, and serve as your project’s dependency blueprint. That way, when another developer on your team clones the repo and runs the <code>npm install</code> command, npm knows <em>exactly</em> which packages to install, keeping you and your colleague in sync.</p>\n\n\n\n<p>If you open <code>package.json</code>, you won&#8217;t see much, but it&#8217;s worth a peek just to see what&#8217;s happening:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"dependencies\": {\n    \"sass\": \"^1.43.4\"\n  }\n}</code></pre>\n\n\n\n<p>You probably won&#8217;t see that exact version number (since the package has been updated since the time of writing), but you <em>should</em> see <code>sass</code> listed inside a JSON <code>dependencies</code> object. The number itself (<code>1.43.4</code> in this case) indicates the specific version of Sass that is installed.</p>\n\n\n\n<p class=\"is-style-explanation\">As a brief but important side tangent: the carat character (<code>^</code>) at the beginning of the version number lets npm know that it is allowed to install minor updates to the package. In other words, it tells npm that the installed Sass package must be <em>at least</em> version <code>1.43.4</code>, but can be any higher <code>1.x.x</code> version, as long as it’s still under <code>2.0.0</code>. npm generally chooses the latest stable version when a package is installed, but adds this to allow for non-breaking updates. That bit is called <a href=\"https://semver.org\" rel=\"noopener\">“semantic versioning”</a> and it’s a blog post unto itself, but not unique to npm.</p>\n\n\n\n<p>Anyway, that covers the two JSON files. Let’s talk about the <code>node_modules</code> folder next.</p>\n\n\n\n<h3><code>node_modules</code></h3>\n\n\n\n<p><code>node_modules</code> <strong>is where all the actual package code lives</strong>; it’s where your installed Node packages and all the stuff that makes them run actually get installed. If you open up the folder right now as you’re following along, you’ll find a <code>sass</code> folder, but alongside several other folders as well.</p>\n\n\n\n<p>The reason for the additional folders is that when you install a package, it may need <em>other</em> packages to run properly (as Sass clearly does). So, npm automatically does the hard work of finding and installing all of those dependencies as well. As you may have guessed, those dependencies may also have <em>other</em> dependencies of their own, and so the process repeats, so on and so forth, until we’ve finished crawling the dependency tree to its furthest branches and absolutely everything we need is installed (or until we’ve hit an error of some kind, though hopefully not).</p>\n\n\n\n<p>For this reason, it’s common for a project to have <code>node_modules</code> subfolders in the hundreds or more, which add up quickly in terms of disk space. <code>node_modules</code> can often get pretty hefty.</p>\n\n\n\n<p>If you’re wondering how you would commit a super large folder like <code>node_modules</code> to a project’s repository, here’s an important note: Unlike the JSON files, <strong>the <code>node_modules</code> folder is not meant to be committed to Git</strong>, or even shared. In fact, just about every example of a <code>.gitignore</code> file (the file that tells which files Git should skip when tracking files) includes <code>node_modules</code> to ensure Git never touches or tracks it.</p>\n\n\n\n<p>So, how does anyone else on your team get those packages? They run <code>npm</code> <code>install</code> (or <code>npm i</code> for short) from the command line to download the dependencies directly from the source. This way, there’s no need to commit (or pull) massive amounts of data to and from the origin repo.</p>\n\n\n\n<h3>Using caution when installing dependencies</h3>\n\n\n\n<p>This massive web of dependencies and their great-great-grand-dependencies can lead to situations where a small utility library of some kind that provides a useful service can become adopted by many other packages, which are, in turn, used in many <em>other</em> packages, until eventually the original code winds up quietly installed on a significant percentage of sites and apps.</p>\n\n\n\n<p>It might sound wild (if not downright scary) that, in the process of installing your one package, you may actually be letting a <em>whole bunch of other stuff</em> through the door. It can feel like inviting a new friend to your house party, who then shows up with 20 uninvited strangers. But it’s not as weird or scary as it may seem, for a few reasons:</p>\n\n\n\n<ol><li><strong>Most npm packages are open source.</strong> You and anybody else can easily peek under the hood and see exactly what the package is doing. You can also look the package up on the registry (<a href=\"https://npmjs.com\" rel=\"noopener\">npmjs.com</a>) to see how many times it’s been installed, when it was last updated, and other relevant info. If a package is fairly popular, you can be reasonably certain it’s safe.</li><li><strong>There’s a vast world of functionality that <em>many</em> projects will need.</strong> Consider date formatting, handling HTTP requests and responses, throttling, debouncing, or animations, just as quick examples. It doesn’t make sense to keep reinventing the wheel and hand-coding these things every time they’re used in a new project.</li><li><strong>Installing a package isn’t really that different than installing an app on your phone, or a plugin on a WordPress site</strong>. The difference is that we don’t get the same glimpse into the inner workings of those apps and plugins the way we do with packages, nor what <em>other</em> things those apps and plugins might rely on. Odds are good they pull in many smaller packages, too, in some way or another.</li></ol>\n\n\n\n<p>A degree of caution is a good idea in any environment in which one can install and execute arbitrary code, of course. Don’t get me wrong. I’d be lying if I said bad actors have never successfully taken advantage of this system. But know that there are many processes in place to keep things from going awry. When in doubt, stick with the most popular packages and you’ll be fine.</p>\n\n\n\n<p>Also know that npm runs automatic security audits for you, which brings us to the final point in this section.</p>\n\n\n\n<h3>What is <code>npm audit</code>?</h3>\n\n\n\n<p>When we installed <code>sass</code> earlier, we saw the following message in the terminal once it finished:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">found 0 vulnerabilities</code></pre>\n\n\n\n<p>However, you may see some warnings instead—like this old project of mine in the following image. I decided to boot it up and run <code>npm install</code> (<code>npm i</code>) after it’s sat for at least a couple of years. Let’s see how it did:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1674\" height=\"1130\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?resize=1674%2C1130&#038;ssl=1\" alt=\"Screenshot of an open terminal window showing the process of installing npm packages with the npm i command. 212 npm packages are installed but the terminal shows there are 93 vulnerabilities, where 46 are moderate, 42 are high, and 5 are critical.\" class=\"wp-image-361310\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?w=1674&amp;ssl=1 1674w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?resize=300%2C203&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?resize=1024%2C691&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?resize=768%2C518&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?resize=1536%2C1037&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?resize=1000%2C675&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>YIKES!</figcaption></figure>\n\n\n\n<p><strong>Packages with known vulnerabilities are called out by <code>npm audit</code></strong>, which runs automatically any time you install a package. If you see a message like this, don’t be <em>too</em> alarmed; many vulnerabilities, especially in the “moderate” category, carry very low real-world risk, and may only be relevant in highly specific situations. (For example, it may only be one method in a package, when used in a particular way, that makes it vulnerable.)</p>\n\n\n\n<p>Still, it’s best to address what we can, which is what the <code>npm audit fix</code> command is for. Adding <code>fix</code> to the end tells npm to go ahead and update to a new <em>minor version</em> of any package with a known vulnerability of some kind. The “minor version” part is important; minor versions aren’t supposed to contain breaking changes, only updates. That means it <em>should</em> be safe to run an update this way without any risk of breaking your project.</p>\n\n\n\n<p>If bumping the package up by a minor version number doesn’t do the trick, you can add the <code>--force</code> flag to the original command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm audit fix --force</code></pre>\n\n\n\n<p><strong>This is a risky maneuver, however.</strong> Giving npm permission to “use the force” means it can now install <em>major</em> version updates to address vulnerabilities—which means it may make breaking changes or introduce incompatibilities. I wouldn’t recommend doing this unless there are critical vulnerabilities that <code>npm audit fix</code> is unable address and you are willing and able to spend significant time afterwards troubleshooting, if necessary.</p>\n\n\n\n<p>One last note on this topic: it helps to know that you can sometimes fix some unexpected issues with npm projects by deleting <code>node_modules</code>, and re-running <code>npm install</code>. That’s the npm way of “turning things off and on again,” which is something I’ve done many, many times myself.</p>\n\n\n\n<h3>What’s next</h3>\n\n\n\n<p>Now that we’ve thoroughly explored the rabbit hole of how npm works under the hood, let’s get back to actually <em>doing</em> things, shall we?</p>\n\n\n\n<div class=\"wp-container-61f1da5d977fa wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">← Chapter 6</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">Chapter 8 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-install-npm-packages/\">How the Heck Do You Install npm Packages?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "By now, you’re becoming quite knowledgeable with npm! So far, we’ve broken down the three letters in “npm” to gain a better understand of Node and package managers. In the previous chapter, we even installed Node and npm while getting acquainted with Node Version Manager, or nvm. Next up in this beginner’s guide to npm is likely why you’re here in the first place: installing npm packages.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages? (You are here!)What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\nA quick example\n\n\n\nWe can install our very first package with the npm install command (or npm i for short), followed by the name of the packages we want to add to our project. For example, the Node package for Sass is simply called “sass” which means we can add to a project like this (just be sure you’re in a new folder you created for this little project first):\n\n\n\nnpm install sass\n\n\n\nThat’s all you need! Type that and npm goes straight to work:\n\n\n\n\n\n\n\nWhat’s happening behind the scenes there is that npm tries to find a package named sass in the npm package registry. If it finds that package (which it does), npm installs it to the project in an automatically generated node_modules folder (more on this in a bit) located in the project root folder, including everything the package needs to run. (This is why you see that npm added 16 packages and audited a total of 17 npm packages, instead of the Sass package alone—it, too, has dependencies!)\n\n\n\nOnce we’ve run the install command, you may notice that you do not see anything named “sass” in the project folder as you might expect. Oddly, however, we do see a three new items in the project folder: two JSON files named package.json and package-lock.json, plus one entirely new node_modules folder.\n\n\n\n\n\n\n\nWhat are these!? We asked npm to install Sass, not all this stuff. That’s not part of Sass… right? Well, that’s correct, but there’s a very good explanation why those new items were generated in the project folder. Let’s look at what just happened.\n\n\n\nWhat happens when you install a package\n\n\n\nWhen you install (or uninstall, or update) a package, npm does most, if not all, of the following four things:\n\n\n\nUpdates the package.json file in your project, if needed;updates the package-lock.json file (called the “lockfile”) that contains all of the technical specifics;installs the actual package files—and any other packages the original package might depend on (inside of the node_modules folder); andruns an audit of the installed packages.\n\n\n\nLet’s step through those one-by-one.\n\n\n\npackage.json and package-lock.json\n\n\n\nThese two JSON files work together to ensure an accurate record of all the dependencies in your project (and all of their dependencies, and all of their dependencies’ dependencies, and so on). The difference is a little technical, but loosely explained: the lockfile is the in-depth, precise snapshot of the project’s dependency tree, and package.json is a high level overview, which can also contain other things. The main packages you install may be listed in package.json, but package-lock.json is where the entire dependency tree is tracked.\n\n\n\nThe lockfile is also never supposed to be updated by hand; only by npm. So be sure to avoid mistaking the lockfile with the package.json file.\n\n\n\nWhen you share or collaborate with others on a project, npm knows where the project came from and exactly what you have installed in the project by these two files. It can replicate that environment precisely on anyone else’s machine, thanks to their info. Both files are meant to be committed to your Git repo, and serve as your project’s dependency blueprint. That way, when another developer on your team clones the repo and runs the npm install command, npm knows exactly which packages to install, keeping you and your colleague in sync.\n\n\n\nIf you open package.json, you won’t see much, but it’s worth a peek just to see what’s happening:\n\n\n\n{\n  \"dependencies\": {\n    \"sass\": \"^1.43.4\"\n  }\n}\n\n\n\nYou probably won’t see that exact version number (since the package has been updated since the time of writing), but you should see sass listed inside a JSON dependencies object. The number itself (1.43.4 in this case) indicates the specific version of Sass that is installed.\n\n\n\nAs a brief but important side tangent: the carat character (^) at the beginning of the version number lets npm know that it is allowed to install minor updates to the package. In other words, it tells npm that the installed Sass package must be at least version 1.43.4, but can be any higher 1.x.x version, as long as it’s still under 2.0.0. npm generally chooses the latest stable version when a package is installed, but adds this to allow for non-breaking updates. That bit is called “semantic versioning” and it’s a blog post unto itself, but not unique to npm.\n\n\n\nAnyway, that covers the two JSON files. Let’s talk about the node_modules folder next.\n\n\n\nnode_modules\n\n\n\nnode_modules is where all the actual package code lives; it’s where your installed Node packages and all the stuff that makes them run actually get installed. If you open up the folder right now as you’re following along, you’ll find a sass folder, but alongside several other folders as well.\n\n\n\nThe reason for the additional folders is that when you install a package, it may need other packages to run properly (as Sass clearly does). So, npm automatically does the hard work of finding and installing all of those dependencies as well. As you may have guessed, those dependencies may also have other dependencies of their own, and so the process repeats, so on and so forth, until we’ve finished crawling the dependency tree to its furthest branches and absolutely everything we need is installed (or until we’ve hit an error of some kind, though hopefully not).\n\n\n\nFor this reason, it’s common for a project to have node_modules subfolders in the hundreds or more, which add up quickly in terms of disk space. node_modules can often get pretty hefty.\n\n\n\nIf you’re wondering how you would commit a super large folder like node_modules to a project’s repository, here’s an important note: Unlike the JSON files, the node_modules folder is not meant to be committed to Git, or even shared. In fact, just about every example of a .gitignore file (the file that tells which files Git should skip when tracking files) includes node_modules to ensure Git never touches or tracks it.\n\n\n\nSo, how does anyone else on your team get those packages? They run npm install (or npm i for short) from the command line to download the dependencies directly from the source. This way, there’s no need to commit (or pull) massive amounts of data to and from the origin repo.\n\n\n\nUsing caution when installing dependencies\n\n\n\nThis massive web of dependencies and their great-great-grand-dependencies can lead to situations where a small utility library of some kind that provides a useful service can become adopted by many other packages, which are, in turn, used in many other packages, until eventually the original code winds up quietly installed on a significant percentage of sites and apps.\n\n\n\nIt might sound wild (if not downright scary) that, in the process of installing your one package, you may actually be letting a whole bunch of other stuff through the door. It can feel like inviting a new friend to your house party, who then shows up with 20 uninvited strangers. But it’s not as weird or scary as it may seem, for a few reasons:\n\n\n\nMost npm packages are open source. You and anybody else can easily peek under the hood and see exactly what the package is doing. You can also look the package up on the registry (npmjs.com) to see how many times it’s been installed, when it was last updated, and other relevant info. If a package is fairly popular, you can be reasonably certain it’s safe.There’s a vast world of functionality that many projects will need. Consider date formatting, handling HTTP requests and responses, throttling, debouncing, or animations, just as quick examples. It doesn’t make sense to keep reinventing the wheel and hand-coding these things every time they’re used in a new project.Installing a package isn’t really that different than installing an app on your phone, or a plugin on a WordPress site. The difference is that we don’t get the same glimpse into the inner workings of those apps and plugins the way we do with packages, nor what other things those apps and plugins might rely on. Odds are good they pull in many smaller packages, too, in some way or another.\n\n\n\nA degree of caution is a good idea in any environment in which one can install and execute arbitrary code, of course. Don’t get me wrong. I’d be lying if I said bad actors have never successfully taken advantage of this system. But know that there are many processes in place to keep things from going awry. When in doubt, stick with the most popular packages and you’ll be fine.\n\n\n\nAlso know that npm runs automatic security audits for you, which brings us to the final point in this section.\n\n\n\nWhat is npm audit?\n\n\n\nWhen we installed sass earlier, we saw the following message in the terminal once it finished:\n\n\n\nfound 0 vulnerabilities\n\n\n\nHowever, you may see some warnings instead—like this old project of mine in the following image. I decided to boot it up and run npm install (npm i) after it’s sat for at least a couple of years. Let’s see how it did:\n\n\n\nYIKES!\n\n\n\nPackages with known vulnerabilities are called out by npm audit, which runs automatically any time you install a package. If you see a message like this, don’t be too alarmed; many vulnerabilities, especially in the “moderate” category, carry very low real-world risk, and may only be relevant in highly specific situations. (For example, it may only be one method in a package, when used in a particular way, that makes it vulnerable.)\n\n\n\nStill, it’s best to address what we can, which is what the npm audit fix command is for. Adding fix to the end tells npm to go ahead and update to a new minor version of any package with a known vulnerability of some kind. The “minor version” part is important; minor versions aren’t supposed to contain breaking changes, only updates. That means it should be safe to run an update this way without any risk of breaking your project.\n\n\n\nIf bumping the package up by a minor version number doesn’t do the trick, you can add the --force flag to the original command:\n\n\n\nnpm audit fix --force\n\n\n\nThis is a risky maneuver, however. Giving npm permission to “use the force” means it can now install major version updates to address vulnerabilities—which means it may make breaking changes or introduce incompatibilities. I wouldn’t recommend doing this unless there are critical vulnerabilities that npm audit fix is unable address and you are willing and able to spend significant time afterwards troubleshooting, if necessary.\n\n\n\nOne last note on this topic: it helps to know that you can sometimes fix some unexpected issues with npm projects by deleting node_modules, and re-running npm install. That’s the npm way of “turning things off and on again,” which is something I’ve done many, many times myself.\n\n\n\nWhat’s next\n\n\n\nNow that we’ve thoroughly explored the rabbit hole of how npm works under the hood, let’s get back to actually doing things, shall we?\n\n\n\n\n← Chapter 6\n\n\n\nChapter 8 →\n\n\nHow the Heck Do You Install npm Packages? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:03:49.000Z",
      "date_modified": "2022-01-20T15:03:49.000Z",
      "_plugin": {
        "pageFilename": "4c37b48458a97407e57a78a1eddde777b94d92e8ecf3412408911b352368ccc1.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361320",
      "url": "https://css-tricks.com/what-the-heck-are-npm-commands/",
      "title": "What the Heck Are npm Commands?",
      "summary": "npm is, as you now know, a package manager. But like similar, earlier tools that run tasks in the command line, such as Grunt and Gulp, npm can also run tasks—which is perfect for us because now that …\n\nWhat the Heck Are npm Commands? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>npm is, as you now know, a <a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">package manager</a>. But like similar, earlier tools that run tasks in the command line, such as <a href=\"https://gruntjs.com/\" rel=\"noopener\">Grunt</a> and <a href=\"https://gulpjs.com/\" rel=\"noopener\">Gulp</a>, npm can also run tasks—which is perfect for us because now that we installed the Sass package in the <a href=\"https://css-tricks.com/how-to-install-npm-packages\">previous chapter</a>, we can starting using it!</p>\n\n\n\n<span id=\"more-361320\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>Jumping into npm commands</h3>\n\n\n\n<p>Open the <code>package.json</code> file in your test folder, and you won&#8217;t see much right now; just a <code>dependencies</code> property, with only one dependency so far:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"dependencies\": {\n    \"sass\": \"^1.43.4\"\n  }\n}</code></pre>\n\n\n\n<p>The <code>package.json</code> file is home to much more than just dependencies, however. It contains lots of meta-info <em>about </em>your project too. One of the most interesting bits is an optional, but extremely useful property called <code>scripts</code>.</p>\n\n\n\n<p class=\"is-style-explanation\">Remember, all the sub-dependencies of Sass are tracked in <code>package-lock.json</code>, which is auto-generated, and shouldn&#8217;t be edited by hand. <code>package.json</code> generally just contains the top-level dependencies, and we can customize it freely.</p>\n\n\n\n<p>The <code>scripts</code> object in your <code>package.json</code> file allows you to create commands you can run in that project to handle various tasks for you, either as a one-shot, or a continuously running process. Generally, these “tasks” are used for things like starting up a dev server for local development, compiling assets, and/or running tests. In fact, there’s often a single <code>start</code> or <code>dev</code> command built into projects to handle <em>all</em> the tasks you might need to run concurrently, like compiling Sass and JavaScript in the same sequence.</p>\n\n\n\n<p>We don&#8217;t have any scripts to run yet, but let&#8217;s fix that!</p>\n\n\n\n<h3>Example: Compiling Sass into CSS</h3>\n\n\n\n<p>Inside of the <code>scripts</code> section of the <code>package.json</code> file, we have access to all of our installed packages. Even though we are unable to simply type <code>sass</code> commands in the terminal right now, we can run <code>sass</code> commands as part of an npm script.</p>\n\n\n\n<p class=\"is-style-explanation\">We could run <code>sass</code> commands in the terminal if Sass were installed globally, which means system-wide, rather than installed in a specific project folder. So far, we’ve only installed Sass to this folder (that&#8217;s what happens by default when you install a package). But a global installation would make <code>sass</code> commands available anywhere on the system.</p>\n\n\n\n<p>Start by pasting this block of code into your <code>package.json</code> file, right after the opening <code>{</code> curly brace:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"scripts\": {\n  \"sass:build\": \"sass style.scss style.css\"\n},</code></pre>\n\n\n\n<p class=\"is-style-explanation\">JSON syntax is very strict. Try running the file&#8217;s contents through a <a href=\"https://jsonlint.com/\" rel=\"noopener\">JSON validator</a> if you get stuck.</p>\n\n\n\n<p>This gives us access to an <code>npm run sass:build</code> script, which will compile Sass into CSS for us!</p>\n\n\n\n<p>The name of the command is unimportant, as long as it’s one continuous string. Also worth noting is that the colon (<code>:</code>) doesn’t do anything special here; it’s just convention, since either <code>build</code> or <code>sass</code> on its own would likely be too generic.</p>\n\n\n\n<p>If you&#8217;ve worked with Sass commands before—or if you were peeking ahead—you probably know this means we also need to create a <code>style.scss</code> file in the root of our project folder. Let’s do that, and toss some arbitrary Sass code into it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2116\" height=\"1282\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=2116%2C1282&#038;ssl=1\" alt=\"Screenshot of the VS Code app with an open style.scss file. The file contains a Sass color variable and one selector that's nested three levels deep.\" class=\"wp-image-361322\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?w=2116&amp;ssl=1 2116w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=300%2C182&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=1024%2C620&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=768%2C465&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=1536%2C931&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=2048%2C1241&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=1000%2C606&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The <code>style.scss</code> file sits alongside the JSON files and <code>node_modules</code> folder at the top level of the project folder.</figcaption></figure>\n\n\n\n<p>Here’s the Sass code I used, if you’d like to copy and paste it:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">$myColor: #ffd100;\n\n.a {\n  .nested {\n    .selector {\n      color: $myColor;\n    }\n  }\n}</code></pre>\n\n\n\n<p>Great! Save that file as <code>style.scss</code> in the root of your project, and let’s try running our new command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm run sass:build</code></pre>\n\n\n\n<p>Once this task has completed, you should see two new files appear almost instantly in your project folder: <code>style.css</code> and <code>style.css.map</code>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2086\" height=\"1422\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=2086%2C1422&#038;ssl=1\" alt=\"Screenshot of the VS Code app with a style.scss file open and an open terminal below that with npm commands, including npm run sass:build.\" class=\"wp-image-361324\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?w=2086&amp;ssl=1 2086w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=300%2C205&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=1024%2C698&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=768%2C524&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=1536%2C1047&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=2048%2C1396&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=1000%2C682&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>After running <code>npm run sass:build</code>, you should see style.css and style.css.map file appear in the top level of the project folder.</figcaption></figure>\n\n\n\n<p>If you like, you can pop open the <code>style.css</code> file—which contains the compiled CSS code—to verify that it is indeed what we expect:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2086\" height=\"1422\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=2086%2C1422&#038;ssl=1\" alt=\"Screenshot of the VS Code app with a compiled style.css file open showing how the npm command to run Sass has processed the Sass code into normal CSS. An open terminal is below it showing the npm commands that were used.\" class=\"wp-image-361326\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?w=2086&amp;ssl=1 2086w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=300%2C205&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=1024%2C698&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=768%2C524&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=1536%2C1047&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=2048%2C1396&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=1000%2C682&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Look at that, pure CSS!</figcaption></figure>\n\n\n\n<p>The <code>sass</code> package even goes so far as to compile a <a href=\"https://css-tricks.com/should-i-use-source-maps-in-production/\">source map</a> for us, which lets us see what styles came from what <code>.scss</code> files when we inspect them in a browser’s DevTools. How nice!</p>\n\n\n\n<p><strong>If you hit an error:</strong> double check the syntax inside of <code>package.json</code> to make sure it is valid JSON (here’s an <a href=\"https://jsonlint.com/\" rel=\"noopener\">online JSON validator</a> you can use), and that your <code>.scss</code> file contains valid Sass (here’s an <a href=\"https://jsonformatter.org/sass-to-css\" rel=\"noopener\">online Sass converter</a>). Another thing to check is that the name of the file matches the name in the command.</p>\n\n\n\n<h3>Creating a development-only command</h3>\n\n\n\n<p>This is pretty neat, but we’ll probably get tired of running that command over and over as we&#8217;re developing. So, let’s set up a second command that tells Sass to <em>watch</em> the file for us, and re-compile it automatically any time we save changes!</p>\n\n\n\n<p>Add this inside the <code>scripts</code> object in <code>package.json</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"sass:watch\": \"sass style.scss style.css --watch\"</code></pre>\n\n\n\n<p class=\"is-style-explanation\"><strong>Important note:</strong> Make sure there is a comma (<code>,</code>) between the two scripts. The order doesn’t matter, but the comma between them does. Again, JSON is strict, so lean on the <a href=\"https://jsonlint.com/\" rel=\"noopener\">JSON validator</a> if needed.</p>\n\n\n\n<p>Now, if we run <code>sass:watch</code> (not to be confused with sasquatch), you’ll see a message in your terminal saying, “Sass is watching for changes. Press Ctrl-C to stop.”</p>\n\n\n\n<p>If you open your <code>style.scss</code> file now, make a change, and save it, you should see a message automatically pop up in the terminal confirming that the Sass has re-compiled into CSS:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1050\" height=\"204\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362748463_file.png?resize=1050%2C204&#038;ssl=1\" alt=\"A screenshot of text from the terminal saying that Sass is watching for changes. Press control plus c to stop. Below that it says that the style.scss file has compiled into a style.css file.\" class=\"wp-image-361334\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362748463_file.png?w=1050&amp;ssl=1 1050w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362748463_file.png?resize=300%2C58&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362748463_file.png?resize=1024%2C199&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362748463_file.png?resize=768%2C149&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362748463_file.png?resize=1000%2C194&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now <em>that’s</em> useful! Not only that, but once we commit these files to our repo, we’ll have the exact directions to get Sass installed and up and running, with a simple command—and so will everybody else who works on this project!</p>\n\n\n\n<p>We’ll leave things here on this test project. It was useful to see how to get started, but more often than not, you’ll be reaching for a pre-configured project, rather than creating npm commands them from scratch, which is exactly what we’ll do next, in the <a href=\"https://css-tricks.com/how-to-install-an-npm-project\">final chapter</a> of this npm guide.</p>\n\n\n\n<h3>Final notes on installing npm packages</h3>\n\n\n\n<p>You should know that there are actually two ways to install npm packages, and which one you want depends on whether the package is meant to be a part of the production build, or whether it’s purely for development purposes.</p>\n\n\n\n<ul><li><code>npm install</code> (or <code>npm i</code>) is the standard (and default) way to add a package to a project.</li><li><code>npm install</code> <code>--save-dev</code> (or <code>npm i -D</code>) only adds the package to your “dev dependencies,” which means they’ll only be installed when <em>developing</em> the project, and not when building the finalized production version of the project.</li></ul>\n\n\n\n<p>Packages installed as development dependencies might include testing libraries, linters, preview servers, and other tools that help you during the development process only. They aren’t typically used to compile or run the website itself.</p>\n\n\n\n<p>There’s one final flag worth knowing about: <code>npm install --global</code> (or <code>npm i -g</code>). This is how to install a package globally, as we discussed a little earlier when installing Sass. You could use this if, for example, you want to be able to run <code>sass</code> <em>anywhere</em> on your machine. Other common use cases for global installation might include <abbr title=\"Command Line Interface\">CLI</abbr> tools that you’d want to use everywhere, or even another package manager, like <a href=\"https://yarnpkg.com\" rel=\"noopener\">Yarn</a>.</p>\n\n\n\n<h3>What’s next</h3>\n\n\n\n<p>We’re nearing the conclusion of our journey! There&#8217;s one last thing you ought to know, and how to use npm to quickly spin up everything you need on an existing project. So, let’s say you inherit a project that uses npm. Where do you start? How do you make sure you&#8217;re collaborating with others consistently? That’s the focus of the last section of this npm guide.</p>\n\n\n\n<div class=\"wp-container-61f1da5d9c34f wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/how-to-install-npm-packages\">← Chapter 7</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/how-to-install-an-npm-project\">Chapter 9 →</a></div>\n</div>\n\n\n\n<p></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/what-the-heck-are-npm-commands/\">What the Heck Are npm Commands?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "npm is, as you now know, a package manager. But like similar, earlier tools that run tasks in the command line, such as Grunt and Gulp, npm can also run tasks—which is perfect for us because now that we installed the Sass package in the previous chapter, we can starting using it!\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands? (You are here!)How the Heck Do You Install an Existing npm Project?\n\n\n\nJumping into npm commands\n\n\n\nOpen the package.json file in your test folder, and you won’t see much right now; just a dependencies property, with only one dependency so far:\n\n\n\n{\n  \"dependencies\": {\n    \"sass\": \"^1.43.4\"\n  }\n}\n\n\n\nThe package.json file is home to much more than just dependencies, however. It contains lots of meta-info about your project too. One of the most interesting bits is an optional, but extremely useful property called scripts.\n\n\n\nRemember, all the sub-dependencies of Sass are tracked in package-lock.json, which is auto-generated, and shouldn’t be edited by hand. package.json generally just contains the top-level dependencies, and we can customize it freely.\n\n\n\nThe scripts object in your package.json file allows you to create commands you can run in that project to handle various tasks for you, either as a one-shot, or a continuously running process. Generally, these “tasks” are used for things like starting up a dev server for local development, compiling assets, and/or running tests. In fact, there’s often a single start or dev command built into projects to handle all the tasks you might need to run concurrently, like compiling Sass and JavaScript in the same sequence.\n\n\n\nWe don’t have any scripts to run yet, but let’s fix that!\n\n\n\nExample: Compiling Sass into CSS\n\n\n\nInside of the scripts section of the package.json file, we have access to all of our installed packages. Even though we are unable to simply type sass commands in the terminal right now, we can run sass commands as part of an npm script.\n\n\n\nWe could run sass commands in the terminal if Sass were installed globally, which means system-wide, rather than installed in a specific project folder. So far, we’ve only installed Sass to this folder (that’s what happens by default when you install a package). But a global installation would make sass commands available anywhere on the system.\n\n\n\nStart by pasting this block of code into your package.json file, right after the opening { curly brace:\n\n\n\n\"scripts\": {\n  \"sass:build\": \"sass style.scss style.css\"\n},\n\n\n\nJSON syntax is very strict. Try running the file’s contents through a JSON validator if you get stuck.\n\n\n\nThis gives us access to an npm run sass:build script, which will compile Sass into CSS for us!\n\n\n\nThe name of the command is unimportant, as long as it’s one continuous string. Also worth noting is that the colon (:) doesn’t do anything special here; it’s just convention, since either build or sass on its own would likely be too generic.\n\n\n\nIf you’ve worked with Sass commands before—or if you were peeking ahead—you probably know this means we also need to create a style.scss file in the root of our project folder. Let’s do that, and toss some arbitrary Sass code into it.\n\n\n\nThe style.scss file sits alongside the JSON files and node_modules folder at the top level of the project folder.\n\n\n\nHere’s the Sass code I used, if you’d like to copy and paste it:\n\n\n\n$myColor: #ffd100;\n\n.a {\n  .nested {\n    .selector {\n      color: $myColor;\n    }\n  }\n}\n\n\n\nGreat! Save that file as style.scss in the root of your project, and let’s try running our new command:\n\n\n\nnpm run sass:build\n\n\n\nOnce this task has completed, you should see two new files appear almost instantly in your project folder: style.css and style.css.map.\n\n\n\nAfter running npm run sass:build, you should see style.css and style.css.map file appear in the top level of the project folder.\n\n\n\nIf you like, you can pop open the style.css file—which contains the compiled CSS code—to verify that it is indeed what we expect:\n\n\n\nLook at that, pure CSS!\n\n\n\nThe sass package even goes so far as to compile a source map for us, which lets us see what styles came from what .scss files when we inspect them in a browser’s DevTools. How nice!\n\n\n\nIf you hit an error: double check the syntax inside of package.json to make sure it is valid JSON (here’s an online JSON validator you can use), and that your .scss file contains valid Sass (here’s an online Sass converter). Another thing to check is that the name of the file matches the name in the command.\n\n\n\nCreating a development-only command\n\n\n\nThis is pretty neat, but we’ll probably get tired of running that command over and over as we’re developing. So, let’s set up a second command that tells Sass to watch the file for us, and re-compile it automatically any time we save changes!\n\n\n\nAdd this inside the scripts object in package.json:\n\n\n\n\"sass:watch\": \"sass style.scss style.css --watch\"\n\n\n\nImportant note: Make sure there is a comma (,) between the two scripts. The order doesn’t matter, but the comma between them does. Again, JSON is strict, so lean on the JSON validator if needed.\n\n\n\nNow, if we run sass:watch (not to be confused with sasquatch), you’ll see a message in your terminal saying, “Sass is watching for changes. Press Ctrl-C to stop.”\n\n\n\nIf you open your style.scss file now, make a change, and save it, you should see a message automatically pop up in the terminal confirming that the Sass has re-compiled into CSS:\n\n\n\n\n\n\n\nNow that’s useful! Not only that, but once we commit these files to our repo, we’ll have the exact directions to get Sass installed and up and running, with a simple command—and so will everybody else who works on this project!\n\n\n\nWe’ll leave things here on this test project. It was useful to see how to get started, but more often than not, you’ll be reaching for a pre-configured project, rather than creating npm commands them from scratch, which is exactly what we’ll do next, in the final chapter of this npm guide.\n\n\n\nFinal notes on installing npm packages\n\n\n\nYou should know that there are actually two ways to install npm packages, and which one you want depends on whether the package is meant to be a part of the production build, or whether it’s purely for development purposes.\n\n\n\nnpm install (or npm i) is the standard (and default) way to add a package to a project.npm install --save-dev (or npm i -D) only adds the package to your “dev dependencies,” which means they’ll only be installed when developing the project, and not when building the finalized production version of the project.\n\n\n\nPackages installed as development dependencies might include testing libraries, linters, preview servers, and other tools that help you during the development process only. They aren’t typically used to compile or run the website itself.\n\n\n\nThere’s one final flag worth knowing about: npm install --global (or npm i -g). This is how to install a package globally, as we discussed a little earlier when installing Sass. You could use this if, for example, you want to be able to run sass anywhere on your machine. Other common use cases for global installation might include CLI tools that you’d want to use everywhere, or even another package manager, like Yarn.\n\n\n\nWhat’s next\n\n\n\nWe’re nearing the conclusion of our journey! There’s one last thing you ought to know, and how to use npm to quickly spin up everything you need on an existing project. So, let’s say you inherit a project that uses npm. Where do you start? How do you make sure you’re collaborating with others consistently? That’s the focus of the last section of this npm guide.\n\n\n\n\n← Chapter 7\n\n\n\nChapter 9 →\n\n\n\n\n\n\nWhat the Heck Are npm Commands? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:03:44.000Z",
      "date_modified": "2022-01-20T15:03:44.000Z",
      "_plugin": {
        "pageFilename": "3b21f11575ba94501f9d3bd0392af97a14a53a9ae7d5dbae69c8f15318aa509f.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361337",
      "url": "https://css-tricks.com/how-to-install-an-npm-project/",
      "title": "How the Heck Do You Install an Existing npm Project?",
      "summary": "(This is a sponsored post.)\nWe’ve gotten a good overview of how npm works and how to use it to install packages and run commands at this point. Now let’s go a little further and see what it looks …\n\nHow the Heck Do You Install an Existing npm Project? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>We’ve gotten a good overview of how npm works and how to use it to install packages and run commands at this point. Now let’s go a little further and see what it looks like to download and install an <em>existing</em> npm project, rather than starting one from scratch. More likely than not, that’s probably what you’ll be doing most of the time. It’s much, much easier than installing and configuring all the individual pieces one by one.</p>\n\n\n\n<p>That’s what we’re covering in this final chapter of the guide to npm, and I’ll be drawing from personal experience on a real-life project of mine.</p>\n\n\n\n<span id=\"more-361337\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a> <em>(You are here!)</em></li></ol>\n\n\n\n<h3>Here&#8217;s a real-life npm project</h3>\n\n\n\n<p>The project I’ve chosen for this is my own <a href=\"https://github.com/josh-collinsworth/sveltekit-blog-starter\" rel=\"noopener\">SvelteKit static blog starter</a>. I think it’s a nice example because it comes with lots of pre-installed packages that are great for demonstration purposes.</p>\n\n\n\n<p>This is a real project of mine that’s designed to give you—as you might have guessed by the name—a head-start for building a statically-generated blog site. (“Statically generated” means that our code will be compiled down to <code>.html</code> files, ready to deploy anywhere on the web. This is one of a few approaches encompassed in the <a href=\"https://css-tricks.com/what-makes-a-site-jamstack/\">“Jamstack” way of building sites</a>.)</p>\n\n\n\n<p>And no worries if you don’t know anything about <a href=\"https://kit.svelte.dev/\" rel=\"noopener\">SvelteKit</a>—this is just to demonstrate, and we won’t write anything you don’t already know. That said, it’s worth noting that SvelteKit uses <a href=\"https://vitejs.dev/\" rel=\"noopener\">Vite</a> under the hood, which is actually a <a href=\"https://www.npmjs.com/package/vite\" rel=\"noopener\">npm package</a> that gives us access to modern build tools and a super speedy development server.</p>\n\n\n\n<h3>Cloning the project</h3>\n\n\n\n<p>First, we need to &#8220;clone&#8221; the project, which is a fancy word for copying the project to our system so we can work on it locally. There are two ways to clone an existing project. </p>\n\n\n\n<p>If you prefer the in-browser, visual way, head to <a href=\"https://github.com/josh-collinsworth/sveltekit-blog-starter\" rel=\"noopener\">the starter repo</a> over at GitHub, and click the “Code” dropdown that’s located directly in GitHub’s UI, and select the “Download ZIP” option.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419196763_dlzip.png?resize=398%2C321&#038;ssl=1\" alt=\"A screenshot of a GitHub repo zoomed in to the top-right corner of the page with the Code button clicked and showing options to clone the repository. The option to download a ZIP file has a big white arrow pointing at it towards the left to call it out for this existing npm project.\" class=\"wp-image-361341\" width=\"398\" height=\"321\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419196763_dlzip.png?w=796&amp;ssl=1 796w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419196763_dlzip.png?resize=300%2C242&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419196763_dlzip.png?resize=768%2C619&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Alternatively, if you prefer using the command line instead, run this command (just make sure you’re in a place where you don’t mind a new project folder added to your computer, e.g. <code>cd /path/to/folder</code>):</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npx degit https://github.com/josh-collinsworth/sveltekit-blog-starter.git sveltekit-blog-starter\n</code></pre>\n\n\n\n<p>You may remember that <code>npx</code> allows us to run npm packages without permanently installing them. <code>degit</code> clones the project just like <code>git clone</code> would, but without its Git history (literally, “de-git”).</p>\n\n\n\n<p>Whichever method you use, you get a fresh new <code>sveltekit-blog-starter</code> folder. Let’s open it in a code editor, pop open the terminal, and run the <code>npm install</code> (or <code>npm i</code>) command.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419289027_vulns.png?resize=522%2C274&#038;ssl=1\" alt=\"An open dark Terminal that has run the npm i command to install an existing npm project called sveltekit-blocg-starter. 202 npm packages are installed in three seconds. There are zero vulnerabilities.\" class=\"wp-image-361344\" width=\"522\" height=\"274\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419289027_vulns.png?w=1044&amp;ssl=1 1044w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419289027_vulns.png?resize=300%2C157&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419289027_vulns.png?resize=1024%2C538&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419289027_vulns.png?resize=768%2C403&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419289027_vulns.png?resize=1000%2C525&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>npm automatically runs an audit when installing packages.</figcaption></figure>\n\n\n\n<p>At this point, you’ll see a note about vulnerabilities, like we covered in the last section of this guide. It may say something like “found 0 vulnerabilities” (as it does in screenshot above), but it’s quite possible that number will be greater than zero. If you do see vulnerabilities, don’t worry. You’re free to ignore it for now since this isn’t a project we intend to launch in production for others to see or use. (See the section on <code>npm audit</code> in a previous chapter for more info.)</p>\n\n\n\n<h3>Starting the server and making changes</h3>\n\n\n\n<p>If you were to peek inside of the <code>package.json</code> file in the cloned project, you’d see the command to start the dev server:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm run dev</code></pre>\n\n\n\n<p>Run that command in the terminal and you should see something like the following almost immediately:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416625430_01-43-wvtkv-5cnvv.png?resize=640%2C471&#038;ssl=1\" alt=\"An open dark terminal window that ran the npm run dev command. The terminal output shows that a localhost address has been set up where the development for the project can be previewed.\" class=\"wp-image-361349\" width=\"640\" height=\"471\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416625430_01-43-wvtkv-5cnvv.png?w=1280&amp;ssl=1 1280w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416625430_01-43-wvtkv-5cnvv.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416625430_01-43-wvtkv-5cnvv.png?resize=1024%2C754&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416625430_01-43-wvtkv-5cnvv.png?resize=768%2C565&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416625430_01-43-wvtkv-5cnvv.png?resize=1000%2C736&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In VS Code, you can press <kbd>CMD</kbd> while clicking the <code>http://localhost:3000</code> URL, or you can manually enter it in your browser. Either way, the site should be displayed in the browser!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2782\" height=\"2118\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=2782%2C2118&#038;ssl=1\" alt=\"A screenshot of a website that is open at a localhost URL, demonstrating that the development server for the npm project is running and can be viewed in the browser. The site has a light aqua header with a My Awesome Blog heading followed by three navigation links, all centered in the container. After that is the main body of the page with a faint pale green background and darker text, including a heading that says SvelteKit static blog starter followed by a short description of the project and an unordered list of features.\" class=\"wp-image-361353\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?w=2782&amp;ssl=1 2782w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=300%2C228&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=1024%2C780&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=768%2C585&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=1536%2C1169&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=2048%2C1559&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=1000%2C761&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><strong>Let’s take just a moment here to appreciate how relatively fast and simple that was!</strong> Yes, we might have had to install a bunch of scaffolding first, but that’s an up-front, one-time cost. We have an entire project running on our machine with just a couple of commands—and we can do this same thing any time we want to install another existing project!</p>\n\n\n\n<p>I won’t go deep into the details of this particular project because it’s unimportant to learning npm, but it’s a nice example because it has lots of cool things pre-configured, and we can easily make changes and see them update right away in the browser. Let&#8217;s look at a few of those commands next.</p>\n\n\n\n<p class=\"is-style-explanation\">SvelteKit requires Node 14 or higher. If you installed npm as part of this guide, that won&#8217;t be a problem for you. But if you already had it installed before we started, and if you run into errors trying to get this project running, it&#8217;s worth a quick <code>node -v</code> to be sure. <a href=\"https://github.com/nvm-sh/nvm\" rel=\"noopener\">nvm</a> is your friend if you need to upgrade.</p>\n\n\n\n<h3>Automatically compile Sass on save</h3>\n\n\n\n<p>You can find the project’s Sass files in the <code>src/lib/assets/scss/</code> folder. Try opening the <code>global.scss</code> file directly. Make a change, save it, and you should see the update automatically (and almost <em>instantly</em>) in your browser.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1080\" height=\"595\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638460407997_ezgif.com-gif-maker.gif?resize=1080%2C595&#038;ssl=1\" alt=\"An animated GIF showing the development site preview open on the left and the VS Code editor on the write with a global.scss file open. The body font size is changed in the Sass code, then saved, which triggers an immediate new preview in the browser without having to manually reload the page.\" class=\"wp-image-361357\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<h3>Making content changes</h3>\n\n\n\n<p>The starter site actually uses the repo’s <code>README.md</code> file as its homepage. If you open <code>README.md</code> and begin making changes (it’s OK if you don’t know <a href=\"https://css-tricks.com/little-stuff-markdown-always-forget-google/\">Markdown</a>, any edit will do), you should also see those changes show up as soon as you save just like Sass did in the last step:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1023\" height=\"564\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638460710043_02-54-qvm1u-ojw86.gif?resize=1023%2C564&#038;ssl=1\" alt=\"\" class=\"wp-image-361360\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>If you want, you can open another page, say the <code>src/routes/contact.svelte</code> file, and update the HTML to see it live refresh in your browser as well as soon as it saves.</p>\n\n\n\n<p>You can even duplicate one of the Markdown files inside of <code>src/lib/posts/</code> and make edits to see that it automatically appear in the list of posts on the <code>/blog</code> page, if you want to go that far. (Just be sure to give it a unique title.)</p>\n\n\n\n<h3>Understanding imports</h3>\n\n\n\n<p>There&#8217;s one important thing about npm projects that <a href=\"https://css-tricks.com/node-and-how-it-works-with-npm#aa-node-is-almost-but-not-exactly-javascript\">we mentioned briefly in the fourth chapter,</a> but haven&#8217;t covered yet: <strong>imports.</strong> This guide wouldn&#8217;t really be complete if we didn&#8217;t touch on that. The basic idea is that we can—true to the name—import a package, only do so without ever installing it either in a project folder or your system. Instead, it&#8217;s used on the spot.</p>\n\n\n\n<p>How so? Open up the <code>svelte.config.js</code> folder in the project root, and you&#8217;ll see a block of <code>import</code> lines at the top, something like this:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import adapter from '@sveltejs/adapter-static'\nimport { mdsvex } from 'mdsvex'\nimport preprocess from 'svelte-preprocess'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypeSlug from 'rehype-slug'</code></pre>\n\n\n\n<p>Every one of those <code>import</code>s is an installed package used in this file. What each package actually does isn&#8217;t important right now; I just want to call attention to the <code>import</code> syntax. This is how we use<em> </em>packages <em>in our actual code files</em>; we tell JavaScript <em>what </em>to import and <em>from where</em>. Then we can call it in our code.</p>\n\n\n\n<p>This syntax is called &#8220;ES6 imports,&#8221; which is only <em>import</em>ant (get it?!) to know because it&#8217;s the standard that both browser-based JavaScript and Node JavaScript have agreed on using going forward.</p>\n\n\n\n<p>Previously, Node JavaScript used (and often still uses) a slightly different syntax called CommonJS. If you see an import that looks like this, that&#8217;s the old CommonJS style:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const myPackage = require('package-name')</code></pre>\n\n\n\n<p>The other crucial thing to understand about the ES6 style of <code>import</code> is: <strong>the syntax is npm-specific, not a language standard.</strong></p>\n\n\n\n<p>To be clear: you <em>can </em>use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\" rel=\"noopener\"><code>import</code> in normal JavaScript</a>. It&#8217;s a very ordinary feature of the language. But you need to provide a relative path, or (in more modern browsers) a URL to whatever you&#8217;re importing. Just using a string with a package&#8217;s slug, like we see here, though, isn&#8217;t valid.</p>\n\n\n\n<p>So why is it used if it&#8217;s not technically valid code? Because handling this style of import is one of the nice things npm does for us. When we tell npm to <code>import somePackage from 'name'</code> as a string, npm automatically knows to go search through the installed packages on the project to find the import what we asked for. This saves us from both typing tedious relative paths, <em>and </em>from actually needing to know where our packages live deep in the labyrinth of <code>node_modules</code>.</p>\n\n\n\n<p>This may go without saying, but: since the syntax isn&#8217;t valid, you won&#8217;t be able to use it successfully unless your npm project includes a bundler or compiler of some kind, to process the imports and modules into valid browser code.</p>\n\n\n\n<h3>Building the final site</h3>\n\n\n\n<p>Most npm projects like this have two main purposes:</p>\n\n\n\n<ol><li>Help you develop your site or app</li><li>Build a finalized, production version</li></ol>\n\n\n\n<p>SvelteKit is no exception. When we’re done with our (awesome) development server setup and happy with our changes, we can run this command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm run build</code></pre>\n\n\n\n<p class=\"is-style-explanation\">If your dev server is still running, you can either stop it with <kbd>Ctrl</kbd>+<kbd>C</kbd>, or open up a new terminal tab. You won’t be able to type any commands in the same terminal window where the dev process is running since it’s an active, continuous task.</p>\n\n\n\n<p>When we run the <code>build</code> command, SvelteKit chews through all the files in the project and spits out a fully bundled, ready-to-deploy collection of static HTML, CSS and JavaScript files, and does so rather quickly. You could upload this collection of files anywhere you can host a website. <strong>Modern tooling; good old-fashioned output.</strong></p>\n\n\n\n<p>When the build command finishes, you should see a new <code>build</code> folder in the root (i.e. top level) of your project folder. If you look through it, you’ll notice there are no longer <code>.md</code>, <code>.svelte</code>, or any other files that can’t be read by a browser. Everything has been compiled into pure HTML, CSS and JavaScript, not to mention—as you’ll see if you open a JavaScript or CSS file—they are thoroughly minified to be as <em>small</em> as possible to load in the browser as <em>fast</em> as possible.</p>\n\n\n\n<p>If you want, you can run <code>npm run preview</code> once the build is finished to see how the compiled site loads in the browser. The difference here is that the content will be loaded from the final <code>build</code> folder, rather than built with pre-compiled files on the fly as it would when using the <code>dev</code> command. You won’t <em>see</em> any difference unless you open up the Network tab in DevTools (or try to update something), but you&#8217;ll be looking at the final product.</p>\n\n\n\n<p>This is an optional step, but I think it’s pretty cool to get an idea of how few compiled files we actually end up with, considering all the various files we put into the project, and how tiny the final bundle actually is, thanks to the amazing build tools built into this project. (For the record, it’s all <a href=\"https://kit.svelte.dev\" rel=\"noopener\">SvelteKit</a> and <a href=\"https://vitejs.dev\" rel=\"noopener\">Vite</a>.)</p>\n\n\n\n<h3>Modern deployment practices</h3>\n\n\n\n<p>This is a topic for another time, but modern deployment often doesn’t require you to run a <code>build</code> command and upload the files yourself (though that’s still an option). Instead, a host (like <a href=\"http://\">Netlify</a> or <a href=\"https://vercel.com\" rel=\"noopener\">Vercel</a><strong>)</strong> connects directly to the GitHub repo of your project and, whenever you push changes to the main branch of the repo, the host runs your build command for you and deploys the compiled files automatically!</p>\n\n\n\n<p>That’s one of the many extremely nice features of this new era of front-end development. No messing with FTP or manually dragging files anywhere; we are confident that everything is built and deployed automatically when we push our code, without us needing to do anything!</p>\n\n\n\n<h3>Wrapping up this npm guide</h3>\n\n\n\n<p>If you’ve made it this far, congratulations! And thank you. Congratulations, because this was a long, <em>long</em> read. And thank you, because… well, it was a long, <em>long</em> read.</p>\n\n\n\n<p>But you made it, and hopefully, you learned some important things as well. I mentioned at the start that my goal was not brevity, but effectiveness. That means we covered a <em>lot</em>. We started with a <a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">brief overview of npm</a> and where it fits in the modern front-end development landscape before <a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">getting familiar with the command line</a>. From there, we broke down the terms <a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">“Node”</a> and <a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">“package manager”</a> to get a precise understanding of what npm is and does. Once we got acquainted with the role that packages managers play in development, we dove straight into npm, including <a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">how to install it</a>, <a href=\"https://css-tricks.com/how-to-install-npm-packages\">add packages to a project</a>, <a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">set up commands</a>, and finally, how to jump into an existing project that uses npm.</p>\n\n\n\n<p>My hope is that everything we covered in this npm guide at least opens the door enough for you to explore npm further and level up when you’re ready. It often takes me repeating something many times and trying multiple approaches for something to truly sink in. So, if you’re sitting there feeling almost as confused as you were before, take some more time on this. Reflect on what you know and what you’ve learned, and come back—or try a new approach when you’re ready!</p>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">← Chapter 8</a></div>\n</div>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a> <em>(You are here!)</em></li></ol>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-install-an-npm-project/\">How the Heck Do You Install an Existing npm Project?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "(This is a sponsored post.)\nWe’ve gotten a good overview of how npm works and how to use it to install packages and run commands at this point. Now let’s go a little further and see what it looks like to download and install an existing npm project, rather than starting one from scratch. More likely than not, that’s probably what you’ll be doing most of the time. It’s much, much easier than installing and configuring all the individual pieces one by one.\n\n\n\nThat’s what we’re covering in this final chapter of the guide to npm, and I’ll be drawing from personal experience on a real-life project of mine.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project? (You are here!)\n\n\n\nHere’s a real-life npm project\n\n\n\nThe project I’ve chosen for this is my own SvelteKit static blog starter. I think it’s a nice example because it comes with lots of pre-installed packages that are great for demonstration purposes.\n\n\n\nThis is a real project of mine that’s designed to give you—as you might have guessed by the name—a head-start for building a statically-generated blog site. (“Statically generated” means that our code will be compiled down to .html files, ready to deploy anywhere on the web. This is one of a few approaches encompassed in the “Jamstack” way of building sites.)\n\n\n\nAnd no worries if you don’t know anything about SvelteKit—this is just to demonstrate, and we won’t write anything you don’t already know. That said, it’s worth noting that SvelteKit uses Vite under the hood, which is actually a npm package that gives us access to modern build tools and a super speedy development server.\n\n\n\nCloning the project\n\n\n\nFirst, we need to “clone” the project, which is a fancy word for copying the project to our system so we can work on it locally. There are two ways to clone an existing project. \n\n\n\nIf you prefer the in-browser, visual way, head to the starter repo over at GitHub, and click the “Code” dropdown that’s located directly in GitHub’s UI, and select the “Download ZIP” option.\n\n\n\n\n\n\n\nAlternatively, if you prefer using the command line instead, run this command (just make sure you’re in a place where you don’t mind a new project folder added to your computer, e.g. cd /path/to/folder):\n\n\n\nnpx degit https://github.com/josh-collinsworth/sveltekit-blog-starter.git sveltekit-blog-starter\n\n\n\n\nYou may remember that npx allows us to run npm packages without permanently installing them. degit clones the project just like git clone would, but without its Git history (literally, “de-git”).\n\n\n\nWhichever method you use, you get a fresh new sveltekit-blog-starter folder. Let’s open it in a code editor, pop open the terminal, and run the npm install (or npm i) command.\n\n\n\nnpm automatically runs an audit when installing packages.\n\n\n\nAt this point, you’ll see a note about vulnerabilities, like we covered in the last section of this guide. It may say something like “found 0 vulnerabilities” (as it does in screenshot above), but it’s quite possible that number will be greater than zero. If you do see vulnerabilities, don’t worry. You’re free to ignore it for now since this isn’t a project we intend to launch in production for others to see or use. (See the section on npm audit in a previous chapter for more info.)\n\n\n\nStarting the server and making changes\n\n\n\nIf you were to peek inside of the package.json file in the cloned project, you’d see the command to start the dev server:\n\n\n\nnpm run dev\n\n\n\nRun that command in the terminal and you should see something like the following almost immediately:\n\n\n\n\n\n\n\nIn VS Code, you can press CMD while clicking the http://localhost:3000 URL, or you can manually enter it in your browser. Either way, the site should be displayed in the browser!\n\n\n\n\n\n\n\nLet’s take just a moment here to appreciate how relatively fast and simple that was! Yes, we might have had to install a bunch of scaffolding first, but that’s an up-front, one-time cost. We have an entire project running on our machine with just a couple of commands—and we can do this same thing any time we want to install another existing project!\n\n\n\nI won’t go deep into the details of this particular project because it’s unimportant to learning npm, but it’s a nice example because it has lots of cool things pre-configured, and we can easily make changes and see them update right away in the browser. Let’s look at a few of those commands next.\n\n\n\nSvelteKit requires Node 14 or higher. If you installed npm as part of this guide, that won’t be a problem for you. But if you already had it installed before we started, and if you run into errors trying to get this project running, it’s worth a quick node -v to be sure. nvm is your friend if you need to upgrade.\n\n\n\nAutomatically compile Sass on save\n\n\n\nYou can find the project’s Sass files in the src/lib/assets/scss/ folder. Try opening the global.scss file directly. Make a change, save it, and you should see the update automatically (and almost instantly) in your browser.\n\n\n\n\n\n\n\nMaking content changes\n\n\n\nThe starter site actually uses the repo’s README.md file as its homepage. If you open README.md and begin making changes (it’s OK if you don’t know Markdown, any edit will do), you should also see those changes show up as soon as you save just like Sass did in the last step:\n\n\n\n\n\n\n\nIf you want, you can open another page, say the src/routes/contact.svelte file, and update the HTML to see it live refresh in your browser as well as soon as it saves.\n\n\n\nYou can even duplicate one of the Markdown files inside of src/lib/posts/ and make edits to see that it automatically appear in the list of posts on the /blog page, if you want to go that far. (Just be sure to give it a unique title.)\n\n\n\nUnderstanding imports\n\n\n\nThere’s one important thing about npm projects that we mentioned briefly in the fourth chapter, but haven’t covered yet: imports. This guide wouldn’t really be complete if we didn’t touch on that. The basic idea is that we can—true to the name—import a package, only do so without ever installing it either in a project folder or your system. Instead, it’s used on the spot.\n\n\n\nHow so? Open up the svelte.config.js folder in the project root, and you’ll see a block of import lines at the top, something like this:\n\n\n\nimport adapter from '@sveltejs/adapter-static'\nimport { mdsvex } from 'mdsvex'\nimport preprocess from 'svelte-preprocess'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypeSlug from 'rehype-slug'\n\n\n\nEvery one of those imports is an installed package used in this file. What each package actually does isn’t important right now; I just want to call attention to the import syntax. This is how we use packages in our actual code files; we tell JavaScript what to import and from where. Then we can call it in our code.\n\n\n\nThis syntax is called “ES6 imports,” which is only important (get it?!) to know because it’s the standard that both browser-based JavaScript and Node JavaScript have agreed on using going forward.\n\n\n\nPreviously, Node JavaScript used (and often still uses) a slightly different syntax called CommonJS. If you see an import that looks like this, that’s the old CommonJS style:\n\n\n\nconst myPackage = require('package-name')\n\n\n\nThe other crucial thing to understand about the ES6 style of import is: the syntax is npm-specific, not a language standard.\n\n\n\nTo be clear: you can use import in normal JavaScript. It’s a very ordinary feature of the language. But you need to provide a relative path, or (in more modern browsers) a URL to whatever you’re importing. Just using a string with a package’s slug, like we see here, though, isn’t valid.\n\n\n\nSo why is it used if it’s not technically valid code? Because handling this style of import is one of the nice things npm does for us. When we tell npm to import somePackage from 'name' as a string, npm automatically knows to go search through the installed packages on the project to find the import what we asked for. This saves us from both typing tedious relative paths, and from actually needing to know where our packages live deep in the labyrinth of node_modules.\n\n\n\nThis may go without saying, but: since the syntax isn’t valid, you won’t be able to use it successfully unless your npm project includes a bundler or compiler of some kind, to process the imports and modules into valid browser code.\n\n\n\nBuilding the final site\n\n\n\nMost npm projects like this have two main purposes:\n\n\n\nHelp you develop your site or appBuild a finalized, production version\n\n\n\nSvelteKit is no exception. When we’re done with our (awesome) development server setup and happy with our changes, we can run this command:\n\n\n\nnpm run build\n\n\n\nIf your dev server is still running, you can either stop it with Ctrl+C, or open up a new terminal tab. You won’t be able to type any commands in the same terminal window where the dev process is running since it’s an active, continuous task.\n\n\n\nWhen we run the build command, SvelteKit chews through all the files in the project and spits out a fully bundled, ready-to-deploy collection of static HTML, CSS and JavaScript files, and does so rather quickly. You could upload this collection of files anywhere you can host a website. Modern tooling; good old-fashioned output.\n\n\n\nWhen the build command finishes, you should see a new build folder in the root (i.e. top level) of your project folder. If you look through it, you’ll notice there are no longer .md, .svelte, or any other files that can’t be read by a browser. Everything has been compiled into pure HTML, CSS and JavaScript, not to mention—as you’ll see if you open a JavaScript or CSS file—they are thoroughly minified to be as small as possible to load in the browser as fast as possible.\n\n\n\nIf you want, you can run npm run preview once the build is finished to see how the compiled site loads in the browser. The difference here is that the content will be loaded from the final build folder, rather than built with pre-compiled files on the fly as it would when using the dev command. You won’t see any difference unless you open up the Network tab in DevTools (or try to update something), but you’ll be looking at the final product.\n\n\n\nThis is an optional step, but I think it’s pretty cool to get an idea of how few compiled files we actually end up with, considering all the various files we put into the project, and how tiny the final bundle actually is, thanks to the amazing build tools built into this project. (For the record, it’s all SvelteKit and Vite.)\n\n\n\nModern deployment practices\n\n\n\nThis is a topic for another time, but modern deployment often doesn’t require you to run a build command and upload the files yourself (though that’s still an option). Instead, a host (like Netlify or Vercel) connects directly to the GitHub repo of your project and, whenever you push changes to the main branch of the repo, the host runs your build command for you and deploys the compiled files automatically!\n\n\n\nThat’s one of the many extremely nice features of this new era of front-end development. No messing with FTP or manually dragging files anywhere; we are confident that everything is built and deployed automatically when we push our code, without us needing to do anything!\n\n\n\nWrapping up this npm guide\n\n\n\nIf you’ve made it this far, congratulations! And thank you. Congratulations, because this was a long, long read. And thank you, because… well, it was a long, long read.\n\n\n\nBut you made it, and hopefully, you learned some important things as well. I mentioned at the start that my goal was not brevity, but effectiveness. That means we covered a lot. We started with a brief overview of npm and where it fits in the modern front-end development landscape before getting familiar with the command line. From there, we broke down the terms “Node” and “package manager” to get a precise understanding of what npm is and does. Once we got acquainted with the role that packages managers play in development, we dove straight into npm, including how to install it, add packages to a project, set up commands, and finally, how to jump into an existing project that uses npm.\n\n\n\nMy hope is that everything we covered in this npm guide at least opens the door enough for you to explore npm further and level up when you’re ready. It often takes me repeating something many times and trying multiple approaches for something to truly sink in. So, if you’re sitting there feeling almost as confused as you were before, take some more time on this. Reflect on what you know and what you’ve learned, and come back—or try a new approach when you’re ready!\n\n\n\n\n← Chapter 8\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project? (You are here!)\n\nHow the Heck Do You Install an Existing npm Project? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:03:35.000Z",
      "date_modified": "2022-01-20T15:03:35.000Z",
      "_plugin": {
        "pageFilename": "a0571696366b9c1cf3daf8e52a7c44106fe13d4c0868f82ed792178aac07a1ac.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360899",
      "url": "https://css-tricks.com/css-dappled-light-effect/",
      "title": "A Serene CSS Dappled Light Effect",
      "summary": "There’s a serene warmth to the early evening sunlight peaking through rustling leaves. Artists use dappled light to create a soft, hypnotic effect.\nBedford Dwellings by Ron Donoughe (2013)\nWe can create the same sort of dappled light effect in …\n\nA Serene CSS Dappled Light Effect originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>There’s a serene warmth to the early evening sunlight peaking through rustling leaves. Artists use dappled light to create a soft, hypnotic effect.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"689\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085770372_screenshot-bedward-dwelling.png?resize=1024%2C689&#038;ssl=1\" alt=\"An oil painting of a tall rectangular orange building with six windows, two by two, and a faint full-width fence in front of it. There is a similar building off in the distance. A tall birch tree is in the foreground with light green and yellow leaves, casting the dappled light effect that is being covered in this article. The shadows cover the green grass between the tree and building, and they extend to the building.\" class=\"wp-image-360902\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085770372_screenshot-bedward-dwelling.png?resize=1024%2C689&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085770372_screenshot-bedward-dwelling.png?resize=300%2C202&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085770372_screenshot-bedward-dwelling.png?resize=768%2C517&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085770372_screenshot-bedward-dwelling.png?resize=1000%2C673&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085770372_screenshot-bedward-dwelling.png?w=1436&amp;ssl=1 1436w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><a href=\"https://artsandculture.google.com/asset/bedford-dwellings-ron-donoughe/IwELi5P0_uiwFg\" rel=\"noopener\">Bedford Dwellings</a> by <a href=\"https://artsandculture.google.com/entity/ron-donoughe/m0h3svmr?categoryId=artist\" rel=\"noopener\">Ron Donoughe</a> (2013)</figcaption></figure>\n\n\n\n<p>We can create the same sort of dappled light effect in web design, using it on photos and illustrations to add that magic touch to what might otherwise be drab walls of content to bring them back to life.</p>\n\n\n\n<p>I’ll give you one easy, quick way to add this effect… with just CSS.</p>\n\n\n\n<span id=\"more-360899\"></span>\n\n\n\n<p>Before we get into the code, it’s important to know the composition of dappled light. It’s made up of large spots — circular or elliptical — of light that are intercepted by the shadows cast by the foliage. Basically the light that slips past leaves, branches and so forth. Sometimes the shadows create crisp edges, but are more often blurred since we’re talking about light that passes though many, less defined spaces that diffuse and distort the light as it casts shadows from a further distance than, say, your own stark shadow on a nearby wall from direct sunlight.</p>\n\n\n\n<p>Here’s the difference in the appearance of a white wall with and without lit by dappled light:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1824\" height=\"762\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?resize=1824%2C762&#038;ssl=1\" alt=\"A side-by-side comparison of the same white brick surface, the left showing the CSS dappled light effect compared to no shadows.\" class=\"wp-image-360906\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?w=1824&amp;ssl=1 1824w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?resize=300%2C125&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?resize=1024%2C428&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?resize=768%2C321&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?resize=1536%2C642&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?resize=1000%2C418&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The effect creates splashes of light and shadow.</figcaption></figure>\n\n\n\n<p>I’m going to recreate the dappled light effect with both plain text and fun emojis, applying CSS shadows and blends to mimic nature. I’ll cover alternative methods too.</p>\n\n\n\n<h3>Setting the scene</h3>\n\n\n\n<p>We’ll use text — letters from the alphabet, special characters, emojis, etc. — to create the shapes of light. And by light, I mean pale, translucent colors. Again, we’re for a dappled light effect rather than something that’s sharp, crisp, or stark.</p>\n\n\n\n<p>It’s best to choose characters that are elliptical or oblong in some way — the spots produced by dappled light comes in a variety of shapes. You’ll have to go with your best judgement here to get exactly what you’re going for. Me? I’m using &#x1f343;, &#x1f342;, <code>\\</code> because they are elliptical, oblong, and slanted — a bit of chaos and unpredictability for an otherwise serene effect.</p>\n\n\n\n<p>I’m wrapping those in paragraphs that are contained in a <code>.backdrop</code> parent element:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"backdrop\">\n  &lt;p class=\"shapes\">&#x1f343;&lt;/p>\n  &lt;p class=\"shapes\">&#x1f342;&lt;/p>\n  &lt;p class=\"shapes\">\\&lt;/p>\n&lt;/div></code></pre>\n\n\n\n<p>I’m using the parent element as the surface where the dappled light and shadows are cast, applying a background image for its texture. And not only am I giving the surface an explicit <code>width</code> and <code>height</code>, but also setting hidden overflow on it so I’m able to cast shadows that go beyond the surface without revealing them. The objects that cast the dappled light effect are aligned in the middle of the backdrop’s surface, thanks to CSS grid:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.backdrop {\n  background: center / cover no-repeat url('image.jpeg');\n  width: 400px; height: 240px;\n  overflow: hidden;\n  display: grid;\n}\n.backdrop > * {\n  grid-area: 1/1;\n}</code></pre>\n\n\n\n<p>I find that it’s OK if the shapes aren’t aligned <em>exactly</em> on top of one another as long as they overlap in a way that gets the dappled light effect you want. So no pressure to do exactly what I’m doing here to position things in CSS. In fact, I encourage you to try playing with the values to get different patterns of dappled light!</p>\n\n\n\n<h3>Styling the dappled light in CSS</h3>\n\n\n\n<p>These are the key properties the emojis should have — <code>transparent</code> color, black semi-transparent background (using the alpha channel in <code>rgba()</code>), blurry white <code>text-shadow</code> with a nice large <code>font-size</code>, and finally, a <a href=\"https://css-tricks.com/almanac/properties/m/mix-blend-mode/\"><code>mix-blend-mode</code></a> to smooth things out.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.shapes {\n  color:  transparent;\n  background-color: rgba(0, 0, 0, 0.3); // Use alpha transparency\n  text-shadow: 0 0 40px #fff; // Blurry white shadow\n  font: bolder 320pt/320pt monospace;\n  mix-blend-mode: multiply;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNZEOJd\" src=\"//codepen.io/anon/embed/WNZEOJd?height=450&amp;theme-id=1&amp;slug-hash=WNZEOJd&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNZEOJd\" title=\"CodePen Embed WNZEOJd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p><code>mix-blend-mode</code> sets how an element’s colors blend with that of its container element’s content. The <code>multiply</code> value causes the backdrop of an element to show through the element’s light colors and keeps dark colors the same, making for a nicer and more natural dappled light effect.</p>\n\n\n\n<h3>Refining colors and contrast</h3>\n\n\n\n<p>I wanted the <code>background-image</code> on the backdrop to be a bit brighter, so I also added <code>filter: brightness(1.6)</code>. Another way to do this is with <a href=\"https://css-tricks.com/almanac/properties/b/background-blend-mode/\"><code>background-blend-mode</code></a> instead, where all the different backgrounds of an element are blended and, instead of adding the emojis as separate elements, we add them as background images.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxXLrav\" src=\"//codepen.io/anon/embed/xxXLrav?height=450&amp;theme-id=1&amp;slug-hash=xxXLrav&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxXLrav\" title=\"CodePen Embed xxXLrav\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Notice that I used a different emoji in that last example as well as <code>floralwhite</code> for some color that’s less intense than pure white for the light. Here’s one of the emoji background images unwrapped:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;svg xmlns='http://www.w3.org/2000/svg'> \n  &lt;foreignObject width='400px' height='240px'> \n    &lt;div xmlns='http://www.w3.org/1999/xhtml' style=\n      'font: bolder 720pt/220pt monospace;\n       color: transparent;\n       text-shadow: 0 0 40px floralwhite;\n       background: rgba(0, 0, 0, 0.3);'\n    >\n      &#x1f33e;\n    &lt;/div> \n  &lt;/foreignObject> \n&lt;/svg></code></pre>\n\n\n\n<p>If you want to use your own images for the shapes, ensure the borders are blurred to create a soft light. The CSS <a href=\"https://css-tricks.com/almanac/properties/f/filter/#blur\"><code>blur()</code></a> filter can be handy for the same sort of thing. I also used CSS <code>@supports</code> to adjust the shadow blur value for certain browsers as a fallback.</p>\n\n\n\n<p>Now let’s circle back to the first example and add a few things:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"backdrop\">\n  &lt;p class=\"shapes\">&#x1f343;&lt;/p>\n  &lt;p class=\"shapes\">&#x1f342;&lt;/p>\n  &lt;p class=\"shapes\">\\&lt;/p>\n&lt;/div>\n\n&lt;p class=\"content\">\n  &lt;img width=\"70px\" style=\"float: left; margin-right: 10px;\" src=\"image.jpeg\" alt=\"\">\n  Top ten tourists spots for the summer vacation &lt;br>&lt;br>&lt;i style=\"font-weight: normal;\">Here are the most popular places...&lt;/i>\n&lt;/p></code></pre>\n\n\n\n<p><code>.backdrop</code> and <code>.shapes</code> are basically the same styles as before. As for the <code>.content</code>, which also sits on top of the <code>.backdrop</code>, I added <a href=\"https://css-tricks.com/almanac/properties/i/isolation/\"><code>isolation: isolate</code></a> to form a new stacking context, excluding the element from the blending as a refining touch.</p>\n\n\n\n<h3>Animating the light source</h3>\n\n\n\n<p>I also decided to add a simple CSS animation with <code>@keyframes</code> that get applied to the <code>.backdrop</code> on <code>:hover</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.backdrop:hover > .shapes:nth-of-type(1){\n  animation: 2s ease-in-out infinite alternate move;\n}\n.backdrop:hover > .shapes:nth-of-type(2):hover{\n  animation: 4s ease-in-out infinite alternate move-1;\n}\n\n@keyframes move {\n  from {\n    text-indent: -20px;\n  }\n  to {\n    text-indent: 20px;\n  }\n}\n@keyframes move-1 {\n  from {\n    text-indent: -60px;\n  }\n  to {\n    text-indent: 40px;\n  }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYzNxaP\" src=\"//codepen.io/anon/embed/LYzNxaP?height=450&amp;theme-id=1&amp;slug-hash=LYzNxaP&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYzNxaP\" title=\"CodePen Embed LYzNxaP\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Animating the <code>text-indent</code> property on the emojis products a super subtle bit of movement — the kind you might expect from clouds moving overhead that change the direction of the light. Just a touch of class, you know.</p>\n\n\n\n<h3>Wrapping up</h3>\n\n\n\n<p>There we have it! We drew some inspiration from nature and art to mimic one of those partly cloudy days where the sun shines through trees and bushes, projecting dappled light and shadow spots against a surface. And we did all of it with a small handful of CSS and a few emoji.</p>\n\n\n\n<p>The key was how we applied color on the emoji. Using an extra blurry <code>text-shadow</code> in a light color sets the light, and a semi-transparent <code>background-color</code> defines the shadow spots. From there, all we had to do was ensure the backdrop for the light and shadows used a realistic texture with enough contrast to see the dappled light effect in action.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-dappled-light-effect/\">A Serene CSS Dappled Light Effect</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "There’s a serene warmth to the early evening sunlight peaking through rustling leaves. Artists use dappled light to create a soft, hypnotic effect.\n\n\n\nBedford Dwellings by Ron Donoughe (2013)\n\n\n\nWe can create the same sort of dappled light effect in web design, using it on photos and illustrations to add that magic touch to what might otherwise be drab walls of content to bring them back to life.\n\n\n\nI’ll give you one easy, quick way to add this effect… with just CSS.\n\n\n\n\n\n\n\nBefore we get into the code, it’s important to know the composition of dappled light. It’s made up of large spots — circular or elliptical — of light that are intercepted by the shadows cast by the foliage. Basically the light that slips past leaves, branches and so forth. Sometimes the shadows create crisp edges, but are more often blurred since we’re talking about light that passes though many, less defined spaces that diffuse and distort the light as it casts shadows from a further distance than, say, your own stark shadow on a nearby wall from direct sunlight.\n\n\n\nHere’s the difference in the appearance of a white wall with and without lit by dappled light:\n\n\n\nThe effect creates splashes of light and shadow.\n\n\n\nI’m going to recreate the dappled light effect with both plain text and fun emojis, applying CSS shadows and blends to mimic nature. I’ll cover alternative methods too.\n\n\n\nSetting the scene\n\n\n\nWe’ll use text — letters from the alphabet, special characters, emojis, etc. — to create the shapes of light. And by light, I mean pale, translucent colors. Again, we’re for a dappled light effect rather than something that’s sharp, crisp, or stark.\n\n\n\nIt’s best to choose characters that are elliptical or oblong in some way — the spots produced by dappled light comes in a variety of shapes. You’ll have to go with your best judgement here to get exactly what you’re going for. Me? I’m using 🍃, 🍂, \\ because they are elliptical, oblong, and slanted — a bit of chaos and unpredictability for an otherwise serene effect.\n\n\n\nI’m wrapping those in paragraphs that are contained in a .backdrop parent element:\n\n\n\n<div class=\"backdrop\">\n  <p class=\"shapes\">🍃</p>\n  <p class=\"shapes\">🍂</p>\n  <p class=\"shapes\">\\</p>\n</div>\n\n\n\nI’m using the parent element as the surface where the dappled light and shadows are cast, applying a background image for its texture. And not only am I giving the surface an explicit width and height, but also setting hidden overflow on it so I’m able to cast shadows that go beyond the surface without revealing them. The objects that cast the dappled light effect are aligned in the middle of the backdrop’s surface, thanks to CSS grid:\n\n\n\n.backdrop {\n  background: center / cover no-repeat url('image.jpeg');\n  width: 400px; height: 240px;\n  overflow: hidden;\n  display: grid;\n}\n.backdrop > * {\n  grid-area: 1/1;\n}\n\n\n\nI find that it’s OK if the shapes aren’t aligned exactly on top of one another as long as they overlap in a way that gets the dappled light effect you want. So no pressure to do exactly what I’m doing here to position things in CSS. In fact, I encourage you to try playing with the values to get different patterns of dappled light!\n\n\n\nStyling the dappled light in CSS\n\n\n\nThese are the key properties the emojis should have — transparent color, black semi-transparent background (using the alpha channel in rgba()), blurry white text-shadow with a nice large font-size, and finally, a mix-blend-mode to smooth things out.\n\n\n\n.shapes {\n  color:  transparent;\n  background-color: rgba(0, 0, 0, 0.3); // Use alpha transparency\n  text-shadow: 0 0 40px #fff; // Blurry white shadow\n  font: bolder 320pt/320pt monospace;\n  mix-blend-mode: multiply;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nmix-blend-mode sets how an element’s colors blend with that of its container element’s content. The multiply value causes the backdrop of an element to show through the element’s light colors and keeps dark colors the same, making for a nicer and more natural dappled light effect.\n\n\n\nRefining colors and contrast\n\n\n\nI wanted the background-image on the backdrop to be a bit brighter, so I also added filter: brightness(1.6). Another way to do this is with background-blend-mode instead, where all the different backgrounds of an element are blended and, instead of adding the emojis as separate elements, we add them as background images.\n\n\n\nCodePen Embed Fallback\n\n\n\nNotice that I used a different emoji in that last example as well as floralwhite for some color that’s less intense than pure white for the light. Here’s one of the emoji background images unwrapped:\n\n\n\n<svg xmlns='http://www.w3.org/2000/svg'> \n  <foreignObject width='400px' height='240px'> \n    <div xmlns='http://www.w3.org/1999/xhtml' style=\n      'font: bolder 720pt/220pt monospace;\n       color: transparent;\n       text-shadow: 0 0 40px floralwhite;\n       background: rgba(0, 0, 0, 0.3);'\n    >\n      🌾\n    </div> \n  </foreignObject> \n</svg>\n\n\n\nIf you want to use your own images for the shapes, ensure the borders are blurred to create a soft light. The CSS blur() filter can be handy for the same sort of thing. I also used CSS @supports to adjust the shadow blur value for certain browsers as a fallback.\n\n\n\nNow let’s circle back to the first example and add a few things:\n\n\n\n<div class=\"backdrop\">\n  <p class=\"shapes\">🍃</p>\n  <p class=\"shapes\">🍂</p>\n  <p class=\"shapes\">\\</p>\n</div>\n\n<p class=\"content\">\n  <img width=\"70px\" style=\"float: left; margin-right: 10px;\" src=\"image.jpeg\" alt=\"\">\n  Top ten tourists spots for the summer vacation <br><br><i style=\"font-weight: normal;\">Here are the most popular places...</i>\n</p>\n\n\n\n.backdrop and .shapes are basically the same styles as before. As for the .content, which also sits on top of the .backdrop, I added isolation: isolate to form a new stacking context, excluding the element from the blending as a refining touch.\n\n\n\nAnimating the light source\n\n\n\nI also decided to add a simple CSS animation with @keyframes that get applied to the .backdrop on :hover:\n\n\n\n.backdrop:hover > .shapes:nth-of-type(1){\n  animation: 2s ease-in-out infinite alternate move;\n}\n.backdrop:hover > .shapes:nth-of-type(2):hover{\n  animation: 4s ease-in-out infinite alternate move-1;\n}\n\n@keyframes move {\n  from {\n    text-indent: -20px;\n  }\n  to {\n    text-indent: 20px;\n  }\n}\n@keyframes move-1 {\n  from {\n    text-indent: -60px;\n  }\n  to {\n    text-indent: 40px;\n  }\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nAnimating the text-indent property on the emojis products a super subtle bit of movement — the kind you might expect from clouds moving overhead that change the direction of the light. Just a touch of class, you know.\n\n\n\nWrapping up\n\n\n\nThere we have it! We drew some inspiration from nature and art to mimic one of those partly cloudy days where the sun shines through trees and bushes, projecting dappled light and shadow spots against a surface. And we did all of it with a small handful of CSS and a few emoji.\n\n\n\nThe key was how we applied color on the emoji. Using an extra blurry text-shadow in a light color sets the light, and a semi-transparent background-color defines the shadow spots. From there, all we had to do was ensure the backdrop for the light and shadows used a realistic texture with enough contrast to see the dappled light effect in action.\n\nA Serene CSS Dappled Light Effect originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-19T22:46:39.000Z",
      "date_modified": "2022-01-19T22:46:39.000Z",
      "_plugin": {
        "pageFilename": "93ae5a190c32600c399228026d4c892cf9a9d60ee418cfeee6c4be0aeb52af57.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359857",
      "url": "https://css-tricks.com/whats-new-since-css3/",
      "title": "What should someone learn about CSS if they last boned up during CSS3?",
      "summary": "What's new in CSS? If someone asked you that, who knows CSS but hasn't stayed up to date the last, say, half a decade or more, what advice would you give?\n\nWhat should someone learn about CSS if they last boned up during CSS3? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>&#8220;CSS3&#8221; was a massive success for CSS. A whole bunch of stuff dropped essentially at once that was all very terrific to get our hands on in CSS. <a href=\"https://css-tricks.com/a-complete-guide-to-css-gradients/\">Gradients</a>, <code><a href=\"https://css-tricks.com/almanac/properties/a/animation/\">animation</a></code>/<code><a href=\"https://css-tricks.com/almanac/properties/t/transition/\">transition</a></code>, <code><a href=\"https://css-tricks.com/almanac/properties/b/border-radius/\">border-radius</a></code>, <code><a href=\"https://css-tricks.com/almanac/properties/b/box-shadow/\">box-shadow</a></code>, <code><a href=\"https://css-tricks.com/almanac/properties/t/transform/\">transform</a></code>&#8230; <em>woot!</em> And better, the banner name CSS3 (and the spiritual umbrella &#8220;HTML5&#8221;) took off and the industry was just <em>saturated</em> in learning material about it all. Just look at all the <a href=\"https://css-tricks.com/?s=css3\">&#8220;CSS3&#8221;-dubbed material that&#8217;s been published around here at CSS-Tricks</a> over the years.</p>\n\n\n\n<p>No doubt loads of people boned up on these technologies during that time. I also think there is no doubt there are lots of people that haven&#8217;t learned much CSS <em>since</em> then. </p>\n\n\n\n<p>So what would we tell them? </p>\n\n\n\n<span id=\"more-359857\"></span>\n\n\n\n<figure class=\"wp-block-image size-full is-resized ticss-1576ba58\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/01/html5-css3.jpg?resize=498%2C249&#038;ssl=1\" alt=\"\" class=\"wp-image-332465\" width=\"498\" height=\"249\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/01/html5-css3.jpg?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/01/html5-css3.jpg?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/01/html5-css3.jpg?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/01/html5-css3.jpg?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/01/html5-css3.jpg?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Some other folks have speculated similarly. Scott Vandehey in <a href=\"https://cloudfour.com/thinks/modern-css-in-a-nutshell/\" rel=\"noopener\">&#8220;Modern CSS in a Nutshell&#8221;</a> wrote about his friend who hasn&#8217;t kept up with CSS since about 2015 and doesn&#8217;t really know what to learn. I&#8217;ll attempt to paraphrase Scott&#8217;s list and what&#8217;s changed since the days of CSS3.</p>\n\n\n\n<p>Preprocessors are still widely used since the day of CSS3, but the reasons to use them have dwindled, so maybe don&#8217;t even bother. This includes more newfangled approaches like <a href=\"https://github.com/csstools/postcss-preset-env\" rel=\"noopener\">polyfilling future features</a>. This also includes Autoprefixer. <a href=\"https://css-tricks.com/a-thorough-analysis-of-css-in-js/\">CSS-in-JS</a> is common, but only on projects where the entire workflow is already in JavaScript. You&#8217;ll know when you&#8217;re on a relevant project and can learn the syntax then if you need to. You should learn <a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">Custom Properties</a>, <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">Flexbox</a>, and <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">Grid</a> for sure.</p>\n\n\n\n<p>Sounds about right to me. But allow me to make my own list of post-CSS3 goodies that expands upon that list a smidge.</p>\n\n\n\n<h3 class=\"has-text-align-center ticss-80722a74\">What&#8217;s new since CSS3?</h3>\n\n\n\n<p class=\"has-text-align-center ticss-c165d0fe\">And by &#8220;CSS3&#8221; let&#8217;s say 2015 or so.</p>\n\n\n\n<hr class=\"wp-block-separator ticss-ea70b5cd\"/>\n\n\n\n<div class=\"wp-block-columns css-learn-group ticss-3267827a\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.card {\n  display: grid;\n  grid-template-columns:\n    150px 1fr;\n  gap: 1rem;\n}\n.card .nav {\n  display: flex;\n  gap: 0.5rem;\n}</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Layout</h4>\n\n\n\n<p>You really gotta learn <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">Flexbox</a> and <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">Grid</a> if you haven&#8217;t — they are really cornerstones of CSS development these days. Even more so than any feature we got in CSS3.</p>\n\n\n\n<p>Grid is extra powerful when you factor in <a href=\"https://css-tricks.com/just-another-1-for-subgrid/\">subgrid</a> and <a href=\"https://www.smashingmagazine.com/native-css-masonry-layout-css-grid/\" rel=\"noopener\">masonry</a>, neither of which is reliable cross-browser yet but probably will be before too long. </p>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n  --bgColor: #70f1d9;\n  \n  --font-size-base: \n    clamp(1.833rem, 2vw + 1rem, 3rem);\n  --font-size-lrg:\n    clamp(1.375rem, 2vw + 1rem, 2.25rem);\n}\n\nhtml.dark {\n  --bgColor: #2d283e;\n}\n</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>CSS Custom Properties</h4>\n\n\n\n<p><a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">Custom properties</a> are also a big deal for several reasons. They can be your home for design tokens on your project, making a project easier to maintain and keep consistent. Color theming is a big use case, like <a href=\"https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/#aa-using-custom-properties\">dark mode</a>.</p>\n\n\n\n<p>You can go so far as <a href=\"https://open-props.style/\" rel=\"noopener\">designing entire sites</a> using <a href=\"https://css-tricks.com/open-props-and-custom-properties-as-a-system/\">mostly custom properties</a>. And along those lines, you can&#8217;t ignore <a href=\"https://tailwindcss.com/\" rel=\"noopener\">Tailwind</a> these days. The approach of styling an entire site with classes in HTML strikes the right chord with a lot of people (and the wrong chord with a lot of people, so no worries if it doesn&#8217;t jive with you).</p>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media \n  (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.001s !important;\n  }\n}\n\n@media \n  (prefers-color-scheme: dark) {\n  :root {\n    --bg: #222;\n  }\n}\n</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Preference Queries</h4>\n\n\n\n<p>Preference queries are generally <a href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/\"><code>@media</code> queries</a> like we&#8217;ve been using to respond to different browsers sizes for year, but now include ways to detect specific user preferences at the OS level. Two examples are <code>prefers-reduced-motion</code> and <code>prefers-color-scheme</code>. These allow us to build interfaces that more closely respect a user&#8217;s ideal experience. <a href=\"https://css-tricks.com/personalize-it/\">Read Una&#8217;s post.</a></p>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.block {\n  background: \n    hsl(0 33% 53% / 0.5);\n\n  background:\n    rgb(255 0 0);\n\n  background:\n    /* can display colors \n       no other format can */\n    color(display-p3 0.9176 0.2003 0.1386)\n\n  background:\n    lab(52.2345% 40.1645 59.9971 / .5);}\n\n  background:\n    hwb(194 0% 0% / .5);\n}</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Color Changes</h4>\n\n\n\n<p>The color syntax is moving to functions that accept alpha (transparency) without having the change the function name. For example, if you wanted pure blue in the CSS3 days, you might do <code>rgb(0, 0, 255)</code>. Today, however, you can do it no-comma style (both work): <code>rgb(0 0 255)</code>, and then add alpha without using a different function: <code>rgb(0 0 255 / 0.5)</code>. Same exact situation for <code>hsl()</code>. Just a small nicety, and how future color functions will <em>only</em> work.</p>\n\n\n\n<p>Speaking of future color syntaxes:</p>\n\n\n\n<ul><li>P3 color or &#8220;display-p3&#8221; <a href=\"https://twitter.com/jensimmons/status/1478858248677736454\" rel=\"noopener\">is coming</a> via <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color()\" rel=\"noopener\">the <code>color()</code> function</a>.</li><li><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/lab()\" rel=\"noopener\">lab()</a></code> color is another new color space. It &#8220;represents the entire range of color that humans can see.&#8221;</li><li><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/lch()\" rel=\"noopener\">lch()</a></code> is another new color space. </li><li><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb()\" rel=\"noopener\">hwb()</a></code> is another new color space <a href=\"https://www.stefanjudis.com/blog/hwb-a-color-notation-for-humans/\" rel=\"noopener\">for humans</a>.</li></ul>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n font-family: 'Recursive', sans-serif;\n font-weight: 950;\n font-variation-settings: 'MONO' 1, 'CASL' 1;\n}</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Variable Fonts</h4>\n\n\n\n<p>Web fonts became a <a href=\"https://css-tricks.com/about-the-css-tricks-redesign/#aa-font-face\">big thing in CSS3</a>. Now there are <a href=\"https://css-tricks.com/one-file-many-options-using-variable-fonts-web/\">variable fonts</a>. You might as well know they exist. They both unlock some cool design possibilities and can sometimes be good for performance (like no longer needing to load different font files for bold and italic versions of the same font, for example). There is a such thing as <a href=\"https://www.colorfonts.wtf/\" rel=\"noopener\">color fonts</a> too, but I&#8217;d say they haven&#8217;t seen much popularity on the web, despite <a href=\"https://caniuse.com/colr\" rel=\"noopener\">the support</a>.</p>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.cut-out {\n  clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);\n}</code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.mask {\n  mask: url(mask.png) right bottom / 100px repeat-y;\n}</code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.move-me {\n  offset-path: path('M 5 5 m -4, 0 a 4,4 0 1,0 8,0 a 4,4 0 1,0 -8,0');\n  animation: move 3s linear infinite;\n}\n\n@keyframes move {\n  100% { \n    offset-distance: 100%;\n  }\n}</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Paths</h4>\n\n\n\n<p><a href=\"https://css-tricks.com/using-svg/\">SVG</a> has also exploded since CSS3. You can <meta charset=\"utf-8\"><a href=\"https://bennettfeely.com/clippy/\" rel=\"noopener\">straight up crop</a> any element into shapes via <code>clip-path</code>, bringing SVG-like qualities to CSS. Not only that, but you can animate elements along paths, float elements along paths, and even update the paths of SVG elements.</p>\n\n\n\n<p>These all feel kind of spirtually connected to me:</p>\n\n\n\n<ul><li><code><a href=\"https://css-tricks.com/almanac/properties/c/clip-path/\">clip-path</a></code> — allows us to literally crop elements into shapes.</li><li><code><a href=\"https://css-tricks.com/almanac/properties/m/mask/\">mask</a></code>s — similar to clipping, but a mask can have other qualities like being based on the alpha channel of the mask.</li><li><span style=\"color: initial; font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\"><code><a href=\"https://css-tricks.com/almanac/properties/o/offset-path/\">offset-path</a></code></span> — provides a path that an element can be placed on, generally for the purpose of <a href=\"https://css-tricks.com/movin-modals-along-a-path/\">animating it along that path</a>.</li><li><span style=\"color: initial; font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\"><code><a href=\"https://css-tricks.com/almanac/properties/s/shape-outside/\">shape-outside</a></code></span> — provides a path on a floated element that other elements wrap around. </li><li><code>d</code> — an SVG&#8217;s <code>d</code> attribute on a <code>&lt;path&gt;</code> can be <a href=\"https://css-tricks.com/animate-svg-path-changes-in-css/\">updated via CSS</a>.</li></ul>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.disable {\n  filter: \n    blur(1px)\n    grayscale(1);\n}\n\n.site-header {\n  backdrop-filter: \n    blur(10px);\n}\n\n.styled-quote {\n  mix-blend-mode: \n    exclusion;\n} </code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>CSS Filters</h4>\n\n\n\n<p>There is a lot of image manipulation (not to mention other DOM elements) that is possible these days directly in CSS. There is quite literally <code>filter</code>, but its got friends and they all have different uses. </p>\n\n\n\n<p><meta charset=\"utf-8\">These all feel kind of spirtually connected to me:</p>\n\n\n\n<ul><li><code><a href=\"https://css-tricks.com/almanac/properties/f/filter/\">filter</a></code> — all sorts of useful Photoshop-like effects like brightness, contrast, grayscale, sautration, etc. Blurring is a really unique power.</li><li><code><a href=\"https://css-tricks.com/almanac/properties/b/background-blend-mode/\">background-blend-mode</a></code> — again, evocative of Photoshop in how you can blend layers. Multiply the layers to darken and combine. Overlay to mix the background and color. Lighten and darken are classic effects that have real utility in web design, and you never know when a more esoteric lighting effect will create a cool look.</li><li><code><a href=\"https://css-tricks.com/almanac/properties/b/backdrop-filter/\">backdrop-filter</a></code> — the same abilities you have with <code>filter</code>, but they only <em>apply</em> to the background and not the entire element. Blurring just the background is a particularly useful effect.</li><li><code><a href=\"https://css-tricks.com/almanac/properties/m/mix-blend-mode/\">mix-blend-mode</a></code> — the same abilities you have with <code>background-blend-mode</code>, but for the entire element rather than bring limited to backgrounds.</li></ul>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"https://unpkg.com/extra.css/confetti.js\";</code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  background: paint(extra-confetti);\n  height: 100vh;\n  margin: 0;\n}</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Houdini</h4>\n\n\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Houdini\" rel=\"noopener\">Houdini</a> is really a collection of technologies that are all essentially based around extending CSS with JavaScript, or at least at the intersection of CSS and JavaScript.</p>\n\n\n\n<ul><li>Paint API — returns an image that is built from <code>&lt;canvas&gt;</code> APIs and can be controlled through custom properties.</li><li>Properties &amp; Values API / Typed OM — gives types to values (e.g. <code>10px</code>) that would have otherwise been strings.</li><li>Layout API — create your own <code>display</code> properties.</li><li>Animation API</li></ul>\n\n\n\n<p>Combined, these make for some <a href=\"https://css-houdini.rocks/\" rel=\"noopener\">really</a> awesome <a href=\"https://houdini.how/\" rel=\"noopener\">demos</a>, though <a href=\"https://ishoudinireadyyet.com/\" rel=\"noopener\">browser support is scattered</a>. Part of the magic of Houdini is that it ships as Worklets that are pretty easy to import and use, so it has the potential to modularize powerful functionality while making it trivially easy to use.</p>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">my-component {\n  --bg: lightgreen;\n}\n\n:host(.dark) { \n  background: black; \n}\n\nmy-component:part(foo) {\n  border-bottom: 2px solid black;\n}</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Shadow DOM</h4>\n\n\n\n<p>The Shadow DOM comes up a bit if you&#8217;ve played with <code>&lt;svg&gt;</code> and the <code>&lt;use&gt;</code> element. The &#8220;cloned&#8221; element that comes through has a shadow DOM that has limitations on how you can select &#8220;through&#8221; it. Then, when you get into <code><a href=\"https://css-tricks.com/an-introduction-to-web-components/\">&lt;web-components&gt;</a></code>, it&#8217;s the same ball of wax. </p>\n\n\n\n<p>If you find yourself needing to style web components, <a href=\"https://css-tricks.com/styling-web-components/\">know there are essentially four options</a> from the &#8220;outside.&#8221; And you might be interested in knowing about <a href=\"https://css-tricks.com/css-modules-the-native-ones/\">native CSS modules</a> and <a href=\"https://developers.google.com/web/updates/2019/02/constructable-stylesheets\" rel=\"noopener\">constructible stylesheets</a>.</p>\n</div>\n</div>\n\n\n\n<h3>The CSS Working Group</h3>\n\n\n\n<p>It&#8217;s notable that the CSS working group has its own way of drawing lines in the sand year-to-year, noting where certain specs are at a given point in time:</p>\n\n\n\n<ul><li><a href=\"https://www.w3.org/TR/2020/NOTE-css-2020-20201222/\" rel=\"noopener\">CSS Snapshot 2020</a></li><li><a href=\"https://www.w3.org/TR/css-2021/\" rel=\"noopener\">CSS Snapshot 2021</a></li></ul>\n\n\n\n<p>These are pretty dense though. Sure, they&#8217;re great references and document things where we can see what&#8217;s changed since CSS3. But no way I&#8217;d send a casual front-end developer to these to choose what to learn. </p>\n\n\n\n<h3>Yeah — but what&#8217;s coming?</h3>\n\n\n\n<p>I&#8217;d say probably don&#8217;t worry about it. ;)</p>\n\n\n\n<p>The point of this is catching up to useful things to know <em>now</em> since the CSS3 era. But if you&#8217;re curious about what the future of CSS holds in store&#8230;</p>\n\n\n\n<ul><li><strong>Container queries</strong> will be a huge deal. You&#8217;ll be able to make styling choices based on the size of a container element rather than the browser size alone. And it&#8217;s <a href=\"https://css-tricks.com/a-new-container-query-polyfill-that-just-works/\">polyfillable today</a>.</li><li><strong>Container units</strong> <a href=\"https://css-tricks.com/container-units-should-be-pretty-handy/\">will be useful</a> for sizing things based on the size of a container element.</li><li><strong>Independant transforms</strong>, e.g. <code><a href=\"https://css-tricks.com/almanac/properties/s/scale/\">scale: 1.2;</a></code>, will feel more logical to use than always having to use <code>transform</code>. </li><li><strong>Nesting</strong> is a feature that all CSS preprocessor have had <em>forever</em> and that developers clearly like using, particularly for media queries. It&#8217;s likely we&#8217;ll get <a href=\"https://css-tricks.com/css-is-going-gosh-darned-hog-wild-i-tell-ya-what/#aa-native-nesting\">it in native CSS</a> soon. </li><li><span style=\"color: initial; font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\"><strong>Scoping</strong></span> will be a way to tell a block of <a href=\"https://css-tricks.com/css-is-going-gosh-darned-hog-wild-i-tell-ya-what/#aa-scoping\">CSS to only apply to a certain area</a> (the same way CSS-in-JS libraries do), and helps with the tricky concept of proximity. </li><li><strong>Cascade layers</strong> open up an <a href=\"https://css-tricks.com/css-is-going-gosh-darned-hog-wild-i-tell-ya-what/#aa-cascade-layers\">entirely new concept of what styles &#8220;win&#8221; on elements</a>. Styles on higher layers will beat styles on lower layers, regardless of specificity. </li><li><strong>Viewport units</strong> will greatly improve with the <a href=\"https://css-tricks.com/the-large-small-and-dynamic-viewports/\">introduction of &#8220;relative&#8221; viewport lengths.</a> The super useful ones will be <code>dvh</code> and <code>dvw</code>, as they factor in the actual usable space in a browser window, preventing terrible issues like the browser UI overlapping a site&#8217;s UI. </li></ul>\n\n\n\n<p>Bramus Van Damme has a pretty good article covering these things and more in his <a href=\"https://www.bram.us/2021/12/27/css-in-2022/\" rel=\"noopener\">&#8220;CSS in 2022&#8221;</a> roundup. It looks like 2022 should be a real banner year for CSS. Perhaps more of a banner year than the CSS3 of 2015.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/whats-new-since-css3/\">What should someone learn about CSS if they last boned up during CSS3?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "“CSS3” was a massive success for CSS. A whole bunch of stuff dropped essentially at once that was all very terrific to get our hands on in CSS. Gradients, animation/transition, border-radius, box-shadow, transform… woot! And better, the banner name CSS3 (and the spiritual umbrella “HTML5”) took off and the industry was just saturated in learning material about it all. Just look at all the “CSS3”-dubbed material that’s been published around here at CSS-Tricks over the years.\n\n\n\nNo doubt loads of people boned up on these technologies during that time. I also think there is no doubt there are lots of people that haven’t learned much CSS since then. \n\n\n\nSo what would we tell them? \n\n\n\n\n\n\n\n\n\n\n\nSome other folks have speculated similarly. Scott Vandehey in “Modern CSS in a Nutshell” wrote about his friend who hasn’t kept up with CSS since about 2015 and doesn’t really know what to learn. I’ll attempt to paraphrase Scott’s list and what’s changed since the days of CSS3.\n\n\n\nPreprocessors are still widely used since the day of CSS3, but the reasons to use them have dwindled, so maybe don’t even bother. This includes more newfangled approaches like polyfilling future features. This also includes Autoprefixer. CSS-in-JS is common, but only on projects where the entire workflow is already in JavaScript. You’ll know when you’re on a relevant project and can learn the syntax then if you need to. You should learn Custom Properties, Flexbox, and Grid for sure.\n\n\n\nSounds about right to me. But allow me to make my own list of post-CSS3 goodies that expands upon that list a smidge.\n\n\n\nWhat’s new since CSS3?\n\n\n\nAnd by “CSS3” let’s say 2015 or so.\n\n\n\n\n\n\n\n\n\n.card {\n  display: grid;\n  grid-template-columns:\n    150px 1fr;\n  gap: 1rem;\n}\n.card .nav {\n  display: flex;\n  gap: 0.5rem;\n}\n\n\n\n\n\nLayout\n\n\n\nYou really gotta learn Flexbox and Grid if you haven’t — they are really cornerstones of CSS development these days. Even more so than any feature we got in CSS3.\n\n\n\nGrid is extra powerful when you factor in subgrid and masonry, neither of which is reliable cross-browser yet but probably will be before too long. \n\n\n\n\n\n\n\nhtml {\n  --bgColor: #70f1d9;\n  \n  --font-size-base: \n    clamp(1.833rem, 2vw + 1rem, 3rem);\n  --font-size-lrg:\n    clamp(1.375rem, 2vw + 1rem, 2.25rem);\n}\n\nhtml.dark {\n  --bgColor: #2d283e;\n}\n\n\n\n\n\n\nCSS Custom Properties\n\n\n\nCustom properties are also a big deal for several reasons. They can be your home for design tokens on your project, making a project easier to maintain and keep consistent. Color theming is a big use case, like dark mode.\n\n\n\nYou can go so far as designing entire sites using mostly custom properties. And along those lines, you can’t ignore Tailwind these days. The approach of styling an entire site with classes in HTML strikes the right chord with a lot of people (and the wrong chord with a lot of people, so no worries if it doesn’t jive with you).\n\n\n\n\n\n\n\n@media \n  (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.001s !important;\n  }\n}\n\n@media \n  (prefers-color-scheme: dark) {\n  :root {\n    --bg: #222;\n  }\n}\n\n\n\n\n\n\nPreference Queries\n\n\n\nPreference queries are generally @media queries like we’ve been using to respond to different browsers sizes for year, but now include ways to detect specific user preferences at the OS level. Two examples are prefers-reduced-motion and prefers-color-scheme. These allow us to build interfaces that more closely respect a user’s ideal experience. Read Una’s post.\n\n\n\n\n\n\n\n.block {\n  background: \n    hsl(0 33% 53% / 0.5);\n\n  background:\n    rgb(255 0 0);\n\n  background:\n    /* can display colors \n       no other format can */\n    color(display-p3 0.9176 0.2003 0.1386)\n\n  background:\n    lab(52.2345% 40.1645 59.9971 / .5);}\n\n  background:\n    hwb(194 0% 0% / .5);\n}\n\n\n\n\n\nColor Changes\n\n\n\nThe color syntax is moving to functions that accept alpha (transparency) without having the change the function name. For example, if you wanted pure blue in the CSS3 days, you might do rgb(0, 0, 255). Today, however, you can do it no-comma style (both work): rgb(0 0 255), and then add alpha without using a different function: rgb(0 0 255 / 0.5). Same exact situation for hsl(). Just a small nicety, and how future color functions will only work.\n\n\n\nSpeaking of future color syntaxes:\n\n\n\nP3 color or “display-p3” is coming via the color() function.lab() color is another new color space. It “represents the entire range of color that humans can see.”lch() is another new color space. hwb() is another new color space for humans.\n\n\n\n\n\n\n\nbody {\n font-family: 'Recursive', sans-serif;\n font-weight: 950;\n font-variation-settings: 'MONO' 1, 'CASL' 1;\n}\n\n\n\n\n\nVariable Fonts\n\n\n\nWeb fonts became a big thing in CSS3. Now there are variable fonts. You might as well know they exist. They both unlock some cool design possibilities and can sometimes be good for performance (like no longer needing to load different font files for bold and italic versions of the same font, for example). There is a such thing as color fonts too, but I’d say they haven’t seen much popularity on the web, despite the support.\n\n\n\n\n\n\n\n.cut-out {\n  clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);\n}\n\n\n\n.mask {\n  mask: url(mask.png) right bottom / 100px repeat-y;\n}\n\n\n\n.move-me {\n  offset-path: path('M 5 5 m -4, 0 a 4,4 0 1,0 8,0 a 4,4 0 1,0 -8,0');\n  animation: move 3s linear infinite;\n}\n\n@keyframes move {\n  100% { \n    offset-distance: 100%;\n  }\n}\n\n\n\n\n\nPaths\n\n\n\nSVG has also exploded since CSS3. You can straight up crop any element into shapes via clip-path, bringing SVG-like qualities to CSS. Not only that, but you can animate elements along paths, float elements along paths, and even update the paths of SVG elements.\n\n\n\nThese all feel kind of spirtually connected to me:\n\n\n\nclip-path — allows us to literally crop elements into shapes.masks — similar to clipping, but a mask can have other qualities like being based on the alpha channel of the mask.offset-path — provides a path that an element can be placed on, generally for the purpose of animating it along that path.shape-outside — provides a path on a floated element that other elements wrap around. d — an SVG’s d attribute on a <path> can be updated via CSS.\n\n\n\n\n\n\n\n.disable {\n  filter: \n    blur(1px)\n    grayscale(1);\n}\n\n.site-header {\n  backdrop-filter: \n    blur(10px);\n}\n\n.styled-quote {\n  mix-blend-mode: \n    exclusion;\n} \n\n\n\n\n\nCSS Filters\n\n\n\nThere is a lot of image manipulation (not to mention other DOM elements) that is possible these days directly in CSS. There is quite literally filter, but its got friends and they all have different uses. \n\n\n\nThese all feel kind of spirtually connected to me:\n\n\n\nfilter — all sorts of useful Photoshop-like effects like brightness, contrast, grayscale, sautration, etc. Blurring is a really unique power.background-blend-mode — again, evocative of Photoshop in how you can blend layers. Multiply the layers to darken and combine. Overlay to mix the background and color. Lighten and darken are classic effects that have real utility in web design, and you never know when a more esoteric lighting effect will create a cool look.backdrop-filter — the same abilities you have with filter, but they only apply to the background and not the entire element. Blurring just the background is a particularly useful effect.mix-blend-mode — the same abilities you have with background-blend-mode, but for the entire element rather than bring limited to backgrounds.\n\n\n\n\n\n\n\nimport \"https://unpkg.com/extra.css/confetti.js\";\n\n\n\nbody {\n  background: paint(extra-confetti);\n  height: 100vh;\n  margin: 0;\n}\n\n\n\n\n\nHoudini\n\n\n\nHoudini is really a collection of technologies that are all essentially based around extending CSS with JavaScript, or at least at the intersection of CSS and JavaScript.\n\n\n\nPaint API — returns an image that is built from <canvas> APIs and can be controlled through custom properties.Properties & Values API / Typed OM — gives types to values (e.g. 10px) that would have otherwise been strings.Layout API — create your own display properties.Animation API\n\n\n\nCombined, these make for some really awesome demos, though browser support is scattered. Part of the magic of Houdini is that it ships as Worklets that are pretty easy to import and use, so it has the potential to modularize powerful functionality while making it trivially easy to use.\n\n\n\n\n\n\n\nmy-component {\n  --bg: lightgreen;\n}\n\n:host(.dark) { \n  background: black; \n}\n\nmy-component:part(foo) {\n  border-bottom: 2px solid black;\n}\n\n\n\n\n\nShadow DOM\n\n\n\nThe Shadow DOM comes up a bit if you’ve played with <svg> and the <use> element. The “cloned” element that comes through has a shadow DOM that has limitations on how you can select “through” it. Then, when you get into <web-components>, it’s the same ball of wax. \n\n\n\nIf you find yourself needing to style web components, know there are essentially four options from the “outside.” And you might be interested in knowing about native CSS modules and constructible stylesheets.\n\n\n\n\n\nThe CSS Working Group\n\n\n\nIt’s notable that the CSS working group has its own way of drawing lines in the sand year-to-year, noting where certain specs are at a given point in time:\n\n\n\nCSS Snapshot 2020CSS Snapshot 2021\n\n\n\nThese are pretty dense though. Sure, they’re great references and document things where we can see what’s changed since CSS3. But no way I’d send a casual front-end developer to these to choose what to learn. \n\n\n\nYeah — but what’s coming?\n\n\n\nI’d say probably don’t worry about it. ;)\n\n\n\nThe point of this is catching up to useful things to know now since the CSS3 era. But if you’re curious about what the future of CSS holds in store…\n\n\n\nContainer queries will be a huge deal. You’ll be able to make styling choices based on the size of a container element rather than the browser size alone. And it’s polyfillable today.Container units will be useful for sizing things based on the size of a container element.Independant transforms, e.g. scale: 1.2;, will feel more logical to use than always having to use transform. Nesting is a feature that all CSS preprocessor have had forever and that developers clearly like using, particularly for media queries. It’s likely we’ll get it in native CSS soon. Scoping will be a way to tell a block of CSS to only apply to a certain area (the same way CSS-in-JS libraries do), and helps with the tricky concept of proximity. Cascade layers open up an entirely new concept of what styles “win” on elements. Styles on higher layers will beat styles on lower layers, regardless of specificity. Viewport units will greatly improve with the introduction of “relative” viewport lengths. The super useful ones will be dvh and dvw, as they factor in the actual usable space in a browser window, preventing terrible issues like the browser UI overlapping a site’s UI. \n\n\n\nBramus Van Damme has a pretty good article covering these things and more in his “CSS in 2022” roundup. It looks like 2022 should be a real banner year for CSS. Perhaps more of a banner year than the CSS3 of 2015.\n\nWhat should someone learn about CSS if they last boned up during CSS3? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-19T14:25:31.000Z",
      "date_modified": "2022-01-19T14:25:31.000Z",
      "_plugin": {
        "pageFilename": "13eb470ce98f544641568b73eaf699e38b6baa6fcfcd17bfbea89ebc3f12c0c0.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360362",
      "url": "https://css-tricks.com/table-of-contents-block-in-wordpress/",
      "title": "4 Quality Options for a Table of Contents Block in WordPress",
      "summary": "There are a number of options for including a Table of Contents lock in WordPress. You can use a plugin, or try to do it yourself. \n\n4 Quality Options for a Table of Contents Block in WordPress originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Offering a table of contents block in WordPress for blog posts (or really any other type of long-ish written content) is a good idea for two reasons:</p>\n\n\n\n<ul><li>It helps users jump around in the post for what they need (and hopefully doesn&#8217;t get in the way).</li><li>It&#8217;s provides SEO value.</li></ul>\n\n\n\n<span id=\"more-360362\"></span>\n\n\n\n<p>The RankMath SEO plugin <a href=\"https://rankmath.com/kb/table-of-contents/\" rel=\"noopener\">factors it in</a> as part of your page score (suggesting you should have one), because of that second point. See what Google likely gives you if you do it right:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1318\" height=\"322\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/jump-links.webp?resize=1318%2C322&#038;ssl=1\" alt=\"Screenshoot of a typical Google search results item with a breadcrumb above the page title, then a page description. A purple box is drawn around four links below the page description to call out how adding a table of contents block in WordPress can add those links in the search results for additional user convenience,\" class=\"wp-image-360428\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/jump-links.webp?w=1318&amp;ssl=1 1318w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/jump-links.webp?resize=300%2C73&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/jump-links.webp?resize=1024%2C250&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/jump-links.webp?resize=768%2C188&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/jump-links.webp?resize=1000%2C244&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It makes sense that other WordPress SEO Plugins like Yoast <a href=\"https://yoast.com/features/internal-linking-blocks/\" rel=\"noopener\">offer a table of contents block as a baked-in additional feature</a> of the plugin. If you&#8217;re committed to using Yoast, then I think it&#8217;s fine to just use that. But I admit it&#8217;s not my favorite to feel locked to a plugin because it offers a microfeature that you then depend on. </p>\n\n\n\n<p>So what are the options?</p>\n\n\n<h2 class=\"simpletoc-title\">Table of Contents</h2><ul class=\"simpletoc\">\n<li>\n<a  href=\"#what-to-look-for-in-a-wordpress-table-of-contents-block\">What to look for in a WordPress Table of Contents Block</a></li><li>\n<a  href=\"#option-1-use-a-dedicated-table-of-contents-plugin\">Option 1: Use a Dedicated Table of Contents Plugin</a>\n\t\t<ul><li>\n<a  href=\"#heroic-table-of-contents\">Heroic Table of Contents</a></li><li>\n<a  href=\"#easy-table-of-contents\">Easy Table of Contents</a></li><li>\n<a  href=\"#simpletoc\">SimpleTOC</a></li><li>\n<a  href=\"#luckywp-table-of-contents\">LuckyWP Table of Contents</a></li><li>\n<a  href=\"#gutentoc\">GutenTOC</a></li></ul>\n</li><li>\n<a  href=\"#option-2-wait-for-a-table-of-contents-feature-to-be-baked-into-core-wordpress\">Option 2: Wait for a Table of Contents feature to be baked into Core WordPress</a></li><li>\n<a  href=\"#option-3-use-a-table-of-contents-block-thats-a-subfeature-of-another-wordpress-plugin\">Option 3: Use a Table of Contents Block that’s a sub-feature of another WordPress plugin</a>\n\t\t<ul><li>\n<a  href=\"#yoast-seo-premium\">Yoast SEO Premium</a></li><li>\n<a  href=\"#ultimate-addons-for-gutenberg\">Ultimate Addons for Gutenberg</a></li></ul>\n</li><li>\n<a  href=\"#option-4-roll-your-own-diy-table-of-contents-block\">Option 4: Roll your own DIY Table of Contents Block</a></li><li>\n<a  href=\"#favorite\">Favorite?</a></li></ul>\n\n<h3 id=\"what-to-look-for-in-a-wordpress-table-of-contents-block\">What to look for in a WordPress Table of Contents Block</h3>\n\n\n<p>Here are some things to look for and think about when choosing a table of contents block:</p>\n\n\n\n<ul><li><strong>Customizable header</strong> — Many options chuck a &#8220;Table of Contents&#8221; header above the actual Table of Contents, which makes sense. Can you turn it off or customize it? What level header is it? Having the ability to disable the heading might be necessary for layout, and having a choice of heading levels can help ensure proper HTML semantics.</li><li><strong>Collapsible</strong> — In the spirit of making the Table of Contents less annoying, many offer a feature to toggle the Table of Contents block between open and closed states. Do you want that? Are you OK with the fact it likely requires some JavaScript to work? Is it doing toggling accessibly? Can it default to the state that you want?</li><li><strong>Choose which headings to include</strong> — Perhaps you only want all the <code>&lt;h2&gt;</code> elements to form the Table of Contents. Can you do that? Do sub-headers create a &#8220;nested&#8217; list? Do you want that? Can you turn off certain levels of headers? Can you tell the block to only include <code>&lt;h2&gt;</code> through <code>&lt;h4&gt;</code>? Are there things other than headers you want to be part of the Table of Contents?</li><li><strong>Editable links</strong> — Many Table of Contents plugins in WordPress typically grab all the headings verbatim. Maybe you want to shorten, lengthen, or otherwise change a specific link in the Table of Contents; as in, not have it be the exact text of the header it links to. Can you do that?</li><li><strong>Include additional links</strong> — Perhaps you want to link to something that isn&#8217;t a content heading. Perhaps it&#8217;s added to the template with a <a href=\"https://css-tricks.com/use-custom-fields-in-wordpress/\">WordPress custom field</a>, or it&#8217;s part of the overall template like the comments section. Can you add (or remove) those as headings in the block?</li><li><strong>Block Editor support</strong> — That&#8217;s kind of the point of this blog post. I didn&#8217;t include many options that don&#8217;t have a block. But surely there are old school versions of this that are <code>[shortcode]</code>-based or that implement it some other way. I&#8217;m mostly concerned about blocks, although I could easily see a situation where your goal is to put the Table of Contents elsewhere in a template (sidebar, perhaps?). So, having multiple options and modularity could be useful.</li><li><strong>Styling options</strong> — Personally, I like to bring my own styling (surprise!) and even <a href=\"https://css-tricks.com/taking-control-cssjs-wordpress-plugins-load/\">dequeue any stylesheets (or scripts)</a> that a plugin tries to bring along for the ride. But I can imagine more folks want the Table of Contents to look good and be able to aesthetically control it right from the editor. This means it’d be nice to have block options for colors, fonts, spacing, etc.</li><li><strong>Semantic markup</strong> — Might be worth a peek at the HTML that the Table of Contents block you choose generates to make if it&#8217;s sensible. I&#8217;ve seen plugins generate HTML lists that don&#8217;t actually <a href=\"https://css-tricks.com/video-screencasts/181-poking-at-html-lists/\">nest lists</a>, for example, but instead add classes to list items to make them <em>look</em> nested. No, thanks. I&#8217;m not sure there is an official HTML format that’s best for SEO, so sematic markup is about the best you can do.</li><li><strong>Heading IDs</strong> — In order for a linked Table of Contents to work, all the headers need to have IDs so there’s something to anchor to. I would think any plugin here that’s worth its salt would add them to headings <em>only in the case that they don&#8217;t already have one</em>, but you might wanna veryify that; otherwise, you run the risk of breaking existing links or perhaps even styling and functionality. Also think about what IDs are being generated. For example, I use the <a href=\"https://wordpress.org/plugins/add-anchor-links/\" rel=\"noopener\">Add Anchor Links plugin</a>, which adds a link (&#x1f517;) icon beside all headings to offer access to the IDs. The IDs it generates were idential to the Table of Contents-generated IDs, causing a duplicate ID problem. Fixable, but just be aware of things like that.</li></ul>\n\n\n<h3 id=\"option-1-use-a-dedicated-table-of-contents-plugin\">Option 1: Use a Dedicated Table of Contents Plugin</h3>\n\n\n<p>A dedicated Table of Contents plugin is a plugin that focuses on nothing but a Table of Contents. Nothing else. Here are some solid options where that’s the case.</p>\n\n\n<h4 id=\"heroic-table-of-contents\"><a href=\"https://wordpress.org/plugins/heroic-table-of-contents/\" rel=\"noopener\">Heroic Table of Contents</a></h4>\n\n\n<p>The ability to edit/add/remove headers from the table of contents — even after it&#8217;s been automatically generated — is pretty powerful and unique to this plugin. It allows you to open and close it (optionally) as well, which is nice as a goal for these, as they should make the links useful rather than content that gets in the way. But beware that this puts you in the territory of enqueuing additional scripts as well as styles which may or may not be ideal or something you’re comfortable doing.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2616\" height=\"2774\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=2616%2C2774&#038;ssl=1\" alt=\"Screenshot of Heroic Table of Contents Block in WordPress\" class=\"wp-image-360973\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?w=2616&amp;ssl=1 2616w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=283%2C300&amp;ssl=1 283w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=966%2C1024&amp;ssl=1 966w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=768%2C814&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=1449%2C1536&amp;ssl=1 1449w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=1931%2C2048&amp;ssl=1 1931w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=1000%2C1060&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?w=2000&amp;ssl=1 2000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>(<a href=\"https://www.lireo.com/heroic-table-of-contents-plugin/\" rel=\"noopener\">Recommended by Deborah Edwards-Onoro</a>)</figcaption></figure>\n\n\n<h4 id=\"easy-table-of-contents\"><a href=\"https://wordpress.org/plugins/easy-table-of-contents/\" rel=\"noopener\">Easy Table of Contents</a></h4>\n\n\n<p class=\"is-style-explanation\">This is <em>not</em> a Block Editor block! Instead, it only automatically inserts itself, either by content type or through an opt-in checkbox in a metabox.</p>\n\n\n\n<p>I find it a little awkward that you can&#8217;t control where the Table of Contents goes with this plugin. Looks like it inserts itself near the top of posts, likely right after where the <code>&lt;!-- more --&gt;</code> is located.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2624\" height=\"2930\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=2624%2C2930&#038;ssl=1\" alt=\"Screenshot of Easy Table of Contents Block in WordPress\" class=\"wp-image-360976\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?w=2624&amp;ssl=1 2624w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=269%2C300&amp;ssl=1 269w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=917%2C1024&amp;ssl=1 917w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=768%2C858&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=1376%2C1536&amp;ssl=1 1376w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=1834%2C2048&amp;ssl=1 1834w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=1000%2C1117&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?w=2000&amp;ssl=1 2000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h4 id=\"simpletoc\"><a href=\"https://wordpress.org/plugins/simpletoc/\" rel=\"noopener\">SimpleTOC</a></h4>\n\n\n<p class=\"is-style-explanation\">This is my favorite one.</p>\n\n\n\n<p>I like this one because it doesn&#8217;t add any scripts or styles by default. It just makes a semantic HTML list out of the headers, links them up, and that&#8217;s it. That&#8217;s how I like to roll. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"966\" height=\"1024\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=966%2C1024&#038;ssl=1\" alt=\"Screenshot of SimpleTOC Table of Contents Block in WordPress\" class=\"wp-image-360975\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=966%2C1024&amp;ssl=1 966w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=283%2C300&amp;ssl=1 283w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=768%2C814&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=1449%2C1536&amp;ssl=1 1449w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=1931%2C2048&amp;ssl=1 1931w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=1000%2C1060&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?w=2000&amp;ssl=1 2000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h4 id=\"luckywp-table-of-contents\"><a href=\"https://wordpress.org/plugins/luckywp-table-of-contents/\" rel=\"noopener\">LuckyWP Table of Contents</a></h4>\n\n\n<p>Lots of features, but I find it a bit awkward how it doesn’t have regular block controls. Instead, you get this entirely custom UI for changing the settings — and you can&#8217;t preview what it looks like in the block itself. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2718\" height=\"2430\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=2718%2C2430&#038;ssl=1\" alt=\"Screenshot of LuckyWP Table of Contents Block in WordPress\" class=\"wp-image-360977\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?w=2718&amp;ssl=1 2718w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=300%2C268&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=1024%2C915&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=768%2C687&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=1536%2C1373&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=2048%2C1831&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=1000%2C894&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h4 id=\"gutentoc\"><a href=\"https://wordpress.org/plugins/gutentoc-advance-table-of-content/\" rel=\"noopener\">GutenTOC</a></h4>\n\n\n<p>Feels like this Table of Contents plugin embraces the spirit of the WordPress Block Editor quite well, but I find the settings a little awkward. The choices it offers don&#8217;t feel terrifically useful (like square bullets for the list? &#8220;15&#8221; space left?).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2718\" height=\"2430\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=2718%2C2430&#038;ssl=1\" alt=\"Screenshot of the GutenTOC Table of Contents plugin in WordPress.\" class=\"wp-image-360978\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?w=2718&amp;ssl=1 2718w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=300%2C268&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=1024%2C915&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=768%2C687&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=1536%2C1373&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=2048%2C1831&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=1000%2C894&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"option-2-wait-for-a-table-of-contents-feature-to-be-baked-into-core-wordpress\">Option 2: Wait for a Table of Contents feature to be baked into Core WordPress</h3>\n\n\n<p>As I write, there is <a href=\"https://github.com/WordPress/gutenberg/pull/29739\" rel=\"noopener\">an open pull request</a> to enable a Table of Contents block in the Gutenberg plugin. Presumably, should that go well, it ultimately makes its way to core. That would be great if you ask me, but it doesn&#8217;t help solve the problem of needing a Table of Contents block right this second.</p>\n\n\n\n<p>If this feature does drop, I&#8217;d lean heavily toward using it. Hopefully, I can do a search or query to find existing Table of Contents blocks on all posts, switch them over to use the native block, and remove whatever plugin I have in place. </p>\n\n\n<h3 id=\"option-3-use-a-table-of-contents-block-thats-a-subfeature-of-another-wordpress-plugin\">Option 3: Use a Table of Contents Block that’s a sub-feature of another WordPress plugin</h3>\n\n\n<p>I would recommend against using a plugin that does a whole slew of things just because you want to use some small part of it. But hey, if it turns out you could use <em>lots</em> of things from the big plugin, it could be a bonus as far as managing fewer plugins overall.</p>\n\n\n<h4 id=\"yoast-seo-premium\"><a href=\"https://yoast.com/wordpress/plugins/seo/\" rel=\"noopener\">Yoast SEO Premium</a></h4>\n\n\n<p>The free version of the <a href=\"https://wordpress.org/plugins/wordpress-seo/\" rel=\"noopener\">Yoast SEO plugin</a> doesn&#8217;t have it, but for only $99 per year, the <a href=\"https://yoast.com/wordpress/plugins/seo/\" rel=\"noopener\">Yoast SEO Premium plugin</a> does. It has almost no features at all. You just add it as a block, and it pops in. You can edit the title or remove it — it&#8217;s almost like a &#8220;sub block.&#8221;</p>\n\n\n\n<p>The list of links isn&#8217;t editable, but it does update in real-time as you change headings in the content, which is something most of the others I tested didn&#8217;t do. Super basic, no styling or features, but I kinda like that. I wouldn&#8217;t run Yoast for this one feature, especially for a paid premium, but if you&#8217;re using Yoast anyway (for the long haul), then you might as well go this route.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2174\" height=\"1816\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=2174%2C1816&#038;ssl=1\" alt=\"Screenshot of the Yoast SEO plugin’s table of contents block in WordPress.\" class=\"wp-image-361148\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?w=2174&amp;ssl=1 2174w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=300%2C251&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=1024%2C855&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=768%2C642&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=1536%2C1283&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=2048%2C1711&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=1000%2C835&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h4 id=\"ultimate-addons-for-gutenberg\"><a href=\"https://ultimategutenberg.com/\" rel=\"noopener\">Ultimate Addons for Gutenberg</a></h4>\n\n\n<p>This one is probably the classiest Table of Contents block I&#8217;ve come across. Again, I’m weary of using an all-in-one plugin for one specific feature, but the other features that are baked into this plugin are things you can use, then it’s a solid option.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"3340\" height=\"3086\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=3340%2C3086&#038;ssl=1\" alt=\"Screenshot of the Ultimate Addons for Gutenberg Tablew of Contents plugin in WordPress.\" class=\"wp-image-361149\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?w=3340&amp;ssl=1 3340w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=300%2C277&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=1024%2C946&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=768%2C710&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=1536%2C1419&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=2048%2C1892&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=1000%2C924&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"option-4-roll-your-own-diy-table-of-contents-block\">Option 4: Roll your own DIY Table of Contents Block</h3>\n\n\n<p>Making blocks yourself isn&#8217;t out of the question! I&#8217;ve done it a few times with <a href=\"https://github.com/ahmadawais/create-guten-block\" rel=\"noopener\">create-guten-block</a>, though I&#8217;d probably reach for <a href=\"https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block/\" rel=\"noopener\">@wordpress/create-block</a> these days. This puts you in JavaScript-land, so you&#8217;ll be parsing the content of the post with JavaScript, finding headings in the post content, and building things out from there. Kind of intermediate-to-advanced territory, I&#8217;d say. On one hand, it&#8217;s extra technical debt, and on the other, at least you have complete control since it&#8217;s your own code. </p>\n\n\n\n<p>Since we&#8217;re focusing on building blocks, <a href=\"https://www.advancedcustomfields.com/resources/blocks/\" rel=\"noopener\">Advanced Custom Fields has a very powerful way of building custom blocks</a> that brings that power back to PHP-land. That way, if you&#8217;re only concerned with building a Table of Contents from other heading blocks, the code gets a lot easier.</p>\n\n\n\n<p>Bill Erickson has a post — <a href=\"https://www.billerickson.net/access-gutenberg-block-data/\" rel=\"noopener\">“Access block data with PHP using <code>parse_blocks()</code> and <code>render_block()</code></a> — that ultimately gets into literally building a Table of Contents block. <a href=\"https://gist.github.com/billerickson/c451a7b2ef0c8ee4e48b7c17f536f39b\" rel=\"noopener\">This gist</a> he provides is a pretty useful reference for how to loop through blocks on a post and produce an HTML list.</p>\n\n\n<h3 id=\"favorite\">Favorite?</h3>\n\n\n<p>If I was using Yoast SEO Premium on a site, I&#8217;d just use that one. If not, I&#8217;d go for <a href=\"https://wordpress.org/plugins/simpletoc/\" rel=\"noopener\">SimpleTOC</a>. That&#8217;s what we&#8217;ve done here on CSS-Tricks. Once the core feature drops (&#x1f91e;), I&#8217;d make a rainy day project of moving all posts that currently use the Table of Contents plugin over to using the core WordPress block (assuming it turns out nice).</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/table-of-contents-block-in-wordpress/\">4 Quality Options for a Table of Contents Block in WordPress</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Offering a table of contents block in WordPress for blog posts (or really any other type of long-ish written content) is a good idea for two reasons:\n\n\n\nIt helps users jump around in the post for what they need (and hopefully doesn’t get in the way).It’s provides SEO value.\n\n\n\n\n\n\n\nThe RankMath SEO plugin factors it in as part of your page score (suggesting you should have one), because of that second point. See what Google likely gives you if you do it right:\n\n\n\n\n\n\n\nIt makes sense that other WordPress SEO Plugins like Yoast offer a table of contents block as a baked-in additional feature of the plugin. If you’re committed to using Yoast, then I think it’s fine to just use that. But I admit it’s not my favorite to feel locked to a plugin because it offers a microfeature that you then depend on. \n\n\n\nSo what are the options?\n\n\nTable of Contents\n\nWhat to look for in a WordPress Table of Contents Block\nOption 1: Use a Dedicated Table of Contents Plugin\n\t\t\nHeroic Table of Contents\nEasy Table of Contents\nSimpleTOC\nLuckyWP Table of Contents\nGutenTOC\n\nOption 2: Wait for a Table of Contents feature to be baked into Core WordPress\nOption 3: Use a Table of Contents Block that’s a sub-feature of another WordPress plugin\n\t\t\nYoast SEO Premium\nUltimate Addons for Gutenberg\n\nOption 4: Roll your own DIY Table of Contents Block\nFavorite?\n\nWhat to look for in a WordPress Table of Contents Block\n\n\nHere are some things to look for and think about when choosing a table of contents block:\n\n\n\nCustomizable header — Many options chuck a “Table of Contents” header above the actual Table of Contents, which makes sense. Can you turn it off or customize it? What level header is it? Having the ability to disable the heading might be necessary for layout, and having a choice of heading levels can help ensure proper HTML semantics.Collapsible — In the spirit of making the Table of Contents less annoying, many offer a feature to toggle the Table of Contents block between open and closed states. Do you want that? Are you OK with the fact it likely requires some JavaScript to work? Is it doing toggling accessibly? Can it default to the state that you want?Choose which headings to include — Perhaps you only want all the <h2> elements to form the Table of Contents. Can you do that? Do sub-headers create a “nested’ list? Do you want that? Can you turn off certain levels of headers? Can you tell the block to only include <h2> through <h4>? Are there things other than headers you want to be part of the Table of Contents?Editable links — Many Table of Contents plugins in WordPress typically grab all the headings verbatim. Maybe you want to shorten, lengthen, or otherwise change a specific link in the Table of Contents; as in, not have it be the exact text of the header it links to. Can you do that?Include additional links — Perhaps you want to link to something that isn’t a content heading. Perhaps it’s added to the template with a WordPress custom field, or it’s part of the overall template like the comments section. Can you add (or remove) those as headings in the block?Block Editor support — That’s kind of the point of this blog post. I didn’t include many options that don’t have a block. But surely there are old school versions of this that are [shortcode]-based or that implement it some other way. I’m mostly concerned about blocks, although I could easily see a situation where your goal is to put the Table of Contents elsewhere in a template (sidebar, perhaps?). So, having multiple options and modularity could be useful.Styling options — Personally, I like to bring my own styling (surprise!) and even dequeue any stylesheets (or scripts) that a plugin tries to bring along for the ride. But I can imagine more folks want the Table of Contents to look good and be able to aesthetically control it right from the editor. This means it’d be nice to have block options for colors, fonts, spacing, etc.Semantic markup — Might be worth a peek at the HTML that the Table of Contents block you choose generates to make if it’s sensible. I’ve seen plugins generate HTML lists that don’t actually nest lists, for example, but instead add classes to list items to make them look nested. No, thanks. I’m not sure there is an official HTML format that’s best for SEO, so sematic markup is about the best you can do.Heading IDs — In order for a linked Table of Contents to work, all the headers need to have IDs so there’s something to anchor to. I would think any plugin here that’s worth its salt would add them to headings only in the case that they don’t already have one, but you might wanna veryify that; otherwise, you run the risk of breaking existing links or perhaps even styling and functionality. Also think about what IDs are being generated. For example, I use the Add Anchor Links plugin, which adds a link (🔗) icon beside all headings to offer access to the IDs. The IDs it generates were idential to the Table of Contents-generated IDs, causing a duplicate ID problem. Fixable, but just be aware of things like that.\n\n\nOption 1: Use a Dedicated Table of Contents Plugin\n\n\nA dedicated Table of Contents plugin is a plugin that focuses on nothing but a Table of Contents. Nothing else. Here are some solid options where that’s the case.\n\n\nHeroic Table of Contents\n\n\nThe ability to edit/add/remove headers from the table of contents — even after it’s been automatically generated — is pretty powerful and unique to this plugin. It allows you to open and close it (optionally) as well, which is nice as a goal for these, as they should make the links useful rather than content that gets in the way. But beware that this puts you in the territory of enqueuing additional scripts as well as styles which may or may not be ideal or something you’re comfortable doing.\n\n\n\n(Recommended by Deborah Edwards-Onoro)\n\n\nEasy Table of Contents\n\n\nThis is not a Block Editor block! Instead, it only automatically inserts itself, either by content type or through an opt-in checkbox in a metabox.\n\n\n\nI find it a little awkward that you can’t control where the Table of Contents goes with this plugin. Looks like it inserts itself near the top of posts, likely right after where the <!-- more --> is located.\n\n\n\n\n\n\nSimpleTOC\n\n\nThis is my favorite one.\n\n\n\nI like this one because it doesn’t add any scripts or styles by default. It just makes a semantic HTML list out of the headers, links them up, and that’s it. That’s how I like to roll. \n\n\n\n\n\n\nLuckyWP Table of Contents\n\n\nLots of features, but I find it a bit awkward how it doesn’t have regular block controls. Instead, you get this entirely custom UI for changing the settings — and you can’t preview what it looks like in the block itself. \n\n\n\n\n\n\nGutenTOC\n\n\nFeels like this Table of Contents plugin embraces the spirit of the WordPress Block Editor quite well, but I find the settings a little awkward. The choices it offers don’t feel terrifically useful (like square bullets for the list? “15” space left?).\n\n\n\n\n\n\nOption 2: Wait for a Table of Contents feature to be baked into Core WordPress\n\n\nAs I write, there is an open pull request to enable a Table of Contents block in the Gutenberg plugin. Presumably, should that go well, it ultimately makes its way to core. That would be great if you ask me, but it doesn’t help solve the problem of needing a Table of Contents block right this second.\n\n\n\nIf this feature does drop, I’d lean heavily toward using it. Hopefully, I can do a search or query to find existing Table of Contents blocks on all posts, switch them over to use the native block, and remove whatever plugin I have in place. \n\n\nOption 3: Use a Table of Contents Block that’s a sub-feature of another WordPress plugin\n\n\nI would recommend against using a plugin that does a whole slew of things just because you want to use some small part of it. But hey, if it turns out you could use lots of things from the big plugin, it could be a bonus as far as managing fewer plugins overall.\n\n\nYoast SEO Premium\n\n\nThe free version of the Yoast SEO plugin doesn’t have it, but for only $99 per year, the Yoast SEO Premium plugin does. It has almost no features at all. You just add it as a block, and it pops in. You can edit the title or remove it — it’s almost like a “sub block.”\n\n\n\nThe list of links isn’t editable, but it does update in real-time as you change headings in the content, which is something most of the others I tested didn’t do. Super basic, no styling or features, but I kinda like that. I wouldn’t run Yoast for this one feature, especially for a paid premium, but if you’re using Yoast anyway (for the long haul), then you might as well go this route.\n\n\n\n\n\n\nUltimate Addons for Gutenberg\n\n\nThis one is probably the classiest Table of Contents block I’ve come across. Again, I’m weary of using an all-in-one plugin for one specific feature, but the other features that are baked into this plugin are things you can use, then it’s a solid option.\n\n\n\n\n\n\nOption 4: Roll your own DIY Table of Contents Block\n\n\nMaking blocks yourself isn’t out of the question! I’ve done it a few times with create-guten-block, though I’d probably reach for @wordpress/create-block these days. This puts you in JavaScript-land, so you’ll be parsing the content of the post with JavaScript, finding headings in the post content, and building things out from there. Kind of intermediate-to-advanced territory, I’d say. On one hand, it’s extra technical debt, and on the other, at least you have complete control since it’s your own code. \n\n\n\nSince we’re focusing on building blocks, Advanced Custom Fields has a very powerful way of building custom blocks that brings that power back to PHP-land. That way, if you’re only concerned with building a Table of Contents from other heading blocks, the code gets a lot easier.\n\n\n\nBill Erickson has a post — “Access block data with PHP using parse_blocks() and render_block() — that ultimately gets into literally building a Table of Contents block. This gist he provides is a pretty useful reference for how to loop through blocks on a post and produce an HTML list.\n\n\nFavorite?\n\n\nIf I was using Yoast SEO Premium on a site, I’d just use that one. If not, I’d go for SimpleTOC. That’s what we’ve done here on CSS-Tricks. Once the core feature drops (🤞), I’d make a rainy day project of moving all posts that currently use the Table of Contents plugin over to using the core WordPress block (assuming it turns out nice).\n\n4 Quality Options for a Table of Contents Block in WordPress originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-18T23:22:01.000Z",
      "date_modified": "2022-01-18T23:22:01.000Z",
      "_plugin": {
        "pageFilename": "decdd72c6ee996a512693e6f1a90d8478bc1a544eb7de35b3b4082e5f0b362d3.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361001",
      "url": "https://css-tricks.com/vitepwa-plugin-offline-service-worker/",
      "title": "Making a Site Work Offline Using the VitePWA Plugin",
      "summary": "The VitePWA plugin from Anthony Fu is a fantastic tool for your Vite-powered sites. It helps you add a service worker that handles:\n\noffline support\ncaching assets and content\nprompting the user when new content is available\n…and other goodies!\n\n…\n\nMaking a Site Work Offline Using the VitePWA Plugin originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p><a href=\"https://vite-plugin-pwa.netlify.app/\" rel=\"noopener\">The VitePWA plugin</a> from <a href=\"https://antfu.me\" rel=\"noopener\">Anthony Fu</a> is a fantastic tool for your Vite-powered sites. It helps you add a service worker that handles:</p>\n\n\n\n<ul><li>offline support</li><li>caching assets and content</li><li>prompting the user when new content is available</li><li>…and other goodies!</li></ul>\n\n\n\n<p>We’ll walk through the concept of service workers together, then jump right into making one with the VitePWA plugin.</p>\n\n\n\n<span id=\"more-361001\"></span>\n\n\n\n<p>New to Vite? Check out <a href=\"https://css-tricks.com/adding-vite-to-your-existing-web-app\">my prior post</a> for an introduction.</p>\n\n\n<h2 class=\"simpletoc-title\">Table of Contents</h2><ol class=\"simpletoc\">\n<li>\n<a  href=\"#service-workers-introduced\">Service workers, introduced</a></li><li>\n<a  href=\"#versioning-and-manifests\">Versioning and manifests</a></li><li>\n<a  href=\"#our-first-service-worker\">Our first service worker</a></li><li>\n<a  href=\"#what-about-offline-functionality\">What about offline functionality?</a></li><li>\n<a  href=\"#how-service-workers-update\">How service workers update</a></li><li>\n<a  href=\"#a-better-way-to-update-content\">A better way to update content</a></li><li>\n<a  href=\"#runtime-caching\">Runtime caching</a></li><li>\n<a  href=\"#adding-your-own-service-worker-content\">Adding your own service worker content</a></li><li>\n<a  href=\"#wrapping-up\">Wrapping up</a></li></ol>\n\n<h3 id=\"service-workers-introduced\">Service workers, introduced</h3>\n\n\n<p>Before getting into the VitePWA plugin, let’s briefly talk about the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\" rel=\"noopener\">Service Worker</a> itself.</p>\n\n\n\n<p>A <dfn>service worker</dfn> is a background process that runs on a separate thread in your web application. Service workers have the ability to intercept network requests and do… anything. The possibilities are surprisingly wide. For example, you could intercept requests for TypeScript files and compile them on the fly. Or you could intercept requests for video files and perform an advanced transcoding that the browser doesn’t currently support. More commonly though, a service worker is used to cache assets, both to improve a site’s performance and enable it to do <em>something</em> when it’s offline.</p>\n\n\n\n<p>When someone first lands on your site, the service worker the VitePWA plugin creates installs, and caches all of your HTML, CSS, and JavaScript files by leveraging the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Cache\" rel=\"noopener\">Cache Storage API</a>. The result is that, on subsequent visits to your site, the browser will load those resources from cache, rather than needing to make network requests. And even on the first visit to your site, since the service worker <em>just</em> pre-cached everything, the next place your user clicks will probably be pre-cached already, allowing the browser to completely bypass a network request.</p>\n\n\n<h3 id=\"versioning-and-manifests\">Versioning and manifests</h3>\n\n\n<p>You might be wondering what happens with a service worker when your code is updated. If your service worker is caching, say, a <code>foo.js</code> file, and you modify that file, you want the service worker to pull down the updated version, the next time a user visits the site.</p>\n\n\n\n<p>But in practice you don’t have a <code>foo.js</code> file. Usually, a build system will create something like <code>foo-ABC123.js</code>, where “ABC123” is a hash of the file. If you update <code>foo.js</code>, the next deployment of your site may send over <code>foo-XYZ987.js</code>. How does the service worker handle this?</p>\n\n\n\n<p>It turns out the Service Worker API is an <em>extremely</em> low-level primitive. If you’re looking for a native turnkey solution between it and the cache API, you’ll be disappointed. <strong>Basically, the creation of your service worker needs to be automated, in part, and connected to the build system.</strong> You’d need to see all the assets your build created, hard-code those file names into the service worker, have code to pre-cache them, and more importantly, <em>keep track of</em> the files that are cached.</p>\n\n\n\n<p>If code updates, the service worker file also changes, containing the <em>new</em> filenames, complete with hashes. When a user makes their next visit to the app, the new service worker will need to install, and compare the new file manifest with the manifest that’s currently in cache, ejecting files that are no longer needed, while caching the new content.</p>\n\n\n\n<p>This is an absurd amount of work and incredibly difficult to get right. While it can be a fun project, in practice you’ll want to use an established product to generate your service worker — and the best product around is <a href=\"https://developers.google.com/web/tools/workbox\" rel=\"noopener\">Workbox</a>, which is from the folks at Google.</p>\n\n\n\n<p>Even Workbox is a bit of a low-level primitive. It needs detailed information about the files you’re pre-caching, which are buried in your build tool. This is why we use the VitePWA plugin. It uses Workbox under the hood, and configures it with all the info it needs about the bundles that Vite creates. Unsurprisingly, there are also <a href=\"https://developers.google.com/web/tools/workbox/guides/generate-service-worker/webpack\" rel=\"noopener\">webpack</a> and <a href=\"https://www.npmjs.com/package/rollup-plugin-workbox\" rel=\"noopener\">Rollup</a> plugins if you happen to prefer working with those bundlers.</p>\n\n\n<h3 id=\"our-first-service-worker\">Our first service worker</h3>\n\n\n<p>I’ll assume you already have a Vite-based site. If not, feel free to <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">create one</a> from any of the <a href=\"https://vitejs.dev/guide/#community-templates\" rel=\"noopener\">available templates</a>.</p>\n\n\n\n<p>First, we install the VitePWA plugin:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm i vite-plugin-pwa</code></pre>\n\n\n\n<p>We’ll import the plugin in our Vite config:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { VitePWA } from \"vite-plugin-pwa\"</code></pre>\n\n\n\n<p>Then we put it to use in the config as well:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">plugins: [\n  VitePWA()</code></pre>\n\n\n\n<p>We’ll add more options in a bit, but that’s all we need to create a surprisingly useful service worker. Now let’s register it somewhere in the entry of our application with this code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { registerSW } from \"virtual:pwa-register\";\n\nif (\"serviceWorker\" in navigator) {\n  // &amp;&amp; !/localhost/.test(window.location)) {\n  registerSW();\n}</code></pre>\n\n\n\n<p>Don’t let the code that’s commented out throw you for a loop. It&#8217;s extremely important, in fact, as it prevents the service worker from running in development. We only want to install the service worker anywhere that’s not on the localhost where we’re developing, that is, unless we’re developing the service worker itself, in which case we can comment out that check (and revert before pushing code to the main branch).</p>\n\n\n\n<p>Let’s go ahead and open a fresh browser, launch DevTools, navigate to the Network tab, and run the web app. Everything should load as you’d normally expect. The difference is that you should see a whole slew of network requests in DevTools.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637565267503_image.png\" alt=\"A screenshot of DevTools listing all of the network requests for the currant app using the VitePWA plugin. There are a total of 16 various JavaScript and CSS files.\"/></figure>\n\n\n\n<p>That’s Workbox pre-caching the bundles. Things are working!</p>\n\n\n<h3 id=\"what-about-offline-functionality\">What about offline functionality?</h3>\n\n\n<p>So, our service worker is pre-caching all of our bundled assets. That means it will serve those assets from cache without even needing to hit the network. Does that mean our service worker could serve assets even when the user has no network access? Indeed, it does!</p>\n\n\n\n<p>And, believe it or not, it’s already done. Give it a try by opening the Network tab in DevTools and telling Chrome to simulate offline mode, like this.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637633418654_image.png\" alt=\"Screenshot of the DevTools UO to simulate an offline connection with the select menu open. The No throttling option is currently checked but the Offline option is highlighted in light blue.\"/><figcaption>The&nbsp;“No&nbsp;throttling” option is the default selection. Click that and select the&nbsp;“Offline”&nbsp;option to simulate an offline connection.</figcaption></figure>\n\n\n\n<p>Let’s refresh the page. You <em>should</em> see everything load. Of course, if you’re running any network requests, you’ll see them hang forever since you’re offline. Even here, though, there are things you can do. Modern browsers ship with their own internal, persistent database called IndexedDB. There’s nothing stopping you from writing your own code to sync some data to there, then write some custom service worker code to intercept network requests, determine if the user is offline, and then serve equivalent content from IndexedDB if it&#8217;s in there.</p>\n\n\n\n<p>But a much simpler option is to detect <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine\" rel=\"noopener\">if the user is offline</a>, show a message about being offline, and then bypass the data requests. This is a topic unto itself, which <a href=\"https://css-tricks.com/making-web-app-work-offline-part-2-implementation/\">I’ve written about</a> in much greater detail.</p>\n\n\n\n<p>Before showing you how to write, and integrate your own service worker content, let’s take a closer look at our existing service worker. In particular, let&#8217;s see how it manages updating/changing content. This is surprisingly tricky and easy to mess up, even with the VitePWA plugin.</p>\n\n\n\n<p>Before moving on, make sure you tell Chrome DevTools to put you back online.</p>\n\n\n<h3 id=\"how-service-workers-update\">How service workers update</h3>\n\n\n<p>Take a closer look at what happens to our site when we change the content. We’ll go ahead and remove our existing service worker, which we can do in the Application tab of DevTools, under Storage.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1154\" height=\"774\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634017139_image.png?resize=1154%2C774&#038;ssl=1\" alt=\"Screenshot showing the Storage panel of DevTools. The DevTools menu is a panel on the left and the app usage is displayed in a panel on the right, showing that 508 kilobytes of data total is used, where 392 kilobytes are cached and 16.4 are service workers. A button to clear site data is below the Usage stats with a deep blue label and a light gray background.\" class=\"wp-image-361008\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634017139_image.png?w=1154&amp;ssl=1 1154w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634017139_image.png?resize=300%2C201&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634017139_image.png?resize=1024%2C687&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634017139_image.png?resize=768%2C515&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634017139_image.png?resize=1000%2C671&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Click the “Clear site data” button to get a clean slate. While I’m at it, I’m going to remove most of the routes of my own site so there’s fewer resources, then let Vite rebuild the app.</p>\n\n\n\n<p>Look in the generated <code>sw.js</code> to see the generated Workbox service worker. There should be a pre-cache manifest inside of it. Mine looks like this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1336\" height=\"474\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634248783_image.png?resize=1336%2C474&#038;ssl=1\" alt=\"A dark mode screenshot showing a list of eight asset urls inside of a precacheAndRoute function.\" class=\"wp-image-361013\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634248783_image.png?w=1336&amp;ssl=1 1336w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634248783_image.png?resize=300%2C106&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634248783_image.png?resize=1024%2C363&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634248783_image.png?resize=768%2C272&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634248783_image.png?resize=1000%2C355&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p class=\"is-style-explanation\">If <code>sw.js</code> is minified, run it through Prettier to make it easier to read.</p>\n\n\n\n<p>Now let’s run the site and see what’s in our cache:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1962\" height=\"382\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?resize=1962%2C382&#038;ssl=1\" alt=\"\" class=\"wp-image-361015\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?w=1962&amp;ssl=1 1962w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?resize=300%2C58&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?resize=1024%2C199&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?resize=768%2C150&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?resize=1536%2C299&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?resize=1000%2C195&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Let’s focus on the <code>settings.js file</code>. Vite generated <code>assets/settings.ccb080c2.js</code> based on the hash of its contents. Workbox, being independent of Vite, generated <em>its own</em> hash of the same file. If that same file name were to be generated with different content, then a new service worker would be re-generated, with a different pre-cache manifest (same file, but different revision) and Workbox would know to cache the new version, and remove the old when it’s no longer needed.</p>\n\n\n\n<p>Again, the filenames will always be different since we’re using a bundler that injects hash codes into our file names, but Workbox supports dev environments which don’t do that.</p>\n\n\n\n<p class=\"is-style-explanation\">Since the time writing, the VitePWA plugin has been updated and no longer injects these revision hashes. If you’re attempting to follow along with the steps in this article, this specific step might be slightly different from your actual experience. See <a href=\"https://github.com/antfu/vite-plugin-pwa/issues/163\" rel=\"noopener\">this GitHub issue</a> for more context.</p>\n\n\n\n<p>If we update our <code>settings.js</code> file, then Vite will create a new file in our build, with a new hash code, which Workbox will treat as a new file. Let’s see this in action. After changing the file and re-running the Vite build, our pre-cache manifest looks like this:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635068016_image.png\" alt=\"\"/></figure>\n\n\n\n<p>Now, when we refresh the page, the prior service worker is <em>still</em> running and loading the <em>prior</em> file. Then, the <em>new</em> service worker, with the <em>new</em> pre-cache manifest is downloaded and pre-cached.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635183984_image.png\" alt=\"A DevTools screenshot showing a table of pre-cached assets processed by the VitePWA plugin and Workbox.\"/><figcaption>The new pre-cached manifest is displayed in the list of cached assets. Notice that both versions of our settings file are there (and both versions of a few other assets were affected as well): the old version, since that’s what’s still being run, and the new version, since the new service worker has pre-cached it.</figcaption></figure>\n\n\n\n<p>Note the corollary here: our old content is still being served to the user since the old service worker is still running. The user is unable to see the change we just made, even if they refresh because the service worker, by default, guarantees any and all tabs with this web app are running the <em>same</em> version. If you want the browser to show the updated version, close your tab (and any other tabs with the site), and re-open it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2220\" height=\"714\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=2220%2C714&#038;ssl=1\" alt=\"The same DevTools screenshot of pre-cached assets, but now only displaying new assets instead of duplicates.\" class=\"wp-image-361016\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?w=2220&amp;ssl=1 2220w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=300%2C96&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=1024%2C329&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=768%2C247&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=1536%2C494&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=2048%2C659&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=1000%2C322&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The cache should now only contain the new assets.</figcaption></figure>\n\n\n\n<p>Workbox did all the legwork of making this all come out right! We did very little to get this going.</p>\n\n\n<h3 id=\"a-better-way-to-update-content\">A better way to update content</h3>\n\n\n<p>It’s unlikely that you can get away with serving stale content to your users until they happen to close all their browser tabs. Fortunately, the VitePWA plugin offers a better way. The <a href=\"https://vite-plugin-pwa.netlify.app/guide/auto-update.html\" rel=\"noopener\"><code>registerSW</code> function</a> accepts an object with an <code>onNeedRefresh</code> method. This method is called whenever there’s a new service worker waiting to take over. <code>registerSW</code> also returns a function that you can call to reload the page, activating the new service worker in the process.</p>\n\n\n\n<p>That’s a lot, so let’s see some code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">if (\"serviceWorker\" in navigator) {\n  // &amp;&amp; !/localhost/.test(window.location) &amp;&amp; !/lvh.me/.test(window.location)) {\n  const updateSW = registerSW({\n    onNeedRefresh() {\n      Toastify({\n        text: `&lt;h4 style='display: inline'>An update is available!&lt;/h4>\n               &lt;br>&lt;br>\n               &lt;a class='do-sw-update'>Click to update and reload&lt;/a>&nbsp;&nbsp;`,\n        escapeMarkup: false,\n        gravity: \"bottom\",\n        onClick() {\n          updateSW(true);\n        }\n      }).showToast();\n    }\n  });\n}</code></pre>\n\n\n\n<p>I’m using the <a href=\"https://www.npmjs.com/package/toastify-js\" rel=\"noopener\">toastify-js library</a> to show a toast UI component to let users know when a new version of the service worker is available and waiting. If the user clicks the toast, I call the function VitePWA gives me to reload the page, with the new service worker running.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"516\" height=\"198\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637636900295_image.png?resize=516%2C198&#038;ssl=1\" alt=\"A toast component screenshot with white text and a slight background gradient that goes from light blue on the left to bright blue on the right. It reads: an update is available! Click to update and reload.\" class=\"wp-image-361018\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637636900295_image.png?w=516&amp;ssl=1 516w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637636900295_image.png?resize=300%2C115&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Now when we have pending updates, a nice toast component pops up on the front end. Clicking it reloads the page with the new content in there.</figcaption></figure>\n\n\n\n<p>One thing to remember here is that, after you deploy the code to show the toast, the toast component won’t show up the next time you load your site. That’s because the old service worker (the one before we added the toast component) is still running. That requires manually closing all tabs and re-opening the web app for the new service worker to take over. Then, the <em>next</em> time you update some code, the service worker should show the toast, prompting you to update.</p>\n\n\n\n<p>Why doesn’t the service worker update when the page is refreshed? I mentioned earlier that refreshing the page does not update or activate the waiting service worker, so why does <em>this</em> work? Calling this method doesn’t only refresh the page, but it calls some low-level Service Worker APIs (in particular <code>skipWaiting</code>) as well, giving us the outcome we want.</p>\n\n\n<h3 id=\"runtime-caching\">Runtime caching</h3>\n\n\n<p>We’ve seen the bundle pre-caching we get for free with VitePWA for our build assets. What about caching any other content we might request at runtime? Workbox supports this via its <code>runtimeCaching</code> feature.</p>\n\n\n\n<p>Here’s how. The VitePWA plugin can take an object, one property of which is <code>workbox</code>, which takes Workbox properties.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const getCache = ({ name, pattern }: any) => ({\n  urlPattern: pattern,\n  handler: \"CacheFirst\" as const,\n  options: {\n    cacheName: name,\n    expiration: {\n      maxEntries: 500,\n      maxAgeSeconds: 60 * 60 * 24 * 365 * 2 // 2 years\n    },\n    cacheableResponse: {\n      statuses: [200]\n    }\n  }\n});\n// ...\n\n  plugins: [\n    VitePWA({\n      workbox: {\n        runtimeCaching: [\n          getCache({ \n            pattern: /^https:\\/\\/s3.amazonaws.com\\/my-library-cover-uploads/, \n            name: \"local-images1\" \n          }),\n          getCache({ \n            pattern: /^https:\\/\\/my-library-cover-uploads.s3.amazonaws.com/, \n            name: \"local-images2\" \n          })\n        ]\n      }\n    })\n  ],\n// ...</code></pre>\n\n\n\n<p>I know, that’s a lot of code. But all it’s really doing is telling Workbox to cache anything it sees matching those URL patterns. <a href=\"https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-build#.RuntimeCachingEntry\" rel=\"noopener\">The docs</a> provide much more info if you want to get deep into specifics.</p>\n\n\n\n<p>Now, after that update takes effect, we can see those resources being served by our service worker.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1578\" height=\"170\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?resize=1578%2C170&#038;ssl=1\" alt=\"DevTools screenshot showing the resources that are loaded by the browser. There are four jpeg images.\" class=\"wp-image-361021\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?w=1578&amp;ssl=1 1578w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?resize=300%2C32&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?resize=1024%2C110&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?resize=768%2C83&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?resize=1536%2C165&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?resize=1000%2C108&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>And we can see the corresponding cache that was created.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1702\" height=\"586\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?resize=1702%2C586&#038;ssl=1\" alt=\"DevTools screenshot showing the new cache instance that is stored in Cache Storage. It includes all of the cached images.\" class=\"wp-image-361023\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?w=1702&amp;ssl=1 1702w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?resize=300%2C103&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?resize=1024%2C353&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?resize=768%2C264&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?resize=1536%2C529&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?resize=1000%2C344&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"adding-your-own-service-worker-content\">Adding your own service worker content</h3>\n\n\n<p>Let’s say you want to get advanced with your service worker. You want to add some code to sync data with IndexedDB, add fetch handlers, and respond with IndexedDB data when the user is offline (again, <a href=\"https://css-tricks.com/making-web-app-work-offline-part-2-implementation/\">my prior post</a> walks through the ins and outs of IndexedDB). But how do you put your own code into the service worker that Vite creates for us?</p>\n\n\n\n<p>There’s another Workbox option we can use for this: <code>importScripts</code>.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">VitePWA({\n  workbox: {\n    importScripts: [\"sw-code.js\"],</code></pre>\n\n\n\n<p>Here, the service worker will request <code>sw-code.js</code> at runtime. In that case, make sure there’s an <code>sw-code.js</code> file that can be served by your application. The easiest way to achieve that is to put it in the <code>public</code> folder (see the <a href=\"https://vitejs.dev/config/#publicdir\" rel=\"noopener\">Vite docs</a> for detailed instructions).</p>\n\n\n\n<p>If this file starts to grow to a size such that you need to break things up with JavaScript imports, make sure you bundle it to prevent your service worker from trying to execute import statements (which it may or may not be able to do). You can create a separate Vite build instead.</p>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>At the end of 2021, CSS-Tricks asked a bunch of front-end folks what one thing someone cans do to make their website better. <a href=\"https://css-tricks.com/add-a-service-worker-to-your-site/\">Chris Ferdinandi suggested a service worker.</a> Well, that’s exactly what we accomplished in this article and it was relatively simple, wasn’t it? That’s thanks to the VitePWA with hat tips to Workbox and the Cache API.</p>\n\n\n\n<p>Service workers that leverage the Cache API are capable of greatly improving the perf of your web app. And while it might seem a little scary or confusing at first, it’s nice to know we have tools like the VitePWA plugin to simplify things a great deal. Install the plugin and let it do the heavy lifting. Sure, there are more advanced things that a service worker can do, and VitePWA can be used for more complex functionality, but an offline site is a fantastic starting point!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/vitepwa-plugin-offline-service-worker/\">Making a Site Work Offline Using the VitePWA Plugin</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "The VitePWA plugin from Anthony Fu is a fantastic tool for your Vite-powered sites. It helps you add a service worker that handles:\n\n\n\noffline supportcaching assets and contentprompting the user when new content is available…and other goodies!\n\n\n\nWe’ll walk through the concept of service workers together, then jump right into making one with the VitePWA plugin.\n\n\n\n\n\n\n\nNew to Vite? Check out my prior post for an introduction.\n\n\nTable of Contents\n\nService workers, introduced\nVersioning and manifests\nOur first service worker\nWhat about offline functionality?\nHow service workers update\nA better way to update content\nRuntime caching\nAdding your own service worker content\nWrapping up\n\nService workers, introduced\n\n\nBefore getting into the VitePWA plugin, let’s briefly talk about the Service Worker itself.\n\n\n\nA service worker is a background process that runs on a separate thread in your web application. Service workers have the ability to intercept network requests and do… anything. The possibilities are surprisingly wide. For example, you could intercept requests for TypeScript files and compile them on the fly. Or you could intercept requests for video files and perform an advanced transcoding that the browser doesn’t currently support. More commonly though, a service worker is used to cache assets, both to improve a site’s performance and enable it to do something when it’s offline.\n\n\n\nWhen someone first lands on your site, the service worker the VitePWA plugin creates installs, and caches all of your HTML, CSS, and JavaScript files by leveraging the Cache Storage API. The result is that, on subsequent visits to your site, the browser will load those resources from cache, rather than needing to make network requests. And even on the first visit to your site, since the service worker just pre-cached everything, the next place your user clicks will probably be pre-cached already, allowing the browser to completely bypass a network request.\n\n\nVersioning and manifests\n\n\nYou might be wondering what happens with a service worker when your code is updated. If your service worker is caching, say, a foo.js file, and you modify that file, you want the service worker to pull down the updated version, the next time a user visits the site.\n\n\n\nBut in practice you don’t have a foo.js file. Usually, a build system will create something like foo-ABC123.js, where “ABC123” is a hash of the file. If you update foo.js, the next deployment of your site may send over foo-XYZ987.js. How does the service worker handle this?\n\n\n\nIt turns out the Service Worker API is an extremely low-level primitive. If you’re looking for a native turnkey solution between it and the cache API, you’ll be disappointed. Basically, the creation of your service worker needs to be automated, in part, and connected to the build system. You’d need to see all the assets your build created, hard-code those file names into the service worker, have code to pre-cache them, and more importantly, keep track of the files that are cached.\n\n\n\nIf code updates, the service worker file also changes, containing the new filenames, complete with hashes. When a user makes their next visit to the app, the new service worker will need to install, and compare the new file manifest with the manifest that’s currently in cache, ejecting files that are no longer needed, while caching the new content.\n\n\n\nThis is an absurd amount of work and incredibly difficult to get right. While it can be a fun project, in practice you’ll want to use an established product to generate your service worker — and the best product around is Workbox, which is from the folks at Google.\n\n\n\nEven Workbox is a bit of a low-level primitive. It needs detailed information about the files you’re pre-caching, which are buried in your build tool. This is why we use the VitePWA plugin. It uses Workbox under the hood, and configures it with all the info it needs about the bundles that Vite creates. Unsurprisingly, there are also webpack and Rollup plugins if you happen to prefer working with those bundlers.\n\n\nOur first service worker\n\n\nI’ll assume you already have a Vite-based site. If not, feel free to create one from any of the available templates.\n\n\n\nFirst, we install the VitePWA plugin:\n\n\n\nnpm i vite-plugin-pwa\n\n\n\nWe’ll import the plugin in our Vite config:\n\n\n\nimport { VitePWA } from \"vite-plugin-pwa\"\n\n\n\nThen we put it to use in the config as well:\n\n\n\nplugins: [\n  VitePWA()\n\n\n\nWe’ll add more options in a bit, but that’s all we need to create a surprisingly useful service worker. Now let’s register it somewhere in the entry of our application with this code:\n\n\n\nimport { registerSW } from \"virtual:pwa-register\";\n\nif (\"serviceWorker\" in navigator) {\n  // && !/localhost/.test(window.location)) {\n  registerSW();\n}\n\n\n\nDon’t let the code that’s commented out throw you for a loop. It’s extremely important, in fact, as it prevents the service worker from running in development. We only want to install the service worker anywhere that’s not on the localhost where we’re developing, that is, unless we’re developing the service worker itself, in which case we can comment out that check (and revert before pushing code to the main branch).\n\n\n\nLet’s go ahead and open a fresh browser, launch DevTools, navigate to the Network tab, and run the web app. Everything should load as you’d normally expect. The difference is that you should see a whole slew of network requests in DevTools.\n\n\n\n\n\n\n\nThat’s Workbox pre-caching the bundles. Things are working!\n\n\nWhat about offline functionality?\n\n\nSo, our service worker is pre-caching all of our bundled assets. That means it will serve those assets from cache without even needing to hit the network. Does that mean our service worker could serve assets even when the user has no network access? Indeed, it does!\n\n\n\nAnd, believe it or not, it’s already done. Give it a try by opening the Network tab in DevTools and telling Chrome to simulate offline mode, like this.\n\n\n\nThe “No throttling” option is the default selection. Click that and select the “Offline” option to simulate an offline connection.\n\n\n\nLet’s refresh the page. You should see everything load. Of course, if you’re running any network requests, you’ll see them hang forever since you’re offline. Even here, though, there are things you can do. Modern browsers ship with their own internal, persistent database called IndexedDB. There’s nothing stopping you from writing your own code to sync some data to there, then write some custom service worker code to intercept network requests, determine if the user is offline, and then serve equivalent content from IndexedDB if it’s in there.\n\n\n\nBut a much simpler option is to detect if the user is offline, show a message about being offline, and then bypass the data requests. This is a topic unto itself, which I’ve written about in much greater detail.\n\n\n\nBefore showing you how to write, and integrate your own service worker content, let’s take a closer look at our existing service worker. In particular, let’s see how it manages updating/changing content. This is surprisingly tricky and easy to mess up, even with the VitePWA plugin.\n\n\n\nBefore moving on, make sure you tell Chrome DevTools to put you back online.\n\n\nHow service workers update\n\n\nTake a closer look at what happens to our site when we change the content. We’ll go ahead and remove our existing service worker, which we can do in the Application tab of DevTools, under Storage.\n\n\n\n\n\n\n\nClick the “Clear site data” button to get a clean slate. While I’m at it, I’m going to remove most of the routes of my own site so there’s fewer resources, then let Vite rebuild the app.\n\n\n\nLook in the generated sw.js to see the generated Workbox service worker. There should be a pre-cache manifest inside of it. Mine looks like this:\n\n\n\n\n\n\n\nIf sw.js is minified, run it through Prettier to make it easier to read.\n\n\n\nNow let’s run the site and see what’s in our cache:\n\n\n\n\n\n\n\nLet’s focus on the settings.js file. Vite generated assets/settings.ccb080c2.js based on the hash of its contents. Workbox, being independent of Vite, generated its own hash of the same file. If that same file name were to be generated with different content, then a new service worker would be re-generated, with a different pre-cache manifest (same file, but different revision) and Workbox would know to cache the new version, and remove the old when it’s no longer needed.\n\n\n\nAgain, the filenames will always be different since we’re using a bundler that injects hash codes into our file names, but Workbox supports dev environments which don’t do that.\n\n\n\nSince the time writing, the VitePWA plugin has been updated and no longer injects these revision hashes. If you’re attempting to follow along with the steps in this article, this specific step might be slightly different from your actual experience. See this GitHub issue for more context.\n\n\n\nIf we update our settings.js file, then Vite will create a new file in our build, with a new hash code, which Workbox will treat as a new file. Let’s see this in action. After changing the file and re-running the Vite build, our pre-cache manifest looks like this:\n\n\n\n\n\n\n\nNow, when we refresh the page, the prior service worker is still running and loading the prior file. Then, the new service worker, with the new pre-cache manifest is downloaded and pre-cached.\n\n\n\nThe new pre-cached manifest is displayed in the list of cached assets. Notice that both versions of our settings file are there (and both versions of a few other assets were affected as well): the old version, since that’s what’s still being run, and the new version, since the new service worker has pre-cached it.\n\n\n\nNote the corollary here: our old content is still being served to the user since the old service worker is still running. The user is unable to see the change we just made, even if they refresh because the service worker, by default, guarantees any and all tabs with this web app are running the same version. If you want the browser to show the updated version, close your tab (and any other tabs with the site), and re-open it.\n\n\n\nThe cache should now only contain the new assets.\n\n\n\nWorkbox did all the legwork of making this all come out right! We did very little to get this going.\n\n\nA better way to update content\n\n\nIt’s unlikely that you can get away with serving stale content to your users until they happen to close all their browser tabs. Fortunately, the VitePWA plugin offers a better way. The registerSW function accepts an object with an onNeedRefresh method. This method is called whenever there’s a new service worker waiting to take over. registerSW also returns a function that you can call to reload the page, activating the new service worker in the process.\n\n\n\nThat’s a lot, so let’s see some code:\n\n\n\nif (\"serviceWorker\" in navigator) {\n  // && !/localhost/.test(window.location) && !/lvh.me/.test(window.location)) {\n  const updateSW = registerSW({\n    onNeedRefresh() {\n      Toastify({\n        text: `<h4 style='display: inline'>An update is available!</h4>\n               <br><br>\n               <a class='do-sw-update'>Click to update and reload</a>  `,\n        escapeMarkup: false,\n        gravity: \"bottom\",\n        onClick() {\n          updateSW(true);\n        }\n      }).showToast();\n    }\n  });\n}\n\n\n\nI’m using the toastify-js library to show a toast UI component to let users know when a new version of the service worker is available and waiting. If the user clicks the toast, I call the function VitePWA gives me to reload the page, with the new service worker running.\n\n\n\nNow when we have pending updates, a nice toast component pops up on the front end. Clicking it reloads the page with the new content in there.\n\n\n\nOne thing to remember here is that, after you deploy the code to show the toast, the toast component won’t show up the next time you load your site. That’s because the old service worker (the one before we added the toast component) is still running. That requires manually closing all tabs and re-opening the web app for the new service worker to take over. Then, the next time you update some code, the service worker should show the toast, prompting you to update.\n\n\n\nWhy doesn’t the service worker update when the page is refreshed? I mentioned earlier that refreshing the page does not update or activate the waiting service worker, so why does this work? Calling this method doesn’t only refresh the page, but it calls some low-level Service Worker APIs (in particular skipWaiting) as well, giving us the outcome we want.\n\n\nRuntime caching\n\n\nWe’ve seen the bundle pre-caching we get for free with VitePWA for our build assets. What about caching any other content we might request at runtime? Workbox supports this via its runtimeCaching feature.\n\n\n\nHere’s how. The VitePWA plugin can take an object, one property of which is workbox, which takes Workbox properties.\n\n\n\nconst getCache = ({ name, pattern }: any) => ({\n  urlPattern: pattern,\n  handler: \"CacheFirst\" as const,\n  options: {\n    cacheName: name,\n    expiration: {\n      maxEntries: 500,\n      maxAgeSeconds: 60 * 60 * 24 * 365 * 2 // 2 years\n    },\n    cacheableResponse: {\n      statuses: [200]\n    }\n  }\n});\n// ...\n\n  plugins: [\n    VitePWA({\n      workbox: {\n        runtimeCaching: [\n          getCache({ \n            pattern: /^https:\\/\\/s3.amazonaws.com\\/my-library-cover-uploads/, \n            name: \"local-images1\" \n          }),\n          getCache({ \n            pattern: /^https:\\/\\/my-library-cover-uploads.s3.amazonaws.com/, \n            name: \"local-images2\" \n          })\n        ]\n      }\n    })\n  ],\n// ...\n\n\n\nI know, that’s a lot of code. But all it’s really doing is telling Workbox to cache anything it sees matching those URL patterns. The docs provide much more info if you want to get deep into specifics.\n\n\n\nNow, after that update takes effect, we can see those resources being served by our service worker.\n\n\n\n\n\n\n\nAnd we can see the corresponding cache that was created.\n\n\n\n\n\n\nAdding your own service worker content\n\n\nLet’s say you want to get advanced with your service worker. You want to add some code to sync data with IndexedDB, add fetch handlers, and respond with IndexedDB data when the user is offline (again, my prior post walks through the ins and outs of IndexedDB). But how do you put your own code into the service worker that Vite creates for us?\n\n\n\nThere’s another Workbox option we can use for this: importScripts.\n\n\n\nVitePWA({\n  workbox: {\n    importScripts: [\"sw-code.js\"],\n\n\n\nHere, the service worker will request sw-code.js at runtime. In that case, make sure there’s an sw-code.js file that can be served by your application. The easiest way to achieve that is to put it in the public folder (see the Vite docs for detailed instructions).\n\n\n\nIf this file starts to grow to a size such that you need to break things up with JavaScript imports, make sure you bundle it to prevent your service worker from trying to execute import statements (which it may or may not be able to do). You can create a separate Vite build instead.\n\n\nWrapping up\n\n\nAt the end of 2021, CSS-Tricks asked a bunch of front-end folks what one thing someone cans do to make their website better. Chris Ferdinandi suggested a service worker. Well, that’s exactly what we accomplished in this article and it was relatively simple, wasn’t it? That’s thanks to the VitePWA with hat tips to Workbox and the Cache API.\n\n\n\nService workers that leverage the Cache API are capable of greatly improving the perf of your web app. And while it might seem a little scary or confusing at first, it’s nice to know we have tools like the VitePWA plugin to simplify things a great deal. Install the plugin and let it do the heavy lifting. Sure, there are more advanced things that a service worker can do, and VitePWA can be used for more complex functionality, but an offline site is a fantastic starting point!\n\nMaking a Site Work Offline Using the VitePWA Plugin originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-18T14:30:26.000Z",
      "date_modified": "2022-01-18T14:30:26.000Z",
      "_plugin": {
        "pageFilename": "2184c29ab54b97c9fa9209db1947b04694d1c7e4247a7563fb1934a3d076f8eb.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361047",
      "url": "https://css-tricks.com/hottest-front-end-tools-in-2021/",
      "title": "What Were the Hottest Front-End Tools in 2021?",
      "summary": "Another year has passed and once again I’ve had the privilege of going through the Web Tools Weekly newsletter archives from the past 12 months to hunt down the front-end tools that readers found to be the most interesting during …\n\nWhat Were the Hottest Front-End Tools in 2021? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Another year has passed and once again I&#8217;ve had the privilege of going through the <a href=\"https://webtoolsweekly.com/\" rel=\"noopener\">Web Tools Weekly</a> newsletter archives from the past 12 months to hunt down the front-end tools that readers found to be the most interesting during 2021. So, to kick off 2022, I’ve compiled a list of the 60 most popular tools. I&#8217;m sure there are at least one or two listed here that you can start using in your front-end projects today.</p>\n\n\n\n<p>Some of these front-end tools are super-practical, while others probably only made this list due to curiosity (which I base on the number of unique clicks). And since many of the tools that make my year-end lists are pretty new, I think this is a good indicator of the kinds of front-end tools that will be popular in the coming year.</p>\n\n\n\n<p>Counting down from the top!</p>\n\n\n\n<span id=\"more-361047\"></span>\n\n\n\n<details >\n  <summary>\n          <h3>Table of contents</h3>\n      </summary>\n  \n<ul class=\"simpletoc\">\n<li>\n<a  href=\"#60-open-props\">60. Open Props</a></li><li>\n<a  href=\"#59-nextui\">59. NextUI</a></li><li>\n<a  href=\"#58-dopefolio\">58. Dopefolio</a></li><li>\n<a  href=\"#57-vizzu\">57. Vizzu</a></li><li>\n<a  href=\"#56-10015-tools\">56. 10015 Tools</a></li><li>\n<a  href=\"#55-snoweb\">55. Snoweb</a></li><li>\n<a  href=\"#54-tails\">54. Tails</a></li><li>\n<a  href=\"#53-maplibre\">53. MapLibre</a></li><li>\n<a  href=\"#52-svg-repo\">52. SVG Repo</a></li><li>\n<a  href=\"#51-animated-backgrounds\">51. Animated Backgrounds</a></li><li>\n<a  href=\"#50-picocss\">50. Pico.css</a></li><li>\n<a  href=\"#49-coding-fonts\">49. Coding Fonts</a></li><li>\n<a  href=\"#48-uineumorphism\">48. UI-Neumorphism</a></li><li>\n<a  href=\"#47-beautiful-css-buttons\">47. Beautiful CSS Buttons</a></li><li>\n<a  href=\"#46-shaper\">46. Shaper</a></li><li>\n<a  href=\"#45-prestige\">45. Prestige</a></li><li>\n<a  href=\"#44-htmlcafe\">44. HTML.cafe</a></li><li>\n<a  href=\"#43-chartscss\">43. Charts.css</a></li><li>\n<a  href=\"#42-buttons-generator\">42. Buttons Generator</a></li><li>\n<a  href=\"#41-doodad-pattern-generator\">41. Doodad Pattern Generator</a></li><li>\n<a  href=\"#40-kaboom\">40. Kaboom</a></li><li>\n<a  href=\"#39-skuawk\">39. Skuawk</a></li><li>\n<a  href=\"#38-glassmorphism-css-generator\">38. Glassmorphism CSS Generator</a></li><li>\n<a  href=\"#37-kalia\">37. Kalia</a></li><li>\n<a  href=\"#36-adminjs\">36. AdminJS</a></li><li>\n<a  href=\"#35-pancake\">35. Pancake</a></li><li>\n<a  href=\"#34-mosaic-lite\">34. Mosaic Lite</a></li><li>\n<a  href=\"#33-iconduck\">33. Iconduck</a></li><li>\n<a  href=\"#32-luxa-css\">32. Luxa CSS</a></li><li>\n<a  href=\"#31-glitter\">31. Glitter</a></li><li>\n<a  href=\"#30-components-ai\">30. Components AI</a></li><li>\n<a  href=\"#29-unicode-arrows\">29. Unicode Arrows</a></li><li>\n<a  href=\"#28-type-scale-clamp-generator\">28. Type Scale Clamp Generator</a></li><li>\n<a  href=\"#27-animxyz\">27. AnimXYZ</a></li><li>\n<a  href=\"#26-frontend-toolkit\">26. Frontend Toolkit</a></li><li>\n<a  href=\"#25-colorpalettesearth\">25. colorpalettes.earth</a></li><li>\n<a  href=\"#24-uncut\">24. Uncut</a></li><li>\n<a  href=\"#23-lowdefy\">23. Lowdefy</a></li><li>\n<a  href=\"#22-javascript-booster\">22. JavaScript Booster</a></li><li>\n<a  href=\"#21-layout-patterns\">21. Layout Patterns</a></li><li>\n<a  href=\"#20-baseline-background-remover\">20. Baseline Background Remover</a></li><li>\n<a  href=\"#19-theatrejs\">19. Theatre.js</a></li><li>\n<a  href=\"#18-transitioncss\">18. Transition.css</a></li><li>\n<a  href=\"#17-the-component-gallery\">17. The Component Gallery</a></li><li>\n<a  href=\"#16-partyjs\">16. party.js</a></li><li>\n<a  href=\"#15-headless-ui\">15. Headless UI</a></li><li>\n<a  href=\"#14-turbo\">14. Turbo</a></li><li>\n<a  href=\"#13-tidyjs\">13. tidy.js</a></li><li>\n<a  href=\"#12-tailkit\">12. Tail-Kit</a></li><li>\n<a  href=\"#11-tailwind-components\">11. Tailwind Components</a></li><li>\n<a  href=\"#10-pikaday\">10. Pikaday</a></li><li>\n<a  href=\"#9-html-boilerplates\">9. HTML Boilerplates</a></li><li>\n<a  href=\"#8-whirl\">8. Whirl</a></li><li>\n<a  href=\"#7-riju\">7. Riju</a></li><li>\n<a  href=\"#6-devui\">6. DevUI</a></li><li>\n<a  href=\"#5-pollen\">5. Pollen</a></li><li>\n<a  href=\"#4-alternight\">4. AlterNight</a></li><li>\n<a  href=\"#3-uisual\">3. UIsual</a></li><li>\n<a  href=\"#2-supabase-ui\">2. Supabase UI</a></li><li>\n<a  href=\"#1-css-layout-generator\">1. CSS Layout Generator</a></li><li>\n<a  href=\"#what-were-your-favorite-frontend-tools-of-2021\">What were your favorite front-end tools of 2021?</a></li></ul>\n\n</details>\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n<h3 id=\"60-open-props\">60. <a href=\"https://open-props.style/\" rel=\"noopener\">Open Props</a></h3>\n\n\n<p>Open Props provides a set of hand-crafted design tokens made up of CSS custom properties. I can see this sort of thing being much more common due to the use of this particular CSS feature. These allow you to drop in small collections of useful groups of custom properties, like animations.css, borders.css, fonts.css, zindex.css, etc, with more coming soon. Or you can just use the main Open Props file to grab everything at once.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://open-props.style/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"722\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275723-9262a6d7-206c-4147-94a6-1f8208b84086.png?resize=1024%2C722&#038;ssl=1\" alt=\"Screenshot of the Open Props homepage which outlines three things that make it a useful front-end tool, including design tokens, consistent components, and useful in any framework.\" class=\"wp-image-361050\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275723-9262a6d7-206c-4147-94a6-1f8208b84086.png?resize=1024%2C722&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275723-9262a6d7-206c-4147-94a6-1f8208b84086.png?resize=300%2C212&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275723-9262a6d7-206c-4147-94a6-1f8208b84086.png?resize=768%2C542&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275723-9262a6d7-206c-4147-94a6-1f8208b84086.png?resize=1000%2C705&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275723-9262a6d7-206c-4147-94a6-1f8208b84086.png?w=1219&amp;ssl=1 1219w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>This is definitely one front-end tool to keep an eye on and maybe even a good one to contribute to if you want to help build the library of tokens available.</p>\n\n\n<h3 id=\"59-nextui\">59. <a href=\"https://nextui.org/\" rel=\"noopener\">NextUI</a></h3>\n\n\n<p>A modern React library that uses Stitches, a popular CSS-in-JS solution, and includes light and dark UI components out-of-the-box along with a default color palette that might be good for quickly building landing pages or other content that&#8217;s not initially tied to any branding.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275839-aa891aab-ec09-4cc7-9ed5-fda6b639bda2.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361051\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275839-aa891aab-ec09-4cc7-9ed5-fda6b639bda2.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275839-aa891aab-ec09-4cc7-9ed5-fda6b639bda2.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275839-aa891aab-ec09-4cc7-9ed5-fda6b639bda2.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275839-aa891aab-ec09-4cc7-9ed5-fda6b639bda2.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275839-aa891aab-ec09-4cc7-9ed5-fda6b639bda2.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It&#8217;s currently listed as being in Alpha stage of development, so this is another one worth keeping tabs on in the coming year.</p>\n\n\n<h3 id=\"58-dopefolio\">58. <a href=\"https://github.com/rammcodes/Dopefolio\" rel=\"noopener\">Dopefolio</a></h3>\n\n\n<p>If you&#8217;re looking for an easy way to put together your own developer portfolio, Dopefolio is a quick solution that&#8217;s optimized for SEO and has strong Lighthouse scores out-of-the-box.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://github.com/rammcodes/Dopefolio\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275861-76311864-fd05-4692-b7af-802de5e8bd5d.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361052\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275861-76311864-fd05-4692-b7af-802de5e8bd5d.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275861-76311864-fd05-4692-b7af-802de5e8bd5d.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275861-76311864-fd05-4692-b7af-802de5e8bd5d.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275861-76311864-fd05-4692-b7af-802de5e8bd5d.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275861-76311864-fd05-4692-b7af-802de5e8bd5d.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p><a href=\"https://dopefolio-playground.netlify.app/\" rel=\"noopener\">The live demo</a> gives you an idea of what it looks like (responsive and all) and it includes a color picker component so you can live-test your own preferred primary color for the template.</p>\n\n\n<h3 id=\"57-vizzu\">57. <a href=\"https://vizzuhq.com/\" rel=\"noopener\">Vizzu</a></h3>\n\n\n<p>This is a unique one that made this year&#8217;s list of front-end tools. Vizzu an open-source JavaScript library for creating animated data stories and visualizations. Maybe this is popular due the apparent need for creating and embedding medical data nowadays.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://vizzuhq.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275910-c61968b6-1dbd-4baa-803e-aa1fa6313b7c.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361053\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275910-c61968b6-1dbd-4baa-803e-aa1fa6313b7c.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275910-c61968b6-1dbd-4baa-803e-aa1fa6313b7c.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275910-c61968b6-1dbd-4baa-803e-aa1fa6313b7c.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275910-c61968b6-1dbd-4baa-803e-aa1fa6313b7c.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275910-c61968b6-1dbd-4baa-803e-aa1fa6313b7c.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>This library allows you to easily build static data charts, animated charts, and data stories. You can see some <a href=\"https://lib.vizzuhq.com/0.3.0/#examples-1.1\" rel=\"noopener\">live examples of the animated charts</a> or <a href=\"https://lib.vizzuhq.com/0.3.0/#examples-1.2\" rel=\"noopener\">data stories</a>, which include a data story showing which guest character had the most lines throughout the run of the TV series <em>Friends</em>.</p>\n\n\n<h3 id=\"56-10015-tools\">56. <a href=\"https://10015.io/\" rel=\"noopener\">10015 Tools</a></h3>\n\n\n<p>I seem to find a handful of these types of front-end tools every year. 10015 Tools is a collection of front-end tools rather than one single tool. It includes text tools, image tools, CSS tools, coding tools (e.g. minifiers), color tools, social media tools, and a few others under a miscellaneous category.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://10015.io/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275957-19c19ec5-8cd7-4a1a-8e33-4834d02dbede.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361055\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275957-19c19ec5-8cd7-4a1a-8e33-4834d02dbede.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275957-19c19ec5-8cd7-4a1a-8e33-4834d02dbede.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275957-19c19ec5-8cd7-4a1a-8e33-4834d02dbede.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275957-19c19ec5-8cd7-4a1a-8e33-4834d02dbede.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275957-19c19ec5-8cd7-4a1a-8e33-4834d02dbede.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>This is definitely one of the more comprehensive all-in-one solutions I&#8217;ve seen, so I’m sure you’ll find a few useful front-end tools here you can come back to.</p>\n\n\n<h3 id=\"55-snoweb\">55. <a href=\"https://www.snoweb-svg.com/\" rel=\"noopener\">Snoweb</a></h3>\n\n\n<p>Icon sets are always popular and I come across at least a dozen new ones every year. This one includes optimized SVG icons, many of which have a built-in animated effect when you hover over the icon (like the <a href=\"https://www.snoweb-svg.com/en/svg/heroicons/envelope/basic/\" rel=\"noopener\">open/close envelope icon</a>).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.snoweb-svg.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275995-d746316e-e6e4-49cd-b31d-9dddda70f3ca.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361056\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275995-d746316e-e6e4-49cd-b31d-9dddda70f3ca.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275995-d746316e-e6e4-49cd-b31d-9dddda70f3ca.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275995-d746316e-e6e4-49cd-b31d-9dddda70f3ca.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275995-d746316e-e6e4-49cd-b31d-9dddda70f3ca.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275995-d746316e-e6e4-49cd-b31d-9dddda70f3ca.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Like many icon websites, you can search by keyword or filter by category, one of which is a &#8220;brand&#8221; category with icons for Twitter, Facebook, Vimeo, YouTube, Snapchat, etc.</p>\n\n\n<h3 id=\"54-tails\">54. <a href=\"https://devdojo.com/tails\" rel=\"noopener\">Tails</a></h3>\n\n\n<p>Here&#8217;s the first Tailwind-based tool to make the list; something that&#8217;s been a trend the past few years as <a href=\"https://css-tricks.com/2021-roundup-of-web-research/#aa-state-of-css-2021\">Tailwind continues to grow in popularity</a>. This front-end tool a drag-and-drop page builder for projects using Tailwind CSS.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://devdojo.com/tails\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276041-1fba78db-7d2b-4562-bc44-a28266e9e444.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361057\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276041-1fba78db-7d2b-4562-bc44-a28266e9e444.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276041-1fba78db-7d2b-4562-bc44-a28266e9e444.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276041-1fba78db-7d2b-4562-bc44-a28266e9e444.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276041-1fba78db-7d2b-4562-bc44-a28266e9e444.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276041-1fba78db-7d2b-4562-bc44-a28266e9e444.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It includes two free &#8220;blocks&#8221; for each of the 15 categories, so there&#8217;s a decent amount of free stuff here and you can unlock the rest for a monthly fee.</p>\n\n\n<h3 id=\"53-maplibre\">53. <a href=\"https://maplibre.org/\" rel=\"noopener\">MapLibre</a></h3>\n\n\n<p>This open-source mapping library launched in March and has grown in popularity throughout the year. It includes a JavaScript library as well as an SDK for displaying maps inside of iOS and Android apps.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://maplibre.org/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276087-2f8cc59e-ca9d-46b9-b12b-ac3bae80c72c.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361058\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276087-2f8cc59e-ca9d-46b9-b12b-ac3bae80c72c.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276087-2f8cc59e-ca9d-46b9-b12b-ac3bae80c72c.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276087-2f8cc59e-ca9d-46b9-b12b-ac3bae80c72c.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276087-2f8cc59e-ca9d-46b9-b12b-ac3bae80c72c.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276087-2f8cc59e-ca9d-46b9-b12b-ac3bae80c72c.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The docs include <a href=\"https://maplibre.org/maplibre-gl-js-docs/example/\" rel=\"noopener\">a bunch of examples that use JavaScript</a>, if you want to see what&#8217;s possible with the web-based front-end tools.</p>\n\n\n<h3 id=\"52-svg-repo\">52. <a href=\"https://www.svgrepo.com/\" rel=\"noopener\">SVG Repo</a></h3>\n\n\n<p>SVG Repo makes the list based on sheer numbers alone. It&#8217;s a repository of more than 300,000 free, optimized, SVG-based graphics and icons most of which are licensed for commercial use.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.svgrepo.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276146-6cdfbf25-a3ca-42e1-8499-35bf93e7fd46.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361059\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276146-6cdfbf25-a3ca-42e1-8499-35bf93e7fd46.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276146-6cdfbf25-a3ca-42e1-8499-35bf93e7fd46.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276146-6cdfbf25-a3ca-42e1-8499-35bf93e7fd46.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276146-6cdfbf25-a3ca-42e1-8499-35bf93e7fd46.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276146-6cdfbf25-a3ca-42e1-8499-35bf93e7fd46.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Each icon you select tells you what type of license it falls under. You can search by keyword and &#8220;save&#8221; icons to your favorites for later use (no login required).</p>\n\n\n<h3 id=\"51-animated-backgrounds\">51. <a href=\"https://animatedbackgrounds.me/\" rel=\"noopener\">Animated Backgrounds</a></h3>\n\n\n<p>This one made the top 60 this year but probably isn&#8217;t the most practical front-end tool of the bunch. Like I said at the outset, some stuff gets clicked on just out of sheer curiosity. It’s a gallery of animated backgrounds, sourced from various CodePen demos.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://animatedbackgrounds.me/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276182-b88342c8-fc8c-4812-bd54-5107b3fc4f6f.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361060\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276182-b88342c8-fc8c-4812-bd54-5107b3fc4f6f.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276182-b88342c8-fc8c-4812-bd54-5107b3fc4f6f.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276182-b88342c8-fc8c-4812-bd54-5107b3fc4f6f.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276182-b88342c8-fc8c-4812-bd54-5107b3fc4f6f.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276182-b88342c8-fc8c-4812-bd54-5107b3fc4f6f.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The gallery is useful in that it displays the backgrounds as pre-recorded videos so you don&#8217;t have to worry about all the demos loading and crashing your browser tab. Use these sparingly, if ever, as they often use heavy amounts of JavaScript and CSS.</p>\n\n\n<h3 id=\"50-picocss\">50. <a href=\"https://picocss.com/\" rel=\"noopener\">Pico.css</a></h3>\n\n\n<p>This is a different type of CSS framework compared to what&#8217;s popular nowadays. It’s kind of like an anti-Tailwind tool and more of a starter CSS file (like a <a href=\"https://css-tricks.com/reboot-resets-reasoning/\">reset</a>) than a full-fledged framework.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://picocss.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276209-087fde90-863b-49d8-aee5-1546e0ab4778.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361061\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276209-087fde90-863b-49d8-aee5-1546e0ab4778.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276209-087fde90-863b-49d8-aee5-1546e0ab4778.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276209-087fde90-863b-49d8-aee5-1546e0ab4778.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276209-087fde90-863b-49d8-aee5-1546e0ab4778.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276209-087fde90-863b-49d8-aee5-1546e0ab4778.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Pico.css provides elegant default styles on all native HTML elements (which you can <a href=\"https://picocss.com/examples/preview/\" rel=\"noopener\">preview here</a>) without the need to add swaths of classes to your markup — and the whole thing is less than 10kb minified and gzipped.</p>\n\n\n<h3 id=\"49-coding-fonts\">49. <a href=\"https://coding-fonts.css-tricks.com\">Coding Fonts</a></h3>\n\n\n<p>Coding fonts seem to be an exciting new trend of late, and CSS-Tricks has taken advantage of that with this little interactive info app.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://coding-fonts.css-tricks.com\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276241-3284c7c1-29e9-4b27-9351-c82e8ccac115.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361062\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276241-3284c7c1-29e9-4b27-9351-c82e8ccac115.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276241-3284c7c1-29e9-4b27-9351-c82e8ccac115.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276241-3284c7c1-29e9-4b27-9351-c82e8ccac115.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276241-3284c7c1-29e9-4b27-9351-c82e8ccac115.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276241-3284c7c1-29e9-4b27-9351-c82e8ccac115.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Select a font on the left to display example code, typeface info (ligatures, italics, etc.), cost (most are free), along with options to display example code for HTML, CSS, or JavaScript.</p>\n\n\n<h3 id=\"48-uineumorphism\">48. <a href=\"https://akaspanion.github.io/ui-neumorphism/\" rel=\"noopener\">UI-Neumorphism</a></h3>\n\n\n<p>This React library is based on the old skeumorphism trend that apparently went out of style a number of years ago. Is this trend making a comeback? Probably not. In fact, this React library is about two years old even though I shared it for the first time this past year.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://akaspanion.github.io/ui-neumorphism/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"742\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276267-f3a1721d-c579-417e-a11a-0cb1eae49b8f.png?resize=1024%2C742&#038;ssl=1\" alt=\"\" class=\"wp-image-361063\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276267-f3a1721d-c579-417e-a11a-0cb1eae49b8f.png?resize=1024%2C742&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276267-f3a1721d-c579-417e-a11a-0cb1eae49b8f.png?resize=300%2C217&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276267-f3a1721d-c579-417e-a11a-0cb1eae49b8f.png?resize=768%2C556&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276267-f3a1721d-c579-417e-a11a-0cb1eae49b8f.png?resize=1000%2C725&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276267-f3a1721d-c579-417e-a11a-0cb1eae49b8f.png?w=1187&amp;ssl=1 1187w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The library includes a slew of different components that all implement <a href=\"https://css-tricks.com/neumorphism-and-css/\">“neu</a><a href=\"https://css-tricks.com/neumorphism-and-css/\">morphism&#8221; look</a>. Interesting to look at, but might not fit many projects.</p>\n\n\n<h3 id=\"47-beautiful-css-buttons\">47. <a href=\"https://getcssscan.com/css-buttons-examples\" rel=\"noopener\">Beautiful CSS Buttons</a></h3>\n\n\n<p>Just about every app or website needs buttons, so a collection like this always seems to do well. Many of these are different from what you probably have seen elsewhere.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://getcssscan.com/css-buttons-examples\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"739\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276347-2601214b-9863-4730-83b2-0fecdd184f6d.png?resize=1024%2C739&#038;ssl=1\" alt=\"\" class=\"wp-image-361064\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276347-2601214b-9863-4730-83b2-0fecdd184f6d.png?resize=1024%2C739&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276347-2601214b-9863-4730-83b2-0fecdd184f6d.png?resize=300%2C216&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276347-2601214b-9863-4730-83b2-0fecdd184f6d.png?resize=768%2C554&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276347-2601214b-9863-4730-83b2-0fecdd184f6d.png?resize=1000%2C721&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276347-2601214b-9863-4730-83b2-0fecdd184f6d.png?w=1192&amp;ssl=1 1192w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>A lot of the buttons include interesting hover effects and you can easily copy and paste the HTML and CSS for any single button directly on the page.</p>\n\n\n<h3 id=\"46-shaper\">46. <a href=\"https://hihayk.github.io/shaper/\" rel=\"noopener\">Shaper</a></h3>\n\n\n<p>This interactive tool lets you fiddle with various UI settings live on the page to build different page elements. Once you&#8217;ve tweaked things as you like, you can grab the code, which uses CSS custom properties.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://hihayk.github.io/shaper/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"658\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276369-8ff7cde1-88b7-4043-8ec8-6efb2acd2e23.png?resize=1024%2C658&#038;ssl=1\" alt=\"\" class=\"wp-image-361065\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276369-8ff7cde1-88b7-4043-8ec8-6efb2acd2e23.png?resize=1024%2C658&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276369-8ff7cde1-88b7-4043-8ec8-6efb2acd2e23.png?resize=300%2C193&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276369-8ff7cde1-88b7-4043-8ec8-6efb2acd2e23.png?resize=768%2C494&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276369-8ff7cde1-88b7-4043-8ec8-6efb2acd2e23.png?resize=1000%2C643&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276369-8ff7cde1-88b7-4043-8ec8-6efb2acd2e23.png?w=1338&amp;ssl=1 1338w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>You can switch between demo view and &#8220;specs&#8221; view (i.e. the code along with other useful info). This tool has a particular focus on typography along with the rest of the UI styles, which is an important part of getting a layout looking right.</p>\n\n\n<h3 id=\"45-prestige\">45. <a href=\"https://prestigemad.com/\" rel=\"noopener\">Prestige</a></h3>\n\n\n<p>This is a text-based HTTP client in the browser — like <a href=\"https://www.postman.com\" rel=\"noopener\">Postman</a> but without an interface. It allows you to define requests in plain text, which you can optionally save as a Gist. It includes isolated cookie management, and has both dark and light modes.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://prestigemad.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"721\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276408-061870ca-5ff7-4111-bb1a-ea3e69ac3c54-1024x721.png?resize=1024%2C721&#038;ssl=1\" alt=\"\" class=\"wp-image-361066\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276408-061870ca-5ff7-4111-bb1a-ea3e69ac3c54.png?resize=1024%2C721&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276408-061870ca-5ff7-4111-bb1a-ea3e69ac3c54.png?resize=300%2C211&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276408-061870ca-5ff7-4111-bb1a-ea3e69ac3c54.png?resize=768%2C540&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276408-061870ca-5ff7-4111-bb1a-ea3e69ac3c54.png?resize=1000%2C704&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276408-061870ca-5ff7-4111-bb1a-ea3e69ac3c54.png?w=1222&amp;ssl=1 1222w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>As the author explains, &#8220;I built Prestige because I needed an app like this when working […] and playing with external APIs.&#8221;</p>\n\n\n<h3 id=\"44-htmlcafe\">44. <a href=\"https://html.cafe/\" rel=\"noopener\">HTML.cafe</a></h3>\n\n\n<p>This is probably the simplest tool in the entire list. HTML.cafe is more or less a poor-man&#8217;s <a href=\"https://codepen.io\" rel=\"noopener\">CodePen</a>, for lack of a better term. I wouldn&#8217;t think people would be interested in this sort of thing, since there are already powerful tools that already do what it does. Nonetheless, it’s a really simple HTML editor with live preview.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://html.cafe/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276439-413edd42-af51-4878-a743-7a8a63223548.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361067\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276439-413edd42-af51-4878-a743-7a8a63223548.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276439-413edd42-af51-4878-a743-7a8a63223548.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276439-413edd42-af51-4878-a743-7a8a63223548.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276439-413edd42-af51-4878-a743-7a8a63223548.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276439-413edd42-af51-4878-a743-7a8a63223548.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>There are no separate CSS or JavaScript windows like there are CodePen, but you can easily include those in <code>&lt;style&gt;</code> or <code>&lt;script&gt;</code> elements if you wish. I think the best use of this tool might be for teachers helping students who are completely unfamiliar with HTML, as this gets all the complexities out of the way.</p>\n\n\n<h3 id=\"43-chartscss\">43. <a href=\"https://chartscss.org/\" rel=\"noopener\">Charts.css</a></h3>\n\n\n<p>This front-end tool is sort of like a cross between Tailwind CSS and Chart.js. In short, Charts.css is a CSS framework that lets you use utility classes to build charts using HTML and CSS.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://chartscss.org/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276470-4364442e-6f00-4ea3-ac48-470b5d22b6b8.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361068\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276470-4364442e-6f00-4ea3-ac48-470b5d22b6b8.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276470-4364442e-6f00-4ea3-ac48-470b5d22b6b8.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276470-4364442e-6f00-4ea3-ac48-470b5d22b6b8.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276470-4364442e-6f00-4ea3-ac48-470b5d22b6b8.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276470-4364442e-6f00-4ea3-ac48-470b5d22b6b8.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>You can create bar charts, line charts, multi-dataset charts, percentage columns, and 3D bar charts. And best of all, the charts are accessible, responsive, and easy to customize to your branding needs.</p>\n\n\n<h3 id=\"42-buttons-generator\">42. <a href=\"https://markodenic.com/tools/buttons-generator/\" rel=\"noopener\">Buttons Generator</a></h3>\n\n\n<p>“Buttons Generator&#8221; is probably a bit of a misnomer, since the page doesn&#8217;t exactly let you &#8220;generate&#8221; buttons. Like the previous buttons resource, this is a gallery of buttons built with HTML and CSS.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://markodenic.com/tools/buttons-generator/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276495-8bbd73df-a0e9-4ce3-b558-971601e8e5d8.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361069\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276495-8bbd73df-a0e9-4ce3-b558-971601e8e5d8.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276495-8bbd73df-a0e9-4ce3-b558-971601e8e5d8.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276495-8bbd73df-a0e9-4ce3-b558-971601e8e5d8.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276495-8bbd73df-a0e9-4ce3-b558-971601e8e5d8.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276495-8bbd73df-a0e9-4ce3-b558-971601e8e5d8.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>They&#8217;re divided up by category, include some neat hover or click effects, and you can click any button to copy the code to your clipboard.</p>\n\n\n<h3 id=\"41-doodad-pattern-generator\">41. <a href=\"https://doodad.dev/pattern-generator/\" rel=\"noopener\">Doodad Pattern Generator</a></h3>\n\n\n<p>This interactive tool allows you to build your own patterned backgrounds that you can export in a variety of formats. You can use the &#8220;shuffle&#8221; button to generate a random pattern, or select from various category styles. You can also edit colors, filters, and various transforms.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://doodad.dev/pattern-generator/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276520-991a52ed-bd33-4b7c-90c7-ceda192b6ca2.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361070\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276520-991a52ed-bd33-4b7c-90c7-ceda192b6ca2.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276520-991a52ed-bd33-4b7c-90c7-ceda192b6ca2.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276520-991a52ed-bd33-4b7c-90c7-ceda192b6ca2.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276520-991a52ed-bd33-4b7c-90c7-ceda192b6ca2.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276520-991a52ed-bd33-4b7c-90c7-ceda192b6ca2.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The export dialog lets you save patterns and load previously-saved ones via Local Storage. Export your patterns as JPEG, PNG, inline SVG, SVG file, or CSS background.</p>\n\n\n<h3 id=\"40-kaboom\">40. <a href=\"https://kaboomjs.com/\" rel=\"noopener\">Kaboom</a></h3>\n\n\n<p>Every year I come across at least one or two new JavaScript game libraries, and this is the one that made this year&#8217;s list. It looks to have a fairly elegant and easy-to-use API and includes a healthy set of components, events, and other built-in functions.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://kaboomjs.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276549-20d08c6b-b2d5-46a3-be73-397d89ed0f63.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361071\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276549-20d08c6b-b2d5-46a3-be73-397d89ed0f63.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276549-20d08c6b-b2d5-46a3-be73-397d89ed0f63.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276549-20d08c6b-b2d5-46a3-be73-397d89ed0f63.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276549-20d08c6b-b2d5-46a3-be73-397d89ed0f63.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276549-20d08c6b-b2d5-46a3-be73-397d89ed0f63.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>There&#8217;s a handy <a href=\"https://kaboomjs.com/play?demo=add\" rel=\"noopener\">playground</a> to get your feet wet with using it and an <a href=\"https://kaboomjs.com/doc/intro\" rel=\"noopener\">introductory tutorial</a> to get started.</p>\n\n\n<h3 id=\"39-skuawk\">39. <a href=\"https://skuawk.com/\" rel=\"noopener\">Skuawk</a></h3>\n\n\n<p>If you want an alternative to Unsplash, which is likely one of your go-to sources for free stock images, this collection of beautiful public domain images might be a good option with some gorgeous photos.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://skuawk.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276585-f236224e-5db4-48dc-b78e-6f4184bcfb9e.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361072\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276585-f236224e-5db4-48dc-b78e-6f4184bcfb9e.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276585-f236224e-5db4-48dc-b78e-6f4184bcfb9e.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276585-f236224e-5db4-48dc-b78e-6f4184bcfb9e.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276585-f236224e-5db4-48dc-b78e-6f4184bcfb9e.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276585-f236224e-5db4-48dc-b78e-6f4184bcfb9e.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>There are 16 categories of images from various photographers that have all allowed their images to be used under a CC0 license (i.e. do whatever you want).</p>\n\n\n<h3 id=\"38-glassmorphism-css-generator\">38. <a href=\"https://ui.glass/generator/\" rel=\"noopener\">Glassmorphism CSS Generator</a></h3>\n\n\n<p>This is an online generator that lets you build a <a href=\"https://css-tricks.com/icon-glassmorphism-effect-in-css/\">&#8220;glassmorphism&#8221; effect</a> on a page element — kind of like frosted glass. This tool is apparently supposed to be part of a larger UI library that will incorporate this sort of effect on a number of different UI components.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://ui.glass/generator/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276611-a3ea2111-8de8-48ca-ae1b-882a1ea988ad.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361073\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276611-a3ea2111-8de8-48ca-ae1b-882a1ea988ad.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276611-a3ea2111-8de8-48ca-ae1b-882a1ea988ad.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276611-a3ea2111-8de8-48ca-ae1b-882a1ea988ad.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276611-a3ea2111-8de8-48ca-ae1b-882a1ea988ad.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276611-a3ea2111-8de8-48ca-ae1b-882a1ea988ad.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Whatever the case, I like this effect more than the &#8220;neumorphism&#8221; one and apparently my audience agrees.</p>\n\n\n<h3 id=\"37-kalia\">37. <a href=\"https://marketplace.visualstudio.com/items?itemName=krasimir.kalia\" rel=\"noopener\">Kalia</a></h3>\n\n\n<p>This is one of three VS Code tools that made the list. It’s an attractive color scheme you can use for your VS Code setup.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://marketplace.visualstudio.com/items?itemName=krasimir.kalia\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276624-30b216ca-2fe6-46f4-9b52-30cd4af5e71d.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361074\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276624-30b216ca-2fe6-46f4-9b52-30cd4af5e71d.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276624-30b216ca-2fe6-46f4-9b52-30cd4af5e71d.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276624-30b216ca-2fe6-46f4-9b52-30cd4af5e71d.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276624-30b216ca-2fe6-46f4-9b52-30cd4af5e71d.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276624-30b216ca-2fe6-46f4-9b52-30cd4af5e71d.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The extension lists only about 800 installs so far, which is surprising, but it has a nice pastel color look that I think many will enjoy.</p>\n\n\n<h3 id=\"36-adminjs\">36. <a href=\"https://adminjs.co/\" rel=\"noopener\">AdminJS</a></h3>\n\n\n<p>If you&#8217;re a Node developer, this is an open-source admin panel that can be added to a Node.js app. It will generate a UI for you, based on data you&#8217;ve added from almost any database, allowing you and your team to manage your app&#8217;s content.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://adminjs.co/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276662-4dec1fb2-9e2e-4c85-8e06-c7738596b530.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361075\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276662-4dec1fb2-9e2e-4c85-8e06-c7738596b530.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276662-4dec1fb2-9e2e-4c85-8e06-c7738596b530.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276662-4dec1fb2-9e2e-4c85-8e06-c7738596b530.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276662-4dec1fb2-9e2e-4c85-8e06-c7738596b530.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276662-4dec1fb2-9e2e-4c85-8e06-c7738596b530.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>You can try it out <a href=\"https://admin-bro-example-app-staging.herokuapp.com/admin/login\" rel=\"noopener\">using this example app</a>, which is based on MongoDB and Postgres.</p>\n\n\n<h3 id=\"35-pancake\">35. <a href=\"https://github.com/Rabios/Pancake\" rel=\"noopener\">Pancake</a></h3>\n\n\n<p>Here&#8217;s another game engine to build cross-platform HTML5-based 2D games. This one got a lot of traction when I first shared it. While it made the list,it seems to require Python during the build step after you write the game.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://github.com/Rabios/Pancake\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277051-49574877-c098-4163-b20c-edff9b5ea469-1024x764.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361077\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277051-49574877-c098-4163-b20c-edff9b5ea469.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277051-49574877-c098-4163-b20c-edff9b5ea469.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277051-49574877-c098-4163-b20c-edff9b5ea469.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277051-49574877-c098-4163-b20c-edff9b5ea469.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277051-49574877-c098-4163-b20c-edff9b5ea469.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The basic API uses plain JavaScript and you can view lots of neat little <a href=\"https://github.com/Rabios/Pancake/tree/master/examples\" rel=\"noopener\">examples here</a>.</p>\n\n\n<h3 id=\"34-mosaic-lite\">34. <a href=\"https://github.com/cruip/tailwind-dashboard-template\" rel=\"noopener\">Mosaic Lite</a></h3>\n\n\n<p>I find lots of dashboard templates built with different front-end technologies. This one is made with Tailwind and React and includes optional chart components built with Chart.js.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://github.com/cruip/tailwind-dashboard-template\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277080-35a45459-a175-4cfb-a9bd-63409c0d0336.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361078\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277080-35a45459-a175-4cfb-a9bd-63409c0d0336.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277080-35a45459-a175-4cfb-a9bd-63409c0d0336.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277080-35a45459-a175-4cfb-a9bd-63409c0d0336.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277080-35a45459-a175-4cfb-a9bd-63409c0d0336.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277080-35a45459-a175-4cfb-a9bd-63409c0d0336.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Like other similar templates, this can be used for SaaS products, admin dashboards, and more. You can view a <a href=\"https://mosaic.cruip.com/\" rel=\"noopener\">live demo</a>.</p>\n\n\n<h3 id=\"33-iconduck\">33. <a href=\"https://iconduck.com/\" rel=\"noopener\">Iconduck</a></h3>\n\n\n<p>Here&#8217;s another great source for open-source icons, this one offering well over 100,000 icons that are searchable by keyword and are all available for use in commercial projects.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://iconduck.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277110-473d26fb-bdf3-4cae-b370-87872f89f05e.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361079\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277110-473d26fb-bdf3-4cae-b370-87872f89f05e.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277110-473d26fb-bdf3-4cae-b370-87872f89f05e.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277110-473d26fb-bdf3-4cae-b370-87872f89f05e.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277110-473d26fb-bdf3-4cae-b370-87872f89f05e.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277110-473d26fb-bdf3-4cae-b370-87872f89f05e.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The site includes ability to like and save icons and icon collections for later use (requires cookies, but no login).</p>\n\n\n<h3 id=\"32-luxa-css\">32. <a href=\"https://luxacss.com/\" rel=\"noopener\">Luxa CSS</a></h3>\n\n\n<p>This is a CSS library that was actually released in mid-to late 2020, but I shared it for the first time in 2021. It&#8217;s described as a &#8220;minimalist&#8221; CSS framework.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://luxacss.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277432-87db14f7-1cfe-4e7c-bcf1-d35c48063edd.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361080\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277432-87db14f7-1cfe-4e7c-bcf1-d35c48063edd.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277432-87db14f7-1cfe-4e7c-bcf1-d35c48063edd.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277432-87db14f7-1cfe-4e7c-bcf1-d35c48063edd.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277432-87db14f7-1cfe-4e7c-bcf1-d35c48063edd.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277432-87db14f7-1cfe-4e7c-bcf1-d35c48063edd.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Luxa CSS includes some base styles, along with various components, helpers, and layout styles, which you can view <a href=\"https://luxacss.com/docs.html\" rel=\"noopener\">in the docs</a> or by checking out <a href=\"https://codepen.io/collection/XEkzjB\" rel=\"noopener\">this CodePen collection</a>.</p>\n\n\n<h3 id=\"31-glitter\">31. <a href=\"https://wh0.github.io/glitter/\" rel=\"noopener\">Glitter</a></h3>\n\n\n<p>Glitter was definitely one of the strangest — yet coolest — front-end tools I came across over the past year and it seems to have drawn a lot of interest even though it&#8217;s as simple as any tool gets.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://wh0.github.io/glitter/\" rel=\"noopener\"><img loading=\"lazy\" width=\"942\" height=\"860\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277466-af9fdeba-9f22-4612-beed-8f63a95a4e61.png?resize=942%2C860&#038;ssl=1\" alt=\"\" class=\"wp-image-361081\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277466-af9fdeba-9f22-4612-beed-8f63a95a4e61.png?w=942&amp;ssl=1 942w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277466-af9fdeba-9f22-4612-beed-8f63a95a4e61.png?resize=300%2C274&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277466-af9fdeba-9f22-4612-beed-8f63a95a4e61.png?resize=768%2C701&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It&#8217;s a generator that produces text in a glitter-like style, which you can save as SVG. Definitely not for 99% of your projects, but a pretty cool text effect.</p>\n\n\n<h3 id=\"30-components-ai\">30. <a href=\"https://components.ai/theme/\" rel=\"noopener\">Components AI</a></h3>\n\n\n<p>When I originally shared this one, I was sharing the theme builder alone, which is what got it on this list. But it&#8217;s worth sharing the entire set of 15+ tools.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://components.ai/theme/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277494-68526fed-5f03-420a-ae61-04f10ae9a65b.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361082\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277494-68526fed-5f03-420a-ae61-04f10ae9a65b.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277494-68526fed-5f03-420a-ae61-04f10ae9a65b.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277494-68526fed-5f03-420a-ae61-04f10ae9a65b.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277494-68526fed-5f03-420a-ae61-04f10ae9a65b.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277494-68526fed-5f03-420a-ae61-04f10ae9a65b.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>In addition to the theme builder, there&#8217;s a syntax highlighter builder, gradient and shadow tools, SVG pattern generators, animated backgrounds, and lots more.</p>\n\n\n<h3 id=\"29-unicode-arrows\">29. <a href=\"https://unicodearrows.com/\" rel=\"noopener\">Unicode Arrows</a></h3>\n\n\n<p>This is pretty straightforward. Unicode Arrows a one-stop location to copy and paste — you guessed it — Unicode arrows along with each arrow&#8217;s associated hex code.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://unicodearrows.com/\" rel=\"noopener\"><img src=\"https://i0.wp.com/user-images.githubusercontent.com/558709/148277528-263895a7-32b3-4b25-a673-51c404a720fe.png?ssl=1\" alt=\"Unicode Arrows\" data-recalc-dims=\"1\"/></a></figure>\n\n\n\n<p>Not much else to say about this one except that the site lets you buy Unicode arrow jewellery. Not that a bunch of coding nerds would be interested in that, no way.</p>\n\n\n<h3 id=\"28-type-scale-clamp-generator\">28. <a href=\"https://maximeroudier.com/typeScaleClampGenerator/\" rel=\"noopener\">Type Scale Clamp Generator</a></h3>\n\n\n<p>This is not the first tool to attempt to generate a type scale for you, but it&#8217;s a relatively new one that incorporates CSS&#8217;s <a href=\"https://css-tricks.com/complete-guide-to-css-functions/#aa-calc\"><code>clamp()</code> function</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://maximeroudier.com/typeScaleClampGenerator/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277556-cadfae11-7cb1-4597-a657-edf6277a2f1f-1024x755.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361086\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277556-cadfae11-7cb1-4597-a657-edf6277a2f1f.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277556-cadfae11-7cb1-4597-a657-edf6277a2f1f.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277556-cadfae11-7cb1-4597-a657-edf6277a2f1f.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277556-cadfae11-7cb1-4597-a657-edf6277a2f1f.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277556-cadfae11-7cb1-4597-a657-edf6277a2f1f.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The front-end tool allows you to select a range, font, preview text, and you can even test the responsiveness (though I don&#8217;t see how useful that latter feature is, considering this is just text).</p>\n\n\n<h3 id=\"27-animxyz\">27. <a href=\"https://animxyz.com/\" rel=\"noopener\">AnimXYZ</a></h3>\n\n\n<p>This one is described as &#8220;the first composable CSS animation toolkit&#8221; with support for Vue and React. What that means exactly is that you don&#8217;t have to write any keyframes. It seems to be kind of like Tailwind for animations, since you&#8217;re only using HTML classes.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://animxyz.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277626-2ce1f67c-a7e8-4e82-8646-3aff702abf05.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361087\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277626-2ce1f67c-a7e8-4e82-8646-3aff702abf05.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277626-2ce1f67c-a7e8-4e82-8646-3aff702abf05.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277626-2ce1f67c-a7e8-4e82-8646-3aff702abf05.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277626-2ce1f67c-a7e8-4e82-8646-3aff702abf05.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277626-2ce1f67c-a7e8-4e82-8646-3aff702abf05.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>In addition to adding classes, the values are built entirely using CSS variables. That means you can customize the values as you wish by modifying the variables themselves.</p>\n\n\n<h3 id=\"26-frontend-toolkit\">26. <a href=\"https://www.fetoolkit.io/\" rel=\"noopener\">Frontend Toolkit</a></h3>\n\n\n<p>Here&#8217;s another all-in-one tools solution that includes more than 20 tools for doing various coding and image-related tasks.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.fetoolkit.io/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277650-36d37117-7603-4280-ad85-36f9d8c32be6.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361088\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277650-36d37117-7603-4280-ad85-36f9d8c32be6.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277650-36d37117-7603-4280-ad85-36f9d8c32be6.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277650-36d37117-7603-4280-ad85-36f9d8c32be6.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277650-36d37117-7603-4280-ad85-36f9d8c32be6.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277650-36d37117-7603-4280-ad85-36f9d8c32be6.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It includes tools for CSS, JSON, favicons, SVG, image compression, npm, regex, and more.</p>\n\n\n<h3 id=\"25-colorpalettesearth\">25. <a href=\"https://colorpalettes.earth/\" rel=\"noopener\">colorpalettes.earth</a></h3>\n\n\n<p>Here&#8217;s one that&#8217;s unique in the list and may inspire some cool designs. This tool displays color palettes sourced from images of nature (taken from Unsplash) that are included on the site, with new palettes added regularly.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://colorpalettes.earth/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277680-074c9789-f6ac-4cb6-b26e-c413102211d9.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361089\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277680-074c9789-f6ac-4cb6-b26e-c413102211d9.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277680-074c9789-f6ac-4cb6-b26e-c413102211d9.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277680-074c9789-f6ac-4cb6-b26e-c413102211d9.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277680-074c9789-f6ac-4cb6-b26e-c413102211d9.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277680-074c9789-f6ac-4cb6-b26e-c413102211d9.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Click any image and you&#8217;ll get a modal with access to the hex value for each of the colors that make up the image-derived palette.</p>\n\n\n<h3 id=\"24-uncut\">24. <a href=\"https://uncut.wtf/\" rel=\"noopener\">Uncut</a></h3>\n\n\n<p>Adding to the diversity of this list, here&#8217;s a typeface catalogue that currently features 90 typefaces with a focus on contemporary, or modern, type.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://uncut.wtf/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277704-827d4380-d3b5-4603-b3c3-c66afb4dae45.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361090\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277704-827d4380-d3b5-4603-b3c3-c66afb4dae45.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277704-827d4380-d3b5-4603-b3c3-c66afb4dae45.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277704-827d4380-d3b5-4603-b3c3-c66afb4dae45.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277704-827d4380-d3b5-4603-b3c3-c66afb4dae45.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277704-827d4380-d3b5-4603-b3c3-c66afb4dae45.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>All fonts included are open-source, so you&#8217;re free to use them in personal and commercial projects.</p>\n\n\n<h3 id=\"23-lowdefy\">23. <a href=\"https://lowdefy.com/\" rel=\"noopener\">Lowdefy</a></h3>\n\n\n<p>Building internal tools seems to be a hot thing nowadays and this is one solution you might want to look into that lets you build your tools by writing YAML.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://lowdefy.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277728-e783b47a-02b2-4a7d-9b85-25cd845f53e6.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361091\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277728-e783b47a-02b2-4a7d-9b85-25cd845f53e6.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277728-e783b47a-02b2-4a7d-9b85-25cd845f53e6.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277728-e783b47a-02b2-4a7d-9b85-25cd845f53e6.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277728-e783b47a-02b2-4a7d-9b85-25cd845f53e6.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277728-e783b47a-02b2-4a7d-9b85-25cd845f53e6.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It&#8217;s described as an &#8220;open-source low-code framework to build web apps, admin panels, BI dashboards, workflows, and CRUD apps with ease.”</p>\n\n\n<h3 id=\"22-javascript-booster\">22. <a href=\"https://marketplace.visualstudio.com/items?itemName=sburg.vscode-javascript-booster\" rel=\"noopener\">JavaScript Booster</a></h3>\n\n\n<p>This is a VS Code extension that aims to help you, as the it says on the tin, <em>boost</em> your JavaScript, TypeScript, and React coding productivity. The extension adds a light bulb icon at certain points in your code, indicating that you can instantly trigger predefined code refactorings.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://marketplace.visualstudio.com/items?itemName=sburg.vscode-javascript-booster\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277756-411b4a3d-16f1-411f-8be6-078e0849e917.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361092\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277756-411b4a3d-16f1-411f-8be6-078e0849e917.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277756-411b4a3d-16f1-411f-8be6-078e0849e917.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277756-411b4a3d-16f1-411f-8be6-078e0849e917.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277756-411b4a3d-16f1-411f-8be6-078e0849e917.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277756-411b4a3d-16f1-411f-8be6-078e0849e917.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Some examples include converting a regular function to an arrow function, flip an if-else construct, along with some React-specific refactorings.</p>\n\n\n<h3 id=\"21-layout-patterns\">21. <a href=\"https://web.dev/patterns/layout/\" rel=\"noopener\">Layout Patterns</a></h3>\n\n\n<p>This is one of the most recent additions to Google Developers&#8217; web.dev resource that I&#8217;m assuming will continue to grow in the coming year.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://web.dev/patterns/layout/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277947-22a12233-a5ab-4f1a-9a5a-e27636a948e0-1024x755.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361093\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277947-22a12233-a5ab-4f1a-9a5a-e27636a948e0.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277947-22a12233-a5ab-4f1a-9a5a-e27636a948e0.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277947-22a12233-a5ab-4f1a-9a5a-e27636a948e0.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277947-22a12233-a5ab-4f1a-9a5a-e27636a948e0.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277947-22a12233-a5ab-4f1a-9a5a-e27636a948e0.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It includes a number of UI patterns &#8220;built using modern CSS APIs.&#8221; In other words, it&#8217;s a very forward-thinking collection of CSS examples, but should be used with caution since some of the technologies incorporated may not have full browser support yet.</p>\n\n\n<h3 id=\"20-baseline-background-remover\">20. <a href=\"https://baseline.is/tools/background-remover/\" rel=\"noopener\">Baseline Background Remover</a></h3>\n\n\n<p>Admittedly, AI-based background remover tools have been a dime-a-dozen recently. This one is free and works really well from my brief testing with it.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://baseline.is/tools/background-remover/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277973-b5f345bc-9a9b-458b-89ac-16c89ecf285c.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361094\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277973-b5f345bc-9a9b-458b-89ac-16c89ecf285c.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277973-b5f345bc-9a9b-458b-89ac-16c89ecf285c.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277973-b5f345bc-9a9b-458b-89ac-16c89ecf285c.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277973-b5f345bc-9a9b-458b-89ac-16c89ecf285c.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277973-b5f345bc-9a9b-458b-89ac-16c89ecf285c.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>You can upload an image of up to 5MB and it will accept JPEG and PNG files. The resulting image is downloaded a transparent PNG, which you can use to add your own background or leave as transparent.</p>\n\n\n<h3 id=\"19-theatrejs\">19. <a href=\"https://www.theatrejs.com/\" rel=\"noopener\">Theatre.js</a></h3>\n\n\n<p>Here&#8217;s another animation library, but this time a JavaScript solution that allows you to animate DOM elements or WebGL using a convenient visual editor that works along with the code you write.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.theatrejs.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277996-25c04b61-63bc-47bf-aa99-77be91a29da0.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361096\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277996-25c04b61-63bc-47bf-aa99-77be91a29da0.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277996-25c04b61-63bc-47bf-aa99-77be91a29da0.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277996-25c04b61-63bc-47bf-aa99-77be91a29da0.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277996-25c04b61-63bc-47bf-aa99-77be91a29da0.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277996-25c04b61-63bc-47bf-aa99-77be91a29da0.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>This is a really powerful tool that&#8217;s hard to encapsulate in just a few paragraphs. There&#8217;s a lenghty <a href=\"https://docs.theatrejs.com/getting-started/\" rel=\"noopener\">chapter-based video</a> used throughout the docs that really helps if you want to get familiar with it.</p>\n\n\n<h3 id=\"18-transitioncss\">18. <a href=\"https://www.transition.style/\" rel=\"noopener\">Transition.css</a></h3>\n\n\n<p>Drop-in CSS libraries are always popular and I&#8217;ll usually find at least one or two good ones each year. This one includes some neat CSS transitions you probably haven&#8217;t seen elsewhere.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.transition.style/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278121-0b484ebb-a245-4bd2-8894-f9352116f636.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361097\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278121-0b484ebb-a245-4bd2-8894-f9352116f636.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278121-0b484ebb-a245-4bd2-8894-f9352116f636.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278121-0b484ebb-a245-4bd2-8894-f9352116f636.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278121-0b484ebb-a245-4bd2-8894-f9352116f636.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278121-0b484ebb-a245-4bd2-8894-f9352116f636.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>You can try them out right on the page. My favourites are the ones that incorporate some hesitation in the animation, for an added uniqueness.</p>\n\n\n<h3 id=\"17-the-component-gallery\">17. <a href=\"https://component.gallery/\" rel=\"noopener\">The Component Gallery</a></h3>\n\n\n<p>This is sort of a catch-all for design systems as it features component examples sourced from real design systems built in various technologies — React, CSS, Angular, Vue, etc. — by various brands, including eBay, Goldman Sachs, GOV.UK, and lots more.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://component.gallery/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278163-2dcad79f-3201-492a-9049-6e84ba542c65.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361098\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278163-2dcad79f-3201-492a-9049-6e84ba542c65.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278163-2dcad79f-3201-492a-9049-6e84ba542c65.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278163-2dcad79f-3201-492a-9049-6e84ba542c65.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278163-2dcad79f-3201-492a-9049-6e84ba542c65.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278163-2dcad79f-3201-492a-9049-6e84ba542c65.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It works as a handy reference for anyone building their own design system, as you can compare the same components across the existing systems included here.</p>\n\n\n<h3 id=\"16-partyjs\">16. <a href=\"https://party.js.org/\" rel=\"noopener\">party.js</a></h3>\n\n\n<p>This is a fun and unique JavaScript library that lets you add particle effects to a web page, specifically confetti and sparkles.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://party.js.org/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278196-4c9622c2-f176-404f-b562-3c5021743538.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361099\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278196-4c9622c2-f176-404f-b562-3c5021743538.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278196-4c9622c2-f176-404f-b562-3c5021743538.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278196-4c9622c2-f176-404f-b562-3c5021743538.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278196-4c9622c2-f176-404f-b562-3c5021743538.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278196-4c9622c2-f176-404f-b562-3c5021743538.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>You&#8217;ll only use this in very specific circumstances, but it&#8217;s nice that you can customize the particle shapes, number of particles, spread, and so on.</p>\n\n\n<h3 id=\"15-headless-ui\">15. <a href=\"https://headlessui.dev/\" rel=\"noopener\">Headless UI</a></h3>\n\n\n<p>In the words of Nacho Libre, now we&#8217;re <a href=\"https://www.youtube.com/watch?v=hHWcoaM_59E\" rel=\"noopener\">really getting down to the nitty gritty</a>. This UI component library was released in late 2020 and has already amassed more than 12,000 stars on GitHub.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://headlessui.dev/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278221-610fbc6a-fe6e-4597-b932-5c61448cee57.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361100\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278221-610fbc6a-fe6e-4597-b932-5c61448cee57.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278221-610fbc6a-fe6e-4597-b932-5c61448cee57.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278221-610fbc6a-fe6e-4597-b932-5c61448cee57.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278221-610fbc6a-fe6e-4597-b932-5c61448cee57.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278221-610fbc6a-fe6e-4597-b932-5c61448cee57.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The components (dropdown menu, tabs, popover, etc.) are &#8220;headless.&#8221; That doesn&#8217;t mean their <a href=\"https://www.youtube.com/watch?v=FJC8OhfEuSw\" rel=\"noopener\">capa was detated</a>; it means they&#8217;re unstyled so that you can brand them as you please. They&#8217;re also fully accessible, designed to integrate with Tailwind CSS, and are compatible with React and Vue. That&#8217;s right — this one hits almost every front-end buzzword for 2022.</p>\n\n\n<h3 id=\"14-turbo\">14. <a href=\"https://turbo.hotwired.dev/\" rel=\"noopener\">Turbo</a></h3>\n\n\n<p>This is another one that did well throughout 2021 after a late 2020 release. It&#8217;s billed as &#8220;the speed of a single-page web application without having to write any JavaScript.&#8221;</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://turbo.hotwired.dev/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278260-33c3cb12-b000-41f4-88aa-1e270b0fd2c6.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361101\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278260-33c3cb12-b000-41f4-88aa-1e270b0fd2c6.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278260-33c3cb12-b000-41f4-88aa-1e270b0fd2c6.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278260-33c3cb12-b000-41f4-88aa-1e270b0fd2c6.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278260-33c3cb12-b000-41f4-88aa-1e270b0fd2c6.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278260-33c3cb12-b000-41f4-88aa-1e270b0fd2c6.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>In brief, Turbo is a library that lets you take advantage of four main features: Turbo Drive, Turbo Frames, Turbo Streams, and Turbo Native. These use web components to add single-page app-like performance and interactivity to your pages without the need to reinvent the wheel with heavy custom scripts.</p>\n\n\n<h3 id=\"13-tidyjs\">13. <a href=\"https://pbeshai.github.io/tidy/\" rel=\"noopener\">tidy.js</a></h3>\n\n\n<p>This is a library of data-related JavaScript functions specifically for &#8220;tidying up&#8221; your data.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://pbeshai.github.io/tidy/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280602-1b7a5060-fbd3-4b53-b102-4a9694439843.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361102\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280602-1b7a5060-fbd3-4b53-b102-4a9694439843.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280602-1b7a5060-fbd3-4b53-b102-4a9694439843.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280602-1b7a5060-fbd3-4b53-b102-4a9694439843.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280602-1b7a5060-fbd3-4b53-b102-4a9694439843.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280602-1b7a5060-fbd3-4b53-b102-4a9694439843.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It includes 70+ functions under different categories (tidying, grouping, math, sequencing, etc.) and you can mess around with the different features using <a href=\"https://pbeshai.github.io/tidy/playground\" rel=\"noopener\">this playground</a>.</p>\n\n\n<h3 id=\"12-tailkit\">12. <a href=\"https://www.tailwind-kit.com/\" rel=\"noopener\">Tail-Kit</a></h3>\n\n\n<p>This is the first Tailwind UI kit on the list of top front-end tools, and it&#8217;s a doozy. It has more than 250 open-source components that are compatible with React, Vue, and Angular.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.tailwind-kit.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"684\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280639-1f9d7b87-c70f-42a7-9401-f9be339e0363.png?resize=1024%2C684&#038;ssl=1\" alt=\"\" class=\"wp-image-361103\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280639-1f9d7b87-c70f-42a7-9401-f9be339e0363.png?resize=1024%2C684&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280639-1f9d7b87-c70f-42a7-9401-f9be339e0363.png?resize=300%2C201&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280639-1f9d7b87-c70f-42a7-9401-f9be339e0363.png?resize=768%2C513&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280639-1f9d7b87-c70f-42a7-9401-f9be339e0363.png?resize=1000%2C668&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280639-1f9d7b87-c70f-42a7-9401-f9be339e0363.png?w=1357&amp;ssl=1 1357w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>There are components categorized under Elements, Forms, Commerce, Navigation, Sections, and Lists, or you can use from a number of templates, categorized under Dashboards, Landing Pages, and Error Pages.</p>\n\n\n<h3 id=\"11-tailwind-components\">11. <a href=\"https://tailwindcomponents.com/\" rel=\"noopener\">Tailwind Components</a></h3>\n\n\n<p>And here&#8217;s another Tailwind UI kit, again featuring open-source components and templates under 13 more refined categories, along with an &#8220;awesome&#8221; category that includes free but premium components.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://tailwindcomponents.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"738\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280679-06d1bd65-03a4-4426-9535-a578619d3f02.png?resize=1024%2C738&#038;ssl=1\" alt=\"\" class=\"wp-image-361104\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280679-06d1bd65-03a4-4426-9535-a578619d3f02.png?resize=1024%2C738&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280679-06d1bd65-03a4-4426-9535-a578619d3f02.png?resize=300%2C216&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280679-06d1bd65-03a4-4426-9535-a578619d3f02.png?resize=768%2C554&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280679-06d1bd65-03a4-4426-9535-a578619d3f02.png?resize=1000%2C721&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280679-06d1bd65-03a4-4426-9535-a578619d3f02.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>This site is more or less a directory of various community-contributed Tailwind components, rather than a cohesive set of UI elements like other kits.</p>\n\n\n<h3 id=\"10-pikaday\">10. <a href=\"https://github.com/Pikaday/Pikaday\" rel=\"noopener\">Pikaday</a></h3>\n\n\n<p>A JavaScript date picker cracks the top 10 tools of the year in 2021 — who would have thunk it? It seems to check all the boxes necessary for a date picker component: No dependencies, lightweight, and uses modular CSS for styling.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://github.com/Pikaday/Pikaday\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280715-43cb160f-8c0b-4e0c-b46e-d206bd4c6620.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361106\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280715-43cb160f-8c0b-4e0c-b46e-d206bd4c6620.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280715-43cb160f-8c0b-4e0c-b46e-d206bd4c6620.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280715-43cb160f-8c0b-4e0c-b46e-d206bd4c6620.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280715-43cb160f-8c0b-4e0c-b46e-d206bd4c6620.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280715-43cb160f-8c0b-4e0c-b46e-d206bd4c6620.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Like a few other front-end tools on this list, this isn&#8217;t a new tool. It&#8217;s been around for a while, but I first shared it in 2021 and it amazingly ended up in this year&#8217;s top 10.</p>\n\n\n<h3 id=\"9-html-boilerplates\">9. <a href=\"https://htmlboilerplates.com/\" rel=\"noopener\">HTML Boilerplates</a></h3>\n\n\n<p>This is a practical little online HTML generator that lets you customize the type of HTML starter template you want to generate, providing toggle options for what to include. This is probably most useful for generating a quick template for a landing page or demo.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://htmlboilerplates.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280753-bb532840-cd84-4dc0-9a6b-a5148f025555.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361107\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280753-bb532840-cd84-4dc0-9a6b-a5148f025555.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280753-bb532840-cd84-4dc0-9a6b-a5148f025555.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280753-bb532840-cd84-4dc0-9a6b-a5148f025555.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280753-bb532840-cd84-4dc0-9a6b-a5148f025555.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280753-bb532840-cd84-4dc0-9a6b-a5148f025555.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>In all honesty, I think it would be good if the tool was updated to use a few more modern options, but for a simple HTML starting point this gets the job done.</p>\n\n\n<h3 id=\"8-whirl\">8. <a href=\"https://whirl.netlify.app/\" rel=\"noopener\">Whirl</a></h3>\n\n\n<p>Here&#8217;s another CSS animation library, this time specifically a collection of animations for use as loading spinners. It includes 100+ animated loaders, some of which are really neat and unique.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://whirl.netlify.app/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280880-cefce8e5-e517-47b7-ba82-511bdc2bb6ac.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361108\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280880-cefce8e5-e517-47b7-ba82-511bdc2bb6ac.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280880-cefce8e5-e517-47b7-ba82-511bdc2bb6ac.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280880-cefce8e5-e517-47b7-ba82-511bdc2bb6ac.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280880-cefce8e5-e517-47b7-ba82-511bdc2bb6ac.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280880-cefce8e5-e517-47b7-ba82-511bdc2bb6ac.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>I like how the animations in the list (which you can try right on the page) are categorized as pseudo-element, single element, and multi-element. The best one by far is the &#8220;pong&#8221; animation, though I question whether anyone would correctly classify that as indicative of &#8220;content loading&#8221;!</p>\n\n\n<h3 id=\"7-riju\">7. <a href=\"https://riju.codes/\" rel=\"noopener\">Riju</a></h3>\n\n\n<p>Imagine if CodePen and JSFiddle had a baby, then you chopped that baby into 224 pieces. That&#8217;s what Riju is — a fast online playground for just about every programming language.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://riju.codes/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280902-e8dc4146-95ff-4a35-a01f-efcf2361048a-1024x755.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361109\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280902-e8dc4146-95ff-4a35-a01f-efcf2361048a.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280902-e8dc4146-95ff-4a35-a01f-efcf2361048a.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280902-e8dc4146-95ff-4a35-a01f-efcf2361048a.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280902-e8dc4146-95ff-4a35-a01f-efcf2361048a.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280902-e8dc4146-95ff-4a35-a01f-efcf2361048a.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>I can&#8217;t imagine there&#8217;s any coding language you&#8217;d want to play around with that&#8217;s missing here and most of it is stuff that you don&#8217;t normally associate with running in the browser.</p>\n\n\n<h3 id=\"6-devui\">6. <a href=\"https://devui.design/\" rel=\"noopener\">DevUI</a></h3>\n\n\n<p>This is an Angular toolkit that&#8217;s suitable for enterprise-level apps and includes components, icons, an admin dashboard template, and a design system for styling and branding.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://devui.design/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"771\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280929-7684f2e6-ac03-44d6-b688-9671752b7986.png?resize=1024%2C771&#038;ssl=1\" alt=\"\" class=\"wp-image-361110\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280929-7684f2e6-ac03-44d6-b688-9671752b7986.png?resize=1024%2C771&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280929-7684f2e6-ac03-44d6-b688-9671752b7986.png?resize=300%2C226&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280929-7684f2e6-ac03-44d6-b688-9671752b7986.png?resize=768%2C579&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280929-7684f2e6-ac03-44d6-b688-9671752b7986.png?resize=1000%2C753&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280929-7684f2e6-ac03-44d6-b688-9671752b7986.png?w=1204&amp;ssl=1 1204w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>I&#8217;m guessing this made the top 10 list of front-end tools because I didn&#8217;t specifically mention at first that it is for Angular apps (which isn&#8217;t clear on the home page either). Nonetheless, I did specify that it&#8217;s for enterprise-level projects, and that seemed to grab the attention of many.</p>\n\n\n<h3 id=\"5-pollen\">5. <a href=\"https://www.pollen.style/\" rel=\"noopener\">Pollen</a></h3>\n\n\n<p>This library works as a foundation for your own design system, and its practicality is evident in its use of CSS custom properties.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.pollen.style/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280956-6131d621-5e3f-4d9f-bd5f-96964a35bcee.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361111\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280956-6131d621-5e3f-4d9f-bd5f-96964a35bcee.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280956-6131d621-5e3f-4d9f-bd5f-96964a35bcee.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280956-6131d621-5e3f-4d9f-bd5f-96964a35bcee.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280956-6131d621-5e3f-4d9f-bd5f-96964a35bcee.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280956-6131d621-5e3f-4d9f-bd5f-96964a35bcee.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It provides you with low-level design tokens that you can easily customize and extend. Modules include Typography, Layout, UI, Grid, and Colors. I&#8217;m guessing there will be more added to this, so it&#8217;s one to keep an eye on in the coming year.</p>\n\n\n<h3 id=\"4-alternight\">4. <a href=\"https://github.com/spaceinvadev/alternight-vscode-theme\" rel=\"noopener\">AlterNight</a></h3>\n\n\n<p>Developers love VS Code, dark mode, and plugins. Combine those three things, and you have a great little front-end tool.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://github.com/spaceinvadev/alternight-vscode-theme\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280986-bcf07591-cf22-4cd3-b28c-9b068cbb523c.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361112\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280986-bcf07591-cf22-4cd3-b28c-9b068cbb523c.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280986-bcf07591-cf22-4cd3-b28c-9b068cbb523c.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280986-bcf07591-cf22-4cd3-b28c-9b068cbb523c.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280986-bcf07591-cf22-4cd3-b28c-9b068cbb523c.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280986-bcf07591-cf22-4cd3-b28c-9b068cbb523c.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>AlterNight is a beautiful VS Code theme and has a modest ~3,000 installs so far, but it was able to crack the top five in this year&#8217;s list.</p>\n\n\n<h3 id=\"3-uisual\">3. <a href=\"https://uisual.com/\" rel=\"noopener\">UIsual</a></h3>\n\n\n<p>Here&#8217;s a collection of front-end templates, but with a bit of a twist that I think many seemed to appreciate: they&#8217;re greyscale.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://uisual.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148281027-75b69435-1869-4909-81e7-92879f8bb93f.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361113\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148281027-75b69435-1869-4909-81e7-92879f8bb93f.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148281027-75b69435-1869-4909-81e7-92879f8bb93f.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148281027-75b69435-1869-4909-81e7-92879f8bb93f.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148281027-75b69435-1869-4909-81e7-92879f8bb93f.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148281027-75b69435-1869-4909-81e7-92879f8bb93f.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The set currently includes eight templates with diverse layouts. With the lack of any color-based branding, these are a good option to customize to your own needs without looking like every other landing page out there.</p>\n\n\n<h3 id=\"2-supabase-ui\">2. <a href=\"https://ui.supabase.io/\" rel=\"noopener\">Supabase UI</a></h3>\n\n\n<p>Here&#8217;s yet another open-source component library, this one for React and designed specifically for the Supabase product (an open-source Firebase alternative).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://ui.supabase.io/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275618-1d371a26-fe90-42f5-838a-6078c2f47e10.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361114\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275618-1d371a26-fe90-42f5-838a-6078c2f47e10.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275618-1d371a26-fe90-42f5-838a-6078c2f47e10.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275618-1d371a26-fe90-42f5-838a-6078c2f47e10.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275618-1d371a26-fe90-42f5-838a-6078c2f47e10.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275618-1d371a26-fe90-42f5-838a-6078c2f47e10.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It&#8217;s Tailwind-ready and I should also point out that it&#8217;s still in early development. Nonetheless, it was popular enough to make it to number 2 on this list.</p>\n\n\n<h3 id=\"1-css-layout-generator\">1. <a href=\"https://layout.bradwoods.io/\" rel=\"noopener\">CSS Layout Generator</a></h3>\n\n\n<p>This was the most-clicked tool in my newsletter over the past year. It&#8217;s a full-featured CSS and JSX generator for producing different kinds of layouts using the CSS Grid Layout syntax.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://layout.bradwoods.io/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"618\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148283078-965a96e8-eb03-4919-b2ba-120086f0902f.png?resize=1024%2C618&#038;ssl=1\" alt=\"\" class=\"wp-image-361115\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148283078-965a96e8-eb03-4919-b2ba-120086f0902f.png?resize=1024%2C618&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148283078-965a96e8-eb03-4919-b2ba-120086f0902f.png?resize=300%2C181&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148283078-965a96e8-eb03-4919-b2ba-120086f0902f.png?resize=768%2C463&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148283078-965a96e8-eb03-4919-b2ba-120086f0902f.png?resize=1000%2C603&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148283078-965a96e8-eb03-4919-b2ba-120086f0902f.png?w=1512&amp;ssl=1 1512w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Click on any of the five layout styles, and you&#8217;ll come to an interactive online editor that lets you mess around with various CSS Grid features like rows, columns, row gap, column gap, direction, grid alignment, and lots more. There&#8217;s quite a bit to play around with here, and apparently the tool will later include the Flexbox syntax for some of the examples.</p>\n\n\n<h3 id=\"what-were-your-favorite-frontend-tools-of-2021\">What were your favorite front-end tools of 2021?</h3>\n\n\n<p>That wraps up this year&#8217;s list of most interesting front-end tools. I hope you found something here you can bookmark or start using in a new project. It&#8217;s pretty cool that this list contained such a variety of tools — there were UI kits, animation libraries, a stock photo site, image tools, and more.</p>\n\n\n\n<p>Are there front-end tools not mentioned in this list that you enjoyed discovering over the past year? Feel free to drop it in the comments. You can also <a href=\"https://webtoolsweekly.com/\" rel=\"noopener\">subscribe to my newsletter</a> for more front-end tools in 2022 and feel free to hit me up if you’ve built something yourself that you’d like to share in a future issue.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/hottest-front-end-tools-in-2021/\">What Were the Hottest Front-End Tools in 2021?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Another year has passed and once again I’ve had the privilege of going through the Web Tools Weekly newsletter archives from the past 12 months to hunt down the front-end tools that readers found to be the most interesting during 2021. So, to kick off 2022, I’ve compiled a list of the 60 most popular tools. I’m sure there are at least one or two listed here that you can start using in your front-end projects today.\n\n\n\nSome of these front-end tools are super-practical, while others probably only made this list due to curiosity (which I base on the number of unique clicks). And since many of the tools that make my year-end lists are pretty new, I think this is a good indicator of the kinds of front-end tools that will be popular in the coming year.\n\n\n\nCounting down from the top!\n\n\n\n\n\n\n\n\n  \n          Table of contents\n      \n  \n\n\n60. Open Props\n59. NextUI\n58. Dopefolio\n57. Vizzu\n56. 10015 Tools\n55. Snoweb\n54. Tails\n53. MapLibre\n52. SVG Repo\n51. Animated Backgrounds\n50. Pico.css\n49. Coding Fonts\n48. UI-Neumorphism\n47. Beautiful CSS Buttons\n46. Shaper\n45. Prestige\n44. HTML.cafe\n43. Charts.css\n42. Buttons Generator\n41. Doodad Pattern Generator\n40. Kaboom\n39. Skuawk\n38. Glassmorphism CSS Generator\n37. Kalia\n36. AdminJS\n35. Pancake\n34. Mosaic Lite\n33. Iconduck\n32. Luxa CSS\n31. Glitter\n30. Components AI\n29. Unicode Arrows\n28. Type Scale Clamp Generator\n27. AnimXYZ\n26. Frontend Toolkit\n25. colorpalettes.earth\n24. Uncut\n23. Lowdefy\n22. JavaScript Booster\n21. Layout Patterns\n20. Baseline Background Remover\n19. Theatre.js\n18. Transition.css\n17. The Component Gallery\n16. party.js\n15. Headless UI\n14. Turbo\n13. tidy.js\n12. Tail-Kit\n11. Tailwind Components\n10. Pikaday\n9. HTML Boilerplates\n8. Whirl\n7. Riju\n6. DevUI\n5. Pollen\n4. AlterNight\n3. UIsual\n2. Supabase UI\n1. CSS Layout Generator\nWhat were your favorite front-end tools of 2021?\n\n\n\n\n\n\n\n60. Open Props\n\n\nOpen Props provides a set of hand-crafted design tokens made up of CSS custom properties. I can see this sort of thing being much more common due to the use of this particular CSS feature. These allow you to drop in small collections of useful groups of custom properties, like animations.css, borders.css, fonts.css, zindex.css, etc, with more coming soon. Or you can just use the main Open Props file to grab everything at once.\n\n\n\n\n\n\n\nThis is definitely one front-end tool to keep an eye on and maybe even a good one to contribute to if you want to help build the library of tokens available.\n\n\n59. NextUI\n\n\nA modern React library that uses Stitches, a popular CSS-in-JS solution, and includes light and dark UI components out-of-the-box along with a default color palette that might be good for quickly building landing pages or other content that’s not initially tied to any branding.\n\n\n\n\n\n\n\nIt’s currently listed as being in Alpha stage of development, so this is another one worth keeping tabs on in the coming year.\n\n\n58. Dopefolio\n\n\nIf you’re looking for an easy way to put together your own developer portfolio, Dopefolio is a quick solution that’s optimized for SEO and has strong Lighthouse scores out-of-the-box.\n\n\n\n\n\n\n\nThe live demo gives you an idea of what it looks like (responsive and all) and it includes a color picker component so you can live-test your own preferred primary color for the template.\n\n\n57. Vizzu\n\n\nThis is a unique one that made this year’s list of front-end tools. Vizzu an open-source JavaScript library for creating animated data stories and visualizations. Maybe this is popular due the apparent need for creating and embedding medical data nowadays.\n\n\n\n\n\n\n\nThis library allows you to easily build static data charts, animated charts, and data stories. You can see some live examples of the animated charts or data stories, which include a data story showing which guest character had the most lines throughout the run of the TV series Friends.\n\n\n56. 10015 Tools\n\n\nI seem to find a handful of these types of front-end tools every year. 10015 Tools is a collection of front-end tools rather than one single tool. It includes text tools, image tools, CSS tools, coding tools (e.g. minifiers), color tools, social media tools, and a few others under a miscellaneous category.\n\n\n\n\n\n\n\nThis is definitely one of the more comprehensive all-in-one solutions I’ve seen, so I’m sure you’ll find a few useful front-end tools here you can come back to.\n\n\n55. Snoweb\n\n\nIcon sets are always popular and I come across at least a dozen new ones every year. This one includes optimized SVG icons, many of which have a built-in animated effect when you hover over the icon (like the open/close envelope icon).\n\n\n\n\n\n\n\nLike many icon websites, you can search by keyword or filter by category, one of which is a “brand” category with icons for Twitter, Facebook, Vimeo, YouTube, Snapchat, etc.\n\n\n54. Tails\n\n\nHere’s the first Tailwind-based tool to make the list; something that’s been a trend the past few years as Tailwind continues to grow in popularity. This front-end tool a drag-and-drop page builder for projects using Tailwind CSS.\n\n\n\n\n\n\n\nIt includes two free “blocks” for each of the 15 categories, so there’s a decent amount of free stuff here and you can unlock the rest for a monthly fee.\n\n\n53. MapLibre\n\n\nThis open-source mapping library launched in March and has grown in popularity throughout the year. It includes a JavaScript library as well as an SDK for displaying maps inside of iOS and Android apps.\n\n\n\n\n\n\n\nThe docs include a bunch of examples that use JavaScript, if you want to see what’s possible with the web-based front-end tools.\n\n\n52. SVG Repo\n\n\nSVG Repo makes the list based on sheer numbers alone. It’s a repository of more than 300,000 free, optimized, SVG-based graphics and icons most of which are licensed for commercial use.\n\n\n\n\n\n\n\nEach icon you select tells you what type of license it falls under. You can search by keyword and “save” icons to your favorites for later use (no login required).\n\n\n51. Animated Backgrounds\n\n\nThis one made the top 60 this year but probably isn’t the most practical front-end tool of the bunch. Like I said at the outset, some stuff gets clicked on just out of sheer curiosity. It’s a gallery of animated backgrounds, sourced from various CodePen demos.\n\n\n\n\n\n\n\nThe gallery is useful in that it displays the backgrounds as pre-recorded videos so you don’t have to worry about all the demos loading and crashing your browser tab. Use these sparingly, if ever, as they often use heavy amounts of JavaScript and CSS.\n\n\n50. Pico.css\n\n\nThis is a different type of CSS framework compared to what’s popular nowadays. It’s kind of like an anti-Tailwind tool and more of a starter CSS file (like a reset) than a full-fledged framework.\n\n\n\n\n\n\n\nPico.css provides elegant default styles on all native HTML elements (which you can preview here) without the need to add swaths of classes to your markup — and the whole thing is less than 10kb minified and gzipped.\n\n\n49. Coding Fonts\n\n\nCoding fonts seem to be an exciting new trend of late, and CSS-Tricks has taken advantage of that with this little interactive info app.\n\n\n\n\n\n\n\nSelect a font on the left to display example code, typeface info (ligatures, italics, etc.), cost (most are free), along with options to display example code for HTML, CSS, or JavaScript.\n\n\n48. UI-Neumorphism\n\n\nThis React library is based on the old skeumorphism trend that apparently went out of style a number of years ago. Is this trend making a comeback? Probably not. In fact, this React library is about two years old even though I shared it for the first time this past year.\n\n\n\n\n\n\n\nThe library includes a slew of different components that all implement “neumorphism” look. Interesting to look at, but might not fit many projects.\n\n\n47. Beautiful CSS Buttons\n\n\nJust about every app or website needs buttons, so a collection like this always seems to do well. Many of these are different from what you probably have seen elsewhere.\n\n\n\n\n\n\n\nA lot of the buttons include interesting hover effects and you can easily copy and paste the HTML and CSS for any single button directly on the page.\n\n\n46. Shaper\n\n\nThis interactive tool lets you fiddle with various UI settings live on the page to build different page elements. Once you’ve tweaked things as you like, you can grab the code, which uses CSS custom properties.\n\n\n\n\n\n\n\nYou can switch between demo view and “specs” view (i.e. the code along with other useful info). This tool has a particular focus on typography along with the rest of the UI styles, which is an important part of getting a layout looking right.\n\n\n45. Prestige\n\n\nThis is a text-based HTTP client in the browser — like Postman but without an interface. It allows you to define requests in plain text, which you can optionally save as a Gist. It includes isolated cookie management, and has both dark and light modes.\n\n\n\n\n\n\n\nAs the author explains, “I built Prestige because I needed an app like this when working […] and playing with external APIs.”\n\n\n44. HTML.cafe\n\n\nThis is probably the simplest tool in the entire list. HTML.cafe is more or less a poor-man’s CodePen, for lack of a better term. I wouldn’t think people would be interested in this sort of thing, since there are already powerful tools that already do what it does. Nonetheless, it’s a really simple HTML editor with live preview.\n\n\n\n\n\n\n\nThere are no separate CSS or JavaScript windows like there are CodePen, but you can easily include those in <style> or <script> elements if you wish. I think the best use of this tool might be for teachers helping students who are completely unfamiliar with HTML, as this gets all the complexities out of the way.\n\n\n43. Charts.css\n\n\nThis front-end tool is sort of like a cross between Tailwind CSS and Chart.js. In short, Charts.css is a CSS framework that lets you use utility classes to build charts using HTML and CSS.\n\n\n\n\n\n\n\nYou can create bar charts, line charts, multi-dataset charts, percentage columns, and 3D bar charts. And best of all, the charts are accessible, responsive, and easy to customize to your branding needs.\n\n\n42. Buttons Generator\n\n\n“Buttons Generator” is probably a bit of a misnomer, since the page doesn’t exactly let you “generate” buttons. Like the previous buttons resource, this is a gallery of buttons built with HTML and CSS.\n\n\n\n\n\n\n\nThey’re divided up by category, include some neat hover or click effects, and you can click any button to copy the code to your clipboard.\n\n\n41. Doodad Pattern Generator\n\n\nThis interactive tool allows you to build your own patterned backgrounds that you can export in a variety of formats. You can use the “shuffle” button to generate a random pattern, or select from various category styles. You can also edit colors, filters, and various transforms.\n\n\n\n\n\n\n\nThe export dialog lets you save patterns and load previously-saved ones via Local Storage. Export your patterns as JPEG, PNG, inline SVG, SVG file, or CSS background.\n\n\n40. Kaboom\n\n\nEvery year I come across at least one or two new JavaScript game libraries, and this is the one that made this year’s list. It looks to have a fairly elegant and easy-to-use API and includes a healthy set of components, events, and other built-in functions.\n\n\n\n\n\n\n\nThere’s a handy playground to get your feet wet with using it and an introductory tutorial to get started.\n\n\n39. Skuawk\n\n\nIf you want an alternative to Unsplash, which is likely one of your go-to sources for free stock images, this collection of beautiful public domain images might be a good option with some gorgeous photos.\n\n\n\n\n\n\n\nThere are 16 categories of images from various photographers that have all allowed their images to be used under a CC0 license (i.e. do whatever you want).\n\n\n38. Glassmorphism CSS Generator\n\n\nThis is an online generator that lets you build a “glassmorphism” effect on a page element — kind of like frosted glass. This tool is apparently supposed to be part of a larger UI library that will incorporate this sort of effect on a number of different UI components.\n\n\n\n\n\n\n\nWhatever the case, I like this effect more than the “neumorphism” one and apparently my audience agrees.\n\n\n37. Kalia\n\n\nThis is one of three VS Code tools that made the list. It’s an attractive color scheme you can use for your VS Code setup.\n\n\n\n\n\n\n\nThe extension lists only about 800 installs so far, which is surprising, but it has a nice pastel color look that I think many will enjoy.\n\n\n36. AdminJS\n\n\nIf you’re a Node developer, this is an open-source admin panel that can be added to a Node.js app. It will generate a UI for you, based on data you’ve added from almost any database, allowing you and your team to manage your app’s content.\n\n\n\n\n\n\n\nYou can try it out using this example app, which is based on MongoDB and Postgres.\n\n\n35. Pancake\n\n\nHere’s another game engine to build cross-platform HTML5-based 2D games. This one got a lot of traction when I first shared it. While it made the list,it seems to require Python during the build step after you write the game.\n\n\n\n\n\n\n\nThe basic API uses plain JavaScript and you can view lots of neat little examples here.\n\n\n34. Mosaic Lite\n\n\nI find lots of dashboard templates built with different front-end technologies. This one is made with Tailwind and React and includes optional chart components built with Chart.js.\n\n\n\n\n\n\n\nLike other similar templates, this can be used for SaaS products, admin dashboards, and more. You can view a live demo.\n\n\n33. Iconduck\n\n\nHere’s another great source for open-source icons, this one offering well over 100,000 icons that are searchable by keyword and are all available for use in commercial projects.\n\n\n\n\n\n\n\nThe site includes ability to like and save icons and icon collections for later use (requires cookies, but no login).\n\n\n32. Luxa CSS\n\n\nThis is a CSS library that was actually released in mid-to late 2020, but I shared it for the first time in 2021. It’s described as a “minimalist” CSS framework.\n\n\n\n\n\n\n\nLuxa CSS includes some base styles, along with various components, helpers, and layout styles, which you can view in the docs or by checking out this CodePen collection.\n\n\n31. Glitter\n\n\nGlitter was definitely one of the strangest — yet coolest — front-end tools I came across over the past year and it seems to have drawn a lot of interest even though it’s as simple as any tool gets.\n\n\n\n\n\n\n\nIt’s a generator that produces text in a glitter-like style, which you can save as SVG. Definitely not for 99% of your projects, but a pretty cool text effect.\n\n\n30. Components AI\n\n\nWhen I originally shared this one, I was sharing the theme builder alone, which is what got it on this list. But it’s worth sharing the entire set of 15+ tools.\n\n\n\n\n\n\n\nIn addition to the theme builder, there’s a syntax highlighter builder, gradient and shadow tools, SVG pattern generators, animated backgrounds, and lots more.\n\n\n29. Unicode Arrows\n\n\nThis is pretty straightforward. Unicode Arrows a one-stop location to copy and paste — you guessed it — Unicode arrows along with each arrow’s associated hex code.\n\n\n\n\n\n\n\nNot much else to say about this one except that the site lets you buy Unicode arrow jewellery. Not that a bunch of coding nerds would be interested in that, no way.\n\n\n28. Type Scale Clamp Generator\n\n\nThis is not the first tool to attempt to generate a type scale for you, but it’s a relatively new one that incorporates CSS’s clamp() function.\n\n\n\n\n\n\n\nThe front-end tool allows you to select a range, font, preview text, and you can even test the responsiveness (though I don’t see how useful that latter feature is, considering this is just text).\n\n\n27. AnimXYZ\n\n\nThis one is described as “the first composable CSS animation toolkit” with support for Vue and React. What that means exactly is that you don’t have to write any keyframes. It seems to be kind of like Tailwind for animations, since you’re only using HTML classes.\n\n\n\n\n\n\n\nIn addition to adding classes, the values are built entirely using CSS variables. That means you can customize the values as you wish by modifying the variables themselves.\n\n\n26. Frontend Toolkit\n\n\nHere’s another all-in-one tools solution that includes more than 20 tools for doing various coding and image-related tasks.\n\n\n\n\n\n\n\nIt includes tools for CSS, JSON, favicons, SVG, image compression, npm, regex, and more.\n\n\n25. colorpalettes.earth\n\n\nHere’s one that’s unique in the list and may inspire some cool designs. This tool displays color palettes sourced from images of nature (taken from Unsplash) that are included on the site, with new palettes added regularly.\n\n\n\n\n\n\n\nClick any image and you’ll get a modal with access to the hex value for each of the colors that make up the image-derived palette.\n\n\n24. Uncut\n\n\nAdding to the diversity of this list, here’s a typeface catalogue that currently features 90 typefaces with a focus on contemporary, or modern, type.\n\n\n\n\n\n\n\nAll fonts included are open-source, so you’re free to use them in personal and commercial projects.\n\n\n23. Lowdefy\n\n\nBuilding internal tools seems to be a hot thing nowadays and this is one solution you might want to look into that lets you build your tools by writing YAML.\n\n\n\n\n\n\n\nIt’s described as an “open-source low-code framework to build web apps, admin panels, BI dashboards, workflows, and CRUD apps with ease.”\n\n\n22. JavaScript Booster\n\n\nThis is a VS Code extension that aims to help you, as the it says on the tin, boost your JavaScript, TypeScript, and React coding productivity. The extension adds a light bulb icon at certain points in your code, indicating that you can instantly trigger predefined code refactorings.\n\n\n\n\n\n\n\nSome examples include converting a regular function to an arrow function, flip an if-else construct, along with some React-specific refactorings.\n\n\n21. Layout Patterns\n\n\nThis is one of the most recent additions to Google Developers’ web.dev resource that I’m assuming will continue to grow in the coming year.\n\n\n\n\n\n\n\nIt includes a number of UI patterns “built using modern CSS APIs.” In other words, it’s a very forward-thinking collection of CSS examples, but should be used with caution since some of the technologies incorporated may not have full browser support yet.\n\n\n20. Baseline Background Remover\n\n\nAdmittedly, AI-based background remover tools have been a dime-a-dozen recently. This one is free and works really well from my brief testing with it.\n\n\n\n\n\n\n\nYou can upload an image of up to 5MB and it will accept JPEG and PNG files. The resulting image is downloaded a transparent PNG, which you can use to add your own background or leave as transparent.\n\n\n19. Theatre.js\n\n\nHere’s another animation library, but this time a JavaScript solution that allows you to animate DOM elements or WebGL using a convenient visual editor that works along with the code you write.\n\n\n\n\n\n\n\nThis is a really powerful tool that’s hard to encapsulate in just a few paragraphs. There’s a lenghty chapter-based video used throughout the docs that really helps if you want to get familiar with it.\n\n\n18. Transition.css\n\n\nDrop-in CSS libraries are always popular and I’ll usually find at least one or two good ones each year. This one includes some neat CSS transitions you probably haven’t seen elsewhere.\n\n\n\n\n\n\n\nYou can try them out right on the page. My favourites are the ones that incorporate some hesitation in the animation, for an added uniqueness.\n\n\n17. The Component Gallery\n\n\nThis is sort of a catch-all for design systems as it features component examples sourced from real design systems built in various technologies — React, CSS, Angular, Vue, etc. — by various brands, including eBay, Goldman Sachs, GOV.UK, and lots more.\n\n\n\n\n\n\n\nIt works as a handy reference for anyone building their own design system, as you can compare the same components across the existing systems included here.\n\n\n16. party.js\n\n\nThis is a fun and unique JavaScript library that lets you add particle effects to a web page, specifically confetti and sparkles.\n\n\n\n\n\n\n\nYou’ll only use this in very specific circumstances, but it’s nice that you can customize the particle shapes, number of particles, spread, and so on.\n\n\n15. Headless UI\n\n\nIn the words of Nacho Libre, now we’re really getting down to the nitty gritty. This UI component library was released in late 2020 and has already amassed more than 12,000 stars on GitHub.\n\n\n\n\n\n\n\nThe components (dropdown menu, tabs, popover, etc.) are “headless.” That doesn’t mean their capa was detated; it means they’re unstyled so that you can brand them as you please. They’re also fully accessible, designed to integrate with Tailwind CSS, and are compatible with React and Vue. That’s right — this one hits almost every front-end buzzword for 2022.\n\n\n14. Turbo\n\n\nThis is another one that did well throughout 2021 after a late 2020 release. It’s billed as “the speed of a single-page web application without having to write any JavaScript.”\n\n\n\n\n\n\n\nIn brief, Turbo is a library that lets you take advantage of four main features: Turbo Drive, Turbo Frames, Turbo Streams, and Turbo Native. These use web components to add single-page app-like performance and interactivity to your pages without the need to reinvent the wheel with heavy custom scripts.\n\n\n13. tidy.js\n\n\nThis is a library of data-related JavaScript functions specifically for “tidying up” your data.\n\n\n\n\n\n\n\nIt includes 70+ functions under different categories (tidying, grouping, math, sequencing, etc.) and you can mess around with the different features using this playground.\n\n\n12. Tail-Kit\n\n\nThis is the first Tailwind UI kit on the list of top front-end tools, and it’s a doozy. It has more than 250 open-source components that are compatible with React, Vue, and Angular.\n\n\n\n\n\n\n\nThere are components categorized under Elements, Forms, Commerce, Navigation, Sections, and Lists, or you can use from a number of templates, categorized under Dashboards, Landing Pages, and Error Pages.\n\n\n11. Tailwind Components\n\n\nAnd here’s another Tailwind UI kit, again featuring open-source components and templates under 13 more refined categories, along with an “awesome” category that includes free but premium components.\n\n\n\n\n\n\n\nThis site is more or less a directory of various community-contributed Tailwind components, rather than a cohesive set of UI elements like other kits.\n\n\n10. Pikaday\n\n\nA JavaScript date picker cracks the top 10 tools of the year in 2021 — who would have thunk it? It seems to check all the boxes necessary for a date picker component: No dependencies, lightweight, and uses modular CSS for styling.\n\n\n\n\n\n\n\nLike a few other front-end tools on this list, this isn’t a new tool. It’s been around for a while, but I first shared it in 2021 and it amazingly ended up in this year’s top 10.\n\n\n9. HTML Boilerplates\n\n\nThis is a practical little online HTML generator that lets you customize the type of HTML starter template you want to generate, providing toggle options for what to include. This is probably most useful for generating a quick template for a landing page or demo.\n\n\n\n\n\n\n\nIn all honesty, I think it would be good if the tool was updated to use a few more modern options, but for a simple HTML starting point this gets the job done.\n\n\n8. Whirl\n\n\nHere’s another CSS animation library, this time specifically a collection of animations for use as loading spinners. It includes 100+ animated loaders, some of which are really neat and unique.\n\n\n\n\n\n\n\nI like how the animations in the list (which you can try right on the page) are categorized as pseudo-element, single element, and multi-element. The best one by far is the “pong” animation, though I question whether anyone would correctly classify that as indicative of “content loading”!\n\n\n7. Riju\n\n\nImagine if CodePen and JSFiddle had a baby, then you chopped that baby into 224 pieces. That’s what Riju is — a fast online playground for just about every programming language.\n\n\n\n\n\n\n\nI can’t imagine there’s any coding language you’d want to play around with that’s missing here and most of it is stuff that you don’t normally associate with running in the browser.\n\n\n6. DevUI\n\n\nThis is an Angular toolkit that’s suitable for enterprise-level apps and includes components, icons, an admin dashboard template, and a design system for styling and branding.\n\n\n\n\n\n\n\nI’m guessing this made the top 10 list of front-end tools because I didn’t specifically mention at first that it is for Angular apps (which isn’t clear on the home page either). Nonetheless, I did specify that it’s for enterprise-level projects, and that seemed to grab the attention of many.\n\n\n5. Pollen\n\n\nThis library works as a foundation for your own design system, and its practicality is evident in its use of CSS custom properties.\n\n\n\n\n\n\n\nIt provides you with low-level design tokens that you can easily customize and extend. Modules include Typography, Layout, UI, Grid, and Colors. I’m guessing there will be more added to this, so it’s one to keep an eye on in the coming year.\n\n\n4. AlterNight\n\n\nDevelopers love VS Code, dark mode, and plugins. Combine those three things, and you have a great little front-end tool.\n\n\n\n\n\n\n\nAlterNight is a beautiful VS Code theme and has a modest ~3,000 installs so far, but it was able to crack the top five in this year’s list.\n\n\n3. UIsual\n\n\nHere’s a collection of front-end templates, but with a bit of a twist that I think many seemed to appreciate: they’re greyscale.\n\n\n\n\n\n\n\nThe set currently includes eight templates with diverse layouts. With the lack of any color-based branding, these are a good option to customize to your own needs without looking like every other landing page out there.\n\n\n2. Supabase UI\n\n\nHere’s yet another open-source component library, this one for React and designed specifically for the Supabase product (an open-source Firebase alternative).\n\n\n\n\n\n\n\nIt’s Tailwind-ready and I should also point out that it’s still in early development. Nonetheless, it was popular enough to make it to number 2 on this list.\n\n\n1. CSS Layout Generator\n\n\nThis was the most-clicked tool in my newsletter over the past year. It’s a full-featured CSS and JSX generator for producing different kinds of layouts using the CSS Grid Layout syntax.\n\n\n\n\n\n\n\nClick on any of the five layout styles, and you’ll come to an interactive online editor that lets you mess around with various CSS Grid features like rows, columns, row gap, column gap, direction, grid alignment, and lots more. There’s quite a bit to play around with here, and apparently the tool will later include the Flexbox syntax for some of the examples.\n\n\nWhat were your favorite front-end tools of 2021?\n\n\nThat wraps up this year’s list of most interesting front-end tools. I hope you found something here you can bookmark or start using in a new project. It’s pretty cool that this list contained such a variety of tools — there were UI kits, animation libraries, a stock photo site, image tools, and more.\n\n\n\nAre there front-end tools not mentioned in this list that you enjoyed discovering over the past year? Feel free to drop it in the comments. You can also subscribe to my newsletter for more front-end tools in 2022 and feel free to hit me up if you’ve built something yourself that you’d like to share in a future issue.\n\nWhat Were the Hottest Front-End Tools in 2021? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-17T15:13:26.000Z",
      "date_modified": "2022-01-17T15:13:26.000Z",
      "_plugin": {
        "pageFilename": "e63e5bd9474e7b095d5e10cfde429790626074dcd32861bf29f8f4fdf79b6703.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360928",
      "url": "https://css-tricks.com/css-me-not-bookmarklet/",
      "title": "Using the CSS Me Not Bookmarklet to See (and Disable) CSS Files",
      "summary": "Stoyan is absolutely correct. As much as we all love CSS, it’s still an important player in how websites load and using less of it is a good thing. He has a neat new bookmarklet called CSS Me Not …\n\nUsing the CSS Me Not Bookmarklet to See (and Disable) CSS Files originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Stoyan is <a href=\"https://calendar.perfplanet.com/2021/css-me-not/\" rel=\"noopener\">absolutely correct</a>. As much as we all love CSS, it&#8217;s still an important player in how websites load and using less of it is a good thing. He has a neat new bookmarklet called CSS Me Not to help diagnose unnecessary CSS files, but we&#8217;ll get to that in a moment.</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>The [problem] is that CSS is in the critical path, it blocks rendering and often even&nbsp;<a href=\"https://calendar.perfplanet.com/2021/combat-css-blockage-with-this-one-weird-little-trick/\" rel=\"noopener\">JavaScript execution</a>. We love CSS, it’s magic, it can do unbelievable feats and fix broken UIs and&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/hue-rotate()\" rel=\"noopener\">manipulate images</a>&nbsp;and&nbsp;<a href=\"https://diana-adrianne.com/purecss-francine/\" rel=\"noopener\">draw amazing pictures</a>. We love CSS. We just want… less of it, because of its inherently blocking nature.</p></blockquote>\n\n\n\n<p>Sometimes our sites use <em>entire stylesheets</em> that are simply unnecessary. I hate to admit it, but WordPress is a notorious offender here, loading stylesheets for plugins and blocks that you might not even really be using. I&#8217;m in that position on this site as I write. I just haven&#8217;t found the time to root out a couple of little stylesheets I don&#8217;t need from loading.</p>\n\n\n\n<span id=\"more-360928\"></span>\n\n\n\n<p>Stoyan <a href=\"https://calendar.perfplanet.com/2021/css-me-not/#:~:text=To%20install%20the%20bookmarklet\" rel=\"noopener\">created a quick bookmarklet called CSS Me Not</a> to see all those CSS files. The big benefit, of course, is that it lets you know what you&#8217;re up against.</p>\n\n\n\n<p>You could find these stylesheets in DevTools as well, but the CSS Me Not bookmarklet makes it extra easy and has a killer bonus feature: <strong>turning off those stylesheets.</strong> Testing the bookmarklet here on CSS-Tricks, I can see four stylesheets that WordPress loads (because of settings and plugins) that I know I don&#8217;t need. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2643\" height=\"1961\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=2643%2C1961&#038;ssl=1\" alt=\"Screenshot of a Chrome browser window showing the CSS Me Not bookmarklet circled in red just below the address bar, Below that is a table injected above the CSS-Tricks website showing six stylesheets including an action to disable a sheet, the sheet's media, the sheet's host, and the sheet's name.\" class=\"wp-image-360933\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?w=2643&amp;ssl=1 2643w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=1024%2C760&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=768%2C570&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=1536%2C1140&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=2048%2C1520&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=1000%2C742&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you wanted to do this in DevTools instead, you could filter your Network requests by CSS, find the stylesheet that you want to turn off, right-click and block it, and re-load. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1886\" height=\"1018\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?resize=1886%2C1018&#038;ssl=1\" alt=\"DevTools window screenshot with the Network panel open and the select menu open on a listed stylsheet with the option to block the request URL highlighted in bright blue.\" class=\"wp-image-360934\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?w=1886&amp;ssl=1 1886w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?resize=300%2C162&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?resize=1024%2C553&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?resize=768%2C415&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?resize=1536%2C829&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?resize=1000%2C540&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I&#8217;ve been <a href=\"https://css-tricks.com/taking-control-cssjs-wordpress-plugins-load/\">fighting this fight</a> for ages, dequeuing scripts and styles in WordPress that I don&#8217;t want. </p>\n\n\n\n<p>Removing totally unused stylesheets is an obvious win, but there is the more squirrely issue of removing <a href=\"https://css-tricks.com/how-do-you-remove-unused-css-from-a-site/\">unused CSS</a>. I mention in that post the one-true-way of really knowing if any particular CSS is unused, which is attaching a <code>background-image</code> to every selector and then checking the server logs after a decent amount of production time to see which of those images were never requested. Stoyan corroborates my story here:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>UnCSS is sort of a “lab”. The “real world” may surprise you. So a trick we did at SomeCompany Inc. was to instrument all the CSS declarations at build time, where each selector gets a 1×1 transparent background image. Then rummage through the server logs after a week or so to see what is actually used.</p></blockquote>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-me-not-bookmarklet/\">Using the CSS Me Not Bookmarklet to See (and Disable) CSS Files</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Stoyan is absolutely correct. As much as we all love CSS, it’s still an important player in how websites load and using less of it is a good thing. He has a neat new bookmarklet called CSS Me Not to help diagnose unnecessary CSS files, but we’ll get to that in a moment.\n\n\n\nThe [problem] is that CSS is in the critical path, it blocks rendering and often even JavaScript execution. We love CSS, it’s magic, it can do unbelievable feats and fix broken UIs and manipulate images and draw amazing pictures. We love CSS. We just want… less of it, because of its inherently blocking nature.\n\n\n\nSometimes our sites use entire stylesheets that are simply unnecessary. I hate to admit it, but WordPress is a notorious offender here, loading stylesheets for plugins and blocks that you might not even really be using. I’m in that position on this site as I write. I just haven’t found the time to root out a couple of little stylesheets I don’t need from loading.\n\n\n\n\n\n\n\nStoyan created a quick bookmarklet called CSS Me Not to see all those CSS files. The big benefit, of course, is that it lets you know what you’re up against.\n\n\n\nYou could find these stylesheets in DevTools as well, but the CSS Me Not bookmarklet makes it extra easy and has a killer bonus feature: turning off those stylesheets. Testing the bookmarklet here on CSS-Tricks, I can see four stylesheets that WordPress loads (because of settings and plugins) that I know I don’t need. \n\n\n\n\n\n\n\nIf you wanted to do this in DevTools instead, you could filter your Network requests by CSS, find the stylesheet that you want to turn off, right-click and block it, and re-load. \n\n\n\n\n\n\n\nI’ve been fighting this fight for ages, dequeuing scripts and styles in WordPress that I don’t want. \n\n\n\nRemoving totally unused stylesheets is an obvious win, but there is the more squirrely issue of removing unused CSS. I mention in that post the one-true-way of really knowing if any particular CSS is unused, which is attaching a background-image to every selector and then checking the server logs after a decent amount of production time to see which of those images were never requested. Stoyan corroborates my story here:\n\n\n\nUnCSS is sort of a “lab”. The “real world” may surprise you. So a trick we did at SomeCompany Inc. was to instrument all the CSS declarations at build time, where each selector gets a 1×1 transparent background image. Then rummage through the server logs after a week or so to see what is actually used.\n\nUsing the CSS Me Not Bookmarklet to See (and Disable) CSS Files originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-15T00:06:56.000Z",
      "date_modified": "2022-01-15T00:06:56.000Z",
      "_plugin": {
        "pageFilename": "dd67f0e4d541cc98617a4e6a6abb171d37440522a660c0aadfc172c23e0cbcd6.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360864",
      "url": "https://css-tricks.com/mondrian-art-in-css-from-5-code-artists/",
      "title": "Mondrian Art in CSS From 5 Code Artists",
      "summary": "Mondrian is famous for paintings with big thick black lines forming a grid, where each cell is white, red, yellow, or blue. This aesthetic pairs well with the notoriously rectangular web, and that hasn’t gone unnoticed over the years with …\n\nMondrian Art in CSS From 5 Code Artists originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Mondrian is famous for paintings with big thick black lines forming a grid, where each cell is white, red, yellow, or blue. This aesthetic pairs well with the notoriously rectangular web, and that hasn&#8217;t gone unnoticed over the years with CSS developers. I saw some Mondrian Art in CSS going around the other day and figured I&#8217;d go looking for others I&#8217;ve seen over the years and round them up.</p>\n\n\n\n<span id=\"more-360864\"></span>\n\n\n<h3 id=\"vasilis-van-gemertwhat-if-mondrian-used-css-instead-of-paint\">Vasilis van Gemert:<br><a href=\"https://vasilis.nl/nerd/what-if-mondriaan-used-css-instead-of-paint/\" rel=\"noopener\">What if Mondrian used CSS instead of paint?</a></h3>\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Many people have tried to recreate a work of art by Mondriaan with CSS. It seems like a nice and simple exercise: rectangles are easy with CSS, and now with grid, it is easy to recreate most of his works. I tried it as well, and it turned out to be a bit more complicated than I thought. And the results are, well,&nbsp;surprising.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"3336\" height=\"3178\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=3336%2C3178&#038;ssl=1\" alt=\"Screenshot of a webpage with a large serif font in various sizes reading What if Mondrian Used CSS instead of Paint? above two paragraphs discussing Mondrian Art in CSS.\" class=\"wp-image-361759\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?w=3336&amp;ssl=1 3336w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=300%2C286&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=1024%2C976&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=768%2C732&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=1536%2C1463&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=2048%2C1951&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=1000%2C953&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"jen-simmons-labmondrian-art-in-css-grid\">Jen Simmons Lab:<br><a href=\"https://labs.jensimmons.com/2017/01-011.html\" rel=\"noopener\">Mondrian Art in CSS Grid</a></h3>\n\n\n<p>I love how Jen went the extra mile with the texture. Like most of these examples, <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">CSS grid</a> is used heavily.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2750\" height=\"2790\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=2750%2C2790&#038;ssl=1\" alt=\"Mondrian Art in CSS Grid from Jen Simmons. Includes rough grungy texture across the entire piece.\" class=\"wp-image-361760\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?w=2750&amp;ssl=1 2750w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=296%2C300&amp;ssl=1 296w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=1009%2C1024&amp;ssl=1 1009w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=768%2C779&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=1514%2C1536&amp;ssl=1 1514w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=2019%2C2048&amp;ssl=1 2019w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=1000%2C1015&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=100%2C100&amp;ssl=1 100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_aNjXLz\" src=\"//codepen.io/anon/embed/aNjXLz?height=550&amp;theme-id=1&amp;slug-hash=aNjXLz&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed aNjXLz\" title=\"CodePen Embed aNjXLz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"jen-schiffervar-t-piet-mondrian\">Jen Schiffer:<br><a href=\"http://vart.institute/mondrian/\" rel=\"noopener\"><code>var t;</code>: Piet Mondrian</a></h3>\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>I started with Mondrian not because he is my favorite artist (he is not), or that his work is very recognizeable (it is), but because I thought it would be a fun (yes) and easy start (lol nope) to this project.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2874\" height=\"2824\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=2874%2C2824&#038;ssl=1\" alt=\"Mondrian Art in CSS randomized 12 times in a 4 by 3 grid of boxes. A bright yellow header is above the grid bearing the site title: var t.\" class=\"wp-image-361762\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?w=2874&amp;ssl=1 2874w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=300%2C295&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=1024%2C1006&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=768%2C755&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=1536%2C1509&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=2048%2C2012&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=1000%2C983&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yoseD\" src=\"//codepen.io/anon/embed/yoseD?height=550&amp;theme-id=1&amp;slug-hash=yoseD&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yoseD\" title=\"CodePen Embed yoseD\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"riley-wongmake-your-own-mondrianstyle-painting-with-code\">Riley Wong:<br><a href=\"https://codepen.io/nancypwong/pen/vZaLXj\" rel=\"noopener\">Make Your Own Mondrian-Style Painting with Code</a></h3>\n\n\n<p>There is a <a href=\"https://github.com/rileynwong/mondrian\" rel=\"noopener\">12-step tutorial</a> on GitHub.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vZaLXj\" src=\"//codepen.io/anon/embed/vZaLXj?height=450&amp;theme-id=1&amp;slug-hash=vZaLXj&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vZaLXj\" title=\"CodePen Embed vZaLXj\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"adam-fuhrercss-mondrian\"><br>Adam Fuhrer:<br><a href=\"https://github.com/adamfuhrer/css-mondrian\" rel=\"noopener\">CSS Mondrian</a></h3>\n\n\n<blockquote class=\"wp-block-quote\"><p>Generative Piet Mondrian style art using CSS grid.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2788\" height=\"2788\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=2788%2C2788&#038;ssl=1\" alt=\"Screenshot of a full page Mondrian art example. There is a refresh button centered at the bottom of the page.\" class=\"wp-image-361763\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?w=2788&amp;ssl=1 2788w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=1024%2C1024&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=768%2C768&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=1536%2C1536&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=2048%2C2048&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=1000%2C1000&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=100%2C100&amp;ssl=1 100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"john-broerscss-mondriaan-grid\">John Broers:<br><a href=\"https://johnbroers.nl/portfolio/css-mondriaan-grid\" rel=\"noopener\">CSS Mondriaan Grid</a></h3>\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2690\" height=\"2284\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=2690%2C2284&#038;ssl=1\" alt=\"An example of Mondrian Art in CSS with a &quot;Generate New&quot; option. The example is a square box with plenty of padding around it on the white background page.\" class=\"wp-image-361764\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?w=2690&amp;ssl=1 2690w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=300%2C255&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=1024%2C869&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=768%2C652&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=1536%2C1304&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=2048%2C1739&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=1000%2C849&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/mondrian-art-in-css-from-5-code-artists/\">Mondrian Art in CSS From 5 Code Artists</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Mondrian is famous for paintings with big thick black lines forming a grid, where each cell is white, red, yellow, or blue. This aesthetic pairs well with the notoriously rectangular web, and that hasn’t gone unnoticed over the years with CSS developers. I saw some Mondrian Art in CSS going around the other day and figured I’d go looking for others I’ve seen over the years and round them up.\n\n\n\n\n\n\nVasilis van Gemert:What if Mondrian used CSS instead of paint?\n\n\nMany people have tried to recreate a work of art by Mondriaan with CSS. It seems like a nice and simple exercise: rectangles are easy with CSS, and now with grid, it is easy to recreate most of his works. I tried it as well, and it turned out to be a bit more complicated than I thought. And the results are, well, surprising.\n\n\n\n\n\n\nJen Simmons Lab:Mondrian Art in CSS Grid\n\n\nI love how Jen went the extra mile with the texture. Like most of these examples, CSS grid is used heavily.\n\n\n\n\n\n\n\nCodePen Embed Fallback\n\n\nJen Schiffer:var t;: Piet Mondrian\n\n\nI started with Mondrian not because he is my favorite artist (he is not), or that his work is very recognizeable (it is), but because I thought it would be a fun (yes) and easy start (lol nope) to this project.\n\n\n\n\n\n\n\nCodePen Embed Fallback\n\n\nRiley Wong:Make Your Own Mondrian-Style Painting with Code\n\n\nThere is a 12-step tutorial on GitHub.\n\n\n\nCodePen Embed Fallback\n\n\nAdam Fuhrer:CSS Mondrian\n\n\nGenerative Piet Mondrian style art using CSS grid.\n\n\n\n\n\n\nJohn Broers:CSS Mondriaan Grid\n\n\n\n\nMondrian Art in CSS From 5 Code Artists originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-14T18:15:03.000Z",
      "date_modified": "2022-01-14T18:15:03.000Z",
      "_plugin": {
        "pageFilename": "01c9999244fd922995f016ddadaadf0df38b06e46156b405025fa61a5d0b5ff8.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360781",
      "url": "https://css-tricks.com/making-your-first-custom-svelte-transition/",
      "title": "How to Build Your First Custom Svelte Transition",
      "summary": "The Svelte transition API provides a first-class way to animate your components when they enter or leave the document, including custom Svelte transitions. By default, the transition directive uses CSS animations, which generally offer better performance and allow the browser’s …\n\nHow to Build Your First Custom Svelte Transition originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>The <a href=\"https://svelte.dev/docs#run-time-svelte-transition\" rel=\"noopener\">Svelte <code>transition</code> API</a> provides a first-class way to animate your components when they enter or leave the document, including custom Svelte transitions. By default, the <code>transition</code> directive uses CSS animations, which generally offer better performance and allow the browser’s main thread to remain unblocked. The API is as simple as this: <code>&lt;element transition:transitionFunction /&gt;</code>. You can also specify <code>in</code> or <code>out</code> directives which are uni-directional transitions, only running when the element is mounted <em>or</em> unmounted.</p>\n\n\n\n<span id=\"more-360781\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"546\" height=\"390\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-svelte-transition-example.gif?resize=546%2C390&#038;ssl=1\" alt=\"An animated example of a custom Svelte transition showing a to do list. An item is typed and animated into the list of items when entered. Clicking a done button animates the item out of view.\" class=\"wp-image-360795\" data-recalc-dims=\"1\"/><figcaption>Example of a working Svelte transition (<a href=\"#demo-jump\">jump to demo</a>)</figcaption></figure>\n\n\n\n<p>Svelte offers a runtime <a href=\"https://svelte.dev/docs#svelte_transition\" rel=\"noopener\"><code>svelte/transition</code></a> package that ships with seven prepackaged Svelte transition functions, all of which can be dropped in and tweaked to your heart’s desire. Pairing this with the <a href=\"https://svelte.dev/docs#svelte_easing\" rel=\"noopener\"><code>svelte/easing</code></a> package, allows for a wide swath of interactions, without writing any of the transition code yourself. Play around with <a href=\"https://svelte.dev/repl/52c1e7ae1df14a4cbecca590080f0970?version=3.44.2\" rel=\"noopener\">different transitions and easing functions</a> to get a feel for what is possible.</p>\n\n\n\n<iframe src=\"https://codesandbox.io/embed/svelte-transition-playground-hprbi?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"svelte-transition-playground\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n\n<p class=\"is-style-explanation ticss-f6fd473d\">Looking for instructions on how to get started with Svelte? We have a <a href=\"https://css-tricks.com/getting-acquainted-with-svelte-the-new-framework-on-the-block/\">solid overview</a> for you to check out.</p>\n\n\n<h3 id=\"the-svelte-custom-transition-api\">The Svelte Custom Transition API</h3>\n\n\n<p>If you need even more control than what the Svelte Transition API offers out of the box, Svelte permits you to specify your own custom transition function, as long as you adhere to a few conventions. From the docs, here’s what the custom transition API looks like:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">transition = (node: HTMLElement, params: any) => {\n  delay?: number,\n  duration?: number,\n  easing?: (t: number) => number,\n  css?: (t: number, u: number) => string,\n  tick?: (t: number, u: number) => void\n} </code></pre>\n\n\n\n<p>Let’s break it down. A transition function takes a reference to the DOM node where the <code>transition</code> directive is used and returns an object with some parameters that control the animation and, most importantly, a <code>css</code> or <code>tick</code> function.</p>\n\n\n\n<p>The <code>css</code> function’s job is to return a string of CSS that describes the animation, typically including some kind of transform or opacity change. Alternatively, you can opt to return a <code>tick</code> function, which lets you control every aspect of the animation with the power JavaScript, but pays a performance penalty since this type of transition does not use CSS animations.</p>\n\n\n\n<p>Both the <code>css</code> and <code>tick</code> functions take two parameters called <code>(t, u)</code> by convention. <code>t</code> is a decimal number that travels from <code>0.00</code> to <code>1.00</code> while the element is entering the DOM and from <code>1.00</code> back to <code>0.00</code> when the element is leaving. The <code>u</code> parameter is the inverse of <code>t</code> or <code>1 - t</code> at any given moment. For example, if you return a string of <code>transform: scale(${t})</code>, your element would smoothly animate from <code>0</code> to <code>1</code> on enter, and vice versa on exit.</p>\n\n\n\n<p>These concepts may seem a bit abstract, so let’s solidify them by building our own custom Svelte transition!</p>\n\n\n<h3 id=\"building-your-first-custom-svelte-transition\">Building your first custom Svelte transition</h3>\n\n\n<p>First, let’s set up some boilerplate that allows us to toggle an element’s existence in the DOM using a Svelte <code>#if</code> block. Remember, Svelte transitions only run when an element is actually leaving or entering the DOM.</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  let showing = true\n&lt;/script>\n\n&lt;label for=\"showing\">\n  Showing\n&lt;/label>\n&lt;input id=\"showing\" type=\"checkbox\" bind:checked={showing} />\n\n{#if showing}\n  &lt;h1>Hello custom transition!&lt;/h1>\n{/if}</code></pre>\n\n\n\n<p>You should be able to toggle the checkbox and see our element starkly appear and disappear in place.</p>\n\n\n\n<iframe src=\"https://codesandbox.io/embed/svelte-custom-transition-wip-v2gs9?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"svelte-custom-transition-wip\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n\n<p>Next, let’s set up our custom Svelte transition function and get it wired up to our element.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"4,5,6,15\"><code markup=\"tt\">&lt;script>\n  let showing = true\n  // Custom transition function\n  function whoosh(node) {\n    console.log(node)\n  }\n&lt;/script>\n\n&lt;label for=\"showing\">\n  Showing\n&lt;/label>\n&lt;input id=\"showing\" type=\"checkbox\" bind:checked={showing} />\n\n{#if showing}\n  &lt;h1 transition:whoosh>Hello custom transition!&lt;/h1>\n{/if}</code></pre>\n\n\n\n<p>Now, if you toggle the checkbox, you will see the <code>&lt;h1&gt;</code> element logged to the console. This proves we have the custom transition connected properly! We won’t actually use the DOM node in our example, but it’s often useful to have access to the element to reference its current styles or dimensions.</p>\n\n\n\n<p>For our element to do any animation at all, we need to return an object that contains a <code>css</code> (or <code>tick</code>) function. Let’s have our <code>css</code> function return a single line of CSS that scales our element. We’ll also return a <code>duration</code> property that controls how long the animation takes.</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  function swoop() {\n    return {\n      duration: 1000,\n      css: () => `transform: scale(.5)`\n    }\n  }\n  let showing = true\n&lt;/script>\n\n&lt;!-- markup --></code></pre>\n\n\n\n<p>We’ve got something moving! You will notice our element jumps straight to <code>.5</code> scale when toggling the checkbox. This is something, but it would feel much better if it <em>smoothly</em> transitioned. That’s where the <code>(t, u)</code> parameters come in.</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"5\"><code markup=\"tt\">&lt;script>\n  function swoop() {\n    return {\n      duration: 1000,\n      css: (t) => `transform: scale(${t})`\n    }\n  }\n  let showing = true\n&lt;/script>\n\n&lt;!-- markup --></code></pre>\n\n\n\n<p>Now we are talking! Remember, <code>t</code> rolls smoothly from <code>0.00</code> to <code>1.00</code> when an element enters, and vice versa when it leaves. This allows us to achieve the smooth effect we want. In fact, what we just wrote is essentially the built-in <code>scale</code> transition from the <code>svelte/transition</code> package.</p>\n\n\n\n<p>Let’s get a little bit fancier. To live up to our custom Svelte transition’s namesake, <code>swoop</code>, let’s add a <code>translateX</code> to our <code>transform</code>, so that our element zooms in and out from the side.</p>\n\n\n\n<p>I want to challenge you to attempt the implementation first before we continue. Trust me, it will be fun! Assume that we want to translate to 100% when the element is leaving and back to 0% when it enters.</p>\n\n\n\n<p>[waiting&#8230;]</p>\n\n\n\n<p>How did it go? Want to compare answers?</p>\n\n\n\n<p>Here’s what I got:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">css: (t, u) => `transform: scale(${t}) translateX(${u * 100}%);`</code></pre>\n\n\n\n<p>It’s okay if you have something different! Let me break down what I did.</p>\n\n\n\n<p>The key thing here is the usage of the second parameter in the <code>css</code> function. If we think about our animation while the element is entering the screen, we want to <strong>end up</strong> at <code>scale(1) translateX(0%)</code>, so we can’t use unaltered <code>t</code> for both the <code>scale</code> and the <code>transform</code>. This is the convenience behind the <code>u</code> parameter — it is the inverse of <code>t</code> at any given moment, so we know it will be <code>0</code> when <code>t</code> is <code>1</code>! I then multiplied <code>u</code> by 100 to get the percentage value and tacked on the <code>%</code> sign at the end.</p>\n\n\n\n<p>Learning the interplay between <code>t</code> and <code>u</code> is an important piece of the custom transition puzzle in Svelte. These two parameters enable a world of dynamism for your animations; they can be divided, multiplied, twisted, or contorted into whatever needs you have.</p>\n\n\n\n<p>Let’s slap my favorite <code>svelte/easing</code> function on our transition and call it a day:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"2,6\"><code markup=\"tt\">&lt;script>\n  import { elasticOut } from 'svelte/easing'\n  function swoop() {\n    return {\n      duration: 1000,\n      easing: elasticOut,\n      css: (t, u) => `transform: scale(${t}) translateX(${u * 100}%)`\n    }\n  }\n  let showing = true\n&lt;/script>\n\n&lt;label for=\"showing\">\n  Showing\n&lt;/label>\n&lt;input id=\"showing\" type=\"checkbox\" bind:checked={showing} />\n\n{#if showing}\n  &lt;h1 transition:swoop>Hello custom transition!&lt;/h1>\n{/if}</code></pre>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>Congratulations! You can now build a custom Svelte transition function. We have only scratched the surface of what is possible but I hope you feel equipped with the tools to explore even further. I would highly recommend reading the <a href=\"https://svelte.dev/docs#transition_fn\" rel=\"noopener\">docs</a> and going through the <a href=\"https://svelte.dev/tutorial/transition\" rel=\"noopener\">official tutorial</a> to gain even more familiarity.</p>\n\n\n\n<iframe id=\"demo-jump\" src=\"https://codesandbox.io/embed/svelte-custom-transition-fall-zf5k8?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"svelte-custom-transition-fall\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/making-your-first-custom-svelte-transition/\">How to Build Your First Custom Svelte Transition</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "The Svelte transition API provides a first-class way to animate your components when they enter or leave the document, including custom Svelte transitions. By default, the transition directive uses CSS animations, which generally offer better performance and allow the browser’s main thread to remain unblocked. The API is as simple as this: <element transition:transitionFunction />. You can also specify in or out directives which are uni-directional transitions, only running when the element is mounted or unmounted.\n\n\n\n\n\n\n\nExample of a working Svelte transition (jump to demo)\n\n\n\nSvelte offers a runtime svelte/transition package that ships with seven prepackaged Svelte transition functions, all of which can be dropped in and tweaked to your heart’s desire. Pairing this with the svelte/easing package, allows for a wide swath of interactions, without writing any of the transition code yourself. Play around with different transitions and easing functions to get a feel for what is possible.\n\n\n\n\n\n\n\nLooking for instructions on how to get started with Svelte? We have a solid overview for you to check out.\n\n\nThe Svelte Custom Transition API\n\n\nIf you need even more control than what the Svelte Transition API offers out of the box, Svelte permits you to specify your own custom transition function, as long as you adhere to a few conventions. From the docs, here’s what the custom transition API looks like:\n\n\n\ntransition = (node: HTMLElement, params: any) => {\n  delay?: number,\n  duration?: number,\n  easing?: (t: number) => number,\n  css?: (t: number, u: number) => string,\n  tick?: (t: number, u: number) => void\n} \n\n\n\nLet’s break it down. A transition function takes a reference to the DOM node where the transition directive is used and returns an object with some parameters that control the animation and, most importantly, a css or tick function.\n\n\n\nThe css function’s job is to return a string of CSS that describes the animation, typically including some kind of transform or opacity change. Alternatively, you can opt to return a tick function, which lets you control every aspect of the animation with the power JavaScript, but pays a performance penalty since this type of transition does not use CSS animations.\n\n\n\nBoth the css and tick functions take two parameters called (t, u) by convention. t is a decimal number that travels from 0.00 to 1.00 while the element is entering the DOM and from 1.00 back to 0.00 when the element is leaving. The u parameter is the inverse of t or 1 - t at any given moment. For example, if you return a string of transform: scale(${t}), your element would smoothly animate from 0 to 1 on enter, and vice versa on exit.\n\n\n\nThese concepts may seem a bit abstract, so let’s solidify them by building our own custom Svelte transition!\n\n\nBuilding your first custom Svelte transition\n\n\nFirst, let’s set up some boilerplate that allows us to toggle an element’s existence in the DOM using a Svelte #if block. Remember, Svelte transitions only run when an element is actually leaving or entering the DOM.\n\n\n\n<script>\n  let showing = true\n</script>\n\n<label for=\"showing\">\n  Showing\n</label>\n<input id=\"showing\" type=\"checkbox\" bind:checked={showing} />\n\n{#if showing}\n  <h1>Hello custom transition!</h1>\n{/if}\n\n\n\nYou should be able to toggle the checkbox and see our element starkly appear and disappear in place.\n\n\n\n\n\n\n\nNext, let’s set up our custom Svelte transition function and get it wired up to our element.\n\n\n\n<script>\n  let showing = true\n  // Custom transition function\n  function whoosh(node) {\n    console.log(node)\n  }\n</script>\n\n<label for=\"showing\">\n  Showing\n</label>\n<input id=\"showing\" type=\"checkbox\" bind:checked={showing} />\n\n{#if showing}\n  <h1 transition:whoosh>Hello custom transition!</h1>\n{/if}\n\n\n\nNow, if you toggle the checkbox, you will see the <h1> element logged to the console. This proves we have the custom transition connected properly! We won’t actually use the DOM node in our example, but it’s often useful to have access to the element to reference its current styles or dimensions.\n\n\n\nFor our element to do any animation at all, we need to return an object that contains a css (or tick) function. Let’s have our css function return a single line of CSS that scales our element. We’ll also return a duration property that controls how long the animation takes.\n\n\n\n<script>\n  function swoop() {\n    return {\n      duration: 1000,\n      css: () => `transform: scale(.5)`\n    }\n  }\n  let showing = true\n</script>\n\n<!-- markup -->\n\n\n\nWe’ve got something moving! You will notice our element jumps straight to .5 scale when toggling the checkbox. This is something, but it would feel much better if it smoothly transitioned. That’s where the (t, u) parameters come in.\n\n\n\n<script>\n  function swoop() {\n    return {\n      duration: 1000,\n      css: (t) => `transform: scale(${t})`\n    }\n  }\n  let showing = true\n</script>\n\n<!-- markup -->\n\n\n\nNow we are talking! Remember, t rolls smoothly from 0.00 to 1.00 when an element enters, and vice versa when it leaves. This allows us to achieve the smooth effect we want. In fact, what we just wrote is essentially the built-in scale transition from the svelte/transition package.\n\n\n\nLet’s get a little bit fancier. To live up to our custom Svelte transition’s namesake, swoop, let’s add a translateX to our transform, so that our element zooms in and out from the side.\n\n\n\nI want to challenge you to attempt the implementation first before we continue. Trust me, it will be fun! Assume that we want to translate to 100% when the element is leaving and back to 0% when it enters.\n\n\n\n[waiting…]\n\n\n\nHow did it go? Want to compare answers?\n\n\n\nHere’s what I got:\n\n\n\ncss: (t, u) => `transform: scale(${t}) translateX(${u * 100}%);`\n\n\n\nIt’s okay if you have something different! Let me break down what I did.\n\n\n\nThe key thing here is the usage of the second parameter in the css function. If we think about our animation while the element is entering the screen, we want to end up at scale(1) translateX(0%), so we can’t use unaltered t for both the scale and the transform. This is the convenience behind the u parameter — it is the inverse of t at any given moment, so we know it will be 0 when t is 1! I then multiplied u by 100 to get the percentage value and tacked on the % sign at the end.\n\n\n\nLearning the interplay between t and u is an important piece of the custom transition puzzle in Svelte. These two parameters enable a world of dynamism for your animations; they can be divided, multiplied, twisted, or contorted into whatever needs you have.\n\n\n\nLet’s slap my favorite svelte/easing function on our transition and call it a day:\n\n\n\n<script>\n  import { elasticOut } from 'svelte/easing'\n  function swoop() {\n    return {\n      duration: 1000,\n      easing: elasticOut,\n      css: (t, u) => `transform: scale(${t}) translateX(${u * 100}%)`\n    }\n  }\n  let showing = true\n</script>\n\n<label for=\"showing\">\n  Showing\n</label>\n<input id=\"showing\" type=\"checkbox\" bind:checked={showing} />\n\n{#if showing}\n  <h1 transition:swoop>Hello custom transition!</h1>\n{/if}\n\n\nWrapping up\n\n\nCongratulations! You can now build a custom Svelte transition function. We have only scratched the surface of what is possible but I hope you feel equipped with the tools to explore even further. I would highly recommend reading the docs and going through the official tutorial to gain even more familiarity.\n\n\n\n\n\nHow to Build Your First Custom Svelte Transition originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-14T15:24:19.000Z",
      "date_modified": "2022-01-14T15:24:19.000Z",
      "_plugin": {
        "pageFilename": "3d683d7b5ec2130aa7bcfa7be08649afdcaa80cefd4e9ce11938889468f8f607.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360939",
      "url": "https://css-tricks.com/8-accessibility-links-january-2022/",
      "title": "8 Helpful Accessibility Links for January 2022",
      "summary": "Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. Accessibility is one of those things! Here’s a list of related links to other articles that I’ve been saving up and …\n\n8 Helpful Accessibility Links for January 2022 originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. <a href=\"https://css-tricks.com/tag/accessibility/\">Accessibility is one of those things!</a> Here’s a list of related links to other articles that I’ve been saving up and think are worth sharing.</p>\n\n\n\n<span id=\"more-360939\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"667\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?resize=1024%2C667&#038;ssl=1\" alt=\"Screenshot of the Accessibility Maze homepage.\" class=\"wp-image-361740\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?resize=1024%2C667&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?resize=768%2C500&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?resize=1536%2C1000&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?resize=1000%2C651&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?w=1754&amp;ssl=1 1754w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<ul class=\"is-style-super-link-list\"><li><a href=\"https://alvaromontoro.com/blog/67989/myths-about-web-accessibility\" rel=\"noopener\">Myths about Web Accessibility</a> — Alvaro Montoro covers some classics. My favorite is &#8220;accessibility is for people with disabilities.&#8221; Accessibility is for people with disabilities, because they are people, and accessibility is for people.</li><li><a href=\"https://a11ymyths.com/\" rel=\"noopener\">Accessibility Myths</a> — Speaking of myths, Sergei Kriger built this entire site for them. I&#8217;ll cherry pick &#8220;Accessibility can be achieved by only adding ARIA attributes&#8221;, which is famously wrong as the first rule of ARIA is <a href=\"https://w3c.github.io/using-aria/#rule1\" rel=\"noopener\">not using it</a>.</li><li><a href=\"https://web.dev/learn/forms/fields/\" rel=\"noopener\">Form fields in depth</a> — While perhaps not specifically about accessiblity, forms are among the most crucial things to get accessibility right on and go wrong far too often. This new guide from Google incorporates accessibility throughout and gets <a href=\"https://web.dev/learn/forms/accessibility/\" rel=\"noopener\">specifically into it</a> as well.  </li><li><a href=\"https://de.ryerson.ca/games/accessibility/\" rel=\"noopener\">Accessibility Maze</a> — Build by the Digital Education Strategies team in The G. Raymond Chang School of Continuing Education at Ryerson University. So fun! You can (and largely have to) play the whole game on the keyboard.</li><li><a href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/Focusgroup/explainer.md\" rel=\"noopener\">HTML focusgroup attribute</a> — You know how when you&#8217;ve focused on one of the radio buttons in a group of radio buttons, then you can use the arrow keys to move between them? Or how the up/down arrows work to navigate the items of a native select? You could call that &#8220;focus group navigation&#8221;, and unfortuantely we can&#8217;t tap into that behavior whenever we want to. But what if we could with something as simple as a <code>focusgrup</code> attribute in HTML? That&#8217;d be cool, someday.</li><li><a href=\"https://www.smashingmagazine.com/2021/11/dyslexia-friendly-mode-website/\" rel=\"noopener\">Adding A Dyslexia-Friendly Mode To A Website</a> — I always think of the <a href=\"https://www.dyslexiefont.com/\" rel=\"noopener\">Dyslexie font</a>, but clearly there is a lot more to it than just using the right font. A lot more spacing, especially typographically, and less clutter is helpful. <a href=\"https://codepen.io/smashingmag/pen/dyzwqXm\" rel=\"noopener\">See the demo.</a> A somewhat rare use-case of <code>word-spacing</code> in use there. Note there is <a href=\"https://www.linkedin.com/pulse/dyslexic-myths-presented-truths-gareth-ford-williams/\" rel=\"noopener\">some pushback to this article</a> via Gareth Ford Williams. </li><li><a href=\"https://hiddedevries.nl/en/blog/2021-12-05-how-many-people-with-disabilities-use-our-site\" rel=\"noopener\">How many people with disabilities use our site?</a> — Hidde de Vries says it&#8217;s probably not a big number, but that doesn&#8217;t matter (love the quote from Tim Cook). Still, if you need to find a business upside, Hidde points out a report that cites 15-20% of the world’s population has a disability. </li><li><a href=\"https://vimeo.com/654497457\" rel=\"noopener\">&#x1f3a5; Building The Most Inaccessible Site Possible</a> — Manuel Matuzovic proves you can get 100&#8217;s across the board on a Lighthouse test and yet make an entirely unusable site. It&#8217;s like learning in reverse. If you know what causes problems, you know how not to do those things.</li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/8-accessibility-links-january-2022/\">8 Helpful Accessibility Links for January 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. Accessibility is one of those things! Here’s a list of related links to other articles that I’ve been saving up and think are worth sharing.\n\n\n\n\n\n\n\n\n\n\n\nMyths about Web Accessibility — Alvaro Montoro covers some classics. My favorite is “accessibility is for people with disabilities.” Accessibility is for people with disabilities, because they are people, and accessibility is for people.Accessibility Myths — Speaking of myths, Sergei Kriger built this entire site for them. I’ll cherry pick “Accessibility can be achieved by only adding ARIA attributes”, which is famously wrong as the first rule of ARIA is not using it.Form fields in depth — While perhaps not specifically about accessiblity, forms are among the most crucial things to get accessibility right on and go wrong far too often. This new guide from Google incorporates accessibility throughout and gets specifically into it as well.  Accessibility Maze — Build by the Digital Education Strategies team in The G. Raymond Chang School of Continuing Education at Ryerson University. So fun! You can (and largely have to) play the whole game on the keyboard.HTML focusgroup attribute — You know how when you’ve focused on one of the radio buttons in a group of radio buttons, then you can use the arrow keys to move between them? Or how the up/down arrows work to navigate the items of a native select? You could call that “focus group navigation”, and unfortuantely we can’t tap into that behavior whenever we want to. But what if we could with something as simple as a focusgrup attribute in HTML? That’d be cool, someday.Adding A Dyslexia-Friendly Mode To A Website — I always think of the Dyslexie font, but clearly there is a lot more to it than just using the right font. A lot more spacing, especially typographically, and less clutter is helpful. See the demo. A somewhat rare use-case of word-spacing in use there. Note there is some pushback to this article via Gareth Ford Williams. How many people with disabilities use our site? — Hidde de Vries says it’s probably not a big number, but that doesn’t matter (love the quote from Tim Cook). Still, if you need to find a business upside, Hidde points out a report that cites 15-20% of the world’s population has a disability. 🎥 Building The Most Inaccessible Site Possible — Manuel Matuzovic proves you can get 100’s across the board on a Lighthouse test and yet make an entirely unusable site. It’s like learning in reverse. If you know what causes problems, you know how not to do those things.\n\n8 Helpful Accessibility Links for January 2022 originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-13T20:57:41.000Z",
      "date_modified": "2022-01-13T20:57:41.000Z",
      "_plugin": {
        "pageFilename": "a397c809c1aa19b8083a483294492fea4f76305718b9fe29d214bdf4323e5bbb.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360423",
      "url": "https://css-tricks.com/sass-default-parameters/",
      "title": "A Practical Tip For Using Sass Default Parameters",
      "summary": "Sass offers functions and mixins that accept parameters. You can use Sass default parameters, that is, parameters that have a value even if you don’t provide them when the function or mixin is called. \nLet’s focus on mixins here. …\n\nA Practical Tip For Using Sass Default Parameters originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Sass offers functions and mixins that <a href=\"https://sass-lang.com/documentation/at-rules/mixin#arguments\" rel=\"noopener\">accept parameters</a>. You can use Sass default parameters, that is, parameters that have a value even if you don&#8217;t provide them when the function or mixin is called. </p>\n\n\n\n<p>Let&#8217;s focus on mixins here. Here&#8217;s the syntax of a mixin:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin foo($a, $b, $c) {\n  // I can use $a, $b, and $c in here, but there is a risk they are null\n}\n\n.el {\n  @include foo(1, 2, 3);\n\n  // if I tried to do `@include foo;`\n  // ... which is valid syntax... \n  // I'd get `Error: Missing argument $a.` from Sass\n}</code></pre>\n\n\n\n<p>It&#8217;s safer and more useful to set up default parameters in this Sass mixin:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin foo($a: 1, $b: 2, $c: 3) {\n}\n\n.el {\n  // Now this is fine\n  @include foo;\n\n  // AND I can send in params as well\n  @include foo(\"three\", \"little\", \"pigs\");\n}</code></pre>\n\n\n\n<p>But what if I wanted to send in <code>$b</code> and <code>$c</code>, but leave <code>$a</code> as the Sass default parameter? The trick is that you send in <em>named</em> parameters:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin foo($a: 1, $b: 2, $c: 3) {\n}\n\n.el {\n  // Only sending in the second two params, $a will be the default.\n  @include foo($b: 2, $c: 3);\n}</code></pre>\n\n\n<h3 id=\"a-reallife-example-using-sass-default-parameters\">A real-life example using Sass default parameters</h3>\n\n\n<p>Here&#8217;s a quick-y mixin that outputs what you need for very basic styled scrollbars (<a href=\"https://css-tricks.com/snippets/sass/custom-scrollbars-mixin/\">Kitty has one as well</a>):</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin scrollbars(\n  $size: 10px,\n  $foreground-color: #eee,\n  $background-color: #333\n) {\n  // For Google Chrome\n  &amp;::-webkit-scrollbar {\n    width: $size;\n    height: $size;\n  }\n  &amp;::-webkit-scrollbar-thumb {\n    background: $foreground-color;\n  }\n  &amp;::-webkit-scrollbar-track {\n    background: $background-color;\n  }\n\n  // Standard version (Firefox only for now)\n  scrollbar-color: $foreground-color $background-color;\n}</code></pre>\n\n\n\n<p>Now I can call it like this:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">.scrollable {\n  @include scrollbars;\n}\n\n.thick-but-otherwise-default-scrollable {\n  // I can skip $b and $c because they are second and third\n  @include scrollbars(30px);\n}\n\n.custom-colors-scrollable {\n  // I can skip the first param if all the others are named.\n  @include scrollbars($foreground-color: orange, $background-color: black);\n}\n\n.totally-custom-scrollable {\n  @include scrollbars(20px, red, black);\n}</code></pre>\n\n\n\n<p>I&#8217;m just noting this as I had to search around a bit to figure this out. I was trying stuff like sending empty strings or <code>null</code> as the first parameter in order to &#8220;skip&#8221; it, but that doesn&#8217;t work. Gotta do the named parameter approach. </p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/sass-default-parameters/\">A Practical Tip For Using Sass Default Parameters</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Sass offers functions and mixins that accept parameters. You can use Sass default parameters, that is, parameters that have a value even if you don’t provide them when the function or mixin is called. \n\n\n\nLet’s focus on mixins here. Here’s the syntax of a mixin:\n\n\n\n@mixin foo($a, $b, $c) {\n  // I can use $a, $b, and $c in here, but there is a risk they are null\n}\n\n.el {\n  @include foo(1, 2, 3);\n\n  // if I tried to do `@include foo;`\n  // ... which is valid syntax... \n  // I'd get `Error: Missing argument $a.` from Sass\n}\n\n\n\nIt’s safer and more useful to set up default parameters in this Sass mixin:\n\n\n\n@mixin foo($a: 1, $b: 2, $c: 3) {\n}\n\n.el {\n  // Now this is fine\n  @include foo;\n\n  // AND I can send in params as well\n  @include foo(\"three\", \"little\", \"pigs\");\n}\n\n\n\nBut what if I wanted to send in $b and $c, but leave $a as the Sass default parameter? The trick is that you send in named parameters:\n\n\n\n@mixin foo($a: 1, $b: 2, $c: 3) {\n}\n\n.el {\n  // Only sending in the second two params, $a will be the default.\n  @include foo($b: 2, $c: 3);\n}\n\n\nA real-life example using Sass default parameters\n\n\nHere’s a quick-y mixin that outputs what you need for very basic styled scrollbars (Kitty has one as well):\n\n\n\n@mixin scrollbars(\n  $size: 10px,\n  $foreground-color: #eee,\n  $background-color: #333\n) {\n  // For Google Chrome\n  &::-webkit-scrollbar {\n    width: $size;\n    height: $size;\n  }\n  &::-webkit-scrollbar-thumb {\n    background: $foreground-color;\n  }\n  &::-webkit-scrollbar-track {\n    background: $background-color;\n  }\n\n  // Standard version (Firefox only for now)\n  scrollbar-color: $foreground-color $background-color;\n}\n\n\n\nNow I can call it like this:\n\n\n\n.scrollable {\n  @include scrollbars;\n}\n\n.thick-but-otherwise-default-scrollable {\n  // I can skip $b and $c because they are second and third\n  @include scrollbars(30px);\n}\n\n.custom-colors-scrollable {\n  // I can skip the first param if all the others are named.\n  @include scrollbars($foreground-color: orange, $background-color: black);\n}\n\n.totally-custom-scrollable {\n  @include scrollbars(20px, red, black);\n}\n\n\n\nI’m just noting this as I had to search around a bit to figure this out. I was trying stuff like sending empty strings or null as the first parameter in order to “skip” it, but that doesn’t work. Gotta do the named parameter approach. \n\nA Practical Tip For Using Sass Default Parameters originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-13T15:17:28.000Z",
      "date_modified": "2022-01-13T15:17:28.000Z",
      "_plugin": {
        "pageFilename": "76ba4c50ef8b9a4f5c4fee9faa34b85a4fac821caf664f80e47949b7eeba8ec7.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361233",
      "url": "https://css-tricks.com/parcel-css/",
      "title": "Parcel CSS: A New CSS Parser, Transformer, and Minifier",
      "summary": "Hot off the presses from Devon Govett, creator of Parcel, is Parcel CSS:\n\nA CSS parser, transformer, and minifier written in Rust.\n\n\nNice. The CSS world could use a little processing shake up like this.\nI just wrote a …\n\nParcel CSS: A New CSS Parser, Transformer, and Minifier originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p><a href=\"https://twitter.com/devongovett/status/1481308471622516738\" rel=\"noopener\">Hot off the presses</a> from Devon Govett, creator of Parcel, is <a href=\"https://github.com/parcel-bundler/parcel-css\" rel=\"noopener\">Parcel CSS</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>A CSS parser, transformer, and minifier written in Rust.</p><p><a href=\"https://github.com/parcel-bundler/parcel-css#features\" rel=\"noopener\"></a></p></blockquote>\n\n\n\n<p>Nice. The CSS world could use a little processing shake up like this.</p>\n\n\n\n<p>I <a href=\"https://css-tricks.com/the-ui-fund/\">just wrote a few weeks ago</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Ya know how&nbsp;<a href=\"https://esbuild.github.io/\" rel=\"noopener\">esbuild</a>&nbsp;has seriously shaken things up for the JavaScript processing world? Maybe we need a cssbuild? It would process imports and do bundling (something we generally rely on Sass for). The point would be extreme speed. Maybe it would be plugin-based and compatible with the PostCSS API so that existing PostCSS plugins would work on it. Maybe it could make sourcemaps and do modification. Maybe it would run your Sass, too, I dunno. But something to spark the CSS ecosystem like that could be cool.</p></blockquote>\n\n\n\n<span id=\"more-361233\"></span>\n\n\n\n<p>Close! It looks like it <em>doesn&#8217;t</em> do bundling (<a href=\"https://twitter.com/devongovett/status/1481357003154939907\" rel=\"noopener\">standalone anyway</a>). I suppose it would have to just invent a syntax for that, as I think Sass somewhat regrets the ambiguity of how it uses <code>@import</code> just like native CSS does and I wouldn&#8217;t blame anyone for not wanting to go down that road. It&#8217;s tricky territory, for sure, as inventing syntax kinda puts it into a different category of tool. I think it would be worth it though, as breaking up CSS into smaller files but bundling them in development is like&#8230; a thing people do, and I could see really wanting to use this without having to necessarily commit to Parcel (which can bundle). </p>\n\n\n\n<p>So why run your CSS through this thing? From the docs, it looks like you&#8217;d wanna do that because&#8230;</p>\n\n\n\n<ul><li>it&#8217;s a minifier,</li><li>it does vendor prefixing,</li><li>it can process as CSS modules (<a href=\"https://github.com/css-modules/css-modules\" rel=\"noopener\">the classic library,</a> not the <a href=\"https://css-tricks.com/css-modules-the-native-ones/\">native ones</a>), and</li><li>you get sourcemaps.</li></ul>\n\n\n\n<p>(Originally, I thought it leveraged other tools for these tasks as tools like Autoprefixer and cssnano appeared in the project&#8217;s <code>package.json</code> file, but as the comment below from Devon confirms, Parcel CSS is a <em>replacement</em> for these, it doesn&#8217;t use them.)</p>\n\n\n\n<p>But there is one more! Seems to me the killer Parcel CSS feature is what they are calling &#8220;<strong>Syntax lowering</strong>&#8221; meaning you can use &#8220;future&#8221; CSS today (like, say, <a href=\"https://css-tricks.com/css-is-going-gosh-darned-hog-wild-i-tell-ya-what/#aa-native-nesting\">nesting</a>) by having it processed down to things that browsers understand, like Babel does in JavaScript. It feels similar in spirit to <a href=\"https://github.com/csstools/postcss-preset-env\" rel=\"noopener\">postcss-preset-env</a>. </p>\n\n\n\n<p>And crucially, it&#8217;s fast:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1370\" height=\"574\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/FI6pUwTWYAII2EW.jpeg?resize=1370%2C574&#038;ssl=1\" alt=\"Tow line charts chowing how fast Parcel CSS bundles packages and how small the resulting files are.\" class=\"wp-image-361285\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/FI6pUwTWYAII2EW.jpeg?w=1370&amp;ssl=1 1370w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/FI6pUwTWYAII2EW.jpeg?resize=300%2C126&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/FI6pUwTWYAII2EW.jpeg?resize=1024%2C429&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/FI6pUwTWYAII2EW.jpeg?resize=768%2C322&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/FI6pUwTWYAII2EW.jpeg?resize=1000%2C419&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Parcel CSS is <em>fast</em> and outputs <em>small</em> files. (Source: <a href=\"https://twitter.com/devongovett/status/1481308471622516738\" rel=\"noopener\">@devongovett</a>)</figcaption></figure>\n\n\n<h2 id=\"will-parcel-css-become-an-ecosystem\">Will Parcel CSS become an ecosystem?</h2>\n\n\n<p><strong>So I guess the big question is:</strong> If Parcel CSS becomes the CSS parser of choice, will we get plugins? And if we do, will it become a robust ecosystem <a href=\"https://www.postcss.parts/\" rel=\"noopener\">like PostCSS plugins</a>?</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/parcel-css/\">Parcel CSS: A New CSS Parser, Transformer, and Minifier</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Hot off the presses from Devon Govett, creator of Parcel, is Parcel CSS:\n\n\n\nA CSS parser, transformer, and minifier written in Rust.\n\n\n\nNice. The CSS world could use a little processing shake up like this.\n\n\n\nI just wrote a few weeks ago:\n\n\n\nYa know how esbuild has seriously shaken things up for the JavaScript processing world? Maybe we need a cssbuild? It would process imports and do bundling (something we generally rely on Sass for). The point would be extreme speed. Maybe it would be plugin-based and compatible with the PostCSS API so that existing PostCSS plugins would work on it. Maybe it could make sourcemaps and do modification. Maybe it would run your Sass, too, I dunno. But something to spark the CSS ecosystem like that could be cool.\n\n\n\n\n\n\n\nClose! It looks like it doesn’t do bundling (standalone anyway). I suppose it would have to just invent a syntax for that, as I think Sass somewhat regrets the ambiguity of how it uses @import just like native CSS does and I wouldn’t blame anyone for not wanting to go down that road. It’s tricky territory, for sure, as inventing syntax kinda puts it into a different category of tool. I think it would be worth it though, as breaking up CSS into smaller files but bundling them in development is like… a thing people do, and I could see really wanting to use this without having to necessarily commit to Parcel (which can bundle). \n\n\n\nSo why run your CSS through this thing? From the docs, it looks like you’d wanna do that because…\n\n\n\nit’s a minifier,it does vendor prefixing,it can process as CSS modules (the classic library, not the native ones), andyou get sourcemaps.\n\n\n\n(Originally, I thought it leveraged other tools for these tasks as tools like Autoprefixer and cssnano appeared in the project’s package.json file, but as the comment below from Devon confirms, Parcel CSS is a replacement for these, it doesn’t use them.)\n\n\n\nBut there is one more! Seems to me the killer Parcel CSS feature is what they are calling “Syntax lowering” meaning you can use “future” CSS today (like, say, nesting) by having it processed down to things that browsers understand, like Babel does in JavaScript. It feels similar in spirit to postcss-preset-env. \n\n\n\nAnd crucially, it’s fast:\n\n\n\nParcel CSS is fast and outputs small files. (Source: @devongovett)\n\n\nWill Parcel CSS become an ecosystem?\n\n\nSo I guess the big question is: If Parcel CSS becomes the CSS parser of choice, will we get plugins? And if we do, will it become a robust ecosystem like PostCSS plugins?\n\nParcel CSS: A New CSS Parser, Transformer, and Minifier originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-12T21:10:53.000Z",
      "date_modified": "2022-01-12T21:10:53.000Z",
      "_plugin": {
        "pageFilename": "25c3f9b130cfa63e7ee77537e22d51a5fa6a0bbee806a465d9d4e5c23bb2d00e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360607",
      "url": "https://css-tricks.com/open-source-sustainability/",
      "title": "Open Source & Sustainability",
      "summary": "It’s a god-damned miracle to me that open source is as robust as it is in tech. Consider the options. You could have a job (or be entrepreneurial) with your coding skills and likely be paid quite well. Or, you …\n\nOpen Source & Sustainability originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>It&#8217;s a god-damned miracle to me that open source is as robust as it is in tech. Consider the options. You could have a job (or be entrepreneurial) with your coding skills and likely be paid quite well. Or, you could write code for free and have strangers yell at you every day at all hours. I like being a contributing kinda guy, but I don&#8217;t have the stomach for the latter.</p>\n\n\n\n<p>Fair enough, in reality, most developers do a bit of coding work on both sides. And clearly, they find some value in doing open-source work; otherwise, they wouldn&#8217;t do it. But we&#8217;ve all heard the stories. It leads to developer burnout, depression, and countless abandoned projects. It&#8217;s like we know <a href=\"https://css-tricks.com/how-to-contribute-to-an-open-source-project/\">how to contribute to an open-source project</a> (and even have <a href=\"https://css-tricks.com/open-source-etiquette-guidebook/\">some ground rules on etiquette</a>), but lack an understanding of how to maintain it.</p>\n\n\n\n<span id=\"more-360607\"></span>\n\n\n\n<p>Dave, in <a href=\"https://daverupert.com/2021/12/sustaining-maintaining/\" rel=\"noopener\">&#8220;Sustaining Maintaining,&#8221;</a> thinks it might be a lack of education on how to manage open source:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p><a href=\"https://lab.github.com/\" rel=\"noopener\">There’s plenty of write-ups on GitHub</a>&nbsp;about&nbsp;<em>how to start</em>&nbsp;a new open source project, or&nbsp;<em>how to add tooling</em>, but almost no information or best practices on&nbsp;<em>how to maintain</em>&nbsp;a project over years. I think there’s a big education gap and opportunity here. GitHub has an obvious incentive to increase&nbsp;<code>num_developers</code>&nbsp;and&nbsp;<code>num_repos</code>, but I think it’s worthwhile to ease the burden of existing developers and increase the quality and security of existing repos. Open source maintenance needs a manual.</p></blockquote>\n\n\n\n<p>That&#8217;s a wonderful idea. I&#8217;ve been around tech a hot minute, but I don&#8217;t feel particularly knowledgeable about how to operate an open-source project. And frankly, that makes me scared of it, and my fear makes me avoid doing it at all.</p>\n\n\n\n<p>I know how to set up the basics, but what if the project blows up in popularity? How do I manage my time commitment do it? How do I handle community disputes? Do I need a request for comments workflow? Who can I trust to help? What are the monetization strategies? What are the security concerns? What do I do when there starts to be dozens, then hundreds, then thousands of open issues? What do I do when I stop caring about this project? How do I stop myself from burning it to the ground?</p>\n\n\n\n<p>If there was more education around how to do this well, more examples out there of people doing it well and benefitting from it, and some attempts at guardrails from the places that host them, that would go a long way. </p>\n\n\n\n<p>Money is a key factor. Whenever I see success in open source, I see actually usable amounts of money coming in. I see big donations appropriately <a href=\"https://vuejs.org/support-vuejs/\" rel=\"noopener\">coming into Vue</a>. I see <a href=\"https://automattic.com/\" rel=\"noopener\">Automattic</a> building an empire around their core open-source products. I see <a href=\"https://greensock.com/club/\" rel=\"noopener\">Greensock</a> having an open-source library but offering membership and a license for certain use cases and having that sustain a team long-term.</p>\n\n\n\n<p>If you&#8217;re interested in monetizing open-source, Nicholas C. Zakas has been writing about it lately. It&#8217;s a three-parter so far, but starts here in <a href=\"https://humanwhocodes.com/blog/2021/12/making-open-source-project-sponsor-ready-companies-trust/\" rel=\"noopener\">&#8220;Making your open source project sponsor-ready, Part 1: Companies and trust&#8221;</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>While it’s possible to bring in a decent amount of money through individual sponsorships, the real path to open source sustainability is to get larger donations from the companies that depend on your project. Getting $5 to $10 each month from a bunch of individuals is nice, but not as nice as getting $1,000 each month from a bunch of companies.</p></blockquote>\n\n\n\n<p>I think it would be cool to see a lot more developers making a proper healthy living on open source. If nothing else it would make me feel like this whole ecosystem is more stable. </p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Update: I wrote this before the whole Marak Squire <a href=\"https://www.bleepingcomputer.com/news/security/dev-corrupts-npm-libs-colors-and-faker-breaking-thousands-of-apps/\" rel=\"noopener\">kerfuffle</a>, but I feel that just underscores all this. </p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/open-source-sustainability/\">Open Source &#038; Sustainability</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "It’s a god-damned miracle to me that open source is as robust as it is in tech. Consider the options. You could have a job (or be entrepreneurial) with your coding skills and likely be paid quite well. Or, you could write code for free and have strangers yell at you every day at all hours. I like being a contributing kinda guy, but I don’t have the stomach for the latter.\n\n\n\nFair enough, in reality, most developers do a bit of coding work on both sides. And clearly, they find some value in doing open-source work; otherwise, they wouldn’t do it. But we’ve all heard the stories. It leads to developer burnout, depression, and countless abandoned projects. It’s like we know how to contribute to an open-source project (and even have some ground rules on etiquette), but lack an understanding of how to maintain it.\n\n\n\n\n\n\n\nDave, in “Sustaining Maintaining,” thinks it might be a lack of education on how to manage open source:\n\n\n\nThere’s plenty of write-ups on GitHub about how to start a new open source project, or how to add tooling, but almost no information or best practices on how to maintain a project over years. I think there’s a big education gap and opportunity here. GitHub has an obvious incentive to increase num_developers and num_repos, but I think it’s worthwhile to ease the burden of existing developers and increase the quality and security of existing repos. Open source maintenance needs a manual.\n\n\n\nThat’s a wonderful idea. I’ve been around tech a hot minute, but I don’t feel particularly knowledgeable about how to operate an open-source project. And frankly, that makes me scared of it, and my fear makes me avoid doing it at all.\n\n\n\nI know how to set up the basics, but what if the project blows up in popularity? How do I manage my time commitment do it? How do I handle community disputes? Do I need a request for comments workflow? Who can I trust to help? What are the monetization strategies? What are the security concerns? What do I do when there starts to be dozens, then hundreds, then thousands of open issues? What do I do when I stop caring about this project? How do I stop myself from burning it to the ground?\n\n\n\nIf there was more education around how to do this well, more examples out there of people doing it well and benefitting from it, and some attempts at guardrails from the places that host them, that would go a long way. \n\n\n\nMoney is a key factor. Whenever I see success in open source, I see actually usable amounts of money coming in. I see big donations appropriately coming into Vue. I see Automattic building an empire around their core open-source products. I see Greensock having an open-source library but offering membership and a license for certain use cases and having that sustain a team long-term.\n\n\n\nIf you’re interested in monetizing open-source, Nicholas C. Zakas has been writing about it lately. It’s a three-parter so far, but starts here in “Making your open source project sponsor-ready, Part 1: Companies and trust”:\n\n\n\nWhile it’s possible to bring in a decent amount of money through individual sponsorships, the real path to open source sustainability is to get larger donations from the companies that depend on your project. Getting $5 to $10 each month from a bunch of individuals is nice, but not as nice as getting $1,000 each month from a bunch of companies.\n\n\n\nI think it would be cool to see a lot more developers making a proper healthy living on open source. If nothing else it would make me feel like this whole ecosystem is more stable. \n\n\n\n\n\n\n\nUpdate: I wrote this before the whole Marak Squire kerfuffle, but I feel that just underscores all this. \n\nOpen Source & Sustainability originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-12T20:51:49.000Z",
      "date_modified": "2022-01-12T20:51:49.000Z",
      "_plugin": {
        "pageFilename": "84d93e36ba1043c4cb724f175bd3d0139e13ec71d7b854e8ee00437e8ef6a32e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360168",
      "url": "https://css-tricks.com/how-to-make-a-pure-css-3d-package-toggle/",
      "title": "How to Make a Pure CSS 3D Package Toggle",
      "summary": "You know how you can get cardboard boxes that come totally flat? You fold ‘em up and tape ‘em to make them into a useful box. Then when it’s time to recycle them, you cut them back apart to flatten …\n\nHow to Make a Pure CSS 3D Package Toggle originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>You know how you can get cardboard boxes that come totally flat? You fold ‘em up and tape ‘em to make them into a useful box. Then when it’s time to recycle them, you cut them back apart to flatten them. Recently, someone reached out to me about essentially this concept as a 3D animation and I thought it would make an interesting tutorial to do it entirely in CSS, so here we are!</p>\n\n\n\n<p>How might that animation look? How could we create that packing timeline? Could the sizing be flexible? Let’s make a pure CSS package toggle.</p>\n\n\n\n<span id=\"more-360168\"></span>\n\n\n\n<p>Here’s what we’re working towards. Tap to pack and unpack the cardboard box.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XWaGEgO\" src=\"//codepen.io/anon/embed/XWaGEgO?height=450&amp;theme-id=1&amp;slug-hash=XWaGEgO&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XWaGEgO\" title=\"CodePen Embed XWaGEgO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"where-to-start\">Where to start?</h3>\n\n\n<p>Where do you even start with something like this? It’s best to plan ahead. We know we&#8217;re going to have a template for our package. And that will need folding up in three dimensions. If working with 3D in CSS is new to you, I recommend <a href=\"https://css-tricks.com/css-in-3d-learning-to-think-in-cubes-instead-of-boxes/\">this article</a> to get you started.</p>\n\n\n\n<p>If you&#8217;re familiar with 3D CSS, it might be tempting to construct a cuboid and go from there. But, that&#8217;s going to pose some problems. We need to consider how a package goes from 2D to 3D.</p>\n\n\n\n<p>Let’s start by creating a template. We need to plan ahead with our markup and think about how we want our packing animation to work. Let’s start with some HTML.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"scene\">\n  &lt;div class=\"package__wrapper\">\n    &lt;div class=\"package\">\n      &lt;div class=\"package__side package__side--main\">\n        &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n        &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n        &lt;div class=\"package__side package__side--tabbed\">\n          &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n          &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n        &lt;/div>\n        &lt;div class=\"package__side package__side--extra\">\n          &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n          &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n          &lt;div class=\"package__side package__side--flipped\">\n            &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n            &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n          &lt;/div>\n        &lt;/div>\n      &lt;/div>\n    &lt;/div>\n  &lt;/div>\n&lt;/div></code></pre>\n\n\n<h3 id=\"mixins-are-a-good-idea\">Mixins are a good idea</h3>\n\n\n<p>There&#8217;s quite a bit happening there. It&#8217;s a lot of <code>div</code>s. I often like to use Pug for generating markup so I can split things up into reusable blocks. For example, every side will have two flaps. We can create a Pug mixin for the sides and use attributes to apply a modifier class name to make all that markup a lot easier to write.</p>\n\n\n\n<pre rel=\"Pug\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">mixin flaps()\n  .package__flap.package__flap--top\n  .package__flap.package__flap--bottom\n      \nmixin side()\n  .package__side(class=`package__side--${attributes.class || 'side'}`)\n    +flaps()\n    if block\n      block\n\n.scene\n  .package__wrapper\n    .package\n      +side()(class=\"main\")\n        +side()(class=\"tabbed\")\n        +side()(class=\"extra\")\n          +side()(class=\"flipped\")</code></pre>\n\n\n\n<p>We&#8217;re using two mixins. One creates the flaps for each side of the box. The other creates the sides of the box. Notice in the <code>side</code> mixin we are making use of <code>block</code>. That is where children of mixin usage get rendered which is particularly useful, as we need to nest some of the sides to make our lives easier later.</p>\n\n\n\n<p>Our generated markup:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"scene\">\n  &lt;div class=\"package__wrapper\">\n    &lt;div class=\"package\">\n      &lt;div class=\"package__side package__side--main\">\n        &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n        &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n        &lt;div class=\"package__side package__side--tabbed\">\n          &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n          &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n        &lt;/div>\n        &lt;div class=\"package__side package__side--extra\">\n          &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n          &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n          &lt;div class=\"package__side package__side--flipped\">\n            &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n            &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n          &lt;/div>\n        &lt;/div>\n      &lt;/div>\n    &lt;/div>\n  &lt;/div>\n&lt;/div></code></pre>\n\n\n<h3 id=\"nesting-the-sides\">Nesting the sides</h3>\n\n\n<p>Nesting the sides makes it easier to fold up our package. Much like each side has two flaps. The children of a side can inherit the sides&#8217; transform and then apply their own. If we started with a cuboid, it would be hard to leverage this.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1261\" height=\"339\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/box-flaps-nested.jpg?resize=1261%2C339&#038;ssl=1\" alt=\"Screenshot showing HTML markup on the left and a rendering the unfolded cardboard box on the right. The markup shows how one of the box’s sides is a parent container that sets the broad side of the box and contains children for the corresponding top and bottom flaps. Orange arrows connect each element to the visual rendering to outline which parts of the box correspond in HTML correspond to the visual rendering.\" class=\"wp-image-360171\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/box-flaps-nested.jpg?w=1261&amp;ssl=1 1261w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/box-flaps-nested.jpg?resize=300%2C81&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/box-flaps-nested.jpg?resize=1024%2C275&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/box-flaps-nested.jpg?resize=768%2C206&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/box-flaps-nested.jpg?resize=1000%2C269&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Check out this demo that flips between nested and non-nested elements to see the difference in action.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_92cb5a721624c63c002b420843a5af91\" src=\"//codepen.io/anon/embed/preview/92cb5a721624c63c002b420843a5af91?height=450&amp;theme-id=1&amp;slug-hash=92cb5a721624c63c002b420843a5af91&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 92cb5a721624c63c002b420843a5af91\" title=\"CodePen Embed 92cb5a721624c63c002b420843a5af91\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Each box has a <code>transform-origin</code> set to the bottom right corner with <code>100% 100%</code>. Checking the &#8220;Transform&#8221; toggle rotates each box <code>90deg</code>. But, see how the behavior of that <code>transform</code> changes if we nest the elements.</p>\n\n\n\n<p>We’re flipping between the two versions of markup but not changing anything else.</p>\n\n\n\n<p>Nested:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"boxes boxes--nested\">\n  &lt;div class=\"box\">\n    &lt;div class=\"box\">\n      &lt;div class=\"box\">\n        &lt;div class=\"box\">&lt;/div>\n      &lt;/div>\n    &lt;/div>\n  &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<p>Not nested:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"boxes\">\n  &lt;div class=\"box\">&lt;/div>\n  &lt;div class=\"box\">&lt;/div>\n  &lt;div class=\"box\">&lt;/div>\n  &lt;div class=\"box\">&lt;/div>\n&lt;/div></code></pre>\n\n\n<h3 id=\"transforming-all-the-things\">Transforming all the things</h3>\n\n\n<p>After applying some styles to our HTML, we have our package template.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWaWewx\" src=\"//codepen.io/anon/embed/preview/NWaWewx?height=450&amp;theme-id=1&amp;slug-hash=NWaWewx&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWaWewx\" title=\"CodePen Embed NWaWewx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The styles specify the different colors and position the sides to the package. Each side gets a position that’s relative to the &#8220;main&#8221; side. (You’ll see why all that nesting is useful in a moment.)</p>\n\n\n\n<p>There are some things to be aware of. Much like working with cuboids, we are using <code>--height</code>, <code>--width</code>, and <code>--depth</code> variables for sizing. This will make it easier to change our package sizing down the line.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package {\n  height: calc(var(--height, 20) * 1vmin);\n  width: calc(var(--width, 20) * 1vmin);\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">Why define sizing like this? We are using a unit-less default sizing of <code>20</code>, an idea I picked up from Lea Verou&#8217;s&nbsp;<a target=\"_blank\" href=\"https://youtu.be/kZOJCVvyF-4\" rel=\"noreferrer noopener\">2016 CSS ConfAsia talk</a> (starting at <a href=\"https://www.youtube.com/watch?v=kZOJCVvyF-4&amp;t=1278s\" rel=\"noopener\">52:44</a>). Using custom properties as&nbsp;“data”&nbsp;instead of&nbsp;“values,”&nbsp;we are free to do what we want with them using&nbsp;<code>calc()</code>. Additionally, JavaScript doesn’t have to care about value units and we can change to&nbsp;pixels,&nbsp;a percentage, etc., without having to make changes elsewhere. You could refactor this into a coefficient in the&nbsp;<code>--root</code>,&nbsp;but it could also quickly become overkill.</p>\n\n\n\n<p>The flaps for each side also need a size ever so smaller than the sides they are a part of. This is so we can see a slight gap as we would in real life. Also, the flaps on two sides need to sit a little lower. This is so that when we fold them up, we don&#8217;t get <code>z-index</code> fighting between them.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"2,3,19,23\"><code markup=\"tt\">.package__flap {\n  width: 99.5%;\n  height: 49.5%;\n  background: var(--flap-bg, var(--face-4));\n  position: absolute;\n  left: 50%;\n  transform: translate(-50%, 0);\n}\n.package__flap--top {\n  transform-origin: 50% 100%;\n  bottom: 100%;\n}\n.package__flap--bottom {\n  top: 100%;\n  transform-origin: 50% 0%;\n}\n.package__side--extra > .package__flap--bottom,\n.package__side--tabbed > .package__flap--bottom {\n  top: 99%;\n}\n.package__side--extra > .package__flap--top,\n.package__side--tabbed > .package__flap--top {\n  bottom: 99%;\n}</code></pre>\n\n\n\n<p>We&#8217;re also starting to consider the <code>transform-origin</code> for the individual pieces. A top flap will rotate from its bottom edge and a bottom flap will rotate from its top edge.</p>\n\n\n\n<p>We can use a pseudo-element for the tab on that right side. We are using <code>clip-path</code> to get that desired shape.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"8,9,10\"><code markup=\"tt\">.package__side--tabbed:after {\n  content: '';\n  position: absolute;\n  left: 99.5%;\n  height: 100%;\n  width: 10%;\n  background: var(--face-3);\n  -webkit-clip-path: polygon(0 0%, 100% 20%, 100% 80%, 0 100%);\n  clip-path: polygon(0 0%, 100% 20%, 100% 80%, 0 100%);\n  transform-origin: 0% 50%;\n}</code></pre>\n\n\n\n<p>Let&#8217;s start working with our template on a 3D plane. We can start by rotating the <code>.scene</code> on the X and Y axis.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.scene {\n  transform: rotateX(-24deg) rotateY(-32deg) rotateX(90deg);\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwMaMVE\" src=\"//codepen.io/anon/embed/preview/VwMaMVE?height=450&amp;theme-id=1&amp;slug-hash=VwMaMVE&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwMaMVE\" title=\"CodePen Embed VwMaMVE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"folding-up\">Folding up</h3>\n\n\n<p>We&#8217;re ready to start folding up our template! Our template will fold up based on a custom property, <code>--packaged</code>. If the value is <code>1</code>, then we can fold up the template. For example, let&#8217;s fold some of the sides and the pseudo-element tab.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package__side--tabbed,\n.package__side--tabbed:after {\n  transform: rotateY(calc(var(--packaged, 0) * -90deg)); \n}\n.package__side--extra {\n  transform: rotateY(calc(var(--packaged, 0) * 90deg));\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_23519fca78ec47b8c948c28a45c4148e\" src=\"//codepen.io/anon/embed/preview/23519fca78ec47b8c948c28a45c4148e?height=450&amp;theme-id=1&amp;slug-hash=23519fca78ec47b8c948c28a45c4148e&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 23519fca78ec47b8c948c28a45c4148e\" title=\"CodePen Embed 23519fca78ec47b8c948c28a45c4148e\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Or, we could write a rule for all sides that aren&#8217;t the &#8220;main&#8221; one.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package__side:not(.package__side--main),\n.package__side:not(.package__side--main):after {\n  transform: rotateY(calc((var(--packaged, 0) * var(--rotation, 90)) * 1deg));\n}\n.package__side--tabbed { --rotation: -90; }</code></pre>\n\n\n\n<p>And that would cover all the sides.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNGLXjW\" src=\"//codepen.io/anon/embed/preview/oNGLXjW?height=450&amp;theme-id=1&amp;slug-hash=oNGLXjW&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNGLXjW\" title=\"CodePen Embed oNGLXjW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Remember when I said the nested sides allow us to inherit a parent&#8217;s transform? If we update our demo so we can change the value of <code>--packaged</code>, we can see how the value affects the transforms. Try sliding the <code>--packaged</code> value between <code>1</code> and <code>0</code> and you’ll see exactly what I mean.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_763aaec9ee1493b1e50380c2c840e5a3\" src=\"//codepen.io/anon/embed/preview/763aaec9ee1493b1e50380c2c840e5a3?height=450&amp;theme-id=1&amp;slug-hash=763aaec9ee1493b1e50380c2c840e5a3&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 763aaec9ee1493b1e50380c2c840e5a3\" title=\"CodePen Embed 763aaec9ee1493b1e50380c2c840e5a3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now that we have a way to toggle the folding state of our template, we can start working on some motion. Our previous demo flips between the two states. We can make use of <code>transition</code> for that. The quickest way? Add a <code>transition</code> to the <code>transform</code> of every child in the <code>.scene</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.scene *,\n.scene *::after {\n  transition: transform calc(var(--speed, 0.2) * 1s);\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_43ab4ba93e9db73577b789aaff94419f\" src=\"//codepen.io/anon/embed/preview/43ab4ba93e9db73577b789aaff94419f?height=450&amp;theme-id=1&amp;slug-hash=43ab4ba93e9db73577b789aaff94419f&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 43ab4ba93e9db73577b789aaff94419f\" title=\"CodePen Embed 43ab4ba93e9db73577b789aaff94419f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"multistep-transitions\">Multi-step transitions!</h3>\n\n\n<p>But we don&#8217;t fold the template all up in one go — in real life, there&#8217;s a sequence to it where we’d fold up one side and its flap first then move on to the next, and so on. Scoped custom properties are perfect for this.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.scene *,\n.scene *::after {\n  transition: transform calc(var(--speed, 0.2) * 1s) calc((var(--step, 1) * var(--delay, 0.2)) * 1s);\n}</code></pre>\n\n\n\n<p>Here we are saying that, for each <code>transition</code>, use a <code>transition-delay</code> of <code>--step</code> multiplied by <code>--delay</code>. The <code>--delay</code> value won&#8217;t change but each element can define which &#8220;step&#8221; it is in the sequence. And then we can be explicit about the order in which things happen.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package__side--extra {\n  --step: 1;\n}\n.package__side--tabbed {\n  --step: 2;\n}\n.package__side--flipped,\n.package__side--tabbed::after {\n  --step: 3;\n}</code></pre>\n\n\n\n<p>Consider the following demo for a better idea of how this works. Change the slider values to update the order in which things happen. Can you change which car wins?</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYzeoJW\" src=\"//codepen.io/anon/embed/preview/LYzeoJW?height=450&amp;theme-id=1&amp;slug-hash=LYzeoJW&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYzeoJW\" title=\"CodePen Embed LYzeoJW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>That same technique is key for what we are going to for. We could even introduce an <code>--initial-delay</code> that adds a slight pause to everything for even more realism.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.race__light--animated,\n.race__light--animated:after,\n.car {\n  animation-delay: calc((var(--step, 0) * var(--delay-step, 0)) * 1s);\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_51626eaaf878e238d467c5fade2587b3\" src=\"//codepen.io/anon/embed/preview/51626eaaf878e238d467c5fade2587b3?height=450&amp;theme-id=1&amp;slug-hash=51626eaaf878e238d467c5fade2587b3&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 51626eaaf878e238d467c5fade2587b3\" title=\"CodePen Embed 51626eaaf878e238d467c5fade2587b3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If we look back at our package, we can take this further and apply a &#8220;step&#8221; to all the elements that are going to <code>transform</code>. It’s quite verbose but it does the job. Alternatively, you could inline these values in the markup.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package__side--extra > .package__flap--bottom {\n  --step: 4;\n}\n.package__side--tabbed > .package__flap--bottom {\n  --step: 5;\n}\n.package__side--main > .package__flap--bottom {\n  --step: 6;\n}\n.package__side--flipped > .package__flap--bottom {\n  --step: 7;\n}\n.package__side--extra > .package__flap--top {\n  --step: 8;\n}\n.package__side--tabbed > .package__flap--top {\n  --step: 9;\n}\n.package__side--main > .package__flap--top {\n  --step: 10;\n}\n.package__side--flipped > .package__flap--top {\n  --step: 11;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_a9bd18e19d78284123edf8087833ab2f\" src=\"//codepen.io/anon/embed/preview/a9bd18e19d78284123edf8087833ab2f?height=450&amp;theme-id=1&amp;slug-hash=a9bd18e19d78284123edf8087833ab2f&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed a9bd18e19d78284123edf8087833ab2f\" title=\"CodePen Embed a9bd18e19d78284123edf8087833ab2f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But, it doesn’t feel very realistic.</p>\n\n\n<h3 id=\"maybe-we-oughta-flip-the-box-too\">Maybe we oughta flip the box, too</h3>\n\n\n<p>If I were folding up the box in real life, I’d likely flip the box up before folding in the top flaps. So how might we do that? Well, those with an eager eye might have noticed the <code>.package__wrapper</code> element. We are going to use this to slide the package. Then we&#8217;re going to rotate the package on the x-axis. This will create the impression of flipping the package onto its side.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package {\n  transform-origin: 50% 100%;\n  transform: rotateX(calc(var(--packaged, 0) * -90deg));\n}\n.package__wrapper {\n  transform: translate(0, calc(var(--packaged, 0) * -100%));\n}</code></pre>\n\n\n\n<p>Adjusting the <code>--step</code> declarations accordingly gives us something like this.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_d267ef960b908d8c33fa61ddeffcf9dd\" src=\"//codepen.io/anon/embed/preview/d267ef960b908d8c33fa61ddeffcf9dd?height=450&amp;theme-id=1&amp;slug-hash=d267ef960b908d8c33fa61ddeffcf9dd&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed d267ef960b908d8c33fa61ddeffcf9dd\" title=\"CodePen Embed d267ef960b908d8c33fa61ddeffcf9dd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"unfolding-the-box\">Unfolding the box</h3>\n\n\n<p>If you flip between the folded and not folded states, you&#8217;ll notice that the unfold doesn&#8217;t look right. The unfolding sequence should be the exact reverse of the folding sequence. We could flip the <code>--step</code> based on <code>--packaged</code> and the number of steps. Our latest step is <code>15</code>. We can update our <code>transition</code> to this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.scene *,\n.scene *:after {\n  --no-of-steps: 15;\n  --step-delay: calc(var(--step, 1) - ((1 - var(--packaged, 0)) * (var(--step) - ((var(--no-of-steps) + 1) - var(--step)))));\n  transition: transform calc(var(--speed, 0.2) * 1s) calc((var(--step-delay) * var(--delay, 0.2)) * 1s);\n}</code></pre>\n\n\n\n<p>That is quite the mouthful of <code>calc</code> to reverse the <code>transition-delay</code>. But, it works! We must remind ourselves to keep that <code>--no-of-steps</code> value up to date though!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_c9308195b2ce3f548a0cb0c458fb03a7\" src=\"//codepen.io/anon/embed/preview/c9308195b2ce3f548a0cb0c458fb03a7?height=450&amp;theme-id=1&amp;slug-hash=c9308195b2ce3f548a0cb0c458fb03a7&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed c9308195b2ce3f548a0cb0c458fb03a7\" title=\"CodePen Embed c9308195b2ce3f548a0cb0c458fb03a7\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We do have another option. As we continue down the &#8220;pure CSS&#8221; route, we will eventually make use of the <a href=\"https://twitter.com/jh3yy/status/1380288957930475520?s=20\" rel=\"noopener\">checkbox hack</a> to toggling between the folding states. We could have two sets of defined “steps” where one set is active when our checkbox gets checked. It’s certainly a more verbose solution. But, it does give us more finite control.</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">/* Folding */\n:checked ~ .scene .package__side--extra {\n  --step: 1;\n}\n/* Unfolding */\n.package__side--extra {\n  --step: 15;\n}</code></pre>\n\n\n<h3 id=\"sizing-and-centering\">Sizing and centering</h3>\n\n\n<p>Before we ditch the use of <code>[dat.gui](https://github.com/dataarts/dat.gui)</code> in our demo, let&#8217;s have a play with the size of our package. We want to check that our package remains centered while folding and flipping. In this demo, the package has a larger <code>--height</code> and the <code>.scene</code> has a dashed border.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_fe89565a8ca6c96b383ec5234755135a\" src=\"//codepen.io/anon/embed/preview/fe89565a8ca6c96b383ec5234755135a?height=450&amp;theme-id=1&amp;slug-hash=fe89565a8ca6c96b383ec5234755135a&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed fe89565a8ca6c96b383ec5234755135a\" title=\"CodePen Embed fe89565a8ca6c96b383ec5234755135a\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We may as well tweak our <code>transform</code> to better center the package while we’re at it:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Considers package height by translating on z-axis */\n.scene {\n  transform: rotateX(calc(var(--rotate-x, -24) * 1deg)) rotateY(calc(var(--rotate-y, -32) * 1deg)) rotateX(90deg) translate3d(0, 0, calc(var(--height, 20) * -0.5vmin));\n}\n/* Considers package depth by sliding the depth before flipping */\n.package__wrapper {\n  transform: translate(0, calc((var(--packaged, 0) * var(--depth, 20)) * -1vmin));\n}</code></pre>\n\n\n\n<p>This gives us reliable centering in the scene. It all comes down to preference though!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_c13c46bb92fb911171bc64b527be93a2\" src=\"//codepen.io/anon/embed/preview/c13c46bb92fb911171bc64b527be93a2?height=450&amp;theme-id=1&amp;slug-hash=c13c46bb92fb911171bc64b527be93a2&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed c13c46bb92fb911171bc64b527be93a2\" title=\"CodePen Embed c13c46bb92fb911171bc64b527be93a2\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"adding-in-the-checkbox-hack\">Adding in the checkbox hack</h3>\n\n\n<p>Now let&#8217;s get <code>dat.gui</code> out of the way and make this &#8220;pure” CSS. For this, we need to introduce a bunch of controls in the HTML. We are going to use a checkbox for folding and unfolding our package. Then we&#8217;re going to use a <code>radio</code> button to pick a package size.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;input id=\"package\" type=\"checkbox\"/>\n\n&lt;input id=\"one\" type=\"radio\" name=\"size\"/>\n&lt;label class=\"size-label one\" for=\"one\">S&lt;/label>\n\n&lt;input id=\"two\" type=\"radio\" name=\"size\" checked=\"checked\"/>\n&lt;label class=\"size-label two\" for=\"two\">M&lt;/label>\n\n&lt;input id=\"three\" type=\"radio\" name=\"size\"/>\n&lt;label class=\"size-label three\" for=\"three\">L&lt;/label>\n\n&lt;input id=\"four\" type=\"radio\" name=\"size\"/>\n&lt;label class=\"size-label four\" for=\"four\">XL&lt;/label>\n\n&lt;label class=\"close\" for=\"package\">Close Package&lt;/label>\n&lt;label class=\"open\" for=\"package\">Open Package&lt;/label></code></pre>\n\n\n\n<p>In the final demo, we will hide the inputs and make use of the label elements. For now, though, let&#8217;s leave them all visible. The trick is to use the sibling combinator (<code>~</code>) when certain controls get <code>:checked</code>. We can then set custom property values on the <code>.scene</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#package:checked ~ .scene {\n  --packaged: 1;\n}\n#one:checked ~ .scene {\n  --height: 10;\n  --width: 20;\n  --depth: 20;\n}\n#two:checked ~ .scene {\n  --height: 20;\n  --width: 20;\n  --depth: 20;\n}\n#three:checked ~ .scene {\n  --height: 20;\n  --width: 30;\n  --depth: 20;\n}\n#four:checked ~ .scene {\n  --height: 30;\n  --width: 20;\n  --depth: 30;\n}</code></pre>\n\n\n\n<p>And here is the demo with that working!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_80819d5918de1e871528edf71f8348c7\" src=\"//codepen.io/anon/embed/80819d5918de1e871528edf71f8348c7?height=450&amp;theme-id=1&amp;slug-hash=80819d5918de1e871528edf71f8348c7&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 80819d5918de1e871528edf71f8348c7\" title=\"CodePen Embed 80819d5918de1e871528edf71f8348c7\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"final-polish\">Final polish</h3>\n\n\n<p>Now we&#8217;re in a place to make things look &#8220;pretty&#8221; and add some extra touches. Let&#8217;s start by hiding all the inputs.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">input {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}</code></pre>\n\n\n\n<p>We can style the sizing options as rounded buttons:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.size-label {\n  position: fixed;\n  top: var(--top);\n  right: 1rem;\n  z-index: 3;\n  font-family: sans-serif;\n  font-weight: bold;\n  color: #262626;\n  height: 44px;\n  width: 44px;\n  display: grid;\n  place-items: center;\n  background: #fcfcfc;\n  border-radius: 50%;\n  cursor: pointer;\n  border: 4px solid #8bb1b1;\n  transform: translate(0, calc(var(--y, 0) * 1%)) scale(var(--scale, 1));\n  transition: transform 0.1s;\n}\n.size-label:hover {\n  --y: -5;\n}\n.size-label:active {\n  --y: 2;\n  --scale: 0.9;\n}</code></pre>\n\n\n\n<p>We want to be able to tap anywhere to toggle between folding and unfolding our package. So our <code>.open</code> and <code>.close</code> labels will take up the full screen. Wondering why we have two labels? It’s a little trick. If we use a <code>transition-delay</code> and scale up the appropriate label, we can hide both labels while the package transitions. This is how we combat spam tapping (even though it won&#8217;t stop a user hitting the space bar on a keyboard).</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.close,\n.open {\n  position: fixed;\n  height: 100vh;\n  width: 100vw;\n  z-index: 2;\n  transform: scale(var(--scale, 1)) translate3d(0, 0, 50vmin);\n  transition: transform 0s var(--reveal-delay, calc(((var(--no-of-steps, 15) + 1) * var(--delay, 0.2)) * 1s));\n}\n\n#package:checked ~ .close,\n.open {\n  --scale: 0;\n  --reveal-delay: 0s;\n}\n#package:checked ~ .open {\n  --scale: 1;\n  --reveal-delay: calc(((var(--no-of-steps, 15) + 1) * var(--delay, 0.2)) * 1s);\n}</code></pre>\n\n\n\n<p>Check out this demo to see where we’ve added <code>background-color</code> to both <code>.open</code> and <code>.close</code>. Neither label is visible during the transition.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ba390feeff918d0328c3526af518bc3a\" src=\"//codepen.io/anon/embed/preview/ba390feeff918d0328c3526af518bc3a?height=450&amp;theme-id=1&amp;slug-hash=ba390feeff918d0328c3526af518bc3a&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ba390feeff918d0328c3526af518bc3a\" title=\"CodePen Embed ba390feeff918d0328c3526af518bc3a\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We&#8217;ve got complete functionality! But, our package is a little underwhelming at the moment. Let’s add extra details to make things more “box”-like with things like parcel tape and packing labels.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_fbe3070586437995ebdac2dbd13d0bb3\" src=\"//codepen.io/anon/embed/preview/fbe3070586437995ebdac2dbd13d0bb3?height=450&amp;theme-id=1&amp;slug-hash=fbe3070586437995ebdac2dbd13d0bb3&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed fbe3070586437995ebdac2dbd13d0bb3\" title=\"CodePen Embed fbe3070586437995ebdac2dbd13d0bb3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Little details like this are only limited by our imagination! We can use our <code>--packaged</code> custom property to affect anything. For example, the <code>.package__tape</code> is transitioning the <code>scaleY</code> transform:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package__tape {\n  transform: translate3d(-50%, var(--offset-y), -2px) scaleX(var(--packaged, 0));\n}</code></pre>\n\n\n\n<p>The thing to remember is that whenever we add a new feature that affects the sequence, we need to update our steps. Not only the <code>--step</code> values, but also the <code>--no-of-steps</code> value.</p>\n\n\n<h3 id=\"thats-it\">That’s it!</h3>\n\n\n<p>That&#8217;s how you make a pure CSS 3D package toggle. Are you going to drop this into your website? Unlikely! But, it&#8217;s fun to see how you might achieve these things with CSS. Custom properties are so powerful.</p>\n\n\n\n<p>Why not get super festive and give the gift of CSS!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jOGroXN\" src=\"//codepen.io/anon/embed/jOGroXN?height=450&amp;theme-id=1&amp;slug-hash=jOGroXN&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jOGroXN\" title=\"CodePen Embed jOGroXN\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Stay Awesome! ʕ •ᴥ•ʔ</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-make-a-pure-css-3d-package-toggle/\">How to Make a Pure CSS 3D Package Toggle</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "You know how you can get cardboard boxes that come totally flat? You fold ‘em up and tape ‘em to make them into a useful box. Then when it’s time to recycle them, you cut them back apart to flatten them. Recently, someone reached out to me about essentially this concept as a 3D animation and I thought it would make an interesting tutorial to do it entirely in CSS, so here we are!\n\n\n\nHow might that animation look? How could we create that packing timeline? Could the sizing be flexible? Let’s make a pure CSS package toggle.\n\n\n\n\n\n\n\nHere’s what we’re working towards. Tap to pack and unpack the cardboard box.\n\n\n\nCodePen Embed Fallback\n\n\nWhere to start?\n\n\nWhere do you even start with something like this? It’s best to plan ahead. We know we’re going to have a template for our package. And that will need folding up in three dimensions. If working with 3D in CSS is new to you, I recommend this article to get you started.\n\n\n\nIf you’re familiar with 3D CSS, it might be tempting to construct a cuboid and go from there. But, that’s going to pose some problems. We need to consider how a package goes from 2D to 3D.\n\n\n\nLet’s start by creating a template. We need to plan ahead with our markup and think about how we want our packing animation to work. Let’s start with some HTML.\n\n\n\n<div class=\"scene\">\n  <div class=\"package__wrapper\">\n    <div class=\"package\">\n      <div class=\"package__side package__side--main\">\n        <div class=\"package__flap package__flap--top\"></div>\n        <div class=\"package__flap package__flap--bottom\"></div>\n        <div class=\"package__side package__side--tabbed\">\n          <div class=\"package__flap package__flap--top\"></div>\n          <div class=\"package__flap package__flap--bottom\"></div>\n        </div>\n        <div class=\"package__side package__side--extra\">\n          <div class=\"package__flap package__flap--top\"></div>\n          <div class=\"package__flap package__flap--bottom\"></div>\n          <div class=\"package__side package__side--flipped\">\n            <div class=\"package__flap package__flap--top\"></div>\n            <div class=\"package__flap package__flap--bottom\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\nMixins are a good idea\n\n\nThere’s quite a bit happening there. It’s a lot of divs. I often like to use Pug for generating markup so I can split things up into reusable blocks. For example, every side will have two flaps. We can create a Pug mixin for the sides and use attributes to apply a modifier class name to make all that markup a lot easier to write.\n\n\n\nmixin flaps()\n  .package__flap.package__flap--top\n  .package__flap.package__flap--bottom\n      \nmixin side()\n  .package__side(class=`package__side--${attributes.class || 'side'}`)\n    +flaps()\n    if block\n      block\n\n.scene\n  .package__wrapper\n    .package\n      +side()(class=\"main\")\n        +side()(class=\"tabbed\")\n        +side()(class=\"extra\")\n          +side()(class=\"flipped\")\n\n\n\nWe’re using two mixins. One creates the flaps for each side of the box. The other creates the sides of the box. Notice in the side mixin we are making use of block. That is where children of mixin usage get rendered which is particularly useful, as we need to nest some of the sides to make our lives easier later.\n\n\n\nOur generated markup:\n\n\n\n<div class=\"scene\">\n  <div class=\"package__wrapper\">\n    <div class=\"package\">\n      <div class=\"package__side package__side--main\">\n        <div class=\"package__flap package__flap--top\"></div>\n        <div class=\"package__flap package__flap--bottom\"></div>\n        <div class=\"package__side package__side--tabbed\">\n          <div class=\"package__flap package__flap--top\"></div>\n          <div class=\"package__flap package__flap--bottom\"></div>\n        </div>\n        <div class=\"package__side package__side--extra\">\n          <div class=\"package__flap package__flap--top\"></div>\n          <div class=\"package__flap package__flap--bottom\"></div>\n          <div class=\"package__side package__side--flipped\">\n            <div class=\"package__flap package__flap--top\"></div>\n            <div class=\"package__flap package__flap--bottom\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\nNesting the sides\n\n\nNesting the sides makes it easier to fold up our package. Much like each side has two flaps. The children of a side can inherit the sides’ transform and then apply their own. If we started with a cuboid, it would be hard to leverage this.\n\n\n\n\n\n\n\nCheck out this demo that flips between nested and non-nested elements to see the difference in action.\n\n\n\nCodePen Embed Fallback\n\n\n\nEach box has a transform-origin set to the bottom right corner with 100% 100%. Checking the “Transform” toggle rotates each box 90deg. But, see how the behavior of that transform changes if we nest the elements.\n\n\n\nWe’re flipping between the two versions of markup but not changing anything else.\n\n\n\nNested:\n\n\n\n<div class=\"boxes boxes--nested\">\n  <div class=\"box\">\n    <div class=\"box\">\n      <div class=\"box\">\n        <div class=\"box\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n\nNot nested:\n\n\n\n<div class=\"boxes\">\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n</div>\n\n\nTransforming all the things\n\n\nAfter applying some styles to our HTML, we have our package template.\n\n\n\nCodePen Embed Fallback\n\n\n\nThe styles specify the different colors and position the sides to the package. Each side gets a position that’s relative to the “main” side. (You’ll see why all that nesting is useful in a moment.)\n\n\n\nThere are some things to be aware of. Much like working with cuboids, we are using --height, --width, and --depth variables for sizing. This will make it easier to change our package sizing down the line.\n\n\n\n.package {\n  height: calc(var(--height, 20) * 1vmin);\n  width: calc(var(--width, 20) * 1vmin);\n}\n\n\n\nWhy define sizing like this? We are using a unit-less default sizing of 20, an idea I picked up from Lea Verou’s 2016 CSS ConfAsia talk (starting at 52:44). Using custom properties as “data” instead of “values,” we are free to do what we want with them using calc(). Additionally, JavaScript doesn’t have to care about value units and we can change to pixels, a percentage, etc., without having to make changes elsewhere. You could refactor this into a coefficient in the --root, but it could also quickly become overkill.\n\n\n\nThe flaps for each side also need a size ever so smaller than the sides they are a part of. This is so we can see a slight gap as we would in real life. Also, the flaps on two sides need to sit a little lower. This is so that when we fold them up, we don’t get z-index fighting between them.\n\n\n\n.package__flap {\n  width: 99.5%;\n  height: 49.5%;\n  background: var(--flap-bg, var(--face-4));\n  position: absolute;\n  left: 50%;\n  transform: translate(-50%, 0);\n}\n.package__flap--top {\n  transform-origin: 50% 100%;\n  bottom: 100%;\n}\n.package__flap--bottom {\n  top: 100%;\n  transform-origin: 50% 0%;\n}\n.package__side--extra > .package__flap--bottom,\n.package__side--tabbed > .package__flap--bottom {\n  top: 99%;\n}\n.package__side--extra > .package__flap--top,\n.package__side--tabbed > .package__flap--top {\n  bottom: 99%;\n}\n\n\n\nWe’re also starting to consider the transform-origin for the individual pieces. A top flap will rotate from its bottom edge and a bottom flap will rotate from its top edge.\n\n\n\nWe can use a pseudo-element for the tab on that right side. We are using clip-path to get that desired shape.\n\n\n\n.package__side--tabbed:after {\n  content: '';\n  position: absolute;\n  left: 99.5%;\n  height: 100%;\n  width: 10%;\n  background: var(--face-3);\n  -webkit-clip-path: polygon(0 0%, 100% 20%, 100% 80%, 0 100%);\n  clip-path: polygon(0 0%, 100% 20%, 100% 80%, 0 100%);\n  transform-origin: 0% 50%;\n}\n\n\n\nLet’s start working with our template on a 3D plane. We can start by rotating the .scene on the X and Y axis.\n\n\n\n.scene {\n  transform: rotateX(-24deg) rotateY(-32deg) rotateX(90deg);\n}\n\n\n\nCodePen Embed Fallback\n\n\nFolding up\n\n\nWe’re ready to start folding up our template! Our template will fold up based on a custom property, --packaged. If the value is 1, then we can fold up the template. For example, let’s fold some of the sides and the pseudo-element tab.\n\n\n\n.package__side--tabbed,\n.package__side--tabbed:after {\n  transform: rotateY(calc(var(--packaged, 0) * -90deg)); \n}\n.package__side--extra {\n  transform: rotateY(calc(var(--packaged, 0) * 90deg));\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nOr, we could write a rule for all sides that aren’t the “main” one.\n\n\n\n.package__side:not(.package__side--main),\n.package__side:not(.package__side--main):after {\n  transform: rotateY(calc((var(--packaged, 0) * var(--rotation, 90)) * 1deg));\n}\n.package__side--tabbed { --rotation: -90; }\n\n\n\nAnd that would cover all the sides.\n\n\n\nCodePen Embed Fallback\n\n\n\nRemember when I said the nested sides allow us to inherit a parent’s transform? If we update our demo so we can change the value of --packaged, we can see how the value affects the transforms. Try sliding the --packaged value between 1 and 0 and you’ll see exactly what I mean.\n\n\n\nCodePen Embed Fallback\n\n\n\nNow that we have a way to toggle the folding state of our template, we can start working on some motion. Our previous demo flips between the two states. We can make use of transition for that. The quickest way? Add a transition to the transform of every child in the .scene.\n\n\n\n.scene *,\n.scene *::after {\n  transition: transform calc(var(--speed, 0.2) * 1s);\n}\n\n\n\nCodePen Embed Fallback\n\n\nMulti-step transitions!\n\n\nBut we don’t fold the template all up in one go — in real life, there’s a sequence to it where we’d fold up one side and its flap first then move on to the next, and so on. Scoped custom properties are perfect for this.\n\n\n\n.scene *,\n.scene *::after {\n  transition: transform calc(var(--speed, 0.2) * 1s) calc((var(--step, 1) * var(--delay, 0.2)) * 1s);\n}\n\n\n\nHere we are saying that, for each transition, use a transition-delay of --step multiplied by --delay. The --delay value won’t change but each element can define which “step” it is in the sequence. And then we can be explicit about the order in which things happen.\n\n\n\n.package__side--extra {\n  --step: 1;\n}\n.package__side--tabbed {\n  --step: 2;\n}\n.package__side--flipped,\n.package__side--tabbed::after {\n  --step: 3;\n}\n\n\n\nConsider the following demo for a better idea of how this works. Change the slider values to update the order in which things happen. Can you change which car wins?\n\n\n\nCodePen Embed Fallback\n\n\n\nThat same technique is key for what we are going to for. We could even introduce an --initial-delay that adds a slight pause to everything for even more realism.\n\n\n\n.race__light--animated,\n.race__light--animated:after,\n.car {\n  animation-delay: calc((var(--step, 0) * var(--delay-step, 0)) * 1s);\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nIf we look back at our package, we can take this further and apply a “step” to all the elements that are going to transform. It’s quite verbose but it does the job. Alternatively, you could inline these values in the markup.\n\n\n\n.package__side--extra > .package__flap--bottom {\n  --step: 4;\n}\n.package__side--tabbed > .package__flap--bottom {\n  --step: 5;\n}\n.package__side--main > .package__flap--bottom {\n  --step: 6;\n}\n.package__side--flipped > .package__flap--bottom {\n  --step: 7;\n}\n.package__side--extra > .package__flap--top {\n  --step: 8;\n}\n.package__side--tabbed > .package__flap--top {\n  --step: 9;\n}\n.package__side--main > .package__flap--top {\n  --step: 10;\n}\n.package__side--flipped > .package__flap--top {\n  --step: 11;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nBut, it doesn’t feel very realistic.\n\n\nMaybe we oughta flip the box, too\n\n\nIf I were folding up the box in real life, I’d likely flip the box up before folding in the top flaps. So how might we do that? Well, those with an eager eye might have noticed the .package__wrapper element. We are going to use this to slide the package. Then we’re going to rotate the package on the x-axis. This will create the impression of flipping the package onto its side.\n\n\n\n.package {\n  transform-origin: 50% 100%;\n  transform: rotateX(calc(var(--packaged, 0) * -90deg));\n}\n.package__wrapper {\n  transform: translate(0, calc(var(--packaged, 0) * -100%));\n}\n\n\n\nAdjusting the --step declarations accordingly gives us something like this.\n\n\n\nCodePen Embed Fallback\n\n\nUnfolding the box\n\n\nIf you flip between the folded and not folded states, you’ll notice that the unfold doesn’t look right. The unfolding sequence should be the exact reverse of the folding sequence. We could flip the --step based on --packaged and the number of steps. Our latest step is 15. We can update our transition to this:\n\n\n\n.scene *,\n.scene *:after {\n  --no-of-steps: 15;\n  --step-delay: calc(var(--step, 1) - ((1 - var(--packaged, 0)) * (var(--step) - ((var(--no-of-steps) + 1) - var(--step)))));\n  transition: transform calc(var(--speed, 0.2) * 1s) calc((var(--step-delay) * var(--delay, 0.2)) * 1s);\n}\n\n\n\nThat is quite the mouthful of calc to reverse the transition-delay. But, it works! We must remind ourselves to keep that --no-of-steps value up to date though!\n\n\n\nCodePen Embed Fallback\n\n\n\nWe do have another option. As we continue down the “pure CSS” route, we will eventually make use of the checkbox hack to toggling between the folding states. We could have two sets of defined “steps” where one set is active when our checkbox gets checked. It’s certainly a more verbose solution. But, it does give us more finite control.\n\n\n\n/* Folding */\n:checked ~ .scene .package__side--extra {\n  --step: 1;\n}\n/* Unfolding */\n.package__side--extra {\n  --step: 15;\n}\n\n\nSizing and centering\n\n\nBefore we ditch the use of [dat.gui](https://github.com/dataarts/dat.gui) in our demo, let’s have a play with the size of our package. We want to check that our package remains centered while folding and flipping. In this demo, the package has a larger --height and the .scene has a dashed border.\n\n\n\nCodePen Embed Fallback\n\n\n\nWe may as well tweak our transform to better center the package while we’re at it:\n\n\n\n/* Considers package height by translating on z-axis */\n.scene {\n  transform: rotateX(calc(var(--rotate-x, -24) * 1deg)) rotateY(calc(var(--rotate-y, -32) * 1deg)) rotateX(90deg) translate3d(0, 0, calc(var(--height, 20) * -0.5vmin));\n}\n/* Considers package depth by sliding the depth before flipping */\n.package__wrapper {\n  transform: translate(0, calc((var(--packaged, 0) * var(--depth, 20)) * -1vmin));\n}\n\n\n\nThis gives us reliable centering in the scene. It all comes down to preference though!\n\n\n\nCodePen Embed Fallback\n\n\nAdding in the checkbox hack\n\n\nNow let’s get dat.gui out of the way and make this “pure” CSS. For this, we need to introduce a bunch of controls in the HTML. We are going to use a checkbox for folding and unfolding our package. Then we’re going to use a radio button to pick a package size.\n\n\n\n<input id=\"package\" type=\"checkbox\"/>\n\n<input id=\"one\" type=\"radio\" name=\"size\"/>\n<label class=\"size-label one\" for=\"one\">S</label>\n\n<input id=\"two\" type=\"radio\" name=\"size\" checked=\"checked\"/>\n<label class=\"size-label two\" for=\"two\">M</label>\n\n<input id=\"three\" type=\"radio\" name=\"size\"/>\n<label class=\"size-label three\" for=\"three\">L</label>\n\n<input id=\"four\" type=\"radio\" name=\"size\"/>\n<label class=\"size-label four\" for=\"four\">XL</label>\n\n<label class=\"close\" for=\"package\">Close Package</label>\n<label class=\"open\" for=\"package\">Open Package</label>\n\n\n\nIn the final demo, we will hide the inputs and make use of the label elements. For now, though, let’s leave them all visible. The trick is to use the sibling combinator (~) when certain controls get :checked. We can then set custom property values on the .scene.\n\n\n\n#package:checked ~ .scene {\n  --packaged: 1;\n}\n#one:checked ~ .scene {\n  --height: 10;\n  --width: 20;\n  --depth: 20;\n}\n#two:checked ~ .scene {\n  --height: 20;\n  --width: 20;\n  --depth: 20;\n}\n#three:checked ~ .scene {\n  --height: 20;\n  --width: 30;\n  --depth: 20;\n}\n#four:checked ~ .scene {\n  --height: 30;\n  --width: 20;\n  --depth: 30;\n}\n\n\n\nAnd here is the demo with that working!\n\n\n\nCodePen Embed Fallback\n\n\nFinal polish\n\n\nNow we’re in a place to make things look “pretty” and add some extra touches. Let’s start by hiding all the inputs.\n\n\n\ninput {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n\n\nWe can style the sizing options as rounded buttons:\n\n\n\n.size-label {\n  position: fixed;\n  top: var(--top);\n  right: 1rem;\n  z-index: 3;\n  font-family: sans-serif;\n  font-weight: bold;\n  color: #262626;\n  height: 44px;\n  width: 44px;\n  display: grid;\n  place-items: center;\n  background: #fcfcfc;\n  border-radius: 50%;\n  cursor: pointer;\n  border: 4px solid #8bb1b1;\n  transform: translate(0, calc(var(--y, 0) * 1%)) scale(var(--scale, 1));\n  transition: transform 0.1s;\n}\n.size-label:hover {\n  --y: -5;\n}\n.size-label:active {\n  --y: 2;\n  --scale: 0.9;\n}\n\n\n\nWe want to be able to tap anywhere to toggle between folding and unfolding our package. So our .open and .close labels will take up the full screen. Wondering why we have two labels? It’s a little trick. If we use a transition-delay and scale up the appropriate label, we can hide both labels while the package transitions. This is how we combat spam tapping (even though it won’t stop a user hitting the space bar on a keyboard).\n\n\n\n.close,\n.open {\n  position: fixed;\n  height: 100vh;\n  width: 100vw;\n  z-index: 2;\n  transform: scale(var(--scale, 1)) translate3d(0, 0, 50vmin);\n  transition: transform 0s var(--reveal-delay, calc(((var(--no-of-steps, 15) + 1) * var(--delay, 0.2)) * 1s));\n}\n\n#package:checked ~ .close,\n.open {\n  --scale: 0;\n  --reveal-delay: 0s;\n}\n#package:checked ~ .open {\n  --scale: 1;\n  --reveal-delay: calc(((var(--no-of-steps, 15) + 1) * var(--delay, 0.2)) * 1s);\n}\n\n\n\nCheck out this demo to see where we’ve added background-color to both .open and .close. Neither label is visible during the transition.\n\n\n\nCodePen Embed Fallback\n\n\n\nWe’ve got complete functionality! But, our package is a little underwhelming at the moment. Let’s add extra details to make things more “box”-like with things like parcel tape and packing labels.\n\n\n\nCodePen Embed Fallback\n\n\n\nLittle details like this are only limited by our imagination! We can use our --packaged custom property to affect anything. For example, the .package__tape is transitioning the scaleY transform:\n\n\n\n.package__tape {\n  transform: translate3d(-50%, var(--offset-y), -2px) scaleX(var(--packaged, 0));\n}\n\n\n\nThe thing to remember is that whenever we add a new feature that affects the sequence, we need to update our steps. Not only the --step values, but also the --no-of-steps value.\n\n\nThat’s it!\n\n\nThat’s how you make a pure CSS 3D package toggle. Are you going to drop this into your website? Unlikely! But, it’s fun to see how you might achieve these things with CSS. Custom properties are so powerful.\n\n\n\nWhy not get super festive and give the gift of CSS!\n\n\n\nCodePen Embed Fallback\n\n\n\nStay Awesome! ʕ •ᴥ•ʔ\n\nHow to Make a Pure CSS 3D Package Toggle originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-12T15:29:38.000Z",
      "date_modified": "2022-01-12T15:29:38.000Z",
      "_plugin": {
        "pageFilename": "0fae4c5ab9f18316f4924e2fb55dacaf030944d26ffc21cb5260be373c1160a6.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361191",
      "url": "https://css-tricks.com/netlify-identity/",
      "title": "Netlify Identity, a Key Aspect to Jamstack Development",
      "summary": "(This is a sponsored post.)\nNetlify is amazing at static file hosting, but it’s really so much more than that. You can build any sort of website, even highly dynamic apps, with the Jamstack approach and static file hosting …\n\nNetlify Identity, a Key Aspect to Jamstack Development originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p><a href=\"https://www.netlify.com/\" rel=\"noopener\">Netlify</a> is amazing at static file hosting, but it&#8217;s really so much more than that. You can build any sort of website, even highly dynamic apps, with the Jamstack approach and static file hosting at the core. </p>\n\n\n\n<p>Say you want to build a TODO app with users. Those users will need to sign up and log in. Can&#8217;t do that with a static site, right? You can, actually. Netlify helps with <a href=\"https://docs.netlify.com/visitor-access/identity/\" rel=\"noopener\">Netlify Identity</a>, a robust offering they&#8217;ve had for years. Enabling it is just a few clicks in the admin UI, and they even <a href=\"https://github.com/netlify/netlify-identity-widget\" rel=\"noopener\">provide auth widgets</a> so you have to build precious little to get this working.</p>\n\n\n\n<span id=\"more-361191\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?resize=1600%2C800&#038;ssl=1\" alt=\"Showing a login widget powered by Netlify Identity.\" class=\"wp-image-361194\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?resize=1536%2C768&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now you&#8217;ve got a website with authentication, great! But how do you keep going with your TODO app? You&#8217;ll need some kind of cloud storage for the data on your user&#8217;s lists. For that, you&#8217;ll have to reach outside of Netlify to find a cloud storage provider you like. Netlify has had <a href=\"https://www.netlify.com/blog/2019/09/10/announcing-the-faunadb-add-on-for-netlify/\" rel=\"noopener\">a first-class integration with Fauna</a> for years, so that&#8217;s a good choice.</p>\n\n\n\n<p>You&#8217;ll need to communicate with Fauna, of course, and being a static site, JavaScript is how that&#8217;s going to work. Fortunately, your client-side JavaScript can communicate with your own server-side JavaScript that Netlify helps with, which is called <a href=\"https://www.netlify.com/products/functions/\" rel=\"noopener\">Netlify Functions</a>. That&#8217;s right, Netlify helps you build/deploy Lambda functions. This means you can actually have the Lambda functions do the communicating with Faunda, keeping your API keys safe.</p>\n\n\n\n<p>Those are the building blocks. This is a well-worn approach, and really at the heart of Jamstack. Need a head start? Netlify has templates for this kind of thing. Here are some examples with this approach in mind: <a href=\"https://github.com/shortdiv/netlify-fauna-todo-app\" rel=\"noopener\">netlify-fauna-todo-app</a> and <a href=\"https://github.com/netlify/netlify-faunadb-example\" rel=\"noopener\">netlify-faunadb-example</a>. We even have a <a href=\"https://css-tricks.com/accessing-data-netlify-functions-react/#aa-how-to-authenticate-and-authorize-functions-by-netlify-identity\">tutorial that covers that</a>. And there’s a one-minute video demo:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-4-3 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"netlifyidentityfaunatodo\" width=\"500\" height=\"375\" src=\"https://www.youtube.com/embed/7OB_IjTTcwg?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p>There you have it, a website that is every bit as dynamic as something you&#8217;d build with a traditional server. Only now, you&#8217;re building with Netlify meaning you get so many other advantages, like the fact that you&#8217;re deploying from commits to a Git repository and getting build previews, and every other amazing feature Netlify offers. </p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/netlify-identity/\">Netlify Identity, a Key Aspect to Jamstack Development</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "(This is a sponsored post.)\nNetlify is amazing at static file hosting, but it’s really so much more than that. You can build any sort of website, even highly dynamic apps, with the Jamstack approach and static file hosting at the core. \n\n\n\nSay you want to build a TODO app with users. Those users will need to sign up and log in. Can’t do that with a static site, right? You can, actually. Netlify helps with Netlify Identity, a robust offering they’ve had for years. Enabling it is just a few clicks in the admin UI, and they even provide auth widgets so you have to build precious little to get this working.\n\n\n\n\n\n\n\n\n\n\n\nNow you’ve got a website with authentication, great! But how do you keep going with your TODO app? You’ll need some kind of cloud storage for the data on your user’s lists. For that, you’ll have to reach outside of Netlify to find a cloud storage provider you like. Netlify has had a first-class integration with Fauna for years, so that’s a good choice.\n\n\n\nYou’ll need to communicate with Fauna, of course, and being a static site, JavaScript is how that’s going to work. Fortunately, your client-side JavaScript can communicate with your own server-side JavaScript that Netlify helps with, which is called Netlify Functions. That’s right, Netlify helps you build/deploy Lambda functions. This means you can actually have the Lambda functions do the communicating with Faunda, keeping your API keys safe.\n\n\n\nThose are the building blocks. This is a well-worn approach, and really at the heart of Jamstack. Need a head start? Netlify has templates for this kind of thing. Here are some examples with this approach in mind: netlify-fauna-todo-app and netlify-faunadb-example. We even have a tutorial that covers that. And there’s a one-minute video demo:\n\n\n\n\n\n\n\n\n\nThere you have it, a website that is every bit as dynamic as something you’d build with a traditional server. Only now, you’re building with Netlify meaning you get so many other advantages, like the fact that you’re deploying from commits to a Git repository and getting build previews, and every other amazing feature Netlify offers. \n\nNetlify Identity, a Key Aspect to Jamstack Development originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-12T14:13:00.000Z",
      "date_modified": "2022-01-12T14:13:00.000Z",
      "_plugin": {
        "pageFilename": "7f40e0e9c7f76fbb2c2fdbb5197625c33bea70cf6088c642b5ba2b7449e5e9af.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360490",
      "url": "https://css-tricks.com/can-css-prevent-tooltips-from-overflowing/",
      "title": "What Would it Take to Prevent CSS Tooltips From Overflowing?",
      "summary": "Say you have an elements with CSS tooltips and you’re going to position those tooltips such that it opens up next to the element on hover (or probably better: when clicked/tapped). Next to it where? Above it? What if the …\n\nWhat Would it Take to Prevent CSS Tooltips From Overflowing? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Say you have an elements with <a href=\"https://css-tricks.com/perfect-tooltips-with-css-clipping-and-masking/\">CSS tooltips</a> and you&#8217;re going to position those tooltips such that it opens up next to the element on hover (or probably better: when clicked/tapped). Next to it where? Above it? What if the element is already really close to the top of the screen? In that case, it should probably open below it. Or vice versa — and the same goes for the left and right edges of the screen. You definitely want it to be visible rather than overflowing the viewport.</p>\n\n\n\n<p>Sometimes when you open new UI elements, they need to be edge-aware to prevent the content inside from triggering weird scrollbars, or worse, cutting off content. </p>\n\n\n\n<span id=\"more-360490\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1392\" height=\"624\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-04-at-1.27.47-PM.png?resize=1392%2C624&#038;ssl=1\" alt=\"A red button and an orange button, both with CSS tooltips, sitting above two large paragraphs of text. The orange button is hovered, revealing a tooltip to the right of it but it is cut off by the edge of the viewport, making the content illegible.\" class=\"wp-image-360573\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-04-at-1.27.47-PM.png?w=1392&amp;ssl=1 1392w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-04-at-1.27.47-PM.png?resize=300%2C134&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-04-at-1.27.47-PM.png?resize=1024%2C459&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-04-at-1.27.47-PM.png?resize=768%2C344&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-04-at-1.27.47-PM.png?resize=1000%2C448&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Very important what?!</figcaption></figure>\n\n\n\n<p>This is an age-old problem on the web. I remember using jQuery UI tooltips on purpose because it had this special ability to be edge-aware. You can imagine the JavaScript behind it. You figure out where the element is going to be and use positioning math to figure out if it will be within the viewport. If it won&#8217;t be, try a different position that <em>does</em> fit. </p>\n\n\n\n<p>As ever, everything old is new again. Check out <a href=\"https://floating-ui.com/\" rel=\"noopener\">Floating UI</a>, designed just for this problem. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2352\" height=\"2278\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=2352%2C2278&#038;ssl=1\" alt=\"FloatingUI home screen showing a logo that looks like a CSS tooltip with a happy face.\" class=\"wp-image-360491\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?w=2352&amp;ssl=1 2352w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=300%2C291&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=1024%2C992&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=768%2C744&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=1536%2C1488&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=2048%2C1984&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=1000%2C969&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Floating UI is a low-level toolkit to position&nbsp;floating elements&nbsp;while intelligently keeping them in view. Tooltips, popovers, dropdowns, menus, and more.</p></blockquote>\n\n\n\n<p>It looks super well done. I like the focus, the demos are super well done, and it&#8217;s a pretty tiny dependency.</p>\n\n\n\n<p>But ya know what would be even cooler? If CSS could do this all by itself. That&#8217;s the vibe with <a href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/CSSAnchoredPositioning/explainer.md\" rel=\"noopener\">CSS Anchored Positioning</a> — for now just an &#8220;explainer&#8221; document:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>When building interactive components or applications, authors frequently want to leverage UI elements that can render in a &#8220;top-layer&#8221;. Examples of such UI elements include content pickers, teaching UI, tooltips, and menus.&nbsp;<a href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/Popup/explainer.md\" rel=\"noopener\">&#8220;Enabling Popups&#8221;</a>&nbsp;introduced a new&nbsp;<code>popup</code>&nbsp;element to make many of these top-layer elements easier to author.</p><p>Authors frequently wish to &#8220;pin&#8221; or &#8220;anchor&#8221; such top-layer UI to a point on another element, referred to here as an &#8220;anchor element&#8221;. How the top-layer UI is positioned with respect to its anchor element is further influenced or constrained by the edges of the layout viewport.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"816\" height=\"616\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Directionally-aware.png?resize=816%2C616&#038;ssl=1\" alt=\"A four-by-four grid showing the same blue button positioned at different corners of each cell, and a tooltip that avoids the edge of the screen where the button sits.\" class=\"wp-image-360493\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Directionally-aware.png?w=816&amp;ssl=1 816w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Directionally-aware.png?resize=300%2C226&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Directionally-aware.png?resize=768%2C580&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I love it. The web platform at its best. Seeing what authors are needing to do and reaching for libraries to do, and trying to step in and do it natively (and hopefully better). </p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/can-css-prevent-tooltips-from-overflowing/\">What Would it Take to Prevent CSS Tooltips From Overflowing?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Say you have an elements with CSS tooltips and you’re going to position those tooltips such that it opens up next to the element on hover (or probably better: when clicked/tapped). Next to it where? Above it? What if the element is already really close to the top of the screen? In that case, it should probably open below it. Or vice versa — and the same goes for the left and right edges of the screen. You definitely want it to be visible rather than overflowing the viewport.\n\n\n\nSometimes when you open new UI elements, they need to be edge-aware to prevent the content inside from triggering weird scrollbars, or worse, cutting off content. \n\n\n\n\n\n\n\nVery important what?!\n\n\n\nThis is an age-old problem on the web. I remember using jQuery UI tooltips on purpose because it had this special ability to be edge-aware. You can imagine the JavaScript behind it. You figure out where the element is going to be and use positioning math to figure out if it will be within the viewport. If it won’t be, try a different position that does fit. \n\n\n\nAs ever, everything old is new again. Check out Floating UI, designed just for this problem. \n\n\n\n\n\n\n\nFloating UI is a low-level toolkit to position floating elements while intelligently keeping them in view. Tooltips, popovers, dropdowns, menus, and more.\n\n\n\nIt looks super well done. I like the focus, the demos are super well done, and it’s a pretty tiny dependency.\n\n\n\nBut ya know what would be even cooler? If CSS could do this all by itself. That’s the vibe with CSS Anchored Positioning — for now just an “explainer” document:\n\n\n\nWhen building interactive components or applications, authors frequently want to leverage UI elements that can render in a “top-layer”. Examples of such UI elements include content pickers, teaching UI, tooltips, and menus. “Enabling Popups” introduced a new popup element to make many of these top-layer elements easier to author.Authors frequently wish to “pin” or “anchor” such top-layer UI to a point on another element, referred to here as an “anchor element”. How the top-layer UI is positioned with respect to its anchor element is further influenced or constrained by the edges of the layout viewport.\n\n\n\n\n\n\n\nI love it. The web platform at its best. Seeing what authors are needing to do and reaching for libraries to do, and trying to step in and do it natively (and hopefully better). \n\nWhat Would it Take to Prevent CSS Tooltips From Overflowing? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-11T23:18:56.000Z",
      "date_modified": "2022-01-11T23:18:56.000Z",
      "_plugin": {
        "pageFilename": "16844edcdef767ecdb1e1a05de94a131eb900561639a44301786b18dc2aeac0d.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359243",
      "url": "https://css-tricks.com/adding-vite-to-your-existing-web-app/",
      "title": "Adding Vite to Your Existing Web App",
      "summary": "Vite (pronounced “veet”) is a newish JavaScript bundler. It comes batteries-included, requires almost no configuration to be useful, and includes plenty of configuration options. Oh—and it’s fast. Incredibly fast.\nThis post will walk through the process of converting an existing …\n\nAdding Vite to Your Existing Web App originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p><a href=\"https://vitejs.dev/\" rel=\"noopener\">Vite</a> (pronounced “veet”) is a newish JavaScript bundler. It comes batteries-included, requires almost no configuration to be useful, and includes plenty of configuration options. Oh—and it’s fast. Incredibly fast.</p>\n\n\n\n<p>This post will walk through the process of converting an existing project to Vite. We’ll cover things like aliases, shimming webpack’s dotenv handling, and server proxying. In other words, we’re looking at how to move a project from its existing bundler to Vite. If you’re looking instead to start a fresh project, you’ll want to <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">jump to their documentation</a>.</p>\n\n\n\n<p>Long story, short: the CLI will ask for your framework of choice—React, Preact, Svelte, Vue, Vanilla, or even lit-html—and whether you want TypeScript, then give you a fully functioning project.</p>\n\n\n\n<span id=\"more-359243\"></span>\n\n\n\n<p class=\"is-style-explanation\">Scaffold first! If you are interested in learning about integrating Vite into a legacy project, I’d <em>still</em> recommend scaffolding an empty project and poking around it a bit. At times, I’ll be pasting some clumps of code, but most of that comes straight from the default Vite template.</p>\n\n\n<h3 id=\"our-use-case\">Our use case</h3>\n\n\n<p>What we’re looking at is based on my own experience migrating the webpack build of my <a href=\"https://mylibrary.io\" rel=\"noopener\">booklist project</a> (<a href=\"https://github.com/arackaf/booklist/tree/special/pre-vite-snapshot/react\" rel=\"noopener\">repo</a>). There isn’t anything particularly special about this project, but it’s fairly big and old, and leaned hard on webpack. So, in that sense, it’s a good opportunity to see some of Vite’s more useful configuration options in action as we migrate to it.</p>\n\n\n<h3 id=\"what-we-wont-need\">What we <em>won’t</em> need</h3>\n\n\n<p>One of the most compelling reasons to reach for Vite is that it already does a lot right out of the box, incorporating many of the responsi<a href=\"https://css-tricks.com/the-vite-ecosystem/\">bilities from other frameworks</a> so there are fewer dependencies and a more established baseline for configurations and conventions.</p>\n\n\n\n<p>So, instead of starting by calling out what we need to get started, let’s go over all the common webpack things we <em>don’t need</em> because Vite gives them to us for free.</p>\n\n\n<h4 id=\"static-asset-loading\">Static asset loading</h4>\n\n\n<p>We usually need to add something like this in webpack:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  test: /\\.(png|jpg|gif|svg|eot|woff|woff2|ttf)$/,\n  use: [\n    {\n      loader: \"file-loader\"\n    }\n  ]\n}</code></pre>\n\n\n\n<p>This takes any references to font files, images, SVG files, etc., and copies them over to your dist folder so they can be referenced from your new bundles. This comes standard in Vite.</p>\n\n\n<h4 id=\"styles\">Styles</h4>\n\n\n<p>I say &#8220;styles” as opposed to “css” intentionally here because, with webpack, you might have something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  test: /\\.s?css$/,\n  use: [MiniCssExtractPlugin.loader, \"css-loader\", \"sass-loader\"]\n},\n\n// later\n\nnew MiniCssExtractPlugin({ filename: \"[name]-[contenthash].css\" }),</code></pre>\n\n\n\n<p>…which allows the application to import CSS <em>or</em> SCSS files. You’ll grow tired of hearing me say this, but Vite supports this out of the box. Just be sure to install Sass itself into your project, and Vite will handle the rest.</p>\n\n\n<h4 id=\"transpilation-typescript\">Transpilation / TypeScript</h4>\n\n\n<p>It’s likely your code is using TypeScript, and or non-standard JavaScript features, like JSX. If that’s the case, you’ll need to transpile your code to remove those things and produce plain old JavaScript that a browser (or JavaScript parser) can understand. In webpack that would look something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  test: /\\.(t|j)sx?$/,\n  exclude: /node_modules/,\n  loader: \"babel-loader\"\n},</code></pre>\n\n\n\n<p>…with a corresponding Babel configuration to specify the appropriate plugins which, for me, looked like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"presets\": [\"@babel/preset-typescript\"],\n  \"plugins\": [\n    \"@babel/plugin-proposal-class-properties\",\n    \"@babel/plugin-syntax-dynamic-import\",\n    \"@babel/plugin-proposal-optional-chaining\",\n    \"@babel/plugin-proposal-nullish-coalescing-operator\"\n  ]\n}</code></pre>\n\n\n\n<p>While I could have probably stopped using those first two plugins years ago, it doesn’t really matter since, as I’m sure you’ve guessed, Vite does this all for us. It takes your code, removes any TypeScript and JSX, and produces code supported by modern browsers.</p>\n\n\n\n<p>If you’d like to support older browsers (and I’m not saying you should), then <a href=\"https://github.com/vitejs/vite/tree/main/packages/plugin-legacy\" rel=\"noopener\">there’s a plugin for that</a>.</p>\n\n\n<h4 id=\"nodemodules\"><code>node_modules</code></h4>\n\n\n<p>Surprisingly, webpack requires you to tell it to resolve imports from <code>node_modules</code>, which we do with this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">resolve: {\n  modules: [path.resolve(\"./node_modules\")]\n}</code></pre>\n\n\n\n<p>As expected, Vite already does this.</p>\n\n\n<h4 id=\"production-mode\">Production mode</h4>\n\n\n<p>One of the common things we do in webpack is distinguish between production and development environments by manually passing a <code>mode</code> property, like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">mode: isProd ? \"production\" : \"development\",</code></pre>\n\n\n\n<p>…which we normally surmise with something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const isProd = process.env.NODE_ENV == \"production\";</code></pre>\n\n\n\n<p>And, of course, we set that environment variable via our build process.</p>\n\n\n\n<p>Vite handles this a bit differently and gives us different commands to run for development builds versus those for production, which we’ll get into shortly.</p>\n\n\n<h4 id=\"file-extensions\">File extensions</h4>\n\n\n<p>At the risk of belaboring the point, I’ll quickly note that Vite also doesn’t require you to specify every file extension you’re using.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">resolve: {\n  extensions: [\".ts\", \".tsx\", \".js\"],\n}</code></pre>\n\n\n\n<p>Just set up the right kind of Vite project, and you’re good to go.</p>\n\n\n<h3 id=\"rollup-plugins-are-compatible\">Rollup plugins are compatible!</h3>\n\n\n<p>This is such a key point I wanted to call it out in its own section. If you still wind up with some webpack plugins you need to replace in your Vite app when you finish this blog post, then try to find an equivalent Rollup plugin and use <em>that.</em> You read that correctly: Rollup plugins are already (or usually, at least) compatible with Vite. Some Rollup plugins, of course, <strong>do things</strong> that are incompatible with how Vite works—but in general, they should just work.</p>\n\n\n\n<p>For more info, <a href=\"https://vitejs.dev/guide/using-plugins.html#using-plugins\" rel=\"noopener\">check out the docs</a>.</p>\n\n\n<h3 id=\"your-first-vite-project\">Your first Vite project</h3>\n\n\n<p>Remember, we’re moving an existing legacy webpack project to Vite. If you’re building something new, it’s better to <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">start a new Vite project</a> and go from there. That said, the initial code I’m showing you is basically copied right from what Vite scaffolds from a fresh project anyway, so taking a moment to scaffold a new project might also a good idea for you to compare processes.</p>\n\n\n<h4 id=\"the-html-entry-point\">The HTML entry point</h4>\n\n\n<p>Yeah, you read that right. Rather than putting HTML integration behind a plugin, like webpack does, Vite is HTML first. It expects an HTML file with a script tag to your JavaScript entrypoint, and generates everything from there.</p>\n\n\n\n<p>Here’s the HTML file (which Vite expects to be called <code>index.html</code>) we’re starting with:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n  &lt;head>\n    &lt;meta charset=\"UTF-8\" />\n    &lt;title>The GOAT of web apps&lt;/title>\n  &lt;/head>\n  &lt;body>\n    &lt;div id=\"home\">&lt;/div>\n    &lt;script type=\"module\" src=\"/reactStartup.tsx\">&lt;/script>\n  &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Note that the <code>&lt;script&gt;</code> tag points to <code>/reactStartup.tsx</code>. Adjust that to your own entry as needed.</p>\n\n\n\n<p>Let’s install a few things, like a React plugin:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npm i vite @vitejs/plugin-react @types/node</code></pre>\n\n\n\n<p>We also create the following <code>vite.config.ts</code> right next to the <code>index.html</code> file in the project directory.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n  plugins: [react()]\n});</code></pre>\n\n\n\n<p>Lastly, let’s add a few new npm scripts:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"dev\": \"vite\",\n\"build\": \"vite build\",\n\"preview\": \"vite preview\",</code></pre>\n\n\n\n<p>Now, let’s start Vite’s development server with <code>npm run dev</code>. It’s incredibly fast, and incrementally builds whatever it needs to, based on what’s requested.</p>\n\n\n\n<p>But, unfortunately, it fails. At least for right now.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1274\" height=\"322\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C4D835E8887DD7079D4DFB87EFAA6378B66A07D65019D9DEF872A309753C4317_1637377229818_image.png?resize=1274%2C322&#038;ssl=1\" alt=\"Screenshot of a terminal screen with a dark background and light text. There is an error in read that says there was an error when starting the development server.\" class=\"wp-image-359245\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C4D835E8887DD7079D4DFB87EFAA6378B66A07D65019D9DEF872A309753C4317_1637377229818_image.png?w=1274&amp;ssl=1 1274w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C4D835E8887DD7079D4DFB87EFAA6378B66A07D65019D9DEF872A309753C4317_1637377229818_image.png?resize=300%2C76&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C4D835E8887DD7079D4DFB87EFAA6378B66A07D65019D9DEF872A309753C4317_1637377229818_image.png?resize=1024%2C259&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C4D835E8887DD7079D4DFB87EFAA6378B66A07D65019D9DEF872A309753C4317_1637377229818_image.png?resize=768%2C194&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C4D835E8887DD7079D4DFB87EFAA6378B66A07D65019D9DEF872A309753C4317_1637377229818_image.png?resize=1000%2C253&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We’ll get to how to set up aliases in a moment, but for now, let’s instead modify our <code>reactStartup</code> file (or whatever your entry file is called) as follows:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import React from \"react\";\nimport { render } from \"react-dom\";\n\nrender(\n  &lt;div>\n    &lt;h1>Hi there&lt;/h1>\n  &lt;/div>,\n  document.getElementById(\"home\")\n);</code></pre>\n\n\n\n<p>Now we can run it our <code>npm run dev</code> command and browse to <code>localhost:3000</code>.</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"552\" height=\"242\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/8xvk4CFA.png?resize=552%2C242&#038;ssl=1\" alt=\"Screenshot of a terminal window with a black background and light text. Green text says the development server is running at localhost.\" class=\"wp-image-359247\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/8xvk4CFA.png?w=552&amp;ssl=1 552w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/8xvk4CFA.png?resize=300%2C132&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"582\" height=\"212\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/giVwEsxM.png?resize=582%2C212&#038;ssl=1\" alt=\"Screenshot of a blank white page that says hi there in black in a default serif font.\" class=\"wp-image-359248\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/giVwEsxM.png?w=582&amp;ssl=1 582w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/giVwEsxM.png?resize=300%2C109&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n</div>\n\n\n<h4 id=\"hot-module-reloading-hmr\">Hot module reloading (HMR)</h4>\n\n\n<p>Now that the development server is running, try modifying your source code. The output <em>should</em> update almost immediately via Vite’s HMR. This is one of Vite’s nicest features. It makes the development experience so much nicer when changes seem to reflect immediately rather than having to wait, or even trigger them ourselves.</p>\n\n\n\n<p>The rest of this post will go over all the things I had to do to get my own app to build and run with Vite. I hope some of them are relevant for you!</p>\n\n\n<h4 id=\"aliases\">Aliases</h4>\n\n\n<p>It’s not uncommon for webpack-based projects to have some config like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">resolve: {\n  alias: {\n    jscolor: \"util/jscolor.js\"\n  },\n  modules: [path.resolve(\"./\"), path.resolve(\"./node_modules\")]\n}</code></pre>\n\n\n\n<p>This sets up an alias to <code>jscolor</code> at the provided path, and tells webpack to look both in the root folder (<code>./</code>) and in <code>node_modules</code> when resolving imports. This allows us to have imports like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { thing } from \"util/helpers/foo\"</code></pre>\n\n\n\n<p>…anywhere in our component tree, assuming there’s a <code>util</code> folder at the very top.</p>\n\n\n\n<p>Vite doesn’t allow you to provide an entire folder for resolution like this, but it does allow you to specify aliases, which follow the same rules as the <a href=\"https://github.com/rollup/plugins/tree/master/packages/alias#entries\" rel=\"noopener\">@rollup/plugin-alias</a>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nimport path from \"path\";\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      jscolor: path.resolve(\"./util/jscolor.js\"),\n      app: path.resolve(\"./app\"),\n      css: path.resolve(\"./css\"),\n      util: path.resolve(\"./util\")\n    }\n  },\n  plugins: [react()]\n});</code></pre>\n\n\n\n<p>We’ve added a <code>resolve.alias</code> section, including entries for everything we need to alias. Our <code>jscolor</code> util is set to the relevant module, and we have aliases for our top-level directories. Now we can import from <code>app/</code>, <code>css*/*</code>, and <code>util/</code> from any component, anywhere.</p>\n\n\n\n<p>Note that these aliases only apply to the root of the import, e.g. <code>util/foo</code>. If you have some <em>other</em> util folder deeper in your tree, and you reference it with this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { thing } from \"./helpers/util\";</code></pre>\n\n\n\n<p>…then the alias above will <em>not</em> mess that up. This distinction is not well documented, but you can see it <a href=\"https://github.com/rollup/plugins/blob/02fb349d315f0ffc55970fba5de20e23f8ead881/packages/alias/src/index.ts#L7-L20\" rel=\"noopener\">in the Rollup alias plugin</a>. Vite’s alias matches that same behavior.</p>\n\n\n<h4 id=\"environment-variables\">Environment variables</h4>\n\n\n<p>Vite, of course, <a href=\"https://vitejs.dev/guide/env-and-mode.html\" rel=\"noopener\">supports environment variables</a>. It reads config values out of your <code>.env</code> files in development, or <code>process.env</code>, and injects them into your code. Unfortunately, things work a bit differently than what you might be used to. First, it does not replace <code>process.env.FOO</code> but rather <code>import.meta.env.FOO</code>. Not only that, but it only replaces variables prefixed with <code>VITE_</code> by default. So, <code>import.meta.env.VITE_FOO</code> would actually be replaced, but not my original <code>FOO</code>. This prefix can be configured, but not set to empty string.</p>\n\n\n\n<p>For a legacy project, you could grep and replace all your environment variables to use <code>import.meta.env</code>, then add a <code>VITE_</code> prefix, update your <code>.env</code> files, and update the environment variables in whatever CI/CD system you use. Or you can configure the more classic behavior of replacing <code>process.env.ANYTHING</code> with values from a <code>.env</code> file in development, or the real <code>process.env</code> value in production.</p>\n\n\n\n<p>Here’s how. Vite’s <a href=\"https://vitejs.dev/config/#define\" rel=\"noopener\"><code>define</code></a> feature is basically what we need. This registers global variables during development, and does raw text replacement for production. We need to set things up so that we manually read our <code>.env</code> file in development mode, and the <code>process.env</code> object in production mode, and then add the appropriate <code>define</code> entries.</p>\n\n\n\n<p>Let’s build that all into a Vite plugin. First, run <code>npm i dotenv</code>. </p>\n\n\n\n<p>Now let&#8217;s look at the code for the plugin:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import dotenv from \"dotenv\";\n\nconst isProd = process.env.NODE_ENV === \"production\";\nconst envVarSource = isProd ? process.env : dotenv.config().parsed;\n\nexport const dotEnvReplacement = () => {\n  const replacements = Object.entries(envVarSource).reduce((obj, [key, val]) => {\n    obj[`process.env.${key}`] = `\"${val}\"`;\n    return obj;\n  }, {});\n\n  return {\n    name: \"dotenv-replacement\",\n    config(obj) {\n      obj.define = obj.define || {};\n      Object.assign(obj.define, replacements);\n    }\n  };\n};</code></pre>\n\n\n\n<p>Vite sets <code>process.env.NODE_ENV</code> for us, so all we need to do is check that to see which mode we’re in.</p>\n\n\n\n<p>Now we get the actual environment variables. If we’re in production, we grab <code>process.env</code> itself. If we’re in dev, we ask dotenv to grab our <code>.env</code> file, parse it, and get back an object with all the values.</p>\n\n\n\n<p>Our plugin is a function that returns a Vite plugin object. We inject our environment values into a new object that has <code>process.env.</code> in front of the value, and then we return our actual plugin object. There is a number of hooks available to use. Here, though, we only need the <code>config</code> hook, which allows us to modify the current config object. We add a <code>define</code> entry if none exists, then add all our values.</p>\n\n\n\n<p>But before moving forward, I want to note that the Vite’s environment variables limitations we are working around exist for a reason. The code above is how bundlers are <em>frequently</em> configured, but that still means any random value in <code>process.env</code> is stuck into your source code if that key exists. There are potential security concerns there, so please keep that in mind.</p>\n\n\n<h4 id=\"server-proxy\">Server proxy</h4>\n\n\n<p>What does your deployed web application look like? If all it’s doing is serving JavaScript/CSS/HTML—with literally everything happening via separate services located elsewhere—then good! You’re effectively done. What I’ve shown you should be all you need. Vite’s development server will serve your assets as needed, which pings all your services just like they did before.</p>\n\n\n\n<p>But what if your web app is small enough that you have some services running right on your web server? For the project I’m converting, I have a GraphQL endpoint running on my web server. For development, I start my <a href=\"http://expressjs.com\" rel=\"noopener\">Express</a> server, which previously knew how to serve the assets that webpack generated. I also start a webpack watch task to generate those assets.</p>\n\n\n\n<p>But with Vite shipping its own dev server, we need to start that Express server (on a separate port than what Vite uses) and then proxy calls to <code>/graphql</code> over to <em>there</em>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">server: {\n  proxy: {\n    \"/graphql\": \"http://localhost:3001\"\n  }\n} </code></pre>\n\n\n\n<p>This tells Vite that any requests for <code>/graphql</code> should be sent to <code>http://localhost:3001/graphql</code>.</p>\n\n\n\n<p>Note that we do <strong>not</strong> set the proxy to <code>http://localhost:3001/graphql</code> in the config. Instead, we set it to <code>http://localhost:3001</code> and rely on Vite to add the <code>/graphql</code> part (as well any any query arguments) to the path.</p>\n\n\n<h3 id=\"building-libs\">Building libs</h3>\n\n\n<p>As a quick bonus section, let’s briefly discuss building libraries. For example, what if all you want to build is a JavaScript file, e.g. a library like Redux. There’s no associated HTML file, so you’ll first need to tell Vite what to make:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">build: {\n  outDir: \"./public\",\n  lib: {\n    entry: \"./src/index.ts\",\n    formats: [\"cjs\"],\n    fileName: \"my-bundle.js\"\n  }\n}</code></pre>\n\n\n\n<p>Tell Vite where to put the generated bundle, what to call it, and what formats to build. Note that I’m using CommonJS here instead of ES modules since the ES modules do not minify (as of this writing) due to concerns that it could break tree-shaking.</p>\n\n\n\n<p>You&#8217;d run this build with <code>vite build</code>. To start a watch and have the library rebuild on change, you&#8217;d run </p>\n\n\n\n<p><code>vite build --watch</code>.</p>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>Vite is an incredibly exciting tool. Not only does it take the pain, and tears out of bundling web apps, but it greatly improves the performance of doing so in the process. It ships with a blazingly fast development server that ships with hot module reloading and supports all major JavaScript frameworks. If you do web development—whether it’s for fun, it’s your job, or both!—I can’t recommend it strongly enough.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/adding-vite-to-your-existing-web-app/\">Adding Vite to Your Existing Web App</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Vite (pronounced “veet”) is a newish JavaScript bundler. It comes batteries-included, requires almost no configuration to be useful, and includes plenty of configuration options. Oh—and it’s fast. Incredibly fast.\n\n\n\nThis post will walk through the process of converting an existing project to Vite. We’ll cover things like aliases, shimming webpack’s dotenv handling, and server proxying. In other words, we’re looking at how to move a project from its existing bundler to Vite. If you’re looking instead to start a fresh project, you’ll want to jump to their documentation.\n\n\n\nLong story, short: the CLI will ask for your framework of choice—React, Preact, Svelte, Vue, Vanilla, or even lit-html—and whether you want TypeScript, then give you a fully functioning project.\n\n\n\n\n\n\n\nScaffold first! If you are interested in learning about integrating Vite into a legacy project, I’d still recommend scaffolding an empty project and poking around it a bit. At times, I’ll be pasting some clumps of code, but most of that comes straight from the default Vite template.\n\n\nOur use case\n\n\nWhat we’re looking at is based on my own experience migrating the webpack build of my booklist project (repo). There isn’t anything particularly special about this project, but it’s fairly big and old, and leaned hard on webpack. So, in that sense, it’s a good opportunity to see some of Vite’s more useful configuration options in action as we migrate to it.\n\n\nWhat we won’t need\n\n\nOne of the most compelling reasons to reach for Vite is that it already does a lot right out of the box, incorporating many of the responsibilities from other frameworks so there are fewer dependencies and a more established baseline for configurations and conventions.\n\n\n\nSo, instead of starting by calling out what we need to get started, let’s go over all the common webpack things we don’t need because Vite gives them to us for free.\n\n\nStatic asset loading\n\n\nWe usually need to add something like this in webpack:\n\n\n\n{\n  test: /\\.(png|jpg|gif|svg|eot|woff|woff2|ttf)$/,\n  use: [\n    {\n      loader: \"file-loader\"\n    }\n  ]\n}\n\n\n\nThis takes any references to font files, images, SVG files, etc., and copies them over to your dist folder so they can be referenced from your new bundles. This comes standard in Vite.\n\n\nStyles\n\n\nI say “styles” as opposed to “css” intentionally here because, with webpack, you might have something like this:\n\n\n\n{\n  test: /\\.s?css$/,\n  use: [MiniCssExtractPlugin.loader, \"css-loader\", \"sass-loader\"]\n},\n\n// later\n\nnew MiniCssExtractPlugin({ filename: \"[name]-[contenthash].css\" }),\n\n\n\n…which allows the application to import CSS or SCSS files. You’ll grow tired of hearing me say this, but Vite supports this out of the box. Just be sure to install Sass itself into your project, and Vite will handle the rest.\n\n\nTranspilation / TypeScript\n\n\nIt’s likely your code is using TypeScript, and or non-standard JavaScript features, like JSX. If that’s the case, you’ll need to transpile your code to remove those things and produce plain old JavaScript that a browser (or JavaScript parser) can understand. In webpack that would look something like this:\n\n\n\n{\n  test: /\\.(t|j)sx?$/,\n  exclude: /node_modules/,\n  loader: \"babel-loader\"\n},\n\n\n\n…with a corresponding Babel configuration to specify the appropriate plugins which, for me, looked like this:\n\n\n\n{\n  \"presets\": [\"@babel/preset-typescript\"],\n  \"plugins\": [\n    \"@babel/plugin-proposal-class-properties\",\n    \"@babel/plugin-syntax-dynamic-import\",\n    \"@babel/plugin-proposal-optional-chaining\",\n    \"@babel/plugin-proposal-nullish-coalescing-operator\"\n  ]\n}\n\n\n\nWhile I could have probably stopped using those first two plugins years ago, it doesn’t really matter since, as I’m sure you’ve guessed, Vite does this all for us. It takes your code, removes any TypeScript and JSX, and produces code supported by modern browsers.\n\n\n\nIf you’d like to support older browsers (and I’m not saying you should), then there’s a plugin for that.\n\n\nnode_modules\n\n\nSurprisingly, webpack requires you to tell it to resolve imports from node_modules, which we do with this:\n\n\n\nresolve: {\n  modules: [path.resolve(\"./node_modules\")]\n}\n\n\n\nAs expected, Vite already does this.\n\n\nProduction mode\n\n\nOne of the common things we do in webpack is distinguish between production and development environments by manually passing a mode property, like this:\n\n\n\nmode: isProd ? \"production\" : \"development\",\n\n\n\n…which we normally surmise with something like this:\n\n\n\nconst isProd = process.env.NODE_ENV == \"production\";\n\n\n\nAnd, of course, we set that environment variable via our build process.\n\n\n\nVite handles this a bit differently and gives us different commands to run for development builds versus those for production, which we’ll get into shortly.\n\n\nFile extensions\n\n\nAt the risk of belaboring the point, I’ll quickly note that Vite also doesn’t require you to specify every file extension you’re using.\n\n\n\nresolve: {\n  extensions: [\".ts\", \".tsx\", \".js\"],\n}\n\n\n\nJust set up the right kind of Vite project, and you’re good to go.\n\n\nRollup plugins are compatible!\n\n\nThis is such a key point I wanted to call it out in its own section. If you still wind up with some webpack plugins you need to replace in your Vite app when you finish this blog post, then try to find an equivalent Rollup plugin and use that. You read that correctly: Rollup plugins are already (or usually, at least) compatible with Vite. Some Rollup plugins, of course, do things that are incompatible with how Vite works—but in general, they should just work.\n\n\n\nFor more info, check out the docs.\n\n\nYour first Vite project\n\n\nRemember, we’re moving an existing legacy webpack project to Vite. If you’re building something new, it’s better to start a new Vite project and go from there. That said, the initial code I’m showing you is basically copied right from what Vite scaffolds from a fresh project anyway, so taking a moment to scaffold a new project might also a good idea for you to compare processes.\n\n\nThe HTML entry point\n\n\nYeah, you read that right. Rather than putting HTML integration behind a plugin, like webpack does, Vite is HTML first. It expects an HTML file with a script tag to your JavaScript entrypoint, and generates everything from there.\n\n\n\nHere’s the HTML file (which Vite expects to be called index.html) we’re starting with:\n\n\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>The GOAT of web apps</title>\n  </head>\n  <body>\n    <div id=\"home\"></div>\n    <script type=\"module\" src=\"/reactStartup.tsx\"></script>\n  </body>\n</html>\n\n\n\nNote that the <script> tag points to /reactStartup.tsx. Adjust that to your own entry as needed.\n\n\n\nLet’s install a few things, like a React plugin:\n\n\n\nnpm i vite @vitejs/plugin-react @types/node\n\n\n\nWe also create the following vite.config.ts right next to the index.html file in the project directory.\n\n\n\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n  plugins: [react()]\n});\n\n\n\nLastly, let’s add a few new npm scripts:\n\n\n\n\"dev\": \"vite\",\n\"build\": \"vite build\",\n\"preview\": \"vite preview\",\n\n\n\nNow, let’s start Vite’s development server with npm run dev. It’s incredibly fast, and incrementally builds whatever it needs to, based on what’s requested.\n\n\n\nBut, unfortunately, it fails. At least for right now.\n\n\n\n\n\n\n\nWe’ll get to how to set up aliases in a moment, but for now, let’s instead modify our reactStartup file (or whatever your entry file is called) as follows:\n\n\n\nimport React from \"react\";\nimport { render } from \"react-dom\";\n\nrender(\n  <div>\n    <h1>Hi there</h1>\n  </div>,\n  document.getElementById(\"home\")\n);\n\n\n\nNow we can run it our npm run dev command and browse to localhost:3000.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHot module reloading (HMR)\n\n\nNow that the development server is running, try modifying your source code. The output should update almost immediately via Vite’s HMR. This is one of Vite’s nicest features. It makes the development experience so much nicer when changes seem to reflect immediately rather than having to wait, or even trigger them ourselves.\n\n\n\nThe rest of this post will go over all the things I had to do to get my own app to build and run with Vite. I hope some of them are relevant for you!\n\n\nAliases\n\n\nIt’s not uncommon for webpack-based projects to have some config like this:\n\n\n\nresolve: {\n  alias: {\n    jscolor: \"util/jscolor.js\"\n  },\n  modules: [path.resolve(\"./\"), path.resolve(\"./node_modules\")]\n}\n\n\n\nThis sets up an alias to jscolor at the provided path, and tells webpack to look both in the root folder (./) and in node_modules when resolving imports. This allows us to have imports like this:\n\n\n\nimport { thing } from \"util/helpers/foo\"\n\n\n\n…anywhere in our component tree, assuming there’s a util folder at the very top.\n\n\n\nVite doesn’t allow you to provide an entire folder for resolution like this, but it does allow you to specify aliases, which follow the same rules as the @rollup/plugin-alias:\n\n\n\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nimport path from \"path\";\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      jscolor: path.resolve(\"./util/jscolor.js\"),\n      app: path.resolve(\"./app\"),\n      css: path.resolve(\"./css\"),\n      util: path.resolve(\"./util\")\n    }\n  },\n  plugins: [react()]\n});\n\n\n\nWe’ve added a resolve.alias section, including entries for everything we need to alias. Our jscolor util is set to the relevant module, and we have aliases for our top-level directories. Now we can import from app/, css*/*, and util/ from any component, anywhere.\n\n\n\nNote that these aliases only apply to the root of the import, e.g. util/foo. If you have some other util folder deeper in your tree, and you reference it with this:\n\n\n\nimport { thing } from \"./helpers/util\";\n\n\n\n…then the alias above will not mess that up. This distinction is not well documented, but you can see it in the Rollup alias plugin. Vite’s alias matches that same behavior.\n\n\nEnvironment variables\n\n\nVite, of course, supports environment variables. It reads config values out of your .env files in development, or process.env, and injects them into your code. Unfortunately, things work a bit differently than what you might be used to. First, it does not replace process.env.FOO but rather import.meta.env.FOO. Not only that, but it only replaces variables prefixed with VITE_ by default. So, import.meta.env.VITE_FOO would actually be replaced, but not my original FOO. This prefix can be configured, but not set to empty string.\n\n\n\nFor a legacy project, you could grep and replace all your environment variables to use import.meta.env, then add a VITE_ prefix, update your .env files, and update the environment variables in whatever CI/CD system you use. Or you can configure the more classic behavior of replacing process.env.ANYTHING with values from a .env file in development, or the real process.env value in production.\n\n\n\nHere’s how. Vite’s define feature is basically what we need. This registers global variables during development, and does raw text replacement for production. We need to set things up so that we manually read our .env file in development mode, and the process.env object in production mode, and then add the appropriate define entries.\n\n\n\nLet’s build that all into a Vite plugin. First, run npm i dotenv. \n\n\n\nNow let’s look at the code for the plugin:\n\n\n\nimport dotenv from \"dotenv\";\n\nconst isProd = process.env.NODE_ENV === \"production\";\nconst envVarSource = isProd ? process.env : dotenv.config().parsed;\n\nexport const dotEnvReplacement = () => {\n  const replacements = Object.entries(envVarSource).reduce((obj, [key, val]) => {\n    obj[`process.env.${key}`] = `\"${val}\"`;\n    return obj;\n  }, {});\n\n  return {\n    name: \"dotenv-replacement\",\n    config(obj) {\n      obj.define = obj.define || {};\n      Object.assign(obj.define, replacements);\n    }\n  };\n};\n\n\n\nVite sets process.env.NODE_ENV for us, so all we need to do is check that to see which mode we’re in.\n\n\n\nNow we get the actual environment variables. If we’re in production, we grab process.env itself. If we’re in dev, we ask dotenv to grab our .env file, parse it, and get back an object with all the values.\n\n\n\nOur plugin is a function that returns a Vite plugin object. We inject our environment values into a new object that has process.env. in front of the value, and then we return our actual plugin object. There is a number of hooks available to use. Here, though, we only need the config hook, which allows us to modify the current config object. We add a define entry if none exists, then add all our values.\n\n\n\nBut before moving forward, I want to note that the Vite’s environment variables limitations we are working around exist for a reason. The code above is how bundlers are frequently configured, but that still means any random value in process.env is stuck into your source code if that key exists. There are potential security concerns there, so please keep that in mind.\n\n\nServer proxy\n\n\nWhat does your deployed web application look like? If all it’s doing is serving JavaScript/CSS/HTML—with literally everything happening via separate services located elsewhere—then good! You’re effectively done. What I’ve shown you should be all you need. Vite’s development server will serve your assets as needed, which pings all your services just like they did before.\n\n\n\nBut what if your web app is small enough that you have some services running right on your web server? For the project I’m converting, I have a GraphQL endpoint running on my web server. For development, I start my Express server, which previously knew how to serve the assets that webpack generated. I also start a webpack watch task to generate those assets.\n\n\n\nBut with Vite shipping its own dev server, we need to start that Express server (on a separate port than what Vite uses) and then proxy calls to /graphql over to there:\n\n\n\nserver: {\n  proxy: {\n    \"/graphql\": \"http://localhost:3001\"\n  }\n} \n\n\n\nThis tells Vite that any requests for /graphql should be sent to http://localhost:3001/graphql.\n\n\n\nNote that we do not set the proxy to http://localhost:3001/graphql in the config. Instead, we set it to http://localhost:3001 and rely on Vite to add the /graphql part (as well any any query arguments) to the path.\n\n\nBuilding libs\n\n\nAs a quick bonus section, let’s briefly discuss building libraries. For example, what if all you want to build is a JavaScript file, e.g. a library like Redux. There’s no associated HTML file, so you’ll first need to tell Vite what to make:\n\n\n\nbuild: {\n  outDir: \"./public\",\n  lib: {\n    entry: \"./src/index.ts\",\n    formats: [\"cjs\"],\n    fileName: \"my-bundle.js\"\n  }\n}\n\n\n\nTell Vite where to put the generated bundle, what to call it, and what formats to build. Note that I’m using CommonJS here instead of ES modules since the ES modules do not minify (as of this writing) due to concerns that it could break tree-shaking.\n\n\n\nYou’d run this build with vite build. To start a watch and have the library rebuild on change, you’d run \n\n\n\nvite build --watch.\n\n\nWrapping up\n\n\nVite is an incredibly exciting tool. Not only does it take the pain, and tears out of bundling web apps, but it greatly improves the performance of doing so in the process. It ships with a blazingly fast development server that ships with hot module reloading and supports all major JavaScript frameworks. If you do web development—whether it’s for fun, it’s your job, or both!—I can’t recommend it strongly enough.\n\nAdding Vite to Your Existing Web App originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-11T15:38:06.000Z",
      "date_modified": "2022-01-11T15:38:06.000Z",
      "_plugin": {
        "pageFilename": "cef24f0ea8f26d63a987fdab8fcd0a8281e2b9c6f5ff3688d86ba56e2aa7efe4.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360061",
      "url": "https://css-tricks.com/use-custom-fields-in-wordpress/",
      "title": "How to Use Native Custom Fields in WordPress (and 5 Useful Examples)",
      "summary": "Custom Fields in WordPress are arbitrary bits of data that you can apply to Posts, Pages, and Custom Post Types in WordPress. Metadata, as it were, in the form of key/value pairs. For example:\n\nKey: subtitle / Value: They are \n\n…\n\nHow to Use Native Custom Fields in WordPress (and 5 Useful Examples) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Custom Fields in WordPress are arbitrary bits of data that you can apply to Posts, Pages, and Custom Post Types in WordPress. Metadata, as it were, in the form of key/value pairs. For example:</p>\n\n\n\n<ul><li>Key: <code>subtitle</code> / Value: <code>They are more than they are cracked up to be</code></li><li>Key: <code>header_color_override</code> / Value: <code>#e52e05</code></li><li>Key: <code>property_url</code> / Value: <code>https://example.com/123</code></li></ul>\n\n\n\n<p>WordPress <a href=\"https://wordpress.org/support/article/custom-fields/\" rel=\"noopener\">has their own documentation</a> of this feature, so I&#8217;m not trying to replicate that. I&#8217;d just like to show you essentially what custom fields in WordPress are, how they work, how to use them, and some use cases from my own personal experience.</p>\n\n\n\n<span id=\"more-360061\"></span>\n\n\n<h2 class=\"simpletoc-title\">Table of Contents</h2><ul class=\"simpletoc\">\n<li>\n<a  href=\"#how-to-addeditremove-custom-fields-in-wordpress\">How to Add/Edit/Remove Custom Fields in WordPress</a></li><li>\n<a  href=\"#why-use-custom-fields\">Why use Custom Fields?</a></li><li>\n<a  href=\"#wordpress-custom-fields-use-case-examples\">WordPress Custom Fields use case examples</a>\n\t\t<ul><li>\n<a  href=\"#1-display-additional-information\">1. Display additional information</a></li><li>\n<a  href=\"#2-hideshow-different-contentfeatures\">2. Hide/Show Different Content/Features</a></li><li>\n<a  href=\"#3-special-pull-quotes\">3. Special pull quotes</a></li><li>\n<a  href=\"#4-customize-an-rss-feed\">4. Customize an RSS feed</a></li><li>\n<a  href=\"#5-hideshow-author\">5. Hide/Show Author</a></li></ul>\n</li><li>\n<a  href=\"#the-apis-for-displaying-custom-fields-in-wordpress\">The APIs for displaying Custom Fields in WordPress</a></li><li>\n<a  href=\"#querying-for-custom-fields-in-wordpress\">Querying for Custom Fields in WordPress</a></li><li>\n<a  href=\"#limiting-custom-fields-in-the-name-dropdown\">Limiting Custom Fields in the Name dropdown</a></li><li>\n<a  href=\"#any-other-block-editor-concerns\">Any other Block Editor concerns?</a></li><li>\n<a  href=\"#relationship-to-advanced-custom-fields\">Relationship to Advanced Custom Fields</a></li><li>\n<a  href=\"#note-for-plugin-developers\">Note for plugin developers</a></li><li>\n<a  href=\"#more-examples-using-custom-fields-in-wordpress\">More examples using Custom Fields in WordPress</a></li><li>\n<a  href=\"#what-do-you-use-them-for\">What do you use them for?</a></li></ul>\n\n<h3 id=\"how-to-addeditremove-custom-fields-in-wordpress\">How to Add/Edit/Remove Custom Fields in WordPress</h3>\n\n\n<p>The UI for Custom Fields in WordPress looks like this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2391\" height=\"2081\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=2391%2C2081&#038;ssl=1\" alt=\"Showing that Custom Fields in WordPress appear below the content area of the block editor in the admin user interface.\" class=\"wp-image-360593\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?w=2391&amp;ssl=1 2391w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=300%2C261&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=1024%2C891&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=768%2C668&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=1536%2C1337&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=2048%2C1782&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=1000%2C870&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you don&#8217;t see it, it&#8217;s possible you may need to go under the three-dots menu, Preferences, and then find the toggle for Custom Fields and turn it on. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1778\" height=\"1482\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?resize=1778%2C1482&#038;ssl=1\" alt=\"Showing the option to enable Custom Fields in WordPresss in the Block Editor Preferences settings. It is at the first toggle beneath the Additional settings.\" class=\"wp-image-360063\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?w=1778&amp;ssl=1 1778w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?resize=300%2C250&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?resize=1024%2C854&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?resize=768%2C640&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?resize=1536%2C1280&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?resize=1000%2C834&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The UI forces you to refresh the page when turning this feature on and off.</figcaption></figure>\n\n\n\n<p>To add a Custom Field, type in the Key (labeled &#8220;Name&#8221;) and Value, then click <strong>Add Custom Field</strong>. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1256\" height=\"492\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2021-12-29-at-05.34.29@2x.png.webp?resize=1256%2C492&#038;ssl=1\" alt=\"Showing a Custom Field in WordPress with a name of favorite_food and a value of burrito. There a button below the name input to add the custom field.\" class=\"wp-image-360754\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2021-12-29-at-05.34.29@2x.png.webp?w=1256&amp;ssl=1 1256w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2021-12-29-at-05.34.29@2x.png.webp?resize=300%2C118&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2021-12-29-at-05.34.29@2x.png.webp?resize=1024%2C401&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2021-12-29-at-05.34.29@2x.png.webp?resize=768%2C301&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2021-12-29-at-05.34.29@2x.png.webp?resize=1000%2C392&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>After it&#8217;s added, you can delete or update it from buttons below the Key/Name:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1272\" height=\"372\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.35.33@2x.png?resize=1272%2C372&#038;ssl=1\" alt=\"Showing a Custom Field in WordPress with a name of favorite_food and a value of burrito. There are two buttons below the name to delete or update the custom field.\" class=\"wp-image-360065\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.35.33@2x.png?w=1272&amp;ssl=1 1272w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.35.33@2x.png?resize=300%2C88&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.35.33@2x.png?resize=1024%2C299&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.35.33@2x.png?resize=768%2C225&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.35.33@2x.png?resize=1000%2C292&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>After you have used Custom Fields, the keys will form into a dropdown menu for easier selection. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"595\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.36.45@2x.png?resize=1024%2C595&#038;ssl=1\" alt=\"Showing the dropdown menu that opens when clocking on the Name field of a custom field in WordPress, allowing you to select an existing custom field.\" class=\"wp-image-360066\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.36.45@2x.png?resize=1024%2C595&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.36.45@2x.png?resize=300%2C174&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.36.45@2x.png?resize=768%2C446&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.36.45@2x.png?resize=1000%2C581&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.36.45@2x.png?w=1266&amp;ssl=1 1266w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"why-use-custom-fields\">Why use Custom Fields?</h3>\n\n\n<p>Custom Fields, along with Custom Post Types, <strong>are what make WordPress a <abbr title=\"content management system\">CMS</abbr></strong> out-of-the-box rather than being limited to a simple blogging platform. </p>\n\n\n\n<p>Here on CSS-Tricks, believe it or not, we use over 100 Custom Fields to do different things on this site. We tend to reach for them for <em>relatively simple</em> things, and it&#8217;s nice as it&#8217;s a core feature of WordPress that will continue to work forever without too much worry about compatibility or awkward technical debt. </p>\n\n\n\n<p>The big idea is to <strong>open up templating possibilities</strong>. Imagine you have a page for real estate listings that has:</p>\n\n\n\n<ul><li>Address</li><li>Listing price </li><li>Bedrooms</li><li>Bathrooms</li><li>etc.</li></ul>\n\n\n\n<p>With custom fields, you have all that information available as discreet little chunks of data that you can echo (i.e. display) into a page template wherever you need to. <strong>That&#8217;s much more flexible</strong> than having all that data in the post content itself, even with the Block Editor. </p>\n\n\n<h3 id=\"wordpress-custom-fields-use-case-examples\">WordPress Custom Fields use case examples</h3>\n\n\n<p>Custom Fields in WordPress can be used for so many different things! But let&#8217;s look at a five practical use cases that we have implemented here on CSS-Tricks.</p>\n\n\n<h4 id=\"1-display-additional-information\">1. Display additional information</h4>\n\n\n<p>Say you are publishing a video and want to have the running time of the video available to display. That&#8217;s as easy as saving the <code>running_time</code> as a Custom Field and displaying it wherever you&#8217;d like:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2400\" height=\"1654\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=2400%2C1654&#038;ssl=1\" alt=\"A side-by-side showing a published post on the left with the running time of a video circled in red, and the WordPress admin on the right with the running time custom field circled in the block editor showing the exact same information that is published in the post.\" class=\"wp-image-360086\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?w=2400&amp;ssl=1 2400w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=300%2C207&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=1024%2C706&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=768%2C529&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=1536%2C1059&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=2048%2C1411&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=1000%2C689&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Note other Custom Fields in use here, like the <code>youtube</code> field, which we have so that we can output where the </figcaption></figure>\n\n\n<h4 id=\"2-hideshow-different-contentfeatures\">2. Hide/Show Different Content/Features</h4>\n\n\n<p>Let&#8217;s say you want to be able to collapse the Comments area <em>sometimes</em> on different blog posts. You could set a custom field called <code>should_toggle_comments</code> and set a value of <code>true</code>. That&#8217;s what we do here on CSS-Tricks. In our <code>comments.php</code> template, we output a <code>&lt;ol&gt;</code> of all the comments, but if this custom field is there, we wrap the whole thing in a <code>&lt;details&gt;</code> element, collapsing it by default:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;?php if (get_post_meta($post->ID, 'should_toggle_comments', true)) { ?>\n&lt;details class=\"open-all-comments\">\n  &lt;summary>Toggle All Comments (there are a lot!)&lt;/summary>\n  &lt;?php } ?>\n\n    &lt;ol class=\"commentlist\" id=\"commentlist\">\n      &lt;?php wp_list_comments('type=comment&amp;avatar_size=512&amp;callback=csstricks_comment'); ?>\n    &lt;/ol>\n\n  &lt;?php if (get_post_meta($post->ID, 'should_toggle_comments', true)) { ?>\n  &lt;/details>\n&lt;?php } ?></code></pre>\n\n\n<h4 id=\"3-special-pull-quotes\">3. Special pull quotes</h4>\n\n\n<p>Say you have a special Category archive that displays a group of posts that contain the same category, then use a custom template for that category, like <code>category-fancypants.php</code>. Maybe you yank out a custom quote from each article as a custom field called <code>main-pullquote</code>:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;blockquote>\n  &lt;?php\n    echo get_post_meta($post->ID, 'main-pullquote', true);\n  ?>\n&lt;/blockquote></code></pre>\n\n\n\n<p>That&#8217;s what we do for our annual <a href=\"https://css-tricks.com/category/2021-end-of-year-thoughts/\">end-of-year series</a>:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2874\" height=\"1646\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=2874%2C1646&#038;ssl=1\" alt=\"A side by side showing the the main pull quote custom field in WordPress circled in red, and the category archive on the right with a red arrow pointing to the corresponding pull-quote that displays on the page.\" class=\"wp-image-360596\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?w=2874&amp;ssl=1 2874w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=300%2C172&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=1024%2C586&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=768%2C440&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=1536%2C880&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=2048%2C1173&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=1000%2C573&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h4 id=\"4-customize-an-rss-feed\">4. Customize an RSS feed</h4>\n\n\n<p>We build a couple of totally custom RSS feeds here on CSS-Tricks that are different from what <a href=\"https://wordpress.org/support/article/wordpress-feeds/\" rel=\"noopener\">WordPress offers out of the box</a> — one for videos and one for newsletters. <a href=\"https://css-tricks.com/video-feed/\">The video feed</a> in particular relies on some WordPress Custom Fields to output special data that is required to make the feed work as a feed for our video podcast.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2876\" height=\"1654\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=2876%2C1654&#038;ssl=1\" alt=\"Side by side showing the rss videos template in code on the left with the custom field part circled in red, and the RSS feed open in the browser on the right with an arrow pointing to where the corresponding code renders as the video enclosure. \" class=\"wp-image-360620\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?w=2876&amp;ssl=1 2876w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=300%2C173&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=1024%2C589&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=768%2C442&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=1536%2C883&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=2048%2C1178&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=1000%2C575&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The location of the video and the duration are both kept in custom fields</figcaption></figure>\n\n\n<h4 id=\"5-hideshow-author\">5. Hide/Show Author</h4>\n\n\n<p>Our sponsored posts here on CSS-Tricks are sometimes written to sound largely like an announcement from a company. They were written like that on purpose and likely have been written by multiple people by the time its actually published. A post like that doesn&#8217;t really need to be &#8220;by&#8221; someone. But sometimes sponsored posts are definitely authored by a specific person, even sometimes in the first person, which would be weird without showing a byline. That&#8217;s why we use a <code>showSponsorAuthor</code> custom field, to show that author if we need it.</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"sponsored-post-byline\">\n  ❥ Sponsored\n  &lt;?php if (get_post_meta($post->ID, 'showSponsorAuthor', true)) { ?>\n    (Written by &lt;?php the_author(); ?>)\n  &lt;?php } ?>\n&lt;/div></code></pre>\n\n\n\n<p>Above is a part of a template. We always mark a sponsored post as sponsored in the byline (<a href=\"https://css-tricks.com/jetpack-features-we-love-and-use-at-css-tricks/\">example</a>), but only optionally do we visually show the author (<a href=\"https://css-tricks.com/jetpack-licensing-for-agencies-and-professionals/\">example</a>), controlled by a custom field.</p>\n\n\n<h3 id=\"the-apis-for-displaying-custom-fields-in-wordpress\">The APIs for displaying Custom Fields in WordPress</h3>\n\n\n<p>Most commonly, you&#8217;re looking to display the value of a single field:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;?php echo get_post_meta($post->ID, 'mood', true); ?></code></pre>\n\n\n\n<p>That <code>true</code> at the end there means &#8220;give me a <em>single</em> value,&#8221; meaning that even if there are multiple custom fields with the same name, you&#8217;ll only get one. To get multiple of the same name, use <code>false</code>, like:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"1\"><code markup=\"tt\">&lt;?php $songs = get_post_meta($post->ID, 'songs', false); ?>\n&lt;h3>This post inspired by:&lt;/h3>\n&lt;ul>\n  &lt;?php foreach($songs as $song) {\n    echo '&lt;li>'.$song.'&lt;/li>';\n  } ?>\n&lt;/ul></code></pre>\n\n\n\n<p>If you want to just dump them all out (probably mostly useful for debugging), you can do that like this:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;?php the_meta(); ?></code></pre>\n\n\n\n<p>Although, note that this skips custom fields that start with an underscore (<code>_</code>), so you might consider <a href=\"https://css-tricks.com/snippets/wordpress/dump-all-custom-fields/\">this approach instead</a>.</p>\n\n\n<h3 id=\"querying-for-custom-fields-in-wordpress\">Querying for Custom Fields in WordPress</h3>\n\n\n<p>Say you wanted to query for all posts that have some particular custom field. That&#8217;s possible!</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;?php\n$the_query = new WP_Query(array(\n  'meta_key' => 'example_field_name'\n  'meta_value' => 'example_field_value' // as a string! \n));\n\nif ($the_query->have_posts()) {\n  while ($the_query->have_posts()) {\n    $the_query->the_post();\n    echo '&lt;div>' . get_the_title() . '&lt;/div>';\n  }\n}\n\nwp_reset_postdata();</code></pre>\n\n\n\n<div class=\"wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<p>The example above will run a query for posts that have <em>both</em> a custom field of <code>example_field_name</code> and where that field has a value of <code>example_field_value</code>. You could do either/or. </p>\n\n\n\n<p>There is a lot more you can do here. You can use comparisons, you can get the values as numbers, and even query for multiple fields at once. We detail all that in <a href=\"https://css-tricks.com/snippets/wordpress/custom-loop-based-on-custom-fields/\">Custom Loop/Query Based on Custom Fields</a>.</p>\n\n\n<h3 id=\"limiting-custom-fields-in-the-name-dropdown\">Limiting Custom Fields in the Name dropdown</h3>\n\n\n<p>The UI dropdown for existing Custom Fields in WordPress is capped at something like 30 fields. So, if you have more than 100 different keys, the dropdown menu will look arbitrarily cut off. <a href=\"https://css-tricks.com/snippets/wordpress/increase-custom-fields-dropdown-limit/\">You can increase that number with a filter</a> in <code>functions.php</code> or a plugin:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function customfield_limit_increase( $limit ) {\n  $limit = 150;\n  return $limit;\n}\nadd_filter( 'postmeta_form_limit', 'customfield_limit_increase' );</code></pre>\n</div></div>\n\n\n<h3 id=\"any-other-block-editor-concerns\">Any other Block Editor concerns?</h3>\n\n\n<p>The main concern is when you can&#8217;t see the custom fields UI at all. We covered how to turn it back on (because it might default to off), so always check that. The <a href=\"https://www.advancedcustomfields.com\" rel=\"noopener\">Advanced Custom Fields plugin</a> also turns it off, so if you&#8217;re using that plugin, note there is a line below to help turn it back on (in the case you use both, as we do).</p>\n\n\n\n<p class=\"is-style-explanation\">I&#8217;m not sure there is a standard way to show the value of a custom field within a block in the block editor either. If you know of a clear way, <a href=\"#respond\">leave a comment</a>! </p>\n\n\n<h3 id=\"relationship-to-advanced-custom-fields\">Relationship to Advanced Custom Fields</h3>\n\n\n<p>The UI for native Custom Fields in WordPress is pretty&#8230; underserved. It&#8217;s not fancy, it&#8217;s got rough edges (we find that Custom Fields have a weird way of duplicating themselves on multiple post saves, for example). It doesn&#8217;t seem like Custom Fields, while native, are a particularly first-class feature of WordPress. </p>\n\n\n\n<p><a href=\"https://www.advancedcustomfields.com/\" rel=\"noopener\">Advanced Custom Fields</a> (ACF) changes that in a big way. The spirit remains the same: attach data to content. But rather than the simple string-based key-value interface that we&#8217;ve detailed, you essentially model the data with different types and it builds really nice custom UI for you to use to input that data, even integrating directly with the Block Editor.</p>\n\n\n\n<p>Imagine a podcast website where each post is an individual episode. The Block Editor might be nice for written content about the episode, but probably not a good idea for all of the metadata that goes with it. The list of guests, the duration, the location of the MP3 file, the sponsor, time jump links, etc. Custom Fields are great for that, but since there are so many, you&#8217;ll be well served by Advanced Custom Fields here instead of using native Custom Fields in WordPress. Here&#8217;s a setup example of what you get as we do on the <a href=\"https://shoptalkshow.com\" rel=\"noopener\">ShopTalk Show podcast</a>:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2302\" height=\"1634\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=2302%2C1634&#038;ssl=1\" alt=\"Side by side showing the settings for custom fields in the Advanced Custom Fields plugin on the left, and those custom fields displayed on the right in the  WordPress Block Editor of a new post.\" class=\"wp-image-360622\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?w=2302&amp;ssl=1 2302w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=300%2C213&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=1024%2C727&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=768%2C545&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=1536%2C1090&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=2048%2C1454&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=1000%2C710&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>ACF, probably in an attempt to encourage using it directly and not confusing people with the native Custom Fields interface, removes the native Custom Fields interface. If you&#8217;re like us and use both types of fields, you&#8217;ll need to bring the native Custom Fields UI back to the post editor with a filter that ACF provides:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">add_filter('acf/settings/remove_wp_meta_box', '__return_false');</code></pre>\n\n\n\n<p>If you use native Custom Fields in WordPress at all, you&#8217;ll want that in your <code>functions.php</code> file or a functionality plugin.</p>\n\n\n<h3 id=\"note-for-plugin-developers\">Note for plugin developers</h3>\n\n\n<p><strong>Use the underscore hiding technique.</strong></p>\n\n\n\n<p>Some plugins use the Custom Fields API as a place to store post-specific data. I think that&#8217;s OK, but I&#8217;d like to implore plugin developers to always use underscore-and-plugin-prefixed custom field names when doing so. </p>\n\n\n\n<p>When custom fields start with an underscore, they aren&#8217;t shown in the UI. Meaning for those of us who use the Custom Fields UI directly, it&#8217;s not cluttered with fields created by other plugins. The exception, of course, is if you intend users to be able to control what the plugin does with the Custom Field values. In that case, fine, leave those few non-underscore-prefixed fields.</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">_bobs_plugin_internal_value_1 // Hidden in UI\n_bobs_plugin_internal_value_2 // Hidden in UI\nbobs_plugin_config  // Shows in UI\n\n_adrians_plugin_internal_value_1  // Hidden in UI\n_adrians_plugin_internal_value_2 // Hidden in UI</code></pre>\n\n\n<h3 id=\"more-examples-using-custom-fields-in-wordpress\">More examples using Custom Fields in WordPress</h3>\n\n\n    \t\t\n    <div class=\"in-article-cards\">\n      <article class=\"in-article-card article\" id=\"mini-post-360061\">\n\n  <time datetime=\"2009-09-03\" title=\"Originally published Jan 10, 2022\">\n    <strong>\n                \n      Snippet\n      </strong>\n\n    on\n\n    Mar 2, 2010  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/snippets/wordpress/using-custom-fields/\">\n      Using Custom Fields    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/wordpress/\" rel=\"tag\">WordPress</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-360061\">\n\n  <time datetime=\"2009-11-05\" title=\"Originally published Jan 10, 2022\">\n    <strong>\n                \n      Snippet\n      </strong>\n\n    on\n\n    Jan 4, 2022  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/snippets/wordpress/dump-all-custom-fields/\">\n      Dump All Custom Fields    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/wordpress/\" rel=\"tag\">WordPress</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-360061\">\n\n  <time datetime=\"2009-10-30\" title=\"Originally published Jan 10, 2022\">\n    <strong>\n                \n      Snippet\n      </strong>\n\n    on\n\n    Apr 26, 2019  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/snippets/wordpress/custom-loop-based-on-custom-fields/\">\n      Custom Loop/Query Based on Custom Fields    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/wordpress/\" rel=\"tag\">WordPress</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card \" id=\"mini-post-360061\">\n\n  <time datetime=\"2014-08-11\" title=\"Originally published Jan 10, 2022\">\n    <strong>\n                \n      Snippet\n      </strong>\n\n    on\n\n    Aug 11, 2014  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/snippets/wordpress/increase-custom-fields-dropdown-limit/\">\n      Increase Custom Fields Dropdown Limit    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/wordpress/\" rel=\"tag\">WordPress</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-360061\">\n\n  <time datetime=\"2014-03-24\" title=\"Originally published Jan 10, 2022\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Apr 12, 2017  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/svg-wordpress-custom-fields/\">\n      SVG &#038; WordPress Custom Fields    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/wordpress/\" rel=\"tag\">WordPress</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/ianmarquette/\" aria-label=\"Author page of Ian Marquette\">\n      <img alt='' src='https://secure.gravatar.com/avatar/624ec0d14b5ffaae66a1b98f5808e85a?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/624ec0d14b5ffaae66a1b98f5808e85a?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/ianmarquette/\">\n      Ian Marquette    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-360061\">\n\n  <time datetime=\"2009-06-23\" title=\"Originally published Jan 10, 2022\">\n    <strong>\n                \n      Video\n      </strong>\n\n    on\n\n    Feb 25, 2015  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/video-screencasts/65-advanced-uses-for-custom-fields-in-wordpress/\">\n      #65: Advanced Uses for Custom Fields in WordPress    </a>\n  </h3>\n\n      <time>▶ Running Time: <span>47:48</span></time>\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/wordpress/\" rel=\"tag\">WordPress</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n    </div>\n  \n\n\n<h3 id=\"what-do-you-use-them-for\">What do you use them for?</h3>\n\n\n<p>Do you use Custom Fields in WordPress? I&#8217;m particularly curious about <em>native</em> custom field usage.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/use-custom-fields-in-wordpress/\">How to Use Native Custom Fields in WordPress (and 5 Useful Examples)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Custom Fields in WordPress are arbitrary bits of data that you can apply to Posts, Pages, and Custom Post Types in WordPress. Metadata, as it were, in the form of key/value pairs. For example:\n\n\n\nKey: subtitle / Value: They are more than they are cracked up to beKey: header_color_override / Value: #e52e05Key: property_url / Value: https://example.com/123\n\n\n\nWordPress has their own documentation of this feature, so I’m not trying to replicate that. I’d just like to show you essentially what custom fields in WordPress are, how they work, how to use them, and some use cases from my own personal experience.\n\n\n\n\n\n\nTable of Contents\n\nHow to Add/Edit/Remove Custom Fields in WordPress\nWhy use Custom Fields?\nWordPress Custom Fields use case examples\n\t\t\n1. Display additional information\n2. Hide/Show Different Content/Features\n3. Special pull quotes\n4. Customize an RSS feed\n5. Hide/Show Author\n\nThe APIs for displaying Custom Fields in WordPress\nQuerying for Custom Fields in WordPress\nLimiting Custom Fields in the Name dropdown\nAny other Block Editor concerns?\nRelationship to Advanced Custom Fields\nNote for plugin developers\nMore examples using Custom Fields in WordPress\nWhat do you use them for?\n\nHow to Add/Edit/Remove Custom Fields in WordPress\n\n\nThe UI for Custom Fields in WordPress looks like this:\n\n\n\n\n\n\n\nIf you don’t see it, it’s possible you may need to go under the three-dots menu, Preferences, and then find the toggle for Custom Fields and turn it on. \n\n\n\nThe UI forces you to refresh the page when turning this feature on and off.\n\n\n\nTo add a Custom Field, type in the Key (labeled “Name”) and Value, then click Add Custom Field. \n\n\n\n\n\n\n\nAfter it’s added, you can delete or update it from buttons below the Key/Name:\n\n\n\n\n\n\n\nAfter you have used Custom Fields, the keys will form into a dropdown menu for easier selection. \n\n\n\n\n\n\nWhy use Custom Fields?\n\n\nCustom Fields, along with Custom Post Types, are what make WordPress a CMS out-of-the-box rather than being limited to a simple blogging platform. \n\n\n\nHere on CSS-Tricks, believe it or not, we use over 100 Custom Fields to do different things on this site. We tend to reach for them for relatively simple things, and it’s nice as it’s a core feature of WordPress that will continue to work forever without too much worry about compatibility or awkward technical debt. \n\n\n\nThe big idea is to open up templating possibilities. Imagine you have a page for real estate listings that has:\n\n\n\nAddressListing price BedroomsBathroomsetc.\n\n\n\nWith custom fields, you have all that information available as discreet little chunks of data that you can echo (i.e. display) into a page template wherever you need to. That’s much more flexible than having all that data in the post content itself, even with the Block Editor. \n\n\nWordPress Custom Fields use case examples\n\n\nCustom Fields in WordPress can be used for so many different things! But let’s look at a five practical use cases that we have implemented here on CSS-Tricks.\n\n\n1. Display additional information\n\n\nSay you are publishing a video and want to have the running time of the video available to display. That’s as easy as saving the running_time as a Custom Field and displaying it wherever you’d like:\n\n\n\nNote other Custom Fields in use here, like the youtube field, which we have so that we can output where the \n\n\n2. Hide/Show Different Content/Features\n\n\nLet’s say you want to be able to collapse the Comments area sometimes on different blog posts. You could set a custom field called should_toggle_comments and set a value of true. That’s what we do here on CSS-Tricks. In our comments.php template, we output a <ol> of all the comments, but if this custom field is there, we wrap the whole thing in a <details> element, collapsing it by default:\n\n\n\n<?php if (get_post_meta($post->ID, 'should_toggle_comments', true)) { ?>\n<details class=\"open-all-comments\">\n  <summary>Toggle All Comments (there are a lot!)</summary>\n  <?php } ?>\n\n    <ol class=\"commentlist\" id=\"commentlist\">\n      <?php wp_list_comments('type=comment&avatar_size=512&callback=csstricks_comment'); ?>\n    </ol>\n\n  <?php if (get_post_meta($post->ID, 'should_toggle_comments', true)) { ?>\n  </details>\n<?php } ?>\n\n\n3. Special pull quotes\n\n\nSay you have a special Category archive that displays a group of posts that contain the same category, then use a custom template for that category, like category-fancypants.php. Maybe you yank out a custom quote from each article as a custom field called main-pullquote:\n\n\n\n<blockquote>\n  <?php\n    echo get_post_meta($post->ID, 'main-pullquote', true);\n  ?>\n</blockquote>\n\n\n\nThat’s what we do for our annual end-of-year series:\n\n\n\n\n\n\n4. Customize an RSS feed\n\n\nWe build a couple of totally custom RSS feeds here on CSS-Tricks that are different from what WordPress offers out of the box — one for videos and one for newsletters. The video feed in particular relies on some WordPress Custom Fields to output special data that is required to make the feed work as a feed for our video podcast.\n\n\n\nThe location of the video and the duration are both kept in custom fields\n\n\n5. Hide/Show Author\n\n\nOur sponsored posts here on CSS-Tricks are sometimes written to sound largely like an announcement from a company. They were written like that on purpose and likely have been written by multiple people by the time its actually published. A post like that doesn’t really need to be “by” someone. But sometimes sponsored posts are definitely authored by a specific person, even sometimes in the first person, which would be weird without showing a byline. That’s why we use a showSponsorAuthor custom field, to show that author if we need it.\n\n\n\n<div class=\"sponsored-post-byline\">\n  ❥ Sponsored\n  <?php if (get_post_meta($post->ID, 'showSponsorAuthor', true)) { ?>\n    (Written by <?php the_author(); ?>)\n  <?php } ?>\n</div>\n\n\n\nAbove is a part of a template. We always mark a sponsored post as sponsored in the byline (example), but only optionally do we visually show the author (example), controlled by a custom field.\n\n\nThe APIs for displaying Custom Fields in WordPress\n\n\nMost commonly, you’re looking to display the value of a single field:\n\n\n\n<?php echo get_post_meta($post->ID, 'mood', true); ?>\n\n\n\nThat true at the end there means “give me a single value,” meaning that even if there are multiple custom fields with the same name, you’ll only get one. To get multiple of the same name, use false, like:\n\n\n\n<?php $songs = get_post_meta($post->ID, 'songs', false); ?>\n<h3>This post inspired by:</h3>\n<ul>\n  <?php foreach($songs as $song) {\n    echo '<li>'.$song.'</li>';\n  } ?>\n</ul>\n\n\n\nIf you want to just dump them all out (probably mostly useful for debugging), you can do that like this:\n\n\n\n<?php the_meta(); ?>\n\n\n\nAlthough, note that this skips custom fields that start with an underscore (_), so you might consider this approach instead.\n\n\nQuerying for Custom Fields in WordPress\n\n\nSay you wanted to query for all posts that have some particular custom field. That’s possible!\n\n\n\n<?php\n$the_query = new WP_Query(array(\n  'meta_key' => 'example_field_name'\n  'meta_value' => 'example_field_value' // as a string! \n));\n\nif ($the_query->have_posts()) {\n  while ($the_query->have_posts()) {\n    $the_query->the_post();\n    echo '<div>' . get_the_title() . '</div>';\n  }\n}\n\nwp_reset_postdata();\n\n\n\n\nThe example above will run a query for posts that have both a custom field of example_field_name and where that field has a value of example_field_value. You could do either/or. \n\n\n\nThere is a lot more you can do here. You can use comparisons, you can get the values as numbers, and even query for multiple fields at once. We detail all that in Custom Loop/Query Based on Custom Fields.\n\n\nLimiting Custom Fields in the Name dropdown\n\n\nThe UI dropdown for existing Custom Fields in WordPress is capped at something like 30 fields. So, if you have more than 100 different keys, the dropdown menu will look arbitrarily cut off. You can increase that number with a filter in functions.php or a plugin:\n\n\n\nfunction customfield_limit_increase( $limit ) {\n  $limit = 150;\n  return $limit;\n}\nadd_filter( 'postmeta_form_limit', 'customfield_limit_increase' );\n\n\n\nAny other Block Editor concerns?\n\n\nThe main concern is when you can’t see the custom fields UI at all. We covered how to turn it back on (because it might default to off), so always check that. The Advanced Custom Fields plugin also turns it off, so if you’re using that plugin, note there is a line below to help turn it back on (in the case you use both, as we do).\n\n\n\nI’m not sure there is a standard way to show the value of a custom field within a block in the block editor either. If you know of a clear way, leave a comment! \n\n\nRelationship to Advanced Custom Fields\n\n\nThe UI for native Custom Fields in WordPress is pretty… underserved. It’s not fancy, it’s got rough edges (we find that Custom Fields have a weird way of duplicating themselves on multiple post saves, for example). It doesn’t seem like Custom Fields, while native, are a particularly first-class feature of WordPress. \n\n\n\nAdvanced Custom Fields (ACF) changes that in a big way. The spirit remains the same: attach data to content. But rather than the simple string-based key-value interface that we’ve detailed, you essentially model the data with different types and it builds really nice custom UI for you to use to input that data, even integrating directly with the Block Editor.\n\n\n\nImagine a podcast website where each post is an individual episode. The Block Editor might be nice for written content about the episode, but probably not a good idea for all of the metadata that goes with it. The list of guests, the duration, the location of the MP3 file, the sponsor, time jump links, etc. Custom Fields are great for that, but since there are so many, you’ll be well served by Advanced Custom Fields here instead of using native Custom Fields in WordPress. Here’s a setup example of what you get as we do on the ShopTalk Show podcast:\n\n\n\n\n\n\n\nACF, probably in an attempt to encourage using it directly and not confusing people with the native Custom Fields interface, removes the native Custom Fields interface. If you’re like us and use both types of fields, you’ll need to bring the native Custom Fields UI back to the post editor with a filter that ACF provides:\n\n\n\nadd_filter('acf/settings/remove_wp_meta_box', '__return_false');\n\n\n\nIf you use native Custom Fields in WordPress at all, you’ll want that in your functions.php file or a functionality plugin.\n\n\nNote for plugin developers\n\n\nUse the underscore hiding technique.\n\n\n\nSome plugins use the Custom Fields API as a place to store post-specific data. I think that’s OK, but I’d like to implore plugin developers to always use underscore-and-plugin-prefixed custom field names when doing so. \n\n\n\nWhen custom fields start with an underscore, they aren’t shown in the UI. Meaning for those of us who use the Custom Fields UI directly, it’s not cluttered with fields created by other plugins. The exception, of course, is if you intend users to be able to control what the plugin does with the Custom Field values. In that case, fine, leave those few non-underscore-prefixed fields.\n\n\n\n_bobs_plugin_internal_value_1 // Hidden in UI\n_bobs_plugin_internal_value_2 // Hidden in UI\nbobs_plugin_config  // Shows in UI\n\n_adrians_plugin_internal_value_1  // Hidden in UI\n_adrians_plugin_internal_value_2 // Hidden in UI\n\n\nMore examples using Custom Fields in WordPress\n\n\n    \t\t\n    \n      \n\n  \n    \n                \n      Snippet\n      \n\n    on\n\n    Mar 2, 2010  \n\n  \n    \n      Using Custom Fields    \n  \n\n  \n      \n      WordPress    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n\n\n  \n    \n                \n      Snippet\n      \n\n    on\n\n    Jan 4, 2022  \n\n  \n    \n      Dump All Custom Fields    \n  \n\n  \n      \n      WordPress    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n\n\n  \n    \n                \n      Snippet\n      \n\n    on\n\n    Apr 26, 2019  \n\n  \n    \n      Custom Loop/Query Based on Custom Fields    \n  \n\n  \n      \n      WordPress    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n\n\n  \n    \n                \n      Snippet\n      \n\n    on\n\n    Aug 11, 2014  \n\n  \n    \n      Increase Custom Fields Dropdown Limit    \n  \n\n  \n      \n      WordPress    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n\n\n  \n    \n                \n        Article\n      \n\n    on\n\n    Apr 12, 2017  \n\n  \n    \n      SVG & WordPress Custom Fields    \n  \n\n  \n      \n      WordPress    \n  \n  \n    \n          \n  \n    \n      Ian Marquette    \n  \n\n\n\n\n  \n    \n                \n      Video\n      \n\n    on\n\n    Feb 25, 2015  \n\n  \n    \n      #65: Advanced Uses for Custom Fields in WordPress    \n  \n\n      ▶ Running Time: 47:48\n  \n      \n      WordPress    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n    \n  \n\n\nWhat do you use them for?\n\n\nDo you use Custom Fields in WordPress? I’m particularly curious about native custom field usage.\n\nHow to Use Native Custom Fields in WordPress (and 5 Useful Examples) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-11T00:41:48.000Z",
      "date_modified": "2022-01-11T00:41:48.000Z",
      "_plugin": {
        "pageFilename": "51f542bf2123b855a62c927daa80a63c31de217a9614ca09d5c675a63bd89b1f.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360873",
      "url": "https://css-tricks.com/what-is-chromium-without-chrome-on-top/",
      "title": "What is Chromium Without Chrome on Top?",
      "summary": "Raw Chromium, perhaps?\nSo, Chrome is based on Chromium which is open-source. Chrome is Chromium with Google’s extra stuff on top of it. What extra stuff? Kinda lots! A few years ago, The Verge published “Microsoft reveals all the …\n\nWhat is Chromium Without Chrome on Top? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Raw Chromium, perhaps?</p>\n\n\n\n<p>So, Chrome is based on <a href=\"https://www.chromium.org/Home\" rel=\"noopener\">Chromium</a> which is <a href=\"https://chromium.googlesource.com/chromium/src/+/main/docs/mac_build_instructions.md#Get-the-code\" rel=\"noopener\">open-source</a>. Chrome is Chromium with Google&#8217;s extra stuff on top of it. What extra stuff? Kinda lots! A few years ago, <em>The Verge</em> published <a href=\"https://www.theverge.com/2019/4/8/18300772/microsoft-google-services-removed-changed-chromium-edge-browser\" rel=\"noopener\">&#8220;Microsoft reveals all the Google things it removed in its Chromium Edge browser&#8221;</a> with this image from Microsoft listing out all the stuff:</p>\n\n\n\n<span id=\"more-360873\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1699\" height=\"929\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?resize=1699%2C929&#038;ssl=1\" alt=\"A long list of features Microsoft has removed from Chromium split into four columns.\" class=\"wp-image-360874\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?w=1699&amp;ssl=1 1699w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?resize=300%2C164&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?resize=1024%2C560&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?resize=768%2C420&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?resize=1536%2C840&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?resize=1000%2C547&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>That suggests all this stuff is actually in Chromium, not added later to Chrome in some additional process. That means if you wanna build your own Chromium fork and de-couple yourself from Google, you&#8217;ve got some work to do.</p>\n\n\n\n<p>Several big players have done that work. Clearly, Microsoft has done it with Edge. Vivaldi and Brave are other big Chromium-based browsers with presumably similar de-Googleification.</p>\n\n\n\n<p>Dan Abramov was asking around about this the other day:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">is there a regularly updated mod of chrome that’s basically chromium (so chrome minus google-specific stuff except search) but also without experimental features and always based on a stable revision</p>&mdash; Dan (@dan_abramov) <a href=\"https://twitter.com/dan_abramov/status/1475691811830181890?ref_src=twsrc%5Etfw\" rel=\"noopener\">December 28, 2021</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>Sounds like Dan (and by extension: me) learned through this thread that Chromium isn&#8217;t actually just the core browser stuff where Chrome then adds stuff on top of it. It&#8217;s that if you want to base another browser on Chromium, you have to yank stuff <em>out</em> of Chromium.</p>\n\n\n\n<p>Seems a smidge weird to me, but hey, it&#8217;s open-source, so if you don&#8217;t like it, fork it. And obviously many have. Perhaps most notable is <strong><a href=\"https://github.com/Eloston/ungoogled-chromium\" rel=\"noopener\">ungoogled-chromium</a></strong>. It lists this as the philosophy:</p>\n\n\n\n<blockquote>\n<ol>\n<li>Remove all remaining background requests to any web services while building and running the browser</li>\n<li>Remove all code specific to Google web services</li>\n<li>Remove all uses of pre-made binaries from the source code, and replace them with user-provided alternatives when possible.</li>\n<li>Disable features that inhibit control and transparency, and add or modify features that promote them (these changes will almost always require manual activation or enabling).</li>\n</ol>\n</blockquote>\n\n\n\n<p>I have zero doubt that the browser world is converging on Chromium. You can imagine Apple hanging onto their own thing with WebKit forever, but things don&#8217;t seem to be going <a href=\"https://css-tricks.com/wp-content/uploads/2022/01/Screen_Shot_2022-01-06_at_6.43.52_AM.png\">terribly well</a> at Mozilla, and they haven&#8217;t for a while. Mozilla&#8217;s <a href=\"https://www.pcmag.com/news/mozilla-signs-lucrative-3-year-google-search-deal-for-firefox\" rel=\"noopener\">money seems to come from Google anyway</a> so it&#8217;s tough to imagine Mozilla&#8217;s browser engines hanging on for that much longer. Y&#8217;all can call me an ignorant asshole in January 2032 if Mozilla still has a competitive browser engine.</p>\n\n\n\n<p>The health of the browser ecosystem would benefit from a cleaner, company-agnostic version of Chromium (and maybe call it something else). If most browsers are based on it, so be it, but let the innovation happen from a level playing field.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/what-is-chromium-without-chrome-on-top/\">What is Chromium Without Chrome on Top?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Raw Chromium, perhaps?\n\n\n\nSo, Chrome is based on Chromium which is open-source. Chrome is Chromium with Google’s extra stuff on top of it. What extra stuff? Kinda lots! A few years ago, The Verge published “Microsoft reveals all the Google things it removed in its Chromium Edge browser” with this image from Microsoft listing out all the stuff:\n\n\n\n\n\n\n\n\n\n\n\nThat suggests all this stuff is actually in Chromium, not added later to Chrome in some additional process. That means if you wanna build your own Chromium fork and de-couple yourself from Google, you’ve got some work to do.\n\n\n\nSeveral big players have done that work. Clearly, Microsoft has done it with Edge. Vivaldi and Brave are other big Chromium-based browsers with presumably similar de-Googleification.\n\n\n\nDan Abramov was asking around about this the other day:\n\n\n\n\nis there a regularly updated mod of chrome that’s basically chromium (so chrome minus google-specific stuff except search) but also without experimental features and always based on a stable revision— Dan (@dan_abramov) December 28, 2021\n\n\n\n\nSounds like Dan (and by extension: me) learned through this thread that Chromium isn’t actually just the core browser stuff where Chrome then adds stuff on top of it. It’s that if you want to base another browser on Chromium, you have to yank stuff out of Chromium.\n\n\n\nSeems a smidge weird to me, but hey, it’s open-source, so if you don’t like it, fork it. And obviously many have. Perhaps most notable is ungoogled-chromium. It lists this as the philosophy:\n\n\n\n\n\nRemove all remaining background requests to any web services while building and running the browser\nRemove all code specific to Google web services\nRemove all uses of pre-made binaries from the source code, and replace them with user-provided alternatives when possible.\nDisable features that inhibit control and transparency, and add or modify features that promote them (these changes will almost always require manual activation or enabling).\n\n\n\n\n\nI have zero doubt that the browser world is converging on Chromium. You can imagine Apple hanging onto their own thing with WebKit forever, but things don’t seem to be going terribly well at Mozilla, and they haven’t for a while. Mozilla’s money seems to come from Google anyway so it’s tough to imagine Mozilla’s browser engines hanging on for that much longer. Y’all can call me an ignorant asshole in January 2032 if Mozilla still has a competitive browser engine.\n\n\n\nThe health of the browser ecosystem would benefit from a cleaner, company-agnostic version of Chromium (and maybe call it something else). If most browsers are based on it, so be it, but let the innovation happen from a level playing field.\n\nWhat is Chromium Without Chrome on Top? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-10T22:02:49.000Z",
      "date_modified": "2022-01-10T22:02:49.000Z",
      "_plugin": {
        "pageFilename": "8a10944290d73987200a3fd75e3b152e843194a9814f541ca315738b89dd170c.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359886",
      "url": "https://css-tricks.com/dont-fight-the-cascade-control-it/",
      "title": "Don’t Fight the Cascade, Control It!",
      "summary": "If you’re disciplined and make use of the inheritance that the CSS cascade provides, you’ll end up writing less CSS. But because our styles often comes from all kinds of sources — and can be a pain to structure and …\n\nDon’t Fight the Cascade, Control It! originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>If you’re disciplined and <em>make use of</em> the inheritance that the CSS cascade provides, you’ll end up writing <em>less</em> CSS. But because our styles often comes from all kinds of sources — and can be a pain to structure and maintain—the cascade can be a source of frustration, and the reason we end up with <em>more</em> CSS than necessary.</p>\n\n\n\n<p>Some years ago, Harry Roberts came up with <a href=\"https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/\" rel=\"noopener\">ITCSS</a> and it’s a clever way of structuring CSS.</p>\n\n\n\n<span id=\"more-359886\"></span>\n\n\n\n<figure class=\"wp-block-image size-full is-resized ticss-eabfcfdc\"><img loading=\"lazy\" src=\"https://css-tricks.com/wp-content/uploads/2021/12/itcss-layers2.svg\" alt=\"\" class=\"wp-image-359887\" width=\"656\" height=\"398\"/></figure>\n\n\n\n<p>Mixed with <a href=\"http://getbem.com/\" rel=\"noopener\">BEM</a>, ITCSS has become a popular way that people write and organize CSS.</p>\n\n\n\n<p>However, even with ITCSS and BEM, there are still times where we <em>still</em> struggle with the cascade. For example, I’m sure you’ve had to <code>@import</code> external CSS components at a specific location to prevent breaking things, or reach for the dreaded <code>!important</code> at some point in time.</p>\n\n\n\n<p>Recently, some new tools were added to our CSS toolbox, and they allow us to finally control the cascade. Let’s look at them.</p>\n\n\n<h3 id=\"o-cascade-where-art-thou\">O cascade, <code>:where</code> art thou?</h3>\n\n\n<p>Using the <a href=\"https://css-tricks.com/almanac/selectors/w/where/\"><code>:where</code> pseudo-selector</a> allows us to remove specificity to “just after the user-agent default styles,” no matter where or when the CSS is loaded into the document. That means the specificity of the whole thing is literally zero — totally wiped out. This is handy for <em>generic components</em>, which we’ll look into in a moment.</p>\n\n\n\n<p>First, imagine some generic <code>&lt;table&gt;</code> styles, using <code>:where</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where(table) {\n  background-color: tan;\n}</code></pre>\n\n\n\n<p>Now, if you add some other table styles <em>before</em> the <code>:where</code> selector, like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">table {\n  background-color: hotpink;\n}\n\n:where(table) {\n  background-color: tan;\n}</code></pre>\n\n\n\n<p>…the table background becomes <code>hotpink</code>, even though the <code>table</code> selector is specified <em>before</em> the <code>:where</code> selector in the cascade. That’s the beauty of <code>:where</code>, and why it’s already being used for <a href=\"https://css-tricks.com/an-interview-with-elad-shechter-on-the-new-css-reset/\">CSS resets</a>.</p>\n\n\n\n<p><code>:where</code> has a sibling, which has almost the exact opposite effect: <a href=\"https://css-tricks.com/almanac/selectors/i/is/\">the <code>:is</code> selector</a>.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The specificity of the <code>:is()</code> pseudo-class is replaced by the specificity of its most specific argument. Thus, a selector written with <code>:is()</code> does not necessarily have equivalent specificity to the equivalent selector written without <code>:is()</code>. <a href=\"https://www.w3.org/TR/selectors-4/#matches-pseudo\" rel=\"noopener\">Selectors Level 4 specification</a></p></blockquote>\n\n\n\n<p>Expanding on our previous example:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:is(table) {\n  --tbl-bgc: orange;\n}\ntable {\n  --tbl-bgc: tan;\n}\n:where(table) {\n  --tbl-bgc: hotpink;\n  background-color: var(--tbl-bgc);\n}</code></pre>\n\n\n\n<p>The <code>&lt;table class=\"c-tbl\"></code> background color will be <code>tan</code> because the specificity of <code>:is</code> is the same as <code>table</code>, but <code>table</code> is placed after.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XWeVaQw\" src=\"//codepen.io/anon/embed/XWeVaQw?height=450&amp;theme-id=1&amp;slug-hash=XWeVaQw&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XWeVaQw\" title=\"CodePen Embed XWeVaQw\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>However, if we were to change it to this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:is(table, .c-tbl) {\n  --tbl-bgc: orange;\n}</code></pre>\n\n\n\n<p>…the background color will be <code>orange</code>, since <code>:is</code> has the weight of it&#8217;s heaviest selector, which is <code>.c-tbl</code>.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwLxZmK\" src=\"//codepen.io/anon/embed/RwLxZmK?height=450&amp;theme-id=1&amp;slug-hash=RwLxZmK&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwLxZmK\" title=\"CodePen Embed RwLxZmK\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"example-a-configurable-table-component\">Example: A configurable table component</h3>\n\n\n<p>Now, let’s see how we can use <code>:where</code> in our components. We’ll be building a table component, starting with the HTML:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abLEygb\" src=\"//codepen.io/anon/embed/abLEygb?height=450&amp;theme-id=1&amp;slug-hash=abLEygb&amp;default-tab=html,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abLEygb\" title=\"CodePen Embed abLEygb\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Let’s wrap <code>.c-tbl</code> in a <code>:where</code>-selector and, just for fun, add rounded corners to the table. That means we need <code>border-collapse: separate</code>, as we can’t use <code>border-radius</code> on table cells when the table is using <code>border-collapse: collapse</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where(.c-tbl) {\n  border-collapse: separate;\n  border-spacing: 0;\n  table-layout: auto;\n  width: 99.9%;\n}</code></pre>\n\n\n\n<p>The cells use different styling for the <code>&lt;thead&gt;</code> and <code>&lt;tbody&gt;</code>-cells:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where(.c-tbl thead th) {\n  background-color: hsl(200, 60%, 40%);\n  border-style: solid;\n  border-block-start-width: 0;\n  border-inline-end-width: 1px;\n  border-block-end-width: 0;\n  border-inline-start-width: 0;\n  color: hsl(200, 60%, 99%);\n  padding-block: 1.25ch;\n  padding-inline: 2ch;\n  text-transform: uppercase;\n}\n:where(.c-tbl tbody td) {\n  background-color: #FFF;\n  border-color: hsl(200, 60%, 80%);\n  border-style: solid;\n  border-block-start-width: 0;\n  border-inline-end-width: 1px;\n  border-block-end-width: 1px;\n  border-inline-start-width: 0;\n  padding-block: 1.25ch;\n  padding-inline: 2ch;\n}</code></pre>\n\n\n\n<p>And, because of our rounded corners and the missing <code>border-collapse: collapse</code>, we need to add some extra styles, specifically for the table borders and a hover state on the cells:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where(.c-tbl tr td:first-of-type) {\n  border-inline-start-width: 1px;\n}\n:where(.c-tbl tr th:last-of-type) {\n  border-inline-color: hsl(200, 60%, 40%);\n}\n:where(.c-tbl tr th:first-of-type) {\n  border-inline-start-color: hsl(200, 60%, 40%);\n}\n:where(.c-tbl thead th:first-of-type) {\n  border-start-start-radius: 0.5rem;\n}\n:where(.c-tbl thead th:last-of-type) {\n  border-start-end-radius: 0.5rem;\n}\n:where(.c-tbl tbody tr:last-of-type td:first-of-type) {\n  border-end-start-radius: 0.5rem;\n}\n:where(.c-tbl tr:last-of-type td:last-of-type) {\n  border-end-end-radius: 0.5rem;\n}\n/* hover */\n@media (hover: hover) {\n  :where(.c-tbl) tr:hover td {\n    background-color: hsl(200, 60%, 95%);\n  }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GRMjpyb\" src=\"//codepen.io/anon/embed/GRMjpyb?height=450&amp;theme-id=1&amp;slug-hash=GRMjpyb&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GRMjpyb\" title=\"CodePen Embed GRMjpyb\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now we can create variations of our table component by injecting other styles before <strong>or</strong> after our generic styles (courtesy of the specificity-stripping powers of <code>:where</code>), either by overwriting the <code>.c-tbl</code> element or by adding a BEM-style modifier-class (e.g. <code>c-tbl--purple</code>):</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;table class=\"c-tbl c-tbl--purple\"></code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.c-tbl--purple th {\n  background-color: hsl(330, 50%, 40%)\n}\n.c-tbl--purple td {\n  border-color: hsl(330, 40%, 80%);\n}\n.c-tbl--purple tr th:last-of-type {\n  border-inline-color: hsl(330, 50%, 40%);\n}\n.c-tbl--purple tr th:first-of-type {\n  border-inline-start-color: hsl(330, 50%, 40%);\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ExwowYY\" src=\"//codepen.io/anon/embed/ExwowYY?height=450&amp;theme-id=1&amp;slug-hash=ExwowYY&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ExwowYY\" title=\"CodePen Embed ExwowYY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Cool! But notice how we keep repeating colors? And what if we want to change the <code>border-radius</code> or the <code>border-width</code>? That would end up with <em>a lot of</em> repeated CSS.</p>\n\n\n\n<p>Let’s move all of these to <a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">CSS custom properties</a> and, while we’re at it, we can move all <strong>configurable properties</strong> to the top of the component’s “scope“ — which is the table element itself — so we can easily play around with them later.</p>\n\n\n<h3 id=\"css-custom-properties\">CSS Custom Properties</h3>\n\n\n<p>I’m going to switch things up in the HTML and use a <code>data-component</code> attribute on the table element that can be targeted for styling.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;table data-component=\"table\" id=\"table\"></code></pre>\n\n\n\n<p>That <code>data-component</code> will hold the generic styles that we can use on any instance of the component, i.e. the styles the table needs no matter what color variation we apply. The styles for a <em>specific</em> table component instance will be contained in a regular class, using custom properties from the generic component.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[data-component=\"table\"] {\n  /* Styles needed for all table variations */\n}\n.c-tbl--purple {\n  /* Styles for the purple variation */\n}</code></pre>\n\n\n\n<p>If we place all the <em>generic styles</em> in a <a href=\"https://css-tricks.com/a-complete-guide-to-data-attributes/\">data-attribute</a>, we can use whatever naming convention we want. This way, we don’t have to worry if your boss insists on naming the table’s classes something like <code>.BIGCORP__TABLE</code>, <code>.table-component</code> or something else.</p>\n\n\n\n<p>In the generic component, each CSS property points to a custom property. Properties, that have to work on child-elements, like <code>border-color</code>, are specified at the <strong>root</strong> of the generic component:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where([data-component=\"table\"]) {\n  /* These will will be used multiple times, and in other selectors */\n  --tbl-hue: 200;\n  --tbl-sat: 50%;\n  --tbl-bdc: hsl(var(--tbl-hue), var(--tbl-sat), 80%);\n}\n\n/* Here, it's used on a child-node: */\n:where([data-component=\"table\"] td) {\n  border-color: var(--tbl-bdc);\n}</code></pre>\n\n\n\n<p>For other properties, decide whether it should have a <strong>static value</strong>, or be <strong>configurable</strong> with its own custom property. If you’re using custom properties, remember to define a default value that the table can fall back to in the event that a variation class is missing.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where([data-component=\"table\"]) {\n  /* These are optional, with fallbacks */\n  background-color: var(--tbl-bgc, transparent);\n  border-collapse: var(--tbl-bdcl, separate);\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">If you’re wondering how I’m naming the custom properties, I’m using a component-prefix (e.g. <code>--tbl</code>) followed by an Emmett-abbreviation (e.g. <code>-bgc</code>). In this case, <code>--tbl</code> is the component-prefix, <code>-bgc</code> is the background color, and <code>-bdcl</code> is the border collapse. So, for example, <code>--tbl-bgc</code> is the table component’s background color. I only use this naming convention when working with component properties, as opposed to global properties which I tend to keep more general.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWEjaBv\" src=\"//codepen.io/anon/embed/MWEjaBv?height=450&amp;theme-id=1&amp;slug-hash=MWEjaBv&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWEjaBv\" title=\"CodePen Embed MWEjaBv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now, if we open up DevTools, we can play around with the custom properties. For example, We can change <code>--tbl-hue</code> to a different hue value in the HSL color, set <code>--tbl-bdrs: 0</code> to remove <code>border-radius</code>, and so on.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"431\" height=\"155\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/vXUic0Fr.png?resize=431%2C155&#038;ssl=1\" alt=\"A :where CSS rule set showing the custom properties of the table showing how the cascade’s specificity scan be used in context.\" class=\"wp-image-359888\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/vXUic0Fr.png?w=431&amp;ssl=1 431w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/vXUic0Fr.png?resize=300%2C108&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>When working with your own components, this is the point in time you’ll discover which parameters (i.e. the custom property values) the component needs to make things look just right.</p>\n\n\n\n<p>We can also use custom properties to control column alignment and width:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where[data-component=\"table\"] tr > *:nth-of-type(1)) {\n  text-align: var(--ca1, initial);\n  width: var(--cw1, initial);\n  /* repeat for column 2 and 3, or use a SCSS-loop ... */\n}</code></pre>\n\n\n\n<p>In DevTools, select the table and add these to the <code>element.styles</code> selector:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">element.style {\n  --ca2: center; /* Align second column center */\n  --ca3: right; /* Align third column right */\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"864\" height=\"246\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962857377_table_align.png?resize=864%2C246&#038;ssl=1\" alt=\"\" class=\"wp-image-359889\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962857377_table_align.png?w=864&amp;ssl=1 864w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962857377_table_align.png?resize=300%2C85&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962857377_table_align.png?resize=768%2C219&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now, let’s create our <em>specific</em> component styles, using a regular class, <code>.c-tbl</code> (which stands for “component-table” in BEM parlance). Let’s toss that class in the table markup.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;table class=\"c-tbl\" data-component=\"table\" id=\"table\"></code></pre>\n\n\n\n<p>Now, let’s change the <code>--tbl-hue</code> value in the CSS just to see how this works before we start messing around with all of the property values:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.c-tbl {\n  --tbl-hue: 330;\n}</code></pre>\n\n\n\n<p>Notice, that we only need to <strong>update properties</strong> rather than writing entirely new CSS! Changing one little property updates the table’s color — no new classes or overriding properties lower in the cascade.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1974\" height=\"492\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?resize=1974%2C492&#038;ssl=1\" alt=\"\" class=\"wp-image-359891\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?w=1974&amp;ssl=1 1974w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?resize=300%2C75&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?resize=1024%2C255&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?resize=768%2C191&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?resize=1536%2C383&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?resize=1000%2C249&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Notice how the border colors change as well. That&#8217;s because all the colors in the table inherit from the <code>--tbl-hue</code> variable</figcaption></figure>\n\n\n\n<p>We can write a more complex selector, but still update a single property, to get something like zebra-striping:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.c-tbl tr:nth-child(even) td {\n  --tbl-td-bgc: hsl(var(--tbl-hue), var(--tbl-sat), 95%);\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"864\" height=\"246\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962048091_table_hue.png?resize=864%2C246&#038;ssl=1\" alt=\"\" class=\"wp-image-359892\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962048091_table_hue.png?w=864&amp;ssl=1 864w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962048091_table_hue.png?resize=300%2C85&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962048091_table_hue.png?resize=768%2C219&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>And remember: It doesn’t matter <strong>where</strong> you load the class. Because our generic styles are using <code>:where</code>, the specificity is wiped out, and any custom styles for a specific variation will be applied no matter where they are used. That’s the beauty of using <code>:where</code> to take control of the cascade!</p>\n\n\n\n<p>And best of all, we can create <em>all kinds of</em> table components from the generic styles with a few lines of CSS.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1008\" height=\"246\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233085840_purple.png?resize=1008%2C246&#038;ssl=1\" alt=\"\" class=\"wp-image-359894\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233085840_purple.png?w=1008&amp;ssl=1 1008w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233085840_purple.png?resize=300%2C73&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233085840_purple.png?resize=768%2C187&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233085840_purple.png?resize=1000%2C244&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Purple table with zebra-striped columns</figcaption></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1008\" height=\"247\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233044068_light.png?resize=1008%2C247&#038;ssl=1\" alt=\"\" class=\"wp-image-359893\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233044068_light.png?w=1008&amp;ssl=1 1008w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233044068_light.png?resize=300%2C74&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233044068_light.png?resize=768%2C188&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233044068_light.png?resize=1000%2C245&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Light table with a&nbsp;“noinlineborder” parameter&#8230; which we&#8217;ll cover next</figcaption></figure>\n\n\n<h3 id=\"adding-parameters-with-another-dataattribute\">Adding parameters with another data-attribute</h3>\n\n\n<p>So far, so good! The generic table component is <em>very</em> simple. But what if it requires something more akin to <em>real</em> parameters? Perhaps for things like:</p>\n\n\n\n<ul><li>zebra-striped rows and columns</li><li>a sticky header and sticky column</li><li>hover-state options, such as hover row, hover cell, hover column</li></ul>\n\n\n\n<p>We could simply add BEM-style modifier classes, but we can actually accomplish it more efficiently by adding another data-attribute to the mix. Perhaps a <code>data-param</code> that holds the parameters like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;table data-component=\"table\" data-param=\"zebrarow stickyrow\"></code></pre>\n\n\n\n<p>Then, in our CSS, we can use an <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\" rel=\"noopener\">attribute-selector</a> to match a whole word in a list of parameters. For example, zebra-striped rows:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[data-component=\"table\"][data-param~=\"zebrarow\"] tr:nth-child(even) td {\n  --tbl-td-bgc: var(--tbl-zebra-bgc);\n}</code></pre>\n\n\n\n<p>Or zebra-striping columns:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[data-component=\"table\"][data-param~=\"zebracol\"] td:nth-of-type(odd) {\n  --tbl-td-bgc: var(--tbl-zebra-bgc);\n}</code></pre>\n\n\n\n<p>Let’s go nuts and make both the table header and the first column sticky:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">\n[data-component=\"table\"][data-param~=\"stickycol\"] thead tr th:first-child,[data-component=\"table\"][data-param~=\"stickycol\"] tbody tr td:first-child {\n  --tbl-td-bgc: var(--tbl-zebra-bgc);\n  inset-inline-start: 0;\n  position: sticky;\n}\n[data-component=\"table\"][data-param~=\"stickyrow\"] thead th {\n  inset-block-start: -1px;\n  position: sticky;\n}</code></pre>\n\n\n\n<p>Here’s a demo that allows you to change one parameter at a time:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxXEeXB\" src=\"//codepen.io/anon/embed/xxXEeXB?height=450&amp;theme-id=1&amp;slug-hash=xxXEeXB&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxXEeXB\" title=\"CodePen Embed xxXEeXB\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The default light theme in the demo is this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.c-tbl--light {\n  --tbl-bdrs: 0;\n  --tbl-sat: 15%;\n  --tbl-th-bgc: #eee;\n  --tbl-th-bdc: #eee;\n  --tbl-th-c: #555;\n  --tbl-th-tt: normal;\n}</code></pre>\n\n\n\n<p>…where <code>data-param</code> is set to <code>noinlineborder</code> which corresponds to these styles:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[data-param~=\"noinlineborder\"] thead tr > th {\n  border-block-start-width: 0;\n  border-inline-end-width: 0;\n  border-block-end-width: var(--tbl-bdw);\n  border-inline-start-width: 0;\n}</code></pre>\n\n\n\n<p>I know my <code>data-attribute</code> way of styling and configuring generic components is very opinionated. That’s just how I roll, so please feel free to stick with whatever method you’re most comfortable working with, whether it’s a BEM modifier class or something else.</p>\n\n\n\n<p>The bottom line is this: <strong>embrace <code>:where</code> and <code>:is</code> and the cascade-controlling powers they provide.</strong> And, if possible, construct the CSS in such a way that you wind up writing as little new CSS as possible when creating new component variations!</p>\n\n\n<h3 id=\"cascade-layers\">Cascade Layers</h3>\n\n\n<p>The last cascade-busting tool I want to look at is “Cascade Layers.” At the time of this writing, it’s an experimental feature defined in the <a href=\"https://www.w3.org/TR/css-cascade-5/#layering\" rel=\"noopener\">CSS Cascading and Inheritance Level 5 specification</a> that you can access in Safari or Chrome by enabling the <code>#enable-cascade-layers</code> flag.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"722\" height=\"97\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636728032349_image.png?resize=722%2C97&#038;ssl=1\" alt=\"\" class=\"wp-image-359896\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636728032349_image.png?w=722&amp;ssl=1 722w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636728032349_image.png?resize=300%2C40&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Bramus Van Damme <a href=\"https://www.bram.us/2021/09/15/the-future-of-css-cascade-layers-css-at-layer/\" rel=\"noopener\">sums up the concept nicely</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The true power of Cascade Layers comes from its unique position in the Cascade: before Selector Specificity and Order Of Appearance. Because of that <strong>we don’t need to worry about the Selector Specificity of the CSS that is used in other Layers</strong>, nor about the order in which we load CSS into these Layers — something that will come in very handy for larger teams or when loading in third-party CSS.</p></blockquote>\n\n\n\n<p>Perhaps even nicer is his illustration showing where Cascade Layers fall in the cascade:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1DF7E6E072B0916EB7F87D80C547417848D48AF8ABF7C8A30B334495313EEE08_1640643601657_css-cascade-cascade-layers-champ-bramus-1120x630-1.png?resize=1024%2C576&#038;ssl=1\" alt=\"\" class=\"wp-image-359897\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1DF7E6E072B0916EB7F87D80C547417848D48AF8ABF7C8A30B334495313EEE08_1640643601657_css-cascade-cascade-layers-champ-bramus-1120x630-1.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1DF7E6E072B0916EB7F87D80C547417848D48AF8ABF7C8A30B334495313EEE08_1640643601657_css-cascade-cascade-layers-champ-bramus-1120x630-1.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1DF7E6E072B0916EB7F87D80C547417848D48AF8ABF7C8A30B334495313EEE08_1640643601657_css-cascade-cascade-layers-champ-bramus-1120x630-1.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1DF7E6E072B0916EB7F87D80C547417848D48AF8ABF7C8A30B334495313EEE08_1640643601657_css-cascade-cascade-layers-champ-bramus-1120x630-1.png?resize=1000%2C563&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1DF7E6E072B0916EB7F87D80C547417848D48AF8ABF7C8A30B334495313EEE08_1640643601657_css-cascade-cascade-layers-champ-bramus-1120x630-1.png?w=1120&amp;ssl=1 1120w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Credit: Bramus Van Damme</figcaption></figure>\n\n\n\n<p>At the beginning of this article, I mentioned ITCSS — a way of taming the cascade by specifying the load-order of generic styles, components etc. Cascade Layers allow us to inject a stylesheet at a given location. So a simplified version of this structure in Cascade Layers looks like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer generic, components;</code></pre>\n\n\n\n<p>With this single line, we’ve decided the <strong>order</strong> of our layers. First come the generic styles, followed by the component-specific ones.</p>\n\n\n\n<p>Let’s pretend that we’re loading our generic styles somewhere <strong>much later</strong> than our component styles:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer components {\n  body {\n    background-color: lightseagreen;\n  }\n}\n\n/* MUCH, much later... */\n\n@layer generic { \n  body {\n    background-color: tomato;\n  }\n}</code></pre>\n\n\n\n<p>The <code>background-color</code> will be <code>lightseagreen</code> because our component styles layer is set <em>after</em> the generic styles layer. So, the styles in the <code>components</code> layer “win” even if they are written <em>before</em> the <code>generic</code> layer styles.</p>\n\n\n\n<p>Again, just another tool for controlling how the CSS cascade applies styles, allowing us more flexibility to organize things logically rather than wrestling with specificity.</p>\n\n\n<h3 id=\"now-youre-in-control\">Now you’re in control!</h3>\n\n\n<p>The whole point here is that the CSS cascade is becoming a lot easier to wrangle, thanks to new features. We saw how the <code>:where</code> and <code>:is</code> pseudo-selectors allows us to control specificity, either by stripping out the specificity of an entire ruleset or taking on the specificity of the most specific argument, respectively. Then we used CSS Custom Properties to override styles without writing a new class to override another. From there, we took a slight detour down data-attribute lane to help us add more flexibility to create component variations merely by adding arguments to the HTML. And, finally, we poked at Cascade Layers which should prove handy for specifying the loading order or styles using <code>@layer</code>.</p>\n\n\n\n<p>If you leave with only one takeaway from this article, I hope it’s that the CSS cascade is no longer the enemy it’s often made to be. We are gaining the tools to stop fighting it and start leaning into even more.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p><small>Header photo by&nbsp;<a href=\"https://unsplash.com/@stephenleo1982?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Stephen Leonardi</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/s/photos/cascade?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Unsplash</a></small></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/dont-fight-the-cascade-control-it/\">Don&#8217;t Fight the Cascade, Control It!</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "If you’re disciplined and make use of the inheritance that the CSS cascade provides, you’ll end up writing less CSS. But because our styles often comes from all kinds of sources — and can be a pain to structure and maintain—the cascade can be a source of frustration, and the reason we end up with more CSS than necessary.\n\n\n\nSome years ago, Harry Roberts came up with ITCSS and it’s a clever way of structuring CSS.\n\n\n\n\n\n\n\n\n\n\n\nMixed with BEM, ITCSS has become a popular way that people write and organize CSS.\n\n\n\nHowever, even with ITCSS and BEM, there are still times where we still struggle with the cascade. For example, I’m sure you’ve had to @import external CSS components at a specific location to prevent breaking things, or reach for the dreaded !important at some point in time.\n\n\n\nRecently, some new tools were added to our CSS toolbox, and they allow us to finally control the cascade. Let’s look at them.\n\n\nO cascade, :where art thou?\n\n\nUsing the :where pseudo-selector allows us to remove specificity to “just after the user-agent default styles,” no matter where or when the CSS is loaded into the document. That means the specificity of the whole thing is literally zero — totally wiped out. This is handy for generic components, which we’ll look into in a moment.\n\n\n\nFirst, imagine some generic <table> styles, using :where:\n\n\n\n:where(table) {\n  background-color: tan;\n}\n\n\n\nNow, if you add some other table styles before the :where selector, like this:\n\n\n\ntable {\n  background-color: hotpink;\n}\n\n:where(table) {\n  background-color: tan;\n}\n\n\n\n…the table background becomes hotpink, even though the table selector is specified before the :where selector in the cascade. That’s the beauty of :where, and why it’s already being used for CSS resets.\n\n\n\n:where has a sibling, which has almost the exact opposite effect: the :is selector.\n\n\n\nThe specificity of the :is() pseudo-class is replaced by the specificity of its most specific argument. Thus, a selector written with :is() does not necessarily have equivalent specificity to the equivalent selector written without :is(). Selectors Level 4 specification\n\n\n\nExpanding on our previous example:\n\n\n\n:is(table) {\n  --tbl-bgc: orange;\n}\ntable {\n  --tbl-bgc: tan;\n}\n:where(table) {\n  --tbl-bgc: hotpink;\n  background-color: var(--tbl-bgc);\n}\n\n\n\nThe <table class=\"c-tbl\"> background color will be tan because the specificity of :is is the same as table, but table is placed after.\n\n\n\nCodePen Embed Fallback\n\n\n\nHowever, if we were to change it to this:\n\n\n\n:is(table, .c-tbl) {\n  --tbl-bgc: orange;\n}\n\n\n\n…the background color will be orange, since :is has the weight of it’s heaviest selector, which is .c-tbl.\n\n\n\nCodePen Embed Fallback\n\n\nExample: A configurable table component\n\n\nNow, let’s see how we can use :where in our components. We’ll be building a table component, starting with the HTML:\n\n\n\nCodePen Embed Fallback\n\n\n\nLet’s wrap .c-tbl in a :where-selector and, just for fun, add rounded corners to the table. That means we need border-collapse: separate, as we can’t use border-radius on table cells when the table is using border-collapse: collapse:\n\n\n\n:where(.c-tbl) {\n  border-collapse: separate;\n  border-spacing: 0;\n  table-layout: auto;\n  width: 99.9%;\n}\n\n\n\nThe cells use different styling for the <thead> and <tbody>-cells:\n\n\n\n:where(.c-tbl thead th) {\n  background-color: hsl(200, 60%, 40%);\n  border-style: solid;\n  border-block-start-width: 0;\n  border-inline-end-width: 1px;\n  border-block-end-width: 0;\n  border-inline-start-width: 0;\n  color: hsl(200, 60%, 99%);\n  padding-block: 1.25ch;\n  padding-inline: 2ch;\n  text-transform: uppercase;\n}\n:where(.c-tbl tbody td) {\n  background-color: #FFF;\n  border-color: hsl(200, 60%, 80%);\n  border-style: solid;\n  border-block-start-width: 0;\n  border-inline-end-width: 1px;\n  border-block-end-width: 1px;\n  border-inline-start-width: 0;\n  padding-block: 1.25ch;\n  padding-inline: 2ch;\n}\n\n\n\nAnd, because of our rounded corners and the missing border-collapse: collapse, we need to add some extra styles, specifically for the table borders and a hover state on the cells:\n\n\n\n:where(.c-tbl tr td:first-of-type) {\n  border-inline-start-width: 1px;\n}\n:where(.c-tbl tr th:last-of-type) {\n  border-inline-color: hsl(200, 60%, 40%);\n}\n:where(.c-tbl tr th:first-of-type) {\n  border-inline-start-color: hsl(200, 60%, 40%);\n}\n:where(.c-tbl thead th:first-of-type) {\n  border-start-start-radius: 0.5rem;\n}\n:where(.c-tbl thead th:last-of-type) {\n  border-start-end-radius: 0.5rem;\n}\n:where(.c-tbl tbody tr:last-of-type td:first-of-type) {\n  border-end-start-radius: 0.5rem;\n}\n:where(.c-tbl tr:last-of-type td:last-of-type) {\n  border-end-end-radius: 0.5rem;\n}\n/* hover */\n@media (hover: hover) {\n  :where(.c-tbl) tr:hover td {\n    background-color: hsl(200, 60%, 95%);\n  }\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nNow we can create variations of our table component by injecting other styles before or after our generic styles (courtesy of the specificity-stripping powers of :where), either by overwriting the .c-tbl element or by adding a BEM-style modifier-class (e.g. c-tbl--purple):\n\n\n\n<table class=\"c-tbl c-tbl--purple\">\n\n\n\n.c-tbl--purple th {\n  background-color: hsl(330, 50%, 40%)\n}\n.c-tbl--purple td {\n  border-color: hsl(330, 40%, 80%);\n}\n.c-tbl--purple tr th:last-of-type {\n  border-inline-color: hsl(330, 50%, 40%);\n}\n.c-tbl--purple tr th:first-of-type {\n  border-inline-start-color: hsl(330, 50%, 40%);\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nCool! But notice how we keep repeating colors? And what if we want to change the border-radius or the border-width? That would end up with a lot of repeated CSS.\n\n\n\nLet’s move all of these to CSS custom properties and, while we’re at it, we can move all configurable properties to the top of the component’s “scope“ — which is the table element itself — so we can easily play around with them later.\n\n\nCSS Custom Properties\n\n\nI’m going to switch things up in the HTML and use a data-component attribute on the table element that can be targeted for styling.\n\n\n\n<table data-component=\"table\" id=\"table\">\n\n\n\nThat data-component will hold the generic styles that we can use on any instance of the component, i.e. the styles the table needs no matter what color variation we apply. The styles for a specific table component instance will be contained in a regular class, using custom properties from the generic component.\n\n\n\n[data-component=\"table\"] {\n  /* Styles needed for all table variations */\n}\n.c-tbl--purple {\n  /* Styles for the purple variation */\n}\n\n\n\nIf we place all the generic styles in a data-attribute, we can use whatever naming convention we want. This way, we don’t have to worry if your boss insists on naming the table’s classes something like .BIGCORP__TABLE, .table-component or something else.\n\n\n\nIn the generic component, each CSS property points to a custom property. Properties, that have to work on child-elements, like border-color, are specified at the root of the generic component:\n\n\n\n:where([data-component=\"table\"]) {\n  /* These will will be used multiple times, and in other selectors */\n  --tbl-hue: 200;\n  --tbl-sat: 50%;\n  --tbl-bdc: hsl(var(--tbl-hue), var(--tbl-sat), 80%);\n}\n\n/* Here, it's used on a child-node: */\n:where([data-component=\"table\"] td) {\n  border-color: var(--tbl-bdc);\n}\n\n\n\nFor other properties, decide whether it should have a static value, or be configurable with its own custom property. If you’re using custom properties, remember to define a default value that the table can fall back to in the event that a variation class is missing.\n\n\n\n:where([data-component=\"table\"]) {\n  /* These are optional, with fallbacks */\n  background-color: var(--tbl-bgc, transparent);\n  border-collapse: var(--tbl-bdcl, separate);\n}\n\n\n\nIf you’re wondering how I’m naming the custom properties, I’m using a component-prefix (e.g. --tbl) followed by an Emmett-abbreviation (e.g. -bgc). In this case, --tbl is the component-prefix, -bgc is the background color, and -bdcl is the border collapse. So, for example, --tbl-bgc is the table component’s background color. I only use this naming convention when working with component properties, as opposed to global properties which I tend to keep more general.\n\n\n\nCodePen Embed Fallback\n\n\n\nNow, if we open up DevTools, we can play around with the custom properties. For example, We can change --tbl-hue to a different hue value in the HSL color, set --tbl-bdrs: 0 to remove border-radius, and so on.\n\n\n\n\n\n\n\nWhen working with your own components, this is the point in time you’ll discover which parameters (i.e. the custom property values) the component needs to make things look just right.\n\n\n\nWe can also use custom properties to control column alignment and width:\n\n\n\n:where[data-component=\"table\"] tr > *:nth-of-type(1)) {\n  text-align: var(--ca1, initial);\n  width: var(--cw1, initial);\n  /* repeat for column 2 and 3, or use a SCSS-loop ... */\n}\n\n\n\nIn DevTools, select the table and add these to the element.styles selector:\n\n\n\nelement.style {\n  --ca2: center; /* Align second column center */\n  --ca3: right; /* Align third column right */\n}\n\n\n\n\n\n\n\nNow, let’s create our specific component styles, using a regular class, .c-tbl (which stands for “component-table” in BEM parlance). Let’s toss that class in the table markup.\n\n\n\n<table class=\"c-tbl\" data-component=\"table\" id=\"table\">\n\n\n\nNow, let’s change the --tbl-hue value in the CSS just to see how this works before we start messing around with all of the property values:\n\n\n\n.c-tbl {\n  --tbl-hue: 330;\n}\n\n\n\nNotice, that we only need to update properties rather than writing entirely new CSS! Changing one little property updates the table’s color — no new classes or overriding properties lower in the cascade.\n\n\n\nNotice how the border colors change as well. That’s because all the colors in the table inherit from the --tbl-hue variable\n\n\n\nWe can write a more complex selector, but still update a single property, to get something like zebra-striping:\n\n\n\n.c-tbl tr:nth-child(even) td {\n  --tbl-td-bgc: hsl(var(--tbl-hue), var(--tbl-sat), 95%);\n}\n\n\n\n\n\n\n\nAnd remember: It doesn’t matter where you load the class. Because our generic styles are using :where, the specificity is wiped out, and any custom styles for a specific variation will be applied no matter where they are used. That’s the beauty of using :where to take control of the cascade!\n\n\n\nAnd best of all, we can create all kinds of table components from the generic styles with a few lines of CSS.\n\n\n\nPurple table with zebra-striped columns\n\n\n\nLight table with a “noinlineborder” parameter… which we’ll cover next\n\n\nAdding parameters with another data-attribute\n\n\nSo far, so good! The generic table component is very simple. But what if it requires something more akin to real parameters? Perhaps for things like:\n\n\n\nzebra-striped rows and columnsa sticky header and sticky columnhover-state options, such as hover row, hover cell, hover column\n\n\n\nWe could simply add BEM-style modifier classes, but we can actually accomplish it more efficiently by adding another data-attribute to the mix. Perhaps a data-param that holds the parameters like this:\n\n\n\n<table data-component=\"table\" data-param=\"zebrarow stickyrow\">\n\n\n\nThen, in our CSS, we can use an attribute-selector to match a whole word in a list of parameters. For example, zebra-striped rows:\n\n\n\n[data-component=\"table\"][data-param~=\"zebrarow\"] tr:nth-child(even) td {\n  --tbl-td-bgc: var(--tbl-zebra-bgc);\n}\n\n\n\nOr zebra-striping columns:\n\n\n\n[data-component=\"table\"][data-param~=\"zebracol\"] td:nth-of-type(odd) {\n  --tbl-td-bgc: var(--tbl-zebra-bgc);\n}\n\n\n\nLet’s go nuts and make both the table header and the first column sticky:\n\n\n\n\n[data-component=\"table\"][data-param~=\"stickycol\"] thead tr th:first-child,[data-component=\"table\"][data-param~=\"stickycol\"] tbody tr td:first-child {\n  --tbl-td-bgc: var(--tbl-zebra-bgc);\n  inset-inline-start: 0;\n  position: sticky;\n}\n[data-component=\"table\"][data-param~=\"stickyrow\"] thead th {\n  inset-block-start: -1px;\n  position: sticky;\n}\n\n\n\nHere’s a demo that allows you to change one parameter at a time:\n\n\n\nCodePen Embed Fallback\n\n\n\nThe default light theme in the demo is this:\n\n\n\n.c-tbl--light {\n  --tbl-bdrs: 0;\n  --tbl-sat: 15%;\n  --tbl-th-bgc: #eee;\n  --tbl-th-bdc: #eee;\n  --tbl-th-c: #555;\n  --tbl-th-tt: normal;\n}\n\n\n\n…where data-param is set to noinlineborder which corresponds to these styles:\n\n\n\n[data-param~=\"noinlineborder\"] thead tr > th {\n  border-block-start-width: 0;\n  border-inline-end-width: 0;\n  border-block-end-width: var(--tbl-bdw);\n  border-inline-start-width: 0;\n}\n\n\n\nI know my data-attribute way of styling and configuring generic components is very opinionated. That’s just how I roll, so please feel free to stick with whatever method you’re most comfortable working with, whether it’s a BEM modifier class or something else.\n\n\n\nThe bottom line is this: embrace :where and :is and the cascade-controlling powers they provide. And, if possible, construct the CSS in such a way that you wind up writing as little new CSS as possible when creating new component variations!\n\n\nCascade Layers\n\n\nThe last cascade-busting tool I want to look at is “Cascade Layers.” At the time of this writing, it’s an experimental feature defined in the CSS Cascading and Inheritance Level 5 specification that you can access in Safari or Chrome by enabling the #enable-cascade-layers flag.\n\n\n\n\n\n\n\nBramus Van Damme sums up the concept nicely:\n\n\n\nThe true power of Cascade Layers comes from its unique position in the Cascade: before Selector Specificity and Order Of Appearance. Because of that we don’t need to worry about the Selector Specificity of the CSS that is used in other Layers, nor about the order in which we load CSS into these Layers — something that will come in very handy for larger teams or when loading in third-party CSS.\n\n\n\nPerhaps even nicer is his illustration showing where Cascade Layers fall in the cascade:\n\n\n\nCredit: Bramus Van Damme\n\n\n\nAt the beginning of this article, I mentioned ITCSS — a way of taming the cascade by specifying the load-order of generic styles, components etc. Cascade Layers allow us to inject a stylesheet at a given location. So a simplified version of this structure in Cascade Layers looks like this:\n\n\n\n@layer generic, components;\n\n\n\nWith this single line, we’ve decided the order of our layers. First come the generic styles, followed by the component-specific ones.\n\n\n\nLet’s pretend that we’re loading our generic styles somewhere much later than our component styles:\n\n\n\n@layer components {\n  body {\n    background-color: lightseagreen;\n  }\n}\n\n/* MUCH, much later... */\n\n@layer generic { \n  body {\n    background-color: tomato;\n  }\n}\n\n\n\nThe background-color will be lightseagreen because our component styles layer is set after the generic styles layer. So, the styles in the components layer “win” even if they are written before the generic layer styles.\n\n\n\nAgain, just another tool for controlling how the CSS cascade applies styles, allowing us more flexibility to organize things logically rather than wrestling with specificity.\n\n\nNow you’re in control!\n\n\nThe whole point here is that the CSS cascade is becoming a lot easier to wrangle, thanks to new features. We saw how the :where and :is pseudo-selectors allows us to control specificity, either by stripping out the specificity of an entire ruleset or taking on the specificity of the most specific argument, respectively. Then we used CSS Custom Properties to override styles without writing a new class to override another. From there, we took a slight detour down data-attribute lane to help us add more flexibility to create component variations merely by adding arguments to the HTML. And, finally, we poked at Cascade Layers which should prove handy for specifying the loading order or styles using @layer.\n\n\n\nIf you leave with only one takeaway from this article, I hope it’s that the CSS cascade is no longer the enemy it’s often made to be. We are gaining the tools to stop fighting it and start leaning into even more.\n\n\n\n\n\n\n\nHeader photo by Stephen Leonardi on Unsplash\n\nDon’t Fight the Cascade, Control It! originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-10T15:22:08.000Z",
      "date_modified": "2022-01-10T15:22:08.000Z",
      "_plugin": {
        "pageFilename": "32d6ac9833c41fd7aded22d0b61984fd492a5561dc4f595d0d683efccf586981.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360711",
      "url": "https://css-tricks.com/typography-links-january-2022/",
      "title": "8 Interesting Typography Links for January 2022",
      "summary": "Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. Typography is one of those things! Here’s a list of typography links to other articles that I’ve been saving up and …\n\n8 Interesting Typography Links for January 2022 originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Every now and then, I find that I&#8217;ve accumulated a bunch of links about various things I find interesting. Typography is one of those things! Here&#8217;s a list of typography links to other articles that I&#8217;ve been saving up and think are worth sharing.</p>\n\n\n\n<span id=\"more-360711\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1646\" height=\"1060\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1646%2C1060&#038;ssl=1\" alt=\"A specimen of the Retail typeface, once of the typography links in the list.\" class=\"wp-image-360777\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?w=1646&amp;ssl=1 1646w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=300%2C193&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1024%2C659&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=768%2C495&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1536%2C989&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1000%2C644&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>An awesome <a href=\"#retail-font\">new font</a> from OH no Type Company</figcaption></figure>\n\n\n\n<ul class=\"is-style-super-link-list\"><li><a href=\"https://mailchi.mp/252c1a3e328e/your-october-font-of-the-month-190523\" rel=\"noopener\">Output Sans goes variable</a> — David Jonathan Ross&#8217;s <a href=\"https://djr.com/output\" rel=\"noopener\">Output</a> is a real workhorse typeface. He&#8217;s been re-doing it as a variable as part of an effort to get variable fonts &#8220;over the hump&#8221; — that is, away from being thought of as experimental and thought of as practical for day-to-day usage.</li><li><a href=\"https://www.swyx.io/line-lengths/\" rel=\"noopener\">Line Lengths</a> — Shawn says, &#8220;it seems an obvious immediate win to apply&nbsp;<code>max-width: 69ch</code>&nbsp;to your blog content blocks.&#8221; Nice. Oliver Schöndorfer <a href=\"https://pimpmytype.com/line-length-line-height/\" rel=\"noopener\">dug into line length</a> recently too. </li><li><strong><a href=\"https://www.joshwcomeau.com/css/custom-css-reset/#:~:text=Smarter%20line-heights,Here%20it%20is%3A\" rel=\"noopener\">Smarter line-heights with “calc”</a></strong>  — Check out this particular part of Josh&#8217;s custom CSS reset. A potentially cool way to handle <code>line-height</code> for both body copy and headers in one swoop.</li><li><a href=\"https://www.women-in-type.com/\" rel=\"noopener\">Women in Type</a> — Just an incredible website from the University of Reading team. &#8220;These women worked daily on developing and producing typefaces that were, eventually, almost always attributed to male designers. They merit attention as key contributors to the design process of many renowned typefaces that emerged throughout the twentieth century.&#8221;</li><li><a id=\"retail-font\" href=\"https://ohnotype.co/fonts/retail\" rel=\"noopener\">Retail</a> — &#8220;Retail is the result of focussing our energy on the not-too-trendy world of humanist sans.&#8221; Very nice work from OH no Type Company.</li><li><a href=\"https://qodeinteractive.com/magazine/best-google-fonts/\" rel=\"noopener\">Designers’ Pick: Best Google Fonts for 2022</a> — The fact that you can go from zero to implemented custom fonts, for free, in like 30 seconds with Google Fonts is going to keep it the most-used custom font solution likely as long as it exists. Fortunately, the website for it has gotten a lot better, the performance of them has gotten good (and controllable), and as this post on Qode shows, there is a ton of really great new choices available. I like the look of <a href=\"https://fonts.google.com/specimen/Space+Grotesk\" rel=\"noopener\">Space Grotesk</a>. The <a href=\"https://www.typewolf.com/\" rel=\"noopener\">Typewolf</a> newsletter is always covering new good ones. Lately: <a href=\"https://fonts.google.com/specimen/Readex+Pro\" rel=\"noopener\">Readex Pro</a> &amp; <a href=\"https://fonts.google.com/specimen/Spline+Sans\" rel=\"noopener\">Spline Sans</a>.</li><li><a href=\"https://elliotjaystocks.com/blog/google-fonts-knowledge\" rel=\"noopener\">Google Fonts Knowledge</a> — Speaking of Google Fonts! Elliot Jay Stocks worked on this beefy project: &#8220;30+ lessons spread out over three modules —&nbsp;<a href=\"https://fonts.google.com/knowledge/introducing_type\" rel=\"noopener\">“Introducing Type”</a>,&nbsp;<a href=\"https://fonts.google.com/knowledge/choosing_type\" rel=\"noopener\">“Choosing Type”</a>, and&nbsp;<a href=\"https://fonts.google.com/knowledge/using_type\" rel=\"noopener\">“Using Type”</a>&nbsp;— and&nbsp;<a href=\"https://fonts.google.com/knowledge/glossary\" rel=\"noopener\">100+ glossary definitions</a>.&#8221; </li><li><a href=\"https://modern-fluid-typography.vercel.app/\" rel=\"noopener\">Modern fluid typography editor</a> — The output from this generator tool by Adrian Bece is a lot like the <code>clamp()</code> stuff from <a href=\"https://css-tricks.com/consistent-fluidly-scaling-type-and-spacing/\">Andy&#8217;s Consistent, Fluidly Scaling Type and Spacing</a>. Adrian&#8217;s helps you visualize the &#8220;curve&#8221;, but actually <em>this</em> <a href=\"https://www.fluid-type-scale.com/\" rel=\"noopener\">Fluid Type Scale Calculator</a> from <a href=\"https://www.aleksandrhovhannisyan.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Aleksandr Hovhannisyan</a> might be a smidge more useful when setting up a new project as it gives you a full spectrum of custom properties to use. </li></ul>\n\n\n\n<p>Do you have any interesting  typography links from  the past month worth sharing? Drop &#8217;em in the comments!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/typography-links-january-2022/\">8 Interesting Typography Links for January 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. Typography is one of those things! Here’s a list of typography links to other articles that I’ve been saving up and think are worth sharing.\n\n\n\n\n\n\n\nAn awesome new font from OH no Type Company\n\n\n\nOutput Sans goes variable — David Jonathan Ross’s Output is a real workhorse typeface. He’s been re-doing it as a variable as part of an effort to get variable fonts “over the hump” — that is, away from being thought of as experimental and thought of as practical for day-to-day usage.Line Lengths — Shawn says, “it seems an obvious immediate win to apply max-width: 69ch to your blog content blocks.” Nice. Oliver Schöndorfer dug into line length recently too. Smarter line-heights with “calc”  — Check out this particular part of Josh’s custom CSS reset. A potentially cool way to handle line-height for both body copy and headers in one swoop.Women in Type — Just an incredible website from the University of Reading team. “These women worked daily on developing and producing typefaces that were, eventually, almost always attributed to male designers. They merit attention as key contributors to the design process of many renowned typefaces that emerged throughout the twentieth century.”Retail — “Retail is the result of focussing our energy on the not-too-trendy world of humanist sans.” Very nice work from OH no Type Company.Designers’ Pick: Best Google Fonts for 2022 — The fact that you can go from zero to implemented custom fonts, for free, in like 30 seconds with Google Fonts is going to keep it the most-used custom font solution likely as long as it exists. Fortunately, the website for it has gotten a lot better, the performance of them has gotten good (and controllable), and as this post on Qode shows, there is a ton of really great new choices available. I like the look of Space Grotesk. The Typewolf newsletter is always covering new good ones. Lately: Readex Pro & Spline Sans.Google Fonts Knowledge — Speaking of Google Fonts! Elliot Jay Stocks worked on this beefy project: “30+ lessons spread out over three modules — “Introducing Type”, “Choosing Type”, and “Using Type” — and 100+ glossary definitions.” Modern fluid typography editor — The output from this generator tool by Adrian Bece is a lot like the clamp() stuff from Andy’s Consistent, Fluidly Scaling Type and Spacing. Adrian’s helps you visualize the “curve”, but actually this Fluid Type Scale Calculator from Aleksandr Hovhannisyan might be a smidge more useful when setting up a new project as it gives you a full spectrum of custom properties to use. \n\n\n\nDo you have any interesting  typography links from  the past month worth sharing? Drop ’em in the comments!\n\n8 Interesting Typography Links for January 2022 originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-07T22:31:52.000Z",
      "date_modified": "2022-01-07T22:31:52.000Z",
      "_plugin": {
        "pageFilename": "81720961ea1ef8071e2acbe193d32dd4a5eb3a4b9e54557de984e7c8349e0393.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360113",
      "url": "https://css-tricks.com/adam-argyles-sick-mouse-out-css-hover-effect/",
      "title": "Adam Argyle’s Sick Mouse-Out CSS Hover Effect",
      "summary": "I was killing some time browsing my CodePen feed for some eye candy and didn’t need to go past the first page before spotting a neat CSS hover effect by Adam Argyle.\nI must’ve spent 10 minutes just staring …\n\nAdam Argyle’s Sick Mouse-Out CSS Hover Effect originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I was killing some time browsing my CodePen feed for some eye candy and didn&#8217;t need to go past the first page before spotting a <a href=\"https://codepen.io/argyleink/pen/poEjvpd?editors=1100\" rel=\"noopener\">neat CSS hover effect</a> by <a href=\"https://twitter.com/argyleink\" rel=\"noopener\">Adam Argyle</a>.</p>\n\n\n\n<span id=\"more-360113\"></span>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"adam-cool-link-effect-mp4\" width='500' height='281' src='https://videopress.com/embed/bOm32AjY?cover=1&amp;loop=1&amp;muted=1&amp;persistVolume=0&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>I must&#8217;ve spent 10 minutes just staring at the demo in awe. There&#8217;s something about this that feels so app-like. I think it might be how contextually accurate it is in that the background color slides in from the left, then exits out through the right. It&#8217;s exactly the sort of behavior I&#8217;d expect from a mouse-in, mouse-out sort of interaction. </p>\n\n\n\n<p>Whatever the case, I fired up a fresh pen and went to work recreating it. And it&#8217;s not super complex or anything, but rather a clever use of transitions and transforms paired with proper offsets. Quite elegant! I&#8217;m actually a little embarrassed how long it took me to realize how the mouse-out part works.</p>\n\n\n\n<p>Here&#8217;s how I tackled it, warts and all.</p>\n\n\n<h3 id=\"i-bet-thats-using-a-transition-on-a-background\">&#8220;I bet that&#8217;s using a transition on a <code>background</code>.&#8221;</h3>\n\n\n<p>That was my first thought. Define the background-color, set the  <code>background-size</code> and <code>background-position</code>, then transition the <code>background-position</code>. That&#8217;s how I&#8217;ve seen that &#8220;growing&#8221; background color thing done in the past. I&#8217;ve done that myself on some projects, like this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GXoOdK\" src=\"//codepen.io/anon/embed/preview/GXoOdK?height=350&amp;theme-id=1&amp;slug-hash=GXoOdK&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GXoOdK\" title=\"CodePen Embed GXoOdK\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If I could do the same thing, only from left-to-right, then all that&#8217;s left is the mouse-out, right? Nope. The problem is there&#8217;s nothing that can really make the <code>background-position</code> transition from left-to-right to left-to-right. I could make it do one or the other, but not both.</p>\n\n\n<h3 id=\"maybe-its-a-transform-instead\">&#8220;Maybe it&#8217;s a <code>transform</code> instead.&#8221;</h3>\n\n\n<p>My next attempt was jump into transforms. The <code>transform</code> property provides a bunch of functions that can <code>transition</code> together for slightly more complex movement. For example, the <code>background</code> can &#8220;grow&#8221; or &#8220;shrink&#8221; by changing the element&#8217;s <code>scale()</code>. Or, in this case, just along the x-axis with <code>scaleX()</code>.</p>\n\n\n\n<p>But like I mentioned, there isn&#8217;t a way to isolate the element&#8217;s <code>background</code> to do that. Going from <code>scaleX(0)</code> to <code>scaleX(1)</code> scales the <em>entire</em> element, so that basically squishes the link — content and all — down to nothing, then stretches it back out to its natural size which is a totally different effect. Plus, it means starting with <code>scaleX(0)</code> which hides the whole dang thing by default making it unusable.</p>\n\n\n\n<p>But a pseudo-element could work! It doesn&#8217;t matter if that gets squished or hidden because it isn&#8217;t part of the actual content. Gotta put the <code>background</code> on that instead and position it directly under the link.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  /* Keeps the pseudo-element contained to the element */\n  position: relative;\n}\n\na::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0; /* Logical equivalent to physical offsets */\n  position: absolute;\n  transform: scaleX(0); /* Hide by default */\n  z-index: -1; /* Ensures the link is stacked on top */\n}</code></pre>\n\n\n<h3 id=\"now-i-need-before-to-change-on-hover\">&#8220;Now I need <code>::before</code> to change on hover.&#8221;</h3>\n\n\n<p>I knew I could make <code>::before</code> scale from <code>0</code> to <code>1</code> by chaining it to the link element&#8217;s <code>:hover</code> state.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a:hover::before {\n  transform: scaleX(1)\n}</code></pre>\n\n\n\n<p><em>Nice!</em> I was onto something.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBPxXEJ\" src=\"//codepen.io/anon/embed/preview/qBPxXEJ?height=350&amp;theme-id=1&amp;slug-hash=qBPxXEJ&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBPxXEJ\" title=\"CodePen Embed qBPxXEJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Sprinkle a little <code>transition</code> fairy dust on it and things start to come to life.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"7\"><code markup=\"tt\">a::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLzvoVz\" src=\"//codepen.io/anon/embed/preview/yLzvoVz?height=350&amp;theme-id=1&amp;slug-hash=yLzvoVz&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLzvoVz\" title=\"CodePen Embed yLzvoVz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"hmm-the-transition-moves-in-both-directions\">&#8220;Hmm, the transition moves in <em>both</em> directions.&#8221;</h3>\n\n\n<p>Again, this is where I sorta got stuck. Something in my head just wasn&#8217;t clicking for some reason. As per usual, I ran over to the <a href=\"https://css-tricks.com/almanac/\">CSS-Tricks Almanac</a> to see what property might&#8217;ve slipped my mind.</p>\n\n\n\n<p>Ah, yes. That would be <code><a href=\"https://css-tricks.com/almanac/properties/t/transform-origin/\">transform-origin</a></code>. That allows me to set where the <code>transform</code> starts, which is not totally dissimilar from setting the <code>background-position</code> like I tried earlier. The <code>transform</code> could start from the left instead of its default <code>50% 50%</code> position.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"7\"><code markup=\"tt\">a::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transform-origin: left;\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}</code></pre>\n\n\n\n<p>Yeah, like this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNZMEjp\" src=\"//codepen.io/anon/embed/preview/WNZMEjp?height=350&amp;theme-id=1&amp;slug-hash=WNZMEjp&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNZMEjp\" title=\"CodePen Embed WNZMEjp\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I was already transitioning <code>::before</code> to <code>scaleX(1)</code> on link hover. If I reversed the <code>transform-origin</code> from <code>left</code> to <code>right</code> at the same time, then <em>mayyyybe</em> the highlight goes out the opposite of how it came in when the mouse exits?</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"3\"><code markup=\"tt\">a:hover::before {\n  transform: scaleX(1);\n  transform-origin: right;\n}</code></pre>\n\n\n\n<p>&#x1f91e;</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jOGZLLw\" src=\"//codepen.io/anon/embed/preview/jOGZLLw?height=350&amp;theme-id=1&amp;slug-hash=jOGZLLw&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jOGZLLw\" title=\"CodePen Embed jOGZLLw\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Whoops, backwards! Let&#8217;s swap the <code>left</code> and <code>right</code> values. &#x1f643;</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLzvXyL\" src=\"//codepen.io/anon/embed/yLzvXyL?height=350&amp;theme-id=1&amp;slug-hash=yLzvXyL&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLzvXyL\" title=\"CodePen Embed yLzvXyL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Gorgeous. Thank you, Adam, for the inspiration!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/adam-argyles-sick-mouse-out-css-hover-effect/\">Adam Argyle&#8217;s Sick Mouse-Out CSS Hover Effect</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I was killing some time browsing my CodePen feed for some eye candy and didn’t need to go past the first page before spotting a neat CSS hover effect by Adam Argyle.\n\n\n\n\n\n\n\n\n\n\n\n\n\nI must’ve spent 10 minutes just staring at the demo in awe. There’s something about this that feels so app-like. I think it might be how contextually accurate it is in that the background color slides in from the left, then exits out through the right. It’s exactly the sort of behavior I’d expect from a mouse-in, mouse-out sort of interaction. \n\n\n\nWhatever the case, I fired up a fresh pen and went to work recreating it. And it’s not super complex or anything, but rather a clever use of transitions and transforms paired with proper offsets. Quite elegant! I’m actually a little embarrassed how long it took me to realize how the mouse-out part works.\n\n\n\nHere’s how I tackled it, warts and all.\n\n\n“I bet that’s using a transition on a background.”\n\n\nThat was my first thought. Define the background-color, set the  background-size and background-position, then transition the background-position. That’s how I’ve seen that “growing” background color thing done in the past. I’ve done that myself on some projects, like this:\n\n\n\nCodePen Embed Fallback\n\n\n\nIf I could do the same thing, only from left-to-right, then all that’s left is the mouse-out, right? Nope. The problem is there’s nothing that can really make the background-position transition from left-to-right to left-to-right. I could make it do one or the other, but not both.\n\n\n“Maybe it’s a transform instead.”\n\n\nMy next attempt was jump into transforms. The transform property provides a bunch of functions that can transition together for slightly more complex movement. For example, the background can “grow” or “shrink” by changing the element’s scale(). Or, in this case, just along the x-axis with scaleX().\n\n\n\nBut like I mentioned, there isn’t a way to isolate the element’s background to do that. Going from scaleX(0) to scaleX(1) scales the entire element, so that basically squishes the link — content and all — down to nothing, then stretches it back out to its natural size which is a totally different effect. Plus, it means starting with scaleX(0) which hides the whole dang thing by default making it unusable.\n\n\n\nBut a pseudo-element could work! It doesn’t matter if that gets squished or hidden because it isn’t part of the actual content. Gotta put the background on that instead and position it directly under the link.\n\n\n\na {\n  /* Keeps the pseudo-element contained to the element */\n  position: relative;\n}\n\na::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0; /* Logical equivalent to physical offsets */\n  position: absolute;\n  transform: scaleX(0); /* Hide by default */\n  z-index: -1; /* Ensures the link is stacked on top */\n}\n\n\n“Now I need ::before to change on hover.”\n\n\nI knew I could make ::before scale from 0 to 1 by chaining it to the link element’s :hover state.\n\n\n\na:hover::before {\n  transform: scaleX(1)\n}\n\n\n\nNice! I was onto something.\n\n\n\nCodePen Embed Fallback\n\n\n\nSprinkle a little transition fairy dust on it and things start to come to life.\n\n\n\na::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}\n\n\n\nCodePen Embed Fallback\n\n\n“Hmm, the transition moves in both directions.”\n\n\nAgain, this is where I sorta got stuck. Something in my head just wasn’t clicking for some reason. As per usual, I ran over to the CSS-Tricks Almanac to see what property might’ve slipped my mind.\n\n\n\nAh, yes. That would be transform-origin. That allows me to set where the transform starts, which is not totally dissimilar from setting the background-position like I tried earlier. The transform could start from the left instead of its default 50% 50% position.\n\n\n\na::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transform-origin: left;\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}\n\n\n\nYeah, like this:\n\n\n\nCodePen Embed Fallback\n\n\n\nI was already transitioning ::before to scaleX(1) on link hover. If I reversed the transform-origin from left to right at the same time, then mayyyybe the highlight goes out the opposite of how it came in when the mouse exits?\n\n\n\na:hover::before {\n  transform: scaleX(1);\n  transform-origin: right;\n}\n\n\n\n🤞\n\n\n\nCodePen Embed Fallback\n\n\n\nWhoops, backwards! Let’s swap the left and right values. 🙃\n\n\n\nCodePen Embed Fallback\n\n\n\nGorgeous. Thank you, Adam, for the inspiration!\n\nAdam Argyle’s Sick Mouse-Out CSS Hover Effect originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-07T20:15:19.000Z",
      "date_modified": "2022-01-07T20:15:19.000Z",
      "_plugin": {
        "pageFilename": "423624b5afe7614d43baa2dd42ce5b5b2d459cc0e5bdf2231f8d8b4f4bbec5de.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359823",
      "url": "https://css-tricks.com/userainbow/",
      "title": "useRainbow()",
      "summary": "I took a break from work and started some small, personal projects (toys). One of those small projects is potato.horse where I keep all of my doodles, visual short stories and jokes. Check it out!\nHowever, this post is not …\n\nuseRainbow() originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I took a break from work and started some small, personal projects (toys). One of those small projects is <a href=\"https://potato.horse\" rel=\"noopener\">potato.horse</a> where I keep all of my doodles, visual short stories and jokes. Check it out!</p>\n\n\n\n<p>However, this post is not about my break from work, other experiments, or the site itself. People seem to like one particular technique I used in the design, notably, the background effect applied that transitions between colors when the user browses the content:</p>\n\n\n\n<span id=\"more-359823\"></span>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"use-rainbow-scroll-animation-mp4\" width='500' height='317' src='https://videopress.com/embed/OBqOLlnC?cover=1&amp;muted=1&amp;persistVolume=0&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>Some asked me how this effect was implemented (including going as far as reading the minified code, which is very flattering).</p>\n\n\n\n<p>So, here&#8217;s a quick gist, followed up with some context:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export const useRainbowBg = () =>\nuseEffect(() => {\n  const cb = () => {\n    const viewportHeight = window.innerHeight\n    const contentHeight = document.body.getBoundingClientRect().height\n    const viewportsPerRotation = Math.min(\n      3,\n      contentHeight / viewportHeight\n    )\n    const from = 51\n    const progress =\n      window.scrollY / (viewportHeight * viewportsPerRotation)\n    const h = (from + 360 * progress) % 360\n\n    document.body.style.backgroundColor = `hsl(${h}deg, 100%, 50%)`\n  }\n  window.addEventListener('scroll', cb, { passive: true })\n  return () => window.removeEventListener('scroll', cb)\n})</code></pre>\n\n\n\n<p>In short, I map the <em>scroll position</em> into the <em>hue</em> in the HSL color notation. Let&#8217;s break this down.</p>\n\n\n<h3 id=\"color-models\">Color models</h3>\n\n\n<p>There are many ways of describing colors in CSS, with the two most common ones being RGB (left) and HSL (right):</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwLQKyE\" src=\"//codepen.io/anon/embed/RwLQKyE?height=700&amp;theme-id=1&amp;slug-hash=RwLQKyE&amp;default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwLQKyE\" title=\"CodePen Embed RwLQKyE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>RGB is an additive color palette. This means that mixing 100% of red, green and blue produces white, mixing 100% red and 100% green but 0% blue produces yellow, and so on. This is different from, say, using oil paint or the <a rel=\"noreferrer noopener\" href=\"https://en.wikipedia.org/wiki/CMYK_color_model\" target=\"_blank\">CMYK color model</a>, where the resulting tone would be black(-ish)<sup id=\"fn1\"><a href=\"#footnote-1\">1</a></sup>.</p>\n\n\n\n<p>We&#8217;re used to this approach because it&#8217;s easy to describe in code, but specifying colors in terms of hue, saturation and luminosity seems more natural, especially if you come from a design background, or&#8230; you know, are a human being using a human language.</p>\n\n\n\n<p>We&#8217;ve gotten used to RGB as developers, but in spoken language, using it would feel unnatural and confusing. <a rel=\"noreferrer noopener\" href=\"http://facade.photo\" target=\"_blank\">Façade</a> would be very hard to use in RGB.</p>\n\n\n\n<p>On the other hand, HSL can often be much more intuitive to work with. For instance, if I want to make a color slightly colder, I can just move the hue slider a bit towards blue and I should get closer to what I have in mind. With RGB, if we make the color appear colder by including more blue, the resulting tone will be a bit brighter as the blue component contributes to the overall lightness. This means that you&#8217;d have to lower the red and green values to compensate.</p>\n\n\n\n<p>To see how this works in practice, try maxing out the blue color in the example below.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoJQmVa\" src=\"//codepen.io/anon/embed/PoJQmVa?height=850&amp;theme-id=1&amp;slug-hash=PoJQmVa&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoJQmVa\" title=\"CodePen Embed PoJQmVa\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The first thing that stands out is that all tones are shifted towards blue and the overall brightness of the picture is increased. In the case of the effect we&#8217;re discussing, that would be undesirable.</p>\n\n\n\n<p>Now, let&#8217;s try to do the same with the HSL color circle. Drag the slider to the left, by <strong>ca. 90 degrees</strong>:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvrydNY\" src=\"//codepen.io/anon/embed/wvrydNY?height=700&amp;theme-id=1&amp;slug-hash=wvrydNY&amp;default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvrydNY\" title=\"CodePen Embed wvrydNY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>In this scenario, using HSL not only <em>turns Susan into a vampire</em>, but also maintains a similar<sup><a href=\"#footnote-2\">2</a></sup> level of brightness. And that&#8217;s exactly what I&#8217;m looking for.</p>\n\n\n\n<p>So, what I mean by saying this:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>How does this work? In short, I map the <em>scroll position</em> into the <em>hue</em> in the HSL color notation. Rafal, 2 days earlier</p></blockquote>\n\n\n\n<p>&#8230;is that that every time we detect a scroll event, I try to map it to an angle on the hue circle:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GRMQmzx\" src=\"//codepen.io/anon/embed/GRMQmzx?height=750&amp;theme-id=1&amp;slug-hash=GRMQmzx&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GRMQmzx\" title=\"CodePen Embed GRMQmzx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I didn&#8217;t want to start with red as it would make me hungry and the base yellow fits the design a bit better, so I applied a small initial shift—hence <code>const from = 51</code> set as the initial offset.</p>\n\n\n\n<p>And, as far as the basic implementation goes, that&#8217;s it!</p>\n\n\n\n<p>Now, there are three other areas of improvement.</p>\n\n\n<h3 id=\"userainbow-performance\">useRainbow performance</h3>\n\n\n<p>We&#8217;re triggering a repaint on every scroll, so I was a bit worried that older mobile devices, or even some hi-end laptops plugged in to 4k screens might not be able to maintain solid 60fps. But, I&#8217;m happy with the results so far. Using <a href=\"//developers.google.com/web/updates/2016/06/passive-event-listeners\" target=\"_blank\" rel=\"noreferrer noopener\">passive event listeners</a> provided a bit of a boost, especially on mobile.</p>\n\n\n\n<p>If I realize that performance is a problem, especially with more content down the line, I&#8217;ll probably focus on:</p>\n\n\n\n<ul><li>removing the unnecessary call to <code>getBoundingClientRect</code> on every scroll handler call, and</li><li>deferring or throttling background color changes using <code>requestAnimationFrame</code>.</li></ul>\n\n\n\n<p>I expect the first improvement to have some impact, but the benefits of the second one should be negligible.</p>\n\n\n\n<p>Measure before optimizing. Obsessing about the performance only makes sense when issues become noticeable, be it through a drop in framerate or battery impact. Your iPhone Pro has more computing power than many low-end laptops, so <a href=\"https://css-tricks.com/test-your-product-on-a-crappy-laptop/\">it&#8217;s a good idea to test on those devices too</a>. It&#8217;s good to have a crappy old Android phone exacly for that purpose if you can spare a few quid.</p>\n\n\n<h3 id=\"perceptually-uniform-color-spaces\">Perceptually uniform color spaces</h3>\n\n\n<p>You might&#8217;ve noticed that in the previous illustrations some fully saturated colors seemed darker than others. That&#8217;s because the color spaces we normally use when coding don&#8217;t reflect the way the human eye works. I&#8217;ll leave the in-depth explanation to <a rel=\"noreferrer noopener\" href=\"https://programmingdesignsystems.com/color/perceptually-uniform-color-spaces/\" target=\"_blank\">someone much more experienced than me</a>, but suffice to say (gross oversimplification alert!) that, generally, the same amount of red/green/yellow will appear brighter than blue. This means that in some cases the text on the page will be harder to read.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abLEMzW\" src=\"//codepen.io/anon/embed/abLEMzW?height=550&amp;theme-id=1&amp;slug-hash=abLEMzW&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abLEMzW\" title=\"CodePen Embed abLEMzW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p><em>For now</em>, this isn&#8217;t an issue as I&#8217;ve <em>just</em> put this thing online and titles serve a secondary purpose. But there&#8217;s a solution to the problem and it&#8217;s not overly complicated: use a perceptually uniform color space. There&#8217;s a bunch of libraries that do it out of the box, both in JavaScript/TypeScript and CSS/Sass/<code>&lt;pick your CSS flavor here&gt;</code>. <a href=\"https://www.hsluv.org\" rel=\"noopener\"><code>hsluv</code></a> seems like a good starting point.</p>\n\n\n<h3 id=\"accessiblity\">Accessiblity</h3>\n\n\n<p>Note that I&#8217;ll be focusing on the visual effect itself and not discussing the rest of the site (e.g. alt tags, document structure, etc&#8230;). I&#8217;d like to focus on contrast, color blindness and people who rely on <code><a href=\"https://css-tricks.com/revisiting-prefers-reduced-motion-the-reduced-motion-media-query/\">prefers-reduced-motion</a></code>. The site is a living document; there&#8217;s always so much to improve. For instance, contrast can be an issue in a few, non-critical places. I&#8217;m happy to accept feedback and implement it: <a href=\"https://sonnet.io/posts/hi/\" rel=\"nofollow noopener\">hit me up!</a>.</p>\n\n\n<h3 id=\"color-blindness\">color blindness</h3>\n\n\n<p>I wanted to make sure that the effect doesn&#8217;t break the site completely for people with color blindness. So I focused on the most common types: deuteranomaly and protanomaly (red-green color blindness), but also ran wider tests. I used Photoshop and <a href=\"https://github.com/oftheheadland/Colorblindly\" target=\"_blank\" rel=\"noreferrer noopener\">Colorblindly (Chrome extension)</a> for some rudimentary checks.</p>\n\n\n<h3 id=\"prefersreducedmotion\"><code>prefers-reduced-motion</code></h3>\n\n\n<blockquote class=\"wp-block-quote\"><p>The <strong><code>prefers-reduced-motion</code></strong> CSS media feature is used to detect if the user has requested that the system minimize the amount of non-essential motion it uses.</p><cite>—<a rel=\"noreferrer noopener\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\" target=\"_blank\">MDN</a></cite></blockquote>\n\n\n\n<p>This site doesn&#8217;t contain many animations (besides the <em>Little Sausage Angels</em> you&#8217;ll see if you hit &#8220;Share&#8221;), but I was wondering if people who rely on <code>prefers-reduced-motion</code> would like the background color to stay constant.</p>\n\n\n\n<p>The short answer is: I don&#8217;t know. My intuition is that rotating colors don&#8217;t really qualify as motion, but my experience and understanding of the problem is, to say the least, limited. In situations like this, I&#8217;d rather depend on user research than guesses.</p>\n\n\n\n<p>Luckily, the site had its five minutes of fame on Reddit which proved to be a decent opportunity to collect feedback. None of the users brought up an issue with the background effect so far. I&#8217;m also lucky enough to know a bunch of accessibility specialists, such as <a rel=\"noreferrer noopener\" href=\"https://twitter.com/a_sandrina_p\" target=\"_blank\">Sandrina Pereira</a>. Her suggestion was that (a) background animations definitely qualify as motion, and (b) perhaps the effect feels natural because it&#8217;s a direct result of a user interaction.</p>\n\n\n<h3 id=\"summary\">Summary</h3>\n\n\n<p>The late-90s Geocities web felt playful and weird. It was fun in an uninhibited, somewhat less performative, way. I wanted to incorporate some of this look and feel in the site. But still, I didn&#8217;t want to make it feel esoteric to the point where you&#8217;d need to up your hipsterdom-level to 9000 and browse it exclusively throught Netscape 7. All of that, while listening to the new Nirvana <em>Unplugged</em> album.</p>\n\n\n\n<p>I still wanted decent UX on mobile and desktop, and some space for easter eggs (something you can&#8217;t do when living in the strange and abusive relationship with social media we&#8217;ve grown so accustomed to).</p>\n\n\n\n<p>As a kid, I had built six websites before I even got access to the Internet for the first time. Now, after being burned out for three years, even considering changing my job, it was the first time I genuinely enjoyed coding. I forgot how much fun it was!</p>\n\n\n\n<p>Now, go out, pet your cat, and make stuff!</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>P.S. Check out <a rel=\"noreferrer noopener\" href=\"https://www.cameronsworld.net/\" target=\"_blank\">Cameron&#8217;s World</a>.</p>\n\n\n\n<p>P.P.S. The code for interactive diagrams <a href=\"https://github.com/paprikka/use-rainbow-article-examples\" rel=\"noopener\">can be found on GitHub</a>.</p>\n\n\n<h3 id=\"footnotes\">Footnotes</h3>\n\n\n<ol><li><span id=\"footnote-1\">Hence</span> the K component in CMYK meaning &#8220;black.&#8221; Using B would be confusing as it means &#8220;blue&#8221; in other color models. <a href=\"#fn1\">⮑</a></li><li><span id=\"footnote-2\">It&#8217;s</span> not perfect since the perceptual color space differs from what&#8217;s described using RGB/HSL. <a href=\"#fn2\">⮑</a></li></ol>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/userainbow/\">useRainbow()</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I took a break from work and started some small, personal projects (toys). One of those small projects is potato.horse where I keep all of my doodles, visual short stories and jokes. Check it out!\n\n\n\nHowever, this post is not about my break from work, other experiments, or the site itself. People seem to like one particular technique I used in the design, notably, the background effect applied that transitions between colors when the user browses the content:\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome asked me how this effect was implemented (including going as far as reading the minified code, which is very flattering).\n\n\n\nSo, here’s a quick gist, followed up with some context:\n\n\n\nexport const useRainbowBg = () =>\nuseEffect(() => {\n  const cb = () => {\n    const viewportHeight = window.innerHeight\n    const contentHeight = document.body.getBoundingClientRect().height\n    const viewportsPerRotation = Math.min(\n      3,\n      contentHeight / viewportHeight\n    )\n    const from = 51\n    const progress =\n      window.scrollY / (viewportHeight * viewportsPerRotation)\n    const h = (from + 360 * progress) % 360\n\n    document.body.style.backgroundColor = `hsl(${h}deg, 100%, 50%)`\n  }\n  window.addEventListener('scroll', cb, { passive: true })\n  return () => window.removeEventListener('scroll', cb)\n})\n\n\n\nIn short, I map the scroll position into the hue in the HSL color notation. Let’s break this down.\n\n\nColor models\n\n\nThere are many ways of describing colors in CSS, with the two most common ones being RGB (left) and HSL (right):\n\n\n\nCodePen Embed Fallback\n\n\n\nRGB is an additive color palette. This means that mixing 100% of red, green and blue produces white, mixing 100% red and 100% green but 0% blue produces yellow, and so on. This is different from, say, using oil paint or the CMYK color model, where the resulting tone would be black(-ish)1.\n\n\n\nWe’re used to this approach because it’s easy to describe in code, but specifying colors in terms of hue, saturation and luminosity seems more natural, especially if you come from a design background, or… you know, are a human being using a human language.\n\n\n\nWe’ve gotten used to RGB as developers, but in spoken language, using it would feel unnatural and confusing. Façade would be very hard to use in RGB.\n\n\n\nOn the other hand, HSL can often be much more intuitive to work with. For instance, if I want to make a color slightly colder, I can just move the hue slider a bit towards blue and I should get closer to what I have in mind. With RGB, if we make the color appear colder by including more blue, the resulting tone will be a bit brighter as the blue component contributes to the overall lightness. This means that you’d have to lower the red and green values to compensate.\n\n\n\nTo see how this works in practice, try maxing out the blue color in the example below.\n\n\n\nCodePen Embed Fallback\n\n\n\nThe first thing that stands out is that all tones are shifted towards blue and the overall brightness of the picture is increased. In the case of the effect we’re discussing, that would be undesirable.\n\n\n\nNow, let’s try to do the same with the HSL color circle. Drag the slider to the left, by ca. 90 degrees:\n\n\n\nCodePen Embed Fallback\n\n\n\nIn this scenario, using HSL not only turns Susan into a vampire, but also maintains a similar2 level of brightness. And that’s exactly what I’m looking for.\n\n\n\nSo, what I mean by saying this:\n\n\n\nHow does this work? In short, I map the scroll position into the hue in the HSL color notation. Rafal, 2 days earlier\n\n\n\n…is that that every time we detect a scroll event, I try to map it to an angle on the hue circle:\n\n\n\nCodePen Embed Fallback\n\n\n\nI didn’t want to start with red as it would make me hungry and the base yellow fits the design a bit better, so I applied a small initial shift—hence const from = 51 set as the initial offset.\n\n\n\nAnd, as far as the basic implementation goes, that’s it!\n\n\n\nNow, there are three other areas of improvement.\n\n\nuseRainbow performance\n\n\nWe’re triggering a repaint on every scroll, so I was a bit worried that older mobile devices, or even some hi-end laptops plugged in to 4k screens might not be able to maintain solid 60fps. But, I’m happy with the results so far. Using passive event listeners provided a bit of a boost, especially on mobile.\n\n\n\nIf I realize that performance is a problem, especially with more content down the line, I’ll probably focus on:\n\n\n\nremoving the unnecessary call to getBoundingClientRect on every scroll handler call, anddeferring or throttling background color changes using requestAnimationFrame.\n\n\n\nI expect the first improvement to have some impact, but the benefits of the second one should be negligible.\n\n\n\nMeasure before optimizing. Obsessing about the performance only makes sense when issues become noticeable, be it through a drop in framerate or battery impact. Your iPhone Pro has more computing power than many low-end laptops, so it’s a good idea to test on those devices too. It’s good to have a crappy old Android phone exacly for that purpose if you can spare a few quid.\n\n\nPerceptually uniform color spaces\n\n\nYou might’ve noticed that in the previous illustrations some fully saturated colors seemed darker than others. That’s because the color spaces we normally use when coding don’t reflect the way the human eye works. I’ll leave the in-depth explanation to someone much more experienced than me, but suffice to say (gross oversimplification alert!) that, generally, the same amount of red/green/yellow will appear brighter than blue. This means that in some cases the text on the page will be harder to read.\n\n\n\nCodePen Embed Fallback\n\n\n\nFor now, this isn’t an issue as I’ve just put this thing online and titles serve a secondary purpose. But there’s a solution to the problem and it’s not overly complicated: use a perceptually uniform color space. There’s a bunch of libraries that do it out of the box, both in JavaScript/TypeScript and CSS/Sass/<pick your CSS flavor here>. hsluv seems like a good starting point.\n\n\nAccessiblity\n\n\nNote that I’ll be focusing on the visual effect itself and not discussing the rest of the site (e.g. alt tags, document structure, etc…). I’d like to focus on contrast, color blindness and people who rely on prefers-reduced-motion. The site is a living document; there’s always so much to improve. For instance, contrast can be an issue in a few, non-critical places. I’m happy to accept feedback and implement it: hit me up!.\n\n\ncolor blindness\n\n\nI wanted to make sure that the effect doesn’t break the site completely for people with color blindness. So I focused on the most common types: deuteranomaly and protanomaly (red-green color blindness), but also ran wider tests. I used Photoshop and Colorblindly (Chrome extension) for some rudimentary checks.\n\n\nprefers-reduced-motion\n\n\nThe prefers-reduced-motion CSS media feature is used to detect if the user has requested that the system minimize the amount of non-essential motion it uses.—MDN\n\n\n\nThis site doesn’t contain many animations (besides the Little Sausage Angels you’ll see if you hit “Share”), but I was wondering if people who rely on prefers-reduced-motion would like the background color to stay constant.\n\n\n\nThe short answer is: I don’t know. My intuition is that rotating colors don’t really qualify as motion, but my experience and understanding of the problem is, to say the least, limited. In situations like this, I’d rather depend on user research than guesses.\n\n\n\nLuckily, the site had its five minutes of fame on Reddit which proved to be a decent opportunity to collect feedback. None of the users brought up an issue with the background effect so far. I’m also lucky enough to know a bunch of accessibility specialists, such as Sandrina Pereira. Her suggestion was that (a) background animations definitely qualify as motion, and (b) perhaps the effect feels natural because it’s a direct result of a user interaction.\n\n\nSummary\n\n\nThe late-90s Geocities web felt playful and weird. It was fun in an uninhibited, somewhat less performative, way. I wanted to incorporate some of this look and feel in the site. But still, I didn’t want to make it feel esoteric to the point where you’d need to up your hipsterdom-level to 9000 and browse it exclusively throught Netscape 7. All of that, while listening to the new Nirvana Unplugged album.\n\n\n\nI still wanted decent UX on mobile and desktop, and some space for easter eggs (something you can’t do when living in the strange and abusive relationship with social media we’ve grown so accustomed to).\n\n\n\nAs a kid, I had built six websites before I even got access to the Internet for the first time. Now, after being burned out for three years, even considering changing my job, it was the first time I genuinely enjoyed coding. I forgot how much fun it was!\n\n\n\nNow, go out, pet your cat, and make stuff!\n\n\n\n\n\n\n\nP.S. Check out Cameron’s World.\n\n\n\nP.P.S. The code for interactive diagrams can be found on GitHub.\n\n\nFootnotes\n\n\nHence the K component in CMYK meaning “black.” Using B would be confusing as it means “blue” in other color models. ⮑It’s not perfect since the perceptual color space differs from what’s described using RGB/HSL. ⮑\n\nuseRainbow() originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-07T14:59:04.000Z",
      "date_modified": "2022-01-07T14:59:04.000Z",
      "_plugin": {
        "pageFilename": "de046724b3ee498ac2d90f88778a555dd3faddc0be31c34d4c060d6dd25e14fd.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360320",
      "url": "https://css-tricks.com/a-new-container-query-polyfill-that-just-works/",
      "title": "A New Container Query Polyfill That Just Works",
      "summary": "There is an easy-to-use CSS container query polyfill now. You essentially conditionally load it and forget about it. Then write spec-compliant container queries code.\n\nA New Container Query Polyfill That Just Works originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>There is now <a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill\" rel=\"noopener\">a polyfill</a> for <a href=\"https://css-tricks.com/a-cornucopia-of-container-queries/\">Container Queries</a> that behaves as perfectly as a polyfill should:</p>\n\n\n\n<ol><li>You conditionally load it when you detect the browser doesn&#8217;t support Container Queries.</li><li>You write CSS as you normally would, including current-spec-compliant Container Queries syntax code.</li><li>It just works.</li></ol>\n\n\n\n<p>It&#8217;s pretty great to have a container query polyfill that is this easy to use and from Chrome itself, the first-movers as far as early test implementations. Looks like <a href=\"https://twitter.com/dassurma?lang=en\" rel=\"noopener\">Surma</a> put it together — thanks Surma! </p>\n\n\n\n<span id=\"more-360320\"></span>\n\n\n\n<p class=\"is-style-explanation\">There was a Container Query polyfill from Jonathan Neal called <a href=\"https://github.com/jsxtools/cqfill\" rel=\"noopener\">cqfill</a> that predates this. I&#8217;m not sure if it&#8217;s officially deprecated, but it required extra non-spec CSS to work and PostCSS processing, so I&#8217;d consider it deprecated in favor of this newer polyfill.</p>\n\n\n\n<p>Loading the polyfill is like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Support Test\nconst supportsContainerQueries = \"container\" in document.documentElement.style;\n\n// Conditional Import\nif (!supportsContainerQueries) {\n  import(\"https://cdn.skypack.dev/container-query-polyfill\");\n}</code></pre>\n\n\n\n<p>You can pull it from npm or use as a <code>&lt;script&gt;</code>, but this way seems best to me to keep things light and easy.</p>\n\n\n\n<p>Then you&#8217;re free to use the syntax for a container query in CSS. Say you have a weather widget in HTML. You&#8217;ll need an extra wrapper element for your queries. That&#8217;s just the rule: <em>you can&#8217;t query the thing you style</em>. </p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"weather-wrap\">\n  &lt;dl class=\"weather\">\n    &lt;div>\n      &lt;dt>Sunday&lt;/dt>\n      &lt;dd>\n        &lt;b>26°&lt;/b> 7°\n      &lt;/dd>\n    &lt;/div>\n    &lt;div>\n      &lt;dt>Monday&lt;/dt>\n      &lt;dd>\n        &lt;b>34°&lt;/b> 11°\n      &lt;/dd>\n    &lt;/div>\n    &lt;!-- etc -->\n  &lt;/dl>\n&lt;/div></code></pre>\n\n\n\n<p>The wrapper is instantiated as a container:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"2\"><code markup=\"tt\">.weather-wrap {\n  container: inline-size / weather-wrapper;\n  /* Shorthand for: */\n  /* container-type: inline-size; */\n  /* container-name: weather-wrapper; */\n\n  /* For quick testing, do this to get a resize handle on desktop: */\n  /* resize: both; */\n  /* overflow: hidden; */\n}</code></pre>\n\n\n\n<p>Then you write any global styling for that component, as well as container query scoped styles:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4\"><code markup=\"tt\">.weather {\n  display: flex;\n}\n@container weather-wrapper size(max-width: 700px) {\n  .weather {\n    flex-direction: column;\n  }\n}</code></pre>\n\n\n<h3 id=\"container-queries-polyfill-example\">Container Queries polyfill example</h3>\n\n\n<p>Here&#8217;s that slightly more fleshed-out demo of the Container Query polyfill using an actual weather widget:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLzKavz\" src=\"//codepen.io/anon/embed/yLzKavz?height=650&amp;theme-id=1&amp;slug-hash=yLzKavz&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLzKavz\" title=\"CodePen Embed yLzKavz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I first saw this <a href=\"https://www.bram.us/2021/11/26/a-first-look-at-container-query-polyfill-a-polyfill-for-css-container-queries/\" rel=\"noopener\">over on Bramus&#8217; blog</a>, and he&#8217;s got a classic card demo going with this Container Query polyfill. Scroll up and down. You&#8217;ll see a row of bear cards at the top (if your browser window is wide enough), and then similar bear cards in different layout positions below that change into nicer formats when they can, based on the container query.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYxNpeE\" src=\"//codepen.io/anon/embed/LYxNpeE?height=850&amp;theme-id=1&amp;slug-hash=LYxNpeE&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYxNpeE\" title=\"CodePen Embed LYxNpeE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"container-query-polyfill-browser-support\">Container Query polyfill browser support</h3>\n\n\n<p>The polyfill <a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill\" rel=\"noopener\">docs</a> say:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>The polyfill relies on&nbsp;<a href=\"https://caniuse.com/resizeobserver\" rel=\"noopener\"><code>ResizeObserver</code></a>,&nbsp;<a href=\"https://caniuse.com/mutationobserver\" rel=\"noopener\"><code>MutationObserver</code></a>&nbsp;and&nbsp;<a href=\"https://caniuse.com/css-matches-pseudo\" rel=\"noopener\"><code>:is()</code></a>. Therefore, it should work in all modern browsers, specifically Chrome/Edge 88+, Firefox 78+ and Safari 14+.</p><p><a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill#feature-support--limitations\" rel=\"noopener\"></a></p></blockquote>\n\n\n\n<p>There are all sorts of other minor little caveats covered in those docs, including what it does and doesn&#8217;t support. Seems like mostly niche stuff to me — the main/typical use cases are covered.</p>\n\n\n<h3 id=\"a-game-changer\">A game changer?</h3>\n\n\n<p>As I write, we&#8217;ve seen behind-flag support for Container Queries in Chrome, and it is an official spec draft now:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\nhttps://twitter.com/TerribleMia/status/1468632950212341770\n</div></figure>\n\n\n\n<p>That&#8217;s extremely exciting and points heavily toward browsers actually shipping with Container Queries, even if the syntax changes a bit on the way (it already has a number of times). But, of course, we have no idea if/when Container Queries do ship — and when that magical threshold is crossed, we also don&#8217;t know where we can use them without much worry, like we can with flexbox and grid now.</p>\n\n\n\n<p>That &#8220;just use it&#8221; date is probably a decent ways off, but if you&#8217;re into the idea of polyfilling and being careful with progressive enhancement, I&#8217;d say the date for using Container Queries could be right now-ish. Looks to me like the polyfill script comes across the wire at 2.8kb, so it&#8217;s fairly trivial in size for something so important. </p>\n\n\n\n<p>I suspect this polyfill will skyrocket usage of Container Queries in this coming year.</p>\n\n\n<h3 id=\"fouc\">FOUC?</h3>\n\n\n<p>The fact that your styles only correctly apply after a JavaScript file is downloaded and executed puts sites into Flash of Unstyled Content (FOUC) territory. <a href=\"https://cln.sh/k2jDfJ\" rel=\"noopener\">Here&#8217;s a video recording</a> where I can see it on my own demo. I&#8217;m not sure there is a way around this other than intentionally delaying rendering, which is generally considered a no-no. Similar to loading web fonts, FOUC is probably a good thing as it means your content is never hidden or delayed, even if the shifts aren&#8217;t ideal. The FOUC should go away once browser support lands and the polyfill stops loading at all.</p>\n\n\n\n<p>Have fun polyfilling container queries! I&#8217;d love to see more demos  of it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1316\" height=\"1445\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=1316%2C1445&#038;ssl=1\" alt=\"GitHub Repo for the Container Query Polyfill\" class=\"wp-image-360329\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?w=1316&amp;ssl=1 1316w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=273%2C300&amp;ssl=1 273w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=933%2C1024&amp;ssl=1 933w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=768%2C843&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=1000%2C1098&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-new-container-query-polyfill-that-just-works/\">A New Container Query Polyfill That Just Works</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "There is now a polyfill for Container Queries that behaves as perfectly as a polyfill should:\n\n\n\nYou conditionally load it when you detect the browser doesn’t support Container Queries.You write CSS as you normally would, including current-spec-compliant Container Queries syntax code.It just works.\n\n\n\nIt’s pretty great to have a container query polyfill that is this easy to use and from Chrome itself, the first-movers as far as early test implementations. Looks like Surma put it together — thanks Surma! \n\n\n\n\n\n\n\nThere was a Container Query polyfill from Jonathan Neal called cqfill that predates this. I’m not sure if it’s officially deprecated, but it required extra non-spec CSS to work and PostCSS processing, so I’d consider it deprecated in favor of this newer polyfill.\n\n\n\nLoading the polyfill is like this:\n\n\n\n// Support Test\nconst supportsContainerQueries = \"container\" in document.documentElement.style;\n\n// Conditional Import\nif (!supportsContainerQueries) {\n  import(\"https://cdn.skypack.dev/container-query-polyfill\");\n}\n\n\n\nYou can pull it from npm or use as a <script>, but this way seems best to me to keep things light and easy.\n\n\n\nThen you’re free to use the syntax for a container query in CSS. Say you have a weather widget in HTML. You’ll need an extra wrapper element for your queries. That’s just the rule: you can’t query the thing you style. \n\n\n\n<div class=\"weather-wrap\">\n  <dl class=\"weather\">\n    <div>\n      <dt>Sunday</dt>\n      <dd>\n        <b>26°</b> 7°\n      </dd>\n    </div>\n    <div>\n      <dt>Monday</dt>\n      <dd>\n        <b>34°</b> 11°\n      </dd>\n    </div>\n    <!-- etc -->\n  </dl>\n</div>\n\n\n\nThe wrapper is instantiated as a container:\n\n\n\n.weather-wrap {\n  container: inline-size / weather-wrapper;\n  /* Shorthand for: */\n  /* container-type: inline-size; */\n  /* container-name: weather-wrapper; */\n\n  /* For quick testing, do this to get a resize handle on desktop: */\n  /* resize: both; */\n  /* overflow: hidden; */\n}\n\n\n\nThen you write any global styling for that component, as well as container query scoped styles:\n\n\n\n.weather {\n  display: flex;\n}\n@container weather-wrapper size(max-width: 700px) {\n  .weather {\n    flex-direction: column;\n  }\n}\n\n\nContainer Queries polyfill example\n\n\nHere’s that slightly more fleshed-out demo of the Container Query polyfill using an actual weather widget:\n\n\n\nCodePen Embed Fallback\n\n\n\nI first saw this over on Bramus’ blog, and he’s got a classic card demo going with this Container Query polyfill. Scroll up and down. You’ll see a row of bear cards at the top (if your browser window is wide enough), and then similar bear cards in different layout positions below that change into nicer formats when they can, based on the container query.\n\n\n\nCodePen Embed Fallback\n\n\nContainer Query polyfill browser support\n\n\nThe polyfill docs say:\n\n\n\nThe polyfill relies on ResizeObserver, MutationObserver and :is(). Therefore, it should work in all modern browsers, specifically Chrome/Edge 88+, Firefox 78+ and Safari 14+.\n\n\n\nThere are all sorts of other minor little caveats covered in those docs, including what it does and doesn’t support. Seems like mostly niche stuff to me — the main/typical use cases are covered.\n\n\nA game changer?\n\n\nAs I write, we’ve seen behind-flag support for Container Queries in Chrome, and it is an official spec draft now:\n\n\n\n\nhttps://twitter.com/TerribleMia/status/1468632950212341770\n\n\n\n\nThat’s extremely exciting and points heavily toward browsers actually shipping with Container Queries, even if the syntax changes a bit on the way (it already has a number of times). But, of course, we have no idea if/when Container Queries do ship — and when that magical threshold is crossed, we also don’t know where we can use them without much worry, like we can with flexbox and grid now.\n\n\n\nThat “just use it” date is probably a decent ways off, but if you’re into the idea of polyfilling and being careful with progressive enhancement, I’d say the date for using Container Queries could be right now-ish. Looks to me like the polyfill script comes across the wire at 2.8kb, so it’s fairly trivial in size for something so important. \n\n\n\nI suspect this polyfill will skyrocket usage of Container Queries in this coming year.\n\n\nFOUC?\n\n\nThe fact that your styles only correctly apply after a JavaScript file is downloaded and executed puts sites into Flash of Unstyled Content (FOUC) territory. Here’s a video recording where I can see it on my own demo. I’m not sure there is a way around this other than intentionally delaying rendering, which is generally considered a no-no. Similar to loading web fonts, FOUC is probably a good thing as it means your content is never hidden or delayed, even if the shifts aren’t ideal. The FOUC should go away once browser support lands and the polyfill stops loading at all.\n\n\n\nHave fun polyfilling container queries! I’d love to see more demos  of it.\n\n\n\n\n\n\n\n\n\nA New Container Query Polyfill That Just Works originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-06T22:28:46.000Z",
      "date_modified": "2022-01-06T22:28:46.000Z",
      "_plugin": {
        "pageFilename": "4e07bb563a335f8238d683050129d3671ebccd8f9d5adc5a556c2445b2635c52.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=358917",
      "url": "https://css-tricks.com/fixed-background-effect/",
      "title": "The Search For a Fixed Background Effect With Inline Images",
      "summary": "I was working on a client project a few days ago and wanted to create a certain effect on an <img>. See, background images can do the effect I was looking for somewhat easily with background-attachment: fixed;. With …\n\nThe Search For a Fixed Background Effect With Inline Images originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I was working on a client project a few days ago and wanted to create a certain effect on an <code>&lt;img&gt;</code>. See, background images can do the effect I was looking for somewhat easily with <code>background-attachment: fixed;</code>. With that in place, a background image stays in place—even when the page scrolls. It isn’t used all that often, so the effect can look unusual and striking, especially when used sparingly.</p>\n\n\n\n<span id=\"more-358917\"></span>\n\n\n<h2 class=\"simpletoc-title\">Table of Contents</h2><ul class=\"simpletoc\">\n<li>\n<a  href=\"#why-use-ltimggt-instead-of-backgroundimage\">Why use &lt;img&gt; instead of background-image?</a></li><li>\n<a  href=\"#1-using-css-backgroundimage\">1. Using CSS background-image</a></li><li>\n<a  href=\"#2-using-the-clippath-trick-on-an-inline-image\">2. Using the clip-path trick on an inline image</a></li><li>\n<a  href=\"#is-there-something-better\">Is there something better?</a></li></ul>\n\n\n<p>It took me some time to figure out how to achieve the same effect only with an inline image, rather than a CSS background image. This is a video of the effect in action:</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"the20mysterious20css20property-mp4\" width='500' height='313' src='https://videopress.com/embed/2ciWn57o?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p class=\"is-style-explanation\">The exact code for the above demo is <a href=\"https://github.com/lazaralex98/nate-davis/blob/main/components/HomePage/BenefitsWithAttachementEffect.jsx\" rel=\"noopener\">available in this Git repo</a>. Just note that it’s a Next.js project. We’ll get to a CodePen example with raw HTML in a bit.</p>\n\n\n<h3 id=\"why-use-ltimggt-instead-of-backgroundimage\">Why use <code>&lt;img&gt;</code> instead of <code>background-image</code>?</h3>\n\n\n<p>The are a number of reasons I wanted this for my project:</p>\n\n\n\n<ul><li>It’s easier to lazy load (e.g. <code>&lt;img loading=\"lazy\"… &gt;</code>.</li><li>It provides better SEO (not to mention accessibility), thanks to <code>alt</code> text.</li><li>It’s possible to <a href=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/#using-srcset\" data-type=\"URL\" data-id=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/#using-srcset\">use <code>srcset</code>/<code>sizes</code></a> to improve the loading performance.</li><li>It’s possible to <a href=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/#using-picture\">use the <code>&lt;picture&gt;</code> tag</a> to pick the best image size and format for the user’s browser.</li><li>It allows users to download save the image (without resorting to DevTools).</li></ul>\n\n\n\n<p>Overall, it’s better to use the image tag where you can, particularly if the image could be considered content and not decoration. So, I wound up landing on a technique that uses CSS <code>clip-path</code>. We’ll get to that in a moment, right after we first look at the <code>background-image</code> method for a nice side-by-side comparison of both approaches.</p>\n\n\n<h3 id=\"1-using-css-backgroundimage\">1. Using CSS <code>background-image</code></h3>\n\n\n<p>This is the “original” way to pull off a fixed scrolling effect. Here’s the CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero-section {\n  background-image: url(\"nice_bg_image.jpg\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center; \n  background-attachment: fixed;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLoWoeR\" src=\"//codepen.io/anon/embed/yLoWoeR?height=550&amp;theme-id=1&amp;slug-hash=yLoWoeR&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLoWoeR\" title=\"CodePen Embed yLoWoeR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But as we just saw, this approach isn’t ideal for some situations because it relies on the CSS <code>background-image</code> property to call and load the image. That means the image is technically not considered content—and thus unrecognized by screen readers. If we’re working with an image that is part of the content, then we really ought to make it accessible so it is consumed like content rather than decoration.</p>\n\n\n\n<p>Otherwise, this technique works well, but only <em>if the image spans the whole width of the viewport and/or is centered</em>. If you have an image on the right or left side of the page like the example, you’ll run into a whole number of positioning issues because <code>background-position</code> is relative to the center of the viewport.</p>\n\n\n\n<p>Fixing it requires a few media queries to make sure it is positioned properly on all devices.</p>\n\n\n<h3 id=\"2-using-the-clippath-trick-on-an-inline-image\">2. Using the <code>clip-path</code> trick on an inline image</h3>\n\n\n<p><a href=\"https://stackoverflow.com/questions/33550450/how-to-use-css-background-attachment-in-img-tag/68466386#68466386\" rel=\"noopener\">Someone on StackOverflow</a> shared this <code>clip-path</code> trick and it gets the job done well. You also get to keep using the<code>&lt;img&gt;</code> tag, which, as we covered above, might be advantageous in some circumstances, especially where an image is part of the content rather than pure decoration.</p>\n\n\n\n<p>Here’s the trick:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4,8,9\"><code markup=\"tt\">.image-container {\n  position: relative;\n  height: 200px;\n  clip-path: inset(0);\n}\n\n.image {\n  object-fit: cover;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}</code></pre>\n\n\n\n<p>Check it out in action:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWvYVwG\" src=\"//codepen.io/anon/embed/NWvYVwG?height=450&amp;theme-id=1&amp;slug-hash=NWvYVwG&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWvYVwG\" title=\"CodePen Embed NWvYVwG\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now, before we rush out and plaster this snippet everywhere, it has its own set of downsides. For example, the code feels <em>a bit lengthy</em> to me for such a simple effect. But, even more important is the fact that working with <code>clip-path</code> comes with some implications as well. For one, I can’t just slap a <code>border-radius: 10px;</code> in there like I did in the earlier example to round the image’s corners. That won’t work—it requires making rounded corners from the clipping path itself.</p>\n\n\n\n<p>Another example: I don’t know how to position the image <em>within</em> the <code>clip-path</code>. Again, this might be a matter of knowing <code>clip-path</code> really well and drawing it where you need to, or cropping the image itself ahead of time as needed.</p>\n\n\n<h3 id=\"is-there-something-better\">Is there something better?</h3>\n\n\n<p>Personally, I gave up on using the fixed scrolling effect on inline images and am back to using a CSS background image—which I know is kind of limiting.</p>\n\n\n\n<p>Have you ever tried pulling this off, particularly with an inline image, and managed it well? I’d love to hear!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/fixed-background-effect/\">The Search For a Fixed Background Effect With Inline Images</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I was working on a client project a few days ago and wanted to create a certain effect on an <img>. See, background images can do the effect I was looking for somewhat easily with background-attachment: fixed;. With that in place, a background image stays in place—even when the page scrolls. It isn’t used all that often, so the effect can look unusual and striking, especially when used sparingly.\n\n\n\n\n\n\nTable of Contents\n\nWhy use <img> instead of background-image?\n1. Using CSS background-image\n2. Using the clip-path trick on an inline image\nIs there something better?\n\n\nIt took me some time to figure out how to achieve the same effect only with an inline image, rather than a CSS background image. This is a video of the effect in action:\n\n\n\n\n\n\n\n\n\nThe exact code for the above demo is available in this Git repo. Just note that it’s a Next.js project. We’ll get to a CodePen example with raw HTML in a bit.\n\n\nWhy use <img> instead of background-image?\n\n\nThe are a number of reasons I wanted this for my project:\n\n\n\nIt’s easier to lazy load (e.g. <img loading=\"lazy\"… >.It provides better SEO (not to mention accessibility), thanks to alt text.It’s possible to use srcset/sizes to improve the loading performance.It’s possible to use the <picture> tag to pick the best image size and format for the user’s browser.It allows users to download save the image (without resorting to DevTools).\n\n\n\nOverall, it’s better to use the image tag where you can, particularly if the image could be considered content and not decoration. So, I wound up landing on a technique that uses CSS clip-path. We’ll get to that in a moment, right after we first look at the background-image method for a nice side-by-side comparison of both approaches.\n\n\n1. Using CSS background-image\n\n\nThis is the “original” way to pull off a fixed scrolling effect. Here’s the CSS:\n\n\n\n.hero-section {\n  background-image: url(\"nice_bg_image.jpg\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center; \n  background-attachment: fixed;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nBut as we just saw, this approach isn’t ideal for some situations because it relies on the CSS background-image property to call and load the image. That means the image is technically not considered content—and thus unrecognized by screen readers. If we’re working with an image that is part of the content, then we really ought to make it accessible so it is consumed like content rather than decoration.\n\n\n\nOtherwise, this technique works well, but only if the image spans the whole width of the viewport and/or is centered. If you have an image on the right or left side of the page like the example, you’ll run into a whole number of positioning issues because background-position is relative to the center of the viewport.\n\n\n\nFixing it requires a few media queries to make sure it is positioned properly on all devices.\n\n\n2. Using the clip-path trick on an inline image\n\n\nSomeone on StackOverflow shared this clip-path trick and it gets the job done well. You also get to keep using the<img> tag, which, as we covered above, might be advantageous in some circumstances, especially where an image is part of the content rather than pure decoration.\n\n\n\nHere’s the trick:\n\n\n\n.image-container {\n  position: relative;\n  height: 200px;\n  clip-path: inset(0);\n}\n\n.image {\n  object-fit: cover;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n\n\n\nCheck it out in action:\n\n\n\nCodePen Embed Fallback\n\n\n\nNow, before we rush out and plaster this snippet everywhere, it has its own set of downsides. For example, the code feels a bit lengthy to me for such a simple effect. But, even more important is the fact that working with clip-path comes with some implications as well. For one, I can’t just slap a border-radius: 10px; in there like I did in the earlier example to round the image’s corners. That won’t work—it requires making rounded corners from the clipping path itself.\n\n\n\nAnother example: I don’t know how to position the image within the clip-path. Again, this might be a matter of knowing clip-path really well and drawing it where you need to, or cropping the image itself ahead of time as needed.\n\n\nIs there something better?\n\n\nPersonally, I gave up on using the fixed scrolling effect on inline images and am back to using a CSS background image—which I know is kind of limiting.\n\n\n\nHave you ever tried pulling this off, particularly with an inline image, and managed it well? I’d love to hear!\n\nThe Search For a Fixed Background Effect With Inline Images originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-06T15:58:55.000Z",
      "date_modified": "2022-01-06T15:58:55.000Z",
      "_plugin": {
        "pageFilename": "d9f6a133a48dc5fbb33cdde55c552a6448143c34d9637b6c397398a65bdc6872.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359736",
      "url": "https://css-tricks.com/notes-on-josh-comeaus-custom-css-reset/",
      "title": "Notes on Josh Comeau’s Custom CSS Reset",
      "summary": "We recently talked with Elad Shechter on his new CSS reset, and shortly after that Josh Comeau blogged his. \nWe’re in something of a new era of CSS resets where… you kind of don’t need one? There isn’t …\n\nNotes on Josh Comeau’s Custom CSS Reset originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>We recently talked with Elad Shechter on <a href=\"https://css-tricks.com/an-interview-with-elad-shechter-on-the-new-css-reset/\">his new CSS reset</a>, and shortly after that Josh Comeau <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/\" rel=\"noopener\">blogged his</a>. </p>\n\n\n\n<p>We&#8217;re in something of a new era of CSS resets where&#8230; you kind of don&#8217;t need one? There isn&#8217;t <em>that</em> many major differences between browsers on default styling, and by the time you&#8217;re off and running styling stuff, you&#8217;ve probably steamrolled things into place. And so perhaps &#8220;modern&#8221; CSS resets are more of a collection of opinionated default styles that do useful things that you want on all your new projects because, well, that&#8217;s how you roll. </p>\n\n\n\n<span id=\"more-359736\"></span>\n\n\n\n<p>Looking through Josh&#8217;s choices, that&#8217;s what it seems like to me: a collection of things that aren&#8217;t particularly opinionated about design, but <em>assist</em> the design by being things that pretty much any project will want.</p>\n\n\n\n<p>I&#8217;m gonna <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/#the-css-reset\" rel=\"noopener\">go through it</a> and toss out &#x1f525; flamin&#8217; hot opinions. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">*, *::before, *::after {\n  box-sizing: border-box;\n}</code></pre>\n\n\n\n<p>Heck yes. We used to consider this <a href=\"https://css-tricks.com/international-box-sizing-awareness-day/\">a global holiday</a> &#8217;round here. Although, with more and more layout being handled by grid and flexbox, I&#8217;m feeling like this is slightly less useful these days. When you&#8217;re setting up a layout with <code>fr</code> units and flexin&#8217; stuff, the <code>box-sizing</code> model doesn&#8217;t come into play all that much, even when <code>padding</code> and <code>border</code> are involved. But hey, I still prefer it to be in place. I do think if it goes into a CSS reset it should <a href=\"https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/\">use the inheritance model</a> though, as it&#8217;s easier to undo on a component that way. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">* {\n  margin: 0;\n}</code></pre>\n\n\n\n<p>This is basically why the CSS-Tricks logo &#8220;star&#8221; exists. I used to love this little snippet in my CSS resets. There was a period where it started to feel heavy-handed, but I think I&#8217;m back to liking it. I like how explicit you have to be when applying any margin at all. Personally, I&#8217;d rock <code>padding: 0;</code> too, as list elements tend to have some padding pushing them around. If you&#8217;re nuking spacing stuff, may as well nuke it all.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html, body {\n  height: 100%;\n}</code></pre>\n\n\n\n<p>Probably a good plan. Josh says &#8220;Allow percentage-based heights in the application,&#8221; which I can&#8217;t say comes up much in my day-today, but what it does is stuff like the body background not filling the space the way you might expect it to.</p>\n\n\n\n<p>Too bad <code>body { height: 100vh; }</code> isn&#8217;t enough here, but I feel like that&#8217;s not as reliable for some reason I can&#8217;t think of right now. <a href=\"https://css-tricks.com/css-fix-for-100vh-in-mobile-webkit/\">Maybe something to do with the footer navigation in iOS Safari?</a></p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}</code></pre>\n\n\n\n<p>I can&#8217;t get into the <code>-webkit-font-smoothing: antialiased;</code> thing. I think it tends to make type dramatically thin and I don&#8217;t love it. I don&#8217;t mind it as a tool, but I wouldn&#8217;t globally apply it on all my projects. </p>\n\n\n\n<p>I also generally like to put global typographic <em>sizing</em> stuff on the <code>html</code> selector instead, just because the &#8220;root&#8221; part of <code>rem</code> implies the <code>&lt;html&gt;</code> element — not the <code>&lt;body&gt;</code> — and I like sizing stuff in <code>rem</code> and then adjusting the root <code>font-size</code> at the root level in media queries.</p>\n\n\n\n<p>That <code>1.5</code> value feels like a good default <code>line-height</code> (more of a 1.4 guy myself, but I&#8217;d rather go up than down). But as soon as it&#8217;s set, I feel magnetically pulled into reducing it for heading elements where it&#8217;s <em>always</em> too much. That could happen via <code>h1, h2, h3</code> kinda selectors (maybe <code>h4</code>&#8211;<code>h6</code> don&#8217;t need it), but Josh has <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/#digit-tweaking-line-height\" rel=\"noopener\">some CSS trickery at work</a> with this snippet that didn&#8217;t make it into the final reset:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">* {\n  line-height: calc(1em + 0.5rem);\n}</code></pre>\n\n\n\n<p>That&#8217;s clever in how the <code>0.5rem</code> goes a long way for small type, but isn&#8217;t as big of an influence for large type. I could see trying that on a greenfield project. Prior art here is by Jesús Ricarte in <a href=\"https://kittygiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/\" rel=\"noopener\">&#8220;Using calc to figure out optimal line-height.&#8221;</a> </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">img, picture, video, canvas, svg {\n  display: block;\n  max-width: 100%;\n}</code></pre>\n\n\n\n<p>Good move for a CSS reset. The <code>block</code> display type there prevents those annoying <code>line-height</code> gaps that always kill me. And you almost never want any of these media blocks to be wider than the parent. I somehow don&#8217;t think <code>picture</code> is necessary, though, as it&#8217;s not really a style-able block? Could be wrong. I&#8217;d probably toss <code>iframe</code> and <code>object</code> in there as well.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">p, h1, h2, h3, h4, h5, h6 {\n  overflow-wrap: break-word;\n}</code></pre>\n\n\n\n<p>Good move for sure. It&#8217;s bad news when a long word (<a href=\"https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/\">like a URL</a>) forces an element wide and borks a layout. I tend to chuck this on something — like <code>article</code> or <code>.text-content</code> or something — and let it cascade into that whole area (which would also catch text that happens to be contained in an improper element), but I don&#8217;t mind seeing it on specific text elements.</p>\n\n\n\n<p>If doing that, you probably wanna chuck <code>li, dl, dt, blockquote</code> on that chain. Despite having attempted to research this several times (<a href=\"https://codepen.io/chriscoyier/pen/qoLLpN\" rel=\"noopener\">here&#8217;s a playground</a>), I still don&#8217;t 100% know what the right cocktail of line-wrapping properties is best to use. There is <code>word-break: break-word;</code> that I think is basically the same thing. And I think it&#8217;s generally best to use <code>hyphens: auto;</code> too&#8230; right??</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#root, #__next {\n  isolation: isolate;\n}</code></pre>\n\n\n\n<p>I don&#8217;t quite understand what&#8217;s happening here. I get that this is a React/Next thing where you mount the app to these roots, and I get that it makes a stacking context, I just don&#8217;t get why it&#8217;s specifically useful to <em>have</em> that stacking context at this level. At the same time, I also don&#8217;t see any particular problem with it.</p>\n\n\n\n<p>All in all — pretty cool! I always enjoy seeing what other people use (and go so far as to suggest) for CSS resets.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/notes-on-josh-comeaus-custom-css-reset/\">Notes on Josh Comeau&#8217;s Custom CSS Reset</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "We recently talked with Elad Shechter on his new CSS reset, and shortly after that Josh Comeau blogged his. \n\n\n\nWe’re in something of a new era of CSS resets where… you kind of don’t need one? There isn’t that many major differences between browsers on default styling, and by the time you’re off and running styling stuff, you’ve probably steamrolled things into place. And so perhaps “modern” CSS resets are more of a collection of opinionated default styles that do useful things that you want on all your new projects because, well, that’s how you roll. \n\n\n\n\n\n\n\nLooking through Josh’s choices, that’s what it seems like to me: a collection of things that aren’t particularly opinionated about design, but assist the design by being things that pretty much any project will want.\n\n\n\nI’m gonna go through it and toss out 🔥 flamin’ hot opinions. \n\n\n\n*, *::before, *::after {\n  box-sizing: border-box;\n}\n\n\n\nHeck yes. We used to consider this a global holiday ’round here. Although, with more and more layout being handled by grid and flexbox, I’m feeling like this is slightly less useful these days. When you’re setting up a layout with fr units and flexin’ stuff, the box-sizing model doesn’t come into play all that much, even when padding and border are involved. But hey, I still prefer it to be in place. I do think if it goes into a CSS reset it should use the inheritance model though, as it’s easier to undo on a component that way. \n\n\n\n* {\n  margin: 0;\n}\n\n\n\nThis is basically why the CSS-Tricks logo “star” exists. I used to love this little snippet in my CSS resets. There was a period where it started to feel heavy-handed, but I think I’m back to liking it. I like how explicit you have to be when applying any margin at all. Personally, I’d rock padding: 0; too, as list elements tend to have some padding pushing them around. If you’re nuking spacing stuff, may as well nuke it all.\n\n\n\nhtml, body {\n  height: 100%;\n}\n\n\n\nProbably a good plan. Josh says “Allow percentage-based heights in the application,” which I can’t say comes up much in my day-today, but what it does is stuff like the body background not filling the space the way you might expect it to.\n\n\n\nToo bad body { height: 100vh; } isn’t enough here, but I feel like that’s not as reliable for some reason I can’t think of right now. Maybe something to do with the footer navigation in iOS Safari?\n\n\n\nbody {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}\n\n\n\nI can’t get into the -webkit-font-smoothing: antialiased; thing. I think it tends to make type dramatically thin and I don’t love it. I don’t mind it as a tool, but I wouldn’t globally apply it on all my projects. \n\n\n\nI also generally like to put global typographic sizing stuff on the html selector instead, just because the “root” part of rem implies the <html> element — not the <body> — and I like sizing stuff in rem and then adjusting the root font-size at the root level in media queries.\n\n\n\nThat 1.5 value feels like a good default line-height (more of a 1.4 guy myself, but I’d rather go up than down). But as soon as it’s set, I feel magnetically pulled into reducing it for heading elements where it’s always too much. That could happen via h1, h2, h3 kinda selectors (maybe h4–h6 don’t need it), but Josh has some CSS trickery at work with this snippet that didn’t make it into the final reset:\n\n\n\n* {\n  line-height: calc(1em + 0.5rem);\n}\n\n\n\nThat’s clever in how the 0.5rem goes a long way for small type, but isn’t as big of an influence for large type. I could see trying that on a greenfield project. Prior art here is by Jesús Ricarte in “Using calc to figure out optimal line-height.” \n\n\n\nimg, picture, video, canvas, svg {\n  display: block;\n  max-width: 100%;\n}\n\n\n\nGood move for a CSS reset. The block display type there prevents those annoying line-height gaps that always kill me. And you almost never want any of these media blocks to be wider than the parent. I somehow don’t think picture is necessary, though, as it’s not really a style-able block? Could be wrong. I’d probably toss iframe and object in there as well.\n\n\n\np, h1, h2, h3, h4, h5, h6 {\n  overflow-wrap: break-word;\n}\n\n\n\nGood move for sure. It’s bad news when a long word (like a URL) forces an element wide and borks a layout. I tend to chuck this on something — like article or .text-content or something — and let it cascade into that whole area (which would also catch text that happens to be contained in an improper element), but I don’t mind seeing it on specific text elements.\n\n\n\nIf doing that, you probably wanna chuck li, dl, dt, blockquote on that chain. Despite having attempted to research this several times (here’s a playground), I still don’t 100% know what the right cocktail of line-wrapping properties is best to use. There is word-break: break-word; that I think is basically the same thing. And I think it’s generally best to use hyphens: auto; too… right??\n\n\n\n#root, #__next {\n  isolation: isolate;\n}\n\n\n\nI don’t quite understand what’s happening here. I get that this is a React/Next thing where you mount the app to these roots, and I get that it makes a stacking context, I just don’t get why it’s specifically useful to have that stacking context at this level. At the same time, I also don’t see any particular problem with it.\n\n\n\nAll in all — pretty cool! I always enjoy seeing what other people use (and go so far as to suggest) for CSS resets.\n\nNotes on Josh Comeau’s Custom CSS Reset originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-05T21:22:45.000Z",
      "date_modified": "2022-01-05T21:22:45.000Z",
      "_plugin": {
        "pageFilename": "2f4ffcac4810619a6ec97ce1d0370897db7e3544128170b0bbc997ea70045693.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360239",
      "url": "https://css-tricks.com/make-a-component-multiple-frameworks-in-a-monorepo/",
      "title": "How to Make a Component That Supports Multiple Frameworks in a Monorepo",
      "summary": "Your mission — should you decide to accept it — is to build a Button component in four frameworks, but, only use one button.css file!\nThis idea is very important to me. I’ve been working on a component library called …\n\nHow to Make a Component That Supports Multiple Frameworks in a Monorepo originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Your mission — should you decide to accept it — is to build a Button component in four frameworks, but, only use one <code>button.css</code> file!</p>\n\n\n\n<p>This idea is very important to me. I’ve been working on a component library called <a href=\"https://agnosticui.com/\" rel=\"noopener\">AgnosticUI</a> where the purpose is building UI components that aren’t tied to any one particular JavaScript framework. AgnosticUI works in React, Vue 3, Angular, and Svelte. So that’s exactly what we’ll do today in this article: <strong>build a button component that works across all these frameworks.</strong></p>\n\n\n\n<span id=\"more-360239\"></span>\n\n\n\n<p class=\"is-style-explanation\">The source code for this article is <a href=\"https://github.com/roblevintennis/guest-posts/tree/the-little-button-that-could-series\" rel=\"noopener\">available on GitHub</a> on the <code>the-little-button-that-could-series</code> branch.</p>\n\n\n<h3 id=\"table-of-contents\">Table of contents</h3>\n\n\n<ul class=\"is-style-almanac-list\"><li><a href=\"#why-a-monorepo\">Why a monorepo?</a></li><li><a href=\"#setting-up\">Setting up</a></li><li><a href=\"#framework-specific-workspaces\">Framework-specific workspaces</a></li><li><a href=\"#what-have-we-just-done\">What have we just done?</a></li><li><a href=\"#finishing-touches\">Finishing touches</a></li><li><a href=\"#updating-each-component-to-take-a-mode-property\">Updating each component to take a&nbsp;<code>mode</code>&nbsp;property</a></li><li><a href=\"#code-complete\">Code complete</a></li><li><a href=\"#homework\">Homework</a></li><li><a href=\"#potential-pitfalls\">Potential pitfalls</a></li><li><a href=\"#conclusion\">Conclusion</a></li></ul>\n\n\n<h3 id=\"why-a-monorepo\">Why a monorepo?</h3>\n\n\n<p>We&#8217;re going to set up a tiny Yarn workspaces-based monorepo. Why? Chris actually has a <a href=\"https://css-tricks.com/monorepo/#advantages-of-the-monorepo-for-us\">nice outline of the benefits in another post</a>. But here’s my own biased list of benefits that I feel are relevant for our little buttons endeavor:</p>\n\n\n<h4 id=\"coupling\">Coupling</h4>\n\n\n<p>We’re trying to build a single button component that uses just one <code>button.css</code> file across multiple frameworks. So, by nature, there’s some purposeful <a href=\"https://en.wikipedia.org/wiki/Coupling_(computer_programming)#:~:text=In%20software%20engineering%252C%20coupling%20is,of%20the%20relationships%20between%20modules.\" rel=\"noopener\">coupling</a> going on between the various framework implementations and the single-source-of-truth CSS file. A monorepo setup provides a convenient structure that facilitates copying our single <code>button.css</code> component into various framework-based projects.</p>\n\n\n<h4 id=\"workflow\">Workflow</h4>\n\n\n<p>Let’s say the button needs a tweak — like the &#8220;focus-ring&#8221; implementation, or we screwed up the use of <code>aria</code> in the component templates. Ideally, we’d like to correct things in one place rather than making individual fixes in separate repositories.</p>\n\n\n<h4 id=\"testing\">Testing</h4>\n\n\n<p>We want the convenience of firing up all four button implementations at the same time for testing. As this sort of project grows, it’s safe to assume there will be more proper testing. In AgnosticUI, for example, I&#8217;m currently using Storybook and often kick off all the framework Storybooks, or run snapshot testing across the entire monorepo.</p>\n\n\n\n<p>I like what <a href=\"https://leoloso.com/\" rel=\"noopener\">Leonardo Losoviz</a> has to say <a href=\"https://css-tricks.com/from-a-single-repo-to-multi-repos-to-monorepo-to-multi-monorepo/#issues-with-the-monorepo\">about the monorepo approach</a>. (And it just so happens to align with with everything we’ve talked about so far.)</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>I believe the monorepo is particularly useful when all packages are coded in the same programming language, tightly coupled, and relying on the same tooling.</p></blockquote>\n\n\n<h3 id=\"setting-up\">Setting up</h3>\n\n\n<p>Time to dive into code — start by creating a top-level directory on the command-line to house the project and then <code>cd</code> into it. (Can’t think of a name? <code>mkdir buttons &amp;&amp; cd buttons</code> will work fine.)</p>\n\n\n\n<p>First off, let’s initialize the project:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$ yarn init\nyarn init v1.22.15\nquestion name (articles): littlebutton\nquestion version (1.0.0): \nquestion description: my little button project\nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json</code></pre>\n\n\n\n<p>That gives us a <code>package.json</code> file with something like this:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"my little button project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\"\n}</code></pre>\n\n\n<h4 id=\"creating-the-baseline-workspace\">Creating the baseline workspace</h4>\n\n\n<p>We can set the first one up with this command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">mkdir -p ./littlebutton-css</code></pre>\n\n\n\n<p>Next, we need to add the two following lines to the monorepo’s top-level <code>package.json</code> file so that we keep the monorepo itself private. It also declares our workspaces:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// ...\n\"private\": true,\n\"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\", \"littlebutton-css\"]</code></pre>\n\n\n\n<p>Now descend into the <code>littlebutton-css</code> directory. We&#8217;ll again want to generate a <code>package.json</code> with <code>yarn init</code>. Since we&#8217;ve named our directory <code>littlebutton-css</code> (the same as how we specified it in our <code>workspaces</code> in <code>package.json</code>) we can simply hit the <code>Return</code> key and accept all the prompts:</p>\n\n\n\n<pre rel=\"Teminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$ cd ./littlebutton-css &amp;&amp; yarn init\nyarn init v1.22.15\nquestion name (littlebutton-css): \nquestion version (1.0.0): \nquestion description: \nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json</code></pre>\n\n\n\n<p>At this point, the directory structure should look like this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">├── littlebutton-css\n│   └── package.json\n└── package.json</code></pre>\n\n\n\n<p>We&#8217;ve only created the CSS package workspace at this point as we&#8217;ll be generating our framework implementations with tools like <code>vite</code> which, in turn, generate a <code>package.json</code> and project directory for you. We will have to remember that the name we choose for these generated projects must match the name we’ve specified in the <code>package.json</code> for our earlier <code>workspaces</code> to work.</p>\n\n\n<h4 id=\"baseline-html-amp-css\">Baseline HTML &amp; CSS</h4>\n\n\n<p>Let&#8217;s stay in the <code>./littlebutton-css</code> workspace and create our simple button component using vanilla HTML and CSS files.</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">touch index.html ./css/button.css</code></pre>\n\n\n\n<p>Now our project directory should look like this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">littlebutton-css\n├── css\n│   └── button.css\n├── index.html\n└── package.json</code></pre>\n\n\n\n<p>Let&#8217;s go ahead and connect some dots with some boilerplate HTML in <code>./index.html</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!doctype html>\n&lt;html lang=\"en\">\n&lt;head>\n  &lt;meta charset=\"utf-8\">\n  &lt;title>The Little Button That Could&lt;/title>\n  &lt;meta name=\"description\" content=\"\">\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  &lt;link rel=\"stylesheet\" href=\"css/button.css\">\n&lt;/head>\n&lt;body>\n  &lt;main>\n    &lt;button class=\"btn\">Go&lt;/button>\n  &lt;/main>\n&lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>And, just so we have something visual to test, we can add a little color in <code>./css/button.css</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  color: hotpink;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"612\" height=\"487\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640956693026_image.png?resize=612%2C487&#038;ssl=1\" alt=\"A mostly unstyled button with hot-pink text from the monorepo framework.\" class=\"wp-image-360244\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640956693026_image.png?w=612&amp;ssl=1 612w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640956693026_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now open up that <code>index.html</code> page in the browser. If you see an ugly generic button with <code>hotpink</code> text&#8230; success!</p>\n\n\n<h3 id=\"frameworkspecific-workspaces\">Framework-specific workspaces</h3>\n\n\n<p>So what we just accomplished is the baseline for our button component. What we want to do now is abstract it a bit so it’s extensible for other frameworks and such. For example, what if we want to use the button in a React project? We’re going to need workspaces in our monorepo for each one. We’ll start with React, then follow suit for Vue 3, Angular, and Svelte.</p>\n\n\n<h4 id=\"react\">React</h4>\n\n\n<p>We&#8217;re going to generate our React project using <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">vite</a>, a very lightweight and blazingly fast builder. Be forewarned that if you attempt to do this with <code>create-react-app</code>, there&#8217;s a very good chance you will run into conflicts later with <code>react-scripts</code> and conflicting webpack or Babel configurations from other frameworks, like Angular.</p>\n\n\n\n<p>To get our React workspace going, let’s go back into the terminal and <code>cd</code> back up to the top-level directory. From there, we’ll use <code>vite</code> to initialize a new project — let’s call it <code>littlebutton-react</code> — and, of course, we’ll select <code>react</code> as the framework and variant at the prompts:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$ yarn create vite\nyarn create v1.22.15\n[1/4] &#x1f50d;  Resolving packages...\n[2/4] &#x1f69a;  Fetching packages...\n[3/4] &#x1f517;  Linking dependencies...\n[4/4] &#x1f528;  Building fresh packages...\n\nsuccess Installed \"create-vite@2.6.6\" with binaries:\n      - create-vite\n      - cva\n&#x2714; Project name: … littlebutton-react\n&#x2714; Select a framework: › react\n&#x2714; Select a variant: › react\n\nScaffolding project in /Users/roblevin/workspace/opensource/guest-posts/articles/littlebutton-react...\n\nDone. Now run:\n\n  cd littlebutton-react\n  yarn\n  yarn dev\n\n&#x2728;  Done in 17.90s.</code></pre>\n\n\n\n<p>We initialize the React app with these commands next:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">cd littlebutton-react\nyarn\nyarn dev</code></pre>\n\n\n\n<p>With React installed and verified, let&#8217;s replace the contents of <code>src/App.jsx</code> to house our button with the following code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"./App.css\";\n\nconst Button = () => {\n  return &lt;button>Go&lt;/button>;\n};\n\nfunction App() {\n  return (\n    &lt;div className=\"App\">\n      &lt;Button />\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Now we&#8217;re going to write a small Node script that copies our <code>littlebutton-css/css/button.css</code> right into our React application for us. This step is probably the most interesting one to me because it&#8217;s both magical and ugly at the same time. It&#8217;s magical because it means our React button component is truly deriving its styles from the same CSS written in the baseline project. It&#8217;s ugly because, well, we are reaching up out of one workspace and grabbing a file from another. ¯\\_(ツ)_/¯</p>\n\n\n\n<p>Add the following little Node script to <code>littlebutton-react/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/button.css\", css, \"utf8\");</code></pre>\n\n\n\n<p>Let&#8217;s place a <code>node</code> command to run that in a <code>package.json</code> script that happens before the <code>dev</code> script in <code>littlebutton-react/package.json</code>. We&#8217;ll add a <code>syncStyles</code> and update the <code>dev</code> to call <code>syncStyles</code> before <code>vite</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles &amp;&amp; vite\",</code></pre>\n\n\n\n<p>Now, anytime we fire up our React application with <code>yarn dev</code>, we&#8217;ll first be copying the CSS file over. In essence, we&#8217;re &#8220;forcing&#8221; ourselves to not diverge from the CSS package&#8217;s <code>button.css</code> in our React button.</p>\n\n\n\n<p>But we want to also leverage <a href=\"https://github.com/css-modules/css-modules\" rel=\"noopener\">CSS Modules</a> to prevent name collisions and global CSS leakage, so we have one more step to do to get that wired up (from the same <code>littlebutton-react</code> directory):</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">touch src/button.module.css</code></pre>\n\n\n\n<p>Next, add the following to the new <code>src/button.module.css</code> file:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  composes: btn from './button.css';\n}</code></pre>\n\n\n\n<p>I find <code>composes</code> (also known as <a href=\"https://github.com/css-modules/css-modules#composition\" rel=\"noopener\">composition</a>) to be one of the coolest features of CSS Modules. In a nutshell, we&#8217;re copying our HTML/CSS version of <code>button.css</code> over wholesale then composing from our one <code>.btn</code> style rule.</p>\n\n\n\n<p>With that, we can go back to our <code>src/App.jsx</code> and import the CSS Modules <code>styles</code> into our React component with this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = () => {\n  return &lt;button className={styles.btn}>Go&lt;/button>;\n};\n\nfunction App() {\n  return (\n    &lt;div className=\"App\">\n      &lt;Button />\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Whew! Let&#8217;s pause and try to run our React app again:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">yarn dev</code></pre>\n\n\n\n<p>If all went well, you should see that same generic button, but with <code>hotpink</code> text. Before we move on to the next framework, let&#8217;s move back up to our top-level monorepo directory and update its <code>package.json</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"toy project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\"],\n  \"scripts\": {\n    \"start:react\": \"yarn workspace littlebutton-react dev\"\n  }\n}</code></pre>\n\n\n\n<p>Run the <code>yarn</code> command from the top-level directory to get the monorepo-hoisted dependencies installed.</p>\n\n\n\n<p>The only change we’ve made to this <code>package.json</code> is a new <code>scripts</code> section with a single script to start the React app. By adding <code>start:react</code> we can now run <code>yarn start:react</code> from our top-level directory and it will fire up the project we just built in <code>./littlebutton-react</code> without the need for <code>cd</code>&#8216;ing — super convenient!</p>\n\n\n\n<p>We&#8217;ll tackle Vue and Svelte next. It turns out that we can take a pretty similar approach for these as they both use <a href=\"https://css-tricks.com/video-screencasts/182-babys-first-vue-sfc/\">single file components</a> (SFC). Basically, we get to mix HTML, CSS, and JavaScript all into one single file. Whether you like the SFC approach or not, it&#8217;s certainly adequate enough for building out presentational or primitive UI components.</p>\n\n\n<h4 id=\"vue\">Vue</h4>\n\n\n<p>Following the steps from <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">vite’s scaffolding docs</a> we&#8217;ll run the following command from the monorepo’s top-level directory to initialize a Vue app:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">yarn create vite littlebutton-vue --template vue</code></pre>\n\n\n\n<p>This generates scaffolding with some provided instructions to run the starter Vue app:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">cd littlebutton-vue\nyarn\nyarn dev</code></pre>\n\n\n\n<p>This should fire up a starter page in the browser with some heading like &#8220;Hello Vue 3 + Vite.&#8221; From here, we can update <code>src/App.vue</code> to:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template>\n  &lt;div id=\"app\">\n    &lt;Button class=\"btn\">Go&lt;/Button>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\nimport Button from './components/Button.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    Button\n  }\n}\n&lt;/script></code></pre>\n\n\n\n<p>And we&#8217;ll replace any <code>src/components/*</code> with <code>src/components/Button.vue</code>:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template>\n  &lt;button :class=\"classes\">&lt;slot />&lt;/button>\n&lt;/template>\n\n&lt;script>\nexport default {\n  name: 'Button',\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n      }\n    }\n  }\n}\n&lt;/script>\n\n&lt;style module>\n.btn {\n  color: slateblue;\n}\n&lt;/style></code></pre>\n\n\n\n<p>Let&#8217;s break this down a bit:</p>\n\n\n\n<ul><li><code>:class=\"classes\"</code> is using Vue&#8217;s binding to call the computed <code>classes</code> method.</li><li>The <code>classes</code> method, in turn, is utilizing <a href=\"https://vue-loader.vuejs.org/guide/css-modules.html#usage\" rel=\"noopener\">CSS Modules in Vue</a> with the <code>this.$style.btn</code> syntax which will use styles contained in a <code>&lt;style module&gt;</code> tag.</li></ul>\n\n\n\n<p>For now, we&#8217;re hardcoding <code>color: slateblue</code> simply to test that things are working properly within the component. Try firing up the app again with <code>yarn dev</code>. If you see the button with our declared test color, then it&#8217;s working!</p>\n\n\n\n<p>Now we&#8217;re going to write a Node script that copies our <code>littlebutton-css/css/button.css</code> into our <code>Button.vue</code> file similar to the one we did for the React implementation. As mentioned, this component is a SFC so we&#8217;re going to have to do this a little differently using a simple <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" rel=\"noopener\">regular expression</a>.</p>\n\n\n\n<p>Add the following little Node.js script to <code>littlebutton-vue/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst vue = fs.readFileSync(\"./src/components/Button.vue\", \"utf8\");\n// Take everything between the starting and closing style tag and replace\nconst styleRegex = /&lt;style module>([\\s\\S]*?)&lt;\\/style>/;\nlet withSynchronizedStyles = vue.replace(styleRegex, `&lt;style module>\\n${css}\\n&lt;/style>`);\nfs.writeFileSync(\"./src/components/Button.vue\", withSynchronizedStyles, \"utf8\");</code></pre>\n\n\n\n<p>There&#8217;s a bit more complexity in this script, but using <code>replace</code> to copy text between opening and closing <code>style</code> tags via regex isn&#8217;t too bad.</p>\n\n\n\n<p>Now let’s add the following two scripts to the <code>scripts</code> clause in the <code>littlebutton-vue/package.json</code> file:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles &amp;&amp; vite\",</code></pre>\n\n\n\n<p>Now run <code>yarn syncStyles</code> and look at <code>./src/components/Button.vue</code> again. You should see that our style module gets replaced with this:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style module>\n.btn {\n  color: hotpink;\n}\n&lt;/style></code></pre>\n\n\n\n<p>Run the Vue app again with <code>yarn dev</code> and verify you get the expected results — yes, a button with hotpink text. If so, we’re good to move on to the next framework workspace!</p>\n\n\n<h4 id=\"svelte\">Svelte</h4>\n\n\n<p>Per the <a href=\"https://svelte.dev/\" rel=\"noopener\">Svelte docs</a>, we should kick off our <code>littlebutton-svelte</code> workspace with the following, starting from the monorepo&#8217;s top-level directory:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npx degit sveltejs/template littlebutton-svelte\ncd littlebutton-svelte\nyarn &amp;&amp; yarn dev</code></pre>\n\n\n\n<p>Confirm you can hit the &#8220;Hello World&#8221; start page at <code>http://localhost:5000</code>. Then, update <code>littlebutton-svelte/src/App.svelte</code>:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  import Button from './Button.svelte';\n&lt;/script>\n&lt;main>\n  &lt;Button>Go&lt;/Button>\n&lt;/main></code></pre>\n\n\n\n<p>Also, in <code>littlebutton-svelte/src/main.js</code>, we want to remove the <code>name</code> prop so it looks like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import App from './App.svelte';\n\nconst app = new App({\n  target: document.body\n});\n\nexport default app;</code></pre>\n\n\n\n<p>And finally, add <code>littlebutton-svelte/src/Button.svelte</code> with the following:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button class=\"btn\">\n  &lt;slot>&lt;/slot>\n&lt;/button>\n\n&lt;script>\n&lt;/script>\n\n&lt;style>\n  .btn {\n    color: saddlebrown;\n  }\n&lt;/style></code></pre>\n\n\n\n<p>One last thing: Svelte appears to name our app: <code>\"name\": \"svelte-app\"</code> in the <code>package.json</code>. Change that to <code>\"name\": \"littlebutton-svelte\"</code> so it&#8217;s consistent with the <code>workspaces</code> name in our top-level <code>package.json</code> file.</p>\n\n\n\n<p>Once again, we can copy our baseline <code>littlebutton-css/css/button.css</code> into our <code>Button.svelte</code>. As mentioned, this component is a SFC, so we&#8217;re going to have to do this using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" rel=\"noopener\">regular expression</a>. Add the following Node script to <code>littlebutton-svelte/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst svelte = fs.readFileSync(\"./src/Button.svelte\", \"utf8\");\nconst styleRegex = /&lt;style>([\\s\\S]*?)&lt;\\/style>/;\nlet withSynchronizedStyles = svelte.replace(styleRegex, `&lt;style>\\n${css}\\n&lt;/style>`);\nfs.writeFileSync(\"./src/Button.svelte\", withSynchronizedStyles, \"utf8\");</code></pre>\n\n\n\n<p>This is super similar to the copy script we used with Vue, isn&#8217;t it? We&#8217;ll add similar scripts to our <code>package.json</code> script:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"dev\": \"yarn syncStyles &amp;&amp; rollup -c -w\",\n\"syncStyles\": \"node copystyles.js\",</code></pre>\n\n\n\n<p>Now run <code>yarn syncStyles &amp;&amp; yarn dev</code>. If all is good, we once again should see a button with <code>hotpink</code> text.</p>\n\n\n\n<p>If this is starting to feel repetitive, all I have to say is <em>welcome to my world</em>. What I&#8217;m showing you here is essentially the same process I&#8217;ve been using to build my <a href=\"https://github.com/AgnosticUI/agnosticui\" rel=\"noopener\">AgnosticUI</a> project!</p>\n\n\n<h4 id=\"angular\">Angular</h4>\n\n\n<p>You probably know the drill by now. From the monorepo&#8217;s top-level directory, install Angular and <a href=\"https://angular.io/guide/setup-local\" rel=\"noopener\">create an Angular app</a>. If we were creating a full-blown UI library we&#8217;d likely use <code>ng generate library</code> or even <code><a href=\"https://nx.dev/l/a/tutorial/08-create-libs\" rel=\"noopener\">nx</a></code>. But to keep things as straightforward as possible we&#8217;ll set up a boilerplate Angular app as follows:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm install -g @angular/cli ### unless you already have installed\nng new littlebutton-angular ### choose no for routing and CSS\n? Would you like to add Angular routing? (y/N) N\n❯ CSS \n  SCSS   [ https://sass-lang.com/documentation/syntax#scss ] \n  Sass   [ https://sass-lang.com/documentation/syntax#the-indented-syntax ] \n  Less   [ http://lesscss.org ]\n\ncd littlebutton-angular &amp;&amp; ng serve --open</code></pre>\n\n\n\n<p>With the Angular setup confirmed, let&#8217;s update some files. <code>cd littlebutton-angular</code>, delete the <code>src/app/app.component.spec.ts</code> file, and add a button component in <code>src/components/button.component.ts</code>, like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Component } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {}</code></pre>\n\n\n\n<p>Add the following to <code>src/components/button.component.html</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button class=\"btn\">Go&lt;/button></code></pre>\n\n\n\n<p>And put this in the <code>src/components/button.component.css</code> file for testing:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  color: fuchsia;\n}</code></pre>\n\n\n\n<p>In <code>src/app/app.module.ts</code>:</p>\n\n\n\n<pre rel=\"TypeScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { ButtonComponent } from '../components/button.component';\n\n@NgModule({\n  declarations: [AppComponent, ButtonComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}</code></pre>\n\n\n\n<p>Next, replace <code>src/app/app.component.ts</code> with:</p>\n\n\n\n<pre rel=\"TypeScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {}</code></pre>\n\n\n\n<p>Then, replace <code>src/app/app.component.html</code> with:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;main>\n  &lt;little-button>Go&lt;/little-button>\n&lt;/main></code></pre>\n\n\n\n<p>With that, let&#8217;s run <code>yarn start</code> and verify our button with <code>fuchsia</code> text renders as expected.</p>\n\n\n\n<p>Again, we want to copy over the CSS from our baseline workspace. We can do that by adding this to <code>littlebutton-angular/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/components/button.component.css\", css, \"utf8\");</code></pre>\n\n\n\n<p>Angular is nice in that it uses <code><a href=\"https://angular.io/guide/view-encapsulation\" rel=\"noopener\">ViewEncapsulation</a></code> that defaults to to <code>emulate</code> which mimics, <a href=\"https://baldur.gitbook.io/angular/angular/angular-components-overview/view-encapsulation\" rel=\"noopener\">according to the docs</a>,</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>[&#8230;] the behavior of shadow DOM by preprocessing (and renaming) the CSS code to effectively scope the CSS to the component&#8217;s view.</p></blockquote>\n\n\n\n<p>This basically means we can literally copy over <code>button.css</code> and use it as-is.</p>\n\n\n\n<p>Finally, update the <code>package.json</code> file by adding these two lines in the <code>scripts</code> section:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"start\": \"yarn syncStyles &amp;&amp; ng serve\",\n\"syncStyles\": \"node copystyles.js\",</code></pre>\n\n\n\n<p>With that, we can now run <code>yarn start</code> once more and verify our button text color (which was <code>fuchsia</code>) is now <code>hotpink</code>.</p>\n\n\n<h3 id=\"what-have-we-just-done\">What have we just done?</h3>\n\n\n<p>Let&#8217;s take a break from coding and think about the bigger picture and what we&#8217;ve just done. Basically, we&#8217;ve set up a system where any changes to our CSS package&#8217;s <code>button.css</code> will get copied over into all the framework implementations as a result of our <code>copystyles.js</code> Node scripts. Further, we&#8217;ve incorporated idiomatic conventions for each of the frameworks:</p>\n\n\n\n<ul><li><code>SFC</code> for Vue and Svelte</li><li><code>CSS Modules</code> for React (and Vue within the SFC <code>&lt;style module&gt;</code> setup)</li><li><code>ViewEncapsulation</code> for Angular</li></ul>\n\n\n\n<p>Of course I state the obvious that these aren&#8217;t the only ways to do CSS in each of the above frameworks (e.g. CSS-in-JS is a popular choice), but they are certainly accepted practices and are working quite well for our greater goal — to have a single CSS source of truth to drive all framework implementations.</p>\n\n\n\n<p>If, for example, our button was in use and our design team decided we wanted to change from <code>4px</code> to <code>3px</code> <code>border-radius</code>, we could update the one file, and any separate implementations would stay synced.</p>\n\n\n\n<p>This is compelling if you have a polyglot team of developers that enjoy working in multiple frameworks, or, say an offshore team (that&#8217;s 3× productive in Angular) that&#8217;s being tasked to build a back-office application, but your flagship product is built in React. Or, you&#8217;re building an interim admin console and you&#8217;d love to experiment with using Vue or Svelte. You get the picture.</p>\n\n\n<h3 id=\"finishing-touches\">Finishing touches</h3>\n\n\n<p>OK, so we have the monorepo architecture in a really good spot. But there’s a few things we can do to make it even more useful as far as the developer experience goes.</p>\n\n\n<h4 id=\"better-start-scripts\">Better start scripts</h4>\n\n\n<p>Let&#8217;s move back up to our top-level monorepo directory and update its <code>package.json</code> <code>scripts</code> section with the following so we can kick any framework implementation without <code>cd</code>&#8216;ing:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// ...\n\"scripts\": {\n  \"start:react\": \"yarn workspace littlebutton-react dev\",\n  \"start:vue\": \"yarn workspace littlebutton-vue dev \",\n  \"start:svelte\": \"yarn workspace littlebutton-svelte dev\",\n  \"start:angular\": \"yarn workspace littlebutton-angular start\"\n},</code></pre>\n\n\n<h4 id=\"better-baseline-styles\">Better baseline styles</h4>\n\n\n<p>We can also provide a better set of baseline styles for the button so it starts from a nice, neutral place. Here’s what I did in the <code>littlebutton-css/css/button.css</code> file.</p>\n\n\n\n<details >\n  <summary>\n          View Full Snippet      </summary>\n  \n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  --button-dark: #333;\n  --button-line-height: 1.25rem;\n  --button-font-size: 1rem;\n  --button-light: #e9e9e9;\n  --button-transition-duration: 200ms;\n  --button-font-stack:\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    \"Segoe UI\",\n    Roboto,\n    Ubuntu,\n    \"Helvetica Neue\",\n    sans-serif;\n\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n  user-select: none;\n  appearance: none;\n  cursor: pointer;\n  box-sizing: border-box;\n  transition-property: all;\n  transition-duration: var(--button-transition-duration);\n  color: var(--button-dark);\n  background-color: var(--button-light);\n  border-color: var(--button-light);\n  border-style: solid;\n  border-width: 1px;\n  font-family: var(--button-font-stack);\n  font-weight: 400;\n  font-size: var(--button-font-size);\n  line-height: var(--button-line-height);\n  padding-block-start: 0.5rem;\n  padding-block-end: 0.5rem;\n  padding-inline-start: 0.75rem;\n  padding-inline-end: 0.75rem;\n  text-decoration: none;\n  text-align: center;\n}\n\n/* Respect users reduced motion preferences */\n@media (prefers-reduced-motion) {\n  .btn {\n    transition-duration: 0.001ms !important;\n  }\n}</code></pre>\n\n\n\n<p></p>\n\n\n</details>\n\n\n<p>Let’s test this out! Fire up each of the four framework implementations with the new and improved start scripts and confirm the styling changes are in effect.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"612\" height=\"487\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957723344_image.png?resize=612%2C487&#038;ssl=1\" alt=\"Neutral (gray) styled button from the monorepo framework\" class=\"wp-image-360271\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957723344_image.png?w=612&amp;ssl=1 612w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957723344_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>One CSS file update proliferated to four frameworks — pretty cool, eh!?</p>\n\n\n<h4 id=\"set-a-primary-mode\">Set a primary mode</h4>\n\n\n<p>We&#8217;re going to add a <code>mode</code> prop to each of our button’s and implement <code>primary</code> mode next. A primary button could be any color but we&#8217;ll go with a shade of green for the background and white text. Again, in the baseline stylesheet:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  --button-primary: #14775d;\n  --button-primary-color: #fff;\n  /* ... */\n}</code></pre>\n\n\n\n<p>Then, just before the <code>@media (prefers-reduced-motion)</code> query, add the following <code>btn-primary</code> to the same baseline stylesheet:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn-primary {\n  background-color: var(--button-primary);\n  border-color: var(--button-primary);\n  color: var(--button-primary-color);\n}</code></pre>\n\n\n\n<p>There we go! Some developer conveniences and better baseline styles!</p>\n\n\n<h3 id=\"updating-each-component-to-take-a-mode-property\">Updating each component to take a <code>mode</code> property</h3>\n\n\n<p>Now that we&#8217;ve added our new <code>primary</code> mode represented by the <code>.btn-primary</code> class, we want to sync the styles for all four framework implementations. So, let&#8217;s add some more <code>package.json</code> scripts to our top level <code>scripts</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"sync:react\": \"yarn workspace littlebutton-react syncStyles\",\n\"sync:vue\": \"yarn workspace littlebutton-vue syncStyles\",\n\"sync:svelte\": \"yarn workspace littlebutton-svelte syncStyles\",\n\"sync:angular\": \"yarn workspace littlebutton-angular syncStyles\"</code></pre>\n\n\n\n<p>Be sure to respect JSON&#8217;s comma rules! Depending on where you place these lines within your <code>scripts: {...}</code>, you’ll want to make sure there are no missing or trailing commas.</p>\n\n\n\n<p>Go ahead and run the following to fully synchronize the styles:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">yarn sync:angular &amp;&amp; yarn sync:react &amp;&amp; yarn sync:vue &amp;&amp; yarn sync:svelte</code></pre>\n\n\n\n<p>Running this doesn’t change anything because we haven&#8217;t applied the primary class yet, but you should at least see the CSS has been copied over if you go look at the framework&#8217;s button component CSS.</p>\n\n\n<h4 id=\"react\">React</h4>\n\n\n<p>If you haven&#8217;t already, double-check that the updated CSS got copied over into <code>littlebutton-react/src/button.css</code>. If not, you can run <code>yarn syncStyles</code>. Note that if you forget to run <code>yarn syncStyles</code> our <code>dev</code> script will do this for us when we next start the application anyway:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"dev\": \"yarn syncStyles &amp;&amp; vite\",</code></pre>\n\n\n\n<p>For our React implementation, we additionally need to add a <em>composed</em> CSS Modules class in <code>littlebutton-react/src/button.module.css</code> that is composed from the new <code>.btn-primary</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btnPrimary {\n  composes: btn-primary from './button.css';\n}</code></pre>\n\n\n\n<p>We&#8217;ll also update <code>littlebutton-react/src/App.jsx</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = ({ mode }) => {\n  const primaryClass = mode ? styles[`btn${mode.charAt(0).toUpperCase()}${mode.slice(1)}`] : '';\n  const classes = primaryClass ? `${styles.btn} ${primaryClass}` : styles.btn;\n  return &lt;button className={classes}>Go&lt;/button>;\n};\n\nfunction App() {\n  return (\n    &lt;div className=\"App\">\n      &lt;Button mode=\"primary\" />\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Fire up the React app with <code>yarn start:react</code> from the top-level directory. If all goes well, you should now see your green primary button.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"612\" height=\"487\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957382007_image.png?resize=612%2C487&#038;ssl=1\" alt=\"A dark green button with white text positioning in the center of the screen.\" class=\"wp-image-360276\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957382007_image.png?w=612&amp;ssl=1 612w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957382007_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>As a note, I&#8217;m keeping the Button component in <code>App.jsx</code> for brevity. Feel free to tease out the Button component into its own file if that bothers you.</p>\n\n\n<h4 id=\"vue\">Vue</h4>\n\n\n<p>Again, double-check that the button styles were copied over and, if not, run <code>yarn syncStyles</code>.</p>\n\n\n\n<p>Next, make the following changes to the <code>&lt;script&gt;</code> section of <code>littlebutton-vue/src/components/Button.vue</code>:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\nexport default {\n  name: 'Button',\n  props: {\n    mode: {\n      type: String,\n      required: false,\n      default: '',\n      validator: (value) => {\n        const isValid = ['primary'].includes(value);\n        if (!isValid) {\n          console.warn(`Allowed types for Button are primary`);\n        }\n        return isValid;\n      },\n    }\n  },\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n        [this.$style['btn-primary']]: this.mode === 'primary',\n      }\n    }\n  }\n}\n&lt;/script></code></pre>\n\n\n\n<p>Now we can update the markup in <code>littlebutton-vue/src/App.vue</code> to use the new <code>mode</code> prop:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;Button mode=\"primary\">Go&lt;/Button></code></pre>\n\n\n\n<p>Now you can <code>yarn start:vue</code> from the top-level directory and check for the same green button.</p>\n\n\n<h4 id=\"svelte\">Svelte</h4>\n\n\n<p>Let’s <code>cd</code> into <code>littlebutton-svelte</code> and verify that the styles in <code>littlebutton-svelte/src/Button.svelte</code> have the new <code>.btn-primary</code> class copied over, and <code>yarn syncStyles</code> if you need to. Again, the <code>dev</code> script will do that for us anyway on the next startup if you happen to forget.</p>\n\n\n\n<p>Next, update the Svelte template to pass the <code>mode</code> of <code>primary</code>. In <code>src/App.svelte</code>:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  import Button from './Button.svelte';\n&lt;/script>\n&lt;main>\n  &lt;Button mode=\"primary\">Go&lt;/Button>\n&lt;/main></code></pre>\n\n\n\n<p>We also need to update the top of our <code>src/Button.svelte</code> component itself to accept the <code>mode</code> prop and apply the CSS Modules class:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button class=\"{classes}\">\n  &lt;slot>&lt;/slot>\n&lt;/button>\n&lt;script>\n  export let mode = \"\";\n  const classes = [\n    \"btn\",\n    mode ? `btn-${mode}` : \"\",\n  ].filter(cls => cls.length).join(\" \");\n&lt;/script></code></pre>\n\n\n\n<p>Note that the <code>&lt;styles&gt;</code> section of our Svelte component shouldn’t be touched in this step.</p>\n\n\n\n<p>And now, you can <code>yarn dev</code> from <code>littlebutton-svelte</code> (or <code>yarn start:svelte</code> from a higher directory) to confirm the green button made it!</p>\n\n\n<h4 id=\"angular\">Angular</h4>\n\n\n<p>Same thing, different framework: check that the styles are copied over and run <code>yarn syncStyles</code> if needed.</p>\n\n\n\n<p>Let’s add the <code>mode</code> prop to the <code>littlebutton-angular/src/app/app.component.html</code> file:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;main>\n  &lt;little-button mode=\"primary\">Go&lt;/little-button>\n&lt;/main></code></pre>\n\n\n\n<p>Now we need to set up a binding to a <code>classes</code> getter to <code>compute</code> the correct classes based on if the <code>mode</code> was passed in to the component or not. Add this to <code>littlebutton-angular/src/components/button.component.html</code> (and note the binding is happening with the square brackets):</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button [class]=\"classes\">Go&lt;/button></code></pre>\n\n\n\n<p>Next, we actually need to create the <code>classes</code> binding in our component at <code>littlebutton-angular/src/components/button.component.ts</code>:</p>\n\n\n\n<pre rel=\"TypeScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {\n  @Input() mode: 'primary' | undefined = undefined;\n\n  public get classes(): string {\n    const modeClass = this.mode ? `btn-${this.mode}` : '';\n    return [\n      'btn',\n      modeClass,\n    ].filter(cl => cl.length).join(' ');\n  }\n}</code></pre>\n\n\n\n<p>We use the <code>Input</code> directive to take in the <code>mode</code> prop, then we create a <code>classes</code> accessor which adds the mode class if it’s been passed in.</p>\n\n\n\n<p>Fire it up and look for the green button!</p>\n\n\n<h3 id=\"code-complete\">Code complete</h3>\n\n\n<p>If you’ve made it this far, congratulations — you’ve reached code complete! If something went awry, I’d encourage you to cross-reference <a href=\"https://github.com/roblevintennis/guest-posts/tree/the-little-button-that-could-series\" rel=\"noopener\">the source code over at GitHub</a> on the <code>the-little-button-that-could-series</code> branch. As bundlers and packages have a tendency to change abruptly, you might want to pin your package versions to the ones in this branch if you happen to experience any dependency issues.</p>\n\n\n\n<p>Take a moment to go back and compare the four framework-based button component implementations we just built. They’re still small enough to quickly notice some interesting differences in how <em>props</em> get passed in, how we <em>bind</em> to props, and how CSS <em>name collisions</em> are prevented among other subtle differences. As I continue to add components to <a href=\"https://agnosticui.com/\" rel=\"noopener\">AgnosticUI</a> (which supports these exact same four frameworks), I’m continually pondering which offers the best developer experience. What do you think?</p>\n\n\n<h3 id=\"homework\">Homework</h3>\n\n\n<p>If you&#8217;re the type that likes to figure things out on your own or enjoys digging in deeper, here are ideas.</p>\n\n\n<h4 id=\"button-states\">Button states</h4>\n\n\n<p>The current button styles do not account for various states, like <code>:hover</code>. I believe that&#8217;s a good first exercise.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* You should really implement the following states\n   but I will leave it as an exercise for you to \n   decide how to and what values to use.\n*/\n.btn:focus {\n  /* If you elect to remove the outline, replace it\n     with another proper affordance and research how\n     to use transparent outlines to support windows\n     high contrast\n  */\n}\n.btn:hover { }\n.btn:visited { }\n.btn:active { }\n.btn:disabled { }</code></pre>\n\n\n<h4 id=\"variants\">Variants</h4>\n\n\n<p>Most button libraries support many button variations for things like sizes, shapes, and colors. Try creating more than the <code>primary</code> mode we already have. Maybe a <code>secondary</code> variation? A <code>warning</code> or <code>success</code>? Maybe <code>filled</code> and <code>outline</code>? Again, you can look at AgnosticUI’s <a href=\"http://www.agnosticui.com/docs/components/buttons.html#examples\" rel=\"noopener\">buttons page</a> for ideas.</p>\n\n\n<h4 id=\"css-custom-properties\">CSS custom properties</h4>\n\n\n<p>If you haven&#8217;t started using CSS custom properties yet, I&#8217;d strongly recommend it. You can start by having a look at AgnosticUI&#8217;s <a href=\"https://github.com/AgnosticUI/agnosticui/blob/master/agnostic-css/css-dist/common.concat.css\" rel=\"noopener\">common styles</a>. I heavily lean on custom properties in there. Here are some great articles that cover what custom properties are and how you might leverage them:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">A Complete Guide to Custom Properties</a></li><li><a href=\"https://css-tricks.com/a-dry-approach-to-color-themes-in-css/\">A DRY Approach to Color Themes in CSS</a></li></ul>\n\n\n<h4 id=\"types\">Types</h4>\n\n\n<p>No&#8230; not typings, but the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type\" rel=\"noopener\"><code>&lt;button&gt;</code> element’s <code>type</code> attribute</a>. We didn’t cover that in our component but there’s an opportunity to extend the component to other use cases with valid types, like <code>button</code>, <code>submit</code>, and <code>reset</code>. This is pretty easy to do and will greatly improve the button’s API.</p>\n\n\n<h4 id=\"more-ideas\">More ideas</h4>\n\n\n<p>Gosh, you could do so much — add linting, convert it to Typescript, audit the accessibility, etc.</p>\n\n\n\n<p>The current Svelte implementation is suffering from some pretty loose assumptions as we have no defense if the valid <code>primary</code> mode isn’t passed — that would produce a garbage CSS class:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">mode ? `btn-${mode}` : \"\",</code></pre>\n\n\n\n<p>You could say, &#8220;Well, <code>.btn-garbage</code> as a class isn’t exactly harmful.&#8221; But it’s probably a good idea to <a href=\"https://css-tricks.com/defensive-css/\">style defensively</a> when and where possible.</p>\n\n\n<h3 id=\"potential-pitfalls\">Potential pitfalls</h3>\n\n\n<p>There are some things you should be aware of before taking this approach further:</p>\n\n\n\n<ul><li>Positional CSS based on the structure of the markup will not work well for the CSS Modules based techniques used here.</li><li>Angular makes positional techniques even harder as it generates <a href=\"https://angular.io/guide/component-styles#host\" rel=\"noopener\"><code>:host</code> element</a> representing each component view. This means you have these extra elements in between your template or markup structure. You&#8217;ll need to work around that.</li><li>Copying styles across workspace packages is a bit of an anti-pattern to some folks. I justify it because I believe the benefits outweigh the costs; also, when I think about how monorepos use symlinks and (not-so-failproof) hoisting, I don&#8217;t feel so bad about this approach.</li><li>You’ll have to subscribe to the decoupled techniques used here, so no CSS-in-JS.</li></ul>\n\n\n\n<p>I believe that all approaches to software development have their pros and cons and you ultimately have to decide if sharing a single CSS file across frameworks works for you or your specific project. There are certainly other ways you could do this (e.g. using <code>littlebuttons-css</code> as an npm package dependency) if needed.</p>\n\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n\n<p>Hopefully I’ve whet your appetite and you’re now really intrigued to create UI component libraries and/or design systems that are not tied to a particular framework. Maybe you have a better idea on how to achieve this — I&#8217;d love to hear your thoughts in the comments!</p>\n\n\n\n<p>I&#8217;m sure you&#8217;ve seen the venerable <a href=\"https://todomvc.com\" rel=\"noopener\">TodoMVC</a> project and how many framework implementations have been created for it. Similarly, wouldn&#8217;t it be nice to have a UI component library of primitives available for many frameworks? <a href=\"https://open-ui.org/\" rel=\"noopener\">Open UI</a> is making great strides to properly standardize native UI component defaults, but I believe we’ll always need to insert ourselves to some extent. Certainly, taking a good year to build a custom design system is quickly falling out of favor and companies are seriously questioning their <abbr title=\"returns on investments\">ROI</abbr>. Some sort of scaffolding is required to make the endeavor practical.</p>\n\n\n\n<p>The vision of <a href=\"https://agnosticui.com/\" rel=\"noopener\">AgnosticUI</a> is to have a relatively agnostic way to build design systems quickly that are not tied down to a particular frontend framework. If you’re compelled to get involved, the project is still very early and approachable and I’d love some help! Plus, you’re already pretty familiar with the how the project works now that you’ve gone through this tutorial!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/make-a-component-multiple-frameworks-in-a-monorepo/\">How to Make a Component That Supports Multiple Frameworks in a Monorepo</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Your mission — should you decide to accept it — is to build a Button component in four frameworks, but, only use one button.css file!\n\n\n\nThis idea is very important to me. I’ve been working on a component library called AgnosticUI where the purpose is building UI components that aren’t tied to any one particular JavaScript framework. AgnosticUI works in React, Vue 3, Angular, and Svelte. So that’s exactly what we’ll do today in this article: build a button component that works across all these frameworks.\n\n\n\n\n\n\n\nThe source code for this article is available on GitHub on the the-little-button-that-could-series branch.\n\n\nTable of contents\n\n\nWhy a monorepo?Setting upFramework-specific workspacesWhat have we just done?Finishing touchesUpdating each component to take a mode propertyCode completeHomeworkPotential pitfallsConclusion\n\n\nWhy a monorepo?\n\n\nWe’re going to set up a tiny Yarn workspaces-based monorepo. Why? Chris actually has a nice outline of the benefits in another post. But here’s my own biased list of benefits that I feel are relevant for our little buttons endeavor:\n\n\nCoupling\n\n\nWe’re trying to build a single button component that uses just one button.css file across multiple frameworks. So, by nature, there’s some purposeful coupling going on between the various framework implementations and the single-source-of-truth CSS file. A monorepo setup provides a convenient structure that facilitates copying our single button.css component into various framework-based projects.\n\n\nWorkflow\n\n\nLet’s say the button needs a tweak — like the “focus-ring” implementation, or we screwed up the use of aria in the component templates. Ideally, we’d like to correct things in one place rather than making individual fixes in separate repositories.\n\n\nTesting\n\n\nWe want the convenience of firing up all four button implementations at the same time for testing. As this sort of project grows, it’s safe to assume there will be more proper testing. In AgnosticUI, for example, I’m currently using Storybook and often kick off all the framework Storybooks, or run snapshot testing across the entire monorepo.\n\n\n\nI like what Leonardo Losoviz has to say about the monorepo approach. (And it just so happens to align with with everything we’ve talked about so far.)\n\n\n\nI believe the monorepo is particularly useful when all packages are coded in the same programming language, tightly coupled, and relying on the same tooling.\n\n\nSetting up\n\n\nTime to dive into code — start by creating a top-level directory on the command-line to house the project and then cd into it. (Can’t think of a name? mkdir buttons && cd buttons will work fine.)\n\n\n\nFirst off, let’s initialize the project:\n\n\n\n$ yarn init\nyarn init v1.22.15\nquestion name (articles): littlebutton\nquestion version (1.0.0): \nquestion description: my little button project\nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json\n\n\n\nThat gives us a package.json file with something like this:\n\n\n\n{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"my little button project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\"\n}\n\n\nCreating the baseline workspace\n\n\nWe can set the first one up with this command:\n\n\n\nmkdir -p ./littlebutton-css\n\n\n\nNext, we need to add the two following lines to the monorepo’s top-level package.json file so that we keep the monorepo itself private. It also declares our workspaces:\n\n\n\n// ...\n\"private\": true,\n\"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\", \"littlebutton-css\"]\n\n\n\nNow descend into the littlebutton-css directory. We’ll again want to generate a package.json with yarn init. Since we’ve named our directory littlebutton-css (the same as how we specified it in our workspaces in package.json) we can simply hit the Return key and accept all the prompts:\n\n\n\n$ cd ./littlebutton-css && yarn init\nyarn init v1.22.15\nquestion name (littlebutton-css): \nquestion version (1.0.0): \nquestion description: \nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json\n\n\n\nAt this point, the directory structure should look like this:\n\n\n\n├── littlebutton-css\n│   └── package.json\n└── package.json\n\n\n\nWe’ve only created the CSS package workspace at this point as we’ll be generating our framework implementations with tools like vite which, in turn, generate a package.json and project directory for you. We will have to remember that the name we choose for these generated projects must match the name we’ve specified in the package.json for our earlier workspaces to work.\n\n\nBaseline HTML & CSS\n\n\nLet’s stay in the ./littlebutton-css workspace and create our simple button component using vanilla HTML and CSS files.\n\n\n\ntouch index.html ./css/button.css\n\n\n\nNow our project directory should look like this:\n\n\n\nlittlebutton-css\n├── css\n│   └── button.css\n├── index.html\n└── package.json\n\n\n\nLet’s go ahead and connect some dots with some boilerplate HTML in ./index.html:\n\n\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>The Little Button That Could</title>\n  <meta name=\"description\" content=\"\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"stylesheet\" href=\"css/button.css\">\n</head>\n<body>\n  <main>\n    <button class=\"btn\">Go</button>\n  </main>\n</body>\n</html>\n\n\n\nAnd, just so we have something visual to test, we can add a little color in ./css/button.css:\n\n\n\n.btn {\n  color: hotpink;\n}\n\n\n\n\n\n\n\nNow open up that index.html page in the browser. If you see an ugly generic button with hotpink text… success!\n\n\nFramework-specific workspaces\n\n\nSo what we just accomplished is the baseline for our button component. What we want to do now is abstract it a bit so it’s extensible for other frameworks and such. For example, what if we want to use the button in a React project? We’re going to need workspaces in our monorepo for each one. We’ll start with React, then follow suit for Vue 3, Angular, and Svelte.\n\n\nReact\n\n\nWe’re going to generate our React project using vite, a very lightweight and blazingly fast builder. Be forewarned that if you attempt to do this with create-react-app, there’s a very good chance you will run into conflicts later with react-scripts and conflicting webpack or Babel configurations from other frameworks, like Angular.\n\n\n\nTo get our React workspace going, let’s go back into the terminal and cd back up to the top-level directory. From there, we’ll use vite to initialize a new project — let’s call it littlebutton-react — and, of course, we’ll select react as the framework and variant at the prompts:\n\n\n\n$ yarn create vite\nyarn create v1.22.15\n[1/4] 🔍  Resolving packages...\n[2/4] 🚚  Fetching packages...\n[3/4] 🔗  Linking dependencies...\n[4/4] 🔨  Building fresh packages...\n\nsuccess Installed \"create-vite@2.6.6\" with binaries:\n      - create-vite\n      - cva\n✔ Project name: … littlebutton-react\n✔ Select a framework: › react\n✔ Select a variant: › react\n\nScaffolding project in /Users/roblevin/workspace/opensource/guest-posts/articles/littlebutton-react...\n\nDone. Now run:\n\n  cd littlebutton-react\n  yarn\n  yarn dev\n\n✨  Done in 17.90s.\n\n\n\nWe initialize the React app with these commands next:\n\n\n\ncd littlebutton-react\nyarn\nyarn dev\n\n\n\nWith React installed and verified, let’s replace the contents of src/App.jsx to house our button with the following code:\n\n\n\nimport \"./App.css\";\n\nconst Button = () => {\n  return <button>Go</button>;\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\nNow we’re going to write a small Node script that copies our littlebutton-css/css/button.css right into our React application for us. This step is probably the most interesting one to me because it’s both magical and ugly at the same time. It’s magical because it means our React button component is truly deriving its styles from the same CSS written in the baseline project. It’s ugly because, well, we are reaching up out of one workspace and grabbing a file from another. ¯\\_(ツ)_/¯\n\n\n\nAdd the following little Node script to littlebutton-react/copystyles.js:\n\n\n\nconst fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/button.css\", css, \"utf8\");\n\n\n\nLet’s place a node command to run that in a package.json script that happens before the dev script in littlebutton-react/package.json. We’ll add a syncStyles and update the dev to call syncStyles before vite:\n\n\n\n\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles && vite\",\n\n\n\nNow, anytime we fire up our React application with yarn dev, we’ll first be copying the CSS file over. In essence, we’re “forcing” ourselves to not diverge from the CSS package’s button.css in our React button.\n\n\n\nBut we want to also leverage CSS Modules to prevent name collisions and global CSS leakage, so we have one more step to do to get that wired up (from the same littlebutton-react directory):\n\n\n\ntouch src/button.module.css\n\n\n\nNext, add the following to the new src/button.module.css file:\n\n\n\n.btn {\n  composes: btn from './button.css';\n}\n\n\n\nI find composes (also known as composition) to be one of the coolest features of CSS Modules. In a nutshell, we’re copying our HTML/CSS version of button.css over wholesale then composing from our one .btn style rule.\n\n\n\nWith that, we can go back to our src/App.jsx and import the CSS Modules styles into our React component with this:\n\n\n\nimport \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = () => {\n  return <button className={styles.btn}>Go</button>;\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\nWhew! Let’s pause and try to run our React app again:\n\n\n\nyarn dev\n\n\n\nIf all went well, you should see that same generic button, but with hotpink text. Before we move on to the next framework, let’s move back up to our top-level monorepo directory and update its package.json:\n\n\n\n{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"toy project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\"],\n  \"scripts\": {\n    \"start:react\": \"yarn workspace littlebutton-react dev\"\n  }\n}\n\n\n\nRun the yarn command from the top-level directory to get the monorepo-hoisted dependencies installed.\n\n\n\nThe only change we’ve made to this package.json is a new scripts section with a single script to start the React app. By adding start:react we can now run yarn start:react from our top-level directory and it will fire up the project we just built in ./littlebutton-react without the need for cd‘ing — super convenient!\n\n\n\nWe’ll tackle Vue and Svelte next. It turns out that we can take a pretty similar approach for these as they both use single file components (SFC). Basically, we get to mix HTML, CSS, and JavaScript all into one single file. Whether you like the SFC approach or not, it’s certainly adequate enough for building out presentational or primitive UI components.\n\n\nVue\n\n\nFollowing the steps from vite’s scaffolding docs we’ll run the following command from the monorepo’s top-level directory to initialize a Vue app:\n\n\n\nyarn create vite littlebutton-vue --template vue\n\n\n\nThis generates scaffolding with some provided instructions to run the starter Vue app:\n\n\n\ncd littlebutton-vue\nyarn\nyarn dev\n\n\n\nThis should fire up a starter page in the browser with some heading like “Hello Vue 3 + Vite.” From here, we can update src/App.vue to:\n\n\n\n<template>\n  <div id=\"app\">\n    <Button class=\"btn\">Go</Button>\n  </div>\n</template>\n\n<script>\nimport Button from './components/Button.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    Button\n  }\n}\n</script>\n\n\n\nAnd we’ll replace any src/components/* with src/components/Button.vue:\n\n\n\n<template>\n  <button :class=\"classes\"><slot /></button>\n</template>\n\n<script>\nexport default {\n  name: 'Button',\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n      }\n    }\n  }\n}\n</script>\n\n<style module>\n.btn {\n  color: slateblue;\n}\n</style>\n\n\n\nLet’s break this down a bit:\n\n\n\n:class=\"classes\" is using Vue’s binding to call the computed classes method.The classes method, in turn, is utilizing CSS Modules in Vue with the this.$style.btn syntax which will use styles contained in a <style module> tag.\n\n\n\nFor now, we’re hardcoding color: slateblue simply to test that things are working properly within the component. Try firing up the app again with yarn dev. If you see the button with our declared test color, then it’s working!\n\n\n\nNow we’re going to write a Node script that copies our littlebutton-css/css/button.css into our Button.vue file similar to the one we did for the React implementation. As mentioned, this component is a SFC so we’re going to have to do this a little differently using a simple regular expression.\n\n\n\nAdd the following little Node.js script to littlebutton-vue/copystyles.js:\n\n\n\nconst fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst vue = fs.readFileSync(\"./src/components/Button.vue\", \"utf8\");\n// Take everything between the starting and closing style tag and replace\nconst styleRegex = /<style module>([\\s\\S]*?)<\\/style>/;\nlet withSynchronizedStyles = vue.replace(styleRegex, `<style module>\\n${css}\\n</style>`);\nfs.writeFileSync(\"./src/components/Button.vue\", withSynchronizedStyles, \"utf8\");\n\n\n\nThere’s a bit more complexity in this script, but using replace to copy text between opening and closing style tags via regex isn’t too bad.\n\n\n\nNow let’s add the following two scripts to the scripts clause in the littlebutton-vue/package.json file:\n\n\n\n\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles && vite\",\n\n\n\nNow run yarn syncStyles and look at ./src/components/Button.vue again. You should see that our style module gets replaced with this:\n\n\n\n<style module>\n.btn {\n  color: hotpink;\n}\n</style>\n\n\n\nRun the Vue app again with yarn dev and verify you get the expected results — yes, a button with hotpink text. If so, we’re good to move on to the next framework workspace!\n\n\nSvelte\n\n\nPer the Svelte docs, we should kick off our littlebutton-svelte workspace with the following, starting from the monorepo’s top-level directory:\n\n\n\nnpx degit sveltejs/template littlebutton-svelte\ncd littlebutton-svelte\nyarn && yarn dev\n\n\n\nConfirm you can hit the “Hello World” start page at http://localhost:5000. Then, update littlebutton-svelte/src/App.svelte:\n\n\n\n<script>\n  import Button from './Button.svelte';\n</script>\n<main>\n  <Button>Go</Button>\n</main>\n\n\n\nAlso, in littlebutton-svelte/src/main.js, we want to remove the name prop so it looks like this:\n\n\n\nimport App from './App.svelte';\n\nconst app = new App({\n  target: document.body\n});\n\nexport default app;\n\n\n\nAnd finally, add littlebutton-svelte/src/Button.svelte with the following:\n\n\n\n<button class=\"btn\">\n  <slot></slot>\n</button>\n\n<script>\n</script>\n\n<style>\n  .btn {\n    color: saddlebrown;\n  }\n</style>\n\n\n\nOne last thing: Svelte appears to name our app: \"name\": \"svelte-app\" in the package.json. Change that to \"name\": \"littlebutton-svelte\" so it’s consistent with the workspaces name in our top-level package.json file.\n\n\n\nOnce again, we can copy our baseline littlebutton-css/css/button.css into our Button.svelte. As mentioned, this component is a SFC, so we’re going to have to do this using a regular expression. Add the following Node script to littlebutton-svelte/copystyles.js:\n\n\n\nconst fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst svelte = fs.readFileSync(\"./src/Button.svelte\", \"utf8\");\nconst styleRegex = /<style>([\\s\\S]*?)<\\/style>/;\nlet withSynchronizedStyles = svelte.replace(styleRegex, `<style>\\n${css}\\n</style>`);\nfs.writeFileSync(\"./src/Button.svelte\", withSynchronizedStyles, \"utf8\");\n\n\n\nThis is super similar to the copy script we used with Vue, isn’t it? We’ll add similar scripts to our package.json script:\n\n\n\n\"dev\": \"yarn syncStyles && rollup -c -w\",\n\"syncStyles\": \"node copystyles.js\",\n\n\n\nNow run yarn syncStyles && yarn dev. If all is good, we once again should see a button with hotpink text.\n\n\n\nIf this is starting to feel repetitive, all I have to say is welcome to my world. What I’m showing you here is essentially the same process I’ve been using to build my AgnosticUI project!\n\n\nAngular\n\n\nYou probably know the drill by now. From the monorepo’s top-level directory, install Angular and create an Angular app. If we were creating a full-blown UI library we’d likely use ng generate library or even nx. But to keep things as straightforward as possible we’ll set up a boilerplate Angular app as follows:\n\n\n\nnpm install -g @angular/cli ### unless you already have installed\nng new littlebutton-angular ### choose no for routing and CSS\n? Would you like to add Angular routing? (y/N) N\n❯ CSS \n  SCSS   [ https://sass-lang.com/documentation/syntax#scss ] \n  Sass   [ https://sass-lang.com/documentation/syntax#the-indented-syntax ] \n  Less   [ http://lesscss.org ]\n\ncd littlebutton-angular && ng serve --open\n\n\n\nWith the Angular setup confirmed, let’s update some files. cd littlebutton-angular, delete the src/app/app.component.spec.ts file, and add a button component in src/components/button.component.ts, like this:\n\n\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {}\n\n\n\nAdd the following to src/components/button.component.html:\n\n\n\n<button class=\"btn\">Go</button>\n\n\n\nAnd put this in the src/components/button.component.css file for testing:\n\n\n\n.btn {\n  color: fuchsia;\n}\n\n\n\nIn src/app/app.module.ts:\n\n\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { ButtonComponent } from '../components/button.component';\n\n@NgModule({\n  declarations: [AppComponent, ButtonComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n\n\n\nNext, replace src/app/app.component.ts with:\n\n\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {}\n\n\n\nThen, replace src/app/app.component.html with:\n\n\n\n<main>\n  <little-button>Go</little-button>\n</main>\n\n\n\nWith that, let’s run yarn start and verify our button with fuchsia text renders as expected.\n\n\n\nAgain, we want to copy over the CSS from our baseline workspace. We can do that by adding this to littlebutton-angular/copystyles.js:\n\n\n\nconst fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/components/button.component.css\", css, \"utf8\");\n\n\n\nAngular is nice in that it uses ViewEncapsulation that defaults to to emulate which mimics, according to the docs,\n\n\n\n[…] the behavior of shadow DOM by preprocessing (and renaming) the CSS code to effectively scope the CSS to the component’s view.\n\n\n\nThis basically means we can literally copy over button.css and use it as-is.\n\n\n\nFinally, update the package.json file by adding these two lines in the scripts section:\n\n\n\n\"start\": \"yarn syncStyles && ng serve\",\n\"syncStyles\": \"node copystyles.js\",\n\n\n\nWith that, we can now run yarn start once more and verify our button text color (which was fuchsia) is now hotpink.\n\n\nWhat have we just done?\n\n\nLet’s take a break from coding and think about the bigger picture and what we’ve just done. Basically, we’ve set up a system where any changes to our CSS package’s button.css will get copied over into all the framework implementations as a result of our copystyles.js Node scripts. Further, we’ve incorporated idiomatic conventions for each of the frameworks:\n\n\n\nSFC for Vue and SvelteCSS Modules for React (and Vue within the SFC <style module> setup)ViewEncapsulation for Angular\n\n\n\nOf course I state the obvious that these aren’t the only ways to do CSS in each of the above frameworks (e.g. CSS-in-JS is a popular choice), but they are certainly accepted practices and are working quite well for our greater goal — to have a single CSS source of truth to drive all framework implementations.\n\n\n\nIf, for example, our button was in use and our design team decided we wanted to change from 4px to 3px border-radius, we could update the one file, and any separate implementations would stay synced.\n\n\n\nThis is compelling if you have a polyglot team of developers that enjoy working in multiple frameworks, or, say an offshore team (that’s 3× productive in Angular) that’s being tasked to build a back-office application, but your flagship product is built in React. Or, you’re building an interim admin console and you’d love to experiment with using Vue or Svelte. You get the picture.\n\n\nFinishing touches\n\n\nOK, so we have the monorepo architecture in a really good spot. But there’s a few things we can do to make it even more useful as far as the developer experience goes.\n\n\nBetter start scripts\n\n\nLet’s move back up to our top-level monorepo directory and update its package.json scripts section with the following so we can kick any framework implementation without cd‘ing:\n\n\n\n// ...\n\"scripts\": {\n  \"start:react\": \"yarn workspace littlebutton-react dev\",\n  \"start:vue\": \"yarn workspace littlebutton-vue dev \",\n  \"start:svelte\": \"yarn workspace littlebutton-svelte dev\",\n  \"start:angular\": \"yarn workspace littlebutton-angular start\"\n},\n\n\nBetter baseline styles\n\n\nWe can also provide a better set of baseline styles for the button so it starts from a nice, neutral place. Here’s what I did in the littlebutton-css/css/button.css file.\n\n\n\n\n  \n          View Full Snippet      \n  \n\n.btn {\n  --button-dark: #333;\n  --button-line-height: 1.25rem;\n  --button-font-size: 1rem;\n  --button-light: #e9e9e9;\n  --button-transition-duration: 200ms;\n  --button-font-stack:\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    \"Segoe UI\",\n    Roboto,\n    Ubuntu,\n    \"Helvetica Neue\",\n    sans-serif;\n\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n  user-select: none;\n  appearance: none;\n  cursor: pointer;\n  box-sizing: border-box;\n  transition-property: all;\n  transition-duration: var(--button-transition-duration);\n  color: var(--button-dark);\n  background-color: var(--button-light);\n  border-color: var(--button-light);\n  border-style: solid;\n  border-width: 1px;\n  font-family: var(--button-font-stack);\n  font-weight: 400;\n  font-size: var(--button-font-size);\n  line-height: var(--button-line-height);\n  padding-block-start: 0.5rem;\n  padding-block-end: 0.5rem;\n  padding-inline-start: 0.75rem;\n  padding-inline-end: 0.75rem;\n  text-decoration: none;\n  text-align: center;\n}\n\n/* Respect users reduced motion preferences */\n@media (prefers-reduced-motion) {\n  .btn {\n    transition-duration: 0.001ms !important;\n  }\n}\n\n\n\n\n\n\n\n\n\nLet’s test this out! Fire up each of the four framework implementations with the new and improved start scripts and confirm the styling changes are in effect.\n\n\n\n\n\n\n\nOne CSS file update proliferated to four frameworks — pretty cool, eh!?\n\n\nSet a primary mode\n\n\nWe’re going to add a mode prop to each of our button’s and implement primary mode next. A primary button could be any color but we’ll go with a shade of green for the background and white text. Again, in the baseline stylesheet:\n\n\n\n.btn {\n  --button-primary: #14775d;\n  --button-primary-color: #fff;\n  /* ... */\n}\n\n\n\nThen, just before the @media (prefers-reduced-motion) query, add the following btn-primary to the same baseline stylesheet:\n\n\n\n.btn-primary {\n  background-color: var(--button-primary);\n  border-color: var(--button-primary);\n  color: var(--button-primary-color);\n}\n\n\n\nThere we go! Some developer conveniences and better baseline styles!\n\n\nUpdating each component to take a mode property\n\n\nNow that we’ve added our new primary mode represented by the .btn-primary class, we want to sync the styles for all four framework implementations. So, let’s add some more package.json scripts to our top level scripts:\n\n\n\n\"sync:react\": \"yarn workspace littlebutton-react syncStyles\",\n\"sync:vue\": \"yarn workspace littlebutton-vue syncStyles\",\n\"sync:svelte\": \"yarn workspace littlebutton-svelte syncStyles\",\n\"sync:angular\": \"yarn workspace littlebutton-angular syncStyles\"\n\n\n\nBe sure to respect JSON’s comma rules! Depending on where you place these lines within your scripts: {...}, you’ll want to make sure there are no missing or trailing commas.\n\n\n\nGo ahead and run the following to fully synchronize the styles:\n\n\n\nyarn sync:angular && yarn sync:react && yarn sync:vue && yarn sync:svelte\n\n\n\nRunning this doesn’t change anything because we haven’t applied the primary class yet, but you should at least see the CSS has been copied over if you go look at the framework’s button component CSS.\n\n\nReact\n\n\nIf you haven’t already, double-check that the updated CSS got copied over into littlebutton-react/src/button.css. If not, you can run yarn syncStyles. Note that if you forget to run yarn syncStyles our dev script will do this for us when we next start the application anyway:\n\n\n\n\"dev\": \"yarn syncStyles && vite\",\n\n\n\nFor our React implementation, we additionally need to add a composed CSS Modules class in littlebutton-react/src/button.module.css that is composed from the new .btn-primary:\n\n\n\n.btnPrimary {\n  composes: btn-primary from './button.css';\n}\n\n\n\nWe’ll also update littlebutton-react/src/App.jsx:\n\n\n\nimport \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = ({ mode }) => {\n  const primaryClass = mode ? styles[`btn${mode.charAt(0).toUpperCase()}${mode.slice(1)}`] : '';\n  const classes = primaryClass ? `${styles.btn} ${primaryClass}` : styles.btn;\n  return <button className={classes}>Go</button>;\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button mode=\"primary\" />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\nFire up the React app with yarn start:react from the top-level directory. If all goes well, you should now see your green primary button.\n\n\n\n\n\n\n\nAs a note, I’m keeping the Button component in App.jsx for brevity. Feel free to tease out the Button component into its own file if that bothers you.\n\n\nVue\n\n\nAgain, double-check that the button styles were copied over and, if not, run yarn syncStyles.\n\n\n\nNext, make the following changes to the <script> section of littlebutton-vue/src/components/Button.vue:\n\n\n\n<script>\nexport default {\n  name: 'Button',\n  props: {\n    mode: {\n      type: String,\n      required: false,\n      default: '',\n      validator: (value) => {\n        const isValid = ['primary'].includes(value);\n        if (!isValid) {\n          console.warn(`Allowed types for Button are primary`);\n        }\n        return isValid;\n      },\n    }\n  },\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n        [this.$style['btn-primary']]: this.mode === 'primary',\n      }\n    }\n  }\n}\n</script>\n\n\n\nNow we can update the markup in littlebutton-vue/src/App.vue to use the new mode prop:\n\n\n\n<Button mode=\"primary\">Go</Button>\n\n\n\nNow you can yarn start:vue from the top-level directory and check for the same green button.\n\n\nSvelte\n\n\nLet’s cd into littlebutton-svelte and verify that the styles in littlebutton-svelte/src/Button.svelte have the new .btn-primary class copied over, and yarn syncStyles if you need to. Again, the dev script will do that for us anyway on the next startup if you happen to forget.\n\n\n\nNext, update the Svelte template to pass the mode of primary. In src/App.svelte:\n\n\n\n<script>\n  import Button from './Button.svelte';\n</script>\n<main>\n  <Button mode=\"primary\">Go</Button>\n</main>\n\n\n\nWe also need to update the top of our src/Button.svelte component itself to accept the mode prop and apply the CSS Modules class:\n\n\n\n<button class=\"{classes}\">\n  <slot></slot>\n</button>\n<script>\n  export let mode = \"\";\n  const classes = [\n    \"btn\",\n    mode ? `btn-${mode}` : \"\",\n  ].filter(cls => cls.length).join(\" \");\n</script>\n\n\n\nNote that the <styles> section of our Svelte component shouldn’t be touched in this step.\n\n\n\nAnd now, you can yarn dev from littlebutton-svelte (or yarn start:svelte from a higher directory) to confirm the green button made it!\n\n\nAngular\n\n\nSame thing, different framework: check that the styles are copied over and run yarn syncStyles if needed.\n\n\n\nLet’s add the mode prop to the littlebutton-angular/src/app/app.component.html file:\n\n\n\n<main>\n  <little-button mode=\"primary\">Go</little-button>\n</main>\n\n\n\nNow we need to set up a binding to a classes getter to compute the correct classes based on if the mode was passed in to the component or not. Add this to littlebutton-angular/src/components/button.component.html (and note the binding is happening with the square brackets):\n\n\n\n<button [class]=\"classes\">Go</button>\n\n\n\nNext, we actually need to create the classes binding in our component at littlebutton-angular/src/components/button.component.ts:\n\n\n\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {\n  @Input() mode: 'primary' | undefined = undefined;\n\n  public get classes(): string {\n    const modeClass = this.mode ? `btn-${this.mode}` : '';\n    return [\n      'btn',\n      modeClass,\n    ].filter(cl => cl.length).join(' ');\n  }\n}\n\n\n\nWe use the Input directive to take in the mode prop, then we create a classes accessor which adds the mode class if it’s been passed in.\n\n\n\nFire it up and look for the green button!\n\n\nCode complete\n\n\nIf you’ve made it this far, congratulations — you’ve reached code complete! If something went awry, I’d encourage you to cross-reference the source code over at GitHub on the the-little-button-that-could-series branch. As bundlers and packages have a tendency to change abruptly, you might want to pin your package versions to the ones in this branch if you happen to experience any dependency issues.\n\n\n\nTake a moment to go back and compare the four framework-based button component implementations we just built. They’re still small enough to quickly notice some interesting differences in how props get passed in, how we bind to props, and how CSS name collisions are prevented among other subtle differences. As I continue to add components to AgnosticUI (which supports these exact same four frameworks), I’m continually pondering which offers the best developer experience. What do you think?\n\n\nHomework\n\n\nIf you’re the type that likes to figure things out on your own or enjoys digging in deeper, here are ideas.\n\n\nButton states\n\n\nThe current button styles do not account for various states, like :hover. I believe that’s a good first exercise.\n\n\n\n/* You should really implement the following states\n   but I will leave it as an exercise for you to \n   decide how to and what values to use.\n*/\n.btn:focus {\n  /* If you elect to remove the outline, replace it\n     with another proper affordance and research how\n     to use transparent outlines to support windows\n     high contrast\n  */\n}\n.btn:hover { }\n.btn:visited { }\n.btn:active { }\n.btn:disabled { }\n\n\nVariants\n\n\nMost button libraries support many button variations for things like sizes, shapes, and colors. Try creating more than the primary mode we already have. Maybe a secondary variation? A warning or success? Maybe filled and outline? Again, you can look at AgnosticUI’s buttons page for ideas.\n\n\nCSS custom properties\n\n\nIf you haven’t started using CSS custom properties yet, I’d strongly recommend it. You can start by having a look at AgnosticUI’s common styles. I heavily lean on custom properties in there. Here are some great articles that cover what custom properties are and how you might leverage them:\n\n\n\nA Complete Guide to Custom PropertiesA DRY Approach to Color Themes in CSS\n\n\nTypes\n\n\nNo… not typings, but the <button> element’s type attribute. We didn’t cover that in our component but there’s an opportunity to extend the component to other use cases with valid types, like button, submit, and reset. This is pretty easy to do and will greatly improve the button’s API.\n\n\nMore ideas\n\n\nGosh, you could do so much — add linting, convert it to Typescript, audit the accessibility, etc.\n\n\n\nThe current Svelte implementation is suffering from some pretty loose assumptions as we have no defense if the valid primary mode isn’t passed — that would produce a garbage CSS class:\n\n\n\nmode ? `btn-${mode}` : \"\",\n\n\n\nYou could say, “Well, .btn-garbage as a class isn’t exactly harmful.” But it’s probably a good idea to style defensively when and where possible.\n\n\nPotential pitfalls\n\n\nThere are some things you should be aware of before taking this approach further:\n\n\n\nPositional CSS based on the structure of the markup will not work well for the CSS Modules based techniques used here.Angular makes positional techniques even harder as it generates :host element representing each component view. This means you have these extra elements in between your template or markup structure. You’ll need to work around that.Copying styles across workspace packages is a bit of an anti-pattern to some folks. I justify it because I believe the benefits outweigh the costs; also, when I think about how monorepos use symlinks and (not-so-failproof) hoisting, I don’t feel so bad about this approach.You’ll have to subscribe to the decoupled techniques used here, so no CSS-in-JS.\n\n\n\nI believe that all approaches to software development have their pros and cons and you ultimately have to decide if sharing a single CSS file across frameworks works for you or your specific project. There are certainly other ways you could do this (e.g. using littlebuttons-css as an npm package dependency) if needed.\n\n\nConclusion\n\n\nHopefully I’ve whet your appetite and you’re now really intrigued to create UI component libraries and/or design systems that are not tied to a particular framework. Maybe you have a better idea on how to achieve this — I’d love to hear your thoughts in the comments!\n\n\n\nI’m sure you’ve seen the venerable TodoMVC project and how many framework implementations have been created for it. Similarly, wouldn’t it be nice to have a UI component library of primitives available for many frameworks? Open UI is making great strides to properly standardize native UI component defaults, but I believe we’ll always need to insert ourselves to some extent. Certainly, taking a good year to build a custom design system is quickly falling out of favor and companies are seriously questioning their ROI. Some sort of scaffolding is required to make the endeavor practical.\n\n\n\nThe vision of AgnosticUI is to have a relatively agnostic way to build design systems quickly that are not tied down to a particular frontend framework. If you’re compelled to get involved, the project is still very early and approachable and I’d love some help! Plus, you’re already pretty familiar with the how the project works now that you’ve gone through this tutorial!\n\nHow to Make a Component That Supports Multiple Frameworks in a Monorepo originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-05T15:42:59.000Z",
      "date_modified": "2022-01-05T15:42:59.000Z",
      "_plugin": {
        "pageFilename": "6fa12e1bab080a7c2877e50c0b9918fa4aef988e84dd3cafb88dd586add1919d.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359880",
      "url": "https://css-tricks.com/should-css-override-default-styles/",
      "title": "Should CSS Override Default Browser Styles?",
      "summary": "CSS overrides can change the default look of almost anything:\n\nYou can use CSS to override what a checkbox or radio button looks like, but if you don’t, the checkbox will look like a default checkbox on your operating system \n\n…\n\nShould CSS Override Default Browser Styles? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>CSS overrides can change the default look of almost anything:</p>\n\n\n\n<ul><li>You can use CSS to <a href=\"https://css-tricks.com/zero-trickery-custom-radios-and-checkboxes/\">override what a checkbox or radio button</a> looks like, but if you don&#8217;t, the checkbox will look like a default checkbox on your operating system and some would say that&#8217;s best for accessibility and usability.</li><li>You can use CSS to <a href=\"https://css-tricks.com/making-a-better-custom-select-element/\">override what a select menu</a> looks like, but if you don&#8217;t, the select will look like a default select menu on your operating system and some would say that&#8217;s best for accessibility and usability.</li><li>You can <a href=\"https://css-tricks.com/a-complete-guide-to-links-and-buttons/#links-heading-2\">override what anchor links look like</a>, but some would say they should be blue with underlines because that is the default and it&#8217;s best for accessibility and usability.</li><li>You can <a href=\"https://css-tricks.com/the-current-state-of-styling-scrollbars/\">override what scrollbars look like</a>, but if you don&#8217;t, the scrollbars will look (and behave) the way default scrollbars do on your operating system, and some would say that&#8217;s best for accessibility and usability. </li></ul>\n\n\n\n<p>It just goes on and on&#8230;</p>\n\n\n\n<span id=\"more-359880\"></span>\n\n\n\n<ul><li>You can <a href=\"https://css-tricks.com/a-complete-guide-to-links-and-buttons/#buttons-heading-2\">customize what a button looks like</a>, but&#8230;</li><li>You <a href=\"https://css-tricks.com/almanac/properties/c/cursor/\">can customize what the cursor looks like</a>, or particular elements on your site, but&#8230;</li><li>You can <a href=\"https://css-tricks.com/almanac/selectors/s/selection/\">change the text highlighting color</a>, you can <a href=\"https://css-tricks.com/almanac/properties/a/accent-color/\">change the accent color</a>, heck, soon you&#8217;ll be able to <a href=\"https://www.azabani.com/2021/12/16/spelling-grammar-2.html\" rel=\"noopener\">customize what spelling and grammer mistakes look like</a> in editable text areas, <em>but&#8230;</em></li></ul>\n\n\n\n<p>Where do you draw the line?</p>\n\n\n\n<p>In my experience, everyone has a different line. Nearly everybody styles their buttons. Nearly everybody styles their links, but some might only customize the hue of blue and leave the underline, drawing the line at more elaborate changes. It&#8217;s fairly popular to style form elements like checkboxes, radio buttons, and selects, but some people draw the line before that.</p>\n\n\n\n<p>Some people draw a line saying you should never change a default cursor, some push that line back to make the cursor into a pointer for created interactive elements, some push that line so far they are OK with custom images as cursors. Some people draw the line with scrollbars saying they should never be customized, while some people implement elaborate designs.</p>\n\n\n\n<p>CSS is a language for changing the design of websites. Every ruleset you write likely changes the defaults of something. The lines are relatively fuzzy, but I&#8217;d say there is nothing in CSS that should be outright banned from use — it&#8217;s more about the styling <em>choices</em> you make. So when you do choose to style something, it remains usable and accessible. Heck, <code>background-color</code> can be terribly abused making for inaccessible and unusable areas of a site, but nobody raises pitchforks over that.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/should-css-override-default-styles/\">Should CSS Override Default Browser Styles?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "CSS overrides can change the default look of almost anything:\n\n\n\nYou can use CSS to override what a checkbox or radio button looks like, but if you don’t, the checkbox will look like a default checkbox on your operating system and some would say that’s best for accessibility and usability.You can use CSS to override what a select menu looks like, but if you don’t, the select will look like a default select menu on your operating system and some would say that’s best for accessibility and usability.You can override what anchor links look like, but some would say they should be blue with underlines because that is the default and it’s best for accessibility and usability.You can override what scrollbars look like, but if you don’t, the scrollbars will look (and behave) the way default scrollbars do on your operating system, and some would say that’s best for accessibility and usability. \n\n\n\nIt just goes on and on…\n\n\n\n\n\n\n\nYou can customize what a button looks like, but…You can customize what the cursor looks like, or particular elements on your site, but…You can change the text highlighting color, you can change the accent color, heck, soon you’ll be able to customize what spelling and grammer mistakes look like in editable text areas, but…\n\n\n\nWhere do you draw the line?\n\n\n\nIn my experience, everyone has a different line. Nearly everybody styles their buttons. Nearly everybody styles their links, but some might only customize the hue of blue and leave the underline, drawing the line at more elaborate changes. It’s fairly popular to style form elements like checkboxes, radio buttons, and selects, but some people draw the line before that.\n\n\n\nSome people draw a line saying you should never change a default cursor, some push that line back to make the cursor into a pointer for created interactive elements, some push that line so far they are OK with custom images as cursors. Some people draw the line with scrollbars saying they should never be customized, while some people implement elaborate designs.\n\n\n\nCSS is a language for changing the design of websites. Every ruleset you write likely changes the defaults of something. The lines are relatively fuzzy, but I’d say there is nothing in CSS that should be outright banned from use — it’s more about the styling choices you make. So when you do choose to style something, it remains usable and accessible. Heck, background-color can be terribly abused making for inaccessible and unusable areas of a site, but nobody raises pitchforks over that.\n\nShould CSS Override Default Browser Styles? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-04T19:50:18.000Z",
      "date_modified": "2022-01-04T19:50:18.000Z",
      "_plugin": {
        "pageFilename": "ddd0a37078967768f240261a0a1ae9072497e7a71ce99849d7acd70ca5706b70.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359838",
      "url": "https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/",
      "title": "CSS Underlines Are Too Thin and Too Low in Chrome",
      "summary": "I’ve encountered two bugs in Chrome while testing the new CSS text-decoration-thickness and text-underline-offset properties, and I want to share them with you here in this article.\nTable of Contents\n\n\nDefault underlines are inconsistent\n\nLuckily, we can override the browsers’ \n\n…\n\nCSS Underlines Are Too Thin and Too Low in Chrome originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I’ve encountered two bugs in Chrome while testing the new CSS <code>text-decoration-thickness</code> and <code>text-underline-offset</code> properties, and I want to share them with you here in this article.</p>\n\n\n\n<span id=\"more-359838\"></span>\n\n\n<h2 class=\"simpletoc-title\">Table of Contents</h2><ul class=\"simpletoc\">\n<li>\n<a  href=\"#default-underlines-are-inconsistent\">Default underlines are inconsistent</a></li><li>\n<a  href=\"#luckily-we-can-override-the-browsers-defaults\">Luckily, we can override the browsers’ defaults</a></li><li>\n<a  href=\"#chrome-bug-1-underlines-are-too-thin-on-macos\">Chrome bug 1: Underlines are too thin on macOS</a></li><li>\n<a  href=\"#chrome-bug-2-underlines-are-too-low\">Chrome bug 2: Underlines are too low</a></li><li>\n<a  href=\"#help-prioritize-the-chrome-bugs\">Help prioritize the Chrome bugs</a></li></ul>\n\n\n<p>First, let&#8217;s acknowledge one thing:</p>\n\n\n<h3 id=\"default-underlines-are-inconsistent\">Default underlines are inconsistent</h3>\n\n\n<p>Let’s add a text link to a plain web page, set its <code>font-family</code> to Arial, and compare the underlines across browsers and operating systems.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2018\" height=\"944\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=2018%2C944&#038;ssl=1\" alt=\"\" class=\"wp-image-359839\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?w=2018&amp;ssl=1 2018w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=300%2C140&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=1024%2C479&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=768%2C359&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=1536%2C719&amp;ssl=1 1536w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=1000%2C468&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>From left to right: Chrome, Safari, and Firefox on macOS; Safari on iOS; Chrome, and Firefox on Windows; Chrome, and Firefox on Android.</figcaption></figure>\n\n\n\n<p>As you can see, the default underline is inconsistent across browsers. Each browser chooses their own default thickness and vertical position (offset from the baseline) for the underline. This is in line with the <a href=\"https://drafts.csswg.org/css-text-decor-4/\" rel=\"noopener\">CSS Text Decoration module</a>, which specifies the following default behavior (<code>auto</code> value):</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The user agent chooses an appropriate thickness for text decoration lines. […] The user agent chooses an appropriate offset for underlines.</p><p></p></blockquote>\n\n\n<h3 id=\"luckily-we-can-override-the-browsers-defaults\">Luckily, we can override the browsers’ defaults</h3>\n\n\n<p>There are two new, <a href=\"https://caniuse.com/mdn-css_properties_text-decoration-thickness,mdn-css_properties_text-underline-offset\" rel=\"noopener\">widely supported</a> CSS properties that allow us to precisely define the thickness and offset for our underlines:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/almanac/properties/t/text-decoration-thickness/\"><code>text-decoration-thickness</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/t/text-underline-offset/\"><code>text-underline-offset</code></a></li></ul>\n\n\n\n<p>With these properties, we can create consistent underlines even across two very different browsers, such as the Gecko-based Firefox on Android and the WebKit-based Safari on macOS.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\n  text-decoration: underline;\n  text-decoration-thickness: 0.04em;\n  text-underline-offset: 0.03em;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2016\" height=\"1426\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=2016%2C1426&#038;ssl=1\" alt=\"\" class=\"wp-image-359840\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?w=2016&amp;ssl=1 2016w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=300%2C212&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=1024%2C724&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=768%2C543&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=1536%2C1086&amp;ssl=1 1536w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=1000%2C707&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Top row: the browsers’ default underlines; bottom row: consistent underlines with CSS. (<a href=\"https://codepen.io/simevidas/pen/poWPBoX?editors=1100\" rel=\"noopener\">Demo</a>)</figcaption></figure>\n\n\n\n<p class=\"is-style-explanation\"><strong>Note:</strong> The <code>text-decoration-thickness</code> property also has a special <a href=\"https://drafts.csswg.org/css-text-decor-4/#valdef-text-decoration-thickness-from-font\" rel=\"noopener\"><code>from-font</code> value</a> that instructs browsers to use the font’s own preferred underline width, if available. I <a href=\"https://twitter.com/simevidas/status/1469790544335450112\" rel=\"noopener\">tested</a> this value with a few different fonts, but the underlines were inconsistent.</p>\n\n\n\n<p>OK, so let&#8217;s move on to the two Chrome bugs I noted earlier.</p>\n\n\n<h3 id=\"chrome-bug-1-underlines-are-too-thin-on-macos\">Chrome bug 1: Underlines are too thin on macOS</h3>\n\n\n<p>If you set the <code>text-decoration-thickness</code> property to a font-relative length value that computes to a non-integer pixel value, Chrome will “floor” that value instead of rounding it to the nearest integer. For example, if the declared thickness is <code>0.06em</code>, and that computes to <code>1.92px</code>, Chrome will paint a thickness of <code>1px</code> instead of <code>2px</code>. This issue is limited to macOS.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  font-size: 2em; /* computes to 32px */\n  text-decoration-thickness: 0.06em; /* computes to 1.92px */\n}</code></pre>\n\n\n\n<p>In the following screenshot, notice how the text decoration lines are twice as thin in Chrome (third row) than in Safari and Firefox.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1042\" height=\"462\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=1042%2C462&#038;ssl=1\" alt=\"\" class=\"wp-image-359843\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?w=1042&amp;ssl=1 1042w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=300%2C133&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=1024%2C454&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=768%2C341&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=1000%2C443&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>From top to bottom: Safari, Firefox, and Chrome on macOS. (<a href=\"https://codepen.io/simevidas/pen/qBPjavx?editors=1100\" rel=\"noopener\">Demo</a>)</figcaption></figure>\n\n\n\n<p class=\"is-style-default\">For more information about this bug, see <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1255280\" rel=\"noopener\">Chromium issue #1255280</a>.</p>\n\n\n<h3 id=\"chrome-bug-2-underlines-are-too-low\">Chrome bug 2: Underlines are too low</h3>\n\n\n<p>The <code>text-underline-offset</code> property allows us to precisely set the distance between the alphabetic baseline and the underline (the underline’s offset from the baseline). Unfortunately, this feature is currently not implemented correctly in Chrome and, as a result, the underline is positioned too low.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\n  text-decoration: underline;\n  text-decoration-color: #f707;\n\n  /* disable “skip ink” */\n  -webkit-text-decoration-skip: none; /* Safari */\n  text-decoration-skip-ink: none;\n\n  /* cover the entire descender */\n  text-decoration-thickness: 0.175em; /* descender height */\n  text-underline-offset: 0; /* no offset from baseline */\n}</code></pre>\n\n\n\n<p>Because of this bug, it is not possible to move the underline all the way up to the baseline in Chrome.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1316\" height=\"425\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=1316%2C425&#038;ssl=1\" alt=\"\" class=\"wp-image-359846\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?w=1316&amp;ssl=1 1316w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=300%2C97&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=1024%2C331&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=768%2C248&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=1000%2C323&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>From left to right: Safari, Firefox, and Chrome on macOS. View this demo <a href=\"https://codepen.io/simevidas/pen/QWqgVKo?editors=0100\" rel=\"noopener\">on CodePen</a>.</figcaption></figure>\n\n\n\n<p>For more information about this bug, see <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1172623\" rel=\"noopener\">Chromium issue #1172623</a>.</p>\n\n\n\n<p class=\"is-style-explanation\"><strong>Note:</strong> As you might have noticed from the image above, Safari draws underlines on top of descenders instead of beneath them. This is a <a href=\"https://bugs.webkit.org/show_bug.cgi?id=227445\" rel=\"noopener\">WebKit bug</a> that was fixed very recently. The fix should ship in the next version of Safari.</p>\n\n\n<h3 id=\"help-prioritize-the-chrome-bugs\">Help prioritize the Chrome bugs</h3>\n\n\n<p>The two new CSS properties for styling underlines are a welcome addition to CSS. Hopefully, the two related Chrome bugs will be fixed sooner rather than later. If these CSS features are important to you, make your voice heard by starring the bugs in Chromium’s bug tracker.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2000\" height=\"872\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=2000%2C872&#038;ssl=1\" alt=\"\" class=\"wp-image-359848\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=300%2C131&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=1024%2C446&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=768%2C335&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=1536%2C670&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=1000%2C436&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Sign in with your Google account and click the star button on issues <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1172623\" rel=\"noopener\">#1172623</a> and <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1255280\" rel=\"noopener\">#1255280</a>.</figcaption></figure>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/\">CSS Underlines Are Too Thin and Too Low in Chrome</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I’ve encountered two bugs in Chrome while testing the new CSS text-decoration-thickness and text-underline-offset properties, and I want to share them with you here in this article.\n\n\n\n\n\n\nTable of Contents\n\nDefault underlines are inconsistent\nLuckily, we can override the browsers’ defaults\nChrome bug 1: Underlines are too thin on macOS\nChrome bug 2: Underlines are too low\nHelp prioritize the Chrome bugs\n\n\nFirst, let’s acknowledge one thing:\n\n\nDefault underlines are inconsistent\n\n\nLet’s add a text link to a plain web page, set its font-family to Arial, and compare the underlines across browsers and operating systems.\n\n\n\nFrom left to right: Chrome, Safari, and Firefox on macOS; Safari on iOS; Chrome, and Firefox on Windows; Chrome, and Firefox on Android.\n\n\n\nAs you can see, the default underline is inconsistent across browsers. Each browser chooses their own default thickness and vertical position (offset from the baseline) for the underline. This is in line with the CSS Text Decoration module, which specifies the following default behavior (auto value):\n\n\n\nThe user agent chooses an appropriate thickness for text decoration lines. […] The user agent chooses an appropriate offset for underlines.\n\n\nLuckily, we can override the browsers’ defaults\n\n\nThere are two new, widely supported CSS properties that allow us to precisely define the thickness and offset for our underlines:\n\n\n\ntext-decoration-thicknesstext-underline-offset\n\n\n\nWith these properties, we can create consistent underlines even across two very different browsers, such as the Gecko-based Firefox on Android and the WebKit-based Safari on macOS.\n\n\n\nh1 {\n  text-decoration: underline;\n  text-decoration-thickness: 0.04em;\n  text-underline-offset: 0.03em;\n}\n\n\n\nTop row: the browsers’ default underlines; bottom row: consistent underlines with CSS. (Demo)\n\n\n\nNote: The text-decoration-thickness property also has a special from-font value that instructs browsers to use the font’s own preferred underline width, if available. I tested this value with a few different fonts, but the underlines were inconsistent.\n\n\n\nOK, so let’s move on to the two Chrome bugs I noted earlier.\n\n\nChrome bug 1: Underlines are too thin on macOS\n\n\nIf you set the text-decoration-thickness property to a font-relative length value that computes to a non-integer pixel value, Chrome will “floor” that value instead of rounding it to the nearest integer. For example, if the declared thickness is 0.06em, and that computes to 1.92px, Chrome will paint a thickness of 1px instead of 2px. This issue is limited to macOS.\n\n\n\na {\n  font-size: 2em; /* computes to 32px */\n  text-decoration-thickness: 0.06em; /* computes to 1.92px */\n}\n\n\n\nIn the following screenshot, notice how the text decoration lines are twice as thin in Chrome (third row) than in Safari and Firefox.\n\n\n\nFrom top to bottom: Safari, Firefox, and Chrome on macOS. (Demo)\n\n\n\nFor more information about this bug, see Chromium issue #1255280.\n\n\nChrome bug 2: Underlines are too low\n\n\nThe text-underline-offset property allows us to precisely set the distance between the alphabetic baseline and the underline (the underline’s offset from the baseline). Unfortunately, this feature is currently not implemented correctly in Chrome and, as a result, the underline is positioned too low.\n\n\n\nh1 {\n  text-decoration: underline;\n  text-decoration-color: #f707;\n\n  /* disable “skip ink” */\n  -webkit-text-decoration-skip: none; /* Safari */\n  text-decoration-skip-ink: none;\n\n  /* cover the entire descender */\n  text-decoration-thickness: 0.175em; /* descender height */\n  text-underline-offset: 0; /* no offset from baseline */\n}\n\n\n\nBecause of this bug, it is not possible to move the underline all the way up to the baseline in Chrome.\n\n\n\nFrom left to right: Safari, Firefox, and Chrome on macOS. View this demo on CodePen.\n\n\n\nFor more information about this bug, see Chromium issue #1172623.\n\n\n\nNote: As you might have noticed from the image above, Safari draws underlines on top of descenders instead of beneath them. This is a WebKit bug that was fixed very recently. The fix should ship in the next version of Safari.\n\n\nHelp prioritize the Chrome bugs\n\n\nThe two new CSS properties for styling underlines are a welcome addition to CSS. Hopefully, the two related Chrome bugs will be fixed sooner rather than later. If these CSS features are important to you, make your voice heard by starring the bugs in Chromium’s bug tracker.\n\n\n\nSign in with your Google account and click the star button on issues #1172623 and #1255280.\n\nCSS Underlines Are Too Thin and Too Low in Chrome originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-04T15:30:18.000Z",
      "date_modified": "2022-01-04T15:30:18.000Z",
      "_plugin": {
        "pageFilename": "c3247eb3e5ca8e2fa5140c485a3d75b24c681f563648beced0123b93cdeb2175.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360452",
      "url": "https://css-tricks.com/jetpack-features-we-love-and-use-at-css-tricks/",
      "title": "Jetpack Features We Love and Use at CSS-Tricks",
      "summary": "(This is a sponsored post.)\nWe use and love Jetpack around here. It’s a WordPress plugin that brings a whole suite of functionality to your site ranging from security to marketing with lots of ridiculously useful stuff in between! …\n\nJetpack Features We Love and Use at CSS-Tricks originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p><meta charset=\"utf-8\">We use and love <a href=\"https://jetpack.com/?aff=8638\" rel=\"noopener\">Jetpack</a> around here. It&#8217;s a WordPress plugin that brings a whole suite of functionality to your site ranging from security to marketing with lots of ridiculously useful stuff in between! Here&#8217;s our favorite features around&nbsp;here.</p>\n\n\n\n<span id=\"more-360452\"></span>\n\n\n\n<div class=\"wp-block-columns ticss-ddea03eb\">\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-30791cf4 jetpack-box\"><div class=\"wp-block-group__inner-container\"><h2 id=\"powerful-search\">Powerful Search</h2>\n\n\n<p>Jetpack&#8217;s Search feature gives your site an incredibly powerful search engine with the flip of a switch. You get a very fast, truly <strong>intelligent search</strong> for your entire site that is easily sortable and filterable with <a href=\"https://css-tricks.com/jetpack-instant-search/\">literally zero work on your part</a>. You can&#8217;t rely on default WordPress search — this is a must-have. Bonus: it&#8217;s all handled offsite, so there is minimal burden on your server.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2700\" height=\"2278\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=2700%2C2278&#038;ssl=1\" alt=\"Showing the full-page JetPack search feature.\" class=\"wp-image-360439\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?w=2700&amp;ssl=1 2700w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=300%2C253&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=1024%2C864&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=768%2C648&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=1536%2C1296&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=2048%2C1728&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=1000%2C844&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/search/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-634991b5 jetpack-box\"><div class=\"wp-block-group__inner-container\"><h2 id=\"backups-amp-activity\">Backups &amp; Activity</h2>\n\n\n<p>We sleep easy knowing CSS-Tricks is entirely backed up in <strong>real-time</strong>. Everything is backed up from the site&#8217;s content, comments, settings, theme files, media, even WordPress itself. </p>\n\n\n\n<p>An activity log shows off everything that happens on the site, and I use that same log to restore the site to any point in time.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1790\" height=\"1942\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=1790%2C1942&#038;ssl=1\" alt=\"Showing a timeline log of site changes in Jetpack Backup.\" class=\"wp-image-306950\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?w=1790&amp;ssl=1 1790w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=277%2C300&amp;ssl=1 277w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=944%2C1024&amp;ssl=1 944w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=768%2C833&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=1416%2C1536&amp;ssl=1 1416w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=1000%2C1085&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/upgrade/backup/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns ticss-2cedae8d\">\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-335c9a47 jetpack-box\"><div class=\"wp-block-group__inner-container\"><h2 id=\"performant-media\">Performant Media </h2>\n\n\n<p>There are at least four things you have to do with images on websites to make sure you&#8217;re serving them in a performance responsible way: (1) use the responsive images syntax to serve an appropriately sized version, (2) optimize the image, (3) lazy load the image, and (4) serve the image from a CDN. Fortunately, WordPress itself helps with #1, which can be tricky. Jetpack helps with the others with the flip of a switch.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1394\" height=\"584\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=1394%2C584&#038;ssl=1\" alt=\"\" class=\"wp-image-306938\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?w=1394&amp;ssl=1 1394w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=300%2C126&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=1024%2C429&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=768%2C322&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=1000%2C419&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/site-accelerator/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n\n\n\n<p>And don&#8217;t forget about video! <a href=\"https://jetpack.com/videopress/?aff=8638\" rel=\"noopener\">VideoPress</a> does even more for your hosted videos. No ads, beautiful feature-rich player, CDN-hosted optimized video, poster graphics for mobile, and you do absolutely nothing different with your workflow: just drag and drop videos into posts.</p>\n</div>\n\n\n\n<div class=\"wp-block-column\"><h2 id=\"markdown\">Markdown</h2>\n\n\n<p>Writing content in Markdown can be awful handy. Especially on a developer-focused site, it makes sense to offer it to users in the comment section. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2360\" height=\"1044\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=2360%2C1044&#038;ssl=1\" alt=\"\" class=\"wp-image-306933\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?w=2360&amp;ssl=1 2360w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=300%2C133&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=1024%2C453&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=768%2C340&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=1536%2C679&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=2048%2C906&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=1000%2C442&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>With Jetpack Markdown, you also get a Markdown block to use in the block editor so you can write in chunks of Markdown wherever needed.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1060\" height=\"428\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=1060%2C428&#038;ssl=1\" alt=\"\" class=\"wp-image-360441\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?w=1060&amp;ssl=1 1060w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=300%2C121&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=1024%2C413&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=768%2C310&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=1000%2C404&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/markdown/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-9decf36b jetpack-box\"><div class=\"wp-block-group__inner-container\"><h2 id=\"related-posts\">Related Posts</h2>\n\n\n<p>CSS-Tricks has thousands of pages of content! It&#8217;s a challenge for us to surface all the best stuff, particularly on a per-topic basis and without having to hand-pick everything. Showing related posts is tricky to pull off and we love that Jetpack does a great job with it, all without burdening our servers the way other related content solutions can.</p>\n</div></div>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2446\" height=\"714\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?fit=1024%2C299&amp;ssl=1\" alt=\"\" class=\"wp-image-306937\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?w=2446&amp;ssl=1 2446w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=300%2C88&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=1024%2C299&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=768%2C224&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=1536%2C448&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=2048%2C598&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=1000%2C292&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/related-posts/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-b9939e63 jetpack-box\"><div class=\"wp-block-group__inner-container\"><h2 id=\"social-connections\">Social Connections</h2>\n\n\n<p>We like to tell the world as best as we can when we publish new content. Rather than having to do that manually, we can share the post to Twitter and Facebook the second we hit that &#8220;Publish&#8221; button. You can always head back to older content and <a href=\"https://jetpack.com/2021/12/07/jetpack-10-4-re-publish-social-posts-from-the-block-editor/?aff=8638\" rel=\"noopener\">re-publish</a> to social media as well.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-10.47.05-AM.png?resize=247%2C366&#038;ssl=1\" alt=\"Showing the Jetpack publishing settings prior to publishing the post. It shows options to publish to Twitter and Facebook and an area to customize the message.\" class=\"wp-image-306947\" width=\"247\" height=\"366\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-10.47.05-AM.png?w=634&amp;ssl=1 634w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-10.47.05-AM.png?resize=202%2C300&amp;ssl=1 202w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/features/traffic/automatic-publishing/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n</div>\n</div>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>This isn&#8217;t a complete list. The official <a href=\"https://jetpack.com/features/?aff=8638\" rel=\"noopener\">features page</a> will show you even more. Every site&#8217;s needs will be different. There are all sorts of security, design, and promotion features that might be <em>your</em> favorites. If you manage a lot of WordPress sites, as agencies often too, take note there is <a href=\"https://jetpack.com/2021/10/27/announcing-jetpack-licensing/?aff=8638\" rel=\"noopener\">a new Licensing Portal</a> to manage billing across multiple sites much more easily.  </p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/jetpack-features-we-love-and-use-at-css-tricks/\">Jetpack Features We Love and Use at CSS-Tricks</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "(This is a sponsored post.)\nWe use and love Jetpack around here. It’s a WordPress plugin that brings a whole suite of functionality to your site ranging from security to marketing with lots of ridiculously useful stuff in between! Here’s our favorite features around here.\n\n\n\n\n\n\n\n\n\nPowerful Search\n\n\nJetpack’s Search feature gives your site an incredibly powerful search engine with the flip of a switch. You get a very fast, truly intelligent search for your entire site that is easily sortable and filterable with literally zero work on your part. You can’t rely on default WordPress search — this is a must-have. Bonus: it’s all handled offsite, so there is minimal burden on your server.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\n\nBackups & Activity\n\n\nWe sleep easy knowing CSS-Tricks is entirely backed up in real-time. Everything is backed up from the site’s content, comments, settings, theme files, media, even WordPress itself. \n\n\n\nAn activity log shows off everything that happens on the site, and I use that same log to restore the site to any point in time.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\n\n\n\nPerformant Media \n\n\nThere are at least four things you have to do with images on websites to make sure you’re serving them in a performance responsible way: (1) use the responsive images syntax to serve an appropriately sized version, (2) optimize the image, (3) lazy load the image, and (4) serve the image from a CDN. Fortunately, WordPress itself helps with #1, which can be tricky. Jetpack helps with the others with the flip of a switch.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\nAnd don’t forget about video! VideoPress does even more for your hosted videos. No ads, beautiful feature-rich player, CDN-hosted optimized video, poster graphics for mobile, and you do absolutely nothing different with your workflow: just drag and drop videos into posts.\n\n\n\n\nMarkdown\n\n\nWriting content in Markdown can be awful handy. Especially on a developer-focused site, it makes sense to offer it to users in the comment section. \n\n\n\n\n\n\n\nWith Jetpack Markdown, you also get a Markdown block to use in the block editor so you can write in chunks of Markdown wherever needed.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\n\n\nRelated Posts\n\n\nCSS-Tricks has thousands of pages of content! It’s a challenge for us to surface all the best stuff, particularly on a per-topic basis and without having to hand-pick everything. Showing related posts is tricky to pull off and we love that Jetpack does a great job with it, all without burdening our servers the way other related content solutions can.\n\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\nSocial Connections\n\n\nWe like to tell the world as best as we can when we publish new content. Rather than having to do that manually, we can share the post to Twitter and Facebook the second we hit that “Publish” button. You can always head back to older content and re-publish to social media as well.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\n\n\n\n\n\nThis isn’t a complete list. The official features page will show you even more. Every site’s needs will be different. There are all sorts of security, design, and promotion features that might be your favorites. If you manage a lot of WordPress sites, as agencies often too, take note there is a new Licensing Portal to manage billing across multiple sites much more easily.  \n\nJetpack Features We Love and Use at CSS-Tricks originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-04T15:28:03.000Z",
      "date_modified": "2022-01-04T15:28:03.000Z",
      "_plugin": {
        "pageFilename": "eaa92dfb6c0284fa6017cdce9a223fba9ce3345bb04a6aabb964d3bc78b71a57.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360385",
      "url": "https://css-tricks.com/css-based-fingerprinting/",
      "title": "CSS-Based Fingerprinting",
      "summary": "Fingerprinting is bad. It’s a term that refers to building up enough metadata about a user that you can essentially figure out who they are. JavaScript has access to all sorts of fingerprinting possibilities, which then combined with the IP …\n\nCSS-Based Fingerprinting originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Fingerprinting is bad. It&#8217;s a term that refers to building up enough metadata about a user that you can essentially figure out who they are. JavaScript has access to all sorts of fingerprinting possibilities, which then combined with the IP address that the server has access to, means fingerprinting is all too common. </p>\n\n\n\n<p>You don&#8217;t generally think of CSS as being a fingerprinting vector though, and thus &#8220;safe&#8221; in that way. But Oliver Brotchie <a href=\"https://csstracking.dev/\" rel=\"noopener\">has documented an idea</a> that allows for some degree of<a href=\"https://csstracking.dev/\" rel=\"noopener\"> </a>fingerprinting with CSS alone. </p>\n\n\n\n<span id=\"more-360385\"></span>\n\n\n\n<p>Think of all the <code>@media</code> queries we have. We can test for pointer type with <code>any-pointer</code>. Imagine that for each value, we request a totally unique <code>background-image</code> from a server. If that image was requested, we know those <code>@media</code> queries were true. We can start to fingerprint with something like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.pointer {\n  background-image: url('/unique-id/pointer=none')\n}\n\n@media (any-pointer: coarse) {\n  .pointer {\n    background-image: url('/unique-id/pointer=coarse')\n  }\n}\n\n@media (any-pointer: fine) {\n  .pointer {\n    background-image: url('/unique-id/pointer=fine')\n  }\n}</code></pre>\n\n\n\n<p>Combine that with the fact that we can test for a dark mode preference with <code>prefers-color-scheme</code>, the fingerprint gets a bit clearer. In fact, it&#8217;s the <a href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/#what-lies-ahead\">current draft for CSS</a> user prefer media queries that Oliver is most concerned about:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Not only will the upcoming draft make this method scalable, but it will also increase its precision. Currently, without alternative means, it is hard to conclusively link every request to a specific visitor as the only feasible way to determine their origin, is to group the requests by the IP address of the connection. However, with the new draft, by generating a randomised string and interpolating it into the URL tag for every visitor, we can accurately identify all requests from said visitor.</p></blockquote>\n\n\n\n<p>There are tons more. We can make media queries that are <code>1px</code> apart and request a background image for each, perfectly guessing the visitor&#8217;s window size. There are probably a dozen or more exotic media queries that are rarely used, but are useful specifically to fingerprinting with CSS. Combine that with <code>@supports</code> queries for all sorts of things to essentially guess the exact browser. <em>And combine that</em> with the classic technique of testing for installation of specific local fonts, and you have a half-decent fingerprinting machine. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@font-face {\n  font-family: 'some-font';\n  src: local(some font), url('/unique-id/some-font');\n}\n\n.some-font {\n  font-family:'some-font';\n}</code></pre>\n\n\n\n<p>The generated CSS to do it is massive (<a href=\"https://github.com/OliverBrotchie/CSS-Fingerprint/blob/main/fingerprint.sass\" rel=\"noopener\">here&#8217;s the Sass</a> to generate it), but apparently it&#8217;s heavily reduced once we can use custom properties in URLs. </p>\n\n\n\n<p>I&#8217;m not heavily worried about it, mostly because I don&#8217;t disable JavaScript and JavaScript is so much more widely capable of fingerprinting already. Plus, there are already other types of CSS security vulnerabilities, from reading visited links (which browsers have addressed), keylogging, and user-generated inline styles, among others that folks have pointed out in <a href=\"https://css-tricks.com/css-security-vulnerabilities/\">another article on the topic</a>.</p>\n\n\n\n<p>But Oliver&#8217;s research on fingerprinting is really good and worthy of a look by everyone who knows more about web security than I do.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-based-fingerprinting/\">CSS-Based Fingerprinting</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Fingerprinting is bad. It’s a term that refers to building up enough metadata about a user that you can essentially figure out who they are. JavaScript has access to all sorts of fingerprinting possibilities, which then combined with the IP address that the server has access to, means fingerprinting is all too common. \n\n\n\nYou don’t generally think of CSS as being a fingerprinting vector though, and thus “safe” in that way. But Oliver Brotchie has documented an idea that allows for some degree of fingerprinting with CSS alone. \n\n\n\n\n\n\n\nThink of all the @media queries we have. We can test for pointer type with any-pointer. Imagine that for each value, we request a totally unique background-image from a server. If that image was requested, we know those @media queries were true. We can start to fingerprint with something like this:\n\n\n\n.pointer {\n  background-image: url('/unique-id/pointer=none')\n}\n\n@media (any-pointer: coarse) {\n  .pointer {\n    background-image: url('/unique-id/pointer=coarse')\n  }\n}\n\n@media (any-pointer: fine) {\n  .pointer {\n    background-image: url('/unique-id/pointer=fine')\n  }\n}\n\n\n\nCombine that with the fact that we can test for a dark mode preference with prefers-color-scheme, the fingerprint gets a bit clearer. In fact, it’s the current draft for CSS user prefer media queries that Oliver is most concerned about:\n\n\n\nNot only will the upcoming draft make this method scalable, but it will also increase its precision. Currently, without alternative means, it is hard to conclusively link every request to a specific visitor as the only feasible way to determine their origin, is to group the requests by the IP address of the connection. However, with the new draft, by generating a randomised string and interpolating it into the URL tag for every visitor, we can accurately identify all requests from said visitor.\n\n\n\nThere are tons more. We can make media queries that are 1px apart and request a background image for each, perfectly guessing the visitor’s window size. There are probably a dozen or more exotic media queries that are rarely used, but are useful specifically to fingerprinting with CSS. Combine that with @supports queries for all sorts of things to essentially guess the exact browser. And combine that with the classic technique of testing for installation of specific local fonts, and you have a half-decent fingerprinting machine. \n\n\n\n@font-face {\n  font-family: 'some-font';\n  src: local(some font), url('/unique-id/some-font');\n}\n\n.some-font {\n  font-family:'some-font';\n}\n\n\n\nThe generated CSS to do it is massive (here’s the Sass to generate it), but apparently it’s heavily reduced once we can use custom properties in URLs. \n\n\n\nI’m not heavily worried about it, mostly because I don’t disable JavaScript and JavaScript is so much more widely capable of fingerprinting already. Plus, there are already other types of CSS security vulnerabilities, from reading visited links (which browsers have addressed), keylogging, and user-generated inline styles, among others that folks have pointed out in another article on the topic.\n\n\n\nBut Oliver’s research on fingerprinting is really good and worthy of a look by everyone who knows more about web security than I do.\n\nCSS-Based Fingerprinting originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-03T21:45:10.000Z",
      "date_modified": "2022-01-03T21:45:10.000Z",
      "_plugin": {
        "pageFilename": "2cb7f5fbced9915e912da31ac839ebb4b1042cce9d3e18ae9821525746428e81.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359615",
      "url": "https://css-tricks.com/how-to-create-a-browser-extension/",
      "title": "How to Create a Browser Extension",
      "summary": "I’ll bet you are using browser extensions right now. Some of them are extremely popular and useful, like ad blockers, password managers, and PDF viewers. These extensions (or “add-ons”) are not limited to those purposes — you can do a …\n\nHow to Create a Browser Extension originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I’ll bet you are using browser extensions right now. Some of them are extremely popular and useful, like ad blockers, password managers, and PDF viewers. These extensions (or &#8220;add-ons&#8221;) are not limited to those purposes — you can do a lot more with them! In this article, I will give you an introduction on how to create one. Ultimately, we’ll make it work in multiple browsers.</p>\n\n\n\n<span id=\"more-359615\"></span>\n\n\n<h3 id=\"what-were-making\">What we’re making</h3>\n\n\n<p>We’re making an extension called <strong>&#8220;Transcribers of Reddit&#8221;</strong> and it’s going to improve Reddit’s accessibility by moving specific comments to the top of the comment section and adding <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\" rel=\"noopener\"><code>aria-</code> attributes</a> for screen readers. We will also take our extension a little further with options for adding borders and backgrounds to comments for better text contrast.</p>\n\n\n\n<p>The whole idea is that you’ll get a nice introduction for how to develop a browser extension. We will start by creating the extension for Chromium-based browsers (e.g. Google Chrome, Microsoft Edge, Brave, etc.). In a future post we will port the extension to work with Firefox, as well as Safari which <a href=\"https://webkit.org/blog/11989/new-webkit-features-in-safari-15/\" rel=\"noopener\">recently added support for Web Extensions</a> in both the MacOS and iOS versions of the browser.</p>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/Lars418/torExtension\" rel=\"noopener\">GitHub repo</a></div>\n</div>\n\n\n\n<p>Ready? Let’s take this one step at a time.</p>\n\n\n<h3 id=\"create-a-working-directory\">Create a working directory</h3>\n\n\n<p>Before anything else, we need a working space for our project. All we really need is to create a folder and give it a name (which I’m calling <code>transcribers-of-reddit</code>). Then, create another folder inside that one named <code>src</code> for our source code.</p>\n\n\n<h3 id=\"define-the-entry-point\">Define the entry point</h3>\n\n\n<p>The entry point is a file that contains general information about the extension (i.e. extension name, description, etc.) and defines permissions or scripts to execute.</p>\n\n\n\n<p>Our entry point can be a <code>manifest.json</code> file located in the <code>src</code> folder we just created. In it, let’s add the following three properties:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\"\n}</code></pre>\n\n\n\n<p>The <code>manifest_version</code> is similar to version in npm or Node. It defines what APIs are available (or not). We’re going to work on the bleeding edge and use the latest version, 3 (also known as as <code>mv3</code>).</p>\n\n\n\n<p>The second property is <code>name</code> and it specifies our extension name. This name is what’s displayed everywhere our extension appears, like <a href=\"https://chrome.google.com/webstore\" rel=\"noopener\">Chrome Web Store</a> and the <code>chrome://extensions</code> page in the Chrome browser.</p>\n\n\n\n<p>Then there’s <code>version</code>. It labels the extension with a version number. Keep in mind that this property (in contrast to <code>manifest_version</code>) is a string that can only contain numbers and dots (e.g. 1.3.5).</p>\n\n\n<h3 id=\"more-manifestjson-information\">More <code>manifest.json</code> information</h3>\n\n\n<p>There’s actually a lot more we can add to help add context to our extension. For example, we can provide a <code>description</code> that explains what the extension does. It’s a good idea to provide these sorts of things, as it gives users a better idea of what they’re getting into when they use it.</p>\n\n\n\n<p>In this case, we’re not only adding a description, but supplying icons and a web address that Chrome Web Store points to on the extension’s page.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\"\n}</code></pre>\n\n\n\n<ul><li>The <code>description</code> is displayed on Chrome’s management page (<code>chrome://extensions</code>) and should be brief, less than 132 characters.</li><li>The <code>icons</code> are used in lots of places. As the <a href=\"https://developer.chrome.com/docs/extensions/mv3/manifest/icons/\" rel=\"noopener\">docs</a> state, it’s best to provide three versions of the same icon in different resolutions, preferably as a PNG file. Feel free to use the ones in the <a href=\"https://github.com/Lars418/torExtension/tree/main/src/images/logo\" rel=\"noopener\">GitHub repository</a> for this example.</li><li>The <code>homepage_url</code> can be used to connect your website with the extension. A button including the link will be displayed when clicking on &#8220;More details&#8221; on the management page.</li></ul>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img loading=\"lazy\" width=\"566\" height=\"851\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/image-2.png?resize=566%2C851&#038;ssl=1\" alt=\"\" class=\"wp-image-359642\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/image-2.png?w=566&amp;ssl=1 566w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/image-2.png?resize=200%2C300&amp;ssl=1 200w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Our opened extension card inside the extension management page.</figcaption></figure></div>\n\n\n<h3 id=\"setting-permissions\">Setting permissions</h3>\n\n\n<p>One major advantage extensions have is that their APIs allow you to interact directly with the browser. But we have to explicitly give the extension those permissions, which also goes inside the <code>manifest.json</code> file.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"13,14,15,16\"><code markup=\"tt\">\n{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\",\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\",\n\n  \"permissions\": [\n    \"storage\",\n    \"webNavigation\"\n  ]\n}</code></pre>\n\n\n\n<p>What did we just give this extension permission to? First, storage. We want this extension to be able to save the user’s settings, so we need to access the browser’s web storage to hold them. For example, if the user wants red borders on the comments, then we’ll save that for next time rather than making them set it again.</p>\n\n\n\n<p>We also gave the extension permission to look at how the user navigated to the current screen. Reddit is a single-page application (SPA) which means it doesn’t trigger a page refresh. We need to &#8220;catch&#8221; this interaction, as Reddit will only load the comments of a post if we click on it. So, that’s why we’re tapping into <code>webNavigation</code>.</p>\n\n\n\n<p>We’ll get to executing code on a page later as it requires a whole new entry inside <code>manifest.json</code>.</p>\n\n\n\n<p>/explanation Depending on which permissions are allowed, the browser might display a warning to the user to accept the permissions. It’s only certain ones, though, and <a href=\"https://developer.chrome.com/docs/extensions/mv3/permission_warnings/#permissions_with_warnings\" rel=\"noopener\">Chrome has a nice outline of them</a>.</p>\n\n\n<h3 id=\"managing-translations\">Managing translations</h3>\n\n\n<p>Browser extensions have a built-in internalization (i18n) API. It allows you to manage translations for multiple languages (<a href=\"https://developer.chrome.com/docs/webstore/i18n/#choosing-locales-to-support\" rel=\"noopener\">full list</a>). To use the API, we have to define our translations and default language right in the <code>manifest.json</code> file:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"default_locale\": \"en\"</code></pre>\n\n\n\n<p>This sets English as the language. In the event that a browser is set to any other language that isn’t supported, the extension will fall back to the default locale (<code>en</code> in this example).</p>\n\n\n\n<p>Our translations are defined inside the <code>_locales</code> directory. Let’s create another folder in there each language you want to support. Each subdirectory gets its own <code>messages.json</code> file.</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">src \n └─ _locales\n     └─ en\n        └─ messages.json\n     └─ fr\n        └─ messages.json</code></pre>\n\n\n\n<p>A translation file consists of multiple parts:</p>\n\n\n\n<ul><li><strong>Translation key (&#8220;id&#8221;):</strong> This key is used to reference the translation.</li><li><strong>Message:</strong> The actual translation content</li><li><strong>Description (optional):</strong> Describes the translation (I wouldn’t use them, they just bloat up the file and your translation key should be descriptive enough)</li><li><strong>Placeholders (optional):</strong> Can be used to insert dynamic content inside a translation</li></ul>\n\n\n\n<p>Here’s an example that pulls all that together:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"userGreeting\": { // Translation key (\"id\")\n    \"message\": \"Good $daytime$, $user$!\" // Translation\n    \"description\": \"User Greeting\", // Optional description for translators\n    \"placeholders\": { // Optional placeholders\n      \"daytime\": { // As referenced inside the message\n        \"content\": \"$1\",\n        \"example\": \"morning\" // Example value for our content\n      },\n      \"user\": { \n        \"content\": \"$1\",\n        \"example\": \"Lars\"\n      }\n    }\n  }\n}</code></pre>\n\n\n\n<p>Using placeholders is a bit more challenging. At first we need to define the placeholder inside the message. A placeholder needs to be wrapped in between <code>$</code> characters. Afterwards, we have to add our placeholder to the &#8220;placeholder list.&#8221; This is a bit unintuitive, but Chrome wants to know what value should be inserted for our placeholders. We (obviously) want to use a dynamic value here, so we use the special <code>content</code> value <code>$1</code> which references our inserted value.</p>\n\n\n\n<p>The <code>example</code> property is optional. It can be used to give translators a hint what value the placeholder could be (but is not actually displayed).</p>\n\n\n\n<p>We need to define the following translations for our extension. Copy and paste them into the <code>messages.json</code> file. Feel free to add more languages (e.g. if you speak German, add a <code>de</code> folder inside <code>_locales</code>, and so on).</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"name\": {\n    \"message\": \"Transcribers of Reddit\"\n  },\n  \"description\": {\n    \"message\": \"Accessible image descriptions for subreddits.\"\n  },\n  \"popupManageSettings\": {\n    \"message\": \"Manage settings\"\n  },\n  \"optionsPageTitle\": {\n    \"message\": \"Settings\"\n  },\n  \"sectionGeneral\": {\n    \"message\": \"General settings\"\n  },\n  \"settingBorder\": {\n    \"message\": \"Show comment border\"\n  },\n  \"settingBackground\": {\n    \"message\": \"Show comment background\"\n  }\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">You might be wondering why we registered the permissions when there is no sign of an i18n permission, right? Chrome is a bit weird in that regard, as you don’t need to register every permission. Some (e.g. <code>chrome.i18n</code>) don’t require an entry inside the manifest. Other permissions require an entry but won’t be displayed to the user when installing the extension. Some other permissions are &#8220;hybrid&#8221; (e.g. <code>chrome.runtime</code>), meaning some of their functions can be used without declaring a permission—but other functions of the same API require one entry in the manifest. You’ll want to take a look at the <a href=\"https://developer.chrome.com/docs/extensions/reference/\" rel=\"noopener\">documentation</a> for a solid overview of the differences.</p>\n\n\n<h4 id=\"using-translations-inside-the-manifest\">Using translations inside the manifest</h4>\n\n\n<p>The first thing our end user will see is either the entry inside the Chrome Web Store or the extension overview page. We need to adjust our manifest file to make sure everything os translated.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  // Update these entries\n  \"name\": \"__MSG_name__\",\n  \"description\": \"__MSG_description__\"\n}</code></pre>\n\n\n\n<p>Applying this syntax uses the corresponding translation in our <code>messages.json</code> file (e.g. <code>_MSG_name_</code> uses the <code>name</code> translation).</p>\n\n\n<h4 id=\"using-translations-in-html-pages\">Using translations in HTML pages</h4>\n\n\n<p>Applying translations in an HTML file takes a little JavaScript.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.i18n.getMessage('name');</code></pre>\n\n\n\n<p>That code returns our defined translation (which is <code>Transcribers of Reddit</code>). Placeholders can be done in a similar way.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.i18n.getMessage('userGreeting', {\n  daytime: 'morning',\n  user: 'Lars'\n});</code></pre>\n\n\n\n<p>It would be a pain in the butt to apply translations to all elements this way. But we can write a little script that performs the translation based on a <code>data-</code> attribute. So, let’s create a new <code>js</code> folder inside the <code>src</code> directory, then add a new <code>util.js</code> file in it.</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">src \n └─ js\n     └─ util.js</code></pre>\n\n\n\n<p>This gets the job done:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const i18n = document.querySelectorAll(\"[data-intl]\");\ni18n.forEach(msg => {\n  msg.innerHTML = chrome.i18n.getMessage(msg.dataset.intl);\n});\n\nchrome.i18n.getAcceptLanguages(languages => {\n  document.documentElement.lang = languages[0];\n});</code></pre>\n\n\n\n<p>Once that script is added to an HTML page, we can add the <code>data-intl</code> attribute to an element to set its content. The document language will also be set based on the user language.</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- Before JS execution -->\n&lt;html>\n  &lt;body>\n    &lt;button data-intl=\"popupManageSettings\">&lt;/button>\n  &lt;/body>\n&lt;/html></code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- After JS execution -->\n&lt;html lang=\"en\">\n  &lt;body>\n    &lt;button data-intl=\"popupManageSettings\">Manage settings&lt;/button>\n  &lt;/body>\n&lt;/html></code></pre>\n</div>\n</div>\n\n\n<h3 id=\"adding-a-popup-and-options-page\">Adding a pop-up and options page</h3>\n\n\n<p>Before we dive into actual programming, we we need to create two pages:</p>\n\n\n\n<ol><li>An options page that contains user settings</li><li>A pop-up page that opens when interacting with the extension icon right next to our address bar. This page can be used for various scenarios (e.g. for displaying stats or quick settings).</li></ol>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"820\" height=\"298\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?resize=820%2C298&#038;ssl=1\" alt=\"\" class=\"wp-image-359621\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?w=820&amp;ssl=1 820w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?resize=300%2C109&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?resize=768%2C279&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The options page containg our settings.</figcaption></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"356\" height=\"143\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image.png?resize=356%2C143&#038;ssl=1\" alt=\"\" class=\"wp-image-359622\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image.png?w=356&amp;ssl=1 356w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image.png?resize=300%2C121&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The pop-up containg a link to the options page.</figcaption></figure>\n</div>\n</div>\n\n\n\n<p>Here’s an outline of the folders and files we need in order to make the pages:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">src \n ├─ css\n |    └─ paintBucket.css\n ├─ popup\n |    ├─ popup.html\n |    ├─ popup.css\n |    └─ popup.js\n └─ options\n      ├─ options.html\n      ├─ options.css\n      └─ options.js</code></pre>\n\n\n\n<p>The <code>.css</code> files contain plain CSS, nothing more and nothing less. I won’t into detail because I know most of you reading this are already fully aware of how CSS works. You can copy and paste the styles from the <a href=\"https://github.com/Lars418/torExtension/tree/main/src\" rel=\"noopener\">GitHub repository</a> for this project.</p>\n\n\n\n<p class=\"is-style-explanation\">Note that the pop-up is not a tab and that its size depends on the content in it. If you want to use a fixed popup size, you can set the <code>width</code> and <code>height</code> properties on the <code>html</code> element.</p>\n\n\n<h4 id=\"creating-the-popup\">Creating the pop-up</h4>\n\n\n<p>Here’s an HTML skeleton that links up the CSS and JavaScript files and adds a headline and button inside the <code>&lt;body&gt;</code>.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!doctype html>\n&lt;html lang=\"en\">\n  &lt;head>\n    &lt;meta charset=\"UTF-8\">\n    &lt;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    &lt;title data-intl=\"name\">&lt;/title>\n\n    &lt;link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n    &lt;link rel=\"stylesheet\" href=\"popup.css\">\n\n    &lt;!-- Our \"translation\" script -->\n    &lt;script src=\"../js/util.js\" defer>&lt;/script>\n    &lt;script src=\"popup.js\" defer>&lt;/script>\n  &lt;/head>\n  &lt;body>\n    &lt;h1 id=\"title\">&lt;/h1>\n    &lt;button data-intl=\"popupManageSettings\">&lt;/button>\n  &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The <code>h1</code> contains the extension name and version; the <code>button</code> is used to open the options page. The headline will not be filled with a translation (because it lacks a <code>data-intl</code> attribute), and the button doesn’t have any click handler yet, so we need to populate our <code>popup.js</code> file:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const title = document.getElementById('title');\nconst settingsBtn = document.querySelector('button');\nconst manifest = chrome.runtime.getManifest();\n\ntitle.textContent = `${manifest.name} (${manifest.version})`;\n\nsettingsBtn.addEventListener('click', () => {\n  chrome.runtime.openOptionsPage();\n});</code></pre>\n\n\n\n<p>This script first looks for the manifest file. Chrome offers the <code>runtime</code> API which contains the <code>getManifest</code> method (this specific method does not require the <code>runtime</code> permission). It returns our <code>manifest.json</code> as a JSON object. After we populate the title with the extension name and version, we can add an event listener to the settings button. If the user interacts with it, we will open the options page using <code>chrome.runtime.openOptionsPage()</code> (again no permission entry needed).</p>\n\n\n\n<p>The pop-up page is now finished, but the extension doesn’t know it exists yet. We have to register the pop-up by appending the following property to the <code>manifest.json</code> file.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"action\": {\n  \"default_popup\": \"popup/popup.html\",\n  \"default_icon\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  }\n},</code></pre>\n\n\n<h4 id=\"creating-the-options-page\">Creating the options page</h4>\n\n\n<p>Creating this page follows a pretty similar process as what we just completed. First, we populate our <code>options.html</code> file. Here’s some markup we can use:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!doctype html>\n&lt;html lang=\"en\">\n&lt;head>\n  &lt;meta charset=\"UTF-8\">\n  &lt;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  &lt;title data-intl=\"name\">&lt;/title>\n\n  &lt;link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n  &lt;link rel=\"stylesheet\" href=\"options.css\">\n\n  &lt;!-- Our \"translation\" script -->\n  &lt;script src=\"../js/util.js\" defer>&lt;/script>\n  &lt;script src=\"options.js\" defer>&lt;/script>\n&lt;/head>\n&lt;body>\n  &lt;header>\n    &lt;h1>\n      &lt;!-- Icon provided by feathericons.com -->\n      &lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" role=\"presentation\">\n        &lt;circle cx=\"12\" cy=\"12\" r=\"3\">&lt;/circle>\n        &lt;path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\">&lt;/path>\n      &lt;/svg>\n      &lt;span data-intl=\"optionsPageTitle\">&lt;/span>\n    &lt;/h1>\n  &lt;/header>\n\n  &lt;main>\n    &lt;section id=\"generalOptions\">\n      &lt;h2 data-intl=\"sectionGeneral\">&lt;/h2>\n\n      &lt;div id=\"generalOptionsWrapper\">&lt;/div>\n    &lt;/section>\n  &lt;/main>\n\n  &lt;footer>\n    &lt;p>Transcribers of Reddit extension by &lt;a href=\"https://lars.koelker.dev\" target=\"_blank\">lars.koelker.dev&lt;/a>.&lt;/p>\n    &lt;p>Reddit is a registered trademark of Reddit, Inc. This extension is not endorsed or affiliated with Reddit, Inc. in any way.&lt;/p>\n  &lt;/footer>\n&lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>There are no actual options yet (just their wrappers). We need to write the script for the options page. First, we define variables to access our wrappers and default settings inside <code>options.js</code>. &#8220;Freezing&#8221; our default settings prevents us from accidentally modifying them later.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const defaultSettings = Object.freeze({\n  border: false,\n  background: false,\n});\nconst generalSection = document.getElementById('generalOptionsWrapper');\n</code></pre>\n\n\n\n<p>Next, we need to load the saved settings. We can use the (previously registered) <code>storage</code> API for that. Specifically, we need to define if we want to store the data locally (<code>chrome.storage.local</code>) or sync settings through all devices the end user is logged in to (<code>chrome.storage.sync</code>). Let’s go with local storage for this project.</p>\n\n\n\n<p>Retrieving values needs to be done with the <code>get</code> method. It accepts two arguments:</p>\n\n\n\n<ol><li>The entries we want to load</li><li>A callback containing the values</li></ol>\n\n\n\n<p>Our entries can either be a string (e.g. like <code>settings</code> below) or an array of entries (useful if we want to load multiple entries). The argument inside the callback function contains an object of all entries we previously defined in <code>{ settings: ... }</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.storage.local.get('settings', ({ settings }) => {\n  const options = settings ?? defaultSettings; // Fall back to default if settings are not defined\n  if (!settings) {\n    chrome.storage.local.set({\n     settings: defaultSettings,\n    });\n }\n\n  // Create and display options\n  const generalOptions = Object.keys(options).filter(x => !x.startsWith('advanced'));\n  \n  generalOptions.forEach(option => createOption(option, options, generalSection));\n});</code></pre>\n\n\n\n<p>To render the options, we also need to create a <code>createOption()</code> function.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function createOption(setting, settingsObject, wrapper) {\n  const settingWrapper = document.createElement(\"div\");\n  settingWrapper.classList.add(\"setting-item\");\n  settingWrapper.innerHTML = `\n  &lt;div class=\"label-wrapper\">\n    &lt;label for=\"${setting}\" id=\"${setting}Desc\">\n      ${chrome.i18n.getMessage(`setting${setting}`)}\n    &lt;/label>\n  &lt;/div>\n\n  &lt;input type=\"checkbox\" ${settingsObject[setting] ? 'checked' : ''} id=\"${setting}\" />\n  &lt;label for=\"${setting}\"\n    tabindex=\"0\"\n    role=\"switch\"\n    aria-checked=\"${settingsObject[setting]}\"\n    aria-describedby=\"${setting}-desc\"\n    class=\"is-switch\"\n  >&lt;/label>\n  `;\n\n  const toggleSwitch = settingWrapper.querySelector(\"label.is-switch\");\n  const input = settingWrapper.querySelector(\"input\");\n\n  input.onchange = () => {\n    toggleSwitch.setAttribute('aria-checked', input.checked);\n    updateSetting(setting, input.checked);\n  };\n\n  toggleSwitch.onkeydown = e => {\n    if(e.key === \" \" || e.key === \"Enter\") {\n      e.preventDefault();\n      toggleSwitch.click();\n    }\n  }\n\n  wrapper.appendChild(settingWrapper);\n}</code></pre>\n\n\n\n<p>Inside the <code>onchange</code> event listener of our switch (aká radio button) we call the function <code>updateSetting</code>. This method will write the updated value of our radio button inside the storage.</p>\n\n\n\n<p>To accomplish this, we will make use of the <code>set</code> function. It has two arguments: The entry we want to overwrite and an (optional) callback (which we don’t use in our case). As our <code>settings</code> entry is not a boolean or a string but an object containing different settings, we use the spread operator (<code>…</code>) and only overwrite our actual key (setting) inside the <code>settings</code> object.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function updateSetting(key, value) {\n  chrome.storage.local.get('settings', ({ settings }) => {\n    chrome.storage.local.set({\n      settings: {\n        ...settings,\n        [key]: value\n      }\n    })\n  });\n}</code></pre>\n\n\n\n<p>Once again, we need to &#8220;inform&#8221; the extension about our options page by appending the following entry to the <code>manifest.json</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"options_ui\": {\n  \"open_in_tab\": true,\n  \"page\": \"options/options.html\"\n},</code></pre>\n\n\n\n<p>Depending on your use case you can also force the options dialog to open as a popup by setting <code>open_in_tab</code> to <code>false</code>.</p>\n\n\n<h3 id=\"installing-the-extension-for-development\">Installing the extension for development</h3>\n\n\n<p>Now that we’ve successfully set up the manifest file and have added both the pop-up and options page to the mix, we can install our extension to check if our pages actually work. Navigate to <code>chrome://extensions</code> and enable &#8220;Developer mode.&#8221; Three buttons will appear. Click the one labeled &#8220;Load unpacked&#8221; and select the <code>src</code> folder of your extension to load it up.</p>\n\n\n\n<p>The extension should now be successfully installed and our &#8220;Transcribers of Reddit&#8221; tile should be on the page.</p>\n\n\n\n<p>We can already interact with our extension. Click on the puzzle piece (&#x1f9e9;) icon right next to the browser’s address bar and click on the newly-added &#8220;Transcribers of Reddit&#8221; extension. You should now be greeted by a small pop-up with the button to open the options page.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"356\" height=\"143\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image-1.png?resize=356%2C143&#038;ssl=1\" alt=\"\" class=\"wp-image-359628\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image-1.png?w=356&amp;ssl=1 356w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image-1.png?resize=300%2C121&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Lovely, right? It might look a bit different on your device, as I have dark mode enabled in these screenshots.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1129\" height=\"382\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=1129%2C382&#038;ssl=1\" alt=\"\" class=\"wp-image-359629\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?w=1129&amp;ssl=1 1129w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=300%2C102&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=1024%2C346&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=768%2C260&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=1000%2C338&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you enable the &#8220;Show comment background&#8221; and &#8220;Show comment border&#8221; settings, then reload the page, the state will persist because we’re saving it in the browser’s local storage.</p>\n\n\n<h3 id=\"adding-the-content-script\">Adding the content script</h3>\n\n\n<p>OK, so we can already trigger the pop-up and interact with the extension settings, but the extension doesn’t do anything particularly useful yet. To give it some life, we will add a content script.</p>\n\n\n\n<p>Add a file called <code>comment.js</code> inside the <code>js</code> directory and make sure to define it in the <code>manifest.json</code> file:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"content_scripts\": [\n  {\n    \"matches\": [ \"*://www.reddit.com/*\" ],\n    \"js\": [ \"js/comment.js\" ]\n  }\n],</code></pre>\n\n\n\n<p>The <code>content_scripts</code> is made up of two parts:</p>\n\n\n\n<ul><li><code>matches</code>: This array holds URLs that tell the browser where we want our content scripts to run. Being an extension for Reddit and all, we want this to run on any page matching <code>://www.redit.com/*</code>, where the asterisk is a wild card to match anything after the top-level domain.</li><li><code>js</code>: This array contains the actual content scripts.</li></ul>\n\n\n\n<p>Content scripts can’t interact with other (normal) JavaScripts. This means if a website’s scripts defines a variable or function, we can’t access it. For example:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// script_on_website.js\nconst username = 'Lars';\n\n// content_script.js\nconsole.log(username); // Error: username is not defined</code></pre>\n\n\n\n<p>Now let’s start writing our content script. First, we add some constants to <code>comment.js</code>. These constants contain RegEx expressions and selectors that will be used later on. The <code>CommentUtils</code> is used to determine whether or not a post contains a &#8220;tor comment,&#8221; or if comment wrappers exists.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst Selectors = Object.freeze({\n  commentWrapper: 'div[style*=\"--commentswrapper-gradient-color\"] > div, div[style*=\"max-height: unset\"] > div',\n  torComment: 'div[data-tor-comment]',\n  postContent: 'div[data-test-id=\"post-content\"]'\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst CommentUtils = Object.freeze({\n  isTorComment: (comment) => comment.querySelector('[data-test-id=\"comment\"]') ? comment.querySelector('[data-test-id=\"comment\"]').textContent.includes('m a human volunteer content transcriber for Reddit') : false,\n  torCommentsExist: () => !!document.querySelector(Selectors.torComment),\n  commentWrapperExists: () => !!document.querySelector('[data-reddit-comment-wrapper=\"true\"]')\n});</code></pre>\n\n\n\n<p>Next, we check whether or not a user directly opens a comment page (&#8220;post&#8221;), then perform a RegEx check and update the <code>directPage</code> variable. This case occurs when a user directly opens the URL (e.g. by typing it into the address bar or clicking on<code>&lt;a&gt;</code> element on another page, like Twitter).</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let directPage = false;\nif (UrlRegex.commentPage.test(window.location.href)) {\n  directPage = true;\n  moveComments();\n}</code></pre>\n\n\n\n<p>Besides opening a page directly, a user normally interacts with the SPA. To catch this case, we can add a message listener to our <code>comment.js</code> file by using the <code>runtime</code> API.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.runtime.onMessage.addListener(msg => {\n  if (msg.type === messageTypes.COMMENT_PAGE) {\n    waitForComment(moveComments);\n  }\n});</code></pre>\n\n\n\n<p>All we need now are the functions. Let’s create a <code>moveComments()</code> function. It moves the special &#8220;tor comment&#8221; to the start of the comment section. It also conditionally applies a background color and border (if borders are enabled in the settings) to the comment. For this, we call the <code>storage</code> API and load the <code>settings</code> entry:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function moveComments() {\n  if (CommentUtils.commentWrapperExists()) {\n    return;\n  }\n\n  const wrapper = document.querySelector(Selectors.commentWrapper);\n  let comments = wrapper.querySelectorAll(`${Selectors.commentWrapper} > div`);\n  const postContent = document.querySelector(Selectors.postContent);\n\n  wrapper.dataset.redditCommentWrapper = 'true';\n  wrapper.style.flexDirection = 'column';\n  wrapper.style.display = 'flex';\n\n  if (directPage) {\n    comments = document.querySelectorAll(\"[data-reddit-comment-wrapper='true'] > div\");\n  }\n\n  chrome.storage.local.get('settings', ({ settings }) => { // HIGHLIGHT 18\n    comments.forEach(comment => {\n      if (CommentUtils.isTorComment(comment)) {\n        comment.dataset.torComment = 'true';\n        if (settings.background) {\n          comment.style.backgroundColor = 'var(--newCommunityTheme-buttonAlpha05)';\n        }\n        if (settings.border) {\n          comment.style.outline = '2px solid red';\n        }\n        comment.style.order = \"-1\";\n        applyWaiAria(postContent, comment);\n      }\n    });\n  })\n}</code></pre>\n\n\n\n<p>The <code>applyWaiAria()</code> function is called inside the <code>moveComments()</code> function—it adds <code>aria-</code> attributes. The other function creates a unique identifier for use with the <code>aria-</code> attributes.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function applyWaiAria(postContent, comment) {\n  const postMedia = postContent.querySelector('img[class*=\"ImageBox-image\"], video');\n  const commentId = uuidv4();\n\n  if (!postMedia) {\n    return;\n  }\n\n  comment.setAttribute('id', commentId);\n  postMedia.setAttribute('aria-describedby', commentId);\n}\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r &amp; 0x3 | 0x8);\n    return v.toString(16);\n  });\n}</code></pre>\n\n\n\n<p>The following function waits for the comments to load and calls the <code>callback</code> parameter if it finds the comment wrapper.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function waitForComment(callback) {\n  const config = { childList: true, subtree: true };\n  const observer = new MutationObserver(mutations => {\n    for (const mutation of mutations) {\n      if (document.querySelector(Selectors.commentWrapper)) {\n        callback();\n        observer.disconnect();\n        clearTimeout(timeout);\n        break;\n      }\n    }\n  });\n\n  observer.observe(document.documentElement, config);\n  const timeout = startObservingTimeout(observer, 10);\n}\n\nfunction startObservingTimeout(observer, seconds) {\n  return setTimeout(() => {\n    observer.disconnect();\n  }, 1000 * seconds);\n}</code></pre>\n\n\n<h3 id=\"adding-a-service-worker\">Adding a service worker</h3>\n\n\n<p>Remember when we added a listener for messages inside the content script? This listener isn&#8217;t currently receiving messages. We need to send it to the content script ourselves. For this purpose we need to register a service worker.</p>\n\n\n\n<p>We have to register our service worker inside the <code>manifest.json</code> by appending the following code to it:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"background\": {\n  \"service_worker\": \"sw.js\"\n}</code></pre>\n\n\n\n<p>Don’t forget to create the <code>sw.js</code> file inside the <code>src</code> directory (service workers always need to be created in the extension’s root directory, <code>src</code>.</p>\n\n\n\n<p>Now, let’s create some constants for the message and page types:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst Utils = Object.freeze({\n  getPageType: (url) => {\n    if (new URL(url).pathname === '/') {\n      return messageTypes.MAIN_PAGE;\n    } else if (UrlRegex.commentPage.test(url)) {\n      return messageTypes.COMMENT_PAGE;\n    } else if (UrlRegex.subredditPage.test(url)) {\n      return messageTypes.SUBREDDIT_PAGE;\n    }\n\n    return messageTypes.OTHER_PAGE;\n  }\n});</code></pre>\n\n\n\n<p>We can add the service worker’s actual content. We do this with an event listener on the history state (<code>onHistoryStateUpdated</code>) that detects when a page has been updated with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API\" rel=\"noopener\">History API</a> (which is commonly used in SPAs to navigate without a page refresh). Inside this listener, we query the active tab and extract its <code>tabId</code>. Then we send a message to our content script containing the page type and URL.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.webNavigation.onHistoryStateUpdated.addListener(async ({ url }) => {\n  const [{ id: tabId }] = await chrome.tabs.query({ active: true, currentWindow: true });\n\n  chrome.tabs.sendMessage(tabId, {\n    type: Utils.getPageType(url),\n    url\n  });\n});</code></pre>\n\n\n<h3 id=\"all-done\">All done!</h3>\n\n\n<p>We’re finished! Navigate to Chrome’s extension management page ( <code>chrome://extensions</code>) and hit the reload icon on the unpacked extension. If you open a Reddit post that contains a &#8220;Transcribers of Reddit&#8221; comment with an image transcription (like <a href=\"https://www.reddit.com/r/ProgrammerHumor/comments/oi8e26/why_would_you_hurt_me_in_such_a_way_the/\" rel=\"noopener\">this one</a>), it will be moved to the start of the comment section and be highlighted as long as we’ve enabled it in the extension settings.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1270\" height=\"1332\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=1270%2C1332&#038;ssl=1\" alt=\"\" class=\"wp-image-359633\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?w=1270&amp;ssl=1 1270w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=286%2C300&amp;ssl=1 286w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=976%2C1024&amp;ssl=1 976w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=768%2C805&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=1000%2C1049&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The &#8220;Transcribers of Reddit&#8221; extension highlights a particular comment by moving it to the top of the Reddit thread’s comment list and giving it a bright red border</figcaption></figure>\n\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n\n<p>Was that as hard as you thought it would be? It’s definitely a lot more straightforward than I thought before digging in. After setting up the <code>manifest.json</code> and creating any page files and assets we need, all we’re really doing is writing HTML, CSS, and JavaScript like normal.</p>\n\n\n\n<p>If you ever find yourself stuck along the way, the <a href=\"https://developer.chrome.com/docs/extensions/reference/\" rel=\"noopener\">Chrome API</a> documentation is a great resource to get back on track.</p>\n\n\n\n<p>Once again, <a href=\"https://github.com/Lars418/torExtension\" rel=\"noopener\">here’s the GitHub repo</a> with all of the code we walked through in this article. Read it, use it, and let me know what you think of it!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-create-a-browser-extension/\">How to Create a Browser Extension</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I’ll bet you are using browser extensions right now. Some of them are extremely popular and useful, like ad blockers, password managers, and PDF viewers. These extensions (or “add-ons”) are not limited to those purposes — you can do a lot more with them! In this article, I will give you an introduction on how to create one. Ultimately, we’ll make it work in multiple browsers.\n\n\n\n\n\n\nWhat we’re making\n\n\nWe’re making an extension called “Transcribers of Reddit” and it’s going to improve Reddit’s accessibility by moving specific comments to the top of the comment section and adding aria- attributes for screen readers. We will also take our extension a little further with options for adding borders and backgrounds to comments for better text contrast.\n\n\n\nThe whole idea is that you’ll get a nice introduction for how to develop a browser extension. We will start by creating the extension for Chromium-based browsers (e.g. Google Chrome, Microsoft Edge, Brave, etc.). In a future post we will port the extension to work with Firefox, as well as Safari which recently added support for Web Extensions in both the MacOS and iOS versions of the browser.\n\n\n\n\nGitHub repo\n\n\n\n\nReady? Let’s take this one step at a time.\n\n\nCreate a working directory\n\n\nBefore anything else, we need a working space for our project. All we really need is to create a folder and give it a name (which I’m calling transcribers-of-reddit). Then, create another folder inside that one named src for our source code.\n\n\nDefine the entry point\n\n\nThe entry point is a file that contains general information about the extension (i.e. extension name, description, etc.) and defines permissions or scripts to execute.\n\n\n\nOur entry point can be a manifest.json file located in the src folder we just created. In it, let’s add the following three properties:\n\n\n\n{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\"\n}\n\n\n\nThe manifest_version is similar to version in npm or Node. It defines what APIs are available (or not). We’re going to work on the bleeding edge and use the latest version, 3 (also known as as mv3).\n\n\n\nThe second property is name and it specifies our extension name. This name is what’s displayed everywhere our extension appears, like Chrome Web Store and the chrome://extensions page in the Chrome browser.\n\n\n\nThen there’s version. It labels the extension with a version number. Keep in mind that this property (in contrast to manifest_version) is a string that can only contain numbers and dots (e.g. 1.3.5).\n\n\nMore manifest.json information\n\n\nThere’s actually a lot more we can add to help add context to our extension. For example, we can provide a description that explains what the extension does. It’s a good idea to provide these sorts of things, as it gives users a better idea of what they’re getting into when they use it.\n\n\n\nIn this case, we’re not only adding a description, but supplying icons and a web address that Chrome Web Store points to on the extension’s page.\n\n\n\n{\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\"\n}\n\n\n\nThe description is displayed on Chrome’s management page (chrome://extensions) and should be brief, less than 132 characters.The icons are used in lots of places. As the docs state, it’s best to provide three versions of the same icon in different resolutions, preferably as a PNG file. Feel free to use the ones in the GitHub repository for this example.The homepage_url can be used to connect your website with the extension. A button including the link will be displayed when clicking on “More details” on the management page.\n\n\n\nOur opened extension card inside the extension management page.\n\n\nSetting permissions\n\n\nOne major advantage extensions have is that their APIs allow you to interact directly with the browser. But we have to explicitly give the extension those permissions, which also goes inside the manifest.json file.\n\n\n\n\n{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\",\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\",\n\n  \"permissions\": [\n    \"storage\",\n    \"webNavigation\"\n  ]\n}\n\n\n\nWhat did we just give this extension permission to? First, storage. We want this extension to be able to save the user’s settings, so we need to access the browser’s web storage to hold them. For example, if the user wants red borders on the comments, then we’ll save that for next time rather than making them set it again.\n\n\n\nWe also gave the extension permission to look at how the user navigated to the current screen. Reddit is a single-page application (SPA) which means it doesn’t trigger a page refresh. We need to “catch” this interaction, as Reddit will only load the comments of a post if we click on it. So, that’s why we’re tapping into webNavigation.\n\n\n\nWe’ll get to executing code on a page later as it requires a whole new entry inside manifest.json.\n\n\n\n/explanation Depending on which permissions are allowed, the browser might display a warning to the user to accept the permissions. It’s only certain ones, though, and Chrome has a nice outline of them.\n\n\nManaging translations\n\n\nBrowser extensions have a built-in internalization (i18n) API. It allows you to manage translations for multiple languages (full list). To use the API, we have to define our translations and default language right in the manifest.json file:\n\n\n\n\"default_locale\": \"en\"\n\n\n\nThis sets English as the language. In the event that a browser is set to any other language that isn’t supported, the extension will fall back to the default locale (en in this example).\n\n\n\nOur translations are defined inside the _locales directory. Let’s create another folder in there each language you want to support. Each subdirectory gets its own messages.json file.\n\n\n\nsrc \n └─ _locales\n     └─ en\n        └─ messages.json\n     └─ fr\n        └─ messages.json\n\n\n\nA translation file consists of multiple parts:\n\n\n\nTranslation key (“id”): This key is used to reference the translation.Message: The actual translation contentDescription (optional): Describes the translation (I wouldn’t use them, they just bloat up the file and your translation key should be descriptive enough)Placeholders (optional): Can be used to insert dynamic content inside a translation\n\n\n\nHere’s an example that pulls all that together:\n\n\n\n{\n  \"userGreeting\": { // Translation key (\"id\")\n    \"message\": \"Good $daytime$, $user$!\" // Translation\n    \"description\": \"User Greeting\", // Optional description for translators\n    \"placeholders\": { // Optional placeholders\n      \"daytime\": { // As referenced inside the message\n        \"content\": \"$1\",\n        \"example\": \"morning\" // Example value for our content\n      },\n      \"user\": { \n        \"content\": \"$1\",\n        \"example\": \"Lars\"\n      }\n    }\n  }\n}\n\n\n\nUsing placeholders is a bit more challenging. At first we need to define the placeholder inside the message. A placeholder needs to be wrapped in between $ characters. Afterwards, we have to add our placeholder to the “placeholder list.” This is a bit unintuitive, but Chrome wants to know what value should be inserted for our placeholders. We (obviously) want to use a dynamic value here, so we use the special content value $1 which references our inserted value.\n\n\n\nThe example property is optional. It can be used to give translators a hint what value the placeholder could be (but is not actually displayed).\n\n\n\nWe need to define the following translations for our extension. Copy and paste them into the messages.json file. Feel free to add more languages (e.g. if you speak German, add a de folder inside _locales, and so on).\n\n\n\n{\n  \"name\": {\n    \"message\": \"Transcribers of Reddit\"\n  },\n  \"description\": {\n    \"message\": \"Accessible image descriptions for subreddits.\"\n  },\n  \"popupManageSettings\": {\n    \"message\": \"Manage settings\"\n  },\n  \"optionsPageTitle\": {\n    \"message\": \"Settings\"\n  },\n  \"sectionGeneral\": {\n    \"message\": \"General settings\"\n  },\n  \"settingBorder\": {\n    \"message\": \"Show comment border\"\n  },\n  \"settingBackground\": {\n    \"message\": \"Show comment background\"\n  }\n}\n\n\n\nYou might be wondering why we registered the permissions when there is no sign of an i18n permission, right? Chrome is a bit weird in that regard, as you don’t need to register every permission. Some (e.g. chrome.i18n) don’t require an entry inside the manifest. Other permissions require an entry but won’t be displayed to the user when installing the extension. Some other permissions are “hybrid” (e.g. chrome.runtime), meaning some of their functions can be used without declaring a permission—but other functions of the same API require one entry in the manifest. You’ll want to take a look at the documentation for a solid overview of the differences.\n\n\nUsing translations inside the manifest\n\n\nThe first thing our end user will see is either the entry inside the Chrome Web Store or the extension overview page. We need to adjust our manifest file to make sure everything os translated.\n\n\n\n{\n  // Update these entries\n  \"name\": \"__MSG_name__\",\n  \"description\": \"__MSG_description__\"\n}\n\n\n\nApplying this syntax uses the corresponding translation in our messages.json file (e.g. _MSG_name_ uses the name translation).\n\n\nUsing translations in HTML pages\n\n\nApplying translations in an HTML file takes a little JavaScript.\n\n\n\nchrome.i18n.getMessage('name');\n\n\n\nThat code returns our defined translation (which is Transcribers of Reddit). Placeholders can be done in a similar way.\n\n\n\nchrome.i18n.getMessage('userGreeting', {\n  daytime: 'morning',\n  user: 'Lars'\n});\n\n\n\nIt would be a pain in the butt to apply translations to all elements this way. But we can write a little script that performs the translation based on a data- attribute. So, let’s create a new js folder inside the src directory, then add a new util.js file in it.\n\n\n\nsrc \n └─ js\n     └─ util.js\n\n\n\nThis gets the job done:\n\n\n\nconst i18n = document.querySelectorAll(\"[data-intl]\");\ni18n.forEach(msg => {\n  msg.innerHTML = chrome.i18n.getMessage(msg.dataset.intl);\n});\n\nchrome.i18n.getAcceptLanguages(languages => {\n  document.documentElement.lang = languages[0];\n});\n\n\n\nOnce that script is added to an HTML page, we can add the data-intl attribute to an element to set its content. The document language will also be set based on the user language.\n\n\n\n\n\n<!-- Before JS execution -->\n<html>\n  <body>\n    <button data-intl=\"popupManageSettings\"></button>\n  </body>\n</html>\n\n\n\n\n\n<!-- After JS execution -->\n<html lang=\"en\">\n  <body>\n    <button data-intl=\"popupManageSettings\">Manage settings</button>\n  </body>\n</html>\n\n\n\n\nAdding a pop-up and options page\n\n\nBefore we dive into actual programming, we we need to create two pages:\n\n\n\nAn options page that contains user settingsA pop-up page that opens when interacting with the extension icon right next to our address bar. This page can be used for various scenarios (e.g. for displaying stats or quick settings).\n\n\n\n\n\nThe options page containg our settings.\n\n\n\n\n\nThe pop-up containg a link to the options page.\n\n\n\n\n\nHere’s an outline of the folders and files we need in order to make the pages:\n\n\n\nsrc \n ├─ css\n |    └─ paintBucket.css\n ├─ popup\n |    ├─ popup.html\n |    ├─ popup.css\n |    └─ popup.js\n └─ options\n      ├─ options.html\n      ├─ options.css\n      └─ options.js\n\n\n\nThe .css files contain plain CSS, nothing more and nothing less. I won’t into detail because I know most of you reading this are already fully aware of how CSS works. You can copy and paste the styles from the GitHub repository for this project.\n\n\n\nNote that the pop-up is not a tab and that its size depends on the content in it. If you want to use a fixed popup size, you can set the width and height properties on the html element.\n\n\nCreating the pop-up\n\n\nHere’s an HTML skeleton that links up the CSS and JavaScript files and adds a headline and button inside the <body>.\n\n\n\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title data-intl=\"name\"></title>\n\n    <link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n    <link rel=\"stylesheet\" href=\"popup.css\">\n\n    <!-- Our \"translation\" script -->\n    <script src=\"../js/util.js\" defer></script>\n    <script src=\"popup.js\" defer></script>\n  </head>\n  <body>\n    <h1 id=\"title\"></h1>\n    <button data-intl=\"popupManageSettings\"></button>\n  </body>\n</html>\n\n\n\nThe h1 contains the extension name and version; the button is used to open the options page. The headline will not be filled with a translation (because it lacks a data-intl attribute), and the button doesn’t have any click handler yet, so we need to populate our popup.js file:\n\n\n\nconst title = document.getElementById('title');\nconst settingsBtn = document.querySelector('button');\nconst manifest = chrome.runtime.getManifest();\n\ntitle.textContent = `${manifest.name} (${manifest.version})`;\n\nsettingsBtn.addEventListener('click', () => {\n  chrome.runtime.openOptionsPage();\n});\n\n\n\nThis script first looks for the manifest file. Chrome offers the runtime API which contains the getManifest method (this specific method does not require the runtime permission). It returns our manifest.json as a JSON object. After we populate the title with the extension name and version, we can add an event listener to the settings button. If the user interacts with it, we will open the options page using chrome.runtime.openOptionsPage() (again no permission entry needed).\n\n\n\nThe pop-up page is now finished, but the extension doesn’t know it exists yet. We have to register the pop-up by appending the following property to the manifest.json file.\n\n\n\n\"action\": {\n  \"default_popup\": \"popup/popup.html\",\n  \"default_icon\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  }\n},\n\n\nCreating the options page\n\n\nCreating this page follows a pretty similar process as what we just completed. First, we populate our options.html file. Here’s some markup we can use:\n\n\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title data-intl=\"name\"></title>\n\n  <link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n  <link rel=\"stylesheet\" href=\"options.css\">\n\n  <!-- Our \"translation\" script -->\n  <script src=\"../js/util.js\" defer></script>\n  <script src=\"options.js\" defer></script>\n</head>\n<body>\n  <header>\n    <h1>\n      <!-- Icon provided by feathericons.com -->\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" role=\"presentation\">\n        <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n        <path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\"></path>\n      </svg>\n      <span data-intl=\"optionsPageTitle\"></span>\n    </h1>\n  </header>\n\n  <main>\n    <section id=\"generalOptions\">\n      <h2 data-intl=\"sectionGeneral\"></h2>\n\n      <div id=\"generalOptionsWrapper\"></div>\n    </section>\n  </main>\n\n  <footer>\n    <p>Transcribers of Reddit extension by <a href=\"https://lars.koelker.dev\" target=\"_blank\">lars.koelker.dev</a>.</p>\n    <p>Reddit is a registered trademark of Reddit, Inc. This extension is not endorsed or affiliated with Reddit, Inc. in any way.</p>\n  </footer>\n</body>\n</html>\n\n\n\nThere are no actual options yet (just their wrappers). We need to write the script for the options page. First, we define variables to access our wrappers and default settings inside options.js. “Freezing” our default settings prevents us from accidentally modifying them later.\n\n\n\nconst defaultSettings = Object.freeze({\n  border: false,\n  background: false,\n});\nconst generalSection = document.getElementById('generalOptionsWrapper');\n\n\n\n\nNext, we need to load the saved settings. We can use the (previously registered) storage API for that. Specifically, we need to define if we want to store the data locally (chrome.storage.local) or sync settings through all devices the end user is logged in to (chrome.storage.sync). Let’s go with local storage for this project.\n\n\n\nRetrieving values needs to be done with the get method. It accepts two arguments:\n\n\n\nThe entries we want to loadA callback containing the values\n\n\n\nOur entries can either be a string (e.g. like settings below) or an array of entries (useful if we want to load multiple entries). The argument inside the callback function contains an object of all entries we previously defined in { settings: ... }:\n\n\n\nchrome.storage.local.get('settings', ({ settings }) => {\n  const options = settings ?? defaultSettings; // Fall back to default if settings are not defined\n  if (!settings) {\n    chrome.storage.local.set({\n     settings: defaultSettings,\n    });\n }\n\n  // Create and display options\n  const generalOptions = Object.keys(options).filter(x => !x.startsWith('advanced'));\n  \n  generalOptions.forEach(option => createOption(option, options, generalSection));\n});\n\n\n\nTo render the options, we also need to create a createOption() function.\n\n\n\nfunction createOption(setting, settingsObject, wrapper) {\n  const settingWrapper = document.createElement(\"div\");\n  settingWrapper.classList.add(\"setting-item\");\n  settingWrapper.innerHTML = `\n  <div class=\"label-wrapper\">\n    <label for=\"${setting}\" id=\"${setting}Desc\">\n      ${chrome.i18n.getMessage(`setting${setting}`)}\n    </label>\n  </div>\n\n  <input type=\"checkbox\" ${settingsObject[setting] ? 'checked' : ''} id=\"${setting}\" />\n  <label for=\"${setting}\"\n    tabindex=\"0\"\n    role=\"switch\"\n    aria-checked=\"${settingsObject[setting]}\"\n    aria-describedby=\"${setting}-desc\"\n    class=\"is-switch\"\n  ></label>\n  `;\n\n  const toggleSwitch = settingWrapper.querySelector(\"label.is-switch\");\n  const input = settingWrapper.querySelector(\"input\");\n\n  input.onchange = () => {\n    toggleSwitch.setAttribute('aria-checked', input.checked);\n    updateSetting(setting, input.checked);\n  };\n\n  toggleSwitch.onkeydown = e => {\n    if(e.key === \" \" || e.key === \"Enter\") {\n      e.preventDefault();\n      toggleSwitch.click();\n    }\n  }\n\n  wrapper.appendChild(settingWrapper);\n}\n\n\n\nInside the onchange event listener of our switch (aká radio button) we call the function updateSetting. This method will write the updated value of our radio button inside the storage.\n\n\n\nTo accomplish this, we will make use of the set function. It has two arguments: The entry we want to overwrite and an (optional) callback (which we don’t use in our case). As our settings entry is not a boolean or a string but an object containing different settings, we use the spread operator (…) and only overwrite our actual key (setting) inside the settings object.\n\n\n\nfunction updateSetting(key, value) {\n  chrome.storage.local.get('settings', ({ settings }) => {\n    chrome.storage.local.set({\n      settings: {\n        ...settings,\n        [key]: value\n      }\n    })\n  });\n}\n\n\n\nOnce again, we need to “inform” the extension about our options page by appending the following entry to the manifest.json:\n\n\n\n\"options_ui\": {\n  \"open_in_tab\": true,\n  \"page\": \"options/options.html\"\n},\n\n\n\nDepending on your use case you can also force the options dialog to open as a popup by setting open_in_tab to false.\n\n\nInstalling the extension for development\n\n\nNow that we’ve successfully set up the manifest file and have added both the pop-up and options page to the mix, we can install our extension to check if our pages actually work. Navigate to chrome://extensions and enable “Developer mode.” Three buttons will appear. Click the one labeled “Load unpacked” and select the src folder of your extension to load it up.\n\n\n\nThe extension should now be successfully installed and our “Transcribers of Reddit” tile should be on the page.\n\n\n\nWe can already interact with our extension. Click on the puzzle piece (🧩) icon right next to the browser’s address bar and click on the newly-added “Transcribers of Reddit” extension. You should now be greeted by a small pop-up with the button to open the options page.\n\n\n\n\n\n\n\nLovely, right? It might look a bit different on your device, as I have dark mode enabled in these screenshots.\n\n\n\n\n\n\n\nIf you enable the “Show comment background” and “Show comment border” settings, then reload the page, the state will persist because we’re saving it in the browser’s local storage.\n\n\nAdding the content script\n\n\nOK, so we can already trigger the pop-up and interact with the extension settings, but the extension doesn’t do anything particularly useful yet. To give it some life, we will add a content script.\n\n\n\nAdd a file called comment.js inside the js directory and make sure to define it in the manifest.json file:\n\n\n\n\"content_scripts\": [\n  {\n    \"matches\": [ \"*://www.reddit.com/*\" ],\n    \"js\": [ \"js/comment.js\" ]\n  }\n],\n\n\n\nThe content_scripts is made up of two parts:\n\n\n\nmatches: This array holds URLs that tell the browser where we want our content scripts to run. Being an extension for Reddit and all, we want this to run on any page matching ://www.redit.com/*, where the asterisk is a wild card to match anything after the top-level domain.js: This array contains the actual content scripts.\n\n\n\nContent scripts can’t interact with other (normal) JavaScripts. This means if a website’s scripts defines a variable or function, we can’t access it. For example:\n\n\n\n// script_on_website.js\nconst username = 'Lars';\n\n// content_script.js\nconsole.log(username); // Error: username is not defined\n\n\n\nNow let’s start writing our content script. First, we add some constants to comment.js. These constants contain RegEx expressions and selectors that will be used later on. The CommentUtils is used to determine whether or not a post contains a “tor comment,” or if comment wrappers exists.\n\n\n\nconst messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst Selectors = Object.freeze({\n  commentWrapper: 'div[style*=\"--commentswrapper-gradient-color\"] > div, div[style*=\"max-height: unset\"] > div',\n  torComment: 'div[data-tor-comment]',\n  postContent: 'div[data-test-id=\"post-content\"]'\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst CommentUtils = Object.freeze({\n  isTorComment: (comment) => comment.querySelector('[data-test-id=\"comment\"]') ? comment.querySelector('[data-test-id=\"comment\"]').textContent.includes('m a human volunteer content transcriber for Reddit') : false,\n  torCommentsExist: () => !!document.querySelector(Selectors.torComment),\n  commentWrapperExists: () => !!document.querySelector('[data-reddit-comment-wrapper=\"true\"]')\n});\n\n\n\nNext, we check whether or not a user directly opens a comment page (“post”), then perform a RegEx check and update the directPage variable. This case occurs when a user directly opens the URL (e.g. by typing it into the address bar or clicking on<a> element on another page, like Twitter).\n\n\n\nlet directPage = false;\nif (UrlRegex.commentPage.test(window.location.href)) {\n  directPage = true;\n  moveComments();\n}\n\n\n\nBesides opening a page directly, a user normally interacts with the SPA. To catch this case, we can add a message listener to our comment.js file by using the runtime API.\n\n\n\nchrome.runtime.onMessage.addListener(msg => {\n  if (msg.type === messageTypes.COMMENT_PAGE) {\n    waitForComment(moveComments);\n  }\n});\n\n\n\nAll we need now are the functions. Let’s create a moveComments() function. It moves the special “tor comment” to the start of the comment section. It also conditionally applies a background color and border (if borders are enabled in the settings) to the comment. For this, we call the storage API and load the settings entry:\n\n\n\nfunction moveComments() {\n  if (CommentUtils.commentWrapperExists()) {\n    return;\n  }\n\n  const wrapper = document.querySelector(Selectors.commentWrapper);\n  let comments = wrapper.querySelectorAll(`${Selectors.commentWrapper} > div`);\n  const postContent = document.querySelector(Selectors.postContent);\n\n  wrapper.dataset.redditCommentWrapper = 'true';\n  wrapper.style.flexDirection = 'column';\n  wrapper.style.display = 'flex';\n\n  if (directPage) {\n    comments = document.querySelectorAll(\"[data-reddit-comment-wrapper='true'] > div\");\n  }\n\n  chrome.storage.local.get('settings', ({ settings }) => { // HIGHLIGHT 18\n    comments.forEach(comment => {\n      if (CommentUtils.isTorComment(comment)) {\n        comment.dataset.torComment = 'true';\n        if (settings.background) {\n          comment.style.backgroundColor = 'var(--newCommunityTheme-buttonAlpha05)';\n        }\n        if (settings.border) {\n          comment.style.outline = '2px solid red';\n        }\n        comment.style.order = \"-1\";\n        applyWaiAria(postContent, comment);\n      }\n    });\n  })\n}\n\n\n\nThe applyWaiAria() function is called inside the moveComments() function—it adds aria- attributes. The other function creates a unique identifier for use with the aria- attributes.\n\n\n\nfunction applyWaiAria(postContent, comment) {\n  const postMedia = postContent.querySelector('img[class*=\"ImageBox-image\"], video');\n  const commentId = uuidv4();\n\n  if (!postMedia) {\n    return;\n  }\n\n  comment.setAttribute('id', commentId);\n  postMedia.setAttribute('aria-describedby', commentId);\n}\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n\n\nThe following function waits for the comments to load and calls the callback parameter if it finds the comment wrapper.\n\n\n\nfunction waitForComment(callback) {\n  const config = { childList: true, subtree: true };\n  const observer = new MutationObserver(mutations => {\n    for (const mutation of mutations) {\n      if (document.querySelector(Selectors.commentWrapper)) {\n        callback();\n        observer.disconnect();\n        clearTimeout(timeout);\n        break;\n      }\n    }\n  });\n\n  observer.observe(document.documentElement, config);\n  const timeout = startObservingTimeout(observer, 10);\n}\n\nfunction startObservingTimeout(observer, seconds) {\n  return setTimeout(() => {\n    observer.disconnect();\n  }, 1000 * seconds);\n}\n\n\nAdding a service worker\n\n\nRemember when we added a listener for messages inside the content script? This listener isn’t currently receiving messages. We need to send it to the content script ourselves. For this purpose we need to register a service worker.\n\n\n\nWe have to register our service worker inside the manifest.json by appending the following code to it:\n\n\n\n\"background\": {\n  \"service_worker\": \"sw.js\"\n}\n\n\n\nDon’t forget to create the sw.js file inside the src directory (service workers always need to be created in the extension’s root directory, src.\n\n\n\nNow, let’s create some constants for the message and page types:\n\n\n\nconst messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst Utils = Object.freeze({\n  getPageType: (url) => {\n    if (new URL(url).pathname === '/') {\n      return messageTypes.MAIN_PAGE;\n    } else if (UrlRegex.commentPage.test(url)) {\n      return messageTypes.COMMENT_PAGE;\n    } else if (UrlRegex.subredditPage.test(url)) {\n      return messageTypes.SUBREDDIT_PAGE;\n    }\n\n    return messageTypes.OTHER_PAGE;\n  }\n});\n\n\n\nWe can add the service worker’s actual content. We do this with an event listener on the history state (onHistoryStateUpdated) that detects when a page has been updated with the History API (which is commonly used in SPAs to navigate without a page refresh). Inside this listener, we query the active tab and extract its tabId. Then we send a message to our content script containing the page type and URL.\n\n\n\nchrome.webNavigation.onHistoryStateUpdated.addListener(async ({ url }) => {\n  const [{ id: tabId }] = await chrome.tabs.query({ active: true, currentWindow: true });\n\n  chrome.tabs.sendMessage(tabId, {\n    type: Utils.getPageType(url),\n    url\n  });\n});\n\n\nAll done!\n\n\nWe’re finished! Navigate to Chrome’s extension management page ( chrome://extensions) and hit the reload icon on the unpacked extension. If you open a Reddit post that contains a “Transcribers of Reddit” comment with an image transcription (like this one), it will be moved to the start of the comment section and be highlighted as long as we’ve enabled it in the extension settings.\n\n\n\nThe “Transcribers of Reddit” extension highlights a particular comment by moving it to the top of the Reddit thread’s comment list and giving it a bright red border\n\n\nConclusion\n\n\nWas that as hard as you thought it would be? It’s definitely a lot more straightforward than I thought before digging in. After setting up the manifest.json and creating any page files and assets we need, all we’re really doing is writing HTML, CSS, and JavaScript like normal.\n\n\n\nIf you ever find yourself stuck along the way, the Chrome API documentation is a great resource to get back on track.\n\n\n\nOnce again, here’s the GitHub repo with all of the code we walked through in this article. Read it, use it, and let me know what you think of it!\n\nHow to Create a Browser Extension originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-03T15:12:31.000Z",
      "date_modified": "2022-01-03T15:12:31.000Z",
      "_plugin": {
        "pageFilename": "d645ef42f4bfa6c3bbb22fc24e5d59ee4bea6c3ff8605254f5ab8d51afc4d59e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359698",
      "url": "https://css-tricks.com/thank-you-2021-edition/",
      "title": "Thank You (2021 Edition)",
      "summary": "The year has come to a close and it’s time again for our end-of-year wrapup. The most important message is this: thank you. (thankyouthankyou)\nThanks for stopping by and reading this site. If you didn’t, I’d be out …\n\nThank You (2021 Edition) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>The year has come to a close and <a href=\"https://css-tricks.com/tag/thank-you/\">it&#8217;s time again</a> for our end-of-year wrapup. The most important message is this: thank you. (<em>thankyouthankyou</em>)</p>\n\n\n\n<p>Thanks for stopping by and reading this site. If you didn&#8217;t, I&#8217;d be out of a job around here, and I quite like this job so I owe it all to you. Like a family holiday card, allow me to share how the year went from our perspective, both with numbers and feelings, and then do a review of our goals. </p>\n\n\n\n<span id=\"more-359698\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"641\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=1024%2C641&#038;ssl=1\" alt=\"Thank you from Chris. Clear Ornaments hanging from the sky with gold glitten in them. A cookie candy cane embedded into the ground. Little tiny pine trees with gold stands and frosted white tips. \" class=\"wp-image-359872\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=1024%2C641&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=300%2C188&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=768%2C481&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=1000%2C626&amp;ssl=1 1000w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?w=1224&amp;ssl=1 1224w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"overall-traffic-analytics-numbers\">Overall Traffic Analytics Numbers</h3>\n\n\n<p class=\"ticss-a2910f25\">The site saw <strong>88m</strong> pageviews this year <strong>down 6%</strong> from the 93m last year. Traffic has yo-yo&#8217;d up and down a smidge like that a little over the last 4-5 years, but this 6% is a bit of an alarming drop that I don&#8217;t like to see. These numbers are from Google Analytics, and <a href=\"https://css-tricks.com/proxying-third-party-javascript-as-first-party-javascript-and-the-potential-effect-on-analytics/\">some of my own research</a> this year suggests perhaps 20-30% of visitors to this site actually block the run-of-the-mill client-side JavaScript-powered Google Analytics I use. So perhaps the real traffic is higher, but as the analytics implementation is exactly the same and I don&#8217;t see any reason blocking would have skyrocketed just this past year alone, the downward movement seems real.</p>\n\n\n\n<p>A ~3% drop in organic search traffic was largely responsible for the dip. That&#8217;s big, as search is <strong>74.6%</strong> of all traffic. This points to us just not hitting the mark well enough for what people are searching for. A nice 36% increase in direct traffic points to pretty decent brand awareness, but direct traffic is only <strong>5%</strong> of overall traffic anyway so it doesn&#8217;t make much of a difference compared to search engine traffic. Referral traffic is down, social is up, but both are such small slices right now they just don&#8217;t move the needle. </p>\n\n\n\n<p>You might think, <em>well hey content ages out, search engine traffic to existing content will decline over time</em>. That&#8217;s true, but we publish a ton of <em>new</em> content every year as well as maintain and improve existing content, hence the concern. </p>\n\n\n\n<p class=\"ticss-ae4e08a2\">We invest well into 6-figures in new and updated content every year. So seeing a decline in traffic is disheartening. </p>\n\n\n\n<p>But hey that&#8217;s the game sometimes. I suspect it&#8217;s heavy competition in the developer writing space, which is something we all benefit from as developers, so it ain&#8217;t all bad. We&#8217;ll live and learn and do our best to turn it around for the sake of the health of this site. I&#8217;ve already got (counts fingers and toes) a million ideas. </p>\n\n\n\n<p>All that said, while I do think pageviews is an interesting and relevant metric to a site that uses advertising as a primary business model, there are many others. Unique Visitors are <em>up</em> year over year to <strong>26.3m</strong> from 25.8m, suggesting <em>more different people</em> came to the site this year, which is great, they just didn&#8217;t bop around the site as much or come back quite as often. Pages per visit is very steady at <strong>1.35</strong> meaning for the most part people come, they read, they leave. No surprise there. It&#8217;s mostly that &#8220;come back&#8221; thing to work on.</p>\n\n\n<h3 id=\"the-biggest-leap-in-mobile-traffic-yet\">The Biggest Leap in Mobile Traffic Yet</h3>\n\n\n<p>Pretty big jump in mobile usage this year! </p>\n\n\n\n<p>2021: 20%<br>2020: 15%<br>2019: 15%<br>2018: 12%</p>\n\n\n\n<p>A fifth of all traffic is pretty interesting. Before 2018, even though mobile traffic was surging then too, we were in the low single digits, which I always thought <em>hey this is a reference site for coding and people code on desktop. </em>But clearly, that&#8217;s changing and perhaps people are reading the site in a more <em>news</em> kinda way, which I like. For years I had goals of making this site <em>both</em> full of referential long-green content <em>and</em> a site you could subscribe to for news, like an industry rag. So far so good.</p>\n\n\n<h3 id=\"content-by-the-numbers\">Content by the Numbers</h3>\n\n\n<p>You&#8217;d think if we missed the mark on new content this year, that perhaps some better year would beat articles-written-in-2021 in traffic, but that&#8217;s not the case. Articles written in 2021 drove the most traffic to the site in 2021 (13.5% of overall traffic). Here are the articles that were top-by-pageviews in 2021 <em>that were written in 2021</em>:</p>\n\n\n\n<ol><li><a href=\"https://css-tricks.com/vs-code-extensions-for-html/\">VS Code Extensions for&nbsp;HTML</a> — Chris Coyier</li><li><a href=\"https://css-tricks.com/how-to-create-neon-text-with-css/\">How to Create Neon Text With&nbsp;CSS</a> — Silvia O&#8217;Dwyer</li><li><a href=\"https://css-tricks.com/animating-with-lottie/\">Animating with Lottie</a> — Idorenyin Udoh&nbsp;</li><li><a href=\"https://css-tricks.com/did-you-know-about-the-has-css-selector/\">Did You Know About the :has CSS&nbsp;Selector?</a> — Robin Rendle</li><li><a href=\"https://css-tricks.com/a-table-with-both-a-sticky-header-and-a-sticky-first-column/\">A table with both a sticky header and a sticky first&nbsp;column</a> — Chris Coyier</li><li><a style=\"font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\" href=\"https://css-tricks.com/comparing-the-new-generation-of-build-tools/\">Comparing the New Generation of Build&nbsp;Tools</a> — Hugh Haworth&nbsp;</li><li><a href=\"https://css-tricks.com/mistakes-ive-made-as-an-engineering-manager/\">Mistakes I’ve Made as an Engineering&nbsp;Manager</a> — Sarah Drasner&nbsp;</li><li><a style=\"font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\" href=\"https://css-tricks.com/lets-create-a-custom-audio-player/\">Let’s Create a Custom Audio&nbsp;Player</a> — Idorenyin Udoh&nbsp;</li><li><a href=\"https://css-tricks.com/html-inputs-and-labels-a-love-story/\">HTML Inputs and Labels: A Love&nbsp;Story</a> — Amber Wilson</li><li><a href=\"https://css-tricks.com/front-end-testing-is-for-everyone/\">Front-End Testing is For&nbsp;Everyone</a> — Evgeny Klimenchenko</li></ol>\n\n\n\n<p class=\"is-style-explanation\">I almost shouldn&#8217;t post these lists! <a href=\"https://www.ctrl.blog/entry/most-copied.html\" rel=\"noopener\">Look at what happens to Daniel&nbsp;Aleksandersen</a>.</p>\n\n\n\n<p>Those articles above range from 100k pageviews to 71k pageviews. What&#8217;s interesting is that if you group together all posts that got 40k or more pageviews, there are 44 of them, putting them at about <strong>2.5-3m</strong> pageviews. That&#8217;s kinda cool I think — the &#8220;medium tail&#8221; of content is pretty thick around here. The flexbox guide page alone did <strong>6.7m</strong> pageviews, so that&#8217;s still a beast, but it is bested by all content published in 2021 which clocks in at 11.8m. So investing in content works, it just needs to get tuned such that we aren&#8217;t dropping overall. Perhaps that means SEO tuning of both new content and old.</p>\n\n\n\n<p>Here&#8217;s 11-20 from 2021 just for fun:</p>\n\n\n\n<ol start=\"11\"><li><a href=\"https://css-tricks.com/to-the-brain-reading-computer-code-is-not-the-same-as-reading-language/\">To the brain, reading computer code is not the same as reading&nbsp;language</a> — Geoff Graham&nbsp;</li><li><a href=\"https://css-tricks.com/in-praise-of-the-unambiguous-click-menu/\">In Praise of the Unambiguous Click&nbsp;Menu</a> — Mark Root-Wiley&nbsp;</li><li><a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\">aspect-ratio</a> — Geoff Graham&nbsp;</li><li><a href=\"https://css-tricks.com/theming-and-theme-switching-with-react-and-styled-components/\">Theming and Theme Switching with React and&nbsp;styled-components</a> — Tapas Adhikary&nbsp;</li><li><a href=\"https://css-tricks.com/the-holy-grail-layout-with-css-grid/\">The Holy Grail Layout with CSS&nbsp;Grid</a> — Chris Coyier</li><li><a href=\"https://css-tricks.com/creating-the-perfect-commit-in-git/\">Creating the Perfect Commit in&nbsp;Git</a> — Tobias Günther&nbsp;</li><li><a href=\"https://css-tricks.com/what-if-you-could-use-visual-studio-code-as-the-editor-of-in-browser-developer-tools/\">What if… you could use Visual Studio Code as the editor of in-browser Developer&nbsp;Tools? </a>— Geoff Graham&nbsp;</li><li><a href=\"https://css-tricks.com/is-css-a-programming-language/\">Is CSS a Programming&nbsp;Language?</a> — Chris Coyier</li><li><a href=\"https://css-tricks.com/a-love-letter-to-html-css/\">A Love Letter to HTML &amp; CSS</a> — Ashley Kolodziej&nbsp;</li><li><a href=\"https://css-tricks.com/json-in-css/\">JSON in CSS</a> — Chris Coyier</li></ol>\n\n\n\n<p>And here&#8217;s the top 10 regardless of year, but still scoped to traffic-in-2021:</p>\n\n\n\n<ol><li><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">A Complete Guide to Flexbox</a></li><li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">A Complete Guide to Grid</a></li><li><a href=\"https://css-tricks.com/perfect-full-page-background-image/\">Perfect Full Page&nbsp;Background&nbsp;Image</a></li><li><a href=\"https://css-tricks.com/using-svg/\">Using SVG</a></li><li><a href=\"https://css-tricks.com/the-shapes-of-css/\">The Shapes of CSS</a></li><li><a href=\"https://css-tricks.com/snippets/css/media-queries-for-standard-devices/\">Media Queries for Standard Devices</a></li><li><a href=\"https://css-tricks.com/almanac/properties/b/box-shadow/\">box-shadow</a></li><li><span style=\"color: initial; font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\"><a href=\"https://css-tricks.com/snippets/css/css-triangle/\">CSS Triangle</a></span></li><li><a href=\"https://css-tricks.com/snippets/css/using-font-face-in-css/\">How to use @font-face in CSS</a></li><li><a href=\"https://css-tricks.com/scale-svg/\">How to Scale&nbsp;SVG</a></li></ol>\n\n\n\n<p>I like seeing the Almanac not only perform pretty well overall but have some individual pages be top-performers on their own. </p>\n\n\n<h3 id=\"comments\">Comments</h3>\n\n\n<p>We had about <strong>4,320</strong> legit comments on the site this year, <em>almost exactly</em> the number from last year. Weird!</p>\n\n\n\n<p>That seems like a lot, especially as we approve&#8230; I&#8217;d say half?&#8230; of commenters that are left. There is a lot of junk posts (e.g. &#8220;good post!&#8221; kinda stuff, that we just don&#8217;t post as to not bother the author with useless email notifications of new comments, nor readers with useless content). We just delete those junk posts (as in, not approve them in the first place). </p>\n\n\n\n<p>There is spam too of course. We crossed the <strong>2m</strong> spam comments threshold, but through a combination of <a href=\"https://akismet.com/\" rel=\"noopener\">Akismet</a> and <a href=\"https://wordpress.org/plugins/anti-spam/\" rel=\"noopener\">Anti-Spam</a> not too much spam sneaks through and is easily trashed before approval. </p>\n\n\n\n<p>Mentally, I really rollercoaster on comments. Sometimes they are great and helpful. Sometimes they are full of rudeness, hate, and anger. Those need to be looked at and trashed, meaning comments represent an entry point into my brain for all that negativity. Part of me thinks we should just shut them off, and if people have something important to say, we can encourage them to use their own blog (it ain&#8217;t hard to spin one up!) to comment and we&#8217;ll link to it if it&#8217;s good. </p>\n\n\n\n<p>But then I think of all the helpful comments and comments that help keep me up to date. Heck I just learned that Chrome is postponing all that removal of <code>alert()</code> stuff <a href=\"https://css-tricks.com/choice-words-about-the-upcoming-deprecation-of-javascript-dialogs/#comment-1787573\">via a comment from Kyle</a>, and I probably would have missed that otherwise. Plus the fact that there are <meta charset=\"utf-8\">4,320 of them this year that pass muster feels like the scale is tipped toward keeping them. </p>\n\n\n<h3 id=\"newsletter\">Newsletter</h3>\n\n\n<p>We&#8217;re at about <strong>91,000</strong> newsletter subscribers as this year wraps, up from 81,000 last year. A respectable march forward and makes it likely we&#8217;ll hit that 100k milestone sometime in 2022. </p>\n\n\n\n<p>Huge props to Robin for leading up <a href=\"https://css-tricks.com/newsletters/\">the newsletter</a> with wonderful writing. I think he really found a voice and stride on the newsletter this year. </p>\n\n\n\n<p>We didn&#8217;t miss a single week. Part of what helps there is that they have sponsors so there is some clear obligation to get them out on time, but I think it&#8217;s more like we have <a href=\"https://css-tricks.com/a-gutenburg-powered-newsletter/\">a system</a> and the system works. </p>\n\n\n\n<p>I&#8217;d really like to juice up newsletter subscriptions moreso because I think it&#8217;s actually a darn nice weekly read than for any specific business reason.</p>\n\n\n<h3 id=\"video\">Video</h3>\n\n\n<p>Thanks to <a href=\"https://daverupert.com/\" rel=\"noopener\">Dave&#8217;s</a> idea that we get <a href=\"https://shoptalkshow.com/video/\" rel=\"noopener\">ShopTalk more into video</a>, we&#8217;ve been using the <a href=\"https://www.youtube.com/realcsstricks\" rel=\"noopener\">CSS-Tricks YouTube channel</a> and thus had a banner year in publishing video! <strong>35</strong> brand new videos!</p>\n\n\n<h3 id=\"site-updates\">Site Updates</h3>\n\n\n<p>The design evolved a bit this year, but nothing overly dramatic. Normally this time of year my fingers are itching for a new design, and believe me there are Figma drafts cooking, but I just haven&#8217;t had the time or inspiration for a true v19 just yet. </p>\n\n\n\n<p>So no major changes to the tech behind the site, but plenty of minor ones. For instance:</p>\n\n\n\n<ul><li>The Yoast SEO plugin was giving me problems. It had super frequent updates, which I guess is good, but there was a high frequency of problems with the updates where either the core plugin or the pro plugin wouldn&#8217;t update correctly (up to causing such problems as literally taking down the site) and settings getting messed up during updates. For a while I just turned it off entirely. But then I started hearing good things about <a href=\"https://rankmath.com/\" rel=\"noopener\">RankMath</a> so I&#8217;m trying that, and so far so good. It&#8217;s got me kinda inspired to take content SEO more seriously. Yoast had some claws in the site in other ways, for example it provides a pretty nice Table of Contents block that I&#8217;m still searching for a solution for (maybe it&#8217;s coming to <a href=\"https://github.com/WordPress/gutenberg/pull/29739\" rel=\"noopener\">core?</a>). It also had pretty nice breadcrumbs, and had to switch over to <a href=\"https://mtekk.us/code/breadcrumb-navxt/\" rel=\"noopener\">Breadcrumb NavXT</a>.</li><li><a href=\"https://wordpress.org/plugins/jetpack-boost/\" rel=\"noopener\">Jetpack Boost</a> is new to the site this year, and I&#8217;m impressed at how it handles critical CSS. <a href=\"https://css-tricks.com/jetpack/\">Jetpack</a> (full disclosure: a long time sponsor) is generally extremely helpful. I particularly like how the site search works, which is just out-of-the-box Jetpack Instant Search.</li><li>We really dialed in <a href=\"https://css-tricks.com/auto-generated-social-media-images/\">the social media images</a> this year. </li><li>We also dialed in the eCommerce situation. The <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter membership</a> unlocks additional content on the site, which I can <a href=\"https://css-tricks.com/the-greatest-css-tricks-vol-i-ebook-pdf-and-epub/\">now provide in eBook formats</a>. So I&#8217;m really all set to produce more of that type of content.</li></ul>\n\n\n<h3 id=\"goal-review\">Goal Review</h3>\n\n\n<p><strong>&#x1f6ab; Publish Three Guides. </strong>I thought this would be easy since last year our goal was 2 guides and we published 9! But this year we only managed one: <a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">A Complete Guide to Custom Properties</a>. We did publish some other pretty big series like Tobias Günther&#8217;s <a href=\"https://css-tricks.com/creating-the-perfect-commit-in-git/#advanced-git-series\">9-part Advanced Git series</a> and four more entries in Jay Hoffman&#8217;s <a href=\"https://css-tricks.com/category/history/\">Web History series</a>. </p>\n\n\n\n<p><meta charset=\"utf-8\"><strong>&#x1f6ab;</strong> <strong>Stay focused on how-to technical content around our strengths.</strong> Kind of a close call here. It&#8217;s not like we didn&#8217;t publish quite a bit of how-to technical content. But I&#8217;m going to say we failed because I don&#8217;t think we kept this in mind strongly enough throughout the year. We didn&#8217;t say &#8220;we&#8217;re good at this type of content so we&#8217;re going to lean into that specifically&#8221; like this goal suggested we should. </p>\n\n\n\n<p><meta charset=\"utf-8\"><strong>&#x1f6ab;</strong> <strong>Complete all missing Almanac entries.</strong> I hate marking this as failed, but I&#8217;m only doing that because of how it was worded with &#8220;all&#8221;. I think I had in mind that there was a really clear finite number of Alamanc articles to finish and we just had to do that. I think it&#8217;s a lot more wishy-washy than that, partially because of editorial choices (do you publish a unique entry for every single <a href=\"https://css-tricks.com/css-logical-properties-and-values/\">logical property</a> or group them, for example). </p>\n\n\n\n<p>But also, should we build an SVG-specific section? Should we have a new section for all the @at rules? It&#8217;s hard to say when the Almanac would be &#8220;complete&#8221;, so I&#8217;d just rather not. This page really needs a cleanup, but it&#8217;s got many ideas in there for more work that needs to be done/commissioned if anyone is so inclined.</p>\n\n\n\n<p>We <em>did</em> do a pretty good job on publishing <em>new</em> entries though — more than any relatively recent year! </p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Almanac Entry</th><th>Published</th></tr></thead><tbody><tr><td><a href=\"https://css-tricks.com/almanac/properties/s/scale/\">scale</a></td><td>2021-11-10</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/t/translate/\">translate</a></td><td>2021-11-09</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/r/rotate/\">rotate</a></td><td>2021-11-08</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-border/\">mask-border</a></td><td>2021-11-03</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/p/padding-inline/\">padding-inline</a></td><td>2021-09-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/overscroll-behavior/\">overscroll-behavior</a></td><td>2021-09-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/b/border-block/\">border-block</a></td><td>2021-09-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/outline-color/\">outline-color</a></td><td>2021-09-01</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/a/accent-color/\">accent-color</a></td><td>2021-08-26</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/b/block-size/\">block-size</a></td><td>2021-08-25</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/outline-style/\">outline-style</a></td><td>2021-08-16</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/outline-width/\">outline-width</a></td><td>2021-08-10</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/t/text-emphasis/\">text-emphasis</a></td><td>2021-08-04</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/b/backdrop/\">::backdrop</a></td><td>2021-08-03</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/h/hyphenate-limit-chars/\">hyphenate-limit-chars</a></td><td>2021-07-15</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/f/fullscreen/\">:fullscreen</a></td><td>2021-07-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask/\">mask</a></td><td>2021-07-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/c/content-visibility/\">content-visibility</a></td><td>2021-06-21</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/p/place-content/\">place-content</a></td><td>2021-05-13</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-composite/\">mask-composite</a></td><td>2021-05-10</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/e/empty/\">:empty</a></td><td>2021-04-27</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/w/where/\">:where</a></td><td>2021-03-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/j/justify-self/\">justify-self</a></td><td>2021-03-18</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-type/\">mask-type</a></td><td>2021-03-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/p/place-self/\">place-self</a></td><td>2021-03-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/c/current/\">:current</a></td><td>2021-02-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/f/future/\">:future</a></td><td>2021-02-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/b/border-boundary/\">border-boundary</a></td><td>2021-02-09</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-mode/\">mask-mode</a></td><td>2021-02-03</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/c/caret-shape/\">caret-shape</a></td><td>2021-01-27</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/c/caret/\">caret</a></td><td>2021-01-27</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\">aspect-ratio</a></td><td>2021-01-20</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-inline/\">margin-inline</a></td><td>2021-01-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-inline-end/\">margin-inline-end</a></td><td>2021-01-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-block-start/\">margin-block-start</a></td><td>2021-01-08</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-block-end/\">margin-block-end</a></td><td>2021-01-08</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-block/\">margin-block</a></td><td>2021-01-06</td></tr></tbody></table></figure>\n\n\n<h3 id=\"settting-2022-goals\">Settting 2022 Goals</h3>\n\n\n<ul><li><strong>More SEO focus.</strong> I&#8217;ve almost shunned SEO in the past. Partially because the HTML best practices seem pretty easy and obvious, and my inbox is so full of total slimeball link builders I&#8217;d like to see do literally anything else with their time. Butttt. I&#8217;m just being ignorant about it. I think it will be fun, interesting, and likely useful to take a more considered look at SEO best practices for a content site like this and make a stab at improving it. The related goal being: <strong>Gain 10% in pageview traffic.</strong> We lost 6% this year, so I think 10% will get us back on track and moving upward. But it&#8217;s a big goal so I&#8217;m already nervous about it.</li><li><strong>Another digital book.</strong> All the infrastructure is there for this and I&#8217;ve got ideas. I just need to write and put it in place.</li><li><strong>More social media experimentation. </strong>That&#8217;s a loosey-goosey goal but whatever, we&#8217;ve got our work cut out for us in other ways. Like SEO, for a few years there I kinda shunned dedicated social media work for the CSS-Tricks brand. Mostly because when I look at the traffic numbers, <em>so very little of it</em> comes from social media, especially considering how much time we were spending on it in the past. We don&#8217;t really benefit much from brand social media, so why bother? Well, maybe I was thinking about it the wrong way. Maybe we can just not care what <em>traffic</em> it drives but care about the connection with readers directly there. If we&#8217;re more fun and interesting on social media, maybe we continue to build trust in what we&#8217;re doing here. Maybe it can help drive sales if we get that second goal done. Maybe its more directly monetizeable.</li></ul>\n\n\n<h3 id=\"thank-you\">Thank You</h3>\n\n\n<p>Special thanks to <a href=\"https://geoffgraham.me/\" rel=\"noopener\">Geoff</a>! If you didn&#8217;t know, he&#8217;s our lead editor around here and keeping this entire site humming along nicely. You&#8217;ll work with Geoff if you do any <a href=\"https://css-tricks.com/guest-writing-for-css-tricks/\">guest writing</a> here at all. </p>\n\n\n\n<p>Special thanks to our biggest year-long sponsors <a href=\"https://automattic.com/?aff=8638\" rel=\"noopener\">Automattic</a> and <a href=\"https://frontendmasters.com/?utm_source=css-tricks&amp;utm_medium=website&amp;utm_campaign=css-tricks-tags-sidebar\" rel=\"noopener\">Frontend Masters</a>. <a href=\"https://css-tricks.com/category/2021-end-of-year-thoughts/\">Our year-end series</a> is both a thank you to you the readers and to them. </p>\n\n\n\n<p>To another year!</p>\n\n\n\n<p>&#x1f64f;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/thank-you-2021-edition/\">Thank You (2021 Edition)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "The year has come to a close and it’s time again for our end-of-year wrapup. The most important message is this: thank you. (thankyouthankyou)\n\n\n\nThanks for stopping by and reading this site. If you didn’t, I’d be out of a job around here, and I quite like this job so I owe it all to you. Like a family holiday card, allow me to share how the year went from our perspective, both with numbers and feelings, and then do a review of our goals. \n\n\n\n\n\n\n\n\n\n\nOverall Traffic Analytics Numbers\n\n\nThe site saw 88m pageviews this year down 6% from the 93m last year. Traffic has yo-yo’d up and down a smidge like that a little over the last 4-5 years, but this 6% is a bit of an alarming drop that I don’t like to see. These numbers are from Google Analytics, and some of my own research this year suggests perhaps 20-30% of visitors to this site actually block the run-of-the-mill client-side JavaScript-powered Google Analytics I use. So perhaps the real traffic is higher, but as the analytics implementation is exactly the same and I don’t see any reason blocking would have skyrocketed just this past year alone, the downward movement seems real.\n\n\n\nA ~3% drop in organic search traffic was largely responsible for the dip. That’s big, as search is 74.6% of all traffic. This points to us just not hitting the mark well enough for what people are searching for. A nice 36% increase in direct traffic points to pretty decent brand awareness, but direct traffic is only 5% of overall traffic anyway so it doesn’t make much of a difference compared to search engine traffic. Referral traffic is down, social is up, but both are such small slices right now they just don’t move the needle. \n\n\n\nYou might think, well hey content ages out, search engine traffic to existing content will decline over time. That’s true, but we publish a ton of new content every year as well as maintain and improve existing content, hence the concern. \n\n\n\nWe invest well into 6-figures in new and updated content every year. So seeing a decline in traffic is disheartening. \n\n\n\nBut hey that’s the game sometimes. I suspect it’s heavy competition in the developer writing space, which is something we all benefit from as developers, so it ain’t all bad. We’ll live and learn and do our best to turn it around for the sake of the health of this site. I’ve already got (counts fingers and toes) a million ideas. \n\n\n\nAll that said, while I do think pageviews is an interesting and relevant metric to a site that uses advertising as a primary business model, there are many others. Unique Visitors are up year over year to 26.3m from 25.8m, suggesting more different people came to the site this year, which is great, they just didn’t bop around the site as much or come back quite as often. Pages per visit is very steady at 1.35 meaning for the most part people come, they read, they leave. No surprise there. It’s mostly that “come back” thing to work on.\n\n\nThe Biggest Leap in Mobile Traffic Yet\n\n\nPretty big jump in mobile usage this year! \n\n\n\n2021: 20%2020: 15%2019: 15%2018: 12%\n\n\n\nA fifth of all traffic is pretty interesting. Before 2018, even though mobile traffic was surging then too, we were in the low single digits, which I always thought hey this is a reference site for coding and people code on desktop. But clearly, that’s changing and perhaps people are reading the site in a more news kinda way, which I like. For years I had goals of making this site both full of referential long-green content and a site you could subscribe to for news, like an industry rag. So far so good.\n\n\nContent by the Numbers\n\n\nYou’d think if we missed the mark on new content this year, that perhaps some better year would beat articles-written-in-2021 in traffic, but that’s not the case. Articles written in 2021 drove the most traffic to the site in 2021 (13.5% of overall traffic). Here are the articles that were top-by-pageviews in 2021 that were written in 2021:\n\n\n\nVS Code Extensions for HTML — Chris CoyierHow to Create Neon Text With CSS — Silvia O’DwyerAnimating with Lottie — Idorenyin Udoh Did You Know About the :has CSS Selector? — Robin RendleA table with both a sticky header and a sticky first column — Chris CoyierComparing the New Generation of Build Tools — Hugh Haworth Mistakes I’ve Made as an Engineering Manager — Sarah Drasner Let’s Create a Custom Audio Player — Idorenyin Udoh HTML Inputs and Labels: A Love Story — Amber WilsonFront-End Testing is For Everyone — Evgeny Klimenchenko\n\n\n\nI almost shouldn’t post these lists! Look at what happens to Daniel Aleksandersen.\n\n\n\nThose articles above range from 100k pageviews to 71k pageviews. What’s interesting is that if you group together all posts that got 40k or more pageviews, there are 44 of them, putting them at about 2.5-3m pageviews. That’s kinda cool I think — the “medium tail” of content is pretty thick around here. The flexbox guide page alone did 6.7m pageviews, so that’s still a beast, but it is bested by all content published in 2021 which clocks in at 11.8m. So investing in content works, it just needs to get tuned such that we aren’t dropping overall. Perhaps that means SEO tuning of both new content and old.\n\n\n\nHere’s 11-20 from 2021 just for fun:\n\n\n\nTo the brain, reading computer code is not the same as reading language — Geoff Graham In Praise of the Unambiguous Click Menu — Mark Root-Wiley aspect-ratio — Geoff Graham Theming and Theme Switching with React and styled-components — Tapas Adhikary The Holy Grail Layout with CSS Grid — Chris CoyierCreating the Perfect Commit in Git — Tobias Günther What if… you could use Visual Studio Code as the editor of in-browser Developer Tools? — Geoff Graham Is CSS a Programming Language? — Chris CoyierA Love Letter to HTML & CSS — Ashley Kolodziej JSON in CSS — Chris Coyier\n\n\n\nAnd here’s the top 10 regardless of year, but still scoped to traffic-in-2021:\n\n\n\nA Complete Guide to FlexboxA Complete Guide to GridPerfect Full Page Background ImageUsing SVGThe Shapes of CSSMedia Queries for Standard Devicesbox-shadowCSS TriangleHow to use @font-face in CSSHow to Scale SVG\n\n\n\nI like seeing the Almanac not only perform pretty well overall but have some individual pages be top-performers on their own. \n\n\nComments\n\n\nWe had about 4,320 legit comments on the site this year, almost exactly the number from last year. Weird!\n\n\n\nThat seems like a lot, especially as we approve… I’d say half?… of commenters that are left. There is a lot of junk posts (e.g. “good post!” kinda stuff, that we just don’t post as to not bother the author with useless email notifications of new comments, nor readers with useless content). We just delete those junk posts (as in, not approve them in the first place). \n\n\n\nThere is spam too of course. We crossed the 2m spam comments threshold, but through a combination of Akismet and Anti-Spam not too much spam sneaks through and is easily trashed before approval. \n\n\n\nMentally, I really rollercoaster on comments. Sometimes they are great and helpful. Sometimes they are full of rudeness, hate, and anger. Those need to be looked at and trashed, meaning comments represent an entry point into my brain for all that negativity. Part of me thinks we should just shut them off, and if people have something important to say, we can encourage them to use their own blog (it ain’t hard to spin one up!) to comment and we’ll link to it if it’s good. \n\n\n\nBut then I think of all the helpful comments and comments that help keep me up to date. Heck I just learned that Chrome is postponing all that removal of alert() stuff via a comment from Kyle, and I probably would have missed that otherwise. Plus the fact that there are 4,320 of them this year that pass muster feels like the scale is tipped toward keeping them. \n\n\nNewsletter\n\n\nWe’re at about 91,000 newsletter subscribers as this year wraps, up from 81,000 last year. A respectable march forward and makes it likely we’ll hit that 100k milestone sometime in 2022. \n\n\n\nHuge props to Robin for leading up the newsletter with wonderful writing. I think he really found a voice and stride on the newsletter this year. \n\n\n\nWe didn’t miss a single week. Part of what helps there is that they have sponsors so there is some clear obligation to get them out on time, but I think it’s more like we have a system and the system works. \n\n\n\nI’d really like to juice up newsletter subscriptions moreso because I think it’s actually a darn nice weekly read than for any specific business reason.\n\n\nVideo\n\n\nThanks to Dave’s idea that we get ShopTalk more into video, we’ve been using the CSS-Tricks YouTube channel and thus had a banner year in publishing video! 35 brand new videos!\n\n\nSite Updates\n\n\nThe design evolved a bit this year, but nothing overly dramatic. Normally this time of year my fingers are itching for a new design, and believe me there are Figma drafts cooking, but I just haven’t had the time or inspiration for a true v19 just yet. \n\n\n\nSo no major changes to the tech behind the site, but plenty of minor ones. For instance:\n\n\n\nThe Yoast SEO plugin was giving me problems. It had super frequent updates, which I guess is good, but there was a high frequency of problems with the updates where either the core plugin or the pro plugin wouldn’t update correctly (up to causing such problems as literally taking down the site) and settings getting messed up during updates. For a while I just turned it off entirely. But then I started hearing good things about RankMath so I’m trying that, and so far so good. It’s got me kinda inspired to take content SEO more seriously. Yoast had some claws in the site in other ways, for example it provides a pretty nice Table of Contents block that I’m still searching for a solution for (maybe it’s coming to core?). It also had pretty nice breadcrumbs, and had to switch over to Breadcrumb NavXT.Jetpack Boost is new to the site this year, and I’m impressed at how it handles critical CSS. Jetpack (full disclosure: a long time sponsor) is generally extremely helpful. I particularly like how the site search works, which is just out-of-the-box Jetpack Instant Search.We really dialed in the social media images this year. We also dialed in the eCommerce situation. The MVP Supporter membership unlocks additional content on the site, which I can now provide in eBook formats. So I’m really all set to produce more of that type of content.\n\n\nGoal Review\n\n\n🚫 Publish Three Guides. I thought this would be easy since last year our goal was 2 guides and we published 9! But this year we only managed one: A Complete Guide to Custom Properties. We did publish some other pretty big series like Tobias Günther’s 9-part Advanced Git series and four more entries in Jay Hoffman’s Web History series. \n\n\n\n🚫 Stay focused on how-to technical content around our strengths. Kind of a close call here. It’s not like we didn’t publish quite a bit of how-to technical content. But I’m going to say we failed because I don’t think we kept this in mind strongly enough throughout the year. We didn’t say “we’re good at this type of content so we’re going to lean into that specifically” like this goal suggested we should. \n\n\n\n🚫 Complete all missing Almanac entries. I hate marking this as failed, but I’m only doing that because of how it was worded with “all”. I think I had in mind that there was a really clear finite number of Alamanc articles to finish and we just had to do that. I think it’s a lot more wishy-washy than that, partially because of editorial choices (do you publish a unique entry for every single logical property or group them, for example). \n\n\n\nBut also, should we build an SVG-specific section? Should we have a new section for all the @at rules? It’s hard to say when the Almanac would be “complete”, so I’d just rather not. This page really needs a cleanup, but it’s got many ideas in there for more work that needs to be done/commissioned if anyone is so inclined.\n\n\n\nWe did do a pretty good job on publishing new entries though — more than any relatively recent year! \n\n\n\nAlmanac EntryPublishedscale2021-11-10translate2021-11-09rotate2021-11-08mask-border2021-11-03padding-inline2021-09-23overscroll-behavior2021-09-14border-block2021-09-02outline-color2021-09-01accent-color2021-08-26block-size2021-08-25outline-style2021-08-16outline-width2021-08-10text-emphasis2021-08-04::backdrop2021-08-03hyphenate-limit-chars2021-07-15:fullscreen2021-07-14mask2021-07-02content-visibility2021-06-21place-content2021-05-13mask-composite2021-05-10:empty2021-04-27:where2021-03-23justify-self2021-03-18mask-type2021-03-02place-self2021-03-02:current2021-02-23:future2021-02-23border-boundary2021-02-09mask-mode2021-02-03caret-shape2021-01-27caret2021-01-27aspect-ratio2021-01-20margin-inline2021-01-14margin-inline-end2021-01-14margin-block-start2021-01-08margin-block-end2021-01-08margin-block2021-01-06\n\n\nSettting 2022 Goals\n\n\nMore SEO focus. I’ve almost shunned SEO in the past. Partially because the HTML best practices seem pretty easy and obvious, and my inbox is so full of total slimeball link builders I’d like to see do literally anything else with their time. Butttt. I’m just being ignorant about it. I think it will be fun, interesting, and likely useful to take a more considered look at SEO best practices for a content site like this and make a stab at improving it. The related goal being: Gain 10% in pageview traffic. We lost 6% this year, so I think 10% will get us back on track and moving upward. But it’s a big goal so I’m already nervous about it.Another digital book. All the infrastructure is there for this and I’ve got ideas. I just need to write and put it in place.More social media experimentation. That’s a loosey-goosey goal but whatever, we’ve got our work cut out for us in other ways. Like SEO, for a few years there I kinda shunned dedicated social media work for the CSS-Tricks brand. Mostly because when I look at the traffic numbers, so very little of it comes from social media, especially considering how much time we were spending on it in the past. We don’t really benefit much from brand social media, so why bother? Well, maybe I was thinking about it the wrong way. Maybe we can just not care what traffic it drives but care about the connection with readers directly there. If we’re more fun and interesting on social media, maybe we continue to build trust in what we’re doing here. Maybe it can help drive sales if we get that second goal done. Maybe its more directly monetizeable.\n\n\nThank You\n\n\nSpecial thanks to Geoff! If you didn’t know, he’s our lead editor around here and keeping this entire site humming along nicely. You’ll work with Geoff if you do any guest writing here at all. \n\n\n\nSpecial thanks to our biggest year-long sponsors Automattic and Frontend Masters. Our year-end series is both a thank you to you the readers and to them. \n\n\n\nTo another year!\n\n\n\n🙏\n\nThank You (2021 Edition) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-01T17:50:59.000Z",
      "date_modified": "2022-01-01T17:50:59.000Z",
      "_plugin": {
        "pageFilename": "737350f03920d81a4955296b047e2e6008c397f2d29517aef8eb0b675b032f5e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360073",
      "url": "https://css-tricks.com/defensive-css/",
      "title": "Defensive CSS",
      "summary": "Ahmad Shadeed nails it again with “Defensive CSS.” The idea is that you should write CSS to be ready for issues caused by dynamic content. \nMore items than you thought would be there? No problem, the area can expand or …\n\nDefensive CSS originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p><br>Ahmad&nbsp;Shadeed nails it again with <a href=\"https://ishadeed.com/article/defensive-css/\" rel=\"noopener\">&#8220;Defensive CSS.&#8221;</a> The idea is that you should write CSS to be <em>ready for issues caused by dynamic content</em>. </p>\n\n\n\n<p>More items than you thought would be there? No problem, the area can expand or scroll. Title too long? No problem, it either wraps or truncates, and won&#8217;t bump into anything weird because margins or gaps are set up. Image come over in an unexpected size? No worries, the layout is designed to make sure the dedicated area is filled with image and will handle the sizing/cropping accordingly.</p>\n\n\n\n<p>There is no such thing as being a good CSS developer and not coding defensively. This is what being a CSS developer is, especially when you factor in progressive enhancement concepts and cross-browser/device unknowns.</p>\n<p><a href=\"https://ishadeed.com/article/defensive-css/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/defensive-css/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/defensive-css/\">Defensive CSS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Ahmad Shadeed nails it again with “Defensive CSS.” The idea is that you should write CSS to be ready for issues caused by dynamic content. \n\n\n\nMore items than you thought would be there? No problem, the area can expand or scroll. Title too long? No problem, it either wraps or truncates, and won’t bump into anything weird because margins or gaps are set up. Image come over in an unexpected size? No worries, the layout is designed to make sure the dedicated area is filled with image and will handle the sizing/cropping accordingly.\n\n\n\nThere is no such thing as being a good CSS developer and not coding defensively. This is what being a CSS developer is, especially when you factor in progressive enhancement concepts and cross-browser/device unknowns.\nTo Shared Link — Permalink on CSS-Tricks\nDefensive CSS originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2021-12-31T18:41:47.000Z",
      "date_modified": "2021-12-31T18:41:47.000Z",
      "_plugin": {
        "pageFilename": "31cc8d6f8d9f6700e649a1f61f0c7382e8300f019e30946084510b081941ab21.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359941",
      "url": "https://css-tricks.com/the-web-is-more-gooder-and-other-observations-on-todays-web-tech/",
      "title": "The Web is More Gooder, and Other Observations on Today’s Web Tech",
      "summary": "I’m actually working on a talk (whew! been a while! kinda feels good!) about just how good the world of building websites has gotten. I plan to cover a wide swath of web tech, on purpose, because I …\n\nThe Web is More Gooder, and Other Observations on Today’s Web Tech originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I&#8217;m actually working on a talk (<em>whew! been a while! kinda feels good!</em>) about just how <em>good</em> the world of building websites has gotten. I plan to cover a wide swath of web tech, on purpose, because I feel like things have gotten good all around. CSS is doing great, but so is nearly everything else involved in making websites, especially if we take care in what we&#8217;re doing.</p>\n\n\n\n<p>It also strikes me that updates to the web platform and the ecosystem around it are generally <em>additive</em>. If you feel like the web used to be simpler, well, perhaps it was—but it also <em>still is</em>. Whatever you could do then you can do now, if you want to, although, it would be a fair point if you&#8217;re job searching and the expectations to get hired involve a wheelbarrow of complicated tech.</p>\n\n\n\n<span id=\"more-359941\"></span>\n\n\n\n<p>This idea of the web getting better feels like it&#8217;s in the water a bit&#8230;</p>\n\n\n\n<p>Chris Ferdinandi in <a href=\"https://gomakethings.com/web-tech-is-better.-developer-norms-are-worse./\" rel=\"noopener\">&#8220;Web tech is better. Developer norms are worse.&#8221;</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>What the modern web can actually do, easily and out-of-the-box, is amazing. My friend Sarah Dayan started her career at around the same time as me, and has&nbsp;<a href=\"https://twitter.com/frontstuff_io/status/1467551852447379462\" rel=\"noopener\">a wonderful thread on how things have changed since then</a>.<br><br>In particular, Sarah talks about the dramatically improved capabilities of the web&nbsp;<em>and</em>&nbsp;expectations from customers and the people who use it.</p><p><strong>Modern web technology is lightyears ahead of the late 2000s.</strong></p></blockquote>\n\n\n\n<p>Wes and Scott on Syntax.fm 410 also <a href=\"https://syntax.fm/show/410/everything-in-web-dev-is-amazing\" rel=\"noopener\">talk about all kinds of stuff that is great now</a>, from HTML, CSS, and JavaScript to tooling and hosting.</p>\n\n\n\n<p>Simeon Griggs in <a href=\"https://www.simeongriggs.dev/there-has-never-been-a-better-time-to-build-websites\" rel=\"noopener\">&#8220;There&#8217;s never been a better time to build websites&#8221;</a> has a totally different take on what is great on the web these days than mine, but I appreciate that. The <em>options</em> around building websites have also widened, meaning there are approaches to things that just feel better to people who think and work in different ways. </p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>While there&#8217;s absolutely a learning curve to getting started, once you&#8217;ve got momentum, modern web development feels like having rocket boosters. The distance between idea and execution is as short as it&#8217;s ever been.</p></blockquote>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-web-is-more-gooder-and-other-observations-on-todays-web-tech/\">The Web is More Gooder, and Other Observations on Today&#8217;s Web Tech</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I’m actually working on a talk (whew! been a while! kinda feels good!) about just how good the world of building websites has gotten. I plan to cover a wide swath of web tech, on purpose, because I feel like things have gotten good all around. CSS is doing great, but so is nearly everything else involved in making websites, especially if we take care in what we’re doing.\n\n\n\nIt also strikes me that updates to the web platform and the ecosystem around it are generally additive. If you feel like the web used to be simpler, well, perhaps it was—but it also still is. Whatever you could do then you can do now, if you want to, although, it would be a fair point if you’re job searching and the expectations to get hired involve a wheelbarrow of complicated tech.\n\n\n\n\n\n\n\nThis idea of the web getting better feels like it’s in the water a bit…\n\n\n\nChris Ferdinandi in “Web tech is better. Developer norms are worse.”:\n\n\n\nWhat the modern web can actually do, easily and out-of-the-box, is amazing. My friend Sarah Dayan started her career at around the same time as me, and has a wonderful thread on how things have changed since then.In particular, Sarah talks about the dramatically improved capabilities of the web and expectations from customers and the people who use it.Modern web technology is lightyears ahead of the late 2000s.\n\n\n\nWes and Scott on Syntax.fm 410 also talk about all kinds of stuff that is great now, from HTML, CSS, and JavaScript to tooling and hosting.\n\n\n\nSimeon Griggs in “There’s never been a better time to build websites” has a totally different take on what is great on the web these days than mine, but I appreciate that. The options around building websites have also widened, meaning there are approaches to things that just feel better to people who think and work in different ways. \n\n\n\nWhile there’s absolutely a learning curve to getting started, once you’ve got momentum, modern web development feels like having rocket boosters. The distance between idea and execution is as short as it’s ever been.\n\nThe Web is More Gooder, and Other Observations on Today’s Web Tech originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2021-12-30T20:08:07.000Z",
      "date_modified": "2021-12-30T20:08:07.000Z",
      "_plugin": {
        "pageFilename": "e8cbc7fa8ae5d9c82cf7c8fa61ae6b1232062147066385a345aab4b9ca146484.html"
      }
    }
  ],
  "_plugin": {
    "rawFeed": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\"\n\txmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n\txmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n\txmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n\txmlns:atom=\"http://www.w3.org/2005/Atom\"\n\txmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n\txmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\"\n\t xmlns:media=\"http://search.yahoo.com/mrss/\" \n\txmlns:georss=\"http://www.georss.org/georss\"\n\txmlns:geo=\"http://www.w3.org/2003/01/geo/wgs84_pos#\"\n\t>\n\n<channel>\n\t<title>CSS-Tricks</title>\n\t<atom:link href=\"https://css-tricks.com/feed/\" rel=\"self\" type=\"application/rss+xml\" />\n\t<link>https://css-tricks.com</link>\n\t<description>Tips, Tricks, and Techniques on using Cascading Style Sheets.</description>\n\t<lastBuildDate>Mon, 28 Mar 2022 18:15:43 +0000</lastBuildDate>\n\t<language>en-US</language>\n\t<sy:updatePeriod>\n\thourly\t</sy:updatePeriod>\n\t<sy:updateFrequency>\n\t1\t</sy:updateFrequency>\n\t<generator>https://wordpress.org/?v=5.9.2</generator>\n\n<image>\n\t<url>https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=32%2C32&#038;ssl=1</url>\n\t<title>CSS-Tricks</title>\n\t<link>https://css-tricks.com</link>\n\t<width>32</width>\n\t<height>32</height>\n</image> \n<site xmlns=\"com-wordpress:feed-additions:1\">45537868</site>\t<item>\n\t\t<title>6 Useful Bookmarklets to Boost Web Development</title>\n\t\t<link>https://css-tricks.com/web-development-bookmarklets/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/web-development-bookmarklets/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Daniel Schwarz]]></dc:creator>\n\t\t<pubDate>Mon, 28 Mar 2022 18:15:41 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[bookmarklet]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=364118</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>A bookmarklet is a JavaScript-based bookmark that adds to a web browser. I’d like to show you some awesome web browser hacks to aid your web development workflow and how to convert those hacks into time-saving bookmarklets.</p>\n<ol class=\"simpletoc-list\">\n<li>\n<a  href=\"#activating-design-mode\">Activating design mode</a></li>\n</ol>\n<p>&#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/web-development-bookmarklets/\">6 Useful Bookmarklets to Boost Web Development</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>A bookmarklet is a JavaScript-based bookmark that adds to a web browser. I’d like to show you some awesome web browser hacks to aid your web development workflow and how to convert those hacks into time-saving bookmarklets.</p>\n\n\n\n<span id=\"more-364118\"></span>\n\n\n<ol class=\"simpletoc-list\"   >\n<li>\n<a  href=\"#activating-design-mode\">Activating design mode</a></li><li>\n<a  href=\"#applying-a-background-to-everything\">Applying a background to everything</a></li><li>\n<a  href=\"#simulating-events\">Simulating events</a></li><li>\n<a  href=\"#setting-cookies\">Setting cookies</a></li><li>\n<a  href=\"#toggling-classes\">Toggling classes</a></li><li>\n<a  href=\"#color-widget-bookmark\">Color widget bookmark</a></li><li>\n<a  href=\"#what-other-bookmarklets-can-you-think-of\">What other bookmarklets can you think of?</a></li></ol>\n\n<h3 id=\"activating-design-mode\">Activating design mode</h3>\n\n\n<p>Design mode (styled as <code>designMode</code> since it’s a <em>JavaScript property</em>) is for who like to experiment with variations of copy on a live website. For example, copywriters who like to observe how content reads within the flow of the website’s design, or, say, designers who want to ensure that text fits comfortably within a certain space at a certain font size.</p>\n\n\n\n<p>JavaScript has a mightily simple feature that can render an entire HTML document editable. It works <em>exactly</em> like HTML’s <code>contenteditable=\"true\"</code> name-value attribute (or <code>contentEditable=\"true\"</code> in JavaScript) but for the whole document. If you’d like to see how it works, start by entering the browser’s console using the relevant keyboard shortcut:</p>\n\n\n\n<ul><li><strong>Chrome:</strong> <kbd>Option</kbd> + <kbd>⌘</kbd> + <kbd>J</kbd> / <kbd>Shift</kbd> + <kbd>CTRL</kbd> + <kbd>J</kbd></li><li><strong>Firefox:</strong> <kbd>Option</kbd> + <kbd>⌘</kbd> + <kbd>K</kbd> / <kbd>Shift</kbd> + <kbd>CTRL</kbd> + <kbd>K</kbd></li><li><strong>Safari:</strong> <kbd>Option</kbd> + <kbd>⌘</kbd> + <kbd>C</kbd> / <kbd>Shift</kbd> + <kbd>CTRL</kbd> + <kbd>C</kbd></li></ul>\n\n\n\n<p>Next, type <code>document.designMode=\"on\"</code> into the console, hit <strong><kbd>Return</kbd></strong>, and then click on any text element. You’ll see that this text element (and all other text elements) are now editable simply by clicking on them. This method of editing text on a live website is <em>much</em> faster than having to open DevTools, then right-clicking and selecting the “Edit Text” option… and <em>much</em> less tiresome.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=2880%2C1800&#038;ssl=1\" alt=\"Showing an edited version of the CSS-Tricks guide landing page using the design mode bookmarklet.\" class=\"wp-image-364119\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=2048%2C1280&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463898776_1.png?resize=1000%2C625&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>“Guides and Thangs” — my favorite part of CSS-Tricks</figcaption></figure>\n\n\n\n<p>While I’m not sure that “design mode” is the most accurate description of the feature, it’s super useful nonetheless and it’s actually been around for a really long time, surprisingly.</p>\n\n\n\n<p>And what’s even an even faster way to enable it? A bookmarklet, of course! Create a bookmark using <code>javascript: document.designMode=\"on\";void 0;</code> as the URL.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=2880%2C1800&#038;ssl=1\" alt=\"Showing the bookmarklet installation.\" class=\"wp-image-364120\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=2048%2C1280&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463919258_2.png?resize=1000%2C625&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"applying-a-background-to-everything\">Applying a background to everything</h3>\n\n\n<p>When HTML elements don’t have backgrounds, it can be difficult to visualize their bounds and/or accurately measure the distance between them and other elements. Developers might want to better visualize bounds when dealing with <a href=\"https://medium.muz.li/optical-effects-9fca82b4cd9a\" rel=\"noopener\">optical imbalance</a> (i.e. when something “looks off” even though it’s not), <a href=\"https://css-tricks.com/what-you-should-know-about-collapsing-margins/\">margin collapse</a> (when certain margins are ignored), various issues with <code>display:</code>/<code>float:</code>/<code>position:</code>, and more.</p>\n\n\n\n<p>Applying backgrounds means applying a semi-transparent background to all HTML elements in order to better visualize their bounds and spacings. It’s something many of us commonly do by opening up DevTools then typing a CSS declaration like <code>selector { background: rgb(0 0 0 / 10%); }</code> into the “Styles” box. But again, it’s <em>really</em> tiresome and repetitive — and something we can simplify with a bookmarklet.</p>\n\n\n\n<p>Once again, to create a bookmark, we’re going to make a URL. Here’s what we can use for this one:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">javascript: document.querySelectorAll(\"*\").forEach(element => element.style.background=\"rgb(0 0 0 / 10%)\");</code></pre>\n\n\n\n<p class=\"is-style-explanation\">We’re using a semi-transparent background because the transparency stacks, which ensures that every nested element is distinguishable and the distances between them can be measured.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=2880%2C1800&#038;ssl=1\" alt=\"Showing the CSS-Tricks guides landing page with all backgrounds fill with varying shades of gray.\" class=\"wp-image-364121\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=2048%2C1280&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_AD0F2C835CD10D108AFDFB2358D3DFA61BF124F97B3700E8E7CBFF36E9EAA31B_1644463956113_3.png?resize=1000%2C625&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Apply a background to everything to see what’s happening.</figcaption></figure>\n\n\n<h3 id=\"simulating-events\">Simulating events</h3>\n\n\n<p>Have you ever had to test a web event that first requires a series of interactions, or certain conditions to be met? It’s super time-consuming to have to test or debug these kinds of functionalities. This event simulation bookmarklet can be used to instantly trigger specific events, making testing a breeze.</p>\n\n\n\n<p>Simulating an event means coding a “throwaway” button that triggers a JavaScript event, making it much easier to quickly and repeatedly test the event without having to meet any usual user-facing conditions, like needing to be logged in.</p>\n\n\n\n<p>Assuming that you have your <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\" rel=\"noopener\">JavaScript event listeners</a> set up, create a bookmark for each event that you’d like to trigger/simulate and submit the following URL:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">javascript: document.querySelector(\"SELECTOR\").click();</code></pre>\n\n\n\n<p>Replace “SELECTOR” with your unique selector, replace “click” with “focus” or “blur” (when necessary), or extend the snippet to make it trigger more complex events, like <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll\" rel=\"noopener\">scroll</a>.</p>\n\n\n<h3 id=\"setting-cookies\">Setting cookies</h3>\n\n\n<p>Cookies are tokens that are stored on a website visitor’s computer by the website that they’re visiting. Cookies contain data that can be read by the website that created them until they’ve exceeded their expiration date or have been deleted. The mere existence of a cookie can determine whether or not a visitor is logged in, whereas the data itself can store user information.</p>\n\n\n\n<p>An example of a scenario where you might want to set a cookie using a bookmarklet is when you want to force a logged-in state during website testing. Websites often look very different for users that are logged in, however, logging in and out eventually becomes very tedious, so this bookmarklet can save quite a bit of time.</p>\n\n\n\n<p>Manually writing <code>expires=</code> dates for cookies is awkward as heck, but luckily this <a href=\"https://cookie-bookmarklet-generator.com\" rel=\"noopener\">create-your-own-set-cookie-bookmarklet app</a> can generate a bookmarklet for a specific cookie, if you know its exact name.</p>\n\n\n<h3 id=\"toggling-classes\">Toggling classes</h3>\n\n\n<p>You may want to add or remove a class from an HTML element in order to trigger a fresh state or a change in appearance, otherwise known as toggling classes. Class toggling happens behind the scenes of most live websites, but it can also be used during testing to skip having to meet certain user-facing conditions.</p>\n\n\n\n<p>Class toggling can be used to trigger changes in appearance (e.g. alternative themes or states) and even animations, but it can be a little fiddly when doing it with developer tools when it’s only for testing reasons (i.e. the website doesn’t actually function that way for users). Similar to the other bookmarklets, use this one to rapidly toggle classes and save yourself time.</p>\n\n\n\n<p>Create the following bookmarklet to target all elements that match your chosen “SELECTOR”, which, in turn, toggles the “CLASS.”</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">javascript: document.querySelectorAll(\"SELECTOR\").forEach(element => element.classList.toggle(\"CLASS\"));</code></pre>\n\n\n<h3 id=\"color-widget-bookmark\">Color widget bookmark</h3>\n\n\n<p>While not technically a “bookmarklet,” this <a href=\"https://twitter.com/scottjehl/status/1428465011475746820\" rel=\"noopener\">bookmarkable data URI</a> by Scott Jehl opens up an <code>&lt;input type=\"color\"&gt;</code> in a new tab:</p>\n\n\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">So hey here&#8217;s my new color picker app! <br>It&#8217;s um, just an HTML color input wrapped in a data URI so I can bookmark it. (Feel free to do so yourself):<br><br>data:text/html;charset=utf-8,%3Chtml%3E%3Ctitle%3EColor Picker%3C%2Ftitle%3E%3Cinput type%3D&#8221;color&#8221;%3E%3C%2Fhtml%3E <a href=\"https://t.co/0QyFqAsUSq\">pic.twitter.com/0QyFqAsUSq</a></p>— Scott Jehl (@scottjehl) <a href=\"https://twitter.com/scottjehl/status/1428465011475746820?ref_src=twsrc%5Etfw\" rel=\"noopener\">August 19, 2021</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">data:text/html;charset=utf-8,%3Chtml%3E%3Ctitle%3EColor Picker%3C%2Ftitle%3E%3Cinput type%3D\"color\"%3E%3C%2Fhtml%3E</code></pre>\n\n\n\n<p>Why is that cool? Well, how many times have you needed to grab a color value off a page, only to find yourself cracking open DevTools, clicking through a bunch of elements, and pouring over CSS properties to find the value? Better to run this little guy, click the element, and get a color right away!</p>\n\n\n<h3 id=\"what-other-bookmarklets-can-you-think-of\">What other bookmarklets can you think of?</h3>\n\n\n<p>Are there any overly repetitive web development workflows that require you to use the web browser’s sometimes-awkward developer tools? If so, it’s <strong>super easy</strong> to create your own time-saving bookmarklets. Just remember to start the URL with <code>javascript:</code>!</p>\n\n\n\n<p>And if you’ve made a bookmarklet to simplify your workflow, I’d love to see it! Share them here in the comments and let’s get a nice collection going.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/web-development-bookmarklets/\">6 Useful Bookmarklets to Boost Web Development</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/web-development-bookmarklets/feed/</wfw:commentRss>\n\t\t\t<slash:comments>1</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">364118</post-id>\t</item>\n\t\t<item>\n\t\t<title>Write HTML, the HTML Way (Not the XHTML Way)</title>\n\t\t<link>https://css-tricks.com/write-html-the-html-way-not-the-xhtml-way/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/write-html-the-html-way-not-the-xhtml-way/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Jens Oliver Meiert]]></dc:creator>\n\t\t<pubDate>Mon, 21 Mar 2022 20:08:38 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[HTML]]></category>\n\t\t<category><![CDATA[semantics]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=363745</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>You may not use XHTML (anymore), but when you write HTML, you may be more influenced by XHTML than you think. You are very likely writing HTML, the XHTML way.</p>\n<p>What is the XHTML way of writing HTML, and what &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/write-html-the-html-way-not-the-xhtml-way/\">Write HTML, the HTML Way (Not the XHTML Way)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>You may not use XHTML (anymore), but when you write HTML, you may be more influenced by XHTML than you think. You are very likely writing HTML, the XHTML way.</p>\n\n\n\n<p>What is the XHTML way of writing HTML, and what is the HTML way of writing HTML? Let’s have a look.</p>\n\n\n\n<span id=\"more-363745\"></span>\n\n\n<h3 id=\"html-xhtml-html\">HTML, XHTML, HTML</h3>\n\n\n<p>In the 1990s, there was HTML. In the 2000s, there was XHTML. Then, in the 2010s, we switched back to HTML. That’s the simple story.</p>\n\n\n\n<p>You can tell by the rough dates of the specifications, too: HTML “1” 1992, HTML 2.0 1995, HTML 3.2 1997, HTML 4.01 1999; XHTML 1.0 2000, XHTML 1.1 2001; “HTML5” <a href=\"https://en.wikipedia.org/wiki/HTML5#Timeline\" rel=\"noopener\">2007</a>.</p>\n\n\n\n<p>XHTML became popular when everyone believed XML and XML derivatives were the future. “XML all the things.” For HTML, this had a profound effect: The effect that we learned to write it the XHTML way.</p>\n\n\n<h3 id=\"the-xhtml-way-of-writing-html\">The XHTML way of writing HTML</h3>\n\n\n<p>The XHTML way is well-documented, because XHTML 1.0 describes in great detail in its section on <a href=\"https://www.w3.org/TR/xhtml1/#diffs\" rel=\"noopener\">“Differences with HTML 4”</a>:</p>\n\n\n\n<ul><li>Documents must be well-formed.</li><li>Element and attribute names must be in lower case.</li><li>For non-empty elements, end tags are required.</li><li>Attribute values must always be quoted.</li><li><a href=\"https://www.w3.org/TR/xhtml1/#h-4.5\" rel=\"noopener\">Attribute minimization</a> is not supported.</li><li>Empty elements need to be closed.</li><li>White space handling in attribute values is done according to XML.</li><li>Script and style elements need CDATA sections.</li><li>SGML exclusions are not possible.</li><li>The elements with <code>id</code> and <code>name</code> attributes, like <code>a</code>, <code>applet</code>, <code>form</code>, <code>frame</code>, <code>iframe</code>, <code>img</code>, and <code>map</code>, should only use <code>id</code>.</li><li>Attributes with pre-defined value sets are case-sensitive.</li><li>Entity references as hex values must be in lowercase.</li></ul>\n\n\n\n<p>Does this look familiar? With the exception of marking CDATA content, as well as dealing with SGML exclusions, you probably follow all of these rules. <strong>All of them.</strong></p>\n\n\n\n<p>Although XHTML is dead, many of these rules have never been questioned again. Some have even been elevated to “best practices” for HTML.</p>\n\n\n\n<p>That is the XHTML way of writing HTML, and its lasting impact on the field.</p>\n\n\n<h3 id=\"the-html-way-of-writing-html\">The HTML way of writing HTML</h3>\n\n\n<p>One way of walking us back is to negate the rules imposed by XHTML. Let’s actually do this (without the SGML part, because HTML <a href=\"https://html.spec.whatwg.org/multipage/parsing.html#parsing\" rel=\"noopener\">isn’t based on SGML anymore</a>):</p>\n\n\n\n<ul><li>Documents may not be well-formed.</li><li>Element and attribute names may not be in lower case.</li><li>For non-empty elements, end tags are not always required.</li><li>Attribute values may not always be quoted.</li><li>Attribute minimization is supported.</li><li>Empty elements don’t need to be closed.</li><li>White space handling in attribute values isn’t done according to XML.</li><li>Script and style elements don’t need CDATA sections.</li><li>The elements with <code>id</code> and <code>name</code> attributes may not only use <code>id</code>.</li><li>Attributes with pre-defined value sets are not case-sensitive.</li><li>Entity references as hex values may not only be in lowercase.</li></ul>\n\n\n\n<p>Let’s remove the esoteric things; the things that don’t seem relevant. This includes XML whitespace handling, CDATA sections, doubling of <code>name</code> attribute values, the case of pre-defined value sets, and hexadecimal entity references:</p>\n\n\n\n<ul><li>Documents may not be well-formed.</li><li>Element and attribute names may not be in lowercase.</li><li>For non-empty elements, end tags are not always required.</li><li>Attribute values may not always be quoted.</li><li>Attribute minimization is supported.</li><li>Empty elements don’t need to be closed.</li></ul>\n\n\n\n<p>Peeling away from these rules, this looks a lot less like we’re working with XML, and more like working with HTML. But we’re not done yet.</p>\n\n\n\n<p>“Documents may not be well-formed” suggests that it was fine if HTML code was invalid. It was fine for XHTML to point to wellformedness because of XML’s strict error handling. But while HTML documents work even when they contain severe syntax and wellformedness issues, it’s neither useful for the professional — nor our field — to use and abuse this resilience. (I&#8217;ve argued this case before in my article, <a href=\"https://meiert.com/en/blog/critical-frontend-development/\" rel=\"noopener\">“In Critical Defense of Frontend Development.”</a>)</p>\n\n\n\n<p>The HTML way would therefore not suggest “documents may not be well-formed.” It would also be clear that not only end, but also start tags aren’t always required. Rephrasing and reordering, this is the essence:</p>\n\n\n\n<ul><li>Start and end tags are not always required.</li><li>Empty elements don’t need to be closed.</li><li>Element and attribute names may be lower or upper case.</li><li>Attribute values may not always be quoted.</li><li>Attribute minimization is supported.</li></ul>\n\n\n<h3 id=\"examples\">Examples</h3>\n\n\n<p>How does this look like in practice? For start and end tags, be aware that <a href=\"https://meiert.com/en/blog/optional-html/#toc-tags\" rel=\"noopener\">many tags</a> are optional. A paragraph and a list, for example, are written like this in XHTML:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p>\n&lt;ul>\n  &lt;li>Praesent augue nisl&lt;/li>\n  &lt;li>Lobortis nec bibendum ut&lt;/li>\n  &lt;li>Dictum ac quam&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<p>In HTML, however, you can write them using only this code (which is valid):</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n&lt;ul>\n  &lt;li>Praesent augue nisl\n  &lt;li>Lobortis nec bibendum ut\n  &lt;li>Dictum ac quam\n&lt;/ul></code></pre>\n\n\n\n<p>Developers also learned to write void elements, like so:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;br /></code></pre>\n\n\n\n<p>This is something XHTML brought to HTML, but as <a href=\"https://html.spec.whatwg.org/multipage/syntax.html#start-tags\" rel=\"noopener\">the slash has no effect on void elements</a>, you only need this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;br></code></pre>\n\n\n\n<p>In HTML, you can also just write everything in all caps:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;A HREF=\"https://css-tricks.com/\">CSS-Tricks&lt;/A></code></pre>\n\n\n\n<p>It looks like you’re yelling and you may not like it, but it’s okay to write it like this.</p>\n\n\n\n<p>When you want to condense that link, HTML offers you the option to <a href=\"https://meiert.com/en/blog/optional-html/#toc-quotes\" rel=\"noopener\">leave out certain quotes</a>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;A HREF=https://css-tricks.com/>CSS-Tricks&lt;/A></code></pre>\n\n\n\n<p class=\"is-style-explanation\">As a rule of thumb, when the attribute value doesn’t contain a space or an equal sign, it’s usually fine to drop the quotes.</p>\n\n\n\n<p>Finally, HTML–HTML — not XHTML–HTML — also allows to minimize attributes. That is, instead of marking an <code>input</code> element as required and read-only, like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;input type=\"text\" required=\"required\" readonly=\"readonly\"></code></pre>\n\n\n\n<p>You can minimize the attributes:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;input type=\"text\" required readonly></code></pre>\n\n\n\n<p>If you’re not only taking advantage of the fact that the quotes aren’t needed, but that <code>text</code> is the default for the <code>type</code> attribute here (there are more such <a href=\"https://meiert.com/en/blog/optional-html/#toc-attribute-values\" rel=\"noopener\">unneeded attribute–value combinations</a>), you get an example that shows HTML in all its minimal beauty:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;input required readonly></code></pre>\n\n\n<h3 id=\"write-html-the-html-way\">Write HTML, the HTML way</h3>\n\n\n<p>The above isn’t a representation of where HTML was in the 90s. HTML, back then, was loaded with <code>&lt;table&gt;</code> elements for layout, packed with presentational code, largely invalid (<a href=\"https://meiert.com/en/blog/valid-html-2021/\" rel=\"noopener\">as it’s still today</a>), with wildly varying user agent support. Yet it’s the <em>essence</em> of what we would have wanted to keep if XML and XHTML hadn’t come around.</p>\n\n\n\n<p>If you’re open to a suggestion of what a more comprehensive, contemporary way of writing HTML could look like, I have one. (HTML is my main focus area, so I’m augmenting this by links to some of my articles.)</p>\n\n\n\n<ol><li><strong>Respect syntax and semantics.</strong><ul><li><a href=\"https://meiert.com/en/blog/the-frontend-developer-test/\" rel=\"noopener\">Validate your HTML</a>, and ship only valid HTML.</li></ul></li><li><strong>Use the options HTML gives you, as long as you do so consistently.</strong><ul><li>Remember that element and attribute names may be lowercase or uppercase.</li></ul></li><li><strong>Keep use of HTML to the absolute minimum</strong><ul><li>Remember that presentational and behavioral markup is to be handled by CSS and JavaScript instead.</li><li>Remember that start and end tags are <a href=\"https://meiert.com/en/blog/optional-html/#toc-tags\" rel=\"noopener\">not always</a> required.</li><li>Remember that empty elements don’t need to be closed.</li><li>Remember that some attributes have defaults that allow <a href=\"https://meiert.com/en/blog/optional-html/#toc-attribute-values\" rel=\"noopener\">these attribute–value pairs to be omitted</a>.</li><li>Remember that attribute values may <a href=\"https://meiert.com/en/blog/optional-html/#toc-quotes\" rel=\"noopener\">not always</a> be quoted.</li><li>Remember that attribute minimization is supported.</li></ul></li></ol>\n\n\n\n<p>It’s not a coincidence that this resembles <a href=\"https://meiert.com/en/blog/rules-for-html/\" rel=\"noopener\">the three ground rules for HTML</a>, that it works with the premise of <a href=\"https://meiert.com/en/blog/html-performance/\" rel=\"noopener\">a smaller payload also leading to faster sites</a>, and that this follows <a href=\"https://meiert.com/en/blog/minimal-web-development/\" rel=\"noopener\">the school of minimal web development</a>. None of this is new — our field could merely decide to rediscover it. Tooling is available, too: <a href=\"https://github.com/kangax/html-minifier\" rel=\"noopener\">html-minifier</a> is probably the most established and able to handle all HTML optimizations.</p>\n\n\n\n<p>You’ve learned HTML the XHTML way. HTML isn’t XHTML. Rediscover HTML, and help shape a new, modern way of writing HTML — which acknowledges, but isn’t necessarily based on XML.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/write-html-the-html-way-not-the-xhtml-way/\">Write HTML, the HTML Way (Not the XHTML Way)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/write-html-the-html-way-not-the-xhtml-way/feed/</wfw:commentRss>\n\t\t\t<slash:comments>16</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">363745</post-id>\t</item>\n\t\t<item>\n\t\t<title>Optimizing SVG Patterns to Their Smallest Size</title>\n\t\t<link>https://css-tricks.com/optimizing-svg-patterns/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/optimizing-svg-patterns/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Bence Szabó]]></dc:creator>\n\t\t<pubDate>Fri, 18 Mar 2022 22:31:22 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[SVG]]></category>\n\t\t<category><![CDATA[svg pattern]]></category>\n\t\t<category><![CDATA[SVG use]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=364090</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>I recently created a brick wall pattern as part of my <a href=\"https://codepen.io/collection/DRMKdB\" rel=\"noopener\">#PetitePatterns</a> series, a challenge where I create organic-looking patterns or textures in SVG within 560 bytes (or approximately the size of two tweets). To fit this constraint, I have &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/optimizing-svg-patterns/\">Optimizing SVG Patterns to Their Smallest Size</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>I recently created a brick wall pattern as part of my <a href=\"https://codepen.io/collection/DRMKdB\" rel=\"noopener\">#PetitePatterns</a> series, a challenge where I create organic-looking patterns or textures in SVG within 560 bytes (or approximately the size of two tweets). To fit this constraint, I have gone through a journey that has taught me some radical ways of optimizing SVG patterns so that they contain as little code as possible without affecting the overall image quality.</p>\n\n\n\n<p>I want to walk you through the process and show you how we can take an SVG pattern that starts at 197 bytes all the way down to a mere 44 bytes — a whopping 77.7% reduction!</p>\n\n\n\n<p></p>\n\n\n\n<span id=\"more-364090\"></span>\n\n\n<h3 id=\"the-svg-pattern\">The SVG pattern</h3>\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLPgdgg\" src=\"//codepen.io/anon/embed/yLPgdgg?height=450&amp;theme-id=1&amp;slug-hash=yLPgdgg&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLPgdgg\" title=\"CodePen Embed yLPgdgg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This is what’s called a “running bond” brick pattern. It’s the most common brick pattern out there, and one you’ve surely seen before: each row of bricks is offset by one half the length of a brick, creating a repeating staggered pattern. The arrangement is pretty simple, making SVG’s <code>&lt;pattern&gt;</code> element a perfect fit to reproduce it in code.</p>\n\n\n\n<p>The SVG <code>&lt;pattern&gt;</code> element uses a pre-defined graphic object which can be replicated (or &#8220;tiled&#8221;) at fixed intervals along the horizontal and vertical axes. Essentially, we define a rectangular tile pattern and it gets repeated to paint the fill area.</p>\n\n\n\n<p>First, let’s set the dimensions of a brick and the gap between each brick. For the sake of simplicity, let’s use clean, round numbers: a width of <code>100</code> and a height of <code>30</code> for the brick, and <code>10</code> for the horizontal and vertical gaps between them.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1280\" height=\"750\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058005414_highlight.jpg?resize=1280%2C750&#038;ssl=1\" alt=\"Showing a highlighted portion of a brick wall pattern, which is the example we are using for optimizing SVG patterns.\" class=\"wp-image-364091\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058005414_highlight.jpg?w=1280&amp;ssl=1 1280w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058005414_highlight.jpg?resize=300%2C176&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058005414_highlight.jpg?resize=1024%2C600&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058005414_highlight.jpg?resize=768%2C450&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058005414_highlight.jpg?resize=1000%2C586&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Next, we have to identify our “base” tile. And by “tile” I’m talking about pattern tiles rather than physical tiles, not to be confused with the bricks. Let’s use the highlighted part of the image above as our pattern tile: two whole bricks in the first row, and one whole sandwiched between two half bricks in the second row. Notice how and where the gaps are included, because those need to be included in the repeated pattern tile.</p>\n\n\n\n<p>When using <code>&lt;pattern&gt;</code>, we have to define the pattern’s <code>width</code> and <code>height</code>, which correspond to the width and height of the base tile. To get the dimensions, we need a little math:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">Tile Width  = 2(Brick Width) + 2(Gap) = 2(100) + 2(10) = 220\nTile Height = 2(Bright Height) + 2(Gap) = 2(30) + 2(10) = 80</code></pre>\n\n\n\n<p>Alright, so our pattern tile is <code>220✕80</code>. We also have to set the <code>patternUnits</code> attribute, where the value <code>userSpaceOnUse</code> essentially means pixels. Finally, adding an <code>id</code> to the pattern is necessary so that it can be referenced when we are painting another element with it.</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;pattern id=\"p\" width=\"220\" height=\"80\" patternUnits=\"userSpaceOnUse\">\n  &lt;!-- pattern content here -->\n&lt;/pattern></code></pre>\n\n\n\n<p>Now that we have established the tile dimensions, the challenge is to create the code for the tile in a way that renders the graphic with the smallest number of bytes possible. This is what we hope to end up with at the very end:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644084615761_tile.png?resize=498%2C181&#038;ssl=1\" alt=\"\" class=\"wp-image-364092\" width=\"498\" height=\"181\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644084615761_tile.png?w=495&amp;ssl=1 495w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644084615761_tile.png?resize=300%2C109&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The bricks (in black) and gaps (in white) of the final running bond pattern</figcaption></figure>\n\n\n<h3 id=\"initial-markup-197-bytes\">Initial markup (197 bytes)</h3>\n\n\n<p>The simplest and most declarative approach to recreate this pattern that comes to my mind is to draw five rectangles. By default, the <code>fill</code> of an SVG element is black and the <code>stroke</code> is transparent. This works well for optimizing SVG patterns, as we don’t have to explicitly declare those in the code.</p>\n\n\n\n<p>Each line in the code below defines a rectangle. The <code>width</code> and <code>height</code> are always set, and the <code>x</code> and <code>y</code> positions are only set if a rectangle is offset from the <code>0</code> position.</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;rect width=\"100\" height=\"30\"/>\n&lt;rect x=\"110\" width=\"100\" height=\"30\"/>\n&lt;rect y=\"40\" width=\"45\" height=\"30\"/>\n&lt;rect x=\"55\" y=\"40\" width=\"100\" height=\"30\"/>\n&lt;rect x=\"165\" y=\"40\" width=\"55\" height=\"30\"/></code></pre>\n\n\n\n<p>The top row of the tile contained two full-width bricks, the second brick is positioned to <code>x=\"110\"</code> allowing <code>10</code> pixels of gap before the brick. Similarly there&#8217;s <code>10</code> pixels of gap after, because the brick ends at <code>210</code> pixels  (<code>110 + 100 = 210</code>) on the horizontal axis even though the <code>&lt;pattern&gt;</code> width is <code>220</code> pixels. We need that little bit of extra space; otherwise the second brick would merge with the first brick in the adjacent tile.</p>\n\n\n\n<p>The bricks in the second (bottom) row are offset so the row contains two half bricks and one whole brick. In this case, we want the half-width bricks to merge so there’s no gap at the start or the end, allowing them to seamlessly flow with the bricks in adjoining pattern tiles. When offsetting these bricks, we also have to include half gaps, thus the <code>x</code> values are <code>55</code> and <code>165</code>, respectively.</p>\n\n\n<h3 id=\"element-reuse-43b-154b-total\">Element reuse, (-43B, 154B total)</h3>\n\n\n<p>It seems inefficient to define each brick so explicitly. Isn’t there some way to optimize SVG patterns by reusing the shapes instead?</p>\n\n\n\n<p>I don’t think it’s widely known that SVG has a <code>&lt;use&gt;</code> element. You can reference another element with it and render that referenced element wherever <code>&lt;use&gt;</code> is used. This saves quite a few bytes because we can omit specifying the widths and heights of each brick, except for the first one.</p>\n\n\n\n<p>That said, <code>&lt;use&gt;</code> does come with a little price. That is, we have to add an <code>id</code> for the element we want to reuse.</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;rect id=\"b\" width=\"100\" height=\"30\"/>\n&lt;use href=\"#b\" x=\"110\"/>\n&lt;use href=\"#b\" x=\"-55\" y=\"40\"/>\n&lt;use href=\"#b\" x=\"55\" y=\"40\"/>\n&lt;use href=\"#b\" x=\"165\" y=\"40\"/></code></pre>\n\n\n\n<p>The shortest <code>id</code> possible is one character, so I chose “b” for brick. The <code>&lt;use&gt;</code> element can be positioned similarly to <code>&lt;rect&gt;</code>, with the <code>x</code> and <code>y</code> attributes as offsets. Since each brick is full-width now that we’ve switched to <code>&lt;use&gt;</code> (remember, we explicitly halved the bricks in the second row of the pattern tile), we have to use a negative <code>x</code> value in the second row, then make sure the last brick overflows from the tile for that seamless connection between bricks. These are okay, though, because anything that falls outside of the pattern tile is automatically cut off.</p>\n\n\n\n<p>Can you spot some repeating strings that can be written more efficiently? Let’s work on those next.</p>\n\n\n<h3 id=\"rewriting-to-path-54b-100b-total\">Rewriting to path (-54B, 100B total)</h3>\n\n\n<p><code>&lt;path&gt;</code> is probably the most powerful element in SVG. You can draw just about any shape with “commands” in its <code>d</code> attribute. There are 20 commands available, but we only need the simplest ones for rectangles.</p>\n\n\n\n<p>Here’s where I landed with that:</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;path d=\"M0 0h100v30h-100z\n         M110 0h100v30h-100\n         M0 40h45v30h-45z\n         M55 40h100v30h-100z\n         M165 40h55v30h-55z\"/></code></pre>\n\n\n\n<p>I know, super weird numbers and letters! <a href=\"https://css-tricks.com/svg-path-syntax-illustrated-guide/\">They all have meaning</a>, of course. Here’s what’s happening in this specific case:</p>\n\n\n\n<ul><li><strong><code>M{x} {y}</code>:</strong> Moves to a point based on coordinates.</li><li><strong><code>z</code>:</strong> Closes the current segment.</li><li><strong><code>h{x}</code>:</strong> Draws a horizontal line from the current point, with the length of <code>x</code> in the direction defined by the sign of <code>x</code>. Lowercase <code>x</code> indicates a relative coordinate.</li><li><strong><code>v{y}</code>:</strong> Draws a vertical line from the current point, with the length of <code>y</code> in the direction defined by the sign of <code>y</code>. Lowercase <code>y</code> indicates a relative coordinate.</li></ul>\n\n\n\n<p>This markup is much more terse than the previous one (line breaks and indentation whitespace is only for readability). And, hey, we&#8217;ve managed to cut out half of the initial size, arriving at 100 bytes. Still, something makes me feel like this could be smaller…</p>\n\n\n<h3 id=\"tile-revision-38b-62b-total\">Tile revision (-38B, 62B total)</h3>\n\n\n<p>Doesn’t our pattern tile have repeating parts? It’s clear that in the first row a whole brick is repeated, but what about the second row? It’s a bit harder to see, but if we cut the middle brick in half it becomes obvious.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"495\" height=\"180\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058595954_half.png?resize=495%2C180&#038;ssl=1\" alt=\"The left half preceding the red line is the same as the right side.\" class=\"wp-image-364093\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058595954_half.png?w=495&amp;ssl=1 495w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644058595954_half.png?resize=300%2C109&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Well, the middle brick isn’t exactly cut in half. There’s a slight offset because we also have to account for the gap. Anyways, we just found a simpler base tile pattern, which means fewer bytes! This also means we have to halve the <code>width</code> of our <code>&lt;pattern&gt;</code> element from 220 to 110.</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;pattern id=\"p\" width=\"110\" height=\"80\" patternUnits=\"userSpaceOnUse\">\n  &lt;!-- pattern content here -->\n&lt;/pattern></code></pre>\n\n\n\n<p>Now let’s see how the simplified tile is drawn with <code>&lt;path&gt;</code>:</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;path d=\"M0 0h100v30h-100z\n         M0 40h45v30h-45z\n         M55 40h55v30h-55z\"/></code></pre>\n\n\n\n<p>The size is reduced to 62 bytes, which is already less than a third of the original size! But why stop here when there’s even more we can do!</p>\n\n\n<h3 id=\"shortening-path-commands-9b-53b-total\">Shortening path commands (-9B, 53B total)</h3>\n\n\n<p>It’s worth getting a little deeper into the <code>&lt;path&gt;</code> element because it provides more hints for optimizing SVG patterns. One misconception I’ve had when working with <code>&lt;path&gt;</code> is regarding how the <code>fill</code> attribute works. Having played a lot with MS Paint in my childhood, I’ve learned that any shape I want to fill with a solid color has to be closed, i.e. have no open points. Otherwise, the paint will leak out of the shape and spill over everything.</p>\n\n\n\n<p>In SVG, however, this is not true. Let me quote <a href=\"http://www.w3.org/TR/SVG/painting.html#FillProperties\" rel=\"noopener\">the spec</a> itself:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The fill operation fills open subpaths by performing the fill operation as if an additional &#8220;closepath&#8221; command were added to the path to connect the last point of the subpath with the first point of the subpath.</p></blockquote>\n\n\n\n<p>This means we can omit the close path commands (<code>z</code>), because the subpaths are considered automatically closed when filled.</p>\n\n\n\n<p>Another useful thing to know about path commands is that they come in uppercase and lowercase variations. Lowercase letters mean that relative coordinates are used; uppercase letters mean absolute coordinates are used instead.</p>\n\n\n\n<p>It’s a little trickier than that with the <code>H</code> and <code>V</code> commands because they only include one coordinate. Here’s how I would describe these two commands:</p>\n\n\n\n<ul><li><strong><code>H{x}</code>:</strong> Draws a horizontal line from the current point to coordinate <code>x</code>.</li><li><strong><code>V{y}</code>:</strong> Draws a vertical line from the current point to coordinate <code>y</code>.</li></ul>\n\n\n\n<p>When we are drawing the first brick in the pattern tile, we start from the <code>(0,0)</code> coordinates. We then draw a horizontal line to <code>(100,0)</code> and a vertical line to <code>(100,30)</code>, and finally, draw a horizontal line to <code>(0,30)</code>. We used the <code>h-100</code> command in the last line, but it is the equivalent of <code>H0</code>, which is two bytes instead of five. We can replace two similar occurrences and pare the code of our <code>&lt;path&gt;</code> down to this:</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;path d=\"M0 0h100v30H0\n         M0 40h45v30H0\n         M55 40h55v30H55\"/></code></pre>\n\n\n\n<p>Another 9 bytes shaved off — how much smaller can we go?</p>\n\n\n<h3 id=\"bridging-5b-48b-total\">Bridging (-5B, 48B total)</h3>\n\n\n<p>The longest commands standing in our way of a fully-optimized SVG pattern are the “move to” commands which take up 4, 5, and 6 bytes, respectively. One constraint we have is that:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>A path data segment (if there is one) must begin with a &#8220;moveto&#8221; command.</p></blockquote>\n\n\n\n<p>But that’s okay. The first one is the shortest anyways. If we swap the rows, we can come up with a path definition where we only have to move either horizontally or vertically between the bricks. What if we could use the <code>h</code> and <code>v</code> commands there instead of <code>M</code>?</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2127\" height=\"1370\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=2127%2C1370&#038;ssl=1\" alt=\"\" class=\"wp-image-364094\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?w=2127&amp;ssl=1 2127w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=300%2C193&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=1024%2C660&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=768%2C495&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=1536%2C989&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=2048%2C1319&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_CC3A874441AF9D490DD602D92C31709107FDD676F0B7D1EB1E4D2076D75BD9BB_1644069437592_path.png?resize=1000%2C644&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The path starts from the red dot in the top-left corner. Red are the path commands supported with arrows, black are the coordinates the arrows point to.</figcaption></figure>\n\n\n\n<p>The above diagram shows how the three shapes can be drawn with a single path. Note that we are leveraging the fact that the <code>fill</code> operation automatically closes the open part between <code>(110,0)</code> and <code>(0,0)</code>. With this rearrangement, we also moved the gap to the left of the full-width brick in the second row. Here’s how the code looks, still broken into one brick per line:</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;path d=\"M0 0v30h50V0\n         h10v30h50\n         v10H10v30h100V0\"/></code></pre>\n\n\n\n<p>Surely, we’ve found the absolute smallest solution now that we’re down to 48 bytes, right?! Well…</p>\n\n\n<h3 id=\"digit-trimming-4b-44b-total\">Digit trimming (-4B, 44B total)</h3>\n\n\n<p>If you can be a bit flexible with the dimensions, there&#8217;s another little way we can optimize SVG patterns. We&#8217;ve been working with a brick width of <code>100</code> pixels, but that’s three bytes. Changing it to <code>90</code> means one less byte whenever we need to write it. Similarly, we used a gap of <code>10</code> pixels — but if we change it to <code>8</code> instead, we save a byte on each of those occurrences.</p>\n\n\n\n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;path d=\"M0 0v30h45V0\n         h8v30h45\n         v8H8v30h90V0\"/></code></pre>\n\n\n\n<p>Of course, this also means we have to adjust the pattern dimensions accordingly. Here’s the final optimized SVG pattern code:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;pattern id=\"p\" width=\"98\" height=\"76\" patternUnits=\"userSpaceOnUse\">\n  &lt;path d=\"M0 0v30h45V0h8v30h45v8H8v30h90V0\"/>\n&lt;/pattern></code></pre>\n\n\n\n<p>The second line in the above snippet — not counting the indentations — is <strong>44 bytes</strong>. We got here from 197 bytes in six iterations. That’s a chunky <strong>77.7% size reduction</strong>!</p>\n\n\n\n<p>I’m wondering though… is this really the smallest size possible? Have we looked at all possible ways to optimize SVG patterns?</p>\n\n\n\n<p>I invite you to try and further minify this code, or even experiment with alternative methods for optimizing SVG patterns. I would love to see if we could find the true global minimum with the wisdom of the crowd!</p>\n\n\n<h3 id=\"more-on-creating-and-optimizing-svg-patterns\">More on creating and optimizing SVG patterns</h3>\n\n\n<p>If you are interested to learn more about creating and optimizing SVG patterns, read my article about <a href=\"https://css-tricks.com/creating-patterns-with-svg-filters/\">creating patterns with SVG filters</a>. Or, if you want to check out a gallery of 60+ patterns, you can view the <a href=\"https://codepen.io/collection/DRMKdB?grid_type=grid\" rel=\"noopener\">PetitePatterns CodePen Collection</a>. Lastly, you’re welcome to watch <a href=\"https://www.youtube.com/playlist?list=PL59B91voqsL0OeMKH4qImsHdkKQzbzvmJ\" rel=\"noopener\">my tutorials on YouTube</a> to help you get even deeper into SVG patterns.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/optimizing-svg-patterns/\">Optimizing SVG Patterns to Their Smallest Size</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/optimizing-svg-patterns/feed/</wfw:commentRss>\n\t\t\t<slash:comments>10</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">364090</post-id>\t</item>\n\t\t<item>\n\t\t<title>CSS-Tricks is joining DigitalOcean!</title>\n\t\t<link>https://css-tricks.com/css-tricks-is-joining-digitalocean/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/css-tricks-is-joining-digitalocean/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Tue, 15 Mar 2022 12:18:44 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=365042</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Hey hey!</p>\n<p>I&#8217;ve got a big announcement to make here. (Where&#8217;s my gong? I feel like this really needs a good gong hit.)</p>\n<p id=\"announcement-main\">CSS-Tricks, <em>this very website you&#8217;re looking at</em>, has been acquired by <a href=\"https://www.digitalocean.com/?utm_source=css-tricks.com&#38;utm_medium=cta&#38;utm_campaign=website_link\">DigitalOcean</a>!</p>\n<p>You can <a href=\"https://www.digitalocean.com/blog/css-tricks-joins-digitalocean?utm_source=css-tricks.com&#38;utm_medium=cta&#38;utm_campaign=website_link\">hear </a>&#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-tricks-is-joining-digitalocean/\">CSS-Tricks is joining DigitalOcean!</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>Hey hey!</p>\n\n\n\n<p>I&#8217;ve got a big announcement to make here. (Where&#8217;s my gong? I feel like this really needs a good gong hit.)</p>\n\n\n\n<p id=\"announcement-main\">CSS-Tricks, <em>this very website you&#8217;re looking at</em>, has been acquired by <a href=\"https://www.digitalocean.com/?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=website_link\">DigitalOcean</a>!</p>\n\n\n\n<p>You can <a href=\"https://www.digitalocean.com/blog/css-tricks-joins-digitalocean?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=website_link\">hear from them directly on the DigitalOcean blog</a> as well. </p>\n\n\n\n<span id=\"more-365042\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.digitalocean.com/?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=website_link\"><img loading=\"lazy\" width=\"1024\" height=\"596\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/do-x-css.png?resize=1024%2C596&#038;ssl=1\" alt=\"Digital Ocean logo + CSS-Tricks logo under the sea with little fishies.\" class=\"wp-image-365062\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/do-x-css.png?resize=1024%2C596&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/do-x-css.png?resize=300%2C175&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/do-x-css.png?resize=768%2C447&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/do-x-css.png?w=1100&amp;ssl=1 1100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>This will be the most fun if we have a conversation about it, so allow me to kick it off. I&#8217;ll pretend to be you at first and then you can be you in the comments.</p>\n\n\n\n<div id=\"conversation\" class=\"wp-container-62439ee337e3c wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<p class=\"ticss-8514285b reader\"><strong>Hey, congrats!</strong></p>\n\n\n\n<p>Thanks!&nbsp;</p>\n\n\n\n<p class=\"reader\"><strong>DigitalOcean? Aren&#8217;t they like a… web host?</strong></p>\n\n\n\n<p>They are! A very good one. You can build anything on DigitalOcean infrastructure (probably best to think of them as a <em>cloud computing platform</em> that has tools ranging from servers to managed Kubernetes). One thing I think is particularly cool is their new <a href=\"https://www.digitalocean.com/products/app-platform?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=website_link\">App Platform</a> which to me feels extra aligned with front-end developers like me. We&#8217;ve <a href=\"https://css-tricks.com/app-platform-on-digital-ocean/\">covered that</a> before. Also, their whole concept of <a href=\"https://www.digitalocean.com/products/droplets?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=website_link\">Droplets</a> (super simple servers that are quick to spin up) has been transformative in the industry.&nbsp; But more importantly about this acquisition… have you seen their <a href=\"https://www.digitalocean.com/community?utm_source=css-tricks.com&amp;utm_medium=cta&amp;utm_campaign=website_link\">DigitalOcean Community</a> site? It&#8217;s loaded with top-notch developer education. DigitalOcean has been super committed to that for a long time, and to me makes this a very natural and well-suited move.</p>\n\n\n\n<p class=\"reader\"><strong>What happens to CSS-Tricks?</strong></p>\n\n\n\n<p>The site and content is <em>staying right here</em>. DigitalOcean is committed to continuing to produce high-quality content on front-end development and tending to the trove of content that exists here already.&nbsp;</p>\n\n\n\n<p class=\"reader\"><strong>Will you still be running CSS-Tricks?</strong></p>\n\n\n\n<p>I will be working with the DigitalOcean team as an advisor as we transition CSS-Tricks to DigitalOcean’s management, and will then step back to focus on my other projects.&nbsp;</p>\n\n\n\n<p class=\"reader\"><strong>Why now?</strong></p>\n\n\n\n<p>When I started CSS-Tricks in 2007, I couldn’t have imagined how much it would grow. I <em>wanted</em> it to grow, that was the plan, but now it&#8217;s a far bigger job than any one person can do. That, I was never ready for.&nbsp;</p>\n\n\n\n<p>Let me take a quick moment to give some thanks here. I had the incredible help of <a href=\"https://geoffgraham.me/\" rel=\"noopener\">Geoff</a> as lead editor, sponsor wrangler, and site manager. <a href=\"https://www.robinrendle.com/\" rel=\"noopener\">Robin</a> turned the <a href=\"https://css-tricks.com/newsletters/\">newsletter</a> into the must-read industry rag it is now. It&#8217;s a family business as well! My wife Miranda helped with the books, working with authors, and her guidance on running the site as a proper publication has led the site where it is. I literally couldn&#8217;t have done it without any one of them. And of course, the<a href=\"https://css-tricks.com/authors/\"> incredible group of authors</a>, with a special shout out to <a href=\"https://sarahdrasnerdesign.com/\" rel=\"noopener\">Sarah</a>, a long-time staff writer and friend. </p>\n\n\n\n<p>A small but mighty team, indeed. And that&#8217;s the thing. CSS-Tricks deserves more human muscle behind it than I&#8217;ve been able to provide for it. That&#8217;s where DigitalOcean comes in. That&#8217;s the &#8220;why now.&#8221; They have the resources to put behind CSS-Tricks, and the motivation to do so. I fully trust them to do it, as they&#8217;ve been successfully doing it themselves for a long time.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n</div></div>\n\n\n\n<p>OK! Your turn! If you have any thoughts or questions, feel free to comment below. We&#8217;ll read them all and publish anything useful and constructive.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-tricks-is-joining-digitalocean/\">CSS-Tricks is joining DigitalOcean!</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/css-tricks-is-joining-digitalocean/feed/</wfw:commentRss>\n\t\t\t<slash:comments>124</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">365042</post-id>\t</item>\n\t\t<item>\n\t\t<title>Say Hello to selectmenu, a Fully Style-able select Element</title>\n\t\t<link>https://css-tricks.com/the-selectmenu-element/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/the-selectmenu-element/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Patrick Brosset]]></dc:creator>\n\t\t<pubDate>Thu, 03 Mar 2022 15:35:32 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[form controls]]></category>\n\t\t<category><![CDATA[select]]></category>\n\t\t<category><![CDATA[selectmenu]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=363972</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>I want to introduce you to a new, experimental form control called <code>&#60;selectmenu&#62;</code>. We’ll get deep into it, including how much easier it is to style <a href=\"https://css-tricks.com/the-current-state-of-styling-selects-in-2019/\">than a traditional <code>&#60;select&#62;</code> element</a>. But first, let’s fill in some context &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-selectmenu-element/\">Say Hello to selectmenu, a Fully Style-able select Element</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>I want to introduce you to a new, experimental form control called <code>&lt;selectmenu&gt;</code>. We’ll get deep into it, including how much easier it is to style <a href=\"https://css-tricks.com/the-current-state-of-styling-selects-in-2019/\">than a traditional <code>&lt;select&gt;</code> element</a>. But first, let’s fill in some context about why something like <code>&lt;selectmenu&gt;</code> is needed in the first place, as it’s still evolving and in development.</p>\n\n\n\n<span id=\"more-363972\"></span>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643362344987_smileys.gif\" alt=\"An animated screenshot showing a selectmenu element with emojis as options against a bright teal background.\"/></figure>\n\n\n\n<p>Ask any web developer what they think is missing from the web platform today, chances are the ability to style form controls will be on their list. In fact, form styling was voted as one of the top-10 missing things in the <a href=\"https://2020.stateofcss.com/en-US/opinions/#currently_missing_from_css\" rel=\"noopener\">State of CSS Survey in 2020</a>. It was then further surveyed by <a href=\"https://www.gwhitworth.com\" rel=\"noopener\">Greg Whitworth</a> who <a href=\"https://www.gwhitworth.com/posts/2019/form-controls-components/\" rel=\"noopener\">showed</a> that <code>&lt;select&gt;</code> was the control web developers were having the most problems styling with CSS.</p>\n\n\n\n<p>While it’s relatively easy to style the appearance of the button part of a <code>&lt;select&gt;</code> (the thing you see in the page when the popup is closed), it’s almost impossible to style the options (the thing you see when the popup is open), let alone add more content within the popup.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"571\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-18-at-8.28.46-AM.png?resize=1024%2C571&#038;ssl=1\" alt=\"Showing the default UI of the select element in Safari.\" class=\"wp-image-363976\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-18-at-8.28.46-AM.png?resize=1024%2C571&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-18-at-8.28.46-AM.png?resize=300%2C167&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-18-at-8.28.46-AM.png?resize=768%2C428&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-18-at-8.28.46-AM.png?resize=1000%2C558&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-18-at-8.28.46-AM.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The default UI for a&nbsp;<code>&lt;select&gt;</code>&nbsp;element in Safari</figcaption></figure>\n\n\n\n<p>As a result, design systems and component libraries have been rolling out their own selects, made from scratch using custom HTML markup, CSS, and often a lot of JavaScript, in order to have something that integrates nicely with the other components.</p>\n\n\n\n<p>Unfortunately, doing so correctly with the right accessibility semantics, keyboard support, and popup positioning is not easy. Web developers have poured hours and hours over the years, trying to solve the same problems over and over, and there are many inaccessible selects out there.</p>\n\n\n\n<p>It’s about time we got a properly style-able built-in <code>&lt;select&gt;</code> so we don’t have to write this code ever again!</p>\n\n\n<h3 id=\"the-open-ui-initiative\">The Open UI initiative</h3>\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"512\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-ui-logo.png?resize=1024%2C512&#038;ssl=1\" alt=\"The Open UI logo, which is a green oval with a rounded fork-like shape with three prongs inside.\" class=\"wp-image-363977\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-ui-logo.png?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-ui-logo.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-ui-logo.png?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-ui-logo.png?resize=1000%2C500&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-ui-logo.png?w=1200&amp;ssl=1 1200w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><a href=\"https://open-ui.org/\" rel=\"noopener\">Open UI</a> is a group of developers, designers, and browser implementers who set out to solve this exact problem, and while they’re at it, tackle other missing controls too.</p>\n\n\n\n<p>The purpose of Open UI is to eventually make it possible for web developers to style and extend built-in UI controls (this includes &lt;select&gt;, but dropdowns, checkboxes, radio buttons, and others too). To achieve this, they produce specifications for how these controls should be implemented in the web platform as well as the accessibility requirements they should address.</p>\n\n\n\n<p>The project is still in its infancy, but things are moving fast and, as we’ll see below, exciting things are already happening.</p>\n\n\n\n<p>You can join the group and participate in the meetings, research, and specification efforts.</p>\n\n\n<h3 id=\"thenbspltselectmenugtnbspcontrol\">The <code>&lt;selectmenu&gt;</code> control</h3>\n\n\n<p>Based on the&nbsp;<a href=\"https://open-ui.org/components/select\" target=\"_blank\" rel=\"noreferrer noopener\">Open UI’s&nbsp;<code>&lt;select&gt;</code>&nbsp;proposal</a>, the implementation of a new&nbsp;<code>&lt;selectmenu&gt;</code>&nbsp;control has started in&nbsp;<a href=\"https://chromestatus.com/feature/5737365999976448\" target=\"_blank\" rel=\"noreferrer noopener\">Chromium</a>! The work is done by the Microsoft Edge team, in collaboration with the Google Chrome team.&nbsp;It’s even already available in Chromium-based browsers by enabling the&nbsp;“Experimental&nbsp;Web Platform features”&nbsp;flag in the&nbsp;<code>about:flags&nbsp;page</code>.</p>\n\n\n\n<p><code>&lt;selectmenu&gt;</code>&nbsp;is a new built-in control that provides an option selection user experience, just like&nbsp;<code>&lt;select&gt;</code>, with a button showing the selected value label, a popup that appears when that button is clicked, and a list of options that get displayed.</p>\n\n\n<h4 id=\"why-a-new-name\">Why a new name?</h4>\n\n\n<p>Why not just replace the existing <code>&lt;select&gt;</code> control? The name “selectmenu” started as a working name, but it seems to have stuck so far, and no one has come up with anything better yet.</p>\n\n\n\n<p>More importantly, the existing <code>&lt;select&gt;</code> control has been used on the web for a very long time. As such, it can probably never be changed in any significant way without causing major compatibility issues.</p>\n\n\n\n<p>So, the plan (and remember this is all still very experimental) is for <code>&lt;selectmenu&gt;</code> to be a new control, independent from <code>&lt;select&gt;</code>.</p>\n\n\n<h2 id=\"try-it-out-today\">Try it out today</h2>\n\n\n<p>This isn’t ready for production use yet, but if you’re as excited as I am about using it, here’s how:</p>\n\n\n\n<ol><li>Open a Canary version of a Chromium-based browser (Chrome, Edge).</li><li>Switch the “Experimental Web Platform features” flag in the <code>about:flags</code> page and restart.</li><li>Replace any <code>&lt;select&gt;</code> by <code>&lt;selectmenu&gt;</code> in a web page!</li></ol>\n\n\n\n<p>That’s it! It won’t do much by default, but as we’ll see later, you’ll be able to style and extend the control quite extensively with this one tag name change.</p>\n\n\n<h4 id=\"we-love-feedback\">We love feedback!</h4>\n\n\n<p>Before we go into how to use the control, if you do use it, the Open UI group and people working on the implementation in Chromium would love to hear your feedback if you have any.</p>\n\n\n\n<p>By being an early tester, you can actively help them make the control better for everyone. So, if you encounter bugs or limitations with the design of the control, please send your feedback by <a href=\"https://github.com/openui/open-ui/issues/new?title=%5Bselect%5D%20&amp;labels=select\" rel=\"noopener\">creating an issue on the Open UI GitHub repository</a>!</p>\n\n\n\n<p>And now, let’s talk about how the control works.</p>\n\n\n<h3 id=\"the-anatomy-of-a-ltselectmenugt-control\">The anatomy of a <code>&lt;selectmenu&gt;</code> control</h3>\n\n\n<p>Because the various parts of the selectmenu can be styled, it’s important to first understand its internal anatomy.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1399\" height=\"487\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643363117608_image.png?resize=1399%2C487&#038;ssl=1\" alt=\"Showing the boundaries of a selectmenu element.\" class=\"wp-image-363980\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643363117608_image.png?w=1399&amp;ssl=1 1399w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643363117608_image.png?resize=300%2C104&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643363117608_image.png?resize=1024%2C356&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643363117608_image.png?resize=768%2C267&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_797501BD4AFF503DA74D1BDD7B33D429EC9D204989BD795E11C5388EDE81A2B5_1643363117608_image.png?resize=1000%2C348&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<ul><li><strong><code>&lt;selectmenu&gt;</code></strong> is the root element that contains the button and listbox.</li><li><strong><code>&lt;button&gt;</code></strong> is the element that triggers the visibility of the listbox.</li><li><strong><code>&lt;selected-value&gt;</code></strong> is the element that displays the value of the currently selection option (optional). Note that this part does not necessarily have to be placed inside the <code>&lt;button&gt;</code> part.</li><li><strong><code>&lt;listbox&gt;</code></strong> is the wrapper that contains the <code>&lt;option&gt;</code>s and <code>&lt;optgroup&gt;</code>s.</li><li><strong><code>&lt;optgroup&gt;</code></strong> groups s together with an optional label.</li><li><strong><code>&lt;option&gt;</code></strong> represents the potential value that can be chosen by the user. There can be one or more.</li></ul>\n\n\n<h3 id=\"default-behavior\">Default behavior</h3>\n\n\n<p>The default behavior of the <code>&lt;selectmenu&gt;</code> control mimics the behavior of the <code>&lt;select&gt;</code> control. You can use it just like a native <code>&lt;select&gt;</code>, with the following minimal markup.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;selectmenu>\n  &lt;option>Option 1&lt;/option>\n  &lt;option>Option 2&lt;/option>\n  &lt;option>Option 3&lt;/option>\n&lt;/selectmenu></code></pre>\n\n\n\n<p>When doing so, the default <code>&lt;button&gt;</code>, <code>&lt;selected-value&gt;</code>, and <code>&lt;listbox</code> &gt;are created for you.</p>\n\n\n<h3 id=\"styling-parts-of-the-control\">Styling parts of the control</h3>\n\n\n<p>This is where things become interesting! One way to style the control to match your requirements is to use the CSS <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::part\" rel=\"noopener\"><code>::part()</code></a> pseudo-element to select the different parts within the control’s anatomy that you wish to style.</p>\n\n\n\n<p>Consider the following example where <code>::part()</code> is used to style the button and the listbox parts:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style>\n  .my-select-menu::part(button) {\n    color: white;\n    background-color: #f00;\n    padding: 5px;\n    border-radius: 5px;\n  }\n\n  .my-select-menu::part(listbox) {\n    padding: 10px;\n    margin-top: 5px;\n    border: 1px solid red;\n    border-radius: 5px;\n  }\n&lt;/style>\n&lt;selectmenu class=\"my-select-menu\">\n  &lt;option>Option 1&lt;/option>\n  &lt;option>Option 2&lt;/option>\n  &lt;option>Option 3&lt;/option>\n&lt;/selectmenu></code></pre>\n\n\n\n<p>The above example results in the following style:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-styling-parts.png?resize=186%2C265&#038;ssl=1\" alt=\"A styled selectmenu element with a red button background and a red border around the listbox.\" class=\"wp-image-363981\" width=\"186\" height=\"265\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><code>::part()</code> can be used to style the <code>&lt;button&gt;</code>, <code>&lt;selected-value&gt;</code>, and <code>&lt;listbox&gt;</code> parts of the control.</p>\n\n\n<h3 id=\"use-your-own-markup\">Use your own markup</h3>\n\n\n<p>If the above isn’t enough for your needs, you can customize the control much more by providing your own markup to replace the default one, and extend or re-order the parts.</p>\n\n\n\n<p>A <code>&lt;selectmenu&gt;</code> has named <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots#adding_flexibility_with_slots\" rel=\"noopener\">slots</a> that can be referenced to replace the default parts. For example, to replace the default button with your own, you can do the following:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style>\n  .my-custom-select [slot='button'] {\n    display: flex;\n    align-content: center;\n  }\n  .my-custom-select button {\n    padding: 5px;\n    border: none;\n    background: #f06;\n    border-radius: 5px 0 0 5px;\n    color: white;\n    font-weight: bold;\n  }\n  .my-custom-select .label {\n    padding: 5px;\n    border: 1px solid #f06;\n    border-radius: 0 5px 5px 0;\n  }\n&lt;/style>\n&lt;selectmenu class=\"my-custom-select\">\n  &lt;div slot=\"button\">\n    &lt;button behavior=\"button\">Open&lt;/button>\n    &lt;span class=\"label\">Choose an option&lt;/span>\n  &lt;/div>\n  &lt;option>Option 1&lt;/option>\n  &lt;option>Option 2&lt;/option>\n  &lt;option>Option 3&lt;/option>\n&lt;/selectmenu></code></pre>\n\n\n\n<p>The <code>slot=\"button\"</code> attribute on the outer <code>&lt;div&gt;</code> tells the <code>&lt;selectmenu&gt;</code> to replace its default button with the contents of the <code>&lt;div&gt;</code>.</p>\n\n\n\n<p>The <code>behavior=\"button\"</code> attribute on the inner <code>&lt;button&gt;</code> tells the browser that this element is what we want to use as the new button. The browser will automatically apply all the click and keyboard handling behavior to this element as well as the appropriate accessibility semantics.</p>\n\n\n\n<p>The above code snippet results in the following style:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"346\" height=\"252\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-replacing-button-part.png?resize=346%2C252&#038;ssl=1\" alt=\"A styled selectmenu with a bright pink open button and a box-shadow around the listbox.\" class=\"wp-image-363982\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-replacing-button-part.png?w=346&amp;ssl=1 346w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-replacing-button-part.png?resize=300%2C218&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Note that the <code>slot</code> and <code>behavior</code> attributes can also be used on the same element.</p>\n\n\n\n<p>You can replace the default listbox part in a similar fashion:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style>\n  .my-custom-select popup {\n    width: 300px;\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n    gap: 10px;\n    padding: 10px;\n    box-shadow: none;\n    margin: 10px 0;\n    border: 1px solid;\n    background: #f7f7f7;\n  }\n&lt;/style>\n&lt;selectmenu class=\"my-custom-select\">\n  &lt;div slot=\"listbox\">\n    &lt;popup behavior=\"listbox\">\n      &lt;option>Option 1&lt;/option>\n      &lt;option>Option 2&lt;/option>\n      &lt;option>Option 3&lt;/option>\n      &lt;option>Option 4&lt;/option>\n      &lt;option>Option 5&lt;/option>\n    &lt;/popup>\n  &lt;/div>\n&lt;/selectmenu></code></pre>\n\n\n\n<p>Interestingly, the <code>&lt;popup&gt;</code> used here is also being <a href=\"https://open-ui.org/components/popup\" rel=\"noopener\">proposed by Open UI</a> and implemented in Chromium at the moment.</p>\n\n\n\n<p>The element with <code>behavior=\"listbox\"</code> is required to be a <code>&lt;popup&gt;</code>. Applying <code>behavior=\"listbox\"</code> tells the browser to open this element when the <code>&lt;selectmenu&gt;</code> button is clicked, and the user can select <code>&lt;option&gt;</code>s inside it with mouse, arrow keys, and touch.</p>\n\n\n\n<p>The above code snippet results in the following style:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"496\" height=\"261\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-replacing-listbox-part.png?resize=496%2C261&#038;ssl=1\" alt=\"A styled selectmenu where the list box is split into two columns.\" class=\"wp-image-363983\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-replacing-listbox-part.png?w=496&amp;ssl=1 496w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-replacing-listbox-part.png?resize=300%2C158&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"extending-the-markup\">Extending the markup</h3>\n\n\n<p>Not only can you replace the default parts with your own, as seen above, you can also extend the control’s markup by adding new elements. This can be useful to augment the listbox or button with extra information, or to add new functionality.</p>\n\n\n\n<p>Consider the following example:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style>\n  .my-custom-select [slot='button'] {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  }\n  .my-custom-select button {\n    border: none;\n    margin: 0;\n    padding: 0;\n    width: 2rem;\n    height: 2rem;\n    border-radius: 50%;\n    display: grid;\n    place-content: center;\n  }\n  .my-custom-select button::before {\n    content: '\\25BC';\n  }\n  .my-custom-select popup {\n    padding: 0;\n  }\n  .my-custom-select .section {\n    padding: 1rem 0 0;\n    background: radial-gradient(ellipse 60% 50px at center top, #000a 0%, transparent 130%);\n  }\n  .my-custom-select h3 {\n    margin: 0 0 1rem 0;\n    text-align: center;\n    color: white;\n  }\n  .my-custom-select option {\n    text-align: center;\n    padding: 0.5rem;\n  }\n&lt;/style>\n&lt;selectmenu class=\"my-custom-select\">\n  &lt;div slot=\"button\">\n    &lt;span class=\"label\">Choose a plant&lt;/span>\n    &lt;span behavior=\"selected-value\" slot=\"selected-value\">&lt;/span>\n    &lt;button behavior=\"button\">&lt;/button>\n  &lt;/div>\n  &lt;div slot=\"listbox\">\n    &lt;popup behavior=\"listbox\">\n      &lt;div class=\"section\">\n        &lt;h3>Flowers&lt;/h3>\n        &lt;option>Rose&lt;/option>\n        &lt;option>Lily&lt;/option>\n        &lt;option>Orchid&lt;/option>\n        &lt;option>Tulip&lt;/option>\n      &lt;/div>\n      &lt;div class=\"section\">\n        &lt;h3>Trees&lt;/h3>\n        &lt;option>Weeping willow&lt;/option>\n        &lt;option>Dragon tree&lt;/option>\n        &lt;option>Giant sequoia&lt;/option>\n      &lt;/div>\n    &lt;/popup>\n  &lt;/div>\n&lt;/selectmenu></code></pre>\n\n\n\n<p>Here we’re using custom markup to wrap the list of options and create our own content as seen below:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"453\" height=\"670\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-using-custom-markup.png?resize=453%2C670&#038;ssl=1\" alt=\"A styled selectmenu that contains options containing sub-options in the listbox.\" class=\"wp-image-363984\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-using-custom-markup.png?w=453&amp;ssl=1 453w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/selectmenu-using-custom-markup.png?resize=203%2C300&amp;ssl=1 203w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"replacing-the-entire-shadow-dom\">Replacing the entire shadow DOM</h3>\n\n\n<p>Finally, and if the above wasn’t enough, you can also extend the control&#8217;s markup by replacing its default shadow DOM altogether by calling <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow\" rel=\"noopener\"><code>attachShadow()</code></a>. For example, the demo in the <a href=\"https://open-ui.org/prototypes/selectmenu#extending-the-markup\" rel=\"noopener\">previous section</a> could be modified as follows:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;selectmenu id=\"my-custom-select\">&lt;/selectmenu>\n&lt;script>\n  const myCustomSelect = document.querySelector('#my-custom-select')\n  const shadow = myCustomSelect.attachShadow({ mode: 'closed' })\n  shadow.innerHTML = `\n    &lt;style>\n    .button-container {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n    }\n    button {\n      border: none;\n      margin: 0;\n      padding: 0;\n      width: 2rem;\n      height: 2rem;\n      border-radius: 50%;\n      display: grid;\n      place-content: center;\n    }\n    button::before {\n      content: '\\\\0025BC';\n    }\n    popup {\n      padding: 0;\n    }\n    .section {\n      padding: 1rem 0 0;\n      background: radial-gradient(ellipse 60% 50px at center top, #000a 0%, transparent 130%);\n    }\n    h3 {\n      margin: 0 0 1rem 0;\n      text-align: center;\n      color: white;\n    }\n    option {\n      text-align: center;\n      padding: 0.5rem;\n    }\n    option:hover {\n      background-color: lightgrey;\n    }\n  &lt;/style>\n  &lt;div class=\"button-container\">\n    &lt;span class=\"label\">Choose a plant&lt;/span>\n    &lt;span behavior=\"selected-value\" slot=\"selected-value\">&lt;/span>\n    &lt;button behavior=\"button\">&lt;/button>\n  &lt;/div>\n  &lt;popup behavior=\"listbox\">\n    &lt;div class=\"section\">\n      &lt;h3>Flowers&lt;/h3>\n      &lt;option>Rose&lt;/option>\n      &lt;option>Lily&lt;/option>\n      &lt;option>Orchid&lt;/option>\n      &lt;option>Tulip&lt;/option>\n    &lt;/div>\n    &lt;div class=\"section\">\n      &lt;h3>Trees&lt;/h3>\n      &lt;option>Weeping willow&lt;/option>\n      &lt;option>Dragon tree&lt;/option>\n      &lt;option>Giant sequoia&lt;/option>\n    &lt;/div>\n  &lt;/popup>\n  `\n&lt;/script></code></pre>\n\n\n\n<p>Written this way, the <code>&lt;selectmenu&gt;</code>&#8216;s custom markup is fully encapsulated in its shadow DOM. The <code>&lt;selectmenu&gt;</code> can therefore be dropped into any page without risk of interference from the surrounding content&#8217;s styles.</p>\n\n\n<h3 id=\"closing-remarks\">Closing remarks</h3>\n\n\n<p>As we’ve seen, the new experimental <code>&lt;selectmenu&gt;</code> control offers a lot of flexibility when it comes to styling and even extending a traditional <code>&lt;select&gt;</code>. And it does this in all the right ways, because it’s built into the browser where accessibility and viewport-aware positioning are handled for you.</p>\n\n\n\n<p>Open UI has <a href=\"https://open-ui.org/prototypes/selectmenu\" rel=\"noopener\">more documentation about <code>&lt;selectmenu&gt;</code></a>, and if you want to see more code showing how to use the <code>&lt;selectmenu&gt;</code>, <a href=\"https://microsoftedge.github.io/Demos/selectmenu/\" rel=\"noopener\">here are a few demos</a> as well.</p>\n\n\n\n<p>Again, this is work in progress and will most certainly change as a result of feedback received by the Open UI group.</p>\n\n\n\n<p>I can’t wait to see specifications start to appear in HTML and CSS standard bodies, and for the implementation to become more stable, as well as see other browser engines getting interested in this. You can help make this happen! Testing the control, <a href=\"https://github.com/openui/open-ui/issues/new?title=%5Bselect%5D%20&amp;labels=select\" rel=\"noopener\">reporting issues</a>, or <a href=\"https://open-ui.org/get-involved\" rel=\"noopener\">getting involved</a> are all great ways to help push this effort forward.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-selectmenu-element/\">Say Hello to selectmenu, a Fully Style-able select Element</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/the-selectmenu-element/feed/</wfw:commentRss>\n\t\t\t<slash:comments>12</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">363972</post-id>\t</item>\n\t\t<item>\n\t\t<title>Build Membership Businesses with Memberful</title>\n\t\t<link>https://css-tricks.com/build-membership-businesses-with-memberful/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/build-membership-businesses-with-memberful/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Thu, 03 Mar 2022 15:33:57 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Sponsored]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=364001</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p><em>What would your business be like if you sold memberships?</em> It might be more than fun to think about, in fact, it might just be transformative. With membership, would you include little add-ons or &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/build-membership-businesses-with-memberful/\">Build Membership Businesses with Memberful</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p><em>What would your business be like if you sold memberships?</em> It might be more than fun to think about, in fact, it might just be transformative. With membership, would you include little add-ons or perks for your biggest fans? Or could it become the entire core of what you do? Likewise, what might you help your clients build?</p>\n\n\n\n<p>Whatever you decide to do (or perhaps what a client has hired you to do), you can get it done with <a href=\"https://srv.buysellads.com/ads/long/x/T6I5BCZ4TTTTTTCLOKGN6TTTTTTKRIEOKVTTTTTTP33JLYETTTTTT7D7PRJNARP3F3UNBWPLC2YICWLDKQQN47I3C7BT\" rel=\"noopener\">Memberful</a>. It&#8217;s the best software for building membership businesses, used by the biggest creators on the web.</p>\n\n\n\n<span id=\"more-364001\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1464\" height=\"1228\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/plan-view-c75eb6fd.png?resize=1464%2C1228&#038;ssl=1\" alt=\"\" class=\"wp-image-364110\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/plan-view-c75eb6fd.png?w=1464&amp;ssl=1 1464w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/plan-view-c75eb6fd.png?resize=300%2C252&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/plan-view-c75eb6fd.png?resize=1024%2C859&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/plan-view-c75eb6fd.png?resize=768%2C644&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/plan-view-c75eb6fd.png?resize=1000%2C839&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"memberful-is-for-developers\">Memberful is for developers.</h3>\n\n\n<p>You have a goal in mind: to build a great member-powered web experience. But you&#8217;re a developer and want to build how you want to build. Good. <a href=\"https://srv.buysellads.com/ads/long/x/T6I5BCZ4TTTTTTCLOKGN6TTTTTTKRIEOKVTTTTTTP33JLYETTTTTT7D7PRJNARP3F3UNBWPLC2YICWLDKQQN47I3C7BT\" rel=\"noopener\">Memberful</a> is here to support that.</p>\n\n\n\n<p>Memberful maintains <a href=\"https://memberful.com/help/custom-development-and-api/memberful-api/\" rel=\"noopener\">a full-featured GraphQL API</a> (complete with GraphiQL explorer), webhooks, and OAth Single Sign-on to make it easy to integrate seamlessly with any stack.</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"587\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-api-explorer-c9719ed0.png?resize=1024%2C587&#038;ssl=1\" alt=\"\" class=\"wp-image-364143\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-api-explorer-c9719ed0.png?resize=1024%2C587&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-api-explorer-c9719ed0.png?resize=300%2C172&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-api-explorer-c9719ed0.png?resize=768%2C441&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-api-explorer-c9719ed0.png?resize=1000%2C574&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/open-api-explorer-c9719ed0.png?w=1440&amp;ssl=1 1440w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"523\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/api-docs-sidebar-495cc852.png?resize=1024%2C523&#038;ssl=1\" alt=\"\" class=\"wp-image-364144\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/api-docs-sidebar-495cc852.png?resize=1024%2C523&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/api-docs-sidebar-495cc852.png?resize=300%2C153&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/api-docs-sidebar-495cc852.png?resize=768%2C392&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/api-docs-sidebar-495cc852.png?resize=1000%2C510&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/api-docs-sidebar-495cc852.png?w=1440&amp;ssl=1 1440w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n</div>\n\n\n\n<p>Your main site in Rails? No problem. You wanna do a Jamstack thing? Perfect. Do you have a React-powered app through and through? That&#8217;ll work.</p>\n\n\n<h3 id=\"you-dont-have-to-build-entirely-from-scratch\">You don&#8217;t have to build entirely from scratch.</h3>\n\n\n<div class=\"wp-block-image\"><figure class=\"alignright size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/install-plugin-integration-active-24945a9a.png?resize=503%2C357&#038;ssl=1\" alt=\"\" class=\"wp-image-364145\" width=\"503\" height=\"357\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/install-plugin-integration-active-24945a9a.png?w=560&amp;ssl=1 560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/install-plugin-integration-active-24945a9a.png?resize=300%2C213&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure></div>\n\n\n\n<p>For example, Memberful maintains <a href=\"https://memberful.com/help/wordpress-plugin/setup/install-the-memberful-plugin/\" rel=\"noopener\">a best-in-class WordPress plugin</a> that easily gates content and adds membership to your website. So if you happen to use WordPress as your CMS, or are thinking of using it to build your website, you&#8217;ve got a first-class integration to work with.</p>\n\n\n\n<p>If you&#8217;re looking to add membership to your existing business, you&#8217;ll want a solution that <em>works with your existing technology</em>, so you can <em>launch a new revenue stream without rebuilding </em>your entire tech stack.</p>\n\n\n<h3 id=\"you-dont-even-need-to-build-a-website-to-use-memberful\"><strong>You don’t even need to build a website to use Memberful</strong>.</h3>\n\n\n<p>If you&#8217;re not looking to gate access to content on a custom website, you won&#8217;t need a website at all to use Memberful. You can use Memberful&#8217;s hosted landing page feature to sell your memberships, and then deliver your member benefits like a private podcast, protected downloads, and newsletters right through the platform — no website required.</p>\n\n\n\n<p>Say you already use other tools for your business. Maybe you do all your emailing with MailChimp. Great! Memberful fully integrates with MailChimp. Is Discord your community hub? No problem, Memberful seamlessly integrates with Discord, meaning you can offer paid subscribers perks that are unique to Discord, things like special channels or access roles.</p>\n\n\n<h3 id=\"what-are-some-common-use-cases-for-memberful\">What are some common use cases for Memberful?</h3>\n\n\n<div class=\"wp-block-image\"><figure class=\"alignright size-large is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/account-podcasts-subscribe-6c4f5323.png?resize=574%2C605&#038;ssl=1\" alt=\"\" class=\"wp-image-364149\" width=\"574\" height=\"605\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/account-podcasts-subscribe-6c4f5323.png?resize=971%2C1024&amp;ssl=1 971w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/account-podcasts-subscribe-6c4f5323.png?resize=284%2C300&amp;ssl=1 284w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/account-podcasts-subscribe-6c4f5323.png?resize=768%2C810&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/account-podcasts-subscribe-6c4f5323.png?resize=1000%2C1055&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/account-podcasts-subscribe-6c4f5323.png?w=1440&amp;ssl=1 1440w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure></div>\n\n\n\n<ul><li>Private Podcasts</li><li>Subscription Newsletters</li><li>Selling digital goods (or physical!)</li><li>Building communities</li><li>Membership-driven educational courses</li></ul>\n\n\n\n<p>Memberful handles the hard stuff so you can focus on what you do best, while earning revenue quickly. Even advanced features like gift subscriptions, coupons, referrals, free and paid trials and more, are right there for you to take advantage of.</p>\n\n\n<h3 class=\"ticss-d239e00c\" id=\"who-handles-all-the-emails\">Who handles all the emails?</h3>\n\n\n<p>Memberful does, and you get 100% control of the brand. Yet another thing you won&#8217;t need to worry about, which can otherwise be an awful lot of work and technical debt. I&#8217;m talking transactional emails here, like signup confirmation emails, welcome emails, forgot password emails, etc.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/sign-in-email-7b0efbd4.png?resize=539%2C359&#038;ssl=1\" alt=\"\" class=\"wp-image-364147\" width=\"539\" height=\"359\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/sign-in-email-7b0efbd4.png?w=801&amp;ssl=1 801w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/sign-in-email-7b0efbd4.png?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/sign-in-email-7b0efbd4.png?resize=768%2C512&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"how-does-the-money-work\">How does the money work?</h3>\n\n\n<p><a href=\"https://srv.buysellads.com/ads/long/x/T6I5BCZ4TTTTTTCLOKGN6TTTTTTKRIEOKVTTTTTTP33JLYETTTTTT7D7PRJNARP3F3UNBWPLC2YICWLDKQQN47I3C7BT\" rel=\"noopener\">Memberful has a free plan</a> to get your feet wet. You can build 2 subscription plans and do website integrations. The PRO plan starts at $25/month and lowers transaction fees to 4.9% down from 10% on the free plan.</p>\n\n\n\n<p>Where do those subscription payments go? You connect your Stripe account, so that money goes there, which is the best-in-business payment provider. That means you can offer additional features like Apple Pay and Google Pay which are great for lowering checkout friction for potential customers.</p>\n\n\n\n<p>Have questions? <a href=\"https://srv.buysellads.com/ads/long/x/T6I5BCZ4TTTTTTCLOKGN6TTTTTTKRIEOKVTTTTTTP33JLYETTTTTT7D7PRJNARP3F3UNBWPLC2YICWLDKQQN47I3C7BT\" rel=\"noopener\">Memberful</a> has always-real-human based support at all times to help you.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/build-membership-businesses-with-memberful/\">Build Membership Businesses with Memberful</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/build-membership-businesses-with-memberful/feed/</wfw:commentRss>\n\t\t\t<slash:comments>1</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">364001</post-id>\t</item>\n\t\t<item>\n\t\t<title>7 Fresh Links on Performance For March 2022</title>\n\t\t<link>https://css-tricks.com/performance-links-february-2022/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/performance-links-february-2022/#respond</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Wed, 02 Mar 2022 21:26:50 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[cloudflare]]></category>\n\t\t<category><![CDATA[next.js]]></category>\n\t\t<category><![CDATA[performance]]></category>\n\t\t<category><![CDATA[svg icons]]></category>\n\t\t<category><![CDATA[webpagetest]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=364350</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>I have a handful of good links to articles about performance that are burning a hole in my bookmarks folder, and wanna drop them here to share.</p>\n<p>The new WebPageTest website design</p>\n<ul class=\"is-style-super-link-list\">\n<li><a href=\"https://calendar.perfplanet.com/2021/from-fonts-to-svg-an-icon-migration-strategy/\" rel=\"noopener\">From fonts to SVG: an icon migration strategy</a></li>\n</ul>\n<p>&#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/performance-links-february-2022/\">7 Fresh Links on Performance For March 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>I have a handful of good links to articles about performance that are burning a hole in my bookmarks folder, and wanna drop them here to share.</p>\n\n\n\n<span id=\"more-364350\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1280\" height=\"1024\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/new-ui-hero_hyd6gq.webp?resize=1280%2C1024&#038;ssl=1\" alt=\"Screenshot of the new WebPageTest homepage, a tool for testing performance metrics.\" class=\"wp-image-364871\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/new-ui-hero_hyd6gq.webp?w=1280&amp;ssl=1 1280w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/new-ui-hero_hyd6gq.webp?resize=300%2C240&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/new-ui-hero_hyd6gq.webp?resize=1024%2C819&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/03/new-ui-hero_hyd6gq.webp?resize=768%2C614&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The new WebPageTest website design</figcaption></figure>\n\n\n\n<ul class=\"is-style-super-link-list\"><li><a href=\"https://calendar.perfplanet.com/2021/from-fonts-to-svg-an-icon-migration-strategy/\" rel=\"noopener\">From fonts to SVG: an icon migration strategy</a>— Erwin Hofman notes that he was using icon fonts out of sheer convenience, but that there are loads of reasons not to use them. He provides details on his new strategy for using icons, which is based on the <code>&lt;use&gt;</code> technique. Five years later, I&#8217;m still a big fan of <a href=\"https://css-tricks.com/pretty-good-svg-icon-system/\">just dunking the <code>&lt;svg&gt;</code> in the HTML</a> where you need them. It&#8217;s just an HTML partial like any other. </li><li><a href=\"https://calibreapp.com/blog/nextjs-performance\" rel=\"noopener\">Next.js Performance: Making a Fast Framework Even Faster</a>— Ben Schwarz says that Next.js is already a pretty fast framework in that it does smart things that keep even React powered pages snappy. But performance isn&#8217;t something that can be left entirely to a framework. <em>You</em> have to do work. Fortunately, Next.js has some pretty handy helpers for things like dynamically (lazily) loading components, deferring scripts, optimizing images, and more.</li><li><a href=\"https://calendar.perfplanet.com/2021/redirect-liquidation/\" rel=\"noopener\">Redirect Liquidation</a>— Tim Vereecke covers a fascinating technique where instead of <em>redirecting</em> an old URL to a new URL, you let the old URL load, dynamically load the new content, then <code>history.replaceState</code> the old URL with the new URL. It&#8217;s faster, but just don&#8217;t do it for bots. </li><li><a href=\"https://philipwalton.com/articles/performant-a-b-testing-with-cloudflare-workers/\" rel=\"noopener\">Performant A/B Testing with Cloudflare Workers</a>— Philip Walton covers how A/B testing is a little trickier on static sites than server-backed sites, but you can pull it off (performantly) thanks to Cloudflare Workers which can manipulate HTML before it hits the browser, much like a Service Worker except at the edge rather than at the client. Save a cookie and you can maintain users in their proper groups.</li><li><a href=\"https://calendar.perfplanet.com/2021/a-unified-theory-of-web-performance/\" rel=\"noopener\">A Unified Theory of Web Performance</a>— Alex Russell tries to answer Tanner Hodges&#8217; call for actually defining web performance. It&#8217;s one of those things that seems obvious (like it&#8217;s clear when certain things help and hurt web performance) but actually defining it is tricky. And not just defining it in terms of specific metrics (even that is tricky), but answer questions like: <em>What are this discipline’s guiding principles?</em> <em>What does it look like to practice web performance? How do we do it?</em></li><li><a href=\"https://blog.webpagetest.org/posts/unveiling-the-new-wpt-ui/\" rel=\"noopener\">Unveiling the new WebPageTest UI</a>— I absolutely love seeing WebPageTest&#8217;s design evolve and improve. It&#8217;s one of those products that&#8217;s clearly a best-in-class tool for performance practitioners, yet had a <em>prettttty</em> gnarly design for a lot of years. This is way better. It&#8217;s like when Google Fonts finally got a redesign and the broad community let out a collective exhale of appreciation.</li><li><a href=\"https://simonhearne.com/2022/caching-header-best-practices/\" rel=\"noopener\">Caching Header Best Practices</a>— Simon Hearne&#8217;s dissertation on Cache headers. When I first started caring about web performance, this was, like, the <em>main</em> thing. If you incorrectly send Cache headers, users might be re-downloading a file over and over unnecessarily when they don&#8217;t need to, which is about the worst thing possible. I&#8217;m glad to see headers keep getting attention and re-imagined as the web evolves.</li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/performance-links-february-2022/\">7 Fresh Links on Performance For March 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/performance-links-february-2022/feed/</wfw:commentRss>\n\t\t\t<slash:comments>0</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">364350</post-id>\t</item>\n\t\t<item>\n\t\t<title>How to Make a “Raise the Curtains” Effect in CSS</title>\n\t\t<link>https://css-tricks.com/css-raise-the-curtains-effect/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/css-raise-the-curtains-effect/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Silvestar Bistrović]]></dc:creator>\n\t\t<pubDate>Wed, 02 Mar 2022 15:57:32 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[mix-blend-mode]]></category>\n\t\t<category><![CDATA[scrolling]]></category>\n\t\t<category><![CDATA[sticky]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=363882</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>“Raise the curtains” is what I call an effect where the background goes from dark to light on scroll, and the content on top also goes from light to dark while in a sticky position.</p>\n<p>Here’s an example where I &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-raise-the-curtains-effect/\">How to Make a “Raise the Curtains” Effect in CSS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>“Raise the curtains” is what I call an effect where the background goes from dark to light on scroll, and the content on top also goes from light to dark while in a sticky position.</p>\n\n\n\n<span id=\"more-363882\"></span>\n\n\n\n<p>Here’s an example where I used the effect on a <a href=\"https://www.wundermobility.com/sharing-ready-vehicles/\" rel=\"noopener\">real-life project</a>:</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='289' src='https://videopress.com/embed/VJgwbTsL?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\"></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>Want to know how it’s done? I will take you behind the curtain and show you how to raise it, with nothing but HTML and CSS.</p>\n\n\n<h3 id=\"lets-start-with-the-html\">Let’s start with the HTML</h3>\n\n\n<p>What we&#8217;re making is sort of a simplified &#8220;raise the curtain&#8221; effect like this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1636\" height=\"736\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?resize=1636%2C736&#038;ssl=1\" alt=\"Showing the raise the curtains effect from dark blue to wheat.\" class=\"wp-image-363923\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?w=1636&amp;ssl=1 1636w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?resize=300%2C135&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?resize=1024%2C461&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?resize=768%2C346&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?resize=1536%2C691&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/curtain-effect.png?resize=1000%2C450&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The background and text both change color while scrolling over the element.</figcaption></figure>\n\n\n\n<p>I’m keeping things simple for the sake of clarity, but we can stub this out with three elements:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"curtain\">\n  &lt;div class=\"invert\">\n    &lt;h2>Section title&lt;/h2>\n  &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<p>First, we need a container for the curtain, which we’ll give a <code>.curtain</code> class. Then, inside the <code>.curtain</code>, we have the an <code>.invert</code> child element that will serve as our “sticky” box. And, finally, we have the content inside this box — a good old-fashioned <code>&lt;h2&gt;</code> element for this specific example.</p>\n\n\n<h3 id=\"lets-set-up-some-css-variables\">Let’s set up some CSS variables</h3>\n\n\n<p>There are three values we know we’ll need upfront. Let’s make CSS variables out of them so it’s easy to write them into our styles and easily change them later if we need to.</p>\n\n\n\n<ul><li><code>--minh</code> &#8211; The height of the container</li><li><code>--color1</code> &#8211; The light color</li><li><code>--color2</code> &#8211; The dark color</li></ul>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\n  --minh: 98vh;\n  --color1: wheat;\n  --color2: midnightblue;\n}</code></pre>\n\n\n<h3 id=\"time-to-draw-the-curtain\">Time to draw the curtain</h3>\n\n\n<p>Next, we can define our <code>.curtain</code> element using the following techniques:</p>\n\n\n\n<ul><li>A <code>linear-gradient</code> for the “split” background</li><li><code>min-height</code> for the extra space at the bottom of the container</li></ul>\n\n\n\n<p>We use the <code>::after</code> pseudo-element to add the extra space to the bottom. This way, our “sticky” content will actually stick to the container while scrolling past the <code>::after</code> element. It’s an illusion.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.curtain {\n  /** create the \"split\" background **/\n  background-image: linear-gradient(to bottom, var(--color2) 50%, var(--color1) 50%);\n}\n\n/** add extra space to the bottom (need this for the \"sticky\" effect) **/\n.curtain::after {\n  content: \"\";\n  display: block;\n  min-height: var(--minh);\n}</code></pre>\n\n\n<h3 id=\"making-sticky-content\">Making sticky content</h3>\n\n\n<p>Next up, we need to make our content “sticky” in the sense that it sits perfectly inside the container as the background and text swap color values. In fact, we already gave the <code>.curtain</code>&#8216;s child element an <code>.invert</code> class that we can use as the sticky container.</p>\n\n\n\n<p>Stay with me for a moment — here’s how this is going to play out:</p>\n\n\n\n<ul><li><code>position: sticky</code> and <code>top</code> define the stickiness and where it sticks.</li><li><code>mix-blend-mode: difference</code> blends the color of the content inside the <code>&lt;h2&gt;</code> element into the <code>.curtain</code>&#8216;s background gradient.</li><li><code>display: flex</code> centers the content for presentation.</li><li><code>min-height</code> defines the height of the container and allows for the extra space at the bottom.</li><li><code>color</code> sets the color of the <code>h2</code> heading.</li></ul>\n\n\n\n<p>Now to put that into CSS code!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.invert {\n  /** make the content sticky **/\n  position: sticky;\n  top: 20px;\n\n  /** blend the content with the contrast effect **/\n  mix-blend-mode: difference;\n\n  /** center the content **/\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  /** set the minimum height of the section **/\n  min-height: var(--minh);\n}\n\nh2 {\n  /** set the color of the text **/\n  color: var(--color1);\n}</code></pre>\n\n\n\n<p>There are many things going on here, so let’s explain each one of them.</p>\n\n\n\n<p>First, we have a sticky position that is self-explanatory and flexbox to help <a href=\"https://css-tricks.com/centering-css-complete-guide/\">center the content</a>. Nothing new or particularly tricky about this.</p>\n\n\n\n<p>The content’s height is set using CSS variable and the value is the same height value as the <code>.curtain::after</code> pseudo-element.</p>\n\n\n\n<p>The <code>mix-blend-mode: difference</code> declaration blends our content with the background. The <code>difference</code> value is complicated, but you might visualize it like inverted text color against the background. Here’s a nice demo from the CSS-Tricks Almanac showing off the different <a href=\"https://css-tricks.com/almanac/properties/m/mix-blend-mode/\"><code>mix-blend-mode</code></a> values:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzWpPLy\" src=\"//codepen.io/anon/embed/YzWpPLy?height=550&amp;theme-id=1&amp;slug-hash=YzWpPLy&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzWpPLy\" title=\"CodePen Embed YzWpPLy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>To make the blending work, we need to set the color of our heading. In this case, we&#8217;re assigning a light color value (<code>wheat</code>) to the <code>--color1</code> variable.</p>\n\n\n<h3 id=\"raise-the-curtains-demo\">&#8220;Raise the Curtains&#8221; Demo</h3>\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzEERmQ\" src=\"//codepen.io/anon/embed/YzEERmQ?height=500&amp;theme-id=1&amp;slug-hash=YzEERmQ&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzEERmQ\" title=\"CodePen Embed YzEERmQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"gotchas\">Gotchas</h3>\n\n\n<p>I experienced a few problems while working out the details of the &#8220;raise the curtain&#8221; effect. If you want to add images to the “sticky” content, for example, avoid using images that don’t look good when their colors are inverted. Here’s a quick demo where I made a simple SVG and transparent PNG image, and it looks good.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ExwRmyp\" src=\"//codepen.io/anon/embed/ExwRmyp?height=650&amp;theme-id=1&amp;slug-hash=ExwRmyp&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ExwRmyp\" title=\"CodePen Embed ExwRmyp\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Another gotcha: there’s no way to set <code>mix-blend-mode: difference</code> on specific child elements, like headings, while avoiding the effect on images. I discovered there are several reasons why it doesn’t work, the first of which is that <code>position: sticky</code> cancels the blending.</p>\n\n\n\n<p>The same goes when using something like <code>transform: skewY</code> on the container to add a little &#8220;tilt&#8221; to things. I suspect other properties don’t play well with the blending, but I didn’t go that far to find out which ones.</p>\n\n\n\n<p>Here’s the demo without scrolling that removes the troubling properties:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ZEXRKxR\" src=\"//codepen.io/anon/embed/ZEXRKxR?height=650&amp;theme-id=1&amp;slug-hash=ZEXRKxR&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ZEXRKxR\" title=\"CodePen Embed ZEXRKxR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"curtain-call\">Curtain call!</h3>\n\n\n<p>I enjoyed building this component, and I always love it when I can accomplish something using only HTML and CSS, especially when they work smoothly on every browser.</p>\n\n\n\n<p>What will make with it? Is there a different way you would approach a “raise the curtain” effect like this? Let me know in the comments!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-raise-the-curtains-effect/\">How to Make a “Raise the Curtains” Effect in CSS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/css-raise-the-curtains-effect/feed/</wfw:commentRss>\n\t\t\t<slash:comments>2</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">363882</post-id>\t</item>\n\t\t<item>\n\t\t<title>CSS Custom Highlight API: The Future of Highlighting Text Ranges on the Web</title>\n\t\t<link>https://css-tricks.com/css-custom-highlight-api-early-loo/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/css-custom-highlight-api-early-loo/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Patrick Brosset]]></dc:creator>\n\t\t<pubDate>Tue, 01 Mar 2022 17:41:13 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[::selection]]></category>\n\t\t<category><![CDATA[custom highlight api]]></category>\n\t\t<category><![CDATA[selecting text]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=363724</guid>\n\n\t\t\t\t\t<description><![CDATA[<p><strong>Styling ranges of text</strong> in software is a very useful thing to be able to do. Thankfully, we have the CSS Custom Highlight API to look forward to because it represents the future of styling text ranges on the web.&#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-custom-highlight-api-early-loo/\">CSS Custom Highlight API: The Future of Highlighting Text Ranges on the Web</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p><strong>Styling ranges of text</strong> in software is a very useful thing to be able to do. Thankfully, we have the CSS Custom Highlight API to look forward to because it represents the future of styling text ranges on the web.</p>\n\n\n\n<span id=\"more-363724\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"800\" height=\"733\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1644484463021_highlight-api-demo-no-text-deco.gif?resize=800%2C733&#038;ssl=1\" alt=\"Animation screenshot of the CSS Custom Highlight API demo.\" class=\"wp-image-363729\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>One example: if you’ve ever used text editing software like Google Docs, Word, or Dropbox Paper, you’ll see they detect spelling and grammar errors and displaying nice little squiggly underlines below them to attract attention. Code editors like VS Code do the same for code errors.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"977\" height=\"269\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042116795_image.png?resize=977%2C269&#038;ssl=1\" alt=\"\" class=\"wp-image-363725\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042116795_image.png?w=977&amp;ssl=1 977w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042116795_image.png?resize=300%2C83&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042116795_image.png?resize=768%2C211&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Another very common use case for highlighting text is <strong>search and highlight</strong>, where you’re given a text input box and typing in it searches matching results on the page, and highlights them. Try pressing <code>Ctrl</code>/<code>⌘</code>+ <code>F</code> in your web browser right now and type in some text from this article.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1117\" height=\"951\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042176497_image.png?resize=1117%2C951&#038;ssl=1\" alt=\"\" class=\"wp-image-363726\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042176497_image.png?w=1117&amp;ssl=1 1117w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042176497_image.png?resize=300%2C255&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042176497_image.png?resize=1024%2C872&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042176497_image.png?resize=768%2C654&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643042176497_image.png?resize=1000%2C851&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The browser itself often handles these styling situations. Editable areas (like a <code>&lt;textarea&gt;</code>) get spelling squiggles automatically. The find command highlights found text automatically.</p>\n\n\n\n<p>But what about when we want to do this type of styling ourselves? Doing this on the web has been a common problem for a long time. It has probably costed many people a lot more time than it should have.</p>\n\n\n\n<p>This isn’t a simple problem to solve. We aren’t just wrapping text in a <code>&lt;span&gt;</code> with a class and applying some CSS. Indeed, this requires being able to correctly highlight <em>multiple</em> ranges of text across an arbitrarily complex DOM tree, and possibly crossing the boundaries of DOM elements.</p>\n\n\n\n<p>There are two common solutions to this, including:</p>\n\n\n\n<ol><li>styling text range pseudo-elements, and</li><li>creating your own text highlighting system.</li></ol>\n\n\n\n<p>We’ll review them first and then take a look at&nbsp;the&nbsp;upcoming&nbsp;CSS Custom Highlight API&nbsp;that can change it all. but if you&#8217;re </p>\n\n\n<h3 id=\"potential-solution-1-styleable-text-ranges\">Potential Solution #1: Style-able Text Ranges</h3>\n\n\n<p>Probably the most well-known style-able text range is the user selection. When you use your pointing device to select a piece of text in a web page, a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Selection\" rel=\"noopener\"><code>Selection</code></a> object is automatically created. In fact, try selecting text on this page right now, and then run <code>document.getSelection()</code> in the DevTools console. You should see location information about the selected text.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1846\" height=\"1196\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?resize=1846%2C1196&#038;ssl=1\" alt=\"DevTools window showing the position of the current selection in the console.\" class=\"wp-image-363727\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?w=1846&amp;ssl=1 1846w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?resize=300%2C194&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?resize=1024%2C663&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?resize=768%2C498&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?resize=1536%2C995&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-14-at-7.33.16-AM.png?resize=1000%2C648&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It turns out that you can also create a text selection programmatically from JavaScript. Here is an example:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// First, create a Range object.\nconst range = new Range();\n\n// And set its start and end positions.\nrange.setStart(parentNode, startOffset);\nrange.setEnd(parentNode, endOffset);\n\n// Then, set the current selection to this range.\ndocument.getSelection().removeAllRanges();\ndocument.getSelection().addRange(range);</code></pre>\n\n\n\n<p>The last piece of the puzzle is to style this range. CSS has a pseudo-element called <a href=\"https://css-tricks.com/almanac/selectors/s/selection/\"><code>::selection</code></a> to do just that, and it’s supported across <a href=\"https://caniuse.com/css-selection\" rel=\"noopener\">all browsers</a>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">::selection {\n  background-color: #f06;\n  color: white;\n}</code></pre>\n\n\n\n<p>Here is an example using this technique to highlight all words in a page one after the other:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYeYJBx\" src=\"//codepen.io/anon/embed/eYeYJBx?height=450&amp;theme-id=1&amp;slug-hash=eYeYJBx&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYeYJBx\" title=\"CodePen Embed eYeYJBx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>On top of the <code>::selection</code> pseudo-element, there are a number of other pseudo-elements:</p>\n\n\n\n<ul><li><code>::target-text</code> selects the text that has been scrolled to in browsers that support the <a href=\"https://wicg.github.io/scroll-to-text-fragment/\" rel=\"noopener\">scroll-to-text</a> feature. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::target-text\" rel=\"noopener\">MDN</a>)</li><li><code>::spelling-error</code> selects text that is flagged by the browser as containing a spelling error. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::spelling-error\" rel=\"noopener\">MDN</a>)</li><li><code>::grammar-error</code> selects text that is flagged by the browser as containing a grammar error. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::grammar-error\" rel=\"noopener\">MDN</a>)</li></ul>\n\n\n\n<p>Unfortunately browser support isn’t great here and although these ranges are useful in each of their own right, they can’t be used to style custom pieces of text — only browser-predefined ones</p>\n\n\n\n<p>So the user text selection is nice because it’s relatively simple to put in place and doesn’t change the DOM of the page. Indeed, <code>Range</code> objects are essentially coordinates of segments in the page, rather than HTML elements that need to be created to exist.</p>\n\n\n\n<p>One major drawback, however, is that creating a selection resets whatever the user has already manually selected. Try selecting text in the demo above to test this. You’ll see how it goes away as soon as the code moves the selection somewhere else.</p>\n\n\n<h3 id=\"potential-solution-2-custom-highlighting-system\">Potential Solution #2: Custom Highlighting System</h3>\n\n\n<p>This second solution is pretty much the only thing you can do if using the <code>Selection</code> object is insufficient for you. This solution revolves around doing everything yourself, using JavaScript to insert new HTML elements in the DOM where you want the highlighting to appear.</p>\n\n\n\n<p>Unfortunately, this means way more JavaScript to write and maintain, not to mention it forces the browser to re-create the layout of the page whenever the highlighting changes. Plus, there are complicated edge cases, for example, when you want to highlight a piece of text that spans across multiple DOM elements.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1129\" height=\"100\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643109885151_image.png?resize=1129%2C100&#038;ssl=1\" alt=\"Illustration showing a line of HTML with an emphasis element and a strong element with a bright yellow highlight running through them.\" class=\"wp-image-363728\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643109885151_image.png?w=1129&amp;ssl=1 1129w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643109885151_image.png?resize=300%2C27&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643109885151_image.png?resize=1024%2C91&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643109885151_image.png?resize=768%2C68&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_8E0FC85C45E73C25EFCF623C768360F2F95DBDDEC338D5F6DE316BB0830F6F67_1643109885151_image.png?resize=1000%2C89&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Interestingly, <a href=\"https://codemirror.net\" rel=\"noopener\">CodeMirror</a> and <a href=\"https://microsoft.github.io/monaco-editor/\" rel=\"noopener\">Monaco</a> (the JavaScript text editor library that powers VS Code) have their own highlighting logic. They use a slightly different approach where the highlights are contained in a separate part of the DOM tree. The lines of text and the highlighted segments are rendered in two different places in the DOM which are then positioned over each other. If you inspect the DOM sub-tree that contains the text, there are no highlights. This way, the highlights can be re-rendered without impacting the lines of text and having to introduce new elements within them.</p>\n\n\n\n<p>Overall, it feels like a browser-powered highlighting feature is missing. Something that would help solve all of these drawbacks (no interference with user text selection, multi-selection support, simple code) and be faster than custom-made solutions.</p>\n\n\n\n<p>Fortunately, that’s what we’re here to talk about!</p>\n\n\n<h3 id=\"enter-the-css-custom-highlight-api\">Enter the CSS Custom Highlight API</h3>\n\n\n<p>The <a href=\"https://www.w3.org/TR/css-highlight-api-1/\" rel=\"noopener\">CSS Custom Highlight API</a> is a new W3C specification (currently in Working Draft status) that makes it possible to style arbitrary text ranges from JavaScript! The approach here is very similar to the user text selection technique we reviewed earlier. It gives developers a way to create arbitrary ranges, from JavaScript, and then style them using CSS.</p>\n\n\n<h4 id=\"creating-ranges-of-text\">Creating Ranges of Text</h4>\n\n\n<p>The first step is to create the ranges of text that you want to highlight. which can be done using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Range\" rel=\"noopener\"><code>Range</code></a> in JavaScript. So, like we did when setting the current selection:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const range = new Range();\nrange.setStart(parentNode, startOffset);\nrange.setEnd(parentNode, endOffset);</code></pre>\n\n\n\n<p>It’s worth noting that the <code>setStart</code> and <code>setEnd</code> methods work differently if the node passed as the first argument is a text node or not. For text nodes, the offset corresponds to the number of characters within the node. For other nodes, the offset corresponds to the number of child nodes within the parent node.</p>\n\n\n\n<p>Also worth noting is that <code>setStart</code> and <code>setEnd</code> aren’t the only ways to describe where a range starts and ends. Take a look at the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Range#methods\" rel=\"noopener\">other methods</a> available on the <code>Range</code> class to see other options.</p>\n\n\n<h4 id=\"creating-highlights\">Creating Highlights</h4>\n\n\n<p>The second step consists in creating <a href=\"https://www.w3.org/TR/css-highlight-api-1/#highlight\" rel=\"noopener\"><code>Highlight</code></a> objects for the ranges created in that last step. A <code>Highlight</code> object can receive one or more <code>Range</code>s. So if you want to highlight a bunch of pieces of text in exactly the same way, you should probably create a single <code>Highlight</code> object and initialize it with all of the <code>Range</code>s that correspond to these pieces of text.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const highlight = new Highlight(range1, range2, ..., rangeN);</code></pre>\n\n\n\n<p>But you can also create as many <code>Highlight</code> objects as you need. For example, if you are building a collaborative text editor where each user gets a different text color, then you can create one <code>Highlight</code> object per user. Each object can then be styled differently, as we’ll see next.</p>\n\n\n<h4 id=\"registering-highlights\">Registering Highlights</h4>\n\n\n<p>Now Highlight objects on their own don’t do anything. They first need to be registered in what is called the highlight registry. This is done by using the <a href=\"https://www.w3.org/TR/css-highlight-api-1/#highlight-registry\" rel=\"noopener\">CSS Highlights API</a>. The registry works like a map where you can register new highlights by giving them names, as well as remove highlights (or even clear the entire registry).</p>\n\n\n\n<p>Here is how to register a single highlight.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">CSS.highlights.set('my-custom-highlight', highlight);</code></pre>\n\n\n\n<p>Where <code>my-custom-highlight</code> is the name of your choosing and <code>highlight</code> is a <code>Highlight</code> object created in the last step.</p>\n\n\n<h4 id=\"styling-highlights\">Styling Highlights</h4>\n\n\n<p>The final step is to actually style the registered highlights. This is done with the new CSS <a href=\"https://www.w3.org/TR/css-highlight-api-1/#custom-highlight-pseudo\" rel=\"noopener\"><code>::highlight()</code></a> pseudo-element, using the name you chose when registering the <code>Highlight</code> object (which is <code>my-custom-highlight</code> in our example above).</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">::highlight(my-custom-highlight) {\n  background-color: yellow;\n  color: black;\n}</code></pre>\n\n\n\n<p>It’s worth noting that, just like <code>::selection</code>, a subset of CSS properties only can be used with the <code>::highlight()</code> pseudo-element:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/almanac/properties/b/background-color/\"><code>background-color</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/c/caret-color/\"><code>caret-color</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/c/color/\"><code>color</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/c/cursor/\"><code>cursor</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/f/fill/\"><code>fill</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/s/stroke/\"><code>stroke</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/s/stroke-width/\"><code>stroke-width</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/t/text-decoration/\"><code>text-decoration</code></a> (which will likely only be supported in the version 2 of the specification)</li><li><a href=\"https://css-tricks.com/almanac/properties/t/text-shadow/\"><code>text-shadow</code></a></li></ul>\n\n\n<h4 id=\"updating-highlights\">Updating Highlights</h4>\n\n\n<p>There are multiple ways to update highlighted text on the page.</p>\n\n\n\n<p>For example, you can clear the highlight registry altogether with <code>CSS.highlights.clear()</code> and then start again from the beginning. Or, you can also update the underlying ranges without having to re-create any of the objects all. For this, use the <code>range.setStart</code> and <code>range.setEnd</code> methods again (or any of the other <code>Range</code> methods) and the highlights will be re-painted by the browser.</p>\n\n\n\n<p>But, the <code>Highlight</code> object works like a JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" rel=\"noopener\"><code>Set</code></a>, so this means you also add new <code>Range</code> objects to an existing <code>Highlight</code> with <code>highlight.add(newRange)</code> or remove a <code>Range</code> with <code>highlight.delete(existingRange)</code>.</p>\n\n\n\n<p>Third, you can also add or remove specific <code>Highlight</code> objects from the <code>CSS.highlights</code> registry. Since this API works like a JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" rel=\"noopener\"><code>Map</code></a>, you can <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\" rel=\"noopener\"><code>set</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\" rel=\"noopener\"><code>delete</code></a> to update the currently registered <code>Highlight</code>s.</p>\n\n\n<h4 id=\"browser-support\">Browser Support</h4>\n\n\n<p>The specification for the CSS Custom Highlight API is relatively new and its implementation in browsers is still incomplete. So, although this is going to be a very useful addition to the web platform, it’s not quite ready for production use.</p>\n\n\n\n<p>The Microsoft Edge team is implementing the CSS Custom Highlight API in Chromium at the moment. In fact, the feature can already be used in Canary versions right now by enabling the Experimental Web Platform features flag (under <code>about:flags</code>). There is currently no firm plan as to when the feature will ship in Chrome, Edge, and other Chromium-based browsers, but it’s getting very close.</p>\n\n\n\n<p>The API is also supported in <a href=\"https://developer.apple.com/safari/technology-preview/release-notes/#r99\" rel=\"noopener\">Safari 99+</a> but behind an experiment flag (Develop → Experimental Features → Highlight API), and the interface is a little bit different in that it uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/StaticRange\" rel=\"noopener\"><code>StaticRange</code></a> objects instead.</p>\n\n\n\n<p>Firefox does not support the API yet, though you can <a href=\"https://github.com/mozilla/standards-positions/issues/482\" rel=\"noopener\">read Mozilla’s position about it</a> for more information.</p>\n\n\n<h3 id=\"demo\">Demo</h3>\n\n\n<p>Speaking of Microsoft Edge, they have a demo set up where you can take the CSS Custom Highlight API for a test drive. But Before trying the demo, be sure you’re using either Chrome or Edge Canary with the Experimental Web Platform features flag in the <code>about:flags</code> page.</p>\n\n\n\n<p>/button <a href=\"https://microsoftedge.github.io/Demos/custom-highlight-api/\" rel=\"noopener\">View the demo</a></p>\n\n\n\n<p>The demo uses the Custom Highlight API to highlight ranges of text in the page based on what you type in the search field at the top of the page.</p>\n\n\n\n<p>After the page loads, JavaScript code retrieves all the text nodes in the page (using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\" rel=\"noopener\">TreeWalker</a>) and when the user types in the search field, the code iterates over these nodes until it finds matches. Those matches are then used to create <code>Range</code> objects, which are then highlighted with the Custom Highlight API.</p>\n\n\n<h3 id=\"closing-thoughts\">Closing Thoughts</h3>\n\n\n<p>So, is this new browser-provided highlighting API really worth it? Totally!</p>\n\n\n\n<p>For one, even if the CSS Custom Highlight API may seem a bit complicated at first (i.e. having to create ranges, then highlights, then registering them, and finally styling them), it’s still way simpler than having to create new DOM elements and insert them in the right places.</p>\n\n\n\n<p>More importantly, browser engines can style these ranges very, very fast.</p>\n\n\n\n<p>The reason only a subset of CSS properties is allowed to be used with the <code>::highlight()</code> pseudo-element is that the subset only contains properties that can be applied by the browser very effectively without having to recreate the layout of the page. Highlighting ranges of text by inserting new DOM elements in the page around them requires the engine to do much more work.</p>\n\n\n\n<p>But don’t take my word for it. <a href=\"https://github.com/ffiori\" rel=\"noopener\">Fernando Fiori</a>, who worked on the API, created this nice <a href=\"https://ffiori.github.io/highlight-api-demos/demo-performance.html\" rel=\"noopener\">performance comparison demo</a>. On my computer, the CSS Custom Highlight API performs on average 5✕ as fast as the DOM-based highlighting.</p>\n\n\n\n<p>With Chromium and Safari experimental support already here, we’re getting close to something that can be used in production. I can’t wait for browsers to support the Custom Highlight API consistently and see what features this will unlock!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-custom-highlight-api-early-loo/\">CSS Custom Highlight API: The Future of Highlighting Text Ranges on the Web</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/css-custom-highlight-api-early-loo/feed/</wfw:commentRss>\n\t\t\t<slash:comments>3</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">363724</post-id>\t</item>\n\t\t<item>\n\t\t<title>Ahmad Shadeed: Use Cases For CSS fit-content</title>\n\t\t<link>https://css-tricks.com/ahmad-shadeed-use-cases-for-css-fit-content/</link>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Tue, 01 Mar 2022 15:41:16 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Link]]></category>\n\t\t<category><![CDATA[fit-content]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=364351</guid>\n\n\t\t\t\t\t<description><![CDATA[<p><a href=\"https://ishadeed.com/snippet/fit-content/\" rel=\"noopener\">Ahmad Shadeed covers</a> the CSS <code>fit-content</code> sizing keyword. It&#8217;s useful! It just doesn&#8217;t come up <em>super</em> often. I find myself using <code>min-content</code> a lot more, like when setting up the height of a <code>grid-template-row</code>.</p>\n<p>The <code>fit-content</code> keyword is actually &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/ahmad-shadeed-use-cases-for-css-fit-content/\">Ahmad Shadeed: Use Cases For CSS fit-content</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p><a href=\"https://ishadeed.com/snippet/fit-content/\" rel=\"noopener\">Ahmad Shadeed covers</a> the CSS <code>fit-content</code> sizing keyword. It&#8217;s useful! It just doesn&#8217;t come up <em>super</em> often. I find myself using <code>min-content</code> a lot more, like when setting up the height of a <code>grid-template-row</code>.</p>\n\n\n\n<p>The <code>fit-content</code> keyword is actually closely related to <code>min-content</code> and <code>max-content</code> — it just has a little heuristic it follows that Ahmad nicely illustrates as a flow chart.</p>\n\n\n\n<span id=\"more-364351\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1340\" height=\"1158\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/fit-content.png?resize=1340%2C1158&#038;ssl=1\" alt=\"Ahmad Shadeed's flow chat illustrating the way browsers handle the CSS fit-content keyword.\" class=\"wp-image-364363\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/fit-content.png?w=1340&amp;ssl=1 1340w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/fit-content.png?resize=300%2C259&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/fit-content.png?resize=1024%2C885&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/fit-content.png?resize=768%2C664&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/fit-content.png?resize=1000%2C864&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><a href=\"https://ishadeed.com/snippet/fit-content/\" rel=\"noopener\">&#8220;Use Cases For CSS fit-content&#8221;</a> by Ahmad Shadeed</figcaption></figure>\n\n\n\n<p>My favorite use case is covered here: sizing a <code>&lt;figure&gt;</code> with <code>fit-content</code>, so that it neatly wraps around the <code>&lt;img&gt;</code>. That way, even if the image doesn&#8217;t fill the parent space, and it can remain block-level.</p>\n\n\n\n<p>We also covered <a href=\"https://css-tricks.com/fit-content-and-fit-content/\">PPK&#8217;s deep dive on <code>fit-content</code></a> last year. One of the key takeaways for understanding it is knowing that is it essentially a shorthand way of writing:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.box {\n  width: fit-content;\n\n  /* ... is the same as ... */\n  width: auto;\n  min-width: min-content;\n  max-width: max-content;\n}</code></pre>\n<p><a href=\"https://ishadeed.com/snippet/fit-content/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/ahmad-shadeed-use-cases-for-css-fit-content/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/ahmad-shadeed-use-cases-for-css-fit-content/\">Ahmad Shadeed: Use Cases For CSS fit-content</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">364351</post-id>\t</item>\n\t\t<item>\n\t\t<title>IE Down, Edge Up&#8230; Global Browser Usage Stats Are for Cocktail Parties and Conference Slides</title>\n\t\t<link>https://css-tricks.com/ie-down-edge-up-global-browser-usage-stats-are-for-cocktail-parties-and-conference-slides/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/ie-down-edge-up-global-browser-usage-stats-are-for-cocktail-parties-and-conference-slides/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Mon, 28 Feb 2022 23:14:29 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[browser]]></category>\n\t\t<category><![CDATA[edge]]></category>\n\t\t<category><![CDATA[internet explorer]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=364346</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>I enjoy articles like Hartley Charlton&#8217;s <a href=\"https://www.macrumors.com/2022/02/22/microsoft-edge-to-overtake-safari/\" rel=\"noopener\">&#8220;Microsoft Edge Looks Set to Overtake Safari as World&#8217;s Second Most Popular Desktop Browser.&#8221;</a> It&#8217;s juicy! We know these massive players in the browser market care very much about their market share, so when &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/ie-down-edge-up-global-browser-usage-stats-are-for-cocktail-parties-and-conference-slides/\">IE Down, Edge Up&#8230; Global Browser Usage Stats Are for Cocktail Parties and Conference Slides</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>I enjoy articles like Hartley Charlton&#8217;s <a href=\"https://www.macrumors.com/2022/02/22/microsoft-edge-to-overtake-safari/\" rel=\"noopener\">&#8220;Microsoft Edge Looks Set to Overtake Safari as World&#8217;s Second Most Popular Desktop Browser.&#8221;</a> It&#8217;s juicy! We know these massive players in the browser market care very much about their market share, so when one passes another it&#8217;s news. Like an Olympic speed skater favored for the gold getting a bronze instead, or the like.</p>\n\n\n\n<span id=\"more-364346\"></span>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Microsoft Edge is now used on 9.54 percent of desktops worldwide, a mere 0.3 percent behind Apple&#8217;s Safari, which stands at 9.84 percent. Google Chrome continues to hold first place with an overwhelming 65.38 percent of the market. Mozilla Firefox takes fourth place with 9.18 percent.</p><p>In January 2021, Safari held a 10.38 percent market share and appears to be gradually losing users to rival browsers over time. If the trend continues, Apple is likely to slip to third or fourth place in the near future.</p></blockquote>\n\n\n\n<p>Scoping the data down even by continent is entirely different. Like in Europe, Edge has already passed Safari, but in North America, the gap is still 5%. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"927\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?resize=1600%2C927&#038;ssl=1\" alt=\"\" class=\"wp-image-364378\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?resize=300%2C174&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?resize=1024%2C593&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?resize=768%2C445&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?resize=1536%2C890&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/safari-market-share-statcounter.jpg?resize=1000%2C579&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Source:<a href=\"https://www.macrumors.com/2022/02/22/microsoft-edge-to-overtake-safari/\" rel=\"noopener\"> MacRumors.com</a></figcaption></figure>\n\n\n\n<p>What does it matter to <em>you or me</em>? Nothing, I hope. These global stats <em>should</em> mean very little to us, outside a little casual nerdy cocktail party chatter. Please don&#8217;t make decisions about what to support and not support based on global statistics. Put some kind of basic analytics in place on your site, get data from actual visits, and make choices on <em>that</em> data. That&#8217;s the only data that matters.</p>\n\n\n\n<p>Alan Dávalos&#8217; <a href=\"https://engineering.linecorp.com/en/blog/the-baseline-for-web-development-in-2022/\" rel=\"noopener\">&#8220;The baseline for web development in 2022&#8221;</a> paints a picture of what we should be supporting based again on global browser usage statistics. </p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Globally, IE’s current market share is under 0.5%. And even in Japan, which has a higher market share of IE compared to other countries, IE’s market share is close to 2% and has a downward tendency.<br><br>Until now we kept supporting IE due to its market share. But now, there are basically no good reasons to keep supporting IE.</p></blockquote>\n\n\n\n<p>Again it seems so bizarre to me that any of us would make a choice on what to support based on a global usage statistic. Even when huge players make choices, they do it based on their own data. When Google &#8220;dropped&#8221; IE 11 (they still serve a perfectly fine baseline experience), they <a href=\"https://twitter.com/cramforce/status/1443962459723755533\" rel=\"noopener\">&#8220;did the math.&#8221;</a> WordPress, famously powering somewhere in the &#8220;a third of the whole internet&#8221; range, <a href=\"https://make.wordpress.org/core/2021/03/04/discussion-dropping-support-for-ie11/\" rel=\"noopener\">factored in usage of their own product</a>.</p>\n\n\n\n<p>Even if you&#8217;re building a brand new product and trying to make these choices, you&#8217;ll have analytic data soon enough, and can make future-facing support choices based on that as it rolls in.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/ie-down-edge-up-global-browser-usage-stats-are-for-cocktail-parties-and-conference-slides/\">IE Down, Edge Up&#8230; Global Browser Usage Stats Are for Cocktail Parties and Conference Slides</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/ie-down-edge-up-global-browser-usage-stats-are-for-cocktail-parties-and-conference-slides/feed/</wfw:commentRss>\n\t\t\t<slash:comments>3</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">364346</post-id>\t</item>\n\t\t<item>\n\t\t<title>Web Component Pseudo-Classes and Pseudo-Elements are Easier Than You Think</title>\n\t\t<link>https://css-tricks.com/web-component-pseudo-classes-and-pseudo-elements/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/web-component-pseudo-classes-and-pseudo-elements/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[John Rhea]]></dc:creator>\n\t\t<pubDate>Mon, 28 Feb 2022 15:37:23 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[::part]]></category>\n\t\t<category><![CDATA[::slotted]]></category>\n\t\t<category><![CDATA[:host]]></category>\n\t\t<category><![CDATA[web components]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=363929</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>We’ve discussed a lot about the internals of using CSS in this <a href=\"https://css-tricks.com/web-components-are-easier-than-you-think/\">ongoing series on web components</a>, but there are a few special pseudo-elements and pseudo-classes that, like good friends, willingly smell your possibly halitotic breath before you go &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/web-component-pseudo-classes-and-pseudo-elements/\">Web Component Pseudo-Classes and Pseudo-Elements are Easier Than You Think</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>We’ve discussed a lot about the internals of using CSS in this <a href=\"https://css-tricks.com/web-components-are-easier-than-you-think/\">ongoing series on web components</a>, but there are a few special pseudo-elements and pseudo-classes that, like good friends, willingly smell your possibly halitotic breath before you go talk to that potential love interest. You know, they help you out when you need it most. And, like a good friend will hand you a breath mint, these pseudo-elements and pseudo-classes provide you with some solutions both from <em>within</em> the web component and from <em>outside</em> the web component — the website where the web component lives.</p>\n\n\n\n<p>I’m specifically referring to the <code>::part</code> and <code>::slotted</code> pseudo-elements, and the <code>:defined</code>, <code>:host</code>, and <code>:host-context</code> pseudo-classes. They give us extra ways to interact with web components. Let&#8217;s examine them closer.</p>\n\n\n\n<span id=\"more-363929\"></span>\n\n\n<h3 id=\"article-series\">Article series</h3>\n\n\n<ul class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/web-components-are-easier-than-you-think/\">Web Components Are Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/interactive-web-components-are-easier-than-you-think/\">Interactive Web Components Are Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/using-web-components-in-wordpress-is-easier-than-you-think/\">Using Web Components in WordPress is Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/supercharging-built-in-elements-with-web-components-is-easier-than-you-think/\">Supercharging Built-In Elements With Web Components &#8220;is&#8221; Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/context-aware-web-components\">Context-Aware Web Components Are Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/web-component-pseudo-classes-and-pseudo-elements\">Web Component Pseudo-Classes and Pseudo-Elements are Easier Than You Think</a> <em>(You are here)</em></li></ul>\n\n\n<h3 id=\"the-part-pseudoelement\">The <code>::part</code> pseudo-element</h3>\n\n\n<p><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::part\" rel=\"noopener\">::part</a></code>, in short, allows you to pierce the shadow tree, which is just my Lord-of-the-Rings-y way to say it lets you style elements <em>inside</em> the shadow DOM from <em>outside</em> the shadow DOM. In theory, you should encapsulate all of your styles for the shadow DOM within the shadow DOM, i.e. within a <code>&lt;style&gt;</code> element in your <code>&lt;template&gt;</code> element.</p>\n\n\n\n<p>So, given something like this from the very <a href=\"https://css-tricks.com/web-components-are-easier-than-you-think/\">first part of this series</a>, where you have an <code>&lt;h2&gt;</code> in your <code>&lt;template&gt;</code>, your styles for that <code>&lt;h2&gt;</code> should all be in the <code>&lt;style&gt;</code> element.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template id=\"zprofiletemplate\">\n  &lt;style>\n    h2 {\n      font-size: 3em;\n      margin: 0 0 0.25em 0;\n      line-height: 0.8;\n    }\n    /* other styles */\n  &lt;/style>\n  &lt;div class=\"profile-wrapper\">\n    &lt;div class=\"info\">\n      &lt;h2>\n        &lt;slot name=\"zombie-name\">Zombie Bob&lt;/slot>\n      &lt;/h2>\n      &lt;!-- other zombie profile info -->\n    &lt;/div>\n&lt;/template></code></pre>\n\n\n\n<p>But sometimes we might need to style an element in the shadow DOM based on information that exists on the page. For instance, let&#8217;s say we have a page for each zombie in the undying love system with matches. We could add a class to profiles based on how close of a match they are. We could then, for instance, highlight a match’s name if he/she/it is a good match. The closeness of a match would vary based on whose list of potential matches is being shown and we won’t know that information until we’re on that page, so we can’t bake the functionality into the web component. Since the <code>&lt;h2&gt;</code> is in the shadow DOM, though, we can’t access or style it from outside the shadow DOM meaning a selector of <code>zombie-profile h2</code> on the matches page won’t work.</p>\n\n\n\n<p>But, if we make a slight adjustment to the <code>&lt;template&gt;</code> markup by adding a <code>part</code> attribute to the <code>&lt;h2&gt;</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template id=\"zprofiletemplate\">\n  &lt;style>\n    h2 {\n      font-size: 3em;\n      margin: 0 0 0.25em 0;\n      line-height: 0.8;\n    }\n    /* other styles */\n  &lt;/style>\n  &lt;div class=\"profile-wrapper\">\n    &lt;div class=\"info\">\n      &lt;h2 part=\"zname\">\n        &lt;slot name=\"zombie-name\">Zombie Bob&lt;/slot>\n      &lt;/h2>\n      &lt;!-- other zombie profile info -->\n    &lt;/div>\n&lt;/template></code></pre>\n\n\n\n<p>Like a spray of Bianca in the mouth, we now have the superpowers to break through the shadow DOM barrier and style those elements from <em>outside</em> of the <code>&lt;template&gt;</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* External stylesheet */\n.high-match::part(zname) {\n  color: blue;\n}\n.medium-match::part(zname) {\n  color: navy;\n}\n.low-match::part(zname) {\n  color: slategray;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_dyVaqWL\" src=\"//codepen.io/anon/embed/dyVaqWL?height=450&amp;theme-id=1&amp;slug-hash=dyVaqWL&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed dyVaqWL\" title=\"CodePen Embed dyVaqWL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>There are lots of things to consider when it comes to using CSS <code>::part</code>. For example, styling an element inside of a part is a no-go:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* frowny-face emoji */\n.high-match::part(zname) span { ... }</code></pre>\n\n\n\n<p>But you can add a <code>part</code> attribute on that element and style it via its own part name.</p>\n\n\n\n<p>What happens if we have a web component inside another web component, though? Will <code>::part</code> still work? If the web component appears in the page’s markup, i.e. you’re slotting it in, <code>::part</code> works just fine from the main page’s CSS.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;zombie-profile class=\"high-match\">\n  &lt;img slot=\"profile-image\" src=\"https://assets.codepen.io/1804713/leroy.png\" />\n  &lt;span slot=\"zombie-name\">Leroy&lt;/span>\n  &lt;zombie-details slot=\"zdetails\">\n    &lt;!-- Leroy's details -->\n  &lt;/zombie-details>\n&lt;/zombie-profile></code></pre>\n\n\n\n<p>But if the web component is in the template/shadow DOM, then <code>::part</code> cannot pierce both shadow trees, just the first one. We need to bring the <code>::part</code> into the light… so to speak. We can do that with an <code>exportparts</code> attribute.</p>\n\n\n\n<p>To demonstrate this we’ll add a “watermark” behind the profiles using a web component. (Why? Believe it or not this was the least contrived example I could come up with.) Here are our templates: (1) the template for <code>&lt;zombie-watermark&gt;</code>, and (2) the same template for <code>&lt;zombie-profile&gt;</code> but with added a <code>&lt;zombie-watermark&gt;</code> element on the end.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template id=\"zwatermarktemplate\">\n  &lt;style>\n    div {\n    text-transform: uppercase;\n      font-size: 2.1em;\n      color: rgb(0 0 0 / 0.1);\n      line-height: 0.75;\n      letter-spacing: -5px;\n    }\n    span {\n      color: rgb( 255 0 0 / 0.15);\n    }\n  &lt;/style>\n  &lt;div part=\"watermark\">\n    U n d y i n g  L o v e  U n d y i n g  L o v e  U n d y i n g  L o v e  &lt;span part=\"copyright\">&copy;2 0 2 7 U n d y i n g  L o v e  U n L t d .&lt;/span>\n  &lt;!-- Repeat this a bunch of times so we can cover the background of the profile -->\n  &lt;/div> \n&lt;/template>\n&lt;template id=\"zprofiletemplate\">\n  &lt;style>\n    ::part(watermark) {\n      color: rgb( 0 0 255 / 0.1);\n    }\n    /* More styles */\n  &lt;/style>\n  &lt;!-- zombie-profile markup -->\n  &lt;zombie-watermark exportparts=\"copyright\">&lt;/zombie-watermark>\n&lt;/template>\n&lt;style>\n  /* External styles */\n  ::part(copyright) {\n    color: rgb( 0 100 0 / 0.125);\n  }\n&lt;/style></code></pre>\n\n\n\n<p>Since <code>::part(watermark)</code> is only one shadow DOM above the <code>&lt;zombie-watermark&gt;</code>, it works fine from within the <code>&lt;zombie-profile&gt;</code>’s template styles. Also, since we’ve used <code>exportparts=\"copyright\"</code> on the <code>&lt;zombie-watermark&gt;</code>, the copyright part has been pushed up into the <code>&lt;zombie-profile&gt;</code>&#8216;s shadow DOM and <code>::part(copyright)</code> now works even in external styles, but <code>::part(watermark)</code> will not work outside the <code>&lt;zombie-profile&gt;</code>’s template.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GROmyLN\" src=\"//codepen.io/anon/embed/GROmyLN?height=450&amp;theme-id=1&amp;slug-hash=GROmyLN&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GROmyLN\" title=\"CodePen Embed GROmyLN\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We can also forward and <strong>rename parts</strong> with that attribute:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;zombie-watermark exportparts=\"copyright: cpyear\">&lt;/zombie-watermark></code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Within zombie-profile's shadow DOM */\n\n/* happy-face emoji */\n::part(cpyear) { ... }\n\n/* frowny-face emoji */\n::part(copyright) { ... }</code></pre>\n\n\n\n<p>Structural pseudo-classes (<code>:nth-child</code>, etc.) don’t work on parts either, but, at least in Safari, you can use pseudo-classes like <code>:hover</code>. Let’s animate the high match names a little and make them shake as they’re lookin’ for some lovin’. Okay, I heard that and agree it&#8217;s awkward. Let’s… uh… make them more, shall we say, noticeable, with a little movement.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.high::part(name):hover {\n  animation: highmatch 1s ease-in-out;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNGVLyE\" src=\"//codepen.io/anon/embed/oNGVLyE?height=450&amp;theme-id=1&amp;slug-hash=oNGVLyE&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNGVLyE\" title=\"CodePen Embed oNGVLyE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"the-slotted-pseudoelement\">The <code>::slotted</code> pseudo-element</h3>\n\n\n<p>The <code>::slotted</code> CSS pseudo-element actually came up when <a href=\"https://css-tricks.com/interactive-web-components-are-easier-than-you-think/\">we covered interactive web components</a>. The basic idea is that <code>::slotted</code> represents any content in a <code>slot</code> in a web component, i.e. the element that has the <code>slot</code> attribute on it. But, where <code>::part</code> pierces through the shadow DOM to make a web component’s elements accessible to outside styles, <code>::slotted</code> remains encapsulated in the <code>&lt;style&gt;</code> element in the component’s <code>&lt;template&gt;</code> and accesses the element that&#8217;s technically outside the shadow DOM.</p>\n\n\n\n<p>In our <code>&lt;zombie-profile&gt;</code> component, for example, each profile image is inserted into the element through the <code>slot=\"profile-image\"</code>.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;zombie-profile>\n  &lt;img slot=\"profile-image\" src=\"photo.jpg\" /> \n  &lt;!-- rest of the content -->\n&lt;/zombie-profile></code></pre>\n\n\n\n<p>That means we can access that image — as well as any image in any other slot — like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">::slotted(img) {\n  width: 100%;\n  max-width: 300px;\n  height: auto;\n  margin: 0 1em 0 0;\n}</code></pre>\n\n\n\n<p>Similarly, we could select <em>all</em> slots with <code>::slotted(*)</code> regardless of what element it is. Just beware that <code>::slotted</code> has to select an element — text nodes are immune to <code>::slotted</code> zombie styles. And children of the element in the slot are inaccessible.</p>\n\n\n<h3 id=\"the-defined-pseudoclass\">The <code>:defined</code> pseudo-class</h3>\n\n\n<p><code>:defined</code> matches all defined elements (I know, surprising, right?), both built-in and custom. If your custom element is shuffling along like a zombie avoiding his girlfriend’s dad’s questions about his “living” situation, you may not want the corpses of the content to show while you’re waiting for them to come back to life errr&#8230; load.</p>\n\n\n\n<p>You can use the <code>:defined</code> pseudo-class to hide a web component before it’s available — or “defined” — like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:not(:defined) {\n  display: none;\n}</code></pre>\n\n\n\n<p>You can see how <code>:defined</code> acts as a sort of mint in the mouth of our component styles, preventing any broken content from showing (or bad breath from leaking) while the page is still loading. Once the element’s defined, it’ll automatically appear because it&#8217;s now, you know, defined and not <em>not</em> defined.</p>\n\n\n\n<p>I added a <code>setTimeout</code> of five seconds to the web component in the following demo. That way, you can see that <code>&lt;zombie-profile&gt;</code> elements are not shown while they are undefined. The <code>&lt;h1&gt;</code> and the <code>&lt;div&gt;</code> that holds the <code>&lt;zombie-profile&gt;</code> components are still there. It’s just the <code>&lt;zombie-profile&gt;</code> web component that gets <code>display: none</code> since they are not yet defined.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNZmozy\" src=\"//codepen.io/anon/embed/WNZmozy?height=450&amp;theme-id=1&amp;slug-hash=WNZmozy&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNZmozy\" title=\"CodePen Embed WNZmozy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"the-host-pseudoclass\">The <code>:host</code> pseudo-class</h3>\n\n\n<p>Let’s say you want to make styling changes to the custom element itself. While you could do this from <em>outside</em> the custom element (like tightening that N95), the result would not be encapsulated, and additional CSS would have to be transferred to wherever this custom element is placed. </p>\n\n\n\n<p>It’d be very convenient then to have a pseudo-class that can reach <em>outside</em> the shadow DOM and select the shadow root. That CSS pseudo-class is <code>:host</code>.</p>\n\n\n\n<p>In previous examples throughout this series, I set the <code>&lt;zombie-profile&gt;</code> width from the main page’s CSS, like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">zombie-profile {\n  width: calc(50% - 1em);\n}</code></pre>\n\n\n\n<p>With <code>:host</code>, however, I can set that width from <em>inside</em> the web component, like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:host {\n  width: calc(50% - 1em);\n}</code></pre>\n\n\n\n<p>In fact, there was a div with a class of <code>.profile-wrapper</code> in my examples that I can now remove because I can use the shadow root as my wrapper with <code>:host</code>. That’s a nice way to slim down the markup.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwLObNP\" src=\"//codepen.io/anon/embed/RwLObNP?height=450&amp;theme-id=1&amp;slug-hash=RwLObNP&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwLObNP\" title=\"CodePen Embed RwLObNP\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>You can do descendant selectors from the <code>:host</code>, but only descendants inside the shadow DOM can be accessed — nothing that’s been slotted into your web component (without using <code>::slotted</code>).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"549\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=2560%2C549&#038;ssl=1\" alt=\"Showing the parts of the HTML that are relevant to the :host pseudo-element.\" class=\"wp-image-363930\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=300%2C64&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=1024%2C220&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=768%2C165&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=1536%2C329&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=2048%2C439&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/s_3F18A0CD3F6686952ADF5360C5603A8E3FDF98E048CFA91F2B2AE1FE647BF904_1643999519141_host-pseudo-dev-tools-scaled.jpg?resize=1000%2C214&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>That said, <code>:host</code> isn’t a one trick zombie. It can also take a parameter, e.g. a class selector, and will only apply styling if the class is present.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:host(.high) {\n  border: 2px solid blue;\n}</code></pre>\n\n\n\n<p>This allows you to make changes should certain classes be added to the custom element.</p>\n\n\n\n<p>You can also pass pseudo-classes in there, like <code>:host(:last-child)</code> and <code>:host(:hover)</code>.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYGoGmr\" src=\"//codepen.io/anon/embed/eYGoGmr?height=450&amp;theme-id=1&amp;slug-hash=eYGoGmr&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYGoGmr\" title=\"CodePen Embed eYGoGmr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"the-hostcontext-pseudoclass\">The <code>:host-context</code> pseudo-class</h3>\n\n\n<p>Now let’s talk about <code>:host-context</code>. It’s like our friend <code>:host()</code>, but on steroids. While <code>:host</code> gets you the shadow root, it won’t tell you anything about the context in which the custom element lives or its parent and ancestor elements.</p>\n\n\n\n<p><code>:host-context</code>, on the other hand, throws the inhibitions to the wind, allowing you to follow the DOM tree up the rainbow to the leprechaun in a leotard. Just note that at the time I’m writing this, <code>:host-context</code> is unsupported in Firefox or Safari. So use it for progressive enhancement.</p>\n\n\n\n<p>Here’s how it works. We’ll split our list of zombie profiles into two divs. The first div will have all of the high zombie matches with a <code>.bestmatch</code> class. The second div will hold all the medium and low love matches with a <code>.worstmatch</code> class.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"profiles bestmatch\">\n  &lt;zombie-profile class=\"high\">\n    &lt;!-- etc. -->\n  &lt;/zombie-profile>\n  &lt;!-- more profiles -->\n&lt;/div>\n\n&lt;div class=\"profiles worstmatch\">\n  &lt;zombie-profile class=\"medium\">\n    &lt;!-- etc. -->\n  &lt;/zombie-profile>\n  &lt;zombie-profile class=\"low\">\n    &lt;!-- etc. -->\n  &lt;/zombie-profile>\n  &lt;!-- more profiles -->\n&lt;/div></code></pre>\n\n\n\n<p>Let’s say we want to apply different background colors to the <code>.bestmatch</code> and <code>.worstmatch</code> classes. We are unable to do this with just <code>:host</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:host(.bestmatch) {\n  background-color: #eef;\n}\n:host(.worstmatch) {\n  background-color: #ddd;\n}</code></pre>\n\n\n\n<p>That’s because our best and worst match classes are not on our custom elements. What we want is to be able to select the profiles&#8217;s parent elements from within the shadow DOM. <code>:host-context</code> pokes past the custom element to <em>match</em> the, er, match classes we want to style.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:host-context(.bestmatch) {\n  background-color: #eef;\n}\n:host-context(.worstmatch) {\n  background-color: #ddd;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYEXbYg\" src=\"//codepen.io/anon/embed/zYEXbYg?height=450&amp;theme-id=1&amp;slug-hash=zYEXbYg&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYEXbYg\" title=\"CodePen Embed zYEXbYg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Well, thanks for hanging out despite all the bad breath. (I know you couldn&#8217;t tell, but above when I was talking about <em>your</em> breath, I was secretly talking about <em>my</em> breath.)</p>\n\n\n\n<p>How would you use <code>::part</code>, <code>::slotted</code>, <code>:defined</code>, <code>:host</code>, and <code>:host-context</code>  in your web component? Let me know in the comments. (Or if you have cures to chronic halitosis, my wife would be <em>very</em> interested in to hear more.)</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/web-component-pseudo-classes-and-pseudo-elements/\">Web Component Pseudo-Classes and Pseudo-Elements are Easier Than You Think</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/web-component-pseudo-classes-and-pseudo-elements/feed/</wfw:commentRss>\n\t\t\t<slash:comments>3</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">363929</post-id>\t</item>\n\t\t<item>\n\t\t<title>Trailing Slashes on URLs: Contentious or Settled?</title>\n\t\t<link>https://css-tricks.com/trailing-slashes-on-urls-contentious-or-settled/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/trailing-slashes-on-urls-contentious-or-settled/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Fri, 25 Feb 2022 21:13:08 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Link]]></category>\n\t\t<category><![CDATA[URL]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=364070</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>A fun deep dive from Zach. Do you have an opinion on which you should use?</p>\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">1) https://website.com/foo/\n2) https://websites.com/foo</code></pre>\n<p>The first option has a &#8220;trailing slash.&#8221; The second does not.</p>\n<p>I&#8217;ve always preferred this thinking: you use a trailing &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/trailing-slashes-on-urls-contentious-or-settled/\">Trailing Slashes on URLs: Contentious or Settled?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>A fun deep dive from Zach. Do you have an opinion on which you should use?</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">1) https://website.com/foo/\n2) https://websites.com/foo</code></pre>\n\n\n\n<p>The first option has a &#8220;trailing slash.&#8221; The second does not.</p>\n\n\n\n<p>I&#8217;ve always preferred this thinking: you use a trailing slash if that page has child pages (as in, it is something of a directory page, even if has unique content of its own). If it&#8217;s the end-of-the-line (of <em>content</em>), no trailing slash.</p>\n\n\n\n<span id=\"more-364070\"></span>\n\n\n\n<p>I say that, but this very site doesn&#8217;t practice it. Blog posts on this site are like <code>css-tricks.com/blog-post/</code> <em>with</em> a trailing slash and if you leave off the trailing slash, WordPress will redirect to include it. That&#8217;s part of the reason Zach is interested here. Redirects come with a performance penalty, so it&#8217;s ideal to have it happen as infrequently possible.</p>\n\n\n\n<p>Performance is one thing, but SEO is another one. If you render the same content, both with and without a trailing slash, that&#8217;s theoretically a duplicate content penalty and a no-no. (Although that seems weird to me, I would think Google would smart enough not to be terribly concerned by this.)</p>\n\n\n\n<p>Where resources resolve to seems like the biggest deal to me. Here&#8217;s Zach:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>If you’re using relative resource URLs, the assets may be missing on Vercel, Render, and Azure Static Web Apps (depending on which duplicated endpoint you’ve visited).</p><p><code>&lt;img src=\"image.avif\"&gt;</code>&nbsp;on&nbsp;<code>/resource/</code>&nbsp;resolves to&nbsp;<code>/resource/image.avif</code></p><p><code>&lt;img src=\"image.avif\"&gt;</code>&nbsp;on&nbsp;<code>/resource</code>&nbsp;resolves to&nbsp;<code>/image.avif</code></p></blockquote>\n\n\n\n<p>That&#8217;s a non-trivial difference and, to me, a reason the redirect is worth it. Can&#8217;t be having a page with broken resources for something this silly.</p>\n\n\n\n<p>What complicates this is that the site-building framework might have opinions about this <strong>and</strong> a hosting provider might have opinions about this. As Zach notes, there are some disagreements among hosts, so it&#8217;s something to watch for.</p>\n\n\n\n<p>Me, I&#8217;d go with the grain as much as I possibly could. As long as redirects are in place and I don&#8217;t have to override any config, I&#8217;m cool.</p>\n<p><a href=\"https://www.zachleat.com/web/trailing-slash/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/trailing-slashes-on-urls-contentious-or-settled/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/trailing-slashes-on-urls-contentious-or-settled/\">Trailing Slashes on URLs: Contentious or Settled?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/trailing-slashes-on-urls-contentious-or-settled/feed/</wfw:commentRss>\n\t\t\t<slash:comments>6</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">364070</post-id>\t</item>\n\t\t<item>\n\t\t<title>When to Avoid the text-decoration Shorthand Property</title>\n\t\t<link>https://css-tricks.com/when-to-avoid-css-text-decoration-shorthand/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/when-to-avoid-css-text-decoration-shorthand/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Šime Vidas]]></dc:creator>\n\t\t<pubDate>Fri, 25 Feb 2022 15:28:33 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[text-decoration]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=363619</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>In my recent article about <a href=\"https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/\">CSS underline bugs in Chrome</a>, I discussed <code>text-decoration-thickness</code> and <code>text-underline-offset</code>, two relatively new and widely-supported CSS properties that give us more control over the styling of underlines.</p>\n<p>Let me demonstrate the usefulness of &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/when-to-avoid-css-text-decoration-shorthand/\">When to Avoid the text-decoration Shorthand Property</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>In my recent article about <a href=\"https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/\">CSS underline bugs in Chrome</a>, I discussed <code>text-decoration-thickness</code> and <code>text-underline-offset</code>, two relatively new and widely-supported CSS properties that give us more control over the styling of underlines.</p>\n\n\n\n<p>Let me demonstrate the usefulness of <code>text-decoration-thickness</code> on a simple example. The <a href=\"https://fonts.google.com/specimen/Ubuntu\" rel=\"noopener\">Ubuntu web font</a> has a fairly thick default underline. We can make this underline thinner like so:</p>\n\n\n\n<span id=\"more-363619\"></span>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:any-link {\n  text-decoration-thickness: 0.08em;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1226\" height=\"652\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/ubuntu-font-underline-thickness.png?resize=1226%2C652&#038;ssl=1\" alt=\"Showing two links, a default and one that decreases the text-decoration-thickness.\" class=\"wp-image-363621\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/ubuntu-font-underline-thickness.png?w=1226&amp;ssl=1 1226w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/ubuntu-font-underline-thickness.png?resize=300%2C160&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/ubuntu-font-underline-thickness.png?resize=1024%2C545&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/ubuntu-font-underline-thickness.png?resize=768%2C408&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/ubuntu-font-underline-thickness.png?resize=1000%2C532&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>/explanation Throughout this article, I will use the <code>:any-link</code> selector instead of the <code>a</code> element to match hyperlinks. The problem with the <code>a</code> tag as a selector is that it matches all <code>&lt;a&gt;</code> elements, even the ones that don’t have a <code>href</code> attribute and thus <a href=\"https://www.tempertemper.net/blog/links-missing-href-attributes-and-over-engineered-code\" rel=\"noopener\">aren’t hyperlinks</a>. The <code>:any-link</code> selector only matches <code>&lt;a&gt;</code> elements that are hyperlinks. Web browsers also use <code>:any-link</code> instead of <code>a</code> in their user agent stylesheets.</p>\n\n\n<h3 id=\"hover-underlines\">Hover underlines</h3>\n\n\n<p>Many websites, including Google Search and Wikipedia, remove underlines from links and only show them when the user hovers a link. Removing underlines from links in body text is <a href=\"https://adrianroselli.com/2016/06/on-link-underlines.html\" rel=\"noopener\">not a good idea</a>, but it can make sense in places where links are more spaced apart (navigation, footer, etc.). With that being said, here’s a simple implementation of hover underlines for links in the website’s header:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">header :any-link {\n  text-decoration: none;\n}\n\nheader :any-link:hover {\n  text-decoration: underline;\n}</code></pre>\n\n\n\n<p>But there’s a problem. If we tested this code in a browser, we’d notice that the underlines in the header have the default thickness, not the thinner style that we declared earlier. Why did <code>text-decoration-thickness</code> stop working after we added hover underlines?</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKypZyX\" src=\"//codepen.io/anon/embed/KKypZyX?height=450&amp;theme-id=1&amp;slug-hash=KKypZyX&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKypZyX\" title=\"CodePen Embed KKypZyX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Let’s look at the full CSS code again. Can you think of a reason why the custom <code>thickness</code> doesn’t apply to the hover underline?</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:any-link {\n  text-decoration-thickness: 0.08em;\n}\n\nheader :any-link {\n  text-decoration: none;\n}\n\nheader :any-link:hover {\n  text-decoration: underline;\n}</code></pre>\n\n\n\n<p>The reason for this behavior is that <code>text-decoration</code> is a shorthand property and <code>text-decoration-thickness</code> its associated longhand property. Setting <code>text-decoration</code> to <code>none</code> or <code>underline</code> has the side effect of re-initializing the other three text decoration components (<code>thickness</code>, <code>style</code>, and <code>color</code>). This is defined in the <a href=\"https://drafts.csswg.org/css-text-decor-4/#text-decoration-property\" rel=\"noopener\">CSS Text Decoration module</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The <code>text-decoration</code> property is a shorthand for setting <code>text-decoration-line</code>, <code>text-decoration-thickness</code>, <code>text-decoration-style</code>, and <code>text-decoration-color</code> in one declaration. Omitted values are set to their initial values.</p></blockquote>\n\n\n\n<p>You can confirm this in the browser’s DevTools by selecting one of the hyperlinks in the DOM inspector and then expanding the <code>text-decoration</code> property in the CSS pane.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1098\" height=\"534\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/text-decoration-none-devtools.png?resize=1098%2C534&#038;ssl=1\" alt=\"DevTools screenshot showing text-decoration styles on the :any-link pseudo-selector.\" class=\"wp-image-363622\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/text-decoration-none-devtools.png?w=1098&amp;ssl=1 1098w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/text-decoration-none-devtools.png?resize=300%2C146&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/text-decoration-none-devtools.png?resize=1024%2C498&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/text-decoration-none-devtools.png?resize=768%2C374&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/text-decoration-none-devtools.png?resize=1000%2C486&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In order to get <code>text-decoration-thickness</code> to work on hover underlines, we’ll have to make a small change to the above CSS code. There are actually multiple ways to achieve this. We could:</p>\n\n\n\n<ul><li>set <code>text-decoration-thickness</code> after <code>text-decoration</code>,</li><li>declare the thickness in the <code>text-decoration</code> shorthand, or</li><li>use <code>text-decoration-line</code> instead of <code>text-decoration</code>.</li></ul>\n\n\n<h3 id=\"choosing-the-best-textdecoration-option\">Choosing the best text-decoration option</h3>\n\n\n<p>Our first thought might be to simply repeat the <code>text-decoration-thickness</code> declaration in the <code>:hover</code> state. It’s a quick and simple fix that indeed works.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* OPTION A */\n\nheader :any-link {\n  text-decoration: none;\n}\n\nheader :any-link:hover {\n  text-decoration: underline;\n  text-decoration-thickness: 0.08em; /* set thickness again */\n}</code></pre>\n\n\n\n<p>However, since <code>text-decoration</code> is a shorthand and <code>text-decoration-thickness</code> is its associated longhand, there really should be no need to use both at the same time. As a shorthand, <code>text-decoration</code> allows setting both the underline itself and the underline’s thickness, all in one declaration.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* OPTION B */\n\nheader :any-link {\n  text-decoration: none;\n}\n\nheader :any-link:hover {\n  text-decoration: underline 0.08em; /* set both line and thickness */\n}</code></pre>\n\n\n\n<p>If this code looks unfamiliar to you, that could be because the idea of using <code>text-decoration</code> as a shorthand is relatively new. This property was only subsequently turned into a shorthand in the <a href=\"https://drafts.csswg.org/css-text-decor-4/#text-decoration-property\" rel=\"noopener\">CSS Text Decoration module</a>. In the days of <a href=\"https://drafts.csswg.org/css2/#lining-striking-props\" rel=\"noopener\">CSS 2</a>, <code>text-decoration</code> was a simple property.</p>\n\n\n\n<p>Unfortunately, Safari still hasn’t fully caught up with these changes. In the WebKit browser engine, the shorthand variant of <code>text-decoration</code> remains prefixed (<code>-webkit-text-decoration</code>), and it doesn’t support <code>thickness</code> values yet. See <a href=\"https://bugs.webkit.org/show_bug.cgi?id=230083\" rel=\"noopener\">WebKit bug 230083</a> for more information.</p>\n\n\n\n<p>This rules out the <code>text-decoration</code> shorthand syntax. The above code won’t work in Safari, even if we added the <code>-webkit-</code> prefix. Luckily, there’s another way to avoid repeating the <code>text-decoration-thickness</code> declaration.</p>\n\n\n\n<p>When <code>text-decoration</code> was turned into a shorthand, a new <code>text-decoration-line</code> longhand was introduced to take over its old job. We can use this property to hide and show the underline without affecting the other three text decoration components.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* OPTION C */\n\nheader :any-link {\n  text-decoration-line: none;\n}\n\nheader :any-link:hover {\n  text-decoration-line: underline;\n}</code></pre>\n\n\n\n<p>Since we’re only updating the <code>line</code> component of the <code>text-decoration</code> value, the previously declared <code>thickness</code> remains intact. I think that this is the best way to implement hover underlines.</p>\n\n\n<h3 id=\"be-aware-of-shorthands\">Be aware of shorthands</h3>\n\n\n<p>Keep in mind that when you set a shorthand property, e.g., <code>text-decoration: underline</code>, any missing parts in the value are re-initialized. This is also why styles such as <code>background-repeat: no-repeat</code> are undone if you set <code>background: url(flower.jpg)</code> afterwards. See the article <a href=\"https://css-tricks.com/accidental-css-resets/\">“Accidental CSS Resets”</a> for more examples of this behavior.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/when-to-avoid-css-text-decoration-shorthand/\">When to Avoid the text-decoration Shorthand Property</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/when-to-avoid-css-text-decoration-shorthand/feed/</wfw:commentRss>\n\t\t\t<slash:comments>2</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">363619</post-id>\t</item>\n\t\t<item>\n\t\t<title>Manuel Matuzovic&#8217;s CSS Specificity Demo</title>\n\t\t<link>https://css-tricks.com/manuel-matuzovics-css-specificity-demo/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/manuel-matuzovics-css-specificity-demo/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Fri, 25 Feb 2022 15:27:19 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Link]]></category>\n\t\t<category><![CDATA[specificity]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=364152</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>If you&#8217;re looking for <a href=\"https://css-tricks.com/specifics-on-css-specificity/\">a primer on CSS specificity, we&#8217;ve got that</a>. And if you&#8217;re trying to get ahead of the game, you should be aware of <a href=\"https://css-tricks.com/css-cascade-layers/\">CSS Cascade Layers</a> as well.</p>\n<p>One of the ways to help get &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/manuel-matuzovics-css-specificity-demo/\">Manuel Matuzovic&#8217;s CSS Specificity Demo</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>If you&#8217;re looking for <a href=\"https://css-tricks.com/specifics-on-css-specificity/\">a primer on CSS specificity, we&#8217;ve got that</a>. And if you&#8217;re trying to get ahead of the game, you should be aware of <a href=\"https://css-tricks.com/css-cascade-layers/\">CSS Cascade Layers</a> as well.</p>\n\n\n\n<span id=\"more-364152\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2052\" height=\"1440\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=2052%2C1440&#038;ssl=1\" alt=\"Screenshot of the CSS Specificity Demo.\" class=\"wp-image-364163\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?w=2052&amp;ssl=1 2052w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=300%2C211&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=1024%2C719&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=768%2C539&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=1536%2C1078&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=2048%2C1437&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/02/Screen-Shot-2022-02-23-at-7.45.08-AM.png?resize=1000%2C702&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>One of the ways to help get a grasp of CSS specificity is thinking terms of &#8220;what beats what&#8221; or how strong the specificity is. Manuel Matuzovic has <a href=\"https://www.matuzo.at/blog/2022/specificity/\" rel=\"noopener\">a helpful interactive step-by-step demo</a>. You keep clicking the &#8220;Add selector&#8221; button, and the CSS shown (and applied to the page) changes with ever-increasingly-strong selectors applied to the body that change the <code>background-color</code>. At the end, it veers into not-really-selectors trickery, like using <code>@keyframes</code> to override things.</p>\n\n\n<h3 id=\"more-specificity-practice\">More specificity practice</h3>\n\n\n<p>If you enjoyed the trickery at the end, check out Francisco Dias&#8217; <a href=\"https://css-tricks.com/a-specificity-battle/\">A Specificity Battle!</a>, an article we published a few years back that does a back-and-forth styling battle with <em>nineteen</em> steps &#8220;selecting&#8221; the same element to re-style it. CSS is cray sometimes.</p>\n<p><a href=\"https://www.matuzo.at/blog/2022/specificity/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/manuel-matuzovics-css-specificity-demo/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/manuel-matuzovics-css-specificity-demo/\">Manuel Matuzovic&#8217;s CSS Specificity Demo</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/manuel-matuzovics-css-specificity-demo/feed/</wfw:commentRss>\n\t\t\t<slash:comments>1</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">364152</post-id>\t</item>\n\t</channel>\n</rss>\n"
  },
  "description": "Tips, Tricks, and Techniques on using Cascading Style Sheets.",
  "home_page_url": "https://css-tricks.com",
  "icon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=32%2C32&ssl=1",
  "_ext": {
    "date_published": "2022-03-28T18:15:41.000Z",
    "date_modified": "2022-03-28T18:15:43.000Z"
  }
}