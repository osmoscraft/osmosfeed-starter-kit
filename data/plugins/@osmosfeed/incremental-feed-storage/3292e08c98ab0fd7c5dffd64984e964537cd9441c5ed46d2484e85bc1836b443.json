{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "CSS-Tricks",
  "feed_url": "https://css-tricks.com/feed/",
  "items": [
    {
      "id": "https://css-tricks.com/?p=362091",
      "url": "https://css-tricks.com/typescript-discriminated-unions/",
      "title": "Demystifying TypeScript Discriminated Unions",
      "summary": "TypeScript is a wonderful tool for writing JavaScript that scales. It’s more or less the de facto standard for the web when it comes to large JavaScript projects. As outstanding as it is, there are some tricky pieces for the …\n\nDemystifying TypeScript Discriminated Unions originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>TypeScript is a wonderful tool for writing JavaScript that scales. It’s more or less the de facto standard for the web when it comes to large JavaScript projects. As outstanding as it is, there are some <a href=\"https://css-tricks.com/typescript-relevance/\">tricky pieces for the unaccustomed</a>. One such area is TypeScript discriminated unions.</p>\n\n\n\n<p>Specifically, given this code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">interface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}\nlet animal: Dog | Cat;</code></pre>\n\n\n\n<p>&#8230;many developers are surprised (and maybe even angry) to discover that when they do <code>animal.</code>, only the <code>weight</code> property is valid, and not <code>whiskers</code> or <code>friendly</code>. By the end of this post, this will make perfect sense.</p>\n\n\n\n<span id=\"more-362091\"></span>\n\n\n\n<p>Before we dive in, let’s do a quick (and necessary) review of structural typing, and how it differs from nominal typing. This will set up our discussion of TypeScript&#8217;s discriminated unions nicely.</p>\n\n\n\n<h3 id=\"structural-typing\">Structural typing</h3>\n\n\n\n<p>The best way to introduce structural typing is to compare it to <em>what it’s not</em>. Most typed languages you’ve probably used are nominally typed. Consider this C# code (Java or C++ would look similar):</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">class Foo {\n  public int x;\n}\nclass Blah {\n  public int x;\n}</code></pre>\n\n\n\n<p>Even though <code>Foo</code> and <code>Blah</code> are structured exactly the same, they cannot be assigned to one another. The following code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">Blah b = new Foo();</code></pre>\n\n\n\n<p>…generates this error:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">Cannot implicitly convert type 'Foo' to 'Blah'</code></pre>\n\n\n\n<p>The <em>structure</em> of these classes is irrelevant. A variable of type <code>Foo</code> can only be assigned to instances of the <code>Foo</code> class (or subclasses thereof).</p>\n\n\n\n<p>TypeScript operates the opposite way. TypeScript considers types to be compatible if they have the same <em>structure</em>—hence the name, <strong>structural typing</strong>. Get it?</p>\n\n\n\n<p>So, the following runs without error:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">class Foo {\n  x: number = 0;\n}\nclass Blah {\n  x: number = 0;\n}\nlet f: Foo = new Blah();\nlet b: Blah = new Foo();</code></pre>\n\n\n\n<h3 id=\"types-as-sets-of-matching-values\">Types as sets of matching values</h3>\n\n\n\n<p>Let’s hammer this home. Given this code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">class Foo {\n  x: number = 0;\n}\n\nlet f: Foo;</code></pre>\n\n\n\n<p><code>f</code> is a variable holding any object that matches the <em>structure</em> of instances created by the <code>Foo</code> class which, in this case, means an <code>x</code> property that represents a number. That means even a plain JavaScript object will be accepted.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let f: Foo;\nf = {\n  x: 0\n}</code></pre>\n\n\n\n<h3 id=\"unions\">Unions</h3>\n\n\n\n<p>Thanks for sticking with me so far. Let’s get back to the code from the beginning:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">interface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}</code></pre>\n\n\n\n<p>We know that this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog;</code></pre>\n\n\n\n<p>&#8230;makes <code>animal</code> any object that has the same structure as the <code>Dog</code> interface. So what does the following mean?</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat;</code></pre>\n\n\n\n<p>This types <code>animal</code> as any object that matches the <code>Dog</code> interface, <strong>or any object that matches the <code>Cat</code> interface</strong>.</p>\n\n\n\n<p>So why does <code>animal</code>—as it exists now—only allow us to access the <code>weight</code> property? To put it simply, it’s because TypeScript does not know which type it is. TypeScript knows that <code>animal</code> has to be either a <code>Dog</code> or <code>Cat</code>, but it <em>could</em> be either (or both at the same time, but let&#8217;s keep it simple). We’d likely get runtime errors if we were allowed to access the <code>friendly</code> property, but the instance wound up being a <code>Cat</code> instead of a <code>Dog</code>. Likewise for the <code>whiskers</code> property if the object wound up being a <code>Dog</code>.</p>\n\n\n\n<p>Type unions are unions of valid values rather than unions of properties. Developers often write something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat;</code></pre>\n\n\n\n<p>&#8230;and expect <code>animal</code> to have the union of <code>Dog</code> and <code>Cat</code> properties. But again, that’s a mistake. This specifies <code>animal</code> as having a <strong>value</strong> that matches the union of valid <code>Dog</code> values and valid <code>Cat</code> values. But TypeScript will only allow you to access properties it <em>knows</em> are there. For now, that means properties on all the types in the union.</p>\n\n\n\n<h3 id=\"narrowing\">Narrowing</h3>\n\n\n\n<p>Right now, we have this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat;</code></pre>\n\n\n\n<p>How do we properly treat <code>animal</code> as a <code>Dog</code> when it’s a <code>Dog</code>, and access properties on the <code>Dog</code> interface, and likewise when it’s a <code>Cat</code>? For now, we can use the <code>in</code> operator. This is an old-school JavaScript operator you probably don’t see very often, but it essentially allows us to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\" rel=\"noopener\">test if a property is in an object</a>. Like this:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">let o = { a: 12 };\n\n\"a\" in o; // true\n\"x\" in o; // false</code></pre>\n\n\n\n<p>It turns out TypeScript is deeply integrated with the <code>in</code> operator. Let’s see how:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat = {} as any;\n\nif (\"friendly\" in animal) {\n  console.log(animal.friendly);\n} else {\n  console.log(animal.whiskers);\n}</code></pre>\n\n\n\n<p>This code produces no errors. When inside the <code>if</code> block, TypeScript knows there’s a <code>friendly</code> property, and therefore casts <code>animal</code> as a <code>Dog</code>. And when inside the <code>else</code> block, TypeScript similarly treats <code>animal</code> as a <code>Cat</code>. You can even see this if you hover over the animal object inside these blocks in your code editor:</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"530\" height=\"240\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631612006_image.png?resize=530%2C240&#038;ssl=1\" alt=\"Showing a tooltip open on top of a a TypeScript discriminated unions example that shows `let animal: Dog`.\" class=\"wp-image-362094\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631612006_image.png?w=530&amp;ssl=1 530w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631612006_image.png?resize=300%2C136&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"546\" height=\"238\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631569569_image.png?resize=546%2C238&#038;ssl=1\" alt=\"Showing a tooltip open on top of a a TypeScript discriminated union example that shows `let animal: Cat`.\" class=\"wp-image-362095\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631569569_image.png?w=546&amp;ssl=1 546w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631569569_image.png?resize=300%2C131&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n</div>\n\n\n\n<h3 id=\"discriminated-unions\">Discriminated unions</h3>\n\n\n\n<p>You might expect the blog post to end here but, unfortunately, narrowing type unions by checking for the existence of properties is incredibly limited. It worked well for our trivial <code>Dog</code> and <code>Cat</code> types, but things can easily get more complicated, and more fragile, when we have more types, as well as more overlap between those types.</p>\n\n\n\n<p>This is where discriminated unions come in handy. We’ll keep everything the same from before, except add a property to each type whose only job is to distinguish (or “discriminate”) between the types:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">interface Cat {\n  weight: number;\n  whiskers: number;\n  ANIMAL_TYPE: \"CAT\";\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n  ANIMAL_TYPE: \"DOG\";\n}</code></pre>\n\n\n\n<p>Note the <code>ANIMAL_TYPE</code> property on both types. Don’t mistake this as a string with two different values; this is a literal type. <code>ANIMAL_TYPE: \"CAT\";</code> means a type that holds exactly the string <code>\"CAT\"</code>, and nothing else.</p>\n\n\n\n<p>And now our check becomes a bit more reliable:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat = {} as any;\n\nif (animal.ANIMAL_TYPE === \"DOG\") {\n  console.log(animal.friendly);\n} else {\n  console.log(animal.whiskers);\n}</code></pre>\n\n\n\n<p>Assuming each type participating in the union has a distinct value for the <code>ANIMAL_TYPE</code> property, this check becomes foolproof.</p>\n\n\n\n<p>The only downside is that you now have a new property to deal with. Any time you create an instance of a <code>Dog</code> or a <code>Cat</code>, you have to supply the <em>single</em> correct value for the <code>ANIMAL_TYPE</code>. But don’t worry about forgetting because TypeScript will remind you. &#x1f642;</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"942\" height=\"268\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719169299_image.png?resize=942%2C268&#038;ssl=1\" alt=\"Showing the TypeScript discriminated union for a createDog function that returns weight and friendly properties.\" class=\"wp-image-362099\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719169299_image.png?w=942&amp;ssl=1 942w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719169299_image.png?resize=300%2C85&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719169299_image.png?resize=768%2C218&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1832\" height=\"428\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=1832%2C428&#038;ssl=1\" alt=\"Screenshot of TypeScript displaying a warning in the code editor as a result of not providing a single value for the ANIMAL_TYPE property.\" class=\"wp-image-362098\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?w=1832&amp;ssl=1 1832w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=300%2C70&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=1024%2C239&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=768%2C179&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=1536%2C359&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=1000%2C234&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p></p>\n\n\n\n<h2 id=\"further-reading\"><br>Further reading</h2>\n\n\n\n<p>If you&#8217;d like to learn more, I&#8217;d recommend the TypeScript <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\" rel=\"noopener\">docs on narrowing</a>. That&#8217;ll provide some deeper coverage of what we went over here. Inside of that link is a section on <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\" rel=\"noopener\">type predicates</a>. These allow you to define your own, custom checks to narrow types, without needing to use type discriminators, and without relying on the <code>in</code> keyword.</p>\n\n\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n\n\n<p>At the beginning of this article, I said it would make sense why <code>weight</code> is the only accessible property in the following example:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">interface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}\nlet animal: Dog | Cat;</code></pre>\n\n\n\n<p>What we learned is that TypeScript only knows that <code>animal</code> could be either a <code>Dog</code> or a <code>Cat</code>, but not both. As such, all we get is <code>weight</code>, which is the only common property between the two.</p>\n\n\n\n<p>The concept of <strong>discriminated unions</strong> is how TypeScript differentiates between those objects and does so in a way that scales extremely well, even with larger sets of objects. As such, we had to create a new <code>ANIMAL_TYPE</code> property on both types that holds a single literal value we can use to check against. Sure, it’s another thing to track, but it also produces more reliable results—which is what we want from TypeScript in the first place.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/typescript-discriminated-unions/\">Demystifying TypeScript Discriminated Unions</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "TypeScript is a wonderful tool for writing JavaScript that scales. It’s more or less the de facto standard for the web when it comes to large JavaScript projects. As outstanding as it is, there are some tricky pieces for the unaccustomed. One such area is TypeScript discriminated unions.\n\n\n\nSpecifically, given this code:\n\n\n\ninterface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}\nlet animal: Dog | Cat;\n\n\n\n…many developers are surprised (and maybe even angry) to discover that when they do animal., only the weight property is valid, and not whiskers or friendly. By the end of this post, this will make perfect sense.\n\n\n\n\n\n\n\nBefore we dive in, let’s do a quick (and necessary) review of structural typing, and how it differs from nominal typing. This will set up our discussion of TypeScript’s discriminated unions nicely.\n\n\n\nStructural typing\n\n\n\nThe best way to introduce structural typing is to compare it to what it’s not. Most typed languages you’ve probably used are nominally typed. Consider this C# code (Java or C++ would look similar):\n\n\n\nclass Foo {\n  public int x;\n}\nclass Blah {\n  public int x;\n}\n\n\n\nEven though Foo and Blah are structured exactly the same, they cannot be assigned to one another. The following code:\n\n\n\nBlah b = new Foo();\n\n\n\n…generates this error:\n\n\n\nCannot implicitly convert type 'Foo' to 'Blah'\n\n\n\nThe structure of these classes is irrelevant. A variable of type Foo can only be assigned to instances of the Foo class (or subclasses thereof).\n\n\n\nTypeScript operates the opposite way. TypeScript considers types to be compatible if they have the same structure—hence the name, structural typing. Get it?\n\n\n\nSo, the following runs without error:\n\n\n\nclass Foo {\n  x: number = 0;\n}\nclass Blah {\n  x: number = 0;\n}\nlet f: Foo = new Blah();\nlet b: Blah = new Foo();\n\n\n\nTypes as sets of matching values\n\n\n\nLet’s hammer this home. Given this code:\n\n\n\nclass Foo {\n  x: number = 0;\n}\n\nlet f: Foo;\n\n\n\nf is a variable holding any object that matches the structure of instances created by the Foo class which, in this case, means an x property that represents a number. That means even a plain JavaScript object will be accepted.\n\n\n\nlet f: Foo;\nf = {\n  x: 0\n}\n\n\n\nUnions\n\n\n\nThanks for sticking with me so far. Let’s get back to the code from the beginning:\n\n\n\ninterface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}\n\n\n\nWe know that this:\n\n\n\nlet animal: Dog;\n\n\n\n…makes animal any object that has the same structure as the Dog interface. So what does the following mean?\n\n\n\nlet animal: Dog | Cat;\n\n\n\nThis types animal as any object that matches the Dog interface, or any object that matches the Cat interface.\n\n\n\nSo why does animal—as it exists now—only allow us to access the weight property? To put it simply, it’s because TypeScript does not know which type it is. TypeScript knows that animal has to be either a Dog or Cat, but it could be either (or both at the same time, but let’s keep it simple). We’d likely get runtime errors if we were allowed to access the friendly property, but the instance wound up being a Cat instead of a Dog. Likewise for the whiskers property if the object wound up being a Dog.\n\n\n\nType unions are unions of valid values rather than unions of properties. Developers often write something like this:\n\n\n\nlet animal: Dog | Cat;\n\n\n\n…and expect animal to have the union of Dog and Cat properties. But again, that’s a mistake. This specifies animal as having a value that matches the union of valid Dog values and valid Cat values. But TypeScript will only allow you to access properties it knows are there. For now, that means properties on all the types in the union.\n\n\n\nNarrowing\n\n\n\nRight now, we have this:\n\n\n\nlet animal: Dog | Cat;\n\n\n\nHow do we properly treat animal as a Dog when it’s a Dog, and access properties on the Dog interface, and likewise when it’s a Cat? For now, we can use the in operator. This is an old-school JavaScript operator you probably don’t see very often, but it essentially allows us to test if a property is in an object. Like this:\n\n\n\nlet o = { a: 12 };\n\n\"a\" in o; // true\n\"x\" in o; // false\n\n\n\nIt turns out TypeScript is deeply integrated with the in operator. Let’s see how:\n\n\n\nlet animal: Dog | Cat = {} as any;\n\nif (\"friendly\" in animal) {\n  console.log(animal.friendly);\n} else {\n  console.log(animal.whiskers);\n}\n\n\n\nThis code produces no errors. When inside the if block, TypeScript knows there’s a friendly property, and therefore casts animal as a Dog. And when inside the else block, TypeScript similarly treats animal as a Cat. You can even see this if you hover over the animal object inside these blocks in your code editor:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiscriminated unions\n\n\n\nYou might expect the blog post to end here but, unfortunately, narrowing type unions by checking for the existence of properties is incredibly limited. It worked well for our trivial Dog and Cat types, but things can easily get more complicated, and more fragile, when we have more types, as well as more overlap between those types.\n\n\n\nThis is where discriminated unions come in handy. We’ll keep everything the same from before, except add a property to each type whose only job is to distinguish (or “discriminate”) between the types:\n\n\n\ninterface Cat {\n  weight: number;\n  whiskers: number;\n  ANIMAL_TYPE: \"CAT\";\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n  ANIMAL_TYPE: \"DOG\";\n}\n\n\n\nNote the ANIMAL_TYPE property on both types. Don’t mistake this as a string with two different values; this is a literal type. ANIMAL_TYPE: \"CAT\"; means a type that holds exactly the string \"CAT\", and nothing else.\n\n\n\nAnd now our check becomes a bit more reliable:\n\n\n\nlet animal: Dog | Cat = {} as any;\n\nif (animal.ANIMAL_TYPE === \"DOG\") {\n  console.log(animal.friendly);\n} else {\n  console.log(animal.whiskers);\n}\n\n\n\nAssuming each type participating in the union has a distinct value for the ANIMAL_TYPE property, this check becomes foolproof.\n\n\n\nThe only downside is that you now have a new property to deal with. Any time you create an instance of a Dog or a Cat, you have to supply the single correct value for the ANIMAL_TYPE. But don’t worry about forgetting because TypeScript will remind you. 🙂\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFurther reading\n\n\n\nIf you’d like to learn more, I’d recommend the TypeScript docs on narrowing. That’ll provide some deeper coverage of what we went over here. Inside of that link is a section on type predicates. These allow you to define your own, custom checks to narrow types, without needing to use type discriminators, and without relying on the in keyword.\n\n\n\nConclusion\n\n\n\nAt the beginning of this article, I said it would make sense why weight is the only accessible property in the following example:\n\n\n\ninterface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}\nlet animal: Dog | Cat;\n\n\n\nWhat we learned is that TypeScript only knows that animal could be either a Dog or a Cat, but not both. As such, all we get is weight, which is the only common property between the two.\n\n\n\nThe concept of discriminated unions is how TypeScript differentiates between those objects and does so in a way that scales extremely well, even with larger sets of objects. As such, we had to create a new ANIMAL_TYPE property on both types that holds a single literal value we can use to check against. Sure, it’s another thing to track, but it also produces more reliable results—which is what we want from TypeScript in the first place.\n\nDemystifying TypeScript Discriminated Unions originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-27T15:20:57.000Z",
      "date_modified": "2022-01-27T15:20:57.000Z",
      "_plugin": {
        "pageFilename": "d99716728de07e515a52720d5540470b466a29149828c2eabc2fbf26c0d37660.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361971",
      "url": "https://css-tricks.com/design-systems-with-backlight/",
      "title": "Build, Ship, & Maintain Design Systems with Backlight",
      "summary": "(This is a sponsored post.)\nDesign systems are an entire job these days. Agencies are hired to create them. In-house teams are formed to handle them, shipping them so that other teams can use them and helping ensure they …\n\nBuild, Ship, & Maintain Design Systems with Backlight originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>Design systems are an entire job these days. Agencies are hired to create them. In-house teams are formed to handle them, shipping them so that other teams can use them and helping ensure they do. Design systems aren&#8217;t a fad, they are a positive evolution of how digital design is done. <a href=\"https://srv.buysellads.com/ads/long/x/TFIVHAD3TTTTTT3JJUSC4TTTTTTVTWGUK6TTTTTTLTNGTYVTTTTTTMLMFHLDKBIGVQ2DE7I3VHIW6LDD22WNPAB322JE\" rel=\"noopener\">Backlight</a> is the ultimate all-in-one development tool for design systems.</p>\n\n\n\n<p>I think it&#8217;s interesting to start thinking about this at the end. What&#8217;s the best-case scenario for a design system for websites? I think it&#8217;s when you&#8217;ve published a versioned design system to npm. That way teams can pull it in as a dependency on the project and use it. How do you do that? Your design system is on GitHub and you publish from there. How do you do that? You work on your design system through a development environment that pushes to GitHub. What is Backlight? It&#8217;s that development environment. </p>\n\n\n\n<span id=\"more-361971\"></span>\n\n\n\n<h3 id=\"spin-up-a-complete-design-system-in-seconds\">Spin up a complete design system in seconds</h3>\n\n\n\n<p>Wanna watch me do it?</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"cleanshot-2022-01-21-at-13-58-34-mp4\" width='500' height='377' src='https://videopress.com/embed/wOa1BB7c?cover=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>You don&#8217;t <em>have</em> to pick a starter template, but it&#8217;s enlightening to see all the possibilities. Backlight isn&#8217;t particularly opinionated about what technology you want to use for the system. Lit and Web Components? Great. React and Emotion? Cool. Just Vue? All good. Nunjucks and Sass? That works.</p>\n\n\n\n<p>Having a starter design system really gives you a leg up here. If you&#8217;re cool with using something off-the-shelf and then customizing it, you&#8217;ll be off and running incredibly quickly. Something that you might assume would take a few weeks to figure out and settle into is done in an instant. And if you want to be 100% custom about everything, that&#8217;s still completely on the table. </p>\n\n\n\n<h3 id=\"kick-it-up-to-github\">Kick it up to GitHub</h3>\n\n\n\n<p>Even if you&#8217;re still just testing, I think it&#8217;s amazingly easy and impressive how you can just create a GitHub (or GitLab) repo and push to it in a few clicks.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"731\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=1024%2C731&#038;ssl=1\" alt=\"\" class=\"wp-image-362414\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=1024%2C731&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=300%2C214&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=768%2C548&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=1536%2C1096&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=2048%2C1462&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=1000%2C714&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"731\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=1024%2C731&#038;ssl=1\" alt=\"\" class=\"wp-image-362415\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=1024%2C731&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=300%2C214&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=768%2C548&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=1536%2C1096&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=2048%2C1462&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=1000%2C714&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"874\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=1024%2C874&#038;ssl=1\" alt=\"\" class=\"wp-image-362416\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=1024%2C874&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=300%2C256&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=768%2C656&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=1536%2C1311&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=2048%2C1748&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=1000%2C854&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>To me, this is the moment it really becomes real. This isn&#8217;t some third-party tool where everyone is 100% forced to use it and you&#8217;re locked into it forever and it&#8217;s only really useful when people buy into the third-party tool. <a href=\"https://srv.buysellads.com/ads/long/x/TFIVHAD3TTTTTT3JJUSC4TTTTTTVTWGUK6TTTTTTLTNGTYVTTTTTTMLMFHLDKBIGVQ2DE7I3VHIW6LDD22WNPAB322JE\" rel=\"noopener\">Backlight</a> just takes very industry-standard practices and makes them easier and more convenient to work with. </p>\n\n\n\n<h3 id=\"then-kick-it-to-a-registry\">Then, kick it to a registry.</h3>\n\n\n\n<p>Like I said at the top, this is the big moment for any design system. When you send it to a package registry like <a href=\"https://www.npmjs.com/\" rel=\"noopener\">npm</a> or <a href=\"https://github.com/features/packages\" rel=\"noopener\">GitHub packages</a>, that means that anyone hoping to use your design system can now install it and use it like any other dependency. </p>\n\n\n\n<p>In Backlight, this is just a matter of clicking a few buttons. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"778\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=1024%2C778&#038;ssl=1\" alt=\"\" class=\"wp-image-362605\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=1024%2C778&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=300%2C228&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=768%2C583&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=1536%2C1167&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=2048%2C1556&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=1000%2C760&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>With a PRO membership, you can change the scope to your own organization. Soon you&#8217;ll be handling all your design system releases right from here, including major, minor, and patch versions. </p>\n\n\n\n<h3 id=\"make-a-component\">Make a Component</h3>\n\n\n\n<p>I&#8217;d never used Backlight before, nobody helped me, and I didn&#8217;t read any of the (robust) documentation. I just clicked around and created a new Component easily. In my case here, I made a new Nunjucks <code>macro</code>, made some SCSS styles, then created a demo of it as a Storybook &#8220;story&#8221;. All I did was reference an existing component to see how it all worked. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"635\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=1024%2C635&#038;ssl=1\" alt=\"\" class=\"wp-image-362417\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=1024%2C635&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=300%2C186&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=768%2C477&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=1536%2C953&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=2048%2C1271&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=1000%2C621&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>As one of the creators of CodePen, of course, I highly appreciated the in-browser IDE qualities to all this. It runs re-builds your code changes (looks like a Vite process) super quickly, alerting you helpfully to any errors. </p>\n\n\n\n<p>Now because this is a Very Real Serious Design System, I wouldn&#8217;t push this new component directly to <code>master</code> in our repository, first it becomes a branch, and then I commit to that. I wouldn&#8217;t have to know anything at all about Git to pull this off, look how easy it is:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"635\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=1024%2C635&#038;ssl=1\" alt=\"\" class=\"wp-image-362418\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=1024%2C635&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=300%2C186&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=768%2C477&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=1536%2C953&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=2048%2C1271&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=1000%2C621&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 id=\"howdy-stakeholders\">Howdy, Stakeholders!</h3>\n\n\n\n<p>Design systems are as much of a people concern as they are a technological concern. Design systems need to get talked about. I really appreciate how I can share Backlight with anyone, even if they aren&#8217;t logged in. Just copy a sharing link (that nobody could ever guess) and away you go. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"671\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=1024%2C671&#038;ssl=1\" alt=\"\" class=\"wp-image-362419\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=1024%2C671&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=300%2C197&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=768%2C504&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=1536%2C1007&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=2048%2C1343&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=1000%2C656&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 id=\"there-is-a-lot-here\">There is a lot here.</h3>\n\n\n\n<p>You can manage an entire design system in here. You&#8217;re managing things from the atomic token level all the way up to building example pages and piecing together the system. You&#8217;re literally writing the code to build all this stuff, including the templates, stories, and tests, right there in Backlight. </p>\n\n\n\n<p class=\"is-style-explanation\">What about those people on your team who really just can&#8217;t be persuaded to leave their local development environment. Backlight understands this, and it doesn&#8217;t force them to! Backlight has <a href=\"https://backlight.dev/docs/cli\" rel=\"noopener\">a CLI</a> which enables local development, including spinning up a server to preview active work. </p>\n\n\n\n<p>But it doesn&#8217;t stop there. You can build documentation for everything right in Backlight. Design systems are often best explained in words! And design systems might actually start life (or live a parallel life) in entirely design-focused software like Figma, Sketch, or Adobe XD. It&#8217;s possible to link design documents right in Backlight, making them easy to find and much more organized. </p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>I&#8217;m highly impressed! I wasn&#8217;t sure at first what to make of a tool that wants to be a complete tool for design systems, knowing how complex that whole world is, but <a href=\"https://srv.buysellads.com/ads/long/x/TFIVHAD3TTTTTT3JJUSC4TTTTTTVTWGUK6TTTTTTLTNGTYVTTTTTTMLMFHLDKBIGVQ2DE7I3VHIW6LDD22WNPAB322JE\" rel=\"noopener\">Backlight</a> really delivers in a way that I find highly satisfying, especially coming at it from the role of a front-end developer, designer, and manager.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/design-systems-with-backlight/\">Build, Ship, &#038; Maintain Design Systems with Backlight</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "(This is a sponsored post.)\nDesign systems are an entire job these days. Agencies are hired to create them. In-house teams are formed to handle them, shipping them so that other teams can use them and helping ensure they do. Design systems aren’t a fad, they are a positive evolution of how digital design is done. Backlight is the ultimate all-in-one development tool for design systems.\n\n\n\nI think it’s interesting to start thinking about this at the end. What’s the best-case scenario for a design system for websites? I think it’s when you’ve published a versioned design system to npm. That way teams can pull it in as a dependency on the project and use it. How do you do that? Your design system is on GitHub and you publish from there. How do you do that? You work on your design system through a development environment that pushes to GitHub. What is Backlight? It’s that development environment. \n\n\n\n\n\n\n\nSpin up a complete design system in seconds\n\n\n\nWanna watch me do it?\n\n\n\n\n\n\n\n\n\nYou don’t have to pick a starter template, but it’s enlightening to see all the possibilities. Backlight isn’t particularly opinionated about what technology you want to use for the system. Lit and Web Components? Great. React and Emotion? Cool. Just Vue? All good. Nunjucks and Sass? That works.\n\n\n\nHaving a starter design system really gives you a leg up here. If you’re cool with using something off-the-shelf and then customizing it, you’ll be off and running incredibly quickly. Something that you might assume would take a few weeks to figure out and settle into is done in an instant. And if you want to be 100% custom about everything, that’s still completely on the table. \n\n\n\nKick it up to GitHub\n\n\n\nEven if you’re still just testing, I think it’s amazingly easy and impressive how you can just create a GitHub (or GitLab) repo and push to it in a few clicks.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo me, this is the moment it really becomes real. This isn’t some third-party tool where everyone is 100% forced to use it and you’re locked into it forever and it’s only really useful when people buy into the third-party tool. Backlight just takes very industry-standard practices and makes them easier and more convenient to work with. \n\n\n\nThen, kick it to a registry.\n\n\n\nLike I said at the top, this is the big moment for any design system. When you send it to a package registry like npm or GitHub packages, that means that anyone hoping to use your design system can now install it and use it like any other dependency. \n\n\n\nIn Backlight, this is just a matter of clicking a few buttons. \n\n\n\n\n\n\n\nWith a PRO membership, you can change the scope to your own organization. Soon you’ll be handling all your design system releases right from here, including major, minor, and patch versions. \n\n\n\nMake a Component\n\n\n\nI’d never used Backlight before, nobody helped me, and I didn’t read any of the (robust) documentation. I just clicked around and created a new Component easily. In my case here, I made a new Nunjucks macro, made some SCSS styles, then created a demo of it as a Storybook “story”. All I did was reference an existing component to see how it all worked. \n\n\n\n\n\n\n\nAs one of the creators of CodePen, of course, I highly appreciated the in-browser IDE qualities to all this. It runs re-builds your code changes (looks like a Vite process) super quickly, alerting you helpfully to any errors. \n\n\n\nNow because this is a Very Real Serious Design System, I wouldn’t push this new component directly to master in our repository, first it becomes a branch, and then I commit to that. I wouldn’t have to know anything at all about Git to pull this off, look how easy it is:\n\n\n\n\n\n\n\nHowdy, Stakeholders!\n\n\n\nDesign systems are as much of a people concern as they are a technological concern. Design systems need to get talked about. I really appreciate how I can share Backlight with anyone, even if they aren’t logged in. Just copy a sharing link (that nobody could ever guess) and away you go. \n\n\n\n\n\n\n\nThere is a lot here.\n\n\n\nYou can manage an entire design system in here. You’re managing things from the atomic token level all the way up to building example pages and piecing together the system. You’re literally writing the code to build all this stuff, including the templates, stories, and tests, right there in Backlight. \n\n\n\nWhat about those people on your team who really just can’t be persuaded to leave their local development environment. Backlight understands this, and it doesn’t force them to! Backlight has a CLI which enables local development, including spinning up a server to preview active work. \n\n\n\nBut it doesn’t stop there. You can build documentation for everything right in Backlight. Design systems are often best explained in words! And design systems might actually start life (or live a parallel life) in entirely design-focused software like Figma, Sketch, or Adobe XD. It’s possible to link design documents right in Backlight, making them easy to find and much more organized. \n\n\n\n\n\n\n\nI’m highly impressed! I wasn’t sure at first what to make of a tool that wants to be a complete tool for design systems, knowing how complex that whole world is, but Backlight really delivers in a way that I find highly satisfying, especially coming at it from the role of a front-end developer, designer, and manager.\n\nBuild, Ship, & Maintain Design Systems with Backlight originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-27T15:18:25.000Z",
      "date_modified": "2022-01-27T15:18:25.000Z",
      "_plugin": {
        "pageFilename": "0e4cbfda8cf51d0c6c62053ad7c590a4c1a1dd4ab498b9ccbe222a6f747e6f7e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361200",
      "url": "https://css-tricks.com/cycle-through-classes-html-element/",
      "title": "How to Cycle Through Classes on an HTML Element",
      "summary": "Say you have three HTML classes, and a DOM element should only have one of them at a time:\n<div class=\"state-1\"</div<div class=\"state-2\"</div<div class=\"state-3\"</div\nNow your job is to rotate them. That is, cycle through classes …\n\nHow to Cycle Through Classes on an HTML Element originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Say you have three HTML classes, and a DOM element should only have one of them at a time:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"state-1\">&lt;/div>\n&lt;div class=\"state-2\">&lt;/div>\n&lt;div class=\"state-3\">&lt;/div></code></pre>\n\n\n\n<p>Now your job is to rotate them. That is, cycle through classes on an HTML element. When some event occurs, if the element has <code>state-1</code> on it, remove <code>state-1</code> and add <code>state-2</code>. If it has <code>state-2</code> on it, remove that and add <code>state-3</code>. On the last state, remove it, and cycle back to <code>state-1</code>.</p>\n\n\n\n<span id=\"more-361200\"></span>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-19-at-07.02.53.gif?resize=538%2C339&#038;ssl=1\" alt=\"Example of how to Cycle Through Classes on an HTML Element. Here a large <button&gt; with an <svg&gt; inside cycles through state-1, state-2, and state-3 classes, turning from red to yellow to green.\" class=\"wp-image-362171\" width=\"538\" height=\"339\" data-recalc-dims=\"1\" /></figure></div>\n\n\n\n<p>It&#8217;s notable that we&#8217;re talking about 3+ classes here. The DOM has a <code>.classList.toggle()</code> function, even one that takes a conditional as a second parameter, but that&#8217;s primarily useful in a two-class on/off situation, not cycling through classes.</p>\n\n\n\n<p class=\"is-style-explanation\"><strong>Why?</strong> There is a number of reasons. Changing a class name gives you lots of power to re-style things in the DOM, and state management like that is a cornerstone of modern web development. But to be specific, in my case, I was wanting to do <a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\">FLIP animations</a> where I&#8217;d change a layout and trigger a tween animation between the different states.</p>\n\n\n\n<p class=\"is-style-explanation\"><strong>Careful</strong> about existing classes! I saw some ideas that overwrote <code>.className</code>, which isn&#8217;t friendly toward other classes that might be on the DOM element. All these are &#8220;safe&#8221; choices for cycling through classes in that way.</p>\n\n\n\n<p>Because this is programming, there are <em>lots</em> of ways to get this done. Let&#8217;s cover a bunch of them — <em>for fun.</em> I <a href=\"https://twitter.com/chriscoyier/status/1481028373002473472\" rel=\"noopener\">tweeted about this issue</a>, so many of these solutions are from people who chimed into that discussion.</p>\n\n\n\n<h3 id=\"a-verbose-if-else-statement-to-cycle-through-classes\">A verbose if/else statement to cycle through classes</h3>\n\n\n\n<p>This is what I did at first to cycle through classes. That&#8217;s how my brain works. Just write out very specific instructions for exactly what you want to happen:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">if (el.classList.contains(\"state-1\")) {\n  el.classList.remove(\"state-1\");\n  el.classList.add(\"state-2\");\n} else if (el.classList.contains(\"state-2\")) {\n  el.classList.remove(\"state-2\");\n  el.classList.add(\"state-3\");\n} else {\n  el.classList.remove(\"state-3\");\n  el.classList.add(\"state-1\");\n}</code></pre>\n\n\n\n<p>I don&#8217;t mind the verbosity here, because to me it&#8217;s super clear what&#8217;s going on and will be easy to return to this code and &#8220;reason about it,&#8221; as they say. You could consider the verbosity a problem — surely there is a way to cycle through classes with less code. But a bigger issue is that it isn&#8217;t very extensible. There is no semblance of configuration (e.g. change the names of the classes easily) or simple way to add classes to the party, or remove them. </p>\n\n\n\n<p>We could use constants, at least:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const STATE_1 = \"state-1\";\nconst STATE_2 = \"state-2\";\nconst STATE_3 = \"state-3\";\n\nif (el.classList.contains(STATE_1)) {\n  el.classList.remove(STATE_1);\n  el.classList.add(STATE_2);\n} else if (el.classList.contains(STATE_2)) {\n  el.classList.remove(STATE_2);\n  el.classList.add(STATE_3);\n} else {\n  el.classList.remove(STATE_3);\n  el.classList.add(STATE_1);\n}</code></pre>\n\n\n\n<p>But that&#8217;s not wildly different or better.</p>\n\n\n\n<h3 id=\"regex-off-the-old-class-increment-state-then-re-add\">RegEx off the old class, increment state, then re-add</h3>\n\n\n\n<p>This one <a href=\"https://twitter.com/tabatkins/status/1481030336481947648\" rel=\"noopener\">comes from Tab Atkins</a>. Since we know the format of the class, <code>state-N</code>, we can look for that, pluck off the number, use a little ternary to increment it (but not higher than the highest state), then add/remove the classes as a way of cycling through them:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const oldN = +/\\bstate-(\\d+)\\b/.exec(el.getAttribute('class'))[1];\nconst newN = oldN >= 3 ? 1 : oldN+1;\nel.classList.remove(`state-${oldN}`);\nel.classList.add(`state-${newN}`);</code></pre>\n\n\n\n<h3 id=\"find-the-index-of-the-class-then-remove-add\">Find the index of the class, then remove/add</h3>\n\n\n\n<p>A bunch of techniques to cycle through classes center around setting up an array of classes up front. This acts as configuration for cycling through classes, which I think is a smart way to do it. Once you have that, you can find the relevant classes for adding and removing them. This one is <a href=\"https://twitter.com/ckirknielsen/status/1481047709654167553\" rel=\"noopener\">from Christopher Kirk-Nielsen</a>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const classes = [\"state-1\", \"state-2\", \"state-3\"];\nconst activeIndex = classes.findIndex((c) => el.classList.contains(c));\nconst nextIndex = (activeIndex + 1) % classes.length;\n\nel.classList.remove(classes[activeIndex]);\nel.classList.add(classes[nextIndex]);</code></pre>\n\n\n\n<p>Christopher had a nice idea for making the add/remove technique shorter as well. Turns out it&#8217;s the same&#8230;</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">el.classList.remove(classes[activeIndex]);\nel.classList.add(classes[nextIndex]);\n\n// Does the same thing.\nel.classList.replace(classes[activeIndex], classes[nextIndex]);</code></pre>\n\n\n\n<p><a href=\"https://twitter.com/m_yxnk/status/1481037368220164097\" rel=\"noopener\">Mayank had a similar idea</a> for cycling through classes by finding the class in an array, only rather than using <code>classList.contains()</code>, you check the classes currently on the DOM element with what is in the array.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const states = [\"state-1\", \"state-2\", \"state-3\"];\nconst current = [...el.classList].find(cls => states.includes(cls));\nconst next = states[(states.indexOf(current) + 1) % states.length];\nel.classList.remove(current);\nel.classList.add(next);</code></pre>\n\n\n\n<p>Variations of this were the most common idea. <a href=\"https://twitter.com/jh3yy/status/1481034247473438725\" rel=\"noopener\">Here&#8217;s Jhey&#8217;s</a> and <a href=\"https://twitter.com/mike_wagz/status/1481032265333415941\" rel=\"noopener\">here&#8217;s Mike Wagz</a> which sets up functions for moving forward and backward.</p>\n\n\n\n<h3 id=\"cascading-replace-statements\">Cascading replace statements</h3>\n\n\n\n<p>Speaking of that <code>replace</code> API, <a href=\"https://twitter.com/ccalo/status/1481221461293600772\" rel=\"noopener\">Chris Calo had a clever idea</a> where you chain them with the <code>or</code> operator and rely on the fact that it returns true/false if it works or doesn&#8217;t. So you do all three and one of them will work!</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\"> el.classList.replace(\"state-1\", \"state-2\") ||\n el.classList.replace(\"state-2\", \"state-3\") ||\n el.classList.replace(\"state-3\", \"state-1\");</code></pre>\n\n\n\n<p><a href=\"https://twitter.com/NicoloRibaudo\" rel=\"noopener\"></a><a href=\"https://twitter.com/NicoloRibaudo/status/1481037397995438081\" rel=\"noopener\">Nicolò Ribaudo came to</a> the same conclusion.</p>\n\n\n\n<h3 id=\"just-cycle-through-class-numbers\">Just cycle through class numbers</h3>\n\n\n\n<p>If you pre-configured a <code>1</code> upfront, you could cycle through classes 1-3 and add/remove them based on that. This is <a href=\"https://twitter.com/zzzzBov/status/1481032199835201537\" rel=\"noopener\">from Timothy Leverett</a> who lists another similar option in the same tweet. </p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Assumes a `let s = 1` upfront\nel.classList.remove(`state-${s + 1}`);\ns = (s + 1) % 3;\nel.classList.add(`state-${s + 1}`);</code></pre>\n\n\n\n<h3 id=\"use-data-attributes-instead\">Use <code>data-*</code> attributes instead</h3>\n\n\n\n<p><a href=\"https://css-tricks.com/a-complete-guide-to-data-attributes/\">Data attributes</a> have the same specificity power, so I have no issue with this. They might actually be more clear in terms of state handling, but even better, they have <a href=\"https://css-tricks.com/a-complete-guide-to-data-attributes/#aa-accessing-data-attributes-in-javascript\">a special API</a> that makes them nice to manipulate. <a href=\"https://twitter.com/munawwarfiroz/status/1481156536277864450\" rel=\"noopener\">Munawwar Firoz had an idea</a> that gets this down to a one-liner:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">el.dataset.state = (+el.dataset.state % 3) + 1</code></pre>\n\n\n\n<h3 id=\"a-data-attribute-state-machine\">A data attribute state machine</h3>\n\n\n\n<p>You can <a href=\"https://twitter.com/DavidKPiano/status/1481044698152280068\" rel=\"noopener\">count on David Khourshid</a> to be ready with a state machine:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const simpleMachine = {\n  \"1\": \"2\",\n  \"2\": \"3\",\n  \"3\": \"1\"\n};\nel.dataset.state = simpleMachine[el.dataset.state];</code></pre>\n\n\n\n<h3 id=\"you-ll-almost-surely-want-a-function\">You&#8217;ll almost surely want a function</h3>\n\n\n\n<p>Give yourself a little abstraction, right? Many of the ideas wrote code this way, but so far I&#8217;ve move it out to focus on the idea itself. Here, I&#8217;ll leave the function in. This one is <a href=\"https://twitter.com/WebReflection/status/1481188307526631428\" rel=\"noopener\">from Andrea Giammarchi</a> in which a unique function for cycling through classes is set up ahead of time, then you call it as needed:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const rotator = (classes) => ({ classList }) => {\n  const current = classes.findIndex((cls) => classList.contains(cls));\n  classList.remove(...classes);\n  classList.add(classes[(current + 1) % classes.length]);\n};\n\nconst rotate = rotator([\"state-1\", \"state-2\", \"state-3\"]);\nrotate(el);</code></pre>\n\n\n\n<p>I heard from Kyle Simpson who had this same idea, almost character for character.</p>\n\n\n\n<h3 id=\"others\">Others?</h3>\n\n\n\n<p>There were more ideas in the replies to my <a href=\"https://twitter.com/chriscoyier/status/1481028373002473472\" rel=\"noopener\">original tweet</a>, but are, best I can tell, variations on what I&#8217;ve already shared above. Apologies if I missed yours! Feel free to share your idea again in the comments here. I see nobody used a <code>switch</code> statements — that could be a possibility!</p>\n\n\n\n<p>David Desandro went as far as recording a video, which is wonderful as it slowly abstracts the concepts further and further until it&#8217;s succinct but still readable and much more flexible:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"State variable and cycling through an array\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/hXrHZ_LSzkk?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p>And here&#8217;s a demo Pen with all the code for each example in there. They are numbered, so to test out another one, comment out the one that is uncommented, and uncomment another example:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxXeXPN\" src=\"//codepen.io/anon/embed/xxXeXPN?height=550&amp;theme-id=1&amp;slug-hash=xxXeXPN&amp;default-tab=js,result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxXeXPN\" title=\"CodePen Embed xxXeXPN\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/cycle-through-classes-html-element/\">How to Cycle Through Classes on an HTML Element</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Say you have three HTML classes, and a DOM element should only have one of them at a time:\n\n\n\n<div class=\"state-1\"></div>\n<div class=\"state-2\"></div>\n<div class=\"state-3\"></div>\n\n\n\nNow your job is to rotate them. That is, cycle through classes on an HTML element. When some event occurs, if the element has state-1 on it, remove state-1 and add state-2. If it has state-2 on it, remove that and add state-3. On the last state, remove it, and cycle back to state-1.\n\n\n\n\n\n\n\n\n\n\n\nIt’s notable that we’re talking about 3+ classes here. The DOM has a .classList.toggle() function, even one that takes a conditional as a second parameter, but that’s primarily useful in a two-class on/off situation, not cycling through classes.\n\n\n\nWhy? There is a number of reasons. Changing a class name gives you lots of power to re-style things in the DOM, and state management like that is a cornerstone of modern web development. But to be specific, in my case, I was wanting to do FLIP animations where I’d change a layout and trigger a tween animation between the different states.\n\n\n\nCareful about existing classes! I saw some ideas that overwrote .className, which isn’t friendly toward other classes that might be on the DOM element. All these are “safe” choices for cycling through classes in that way.\n\n\n\nBecause this is programming, there are lots of ways to get this done. Let’s cover a bunch of them — for fun. I tweeted about this issue, so many of these solutions are from people who chimed into that discussion.\n\n\n\nA verbose if/else statement to cycle through classes\n\n\n\nThis is what I did at first to cycle through classes. That’s how my brain works. Just write out very specific instructions for exactly what you want to happen:\n\n\n\nif (el.classList.contains(\"state-1\")) {\n  el.classList.remove(\"state-1\");\n  el.classList.add(\"state-2\");\n} else if (el.classList.contains(\"state-2\")) {\n  el.classList.remove(\"state-2\");\n  el.classList.add(\"state-3\");\n} else {\n  el.classList.remove(\"state-3\");\n  el.classList.add(\"state-1\");\n}\n\n\n\nI don’t mind the verbosity here, because to me it’s super clear what’s going on and will be easy to return to this code and “reason about it,” as they say. You could consider the verbosity a problem — surely there is a way to cycle through classes with less code. But a bigger issue is that it isn’t very extensible. There is no semblance of configuration (e.g. change the names of the classes easily) or simple way to add classes to the party, or remove them. \n\n\n\nWe could use constants, at least:\n\n\n\nconst STATE_1 = \"state-1\";\nconst STATE_2 = \"state-2\";\nconst STATE_3 = \"state-3\";\n\nif (el.classList.contains(STATE_1)) {\n  el.classList.remove(STATE_1);\n  el.classList.add(STATE_2);\n} else if (el.classList.contains(STATE_2)) {\n  el.classList.remove(STATE_2);\n  el.classList.add(STATE_3);\n} else {\n  el.classList.remove(STATE_3);\n  el.classList.add(STATE_1);\n}\n\n\n\nBut that’s not wildly different or better.\n\n\n\nRegEx off the old class, increment state, then re-add\n\n\n\nThis one comes from Tab Atkins. Since we know the format of the class, state-N, we can look for that, pluck off the number, use a little ternary to increment it (but not higher than the highest state), then add/remove the classes as a way of cycling through them:\n\n\n\nconst oldN = +/\\bstate-(\\d+)\\b/.exec(el.getAttribute('class'))[1];\nconst newN = oldN >= 3 ? 1 : oldN+1;\nel.classList.remove(`state-${oldN}`);\nel.classList.add(`state-${newN}`);\n\n\n\nFind the index of the class, then remove/add\n\n\n\nA bunch of techniques to cycle through classes center around setting up an array of classes up front. This acts as configuration for cycling through classes, which I think is a smart way to do it. Once you have that, you can find the relevant classes for adding and removing them. This one is from Christopher Kirk-Nielsen:\n\n\n\nconst classes = [\"state-1\", \"state-2\", \"state-3\"];\nconst activeIndex = classes.findIndex((c) => el.classList.contains(c));\nconst nextIndex = (activeIndex + 1) % classes.length;\n\nel.classList.remove(classes[activeIndex]);\nel.classList.add(classes[nextIndex]);\n\n\n\nChristopher had a nice idea for making the add/remove technique shorter as well. Turns out it’s the same…\n\n\n\nel.classList.remove(classes[activeIndex]);\nel.classList.add(classes[nextIndex]);\n\n// Does the same thing.\nel.classList.replace(classes[activeIndex], classes[nextIndex]);\n\n\n\nMayank had a similar idea for cycling through classes by finding the class in an array, only rather than using classList.contains(), you check the classes currently on the DOM element with what is in the array.\n\n\n\nconst states = [\"state-1\", \"state-2\", \"state-3\"];\nconst current = [...el.classList].find(cls => states.includes(cls));\nconst next = states[(states.indexOf(current) + 1) % states.length];\nel.classList.remove(current);\nel.classList.add(next);\n\n\n\nVariations of this were the most common idea. Here’s Jhey’s and here’s Mike Wagz which sets up functions for moving forward and backward.\n\n\n\nCascading replace statements\n\n\n\nSpeaking of that replace API, Chris Calo had a clever idea where you chain them with the or operator and rely on the fact that it returns true/false if it works or doesn’t. So you do all three and one of them will work!\n\n\n\n el.classList.replace(\"state-1\", \"state-2\") ||\n el.classList.replace(\"state-2\", \"state-3\") ||\n el.classList.replace(\"state-3\", \"state-1\");\n\n\n\nNicolò Ribaudo came to the same conclusion.\n\n\n\nJust cycle through class numbers\n\n\n\nIf you pre-configured a 1 upfront, you could cycle through classes 1-3 and add/remove them based on that. This is from Timothy Leverett who lists another similar option in the same tweet. \n\n\n\n// Assumes a `let s = 1` upfront\nel.classList.remove(`state-${s + 1}`);\ns = (s + 1) % 3;\nel.classList.add(`state-${s + 1}`);\n\n\n\nUse data-* attributes instead\n\n\n\nData attributes have the same specificity power, so I have no issue with this. They might actually be more clear in terms of state handling, but even better, they have a special API that makes them nice to manipulate. Munawwar Firoz had an idea that gets this down to a one-liner:\n\n\n\nel.dataset.state = (+el.dataset.state % 3) + 1\n\n\n\nA data attribute state machine\n\n\n\nYou can count on David Khourshid to be ready with a state machine:\n\n\n\nconst simpleMachine = {\n  \"1\": \"2\",\n  \"2\": \"3\",\n  \"3\": \"1\"\n};\nel.dataset.state = simpleMachine[el.dataset.state];\n\n\n\nYou’ll almost surely want a function\n\n\n\nGive yourself a little abstraction, right? Many of the ideas wrote code this way, but so far I’ve move it out to focus on the idea itself. Here, I’ll leave the function in. This one is from Andrea Giammarchi in which a unique function for cycling through classes is set up ahead of time, then you call it as needed:\n\n\n\nconst rotator = (classes) => ({ classList }) => {\n  const current = classes.findIndex((cls) => classList.contains(cls));\n  classList.remove(...classes);\n  classList.add(classes[(current + 1) % classes.length]);\n};\n\nconst rotate = rotator([\"state-1\", \"state-2\", \"state-3\"]);\nrotate(el);\n\n\n\nI heard from Kyle Simpson who had this same idea, almost character for character.\n\n\n\nOthers?\n\n\n\nThere were more ideas in the replies to my original tweet, but are, best I can tell, variations on what I’ve already shared above. Apologies if I missed yours! Feel free to share your idea again in the comments here. I see nobody used a switch statements — that could be a possibility!\n\n\n\nDavid Desandro went as far as recording a video, which is wonderful as it slowly abstracts the concepts further and further until it’s succinct but still readable and much more flexible:\n\n\n\n\n\n\n\n\n\nAnd here’s a demo Pen with all the code for each example in there. They are numbered, so to test out another one, comment out the one that is uncommented, and uncomment another example:\n\n\n\nCodePen Embed Fallback\n\nHow to Cycle Through Classes on an HTML Element originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-26T19:48:49.000Z",
      "date_modified": "2022-01-26T19:48:49.000Z",
      "_plugin": {
        "pageFilename": "d3e050b389f75661dfcdc959e62ae848a59f1f574ac5ea9c58867eaba24ae310.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362018",
      "url": "https://css-tricks.com/css-borders-using-masks/",
      "title": "Fancy CSS Borders Using Masks",
      "summary": "Have you ever tried to make CSS borders in a repeating zig-zag pattern? Like where a colored section of a website ends and another differently colored section begins — not with a straight line, but angled zig zags, rounded humps, …\n\nFancy CSS Borders Using Masks originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Have you ever tried to make CSS borders in a repeating zig-zag pattern? Like where a colored section of a website ends and another differently colored section begins — not with a straight line, but angled zig zags, rounded humps, or waves. There are a number of ways you could do this sort of CSS border, dating all the way back to using a <code>background-image</code>. But we can get more modern and programmatic with it. In this article, we’ll look at some modern CSS mask techniques to achieve the look.</p>\n\n\n\n<span id=\"more-362018\"></span>\n\n\n\n<p>Before we dig into the technical parts, though, let’s take a look at what we are building. I have made a <a href=\"https://css-generators.com/custom-borders/\" target=\"_blank\" rel=\"noreferrer noopener\">CSS border generator</a> where you can easily generate any kind of border within a few seconds and get the CSS code.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"usage-of-the-generator-mp4\" width='500' height='207' src='https://videopress.com/embed/KzpD7MM6?cover=1&amp;muted=1&amp;persistVolume=0&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>Did you see that? With the <a href=\"https://css-tricks.com/almanac/properties/m/mask/\">CSS <code>mask</code> property</a> and a few <a href=\"https://css-tricks.com/a-complete-guide-to-css-gradients/\">CSS gradients</a>, we get a responsive and cool-looking border — all with CSS by itself. Not only this, but such effect can be applied to any element where we can have any kind of coloration (e.g. image, gradient, etc). We get all this without extra elements, pseudo elements, or magic numbers coming from nowhere!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Oh great! All I have to do is to copy/paste code and it’s done!</p></blockquote>\n\n\n\n<p>True, but it’s good to understand the logic to be able to manually adjust the code if you need to.</p>\n\n\n\n<h3>Masking things</h3>\n\n\n\n<p>Since all our effects rely on the CSS <code>mask</code> property, let’s take a quick refresh on how it works. Straight from <a href=\"https://drafts.fxtf.org/css-masking/#masking\" rel=\"noopener\">the spec</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The effect of applying a mask to a graphical object is as if the graphical object will be painted onto the background through a mask, thus completely or partially masking out parts of the graphical object.</p></blockquote>\n\n\n\n<p>If we check the <a href=\"https://drafts.fxtf.org/css-masking/#the-mask-image\" rel=\"noopener\">formal syntax</a> of the <code>mask</code> property we can see it accepts an <code>&lt;image&gt;</code> as a value, meaning either a URL of an image or a color gradient. Gradients are what we’ll be using here. Let’s start with basic examples:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYGMjmO\" src=\"//codepen.io/anon/embed/eYGMjmO?height=300&amp;theme-id=1&amp;slug-hash=eYGMjmO&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYGMjmO\" title=\"CodePen Embed eYGMjmO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>In the first example of this demo, a gradient is used to make it appear as though the image is fading away. The second example, meanwhile, also uses a gradient, but rather than a soft transition between colors, a <a href=\"https://css-tricks.com/books/greatest-css-tricks/hard-stop-gradients/\">hard color stop</a> is used to hide (or mask) half of the image. That second example illustrates the technique we will be using to create our fancy borders.</p>\n\n\n\n<p>Oh, and the CSS <code>mask</code> property can take multiple gradients as long as they are comma-separated. That means we have even more control to mask additional parts of the image.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJxvwVZ\" src=\"//codepen.io/anon/embed/OJxvwVZ?height=300&amp;theme-id=1&amp;slug-hash=OJxvwVZ&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJxvwVZ\" title=\"CodePen Embed OJxvwVZ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>That example showing multiple masking gradients may look a bit tricky at first glance, but what’s happening is the same as applying the multiple gradients on the <code>background</code> property. But instead of using a color that blends in with the page background, we use a “transparent” black value (<code>#0000</code>) for the hidden parts of the image and full black (<code>#000</code>) for the visible parts.</p>\n\n\n\n<p>That’s it! Now we can tackle our fancy borders.</p>\n\n\n\n<h3>Zig-Zag CSS borders</h3>\n\n\n\n<p>As we saw in the video at the start of this article, <a href=\"https://css-generators.com/custom-borders/\" target=\"_blank\" rel=\"noreferrer noopener\">the generator</a> can apply borders on one side, two sides, or all sides. Let’s start with the bottom side using a step-by-step illustration:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNGqMQE\" src=\"//codepen.io/anon/embed/oNGqMQE?height=510&amp;theme-id=1&amp;slug-hash=oNGqMQE&amp;default-tab=result\" height=\"510\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNGqMQE\" title=\"CodePen Embed oNGqMQE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<ol><li>We start by adding the first gradient layer with a solid color (<code>red</code>) at the top. A height that’s equal to <code>calc(100% - 40px)</code> is used to leave <code>40px</code> of empty space at the bottom.</li><li>We add a second gradient placed at the bottom that takes the remaining height of the container. There&#8217;s a little bit of geometry happening to make this work.</li></ol>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"918\" height=\"329\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641129713838_image.png?resize=918%2C329&#038;ssl=1\" alt=\"Diagram showing how the shape of a zig-zag is created in CSS. An upside down triangle in blue represents the shape and green areas to the left and right of it show the leftover space that is masked out with CSS.\" class=\"wp-image-362029\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641129713838_image.png?w=918&amp;ssl=1 918w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641129713838_image.png?resize=300%2C108&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641129713838_image.png?resize=768%2C275&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<ol start=\"3\"><li>Next, we repeat the last gradient horizontally (replacing <code>no-repeat</code> with <code>repeat-x</code>). We can already see the zig-zag shape!</li><li>Gradients are known to have anti-aliasing issues creating jagged edges (especially on Chrome). To avoid this, we add a slight transition between the colors, changing <code>blue 90deg, green 0</code> to <code>green, blue 1deg 89deg, green 90deg</code>.</li><li>Then we update the colors to have a uniform shape</li><li>Last, we use everything inside the <code>mask</code> property!</li></ol>\n\n\n\n<p>We can extract two variables from those steps to define our shape: size (<code>40px</code>) and angle (<code>90deg</code>). Here’s how we can express that using placeholders for those variables. I will be using JavaScript to replace those variables with their final values.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(red 0 0) top/100% calc(100% - {size}) no-repeat,\n  conic-gradient(\n    from {-angle/2} at bottom,\n    #0000, #000 1deg {angle - 1} ,#0000 {angle}\n  ) bottom/{size*2*tan(angle/2)} {size} repeat-x;</code></pre>\n\n\n\n<p>We can use CSS custom properties for the size and the angle, but trigonometric functions are unsupported features at this moment. In the future, we’ll be able to do something like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--size: 40px;\n--angle: 90deg;\nmask:\n  linear-gradient(red 0 0) top/100% calc(100% - var(--size)) no-repeat,\n  conic-gradient(\n    from calc(var(--angle)/-2) at bottom,\n    #0000, #000 1deg calc(var(--angle) - 1deg), #0000 var(--angle)\n  ) bottom/calc(var(--size)*2*tan(var(--angle)/2)) var(--size) repeat-x;</code></pre>\n\n\n\n<p>Similar to the bottom border, the top one will have almost the same code with a few adjustments:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(red 0 0) bottom/100% calc(100% - {size}) no-repeat,\n  conic-gradient(\n    from {180deg - angle/2} at top,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) top/{size*2*tan(angle/2)} {size} repeat-x;</code></pre>\n\n\n\n<p>We changed <code>bottom</code> with <code>top</code> and <code>top</code> with <code>bottom</code>, then updated the rotation of the gradient to <code>180deg - angle/2</code> instead of <code>-angle/2</code>. As simple as that!</p>\n\n\n\n<p>That’s the pattern we can use for the rest of the sides, like the left:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(red 0 0) right/calc(100% - {size}) 100% no-repeat,\n  conic-gradient(\n    from {90deg - angle/2} at left,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) left/{size} {size*2*tan(angle/2)} repeat-y;</code></pre>\n\n\n\n<p>…and the right:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(red 0 0) left/calc(100% - {size}) 100% no-repeat,\n  conic-gradient(\n    from {-90deg - angle/2} at right,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) right/{size} {size*2*tan(angle/2)} repeat-y;</code></pre>\n\n\n\n<p>Let’s make the borders for when they’re applied to two sides at once. We can actually reuse the same code. To get both the top and bottom borders, we simply combine the code of both the top and bottom border.</p>\n\n\n\n<p>We use the <code>conic-gradient()</code> of the top side,  the <code>conic-gradient()</code> of the bottom side plus a <code>linear-gradient()</code> to cover the middle area. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(#000 0 0) center/100% calc(100% - {2*size}) no-repeat,\n  conic-gradient(\n    from {-angle/2} at bottom,\n    #0000, #000 1deg {angle - 1},\n    #0000 {angle}\n  ) bottom/{size*2*tan(angle/2)} {size} repeat-x;\n  conic-gradient(\n    from {180deg - angle/2} at top, \n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) top/{size*2*tan(angle/2)} {size} repeat-x;</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWaYOOM\" src=\"//codepen.io/anon/embed/NWaYOOM?height=450&amp;theme-id=1&amp;slug-hash=NWaYOOM&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWaYOOM\" title=\"CodePen Embed NWaYOOM\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The same goes when applying borders to the left and right sides together:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(#000 0 0) center/calc(100% - {2*size}) 100% no-repeat,\n  conic-gradient(\n    from {90deg - angle/2} at left,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) left/{size} {size*2*tan(angle/2)} repeat-y,\n  conic-gradient(\n    from {-90deg - angle/2} at right,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) right/{size} {size*2*tan(angle/2)} repeat-y;</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWEVPxx\" src=\"//codepen.io/anon/embed/MWEVPxx?height=400&amp;theme-id=1&amp;slug-hash=MWEVPxx&amp;default-tab=result\" height=\"400\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWEVPxx\" title=\"CodePen Embed MWEVPxx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>So, if we want to apply borders to all of the sides at once, we add all the gradients together, right?</p></blockquote>\n\n\n\n<p>Exactly! We have four conic gradients (one on each side) and one <code>linear-gradient()</code> in the middle. We set a fixed angle equal to <code>90deg</code> because it the only one that results in nicer corners without weird overlapping. Note that I’m also using <code>space</code> instead of <code>repeat-x</code> or <code>repeat-y</code> to avoid bad result on corners like this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYzavXq\" src=\"//codepen.io/anon/embed/LYzavXq?height=500&amp;theme-id=1&amp;slug-hash=LYzavXq&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYzavXq\" title=\"CodePen Embed LYzavXq\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"background-space-mp4\" width='500' height='267' src='https://videopress.com/embed/VYDliPCk?cover=1&amp;controls=0&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div><figcaption>Resizing a container with four sides configuration</figcaption></figure>\n\n\n\n<h3>Rounded CSS borders</h3>\n\n\n\n<p>Now let’s tackle rounded borders!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Oh no! another long explanation with a lot of calculation?!</p></blockquote>\n\n\n\n<p>Not at all! There is nothing to explain here. We take everything from the zig-zag example and update the <code>conic-gradient()</code> with a <code>radial-gradient()</code>. It’s even easier because we don’t have any angles to deal with — only the size variable.</p>\n\n\n\n<p>Here is an illustration for one side to see how little we need to do to switch from the zig-zag border to the rounded border:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_BawxaKV\" src=\"//codepen.io/anon/embed/BawxaKV?height=600&amp;theme-id=1&amp;slug-hash=BawxaKV&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed BawxaKV\" title=\"CodePen Embed BawxaKV\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Again, all I did there was replace the <code>conic-gradient()</code> with this (using placeholders for size):</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">background: \n  radial-gradient(circle farthest-side, #0000 98%, #000) \n  50% calc(100% + {size})/{1.85*size} {2*size} repeat-x</code></pre>\n\n\n\n<p>And this for the second one:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">background:\n  radial-gradient(circle farthest-side, #000 98%, #0000) \n  bottom/{1.85*size} {2*size} repeat-x</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What is the logic behind the magic numbers 1.85 and 98%?</p></blockquote>\n\n\n\n<p>Logically, we should use <code>100%</code> instead of <code>98%</code> to have a circle that touches the edges of the background area; but again, it’s the anti-aliasing issue and those jagged edges. We use a slightly smaller value to prevent weird overlapping.</p>\n\n\n\n<p>The <code>1.85</code> value is more of a personal preference than anything. I initially used <code>2</code> which is the logical value to get a perfect circle, but the result doesn&#8217;t look quite as nice, so the smaller value creates a more seamless overlap between the circles.</p>\n\n\n\n<p>Here’s the difference:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNGvNzO\" src=\"//codepen.io/anon/embed/rNGvNzO?height=600&amp;theme-id=1&amp;slug-hash=rNGvNzO&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNGvNzO\" title=\"CodePen Embed rNGvNzO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now we need to replicate this for the rest of the sides, just as we did with the zig-zag CSS border. </p>\n\n\n\n<p>There is a small difference, however, when applying all four sides at once.  You will notice that for one of the rounded borders, I used only one <code>radial-gradient()</code> instead of four. That makes sense since we can repeat a circular shape over all the sides using one gradient like illustrated below:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ZEXoEVW\" src=\"//codepen.io/anon/embed/ZEXoEVW?height=525&amp;theme-id=1&amp;slug-hash=ZEXoEVW&amp;default-tab=result\" height=\"525\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ZEXoEVW\" title=\"CodePen Embed ZEXoEVW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here’s the final CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(#000 0 0) center/calc(100% - {1.85*size}) calc(100% - {1.85*size}) no-repeat,\n  radial-gradient(farthest-side,#000 98%,#0000) 0 0/{2*size} {2*size} round;</code></pre>\n\n\n\n<p class=\"is-style-explanation\">Note how I’m using the <code>round</code> value instead of <code>repeat</code>. That’s to make sure we don&#8217;t cut off any of the circles. And, again, that <code>1.85</code> value is a personal preference value.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"all-sides-rounded-mp4\" width='500' height='267' src='https://videopress.com/embed/fRRg3xQp?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>For the other type of rounded border, we still have to use four radial gradients, but I had to introduce the CSS <a href=\"https://css-tricks.com/almanac/properties/c/clip-path/\"><code>clip-path</code></a> property to correct an overlapping issue at the corners. You can see the difference between with and without <code>clip-path</code> in the following demo:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoJewpM\" src=\"//codepen.io/anon/embed/PoJewpM?height=300&amp;theme-id=1&amp;slug-hash=PoJewpM&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoJewpM\" title=\"CodePen Embed PoJewpM\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>It’s an eight-point path to cut the corners:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: polygon(\n   {2*size} 0,calc(100% - {2*size}) 0,\n   100% {2*size},100% calc(100% - {2*size}),\n   calc(100% - {2*size}) 100%,{2*size} 100%,\n   0 calc(100% - {2*size}),0 {2*size}\n);</code></pre>\n\n\n\n<h3>Wavy CSS borders</h3>\n\n\n\n<p>Both the zig-zag and rounded CSS borders needed one gradient to get the shapes we wanted. What about a wavy sort of border? That take two gradients. Below is an illustration to understand how we create one wave with two radial gradients.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"717\" height=\"396\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641213151962_image.png?resize=717%2C396&#038;ssl=1\" alt=\"Showing three diagrams of CSS borders, each with a piece of the border and an accompanying snippet of CSS to achieve the effect.It shows how one part cuts a circular white shape out of a red rectangle. The second part showing how to create a red circle shape. The third part shows two radial gradients used to position the two circles so they combine to create the wave shape.\" class=\"wp-image-362031\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641213151962_image.png?w=717&amp;ssl=1 717w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641213151962_image.png?resize=300%2C166&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We repeat that shape at the bottom plus a linear gradient at the top and we get the wavy border at the bottom side. </p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNYNdqv\" src=\"//codepen.io/anon/embed/rNYNdqv?height=500&amp;theme-id=1&amp;slug-hash=rNYNdqv&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNYNdqv\" title=\"CodePen Embed rNYNdqv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask: \n  linear-gradient(#000 0 0) top/100% calc(100% - {2*size}) no-repeat,\n  radial-gradient(circle {size} at 75% 100%,#0000 98%,#000) 50% calc(100% - {size})/{4*size} {size} repeat-x,\n  radial-gradient(circle closest-side at 25% 50%,#000 99%,#0000 101%) bottom/{4*size} {2*size} repeat-x;</code></pre>\n\n\n\n<p>We do the same process for the other sides as we did with the zig-zag and rounded CSS borders. All we need is to update a few variables to have a different wave for each side.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"870\" height=\"467\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641215714172_image.png?resize=870%2C467&#038;ssl=1\" alt=\"\" class=\"wp-image-362034\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641215714172_image.png?w=870&amp;ssl=1 870w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641215714172_image.png?resize=300%2C161&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641215714172_image.png?resize=768%2C412&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Showing part of the CSS for each side.&nbsp;You can find the full code&nbsp;over at&nbsp;<a target=\"_blank\" href=\"https://css-generators.com/custom-borders/\" rel=\"noreferrer noopener\">the generator</a>.</figcaption></figure>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What about applying a wavy CSS border on all four sides? Will we have 9 gradients in total??”</p></blockquote>\n\n\n\n<p>Nope, and that’s because there is no demo where a wavy border is applied to all four sides. I was unable to find a combination of gradients that gives a good result on the corners. Maybe someone reading this knows a good approach? &#x1f609;</p>\n\n\n\n<h3>That’s <em>border</em>line great stuff!</h3>\n\n\n\n<p>So, you know the ins and outs of <a href=\"https://css-generators.com/custom-borders/\" target=\"_blank\" rel=\"noreferrer noopener\">my cool little online CSS border generator</a>! Sure, you can use the code it spits out and do just fine — but now you have the secret sauce recipe that makes it work.</p>\n\n\n\n<p>Specifically, we saw how gradients can be used to mask portions of an element. Then we went to work on <em>multiple</em> gradients to make certain shapes from those gradient CSS masks. And the result is a pattern that can be used along the edges of an element, creating the appearance of fancy borders that you might otherwise result to <code>background-image</code> for. Only this way, all it takes is swapping out some values to change the appearance rather than replace an entire raster image file or something.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-borders-using-masks/\">Fancy CSS Borders Using Masks</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Have you ever tried to make CSS borders in a repeating zig-zag pattern? Like where a colored section of a website ends and another differently colored section begins — not with a straight line, but angled zig zags, rounded humps, or waves. There are a number of ways you could do this sort of CSS border, dating all the way back to using a background-image. But we can get more modern and programmatic with it. In this article, we’ll look at some modern CSS mask techniques to achieve the look.\n\n\n\n\n\n\n\nBefore we dig into the technical parts, though, let’s take a look at what we are building. I have made a CSS border generator where you can easily generate any kind of border within a few seconds and get the CSS code.\n\n\n\n\n\n\n\n\n\nDid you see that? With the CSS mask property and a few CSS gradients, we get a responsive and cool-looking border — all with CSS by itself. Not only this, but such effect can be applied to any element where we can have any kind of coloration (e.g. image, gradient, etc). We get all this without extra elements, pseudo elements, or magic numbers coming from nowhere!\n\n\n\nOh great! All I have to do is to copy/paste code and it’s done!\n\n\n\nTrue, but it’s good to understand the logic to be able to manually adjust the code if you need to.\n\n\n\nMasking things\n\n\n\nSince all our effects rely on the CSS mask property, let’s take a quick refresh on how it works. Straight from the spec:\n\n\n\nThe effect of applying a mask to a graphical object is as if the graphical object will be painted onto the background through a mask, thus completely or partially masking out parts of the graphical object.\n\n\n\nIf we check the formal syntax of the mask property we can see it accepts an <image> as a value, meaning either a URL of an image or a color gradient. Gradients are what we’ll be using here. Let’s start with basic examples:\n\n\n\nCodePen Embed Fallback\n\n\n\nIn the first example of this demo, a gradient is used to make it appear as though the image is fading away. The second example, meanwhile, also uses a gradient, but rather than a soft transition between colors, a hard color stop is used to hide (or mask) half of the image. That second example illustrates the technique we will be using to create our fancy borders.\n\n\n\nOh, and the CSS mask property can take multiple gradients as long as they are comma-separated. That means we have even more control to mask additional parts of the image.\n\n\n\nCodePen Embed Fallback\n\n\n\nThat example showing multiple masking gradients may look a bit tricky at first glance, but what’s happening is the same as applying the multiple gradients on the background property. But instead of using a color that blends in with the page background, we use a “transparent” black value (#0000) for the hidden parts of the image and full black (#000) for the visible parts.\n\n\n\nThat’s it! Now we can tackle our fancy borders.\n\n\n\nZig-Zag CSS borders\n\n\n\nAs we saw in the video at the start of this article, the generator can apply borders on one side, two sides, or all sides. Let’s start with the bottom side using a step-by-step illustration:\n\n\n\nCodePen Embed Fallback\n\n\n\nWe start by adding the first gradient layer with a solid color (red) at the top. A height that’s equal to calc(100% - 40px) is used to leave 40px of empty space at the bottom.We add a second gradient placed at the bottom that takes the remaining height of the container. There’s a little bit of geometry happening to make this work.\n\n\n\n\n\n\n\nNext, we repeat the last gradient horizontally (replacing no-repeat with repeat-x). We can already see the zig-zag shape!Gradients are known to have anti-aliasing issues creating jagged edges (especially on Chrome). To avoid this, we add a slight transition between the colors, changing blue 90deg, green 0 to green, blue 1deg 89deg, green 90deg.Then we update the colors to have a uniform shapeLast, we use everything inside the mask property!\n\n\n\nWe can extract two variables from those steps to define our shape: size (40px) and angle (90deg). Here’s how we can express that using placeholders for those variables. I will be using JavaScript to replace those variables with their final values.\n\n\n\nmask:\n  linear-gradient(red 0 0) top/100% calc(100% - {size}) no-repeat,\n  conic-gradient(\n    from {-angle/2} at bottom,\n    #0000, #000 1deg {angle - 1} ,#0000 {angle}\n  ) bottom/{size*2*tan(angle/2)} {size} repeat-x;\n\n\n\nWe can use CSS custom properties for the size and the angle, but trigonometric functions are unsupported features at this moment. In the future, we’ll be able to do something like this:\n\n\n\n--size: 40px;\n--angle: 90deg;\nmask:\n  linear-gradient(red 0 0) top/100% calc(100% - var(--size)) no-repeat,\n  conic-gradient(\n    from calc(var(--angle)/-2) at bottom,\n    #0000, #000 1deg calc(var(--angle) - 1deg), #0000 var(--angle)\n  ) bottom/calc(var(--size)*2*tan(var(--angle)/2)) var(--size) repeat-x;\n\n\n\nSimilar to the bottom border, the top one will have almost the same code with a few adjustments:\n\n\n\nmask:\n  linear-gradient(red 0 0) bottom/100% calc(100% - {size}) no-repeat,\n  conic-gradient(\n    from {180deg - angle/2} at top,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) top/{size*2*tan(angle/2)} {size} repeat-x;\n\n\n\nWe changed bottom with top and top with bottom, then updated the rotation of the gradient to 180deg - angle/2 instead of -angle/2. As simple as that!\n\n\n\nThat’s the pattern we can use for the rest of the sides, like the left:\n\n\n\nmask:\n  linear-gradient(red 0 0) right/calc(100% - {size}) 100% no-repeat,\n  conic-gradient(\n    from {90deg - angle/2} at left,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) left/{size} {size*2*tan(angle/2)} repeat-y;\n\n\n\n…and the right:\n\n\n\nmask:\n  linear-gradient(red 0 0) left/calc(100% - {size}) 100% no-repeat,\n  conic-gradient(\n    from {-90deg - angle/2} at right,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) right/{size} {size*2*tan(angle/2)} repeat-y;\n\n\n\nLet’s make the borders for when they’re applied to two sides at once. We can actually reuse the same code. To get both the top and bottom borders, we simply combine the code of both the top and bottom border.\n\n\n\nWe use the conic-gradient() of the top side,  the conic-gradient() of the bottom side plus a linear-gradient() to cover the middle area. \n\n\n\nmask:\n  linear-gradient(#000 0 0) center/100% calc(100% - {2*size}) no-repeat,\n  conic-gradient(\n    from {-angle/2} at bottom,\n    #0000, #000 1deg {angle - 1},\n    #0000 {angle}\n  ) bottom/{size*2*tan(angle/2)} {size} repeat-x;\n  conic-gradient(\n    from {180deg - angle/2} at top, \n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) top/{size*2*tan(angle/2)} {size} repeat-x;\n\n\n\nCodePen Embed Fallback\n\n\n\nThe same goes when applying borders to the left and right sides together:\n\n\n\nmask:\n  linear-gradient(#000 0 0) center/calc(100% - {2*size}) 100% no-repeat,\n  conic-gradient(\n    from {90deg - angle/2} at left,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) left/{size} {size*2*tan(angle/2)} repeat-y,\n  conic-gradient(\n    from {-90deg - angle/2} at right,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) right/{size} {size*2*tan(angle/2)} repeat-y;\n\n\n\nCodePen Embed Fallback\n\n\n\nSo, if we want to apply borders to all of the sides at once, we add all the gradients together, right?\n\n\n\nExactly! We have four conic gradients (one on each side) and one linear-gradient() in the middle. We set a fixed angle equal to 90deg because it the only one that results in nicer corners without weird overlapping. Note that I’m also using space instead of repeat-x or repeat-y to avoid bad result on corners like this:\n\n\n\nCodePen Embed Fallback\n\n\n\n\n\nResizing a container with four sides configuration\n\n\n\nRounded CSS borders\n\n\n\nNow let’s tackle rounded borders!\n\n\n\nOh no! another long explanation with a lot of calculation?!\n\n\n\nNot at all! There is nothing to explain here. We take everything from the zig-zag example and update the conic-gradient() with a radial-gradient(). It’s even easier because we don’t have any angles to deal with — only the size variable.\n\n\n\nHere is an illustration for one side to see how little we need to do to switch from the zig-zag border to the rounded border:\n\n\n\nCodePen Embed Fallback\n\n\n\nAgain, all I did there was replace the conic-gradient() with this (using placeholders for size):\n\n\n\nbackground: \n  radial-gradient(circle farthest-side, #0000 98%, #000) \n  50% calc(100% + {size})/{1.85*size} {2*size} repeat-x\n\n\n\nAnd this for the second one:\n\n\n\nbackground:\n  radial-gradient(circle farthest-side, #000 98%, #0000) \n  bottom/{1.85*size} {2*size} repeat-x\n\n\n\nWhat is the logic behind the magic numbers 1.85 and 98%?\n\n\n\nLogically, we should use 100% instead of 98% to have a circle that touches the edges of the background area; but again, it’s the anti-aliasing issue and those jagged edges. We use a slightly smaller value to prevent weird overlapping.\n\n\n\nThe 1.85 value is more of a personal preference than anything. I initially used 2 which is the logical value to get a perfect circle, but the result doesn’t look quite as nice, so the smaller value creates a more seamless overlap between the circles.\n\n\n\nHere’s the difference:\n\n\n\nCodePen Embed Fallback\n\n\n\nNow we need to replicate this for the rest of the sides, just as we did with the zig-zag CSS border. \n\n\n\nThere is a small difference, however, when applying all four sides at once.  You will notice that for one of the rounded borders, I used only one radial-gradient() instead of four. That makes sense since we can repeat a circular shape over all the sides using one gradient like illustrated below:\n\n\n\nCodePen Embed Fallback\n\n\n\nHere’s the final CSS:\n\n\n\nmask:\n  linear-gradient(#000 0 0) center/calc(100% - {1.85*size}) calc(100% - {1.85*size}) no-repeat,\n  radial-gradient(farthest-side,#000 98%,#0000) 0 0/{2*size} {2*size} round;\n\n\n\nNote how I’m using the round value instead of repeat. That’s to make sure we don’t cut off any of the circles. And, again, that 1.85 value is a personal preference value.\n\n\n\n\n\n\n\n\n\nFor the other type of rounded border, we still have to use four radial gradients, but I had to introduce the CSS clip-path property to correct an overlapping issue at the corners. You can see the difference between with and without clip-path in the following demo:\n\n\n\nCodePen Embed Fallback\n\n\n\nIt’s an eight-point path to cut the corners:\n\n\n\nclip-path: polygon(\n   {2*size} 0,calc(100% - {2*size}) 0,\n   100% {2*size},100% calc(100% - {2*size}),\n   calc(100% - {2*size}) 100%,{2*size} 100%,\n   0 calc(100% - {2*size}),0 {2*size}\n);\n\n\n\nWavy CSS borders\n\n\n\nBoth the zig-zag and rounded CSS borders needed one gradient to get the shapes we wanted. What about a wavy sort of border? That take two gradients. Below is an illustration to understand how we create one wave with two radial gradients.\n\n\n\n\n\n\n\nWe repeat that shape at the bottom plus a linear gradient at the top and we get the wavy border at the bottom side. \n\n\n\nCodePen Embed Fallback\n\n\n\nmask: \n  linear-gradient(#000 0 0) top/100% calc(100% - {2*size}) no-repeat,\n  radial-gradient(circle {size} at 75% 100%,#0000 98%,#000) 50% calc(100% - {size})/{4*size} {size} repeat-x,\n  radial-gradient(circle closest-side at 25% 50%,#000 99%,#0000 101%) bottom/{4*size} {2*size} repeat-x;\n\n\n\nWe do the same process for the other sides as we did with the zig-zag and rounded CSS borders. All we need is to update a few variables to have a different wave for each side.\n\n\n\nShowing part of the CSS for each side. You can find the full code over at the generator.\n\n\n\nWhat about applying a wavy CSS border on all four sides? Will we have 9 gradients in total??”\n\n\n\nNope, and that’s because there is no demo where a wavy border is applied to all four sides. I was unable to find a combination of gradients that gives a good result on the corners. Maybe someone reading this knows a good approach? 😉\n\n\n\nThat’s borderline great stuff!\n\n\n\nSo, you know the ins and outs of my cool little online CSS border generator! Sure, you can use the code it spits out and do just fine — but now you have the secret sauce recipe that makes it work.\n\n\n\nSpecifically, we saw how gradients can be used to mask portions of an element. Then we went to work on multiple gradients to make certain shapes from those gradient CSS masks. And the result is a pattern that can be used along the edges of an element, creating the appearance of fancy borders that you might otherwise result to background-image for. Only this way, all it takes is swapping out some values to change the appearance rather than replace an entire raster image file or something.\n\nFancy CSS Borders Using Masks originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-26T14:26:49.000Z",
      "date_modified": "2022-01-26T14:26:49.000Z",
      "_plugin": {
        "pageFilename": "de13b1aa5b89e8e64affe9380c204e7fb63e33dd9bf1fe85767d7f120bf8eacf.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=362044",
      "url": "https://css-tricks.com/component-spacing-design-system/",
      "title": "How Do You Handle Component Spacing in a Design System?",
      "summary": "Say you’ve got a <Card /> component. It’s highly likely it shouldn’t be butted right up against any other components with no spacing around it. That’s true for… pretty much every component. So, how do you handle component spacing in …\n\nHow Do You Handle Component Spacing in a Design System? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Say you&#8217;ve got a <code>&lt;Card /&gt;</code> component. It&#8217;s highly likely it shouldn&#8217;t be butted right up against any other components with no spacing around it. That&#8217;s true for&#8230; pretty much every component. So, how do you handle component spacing in a design system?</p>\n\n\n\n<p>Do you apply spacing using margin directly on the <code>&lt;Card /&gt;</code>? Perhaps <code>margin-block-end: 1rem; margin-inline-end: 1rem;</code> so it pushes away from the two sides where more content natural flows? That&#8217;s a little presumptuous. Perhaps the cards are children inside a <code>&lt;Grid /&gt;</code> component and the grid applies a <code>gap: 1rem</code>.  That&#8217;s awkward, as now the <code>&lt;Card /&gt;</code> component spacing is going to conflict with the <code>&lt;Grid /&gt;</code> component spacing, which is very likely not what you want, not to mention the amount of space is hard coded.</p>\n\n\n\n<span id=\"more-362044\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1709\" height=\"1048\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=1709%2C1048&#038;ssl=1\" alt=\"Example of a component spacing where a card component is to the left of an accordion component and above an article, with 50 pixels of spacing between all three elements. Lorem i-sum text throughout in a mono font. The card has a Calvin and Hobbes comic image.\" class=\"wp-image-362229\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?w=1709&amp;ssl=1 1709w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=300%2C184&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=1024%2C628&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=768%2C471&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=1536%2C942&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=1000%2C613&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Adding space to the inline start and block end of a card component.</figcaption></figure>\n\n\n\n<h2>Different perspectives on component spacing</h2>\n\n\n\n<p>Eric Bailey <a href=\"https://ericwbailey.design/writing/where-do-you-put-spacing-on-design-system-components/\" rel=\"noopener\">got into this recently</a> and looked at some options:</p>\n\n\n\n<ul><li>You could bake spacing into every component and try to be as clever as you can about it. (But that&#8217;s pretty limiting.)</li><li>You could pass in component spacing, like <code>&lt;Card space=\"xxl\" /&gt;</code>. (That can be a good approach, likely needs more than one prop, maybe even one for each direction, which is quite verbose.)</li><li>You could use no component spacing and create something like a <code>&lt;Spacer /&gt;</code> or <code>&lt;Layout /&gt;</code> component specifically for spacing between components. (It breaks up the job of components nicely, but can also be verbose and add unnecessary DOM weight.)</li></ul>\n\n\n\n<p>This conversation has a wide spectrum of viewpoints, some as extreme as Max Stoiber saying <a href=\"https://mxstbr.com/thoughts/margin/\" rel=\"noopener\">just never use <code>margin</code> ever at all</a>. That&#8217;s a little dogmatic for me, but I like that it&#8217;s trying to rethink things. I do like the idea of taking the job of spacing and layout away from components themselves — like, for example, those content components should completely not care where they are used and let layout happen a level up from them. </p>\n\n\n\n<p>Adam Argyle <a href=\"https://dev.to/argyleink/5-css-predictions-for-2020-pl3\" rel=\"noopener\">predicted a few years back</a> that the use of <code>margin</code> in CSS would decline as the use of <code>gap</code> rises. He&#8217;s probably going to end up right about this, especially now that <a href=\"https://css-tricks.com/gaps-gasp/\">flexbox has <code>gap</code></a> and that developers have an appetite these dats to use CSS Flexbox and Grid on nearly everything at both a macro and micro level.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/component-spacing-design-system/\">How Do You Handle Component Spacing in a Design System?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Say you’ve got a <Card /> component. It’s highly likely it shouldn’t be butted right up against any other components with no spacing around it. That’s true for… pretty much every component. So, how do you handle component spacing in a design system?\n\n\n\nDo you apply spacing using margin directly on the <Card />? Perhaps margin-block-end: 1rem; margin-inline-end: 1rem; so it pushes away from the two sides where more content natural flows? That’s a little presumptuous. Perhaps the cards are children inside a <Grid /> component and the grid applies a gap: 1rem.  That’s awkward, as now the <Card /> component spacing is going to conflict with the <Grid /> component spacing, which is very likely not what you want, not to mention the amount of space is hard coded.\n\n\n\n\n\n\n\nAdding space to the inline start and block end of a card component.\n\n\n\nDifferent perspectives on component spacing\n\n\n\nEric Bailey got into this recently and looked at some options:\n\n\n\nYou could bake spacing into every component and try to be as clever as you can about it. (But that’s pretty limiting.)You could pass in component spacing, like <Card space=\"xxl\" />. (That can be a good approach, likely needs more than one prop, maybe even one for each direction, which is quite verbose.)You could use no component spacing and create something like a <Spacer /> or <Layout /> component specifically for spacing between components. (It breaks up the job of components nicely, but can also be verbose and add unnecessary DOM weight.)\n\n\n\nThis conversation has a wide spectrum of viewpoints, some as extreme as Max Stoiber saying just never use margin ever at all. That’s a little dogmatic for me, but I like that it’s trying to rethink things. I do like the idea of taking the job of spacing and layout away from components themselves — like, for example, those content components should completely not care where they are used and let layout happen a level up from them. \n\n\n\nAdam Argyle predicted a few years back that the use of margin in CSS would decline as the use of gap rises. He’s probably going to end up right about this, especially now that flexbox has gap and that developers have an appetite these dats to use CSS Flexbox and Grid on nearly everything at both a macro and micro level.\n\nHow Do You Handle Component Spacing in a Design System? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-25T23:10:20.000Z",
      "date_modified": "2022-01-25T23:10:20.000Z",
      "_plugin": {
        "pageFilename": "db32fbf0f0c3a182d313c09db828695401ead6d2bc6b2c8a960f44bed9b0256f.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360550",
      "url": "https://css-tricks.com/scroll-triggered-animation-vanilla-javascript/",
      "title": "How to Make a Scroll-Triggered Animation With Basic JavaScript",
      "summary": "A little bit of animation on a site can add some flair, impress users, and get their attention. You could have them run, no matter where they are on the page, immediately when the page loads. But what if your …\n\nHow to Make a Scroll-Triggered Animation With Basic JavaScript originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>A little bit of animation on a site can add some flair, impress users, and get their attention. You could have them run, no matter where they are on the page, immediately when the page loads. But what if your website is fairly long so it took some time for the user to scroll down to that element? They might miss it.</p>\n\n\n\n<p>You could have them run all the time, but perhaps the animation is best designed so that you for sure see the beginning of it. The trick is to start the animation when the user scrolls down to that element — scroll-triggered animation, if you will.</p>\n\n\n\n<span id=\"more-360550\"></span>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwMvbbg\" src=\"//codepen.io/anon/embed/VwMvbbg?height=450&amp;theme-id=1&amp;slug-hash=VwMvbbg&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwMvbbg\" title=\"CodePen Embed VwMvbbg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>To tackle this we use <strong>scroll triggers</strong>. When the user scrolls down to any particular element, we can use that event to do something. It could be anything, even the beginning of an animation. It could even be scroll-triggered lazy loading on images or lazy loading a whole comments section. In that way, we won’t force users to download elements that aren’t in the viewport on initial page load. Many users may never scroll down at all, so we really save them (and us) bandwidth and load time.</p>\n\n\n\n<p>Scroll triggers are very useful. There are many libraries out there that you can use to implement them, like <a href=\"https://greensock.com/scrolltrigger/\" rel=\"noopener\">Greensock’s popular ScrollTrigger plugin</a>. But you don’t <em>have</em> to use a third-party library, particularly for fairly simple ideas. In fact, you can implement it yourself using only a small handful of vanilla JavaScript. That is what we are going to do in this article.</p>\n\n\n\n<h3>Here&#8217;s how we&#8217;ll make our scroll-triggered event</h3>\n\n\n\n<ul><li>Create a function called <code>scrollTrigger</code> we can apply to certain elements</li><li>Apply an <code>.active</code> class on an element when it enters the viewport</li><li>Animate that .<code>active</code> class with CSS</li></ul>\n\n\n\n<p>There are times where adding a <code>.active</code> class is not enough. For example, we might want to execute a custom function instead. That means we should be able to pass a custom function that executes when the element is visible. Like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">scrollTrigger('.loader', {\n  cb: function(el) {\n    el.innerText = 'Loading ...'\n    loadContent()\n  }\n})</code></pre>\n\n\n\n<p>We’ll also attempt to handle scroll triggers for older non-supporting browsers.</p>\n\n\n\n<h3>But first, the <code>IntersectionObserver</code> API</h3>\n\n\n\n<p>The main JavaScript feature we’re going to use is the <a href=\"https://css-tricks.com/an-explanation-of-how-the-intersection-observer-watches/\">Intersection Observer</a>. This API provides a way to <em>asynchronously</em> observe changes in the intersection of a target element — and it does so more in a more performant way than watching for <code>scroll</code> events. We will use <code>IntersectionObserver</code> to monitor when scrolling reaches the point where certain elements are visible on the page.</p>\n\n\n\n<h3>Let’s start building the scroll trigger</h3>\n\n\n\n<p>We want to create a function called <code>scrollTrigger</code> and this function should take a selector as its argument.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function scrollTrigger(selector) {\n  // Multiple element can have same class/selector,\n  // so we are using querySelectorAll\n  let els = document.querySelectorAll(selector)\n  // The above `querySelectorAll` returns a nodeList,\n  // so we are converting it to an array\n  els = Array.from(els)\n  // Now we are iterating over the elements array\n  els.forEach(el => {\n    // `addObserver function` will attach the IntersectionObserver to the element\n    // We will create this function next\n    addObserver(el)\n  })\n}\n// Example usage\nscrollTrigger('.scroll-reveal')</code></pre>\n\n\n\n<p>Now let’s create the <code>addObserver</code> function that want to attach to the element using <code>IntersectionObserver</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function scrollTrigger(selector){\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el)\n  })\n}\nfunction addObserver(el){\n    // We are creating a new IntersectionObserver instance\n    let observer = new IntersectionObserver((entries, observer) => { // This takes a callback function that receives two arguments: the elements list and the observer instance.\n      entries.forEach(entry => {\n        // `entry.isIntersecting` will be true if the element is visible\n      if(entry.isIntersecting) {\n        entry.target.classList.add('active')\n        // We are removing the observer from the element after adding the active class\n        observer.unobserve(entry.target)\n      }\n    })\n  })\n  // Adding the observer to the element\n  observer.observe(el)\n}\n// Example usage\nscrollTrigger('.scroll-reveal')</code></pre>\n\n\n\n<p>If we do this and scroll to an element with a <code>.scroll-reveal</code> class, an <code>.active</code> class is added to that element. But notice that the <code>active</code> class is added as soon as any small part of the element is visible.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/scrolltrigger.gif?resize=1920%2C1080&#038;ssl=1\" alt=\"Animated screenshot of the scroll-triggered animation with the code for it to the left and DevTools open on the right.\" class=\"wp-image-360567\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>But that might be overkill. Instead, we might want the <code>.active</code> class to be added once a <em>bigger</em> part of the element is visible. Well, thankfully, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#creating_an_intersection_observer\" rel=\"noopener\"><code>IntersectionObserver</code> accepts some options for that</a> as its second argument. Let&#8217;s apply those to our <code>scrollTrigger</code> function:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"27\"><code markup=\"tt\">// Receiving options as an object\n// If the user doesn't pass any options, the default will be `{}`\nfunction scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    // Passing the options object to the addObserver function\n    addObserver(el, options)\n  })\n}\n// Receiving options passed from the scrollTrigger function\nfunction addObserver(el, options) {\n  let observer = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      if(entry.isIntersecting) {\n        entry.target.classList.add('active')\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options) // Passing the options object to the observer\n  observer.observe(el)\n}\n// Example usage 1:\n// scrollTrigger('.scroll-reveal')\n// Example usage 2:\nscrollTrigger('.scroll-reveal', {\n  rootMargin: '-200px'\n})</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_CD503958969E4F5622656FA7ED4FB1213AF5585B5A906D3210B0301CA7387C42_1639110569153_demo_2.gif\" alt=\"\"/></figure>\n\n\n\n<p>And just like that, our first two agenda items are fulfilled!</p>\n\n\n\n<p>Let’s move on to the third item — adding the ability to execute a callback function when we scroll to a targeted element. Specifically, let’s pass the callback function in our options object as <code>cb</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"12,13,14\"><code markup=\"tt\">function scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el, options)\n  })\n}\nfunction addObserver(el, options){\n  let observer = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      if(entry.isIntersecting){\n        if(options.cb) {\n          // If we've passed a callback function, we'll call it\n          options.cb(el)\n        } else{\n          // If we haven't, we'll just add the active class\n          entry.target.classList.add('active')\n        }\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options)\n  observer.observe(el)\n}\n// Example usage:\nscrollTrigger('.loader', {\n  rootMargin: '-200px',\n  cb: function(el){\n    el.innerText = 'Loading...'\n    // Done loading\n    setTimeout(() => {\n      el.innerText = 'Task Complete!'\n    }, 1000)\n  }\n})</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/kHk-F7QE.gif?resize=1920%2C1080&#038;ssl=1\" alt=\"An updated animated screenshot of the same scroll-triggered animation. As boxes enter the screen from the bottom, a they rotate. A &quot;loading&quot; message that changes to &quot;finished loading&quot; message is the last element to scroll into view. The code is open to the left of the animation.\" class=\"wp-image-360570\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>Great! There’s one last thing that we need to take care of: legacy browser support. Certain browsers might lack support for <code>IntersectionObserver</code>, so let’s handle that case in our <code>addObserver</code> function:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"10\"><code markup=\"tt\">function scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el, options)\n  })\n}\nfunction addObserver(el, options) {\n  // Check if `IntersectionObserver` is supported\n  if(!('IntersectionObserver' in window)) {\n    // Simple fallback\n    // The animation/callback will be called immediately so\n    // the scroll animation doesn't happen on unsupported browsers\n    if(options.cb){\n      options.cb(el)\n    } else{\n      entry.target.classList.add('active')\n    }\n    // We don't need to execute the rest of the code\n    return\n  }\n  let observer = new IntersectionObserver((entries, observer) =>; {\n    entries.forEach(entry => {\n      if(entry.isIntersecting) {\n        if(options.cb) {\n          options.cb(el)\n        } else{\n          entry.target.classList.add('active')\n        }\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options)\n  observer.observe(el)\n}\n// Example usages:\nscrollTrigger('.intro-text')\nscrollTrigger('.scroll-reveal', {\n  rootMargin: '-200px',\n})\nscrollTrigger('.loader', {\n  rootMargin: '-200px',\n  cb: function(el){\n    el.innerText = 'Loading...'\n    setTimeout(() => {\n      el.innerText = 'Task Complete!'\n    }, 1000)\n  }\n})</code></pre>\n\n\n\n<p>Here’s that live demo again:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwMvbbg\" src=\"//codepen.io/anon/embed/VwMvbbg?height=450&amp;theme-id=1&amp;slug-hash=VwMvbbg&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwMvbbg\" title=\"CodePen Embed VwMvbbg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And that&#8217;s all for this little journey! I hope you enjoyed it and learned something new in the process.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/scroll-triggered-animation-vanilla-javascript/\">How to Make a Scroll-Triggered Animation With Basic JavaScript</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "A little bit of animation on a site can add some flair, impress users, and get their attention. You could have them run, no matter where they are on the page, immediately when the page loads. But what if your website is fairly long so it took some time for the user to scroll down to that element? They might miss it.\n\n\n\nYou could have them run all the time, but perhaps the animation is best designed so that you for sure see the beginning of it. The trick is to start the animation when the user scrolls down to that element — scroll-triggered animation, if you will.\n\n\n\n\n\n\n\nCodePen Embed Fallback\n\n\n\nTo tackle this we use scroll triggers. When the user scrolls down to any particular element, we can use that event to do something. It could be anything, even the beginning of an animation. It could even be scroll-triggered lazy loading on images or lazy loading a whole comments section. In that way, we won’t force users to download elements that aren’t in the viewport on initial page load. Many users may never scroll down at all, so we really save them (and us) bandwidth and load time.\n\n\n\nScroll triggers are very useful. There are many libraries out there that you can use to implement them, like Greensock’s popular ScrollTrigger plugin. But you don’t have to use a third-party library, particularly for fairly simple ideas. In fact, you can implement it yourself using only a small handful of vanilla JavaScript. That is what we are going to do in this article.\n\n\n\nHere’s how we’ll make our scroll-triggered event\n\n\n\nCreate a function called scrollTrigger we can apply to certain elementsApply an .active class on an element when it enters the viewportAnimate that .active class with CSS\n\n\n\nThere are times where adding a .active class is not enough. For example, we might want to execute a custom function instead. That means we should be able to pass a custom function that executes when the element is visible. Like this:\n\n\n\nscrollTrigger('.loader', {\n  cb: function(el) {\n    el.innerText = 'Loading ...'\n    loadContent()\n  }\n})\n\n\n\nWe’ll also attempt to handle scroll triggers for older non-supporting browsers.\n\n\n\nBut first, the IntersectionObserver API\n\n\n\nThe main JavaScript feature we’re going to use is the Intersection Observer. This API provides a way to asynchronously observe changes in the intersection of a target element — and it does so more in a more performant way than watching for scroll events. We will use IntersectionObserver to monitor when scrolling reaches the point where certain elements are visible on the page.\n\n\n\nLet’s start building the scroll trigger\n\n\n\nWe want to create a function called scrollTrigger and this function should take a selector as its argument.\n\n\n\nfunction scrollTrigger(selector) {\n  // Multiple element can have same class/selector,\n  // so we are using querySelectorAll\n  let els = document.querySelectorAll(selector)\n  // The above `querySelectorAll` returns a nodeList,\n  // so we are converting it to an array\n  els = Array.from(els)\n  // Now we are iterating over the elements array\n  els.forEach(el => {\n    // `addObserver function` will attach the IntersectionObserver to the element\n    // We will create this function next\n    addObserver(el)\n  })\n}\n// Example usage\nscrollTrigger('.scroll-reveal')\n\n\n\nNow let’s create the addObserver function that want to attach to the element using IntersectionObserver:\n\n\n\nfunction scrollTrigger(selector){\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el)\n  })\n}\nfunction addObserver(el){\n    // We are creating a new IntersectionObserver instance\n    let observer = new IntersectionObserver((entries, observer) => { // This takes a callback function that receives two arguments: the elements list and the observer instance.\n      entries.forEach(entry => {\n        // `entry.isIntersecting` will be true if the element is visible\n      if(entry.isIntersecting) {\n        entry.target.classList.add('active')\n        // We are removing the observer from the element after adding the active class\n        observer.unobserve(entry.target)\n      }\n    })\n  })\n  // Adding the observer to the element\n  observer.observe(el)\n}\n// Example usage\nscrollTrigger('.scroll-reveal')\n\n\n\nIf we do this and scroll to an element with a .scroll-reveal class, an .active class is added to that element. But notice that the active class is added as soon as any small part of the element is visible.\n\n\n\n\n\n\n\nBut that might be overkill. Instead, we might want the .active class to be added once a bigger part of the element is visible. Well, thankfully, IntersectionObserver accepts some options for that as its second argument. Let’s apply those to our scrollTrigger function:\n\n\n\n// Receiving options as an object\n// If the user doesn't pass any options, the default will be `{}`\nfunction scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    // Passing the options object to the addObserver function\n    addObserver(el, options)\n  })\n}\n// Receiving options passed from the scrollTrigger function\nfunction addObserver(el, options) {\n  let observer = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      if(entry.isIntersecting) {\n        entry.target.classList.add('active')\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options) // Passing the options object to the observer\n  observer.observe(el)\n}\n// Example usage 1:\n// scrollTrigger('.scroll-reveal')\n// Example usage 2:\nscrollTrigger('.scroll-reveal', {\n  rootMargin: '-200px'\n})\n\n\n\n\n\n\n\nAnd just like that, our first two agenda items are fulfilled!\n\n\n\nLet’s move on to the third item — adding the ability to execute a callback function when we scroll to a targeted element. Specifically, let’s pass the callback function in our options object as cb:\n\n\n\nfunction scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el, options)\n  })\n}\nfunction addObserver(el, options){\n  let observer = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      if(entry.isIntersecting){\n        if(options.cb) {\n          // If we've passed a callback function, we'll call it\n          options.cb(el)\n        } else{\n          // If we haven't, we'll just add the active class\n          entry.target.classList.add('active')\n        }\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options)\n  observer.observe(el)\n}\n// Example usage:\nscrollTrigger('.loader', {\n  rootMargin: '-200px',\n  cb: function(el){\n    el.innerText = 'Loading...'\n    // Done loading\n    setTimeout(() => {\n      el.innerText = 'Task Complete!'\n    }, 1000)\n  }\n})\n\n\n\n\n\n\n\nGreat! There’s one last thing that we need to take care of: legacy browser support. Certain browsers might lack support for IntersectionObserver, so let’s handle that case in our addObserver function:\n\n\n\nfunction scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el, options)\n  })\n}\nfunction addObserver(el, options) {\n  // Check if `IntersectionObserver` is supported\n  if(!('IntersectionObserver' in window)) {\n    // Simple fallback\n    // The animation/callback will be called immediately so\n    // the scroll animation doesn't happen on unsupported browsers\n    if(options.cb){\n      options.cb(el)\n    } else{\n      entry.target.classList.add('active')\n    }\n    // We don't need to execute the rest of the code\n    return\n  }\n  let observer = new IntersectionObserver((entries, observer) =>; {\n    entries.forEach(entry => {\n      if(entry.isIntersecting) {\n        if(options.cb) {\n          options.cb(el)\n        } else{\n          entry.target.classList.add('active')\n        }\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options)\n  observer.observe(el)\n}\n// Example usages:\nscrollTrigger('.intro-text')\nscrollTrigger('.scroll-reveal', {\n  rootMargin: '-200px',\n})\nscrollTrigger('.loader', {\n  rootMargin: '-200px',\n  cb: function(el){\n    el.innerText = 'Loading...'\n    setTimeout(() => {\n      el.innerText = 'Task Complete!'\n    }, 1000)\n  }\n})\n\n\n\nHere’s that live demo again:\n\n\n\nCodePen Embed Fallback\n\n\n\nAnd that’s all for this little journey! I hope you enjoyed it and learned something new in the process.\n\nHow to Make a Scroll-Triggered Animation With Basic JavaScript originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-25T14:14:11.000Z",
      "date_modified": "2022-01-25T14:14:11.000Z",
      "_plugin": {
        "pageFilename": "7e83d7f1552a958ced40e301926e846eca2c85f14e589a9c82606176f4bda9ee.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360811",
      "url": "https://css-tricks.com/why-dont-developers-take-accessibility-seriously/",
      "title": "Why Don’t Developers Take Accessibility Seriously?",
      "summary": "You know that joke, “Two front-end developers walk into a bar and find they have nothing in common”? It’s funny, yet frustrating, because it’s true.\nThis article will present three different perspectives on accessibility in web design and development. Three …\n\nWhy Don’t Developers Take Accessibility Seriously? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>You know that joke, “Two front-end developers walk into a bar and find they have nothing in common”? It’s funny, yet frustrating, because it’s true.</p>\n\n\n\n<p>This article will present three different perspectives on accessibility in web design and development. Three perspectives that could help us bridge the great divide between users and designers/developers. It might help us find the common ground to building a better web and a better future.</p>\n\n\n\n<span id=\"more-360811\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1200\" height=\"600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=1200%2C600&#038;ssl=1\" alt=\"The corner of a white and blue building in focus, with white on the left and blue on the right representing the divide between developers when it comes to accessibility practices.\" class=\"wp-image-360818\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Photo by&nbsp;<a href=\"https://unsplash.com/@alexandernaglestad?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Alexander Naglestad</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/collections/487461/divisions?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Unsplash</a></figcaption></figure>\n\n\n\n<h3 class=\"ticss-462d3495\">Act 1</h3>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>“I just don’t know how developers don’t think about accessibility.”</p></blockquote>\n\n\n\n<p>Someone once said that to me. Let’s stop and think about it for a minute. Maybe there’s a perspective to be had.</p>\n\n\n\n<p>Think about how <em>many things</em> you have to know as a developer to successfully build a website. In any given day, for any given job position in web development, <a href=\"https://css-tricks.com/front-end-developer-aware/\">there are <em>the other details</em> of web development that come up</a>. Meaning, it’s more than <em>“just”</em> knowing HTML, CSS, ARIA, and JavaScript. Developers will also learn other things over the course of their careers, based on what they need to do.</p>\n\n\n\n<p>This could be package management, workspaces, code generators, collaboration tools, asset loading, asset management, CDN optimizations, bundle optimizations, unit tests, integration tests, visual regression tests, browser integration tests, code reviews, linting, formatting, communication through examples, changelogs, documentation, semantic versioning, security, app deployment, package releases, rollbacks, incremental improvements, incremental testing, continuous deployments, merge management, user experience, user interaction design, typography scales, aspect ratios for responsive design, data management, and… well, the list could go on, but you get the idea.</p>\n\n\n\n<p>As a developer, I consider myself to be pretty gosh darn smart for knowing how to do most these things! Stop and consider this: if you think about how many people are in the world, and compare that to how many people in the world can build websites, it’s proportionally a very small percentage. That’s kind of… <em>cool</em>. Incredible, even. On top of that, think about the last time you shipped code and how good that felt. “I figured out a hard thing and made it work! Ahhhhh! I feel amazing!”</p>\n\n\n\n<p>That kind of emotional high is pretty great, isn’t it? It makes me smile just to think about it.</p>\n\n\n\n<p>Now, imagine that an accessibility subject-matter expert comes along and essentially tells you that not only are you <em>not</em> particularly smart, but you have been doing things <em>wrong</em> for a long time.</p>\n\n\n\n<p>Ouch. Suddenly you don’t feel very good. Wrong? <em>Me??</em> What??? Your adrenaline can even kick in and you start to feel defensive. Time to stick up for yourself… right? Time to dig those heels.</p>\n\n\n\n<p>The cognitive dissonance can even be really overwhelming. It feels bad to find out that not only are you not good at the thing you thought you were really good at doing, but you’ve also been saying, “Screw you, who cares about you <em>anyway</em>,” to a whole bunch of people who can’t use the websites you’ve helped build because you (accidentally or otherwise) ignored that they even existed, that you ignored users who needed something more than the cleverness you were delivering for all these years. Ow.</p>\n\n\n\n<p>All things considered, it is quite understandable to me that a developer would want to put their fingers in their ears and pretend that <em>none</em> of this has happened at <em>all</em>, that they are still very clever and awesome. That the <em>one</em> “expert” telling you that you did it <em>wrong</em> is just one person. And one person is easy to ignore.</p>\n\n\n\n<p>— <em>end scene.</em></p>\n\n\n\n<h3>Act 2</h3>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>“I feel like I don’t matter at all.”</p></blockquote>\n\n\n\n<p>This is a common refrain I hear from people who need assistive technology to use websites, but often find them unusable for <a href=\"https://noti.st/melsumner/Phhimm/dont-break-the-web#sPuy1Xd\" rel=\"noopener\">any number of reasons</a>. Maybe they can’t read the text because the website’s design has ignored color contrast. Maybe there are nested interactive elements, so they <em>can’t even log in</em> to do things like pay a utility bill or buy essential items on their own. Maybe their favorite singer has finally set up an online shop but the user with assistive technology cannot even navigate the site because, while it might look interactive from a sighted-user’s perspective, all the buttons are divs and are not interactive with a keyboard… at all.</p>\n\n\n\n<p>This frustration can boil over and spill out; the brunt of this frustration is often borne by the folks who are trying to deliver more inclusive products. The result is a negative feedback cycle; some tech folks opt out of listening because “it’s rude” (and completely missing the irony of that statement). Other tech folks struggle with the emotional weight that so often accompanies working in accessibility-focused design and development. </p>\n\n\n\n<p>The thing is, these users have been ignored for so long that it can feel like they are screaming into a void. <em>Isn’t anyone listening? Doesn’t anyone care?</em> It seems like the only way to even be acknowledged is to demand the treatment that the law affords them! Even then, they often feel ignored and forgotten. Are lawsuits the only recourse?</p>\n\n\n\n<p>It increasingly seems that being loud and militant is the only way to be heard, and even then it might be a long time before anything happens.</p>\n\n\n\n<p>— <em>end scene.</em></p>\n\n\n\n<h3>Act 3</h3>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>“I know it doesn’t pass color contrast, but I feel like it’s just so <strong>restrictive</strong> on my creativity as a designer. I don’t like the way this <strong>looks</strong>, at all.”</p></blockquote>\n\n\n\n<p>I’ve heard this a lot across the span of my career. To some, inclusive design is not the necessary guardrail to ensure that our websites can be used by all, but rather a dampener on their creative freedom.</p>\n\n\n\n<p>If you are a designer who thinks this way, please consider this: you’re not designing for yourself. This is not like physical art; while your visual design can be artistic, it’s still on the web. It’s still <em>for</em> the web. Web designers have a higher challenge—their artistic vision needs to be usable by everyone. Challenge yourself to move the conversation into a different space: you just haven’t found the right design <em>yet</em>. It’s a false choice to think that a design can either be beautiful or accessible; don’t fall into that trap.</p>\n\n\n\n<p>— <em>end scene.</em></p>\n\n\n\n<h3>Let’s re-frame the conversation</h3>\n\n\n\n<p>These are just three of the perspectives we could consider when it comes to digital accessibility.</p>\n\n\n\n<p>We could talk about the project manager that “just wants to ship features” and says that “we can come back to accessibility later.” We could talk about the developer who jokes that “they wouldn’t use the internet if they were blind anyway,” or the one that says they will only pay attention to accessibility “once browsers make them do it.”</p>\n\n\n\n<p>We could, but we don’t really need to. We know how these these conversations go, because many of us have lived these experiences. The project never gets retrofitted. The company pays once to develop the product, then pays for an accessibility audit, then pays for the re-write after the audit shows that a retrofit is going to be more costly than building something new. We know the developer who insists they should only be forced to do something if the browser otherwise disallows it, and that they are unlikely to be convinced that the inclusive architecture of their code is not only beneficial, but necessary.</p>\n\n\n\n<p>So what <em>should</em> we be talking about, then?</p>\n\n\n\n<p>We need to acknowledge that designers and developers need to be learning about accessibility much sooner in their careers. I think of it with this analogy: Imagine you’ve learned a foreign language, but you only learned that language’s slang. Your words are technically correct, but there are a lot of native speakers of that language who will never be able to understand you. JavaScript-first web developers are often technically correct from a JavaScript perspective, but they also frequently create solutions that leave out a whole lotta people in the end.</p>\n\n\n\n<p>How do we correct for this? I’m going to be resolute here, as we all must be. We need to make sure that any documentation we produce includes accessible code samples. Designs must contain accessible annotations. Our conference talks must include accessibility. The cool fun toys we make to make our lives easier? They must be accessible, and there must be no excuse for anything less This becomes our new minimum-viable product for anything related to the web.</p>\n\n\n\n<p>But what about the code that already exists? What about the thousands of articles already written, talks already given, libraries already produced? How do we get past that? Even as I write this article for CSS-Tricks, I think about all of the articles I’ve read and the disappointment I’ve felt when I knew the end result was inaccessible. Or the really fun code-generating tools that don’t produce accessible code. Or the popular CSS frameworks that fail to consider tab order or color contrast. Do I want all of those people to feel bad, or be punished somehow?</p>\n\n\n\n<p>Nope. Not even remotely. Nothing good comes from that kind of thinking. The good comes from the places we already know—compassion and curiosity.</p>\n\n\n\n<p>We approach this with compassion and curiosity, because these are sustainable ways to improve. We will never improve if we wallow in the guilt of past actions, berating ourselves or others for ignoring accessibility for all these years. Frankly, we wouldn’t get anything done if we had to somehow pay for past ignorant actions; because yes, we did ignore it. In many ways, we still do ignore it.</p>\n\n\n\n<p>Real examples: the Google Developer training teaches a lot of things, but it&nbsp;doesn’t teach anything more than the <a href=\"https://web.dev/accessible/\" rel=\"noopener\">super basic parts of accessibility</a>. JavaScript frameworks get so caught up in the cleverness and complexity of JavaScript that they completely forget that HTML already exists. Even then, accessibility can still take a back seat. Ember existed for about eight years before adding an accessibility-focused community group (even if they have made <a href=\"https://noti.st/melsumner/FfqsyB/accessibility-is-reach\" rel=\"noopener\">a lot of progress</a> since then). React had to have a completely different <a href=\"https://reach.tech/router/\" rel=\"noopener\">router solution</a> created. Vue hasn’t even begun to publicly address accessibility in the core framework (although there are <a href=\"https://vue-a11y.com/\" rel=\"noopener\">community efforts</a>). Accessibility engineers have been begging for <a href=\"https://github.com/WICG/inert\" rel=\"noopener\"><code>inert</code></a> to be implemented in browsers natively, but it often is underfunded and de-prioritized.</p>\n\n\n\n<p>But we are technologists and artists, so our curiosity wins when we read <a href=\"https://alistapart.com/article/semantics-to-screen-readers/\" rel=\"noopener\">interesting articles</a> about how the accessibility object model and how our code can be translated by operating systems and fed into assistive technology. That’s pretty cool. After all, writing machine code so it can talk to another machine is probably more of what we imagined we’d be doing, right?</p>\n\n\n\n<p>The thing is, we can only start to be compassionate toward other people once we are able to be compassionate toward ourselves. Sure, we messed up—but we don’t have to stay ignorant. Think about that time you debugged your code for hours and hours and it ended up being a typo or a missing semicolon. Do you still beat yourself up over that? No, you developed compassion through logical thinking. Think about the junior developer that started to be discouraged, and how you motivated them to keep trying and that we all have good days and bad. That’s compassion.</p>\n\n\n\n<p>Here’s the cool part: not only do we have the technology, we are <em>literally</em> the ones that can fix it. We can get up and try to do better tomorrow. We can make some time to read about accessibility, and keep reading about it every day until we know it just as well as we do other things. It will be hard at first, just like the first time we tried… writing tests. Writing CSS. Working with that one API that is forever burned in our memory. But with repetition and practice, we got better. It got easier.</p>\n\n\n\n<p>Logically, we know we can learn hard things; we have already learned hard things, time and time again. This is the life and the career we signed up for. This is what gets us out of bed every morning. We love challenges and we love figuring them out. We are totally here for this.</p>\n\n\n\n<h3>What can we do? Here are some action steps.</h3>\n\n\n\n<p>Perhaps I have lost some readers by this point. But, if you’ve gotten this far, maybe you’re asking, “Melanie, you’ve convinced me, but what can I do <em>right now</em>?” I will give you two lists to empower you to take action by giving you a place to start.</p>\n\n\n\n<h4>Compassionately improve yourself:</h4>\n\n\n\n<ol><li><strong>Start following some folks with disabilities</strong> who are on social media with the goal of learning from their experiences. Listen to what they have to say. Don’t argue with them. Don’t tone police them. Listen to <em>what</em> they are trying to tell you. Maybe it won’t always come out in the way you’d prefer, but listen anyway.</li><li><strong>Retro-fit your knowledge.</strong> Try to start writing your next component with HTML first, then add functionality with JavaScript. <a href=\"https://codepen.io/melsumner/pen/ExYwqxZ\" rel=\"noopener\">Learn what you get for free</a> from HTML and the browser. Take some courses that are focused on accessibility for engineers. Invest in your own improvement for the sake of improving your craft.</li><li><strong>Turn on a screen reader.</strong> Learn how it works. Figure out the settings—how do you turn on a text-only version? How do you change the voice? How do you make it stop talking, or make it talk faster? How do you browse by headings? How do you get a list of links? What are the <a href=\"https://dequeuniversity.com/screenreaders/\" rel=\"noopener\">keyboard shortcuts</a>?</li></ol>\n\n\n\n<p><strong>Bonus Challenge:</strong> Try your hand at building some accessibility-related tooling. Check out <a href=\"https://a11y-automation.dev/\" rel=\"noopener\">A11y Automation Tracker</a>, an open source project that intends to track what automation could exist, but just hasn’t been created yet.</p>\n\n\n\n<h4>Incrementally improve your code</h4>\n\n\n\n<p>There are critical blockers that stop people from using your website. Don’t stop and feel bad about them; propel yourself into action and make your code even <strong>better</strong> than it was before.</p>\n\n\n\n<p>Here are some of the worst ones:</p>\n\n\n\n<ol><li><a href=\"https://github.com/ember-template-lint/ember-template-lint/blob/master/docs/rule/no-nested-interactive.md\" rel=\"noopener\">Nested interactive elements.</a> Like putting a button inside of a link. Or another button inside of a button.</li><li>Missing <a href=\"https://www.w3.org/WAI/tutorials/forms/labels/\" rel=\"noopener\">labels on input fields</a> (or non-associated labels)</li><li>Keyboard traps stop your users in their tracks. <a href=\"https://www.w3.org/WAI/WCAG21/quickref/#keyboard-accessible\" rel=\"noopener\">Learn what they are</a> and how to avoid them.</li><li>Are the images on your site important for users? Do they have <a href=\"https://noti.st/melsumner/Phhimm/dont-break-the-web#sVVa2ve\" rel=\"noopener\">the <code>alt</code> attribute</a> with a meaningful value?</li><li>Are there empty links on your site? Did you <a href=\"https://marcysutton.com/links-vs-buttons-in-modern-web-applications\" rel=\"noopener\">use a link</a> when you should have used a button?</li></ol>\n\n\n\n<p><strong>Suggestion:</strong> Read through the <a href=\"https://www.a11yproject.com/checklist/\" rel=\"noopener\">c</a><a href=\"https://www.a11yproject.com/checklist/\" rel=\"noopener\">hecklist on The A11y Project</a>. It’s by no means exhaustive, but it will get you started.</p>\n\n\n\n<p>And you know what? A good place to start is <em>exactly</em> where you are. A good time to start? Today.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p class=\"ticss-11061302\">Featured header photo by&nbsp;<a href=\"https://unsplash.com/@scottrodgerson?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Scott Rodgerson</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/s/photos/warning?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Unsplash</a></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/why-dont-developers-take-accessibility-seriously/\">Why Don&#8217;t Developers Take Accessibility Seriously?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "You know that joke, “Two front-end developers walk into a bar and find they have nothing in common”? It’s funny, yet frustrating, because it’s true.\n\n\n\nThis article will present three different perspectives on accessibility in web design and development. Three perspectives that could help us bridge the great divide between users and designers/developers. It might help us find the common ground to building a better web and a better future.\n\n\n\n\n\n\n\nPhoto by Alexander Naglestad on Unsplash\n\n\n\nAct 1\n\n\n\n“I just don’t know how developers don’t think about accessibility.”\n\n\n\nSomeone once said that to me. Let’s stop and think about it for a minute. Maybe there’s a perspective to be had.\n\n\n\nThink about how many things you have to know as a developer to successfully build a website. In any given day, for any given job position in web development, there are the other details of web development that come up. Meaning, it’s more than “just” knowing HTML, CSS, ARIA, and JavaScript. Developers will also learn other things over the course of their careers, based on what they need to do.\n\n\n\nThis could be package management, workspaces, code generators, collaboration tools, asset loading, asset management, CDN optimizations, bundle optimizations, unit tests, integration tests, visual regression tests, browser integration tests, code reviews, linting, formatting, communication through examples, changelogs, documentation, semantic versioning, security, app deployment, package releases, rollbacks, incremental improvements, incremental testing, continuous deployments, merge management, user experience, user interaction design, typography scales, aspect ratios for responsive design, data management, and… well, the list could go on, but you get the idea.\n\n\n\nAs a developer, I consider myself to be pretty gosh darn smart for knowing how to do most these things! Stop and consider this: if you think about how many people are in the world, and compare that to how many people in the world can build websites, it’s proportionally a very small percentage. That’s kind of… cool. Incredible, even. On top of that, think about the last time you shipped code and how good that felt. “I figured out a hard thing and made it work! Ahhhhh! I feel amazing!”\n\n\n\nThat kind of emotional high is pretty great, isn’t it? It makes me smile just to think about it.\n\n\n\nNow, imagine that an accessibility subject-matter expert comes along and essentially tells you that not only are you not particularly smart, but you have been doing things wrong for a long time.\n\n\n\nOuch. Suddenly you don’t feel very good. Wrong? Me?? What??? Your adrenaline can even kick in and you start to feel defensive. Time to stick up for yourself… right? Time to dig those heels.\n\n\n\nThe cognitive dissonance can even be really overwhelming. It feels bad to find out that not only are you not good at the thing you thought you were really good at doing, but you’ve also been saying, “Screw you, who cares about you anyway,” to a whole bunch of people who can’t use the websites you’ve helped build because you (accidentally or otherwise) ignored that they even existed, that you ignored users who needed something more than the cleverness you were delivering for all these years. Ow.\n\n\n\nAll things considered, it is quite understandable to me that a developer would want to put their fingers in their ears and pretend that none of this has happened at all, that they are still very clever and awesome. That the one “expert” telling you that you did it wrong is just one person. And one person is easy to ignore.\n\n\n\n— end scene.\n\n\n\nAct 2\n\n\n\n“I feel like I don’t matter at all.”\n\n\n\nThis is a common refrain I hear from people who need assistive technology to use websites, but often find them unusable for any number of reasons. Maybe they can’t read the text because the website’s design has ignored color contrast. Maybe there are nested interactive elements, so they can’t even log in to do things like pay a utility bill or buy essential items on their own. Maybe their favorite singer has finally set up an online shop but the user with assistive technology cannot even navigate the site because, while it might look interactive from a sighted-user’s perspective, all the buttons are divs and are not interactive with a keyboard… at all.\n\n\n\nThis frustration can boil over and spill out; the brunt of this frustration is often borne by the folks who are trying to deliver more inclusive products. The result is a negative feedback cycle; some tech folks opt out of listening because “it’s rude” (and completely missing the irony of that statement). Other tech folks struggle with the emotional weight that so often accompanies working in accessibility-focused design and development. \n\n\n\nThe thing is, these users have been ignored for so long that it can feel like they are screaming into a void. Isn’t anyone listening? Doesn’t anyone care? It seems like the only way to even be acknowledged is to demand the treatment that the law affords them! Even then, they often feel ignored and forgotten. Are lawsuits the only recourse?\n\n\n\nIt increasingly seems that being loud and militant is the only way to be heard, and even then it might be a long time before anything happens.\n\n\n\n— end scene.\n\n\n\nAct 3\n\n\n\n“I know it doesn’t pass color contrast, but I feel like it’s just so restrictive on my creativity as a designer. I don’t like the way this looks, at all.”\n\n\n\nI’ve heard this a lot across the span of my career. To some, inclusive design is not the necessary guardrail to ensure that our websites can be used by all, but rather a dampener on their creative freedom.\n\n\n\nIf you are a designer who thinks this way, please consider this: you’re not designing for yourself. This is not like physical art; while your visual design can be artistic, it’s still on the web. It’s still for the web. Web designers have a higher challenge—their artistic vision needs to be usable by everyone. Challenge yourself to move the conversation into a different space: you just haven’t found the right design yet. It’s a false choice to think that a design can either be beautiful or accessible; don’t fall into that trap.\n\n\n\n— end scene.\n\n\n\nLet’s re-frame the conversation\n\n\n\nThese are just three of the perspectives we could consider when it comes to digital accessibility.\n\n\n\nWe could talk about the project manager that “just wants to ship features” and says that “we can come back to accessibility later.” We could talk about the developer who jokes that “they wouldn’t use the internet if they were blind anyway,” or the one that says they will only pay attention to accessibility “once browsers make them do it.”\n\n\n\nWe could, but we don’t really need to. We know how these these conversations go, because many of us have lived these experiences. The project never gets retrofitted. The company pays once to develop the product, then pays for an accessibility audit, then pays for the re-write after the audit shows that a retrofit is going to be more costly than building something new. We know the developer who insists they should only be forced to do something if the browser otherwise disallows it, and that they are unlikely to be convinced that the inclusive architecture of their code is not only beneficial, but necessary.\n\n\n\nSo what should we be talking about, then?\n\n\n\nWe need to acknowledge that designers and developers need to be learning about accessibility much sooner in their careers. I think of it with this analogy: Imagine you’ve learned a foreign language, but you only learned that language’s slang. Your words are technically correct, but there are a lot of native speakers of that language who will never be able to understand you. JavaScript-first web developers are often technically correct from a JavaScript perspective, but they also frequently create solutions that leave out a whole lotta people in the end.\n\n\n\nHow do we correct for this? I’m going to be resolute here, as we all must be. We need to make sure that any documentation we produce includes accessible code samples. Designs must contain accessible annotations. Our conference talks must include accessibility. The cool fun toys we make to make our lives easier? They must be accessible, and there must be no excuse for anything less This becomes our new minimum-viable product for anything related to the web.\n\n\n\nBut what about the code that already exists? What about the thousands of articles already written, talks already given, libraries already produced? How do we get past that? Even as I write this article for CSS-Tricks, I think about all of the articles I’ve read and the disappointment I’ve felt when I knew the end result was inaccessible. Or the really fun code-generating tools that don’t produce accessible code. Or the popular CSS frameworks that fail to consider tab order or color contrast. Do I want all of those people to feel bad, or be punished somehow?\n\n\n\nNope. Not even remotely. Nothing good comes from that kind of thinking. The good comes from the places we already know—compassion and curiosity.\n\n\n\nWe approach this with compassion and curiosity, because these are sustainable ways to improve. We will never improve if we wallow in the guilt of past actions, berating ourselves or others for ignoring accessibility for all these years. Frankly, we wouldn’t get anything done if we had to somehow pay for past ignorant actions; because yes, we did ignore it. In many ways, we still do ignore it.\n\n\n\nReal examples: the Google Developer training teaches a lot of things, but it doesn’t teach anything more than the super basic parts of accessibility. JavaScript frameworks get so caught up in the cleverness and complexity of JavaScript that they completely forget that HTML already exists. Even then, accessibility can still take a back seat. Ember existed for about eight years before adding an accessibility-focused community group (even if they have made a lot of progress since then). React had to have a completely different router solution created. Vue hasn’t even begun to publicly address accessibility in the core framework (although there are community efforts). Accessibility engineers have been begging for inert to be implemented in browsers natively, but it often is underfunded and de-prioritized.\n\n\n\nBut we are technologists and artists, so our curiosity wins when we read interesting articles about how the accessibility object model and how our code can be translated by operating systems and fed into assistive technology. That’s pretty cool. After all, writing machine code so it can talk to another machine is probably more of what we imagined we’d be doing, right?\n\n\n\nThe thing is, we can only start to be compassionate toward other people once we are able to be compassionate toward ourselves. Sure, we messed up—but we don’t have to stay ignorant. Think about that time you debugged your code for hours and hours and it ended up being a typo or a missing semicolon. Do you still beat yourself up over that? No, you developed compassion through logical thinking. Think about the junior developer that started to be discouraged, and how you motivated them to keep trying and that we all have good days and bad. That’s compassion.\n\n\n\nHere’s the cool part: not only do we have the technology, we are literally the ones that can fix it. We can get up and try to do better tomorrow. We can make some time to read about accessibility, and keep reading about it every day until we know it just as well as we do other things. It will be hard at first, just like the first time we tried… writing tests. Writing CSS. Working with that one API that is forever burned in our memory. But with repetition and practice, we got better. It got easier.\n\n\n\nLogically, we know we can learn hard things; we have already learned hard things, time and time again. This is the life and the career we signed up for. This is what gets us out of bed every morning. We love challenges and we love figuring them out. We are totally here for this.\n\n\n\nWhat can we do? Here are some action steps.\n\n\n\nPerhaps I have lost some readers by this point. But, if you’ve gotten this far, maybe you’re asking, “Melanie, you’ve convinced me, but what can I do right now?” I will give you two lists to empower you to take action by giving you a place to start.\n\n\n\nCompassionately improve yourself:\n\n\n\nStart following some folks with disabilities who are on social media with the goal of learning from their experiences. Listen to what they have to say. Don’t argue with them. Don’t tone police them. Listen to what they are trying to tell you. Maybe it won’t always come out in the way you’d prefer, but listen anyway.Retro-fit your knowledge. Try to start writing your next component with HTML first, then add functionality with JavaScript. Learn what you get for free from HTML and the browser. Take some courses that are focused on accessibility for engineers. Invest in your own improvement for the sake of improving your craft.Turn on a screen reader. Learn how it works. Figure out the settings—how do you turn on a text-only version? How do you change the voice? How do you make it stop talking, or make it talk faster? How do you browse by headings? How do you get a list of links? What are the keyboard shortcuts?\n\n\n\nBonus Challenge: Try your hand at building some accessibility-related tooling. Check out A11y Automation Tracker, an open source project that intends to track what automation could exist, but just hasn’t been created yet.\n\n\n\nIncrementally improve your code\n\n\n\nThere are critical blockers that stop people from using your website. Don’t stop and feel bad about them; propel yourself into action and make your code even better than it was before.\n\n\n\nHere are some of the worst ones:\n\n\n\nNested interactive elements. Like putting a button inside of a link. Or another button inside of a button.Missing labels on input fields (or non-associated labels)Keyboard traps stop your users in their tracks. Learn what they are and how to avoid them.Are the images on your site important for users? Do they have the alt attribute with a meaningful value?Are there empty links on your site? Did you use a link when you should have used a button?\n\n\n\nSuggestion: Read through the checklist on The A11y Project. It’s by no means exhaustive, but it will get you started.\n\n\n\nAnd you know what? A good place to start is exactly where you are. A good time to start? Today.\n\n\n\n\n\n\n\nFeatured header photo by Scott Rodgerson on Unsplash\n\nWhy Don’t Developers Take Accessibility Seriously? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-24T14:49:18.000Z",
      "date_modified": "2022-01-24T14:49:18.000Z",
      "_plugin": {
        "pageFilename": "1ed0c702d9c1230109de0447b797edd1444512d575242ccf71cde0e7b27625e5.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360346",
      "url": "https://css-tricks.com/using-svg-in-wordpress/",
      "title": "Using SVG in WordPress (2 Helpful Plugin Recommendations)",
      "summary": "SVG is a great image format, so it's nice to able to use it in WordPress. If you're looking to be using SVG in WordPress. , we've got you covered here with all the best options.\n\nUsing SVG in WordPress (2 Helpful Plugin Recommendations) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>There is a little legwork to do if you plan on using SVG in WordPress. For fair-enough reasons, WordPress doesn&#8217;t allow SVG out of the box. SVG is a markup syntax that has lots of power, including the ability to load other resources and run JavaScript. So, if WordPress were to blanket-ly allow SVG by default, users even with quite limited roles could upload SVG and <a href=\"https://css-tricks.com/svg-uploads-wordpress-inconvenient-truth/\">cause problems</a>, like XSS vulnerabilities.</p>\n\n\n\n<p>But say that&#8217;s not a problem for your site and you just use SVG gosh darn it. First, let&#8217;s be clear what we mean by using SVG in WordPress: <strong>uploading SVG through the media uploader and using the SVG images within post content and as featured images. </strong></p>\n\n\n\n<span id=\"more-360346\"></span>\n\n\n\n<p>There is nothing stopping you from, say, using SVG in your templates. Meaning inline <code>&lt;svg&gt;</code> or SVG files you link up as images in your template from your CSS or whatnot. That&#8217;s completely fine and <em>you don&#8217;t need to do anything special</em> for that to work in WordPress.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2884\" height=\"2322\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=2884%2C2322&#038;ssl=1\" alt=\"Example of Using SVG in WordPress. the media library is open and shows tile previews of different SVG files.\" class=\"wp-image-362072\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?w=2884&amp;ssl=1 2884w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=300%2C242&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=1024%2C824&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=768%2C618&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=1536%2C1237&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=2048%2C1649&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=1000%2C805&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3>Taking matters into your own hands</h3>\n\n\n\n<p>What prevents you from using SVG in WordPress is that the Media Library Uploader rejects the file&#8217;s MIME type. To allow SVG in WordPress, you really just need this filter. This would go in your <code>functions.php</code> or a functionality plugin:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function cc_mime_types($mimes) {\n  $mimes['svg'] = 'image/svg+xml';\n  return $mimes;\n}\nadd_filter('upload_mimes', 'cc_mime_types');</code></pre>\n\n\n\n<p>But the problem after that is that the SVG file usually won&#8217;t display correctly in the various places it needs to, like the Media Library&#8217;s image previews, the Featured Image widget, and possibly even the classic or Block Editor. I have a <a href=\"https://css-tricks.com/snippets/wordpress/allow-svg-through-wordpress-media-uploader/\">snippet of CSS that can be injected to fix this</a>. But — and this is kinda why I&#8217;m writing this new post — that doesn&#8217;t seem to work for me anymore, which has got me thinking.</p>\n\n\n\n<h3>Plugins for using SVG in WordPress</h3>\n\n\n\n<p>I used to think, eh, why bother, it&#8217;s so little code to allow this might that I may as well just do it myself with the function. But WordPress, of course, has a way of shifting over time, and since supporting SVG isn&#8217;t something WordPress is going to do out of the box, this is actually a great idea for a plugin to handle. That way, the SVG plugin can evolve to handle quirks as WordPress evolves and, theoretically, if enough people use the SVG plugin, it will be maintained.</p>\n\n\n\n<p>So, with that, here are a couple of plugin recommendations for using SVG in WordPress.</p>\n\n\n\n<h4><a href=\"https://wordpress.org/plugins/svg-support/\" rel=\"noopener\">SVG Support</a></h4>\n\n\n\n<p><a href=\"https://wordpress.org/plugins/svg-support/\" rel=\"noopener\">This is the one</a> I&#8217;ve been using lately and it seems to work great for me. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2912\" height=\"2604\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=2912%2C2604&#038;ssl=1\" alt=\"Screenshot of the SVG Support plugin for WordPress in the WordPress Plugin Directory.\" class=\"wp-image-362069\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?w=2912&amp;ssl=1 2912w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=300%2C268&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=1024%2C916&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=768%2C687&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=1536%2C1374&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=2048%2C1831&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=1000%2C894&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I just install it, activate it, and do nothing else. It does have a settings screen, but I don&#8217;t need any of those things. I really like how it asks you if it&#8217;s OK to load additional CSS on the front-end (for me, it&#8217;s not OK, so I leave it off) — although even better would be for the plugin to show you what it&#8217;s going to load so you can add it to your own CSS if you want.</p>\n\n\n\n<p>The setting to restrict uploading SVG in WordPress to admins is smart, although if you want to be more serious about SVG safety, you could use this next plugin instead&#8230;</p>\n\n\n\n<h4><a href=\"https://wordpress.org/plugins/safe-svg/\" rel=\"noopener\">Safe SVG</a></h4>\n\n\n\n<p><a href=\"https://wordpress.org/plugins/safe-svg/\" rel=\"noopener\">This</a> one hasn&#8217;t been updated in years, but it goes the extra mile for SVG safety in that it literally sanitizes SVG files as you upload them, and even optimizes them while it adds the SVG in WordPress. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2680\" height=\"2666\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=2680%2C2666&#038;ssl=1\" alt=\"Screenshot of the Safe SVG plugin in the WordPress Plugin Directory.\" class=\"wp-image-362071\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?w=2680&amp;ssl=1 2680w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=300%2C298&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=1024%2C1019&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=768%2C764&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=1536%2C1528&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=2048%2C2037&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=1000%2C995&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=100%2C100&amp;ssl=1 100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We have fairly tight editorial control over authors and such here on this site, so the security aspects of this SVG plugin aren&#8217;t a big worry to me. Plus, I like to be in charge of my own SVG optimization, so this one isn&#8217;t as perfect for me, though I&#8217;d probably recommend it to a site with less technical expertise at the site owner level.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Looks like there is <a href=\"https://wordpress.org/plugins/easy-svg/\" rel=\"noopener\">Easy SVG Support</a> as well, but it doesn&#8217;t seem to be as nice as the Support SVG plugin and hasn&#8217;t been updated recently, so I can&#8217;t recommend that. </p>\n\n\n\n<p>What plugins have you successfully tried for using SVG in WordPress? Any recommendations you&#8217;d like to add?</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/using-svg-in-wordpress/\">Using SVG in WordPress (2 Helpful Plugin Recommendations)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "There is a little legwork to do if you plan on using SVG in WordPress. For fair-enough reasons, WordPress doesn’t allow SVG out of the box. SVG is a markup syntax that has lots of power, including the ability to load other resources and run JavaScript. So, if WordPress were to blanket-ly allow SVG by default, users even with quite limited roles could upload SVG and cause problems, like XSS vulnerabilities.\n\n\n\nBut say that’s not a problem for your site and you just use SVG gosh darn it. First, let’s be clear what we mean by using SVG in WordPress: uploading SVG through the media uploader and using the SVG images within post content and as featured images. \n\n\n\n\n\n\n\nThere is nothing stopping you from, say, using SVG in your templates. Meaning inline <svg> or SVG files you link up as images in your template from your CSS or whatnot. That’s completely fine and you don’t need to do anything special for that to work in WordPress.\n\n\n\n\n\n\n\nTaking matters into your own hands\n\n\n\nWhat prevents you from using SVG in WordPress is that the Media Library Uploader rejects the file’s MIME type. To allow SVG in WordPress, you really just need this filter. This would go in your functions.php or a functionality plugin:\n\n\n\nfunction cc_mime_types($mimes) {\n  $mimes['svg'] = 'image/svg+xml';\n  return $mimes;\n}\nadd_filter('upload_mimes', 'cc_mime_types');\n\n\n\nBut the problem after that is that the SVG file usually won’t display correctly in the various places it needs to, like the Media Library’s image previews, the Featured Image widget, and possibly even the classic or Block Editor. I have a snippet of CSS that can be injected to fix this. But — and this is kinda why I’m writing this new post — that doesn’t seem to work for me anymore, which has got me thinking.\n\n\n\nPlugins for using SVG in WordPress\n\n\n\nI used to think, eh, why bother, it’s so little code to allow this might that I may as well just do it myself with the function. But WordPress, of course, has a way of shifting over time, and since supporting SVG isn’t something WordPress is going to do out of the box, this is actually a great idea for a plugin to handle. That way, the SVG plugin can evolve to handle quirks as WordPress evolves and, theoretically, if enough people use the SVG plugin, it will be maintained.\n\n\n\nSo, with that, here are a couple of plugin recommendations for using SVG in WordPress.\n\n\n\nSVG Support\n\n\n\nThis is the one I’ve been using lately and it seems to work great for me. \n\n\n\n\n\n\n\nI just install it, activate it, and do nothing else. It does have a settings screen, but I don’t need any of those things. I really like how it asks you if it’s OK to load additional CSS on the front-end (for me, it’s not OK, so I leave it off) — although even better would be for the plugin to show you what it’s going to load so you can add it to your own CSS if you want.\n\n\n\nThe setting to restrict uploading SVG in WordPress to admins is smart, although if you want to be more serious about SVG safety, you could use this next plugin instead…\n\n\n\nSafe SVG\n\n\n\nThis one hasn’t been updated in years, but it goes the extra mile for SVG safety in that it literally sanitizes SVG files as you upload them, and even optimizes them while it adds the SVG in WordPress. \n\n\n\n\n\n\n\nWe have fairly tight editorial control over authors and such here on this site, so the security aspects of this SVG plugin aren’t a big worry to me. Plus, I like to be in charge of my own SVG optimization, so this one isn’t as perfect for me, though I’d probably recommend it to a site with less technical expertise at the site owner level.\n\n\n\n\n\n\n\nLooks like there is Easy SVG Support as well, but it doesn’t seem to be as nice as the Support SVG plugin and hasn’t been updated recently, so I can’t recommend that. \n\n\n\nWhat plugins have you successfully tried for using SVG in WordPress? Any recommendations you’d like to add?\n\nUsing SVG in WordPress (2 Helpful Plugin Recommendations) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-21T19:35:31.000Z",
      "date_modified": "2022-01-21T19:35:31.000Z",
      "_plugin": {
        "pageFilename": "7a2ad8ce809f3c3f16e66496c4586b31732ef67985a96e9acac0b81f54e1920c.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360665",
      "url": "https://css-tricks.com/context-aware-web-components/",
      "title": "Context-Aware Web Components Are Easier Than You Think",
      "summary": "Another aspect of web components that we haven’t talked about yet is that a JavaScript function is called whenever a web component is added or removed from a page. These lifecycle callbacks can be used for many things, including making …\n\nContext-Aware Web Components Are Easier Than You Think originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Another aspect of web components that we haven’t talked about yet is that a JavaScript function is called whenever a web component is added or removed from a page. These lifecycle callbacks can be used for many things, including making an element aware of its context.</p>\n\n\n\n<span id=\"more-360665\"></span>\n\n\n\n<h2>Article series</h2>\n\n\n\n<ul class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/web-components-are-easier-than-you-think/\">Web Components Are Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/interactive-web-components-are-easier-than-you-think/\">Interactive Web Components Are Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/using-web-components-in-wordpress-is-easier-than-you-think/\">Using Web Components in WordPress is Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/supercharging-built-in-elements-with-web-components-is-easier-than-you-think/\">Supercharging Built-In Elements With Web Components &#8220;is&#8221; Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/context-aware-web-components\">Context-Aware Web Components Are Easier Than You Think</a> (<em>You are here!</em>)</li></ul>\n\n\n\n<h3>The four lifecycle callbacks of web components</h3>\n\n\n\n<p>There are <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks\" rel=\"noopener\">four lifecycle callbacks</a> that can be used with web components:</p>\n\n\n\n<ul><li><code>connectedCallback</code>: This callback fires when the custom element is <em>attached</em> to the element.</li><li><code>disconnectedCallback</code>: This callback fires when the element is <em>removed</em> from the document.</li><li><code>adoptedCallback</code>: This callback fires when the element is <em>added</em> to a new document.</li><li><code>attributeChangedCallback</code>: This callback fires when an <em>attribute</em> is changed, added or removed, as long as that attribute is being observed.</li></ul>\n\n\n\n<p>Let&#8217;s look at each of these in action.</p>\n\n\n\n<h3>Our post-apocalyptic person component</h3>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1520\" height=\"712\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=1520%2C712&#038;ssl=1\" alt=\"Two renderings of the web component side-by-side, the left is a human, and the right is a zombie.\" class=\"wp-image-360671\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?w=1520&amp;ssl=1 1520w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=300%2C141&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=1024%2C480&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=768%2C360&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=1000%2C468&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We’ll start by creating a web component called <code>&lt;postapocalyptic-person&gt;</code>. Every person after the apocalypse is either a human or a zombie and we’ll know which one based on a class — either <code>.human</code> or <code>.zombie</code> — that’s applied to the parent element of the <code>&lt;postapocalyptic-person&gt;</code> component. We won’t do anything fancy with it (yet), but we’ll add a <code>shadowRoot</code> we can use to attach a corresponding image based on that classification.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">customElements.define(\n  \"postapocalyptic-person\",\n  class extends HTMLElement {\n    constructor() {\n      super();\n      const shadowRoot = this.attachShadow({ mode: \"open\" });\n    }\n}</code></pre>\n\n\n\n<p>Our HTML looks like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"humans\">\n  &lt;postapocalyptic-person>&lt;/postapocalyptic-person>\n&lt;/div>\n&lt;div class=\"zombies\">\n  &lt;postapocalyptic-person>&lt;/postapocalyptic-person>\n&lt;/div></code></pre>\n\n\n\n<h3>Inserting people with <code>connectedCallback</code></h3>\n\n\n\n<p>When a <code>&lt;postapocalyptic-person&gt;</code> is loaded on the page, the <code>connectedCallback()</code> function is called.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">connectedCallback() {\n  let image = document.createElement(\"img\");\n  if (this.parentNode.classList.contains(\"humans\")) {\n    image.src = \"https://assets.codepen.io/1804713/lady.png\";\n    this.shadowRoot.appendChild(image);\n  } else if (this.parentNode.classList.contains(\"zombies\")) {\n    image.src = \"https://assets.codepen.io/1804713/ladyz.png\";\n    this.shadowRoot.appendChild(image);\n  }\n}</code></pre>\n\n\n\n<p>This makes sure that an image of a human is output when the <code>&lt;postapocalyptic-person&gt;</code> is a human, and a zombie image when the component is a zombie.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYErBJQ\" src=\"//codepen.io/anon/embed/zYErBJQ?height=450&amp;theme-id=1&amp;slug-hash=zYErBJQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYErBJQ\" title=\"CodePen Embed zYErBJQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">Be careful working with <code>connectedCallback</code>. It runs more often than you might realize, firing any time the element is moved and could (baffling-ly) even run <em>after</em> the node is no longer connected — which can be an expensive performance cost. You can use <code>this.isConnected</code> to know whether the element is connected or not.</p>\n\n\n\n<h3>Counting people with <code>connectedCallback()</code> when they are added</h3>\n\n\n\n<p>Let&#8217;s get a little more complex by adding a couple of buttons to the mix. One will add a <code>&lt;postapocalyptic-person&gt;</code>, using a &#8220;coin flip&#8221; approach to decide whether it’s a human or a zombie. The other button will do the opposite, removing a <code>&lt;postapocalyptic-person&gt;</code> at random. We&#8217;ll keep track of how many humans and zombies are in view while we’re at it.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"btns\">\n  &lt;button id=\"addbtn\">Add Person&lt;/button>\n  &lt;button id=\"rmvbtn\">Remove Person&lt;/button> \n  &lt;span class=\"counts\">\n    Humans: &lt;span id=\"human-count\">0&lt;/span> \n    Zombies: &lt;span id=\"zombie-count\">0&lt;/span>\n  &lt;/span>\n&lt;/div></code></pre>\n\n\n\n<p>Here’s what our buttons will do:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let zombienest = document.querySelector(\".zombies\"),\n  humancamp = document.querySelector(\".humans\");\n\ndocument.getElementById(\"addbtn\").addEventListener(\"click\", function () {\n  // Flips a \"coin\" and adds either a zombie or a human\n  if (Math.random() > 0.5) {\n    zombienest.appendChild(document.createElement(\"postapocalyptic-person\"));\n  } else {\n    humancamp.appendChild(document.createElement(\"postapocalyptic-person\"));\n  }\n});\ndocument.getElementById(\"rmvbtn\").addEventListener(\"click\", function () {\n  // Flips a \"coin\" and removes either a zombie or a human\n  // A console message is logged if no more are available to remove.\n  if (Math.random() > 0.5) {\n    if (zombienest.lastElementChild) {\n      zombienest.lastElementChild.remove();\n    } else {\n      console.log(\"No more zombies to remove\");\n    }\n  } else {\n    if (humancamp.lastElementChild) {\n      humancamp.lastElementChild.remove();\n    } else {\n      console.log(\"No more humans to remove\");\n    }\n  }\n});</code></pre>\n\n\n\n<p>Here’s the code in <code>connectedCallback()</code> that counts the humans and zombies as they are added:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">connectedCallback() {\n  let image = document.createElement(\"img\");\n  if (this.parentNode.classList.contains(\"humans\")) {\n    image.src = \"https://assets.codepen.io/1804713/lady.png\";\n    this.shadowRoot.appendChild(image);\n    // Get the existing human count.\n    let humancount = document.getElementById(\"human-count\");\n    // Increment it\n    humancount.innerHTML = parseInt(humancount.textContent) + 1;\n  } else if (this.parentNode.classList.contains(\"zombies\")) {\n    image.src = \"https://assets.codepen.io/1804713/ladyz.png\";\n    this.shadowRoot.appendChild(image);\n    // Get the existing zombie count.\n    let zombiecount = document.getElementById(\"zombie-count\");\n    // Increment it\n    zombiecount.innerHTML = parseInt(zombiecount.textContent) + 1;\n  }\n}</code></pre>\n\n\n\n<h3>Updating counts with <code>disconnectedCallback</code></h3>\n\n\n\n<p>Next, we can use <code>disconnectedCallback()</code> to decrement the number as a humans and zombies are removed. However, we are unable to check the class of the parent element because the parent element with the corresponding class is already gone by the time <code>disconnectedCallback</code> is called. We could set an attribute on the element, or add a property to the object, but since the image’s <code>src</code> attribute is already determined by its parent element, we can use that as a proxy for knowing whether the web component being removed is a human or zombie.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">disconnectedCallback() {\n  let image = this.shadowRoot.querySelector('img');\n  // Test for the human image\n  if (image.src == \"https://assets.codepen.io/1804713/lady.png\") {\n    let humancount = document.getElementById(\"human-count\");\n    humancount.innerHTML = parseInt(humancount.textContent) - 1; // Decrement count\n  // Test for the zombie image\n  } else if (image.src == \"https://assets.codepen.io/1804713/ladyz.png\") {\n    let zombiecount = document.getElementById(\"zombie-count\");\n    zombiecount.innerHTML = parseInt(zombiecount.textContent) - 1; // Decrement count\n  }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWqNjKp\" src=\"//codepen.io/anon/embed/QWqNjKp?height=600&amp;theme-id=1&amp;slug-hash=QWqNjKp&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWqNjKp\" title=\"CodePen Embed QWqNjKp\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Beware of clowns!</h3>\n\n\n\n<p>Now (and I’m speaking from experience here, of course) the only thing scarier than a horde of zombies bearing down on your position is a clown — all it takes is one! So, even though we’re already dealing with frightening post-apocalyptic zombies, let’s add the possibility of a clown entering the scene for even more horror. In fact, we’ll do it in such a way that there’s a possibility any human or zombie on the screen is secretly a clown in disguise!</p>\n\n\n\n<p>I take back what I said earlier: a single zombie clown is scarier than even a group of &#8220;normal&#8221; clowns. Let’s say that if any sort of clown is found — be it human or zombie — we separate them from the human and zombie populations by sending them to a whole different document — an <code>&lt;iframe&gt;</code> jail, if you will. (I hear that &#8220;clowning&#8221; may be even more contagious than zombie contagion.)</p>\n\n\n\n<p>And when we move a suspected clown from the current document to an <code>&lt;iframe&gt;</code>, it doesn’t destroy and recreate the original node; rather it adopts and connects said node, first calling <code>adoptedCallback</code> then <code>connectedCallback</code>.</p>\n\n\n\n<p>We don’t need anything in the <code>&lt;iframe&gt;</code> document except a body with a <code>.clowns</code> class. As long as this document is in the iframe of the main document — not viewed separately — we don’t even need the <code>&lt;postapocalyptic-person&gt;</code> instantiation code. We’ll include one space for humans, another space for zombies, and yes, the clowns’s jail… errr&#8230; <code>&lt;iframe&gt;</code> of&#8230; fun.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"btns\">\n  &lt;button id=\"addbtn\">Add Person&lt;/button>\n  &lt;button id=\"jailbtn\">Jail Potential Clown&lt;/button>\n&lt;/div>\n&lt;div class=\"humans\">\n  &lt;postapocalyptic-person>&lt;/postapocalyptic-person>\n&lt;/div>\n&lt;div class=\"zombies\">\n  &lt;postapocalyptic-person>&lt;/postapocalyptic-person>\n&lt;/div>\n&lt;iframe class=\"clowniframeoffun” src=\"adoptedCallback-iframe.html\">\n&lt;/iframe></code></pre>\n\n\n\n<p>Our &#8220;Add Person&#8221; button works the same as it did in the last example: it flips a digital coin to randomly insert either a human or a zombie. When we hit the &#8220;Jail Potential Clown&#8221; button another coin is flipped and takes either a zombie or a human, handing them over to <code>&lt;iframe&gt;</code> jail.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.getElementById(\"jailbtn\").addEventListener(\"click\", function () {\n  if (Math.random() > 0.5) {\n    let human = humancamp.querySelector('postapocalyptic-person');\n    if (human) {\n      clowncollege.contentDocument.querySelector('body').appendChild(document.adoptNode(human));\n    } else {\n      console.log(\"No more potential clowns at the human camp\");\n    }\n  } else {\n    let zombie = zombienest.querySelector('postapocalyptic-person');\n    if (zombie) {\n      clowncollege.contentDocument.querySelector('body').appendChild(document.adoptNode(zombie));\n    } else {\n      console.log(\"No more potential clowns at the zombie nest\");\n    }\n  }\n});</code></pre>\n\n\n\n<h3>Revealing clowns with <code>adoptedCallback</code></h3>\n\n\n\n<p>In the <code>adoptedCallback</code> we’ll determine whether the clown is of the zombie human variety based on their corresponding image and then change the image accordingly. <code>connectedCallback</code> will be called after that, but we don’t have anything it needs to do, and what it does won’t interfere with our changes. So we can leave it as is.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">adoptedCallback() {\n  let image = this.shadowRoot.querySelector(\"img\");\n  if (this.parentNode.dataset.type == \"clowns\") {\n    if (image.src.indexOf(\"lady.png\") != -1) { \n      // Sometimes, the full URL path including the domain is saved in `image.src`.\n      // Using `indexOf` allows us to skip the unnecessary bits. \n      image.src = \"ladyc.png\";\n      this.shadowRoot.appendChild(image);\n    } else if (image.src.indexOf(\"ladyz.png\") != -1) {\n      image.src = \"ladyzc.png\";\n      this.shadowRoot.appendChild(image);\n    }\n  }\n}</code></pre>\n\n\n\n<iframe loading=\"lazy\" title=\"Humans and Zombies Web Component Demo\" src=\"https://undead.institute/files/adoptedCallback/index.html\" width=\"800\" height=\"600\"></iframe>\n\n\n\n<h3>Detecting hidden clowns with <code>attributeChangedCallback</code></h3>\n\n\n\n<p>Finally, we have the <code>attributeChangedCallback</code>. Unlike the the other three lifecycle callbacks, we need to observe the attributes of our web component in order for the the callback to fire. We can do this by adding an <code>observedAttributes()</code> function to the custom element’s class and have that function return an array of attribute names.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">static get observedAttributes() {\n  return [“attribute-name”];\n}</code></pre>\n\n\n\n<p>Then, if that attribute changes — including being added or removed — the <code>attributeChangedCallback</code> fires.</p>\n\n\n\n<p>Now, the thing you have to worry about with clowns is that some of the humans you know and love (or the ones that you knew and loved before they turned into zombies) could secretly be clowns in disguise. I’ve set up a clown detector that looks at a group of humans and zombies and, when you click the &#8220;Reveal Clowns&#8221; button, the detector will (through completely scientific and totally trustworthy means that are <strong>not</strong> based on random numbers choosing an index) apply <code>data-clown=\"true\"</code> to the component. And when this attribute is applied, <code>attributeChangedCallback</code> fires and updates the component’s image to uncover their clownish colors.</p>\n\n\n\n<p>I should also note that the <code>attributeChangedCallback</code> takes three parameters:</p>\n\n\n\n<ul><li>the name of the attribute</li><li>the previous value of the attribute</li><li>the new value of the attribute</li></ul>\n\n\n\n<p>Further, the callback lets you make changes based on how much the attribute has changed, or based on the transition between two states.</p>\n\n\n\n<p>Here’s our <code>attributeChangedCallback</code> code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">attributeChangedCallback(name, oldValue, newValue) {\n  let image = this.shadowRoot.querySelector(\"img\");\n  // Ensures that `data-clown` was the attribute that changed,\n  // that its value is true, and that it had an image in its `shadowRoot`\n  if (name=\"data-clown\" &amp;&amp; this.dataset.clown &amp;&amp; image) {\n    // Setting and updating the counts of humans, zombies,\n    // and clowns on the page\n    let clowncount = document.getElementById(\"clown-count\"),\n    humancount = document.getElementById(\"human-count\"),\n    zombiecount = document.getElementById(\"zombie-count\");\n    if (image.src.indexOf(\"lady.png\") != -1) {\n      image.src = \"https://assets.codepen.io/1804713/ladyc.png\";\n      this.shadowRoot.appendChild(image);\n      // Update counts\n      clowncount.innerHTML = parseInt(clowncount.textContent) + 1;\n      humancount.innerHTML = parseInt(humancount.textContent) - 1;\n    } else if (image.src.indexOf(\"ladyz.png\") != -1) {\n      image.src = \"https://assets.codepen.io/1804713/ladyzc.png\";\n      this.shadowRoot.appendChild(image);\n      // Update counts\n      clowncount.innerHTML = parseInt(clowncount.textContent) + 1;\n      zombiecount.innerHTML = parseInt(zombiecount.textContent) - 1;\n    }\n  }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzrWdvW\" src=\"//codepen.io/anon/embed/YzrWdvW?height=900&amp;theme-id=1&amp;slug-hash=YzrWdvW&amp;default-tab=result\" height=\"900\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzrWdvW\" title=\"CodePen Embed YzrWdvW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And there you have it! Not only have we found out that web component callbacks and creating context-aware custom elements are easier than you may have thought, but detecting post-apocalyptic clowns, though terrifying, is also easier that you thought. What kind of devious, post-apocalyptic clowns can you detect with these web component callback functions?</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/context-aware-web-components/\">Context-Aware Web Components Are Easier Than You Think</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Another aspect of web components that we haven’t talked about yet is that a JavaScript function is called whenever a web component is added or removed from a page. These lifecycle callbacks can be used for many things, including making an element aware of its context.\n\n\n\n\n\n\n\nArticle series\n\n\n\nWeb Components Are Easier Than You ThinkInteractive Web Components Are Easier Than You ThinkUsing Web Components in WordPress is Easier Than You ThinkSupercharging Built-In Elements With Web Components “is” Easier Than You ThinkContext-Aware Web Components Are Easier Than You Think (You are here!)\n\n\n\nThe four lifecycle callbacks of web components\n\n\n\nThere are four lifecycle callbacks that can be used with web components:\n\n\n\nconnectedCallback: This callback fires when the custom element is attached to the element.disconnectedCallback: This callback fires when the element is removed from the document.adoptedCallback: This callback fires when the element is added to a new document.attributeChangedCallback: This callback fires when an attribute is changed, added or removed, as long as that attribute is being observed.\n\n\n\nLet’s look at each of these in action.\n\n\n\nOur post-apocalyptic person component\n\n\n\n\n\n\n\nWe’ll start by creating a web component called <postapocalyptic-person>. Every person after the apocalypse is either a human or a zombie and we’ll know which one based on a class — either .human or .zombie — that’s applied to the parent element of the <postapocalyptic-person> component. We won’t do anything fancy with it (yet), but we’ll add a shadowRoot we can use to attach a corresponding image based on that classification.\n\n\n\ncustomElements.define(\n  \"postapocalyptic-person\",\n  class extends HTMLElement {\n    constructor() {\n      super();\n      const shadowRoot = this.attachShadow({ mode: \"open\" });\n    }\n}\n\n\n\nOur HTML looks like this:\n\n\n\n<div class=\"humans\">\n  <postapocalyptic-person></postapocalyptic-person>\n</div>\n<div class=\"zombies\">\n  <postapocalyptic-person></postapocalyptic-person>\n</div>\n\n\n\nInserting people with connectedCallback\n\n\n\nWhen a <postapocalyptic-person> is loaded on the page, the connectedCallback() function is called.\n\n\n\nconnectedCallback() {\n  let image = document.createElement(\"img\");\n  if (this.parentNode.classList.contains(\"humans\")) {\n    image.src = \"https://assets.codepen.io/1804713/lady.png\";\n    this.shadowRoot.appendChild(image);\n  } else if (this.parentNode.classList.contains(\"zombies\")) {\n    image.src = \"https://assets.codepen.io/1804713/ladyz.png\";\n    this.shadowRoot.appendChild(image);\n  }\n}\n\n\n\nThis makes sure that an image of a human is output when the <postapocalyptic-person> is a human, and a zombie image when the component is a zombie.\n\n\n\nCodePen Embed Fallback\n\n\n\nBe careful working with connectedCallback. It runs more often than you might realize, firing any time the element is moved and could (baffling-ly) even run after the node is no longer connected — which can be an expensive performance cost. You can use this.isConnected to know whether the element is connected or not.\n\n\n\nCounting people with connectedCallback() when they are added\n\n\n\nLet’s get a little more complex by adding a couple of buttons to the mix. One will add a <postapocalyptic-person>, using a “coin flip” approach to decide whether it’s a human or a zombie. The other button will do the opposite, removing a <postapocalyptic-person> at random. We’ll keep track of how many humans and zombies are in view while we’re at it.\n\n\n\n<div class=\"btns\">\n  <button id=\"addbtn\">Add Person</button>\n  <button id=\"rmvbtn\">Remove Person</button> \n  <span class=\"counts\">\n    Humans: <span id=\"human-count\">0</span> \n    Zombies: <span id=\"zombie-count\">0</span>\n  </span>\n</div>\n\n\n\nHere’s what our buttons will do:\n\n\n\nlet zombienest = document.querySelector(\".zombies\"),\n  humancamp = document.querySelector(\".humans\");\n\ndocument.getElementById(\"addbtn\").addEventListener(\"click\", function () {\n  // Flips a \"coin\" and adds either a zombie or a human\n  if (Math.random() > 0.5) {\n    zombienest.appendChild(document.createElement(\"postapocalyptic-person\"));\n  } else {\n    humancamp.appendChild(document.createElement(\"postapocalyptic-person\"));\n  }\n});\ndocument.getElementById(\"rmvbtn\").addEventListener(\"click\", function () {\n  // Flips a \"coin\" and removes either a zombie or a human\n  // A console message is logged if no more are available to remove.\n  if (Math.random() > 0.5) {\n    if (zombienest.lastElementChild) {\n      zombienest.lastElementChild.remove();\n    } else {\n      console.log(\"No more zombies to remove\");\n    }\n  } else {\n    if (humancamp.lastElementChild) {\n      humancamp.lastElementChild.remove();\n    } else {\n      console.log(\"No more humans to remove\");\n    }\n  }\n});\n\n\n\nHere’s the code in connectedCallback() that counts the humans and zombies as they are added:\n\n\n\nconnectedCallback() {\n  let image = document.createElement(\"img\");\n  if (this.parentNode.classList.contains(\"humans\")) {\n    image.src = \"https://assets.codepen.io/1804713/lady.png\";\n    this.shadowRoot.appendChild(image);\n    // Get the existing human count.\n    let humancount = document.getElementById(\"human-count\");\n    // Increment it\n    humancount.innerHTML = parseInt(humancount.textContent) + 1;\n  } else if (this.parentNode.classList.contains(\"zombies\")) {\n    image.src = \"https://assets.codepen.io/1804713/ladyz.png\";\n    this.shadowRoot.appendChild(image);\n    // Get the existing zombie count.\n    let zombiecount = document.getElementById(\"zombie-count\");\n    // Increment it\n    zombiecount.innerHTML = parseInt(zombiecount.textContent) + 1;\n  }\n}\n\n\n\nUpdating counts with disconnectedCallback\n\n\n\nNext, we can use disconnectedCallback() to decrement the number as a humans and zombies are removed. However, we are unable to check the class of the parent element because the parent element with the corresponding class is already gone by the time disconnectedCallback is called. We could set an attribute on the element, or add a property to the object, but since the image’s src attribute is already determined by its parent element, we can use that as a proxy for knowing whether the web component being removed is a human or zombie.\n\n\n\ndisconnectedCallback() {\n  let image = this.shadowRoot.querySelector('img');\n  // Test for the human image\n  if (image.src == \"https://assets.codepen.io/1804713/lady.png\") {\n    let humancount = document.getElementById(\"human-count\");\n    humancount.innerHTML = parseInt(humancount.textContent) - 1; // Decrement count\n  // Test for the zombie image\n  } else if (image.src == \"https://assets.codepen.io/1804713/ladyz.png\") {\n    let zombiecount = document.getElementById(\"zombie-count\");\n    zombiecount.innerHTML = parseInt(zombiecount.textContent) - 1; // Decrement count\n  }\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nBeware of clowns!\n\n\n\nNow (and I’m speaking from experience here, of course) the only thing scarier than a horde of zombies bearing down on your position is a clown — all it takes is one! So, even though we’re already dealing with frightening post-apocalyptic zombies, let’s add the possibility of a clown entering the scene for even more horror. In fact, we’ll do it in such a way that there’s a possibility any human or zombie on the screen is secretly a clown in disguise!\n\n\n\nI take back what I said earlier: a single zombie clown is scarier than even a group of “normal” clowns. Let’s say that if any sort of clown is found — be it human or zombie — we separate them from the human and zombie populations by sending them to a whole different document — an <iframe> jail, if you will. (I hear that “clowning” may be even more contagious than zombie contagion.)\n\n\n\nAnd when we move a suspected clown from the current document to an <iframe>, it doesn’t destroy and recreate the original node; rather it adopts and connects said node, first calling adoptedCallback then connectedCallback.\n\n\n\nWe don’t need anything in the <iframe> document except a body with a .clowns class. As long as this document is in the iframe of the main document — not viewed separately — we don’t even need the <postapocalyptic-person> instantiation code. We’ll include one space for humans, another space for zombies, and yes, the clowns’s jail… errr… <iframe> of… fun.\n\n\n\n<div class=\"btns\">\n  <button id=\"addbtn\">Add Person</button>\n  <button id=\"jailbtn\">Jail Potential Clown</button>\n</div>\n<div class=\"humans\">\n  <postapocalyptic-person></postapocalyptic-person>\n</div>\n<div class=\"zombies\">\n  <postapocalyptic-person></postapocalyptic-person>\n</div>\n<iframe class=\"clowniframeoffun” src=\"adoptedCallback-iframe.html\">\n</iframe>\n\n\n\nOur “Add Person” button works the same as it did in the last example: it flips a digital coin to randomly insert either a human or a zombie. When we hit the “Jail Potential Clown” button another coin is flipped and takes either a zombie or a human, handing them over to <iframe> jail.\n\n\n\ndocument.getElementById(\"jailbtn\").addEventListener(\"click\", function () {\n  if (Math.random() > 0.5) {\n    let human = humancamp.querySelector('postapocalyptic-person');\n    if (human) {\n      clowncollege.contentDocument.querySelector('body').appendChild(document.adoptNode(human));\n    } else {\n      console.log(\"No more potential clowns at the human camp\");\n    }\n  } else {\n    let zombie = zombienest.querySelector('postapocalyptic-person');\n    if (zombie) {\n      clowncollege.contentDocument.querySelector('body').appendChild(document.adoptNode(zombie));\n    } else {\n      console.log(\"No more potential clowns at the zombie nest\");\n    }\n  }\n});\n\n\n\nRevealing clowns with adoptedCallback\n\n\n\nIn the adoptedCallback we’ll determine whether the clown is of the zombie human variety based on their corresponding image and then change the image accordingly. connectedCallback will be called after that, but we don’t have anything it needs to do, and what it does won’t interfere with our changes. So we can leave it as is.\n\n\n\nadoptedCallback() {\n  let image = this.shadowRoot.querySelector(\"img\");\n  if (this.parentNode.dataset.type == \"clowns\") {\n    if (image.src.indexOf(\"lady.png\") != -1) { \n      // Sometimes, the full URL path including the domain is saved in `image.src`.\n      // Using `indexOf` allows us to skip the unnecessary bits. \n      image.src = \"ladyc.png\";\n      this.shadowRoot.appendChild(image);\n    } else if (image.src.indexOf(\"ladyz.png\") != -1) {\n      image.src = \"ladyzc.png\";\n      this.shadowRoot.appendChild(image);\n    }\n  }\n}\n\n\n\n\n\n\n\nDetecting hidden clowns with attributeChangedCallback\n\n\n\nFinally, we have the attributeChangedCallback. Unlike the the other three lifecycle callbacks, we need to observe the attributes of our web component in order for the the callback to fire. We can do this by adding an observedAttributes() function to the custom element’s class and have that function return an array of attribute names.\n\n\n\nstatic get observedAttributes() {\n  return [“attribute-name”];\n}\n\n\n\nThen, if that attribute changes — including being added or removed — the attributeChangedCallback fires.\n\n\n\nNow, the thing you have to worry about with clowns is that some of the humans you know and love (or the ones that you knew and loved before they turned into zombies) could secretly be clowns in disguise. I’ve set up a clown detector that looks at a group of humans and zombies and, when you click the “Reveal Clowns” button, the detector will (through completely scientific and totally trustworthy means that are not based on random numbers choosing an index) apply data-clown=\"true\" to the component. And when this attribute is applied, attributeChangedCallback fires and updates the component’s image to uncover their clownish colors.\n\n\n\nI should also note that the attributeChangedCallback takes three parameters:\n\n\n\nthe name of the attributethe previous value of the attributethe new value of the attribute\n\n\n\nFurther, the callback lets you make changes based on how much the attribute has changed, or based on the transition between two states.\n\n\n\nHere’s our attributeChangedCallback code:\n\n\n\nattributeChangedCallback(name, oldValue, newValue) {\n  let image = this.shadowRoot.querySelector(\"img\");\n  // Ensures that `data-clown` was the attribute that changed,\n  // that its value is true, and that it had an image in its `shadowRoot`\n  if (name=\"data-clown\" && this.dataset.clown && image) {\n    // Setting and updating the counts of humans, zombies,\n    // and clowns on the page\n    let clowncount = document.getElementById(\"clown-count\"),\n    humancount = document.getElementById(\"human-count\"),\n    zombiecount = document.getElementById(\"zombie-count\");\n    if (image.src.indexOf(\"lady.png\") != -1) {\n      image.src = \"https://assets.codepen.io/1804713/ladyc.png\";\n      this.shadowRoot.appendChild(image);\n      // Update counts\n      clowncount.innerHTML = parseInt(clowncount.textContent) + 1;\n      humancount.innerHTML = parseInt(humancount.textContent) - 1;\n    } else if (image.src.indexOf(\"ladyz.png\") != -1) {\n      image.src = \"https://assets.codepen.io/1804713/ladyzc.png\";\n      this.shadowRoot.appendChild(image);\n      // Update counts\n      clowncount.innerHTML = parseInt(clowncount.textContent) + 1;\n      zombiecount.innerHTML = parseInt(zombiecount.textContent) - 1;\n    }\n  }\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nAnd there you have it! Not only have we found out that web component callbacks and creating context-aware custom elements are easier than you may have thought, but detecting post-apocalyptic clowns, though terrifying, is also easier that you thought. What kind of devious, post-apocalyptic clowns can you detect with these web component callback functions?\n\nContext-Aware Web Components Are Easier Than You Think originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-21T14:08:05.000Z",
      "date_modified": "2022-01-21T14:08:05.000Z",
      "_plugin": {
        "pageFilename": "c53b25c4d1e20b0f265b82dcbf7dfaa468bd1b7b7817faf124e2425ce9b4a98e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361210",
      "url": "https://css-tricks.com/a-complete-beginners-guide-to-npm/",
      "title": "A Complete Beginner’s Guide to npm",
      "summary": "(This is a sponsored post.)\nI remember vividly a period early in my coding career when I began to feel that things were changing away from what I knew, and headed towards a more complex set of tools and …\n\nA Complete Beginner’s Guide to npm originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>I remember vividly a period early in my coding career when I began to feel that things were changing away from what I knew, and headed towards a more complex set of tools and practices, anchored in the command line and something called <a href=\"https://www.npmjs.com/\" rel=\"noopener\">npm</a>.</p>\n\n\n\n<p>This is the first part of a beginner’s guide where we cover the broad topic of Node Package Manager, or npm. We often take those three little letters—npm—for granted as we type them into the command line, but npm is part of a much larger ecosystem that can often be intimidating or confusing to anyone jumping in for the first time. This guide will help de-mystify that ecosystem and help you not only understand what npm is and does, but ultimately feel comfortable working with it.</p>\n\n\n\n<span id=\"more-361210\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"#aa-who-the-heck-is-this-guide-for\">Who the Heck is This Guide For?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"512\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=1024%2C512&#038;ssl=1\" alt=\"The npm logo in white against a gradient background tat goes from bright red to orange from left to right to kick off this npm guide.\" class=\"wp-image-285418\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=1000%2C500&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?w=1200&amp;ssl=1 1200w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Modern <a href=\"https://css-tricks.com/front-of-the-front-back-of-the-front/\">“back-of-the-front-end” development</a>—which npm is a part of—seems complex because it’s one name for lots of interconnected tools. When you add in the fact that the front-end world seems to move much more quickly than it actually does, producing a feeling that you will be left behind for not jumping on the newest thing right away, everything about it can seem unapproachable.</p>\n\n\n\n<p>That’s why we’re starting this guide—to make the technology more accessible for you to use in your own work.</p>\n\n\n\n<h3>Who the heck is this guide for?</h3>\n\n\n\n<p>In my own personal development learning journey, I would read guides about technologies that excited me, then get to a part that said “just <code>npm install</code>&#8221; this or that, and I’d heave yet another disappointed sigh and give up on using whatever that cool-looking thing was. Or, on more adventurous days, I might copy the command, but then inevitably end up either at another step I didn’t understand (“just,” they always said, “do [some thing I had no idea about]”), or get an error message the guide didn’t explain that stops me in my tracks.</p>\n\n\n\n<p><strong>Whatever npm was—whatever those commands did and wherever you were supposed to type them—nobody had ever taken the time to explain it to me.</strong> And the more I read guides written by people who took that knowledge for granted, the more I felt isolated.</p>\n\n\n\n<p><strong>If any of that sounds familiar: this series is for you</strong>.</p>\n\n\n\n<p>You most likely fall well within the group that’s been described in recent years as “<a href=\"https://bradfrost.com/blog/post/front-of-the-front-end-and-back-of-the-front-end-web-development/\" rel=\"noopener\">front-of-the-front-end</a>.” Like me, you probably know your stuff when it comes to HTML and CSS. Maybe you also know some JavaScript, either “vanilla” JavaScript, or by way of jQuery. Either way is fine, both for the purposes of this article and in general.</p>\n\n\n\n<p>Maybe you’ve even tried out a framework like React or Vue, but you mostly just copied and pasted some stuff to get your project up and running, and weren’t exactly sure what that stuff actually <em>did.</em></p>\n\n\n\n<ul><li><strong>This post is for you</strong> if you sense <a href=\"https://css-tricks.com/the-great-divide/\">The Great Divide</a> between the more traditional and &#8220;modern&#8221; definitions of front-end development—and if you worry that you might be hurting your career if you don&#8217;t bridge that chasm.</li><li><strong>This post is for you</strong> if you aren’t really sure what all the fuss about terminals and command lines is about, and you’d much prefer to just never touch one at all.</li><li><strong>This post is for you</strong> if you wonder why other developers seem to love making things <em>so damn complicated</em>, and what the point of all that command line junk is in the first place, when you could just write plain, simple HTML, CSS and JavaScript instead.</li><li><strong>This post is for you</strong> if you feel left out. If you sense there&#8217;s some <em>thing,</em> some <em>really big thing</em>, that nobody’s ever really bothered explaining to you, and you’re worried you’re the only one who doesn’t get it.</li></ul>\n\n\n\n<p>Know this, my fellow front-end developer: <strong>you are not alone.</strong> You are far from it. You are exactly where I was not so long ago, and the unsettled memory of that place is still fresh in my mind.</p>\n\n\n\n<p>Let me try to answer the questions you probably have—the same ones that I had—in the way I wish somebody would have for me, before I even knew how to ask them.</p>\n\n\n\n<h3>What is covered in this guide</h3>\n\n\n\n<p>This guide is a series of articles. That’s not because this stuff is extremely difficult to understand in and of itself; it’s because there are many parts to it, and each one bears explanation on its own. This is wide territory with a number of rabbit holes to explore. Focusing on one solid step at a time allows us to spend time on making things clear and understandable. The goal isn&#8217;t to cover everything, but I do want to be more thorough than quick.</p>\n\n\n\n<p>We’ll start by talking about the current lay of the land; what npm is, a bit about where it came from, and how we got here. From there, we’ll cover what Node itself is, followed by what package managers are in general, before actually working with npm. We’ll finish by installing Node and npm (if they’re not already), initializing a project to get an idea of how it works, and finally, installing a real-life npm project from GitHub with all its packages and commands.</p>\n\n\n\n<p>Some (or all) of that may sound very intimidating right now, but don’t worry. That’s why we’re spending the length of an entire guide together.</p>\n\n\n\n<h3>What to know before we begin</h3>\n\n\n\n<p>I&#8217;ll do my best to assume as little as possible about you, beyond that you are a web developer who generally knows how to build a website with HTML and CSS. You won’t need to know much about JavaScript or write any for the purposes of following this guide, but it will definitely help if you have at least a foundational understanding of what JavaScript is and how it works.</p>\n\n\n\n<p>JSON is the only other bit it might be helpful to know before getting started. If you’re unfamiliar with JSON, it might be worth glancing over this <a href=\"https://www.w3schools.com/whatis/whatis_json.asp\" rel=\"noopener\">guide to JSON</a>, or at least having it ready for when we do get to that part.</p>\n\n\n\n<p>Beyond that, I may reference specific tools, projects, and frameworks like <a href=\"https://getbootstrap.com\" rel=\"noopener\">Bootstrap</a>, <a href=\"https://reactjs.org\" rel=\"noopener\">React</a>, <a href=\"http://vuejs.org\" rel=\"noopener\">Vue</a> and <a href=\"https://kit.svelte.dev\" rel=\"noopener\">SvelteKit</a>, but I won’t assume you have any any hands-on experience with them whatsoever, nor will I assume that you’ve ever used npm or the command line before.</p>\n\n\n\n<p>Ready to get started? Let’s begin by clarifying what we mean by &#8220;npm,&#8221; such as what it stands for and how it fits into modern web development.</p>\n\n\n\n<div class=\"wp-container-61f32eef92447 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">Chapter 2 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm/\">A Complete Beginner&#8217;s Guide to npm</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "(This is a sponsored post.)\nI remember vividly a period early in my coding career when I began to feel that things were changing away from what I knew, and headed towards a more complex set of tools and practices, anchored in the command line and something called npm.\n\n\n\nThis is the first part of a beginner’s guide where we cover the broad topic of Node Package Manager, or npm. We often take those three little letters—npm—for granted as we type them into the command line, but npm is part of a much larger ecosystem that can often be intimidating or confusing to anyone jumping in for the first time. This guide will help de-mystify that ecosystem and help you not only understand what npm is and does, but ultimately feel comfortable working with it.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For? (You are here!)What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\n\n\n\n\nModern “back-of-the-front-end” development—which npm is a part of—seems complex because it’s one name for lots of interconnected tools. When you add in the fact that the front-end world seems to move much more quickly than it actually does, producing a feeling that you will be left behind for not jumping on the newest thing right away, everything about it can seem unapproachable.\n\n\n\nThat’s why we’re starting this guide—to make the technology more accessible for you to use in your own work.\n\n\n\nWho the heck is this guide for?\n\n\n\nIn my own personal development learning journey, I would read guides about technologies that excited me, then get to a part that said “just npm install” this or that, and I’d heave yet another disappointed sigh and give up on using whatever that cool-looking thing was. Or, on more adventurous days, I might copy the command, but then inevitably end up either at another step I didn’t understand (“just,” they always said, “do [some thing I had no idea about]”), or get an error message the guide didn’t explain that stops me in my tracks.\n\n\n\nWhatever npm was—whatever those commands did and wherever you were supposed to type them—nobody had ever taken the time to explain it to me. And the more I read guides written by people who took that knowledge for granted, the more I felt isolated.\n\n\n\nIf any of that sounds familiar: this series is for you.\n\n\n\nYou most likely fall well within the group that’s been described in recent years as “front-of-the-front-end.” Like me, you probably know your stuff when it comes to HTML and CSS. Maybe you also know some JavaScript, either “vanilla” JavaScript, or by way of jQuery. Either way is fine, both for the purposes of this article and in general.\n\n\n\nMaybe you’ve even tried out a framework like React or Vue, but you mostly just copied and pasted some stuff to get your project up and running, and weren’t exactly sure what that stuff actually did.\n\n\n\nThis post is for you if you sense The Great Divide between the more traditional and “modern” definitions of front-end development—and if you worry that you might be hurting your career if you don’t bridge that chasm.This post is for you if you aren’t really sure what all the fuss about terminals and command lines is about, and you’d much prefer to just never touch one at all.This post is for you if you wonder why other developers seem to love making things so damn complicated, and what the point of all that command line junk is in the first place, when you could just write plain, simple HTML, CSS and JavaScript instead.This post is for you if you feel left out. If you sense there’s some thing, some really big thing, that nobody’s ever really bothered explaining to you, and you’re worried you’re the only one who doesn’t get it.\n\n\n\nKnow this, my fellow front-end developer: you are not alone. You are far from it. You are exactly where I was not so long ago, and the unsettled memory of that place is still fresh in my mind.\n\n\n\nLet me try to answer the questions you probably have—the same ones that I had—in the way I wish somebody would have for me, before I even knew how to ask them.\n\n\n\nWhat is covered in this guide\n\n\n\nThis guide is a series of articles. That’s not because this stuff is extremely difficult to understand in and of itself; it’s because there are many parts to it, and each one bears explanation on its own. This is wide territory with a number of rabbit holes to explore. Focusing on one solid step at a time allows us to spend time on making things clear and understandable. The goal isn’t to cover everything, but I do want to be more thorough than quick.\n\n\n\nWe’ll start by talking about the current lay of the land; what npm is, a bit about where it came from, and how we got here. From there, we’ll cover what Node itself is, followed by what package managers are in general, before actually working with npm. We’ll finish by installing Node and npm (if they’re not already), initializing a project to get an idea of how it works, and finally, installing a real-life npm project from GitHub with all its packages and commands.\n\n\n\nSome (or all) of that may sound very intimidating right now, but don’t worry. That’s why we’re spending the length of an entire guide together.\n\n\n\nWhat to know before we begin\n\n\n\nI’ll do my best to assume as little as possible about you, beyond that you are a web developer who generally knows how to build a website with HTML and CSS. You won’t need to know much about JavaScript or write any for the purposes of following this guide, but it will definitely help if you have at least a foundational understanding of what JavaScript is and how it works.\n\n\n\nJSON is the only other bit it might be helpful to know before getting started. If you’re unfamiliar with JSON, it might be worth glancing over this guide to JSON, or at least having it ready for when we do get to that part.\n\n\n\nBeyond that, I may reference specific tools, projects, and frameworks like Bootstrap, React, Vue and SvelteKit, but I won’t assume you have any any hands-on experience with them whatsoever, nor will I assume that you’ve ever used npm or the command line before.\n\n\n\nReady to get started? Let’s begin by clarifying what we mean by “npm,” such as what it stands for and how it fits into modern web development.\n\n\n\n\nChapter 2 →\n\n\nA Complete Beginner’s Guide to npm originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:07:32.000Z",
      "date_modified": "2022-01-20T15:07:32.000Z",
      "_plugin": {
        "pageFilename": "c3ec78e452240cc716b56c68b425503537b7ac566efdb2cebdd38b0a3b7a1969.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361214",
      "url": "https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does/",
      "title": "What the Heck Does “npm” Mean?",
      "summary": "One of the things that makes this new, tooling-heavy era of front-end development so seemingly hard to understand at first is that, while we often call things by a singular name, they tend to be actually comprised of several different …\n\nWhat the Heck Does “npm” Mean? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>One of the things that makes this new, tooling-heavy era of front-end development so seemingly hard to understand at first is that, while we often <em>call</em> things by a singular name, they tend to be actually comprised of several different interconnected pieces. The same is true for npm and the ecosystem around it.</p>\n\n\n\n<p>For example: Think of how we casually refer to “the internet,” even though the web itself is not a single, unified thing, but a collection of protocols, DNS, servers, browsers, networks, requests and responses, plus lots of other things assembled over years of iterations. For that matter, even the browser itself is one machine with many parts.</p>\n\n\n\n<span id=\"more-361214\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>npm is a collection of technologies</h3>\n\n\n\n<p>In that same way, what we generally think of as “npm” (yes, <a href=\"https://github.com/npm/cli#faq-on-branding\" rel=\"noopener\">all lowercase</a>) and “back-of-the-front-end” in particular is a single name for a collection of many different individual technologies and systems; a sort of <a href=\"https://en.wikipedia.org/wiki/Rube_Goldberg_machine\" rel=\"noopener\">Rube Goldberg machine</a> to generate browser-friendly code.</p>\n\n\n\n<p>I mentioned the command line already; that’s a big part of the ecosystem because it’s how we interact with it. But more on that in the <a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">next chapter</a>.</p>\n\n\n\n<p>And then there’s npm, which is in a category known as “package management” software. We’ll cover that as well. In fact, you&#8217;ll likely see me refer to npm as a package manager throughout this guide.</p>\n\n\n\n<p>And finally, there’s <a href=\"https://nodejs.org/\" rel=\"noopener\">Node</a> itself, which is so tricky to explain succinctly I often describe it by paraphrasing <a href=\"https://douglasadams.com\" rel=\"noopener\">Douglas Adams</a>: it&#8217;s a programming language that’s almost—but not quite—entirely like JavaScript.</p>\n\n\n\n<h3>npm manages project tools</h3>\n\n\n\n<p>To further muddy the waters, many projects where you type <code>npm install</code> into the command line might come with pre-installed tools to help you do a wide variety of things in your project, like process your code (e.g., turn Sass code into CSS). There are many all-in-one, preconfigured projects out there just waiting for you to install them and get started (<a href=\"https://create-react-app.dev/\" rel=\"noopener\">Create React App</a>, <a href=\"https://nextjs.org/\" rel=\"noopener\">Next</a>, <a href=\"https://nuxtjs.org/\" rel=\"noopener\">Nuxt</a>, and <a href=\"https://kit.svelte.dev/\" rel=\"noopener\">SvelteKit</a>, to name a few). This is convenient when done well, of course, but it&#8217;s also added complexity—meaning many more names we need to add to our list of back-of-the-front-end things.</p>\n\n\n\n<p>This list often includes tools like <a href=\"https://babeljs.io\" rel=\"noopener\">Babel</a> (for compiling JavaScript), <a href=\"https://babeljs.io\" rel=\"noopener\">Sass</a> (for compiling CSS), <a href=\"https://webpack.js.org\" rel=\"noopener\">webpack</a> (for asset bundling), <a href=\"https://vitejs.dev\" rel=\"noopener\">Vite</a> (for development servers and other tooling), <a href=\"https://postcss.org\" rel=\"noopener\">PostCSS</a> (for transforming one syntax into another); <a href=\"https://autoprefixer.github.io\" rel=\"noopener\">Autoprefixer</a> (which can be a PostCSS plugin for CSS vendor prefixes); <a href=\"https://www.typescriptlang.org\" rel=\"noopener\">TypeScript</a> (for additional JavaScript syntax); <a href=\"https://eslint.org\" rel=\"noopener\">ESlint</a> (for checking code quality); <a href=\"https://prettier.io\" rel=\"noopener\">Prettier</a> (for formatting code), and testing libraries like <a href=\"https://jestjs.io\" rel=\"noopener\">Jest</a> or <a href=\"https://www.cypress.io\" rel=\"noopener\">Cypress</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1200\" height=\"600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=1200%2C600&#038;ssl=1\" alt=\"The stark stark white interior of a library building with multiple floors and bookcases filled with brightly colored books, illustrating how npm manages front-end development tools.\" class=\"wp-image-361219\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>npm is like a library building with floors of book collections that are organized, making things easier to find and manage. (Photo: <a href=\"https://unsplash.com/@leonardo_64?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Johannes Mändle</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/s/photos/library?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Unsplash</a>)</figcaption></figure>\n\n\n\n<p>All those things (and more) fall into this broad, general category of tools that often come <em>with</em> npm-installed projects—or that can be installed and used via npm—but are not actually part of npm itself. They’re just examples of modern tools that help us do nice things with our code, and I mention them here only because it’s worth noting the distinction, to get a sense of where the boundaries lie in this large, new world.</p>\n\n\n\n<p>And by the way, if you didn’t know what most (or <em>any</em>) of those tools mentioned above are, that’s ok. Maybe you haven’t come across them yet, or maybe you’ve worked on a project that had them installed without knowing them by name. Either way, all of this is merely for additional context.</p>\n\n\n\n<h3>Let’s break here</h3>\n\n\n\n<p>If you’re already feeling a bit overwhelmed at this point: don’t sweat it. The key thing I want you to walk away with after reading this specific chapter is that what we think of as “npm” (or maybe more casually as “all that command line, back-end-y stuff”) is not really one thing, but a collection of things that work together to make development easier for us.</p>\n\n\n\n<p>And yes: while all that complication seems intimidating up-front, it <em>does</em> actually make things better. I promise.</p>\n\n\n\n<p>While front-end <em>seems</em> to move very quickly, <strong>no, you have not been left behind</strong>. You may just have a bit of continuing education to get caught up on.</p>\n\n\n\n<div class=\"wp-container-61f32eef950d8 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">← Chapter 1</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">Chapter 3 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does/\">What the Heck Does “npm” Mean?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "One of the things that makes this new, tooling-heavy era of front-end development so seemingly hard to understand at first is that, while we often call things by a singular name, they tend to be actually comprised of several different interconnected pieces. The same is true for npm and the ecosystem around it.\n\n\n\nFor example: Think of how we casually refer to “the internet,” even though the web itself is not a single, unified thing, but a collection of protocols, DNS, servers, browsers, networks, requests and responses, plus lots of other things assembled over years of iterations. For that matter, even the browser itself is one machine with many parts.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean? (You are here!)What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\nnpm is a collection of technologies\n\n\n\nIn that same way, what we generally think of as “npm” (yes, all lowercase) and “back-of-the-front-end” in particular is a single name for a collection of many different individual technologies and systems; a sort of Rube Goldberg machine to generate browser-friendly code.\n\n\n\nI mentioned the command line already; that’s a big part of the ecosystem because it’s how we interact with it. But more on that in the next chapter.\n\n\n\nAnd then there’s npm, which is in a category known as “package management” software. We’ll cover that as well. In fact, you’ll likely see me refer to npm as a package manager throughout this guide.\n\n\n\nAnd finally, there’s Node itself, which is so tricky to explain succinctly I often describe it by paraphrasing Douglas Adams: it’s a programming language that’s almost—but not quite—entirely like JavaScript.\n\n\n\nnpm manages project tools\n\n\n\nTo further muddy the waters, many projects where you type npm install into the command line might come with pre-installed tools to help you do a wide variety of things in your project, like process your code (e.g., turn Sass code into CSS). There are many all-in-one, preconfigured projects out there just waiting for you to install them and get started (Create React App, Next, Nuxt, and SvelteKit, to name a few). This is convenient when done well, of course, but it’s also added complexity—meaning many more names we need to add to our list of back-of-the-front-end things.\n\n\n\nThis list often includes tools like Babel (for compiling JavaScript), Sass (for compiling CSS), webpack (for asset bundling), Vite (for development servers and other tooling), PostCSS (for transforming one syntax into another); Autoprefixer (which can be a PostCSS plugin for CSS vendor prefixes); TypeScript (for additional JavaScript syntax); ESlint (for checking code quality); Prettier (for formatting code), and testing libraries like Jest or Cypress.\n\n\n\nnpm is like a library building with floors of book collections that are organized, making things easier to find and manage. (Photo: Johannes Mändle on Unsplash)\n\n\n\nAll those things (and more) fall into this broad, general category of tools that often come with npm-installed projects—or that can be installed and used via npm—but are not actually part of npm itself. They’re just examples of modern tools that help us do nice things with our code, and I mention them here only because it’s worth noting the distinction, to get a sense of where the boundaries lie in this large, new world.\n\n\n\nAnd by the way, if you didn’t know what most (or any) of those tools mentioned above are, that’s ok. Maybe you haven’t come across them yet, or maybe you’ve worked on a project that had them installed without knowing them by name. Either way, all of this is merely for additional context.\n\n\n\nLet’s break here\n\n\n\nIf you’re already feeling a bit overwhelmed at this point: don’t sweat it. The key thing I want you to walk away with after reading this specific chapter is that what we think of as “npm” (or maybe more casually as “all that command line, back-end-y stuff”) is not really one thing, but a collection of things that work together to make development easier for us.\n\n\n\nAnd yes: while all that complication seems intimidating up-front, it does actually make things better. I promise.\n\n\n\nWhile front-end seems to move very quickly, no, you have not been left behind. You may just have a bit of continuing education to get caught up on.\n\n\n\n\n← Chapter 1\n\n\n\nChapter 3 →\n\n\nWhat the Heck Does “npm” Mean? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:04:15.000Z",
      "date_modified": "2022-01-20T15:04:15.000Z",
      "_plugin": {
        "pageFilename": "4604248a12b2dc290d40a9f9e5064fe4b9e9eb0158ceeb86c9d7b846e911a299.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361226",
      "url": "https://css-tricks.com/a-deep-look-at-the-command-line/",
      "title": "What the Heck is the Command Line?",
      "summary": "Now that we know what npm stands for and have a super general idea of what it does and how it fits into web development, we ought to spend a little bit of time looking at the command line, because …\n\nWhat the Heck is the Command Line? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Now that we know <a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">what npm stands for</a> and have a super general idea of what it does and how it fits into web development, we ought to spend a little bit of time looking at the command line, because it’s how we interact with npm.</p>\n\n\n\n<span id=\"more-361226\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>An overview of the command line</h3>\n\n\n\n<p>The command line is a place we can type (predictably enough) <em>commands</em> to be executed directly by our computer. It’s extremely fast, and allows greater admin permissions than most apps that attempt to handle the command line for you. Need to install something on your system, or perhaps update it? The command line can do that, not to mention uninstall them, too. Heck, even server-side languages can run on the command line, opening up a wide range of tools and development techniques.</p>\n\n\n\n<p>It’s for those reasons the command line is considered an indispensable tool for many developers. Even if you&#8217;re not a developer, odds are you’ve encountered the command line at some point. Maybe you’ve accessed it when you opened the Terminal app in MacOS. Maybe you’ve used one built directly into your code editor—<a href=\"https://code.visualstudio.com/\" rel=\"noopener\">VS Code</a> and many other code editors come with integrated terminal. Perhaps you’ve even come across third-party terminal apps like <a href=\"https://iterm2.com/\" rel=\"noopener\">iTerm</a> or <a href=\"https://hyper.is/\" rel=\"noopener\">Hyper</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1200\" height=\"600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=1200%2C600&#038;ssl=1\" alt=\"A collage of screenshots showing a terminal and the command line in different applications.\" class=\"wp-image-361228\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you&#8217;ve used the terminal, it&#8217;s possible that much of your command line usage to this point has simply been typing (or pasting) commands somebody else gave you. That’s fine; that’s often how we get things done.</p>\n\n\n\n<p>But let’s take a moment to understand exactly what the command line <em>is,</em> and why it’s so broadly used.</p>\n\n\n\n<h3>Command line vs. terminal</h3>\n\n\n\n<p>The “command line” and the “terminal” are technically two different and distinct things, but are often used interchangeably. You may also hear the command line called a “shell” or see it abbreviated as “CLI” which is short for “command line interface.”</p>\n\n\n\n<p>Pedantic distinctions aside, the terms are often used to mean pretty much the same thing. So just to keep things as simple as possible, I&#8217;ll be using them interchangeably from here on out.</p>\n\n\n\n<h3>Opening the command line</h3>\n\n\n\n<p>Whatever you want to call it, you probably know the command line as that scary-looking window, perhaps with a dark background and white (sometimes greenish) text, where you type commands that your computer seems to understand, even if you do not.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1836\" height=\"1072\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=1836%2C1072&#038;ssl=1\" alt=\"Screenshot of a blank open terminal window with a dark background.\" class=\"wp-image-361447\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?w=1836&amp;ssl=1 1836w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=300%2C175&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=1024%2C598&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=768%2C448&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=1536%2C897&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=1000%2C584&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>By default, a terminal window probably looks something like this, though its appearance can vary.</figcaption></figure>\n\n\n\n<p>Depending on where and how you&#8217;re working on the command line, one of the first things you might notice is an inconspicuous dollar sign character, <code>$</code>, that’s displayed on the first line where you’re able to start typing. You may have even seen it in other articles or documentation.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1532\" height=\"624\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=1532%2C624&#038;ssl=1\" alt=\"This screenshot of Vue’s documentation for using npm includes the $ character in a command example.\" class=\"wp-image-361445\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?w=1532&amp;ssl=1 1532w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=300%2C122&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=1024%2C417&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=768%2C313&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=1000%2C407&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It’s common convention to prefix commands with a <code>$</code> character—but it’s a confusing convention for sure. That’s because there’s no need to type it. It’s literally <em>not</em> part of the command. Instead, <code>$</code> signifies a command that’s meant to be run in a terminal.</p>\n\n\n\n<p>So here’s the first rule to know about working with the command line: if you find yourself typing or copying an instruction that includes the <code>$</code> character, know that there is no need to include it in your work; the terminal’s got it covered.</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">## No need to copy the $\n$ npm run build</code></pre>\n\n\n\n<p>You may see something else beginning a line instead of <code>$</code>, like <code>&gt;</code>, <code>_</code> , or even an arrow. Again, whatever it is, it’s almost certainly not meant to be typed or pasted directly into the command line. Whether or not documentation or other tutorials should include the starting character of a line is an entirely different conversation (one that <a href=\"https://css-tricks.com/to-or-not-to-displaying-terminal-code-snippets/\">Chris has discussed at length</a>). Either way, it has the potential to be confusing, so I want to make sure that’s called out.</p>\n\n\n\n<h3>What does the command line do?</h3>\n\n\n\n<p>Movies and TV shows often portray a terminal as something fast-typing hackers use in a dark, secluded room. That’s partly just because it makes for good entertainment for folks who probably wouldn’t know a real terminal from the cascading letters in <em>The Matrix</em>. (Nor should they; I couldn’t tell if a surgery portrayed on a TV show is accurate, and am perfectly content leaving that distinction to the professionals.)</p>\n\n\n\n<p>But the command line isn’t exactly for writing code. As the name “command line” implies, it&#8217;s for writing <em>commands.</em> I suppose you could say that <em>all</em> coding is commands to some extent, so this is admittedly a bit of a blurry line. But generally speaking, code in a terminal is written differently than it is in a code editor. Instead, you use the terminal to boss your computer around with commands you want it to run <em>immediately</em>.</p>\n\n\n\n<h3>The advantages of the command line</h3>\n\n\n\n<p>You may wonder why developers like to work in the command line in the first place. You might prefer a nice app, or graphical user interface (GUI for short, sometimes pronounced “gooey”) where you can <em>see</em> all your options and find the best one visually. That’s perfectly fine, and we’ll talk a bit about GUIs in this chapter and provide examples of them.</p>\n\n\n\n<p>Many developers feel that way, even if it doesn’t seem like it. But working within the command line brings some advantages that aren’t always easy to replicate in a visual app.</p>\n\n\n\n<h4>It grants you god-like system privileges</h4>\n\n\n\n<p>The command line is what computer science-y people refer to as a “privileged environment.” That might sound like it refers to a Yale frat house, but it just means it’s a place where there are very few restrictions on what you are allowed to do; a place without guardrails.</p>\n\n\n\n<p>This is where the command line’s daunting reputation comes from—whatever command you type, as far as it’s valid, is executed immediately and, often, irreversibly. It’s capable of interacting with the hidden files your operating system tries to prevent you from editing. You have the <em>power</em> to access anything in the system. You even have the power to interact with similar core files on a remote server—and we all know the adage that great responsibility comes with that kind of power.</p>\n\n\n\n<p>It might be helpful to think of the command line like a lazy security guard. It assumes you <em>always</em> know what you’re doing and lets you right through the entrance. That makes it a bit risky, yes, but it also makes it very powerful, and the perfect choice for certain tasks and projects.</p>\n\n\n\n<h4>It’s super fast</h4>\n\n\n\n<p>Another advantage the command line has over typical apps is: <strong>it’s fast</strong>.</p>\n\n\n\n<p>This isn’t always the case; the command line’s speed tends to be overstated and depends largely on the task in question. But when it <em>is</em> faster, it can often be <em>many times</em> faster. Plus, the place where the command line really shines tends to be exactly the place where code projects need speed the most, which is downloading and creating files.</p>\n\n\n\n<p>As we’ll see in other chapters of this guide, a key part of what npm does is install things on your machine (usually in a folder that’s designated for the project you’re working on). That’s what makes the command line great for working with a package manager (we&#8217;ll get to what that means, too) like npm—it downloads and transmits files between computers—generally much, <em>much</em> faster than, say, using a browser to do it.</p>\n\n\n\n<p>The command line enables npm to generate tons of files with incredible speed. The ability to run a single command that installs, updates, or deletes those files together in one fell swoop at high speed makes the terminal the fastest, most efficient tool for many jobs.</p>\n\n\n\n<h4>It does what other languages cannot</h4>\n\n\n\n<p>One more other reason working in the terminal is so advantageous is that it’s the place where many of the tools you might want to use in your project are already available to you without any additional setup.</p>\n\n\n\n<p>But let’s back up a bit.</p>\n\n\n\n<p>When you hear the phrase “server-side language,” you might think of PHP, Ruby, or Java. Maybe it’s even newer entries into the space, like Rust or Go. You might even already know that Node belongs on that list, but if not, forgive me for jumping ahead just a bit.</p>\n\n\n\n<p>Anyway, when most people think of server-side languages like these, they tend to think of a web server waiting for requests and then responding to them. WordPress, for example, sits idle until it receives a request that fires up PHP. When you send a new tweet, that’s a request on Twitter&#8217;s servers that eventually hits a Ruby method in Rails.</p>\n\n\n\n<p>Server-side languages are rightly considered more powerful, so to speak, than web languages. HTML, CSS, and JavaScript are wonderful, but they can’t work with a file system, send email, process images, issue system commands, interact with the operating system, or run scheduled tasks; among many, many other things an app or website might need to do. By default, JavaScript in the browser can’t even <em>run</em> unless somebody is actively looking at the web page in their browser.</p>\n\n\n\n<p>It’s normal to think of server-side languages as the powerful engine behind more robust apps and software. And, in many cases, that’s accurate. But let’s take a moment to recognize that for the purpose of running code, <em>your machine is a server.</em> Not a <em>web</em> server although (it <em>could</em> be one, but that would be weird and probably unwise). But a server, nonetheless.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"800\" height=\"600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/r_1963500_fWs1u.jpg?resize=800%2C600&#038;ssl=1\" alt=\"A photo of a laptop that is half-closed with a sheet of paper from a yellow legal pad that says This 9s a server (yes, really), do not close the lid!\" class=\"wp-image-361231\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/r_1963500_fWs1u.jpg?w=800&amp;ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/r_1963500_fWs1u.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/r_1963500_fWs1u.jpg?resize=768%2C576&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>You probably don’t think of your machine as a server—nor should you. But it can run server-side programming languages.</figcaption></figure>\n\n\n\n<p>You can install and run any of the server-side languages we&#8217;ve mentioned, and perhaps you’ve already even done so at some point (or at least tried to). You might have installed PHP so you can run WordPress (though these days there are much <a href=\"https://css-tricks.com/using-local-with-flywheel/\">nicer ways to do it</a>), or you may have installed Ruby so that you could follow some tutorials about Rails, just as examples.</p>\n\n\n\n<p>Or, maybe not. Maybe you’ve never installed a whole dang programming language before. Either way, just know that these languages run <em>on a server</em> rather than a web browser—and for that purpose, your machine is a server.</p>\n\n\n\n<p>Beyond that, many of the tools you might want to use with your development workflow—things like Sass for compiling CSS—actually <em>run</em> on server-side languages. So using the command line puts you in the place where all the most powerful tools are readily available.</p>\n\n\n\n<h3>Using an app instead of the command line</h3>\n\n\n\n<p>We briefly touched on GUIs earlier in this article. It’s worth noting that some command line tasks have corresponding GUIs that make working with the command line more visual and programmatic.</p>\n\n\n\n<p>Good examples include <a href=\"https://desktop.github.com/\" rel=\"noopener\">GitHub Desktop</a> (for managing code repositories) and <a href=\"https://codekitapp.com/\" rel=\"noopener\">CodeKit</a> (for processing, bundling and compiling assets), though the Source Control tab in VS Code also qualifies. Even though GUIs like these are generally focused on specific duties, they let you get things done through a nice visual user interface, in an actual app window that’s outside of the terminal window.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1892\" height=\"1312\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=1892%2C1312&#038;ssl=1\" alt=\"Screenshot of the CodeKit app after running ESlint showing how an app can visualize the command line.\" class=\"wp-image-361234\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?w=1892&amp;ssl=1 1892w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=300%2C208&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=1024%2C710&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=768%2C533&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=1536%2C1065&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=1000%2C693&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>CodeKit can execute a command to check code formatting with tools like ESLint without directly using the command line.</figcaption></figure>\n\n\n\n<p>A GUI is lovely to have as an option, and even though I’ve become quite comfortable working on the command line over the years, I still wish there were more GUIs to do the things the command line makes possible—both for my own convenience and to lower the barrier to entry for new developers.</p>\n\n\n\n<p>I believe the reason there aren’t more such apps, however, is because of speed. It’s much quicker and easier to build a command line interface (CLI) than it is to put together a full-fledged app, often by orders of magnitude. So if we want nice things <em>today</em>, the command line is often the place we need to go for them.</p>\n\n\n\n<h3>What’s next</h3>\n\n\n\n<p>We just spent some time getting acquainted with the command line. Even though the command line is not <em>specific</em> to npm, it’s core to working <em>with</em> npm. It’s the interface from which we tell the system what to do, granting us incredible powers at the system or server level to complete tasks in large swaths at breakneck speeds. As a package manager, npm is in the business of installing, updating, and deleting files (among other things) for a web project. The command line is how we communicate with npm to do all of that.</p>\n\n\n\n<p>Next up, we’re going to break down what npm is a little more by focusing on the first letter in the abbreviation: “n” for Node. What the heck is that and why is it in the name? That’s where we turn our focus next.</p>\n\n\n\n<div class=\"wp-container-61f32eef991b3 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">← Chapter 2</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">Chapter 4 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-deep-look-at-the-command-line/\">What the Heck is the Command Line?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Now that we know what npm stands for and have a super general idea of what it does and how it fits into web development, we ought to spend a little bit of time looking at the command line, because it’s how we interact with npm.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line? (You are here!)What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\nAn overview of the command line\n\n\n\nThe command line is a place we can type (predictably enough) commands to be executed directly by our computer. It’s extremely fast, and allows greater admin permissions than most apps that attempt to handle the command line for you. Need to install something on your system, or perhaps update it? The command line can do that, not to mention uninstall them, too. Heck, even server-side languages can run on the command line, opening up a wide range of tools and development techniques.\n\n\n\nIt’s for those reasons the command line is considered an indispensable tool for many developers. Even if you’re not a developer, odds are you’ve encountered the command line at some point. Maybe you’ve accessed it when you opened the Terminal app in MacOS. Maybe you’ve used one built directly into your code editor—VS Code and many other code editors come with integrated terminal. Perhaps you’ve even come across third-party terminal apps like iTerm or Hyper.\n\n\n\n\n\n\n\nIf you’ve used the terminal, it’s possible that much of your command line usage to this point has simply been typing (or pasting) commands somebody else gave you. That’s fine; that’s often how we get things done.\n\n\n\nBut let’s take a moment to understand exactly what the command line is, and why it’s so broadly used.\n\n\n\nCommand line vs. terminal\n\n\n\nThe “command line” and the “terminal” are technically two different and distinct things, but are often used interchangeably. You may also hear the command line called a “shell” or see it abbreviated as “CLI” which is short for “command line interface.”\n\n\n\nPedantic distinctions aside, the terms are often used to mean pretty much the same thing. So just to keep things as simple as possible, I’ll be using them interchangeably from here on out.\n\n\n\nOpening the command line\n\n\n\nWhatever you want to call it, you probably know the command line as that scary-looking window, perhaps with a dark background and white (sometimes greenish) text, where you type commands that your computer seems to understand, even if you do not.\n\n\n\nBy default, a terminal window probably looks something like this, though its appearance can vary.\n\n\n\nDepending on where and how you’re working on the command line, one of the first things you might notice is an inconspicuous dollar sign character, $, that’s displayed on the first line where you’re able to start typing. You may have even seen it in other articles or documentation.\n\n\n\n\n\n\n\nIt’s common convention to prefix commands with a $ character—but it’s a confusing convention for sure. That’s because there’s no need to type it. It’s literally not part of the command. Instead, $ signifies a command that’s meant to be run in a terminal.\n\n\n\nSo here’s the first rule to know about working with the command line: if you find yourself typing or copying an instruction that includes the $ character, know that there is no need to include it in your work; the terminal’s got it covered.\n\n\n\n## No need to copy the $\n$ npm run build\n\n\n\nYou may see something else beginning a line instead of $, like >, _ , or even an arrow. Again, whatever it is, it’s almost certainly not meant to be typed or pasted directly into the command line. Whether or not documentation or other tutorials should include the starting character of a line is an entirely different conversation (one that Chris has discussed at length). Either way, it has the potential to be confusing, so I want to make sure that’s called out.\n\n\n\nWhat does the command line do?\n\n\n\nMovies and TV shows often portray a terminal as something fast-typing hackers use in a dark, secluded room. That’s partly just because it makes for good entertainment for folks who probably wouldn’t know a real terminal from the cascading letters in The Matrix. (Nor should they; I couldn’t tell if a surgery portrayed on a TV show is accurate, and am perfectly content leaving that distinction to the professionals.)\n\n\n\nBut the command line isn’t exactly for writing code. As the name “command line” implies, it’s for writing commands. I suppose you could say that all coding is commands to some extent, so this is admittedly a bit of a blurry line. But generally speaking, code in a terminal is written differently than it is in a code editor. Instead, you use the terminal to boss your computer around with commands you want it to run immediately.\n\n\n\nThe advantages of the command line\n\n\n\nYou may wonder why developers like to work in the command line in the first place. You might prefer a nice app, or graphical user interface (GUI for short, sometimes pronounced “gooey”) where you can see all your options and find the best one visually. That’s perfectly fine, and we’ll talk a bit about GUIs in this chapter and provide examples of them.\n\n\n\nMany developers feel that way, even if it doesn’t seem like it. But working within the command line brings some advantages that aren’t always easy to replicate in a visual app.\n\n\n\nIt grants you god-like system privileges\n\n\n\nThe command line is what computer science-y people refer to as a “privileged environment.” That might sound like it refers to a Yale frat house, but it just means it’s a place where there are very few restrictions on what you are allowed to do; a place without guardrails.\n\n\n\nThis is where the command line’s daunting reputation comes from—whatever command you type, as far as it’s valid, is executed immediately and, often, irreversibly. It’s capable of interacting with the hidden files your operating system tries to prevent you from editing. You have the power to access anything in the system. You even have the power to interact with similar core files on a remote server—and we all know the adage that great responsibility comes with that kind of power.\n\n\n\nIt might be helpful to think of the command line like a lazy security guard. It assumes you always know what you’re doing and lets you right through the entrance. That makes it a bit risky, yes, but it also makes it very powerful, and the perfect choice for certain tasks and projects.\n\n\n\nIt’s super fast\n\n\n\nAnother advantage the command line has over typical apps is: it’s fast.\n\n\n\nThis isn’t always the case; the command line’s speed tends to be overstated and depends largely on the task in question. But when it is faster, it can often be many times faster. Plus, the place where the command line really shines tends to be exactly the place where code projects need speed the most, which is downloading and creating files.\n\n\n\nAs we’ll see in other chapters of this guide, a key part of what npm does is install things on your machine (usually in a folder that’s designated for the project you’re working on). That’s what makes the command line great for working with a package manager (we’ll get to what that means, too) like npm—it downloads and transmits files between computers—generally much, much faster than, say, using a browser to do it.\n\n\n\nThe command line enables npm to generate tons of files with incredible speed. The ability to run a single command that installs, updates, or deletes those files together in one fell swoop at high speed makes the terminal the fastest, most efficient tool for many jobs.\n\n\n\nIt does what other languages cannot\n\n\n\nOne more other reason working in the terminal is so advantageous is that it’s the place where many of the tools you might want to use in your project are already available to you without any additional setup.\n\n\n\nBut let’s back up a bit.\n\n\n\nWhen you hear the phrase “server-side language,” you might think of PHP, Ruby, or Java. Maybe it’s even newer entries into the space, like Rust or Go. You might even already know that Node belongs on that list, but if not, forgive me for jumping ahead just a bit.\n\n\n\nAnyway, when most people think of server-side languages like these, they tend to think of a web server waiting for requests and then responding to them. WordPress, for example, sits idle until it receives a request that fires up PHP. When you send a new tweet, that’s a request on Twitter’s servers that eventually hits a Ruby method in Rails.\n\n\n\nServer-side languages are rightly considered more powerful, so to speak, than web languages. HTML, CSS, and JavaScript are wonderful, but they can’t work with a file system, send email, process images, issue system commands, interact with the operating system, or run scheduled tasks; among many, many other things an app or website might need to do. By default, JavaScript in the browser can’t even run unless somebody is actively looking at the web page in their browser.\n\n\n\nIt’s normal to think of server-side languages as the powerful engine behind more robust apps and software. And, in many cases, that’s accurate. But let’s take a moment to recognize that for the purpose of running code, your machine is a server. Not a web server although (it could be one, but that would be weird and probably unwise). But a server, nonetheless.\n\n\n\nYou probably don’t think of your machine as a server—nor should you. But it can run server-side programming languages.\n\n\n\nYou can install and run any of the server-side languages we’ve mentioned, and perhaps you’ve already even done so at some point (or at least tried to). You might have installed PHP so you can run WordPress (though these days there are much nicer ways to do it), or you may have installed Ruby so that you could follow some tutorials about Rails, just as examples.\n\n\n\nOr, maybe not. Maybe you’ve never installed a whole dang programming language before. Either way, just know that these languages run on a server rather than a web browser—and for that purpose, your machine is a server.\n\n\n\nBeyond that, many of the tools you might want to use with your development workflow—things like Sass for compiling CSS—actually run on server-side languages. So using the command line puts you in the place where all the most powerful tools are readily available.\n\n\n\nUsing an app instead of the command line\n\n\n\nWe briefly touched on GUIs earlier in this article. It’s worth noting that some command line tasks have corresponding GUIs that make working with the command line more visual and programmatic.\n\n\n\nGood examples include GitHub Desktop (for managing code repositories) and CodeKit (for processing, bundling and compiling assets), though the Source Control tab in VS Code also qualifies. Even though GUIs like these are generally focused on specific duties, they let you get things done through a nice visual user interface, in an actual app window that’s outside of the terminal window.\n\n\n\nCodeKit can execute a command to check code formatting with tools like ESLint without directly using the command line.\n\n\n\nA GUI is lovely to have as an option, and even though I’ve become quite comfortable working on the command line over the years, I still wish there were more GUIs to do the things the command line makes possible—both for my own convenience and to lower the barrier to entry for new developers.\n\n\n\nI believe the reason there aren’t more such apps, however, is because of speed. It’s much quicker and easier to build a command line interface (CLI) than it is to put together a full-fledged app, often by orders of magnitude. So if we want nice things today, the command line is often the place we need to go for them.\n\n\n\nWhat’s next\n\n\n\nWe just spent some time getting acquainted with the command line. Even though the command line is not specific to npm, it’s core to working with npm. It’s the interface from which we tell the system what to do, granting us incredible powers at the system or server level to complete tasks in large swaths at breakneck speeds. As a package manager, npm is in the business of installing, updating, and deleting files (among other things) for a web project. The command line is how we communicate with npm to do all of that.\n\n\n\nNext up, we’re going to break down what npm is a little more by focusing on the first letter in the abbreviation: “n” for Node. What the heck is that and why is it in the name? That’s where we turn our focus next.\n\n\n\n\n← Chapter 2\n\n\n\nChapter 4 →\n\n\nWhat the Heck is the Command Line? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:04:09.000Z",
      "date_modified": "2022-01-20T15:04:09.000Z",
      "_plugin": {
        "pageFilename": "bb54b9d5684637dc48e2590cbc5f924dc5381b4690c5bcb55dd46f9b614e1832.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361241",
      "url": "https://css-tricks.com/node-and-how-it-works-with-npm/",
      "title": "What the Heck is Node?",
      "summary": "(This is a sponsored post.)\nHere’s what you need to know about Node.js (or simply Node) and how it relates to npm right off the bat:\n\nNode is JavaScript, but as a server-side language.\nThis is possible because of \n\n…\n\nWhat the Heck is Node? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>Here’s what you need to know about Node.js (or simply Node) and how it relates to npm right off the bat:</p>\n\n\n\n<ul><li>Node is JavaScript, but as a server-side language.</li><li>This is possible because of V8, Chromium’s JavaScript engine, which can run on its own, outside the confines of the browser.</li><li>Node and browser-based JavaScript can be very different, and have different capabilities, though both are JavaScript at their core.</li><li>You don’t need to know Node to use npm.</li></ul>\n\n\n\n<p>As you may know by now, npm stands for <strong>Node Package Manager</strong> (even if the official <a href=\"https://www.npmjs.com/\" rel=\"noopener\">npm website</a> displays amusing alternative names in its header on each page load, like “Ninja Pumpkin Mutants”).</p>\n\n\n\n<p>The key thing to understand right away is this: “Node” and “Package Manager” are the two big, distinct pieces that combine to make npm.</p>\n\n\n\n<p>We’ll cover what a package manager is and why you might consider using one when we get to the next chapter in this npm guide. For now, though, let’s focus on understanding what Node is, as it’s is a key part to understanding modern web development.</p>\n\n\n\n<span id=\"more-361241\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>Node is JavaScript, but without all the browser</h3>\n\n\n\n<p>You likely know JavaScript primarily as a language that runs in the browser, similar to HTML and CSS. Yes, each of these languages has abstractions and supersets (like <a href=\"https://haml.info\" rel=\"noopener\">HAML</a> for HTML, Sass for CSS, and TypeScript for JavaScript, as examples), as well as compilers and transpilers and all kinds of things that transform them into this shape or that. But ultimately, what these tools generate is vanilla (i.e., pure) code in the correct syntax, as if the abstractions were never used, to run in the browser and in the browser alone.</p>\n\n\n\n<p>That’s the thing that took me the longest time to understand, and which, honestly, might be an even bigger missed memo than the whole npm thing. JavaScript doesn’t need a browser anymore in order to run. So, you&#8217;ll sometimes see me refer to Node JavaScript when distinguishing between it and &#8220;browser-based&#8221; JavaScript.</p>\n\n\n\n<h3>Server-side vs. client-side languages</h3>\n\n\n\n<p>At this point, I feel it’s worth taking a moment to explore the distinction between client-side languages (HTML, CSS, JavaScript), and server-side languages (basically all the rest of them). I won’t assume you have any experience with server-side languages, like PHP, Ruby, or Python, but if the <em>concept</em> of server-side languages is entirely new to you, it may be worth <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Introduction\" rel=\"noopener\">reading up on what they are</a>. (To summarize: they&#8217;re code languages that run purely on a server instead of the browser, and generally have much broader and more powerful capabilities.)</p>\n\n\n\n<p>This is relevant because several years ago, circa 2009, there were some very smart people who <em>really</em> liked JavaScript. In particular, they liked how <em>fast</em> JavaScript is (especially compared to the dominant server-side languages at the time, most notably, PHP and Ruby), and they wanted to have JavaScript <em>everywhere</em>, not just in a browser.</p>\n\n\n\n<p><a href=\"https://en.wikipedia.org/wiki/Ryan_Dahl\" rel=\"noopener\">Ryan Dahl</a> is the most prominent figure among them, and is credited with the invention of Node (and more recently, <a href=\"https://deno.land/\" rel=\"noopener\">Deno</a>, which is an anagram of Node). That’s a fun thing to know, but otherwise not strictly relevant to this topic.</p>\n\n\n\n<h3>How Node works</h3>\n\n\n\n<p>What is relevant, though, is that <strong>Node is essentially JavaScript as a server-side language that runs <em>outside</em> <em>of</em> the browser</strong>.</p>\n\n\n\n<p>How is that possible? Under the hood, each browser has its own individual JavaScript engine. This is the part of the browser that actually <em>runs</em> JavaScript. Yes, that’s apparently a separate piece of the browser and not part of the same bits that do the HTML and CSS—which I guess makes sense when you think about the fact that we have literal APIs between the document and JavaScript. Heck, even <a href=\"https://css-tricks.com/dom/\">the concept of a DOM</a> makes more sense when you think of the department that handles JavaScript as a makeshift office down the hall from the HTML department.</p>\n\n\n\n<p>The JavaScript engine in Chromium-based browsers is called V8, presumably after <a href=\"https://en.wikipedia.org/wiki/V8_engine\" rel=\"noopener\">a specific kind of car engine</a> (not the “<a href=\"https://www.campbells.com/v8/\" rel=\"noopener\">vegetable drink</a>” made mostly of tomato juice). V8 is by far the most popular JavaScript engine. Thanks to <a href=\"https://en.wikipedia.org/wiki/ECMAScript\" rel=\"noopener\">ECMAScript</a> standardization efforts over approximately the last 15 years, there aren’t really any major differences between JavaScript engines anymore as far as browsers go. The engine used in Chrome is a lot like the engine that runs in Firefox, which is a lot like Safari, and so on. V8’s popularity these days has less to do with its distinctions, and more to do with Chrome’s self-sustaining ubiquity.</p>\n\n\n\n<p>(Side note: Firefox’s JavaScript engine is named SpiderMonkey. That’s not particularly relevant, but it <em>is</em> further proof that Firefox is the coolest.)</p>\n\n\n\n<p>Why does this matter? Well, it turns out, you can take the JavaScript engine <em>out</em> of a browser, and with some modification, run it on its own—kind of like if you decided to pull the stereo out of a car, tinker a bit, and make it into a stereo system for your home instead. V8 (and, presumably, a car’s stereo) can function perfectly fine as a standalone unit in <em>any</em> environment.</p>\n\n\n\n<p>In other words: V8 makes it possible to run JavaScript <em>anywhere</em>. That&#8217;s why we have &#8220;Node&#8221; JavaScript and &#8220;browser-based&#8221; JavaScript.</p>\n\n\n\n<h3>Node is almost (but not exactly) JavaScript</h3>\n\n\n\n<p>To recap: JavaScript is a server-side language now! It’s called Node, and it <em>could</em> mean you don’t even <em>need</em> to learn anything about other server-side languages. We are front-end developers, and <a href=\"https://css-tricks.com/video-screencasts/160-the-all-powerful-front-end-developer/\">we have super-powers now</a>.</p>\n\n\n\n<p>Having said all this, however, <strong>Node and the JavaScript you’re used to running in the browser are both similar and very different from each other.</strong></p>\n\n\n\n<p>At the risk of veering too far into the weeds here: while both are JavaScript at their core, and while the language and syntax is the same, many staples of JavaScript in the browser (like the <code>window</code> or <code>document</code>, and even the oft-taken-for-granted <code>alert</code>) are not present in a purely server-side Node environment. There <em>is</em> no window, of course, when the language is just running on its own, and not in a browser. New Node JavaScript developers are often surprised to learn that even <code>fetch</code> is actually a browser API, not &#8220;pure&#8221; JavaScript.</p>\n\n\n\n<p>Fear not, however. <code>console.log</code> is still your best friend, and there are many <em>new</em>, environment-specific features of Node JavaScript that differ from the browser’s implementation of JavaScript, such as the <code>process</code> object, which contains all the details about any processes that are currently running.</p>\n\n\n\n<p>Node and its ecosystem have often, out of necessity, grown in a very different direction than browser-based JavaScript over the years. (As an obvious example: the syntax for imports between the two has been different for years, and only now is beginning to merge together again. We&#8217;ll talk about that a little more in <a href=\"https://css-tricks.com/how-to-install-an-npm-project\">the final chapter</a>.)</p>\n\n\n\n<p>Node long held the privilege of being able to move much faster than browsers when it comes to gaining new features, and has had its own set of concerns to deal with as well. It began to power server-side apps the same way Ruby and PHP had been doing for years, even while browsers were still trying to coalesce on standards. This has resulted in Node JavaScript and browser-based JavaScript becoming more like cousins than clones.</p>\n\n\n\n<p>Here’s what I think is a fair analogy to explain the differences between the two JavaScript cousins: consider two similar musical instruments, say an upright bass and a modern electric bass guitar. Both instruments are tuned the same, and play the same notes; if you know one, in many ways, you kind of know the other. But while you’ll find it much easier to learn one after you’ve learned the other, <em>playing</em> the new one will be very different from what you’re used to.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=1024%2C576&#038;ssl=1\" alt=\"\" class=\"wp-image-361921\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=1000%2C563&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?w=1280&amp;ssl=1 1280w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The same, but different (Photos: <a href=\"https://commons.wikimedia.org\" rel=\"noopener\">Wikimedia Commons</a>, <a href=\"https://unsplash.com\" rel=\"noopener\">Unplash</a>)</figcaption></figure>\n\n\n\n<p>Similarly, while one developer might write one type of JavaScript and a second developer writes in another type of JavaScript, their jobs are unlikely to look the same.</p>\n\n\n\n<p>Node is JavaScript, with the capabilities of other server-side languages mentioned before—things like reading from and writing to the file system, access to system-level APIs, email, the ability to listen for and respond to requests, scheduled tasks… the list goes on.</p>\n\n\n\n<p>I won’t say more on that here, but just know that while both are JavaScript at the end of the day, they run in different environments and are each capable of doing some things the other can’t. Even if you’ve written browser-based JavaScript before, Node will still likely feel a bit foreign to you beyond the foundational syntax, and will often be used in very different ways.</p>\n\n\n\n<h3>Running Node locally</h3>\n\n\n\n<p>As is generally the case with server-side languages, you <em>do</em> need to install Node before you can use it.</p>\n\n\n\n<p>Node is commonly installed alongside npm, together as one, since the package manager part needs Node, and the Node part is more useful with a package manager. (You could say they’re a <em>package</em> deal. No, I will not apologize for that joke. I am a dad, after all.)</p>\n\n\n\n<p>I’d like to stress at this point that <strong>you don’t need to know anything about Node to use npm</strong>. So, even though I&#8217;m about to cover some Node examples here, please consider this entire section something that’s nice to know, but inessential to that end. I feel it’s still useful to get a slightly better idea of how Node works, just for the sake of painting a more complete picture.</p>\n\n\n\n<p class=\"is-style-explanation\">We will cover <a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">how to install Node and npm</a> in an upcoming chapter of this guide. So, if you don’t have it installed already, you can either just glance over this part, or come back here when you do have it ready. Either way, this won’t be crucial for following along with this npm guide.</p>\n\n\n\n<p>If you would like to try it out, you can create a new <code>test.js</code> file and put some generic JavaScript in it. Something contrived like the following code that logs some content to the console should do the trick:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">console.log('Look, ma, Node hands!')\n\nconst oneThroughFive = [1, 2, 3, 4, 5]\n\noneThroughFive.forEach(number => {\n  console.log(number)\n})</code></pre>\n\n\n\n<p>Let’s say you save that code, then open the command line in a terminal window, navigate to where the file is (using <code>cd</code>, or “change directory&#8221;), and run <code>node test.js</code> to get the following output:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">Look, ma, Node hands!\n1\n2\n3\n4\n5</code></pre>\n\n\n\n<p>You can <em>also</em> enter <code>node</code> by itself (no filename afterwards) to open an interactive terminal where you can run arbitrary Node JavaScript. If you’ve ever popped open the console in your browser&#8217;s DevTools to type out some code, that’s <em>exactly</em> what this is, just on the command line with Node instead.</p>\n\n\n\n<p>Try it out if you’d like to, assuming you do have Node installed. But again, this is all just for illustration and not required for using npm.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1714\" height=\"878\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=1714%2C878&#038;ssl=1\" alt=\"A screenshot of an open terminal window showing Node version 17.0.1 running and the output from the previous example under it.\" class=\"wp-image-361246\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?w=1714&amp;ssl=1 1714w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=300%2C154&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=1024%2C525&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=768%2C393&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=1536%2C787&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=1000%2C512&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3>What’s next</h3>\n\n\n\n<p>Everything we covered in this chapter is nifty and hopefully helps to show you (however simply) the way Node works. Remember, while we didn’t cover any specific example of it, Node is capable of doing anything a server-side language can do. It’s hopefully not too hard to picture how running some JavaScript to do virtually anything you can think of on the system level or even on a remote server is very appealing and advantageous.</p>\n\n\n\n<p>The concept of Node started as a way to run JavaScript outside of the browser. As such, we have Node-based packages of scripts that are used to help us with front-end development. So how do we install those packages and make sure they’re not only updated but that they can be uninstalled? That’s contained in the last two letters in the npm abbreviation: <em>package manager</em>.</p>\n\n\n\n<p>In other words, npm is a tool that manages packages written in Node JavaScript. What exactly is a package manager and how does npm qualify as one? That’s up next in our npm guide.</p>\n\n\n\n<div class=\"wp-container-61f32eef9df86 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">← Chapter 3</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">Chapter 5 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/node-and-how-it-works-with-npm/\">What the Heck is Node?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "(This is a sponsored post.)\nHere’s what you need to know about Node.js (or simply Node) and how it relates to npm right off the bat:\n\n\n\nNode is JavaScript, but as a server-side language.This is possible because of V8, Chromium’s JavaScript engine, which can run on its own, outside the confines of the browser.Node and browser-based JavaScript can be very different, and have different capabilities, though both are JavaScript at their core.You don’t need to know Node to use npm.\n\n\n\nAs you may know by now, npm stands for Node Package Manager (even if the official npm website displays amusing alternative names in its header on each page load, like “Ninja Pumpkin Mutants”).\n\n\n\nThe key thing to understand right away is this: “Node” and “Package Manager” are the two big, distinct pieces that combine to make npm.\n\n\n\nWe’ll cover what a package manager is and why you might consider using one when we get to the next chapter in this npm guide. For now, though, let’s focus on understanding what Node is, as it’s is a key part to understanding modern web development.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node? (You are here!)What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\nNode is JavaScript, but without all the browser\n\n\n\nYou likely know JavaScript primarily as a language that runs in the browser, similar to HTML and CSS. Yes, each of these languages has abstractions and supersets (like HAML for HTML, Sass for CSS, and TypeScript for JavaScript, as examples), as well as compilers and transpilers and all kinds of things that transform them into this shape or that. But ultimately, what these tools generate is vanilla (i.e., pure) code in the correct syntax, as if the abstractions were never used, to run in the browser and in the browser alone.\n\n\n\nThat’s the thing that took me the longest time to understand, and which, honestly, might be an even bigger missed memo than the whole npm thing. JavaScript doesn’t need a browser anymore in order to run. So, you’ll sometimes see me refer to Node JavaScript when distinguishing between it and “browser-based” JavaScript.\n\n\n\nServer-side vs. client-side languages\n\n\n\nAt this point, I feel it’s worth taking a moment to explore the distinction between client-side languages (HTML, CSS, JavaScript), and server-side languages (basically all the rest of them). I won’t assume you have any experience with server-side languages, like PHP, Ruby, or Python, but if the concept of server-side languages is entirely new to you, it may be worth reading up on what they are. (To summarize: they’re code languages that run purely on a server instead of the browser, and generally have much broader and more powerful capabilities.)\n\n\n\nThis is relevant because several years ago, circa 2009, there were some very smart people who really liked JavaScript. In particular, they liked how fast JavaScript is (especially compared to the dominant server-side languages at the time, most notably, PHP and Ruby), and they wanted to have JavaScript everywhere, not just in a browser.\n\n\n\nRyan Dahl is the most prominent figure among them, and is credited with the invention of Node (and more recently, Deno, which is an anagram of Node). That’s a fun thing to know, but otherwise not strictly relevant to this topic.\n\n\n\nHow Node works\n\n\n\nWhat is relevant, though, is that Node is essentially JavaScript as a server-side language that runs outside of the browser.\n\n\n\nHow is that possible? Under the hood, each browser has its own individual JavaScript engine. This is the part of the browser that actually runs JavaScript. Yes, that’s apparently a separate piece of the browser and not part of the same bits that do the HTML and CSS—which I guess makes sense when you think about the fact that we have literal APIs between the document and JavaScript. Heck, even the concept of a DOM makes more sense when you think of the department that handles JavaScript as a makeshift office down the hall from the HTML department.\n\n\n\nThe JavaScript engine in Chromium-based browsers is called V8, presumably after a specific kind of car engine (not the “vegetable drink” made mostly of tomato juice). V8 is by far the most popular JavaScript engine. Thanks to ECMAScript standardization efforts over approximately the last 15 years, there aren’t really any major differences between JavaScript engines anymore as far as browsers go. The engine used in Chrome is a lot like the engine that runs in Firefox, which is a lot like Safari, and so on. V8’s popularity these days has less to do with its distinctions, and more to do with Chrome’s self-sustaining ubiquity.\n\n\n\n(Side note: Firefox’s JavaScript engine is named SpiderMonkey. That’s not particularly relevant, but it is further proof that Firefox is the coolest.)\n\n\n\nWhy does this matter? Well, it turns out, you can take the JavaScript engine out of a browser, and with some modification, run it on its own—kind of like if you decided to pull the stereo out of a car, tinker a bit, and make it into a stereo system for your home instead. V8 (and, presumably, a car’s stereo) can function perfectly fine as a standalone unit in any environment.\n\n\n\nIn other words: V8 makes it possible to run JavaScript anywhere. That’s why we have “Node” JavaScript and “browser-based” JavaScript.\n\n\n\nNode is almost (but not exactly) JavaScript\n\n\n\nTo recap: JavaScript is a server-side language now! It’s called Node, and it could mean you don’t even need to learn anything about other server-side languages. We are front-end developers, and we have super-powers now.\n\n\n\nHaving said all this, however, Node and the JavaScript you’re used to running in the browser are both similar and very different from each other.\n\n\n\nAt the risk of veering too far into the weeds here: while both are JavaScript at their core, and while the language and syntax is the same, many staples of JavaScript in the browser (like the window or document, and even the oft-taken-for-granted alert) are not present in a purely server-side Node environment. There is no window, of course, when the language is just running on its own, and not in a browser. New Node JavaScript developers are often surprised to learn that even fetch is actually a browser API, not “pure” JavaScript.\n\n\n\nFear not, however. console.log is still your best friend, and there are many new, environment-specific features of Node JavaScript that differ from the browser’s implementation of JavaScript, such as the process object, which contains all the details about any processes that are currently running.\n\n\n\nNode and its ecosystem have often, out of necessity, grown in a very different direction than browser-based JavaScript over the years. (As an obvious example: the syntax for imports between the two has been different for years, and only now is beginning to merge together again. We’ll talk about that a little more in the final chapter.)\n\n\n\nNode long held the privilege of being able to move much faster than browsers when it comes to gaining new features, and has had its own set of concerns to deal with as well. It began to power server-side apps the same way Ruby and PHP had been doing for years, even while browsers were still trying to coalesce on standards. This has resulted in Node JavaScript and browser-based JavaScript becoming more like cousins than clones.\n\n\n\nHere’s what I think is a fair analogy to explain the differences between the two JavaScript cousins: consider two similar musical instruments, say an upright bass and a modern electric bass guitar. Both instruments are tuned the same, and play the same notes; if you know one, in many ways, you kind of know the other. But while you’ll find it much easier to learn one after you’ve learned the other, playing the new one will be very different from what you’re used to.\n\n\n\nThe same, but different (Photos: Wikimedia Commons, Unplash)\n\n\n\nSimilarly, while one developer might write one type of JavaScript and a second developer writes in another type of JavaScript, their jobs are unlikely to look the same.\n\n\n\nNode is JavaScript, with the capabilities of other server-side languages mentioned before—things like reading from and writing to the file system, access to system-level APIs, email, the ability to listen for and respond to requests, scheduled tasks… the list goes on.\n\n\n\nI won’t say more on that here, but just know that while both are JavaScript at the end of the day, they run in different environments and are each capable of doing some things the other can’t. Even if you’ve written browser-based JavaScript before, Node will still likely feel a bit foreign to you beyond the foundational syntax, and will often be used in very different ways.\n\n\n\nRunning Node locally\n\n\n\nAs is generally the case with server-side languages, you do need to install Node before you can use it.\n\n\n\nNode is commonly installed alongside npm, together as one, since the package manager part needs Node, and the Node part is more useful with a package manager. (You could say they’re a package deal. No, I will not apologize for that joke. I am a dad, after all.)\n\n\n\nI’d like to stress at this point that you don’t need to know anything about Node to use npm. So, even though I’m about to cover some Node examples here, please consider this entire section something that’s nice to know, but inessential to that end. I feel it’s still useful to get a slightly better idea of how Node works, just for the sake of painting a more complete picture.\n\n\n\nWe will cover how to install Node and npm in an upcoming chapter of this guide. So, if you don’t have it installed already, you can either just glance over this part, or come back here when you do have it ready. Either way, this won’t be crucial for following along with this npm guide.\n\n\n\nIf you would like to try it out, you can create a new test.js file and put some generic JavaScript in it. Something contrived like the following code that logs some content to the console should do the trick:\n\n\n\nconsole.log('Look, ma, Node hands!')\n\nconst oneThroughFive = [1, 2, 3, 4, 5]\n\noneThroughFive.forEach(number => {\n  console.log(number)\n})\n\n\n\nLet’s say you save that code, then open the command line in a terminal window, navigate to where the file is (using cd, or “change directory”), and run node test.js to get the following output:\n\n\n\nLook, ma, Node hands!\n1\n2\n3\n4\n5\n\n\n\nYou can also enter node by itself (no filename afterwards) to open an interactive terminal where you can run arbitrary Node JavaScript. If you’ve ever popped open the console in your browser’s DevTools to type out some code, that’s exactly what this is, just on the command line with Node instead.\n\n\n\nTry it out if you’d like to, assuming you do have Node installed. But again, this is all just for illustration and not required for using npm.\n\n\n\n\n\n\n\nWhat’s next\n\n\n\nEverything we covered in this chapter is nifty and hopefully helps to show you (however simply) the way Node works. Remember, while we didn’t cover any specific example of it, Node is capable of doing anything a server-side language can do. It’s hopefully not too hard to picture how running some JavaScript to do virtually anything you can think of on the system level or even on a remote server is very appealing and advantageous.\n\n\n\nThe concept of Node started as a way to run JavaScript outside of the browser. As such, we have Node-based packages of scripts that are used to help us with front-end development. So how do we install those packages and make sure they’re not only updated but that they can be uninstalled? That’s contained in the last two letters in the npm abbreviation: package manager.\n\n\n\nIn other words, npm is a tool that manages packages written in Node JavaScript. What exactly is a package manager and how does npm qualify as one? That’s up next in our npm guide.\n\n\n\n\n← Chapter 3\n\n\n\nChapter 5 →\n\n\nWhat the Heck is Node? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:04:03.000Z",
      "date_modified": "2022-01-20T15:04:03.000Z",
      "_plugin": {
        "pageFilename": "a4f22e7cf06e40f068f42a08a5394a57eeda88b96f4a1a7a09bb953dc68bc55e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361257",
      "url": "https://css-tricks.com/what-the-heck-is-a-package-manager/",
      "title": "What the Heck is a Package Manager?",
      "summary": "If you’re keeping score, so far in this npm guide we’ve developed a general understanding of what npm is—notably, that it stands for Node Package Manager. In the process, we’ve discussed the importance of the command line and how it’s …\n\nWhat the Heck is a Package Manager? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>If you’re keeping score, so far in this npm guide we&#8217;ve developed a general understanding of what npm is—notably, that it stands for Node Package Manager. In the process, we’ve discussed the importance of the command line and how it&#8217;s used with npm.</p>\n\n\n\n<p>We also looked specifically at the “n” in npm—Node—and learned that Node is a lot like the JavaScript code we write to run on websites in a browser. In fact, Node <em>is</em> JavaScript; it just runs outside of the browser, and is capable of doing different things than its browser-based counterpart.</p>\n\n\n\n<span id=\"more-361257\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This </a><a href=\"http://a-complete-beginners-guide-to-npm\">Guide</a> <a href=\"http://a-complete-beginners-guide-to-npm\">For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>What we mean by “package”</h3>\n\n\n\n<p>Now let’s turn our attention to the last two letters in npm, namely the “package manager” part. In order to fully understand what npm is, we need to know what a package manager is. So it naturally follows that in order to understand <em>that</em>, we need to understand what the heck a “package” is.</p>\n\n\n\n<p>“<dfn>Package</dfn>” is a catch-all term for any external code files that you pull into a project and use in some way. Perhaps you’ve used <a href=\"https://jquery.com\" rel=\"noopener\">jQuery</a>, <a href=\"https://getbootstrap.com\" rel=\"noopener\">Bootstrap</a>, or <a href=\"https://axios-http.com\" rel=\"noopener\">Axios</a> on a project in the past. Those are common examples of packages.</p>\n\n\n\n<p>We call these “packages” because they’re “packaged up” and ready to be used. Some languages call them by other names (Ruby calls them “gems” for example), but the concept is the same. At the risk of oversimplifying, <strong>a <dfn>package</dfn> is code that you didn’t write but got from some public source to use in your project.</strong> You know, third-party code.</p>\n\n\n\n<p>Or, if you prefer musical parodies for your mnemonic devices:</p>\n\n\n\n<p>&#x1f3b5; <em>When there’s code that you choose</em><br>&#x1f3b5; <em>That’s not yours, but you use</em><br>&#x1f3b5; <em>That’s a package</em><br>&#x1f3b5; <em>When it’s stuff you install</em><br>&#x1f3b5; <em>That you import and call,</em><br>&#x1f3b5; <em>That’s a package</em></p>\n\n\n\n<p>Packages are also often also referred to as “dependencies,” because the code you write <em>depends</em> on them being present. Code written using jQuery’s <code>$</code> won’t work right if jQuery itself isn’t already loaded, for instance. (For this reason, package managers are also sometimes called “dependency managers.”)</p>\n\n\n\n<p>Packages can be big or small in terms of how much code they contain. A package might do something huge that changes how you write your whole project (like an entire framework), or it might do something very small and focused that you sprinkle in only where needed (like a widget, or a helper for a specific task).</p>\n\n\n\n<h3>Using packages without a package manager</h3>\n\n\n\n<p>Most likely, if you have used a package in the past, you’ve simply applied it with a script tag in the HTML that pulls from an external URL (ideally <a href=\"https://css-tricks.com/adding-a-cdn-to-your-website/\">from a CDN</a>). Here’s how you might include jQuery in the HTML of your site:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js\">&lt;/script></code></pre>\n\n\n\n<p>Another approach is to download a copy of the package, add it to your project’s files, and link to it locally, like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script src=\"/jquery.min.js\">&lt;/script></code></pre>\n\n\n\n<h3>What package managers solve</h3>\n\n\n\n<p>These two approaches have worked well for years. It’s simple. It’s clean. It generally lets you “set it and forget it” as far as the package goes. So why would you need something else?</p>\n\n\n\n<p>You can probably imagine how owning a car might seem unappealing to somebody who has ready access to convenient transit, or who has no need for long-distance travel. (This will tie back into the package manager talk, I promise. Stick with me.)</p>\n\n\n\n<p>If you have easy access to convenient and efficient mass transit, then paying a large price for a massive machine that you have to store somewhere, regularly clean, maintain, and fill with costly fuel probably won’t carry much upside from your perspective. In that specific case, the benefits are negligible; the costs are comparatively overwhelming. Someone in that hypothetical position might even wonder why anybody wants a car at all!</p>\n\n\n\n<p>I bring up this analogy because learning about a new technology can be very hard when <em>it solves a problem you don’t have</em>, in very much the same way that buying a car might fail to solve transportation you already have. It might seem like a massive, needless expenditure.</p>\n\n\n\n<p>What a package manager solves, then, is more a matter of scaling and handling concerns. Simply linking to a package in a script tag works well, as long as:</p>\n\n\n\n<ul><li>the number of projects you have is manageable;</li><li>the number of people working on the projects is manageable;</li><li>the number of updates that need to be made to the packages are manageable; and, most crucially,</li><li>every package used in your projects is client-side (browser) JavaScript or CSS.</li></ul>\n\n\n\n<p>That last one is the doozy, because there’s a plethora of tooling you can’t ever use if you <em>only</em> run things in the browser (more on that in a moment).</p>\n\n\n\n<p>If you <em>do</em> check all of those boxes, you might not ever outgrow this approach. Your development approach might just look like this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1280\" height=\"720\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=1280%2C720&#038;ssl=1\" alt=\"A black and white line illustration showing the diagram of packages with a package manager. A cloud labelled packages is followed by three files, HTML, CSS, and JavaScript, which are followed by the browser.\" class=\"wp-image-361261\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?w=1280&amp;ssl=1 1280w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=1000%2C563&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But even in that case, when you have multiple <code>&lt;script&gt;</code> tags, each linking to a specific version of some script or library, the <em>only</em> way to get any visibility at all into what packages you’re using—and whether they’re up-to-date—is to go manually open up the HTML and look at the code.</p>\n\n\n\n<p>That’s not much of an issue in and of itself, but it’s a problem that grows exponentially as the size and scope of a project ramps up. You may be able to keep track of a few packages manually, but how could you possibly do that when we’re talking about hundreds—if not thousands—of packages? And even if you could manually track those, that’s still introducing a high risk of human error.</p>\n\n\n\n<p><strong>It’s not HTML’s job to be the source of truth for all of the packages used on a project.</strong> Aside from mixing concerns, it also potentially introduces conflicts when trying to merge unrelated work between teammates.</p>\n\n\n\n<p>All this is important, but it’s the smallest part of a larger problem. Understand that client-side JavaScript probably isn’t the <em>only</em> type of package you’ll want to include in your projects forever, even if it is at the moment—and that’s where things <em>really</em> start to fall apart.</p>\n\n\n\n<p>Many production apps use some combination of the following tools and packages, if not all of them:</p>\n\n\n\n<ul><li>Sass (makes writing CSS easier)</li><li>PostCSS (enhances CSS for maximum efficiency and compatibility)</li><li>Babel (transpiles newer JavaScript to run in older browsers)</li><li>TypeScript (adds type checking to JavaScript)</li><li>Hot module reloading by a dev server that auto-refreshes the browser to show your changes</li><li>Additional utilities for code bundling, minification and/or concatenation</li><li>Automatic image compression</li><li>Testing libraries</li><li>Linters</li></ul>\n\n\n\n<p>That all sounds wonderful—and it is!—but notice that you now have multiple dependencies that are not only <em>not</em> present in your script tags, but are <em>not accounted for anywhere in your project at all</em>! There’s no way for anybody—including your future self—to have any idea what tools were used or are required to to get this project running.</p>\n\n\n\n<p>And even if you could know exactly what the project needed that way, you’d still need to go locate, download, and install all of those packages yourself… manually. Depending on the project, this could easily be a day-long task, or longer.</p>\n\n\n\n<p>All this means your workflow now looks a little more like this:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=1024%2C576&#038;ssl=1\" alt=\"A black and white line illustration showing the diagram of packages without a package manager. A group that consists of templates, Sass, and TypeScript or followed by static HTML, CSS, and JavaScript files, which are followed by a group that contains PostCSS and Babel, which is followed by a build tool, which is followed by two forks, one the dev server preview and the other the production browser.\" class=\"wp-image-361263\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=1000%2C563&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?w=1280&amp;ssl=1 1280w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Again, this is all good. This toolchain means that what gets shipped to the browser is highly optimized—but it’s also additional overhead and complexity.</figcaption></figure>\n\n\n\n<p><strong>Convenient as all the tools above are, you still need to <em>manage</em> them</strong>. Dependencies are projects, too, and they ship updates to patch bugs and introduce new features. As such, it’s unrealistic to simply paste a script tag in the HTML with a link that points to package on a CDN then call it good. You have to make sure each thing is installed and working properly not just on <em>your</em> machine, but on every collaborator’s machine, too.</p>\n\n\n\n<p>Package managers exist to make the packages—or dependencies—of a project manageable by knowing what is installed, what’s available to update, and whether one package might create conflicts with another. And the beauty of a package manager is that it accomplishes all of this directly from the command line, with minimal effort.</p>\n\n\n\n<p>Many package managers, especially npm, also provide additional features that open up even more possibilities to make development more efficient. But managing packages is the main attraction.</p>\n\n\n\n<h3>There are package managers that aren’t npm</h3>\n\n\n\n<p>This part isn’t super relevant to npm itself, but for the sake of completeness, I should also mention that npm isn’t the <em>only</em> JavaScript package manager. For example, you may see <a href=\"https://yarnpkg.com/\" rel=\"noopener\">Yarn</a> referenced in code examples. Yarn and npm work much the same way, to the extent that a great deal of interoperability between the two is purposely built in.</p>\n\n\n\n<p>Some folks prefer one package manager over another. Personally, I think the differences between npm and Yarn were more pronounced at first, but the two are now more similar than not.</p>\n\n\n\n<p>You may see code examples (including some in CSS-Tricks articles) that reference both <code>yarn</code> and <code>npm</code> together. That’s to let the reader know that either approach is fine, rather than the need to use both of them together.</p>\n\n\n\n<p>The syntax for Yarn and npm differ at times, but where only one is present, it’s generally trivial to convert a command or project from one to the other. Functionally, it rarely (if ever) matters which one you use—except, of course, that everybody working on the same project together will want to be using the same one to ensure compatibility and consistency.</p>\n\n\n\n<p>While npm and Yarn make up the vast majority of package managers that developers use, <a href=\"https://pnpm.io\" rel=\"noopener\">there’s another package manager called PnPm</a> that is effectively npm, but more performant and efficient. The tradeoff is that PnPm requires a bit more technical know-how in some cases, so it’s a bit more of an advanced option.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637444428589_20-40-h5en5-kw94x.png\" alt=\"Three examples of installing Vite in terminal via command line. First is npm, then Yarn, then PNPM.\"/><figcaption>The syntax differences between different package managers are generally minimal.&nbsp;(Source:&nbsp;<a target=\"_blank\" href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noreferrer noopener\">Vite</a>)</figcaption></figure>\n\n\n\n<h3>What makes npm the “standard” package manager</h3>\n\n\n\n<p>Again, I only bring up other package managers to illustrate that npm isn’t the only package manager out there—but it is generally the standard.</p>\n\n\n\n<p>What makes it the “standard” among package managers? Other languages, including Ruby and PHP, have had package managers for many years; JavaScript really didn’t have any good ones before npm.</p>\n\n\n\n<p>npm started as an independent, open-source project, but was <a href=\"https://www.cnbc.com/2020/03/16/microsoft-github-agrees-to-buy-code-distribution-start-up-npm.html\" rel=\"noopener\">acquired by Microsoft in 2020</a>. It technically has two parts: the actual package manager itself; and the package registry, which is an ever-growing list of <em>nearly two million</em> packages available to install.</p>\n\n\n\n<p>You could think of npm as the app store for anything you might want to use on a front-end or Node-based project. Find what you want and install it to your system via the command line. You might update that package when a new version is released, or delete it altogether if the project no longer depends on it.</p>\n\n\n\n<h3>A note on npx</h3>\n\n\n\n<p>You may <em>also</em> see <code>npx</code> commands floating out there. <a href=\"https://docs.npmjs.com/cli/v7/commands/npx\" rel=\"noopener\">npx</a> is actually a part of npm, but by using <code>npx</code> in a command instead of <code>npm</code> , you can execute the code of a package <em>without</em> <em>permanently</em> <em>installing it</em>. NPX just installs what it needs to, runs it, and dumps it.</p>\n\n\n\n<p>This is helpful if, for example, you want to run an installer script. Rather than downloading the installer, <em>then</em> running it, npx lets you simply run the installer directly, leaving nothing on your machine afterward. It’s like the house guest that cleans up after themselves.</p>\n\n\n\n<p>Another cool example: you could run <code>npx sass</code> (along with the necessary input and output arguments) if you wanted to compile your project’s Sass files just once without going to the trouble of completely installing Sass. This probably isn’t practical in most cases, but if you just needed a quick one-off compilation here and there, npx would be a handy way to do it, as it means fewer installed packages that need to be updated and maintained.</p>\n\n\n\n<h3>What&#8217;s next</h3>\n\n\n\n<p>Alright, so that&#8217;s a deep dive into what we mean when we call something a package manager. In the case of npm, it is used specifically to install and manage Node packages, tools that help add features to a project, add handy developer conveniences&#8230; or all of the above!</p>\n\n\n\n<p>Next up, we&#8217;re going to take our first step into <em>using</em> npm. And to do that, we need to install it to our system. That&#8217;s next up in this complete guide to npm.</p>\n\n\n\n<div class=\"wp-container-61f32eefa219c wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">← Chapter 4</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">Chapter 6 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/what-the-heck-is-a-package-manager/\">What the Heck is a Package Manager?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "If you’re keeping score, so far in this npm guide we’ve developed a general understanding of what npm is—notably, that it stands for Node Package Manager. In the process, we’ve discussed the importance of the command line and how it’s used with npm.\n\n\n\nWe also looked specifically at the “n” in npm—Node—and learned that Node is a lot like the JavaScript code we write to run on websites in a browser. In fact, Node is JavaScript; it just runs outside of the browser, and is capable of doing different things than its browser-based counterpart.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager? (You are here!)How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\nWhat we mean by “package”\n\n\n\nNow let’s turn our attention to the last two letters in npm, namely the “package manager” part. In order to fully understand what npm is, we need to know what a package manager is. So it naturally follows that in order to understand that, we need to understand what the heck a “package” is.\n\n\n\n“Package” is a catch-all term for any external code files that you pull into a project and use in some way. Perhaps you’ve used jQuery, Bootstrap, or Axios on a project in the past. Those are common examples of packages.\n\n\n\nWe call these “packages” because they’re “packaged up” and ready to be used. Some languages call them by other names (Ruby calls them “gems” for example), but the concept is the same. At the risk of oversimplifying, a package is code that you didn’t write but got from some public source to use in your project. You know, third-party code.\n\n\n\nOr, if you prefer musical parodies for your mnemonic devices:\n\n\n\n🎵 When there’s code that you choose🎵 That’s not yours, but you use🎵 That’s a package🎵 When it’s stuff you install🎵 That you import and call,🎵 That’s a package\n\n\n\nPackages are also often also referred to as “dependencies,” because the code you write depends on them being present. Code written using jQuery’s $ won’t work right if jQuery itself isn’t already loaded, for instance. (For this reason, package managers are also sometimes called “dependency managers.”)\n\n\n\nPackages can be big or small in terms of how much code they contain. A package might do something huge that changes how you write your whole project (like an entire framework), or it might do something very small and focused that you sprinkle in only where needed (like a widget, or a helper for a specific task).\n\n\n\nUsing packages without a package manager\n\n\n\nMost likely, if you have used a package in the past, you’ve simply applied it with a script tag in the HTML that pulls from an external URL (ideally from a CDN). Here’s how you might include jQuery in the HTML of your site:\n\n\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n\n\n\nAnother approach is to download a copy of the package, add it to your project’s files, and link to it locally, like this:\n\n\n\n<script src=\"/jquery.min.js\"></script>\n\n\n\nWhat package managers solve\n\n\n\nThese two approaches have worked well for years. It’s simple. It’s clean. It generally lets you “set it and forget it” as far as the package goes. So why would you need something else?\n\n\n\nYou can probably imagine how owning a car might seem unappealing to somebody who has ready access to convenient transit, or who has no need for long-distance travel. (This will tie back into the package manager talk, I promise. Stick with me.)\n\n\n\nIf you have easy access to convenient and efficient mass transit, then paying a large price for a massive machine that you have to store somewhere, regularly clean, maintain, and fill with costly fuel probably won’t carry much upside from your perspective. In that specific case, the benefits are negligible; the costs are comparatively overwhelming. Someone in that hypothetical position might even wonder why anybody wants a car at all!\n\n\n\nI bring up this analogy because learning about a new technology can be very hard when it solves a problem you don’t have, in very much the same way that buying a car might fail to solve transportation you already have. It might seem like a massive, needless expenditure.\n\n\n\nWhat a package manager solves, then, is more a matter of scaling and handling concerns. Simply linking to a package in a script tag works well, as long as:\n\n\n\nthe number of projects you have is manageable;the number of people working on the projects is manageable;the number of updates that need to be made to the packages are manageable; and, most crucially,every package used in your projects is client-side (browser) JavaScript or CSS.\n\n\n\nThat last one is the doozy, because there’s a plethora of tooling you can’t ever use if you only run things in the browser (more on that in a moment).\n\n\n\nIf you do check all of those boxes, you might not ever outgrow this approach. Your development approach might just look like this:\n\n\n\n\n\n\n\nBut even in that case, when you have multiple <script> tags, each linking to a specific version of some script or library, the only way to get any visibility at all into what packages you’re using—and whether they’re up-to-date—is to go manually open up the HTML and look at the code.\n\n\n\nThat’s not much of an issue in and of itself, but it’s a problem that grows exponentially as the size and scope of a project ramps up. You may be able to keep track of a few packages manually, but how could you possibly do that when we’re talking about hundreds—if not thousands—of packages? And even if you could manually track those, that’s still introducing a high risk of human error.\n\n\n\nIt’s not HTML’s job to be the source of truth for all of the packages used on a project. Aside from mixing concerns, it also potentially introduces conflicts when trying to merge unrelated work between teammates.\n\n\n\nAll this is important, but it’s the smallest part of a larger problem. Understand that client-side JavaScript probably isn’t the only type of package you’ll want to include in your projects forever, even if it is at the moment—and that’s where things really start to fall apart.\n\n\n\nMany production apps use some combination of the following tools and packages, if not all of them:\n\n\n\nSass (makes writing CSS easier)PostCSS (enhances CSS for maximum efficiency and compatibility)Babel (transpiles newer JavaScript to run in older browsers)TypeScript (adds type checking to JavaScript)Hot module reloading by a dev server that auto-refreshes the browser to show your changesAdditional utilities for code bundling, minification and/or concatenationAutomatic image compressionTesting librariesLinters\n\n\n\nThat all sounds wonderful—and it is!—but notice that you now have multiple dependencies that are not only not present in your script tags, but are not accounted for anywhere in your project at all! There’s no way for anybody—including your future self—to have any idea what tools were used or are required to to get this project running.\n\n\n\nAnd even if you could know exactly what the project needed that way, you’d still need to go locate, download, and install all of those packages yourself… manually. Depending on the project, this could easily be a day-long task, or longer.\n\n\n\nAll this means your workflow now looks a little more like this:\n\n\n\nAgain, this is all good. This toolchain means that what gets shipped to the browser is highly optimized—but it’s also additional overhead and complexity.\n\n\n\nConvenient as all the tools above are, you still need to manage them. Dependencies are projects, too, and they ship updates to patch bugs and introduce new features. As such, it’s unrealistic to simply paste a script tag in the HTML with a link that points to package on a CDN then call it good. You have to make sure each thing is installed and working properly not just on your machine, but on every collaborator’s machine, too.\n\n\n\nPackage managers exist to make the packages—or dependencies—of a project manageable by knowing what is installed, what’s available to update, and whether one package might create conflicts with another. And the beauty of a package manager is that it accomplishes all of this directly from the command line, with minimal effort.\n\n\n\nMany package managers, especially npm, also provide additional features that open up even more possibilities to make development more efficient. But managing packages is the main attraction.\n\n\n\nThere are package managers that aren’t npm\n\n\n\nThis part isn’t super relevant to npm itself, but for the sake of completeness, I should also mention that npm isn’t the only JavaScript package manager. For example, you may see Yarn referenced in code examples. Yarn and npm work much the same way, to the extent that a great deal of interoperability between the two is purposely built in.\n\n\n\nSome folks prefer one package manager over another. Personally, I think the differences between npm and Yarn were more pronounced at first, but the two are now more similar than not.\n\n\n\nYou may see code examples (including some in CSS-Tricks articles) that reference both yarn and npm together. That’s to let the reader know that either approach is fine, rather than the need to use both of them together.\n\n\n\nThe syntax for Yarn and npm differ at times, but where only one is present, it’s generally trivial to convert a command or project from one to the other. Functionally, it rarely (if ever) matters which one you use—except, of course, that everybody working on the same project together will want to be using the same one to ensure compatibility and consistency.\n\n\n\nWhile npm and Yarn make up the vast majority of package managers that developers use, there’s another package manager called PnPm that is effectively npm, but more performant and efficient. The tradeoff is that PnPm requires a bit more technical know-how in some cases, so it’s a bit more of an advanced option.\n\n\n\nThe syntax differences between different package managers are generally minimal. (Source: Vite)\n\n\n\nWhat makes npm the “standard” package manager\n\n\n\nAgain, I only bring up other package managers to illustrate that npm isn’t the only package manager out there—but it is generally the standard.\n\n\n\nWhat makes it the “standard” among package managers? Other languages, including Ruby and PHP, have had package managers for many years; JavaScript really didn’t have any good ones before npm.\n\n\n\nnpm started as an independent, open-source project, but was acquired by Microsoft in 2020. It technically has two parts: the actual package manager itself; and the package registry, which is an ever-growing list of nearly two million packages available to install.\n\n\n\nYou could think of npm as the app store for anything you might want to use on a front-end or Node-based project. Find what you want and install it to your system via the command line. You might update that package when a new version is released, or delete it altogether if the project no longer depends on it.\n\n\n\nA note on npx\n\n\n\nYou may also see npx commands floating out there. npx is actually a part of npm, but by using npx in a command instead of npm , you can execute the code of a package without permanently installing it. NPX just installs what it needs to, runs it, and dumps it.\n\n\n\nThis is helpful if, for example, you want to run an installer script. Rather than downloading the installer, then running it, npx lets you simply run the installer directly, leaving nothing on your machine afterward. It’s like the house guest that cleans up after themselves.\n\n\n\nAnother cool example: you could run npx sass (along with the necessary input and output arguments) if you wanted to compile your project’s Sass files just once without going to the trouble of completely installing Sass. This probably isn’t practical in most cases, but if you just needed a quick one-off compilation here and there, npx would be a handy way to do it, as it means fewer installed packages that need to be updated and maintained.\n\n\n\nWhat’s next\n\n\n\nAlright, so that’s a deep dive into what we mean when we call something a package manager. In the case of npm, it is used specifically to install and manage Node packages, tools that help add features to a project, add handy developer conveniences… or all of the above!\n\n\n\nNext up, we’re going to take our first step into using npm. And to do that, we need to install it to our system. That’s next up in this complete guide to npm.\n\n\n\n\n← Chapter 4\n\n\n\nChapter 6 →\n\n\nWhat the Heck is a Package Manager? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:03:59.000Z",
      "date_modified": "2022-01-20T15:03:59.000Z",
      "_plugin": {
        "pageFilename": "04679475a4382d05bf3b39a273162f66ea12143610ac8730f9e825135eabda3b.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361270",
      "url": "https://css-tricks.com/how-to-install-npm-node-nvm/",
      "title": "How the Heck Do You Install npm?",
      "summary": "Feel like you have a pretty good idea of what a package manager is? We’ve certainly covered a lot of ground getting familiar with all the terms and concepts of package managers, but I’d say it’s high time we actually …\n\nHow the Heck Do You Install npm? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Feel like you have a pretty good idea of what a package manager is? We’ve certainly covered a lot of ground getting familiar with all the terms and concepts of package managers, but I’d say it’s high time we actually <em>do</em> something with our newfound knowledge. But first, we need to install npm.</p>\n\n\n\n<p>To that end, we’re going to make sure we have Node and npm installed, then make a little sample project to give you real hands-on experience working with the npm basics and what it looks like to use npm in your front-end development workflow.</p>\n\n\n\n<span id=\"more-361270\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>Confirm whether npm is already installed</h3>\n\n\n\n<p>Before installing npm, we should confirm whether it&#8217;s already installed! If you’re unsure whether or not npm is already installed on your system, open your terminal of choice, whether it’s the Terminal app in MacOS, the integrated terminal in a code editor like VS Code, or some other terminal where you have access to the command line.</p>\n\n\n\n<p>Ready? Start with this command (notice we’re not including the <code>$</code> character in these examples):</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">node -v</code></pre>\n\n\n\n<p>That command displays the current version of Node—that is, if it is installed. If Node <em>is</em> installed, the command line will respond with the Node version number that is currently installed:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">v16.9.1</code></pre>\n\n\n\n<p>Your version may be different, of course. Either way, the fact that you see a version number confirms that npm is installed on your system! Let me stress that <strong>the numbers themselves are unimportant</strong>, just as long as we get <em>some</em> version number.</p>\n\n\n\n<p>If npm or Node is <em>not</em> currently installed, you’ll see a message along the lines of “Command not found” instead. In the unlikely event that npm is installed but Node is not (or vice versa), then it’s probably worth uninstalling it before continuing.</p>\n\n\n\n<p>Assuming you <em>do</em> need to install npm and Node (and if you don’t, you’re welcome to skip ahead to the next section), we’re going to take the advice of <a href=\"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\" rel=\"noopener\">the official NPM directions</a> and do so via a program called <a href=\"https://github.com/nvm-sh/nvm\" rel=\"noopener\">nvm</a>.</p>\n\n\n\n<h3>Installing Node Version Manager</h3>\n\n\n\n<p>Node Version Manager, or nvm, allows you to install, update, and uninstall Node on your system, and also to manage multiple versions of Node that you can switch between.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2424\" height=\"1802\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=2424%2C1802&#038;ssl=1\" alt=\"Screenshot of the Node Version Manager repository on GitHub which is closely related to how to install npm in terms of installing Node itself.\" class=\"wp-image-361275\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?w=2424&amp;ssl=1 2424w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=1024%2C761&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=768%2C571&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=1536%2C1142&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=2048%2C1522&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=1000%2C743&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The <a href=\"https://github.com/nvm-sh/nvm\" rel=\"noopener\">Node Version Manager repository</a> on GitHub</figcaption></figure>\n\n\n\n<p class=\"is-style-explanation\">As you may know, server-side languages have their own release versions, e.g., Node 17.1.0, rather than being tied to browser versions, such as Chrome 96. We won’t need any version of Node but the latest, so this won’t be necessary for us right now, although it may be advantageous for you down the road.</p>\n\n\n\n<p>I know, it may seem like a lot of extra work to install one program just to install another, but again, this is the recommended path, and doing things the right way from the start makes them much easier in the long run. I’d rather set you up for success than make things briefly easier at the expense of more complexity later.</p>\n\n\n\n<h4>Installing nvm on Windows</h4>\n\n\n\n<p>If you’re on Windows, you’ll actually have an easier time here. You’ll need nvm for Windows specifically, but luckily, Windows already has an installer you simply download and run. The directions are in the <a href=\"https://github.com/coreybutler/nvm-windows\" rel=\"noopener\">NVM for Windows</a> repo over at GitHub.</p>\n\n\n\n<ul><li>Download the <a href=\"https://github.com/coreybutler/nvm-windows/releases\" rel=\"noopener\">latest version of NVM for Windows</a>. It can be <a href=\"https://github.com/coreybutler/nvm-windows/wiki#manual-installation\" rel=\"noopener\">installed manually</a>, if you prefer.</li><li>Open the terminal and run the <code>nvm list available</code> command to see a list of Node versions that are available to download and install.</li><li>Run the <code>nvm use</code> command, followed by the version number of Node you want to use (e.g. <code>nvm use 16.9.1</code>) to use a specific version. Alternatively, you can use use <code>latest</code>, <code>lts</code>, or <code>newest</code> instead of a specific version number, where <code>newest</code> is the latest <em>installed</em> version.</li></ul>\n\n\n\n<p>Once it’s installed, nvm will work the same way on your Windows machine as it does on any other system.</p>\n\n\n\n<h4>Installing nvm on MacOS</h4>\n\n\n\n<p>To install nvm on MacOS, the first step is to download it with this command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</code></pre>\n\n\n\n<p class=\"is-style-explanation\"><code>0.39.0</code> is the latest version at publish time, but it may be worth checking the <a href=\"https://github.com/nvm-sh/nvm#installing-and-updating\" rel=\"noopener\">nvm installation readme</a> and getting the latest, if different.</p>\n\n\n\n<p>Once you’ve pasted that command into the terminal and hit <kbd>Enter</kbd>, you’ll see your terminal output a bunch of stuff that doesn’t really matter. In fact, I’ll let you in on a little secret: nobody reads the things in their terminals most of the time. All we care about is that&#8230;</p>\n\n\n\n<ol><li>the command eventually finishes; and</li><li>it doesn’t end with an error message.</li></ol>\n\n\n\n<p class=\"is-style-explanation\">If you are prompted for a command in the middle of the installation, hit the <kbd>q</kbd> key to quit and continue.</p>\n\n\n\n<p>You’ll know the command is finished running when the typing cursor starts blinking again, indicating the terminal is waiting for your typed input. You might even see this right after nvm has completed installing:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">=> Close and reopen your terminal to start using nvm or run the following to use it now:\n</code></pre>\n\n\n\n<p>Assuming you see no errors at this point, I would recommend the simpler option of quitting and restarting whatever terminal app you’re using before moving on. It&#8217;s a nice way to make sure you&#8217;re working with a clean slate.</p>\n\n\n\n<h3>How to install npm via Node</h3>\n\n\n\n<p>Now that nvm is installed, we’re ready to do what we <em>really</em> wanted to do in the first place: install npm and Node on our system.</p>\n\n\n\n<p>It’s not a bad idea to confirm nvm is installed properly, by running <code>nvm -v</code>. If the terminal shows you the installed version number, you’re good to go! If not, remember that you might have to restart your terminal app before the installation fully processes.</p>\n\n\n\n<p>Now that we have nvm, installing Node is a super short command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">nvm install node</code></pre>\n\n\n\n<p>Simple enough, eh?</p>\n\n\n\n<p>You should see a message along the lines of <code>Downloading and installing node v17.1.0</code>, though the version number may not match, which is fine. You’ll get whatever the latest stable version is at runtime. Wait until the command has finished running—again, you’ll know it’s done once you are back at the default prompt and you’re able to type more commands.</p>\n\n\n\n<p>After that, you’re all done here! That simple command not only installs Node, but it will install npm as well. Again, you can verify everything is installed and up to date with <code>npm -v</code> and <code>node -v</code>. If all is good, you’ll get a version number.</p>\n\n\n\n<h3>What’s next</h3>\n\n\n\n<p>Alright, at this point, we have nvm for installing and managing Node, Node itself, and npm for handling Node packages. Next up in this npm guide, we’re going to install some packages into a project!</p>\n\n\n\n<div class=\"wp-container-61f32eefa68c6 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">← Chapter 5</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/how-to-install-npm-packages\">Chapter 7 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-install-npm-node-nvm/\">How the Heck Do You Install npm?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Feel like you have a pretty good idea of what a package manager is? We’ve certainly covered a lot of ground getting familiar with all the terms and concepts of package managers, but I’d say it’s high time we actually do something with our newfound knowledge. But first, we need to install npm.\n\n\n\nTo that end, we’re going to make sure we have Node and npm installed, then make a little sample project to give you real hands-on experience working with the npm basics and what it looks like to use npm in your front-end development workflow.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm? (You are here!)How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\nConfirm whether npm is already installed\n\n\n\nBefore installing npm, we should confirm whether it’s already installed! If you’re unsure whether or not npm is already installed on your system, open your terminal of choice, whether it’s the Terminal app in MacOS, the integrated terminal in a code editor like VS Code, or some other terminal where you have access to the command line.\n\n\n\nReady? Start with this command (notice we’re not including the $ character in these examples):\n\n\n\nnode -v\n\n\n\nThat command displays the current version of Node—that is, if it is installed. If Node is installed, the command line will respond with the Node version number that is currently installed:\n\n\n\nv16.9.1\n\n\n\nYour version may be different, of course. Either way, the fact that you see a version number confirms that npm is installed on your system! Let me stress that the numbers themselves are unimportant, just as long as we get some version number.\n\n\n\nIf npm or Node is not currently installed, you’ll see a message along the lines of “Command not found” instead. In the unlikely event that npm is installed but Node is not (or vice versa), then it’s probably worth uninstalling it before continuing.\n\n\n\nAssuming you do need to install npm and Node (and if you don’t, you’re welcome to skip ahead to the next section), we’re going to take the advice of the official NPM directions and do so via a program called nvm.\n\n\n\nInstalling Node Version Manager\n\n\n\nNode Version Manager, or nvm, allows you to install, update, and uninstall Node on your system, and also to manage multiple versions of Node that you can switch between.\n\n\n\nThe Node Version Manager repository on GitHub\n\n\n\nAs you may know, server-side languages have their own release versions, e.g., Node 17.1.0, rather than being tied to browser versions, such as Chrome 96. We won’t need any version of Node but the latest, so this won’t be necessary for us right now, although it may be advantageous for you down the road.\n\n\n\nI know, it may seem like a lot of extra work to install one program just to install another, but again, this is the recommended path, and doing things the right way from the start makes them much easier in the long run. I’d rather set you up for success than make things briefly easier at the expense of more complexity later.\n\n\n\nInstalling nvm on Windows\n\n\n\nIf you’re on Windows, you’ll actually have an easier time here. You’ll need nvm for Windows specifically, but luckily, Windows already has an installer you simply download and run. The directions are in the NVM for Windows repo over at GitHub.\n\n\n\nDownload the latest version of NVM for Windows. It can be installed manually, if you prefer.Open the terminal and run the nvm list available command to see a list of Node versions that are available to download and install.Run the nvm use command, followed by the version number of Node you want to use (e.g. nvm use 16.9.1) to use a specific version. Alternatively, you can use use latest, lts, or newest instead of a specific version number, where newest is the latest installed version.\n\n\n\nOnce it’s installed, nvm will work the same way on your Windows machine as it does on any other system.\n\n\n\nInstalling nvm on MacOS\n\n\n\nTo install nvm on MacOS, the first step is to download it with this command:\n\n\n\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n\n\n\n0.39.0 is the latest version at publish time, but it may be worth checking the nvm installation readme and getting the latest, if different.\n\n\n\nOnce you’ve pasted that command into the terminal and hit Enter, you’ll see your terminal output a bunch of stuff that doesn’t really matter. In fact, I’ll let you in on a little secret: nobody reads the things in their terminals most of the time. All we care about is that…\n\n\n\nthe command eventually finishes; andit doesn’t end with an error message.\n\n\n\nIf you are prompted for a command in the middle of the installation, hit the q key to quit and continue.\n\n\n\nYou’ll know the command is finished running when the typing cursor starts blinking again, indicating the terminal is waiting for your typed input. You might even see this right after nvm has completed installing:\n\n\n\n=> Close and reopen your terminal to start using nvm or run the following to use it now:\n\n\n\n\nAssuming you see no errors at this point, I would recommend the simpler option of quitting and restarting whatever terminal app you’re using before moving on. It’s a nice way to make sure you’re working with a clean slate.\n\n\n\nHow to install npm via Node\n\n\n\nNow that nvm is installed, we’re ready to do what we really wanted to do in the first place: install npm and Node on our system.\n\n\n\nIt’s not a bad idea to confirm nvm is installed properly, by running nvm -v. If the terminal shows you the installed version number, you’re good to go! If not, remember that you might have to restart your terminal app before the installation fully processes.\n\n\n\nNow that we have nvm, installing Node is a super short command:\n\n\n\nnvm install node\n\n\n\nSimple enough, eh?\n\n\n\nYou should see a message along the lines of Downloading and installing node v17.1.0, though the version number may not match, which is fine. You’ll get whatever the latest stable version is at runtime. Wait until the command has finished running—again, you’ll know it’s done once you are back at the default prompt and you’re able to type more commands.\n\n\n\nAfter that, you’re all done here! That simple command not only installs Node, but it will install npm as well. Again, you can verify everything is installed and up to date with npm -v and node -v. If all is good, you’ll get a version number.\n\n\n\nWhat’s next\n\n\n\nAlright, at this point, we have nvm for installing and managing Node, Node itself, and npm for handling Node packages. Next up in this npm guide, we’re going to install some packages into a project!\n\n\n\n\n← Chapter 5\n\n\n\nChapter 7 →\n\n\nHow the Heck Do You Install npm? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:03:53.000Z",
      "date_modified": "2022-01-20T15:03:53.000Z",
      "_plugin": {
        "pageFilename": "ab50461aad749f8fc5ba5e1543cb2586ae75633e36e26b68fa714c191e913323.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361300",
      "url": "https://css-tricks.com/how-to-install-npm-packages/",
      "title": "How the Heck Do You Install npm Packages?",
      "summary": "By now, you’re becoming quite knowledgeable with npm! So far, we’ve broken down the three letters in “npm” to gain a better understand of Node and package managers. In the previous chapter, we even installed Node and npm while …\n\nHow the Heck Do You Install npm Packages? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>By now, you’re becoming quite knowledgeable with npm! So far, we’ve broken down the three letters in “npm” to gain a better understand of Node and package managers. In the <a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">previous chapter</a>, we even installed Node and npm while getting acquainted with Node Version Manager, or nvm. Next up in this beginner’s guide to npm is likely why you’re here in the first place: <strong>installing npm packages</strong>.</p>\n\n\n\n<span id=\"more-361300\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h2>A quick example</h2>\n\n\n\n<p>We can install our very first package with the <code>npm install</code> command (or <code>npm i</code> for short), followed by the name of the packages we want to add to our project. For example, the <a href=\"https://www.npmjs.com/package/sass\" rel=\"noopener\">Node package for Sass</a> is simply called “sass” which means we can add to a project like this (just be sure you&#8217;re in a new folder you created for this little project first):</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm install sass</code></pre>\n\n\n\n<p>That’s all you need! Type that and npm goes straight to work:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1844\" height=\"1340\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?resize=1844%2C1340&#038;ssl=1\" alt=\"Screenshot of a dark terminal window with a project called nom-test. The first command is npm install which adds 17 total npm packages with zero vulnerabilities.\" class=\"wp-image-361303\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?w=1844&amp;ssl=1 1844w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?resize=1024%2C744&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?resize=768%2C558&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?resize=1536%2C1116&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637120566816_16-42-fe7mk-iqg37.png?resize=1000%2C727&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>What’s happening behind the scenes there is that npm tries to find a package named <code>sass</code> in the npm package registry. If it finds that package (which it does), npm installs it to the project in an automatically generated <code>node_modules</code> folder (more on this <a href=\"#aa-node_modules\">in a bit</a>) located in the project root folder, including everything the package needs to run. (This is why you see that npm added 16 packages and audited a total of 17 npm packages, instead of the Sass package alone—it, too, has dependencies!)</p>\n\n\n\n<p>Once we’ve run the <code>install</code> command, you may notice that you do <em>not</em> see anything named “sass” in the project folder as you might expect. Oddly, however, we <em>do</em> see a three new items in the project folder: two JSON files named <code>package.json</code> and <code>package-lock.json</code>, plus one entirely new <code>node_modules</code> folder.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2784\" height=\"1638\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=2784%2C1638&#038;ssl=1\" alt=\"Screenshot of the VS Code editor with a package.json file open. The file contains the project name, npm-test, and includes a dependencies section that contains the Sass npm package.\" class=\"wp-image-361306\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?w=2784&amp;ssl=1 2784w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=300%2C177&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=1024%2C602&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=768%2C452&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=1536%2C904&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=2048%2C1205&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637206291008_17-31-qaw16-evaav.png?resize=1000%2C588&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>What are these!? We asked npm to install Sass, not all this stuff. That’s not part of Sass… right? Well, that’s correct, but there’s a very good explanation why those new items were generated in the project folder. Let’s look at what just happened.</p>\n\n\n\n<h3>What happens when you install a package</h3>\n\n\n\n<p>When you install (or uninstall, or update) a package, npm does most, if not all, of the following four things:</p>\n\n\n\n<ol><li>Updates the <code>package.json</code> file in your project, if needed;</li><li>updates the <code>package-lock.json</code> file (called the “lockfile”) that contains all of the technical specifics;</li><li>installs the actual package files—and any other packages the original package might depend on (inside of the <code>node_modules</code> folder); and</li><li>runs an audit of the installed packages.</li></ol>\n\n\n\n<p>Let’s step through those one-by-one.</p>\n\n\n\n<h4><code>package.json</code> and <code>package-lock.json</code></h4>\n\n\n\n<p>These two JSON files work together to ensure an accurate record of all the dependencies in your project (and all of <em>their</em> dependencies, and all of their dependencies’ dependencies, and so on). The difference is a little technical, but loosely explained: the lockfile is the in-depth, precise snapshot of the project’s dependency tree, and <code>package.json</code> is a high level overview, which can also contain other things. <strong>The main packages you install may be listed in <code>package.json</code>, but <code>package-lock.json</code> is where the entire dependency tree is tracked.</strong></p>\n\n\n\n<p>The lockfile is also never supposed to be updated by hand; only by npm. So be sure to avoid mistaking the lockfile with the <code>package.json</code> file.</p>\n\n\n\n<p>When you share or collaborate with others on a project, npm knows where the project came from and exactly what you have installed in the project by these two files. It can replicate that environment precisely on anyone else’s machine, thanks to their info. Both files are meant to be committed to your Git repo, and serve as your project’s dependency blueprint. That way, when another developer on your team clones the repo and runs the <code>npm install</code> command, npm knows <em>exactly</em> which packages to install, keeping you and your colleague in sync.</p>\n\n\n\n<p>If you open <code>package.json</code>, you won&#8217;t see much, but it&#8217;s worth a peek just to see what&#8217;s happening:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"dependencies\": {\n    \"sass\": \"^1.43.4\"\n  }\n}</code></pre>\n\n\n\n<p>You probably won&#8217;t see that exact version number (since the package has been updated since the time of writing), but you <em>should</em> see <code>sass</code> listed inside a JSON <code>dependencies</code> object. The number itself (<code>1.43.4</code> in this case) indicates the specific version of Sass that is installed.</p>\n\n\n\n<p class=\"is-style-explanation\">As a brief but important side tangent: the carat character (<code>^</code>) at the beginning of the version number lets npm know that it is allowed to install minor updates to the package. In other words, it tells npm that the installed Sass package must be <em>at least</em> version <code>1.43.4</code>, but can be any higher <code>1.x.x</code> version, as long as it’s still under <code>2.0.0</code>. npm generally chooses the latest stable version when a package is installed, but adds this to allow for non-breaking updates. That bit is called <a href=\"https://semver.org\" rel=\"noopener\">“semantic versioning”</a> and it’s a blog post unto itself, but not unique to npm.</p>\n\n\n\n<p>Anyway, that covers the two JSON files. Let’s talk about the <code>node_modules</code> folder next.</p>\n\n\n\n<h3><code>node_modules</code></h3>\n\n\n\n<p><code>node_modules</code> <strong>is where all the actual package code lives</strong>; it’s where your installed Node packages and all the stuff that makes them run actually get installed. If you open up the folder right now as you’re following along, you’ll find a <code>sass</code> folder, but alongside several other folders as well.</p>\n\n\n\n<p>The reason for the additional folders is that when you install a package, it may need <em>other</em> packages to run properly (as Sass clearly does). So, npm automatically does the hard work of finding and installing all of those dependencies as well. As you may have guessed, those dependencies may also have <em>other</em> dependencies of their own, and so the process repeats, so on and so forth, until we’ve finished crawling the dependency tree to its furthest branches and absolutely everything we need is installed (or until we’ve hit an error of some kind, though hopefully not).</p>\n\n\n\n<p>For this reason, it’s common for a project to have <code>node_modules</code> subfolders in the hundreds or more, which add up quickly in terms of disk space. <code>node_modules</code> can often get pretty hefty.</p>\n\n\n\n<p>If you’re wondering how you would commit a super large folder like <code>node_modules</code> to a project’s repository, here’s an important note: Unlike the JSON files, <strong>the <code>node_modules</code> folder is not meant to be committed to Git</strong>, or even shared. In fact, just about every example of a <code>.gitignore</code> file (the file that tells which files Git should skip when tracking files) includes <code>node_modules</code> to ensure Git never touches or tracks it.</p>\n\n\n\n<p>So, how does anyone else on your team get those packages? They run <code>npm</code> <code>install</code> (or <code>npm i</code> for short) from the command line to download the dependencies directly from the source. This way, there’s no need to commit (or pull) massive amounts of data to and from the origin repo.</p>\n\n\n\n<h3>Using caution when installing dependencies</h3>\n\n\n\n<p>This massive web of dependencies and their great-great-grand-dependencies can lead to situations where a small utility library of some kind that provides a useful service can become adopted by many other packages, which are, in turn, used in many <em>other</em> packages, until eventually the original code winds up quietly installed on a significant percentage of sites and apps.</p>\n\n\n\n<p>It might sound wild (if not downright scary) that, in the process of installing your one package, you may actually be letting a <em>whole bunch of other stuff</em> through the door. It can feel like inviting a new friend to your house party, who then shows up with 20 uninvited strangers. But it’s not as weird or scary as it may seem, for a few reasons:</p>\n\n\n\n<ol><li><strong>Most npm packages are open source.</strong> You and anybody else can easily peek under the hood and see exactly what the package is doing. You can also look the package up on the registry (<a href=\"https://npmjs.com\" rel=\"noopener\">npmjs.com</a>) to see how many times it’s been installed, when it was last updated, and other relevant info. If a package is fairly popular, you can be reasonably certain it’s safe.</li><li><strong>There’s a vast world of functionality that <em>many</em> projects will need.</strong> Consider date formatting, handling HTTP requests and responses, throttling, debouncing, or animations, just as quick examples. It doesn’t make sense to keep reinventing the wheel and hand-coding these things every time they’re used in a new project.</li><li><strong>Installing a package isn’t really that different than installing an app on your phone, or a plugin on a WordPress site</strong>. The difference is that we don’t get the same glimpse into the inner workings of those apps and plugins the way we do with packages, nor what <em>other</em> things those apps and plugins might rely on. Odds are good they pull in many smaller packages, too, in some way or another.</li></ol>\n\n\n\n<p>A degree of caution is a good idea in any environment in which one can install and execute arbitrary code, of course. Don’t get me wrong. I’d be lying if I said bad actors have never successfully taken advantage of this system. But know that there are many processes in place to keep things from going awry. When in doubt, stick with the most popular packages and you’ll be fine.</p>\n\n\n\n<p>Also know that npm runs automatic security audits for you, which brings us to the final point in this section.</p>\n\n\n\n<h3>What is <code>npm audit</code>?</h3>\n\n\n\n<p>When we installed <code>sass</code> earlier, we saw the following message in the terminal once it finished:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">found 0 vulnerabilities</code></pre>\n\n\n\n<p>However, you may see some warnings instead—like this old project of mine in the following image. I decided to boot it up and run <code>npm install</code> (<code>npm i</code>) after it’s sat for at least a couple of years. Let’s see how it did:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1674\" height=\"1130\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?resize=1674%2C1130&#038;ssl=1\" alt=\"Screenshot of an open terminal window showing the process of installing npm packages with the npm i command. 212 npm packages are installed but the terminal shows there are 93 vulnerabilities, where 46 are moderate, 42 are high, and 5 are critical.\" class=\"wp-image-361310\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?w=1674&amp;ssl=1 1674w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?resize=300%2C203&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?resize=1024%2C691&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?resize=768%2C518&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?resize=1536%2C1037&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638462778303_02-30-xtq2r-7xcgl.png?resize=1000%2C675&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>YIKES!</figcaption></figure>\n\n\n\n<p><strong>Packages with known vulnerabilities are called out by <code>npm audit</code></strong>, which runs automatically any time you install a package. If you see a message like this, don’t be <em>too</em> alarmed; many vulnerabilities, especially in the “moderate” category, carry very low real-world risk, and may only be relevant in highly specific situations. (For example, it may only be one method in a package, when used in a particular way, that makes it vulnerable.)</p>\n\n\n\n<p>Still, it’s best to address what we can, which is what the <code>npm audit fix</code> command is for. Adding <code>fix</code> to the end tells npm to go ahead and update to a new <em>minor version</em> of any package with a known vulnerability of some kind. The “minor version” part is important; minor versions aren’t supposed to contain breaking changes, only updates. That means it <em>should</em> be safe to run an update this way without any risk of breaking your project.</p>\n\n\n\n<p>If bumping the package up by a minor version number doesn’t do the trick, you can add the <code>--force</code> flag to the original command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm audit fix --force</code></pre>\n\n\n\n<p><strong>This is a risky maneuver, however.</strong> Giving npm permission to “use the force” means it can now install <em>major</em> version updates to address vulnerabilities—which means it may make breaking changes or introduce incompatibilities. I wouldn’t recommend doing this unless there are critical vulnerabilities that <code>npm audit fix</code> is unable address and you are willing and able to spend significant time afterwards troubleshooting, if necessary.</p>\n\n\n\n<p>One last note on this topic: it helps to know that you can sometimes fix some unexpected issues with npm projects by deleting <code>node_modules</code>, and re-running <code>npm install</code>. That’s the npm way of “turning things off and on again,” which is something I’ve done many, many times myself.</p>\n\n\n\n<h3>What’s next</h3>\n\n\n\n<p>Now that we’ve thoroughly explored the rabbit hole of how npm works under the hood, let’s get back to actually <em>doing</em> things, shall we?</p>\n\n\n\n<div class=\"wp-container-61f1da5d977fa wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">← Chapter 6</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">Chapter 8 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-install-npm-packages/\">How the Heck Do You Install npm Packages?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "By now, you’re becoming quite knowledgeable with npm! So far, we’ve broken down the three letters in “npm” to gain a better understand of Node and package managers. In the previous chapter, we even installed Node and npm while getting acquainted with Node Version Manager, or nvm. Next up in this beginner’s guide to npm is likely why you’re here in the first place: installing npm packages.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages? (You are here!)What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project?\n\n\n\nA quick example\n\n\n\nWe can install our very first package with the npm install command (or npm i for short), followed by the name of the packages we want to add to our project. For example, the Node package for Sass is simply called “sass” which means we can add to a project like this (just be sure you’re in a new folder you created for this little project first):\n\n\n\nnpm install sass\n\n\n\nThat’s all you need! Type that and npm goes straight to work:\n\n\n\n\n\n\n\nWhat’s happening behind the scenes there is that npm tries to find a package named sass in the npm package registry. If it finds that package (which it does), npm installs it to the project in an automatically generated node_modules folder (more on this in a bit) located in the project root folder, including everything the package needs to run. (This is why you see that npm added 16 packages and audited a total of 17 npm packages, instead of the Sass package alone—it, too, has dependencies!)\n\n\n\nOnce we’ve run the install command, you may notice that you do not see anything named “sass” in the project folder as you might expect. Oddly, however, we do see a three new items in the project folder: two JSON files named package.json and package-lock.json, plus one entirely new node_modules folder.\n\n\n\n\n\n\n\nWhat are these!? We asked npm to install Sass, not all this stuff. That’s not part of Sass… right? Well, that’s correct, but there’s a very good explanation why those new items were generated in the project folder. Let’s look at what just happened.\n\n\n\nWhat happens when you install a package\n\n\n\nWhen you install (or uninstall, or update) a package, npm does most, if not all, of the following four things:\n\n\n\nUpdates the package.json file in your project, if needed;updates the package-lock.json file (called the “lockfile”) that contains all of the technical specifics;installs the actual package files—and any other packages the original package might depend on (inside of the node_modules folder); andruns an audit of the installed packages.\n\n\n\nLet’s step through those one-by-one.\n\n\n\npackage.json and package-lock.json\n\n\n\nThese two JSON files work together to ensure an accurate record of all the dependencies in your project (and all of their dependencies, and all of their dependencies’ dependencies, and so on). The difference is a little technical, but loosely explained: the lockfile is the in-depth, precise snapshot of the project’s dependency tree, and package.json is a high level overview, which can also contain other things. The main packages you install may be listed in package.json, but package-lock.json is where the entire dependency tree is tracked.\n\n\n\nThe lockfile is also never supposed to be updated by hand; only by npm. So be sure to avoid mistaking the lockfile with the package.json file.\n\n\n\nWhen you share or collaborate with others on a project, npm knows where the project came from and exactly what you have installed in the project by these two files. It can replicate that environment precisely on anyone else’s machine, thanks to their info. Both files are meant to be committed to your Git repo, and serve as your project’s dependency blueprint. That way, when another developer on your team clones the repo and runs the npm install command, npm knows exactly which packages to install, keeping you and your colleague in sync.\n\n\n\nIf you open package.json, you won’t see much, but it’s worth a peek just to see what’s happening:\n\n\n\n{\n  \"dependencies\": {\n    \"sass\": \"^1.43.4\"\n  }\n}\n\n\n\nYou probably won’t see that exact version number (since the package has been updated since the time of writing), but you should see sass listed inside a JSON dependencies object. The number itself (1.43.4 in this case) indicates the specific version of Sass that is installed.\n\n\n\nAs a brief but important side tangent: the carat character (^) at the beginning of the version number lets npm know that it is allowed to install minor updates to the package. In other words, it tells npm that the installed Sass package must be at least version 1.43.4, but can be any higher 1.x.x version, as long as it’s still under 2.0.0. npm generally chooses the latest stable version when a package is installed, but adds this to allow for non-breaking updates. That bit is called “semantic versioning” and it’s a blog post unto itself, but not unique to npm.\n\n\n\nAnyway, that covers the two JSON files. Let’s talk about the node_modules folder next.\n\n\n\nnode_modules\n\n\n\nnode_modules is where all the actual package code lives; it’s where your installed Node packages and all the stuff that makes them run actually get installed. If you open up the folder right now as you’re following along, you’ll find a sass folder, but alongside several other folders as well.\n\n\n\nThe reason for the additional folders is that when you install a package, it may need other packages to run properly (as Sass clearly does). So, npm automatically does the hard work of finding and installing all of those dependencies as well. As you may have guessed, those dependencies may also have other dependencies of their own, and so the process repeats, so on and so forth, until we’ve finished crawling the dependency tree to its furthest branches and absolutely everything we need is installed (or until we’ve hit an error of some kind, though hopefully not).\n\n\n\nFor this reason, it’s common for a project to have node_modules subfolders in the hundreds or more, which add up quickly in terms of disk space. node_modules can often get pretty hefty.\n\n\n\nIf you’re wondering how you would commit a super large folder like node_modules to a project’s repository, here’s an important note: Unlike the JSON files, the node_modules folder is not meant to be committed to Git, or even shared. In fact, just about every example of a .gitignore file (the file that tells which files Git should skip when tracking files) includes node_modules to ensure Git never touches or tracks it.\n\n\n\nSo, how does anyone else on your team get those packages? They run npm install (or npm i for short) from the command line to download the dependencies directly from the source. This way, there’s no need to commit (or pull) massive amounts of data to and from the origin repo.\n\n\n\nUsing caution when installing dependencies\n\n\n\nThis massive web of dependencies and their great-great-grand-dependencies can lead to situations where a small utility library of some kind that provides a useful service can become adopted by many other packages, which are, in turn, used in many other packages, until eventually the original code winds up quietly installed on a significant percentage of sites and apps.\n\n\n\nIt might sound wild (if not downright scary) that, in the process of installing your one package, you may actually be letting a whole bunch of other stuff through the door. It can feel like inviting a new friend to your house party, who then shows up with 20 uninvited strangers. But it’s not as weird or scary as it may seem, for a few reasons:\n\n\n\nMost npm packages are open source. You and anybody else can easily peek under the hood and see exactly what the package is doing. You can also look the package up on the registry (npmjs.com) to see how many times it’s been installed, when it was last updated, and other relevant info. If a package is fairly popular, you can be reasonably certain it’s safe.There’s a vast world of functionality that many projects will need. Consider date formatting, handling HTTP requests and responses, throttling, debouncing, or animations, just as quick examples. It doesn’t make sense to keep reinventing the wheel and hand-coding these things every time they’re used in a new project.Installing a package isn’t really that different than installing an app on your phone, or a plugin on a WordPress site. The difference is that we don’t get the same glimpse into the inner workings of those apps and plugins the way we do with packages, nor what other things those apps and plugins might rely on. Odds are good they pull in many smaller packages, too, in some way or another.\n\n\n\nA degree of caution is a good idea in any environment in which one can install and execute arbitrary code, of course. Don’t get me wrong. I’d be lying if I said bad actors have never successfully taken advantage of this system. But know that there are many processes in place to keep things from going awry. When in doubt, stick with the most popular packages and you’ll be fine.\n\n\n\nAlso know that npm runs automatic security audits for you, which brings us to the final point in this section.\n\n\n\nWhat is npm audit?\n\n\n\nWhen we installed sass earlier, we saw the following message in the terminal once it finished:\n\n\n\nfound 0 vulnerabilities\n\n\n\nHowever, you may see some warnings instead—like this old project of mine in the following image. I decided to boot it up and run npm install (npm i) after it’s sat for at least a couple of years. Let’s see how it did:\n\n\n\nYIKES!\n\n\n\nPackages with known vulnerabilities are called out by npm audit, which runs automatically any time you install a package. If you see a message like this, don’t be too alarmed; many vulnerabilities, especially in the “moderate” category, carry very low real-world risk, and may only be relevant in highly specific situations. (For example, it may only be one method in a package, when used in a particular way, that makes it vulnerable.)\n\n\n\nStill, it’s best to address what we can, which is what the npm audit fix command is for. Adding fix to the end tells npm to go ahead and update to a new minor version of any package with a known vulnerability of some kind. The “minor version” part is important; minor versions aren’t supposed to contain breaking changes, only updates. That means it should be safe to run an update this way without any risk of breaking your project.\n\n\n\nIf bumping the package up by a minor version number doesn’t do the trick, you can add the --force flag to the original command:\n\n\n\nnpm audit fix --force\n\n\n\nThis is a risky maneuver, however. Giving npm permission to “use the force” means it can now install major version updates to address vulnerabilities—which means it may make breaking changes or introduce incompatibilities. I wouldn’t recommend doing this unless there are critical vulnerabilities that npm audit fix is unable address and you are willing and able to spend significant time afterwards troubleshooting, if necessary.\n\n\n\nOne last note on this topic: it helps to know that you can sometimes fix some unexpected issues with npm projects by deleting node_modules, and re-running npm install. That’s the npm way of “turning things off and on again,” which is something I’ve done many, many times myself.\n\n\n\nWhat’s next\n\n\n\nNow that we’ve thoroughly explored the rabbit hole of how npm works under the hood, let’s get back to actually doing things, shall we?\n\n\n\n\n← Chapter 6\n\n\n\nChapter 8 →\n\n\nHow the Heck Do You Install npm Packages? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:03:49.000Z",
      "date_modified": "2022-01-20T15:03:49.000Z",
      "_plugin": {
        "pageFilename": "4c37b48458a97407e57a78a1eddde777b94d92e8ecf3412408911b352368ccc1.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361320",
      "url": "https://css-tricks.com/what-the-heck-are-npm-commands/",
      "title": "What the Heck Are npm Commands?",
      "summary": "npm is, as you now know, a package manager. But like similar, earlier tools that run tasks in the command line, such as Grunt and Gulp, npm can also run tasks—which is perfect for us because now that …\n\nWhat the Heck Are npm Commands? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>npm is, as you now know, a <a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">package manager</a>. But like similar, earlier tools that run tasks in the command line, such as <a href=\"https://gruntjs.com/\" rel=\"noopener\">Grunt</a> and <a href=\"https://gulpjs.com/\" rel=\"noopener\">Gulp</a>, npm can also run tasks—which is perfect for us because now that we installed the Sass package in the <a href=\"https://css-tricks.com/how-to-install-npm-packages\">previous chapter</a>, we can starting using it!</p>\n\n\n\n<span id=\"more-361320\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>Jumping into npm commands</h3>\n\n\n\n<p>Open the <code>package.json</code> file in your test folder, and you won&#8217;t see much right now; just a <code>dependencies</code> property, with only one dependency so far:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"dependencies\": {\n    \"sass\": \"^1.43.4\"\n  }\n}</code></pre>\n\n\n\n<p>The <code>package.json</code> file is home to much more than just dependencies, however. It contains lots of meta-info <em>about </em>your project too. One of the most interesting bits is an optional, but extremely useful property called <code>scripts</code>.</p>\n\n\n\n<p class=\"is-style-explanation\">Remember, all the sub-dependencies of Sass are tracked in <code>package-lock.json</code>, which is auto-generated, and shouldn&#8217;t be edited by hand. <code>package.json</code> generally just contains the top-level dependencies, and we can customize it freely.</p>\n\n\n\n<p>The <code>scripts</code> object in your <code>package.json</code> file allows you to create commands you can run in that project to handle various tasks for you, either as a one-shot, or a continuously running process. Generally, these “tasks” are used for things like starting up a dev server for local development, compiling assets, and/or running tests. In fact, there’s often a single <code>start</code> or <code>dev</code> command built into projects to handle <em>all</em> the tasks you might need to run concurrently, like compiling Sass and JavaScript in the same sequence.</p>\n\n\n\n<p>We don&#8217;t have any scripts to run yet, but let&#8217;s fix that!</p>\n\n\n\n<h3>Example: Compiling Sass into CSS</h3>\n\n\n\n<p>Inside of the <code>scripts</code> section of the <code>package.json</code> file, we have access to all of our installed packages. Even though we are unable to simply type <code>sass</code> commands in the terminal right now, we can run <code>sass</code> commands as part of an npm script.</p>\n\n\n\n<p class=\"is-style-explanation\">We could run <code>sass</code> commands in the terminal if Sass were installed globally, which means system-wide, rather than installed in a specific project folder. So far, we’ve only installed Sass to this folder (that&#8217;s what happens by default when you install a package). But a global installation would make <code>sass</code> commands available anywhere on the system.</p>\n\n\n\n<p>Start by pasting this block of code into your <code>package.json</code> file, right after the opening <code>{</code> curly brace:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"scripts\": {\n  \"sass:build\": \"sass style.scss style.css\"\n},</code></pre>\n\n\n\n<p class=\"is-style-explanation\">JSON syntax is very strict. Try running the file&#8217;s contents through a <a href=\"https://jsonlint.com/\" rel=\"noopener\">JSON validator</a> if you get stuck.</p>\n\n\n\n<p>This gives us access to an <code>npm run sass:build</code> script, which will compile Sass into CSS for us!</p>\n\n\n\n<p>The name of the command is unimportant, as long as it’s one continuous string. Also worth noting is that the colon (<code>:</code>) doesn’t do anything special here; it’s just convention, since either <code>build</code> or <code>sass</code> on its own would likely be too generic.</p>\n\n\n\n<p>If you&#8217;ve worked with Sass commands before—or if you were peeking ahead—you probably know this means we also need to create a <code>style.scss</code> file in the root of our project folder. Let’s do that, and toss some arbitrary Sass code into it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2116\" height=\"1282\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=2116%2C1282&#038;ssl=1\" alt=\"Screenshot of the VS Code app with an open style.scss file. The file contains a Sass color variable and one selector that's nested three levels deep.\" class=\"wp-image-361322\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?w=2116&amp;ssl=1 2116w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=300%2C182&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=1024%2C620&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=768%2C465&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=1536%2C931&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=2048%2C1241&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637361730019_19-41-mk4kq-30ape.png?resize=1000%2C606&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The <code>style.scss</code> file sits alongside the JSON files and <code>node_modules</code> folder at the top level of the project folder.</figcaption></figure>\n\n\n\n<p>Here’s the Sass code I used, if you’d like to copy and paste it:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">$myColor: #ffd100;\n\n.a {\n  .nested {\n    .selector {\n      color: $myColor;\n    }\n  }\n}</code></pre>\n\n\n\n<p>Great! Save that file as <code>style.scss</code> in the root of your project, and let’s try running our new command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm run sass:build</code></pre>\n\n\n\n<p>Once this task has completed, you should see two new files appear almost instantly in your project folder: <code>style.css</code> and <code>style.css.map</code>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2086\" height=\"1422\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=2086%2C1422&#038;ssl=1\" alt=\"Screenshot of the VS Code app with a style.scss file open and an open terminal below that with npm commands, including npm run sass:build.\" class=\"wp-image-361324\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?w=2086&amp;ssl=1 2086w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=300%2C205&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=1024%2C698&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=768%2C524&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=1536%2C1047&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=2048%2C1396&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362054213_19-45-iexh0-nn9xe.png?resize=1000%2C682&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>After running <code>npm run sass:build</code>, you should see style.css and style.css.map file appear in the top level of the project folder.</figcaption></figure>\n\n\n\n<p>If you like, you can pop open the <code>style.css</code> file—which contains the compiled CSS code—to verify that it is indeed what we expect:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2086\" height=\"1422\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=2086%2C1422&#038;ssl=1\" alt=\"Screenshot of the VS Code app with a compiled style.css file open showing how the npm command to run Sass has processed the Sass code into normal CSS. An open terminal is below it showing the npm commands that were used.\" class=\"wp-image-361326\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?w=2086&amp;ssl=1 2086w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=300%2C205&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=1024%2C698&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=768%2C524&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=1536%2C1047&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=2048%2C1396&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362190693_19-48-suv23-u8bnr.png?resize=1000%2C682&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Look at that, pure CSS!</figcaption></figure>\n\n\n\n<p>The <code>sass</code> package even goes so far as to compile a <a href=\"https://css-tricks.com/should-i-use-source-maps-in-production/\">source map</a> for us, which lets us see what styles came from what <code>.scss</code> files when we inspect them in a browser’s DevTools. How nice!</p>\n\n\n\n<p><strong>If you hit an error:</strong> double check the syntax inside of <code>package.json</code> to make sure it is valid JSON (here’s an <a href=\"https://jsonlint.com/\" rel=\"noopener\">online JSON validator</a> you can use), and that your <code>.scss</code> file contains valid Sass (here’s an <a href=\"https://jsonformatter.org/sass-to-css\" rel=\"noopener\">online Sass converter</a>). Another thing to check is that the name of the file matches the name in the command.</p>\n\n\n\n<h3>Creating a development-only command</h3>\n\n\n\n<p>This is pretty neat, but we’ll probably get tired of running that command over and over as we&#8217;re developing. So, let’s set up a second command that tells Sass to <em>watch</em> the file for us, and re-compile it automatically any time we save changes!</p>\n\n\n\n<p>Add this inside the <code>scripts</code> object in <code>package.json</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"sass:watch\": \"sass style.scss style.css --watch\"</code></pre>\n\n\n\n<p class=\"is-style-explanation\"><strong>Important note:</strong> Make sure there is a comma (<code>,</code>) between the two scripts. The order doesn’t matter, but the comma between them does. Again, JSON is strict, so lean on the <a href=\"https://jsonlint.com/\" rel=\"noopener\">JSON validator</a> if needed.</p>\n\n\n\n<p>Now, if we run <code>sass:watch</code> (not to be confused with sasquatch), you’ll see a message in your terminal saying, “Sass is watching for changes. Press Ctrl-C to stop.”</p>\n\n\n\n<p>If you open your <code>style.scss</code> file now, make a change, and save it, you should see a message automatically pop up in the terminal confirming that the Sass has re-compiled into CSS:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1050\" height=\"204\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362748463_file.png?resize=1050%2C204&#038;ssl=1\" alt=\"A screenshot of text from the terminal saying that Sass is watching for changes. Press control plus c to stop. Below that it says that the style.scss file has compiled into a style.css file.\" class=\"wp-image-361334\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362748463_file.png?w=1050&amp;ssl=1 1050w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362748463_file.png?resize=300%2C58&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362748463_file.png?resize=1024%2C199&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362748463_file.png?resize=768%2C149&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637362748463_file.png?resize=1000%2C194&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now <em>that’s</em> useful! Not only that, but once we commit these files to our repo, we’ll have the exact directions to get Sass installed and up and running, with a simple command—and so will everybody else who works on this project!</p>\n\n\n\n<p>We’ll leave things here on this test project. It was useful to see how to get started, but more often than not, you’ll be reaching for a pre-configured project, rather than creating npm commands them from scratch, which is exactly what we’ll do next, in the <a href=\"https://css-tricks.com/how-to-install-an-npm-project\">final chapter</a> of this npm guide.</p>\n\n\n\n<h3>Final notes on installing npm packages</h3>\n\n\n\n<p>You should know that there are actually two ways to install npm packages, and which one you want depends on whether the package is meant to be a part of the production build, or whether it’s purely for development purposes.</p>\n\n\n\n<ul><li><code>npm install</code> (or <code>npm i</code>) is the standard (and default) way to add a package to a project.</li><li><code>npm install</code> <code>--save-dev</code> (or <code>npm i -D</code>) only adds the package to your “dev dependencies,” which means they’ll only be installed when <em>developing</em> the project, and not when building the finalized production version of the project.</li></ul>\n\n\n\n<p>Packages installed as development dependencies might include testing libraries, linters, preview servers, and other tools that help you during the development process only. They aren’t typically used to compile or run the website itself.</p>\n\n\n\n<p>There’s one final flag worth knowing about: <code>npm install --global</code> (or <code>npm i -g</code>). This is how to install a package globally, as we discussed a little earlier when installing Sass. You could use this if, for example, you want to be able to run <code>sass</code> <em>anywhere</em> on your machine. Other common use cases for global installation might include <abbr title=\"Command Line Interface\">CLI</abbr> tools that you’d want to use everywhere, or even another package manager, like <a href=\"https://yarnpkg.com\" rel=\"noopener\">Yarn</a>.</p>\n\n\n\n<h3>What’s next</h3>\n\n\n\n<p>We’re nearing the conclusion of our journey! There&#8217;s one last thing you ought to know, and how to use npm to quickly spin up everything you need on an existing project. So, let’s say you inherit a project that uses npm. Where do you start? How do you make sure you&#8217;re collaborating with others consistently? That’s the focus of the last section of this npm guide.</p>\n\n\n\n<div class=\"wp-container-61f1da5d9c34f wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/how-to-install-npm-packages\">← Chapter 7</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/how-to-install-an-npm-project\">Chapter 9 →</a></div>\n</div>\n\n\n\n<p></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/what-the-heck-are-npm-commands/\">What the Heck Are npm Commands?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "npm is, as you now know, a package manager. But like similar, earlier tools that run tasks in the command line, such as Grunt and Gulp, npm can also run tasks—which is perfect for us because now that we installed the Sass package in the previous chapter, we can starting using it!\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands? (You are here!)How the Heck Do You Install an Existing npm Project?\n\n\n\nJumping into npm commands\n\n\n\nOpen the package.json file in your test folder, and you won’t see much right now; just a dependencies property, with only one dependency so far:\n\n\n\n{\n  \"dependencies\": {\n    \"sass\": \"^1.43.4\"\n  }\n}\n\n\n\nThe package.json file is home to much more than just dependencies, however. It contains lots of meta-info about your project too. One of the most interesting bits is an optional, but extremely useful property called scripts.\n\n\n\nRemember, all the sub-dependencies of Sass are tracked in package-lock.json, which is auto-generated, and shouldn’t be edited by hand. package.json generally just contains the top-level dependencies, and we can customize it freely.\n\n\n\nThe scripts object in your package.json file allows you to create commands you can run in that project to handle various tasks for you, either as a one-shot, or a continuously running process. Generally, these “tasks” are used for things like starting up a dev server for local development, compiling assets, and/or running tests. In fact, there’s often a single start or dev command built into projects to handle all the tasks you might need to run concurrently, like compiling Sass and JavaScript in the same sequence.\n\n\n\nWe don’t have any scripts to run yet, but let’s fix that!\n\n\n\nExample: Compiling Sass into CSS\n\n\n\nInside of the scripts section of the package.json file, we have access to all of our installed packages. Even though we are unable to simply type sass commands in the terminal right now, we can run sass commands as part of an npm script.\n\n\n\nWe could run sass commands in the terminal if Sass were installed globally, which means system-wide, rather than installed in a specific project folder. So far, we’ve only installed Sass to this folder (that’s what happens by default when you install a package). But a global installation would make sass commands available anywhere on the system.\n\n\n\nStart by pasting this block of code into your package.json file, right after the opening { curly brace:\n\n\n\n\"scripts\": {\n  \"sass:build\": \"sass style.scss style.css\"\n},\n\n\n\nJSON syntax is very strict. Try running the file’s contents through a JSON validator if you get stuck.\n\n\n\nThis gives us access to an npm run sass:build script, which will compile Sass into CSS for us!\n\n\n\nThe name of the command is unimportant, as long as it’s one continuous string. Also worth noting is that the colon (:) doesn’t do anything special here; it’s just convention, since either build or sass on its own would likely be too generic.\n\n\n\nIf you’ve worked with Sass commands before—or if you were peeking ahead—you probably know this means we also need to create a style.scss file in the root of our project folder. Let’s do that, and toss some arbitrary Sass code into it.\n\n\n\nThe style.scss file sits alongside the JSON files and node_modules folder at the top level of the project folder.\n\n\n\nHere’s the Sass code I used, if you’d like to copy and paste it:\n\n\n\n$myColor: #ffd100;\n\n.a {\n  .nested {\n    .selector {\n      color: $myColor;\n    }\n  }\n}\n\n\n\nGreat! Save that file as style.scss in the root of your project, and let’s try running our new command:\n\n\n\nnpm run sass:build\n\n\n\nOnce this task has completed, you should see two new files appear almost instantly in your project folder: style.css and style.css.map.\n\n\n\nAfter running npm run sass:build, you should see style.css and style.css.map file appear in the top level of the project folder.\n\n\n\nIf you like, you can pop open the style.css file—which contains the compiled CSS code—to verify that it is indeed what we expect:\n\n\n\nLook at that, pure CSS!\n\n\n\nThe sass package even goes so far as to compile a source map for us, which lets us see what styles came from what .scss files when we inspect them in a browser’s DevTools. How nice!\n\n\n\nIf you hit an error: double check the syntax inside of package.json to make sure it is valid JSON (here’s an online JSON validator you can use), and that your .scss file contains valid Sass (here’s an online Sass converter). Another thing to check is that the name of the file matches the name in the command.\n\n\n\nCreating a development-only command\n\n\n\nThis is pretty neat, but we’ll probably get tired of running that command over and over as we’re developing. So, let’s set up a second command that tells Sass to watch the file for us, and re-compile it automatically any time we save changes!\n\n\n\nAdd this inside the scripts object in package.json:\n\n\n\n\"sass:watch\": \"sass style.scss style.css --watch\"\n\n\n\nImportant note: Make sure there is a comma (,) between the two scripts. The order doesn’t matter, but the comma between them does. Again, JSON is strict, so lean on the JSON validator if needed.\n\n\n\nNow, if we run sass:watch (not to be confused with sasquatch), you’ll see a message in your terminal saying, “Sass is watching for changes. Press Ctrl-C to stop.”\n\n\n\nIf you open your style.scss file now, make a change, and save it, you should see a message automatically pop up in the terminal confirming that the Sass has re-compiled into CSS:\n\n\n\n\n\n\n\nNow that’s useful! Not only that, but once we commit these files to our repo, we’ll have the exact directions to get Sass installed and up and running, with a simple command—and so will everybody else who works on this project!\n\n\n\nWe’ll leave things here on this test project. It was useful to see how to get started, but more often than not, you’ll be reaching for a pre-configured project, rather than creating npm commands them from scratch, which is exactly what we’ll do next, in the final chapter of this npm guide.\n\n\n\nFinal notes on installing npm packages\n\n\n\nYou should know that there are actually two ways to install npm packages, and which one you want depends on whether the package is meant to be a part of the production build, or whether it’s purely for development purposes.\n\n\n\nnpm install (or npm i) is the standard (and default) way to add a package to a project.npm install --save-dev (or npm i -D) only adds the package to your “dev dependencies,” which means they’ll only be installed when developing the project, and not when building the finalized production version of the project.\n\n\n\nPackages installed as development dependencies might include testing libraries, linters, preview servers, and other tools that help you during the development process only. They aren’t typically used to compile or run the website itself.\n\n\n\nThere’s one final flag worth knowing about: npm install --global (or npm i -g). This is how to install a package globally, as we discussed a little earlier when installing Sass. You could use this if, for example, you want to be able to run sass anywhere on your machine. Other common use cases for global installation might include CLI tools that you’d want to use everywhere, or even another package manager, like Yarn.\n\n\n\nWhat’s next\n\n\n\nWe’re nearing the conclusion of our journey! There’s one last thing you ought to know, and how to use npm to quickly spin up everything you need on an existing project. So, let’s say you inherit a project that uses npm. Where do you start? How do you make sure you’re collaborating with others consistently? That’s the focus of the last section of this npm guide.\n\n\n\n\n← Chapter 7\n\n\n\nChapter 9 →\n\n\n\n\n\n\nWhat the Heck Are npm Commands? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:03:44.000Z",
      "date_modified": "2022-01-20T15:03:44.000Z",
      "_plugin": {
        "pageFilename": "3b21f11575ba94501f9d3bd0392af97a14a53a9ae7d5dbae69c8f15318aa509f.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361337",
      "url": "https://css-tricks.com/how-to-install-an-npm-project/",
      "title": "How the Heck Do You Install an Existing npm Project?",
      "summary": "(This is a sponsored post.)\nWe’ve gotten a good overview of how npm works and how to use it to install packages and run commands at this point. Now let’s go a little further and see what it looks …\n\nHow the Heck Do You Install an Existing npm Project? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>We’ve gotten a good overview of how npm works and how to use it to install packages and run commands at this point. Now let’s go a little further and see what it looks like to download and install an <em>existing</em> npm project, rather than starting one from scratch. More likely than not, that’s probably what you’ll be doing most of the time. It’s much, much easier than installing and configuring all the individual pieces one by one.</p>\n\n\n\n<p>That’s what we’re covering in this final chapter of the guide to npm, and I’ll be drawing from personal experience on a real-life project of mine.</p>\n\n\n\n<span id=\"more-361337\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a> <em>(You are here!)</em></li></ol>\n\n\n\n<h3>Here&#8217;s a real-life npm project</h3>\n\n\n\n<p>The project I’ve chosen for this is my own <a href=\"https://github.com/josh-collinsworth/sveltekit-blog-starter\" rel=\"noopener\">SvelteKit static blog starter</a>. I think it’s a nice example because it comes with lots of pre-installed packages that are great for demonstration purposes.</p>\n\n\n\n<p>This is a real project of mine that’s designed to give you—as you might have guessed by the name—a head-start for building a statically-generated blog site. (“Statically generated” means that our code will be compiled down to <code>.html</code> files, ready to deploy anywhere on the web. This is one of a few approaches encompassed in the <a href=\"https://css-tricks.com/what-makes-a-site-jamstack/\">“Jamstack” way of building sites</a>.)</p>\n\n\n\n<p>And no worries if you don’t know anything about <a href=\"https://kit.svelte.dev/\" rel=\"noopener\">SvelteKit</a>—this is just to demonstrate, and we won’t write anything you don’t already know. That said, it’s worth noting that SvelteKit uses <a href=\"https://vitejs.dev/\" rel=\"noopener\">Vite</a> under the hood, which is actually a <a href=\"https://www.npmjs.com/package/vite\" rel=\"noopener\">npm package</a> that gives us access to modern build tools and a super speedy development server.</p>\n\n\n\n<h3>Cloning the project</h3>\n\n\n\n<p>First, we need to &#8220;clone&#8221; the project, which is a fancy word for copying the project to our system so we can work on it locally. There are two ways to clone an existing project. </p>\n\n\n\n<p>If you prefer the in-browser, visual way, head to <a href=\"https://github.com/josh-collinsworth/sveltekit-blog-starter\" rel=\"noopener\">the starter repo</a> over at GitHub, and click the “Code” dropdown that’s located directly in GitHub’s UI, and select the “Download ZIP” option.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419196763_dlzip.png?resize=398%2C321&#038;ssl=1\" alt=\"A screenshot of a GitHub repo zoomed in to the top-right corner of the page with the Code button clicked and showing options to clone the repository. The option to download a ZIP file has a big white arrow pointing at it towards the left to call it out for this existing npm project.\" class=\"wp-image-361341\" width=\"398\" height=\"321\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419196763_dlzip.png?w=796&amp;ssl=1 796w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419196763_dlzip.png?resize=300%2C242&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419196763_dlzip.png?resize=768%2C619&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Alternatively, if you prefer using the command line instead, run this command (just make sure you’re in a place where you don’t mind a new project folder added to your computer, e.g. <code>cd /path/to/folder</code>):</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npx degit https://github.com/josh-collinsworth/sveltekit-blog-starter.git sveltekit-blog-starter\n</code></pre>\n\n\n\n<p>You may remember that <code>npx</code> allows us to run npm packages without permanently installing them. <code>degit</code> clones the project just like <code>git clone</code> would, but without its Git history (literally, “de-git”).</p>\n\n\n\n<p>Whichever method you use, you get a fresh new <code>sveltekit-blog-starter</code> folder. Let’s open it in a code editor, pop open the terminal, and run the <code>npm install</code> (or <code>npm i</code>) command.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419289027_vulns.png?resize=522%2C274&#038;ssl=1\" alt=\"An open dark Terminal that has run the npm i command to install an existing npm project called sveltekit-blocg-starter. 202 npm packages are installed in three seconds. There are zero vulnerabilities.\" class=\"wp-image-361344\" width=\"522\" height=\"274\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419289027_vulns.png?w=1044&amp;ssl=1 1044w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419289027_vulns.png?resize=300%2C157&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419289027_vulns.png?resize=1024%2C538&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419289027_vulns.png?resize=768%2C403&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638419289027_vulns.png?resize=1000%2C525&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>npm automatically runs an audit when installing packages.</figcaption></figure>\n\n\n\n<p>At this point, you’ll see a note about vulnerabilities, like we covered in the last section of this guide. It may say something like “found 0 vulnerabilities” (as it does in screenshot above), but it’s quite possible that number will be greater than zero. If you do see vulnerabilities, don’t worry. You’re free to ignore it for now since this isn’t a project we intend to launch in production for others to see or use. (See the section on <code>npm audit</code> in a previous chapter for more info.)</p>\n\n\n\n<h3>Starting the server and making changes</h3>\n\n\n\n<p>If you were to peek inside of the <code>package.json</code> file in the cloned project, you’d see the command to start the dev server:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm run dev</code></pre>\n\n\n\n<p>Run that command in the terminal and you should see something like the following almost immediately:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416625430_01-43-wvtkv-5cnvv.png?resize=640%2C471&#038;ssl=1\" alt=\"An open dark terminal window that ran the npm run dev command. The terminal output shows that a localhost address has been set up where the development for the project can be previewed.\" class=\"wp-image-361349\" width=\"640\" height=\"471\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416625430_01-43-wvtkv-5cnvv.png?w=1280&amp;ssl=1 1280w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416625430_01-43-wvtkv-5cnvv.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416625430_01-43-wvtkv-5cnvv.png?resize=1024%2C754&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416625430_01-43-wvtkv-5cnvv.png?resize=768%2C565&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416625430_01-43-wvtkv-5cnvv.png?resize=1000%2C736&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In VS Code, you can press <kbd>CMD</kbd> while clicking the <code>http://localhost:3000</code> URL, or you can manually enter it in your browser. Either way, the site should be displayed in the browser!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2782\" height=\"2118\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=2782%2C2118&#038;ssl=1\" alt=\"A screenshot of a website that is open at a localhost URL, demonstrating that the development server for the npm project is running and can be viewed in the browser. The site has a light aqua header with a My Awesome Blog heading followed by three navigation links, all centered in the container. After that is the main body of the page with a faint pale green background and darker text, including a heading that says SvelteKit static blog starter followed by a short description of the project and an unordered list of features.\" class=\"wp-image-361353\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?w=2782&amp;ssl=1 2782w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=300%2C228&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=1024%2C780&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=768%2C585&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=1536%2C1169&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=2048%2C1559&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638416788248_01-46-3eptt-3wyxk.png?resize=1000%2C761&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><strong>Let’s take just a moment here to appreciate how relatively fast and simple that was!</strong> Yes, we might have had to install a bunch of scaffolding first, but that’s an up-front, one-time cost. We have an entire project running on our machine with just a couple of commands—and we can do this same thing any time we want to install another existing project!</p>\n\n\n\n<p>I won’t go deep into the details of this particular project because it’s unimportant to learning npm, but it’s a nice example because it has lots of cool things pre-configured, and we can easily make changes and see them update right away in the browser. Let&#8217;s look at a few of those commands next.</p>\n\n\n\n<p class=\"is-style-explanation\">SvelteKit requires Node 14 or higher. If you installed npm as part of this guide, that won&#8217;t be a problem for you. But if you already had it installed before we started, and if you run into errors trying to get this project running, it&#8217;s worth a quick <code>node -v</code> to be sure. <a href=\"https://github.com/nvm-sh/nvm\" rel=\"noopener\">nvm</a> is your friend if you need to upgrade.</p>\n\n\n\n<h3>Automatically compile Sass on save</h3>\n\n\n\n<p>You can find the project’s Sass files in the <code>src/lib/assets/scss/</code> folder. Try opening the <code>global.scss</code> file directly. Make a change, save it, and you should see the update automatically (and almost <em>instantly</em>) in your browser.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1080\" height=\"595\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638460407997_ezgif.com-gif-maker.gif?resize=1080%2C595&#038;ssl=1\" alt=\"An animated GIF showing the development site preview open on the left and the VS Code editor on the write with a global.scss file open. The body font size is changed in the Sass code, then saved, which triggers an immediate new preview in the browser without having to manually reload the page.\" class=\"wp-image-361357\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<h3>Making content changes</h3>\n\n\n\n<p>The starter site actually uses the repo’s <code>README.md</code> file as its homepage. If you open <code>README.md</code> and begin making changes (it’s OK if you don’t know <a href=\"https://css-tricks.com/little-stuff-markdown-always-forget-google/\">Markdown</a>, any edit will do), you should also see those changes show up as soon as you save just like Sass did in the last step:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1023\" height=\"564\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638460710043_02-54-qvm1u-ojw86.gif?resize=1023%2C564&#038;ssl=1\" alt=\"\" class=\"wp-image-361360\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>If you want, you can open another page, say the <code>src/routes/contact.svelte</code> file, and update the HTML to see it live refresh in your browser as well as soon as it saves.</p>\n\n\n\n<p>You can even duplicate one of the Markdown files inside of <code>src/lib/posts/</code> and make edits to see that it automatically appear in the list of posts on the <code>/blog</code> page, if you want to go that far. (Just be sure to give it a unique title.)</p>\n\n\n\n<h3>Understanding imports</h3>\n\n\n\n<p>There&#8217;s one important thing about npm projects that <a href=\"https://css-tricks.com/node-and-how-it-works-with-npm#aa-node-is-almost-but-not-exactly-javascript\">we mentioned briefly in the fourth chapter,</a> but haven&#8217;t covered yet: <strong>imports.</strong> This guide wouldn&#8217;t really be complete if we didn&#8217;t touch on that. The basic idea is that we can—true to the name—import a package, only do so without ever installing it either in a project folder or your system. Instead, it&#8217;s used on the spot.</p>\n\n\n\n<p>How so? Open up the <code>svelte.config.js</code> folder in the project root, and you&#8217;ll see a block of <code>import</code> lines at the top, something like this:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import adapter from '@sveltejs/adapter-static'\nimport { mdsvex } from 'mdsvex'\nimport preprocess from 'svelte-preprocess'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypeSlug from 'rehype-slug'</code></pre>\n\n\n\n<p>Every one of those <code>import</code>s is an installed package used in this file. What each package actually does isn&#8217;t important right now; I just want to call attention to the <code>import</code> syntax. This is how we use<em> </em>packages <em>in our actual code files</em>; we tell JavaScript <em>what </em>to import and <em>from where</em>. Then we can call it in our code.</p>\n\n\n\n<p>This syntax is called &#8220;ES6 imports,&#8221; which is only <em>import</em>ant (get it?!) to know because it&#8217;s the standard that both browser-based JavaScript and Node JavaScript have agreed on using going forward.</p>\n\n\n\n<p>Previously, Node JavaScript used (and often still uses) a slightly different syntax called CommonJS. If you see an import that looks like this, that&#8217;s the old CommonJS style:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const myPackage = require('package-name')</code></pre>\n\n\n\n<p>The other crucial thing to understand about the ES6 style of <code>import</code> is: <strong>the syntax is npm-specific, not a language standard.</strong></p>\n\n\n\n<p>To be clear: you <em>can </em>use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\" rel=\"noopener\"><code>import</code> in normal JavaScript</a>. It&#8217;s a very ordinary feature of the language. But you need to provide a relative path, or (in more modern browsers) a URL to whatever you&#8217;re importing. Just using a string with a package&#8217;s slug, like we see here, though, isn&#8217;t valid.</p>\n\n\n\n<p>So why is it used if it&#8217;s not technically valid code? Because handling this style of import is one of the nice things npm does for us. When we tell npm to <code>import somePackage from 'name'</code> as a string, npm automatically knows to go search through the installed packages on the project to find the import what we asked for. This saves us from both typing tedious relative paths, <em>and </em>from actually needing to know where our packages live deep in the labyrinth of <code>node_modules</code>.</p>\n\n\n\n<p>This may go without saying, but: since the syntax isn&#8217;t valid, you won&#8217;t be able to use it successfully unless your npm project includes a bundler or compiler of some kind, to process the imports and modules into valid browser code.</p>\n\n\n\n<h3>Building the final site</h3>\n\n\n\n<p>Most npm projects like this have two main purposes:</p>\n\n\n\n<ol><li>Help you develop your site or app</li><li>Build a finalized, production version</li></ol>\n\n\n\n<p>SvelteKit is no exception. When we’re done with our (awesome) development server setup and happy with our changes, we can run this command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm run build</code></pre>\n\n\n\n<p class=\"is-style-explanation\">If your dev server is still running, you can either stop it with <kbd>Ctrl</kbd>+<kbd>C</kbd>, or open up a new terminal tab. You won’t be able to type any commands in the same terminal window where the dev process is running since it’s an active, continuous task.</p>\n\n\n\n<p>When we run the <code>build</code> command, SvelteKit chews through all the files in the project and spits out a fully bundled, ready-to-deploy collection of static HTML, CSS and JavaScript files, and does so rather quickly. You could upload this collection of files anywhere you can host a website. <strong>Modern tooling; good old-fashioned output.</strong></p>\n\n\n\n<p>When the build command finishes, you should see a new <code>build</code> folder in the root (i.e. top level) of your project folder. If you look through it, you’ll notice there are no longer <code>.md</code>, <code>.svelte</code>, or any other files that can’t be read by a browser. Everything has been compiled into pure HTML, CSS and JavaScript, not to mention—as you’ll see if you open a JavaScript or CSS file—they are thoroughly minified to be as <em>small</em> as possible to load in the browser as <em>fast</em> as possible.</p>\n\n\n\n<p>If you want, you can run <code>npm run preview</code> once the build is finished to see how the compiled site loads in the browser. The difference here is that the content will be loaded from the final <code>build</code> folder, rather than built with pre-compiled files on the fly as it would when using the <code>dev</code> command. You won’t <em>see</em> any difference unless you open up the Network tab in DevTools (or try to update something), but you&#8217;ll be looking at the final product.</p>\n\n\n\n<p>This is an optional step, but I think it’s pretty cool to get an idea of how few compiled files we actually end up with, considering all the various files we put into the project, and how tiny the final bundle actually is, thanks to the amazing build tools built into this project. (For the record, it’s all <a href=\"https://kit.svelte.dev\" rel=\"noopener\">SvelteKit</a> and <a href=\"https://vitejs.dev\" rel=\"noopener\">Vite</a>.)</p>\n\n\n\n<h3>Modern deployment practices</h3>\n\n\n\n<p>This is a topic for another time, but modern deployment often doesn’t require you to run a <code>build</code> command and upload the files yourself (though that’s still an option). Instead, a host (like <a href=\"http://\">Netlify</a> or <a href=\"https://vercel.com\" rel=\"noopener\">Vercel</a><strong>)</strong> connects directly to the GitHub repo of your project and, whenever you push changes to the main branch of the repo, the host runs your build command for you and deploys the compiled files automatically!</p>\n\n\n\n<p>That’s one of the many extremely nice features of this new era of front-end development. No messing with FTP or manually dragging files anywhere; we are confident that everything is built and deployed automatically when we push our code, without us needing to do anything!</p>\n\n\n\n<h3>Wrapping up this npm guide</h3>\n\n\n\n<p>If you’ve made it this far, congratulations! And thank you. Congratulations, because this was a long, <em>long</em> read. And thank you, because… well, it was a long, <em>long</em> read.</p>\n\n\n\n<p>But you made it, and hopefully, you learned some important things as well. I mentioned at the start that my goal was not brevity, but effectiveness. That means we covered a <em>lot</em>. We started with a <a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">brief overview of npm</a> and where it fits in the modern front-end development landscape before <a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">getting familiar with the command line</a>. From there, we broke down the terms <a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">“Node”</a> and <a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">“package manager”</a> to get a precise understanding of what npm is and does. Once we got acquainted with the role that packages managers play in development, we dove straight into npm, including <a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">how to install it</a>, <a href=\"https://css-tricks.com/how-to-install-npm-packages\">add packages to a project</a>, <a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">set up commands</a>, and finally, how to jump into an existing project that uses npm.</p>\n\n\n\n<p>My hope is that everything we covered in this npm guide at least opens the door enough for you to explore npm further and level up when you’re ready. It often takes me repeating something many times and trying multiple approaches for something to truly sink in. So, if you’re sitting there feeling almost as confused as you were before, take some more time on this. Reflect on what you know and what you’ve learned, and come back—or try a new approach when you’re ready!</p>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">← Chapter 8</a></div>\n</div>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a> <em>(You are here!)</em></li></ol>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-install-an-npm-project/\">How the Heck Do You Install an Existing npm Project?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "(This is a sponsored post.)\nWe’ve gotten a good overview of how npm works and how to use it to install packages and run commands at this point. Now let’s go a little further and see what it looks like to download and install an existing npm project, rather than starting one from scratch. More likely than not, that’s probably what you’ll be doing most of the time. It’s much, much easier than installing and configuring all the individual pieces one by one.\n\n\n\nThat’s what we’re covering in this final chapter of the guide to npm, and I’ll be drawing from personal experience on a real-life project of mine.\n\n\n\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project? (You are here!)\n\n\n\nHere’s a real-life npm project\n\n\n\nThe project I’ve chosen for this is my own SvelteKit static blog starter. I think it’s a nice example because it comes with lots of pre-installed packages that are great for demonstration purposes.\n\n\n\nThis is a real project of mine that’s designed to give you—as you might have guessed by the name—a head-start for building a statically-generated blog site. (“Statically generated” means that our code will be compiled down to .html files, ready to deploy anywhere on the web. This is one of a few approaches encompassed in the “Jamstack” way of building sites.)\n\n\n\nAnd no worries if you don’t know anything about SvelteKit—this is just to demonstrate, and we won’t write anything you don’t already know. That said, it’s worth noting that SvelteKit uses Vite under the hood, which is actually a npm package that gives us access to modern build tools and a super speedy development server.\n\n\n\nCloning the project\n\n\n\nFirst, we need to “clone” the project, which is a fancy word for copying the project to our system so we can work on it locally. There are two ways to clone an existing project. \n\n\n\nIf you prefer the in-browser, visual way, head to the starter repo over at GitHub, and click the “Code” dropdown that’s located directly in GitHub’s UI, and select the “Download ZIP” option.\n\n\n\n\n\n\n\nAlternatively, if you prefer using the command line instead, run this command (just make sure you’re in a place where you don’t mind a new project folder added to your computer, e.g. cd /path/to/folder):\n\n\n\nnpx degit https://github.com/josh-collinsworth/sveltekit-blog-starter.git sveltekit-blog-starter\n\n\n\n\nYou may remember that npx allows us to run npm packages without permanently installing them. degit clones the project just like git clone would, but without its Git history (literally, “de-git”).\n\n\n\nWhichever method you use, you get a fresh new sveltekit-blog-starter folder. Let’s open it in a code editor, pop open the terminal, and run the npm install (or npm i) command.\n\n\n\nnpm automatically runs an audit when installing packages.\n\n\n\nAt this point, you’ll see a note about vulnerabilities, like we covered in the last section of this guide. It may say something like “found 0 vulnerabilities” (as it does in screenshot above), but it’s quite possible that number will be greater than zero. If you do see vulnerabilities, don’t worry. You’re free to ignore it for now since this isn’t a project we intend to launch in production for others to see or use. (See the section on npm audit in a previous chapter for more info.)\n\n\n\nStarting the server and making changes\n\n\n\nIf you were to peek inside of the package.json file in the cloned project, you’d see the command to start the dev server:\n\n\n\nnpm run dev\n\n\n\nRun that command in the terminal and you should see something like the following almost immediately:\n\n\n\n\n\n\n\nIn VS Code, you can press CMD while clicking the http://localhost:3000 URL, or you can manually enter it in your browser. Either way, the site should be displayed in the browser!\n\n\n\n\n\n\n\nLet’s take just a moment here to appreciate how relatively fast and simple that was! Yes, we might have had to install a bunch of scaffolding first, but that’s an up-front, one-time cost. We have an entire project running on our machine with just a couple of commands—and we can do this same thing any time we want to install another existing project!\n\n\n\nI won’t go deep into the details of this particular project because it’s unimportant to learning npm, but it’s a nice example because it has lots of cool things pre-configured, and we can easily make changes and see them update right away in the browser. Let’s look at a few of those commands next.\n\n\n\nSvelteKit requires Node 14 or higher. If you installed npm as part of this guide, that won’t be a problem for you. But if you already had it installed before we started, and if you run into errors trying to get this project running, it’s worth a quick node -v to be sure. nvm is your friend if you need to upgrade.\n\n\n\nAutomatically compile Sass on save\n\n\n\nYou can find the project’s Sass files in the src/lib/assets/scss/ folder. Try opening the global.scss file directly. Make a change, save it, and you should see the update automatically (and almost instantly) in your browser.\n\n\n\n\n\n\n\nMaking content changes\n\n\n\nThe starter site actually uses the repo’s README.md file as its homepage. If you open README.md and begin making changes (it’s OK if you don’t know Markdown, any edit will do), you should also see those changes show up as soon as you save just like Sass did in the last step:\n\n\n\n\n\n\n\nIf you want, you can open another page, say the src/routes/contact.svelte file, and update the HTML to see it live refresh in your browser as well as soon as it saves.\n\n\n\nYou can even duplicate one of the Markdown files inside of src/lib/posts/ and make edits to see that it automatically appear in the list of posts on the /blog page, if you want to go that far. (Just be sure to give it a unique title.)\n\n\n\nUnderstanding imports\n\n\n\nThere’s one important thing about npm projects that we mentioned briefly in the fourth chapter, but haven’t covered yet: imports. This guide wouldn’t really be complete if we didn’t touch on that. The basic idea is that we can—true to the name—import a package, only do so without ever installing it either in a project folder or your system. Instead, it’s used on the spot.\n\n\n\nHow so? Open up the svelte.config.js folder in the project root, and you’ll see a block of import lines at the top, something like this:\n\n\n\nimport adapter from '@sveltejs/adapter-static'\nimport { mdsvex } from 'mdsvex'\nimport preprocess from 'svelte-preprocess'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypeSlug from 'rehype-slug'\n\n\n\nEvery one of those imports is an installed package used in this file. What each package actually does isn’t important right now; I just want to call attention to the import syntax. This is how we use packages in our actual code files; we tell JavaScript what to import and from where. Then we can call it in our code.\n\n\n\nThis syntax is called “ES6 imports,” which is only important (get it?!) to know because it’s the standard that both browser-based JavaScript and Node JavaScript have agreed on using going forward.\n\n\n\nPreviously, Node JavaScript used (and often still uses) a slightly different syntax called CommonJS. If you see an import that looks like this, that’s the old CommonJS style:\n\n\n\nconst myPackage = require('package-name')\n\n\n\nThe other crucial thing to understand about the ES6 style of import is: the syntax is npm-specific, not a language standard.\n\n\n\nTo be clear: you can use import in normal JavaScript. It’s a very ordinary feature of the language. But you need to provide a relative path, or (in more modern browsers) a URL to whatever you’re importing. Just using a string with a package’s slug, like we see here, though, isn’t valid.\n\n\n\nSo why is it used if it’s not technically valid code? Because handling this style of import is one of the nice things npm does for us. When we tell npm to import somePackage from 'name' as a string, npm automatically knows to go search through the installed packages on the project to find the import what we asked for. This saves us from both typing tedious relative paths, and from actually needing to know where our packages live deep in the labyrinth of node_modules.\n\n\n\nThis may go without saying, but: since the syntax isn’t valid, you won’t be able to use it successfully unless your npm project includes a bundler or compiler of some kind, to process the imports and modules into valid browser code.\n\n\n\nBuilding the final site\n\n\n\nMost npm projects like this have two main purposes:\n\n\n\nHelp you develop your site or appBuild a finalized, production version\n\n\n\nSvelteKit is no exception. When we’re done with our (awesome) development server setup and happy with our changes, we can run this command:\n\n\n\nnpm run build\n\n\n\nIf your dev server is still running, you can either stop it with Ctrl+C, or open up a new terminal tab. You won’t be able to type any commands in the same terminal window where the dev process is running since it’s an active, continuous task.\n\n\n\nWhen we run the build command, SvelteKit chews through all the files in the project and spits out a fully bundled, ready-to-deploy collection of static HTML, CSS and JavaScript files, and does so rather quickly. You could upload this collection of files anywhere you can host a website. Modern tooling; good old-fashioned output.\n\n\n\nWhen the build command finishes, you should see a new build folder in the root (i.e. top level) of your project folder. If you look through it, you’ll notice there are no longer .md, .svelte, or any other files that can’t be read by a browser. Everything has been compiled into pure HTML, CSS and JavaScript, not to mention—as you’ll see if you open a JavaScript or CSS file—they are thoroughly minified to be as small as possible to load in the browser as fast as possible.\n\n\n\nIf you want, you can run npm run preview once the build is finished to see how the compiled site loads in the browser. The difference here is that the content will be loaded from the final build folder, rather than built with pre-compiled files on the fly as it would when using the dev command. You won’t see any difference unless you open up the Network tab in DevTools (or try to update something), but you’ll be looking at the final product.\n\n\n\nThis is an optional step, but I think it’s pretty cool to get an idea of how few compiled files we actually end up with, considering all the various files we put into the project, and how tiny the final bundle actually is, thanks to the amazing build tools built into this project. (For the record, it’s all SvelteKit and Vite.)\n\n\n\nModern deployment practices\n\n\n\nThis is a topic for another time, but modern deployment often doesn’t require you to run a build command and upload the files yourself (though that’s still an option). Instead, a host (like Netlify or Vercel) connects directly to the GitHub repo of your project and, whenever you push changes to the main branch of the repo, the host runs your build command for you and deploys the compiled files automatically!\n\n\n\nThat’s one of the many extremely nice features of this new era of front-end development. No messing with FTP or manually dragging files anywhere; we are confident that everything is built and deployed automatically when we push our code, without us needing to do anything!\n\n\n\nWrapping up this npm guide\n\n\n\nIf you’ve made it this far, congratulations! And thank you. Congratulations, because this was a long, long read. And thank you, because… well, it was a long, long read.\n\n\n\nBut you made it, and hopefully, you learned some important things as well. I mentioned at the start that my goal was not brevity, but effectiveness. That means we covered a lot. We started with a brief overview of npm and where it fits in the modern front-end development landscape before getting familiar with the command line. From there, we broke down the terms “Node” and “package manager” to get a precise understanding of what npm is and does. Once we got acquainted with the role that packages managers play in development, we dove straight into npm, including how to install it, add packages to a project, set up commands, and finally, how to jump into an existing project that uses npm.\n\n\n\nMy hope is that everything we covered in this npm guide at least opens the door enough for you to explore npm further and level up when you’re ready. It often takes me repeating something many times and trying multiple approaches for something to truly sink in. So, if you’re sitting there feeling almost as confused as you were before, take some more time on this. Reflect on what you know and what you’ve learned, and come back—or try a new approach when you’re ready!\n\n\n\n\n← Chapter 8\n\n\n\n\nGuide chapters\n\n\n\nWho the Heck is This Guide For?What the Heck Does “npm” Mean?What the Heck is the Command Line?What the Heck is Node?What the Heck is a Package Manager?How the Heck Do You Install npm?How the Heck Do You Install npm Packages?What the Heck Are npm Commands?How the Heck Do You Install an Existing npm Project? (You are here!)\n\nHow the Heck Do You Install an Existing npm Project? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-20T15:03:35.000Z",
      "date_modified": "2022-01-20T15:03:35.000Z",
      "_plugin": {
        "pageFilename": "a0571696366b9c1cf3daf8e52a7c44106fe13d4c0868f82ed792178aac07a1ac.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360899",
      "url": "https://css-tricks.com/css-dappled-light-effect/",
      "title": "A Serene CSS Dappled Light Effect",
      "summary": "There’s a serene warmth to the early evening sunlight peaking through rustling leaves. Artists use dappled light to create a soft, hypnotic effect.\nBedford Dwellings by Ron Donoughe (2013)\nWe can create the same sort of dappled light effect in …\n\nA Serene CSS Dappled Light Effect originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>There’s a serene warmth to the early evening sunlight peaking through rustling leaves. Artists use dappled light to create a soft, hypnotic effect.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"689\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085770372_screenshot-bedward-dwelling.png?resize=1024%2C689&#038;ssl=1\" alt=\"An oil painting of a tall rectangular orange building with six windows, two by two, and a faint full-width fence in front of it. There is a similar building off in the distance. A tall birch tree is in the foreground with light green and yellow leaves, casting the dappled light effect that is being covered in this article. The shadows cover the green grass between the tree and building, and they extend to the building.\" class=\"wp-image-360902\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085770372_screenshot-bedward-dwelling.png?resize=1024%2C689&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085770372_screenshot-bedward-dwelling.png?resize=300%2C202&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085770372_screenshot-bedward-dwelling.png?resize=768%2C517&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085770372_screenshot-bedward-dwelling.png?resize=1000%2C673&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085770372_screenshot-bedward-dwelling.png?w=1436&amp;ssl=1 1436w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><a href=\"https://artsandculture.google.com/asset/bedford-dwellings-ron-donoughe/IwELi5P0_uiwFg\" rel=\"noopener\">Bedford Dwellings</a> by <a href=\"https://artsandculture.google.com/entity/ron-donoughe/m0h3svmr?categoryId=artist\" rel=\"noopener\">Ron Donoughe</a> (2013)</figcaption></figure>\n\n\n\n<p>We can create the same sort of dappled light effect in web design, using it on photos and illustrations to add that magic touch to what might otherwise be drab walls of content to bring them back to life.</p>\n\n\n\n<p>I’ll give you one easy, quick way to add this effect… with just CSS.</p>\n\n\n\n<span id=\"more-360899\"></span>\n\n\n\n<p>Before we get into the code, it’s important to know the composition of dappled light. It’s made up of large spots — circular or elliptical — of light that are intercepted by the shadows cast by the foliage. Basically the light that slips past leaves, branches and so forth. Sometimes the shadows create crisp edges, but are more often blurred since we’re talking about light that passes though many, less defined spaces that diffuse and distort the light as it casts shadows from a further distance than, say, your own stark shadow on a nearby wall from direct sunlight.</p>\n\n\n\n<p>Here’s the difference in the appearance of a white wall with and without lit by dappled light:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1824\" height=\"762\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?resize=1824%2C762&#038;ssl=1\" alt=\"A side-by-side comparison of the same white brick surface, the left showing the CSS dappled light effect compared to no shadows.\" class=\"wp-image-360906\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?w=1824&amp;ssl=1 1824w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?resize=300%2C125&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?resize=1024%2C428&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?resize=768%2C321&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?resize=1536%2C642&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_CD332C21E06B9998C2C4A90E3C0E480B2753BB0A4B42D91B522F923752A2AB0A_1640085806943_ss.png?resize=1000%2C418&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The effect creates splashes of light and shadow.</figcaption></figure>\n\n\n\n<p>I’m going to recreate the dappled light effect with both plain text and fun emojis, applying CSS shadows and blends to mimic nature. I’ll cover alternative methods too.</p>\n\n\n\n<h3>Setting the scene</h3>\n\n\n\n<p>We’ll use text — letters from the alphabet, special characters, emojis, etc. — to create the shapes of light. And by light, I mean pale, translucent colors. Again, we’re for a dappled light effect rather than something that’s sharp, crisp, or stark.</p>\n\n\n\n<p>It’s best to choose characters that are elliptical or oblong in some way — the spots produced by dappled light comes in a variety of shapes. You’ll have to go with your best judgement here to get exactly what you’re going for. Me? I’m using &#x1f343;, &#x1f342;, <code>\\</code> because they are elliptical, oblong, and slanted — a bit of chaos and unpredictability for an otherwise serene effect.</p>\n\n\n\n<p>I’m wrapping those in paragraphs that are contained in a <code>.backdrop</code> parent element:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"backdrop\">\n  &lt;p class=\"shapes\">&#x1f343;&lt;/p>\n  &lt;p class=\"shapes\">&#x1f342;&lt;/p>\n  &lt;p class=\"shapes\">\\&lt;/p>\n&lt;/div></code></pre>\n\n\n\n<p>I’m using the parent element as the surface where the dappled light and shadows are cast, applying a background image for its texture. And not only am I giving the surface an explicit <code>width</code> and <code>height</code>, but also setting hidden overflow on it so I’m able to cast shadows that go beyond the surface without revealing them. The objects that cast the dappled light effect are aligned in the middle of the backdrop’s surface, thanks to CSS grid:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.backdrop {\n  background: center / cover no-repeat url('image.jpeg');\n  width: 400px; height: 240px;\n  overflow: hidden;\n  display: grid;\n}\n.backdrop > * {\n  grid-area: 1/1;\n}</code></pre>\n\n\n\n<p>I find that it’s OK if the shapes aren’t aligned <em>exactly</em> on top of one another as long as they overlap in a way that gets the dappled light effect you want. So no pressure to do exactly what I’m doing here to position things in CSS. In fact, I encourage you to try playing with the values to get different patterns of dappled light!</p>\n\n\n\n<h3>Styling the dappled light in CSS</h3>\n\n\n\n<p>These are the key properties the emojis should have — <code>transparent</code> color, black semi-transparent background (using the alpha channel in <code>rgba()</code>), blurry white <code>text-shadow</code> with a nice large <code>font-size</code>, and finally, a <a href=\"https://css-tricks.com/almanac/properties/m/mix-blend-mode/\"><code>mix-blend-mode</code></a> to smooth things out.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.shapes {\n  color:  transparent;\n  background-color: rgba(0, 0, 0, 0.3); // Use alpha transparency\n  text-shadow: 0 0 40px #fff; // Blurry white shadow\n  font: bolder 320pt/320pt monospace;\n  mix-blend-mode: multiply;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNZEOJd\" src=\"//codepen.io/anon/embed/WNZEOJd?height=450&amp;theme-id=1&amp;slug-hash=WNZEOJd&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNZEOJd\" title=\"CodePen Embed WNZEOJd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p><code>mix-blend-mode</code> sets how an element’s colors blend with that of its container element’s content. The <code>multiply</code> value causes the backdrop of an element to show through the element’s light colors and keeps dark colors the same, making for a nicer and more natural dappled light effect.</p>\n\n\n\n<h3>Refining colors and contrast</h3>\n\n\n\n<p>I wanted the <code>background-image</code> on the backdrop to be a bit brighter, so I also added <code>filter: brightness(1.6)</code>. Another way to do this is with <a href=\"https://css-tricks.com/almanac/properties/b/background-blend-mode/\"><code>background-blend-mode</code></a> instead, where all the different backgrounds of an element are blended and, instead of adding the emojis as separate elements, we add them as background images.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxXLrav\" src=\"//codepen.io/anon/embed/xxXLrav?height=450&amp;theme-id=1&amp;slug-hash=xxXLrav&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxXLrav\" title=\"CodePen Embed xxXLrav\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Notice that I used a different emoji in that last example as well as <code>floralwhite</code> for some color that’s less intense than pure white for the light. Here’s one of the emoji background images unwrapped:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;svg xmlns='http://www.w3.org/2000/svg'> \n  &lt;foreignObject width='400px' height='240px'> \n    &lt;div xmlns='http://www.w3.org/1999/xhtml' style=\n      'font: bolder 720pt/220pt monospace;\n       color: transparent;\n       text-shadow: 0 0 40px floralwhite;\n       background: rgba(0, 0, 0, 0.3);'\n    >\n      &#x1f33e;\n    &lt;/div> \n  &lt;/foreignObject> \n&lt;/svg></code></pre>\n\n\n\n<p>If you want to use your own images for the shapes, ensure the borders are blurred to create a soft light. The CSS <a href=\"https://css-tricks.com/almanac/properties/f/filter/#blur\"><code>blur()</code></a> filter can be handy for the same sort of thing. I also used CSS <code>@supports</code> to adjust the shadow blur value for certain browsers as a fallback.</p>\n\n\n\n<p>Now let’s circle back to the first example and add a few things:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"backdrop\">\n  &lt;p class=\"shapes\">&#x1f343;&lt;/p>\n  &lt;p class=\"shapes\">&#x1f342;&lt;/p>\n  &lt;p class=\"shapes\">\\&lt;/p>\n&lt;/div>\n\n&lt;p class=\"content\">\n  &lt;img width=\"70px\" style=\"float: left; margin-right: 10px;\" src=\"image.jpeg\" alt=\"\">\n  Top ten tourists spots for the summer vacation &lt;br>&lt;br>&lt;i style=\"font-weight: normal;\">Here are the most popular places...&lt;/i>\n&lt;/p></code></pre>\n\n\n\n<p><code>.backdrop</code> and <code>.shapes</code> are basically the same styles as before. As for the <code>.content</code>, which also sits on top of the <code>.backdrop</code>, I added <a href=\"https://css-tricks.com/almanac/properties/i/isolation/\"><code>isolation: isolate</code></a> to form a new stacking context, excluding the element from the blending as a refining touch.</p>\n\n\n\n<h3>Animating the light source</h3>\n\n\n\n<p>I also decided to add a simple CSS animation with <code>@keyframes</code> that get applied to the <code>.backdrop</code> on <code>:hover</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.backdrop:hover > .shapes:nth-of-type(1){\n  animation: 2s ease-in-out infinite alternate move;\n}\n.backdrop:hover > .shapes:nth-of-type(2):hover{\n  animation: 4s ease-in-out infinite alternate move-1;\n}\n\n@keyframes move {\n  from {\n    text-indent: -20px;\n  }\n  to {\n    text-indent: 20px;\n  }\n}\n@keyframes move-1 {\n  from {\n    text-indent: -60px;\n  }\n  to {\n    text-indent: 40px;\n  }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYzNxaP\" src=\"//codepen.io/anon/embed/LYzNxaP?height=450&amp;theme-id=1&amp;slug-hash=LYzNxaP&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYzNxaP\" title=\"CodePen Embed LYzNxaP\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Animating the <code>text-indent</code> property on the emojis products a super subtle bit of movement — the kind you might expect from clouds moving overhead that change the direction of the light. Just a touch of class, you know.</p>\n\n\n\n<h3>Wrapping up</h3>\n\n\n\n<p>There we have it! We drew some inspiration from nature and art to mimic one of those partly cloudy days where the sun shines through trees and bushes, projecting dappled light and shadow spots against a surface. And we did all of it with a small handful of CSS and a few emoji.</p>\n\n\n\n<p>The key was how we applied color on the emoji. Using an extra blurry <code>text-shadow</code> in a light color sets the light, and a semi-transparent <code>background-color</code> defines the shadow spots. From there, all we had to do was ensure the backdrop for the light and shadows used a realistic texture with enough contrast to see the dappled light effect in action.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-dappled-light-effect/\">A Serene CSS Dappled Light Effect</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "There’s a serene warmth to the early evening sunlight peaking through rustling leaves. Artists use dappled light to create a soft, hypnotic effect.\n\n\n\nBedford Dwellings by Ron Donoughe (2013)\n\n\n\nWe can create the same sort of dappled light effect in web design, using it on photos and illustrations to add that magic touch to what might otherwise be drab walls of content to bring them back to life.\n\n\n\nI’ll give you one easy, quick way to add this effect… with just CSS.\n\n\n\n\n\n\n\nBefore we get into the code, it’s important to know the composition of dappled light. It’s made up of large spots — circular or elliptical — of light that are intercepted by the shadows cast by the foliage. Basically the light that slips past leaves, branches and so forth. Sometimes the shadows create crisp edges, but are more often blurred since we’re talking about light that passes though many, less defined spaces that diffuse and distort the light as it casts shadows from a further distance than, say, your own stark shadow on a nearby wall from direct sunlight.\n\n\n\nHere’s the difference in the appearance of a white wall with and without lit by dappled light:\n\n\n\nThe effect creates splashes of light and shadow.\n\n\n\nI’m going to recreate the dappled light effect with both plain text and fun emojis, applying CSS shadows and blends to mimic nature. I’ll cover alternative methods too.\n\n\n\nSetting the scene\n\n\n\nWe’ll use text — letters from the alphabet, special characters, emojis, etc. — to create the shapes of light. And by light, I mean pale, translucent colors. Again, we’re for a dappled light effect rather than something that’s sharp, crisp, or stark.\n\n\n\nIt’s best to choose characters that are elliptical or oblong in some way — the spots produced by dappled light comes in a variety of shapes. You’ll have to go with your best judgement here to get exactly what you’re going for. Me? I’m using 🍃, 🍂, \\ because they are elliptical, oblong, and slanted — a bit of chaos and unpredictability for an otherwise serene effect.\n\n\n\nI’m wrapping those in paragraphs that are contained in a .backdrop parent element:\n\n\n\n<div class=\"backdrop\">\n  <p class=\"shapes\">🍃</p>\n  <p class=\"shapes\">🍂</p>\n  <p class=\"shapes\">\\</p>\n</div>\n\n\n\nI’m using the parent element as the surface where the dappled light and shadows are cast, applying a background image for its texture. And not only am I giving the surface an explicit width and height, but also setting hidden overflow on it so I’m able to cast shadows that go beyond the surface without revealing them. The objects that cast the dappled light effect are aligned in the middle of the backdrop’s surface, thanks to CSS grid:\n\n\n\n.backdrop {\n  background: center / cover no-repeat url('image.jpeg');\n  width: 400px; height: 240px;\n  overflow: hidden;\n  display: grid;\n}\n.backdrop > * {\n  grid-area: 1/1;\n}\n\n\n\nI find that it’s OK if the shapes aren’t aligned exactly on top of one another as long as they overlap in a way that gets the dappled light effect you want. So no pressure to do exactly what I’m doing here to position things in CSS. In fact, I encourage you to try playing with the values to get different patterns of dappled light!\n\n\n\nStyling the dappled light in CSS\n\n\n\nThese are the key properties the emojis should have — transparent color, black semi-transparent background (using the alpha channel in rgba()), blurry white text-shadow with a nice large font-size, and finally, a mix-blend-mode to smooth things out.\n\n\n\n.shapes {\n  color:  transparent;\n  background-color: rgba(0, 0, 0, 0.3); // Use alpha transparency\n  text-shadow: 0 0 40px #fff; // Blurry white shadow\n  font: bolder 320pt/320pt monospace;\n  mix-blend-mode: multiply;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nmix-blend-mode sets how an element’s colors blend with that of its container element’s content. The multiply value causes the backdrop of an element to show through the element’s light colors and keeps dark colors the same, making for a nicer and more natural dappled light effect.\n\n\n\nRefining colors and contrast\n\n\n\nI wanted the background-image on the backdrop to be a bit brighter, so I also added filter: brightness(1.6). Another way to do this is with background-blend-mode instead, where all the different backgrounds of an element are blended and, instead of adding the emojis as separate elements, we add them as background images.\n\n\n\nCodePen Embed Fallback\n\n\n\nNotice that I used a different emoji in that last example as well as floralwhite for some color that’s less intense than pure white for the light. Here’s one of the emoji background images unwrapped:\n\n\n\n<svg xmlns='http://www.w3.org/2000/svg'> \n  <foreignObject width='400px' height='240px'> \n    <div xmlns='http://www.w3.org/1999/xhtml' style=\n      'font: bolder 720pt/220pt monospace;\n       color: transparent;\n       text-shadow: 0 0 40px floralwhite;\n       background: rgba(0, 0, 0, 0.3);'\n    >\n      🌾\n    </div> \n  </foreignObject> \n</svg>\n\n\n\nIf you want to use your own images for the shapes, ensure the borders are blurred to create a soft light. The CSS blur() filter can be handy for the same sort of thing. I also used CSS @supports to adjust the shadow blur value for certain browsers as a fallback.\n\n\n\nNow let’s circle back to the first example and add a few things:\n\n\n\n<div class=\"backdrop\">\n  <p class=\"shapes\">🍃</p>\n  <p class=\"shapes\">🍂</p>\n  <p class=\"shapes\">\\</p>\n</div>\n\n<p class=\"content\">\n  <img width=\"70px\" style=\"float: left; margin-right: 10px;\" src=\"image.jpeg\" alt=\"\">\n  Top ten tourists spots for the summer vacation <br><br><i style=\"font-weight: normal;\">Here are the most popular places...</i>\n</p>\n\n\n\n.backdrop and .shapes are basically the same styles as before. As for the .content, which also sits on top of the .backdrop, I added isolation: isolate to form a new stacking context, excluding the element from the blending as a refining touch.\n\n\n\nAnimating the light source\n\n\n\nI also decided to add a simple CSS animation with @keyframes that get applied to the .backdrop on :hover:\n\n\n\n.backdrop:hover > .shapes:nth-of-type(1){\n  animation: 2s ease-in-out infinite alternate move;\n}\n.backdrop:hover > .shapes:nth-of-type(2):hover{\n  animation: 4s ease-in-out infinite alternate move-1;\n}\n\n@keyframes move {\n  from {\n    text-indent: -20px;\n  }\n  to {\n    text-indent: 20px;\n  }\n}\n@keyframes move-1 {\n  from {\n    text-indent: -60px;\n  }\n  to {\n    text-indent: 40px;\n  }\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nAnimating the text-indent property on the emojis products a super subtle bit of movement — the kind you might expect from clouds moving overhead that change the direction of the light. Just a touch of class, you know.\n\n\n\nWrapping up\n\n\n\nThere we have it! We drew some inspiration from nature and art to mimic one of those partly cloudy days where the sun shines through trees and bushes, projecting dappled light and shadow spots against a surface. And we did all of it with a small handful of CSS and a few emoji.\n\n\n\nThe key was how we applied color on the emoji. Using an extra blurry text-shadow in a light color sets the light, and a semi-transparent background-color defines the shadow spots. From there, all we had to do was ensure the backdrop for the light and shadows used a realistic texture with enough contrast to see the dappled light effect in action.\n\nA Serene CSS Dappled Light Effect originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-19T22:46:39.000Z",
      "date_modified": "2022-01-19T22:46:39.000Z",
      "_plugin": {
        "pageFilename": "93ae5a190c32600c399228026d4c892cf9a9d60ee418cfeee6c4be0aeb52af57.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359857",
      "url": "https://css-tricks.com/whats-new-since-css3/",
      "title": "What should someone learn about CSS if they last boned up during CSS3?",
      "summary": "What's new in CSS? If someone asked you that, who knows CSS but hasn't stayed up to date the last, say, half a decade or more, what advice would you give?\n\nWhat should someone learn about CSS if they last boned up during CSS3? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>&#8220;CSS3&#8221; was a massive success for CSS. A whole bunch of stuff dropped essentially at once that was all very terrific to get our hands on in CSS. <a href=\"https://css-tricks.com/a-complete-guide-to-css-gradients/\">Gradients</a>, <code><a href=\"https://css-tricks.com/almanac/properties/a/animation/\">animation</a></code>/<code><a href=\"https://css-tricks.com/almanac/properties/t/transition/\">transition</a></code>, <code><a href=\"https://css-tricks.com/almanac/properties/b/border-radius/\">border-radius</a></code>, <code><a href=\"https://css-tricks.com/almanac/properties/b/box-shadow/\">box-shadow</a></code>, <code><a href=\"https://css-tricks.com/almanac/properties/t/transform/\">transform</a></code>&#8230; <em>woot!</em> And better, the banner name CSS3 (and the spiritual umbrella &#8220;HTML5&#8221;) took off and the industry was just <em>saturated</em> in learning material about it all. Just look at all the <a href=\"https://css-tricks.com/?s=css3\">&#8220;CSS3&#8221;-dubbed material that&#8217;s been published around here at CSS-Tricks</a> over the years.</p>\n\n\n\n<p>No doubt loads of people boned up on these technologies during that time. I also think there is no doubt there are lots of people that haven&#8217;t learned much CSS <em>since</em> then. </p>\n\n\n\n<p>So what would we tell them? </p>\n\n\n\n<span id=\"more-359857\"></span>\n\n\n\n<figure class=\"wp-block-image size-full is-resized ticss-1576ba58\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/01/html5-css3.jpg?resize=498%2C249&#038;ssl=1\" alt=\"\" class=\"wp-image-332465\" width=\"498\" height=\"249\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/01/html5-css3.jpg?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/01/html5-css3.jpg?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/01/html5-css3.jpg?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/01/html5-css3.jpg?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/01/html5-css3.jpg?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Some other folks have speculated similarly. Scott Vandehey in <a href=\"https://cloudfour.com/thinks/modern-css-in-a-nutshell/\" rel=\"noopener\">&#8220;Modern CSS in a Nutshell&#8221;</a> wrote about his friend who hasn&#8217;t kept up with CSS since about 2015 and doesn&#8217;t really know what to learn. I&#8217;ll attempt to paraphrase Scott&#8217;s list and what&#8217;s changed since the days of CSS3.</p>\n\n\n\n<p>Preprocessors are still widely used since the day of CSS3, but the reasons to use them have dwindled, so maybe don&#8217;t even bother. This includes more newfangled approaches like <a href=\"https://github.com/csstools/postcss-preset-env\" rel=\"noopener\">polyfilling future features</a>. This also includes Autoprefixer. <a href=\"https://css-tricks.com/a-thorough-analysis-of-css-in-js/\">CSS-in-JS</a> is common, but only on projects where the entire workflow is already in JavaScript. You&#8217;ll know when you&#8217;re on a relevant project and can learn the syntax then if you need to. You should learn <a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">Custom Properties</a>, <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">Flexbox</a>, and <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">Grid</a> for sure.</p>\n\n\n\n<p>Sounds about right to me. But allow me to make my own list of post-CSS3 goodies that expands upon that list a smidge.</p>\n\n\n\n<h3 class=\"has-text-align-center ticss-80722a74\">What&#8217;s new since CSS3?</h3>\n\n\n\n<p class=\"has-text-align-center ticss-c165d0fe\">And by &#8220;CSS3&#8221; let&#8217;s say 2015 or so.</p>\n\n\n\n<hr class=\"wp-block-separator ticss-ea70b5cd\"/>\n\n\n\n<div class=\"wp-block-columns css-learn-group ticss-3267827a\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.card {\n  display: grid;\n  grid-template-columns:\n    150px 1fr;\n  gap: 1rem;\n}\n.card .nav {\n  display: flex;\n  gap: 0.5rem;\n}</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Layout</h4>\n\n\n\n<p>You really gotta learn <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">Flexbox</a> and <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">Grid</a> if you haven&#8217;t — they are really cornerstones of CSS development these days. Even more so than any feature we got in CSS3.</p>\n\n\n\n<p>Grid is extra powerful when you factor in <a href=\"https://css-tricks.com/just-another-1-for-subgrid/\">subgrid</a> and <a href=\"https://www.smashingmagazine.com/native-css-masonry-layout-css-grid/\" rel=\"noopener\">masonry</a>, neither of which is reliable cross-browser yet but probably will be before too long. </p>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n  --bgColor: #70f1d9;\n  \n  --font-size-base: \n    clamp(1.833rem, 2vw + 1rem, 3rem);\n  --font-size-lrg:\n    clamp(1.375rem, 2vw + 1rem, 2.25rem);\n}\n\nhtml.dark {\n  --bgColor: #2d283e;\n}\n</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>CSS Custom Properties</h4>\n\n\n\n<p><a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">Custom properties</a> are also a big deal for several reasons. They can be your home for design tokens on your project, making a project easier to maintain and keep consistent. Color theming is a big use case, like <a href=\"https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/#aa-using-custom-properties\">dark mode</a>.</p>\n\n\n\n<p>You can go so far as <a href=\"https://open-props.style/\" rel=\"noopener\">designing entire sites</a> using <a href=\"https://css-tricks.com/open-props-and-custom-properties-as-a-system/\">mostly custom properties</a>. And along those lines, you can&#8217;t ignore <a href=\"https://tailwindcss.com/\" rel=\"noopener\">Tailwind</a> these days. The approach of styling an entire site with classes in HTML strikes the right chord with a lot of people (and the wrong chord with a lot of people, so no worries if it doesn&#8217;t jive with you).</p>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media \n  (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.001s !important;\n  }\n}\n\n@media \n  (prefers-color-scheme: dark) {\n  :root {\n    --bg: #222;\n  }\n}\n</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Preference Queries</h4>\n\n\n\n<p>Preference queries are generally <a href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/\"><code>@media</code> queries</a> like we&#8217;ve been using to respond to different browsers sizes for year, but now include ways to detect specific user preferences at the OS level. Two examples are <code>prefers-reduced-motion</code> and <code>prefers-color-scheme</code>. These allow us to build interfaces that more closely respect a user&#8217;s ideal experience. <a href=\"https://css-tricks.com/personalize-it/\">Read Una&#8217;s post.</a></p>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.block {\n  background: \n    hsl(0 33% 53% / 0.5);\n\n  background:\n    rgb(255 0 0);\n\n  background:\n    /* can display colors \n       no other format can */\n    color(display-p3 0.9176 0.2003 0.1386)\n\n  background:\n    lab(52.2345% 40.1645 59.9971 / .5);}\n\n  background:\n    hwb(194 0% 0% / .5);\n}</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Color Changes</h4>\n\n\n\n<p>The color syntax is moving to functions that accept alpha (transparency) without having the change the function name. For example, if you wanted pure blue in the CSS3 days, you might do <code>rgb(0, 0, 255)</code>. Today, however, you can do it no-comma style (both work): <code>rgb(0 0 255)</code>, and then add alpha without using a different function: <code>rgb(0 0 255 / 0.5)</code>. Same exact situation for <code>hsl()</code>. Just a small nicety, and how future color functions will <em>only</em> work.</p>\n\n\n\n<p>Speaking of future color syntaxes:</p>\n\n\n\n<ul><li>P3 color or &#8220;display-p3&#8221; <a href=\"https://twitter.com/jensimmons/status/1478858248677736454\" rel=\"noopener\">is coming</a> via <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color()\" rel=\"noopener\">the <code>color()</code> function</a>.</li><li><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/lab()\" rel=\"noopener\">lab()</a></code> color is another new color space. It &#8220;represents the entire range of color that humans can see.&#8221;</li><li><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/lch()\" rel=\"noopener\">lch()</a></code> is another new color space. </li><li><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb()\" rel=\"noopener\">hwb()</a></code> is another new color space <a href=\"https://www.stefanjudis.com/blog/hwb-a-color-notation-for-humans/\" rel=\"noopener\">for humans</a>.</li></ul>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n font-family: 'Recursive', sans-serif;\n font-weight: 950;\n font-variation-settings: 'MONO' 1, 'CASL' 1;\n}</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Variable Fonts</h4>\n\n\n\n<p>Web fonts became a <a href=\"https://css-tricks.com/about-the-css-tricks-redesign/#aa-font-face\">big thing in CSS3</a>. Now there are <a href=\"https://css-tricks.com/one-file-many-options-using-variable-fonts-web/\">variable fonts</a>. You might as well know they exist. They both unlock some cool design possibilities and can sometimes be good for performance (like no longer needing to load different font files for bold and italic versions of the same font, for example). There is a such thing as <a href=\"https://www.colorfonts.wtf/\" rel=\"noopener\">color fonts</a> too, but I&#8217;d say they haven&#8217;t seen much popularity on the web, despite <a href=\"https://caniuse.com/colr\" rel=\"noopener\">the support</a>.</p>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.cut-out {\n  clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);\n}</code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.mask {\n  mask: url(mask.png) right bottom / 100px repeat-y;\n}</code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.move-me {\n  offset-path: path('M 5 5 m -4, 0 a 4,4 0 1,0 8,0 a 4,4 0 1,0 -8,0');\n  animation: move 3s linear infinite;\n}\n\n@keyframes move {\n  100% { \n    offset-distance: 100%;\n  }\n}</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Paths</h4>\n\n\n\n<p><a href=\"https://css-tricks.com/using-svg/\">SVG</a> has also exploded since CSS3. You can <meta charset=\"utf-8\"><a href=\"https://bennettfeely.com/clippy/\" rel=\"noopener\">straight up crop</a> any element into shapes via <code>clip-path</code>, bringing SVG-like qualities to CSS. Not only that, but you can animate elements along paths, float elements along paths, and even update the paths of SVG elements.</p>\n\n\n\n<p>These all feel kind of spirtually connected to me:</p>\n\n\n\n<ul><li><code><a href=\"https://css-tricks.com/almanac/properties/c/clip-path/\">clip-path</a></code> — allows us to literally crop elements into shapes.</li><li><code><a href=\"https://css-tricks.com/almanac/properties/m/mask/\">mask</a></code>s — similar to clipping, but a mask can have other qualities like being based on the alpha channel of the mask.</li><li><span style=\"color: initial; font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\"><code><a href=\"https://css-tricks.com/almanac/properties/o/offset-path/\">offset-path</a></code></span> — provides a path that an element can be placed on, generally for the purpose of <a href=\"https://css-tricks.com/movin-modals-along-a-path/\">animating it along that path</a>.</li><li><span style=\"color: initial; font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\"><code><a href=\"https://css-tricks.com/almanac/properties/s/shape-outside/\">shape-outside</a></code></span> — provides a path on a floated element that other elements wrap around. </li><li><code>d</code> — an SVG&#8217;s <code>d</code> attribute on a <code>&lt;path&gt;</code> can be <a href=\"https://css-tricks.com/animate-svg-path-changes-in-css/\">updated via CSS</a>.</li></ul>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.disable {\n  filter: \n    blur(1px)\n    grayscale(1);\n}\n\n.site-header {\n  backdrop-filter: \n    blur(10px);\n}\n\n.styled-quote {\n  mix-blend-mode: \n    exclusion;\n} </code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>CSS Filters</h4>\n\n\n\n<p>There is a lot of image manipulation (not to mention other DOM elements) that is possible these days directly in CSS. There is quite literally <code>filter</code>, but its got friends and they all have different uses. </p>\n\n\n\n<p><meta charset=\"utf-8\">These all feel kind of spirtually connected to me:</p>\n\n\n\n<ul><li><code><a href=\"https://css-tricks.com/almanac/properties/f/filter/\">filter</a></code> — all sorts of useful Photoshop-like effects like brightness, contrast, grayscale, sautration, etc. Blurring is a really unique power.</li><li><code><a href=\"https://css-tricks.com/almanac/properties/b/background-blend-mode/\">background-blend-mode</a></code> — again, evocative of Photoshop in how you can blend layers. Multiply the layers to darken and combine. Overlay to mix the background and color. Lighten and darken are classic effects that have real utility in web design, and you never know when a more esoteric lighting effect will create a cool look.</li><li><code><a href=\"https://css-tricks.com/almanac/properties/b/backdrop-filter/\">backdrop-filter</a></code> — the same abilities you have with <code>filter</code>, but they only <em>apply</em> to the background and not the entire element. Blurring just the background is a particularly useful effect.</li><li><code><a href=\"https://css-tricks.com/almanac/properties/m/mix-blend-mode/\">mix-blend-mode</a></code> — the same abilities you have with <code>background-blend-mode</code>, but for the entire element rather than bring limited to backgrounds.</li></ul>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"https://unpkg.com/extra.css/confetti.js\";</code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  background: paint(extra-confetti);\n  height: 100vh;\n  margin: 0;\n}</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Houdini</h4>\n\n\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Houdini\" rel=\"noopener\">Houdini</a> is really a collection of technologies that are all essentially based around extending CSS with JavaScript, or at least at the intersection of CSS and JavaScript.</p>\n\n\n\n<ul><li>Paint API — returns an image that is built from <code>&lt;canvas&gt;</code> APIs and can be controlled through custom properties.</li><li>Properties &amp; Values API / Typed OM — gives types to values (e.g. <code>10px</code>) that would have otherwise been strings.</li><li>Layout API — create your own <code>display</code> properties.</li><li>Animation API</li></ul>\n\n\n\n<p>Combined, these make for some <a href=\"https://css-houdini.rocks/\" rel=\"noopener\">really</a> awesome <a href=\"https://houdini.how/\" rel=\"noopener\">demos</a>, though <a href=\"https://ishoudinireadyyet.com/\" rel=\"noopener\">browser support is scattered</a>. Part of the magic of Houdini is that it ships as Worklets that are pretty easy to import and use, so it has the potential to modularize powerful functionality while making it trivially easy to use.</p>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns css-learn-group\">\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">my-component {\n  --bg: lightgreen;\n}\n\n:host(.dark) { \n  background: black; \n}\n\nmy-component:part(foo) {\n  border-bottom: 2px solid black;\n}</code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\" style=\"flex-basis:50%\">\n<h4>Shadow DOM</h4>\n\n\n\n<p>The Shadow DOM comes up a bit if you&#8217;ve played with <code>&lt;svg&gt;</code> and the <code>&lt;use&gt;</code> element. The &#8220;cloned&#8221; element that comes through has a shadow DOM that has limitations on how you can select &#8220;through&#8221; it. Then, when you get into <code><a href=\"https://css-tricks.com/an-introduction-to-web-components/\">&lt;web-components&gt;</a></code>, it&#8217;s the same ball of wax. </p>\n\n\n\n<p>If you find yourself needing to style web components, <a href=\"https://css-tricks.com/styling-web-components/\">know there are essentially four options</a> from the &#8220;outside.&#8221; And you might be interested in knowing about <a href=\"https://css-tricks.com/css-modules-the-native-ones/\">native CSS modules</a> and <a href=\"https://developers.google.com/web/updates/2019/02/constructable-stylesheets\" rel=\"noopener\">constructible stylesheets</a>.</p>\n</div>\n</div>\n\n\n\n<h3>The CSS Working Group</h3>\n\n\n\n<p>It&#8217;s notable that the CSS working group has its own way of drawing lines in the sand year-to-year, noting where certain specs are at a given point in time:</p>\n\n\n\n<ul><li><a href=\"https://www.w3.org/TR/2020/NOTE-css-2020-20201222/\" rel=\"noopener\">CSS Snapshot 2020</a></li><li><a href=\"https://www.w3.org/TR/css-2021/\" rel=\"noopener\">CSS Snapshot 2021</a></li></ul>\n\n\n\n<p>These are pretty dense though. Sure, they&#8217;re great references and document things where we can see what&#8217;s changed since CSS3. But no way I&#8217;d send a casual front-end developer to these to choose what to learn. </p>\n\n\n\n<h3>Yeah — but what&#8217;s coming?</h3>\n\n\n\n<p>I&#8217;d say probably don&#8217;t worry about it. ;)</p>\n\n\n\n<p>The point of this is catching up to useful things to know <em>now</em> since the CSS3 era. But if you&#8217;re curious about what the future of CSS holds in store&#8230;</p>\n\n\n\n<ul><li><strong>Container queries</strong> will be a huge deal. You&#8217;ll be able to make styling choices based on the size of a container element rather than the browser size alone. And it&#8217;s <a href=\"https://css-tricks.com/a-new-container-query-polyfill-that-just-works/\">polyfillable today</a>.</li><li><strong>Container units</strong> <a href=\"https://css-tricks.com/container-units-should-be-pretty-handy/\">will be useful</a> for sizing things based on the size of a container element.</li><li><strong>Independant transforms</strong>, e.g. <code><a href=\"https://css-tricks.com/almanac/properties/s/scale/\">scale: 1.2;</a></code>, will feel more logical to use than always having to use <code>transform</code>. </li><li><strong>Nesting</strong> is a feature that all CSS preprocessor have had <em>forever</em> and that developers clearly like using, particularly for media queries. It&#8217;s likely we&#8217;ll get <a href=\"https://css-tricks.com/css-is-going-gosh-darned-hog-wild-i-tell-ya-what/#aa-native-nesting\">it in native CSS</a> soon. </li><li><span style=\"color: initial; font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\"><strong>Scoping</strong></span> will be a way to tell a block of <a href=\"https://css-tricks.com/css-is-going-gosh-darned-hog-wild-i-tell-ya-what/#aa-scoping\">CSS to only apply to a certain area</a> (the same way CSS-in-JS libraries do), and helps with the tricky concept of proximity. </li><li><strong>Cascade layers</strong> open up an <a href=\"https://css-tricks.com/css-is-going-gosh-darned-hog-wild-i-tell-ya-what/#aa-cascade-layers\">entirely new concept of what styles &#8220;win&#8221; on elements</a>. Styles on higher layers will beat styles on lower layers, regardless of specificity. </li><li><strong>Viewport units</strong> will greatly improve with the <a href=\"https://css-tricks.com/the-large-small-and-dynamic-viewports/\">introduction of &#8220;relative&#8221; viewport lengths.</a> The super useful ones will be <code>dvh</code> and <code>dvw</code>, as they factor in the actual usable space in a browser window, preventing terrible issues like the browser UI overlapping a site&#8217;s UI. </li></ul>\n\n\n\n<p>Bramus Van Damme has a pretty good article covering these things and more in his <a href=\"https://www.bram.us/2021/12/27/css-in-2022/\" rel=\"noopener\">&#8220;CSS in 2022&#8221;</a> roundup. It looks like 2022 should be a real banner year for CSS. Perhaps more of a banner year than the CSS3 of 2015.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/whats-new-since-css3/\">What should someone learn about CSS if they last boned up during CSS3?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "“CSS3” was a massive success for CSS. A whole bunch of stuff dropped essentially at once that was all very terrific to get our hands on in CSS. Gradients, animation/transition, border-radius, box-shadow, transform… woot! And better, the banner name CSS3 (and the spiritual umbrella “HTML5”) took off and the industry was just saturated in learning material about it all. Just look at all the “CSS3”-dubbed material that’s been published around here at CSS-Tricks over the years.\n\n\n\nNo doubt loads of people boned up on these technologies during that time. I also think there is no doubt there are lots of people that haven’t learned much CSS since then. \n\n\n\nSo what would we tell them? \n\n\n\n\n\n\n\n\n\n\n\nSome other folks have speculated similarly. Scott Vandehey in “Modern CSS in a Nutshell” wrote about his friend who hasn’t kept up with CSS since about 2015 and doesn’t really know what to learn. I’ll attempt to paraphrase Scott’s list and what’s changed since the days of CSS3.\n\n\n\nPreprocessors are still widely used since the day of CSS3, but the reasons to use them have dwindled, so maybe don’t even bother. This includes more newfangled approaches like polyfilling future features. This also includes Autoprefixer. CSS-in-JS is common, but only on projects where the entire workflow is already in JavaScript. You’ll know when you’re on a relevant project and can learn the syntax then if you need to. You should learn Custom Properties, Flexbox, and Grid for sure.\n\n\n\nSounds about right to me. But allow me to make my own list of post-CSS3 goodies that expands upon that list a smidge.\n\n\n\nWhat’s new since CSS3?\n\n\n\nAnd by “CSS3” let’s say 2015 or so.\n\n\n\n\n\n\n\n\n\n.card {\n  display: grid;\n  grid-template-columns:\n    150px 1fr;\n  gap: 1rem;\n}\n.card .nav {\n  display: flex;\n  gap: 0.5rem;\n}\n\n\n\n\n\nLayout\n\n\n\nYou really gotta learn Flexbox and Grid if you haven’t — they are really cornerstones of CSS development these days. Even more so than any feature we got in CSS3.\n\n\n\nGrid is extra powerful when you factor in subgrid and masonry, neither of which is reliable cross-browser yet but probably will be before too long. \n\n\n\n\n\n\n\nhtml {\n  --bgColor: #70f1d9;\n  \n  --font-size-base: \n    clamp(1.833rem, 2vw + 1rem, 3rem);\n  --font-size-lrg:\n    clamp(1.375rem, 2vw + 1rem, 2.25rem);\n}\n\nhtml.dark {\n  --bgColor: #2d283e;\n}\n\n\n\n\n\n\nCSS Custom Properties\n\n\n\nCustom properties are also a big deal for several reasons. They can be your home for design tokens on your project, making a project easier to maintain and keep consistent. Color theming is a big use case, like dark mode.\n\n\n\nYou can go so far as designing entire sites using mostly custom properties. And along those lines, you can’t ignore Tailwind these days. The approach of styling an entire site with classes in HTML strikes the right chord with a lot of people (and the wrong chord with a lot of people, so no worries if it doesn’t jive with you).\n\n\n\n\n\n\n\n@media \n  (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.001s !important;\n  }\n}\n\n@media \n  (prefers-color-scheme: dark) {\n  :root {\n    --bg: #222;\n  }\n}\n\n\n\n\n\n\nPreference Queries\n\n\n\nPreference queries are generally @media queries like we’ve been using to respond to different browsers sizes for year, but now include ways to detect specific user preferences at the OS level. Two examples are prefers-reduced-motion and prefers-color-scheme. These allow us to build interfaces that more closely respect a user’s ideal experience. Read Una’s post.\n\n\n\n\n\n\n\n.block {\n  background: \n    hsl(0 33% 53% / 0.5);\n\n  background:\n    rgb(255 0 0);\n\n  background:\n    /* can display colors \n       no other format can */\n    color(display-p3 0.9176 0.2003 0.1386)\n\n  background:\n    lab(52.2345% 40.1645 59.9971 / .5);}\n\n  background:\n    hwb(194 0% 0% / .5);\n}\n\n\n\n\n\nColor Changes\n\n\n\nThe color syntax is moving to functions that accept alpha (transparency) without having the change the function name. For example, if you wanted pure blue in the CSS3 days, you might do rgb(0, 0, 255). Today, however, you can do it no-comma style (both work): rgb(0 0 255), and then add alpha without using a different function: rgb(0 0 255 / 0.5). Same exact situation for hsl(). Just a small nicety, and how future color functions will only work.\n\n\n\nSpeaking of future color syntaxes:\n\n\n\nP3 color or “display-p3” is coming via the color() function.lab() color is another new color space. It “represents the entire range of color that humans can see.”lch() is another new color space. hwb() is another new color space for humans.\n\n\n\n\n\n\n\nbody {\n font-family: 'Recursive', sans-serif;\n font-weight: 950;\n font-variation-settings: 'MONO' 1, 'CASL' 1;\n}\n\n\n\n\n\nVariable Fonts\n\n\n\nWeb fonts became a big thing in CSS3. Now there are variable fonts. You might as well know they exist. They both unlock some cool design possibilities and can sometimes be good for performance (like no longer needing to load different font files for bold and italic versions of the same font, for example). There is a such thing as color fonts too, but I’d say they haven’t seen much popularity on the web, despite the support.\n\n\n\n\n\n\n\n.cut-out {\n  clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);\n}\n\n\n\n.mask {\n  mask: url(mask.png) right bottom / 100px repeat-y;\n}\n\n\n\n.move-me {\n  offset-path: path('M 5 5 m -4, 0 a 4,4 0 1,0 8,0 a 4,4 0 1,0 -8,0');\n  animation: move 3s linear infinite;\n}\n\n@keyframes move {\n  100% { \n    offset-distance: 100%;\n  }\n}\n\n\n\n\n\nPaths\n\n\n\nSVG has also exploded since CSS3. You can straight up crop any element into shapes via clip-path, bringing SVG-like qualities to CSS. Not only that, but you can animate elements along paths, float elements along paths, and even update the paths of SVG elements.\n\n\n\nThese all feel kind of spirtually connected to me:\n\n\n\nclip-path — allows us to literally crop elements into shapes.masks — similar to clipping, but a mask can have other qualities like being based on the alpha channel of the mask.offset-path — provides a path that an element can be placed on, generally for the purpose of animating it along that path.shape-outside — provides a path on a floated element that other elements wrap around. d — an SVG’s d attribute on a <path> can be updated via CSS.\n\n\n\n\n\n\n\n.disable {\n  filter: \n    blur(1px)\n    grayscale(1);\n}\n\n.site-header {\n  backdrop-filter: \n    blur(10px);\n}\n\n.styled-quote {\n  mix-blend-mode: \n    exclusion;\n} \n\n\n\n\n\nCSS Filters\n\n\n\nThere is a lot of image manipulation (not to mention other DOM elements) that is possible these days directly in CSS. There is quite literally filter, but its got friends and they all have different uses. \n\n\n\nThese all feel kind of spirtually connected to me:\n\n\n\nfilter — all sorts of useful Photoshop-like effects like brightness, contrast, grayscale, sautration, etc. Blurring is a really unique power.background-blend-mode — again, evocative of Photoshop in how you can blend layers. Multiply the layers to darken and combine. Overlay to mix the background and color. Lighten and darken are classic effects that have real utility in web design, and you never know when a more esoteric lighting effect will create a cool look.backdrop-filter — the same abilities you have with filter, but they only apply to the background and not the entire element. Blurring just the background is a particularly useful effect.mix-blend-mode — the same abilities you have with background-blend-mode, but for the entire element rather than bring limited to backgrounds.\n\n\n\n\n\n\n\nimport \"https://unpkg.com/extra.css/confetti.js\";\n\n\n\nbody {\n  background: paint(extra-confetti);\n  height: 100vh;\n  margin: 0;\n}\n\n\n\n\n\nHoudini\n\n\n\nHoudini is really a collection of technologies that are all essentially based around extending CSS with JavaScript, or at least at the intersection of CSS and JavaScript.\n\n\n\nPaint API — returns an image that is built from <canvas> APIs and can be controlled through custom properties.Properties & Values API / Typed OM — gives types to values (e.g. 10px) that would have otherwise been strings.Layout API — create your own display properties.Animation API\n\n\n\nCombined, these make for some really awesome demos, though browser support is scattered. Part of the magic of Houdini is that it ships as Worklets that are pretty easy to import and use, so it has the potential to modularize powerful functionality while making it trivially easy to use.\n\n\n\n\n\n\n\nmy-component {\n  --bg: lightgreen;\n}\n\n:host(.dark) { \n  background: black; \n}\n\nmy-component:part(foo) {\n  border-bottom: 2px solid black;\n}\n\n\n\n\n\nShadow DOM\n\n\n\nThe Shadow DOM comes up a bit if you’ve played with <svg> and the <use> element. The “cloned” element that comes through has a shadow DOM that has limitations on how you can select “through” it. Then, when you get into <web-components>, it’s the same ball of wax. \n\n\n\nIf you find yourself needing to style web components, know there are essentially four options from the “outside.” And you might be interested in knowing about native CSS modules and constructible stylesheets.\n\n\n\n\n\nThe CSS Working Group\n\n\n\nIt’s notable that the CSS working group has its own way of drawing lines in the sand year-to-year, noting where certain specs are at a given point in time:\n\n\n\nCSS Snapshot 2020CSS Snapshot 2021\n\n\n\nThese are pretty dense though. Sure, they’re great references and document things where we can see what’s changed since CSS3. But no way I’d send a casual front-end developer to these to choose what to learn. \n\n\n\nYeah — but what’s coming?\n\n\n\nI’d say probably don’t worry about it. ;)\n\n\n\nThe point of this is catching up to useful things to know now since the CSS3 era. But if you’re curious about what the future of CSS holds in store…\n\n\n\nContainer queries will be a huge deal. You’ll be able to make styling choices based on the size of a container element rather than the browser size alone. And it’s polyfillable today.Container units will be useful for sizing things based on the size of a container element.Independant transforms, e.g. scale: 1.2;, will feel more logical to use than always having to use transform. Nesting is a feature that all CSS preprocessor have had forever and that developers clearly like using, particularly for media queries. It’s likely we’ll get it in native CSS soon. Scoping will be a way to tell a block of CSS to only apply to a certain area (the same way CSS-in-JS libraries do), and helps with the tricky concept of proximity. Cascade layers open up an entirely new concept of what styles “win” on elements. Styles on higher layers will beat styles on lower layers, regardless of specificity. Viewport units will greatly improve with the introduction of “relative” viewport lengths. The super useful ones will be dvh and dvw, as they factor in the actual usable space in a browser window, preventing terrible issues like the browser UI overlapping a site’s UI. \n\n\n\nBramus Van Damme has a pretty good article covering these things and more in his “CSS in 2022” roundup. It looks like 2022 should be a real banner year for CSS. Perhaps more of a banner year than the CSS3 of 2015.\n\nWhat should someone learn about CSS if they last boned up during CSS3? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-19T14:25:31.000Z",
      "date_modified": "2022-01-19T14:25:31.000Z",
      "_plugin": {
        "pageFilename": "13eb470ce98f544641568b73eaf699e38b6baa6fcfcd17bfbea89ebc3f12c0c0.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360362",
      "url": "https://css-tricks.com/table-of-contents-block-in-wordpress/",
      "title": "4 Quality Options for a Table of Contents Block in WordPress",
      "summary": "There are a number of options for including a Table of Contents lock in WordPress. You can use a plugin, or try to do it yourself. \n\n4 Quality Options for a Table of Contents Block in WordPress originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Offering a table of contents block in WordPress for blog posts (or really any other type of long-ish written content) is a good idea for two reasons:</p>\n\n\n\n<ul><li>It helps users jump around in the post for what they need (and hopefully doesn&#8217;t get in the way).</li><li>It&#8217;s provides SEO value.</li></ul>\n\n\n\n<span id=\"more-360362\"></span>\n\n\n\n<p>The RankMath SEO plugin <a href=\"https://rankmath.com/kb/table-of-contents/\" rel=\"noopener\">factors it in</a> as part of your page score (suggesting you should have one), because of that second point. See what Google likely gives you if you do it right:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1318\" height=\"322\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/jump-links.webp?resize=1318%2C322&#038;ssl=1\" alt=\"Screenshoot of a typical Google search results item with a breadcrumb above the page title, then a page description. A purple box is drawn around four links below the page description to call out how adding a table of contents block in WordPress can add those links in the search results for additional user convenience,\" class=\"wp-image-360428\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/jump-links.webp?w=1318&amp;ssl=1 1318w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/jump-links.webp?resize=300%2C73&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/jump-links.webp?resize=1024%2C250&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/jump-links.webp?resize=768%2C188&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/jump-links.webp?resize=1000%2C244&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It makes sense that other WordPress SEO Plugins like Yoast <a href=\"https://yoast.com/features/internal-linking-blocks/\" rel=\"noopener\">offer a table of contents block as a baked-in additional feature</a> of the plugin. If you&#8217;re committed to using Yoast, then I think it&#8217;s fine to just use that. But I admit it&#8217;s not my favorite to feel locked to a plugin because it offers a microfeature that you then depend on. </p>\n\n\n\n<p>So what are the options?</p>\n\n\n<h2 class=\"simpletoc-title\">Table of Contents</h2><ul class=\"simpletoc\">\n<li>\n<a  href=\"#what-to-look-for-in-a-wordpress-table-of-contents-block\">What to look for in a WordPress Table of Contents Block</a></li><li>\n<a  href=\"#option-1-use-a-dedicated-table-of-contents-plugin\">Option 1: Use a Dedicated Table of Contents Plugin</a>\n\t\t<ul><li>\n<a  href=\"#heroic-table-of-contents\">Heroic Table of Contents</a></li><li>\n<a  href=\"#easy-table-of-contents\">Easy Table of Contents</a></li><li>\n<a  href=\"#simpletoc\">SimpleTOC</a></li><li>\n<a  href=\"#luckywp-table-of-contents\">LuckyWP Table of Contents</a></li><li>\n<a  href=\"#gutentoc\">GutenTOC</a></li></ul>\n</li><li>\n<a  href=\"#option-2-wait-for-a-table-of-contents-feature-to-be-baked-into-core-wordpress\">Option 2: Wait for a Table of Contents feature to be baked into Core WordPress</a></li><li>\n<a  href=\"#option-3-use-a-table-of-contents-block-thats-a-subfeature-of-another-wordpress-plugin\">Option 3: Use a Table of Contents Block that’s a sub-feature of another WordPress plugin</a>\n\t\t<ul><li>\n<a  href=\"#yoast-seo-premium\">Yoast SEO Premium</a></li><li>\n<a  href=\"#ultimate-addons-for-gutenberg\">Ultimate Addons for Gutenberg</a></li></ul>\n</li><li>\n<a  href=\"#option-4-roll-your-own-diy-table-of-contents-block\">Option 4: Roll your own DIY Table of Contents Block</a></li><li>\n<a  href=\"#favorite\">Favorite?</a></li></ul>\n\n<h3 id=\"what-to-look-for-in-a-wordpress-table-of-contents-block\">What to look for in a WordPress Table of Contents Block</h3>\n\n\n<p>Here are some things to look for and think about when choosing a table of contents block:</p>\n\n\n\n<ul><li><strong>Customizable header</strong> — Many options chuck a &#8220;Table of Contents&#8221; header above the actual Table of Contents, which makes sense. Can you turn it off or customize it? What level header is it? Having the ability to disable the heading might be necessary for layout, and having a choice of heading levels can help ensure proper HTML semantics.</li><li><strong>Collapsible</strong> — In the spirit of making the Table of Contents less annoying, many offer a feature to toggle the Table of Contents block between open and closed states. Do you want that? Are you OK with the fact it likely requires some JavaScript to work? Is it doing toggling accessibly? Can it default to the state that you want?</li><li><strong>Choose which headings to include</strong> — Perhaps you only want all the <code>&lt;h2&gt;</code> elements to form the Table of Contents. Can you do that? Do sub-headers create a &#8220;nested&#8217; list? Do you want that? Can you turn off certain levels of headers? Can you tell the block to only include <code>&lt;h2&gt;</code> through <code>&lt;h4&gt;</code>? Are there things other than headers you want to be part of the Table of Contents?</li><li><strong>Editable links</strong> — Many Table of Contents plugins in WordPress typically grab all the headings verbatim. Maybe you want to shorten, lengthen, or otherwise change a specific link in the Table of Contents; as in, not have it be the exact text of the header it links to. Can you do that?</li><li><strong>Include additional links</strong> — Perhaps you want to link to something that isn&#8217;t a content heading. Perhaps it&#8217;s added to the template with a <a href=\"https://css-tricks.com/use-custom-fields-in-wordpress/\">WordPress custom field</a>, or it&#8217;s part of the overall template like the comments section. Can you add (or remove) those as headings in the block?</li><li><strong>Block Editor support</strong> — That&#8217;s kind of the point of this blog post. I didn&#8217;t include many options that don&#8217;t have a block. But surely there are old school versions of this that are <code>[shortcode]</code>-based or that implement it some other way. I&#8217;m mostly concerned about blocks, although I could easily see a situation where your goal is to put the Table of Contents elsewhere in a template (sidebar, perhaps?). So, having multiple options and modularity could be useful.</li><li><strong>Styling options</strong> — Personally, I like to bring my own styling (surprise!) and even <a href=\"https://css-tricks.com/taking-control-cssjs-wordpress-plugins-load/\">dequeue any stylesheets (or scripts)</a> that a plugin tries to bring along for the ride. But I can imagine more folks want the Table of Contents to look good and be able to aesthetically control it right from the editor. This means it’d be nice to have block options for colors, fonts, spacing, etc.</li><li><strong>Semantic markup</strong> — Might be worth a peek at the HTML that the Table of Contents block you choose generates to make if it&#8217;s sensible. I&#8217;ve seen plugins generate HTML lists that don&#8217;t actually <a href=\"https://css-tricks.com/video-screencasts/181-poking-at-html-lists/\">nest lists</a>, for example, but instead add classes to list items to make them <em>look</em> nested. No, thanks. I&#8217;m not sure there is an official HTML format that’s best for SEO, so sematic markup is about the best you can do.</li><li><strong>Heading IDs</strong> — In order for a linked Table of Contents to work, all the headers need to have IDs so there’s something to anchor to. I would think any plugin here that’s worth its salt would add them to headings <em>only in the case that they don&#8217;t already have one</em>, but you might wanna veryify that; otherwise, you run the risk of breaking existing links or perhaps even styling and functionality. Also think about what IDs are being generated. For example, I use the <a href=\"https://wordpress.org/plugins/add-anchor-links/\" rel=\"noopener\">Add Anchor Links plugin</a>, which adds a link (&#x1f517;) icon beside all headings to offer access to the IDs. The IDs it generates were idential to the Table of Contents-generated IDs, causing a duplicate ID problem. Fixable, but just be aware of things like that.</li></ul>\n\n\n<h3 id=\"option-1-use-a-dedicated-table-of-contents-plugin\">Option 1: Use a Dedicated Table of Contents Plugin</h3>\n\n\n<p>A dedicated Table of Contents plugin is a plugin that focuses on nothing but a Table of Contents. Nothing else. Here are some solid options where that’s the case.</p>\n\n\n<h4 id=\"heroic-table-of-contents\"><a href=\"https://wordpress.org/plugins/heroic-table-of-contents/\" rel=\"noopener\">Heroic Table of Contents</a></h4>\n\n\n<p>The ability to edit/add/remove headers from the table of contents — even after it&#8217;s been automatically generated — is pretty powerful and unique to this plugin. It allows you to open and close it (optionally) as well, which is nice as a goal for these, as they should make the links useful rather than content that gets in the way. But beware that this puts you in the territory of enqueuing additional scripts as well as styles which may or may not be ideal or something you’re comfortable doing.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2616\" height=\"2774\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=2616%2C2774&#038;ssl=1\" alt=\"Screenshot of Heroic Table of Contents Block in WordPress\" class=\"wp-image-360973\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?w=2616&amp;ssl=1 2616w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=283%2C300&amp;ssl=1 283w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=966%2C1024&amp;ssl=1 966w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=768%2C814&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=1449%2C1536&amp;ssl=1 1449w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=1931%2C2048&amp;ssl=1 1931w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?resize=1000%2C1060&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/heroic-table-of-contents.png?w=2000&amp;ssl=1 2000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>(<a href=\"https://www.lireo.com/heroic-table-of-contents-plugin/\" rel=\"noopener\">Recommended by Deborah Edwards-Onoro</a>)</figcaption></figure>\n\n\n<h4 id=\"easy-table-of-contents\"><a href=\"https://wordpress.org/plugins/easy-table-of-contents/\" rel=\"noopener\">Easy Table of Contents</a></h4>\n\n\n<p class=\"is-style-explanation\">This is <em>not</em> a Block Editor block! Instead, it only automatically inserts itself, either by content type or through an opt-in checkbox in a metabox.</p>\n\n\n\n<p>I find it a little awkward that you can&#8217;t control where the Table of Contents goes with this plugin. Looks like it inserts itself near the top of posts, likely right after where the <code>&lt;!-- more --&gt;</code> is located.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2624\" height=\"2930\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=2624%2C2930&#038;ssl=1\" alt=\"Screenshot of Easy Table of Contents Block in WordPress\" class=\"wp-image-360976\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?w=2624&amp;ssl=1 2624w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=269%2C300&amp;ssl=1 269w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=917%2C1024&amp;ssl=1 917w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=768%2C858&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=1376%2C1536&amp;ssl=1 1376w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=1834%2C2048&amp;ssl=1 1834w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?resize=1000%2C1117&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/easy-toc.png?w=2000&amp;ssl=1 2000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h4 id=\"simpletoc\"><a href=\"https://wordpress.org/plugins/simpletoc/\" rel=\"noopener\">SimpleTOC</a></h4>\n\n\n<p class=\"is-style-explanation\">This is my favorite one.</p>\n\n\n\n<p>I like this one because it doesn&#8217;t add any scripts or styles by default. It just makes a semantic HTML list out of the headers, links them up, and that&#8217;s it. That&#8217;s how I like to roll. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"966\" height=\"1024\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=966%2C1024&#038;ssl=1\" alt=\"Screenshot of SimpleTOC Table of Contents Block in WordPress\" class=\"wp-image-360975\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=966%2C1024&amp;ssl=1 966w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=283%2C300&amp;ssl=1 283w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=768%2C814&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=1449%2C1536&amp;ssl=1 1449w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=1931%2C2048&amp;ssl=1 1931w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?resize=1000%2C1060&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/simple-toc.png?w=2000&amp;ssl=1 2000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h4 id=\"luckywp-table-of-contents\"><a href=\"https://wordpress.org/plugins/luckywp-table-of-contents/\" rel=\"noopener\">LuckyWP Table of Contents</a></h4>\n\n\n<p>Lots of features, but I find it a bit awkward how it doesn’t have regular block controls. Instead, you get this entirely custom UI for changing the settings — and you can&#8217;t preview what it looks like in the block itself. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2718\" height=\"2430\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=2718%2C2430&#038;ssl=1\" alt=\"Screenshot of LuckyWP Table of Contents Block in WordPress\" class=\"wp-image-360977\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?w=2718&amp;ssl=1 2718w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=300%2C268&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=1024%2C915&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=768%2C687&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=1536%2C1373&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=2048%2C1831&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/luckywp-toc.png?resize=1000%2C894&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h4 id=\"gutentoc\"><a href=\"https://wordpress.org/plugins/gutentoc-advance-table-of-content/\" rel=\"noopener\">GutenTOC</a></h4>\n\n\n<p>Feels like this Table of Contents plugin embraces the spirit of the WordPress Block Editor quite well, but I find the settings a little awkward. The choices it offers don&#8217;t feel terrifically useful (like square bullets for the list? &#8220;15&#8221; space left?).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2718\" height=\"2430\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=2718%2C2430&#038;ssl=1\" alt=\"Screenshot of the GutenTOC Table of Contents plugin in WordPress.\" class=\"wp-image-360978\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?w=2718&amp;ssl=1 2718w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=300%2C268&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=1024%2C915&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=768%2C687&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=1536%2C1373&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=2048%2C1831&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/guten-toc.png?resize=1000%2C894&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"option-2-wait-for-a-table-of-contents-feature-to-be-baked-into-core-wordpress\">Option 2: Wait for a Table of Contents feature to be baked into Core WordPress</h3>\n\n\n<p>As I write, there is <a href=\"https://github.com/WordPress/gutenberg/pull/29739\" rel=\"noopener\">an open pull request</a> to enable a Table of Contents block in the Gutenberg plugin. Presumably, should that go well, it ultimately makes its way to core. That would be great if you ask me, but it doesn&#8217;t help solve the problem of needing a Table of Contents block right this second.</p>\n\n\n\n<p>If this feature does drop, I&#8217;d lean heavily toward using it. Hopefully, I can do a search or query to find existing Table of Contents blocks on all posts, switch them over to use the native block, and remove whatever plugin I have in place. </p>\n\n\n<h3 id=\"option-3-use-a-table-of-contents-block-thats-a-subfeature-of-another-wordpress-plugin\">Option 3: Use a Table of Contents Block that’s a sub-feature of another WordPress plugin</h3>\n\n\n<p>I would recommend against using a plugin that does a whole slew of things just because you want to use some small part of it. But hey, if it turns out you could use <em>lots</em> of things from the big plugin, it could be a bonus as far as managing fewer plugins overall.</p>\n\n\n<h4 id=\"yoast-seo-premium\"><a href=\"https://yoast.com/wordpress/plugins/seo/\" rel=\"noopener\">Yoast SEO Premium</a></h4>\n\n\n<p>The free version of the <a href=\"https://wordpress.org/plugins/wordpress-seo/\" rel=\"noopener\">Yoast SEO plugin</a> doesn&#8217;t have it, but for only $99 per year, the <a href=\"https://yoast.com/wordpress/plugins/seo/\" rel=\"noopener\">Yoast SEO Premium plugin</a> does. It has almost no features at all. You just add it as a block, and it pops in. You can edit the title or remove it — it&#8217;s almost like a &#8220;sub block.&#8221;</p>\n\n\n\n<p>The list of links isn&#8217;t editable, but it does update in real-time as you change headings in the content, which is something most of the others I tested didn&#8217;t do. Super basic, no styling or features, but I kinda like that. I wouldn&#8217;t run Yoast for this one feature, especially for a paid premium, but if you&#8217;re using Yoast anyway (for the long haul), then you might as well go this route.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2174\" height=\"1816\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=2174%2C1816&#038;ssl=1\" alt=\"Screenshot of the Yoast SEO plugin’s table of contents block in WordPress.\" class=\"wp-image-361148\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?w=2174&amp;ssl=1 2174w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=300%2C251&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=1024%2C855&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=768%2C642&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=1536%2C1283&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=2048%2C1711&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.45.18-PM.png?resize=1000%2C835&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h4 id=\"ultimate-addons-for-gutenberg\"><a href=\"https://ultimategutenberg.com/\" rel=\"noopener\">Ultimate Addons for Gutenberg</a></h4>\n\n\n<p>This one is probably the classiest Table of Contents block I&#8217;ve come across. Again, I’m weary of using an all-in-one plugin for one specific feature, but the other features that are baked into this plugin are things you can use, then it’s a solid option.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"3340\" height=\"3086\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=3340%2C3086&#038;ssl=1\" alt=\"Screenshot of the Ultimate Addons for Gutenberg Tablew of Contents plugin in WordPress.\" class=\"wp-image-361149\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?w=3340&amp;ssl=1 3340w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=300%2C277&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=1024%2C946&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=768%2C710&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=1536%2C1419&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=2048%2C1892&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?resize=1000%2C924&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-11-at-3.49.26-PM.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"option-4-roll-your-own-diy-table-of-contents-block\">Option 4: Roll your own DIY Table of Contents Block</h3>\n\n\n<p>Making blocks yourself isn&#8217;t out of the question! I&#8217;ve done it a few times with <a href=\"https://github.com/ahmadawais/create-guten-block\" rel=\"noopener\">create-guten-block</a>, though I&#8217;d probably reach for <a href=\"https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block/\" rel=\"noopener\">@wordpress/create-block</a> these days. This puts you in JavaScript-land, so you&#8217;ll be parsing the content of the post with JavaScript, finding headings in the post content, and building things out from there. Kind of intermediate-to-advanced territory, I&#8217;d say. On one hand, it&#8217;s extra technical debt, and on the other, at least you have complete control since it&#8217;s your own code. </p>\n\n\n\n<p>Since we&#8217;re focusing on building blocks, <a href=\"https://www.advancedcustomfields.com/resources/blocks/\" rel=\"noopener\">Advanced Custom Fields has a very powerful way of building custom blocks</a> that brings that power back to PHP-land. That way, if you&#8217;re only concerned with building a Table of Contents from other heading blocks, the code gets a lot easier.</p>\n\n\n\n<p>Bill Erickson has a post — <a href=\"https://www.billerickson.net/access-gutenberg-block-data/\" rel=\"noopener\">“Access block data with PHP using <code>parse_blocks()</code> and <code>render_block()</code></a> — that ultimately gets into literally building a Table of Contents block. <a href=\"https://gist.github.com/billerickson/c451a7b2ef0c8ee4e48b7c17f536f39b\" rel=\"noopener\">This gist</a> he provides is a pretty useful reference for how to loop through blocks on a post and produce an HTML list.</p>\n\n\n<h3 id=\"favorite\">Favorite?</h3>\n\n\n<p>If I was using Yoast SEO Premium on a site, I&#8217;d just use that one. If not, I&#8217;d go for <a href=\"https://wordpress.org/plugins/simpletoc/\" rel=\"noopener\">SimpleTOC</a>. That&#8217;s what we&#8217;ve done here on CSS-Tricks. Once the core feature drops (&#x1f91e;), I&#8217;d make a rainy day project of moving all posts that currently use the Table of Contents plugin over to using the core WordPress block (assuming it turns out nice).</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/table-of-contents-block-in-wordpress/\">4 Quality Options for a Table of Contents Block in WordPress</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Offering a table of contents block in WordPress for blog posts (or really any other type of long-ish written content) is a good idea for two reasons:\n\n\n\nIt helps users jump around in the post for what they need (and hopefully doesn’t get in the way).It’s provides SEO value.\n\n\n\n\n\n\n\nThe RankMath SEO plugin factors it in as part of your page score (suggesting you should have one), because of that second point. See what Google likely gives you if you do it right:\n\n\n\n\n\n\n\nIt makes sense that other WordPress SEO Plugins like Yoast offer a table of contents block as a baked-in additional feature of the plugin. If you’re committed to using Yoast, then I think it’s fine to just use that. But I admit it’s not my favorite to feel locked to a plugin because it offers a microfeature that you then depend on. \n\n\n\nSo what are the options?\n\n\nTable of Contents\n\nWhat to look for in a WordPress Table of Contents Block\nOption 1: Use a Dedicated Table of Contents Plugin\n\t\t\nHeroic Table of Contents\nEasy Table of Contents\nSimpleTOC\nLuckyWP Table of Contents\nGutenTOC\n\nOption 2: Wait for a Table of Contents feature to be baked into Core WordPress\nOption 3: Use a Table of Contents Block that’s a sub-feature of another WordPress plugin\n\t\t\nYoast SEO Premium\nUltimate Addons for Gutenberg\n\nOption 4: Roll your own DIY Table of Contents Block\nFavorite?\n\nWhat to look for in a WordPress Table of Contents Block\n\n\nHere are some things to look for and think about when choosing a table of contents block:\n\n\n\nCustomizable header — Many options chuck a “Table of Contents” header above the actual Table of Contents, which makes sense. Can you turn it off or customize it? What level header is it? Having the ability to disable the heading might be necessary for layout, and having a choice of heading levels can help ensure proper HTML semantics.Collapsible — In the spirit of making the Table of Contents less annoying, many offer a feature to toggle the Table of Contents block between open and closed states. Do you want that? Are you OK with the fact it likely requires some JavaScript to work? Is it doing toggling accessibly? Can it default to the state that you want?Choose which headings to include — Perhaps you only want all the <h2> elements to form the Table of Contents. Can you do that? Do sub-headers create a “nested’ list? Do you want that? Can you turn off certain levels of headers? Can you tell the block to only include <h2> through <h4>? Are there things other than headers you want to be part of the Table of Contents?Editable links — Many Table of Contents plugins in WordPress typically grab all the headings verbatim. Maybe you want to shorten, lengthen, or otherwise change a specific link in the Table of Contents; as in, not have it be the exact text of the header it links to. Can you do that?Include additional links — Perhaps you want to link to something that isn’t a content heading. Perhaps it’s added to the template with a WordPress custom field, or it’s part of the overall template like the comments section. Can you add (or remove) those as headings in the block?Block Editor support — That’s kind of the point of this blog post. I didn’t include many options that don’t have a block. But surely there are old school versions of this that are [shortcode]-based or that implement it some other way. I’m mostly concerned about blocks, although I could easily see a situation where your goal is to put the Table of Contents elsewhere in a template (sidebar, perhaps?). So, having multiple options and modularity could be useful.Styling options — Personally, I like to bring my own styling (surprise!) and even dequeue any stylesheets (or scripts) that a plugin tries to bring along for the ride. But I can imagine more folks want the Table of Contents to look good and be able to aesthetically control it right from the editor. This means it’d be nice to have block options for colors, fonts, spacing, etc.Semantic markup — Might be worth a peek at the HTML that the Table of Contents block you choose generates to make if it’s sensible. I’ve seen plugins generate HTML lists that don’t actually nest lists, for example, but instead add classes to list items to make them look nested. No, thanks. I’m not sure there is an official HTML format that’s best for SEO, so sematic markup is about the best you can do.Heading IDs — In order for a linked Table of Contents to work, all the headers need to have IDs so there’s something to anchor to. I would think any plugin here that’s worth its salt would add them to headings only in the case that they don’t already have one, but you might wanna veryify that; otherwise, you run the risk of breaking existing links or perhaps even styling and functionality. Also think about what IDs are being generated. For example, I use the Add Anchor Links plugin, which adds a link (🔗) icon beside all headings to offer access to the IDs. The IDs it generates were idential to the Table of Contents-generated IDs, causing a duplicate ID problem. Fixable, but just be aware of things like that.\n\n\nOption 1: Use a Dedicated Table of Contents Plugin\n\n\nA dedicated Table of Contents plugin is a plugin that focuses on nothing but a Table of Contents. Nothing else. Here are some solid options where that’s the case.\n\n\nHeroic Table of Contents\n\n\nThe ability to edit/add/remove headers from the table of contents — even after it’s been automatically generated — is pretty powerful and unique to this plugin. It allows you to open and close it (optionally) as well, which is nice as a goal for these, as they should make the links useful rather than content that gets in the way. But beware that this puts you in the territory of enqueuing additional scripts as well as styles which may or may not be ideal or something you’re comfortable doing.\n\n\n\n(Recommended by Deborah Edwards-Onoro)\n\n\nEasy Table of Contents\n\n\nThis is not a Block Editor block! Instead, it only automatically inserts itself, either by content type or through an opt-in checkbox in a metabox.\n\n\n\nI find it a little awkward that you can’t control where the Table of Contents goes with this plugin. Looks like it inserts itself near the top of posts, likely right after where the <!-- more --> is located.\n\n\n\n\n\n\nSimpleTOC\n\n\nThis is my favorite one.\n\n\n\nI like this one because it doesn’t add any scripts or styles by default. It just makes a semantic HTML list out of the headers, links them up, and that’s it. That’s how I like to roll. \n\n\n\n\n\n\nLuckyWP Table of Contents\n\n\nLots of features, but I find it a bit awkward how it doesn’t have regular block controls. Instead, you get this entirely custom UI for changing the settings — and you can’t preview what it looks like in the block itself. \n\n\n\n\n\n\nGutenTOC\n\n\nFeels like this Table of Contents plugin embraces the spirit of the WordPress Block Editor quite well, but I find the settings a little awkward. The choices it offers don’t feel terrifically useful (like square bullets for the list? “15” space left?).\n\n\n\n\n\n\nOption 2: Wait for a Table of Contents feature to be baked into Core WordPress\n\n\nAs I write, there is an open pull request to enable a Table of Contents block in the Gutenberg plugin. Presumably, should that go well, it ultimately makes its way to core. That would be great if you ask me, but it doesn’t help solve the problem of needing a Table of Contents block right this second.\n\n\n\nIf this feature does drop, I’d lean heavily toward using it. Hopefully, I can do a search or query to find existing Table of Contents blocks on all posts, switch them over to use the native block, and remove whatever plugin I have in place. \n\n\nOption 3: Use a Table of Contents Block that’s a sub-feature of another WordPress plugin\n\n\nI would recommend against using a plugin that does a whole slew of things just because you want to use some small part of it. But hey, if it turns out you could use lots of things from the big plugin, it could be a bonus as far as managing fewer plugins overall.\n\n\nYoast SEO Premium\n\n\nThe free version of the Yoast SEO plugin doesn’t have it, but for only $99 per year, the Yoast SEO Premium plugin does. It has almost no features at all. You just add it as a block, and it pops in. You can edit the title or remove it — it’s almost like a “sub block.”\n\n\n\nThe list of links isn’t editable, but it does update in real-time as you change headings in the content, which is something most of the others I tested didn’t do. Super basic, no styling or features, but I kinda like that. I wouldn’t run Yoast for this one feature, especially for a paid premium, but if you’re using Yoast anyway (for the long haul), then you might as well go this route.\n\n\n\n\n\n\nUltimate Addons for Gutenberg\n\n\nThis one is probably the classiest Table of Contents block I’ve come across. Again, I’m weary of using an all-in-one plugin for one specific feature, but the other features that are baked into this plugin are things you can use, then it’s a solid option.\n\n\n\n\n\n\nOption 4: Roll your own DIY Table of Contents Block\n\n\nMaking blocks yourself isn’t out of the question! I’ve done it a few times with create-guten-block, though I’d probably reach for @wordpress/create-block these days. This puts you in JavaScript-land, so you’ll be parsing the content of the post with JavaScript, finding headings in the post content, and building things out from there. Kind of intermediate-to-advanced territory, I’d say. On one hand, it’s extra technical debt, and on the other, at least you have complete control since it’s your own code. \n\n\n\nSince we’re focusing on building blocks, Advanced Custom Fields has a very powerful way of building custom blocks that brings that power back to PHP-land. That way, if you’re only concerned with building a Table of Contents from other heading blocks, the code gets a lot easier.\n\n\n\nBill Erickson has a post — “Access block data with PHP using parse_blocks() and render_block() — that ultimately gets into literally building a Table of Contents block. This gist he provides is a pretty useful reference for how to loop through blocks on a post and produce an HTML list.\n\n\nFavorite?\n\n\nIf I was using Yoast SEO Premium on a site, I’d just use that one. If not, I’d go for SimpleTOC. That’s what we’ve done here on CSS-Tricks. Once the core feature drops (🤞), I’d make a rainy day project of moving all posts that currently use the Table of Contents plugin over to using the core WordPress block (assuming it turns out nice).\n\n4 Quality Options for a Table of Contents Block in WordPress originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-18T23:22:01.000Z",
      "date_modified": "2022-01-18T23:22:01.000Z",
      "_plugin": {
        "pageFilename": "decdd72c6ee996a512693e6f1a90d8478bc1a544eb7de35b3b4082e5f0b362d3.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361001",
      "url": "https://css-tricks.com/vitepwa-plugin-offline-service-worker/",
      "title": "Making a Site Work Offline Using the VitePWA Plugin",
      "summary": "The VitePWA plugin from Anthony Fu is a fantastic tool for your Vite-powered sites. It helps you add a service worker that handles:\n\noffline support\ncaching assets and content\nprompting the user when new content is available\n…and other goodies!\n\n…\n\nMaking a Site Work Offline Using the VitePWA Plugin originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p><a href=\"https://vite-plugin-pwa.netlify.app/\" rel=\"noopener\">The VitePWA plugin</a> from <a href=\"https://antfu.me\" rel=\"noopener\">Anthony Fu</a> is a fantastic tool for your Vite-powered sites. It helps you add a service worker that handles:</p>\n\n\n\n<ul><li>offline support</li><li>caching assets and content</li><li>prompting the user when new content is available</li><li>…and other goodies!</li></ul>\n\n\n\n<p>We’ll walk through the concept of service workers together, then jump right into making one with the VitePWA plugin.</p>\n\n\n\n<span id=\"more-361001\"></span>\n\n\n\n<p>New to Vite? Check out <a href=\"https://css-tricks.com/adding-vite-to-your-existing-web-app\">my prior post</a> for an introduction.</p>\n\n\n<h2 class=\"simpletoc-title\">Table of Contents</h2><ol class=\"simpletoc\">\n<li>\n<a  href=\"#service-workers-introduced\">Service workers, introduced</a></li><li>\n<a  href=\"#versioning-and-manifests\">Versioning and manifests</a></li><li>\n<a  href=\"#our-first-service-worker\">Our first service worker</a></li><li>\n<a  href=\"#what-about-offline-functionality\">What about offline functionality?</a></li><li>\n<a  href=\"#how-service-workers-update\">How service workers update</a></li><li>\n<a  href=\"#a-better-way-to-update-content\">A better way to update content</a></li><li>\n<a  href=\"#runtime-caching\">Runtime caching</a></li><li>\n<a  href=\"#adding-your-own-service-worker-content\">Adding your own service worker content</a></li><li>\n<a  href=\"#wrapping-up\">Wrapping up</a></li></ol>\n\n<h3 id=\"service-workers-introduced\">Service workers, introduced</h3>\n\n\n<p>Before getting into the VitePWA plugin, let’s briefly talk about the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\" rel=\"noopener\">Service Worker</a> itself.</p>\n\n\n\n<p>A <dfn>service worker</dfn> is a background process that runs on a separate thread in your web application. Service workers have the ability to intercept network requests and do… anything. The possibilities are surprisingly wide. For example, you could intercept requests for TypeScript files and compile them on the fly. Or you could intercept requests for video files and perform an advanced transcoding that the browser doesn’t currently support. More commonly though, a service worker is used to cache assets, both to improve a site’s performance and enable it to do <em>something</em> when it’s offline.</p>\n\n\n\n<p>When someone first lands on your site, the service worker the VitePWA plugin creates installs, and caches all of your HTML, CSS, and JavaScript files by leveraging the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Cache\" rel=\"noopener\">Cache Storage API</a>. The result is that, on subsequent visits to your site, the browser will load those resources from cache, rather than needing to make network requests. And even on the first visit to your site, since the service worker <em>just</em> pre-cached everything, the next place your user clicks will probably be pre-cached already, allowing the browser to completely bypass a network request.</p>\n\n\n<h3 id=\"versioning-and-manifests\">Versioning and manifests</h3>\n\n\n<p>You might be wondering what happens with a service worker when your code is updated. If your service worker is caching, say, a <code>foo.js</code> file, and you modify that file, you want the service worker to pull down the updated version, the next time a user visits the site.</p>\n\n\n\n<p>But in practice you don’t have a <code>foo.js</code> file. Usually, a build system will create something like <code>foo-ABC123.js</code>, where “ABC123” is a hash of the file. If you update <code>foo.js</code>, the next deployment of your site may send over <code>foo-XYZ987.js</code>. How does the service worker handle this?</p>\n\n\n\n<p>It turns out the Service Worker API is an <em>extremely</em> low-level primitive. If you’re looking for a native turnkey solution between it and the cache API, you’ll be disappointed. <strong>Basically, the creation of your service worker needs to be automated, in part, and connected to the build system.</strong> You’d need to see all the assets your build created, hard-code those file names into the service worker, have code to pre-cache them, and more importantly, <em>keep track of</em> the files that are cached.</p>\n\n\n\n<p>If code updates, the service worker file also changes, containing the <em>new</em> filenames, complete with hashes. When a user makes their next visit to the app, the new service worker will need to install, and compare the new file manifest with the manifest that’s currently in cache, ejecting files that are no longer needed, while caching the new content.</p>\n\n\n\n<p>This is an absurd amount of work and incredibly difficult to get right. While it can be a fun project, in practice you’ll want to use an established product to generate your service worker — and the best product around is <a href=\"https://developers.google.com/web/tools/workbox\" rel=\"noopener\">Workbox</a>, which is from the folks at Google.</p>\n\n\n\n<p>Even Workbox is a bit of a low-level primitive. It needs detailed information about the files you’re pre-caching, which are buried in your build tool. This is why we use the VitePWA plugin. It uses Workbox under the hood, and configures it with all the info it needs about the bundles that Vite creates. Unsurprisingly, there are also <a href=\"https://developers.google.com/web/tools/workbox/guides/generate-service-worker/webpack\" rel=\"noopener\">webpack</a> and <a href=\"https://www.npmjs.com/package/rollup-plugin-workbox\" rel=\"noopener\">Rollup</a> plugins if you happen to prefer working with those bundlers.</p>\n\n\n<h3 id=\"our-first-service-worker\">Our first service worker</h3>\n\n\n<p>I’ll assume you already have a Vite-based site. If not, feel free to <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">create one</a> from any of the <a href=\"https://vitejs.dev/guide/#community-templates\" rel=\"noopener\">available templates</a>.</p>\n\n\n\n<p>First, we install the VitePWA plugin:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm i vite-plugin-pwa</code></pre>\n\n\n\n<p>We’ll import the plugin in our Vite config:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { VitePWA } from \"vite-plugin-pwa\"</code></pre>\n\n\n\n<p>Then we put it to use in the config as well:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">plugins: [\n  VitePWA()</code></pre>\n\n\n\n<p>We’ll add more options in a bit, but that’s all we need to create a surprisingly useful service worker. Now let’s register it somewhere in the entry of our application with this code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { registerSW } from \"virtual:pwa-register\";\n\nif (\"serviceWorker\" in navigator) {\n  // &amp;&amp; !/localhost/.test(window.location)) {\n  registerSW();\n}</code></pre>\n\n\n\n<p>Don’t let the code that’s commented out throw you for a loop. It&#8217;s extremely important, in fact, as it prevents the service worker from running in development. We only want to install the service worker anywhere that’s not on the localhost where we’re developing, that is, unless we’re developing the service worker itself, in which case we can comment out that check (and revert before pushing code to the main branch).</p>\n\n\n\n<p>Let’s go ahead and open a fresh browser, launch DevTools, navigate to the Network tab, and run the web app. Everything should load as you’d normally expect. The difference is that you should see a whole slew of network requests in DevTools.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637565267503_image.png\" alt=\"A screenshot of DevTools listing all of the network requests for the currant app using the VitePWA plugin. There are a total of 16 various JavaScript and CSS files.\"/></figure>\n\n\n\n<p>That’s Workbox pre-caching the bundles. Things are working!</p>\n\n\n<h3 id=\"what-about-offline-functionality\">What about offline functionality?</h3>\n\n\n<p>So, our service worker is pre-caching all of our bundled assets. That means it will serve those assets from cache without even needing to hit the network. Does that mean our service worker could serve assets even when the user has no network access? Indeed, it does!</p>\n\n\n\n<p>And, believe it or not, it’s already done. Give it a try by opening the Network tab in DevTools and telling Chrome to simulate offline mode, like this.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637633418654_image.png\" alt=\"Screenshot of the DevTools UO to simulate an offline connection with the select menu open. The No throttling option is currently checked but the Offline option is highlighted in light blue.\"/><figcaption>The&nbsp;“No&nbsp;throttling” option is the default selection. Click that and select the&nbsp;“Offline”&nbsp;option to simulate an offline connection.</figcaption></figure>\n\n\n\n<p>Let’s refresh the page. You <em>should</em> see everything load. Of course, if you’re running any network requests, you’ll see them hang forever since you’re offline. Even here, though, there are things you can do. Modern browsers ship with their own internal, persistent database called IndexedDB. There’s nothing stopping you from writing your own code to sync some data to there, then write some custom service worker code to intercept network requests, determine if the user is offline, and then serve equivalent content from IndexedDB if it&#8217;s in there.</p>\n\n\n\n<p>But a much simpler option is to detect <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine\" rel=\"noopener\">if the user is offline</a>, show a message about being offline, and then bypass the data requests. This is a topic unto itself, which <a href=\"https://css-tricks.com/making-web-app-work-offline-part-2-implementation/\">I’ve written about</a> in much greater detail.</p>\n\n\n\n<p>Before showing you how to write, and integrate your own service worker content, let’s take a closer look at our existing service worker. In particular, let&#8217;s see how it manages updating/changing content. This is surprisingly tricky and easy to mess up, even with the VitePWA plugin.</p>\n\n\n\n<p>Before moving on, make sure you tell Chrome DevTools to put you back online.</p>\n\n\n<h3 id=\"how-service-workers-update\">How service workers update</h3>\n\n\n<p>Take a closer look at what happens to our site when we change the content. We’ll go ahead and remove our existing service worker, which we can do in the Application tab of DevTools, under Storage.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1154\" height=\"774\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634017139_image.png?resize=1154%2C774&#038;ssl=1\" alt=\"Screenshot showing the Storage panel of DevTools. The DevTools menu is a panel on the left and the app usage is displayed in a panel on the right, showing that 508 kilobytes of data total is used, where 392 kilobytes are cached and 16.4 are service workers. A button to clear site data is below the Usage stats with a deep blue label and a light gray background.\" class=\"wp-image-361008\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634017139_image.png?w=1154&amp;ssl=1 1154w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634017139_image.png?resize=300%2C201&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634017139_image.png?resize=1024%2C687&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634017139_image.png?resize=768%2C515&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634017139_image.png?resize=1000%2C671&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Click the “Clear site data” button to get a clean slate. While I’m at it, I’m going to remove most of the routes of my own site so there’s fewer resources, then let Vite rebuild the app.</p>\n\n\n\n<p>Look in the generated <code>sw.js</code> to see the generated Workbox service worker. There should be a pre-cache manifest inside of it. Mine looks like this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1336\" height=\"474\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634248783_image.png?resize=1336%2C474&#038;ssl=1\" alt=\"A dark mode screenshot showing a list of eight asset urls inside of a precacheAndRoute function.\" class=\"wp-image-361013\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634248783_image.png?w=1336&amp;ssl=1 1336w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634248783_image.png?resize=300%2C106&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634248783_image.png?resize=1024%2C363&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634248783_image.png?resize=768%2C272&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634248783_image.png?resize=1000%2C355&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p class=\"is-style-explanation\">If <code>sw.js</code> is minified, run it through Prettier to make it easier to read.</p>\n\n\n\n<p>Now let’s run the site and see what’s in our cache:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1962\" height=\"382\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?resize=1962%2C382&#038;ssl=1\" alt=\"\" class=\"wp-image-361015\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?w=1962&amp;ssl=1 1962w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?resize=300%2C58&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?resize=1024%2C199&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?resize=768%2C150&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?resize=1536%2C299&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637634292609_image.png?resize=1000%2C195&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Let’s focus on the <code>settings.js file</code>. Vite generated <code>assets/settings.ccb080c2.js</code> based on the hash of its contents. Workbox, being independent of Vite, generated <em>its own</em> hash of the same file. If that same file name were to be generated with different content, then a new service worker would be re-generated, with a different pre-cache manifest (same file, but different revision) and Workbox would know to cache the new version, and remove the old when it’s no longer needed.</p>\n\n\n\n<p>Again, the filenames will always be different since we’re using a bundler that injects hash codes into our file names, but Workbox supports dev environments which don’t do that.</p>\n\n\n\n<p class=\"is-style-explanation\">Since the time writing, the VitePWA plugin has been updated and no longer injects these revision hashes. If you’re attempting to follow along with the steps in this article, this specific step might be slightly different from your actual experience. See <a href=\"https://github.com/antfu/vite-plugin-pwa/issues/163\" rel=\"noopener\">this GitHub issue</a> for more context.</p>\n\n\n\n<p>If we update our <code>settings.js</code> file, then Vite will create a new file in our build, with a new hash code, which Workbox will treat as a new file. Let’s see this in action. After changing the file and re-running the Vite build, our pre-cache manifest looks like this:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635068016_image.png\" alt=\"\"/></figure>\n\n\n\n<p>Now, when we refresh the page, the prior service worker is <em>still</em> running and loading the <em>prior</em> file. Then, the <em>new</em> service worker, with the <em>new</em> pre-cache manifest is downloaded and pre-cached.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635183984_image.png\" alt=\"A DevTools screenshot showing a table of pre-cached assets processed by the VitePWA plugin and Workbox.\"/><figcaption>The new pre-cached manifest is displayed in the list of cached assets. Notice that both versions of our settings file are there (and both versions of a few other assets were affected as well): the old version, since that’s what’s still being run, and the new version, since the new service worker has pre-cached it.</figcaption></figure>\n\n\n\n<p>Note the corollary here: our old content is still being served to the user since the old service worker is still running. The user is unable to see the change we just made, even if they refresh because the service worker, by default, guarantees any and all tabs with this web app are running the <em>same</em> version. If you want the browser to show the updated version, close your tab (and any other tabs with the site), and re-open it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2220\" height=\"714\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=2220%2C714&#038;ssl=1\" alt=\"The same DevTools screenshot of pre-cached assets, but now only displaying new assets instead of duplicates.\" class=\"wp-image-361016\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?w=2220&amp;ssl=1 2220w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=300%2C96&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=1024%2C329&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=768%2C247&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=1536%2C494&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=2048%2C659&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637635407986_image.png?resize=1000%2C322&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The cache should now only contain the new assets.</figcaption></figure>\n\n\n\n<p>Workbox did all the legwork of making this all come out right! We did very little to get this going.</p>\n\n\n<h3 id=\"a-better-way-to-update-content\">A better way to update content</h3>\n\n\n<p>It’s unlikely that you can get away with serving stale content to your users until they happen to close all their browser tabs. Fortunately, the VitePWA plugin offers a better way. The <a href=\"https://vite-plugin-pwa.netlify.app/guide/auto-update.html\" rel=\"noopener\"><code>registerSW</code> function</a> accepts an object with an <code>onNeedRefresh</code> method. This method is called whenever there’s a new service worker waiting to take over. <code>registerSW</code> also returns a function that you can call to reload the page, activating the new service worker in the process.</p>\n\n\n\n<p>That’s a lot, so let’s see some code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">if (\"serviceWorker\" in navigator) {\n  // &amp;&amp; !/localhost/.test(window.location) &amp;&amp; !/lvh.me/.test(window.location)) {\n  const updateSW = registerSW({\n    onNeedRefresh() {\n      Toastify({\n        text: `&lt;h4 style='display: inline'>An update is available!&lt;/h4>\n               &lt;br>&lt;br>\n               &lt;a class='do-sw-update'>Click to update and reload&lt;/a>&nbsp;&nbsp;`,\n        escapeMarkup: false,\n        gravity: \"bottom\",\n        onClick() {\n          updateSW(true);\n        }\n      }).showToast();\n    }\n  });\n}</code></pre>\n\n\n\n<p>I’m using the <a href=\"https://www.npmjs.com/package/toastify-js\" rel=\"noopener\">toastify-js library</a> to show a toast UI component to let users know when a new version of the service worker is available and waiting. If the user clicks the toast, I call the function VitePWA gives me to reload the page, with the new service worker running.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"516\" height=\"198\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637636900295_image.png?resize=516%2C198&#038;ssl=1\" alt=\"A toast component screenshot with white text and a slight background gradient that goes from light blue on the left to bright blue on the right. It reads: an update is available! Click to update and reload.\" class=\"wp-image-361018\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637636900295_image.png?w=516&amp;ssl=1 516w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637636900295_image.png?resize=300%2C115&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Now when we have pending updates, a nice toast component pops up on the front end. Clicking it reloads the page with the new content in there.</figcaption></figure>\n\n\n\n<p>One thing to remember here is that, after you deploy the code to show the toast, the toast component won’t show up the next time you load your site. That’s because the old service worker (the one before we added the toast component) is still running. That requires manually closing all tabs and re-opening the web app for the new service worker to take over. Then, the <em>next</em> time you update some code, the service worker should show the toast, prompting you to update.</p>\n\n\n\n<p>Why doesn’t the service worker update when the page is refreshed? I mentioned earlier that refreshing the page does not update or activate the waiting service worker, so why does <em>this</em> work? Calling this method doesn’t only refresh the page, but it calls some low-level Service Worker APIs (in particular <code>skipWaiting</code>) as well, giving us the outcome we want.</p>\n\n\n<h3 id=\"runtime-caching\">Runtime caching</h3>\n\n\n<p>We’ve seen the bundle pre-caching we get for free with VitePWA for our build assets. What about caching any other content we might request at runtime? Workbox supports this via its <code>runtimeCaching</code> feature.</p>\n\n\n\n<p>Here’s how. The VitePWA plugin can take an object, one property of which is <code>workbox</code>, which takes Workbox properties.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const getCache = ({ name, pattern }: any) => ({\n  urlPattern: pattern,\n  handler: \"CacheFirst\" as const,\n  options: {\n    cacheName: name,\n    expiration: {\n      maxEntries: 500,\n      maxAgeSeconds: 60 * 60 * 24 * 365 * 2 // 2 years\n    },\n    cacheableResponse: {\n      statuses: [200]\n    }\n  }\n});\n// ...\n\n  plugins: [\n    VitePWA({\n      workbox: {\n        runtimeCaching: [\n          getCache({ \n            pattern: /^https:\\/\\/s3.amazonaws.com\\/my-library-cover-uploads/, \n            name: \"local-images1\" \n          }),\n          getCache({ \n            pattern: /^https:\\/\\/my-library-cover-uploads.s3.amazonaws.com/, \n            name: \"local-images2\" \n          })\n        ]\n      }\n    })\n  ],\n// ...</code></pre>\n\n\n\n<p>I know, that’s a lot of code. But all it’s really doing is telling Workbox to cache anything it sees matching those URL patterns. <a href=\"https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-build#.RuntimeCachingEntry\" rel=\"noopener\">The docs</a> provide much more info if you want to get deep into specifics.</p>\n\n\n\n<p>Now, after that update takes effect, we can see those resources being served by our service worker.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1578\" height=\"170\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?resize=1578%2C170&#038;ssl=1\" alt=\"DevTools screenshot showing the resources that are loaded by the browser. There are four jpeg images.\" class=\"wp-image-361021\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?w=1578&amp;ssl=1 1578w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?resize=300%2C32&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?resize=1024%2C110&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?resize=768%2C83&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?resize=1536%2C165&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637637974120_image.png?resize=1000%2C108&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>And we can see the corresponding cache that was created.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1702\" height=\"586\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?resize=1702%2C586&#038;ssl=1\" alt=\"DevTools screenshot showing the new cache instance that is stored in Cache Storage. It includes all of the cached images.\" class=\"wp-image-361023\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?w=1702&amp;ssl=1 1702w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?resize=300%2C103&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?resize=1024%2C353&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?resize=768%2C264&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?resize=1536%2C529&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_3C8A95FDBE22C735794597C555C00971224DE1D0D940961AF7164CACA28CF6E5_1637638053731_image.png?resize=1000%2C344&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"adding-your-own-service-worker-content\">Adding your own service worker content</h3>\n\n\n<p>Let’s say you want to get advanced with your service worker. You want to add some code to sync data with IndexedDB, add fetch handlers, and respond with IndexedDB data when the user is offline (again, <a href=\"https://css-tricks.com/making-web-app-work-offline-part-2-implementation/\">my prior post</a> walks through the ins and outs of IndexedDB). But how do you put your own code into the service worker that Vite creates for us?</p>\n\n\n\n<p>There’s another Workbox option we can use for this: <code>importScripts</code>.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">VitePWA({\n  workbox: {\n    importScripts: [\"sw-code.js\"],</code></pre>\n\n\n\n<p>Here, the service worker will request <code>sw-code.js</code> at runtime. In that case, make sure there’s an <code>sw-code.js</code> file that can be served by your application. The easiest way to achieve that is to put it in the <code>public</code> folder (see the <a href=\"https://vitejs.dev/config/#publicdir\" rel=\"noopener\">Vite docs</a> for detailed instructions).</p>\n\n\n\n<p>If this file starts to grow to a size such that you need to break things up with JavaScript imports, make sure you bundle it to prevent your service worker from trying to execute import statements (which it may or may not be able to do). You can create a separate Vite build instead.</p>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>At the end of 2021, CSS-Tricks asked a bunch of front-end folks what one thing someone cans do to make their website better. <a href=\"https://css-tricks.com/add-a-service-worker-to-your-site/\">Chris Ferdinandi suggested a service worker.</a> Well, that’s exactly what we accomplished in this article and it was relatively simple, wasn’t it? That’s thanks to the VitePWA with hat tips to Workbox and the Cache API.</p>\n\n\n\n<p>Service workers that leverage the Cache API are capable of greatly improving the perf of your web app. And while it might seem a little scary or confusing at first, it’s nice to know we have tools like the VitePWA plugin to simplify things a great deal. Install the plugin and let it do the heavy lifting. Sure, there are more advanced things that a service worker can do, and VitePWA can be used for more complex functionality, but an offline site is a fantastic starting point!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/vitepwa-plugin-offline-service-worker/\">Making a Site Work Offline Using the VitePWA Plugin</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "The VitePWA plugin from Anthony Fu is a fantastic tool for your Vite-powered sites. It helps you add a service worker that handles:\n\n\n\noffline supportcaching assets and contentprompting the user when new content is available…and other goodies!\n\n\n\nWe’ll walk through the concept of service workers together, then jump right into making one with the VitePWA plugin.\n\n\n\n\n\n\n\nNew to Vite? Check out my prior post for an introduction.\n\n\nTable of Contents\n\nService workers, introduced\nVersioning and manifests\nOur first service worker\nWhat about offline functionality?\nHow service workers update\nA better way to update content\nRuntime caching\nAdding your own service worker content\nWrapping up\n\nService workers, introduced\n\n\nBefore getting into the VitePWA plugin, let’s briefly talk about the Service Worker itself.\n\n\n\nA service worker is a background process that runs on a separate thread in your web application. Service workers have the ability to intercept network requests and do… anything. The possibilities are surprisingly wide. For example, you could intercept requests for TypeScript files and compile them on the fly. Or you could intercept requests for video files and perform an advanced transcoding that the browser doesn’t currently support. More commonly though, a service worker is used to cache assets, both to improve a site’s performance and enable it to do something when it’s offline.\n\n\n\nWhen someone first lands on your site, the service worker the VitePWA plugin creates installs, and caches all of your HTML, CSS, and JavaScript files by leveraging the Cache Storage API. The result is that, on subsequent visits to your site, the browser will load those resources from cache, rather than needing to make network requests. And even on the first visit to your site, since the service worker just pre-cached everything, the next place your user clicks will probably be pre-cached already, allowing the browser to completely bypass a network request.\n\n\nVersioning and manifests\n\n\nYou might be wondering what happens with a service worker when your code is updated. If your service worker is caching, say, a foo.js file, and you modify that file, you want the service worker to pull down the updated version, the next time a user visits the site.\n\n\n\nBut in practice you don’t have a foo.js file. Usually, a build system will create something like foo-ABC123.js, where “ABC123” is a hash of the file. If you update foo.js, the next deployment of your site may send over foo-XYZ987.js. How does the service worker handle this?\n\n\n\nIt turns out the Service Worker API is an extremely low-level primitive. If you’re looking for a native turnkey solution between it and the cache API, you’ll be disappointed. Basically, the creation of your service worker needs to be automated, in part, and connected to the build system. You’d need to see all the assets your build created, hard-code those file names into the service worker, have code to pre-cache them, and more importantly, keep track of the files that are cached.\n\n\n\nIf code updates, the service worker file also changes, containing the new filenames, complete with hashes. When a user makes their next visit to the app, the new service worker will need to install, and compare the new file manifest with the manifest that’s currently in cache, ejecting files that are no longer needed, while caching the new content.\n\n\n\nThis is an absurd amount of work and incredibly difficult to get right. While it can be a fun project, in practice you’ll want to use an established product to generate your service worker — and the best product around is Workbox, which is from the folks at Google.\n\n\n\nEven Workbox is a bit of a low-level primitive. It needs detailed information about the files you’re pre-caching, which are buried in your build tool. This is why we use the VitePWA plugin. It uses Workbox under the hood, and configures it with all the info it needs about the bundles that Vite creates. Unsurprisingly, there are also webpack and Rollup plugins if you happen to prefer working with those bundlers.\n\n\nOur first service worker\n\n\nI’ll assume you already have a Vite-based site. If not, feel free to create one from any of the available templates.\n\n\n\nFirst, we install the VitePWA plugin:\n\n\n\nnpm i vite-plugin-pwa\n\n\n\nWe’ll import the plugin in our Vite config:\n\n\n\nimport { VitePWA } from \"vite-plugin-pwa\"\n\n\n\nThen we put it to use in the config as well:\n\n\n\nplugins: [\n  VitePWA()\n\n\n\nWe’ll add more options in a bit, but that’s all we need to create a surprisingly useful service worker. Now let’s register it somewhere in the entry of our application with this code:\n\n\n\nimport { registerSW } from \"virtual:pwa-register\";\n\nif (\"serviceWorker\" in navigator) {\n  // && !/localhost/.test(window.location)) {\n  registerSW();\n}\n\n\n\nDon’t let the code that’s commented out throw you for a loop. It’s extremely important, in fact, as it prevents the service worker from running in development. We only want to install the service worker anywhere that’s not on the localhost where we’re developing, that is, unless we’re developing the service worker itself, in which case we can comment out that check (and revert before pushing code to the main branch).\n\n\n\nLet’s go ahead and open a fresh browser, launch DevTools, navigate to the Network tab, and run the web app. Everything should load as you’d normally expect. The difference is that you should see a whole slew of network requests in DevTools.\n\n\n\n\n\n\n\nThat’s Workbox pre-caching the bundles. Things are working!\n\n\nWhat about offline functionality?\n\n\nSo, our service worker is pre-caching all of our bundled assets. That means it will serve those assets from cache without even needing to hit the network. Does that mean our service worker could serve assets even when the user has no network access? Indeed, it does!\n\n\n\nAnd, believe it or not, it’s already done. Give it a try by opening the Network tab in DevTools and telling Chrome to simulate offline mode, like this.\n\n\n\nThe “No throttling” option is the default selection. Click that and select the “Offline” option to simulate an offline connection.\n\n\n\nLet’s refresh the page. You should see everything load. Of course, if you’re running any network requests, you’ll see them hang forever since you’re offline. Even here, though, there are things you can do. Modern browsers ship with their own internal, persistent database called IndexedDB. There’s nothing stopping you from writing your own code to sync some data to there, then write some custom service worker code to intercept network requests, determine if the user is offline, and then serve equivalent content from IndexedDB if it’s in there.\n\n\n\nBut a much simpler option is to detect if the user is offline, show a message about being offline, and then bypass the data requests. This is a topic unto itself, which I’ve written about in much greater detail.\n\n\n\nBefore showing you how to write, and integrate your own service worker content, let’s take a closer look at our existing service worker. In particular, let’s see how it manages updating/changing content. This is surprisingly tricky and easy to mess up, even with the VitePWA plugin.\n\n\n\nBefore moving on, make sure you tell Chrome DevTools to put you back online.\n\n\nHow service workers update\n\n\nTake a closer look at what happens to our site when we change the content. We’ll go ahead and remove our existing service worker, which we can do in the Application tab of DevTools, under Storage.\n\n\n\n\n\n\n\nClick the “Clear site data” button to get a clean slate. While I’m at it, I’m going to remove most of the routes of my own site so there’s fewer resources, then let Vite rebuild the app.\n\n\n\nLook in the generated sw.js to see the generated Workbox service worker. There should be a pre-cache manifest inside of it. Mine looks like this:\n\n\n\n\n\n\n\nIf sw.js is minified, run it through Prettier to make it easier to read.\n\n\n\nNow let’s run the site and see what’s in our cache:\n\n\n\n\n\n\n\nLet’s focus on the settings.js file. Vite generated assets/settings.ccb080c2.js based on the hash of its contents. Workbox, being independent of Vite, generated its own hash of the same file. If that same file name were to be generated with different content, then a new service worker would be re-generated, with a different pre-cache manifest (same file, but different revision) and Workbox would know to cache the new version, and remove the old when it’s no longer needed.\n\n\n\nAgain, the filenames will always be different since we’re using a bundler that injects hash codes into our file names, but Workbox supports dev environments which don’t do that.\n\n\n\nSince the time writing, the VitePWA plugin has been updated and no longer injects these revision hashes. If you’re attempting to follow along with the steps in this article, this specific step might be slightly different from your actual experience. See this GitHub issue for more context.\n\n\n\nIf we update our settings.js file, then Vite will create a new file in our build, with a new hash code, which Workbox will treat as a new file. Let’s see this in action. After changing the file and re-running the Vite build, our pre-cache manifest looks like this:\n\n\n\n\n\n\n\nNow, when we refresh the page, the prior service worker is still running and loading the prior file. Then, the new service worker, with the new pre-cache manifest is downloaded and pre-cached.\n\n\n\nThe new pre-cached manifest is displayed in the list of cached assets. Notice that both versions of our settings file are there (and both versions of a few other assets were affected as well): the old version, since that’s what’s still being run, and the new version, since the new service worker has pre-cached it.\n\n\n\nNote the corollary here: our old content is still being served to the user since the old service worker is still running. The user is unable to see the change we just made, even if they refresh because the service worker, by default, guarantees any and all tabs with this web app are running the same version. If you want the browser to show the updated version, close your tab (and any other tabs with the site), and re-open it.\n\n\n\nThe cache should now only contain the new assets.\n\n\n\nWorkbox did all the legwork of making this all come out right! We did very little to get this going.\n\n\nA better way to update content\n\n\nIt’s unlikely that you can get away with serving stale content to your users until they happen to close all their browser tabs. Fortunately, the VitePWA plugin offers a better way. The registerSW function accepts an object with an onNeedRefresh method. This method is called whenever there’s a new service worker waiting to take over. registerSW also returns a function that you can call to reload the page, activating the new service worker in the process.\n\n\n\nThat’s a lot, so let’s see some code:\n\n\n\nif (\"serviceWorker\" in navigator) {\n  // && !/localhost/.test(window.location) && !/lvh.me/.test(window.location)) {\n  const updateSW = registerSW({\n    onNeedRefresh() {\n      Toastify({\n        text: `<h4 style='display: inline'>An update is available!</h4>\n               <br><br>\n               <a class='do-sw-update'>Click to update and reload</a>  `,\n        escapeMarkup: false,\n        gravity: \"bottom\",\n        onClick() {\n          updateSW(true);\n        }\n      }).showToast();\n    }\n  });\n}\n\n\n\nI’m using the toastify-js library to show a toast UI component to let users know when a new version of the service worker is available and waiting. If the user clicks the toast, I call the function VitePWA gives me to reload the page, with the new service worker running.\n\n\n\nNow when we have pending updates, a nice toast component pops up on the front end. Clicking it reloads the page with the new content in there.\n\n\n\nOne thing to remember here is that, after you deploy the code to show the toast, the toast component won’t show up the next time you load your site. That’s because the old service worker (the one before we added the toast component) is still running. That requires manually closing all tabs and re-opening the web app for the new service worker to take over. Then, the next time you update some code, the service worker should show the toast, prompting you to update.\n\n\n\nWhy doesn’t the service worker update when the page is refreshed? I mentioned earlier that refreshing the page does not update or activate the waiting service worker, so why does this work? Calling this method doesn’t only refresh the page, but it calls some low-level Service Worker APIs (in particular skipWaiting) as well, giving us the outcome we want.\n\n\nRuntime caching\n\n\nWe’ve seen the bundle pre-caching we get for free with VitePWA for our build assets. What about caching any other content we might request at runtime? Workbox supports this via its runtimeCaching feature.\n\n\n\nHere’s how. The VitePWA plugin can take an object, one property of which is workbox, which takes Workbox properties.\n\n\n\nconst getCache = ({ name, pattern }: any) => ({\n  urlPattern: pattern,\n  handler: \"CacheFirst\" as const,\n  options: {\n    cacheName: name,\n    expiration: {\n      maxEntries: 500,\n      maxAgeSeconds: 60 * 60 * 24 * 365 * 2 // 2 years\n    },\n    cacheableResponse: {\n      statuses: [200]\n    }\n  }\n});\n// ...\n\n  plugins: [\n    VitePWA({\n      workbox: {\n        runtimeCaching: [\n          getCache({ \n            pattern: /^https:\\/\\/s3.amazonaws.com\\/my-library-cover-uploads/, \n            name: \"local-images1\" \n          }),\n          getCache({ \n            pattern: /^https:\\/\\/my-library-cover-uploads.s3.amazonaws.com/, \n            name: \"local-images2\" \n          })\n        ]\n      }\n    })\n  ],\n// ...\n\n\n\nI know, that’s a lot of code. But all it’s really doing is telling Workbox to cache anything it sees matching those URL patterns. The docs provide much more info if you want to get deep into specifics.\n\n\n\nNow, after that update takes effect, we can see those resources being served by our service worker.\n\n\n\n\n\n\n\nAnd we can see the corresponding cache that was created.\n\n\n\n\n\n\nAdding your own service worker content\n\n\nLet’s say you want to get advanced with your service worker. You want to add some code to sync data with IndexedDB, add fetch handlers, and respond with IndexedDB data when the user is offline (again, my prior post walks through the ins and outs of IndexedDB). But how do you put your own code into the service worker that Vite creates for us?\n\n\n\nThere’s another Workbox option we can use for this: importScripts.\n\n\n\nVitePWA({\n  workbox: {\n    importScripts: [\"sw-code.js\"],\n\n\n\nHere, the service worker will request sw-code.js at runtime. In that case, make sure there’s an sw-code.js file that can be served by your application. The easiest way to achieve that is to put it in the public folder (see the Vite docs for detailed instructions).\n\n\n\nIf this file starts to grow to a size such that you need to break things up with JavaScript imports, make sure you bundle it to prevent your service worker from trying to execute import statements (which it may or may not be able to do). You can create a separate Vite build instead.\n\n\nWrapping up\n\n\nAt the end of 2021, CSS-Tricks asked a bunch of front-end folks what one thing someone cans do to make their website better. Chris Ferdinandi suggested a service worker. Well, that’s exactly what we accomplished in this article and it was relatively simple, wasn’t it? That’s thanks to the VitePWA with hat tips to Workbox and the Cache API.\n\n\n\nService workers that leverage the Cache API are capable of greatly improving the perf of your web app. And while it might seem a little scary or confusing at first, it’s nice to know we have tools like the VitePWA plugin to simplify things a great deal. Install the plugin and let it do the heavy lifting. Sure, there are more advanced things that a service worker can do, and VitePWA can be used for more complex functionality, but an offline site is a fantastic starting point!\n\nMaking a Site Work Offline Using the VitePWA Plugin originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-18T14:30:26.000Z",
      "date_modified": "2022-01-18T14:30:26.000Z",
      "_plugin": {
        "pageFilename": "2184c29ab54b97c9fa9209db1947b04694d1c7e4247a7563fb1934a3d076f8eb.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361047",
      "url": "https://css-tricks.com/hottest-front-end-tools-in-2021/",
      "title": "What Were the Hottest Front-End Tools in 2021?",
      "summary": "Another year has passed and once again I’ve had the privilege of going through the Web Tools Weekly newsletter archives from the past 12 months to hunt down the front-end tools that readers found to be the most interesting during …\n\nWhat Were the Hottest Front-End Tools in 2021? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Another year has passed and once again I&#8217;ve had the privilege of going through the <a href=\"https://webtoolsweekly.com/\" rel=\"noopener\">Web Tools Weekly</a> newsletter archives from the past 12 months to hunt down the front-end tools that readers found to be the most interesting during 2021. So, to kick off 2022, I’ve compiled a list of the 60 most popular tools. I&#8217;m sure there are at least one or two listed here that you can start using in your front-end projects today.</p>\n\n\n\n<p>Some of these front-end tools are super-practical, while others probably only made this list due to curiosity (which I base on the number of unique clicks). And since many of the tools that make my year-end lists are pretty new, I think this is a good indicator of the kinds of front-end tools that will be popular in the coming year.</p>\n\n\n\n<p>Counting down from the top!</p>\n\n\n\n<span id=\"more-361047\"></span>\n\n\n\n<details >\n  <summary>\n          <h3>Table of contents</h3>\n      </summary>\n  \n<ul class=\"simpletoc\">\n<li>\n<a  href=\"#60-open-props\">60. Open Props</a></li><li>\n<a  href=\"#59-nextui\">59. NextUI</a></li><li>\n<a  href=\"#58-dopefolio\">58. Dopefolio</a></li><li>\n<a  href=\"#57-vizzu\">57. Vizzu</a></li><li>\n<a  href=\"#56-10015-tools\">56. 10015 Tools</a></li><li>\n<a  href=\"#55-snoweb\">55. Snoweb</a></li><li>\n<a  href=\"#54-tails\">54. Tails</a></li><li>\n<a  href=\"#53-maplibre\">53. MapLibre</a></li><li>\n<a  href=\"#52-svg-repo\">52. SVG Repo</a></li><li>\n<a  href=\"#51-animated-backgrounds\">51. Animated Backgrounds</a></li><li>\n<a  href=\"#50-picocss\">50. Pico.css</a></li><li>\n<a  href=\"#49-coding-fonts\">49. Coding Fonts</a></li><li>\n<a  href=\"#48-uineumorphism\">48. UI-Neumorphism</a></li><li>\n<a  href=\"#47-beautiful-css-buttons\">47. Beautiful CSS Buttons</a></li><li>\n<a  href=\"#46-shaper\">46. Shaper</a></li><li>\n<a  href=\"#45-prestige\">45. Prestige</a></li><li>\n<a  href=\"#44-htmlcafe\">44. HTML.cafe</a></li><li>\n<a  href=\"#43-chartscss\">43. Charts.css</a></li><li>\n<a  href=\"#42-buttons-generator\">42. Buttons Generator</a></li><li>\n<a  href=\"#41-doodad-pattern-generator\">41. Doodad Pattern Generator</a></li><li>\n<a  href=\"#40-kaboom\">40. Kaboom</a></li><li>\n<a  href=\"#39-skuawk\">39. Skuawk</a></li><li>\n<a  href=\"#38-glassmorphism-css-generator\">38. Glassmorphism CSS Generator</a></li><li>\n<a  href=\"#37-kalia\">37. Kalia</a></li><li>\n<a  href=\"#36-adminjs\">36. AdminJS</a></li><li>\n<a  href=\"#35-pancake\">35. Pancake</a></li><li>\n<a  href=\"#34-mosaic-lite\">34. Mosaic Lite</a></li><li>\n<a  href=\"#33-iconduck\">33. Iconduck</a></li><li>\n<a  href=\"#32-luxa-css\">32. Luxa CSS</a></li><li>\n<a  href=\"#31-glitter\">31. Glitter</a></li><li>\n<a  href=\"#30-components-ai\">30. Components AI</a></li><li>\n<a  href=\"#29-unicode-arrows\">29. Unicode Arrows</a></li><li>\n<a  href=\"#28-type-scale-clamp-generator\">28. Type Scale Clamp Generator</a></li><li>\n<a  href=\"#27-animxyz\">27. AnimXYZ</a></li><li>\n<a  href=\"#26-frontend-toolkit\">26. Frontend Toolkit</a></li><li>\n<a  href=\"#25-colorpalettesearth\">25. colorpalettes.earth</a></li><li>\n<a  href=\"#24-uncut\">24. Uncut</a></li><li>\n<a  href=\"#23-lowdefy\">23. Lowdefy</a></li><li>\n<a  href=\"#22-javascript-booster\">22. JavaScript Booster</a></li><li>\n<a  href=\"#21-layout-patterns\">21. Layout Patterns</a></li><li>\n<a  href=\"#20-baseline-background-remover\">20. Baseline Background Remover</a></li><li>\n<a  href=\"#19-theatrejs\">19. Theatre.js</a></li><li>\n<a  href=\"#18-transitioncss\">18. Transition.css</a></li><li>\n<a  href=\"#17-the-component-gallery\">17. The Component Gallery</a></li><li>\n<a  href=\"#16-partyjs\">16. party.js</a></li><li>\n<a  href=\"#15-headless-ui\">15. Headless UI</a></li><li>\n<a  href=\"#14-turbo\">14. Turbo</a></li><li>\n<a  href=\"#13-tidyjs\">13. tidy.js</a></li><li>\n<a  href=\"#12-tailkit\">12. Tail-Kit</a></li><li>\n<a  href=\"#11-tailwind-components\">11. Tailwind Components</a></li><li>\n<a  href=\"#10-pikaday\">10. Pikaday</a></li><li>\n<a  href=\"#9-html-boilerplates\">9. HTML Boilerplates</a></li><li>\n<a  href=\"#8-whirl\">8. Whirl</a></li><li>\n<a  href=\"#7-riju\">7. Riju</a></li><li>\n<a  href=\"#6-devui\">6. DevUI</a></li><li>\n<a  href=\"#5-pollen\">5. Pollen</a></li><li>\n<a  href=\"#4-alternight\">4. AlterNight</a></li><li>\n<a  href=\"#3-uisual\">3. UIsual</a></li><li>\n<a  href=\"#2-supabase-ui\">2. Supabase UI</a></li><li>\n<a  href=\"#1-css-layout-generator\">1. CSS Layout Generator</a></li><li>\n<a  href=\"#what-were-your-favorite-frontend-tools-of-2021\">What were your favorite front-end tools of 2021?</a></li></ul>\n\n</details>\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n<h3 id=\"60-open-props\">60. <a href=\"https://open-props.style/\" rel=\"noopener\">Open Props</a></h3>\n\n\n<p>Open Props provides a set of hand-crafted design tokens made up of CSS custom properties. I can see this sort of thing being much more common due to the use of this particular CSS feature. These allow you to drop in small collections of useful groups of custom properties, like animations.css, borders.css, fonts.css, zindex.css, etc, with more coming soon. Or you can just use the main Open Props file to grab everything at once.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://open-props.style/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"722\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275723-9262a6d7-206c-4147-94a6-1f8208b84086.png?resize=1024%2C722&#038;ssl=1\" alt=\"Screenshot of the Open Props homepage which outlines three things that make it a useful front-end tool, including design tokens, consistent components, and useful in any framework.\" class=\"wp-image-361050\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275723-9262a6d7-206c-4147-94a6-1f8208b84086.png?resize=1024%2C722&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275723-9262a6d7-206c-4147-94a6-1f8208b84086.png?resize=300%2C212&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275723-9262a6d7-206c-4147-94a6-1f8208b84086.png?resize=768%2C542&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275723-9262a6d7-206c-4147-94a6-1f8208b84086.png?resize=1000%2C705&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275723-9262a6d7-206c-4147-94a6-1f8208b84086.png?w=1219&amp;ssl=1 1219w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>This is definitely one front-end tool to keep an eye on and maybe even a good one to contribute to if you want to help build the library of tokens available.</p>\n\n\n<h3 id=\"59-nextui\">59. <a href=\"https://nextui.org/\" rel=\"noopener\">NextUI</a></h3>\n\n\n<p>A modern React library that uses Stitches, a popular CSS-in-JS solution, and includes light and dark UI components out-of-the-box along with a default color palette that might be good for quickly building landing pages or other content that&#8217;s not initially tied to any branding.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275839-aa891aab-ec09-4cc7-9ed5-fda6b639bda2.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361051\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275839-aa891aab-ec09-4cc7-9ed5-fda6b639bda2.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275839-aa891aab-ec09-4cc7-9ed5-fda6b639bda2.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275839-aa891aab-ec09-4cc7-9ed5-fda6b639bda2.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275839-aa891aab-ec09-4cc7-9ed5-fda6b639bda2.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275839-aa891aab-ec09-4cc7-9ed5-fda6b639bda2.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It&#8217;s currently listed as being in Alpha stage of development, so this is another one worth keeping tabs on in the coming year.</p>\n\n\n<h3 id=\"58-dopefolio\">58. <a href=\"https://github.com/rammcodes/Dopefolio\" rel=\"noopener\">Dopefolio</a></h3>\n\n\n<p>If you&#8217;re looking for an easy way to put together your own developer portfolio, Dopefolio is a quick solution that&#8217;s optimized for SEO and has strong Lighthouse scores out-of-the-box.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://github.com/rammcodes/Dopefolio\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275861-76311864-fd05-4692-b7af-802de5e8bd5d.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361052\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275861-76311864-fd05-4692-b7af-802de5e8bd5d.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275861-76311864-fd05-4692-b7af-802de5e8bd5d.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275861-76311864-fd05-4692-b7af-802de5e8bd5d.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275861-76311864-fd05-4692-b7af-802de5e8bd5d.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275861-76311864-fd05-4692-b7af-802de5e8bd5d.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p><a href=\"https://dopefolio-playground.netlify.app/\" rel=\"noopener\">The live demo</a> gives you an idea of what it looks like (responsive and all) and it includes a color picker component so you can live-test your own preferred primary color for the template.</p>\n\n\n<h3 id=\"57-vizzu\">57. <a href=\"https://vizzuhq.com/\" rel=\"noopener\">Vizzu</a></h3>\n\n\n<p>This is a unique one that made this year&#8217;s list of front-end tools. Vizzu an open-source JavaScript library for creating animated data stories and visualizations. Maybe this is popular due the apparent need for creating and embedding medical data nowadays.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://vizzuhq.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275910-c61968b6-1dbd-4baa-803e-aa1fa6313b7c.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361053\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275910-c61968b6-1dbd-4baa-803e-aa1fa6313b7c.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275910-c61968b6-1dbd-4baa-803e-aa1fa6313b7c.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275910-c61968b6-1dbd-4baa-803e-aa1fa6313b7c.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275910-c61968b6-1dbd-4baa-803e-aa1fa6313b7c.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275910-c61968b6-1dbd-4baa-803e-aa1fa6313b7c.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>This library allows you to easily build static data charts, animated charts, and data stories. You can see some <a href=\"https://lib.vizzuhq.com/0.3.0/#examples-1.1\" rel=\"noopener\">live examples of the animated charts</a> or <a href=\"https://lib.vizzuhq.com/0.3.0/#examples-1.2\" rel=\"noopener\">data stories</a>, which include a data story showing which guest character had the most lines throughout the run of the TV series <em>Friends</em>.</p>\n\n\n<h3 id=\"56-10015-tools\">56. <a href=\"https://10015.io/\" rel=\"noopener\">10015 Tools</a></h3>\n\n\n<p>I seem to find a handful of these types of front-end tools every year. 10015 Tools is a collection of front-end tools rather than one single tool. It includes text tools, image tools, CSS tools, coding tools (e.g. minifiers), color tools, social media tools, and a few others under a miscellaneous category.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://10015.io/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275957-19c19ec5-8cd7-4a1a-8e33-4834d02dbede.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361055\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275957-19c19ec5-8cd7-4a1a-8e33-4834d02dbede.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275957-19c19ec5-8cd7-4a1a-8e33-4834d02dbede.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275957-19c19ec5-8cd7-4a1a-8e33-4834d02dbede.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275957-19c19ec5-8cd7-4a1a-8e33-4834d02dbede.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275957-19c19ec5-8cd7-4a1a-8e33-4834d02dbede.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>This is definitely one of the more comprehensive all-in-one solutions I&#8217;ve seen, so I’m sure you’ll find a few useful front-end tools here you can come back to.</p>\n\n\n<h3 id=\"55-snoweb\">55. <a href=\"https://www.snoweb-svg.com/\" rel=\"noopener\">Snoweb</a></h3>\n\n\n<p>Icon sets are always popular and I come across at least a dozen new ones every year. This one includes optimized SVG icons, many of which have a built-in animated effect when you hover over the icon (like the <a href=\"https://www.snoweb-svg.com/en/svg/heroicons/envelope/basic/\" rel=\"noopener\">open/close envelope icon</a>).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.snoweb-svg.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275995-d746316e-e6e4-49cd-b31d-9dddda70f3ca.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361056\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275995-d746316e-e6e4-49cd-b31d-9dddda70f3ca.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275995-d746316e-e6e4-49cd-b31d-9dddda70f3ca.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275995-d746316e-e6e4-49cd-b31d-9dddda70f3ca.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275995-d746316e-e6e4-49cd-b31d-9dddda70f3ca.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275995-d746316e-e6e4-49cd-b31d-9dddda70f3ca.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Like many icon websites, you can search by keyword or filter by category, one of which is a &#8220;brand&#8221; category with icons for Twitter, Facebook, Vimeo, YouTube, Snapchat, etc.</p>\n\n\n<h3 id=\"54-tails\">54. <a href=\"https://devdojo.com/tails\" rel=\"noopener\">Tails</a></h3>\n\n\n<p>Here&#8217;s the first Tailwind-based tool to make the list; something that&#8217;s been a trend the past few years as <a href=\"https://css-tricks.com/2021-roundup-of-web-research/#aa-state-of-css-2021\">Tailwind continues to grow in popularity</a>. This front-end tool a drag-and-drop page builder for projects using Tailwind CSS.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://devdojo.com/tails\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276041-1fba78db-7d2b-4562-bc44-a28266e9e444.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361057\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276041-1fba78db-7d2b-4562-bc44-a28266e9e444.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276041-1fba78db-7d2b-4562-bc44-a28266e9e444.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276041-1fba78db-7d2b-4562-bc44-a28266e9e444.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276041-1fba78db-7d2b-4562-bc44-a28266e9e444.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276041-1fba78db-7d2b-4562-bc44-a28266e9e444.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It includes two free &#8220;blocks&#8221; for each of the 15 categories, so there&#8217;s a decent amount of free stuff here and you can unlock the rest for a monthly fee.</p>\n\n\n<h3 id=\"53-maplibre\">53. <a href=\"https://maplibre.org/\" rel=\"noopener\">MapLibre</a></h3>\n\n\n<p>This open-source mapping library launched in March and has grown in popularity throughout the year. It includes a JavaScript library as well as an SDK for displaying maps inside of iOS and Android apps.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://maplibre.org/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276087-2f8cc59e-ca9d-46b9-b12b-ac3bae80c72c.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361058\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276087-2f8cc59e-ca9d-46b9-b12b-ac3bae80c72c.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276087-2f8cc59e-ca9d-46b9-b12b-ac3bae80c72c.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276087-2f8cc59e-ca9d-46b9-b12b-ac3bae80c72c.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276087-2f8cc59e-ca9d-46b9-b12b-ac3bae80c72c.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276087-2f8cc59e-ca9d-46b9-b12b-ac3bae80c72c.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The docs include <a href=\"https://maplibre.org/maplibre-gl-js-docs/example/\" rel=\"noopener\">a bunch of examples that use JavaScript</a>, if you want to see what&#8217;s possible with the web-based front-end tools.</p>\n\n\n<h3 id=\"52-svg-repo\">52. <a href=\"https://www.svgrepo.com/\" rel=\"noopener\">SVG Repo</a></h3>\n\n\n<p>SVG Repo makes the list based on sheer numbers alone. It&#8217;s a repository of more than 300,000 free, optimized, SVG-based graphics and icons most of which are licensed for commercial use.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.svgrepo.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276146-6cdfbf25-a3ca-42e1-8499-35bf93e7fd46.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361059\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276146-6cdfbf25-a3ca-42e1-8499-35bf93e7fd46.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276146-6cdfbf25-a3ca-42e1-8499-35bf93e7fd46.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276146-6cdfbf25-a3ca-42e1-8499-35bf93e7fd46.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276146-6cdfbf25-a3ca-42e1-8499-35bf93e7fd46.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276146-6cdfbf25-a3ca-42e1-8499-35bf93e7fd46.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Each icon you select tells you what type of license it falls under. You can search by keyword and &#8220;save&#8221; icons to your favorites for later use (no login required).</p>\n\n\n<h3 id=\"51-animated-backgrounds\">51. <a href=\"https://animatedbackgrounds.me/\" rel=\"noopener\">Animated Backgrounds</a></h3>\n\n\n<p>This one made the top 60 this year but probably isn&#8217;t the most practical front-end tool of the bunch. Like I said at the outset, some stuff gets clicked on just out of sheer curiosity. It’s a gallery of animated backgrounds, sourced from various CodePen demos.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://animatedbackgrounds.me/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276182-b88342c8-fc8c-4812-bd54-5107b3fc4f6f.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361060\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276182-b88342c8-fc8c-4812-bd54-5107b3fc4f6f.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276182-b88342c8-fc8c-4812-bd54-5107b3fc4f6f.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276182-b88342c8-fc8c-4812-bd54-5107b3fc4f6f.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276182-b88342c8-fc8c-4812-bd54-5107b3fc4f6f.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276182-b88342c8-fc8c-4812-bd54-5107b3fc4f6f.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The gallery is useful in that it displays the backgrounds as pre-recorded videos so you don&#8217;t have to worry about all the demos loading and crashing your browser tab. Use these sparingly, if ever, as they often use heavy amounts of JavaScript and CSS.</p>\n\n\n<h3 id=\"50-picocss\">50. <a href=\"https://picocss.com/\" rel=\"noopener\">Pico.css</a></h3>\n\n\n<p>This is a different type of CSS framework compared to what&#8217;s popular nowadays. It’s kind of like an anti-Tailwind tool and more of a starter CSS file (like a <a href=\"https://css-tricks.com/reboot-resets-reasoning/\">reset</a>) than a full-fledged framework.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://picocss.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276209-087fde90-863b-49d8-aee5-1546e0ab4778.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361061\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276209-087fde90-863b-49d8-aee5-1546e0ab4778.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276209-087fde90-863b-49d8-aee5-1546e0ab4778.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276209-087fde90-863b-49d8-aee5-1546e0ab4778.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276209-087fde90-863b-49d8-aee5-1546e0ab4778.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276209-087fde90-863b-49d8-aee5-1546e0ab4778.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Pico.css provides elegant default styles on all native HTML elements (which you can <a href=\"https://picocss.com/examples/preview/\" rel=\"noopener\">preview here</a>) without the need to add swaths of classes to your markup — and the whole thing is less than 10kb minified and gzipped.</p>\n\n\n<h3 id=\"49-coding-fonts\">49. <a href=\"https://coding-fonts.css-tricks.com\">Coding Fonts</a></h3>\n\n\n<p>Coding fonts seem to be an exciting new trend of late, and CSS-Tricks has taken advantage of that with this little interactive info app.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://coding-fonts.css-tricks.com\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276241-3284c7c1-29e9-4b27-9351-c82e8ccac115.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361062\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276241-3284c7c1-29e9-4b27-9351-c82e8ccac115.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276241-3284c7c1-29e9-4b27-9351-c82e8ccac115.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276241-3284c7c1-29e9-4b27-9351-c82e8ccac115.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276241-3284c7c1-29e9-4b27-9351-c82e8ccac115.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276241-3284c7c1-29e9-4b27-9351-c82e8ccac115.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Select a font on the left to display example code, typeface info (ligatures, italics, etc.), cost (most are free), along with options to display example code for HTML, CSS, or JavaScript.</p>\n\n\n<h3 id=\"48-uineumorphism\">48. <a href=\"https://akaspanion.github.io/ui-neumorphism/\" rel=\"noopener\">UI-Neumorphism</a></h3>\n\n\n<p>This React library is based on the old skeumorphism trend that apparently went out of style a number of years ago. Is this trend making a comeback? Probably not. In fact, this React library is about two years old even though I shared it for the first time this past year.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://akaspanion.github.io/ui-neumorphism/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"742\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276267-f3a1721d-c579-417e-a11a-0cb1eae49b8f.png?resize=1024%2C742&#038;ssl=1\" alt=\"\" class=\"wp-image-361063\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276267-f3a1721d-c579-417e-a11a-0cb1eae49b8f.png?resize=1024%2C742&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276267-f3a1721d-c579-417e-a11a-0cb1eae49b8f.png?resize=300%2C217&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276267-f3a1721d-c579-417e-a11a-0cb1eae49b8f.png?resize=768%2C556&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276267-f3a1721d-c579-417e-a11a-0cb1eae49b8f.png?resize=1000%2C725&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276267-f3a1721d-c579-417e-a11a-0cb1eae49b8f.png?w=1187&amp;ssl=1 1187w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The library includes a slew of different components that all implement <a href=\"https://css-tricks.com/neumorphism-and-css/\">“neu</a><a href=\"https://css-tricks.com/neumorphism-and-css/\">morphism&#8221; look</a>. Interesting to look at, but might not fit many projects.</p>\n\n\n<h3 id=\"47-beautiful-css-buttons\">47. <a href=\"https://getcssscan.com/css-buttons-examples\" rel=\"noopener\">Beautiful CSS Buttons</a></h3>\n\n\n<p>Just about every app or website needs buttons, so a collection like this always seems to do well. Many of these are different from what you probably have seen elsewhere.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://getcssscan.com/css-buttons-examples\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"739\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276347-2601214b-9863-4730-83b2-0fecdd184f6d.png?resize=1024%2C739&#038;ssl=1\" alt=\"\" class=\"wp-image-361064\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276347-2601214b-9863-4730-83b2-0fecdd184f6d.png?resize=1024%2C739&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276347-2601214b-9863-4730-83b2-0fecdd184f6d.png?resize=300%2C216&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276347-2601214b-9863-4730-83b2-0fecdd184f6d.png?resize=768%2C554&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276347-2601214b-9863-4730-83b2-0fecdd184f6d.png?resize=1000%2C721&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276347-2601214b-9863-4730-83b2-0fecdd184f6d.png?w=1192&amp;ssl=1 1192w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>A lot of the buttons include interesting hover effects and you can easily copy and paste the HTML and CSS for any single button directly on the page.</p>\n\n\n<h3 id=\"46-shaper\">46. <a href=\"https://hihayk.github.io/shaper/\" rel=\"noopener\">Shaper</a></h3>\n\n\n<p>This interactive tool lets you fiddle with various UI settings live on the page to build different page elements. Once you&#8217;ve tweaked things as you like, you can grab the code, which uses CSS custom properties.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://hihayk.github.io/shaper/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"658\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276369-8ff7cde1-88b7-4043-8ec8-6efb2acd2e23.png?resize=1024%2C658&#038;ssl=1\" alt=\"\" class=\"wp-image-361065\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276369-8ff7cde1-88b7-4043-8ec8-6efb2acd2e23.png?resize=1024%2C658&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276369-8ff7cde1-88b7-4043-8ec8-6efb2acd2e23.png?resize=300%2C193&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276369-8ff7cde1-88b7-4043-8ec8-6efb2acd2e23.png?resize=768%2C494&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276369-8ff7cde1-88b7-4043-8ec8-6efb2acd2e23.png?resize=1000%2C643&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276369-8ff7cde1-88b7-4043-8ec8-6efb2acd2e23.png?w=1338&amp;ssl=1 1338w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>You can switch between demo view and &#8220;specs&#8221; view (i.e. the code along with other useful info). This tool has a particular focus on typography along with the rest of the UI styles, which is an important part of getting a layout looking right.</p>\n\n\n<h3 id=\"45-prestige\">45. <a href=\"https://prestigemad.com/\" rel=\"noopener\">Prestige</a></h3>\n\n\n<p>This is a text-based HTTP client in the browser — like <a href=\"https://www.postman.com\" rel=\"noopener\">Postman</a> but without an interface. It allows you to define requests in plain text, which you can optionally save as a Gist. It includes isolated cookie management, and has both dark and light modes.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://prestigemad.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"721\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276408-061870ca-5ff7-4111-bb1a-ea3e69ac3c54-1024x721.png?resize=1024%2C721&#038;ssl=1\" alt=\"\" class=\"wp-image-361066\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276408-061870ca-5ff7-4111-bb1a-ea3e69ac3c54.png?resize=1024%2C721&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276408-061870ca-5ff7-4111-bb1a-ea3e69ac3c54.png?resize=300%2C211&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276408-061870ca-5ff7-4111-bb1a-ea3e69ac3c54.png?resize=768%2C540&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276408-061870ca-5ff7-4111-bb1a-ea3e69ac3c54.png?resize=1000%2C704&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276408-061870ca-5ff7-4111-bb1a-ea3e69ac3c54.png?w=1222&amp;ssl=1 1222w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>As the author explains, &#8220;I built Prestige because I needed an app like this when working […] and playing with external APIs.&#8221;</p>\n\n\n<h3 id=\"44-htmlcafe\">44. <a href=\"https://html.cafe/\" rel=\"noopener\">HTML.cafe</a></h3>\n\n\n<p>This is probably the simplest tool in the entire list. HTML.cafe is more or less a poor-man&#8217;s <a href=\"https://codepen.io\" rel=\"noopener\">CodePen</a>, for lack of a better term. I wouldn&#8217;t think people would be interested in this sort of thing, since there are already powerful tools that already do what it does. Nonetheless, it’s a really simple HTML editor with live preview.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://html.cafe/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276439-413edd42-af51-4878-a743-7a8a63223548.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361067\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276439-413edd42-af51-4878-a743-7a8a63223548.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276439-413edd42-af51-4878-a743-7a8a63223548.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276439-413edd42-af51-4878-a743-7a8a63223548.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276439-413edd42-af51-4878-a743-7a8a63223548.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276439-413edd42-af51-4878-a743-7a8a63223548.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>There are no separate CSS or JavaScript windows like there are CodePen, but you can easily include those in <code>&lt;style&gt;</code> or <code>&lt;script&gt;</code> elements if you wish. I think the best use of this tool might be for teachers helping students who are completely unfamiliar with HTML, as this gets all the complexities out of the way.</p>\n\n\n<h3 id=\"43-chartscss\">43. <a href=\"https://chartscss.org/\" rel=\"noopener\">Charts.css</a></h3>\n\n\n<p>This front-end tool is sort of like a cross between Tailwind CSS and Chart.js. In short, Charts.css is a CSS framework that lets you use utility classes to build charts using HTML and CSS.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://chartscss.org/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276470-4364442e-6f00-4ea3-ac48-470b5d22b6b8.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361068\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276470-4364442e-6f00-4ea3-ac48-470b5d22b6b8.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276470-4364442e-6f00-4ea3-ac48-470b5d22b6b8.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276470-4364442e-6f00-4ea3-ac48-470b5d22b6b8.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276470-4364442e-6f00-4ea3-ac48-470b5d22b6b8.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276470-4364442e-6f00-4ea3-ac48-470b5d22b6b8.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>You can create bar charts, line charts, multi-dataset charts, percentage columns, and 3D bar charts. And best of all, the charts are accessible, responsive, and easy to customize to your branding needs.</p>\n\n\n<h3 id=\"42-buttons-generator\">42. <a href=\"https://markodenic.com/tools/buttons-generator/\" rel=\"noopener\">Buttons Generator</a></h3>\n\n\n<p>“Buttons Generator&#8221; is probably a bit of a misnomer, since the page doesn&#8217;t exactly let you &#8220;generate&#8221; buttons. Like the previous buttons resource, this is a gallery of buttons built with HTML and CSS.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://markodenic.com/tools/buttons-generator/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276495-8bbd73df-a0e9-4ce3-b558-971601e8e5d8.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361069\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276495-8bbd73df-a0e9-4ce3-b558-971601e8e5d8.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276495-8bbd73df-a0e9-4ce3-b558-971601e8e5d8.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276495-8bbd73df-a0e9-4ce3-b558-971601e8e5d8.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276495-8bbd73df-a0e9-4ce3-b558-971601e8e5d8.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276495-8bbd73df-a0e9-4ce3-b558-971601e8e5d8.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>They&#8217;re divided up by category, include some neat hover or click effects, and you can click any button to copy the code to your clipboard.</p>\n\n\n<h3 id=\"41-doodad-pattern-generator\">41. <a href=\"https://doodad.dev/pattern-generator/\" rel=\"noopener\">Doodad Pattern Generator</a></h3>\n\n\n<p>This interactive tool allows you to build your own patterned backgrounds that you can export in a variety of formats. You can use the &#8220;shuffle&#8221; button to generate a random pattern, or select from various category styles. You can also edit colors, filters, and various transforms.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://doodad.dev/pattern-generator/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276520-991a52ed-bd33-4b7c-90c7-ceda192b6ca2.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361070\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276520-991a52ed-bd33-4b7c-90c7-ceda192b6ca2.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276520-991a52ed-bd33-4b7c-90c7-ceda192b6ca2.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276520-991a52ed-bd33-4b7c-90c7-ceda192b6ca2.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276520-991a52ed-bd33-4b7c-90c7-ceda192b6ca2.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276520-991a52ed-bd33-4b7c-90c7-ceda192b6ca2.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The export dialog lets you save patterns and load previously-saved ones via Local Storage. Export your patterns as JPEG, PNG, inline SVG, SVG file, or CSS background.</p>\n\n\n<h3 id=\"40-kaboom\">40. <a href=\"https://kaboomjs.com/\" rel=\"noopener\">Kaboom</a></h3>\n\n\n<p>Every year I come across at least one or two new JavaScript game libraries, and this is the one that made this year&#8217;s list. It looks to have a fairly elegant and easy-to-use API and includes a healthy set of components, events, and other built-in functions.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://kaboomjs.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276549-20d08c6b-b2d5-46a3-be73-397d89ed0f63.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361071\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276549-20d08c6b-b2d5-46a3-be73-397d89ed0f63.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276549-20d08c6b-b2d5-46a3-be73-397d89ed0f63.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276549-20d08c6b-b2d5-46a3-be73-397d89ed0f63.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276549-20d08c6b-b2d5-46a3-be73-397d89ed0f63.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276549-20d08c6b-b2d5-46a3-be73-397d89ed0f63.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>There&#8217;s a handy <a href=\"https://kaboomjs.com/play?demo=add\" rel=\"noopener\">playground</a> to get your feet wet with using it and an <a href=\"https://kaboomjs.com/doc/intro\" rel=\"noopener\">introductory tutorial</a> to get started.</p>\n\n\n<h3 id=\"39-skuawk\">39. <a href=\"https://skuawk.com/\" rel=\"noopener\">Skuawk</a></h3>\n\n\n<p>If you want an alternative to Unsplash, which is likely one of your go-to sources for free stock images, this collection of beautiful public domain images might be a good option with some gorgeous photos.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://skuawk.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276585-f236224e-5db4-48dc-b78e-6f4184bcfb9e.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361072\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276585-f236224e-5db4-48dc-b78e-6f4184bcfb9e.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276585-f236224e-5db4-48dc-b78e-6f4184bcfb9e.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276585-f236224e-5db4-48dc-b78e-6f4184bcfb9e.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276585-f236224e-5db4-48dc-b78e-6f4184bcfb9e.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276585-f236224e-5db4-48dc-b78e-6f4184bcfb9e.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>There are 16 categories of images from various photographers that have all allowed their images to be used under a CC0 license (i.e. do whatever you want).</p>\n\n\n<h3 id=\"38-glassmorphism-css-generator\">38. <a href=\"https://ui.glass/generator/\" rel=\"noopener\">Glassmorphism CSS Generator</a></h3>\n\n\n<p>This is an online generator that lets you build a <a href=\"https://css-tricks.com/icon-glassmorphism-effect-in-css/\">&#8220;glassmorphism&#8221; effect</a> on a page element — kind of like frosted glass. This tool is apparently supposed to be part of a larger UI library that will incorporate this sort of effect on a number of different UI components.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://ui.glass/generator/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276611-a3ea2111-8de8-48ca-ae1b-882a1ea988ad.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361073\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276611-a3ea2111-8de8-48ca-ae1b-882a1ea988ad.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276611-a3ea2111-8de8-48ca-ae1b-882a1ea988ad.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276611-a3ea2111-8de8-48ca-ae1b-882a1ea988ad.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276611-a3ea2111-8de8-48ca-ae1b-882a1ea988ad.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276611-a3ea2111-8de8-48ca-ae1b-882a1ea988ad.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Whatever the case, I like this effect more than the &#8220;neumorphism&#8221; one and apparently my audience agrees.</p>\n\n\n<h3 id=\"37-kalia\">37. <a href=\"https://marketplace.visualstudio.com/items?itemName=krasimir.kalia\" rel=\"noopener\">Kalia</a></h3>\n\n\n<p>This is one of three VS Code tools that made the list. It’s an attractive color scheme you can use for your VS Code setup.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://marketplace.visualstudio.com/items?itemName=krasimir.kalia\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276624-30b216ca-2fe6-46f4-9b52-30cd4af5e71d.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361074\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276624-30b216ca-2fe6-46f4-9b52-30cd4af5e71d.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276624-30b216ca-2fe6-46f4-9b52-30cd4af5e71d.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276624-30b216ca-2fe6-46f4-9b52-30cd4af5e71d.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276624-30b216ca-2fe6-46f4-9b52-30cd4af5e71d.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276624-30b216ca-2fe6-46f4-9b52-30cd4af5e71d.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The extension lists only about 800 installs so far, which is surprising, but it has a nice pastel color look that I think many will enjoy.</p>\n\n\n<h3 id=\"36-adminjs\">36. <a href=\"https://adminjs.co/\" rel=\"noopener\">AdminJS</a></h3>\n\n\n<p>If you&#8217;re a Node developer, this is an open-source admin panel that can be added to a Node.js app. It will generate a UI for you, based on data you&#8217;ve added from almost any database, allowing you and your team to manage your app&#8217;s content.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://adminjs.co/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276662-4dec1fb2-9e2e-4c85-8e06-c7738596b530.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361075\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276662-4dec1fb2-9e2e-4c85-8e06-c7738596b530.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276662-4dec1fb2-9e2e-4c85-8e06-c7738596b530.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276662-4dec1fb2-9e2e-4c85-8e06-c7738596b530.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276662-4dec1fb2-9e2e-4c85-8e06-c7738596b530.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148276662-4dec1fb2-9e2e-4c85-8e06-c7738596b530.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>You can try it out <a href=\"https://admin-bro-example-app-staging.herokuapp.com/admin/login\" rel=\"noopener\">using this example app</a>, which is based on MongoDB and Postgres.</p>\n\n\n<h3 id=\"35-pancake\">35. <a href=\"https://github.com/Rabios/Pancake\" rel=\"noopener\">Pancake</a></h3>\n\n\n<p>Here&#8217;s another game engine to build cross-platform HTML5-based 2D games. This one got a lot of traction when I first shared it. While it made the list,it seems to require Python during the build step after you write the game.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://github.com/Rabios/Pancake\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277051-49574877-c098-4163-b20c-edff9b5ea469-1024x764.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361077\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277051-49574877-c098-4163-b20c-edff9b5ea469.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277051-49574877-c098-4163-b20c-edff9b5ea469.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277051-49574877-c098-4163-b20c-edff9b5ea469.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277051-49574877-c098-4163-b20c-edff9b5ea469.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277051-49574877-c098-4163-b20c-edff9b5ea469.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The basic API uses plain JavaScript and you can view lots of neat little <a href=\"https://github.com/Rabios/Pancake/tree/master/examples\" rel=\"noopener\">examples here</a>.</p>\n\n\n<h3 id=\"34-mosaic-lite\">34. <a href=\"https://github.com/cruip/tailwind-dashboard-template\" rel=\"noopener\">Mosaic Lite</a></h3>\n\n\n<p>I find lots of dashboard templates built with different front-end technologies. This one is made with Tailwind and React and includes optional chart components built with Chart.js.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://github.com/cruip/tailwind-dashboard-template\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277080-35a45459-a175-4cfb-a9bd-63409c0d0336.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361078\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277080-35a45459-a175-4cfb-a9bd-63409c0d0336.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277080-35a45459-a175-4cfb-a9bd-63409c0d0336.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277080-35a45459-a175-4cfb-a9bd-63409c0d0336.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277080-35a45459-a175-4cfb-a9bd-63409c0d0336.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277080-35a45459-a175-4cfb-a9bd-63409c0d0336.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Like other similar templates, this can be used for SaaS products, admin dashboards, and more. You can view a <a href=\"https://mosaic.cruip.com/\" rel=\"noopener\">live demo</a>.</p>\n\n\n<h3 id=\"33-iconduck\">33. <a href=\"https://iconduck.com/\" rel=\"noopener\">Iconduck</a></h3>\n\n\n<p>Here&#8217;s another great source for open-source icons, this one offering well over 100,000 icons that are searchable by keyword and are all available for use in commercial projects.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://iconduck.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277110-473d26fb-bdf3-4cae-b370-87872f89f05e.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361079\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277110-473d26fb-bdf3-4cae-b370-87872f89f05e.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277110-473d26fb-bdf3-4cae-b370-87872f89f05e.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277110-473d26fb-bdf3-4cae-b370-87872f89f05e.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277110-473d26fb-bdf3-4cae-b370-87872f89f05e.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277110-473d26fb-bdf3-4cae-b370-87872f89f05e.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The site includes ability to like and save icons and icon collections for later use (requires cookies, but no login).</p>\n\n\n<h3 id=\"32-luxa-css\">32. <a href=\"https://luxacss.com/\" rel=\"noopener\">Luxa CSS</a></h3>\n\n\n<p>This is a CSS library that was actually released in mid-to late 2020, but I shared it for the first time in 2021. It&#8217;s described as a &#8220;minimalist&#8221; CSS framework.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://luxacss.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277432-87db14f7-1cfe-4e7c-bcf1-d35c48063edd.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361080\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277432-87db14f7-1cfe-4e7c-bcf1-d35c48063edd.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277432-87db14f7-1cfe-4e7c-bcf1-d35c48063edd.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277432-87db14f7-1cfe-4e7c-bcf1-d35c48063edd.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277432-87db14f7-1cfe-4e7c-bcf1-d35c48063edd.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277432-87db14f7-1cfe-4e7c-bcf1-d35c48063edd.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Luxa CSS includes some base styles, along with various components, helpers, and layout styles, which you can view <a href=\"https://luxacss.com/docs.html\" rel=\"noopener\">in the docs</a> or by checking out <a href=\"https://codepen.io/collection/XEkzjB\" rel=\"noopener\">this CodePen collection</a>.</p>\n\n\n<h3 id=\"31-glitter\">31. <a href=\"https://wh0.github.io/glitter/\" rel=\"noopener\">Glitter</a></h3>\n\n\n<p>Glitter was definitely one of the strangest — yet coolest — front-end tools I came across over the past year and it seems to have drawn a lot of interest even though it&#8217;s as simple as any tool gets.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://wh0.github.io/glitter/\" rel=\"noopener\"><img loading=\"lazy\" width=\"942\" height=\"860\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277466-af9fdeba-9f22-4612-beed-8f63a95a4e61.png?resize=942%2C860&#038;ssl=1\" alt=\"\" class=\"wp-image-361081\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277466-af9fdeba-9f22-4612-beed-8f63a95a4e61.png?w=942&amp;ssl=1 942w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277466-af9fdeba-9f22-4612-beed-8f63a95a4e61.png?resize=300%2C274&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277466-af9fdeba-9f22-4612-beed-8f63a95a4e61.png?resize=768%2C701&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It&#8217;s a generator that produces text in a glitter-like style, which you can save as SVG. Definitely not for 99% of your projects, but a pretty cool text effect.</p>\n\n\n<h3 id=\"30-components-ai\">30. <a href=\"https://components.ai/theme/\" rel=\"noopener\">Components AI</a></h3>\n\n\n<p>When I originally shared this one, I was sharing the theme builder alone, which is what got it on this list. But it&#8217;s worth sharing the entire set of 15+ tools.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://components.ai/theme/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"764\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277494-68526fed-5f03-420a-ae61-04f10ae9a65b.png?resize=1024%2C764&#038;ssl=1\" alt=\"\" class=\"wp-image-361082\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277494-68526fed-5f03-420a-ae61-04f10ae9a65b.png?resize=1024%2C764&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277494-68526fed-5f03-420a-ae61-04f10ae9a65b.png?resize=300%2C224&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277494-68526fed-5f03-420a-ae61-04f10ae9a65b.png?resize=768%2C573&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277494-68526fed-5f03-420a-ae61-04f10ae9a65b.png?resize=1000%2C746&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277494-68526fed-5f03-420a-ae61-04f10ae9a65b.png?w=1153&amp;ssl=1 1153w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>In addition to the theme builder, there&#8217;s a syntax highlighter builder, gradient and shadow tools, SVG pattern generators, animated backgrounds, and lots more.</p>\n\n\n<h3 id=\"29-unicode-arrows\">29. <a href=\"https://unicodearrows.com/\" rel=\"noopener\">Unicode Arrows</a></h3>\n\n\n<p>This is pretty straightforward. Unicode Arrows a one-stop location to copy and paste — you guessed it — Unicode arrows along with each arrow&#8217;s associated hex code.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://unicodearrows.com/\" rel=\"noopener\"><img src=\"https://i0.wp.com/user-images.githubusercontent.com/558709/148277528-263895a7-32b3-4b25-a673-51c404a720fe.png?ssl=1\" alt=\"Unicode Arrows\" data-recalc-dims=\"1\"/></a></figure>\n\n\n\n<p>Not much else to say about this one except that the site lets you buy Unicode arrow jewellery. Not that a bunch of coding nerds would be interested in that, no way.</p>\n\n\n<h3 id=\"28-type-scale-clamp-generator\">28. <a href=\"https://maximeroudier.com/typeScaleClampGenerator/\" rel=\"noopener\">Type Scale Clamp Generator</a></h3>\n\n\n<p>This is not the first tool to attempt to generate a type scale for you, but it&#8217;s a relatively new one that incorporates CSS&#8217;s <a href=\"https://css-tricks.com/complete-guide-to-css-functions/#aa-calc\"><code>clamp()</code> function</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://maximeroudier.com/typeScaleClampGenerator/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277556-cadfae11-7cb1-4597-a657-edf6277a2f1f-1024x755.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361086\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277556-cadfae11-7cb1-4597-a657-edf6277a2f1f.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277556-cadfae11-7cb1-4597-a657-edf6277a2f1f.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277556-cadfae11-7cb1-4597-a657-edf6277a2f1f.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277556-cadfae11-7cb1-4597-a657-edf6277a2f1f.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277556-cadfae11-7cb1-4597-a657-edf6277a2f1f.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The front-end tool allows you to select a range, font, preview text, and you can even test the responsiveness (though I don&#8217;t see how useful that latter feature is, considering this is just text).</p>\n\n\n<h3 id=\"27-animxyz\">27. <a href=\"https://animxyz.com/\" rel=\"noopener\">AnimXYZ</a></h3>\n\n\n<p>This one is described as &#8220;the first composable CSS animation toolkit&#8221; with support for Vue and React. What that means exactly is that you don&#8217;t have to write any keyframes. It seems to be kind of like Tailwind for animations, since you&#8217;re only using HTML classes.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://animxyz.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277626-2ce1f67c-a7e8-4e82-8646-3aff702abf05.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361087\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277626-2ce1f67c-a7e8-4e82-8646-3aff702abf05.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277626-2ce1f67c-a7e8-4e82-8646-3aff702abf05.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277626-2ce1f67c-a7e8-4e82-8646-3aff702abf05.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277626-2ce1f67c-a7e8-4e82-8646-3aff702abf05.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277626-2ce1f67c-a7e8-4e82-8646-3aff702abf05.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>In addition to adding classes, the values are built entirely using CSS variables. That means you can customize the values as you wish by modifying the variables themselves.</p>\n\n\n<h3 id=\"26-frontend-toolkit\">26. <a href=\"https://www.fetoolkit.io/\" rel=\"noopener\">Frontend Toolkit</a></h3>\n\n\n<p>Here&#8217;s another all-in-one tools solution that includes more than 20 tools for doing various coding and image-related tasks.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.fetoolkit.io/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277650-36d37117-7603-4280-ad85-36f9d8c32be6.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361088\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277650-36d37117-7603-4280-ad85-36f9d8c32be6.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277650-36d37117-7603-4280-ad85-36f9d8c32be6.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277650-36d37117-7603-4280-ad85-36f9d8c32be6.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277650-36d37117-7603-4280-ad85-36f9d8c32be6.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277650-36d37117-7603-4280-ad85-36f9d8c32be6.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It includes tools for CSS, JSON, favicons, SVG, image compression, npm, regex, and more.</p>\n\n\n<h3 id=\"25-colorpalettesearth\">25. <a href=\"https://colorpalettes.earth/\" rel=\"noopener\">colorpalettes.earth</a></h3>\n\n\n<p>Here&#8217;s one that&#8217;s unique in the list and may inspire some cool designs. This tool displays color palettes sourced from images of nature (taken from Unsplash) that are included on the site, with new palettes added regularly.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://colorpalettes.earth/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277680-074c9789-f6ac-4cb6-b26e-c413102211d9.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361089\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277680-074c9789-f6ac-4cb6-b26e-c413102211d9.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277680-074c9789-f6ac-4cb6-b26e-c413102211d9.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277680-074c9789-f6ac-4cb6-b26e-c413102211d9.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277680-074c9789-f6ac-4cb6-b26e-c413102211d9.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277680-074c9789-f6ac-4cb6-b26e-c413102211d9.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Click any image and you&#8217;ll get a modal with access to the hex value for each of the colors that make up the image-derived palette.</p>\n\n\n<h3 id=\"24-uncut\">24. <a href=\"https://uncut.wtf/\" rel=\"noopener\">Uncut</a></h3>\n\n\n<p>Adding to the diversity of this list, here&#8217;s a typeface catalogue that currently features 90 typefaces with a focus on contemporary, or modern, type.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://uncut.wtf/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277704-827d4380-d3b5-4603-b3c3-c66afb4dae45.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361090\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277704-827d4380-d3b5-4603-b3c3-c66afb4dae45.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277704-827d4380-d3b5-4603-b3c3-c66afb4dae45.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277704-827d4380-d3b5-4603-b3c3-c66afb4dae45.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277704-827d4380-d3b5-4603-b3c3-c66afb4dae45.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277704-827d4380-d3b5-4603-b3c3-c66afb4dae45.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>All fonts included are open-source, so you&#8217;re free to use them in personal and commercial projects.</p>\n\n\n<h3 id=\"23-lowdefy\">23. <a href=\"https://lowdefy.com/\" rel=\"noopener\">Lowdefy</a></h3>\n\n\n<p>Building internal tools seems to be a hot thing nowadays and this is one solution you might want to look into that lets you build your tools by writing YAML.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://lowdefy.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277728-e783b47a-02b2-4a7d-9b85-25cd845f53e6.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361091\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277728-e783b47a-02b2-4a7d-9b85-25cd845f53e6.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277728-e783b47a-02b2-4a7d-9b85-25cd845f53e6.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277728-e783b47a-02b2-4a7d-9b85-25cd845f53e6.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277728-e783b47a-02b2-4a7d-9b85-25cd845f53e6.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277728-e783b47a-02b2-4a7d-9b85-25cd845f53e6.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It&#8217;s described as an &#8220;open-source low-code framework to build web apps, admin panels, BI dashboards, workflows, and CRUD apps with ease.”</p>\n\n\n<h3 id=\"22-javascript-booster\">22. <a href=\"https://marketplace.visualstudio.com/items?itemName=sburg.vscode-javascript-booster\" rel=\"noopener\">JavaScript Booster</a></h3>\n\n\n<p>This is a VS Code extension that aims to help you, as the it says on the tin, <em>boost</em> your JavaScript, TypeScript, and React coding productivity. The extension adds a light bulb icon at certain points in your code, indicating that you can instantly trigger predefined code refactorings.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://marketplace.visualstudio.com/items?itemName=sburg.vscode-javascript-booster\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277756-411b4a3d-16f1-411f-8be6-078e0849e917.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361092\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277756-411b4a3d-16f1-411f-8be6-078e0849e917.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277756-411b4a3d-16f1-411f-8be6-078e0849e917.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277756-411b4a3d-16f1-411f-8be6-078e0849e917.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277756-411b4a3d-16f1-411f-8be6-078e0849e917.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277756-411b4a3d-16f1-411f-8be6-078e0849e917.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Some examples include converting a regular function to an arrow function, flip an if-else construct, along with some React-specific refactorings.</p>\n\n\n<h3 id=\"21-layout-patterns\">21. <a href=\"https://web.dev/patterns/layout/\" rel=\"noopener\">Layout Patterns</a></h3>\n\n\n<p>This is one of the most recent additions to Google Developers&#8217; web.dev resource that I&#8217;m assuming will continue to grow in the coming year.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://web.dev/patterns/layout/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277947-22a12233-a5ab-4f1a-9a5a-e27636a948e0-1024x755.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361093\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277947-22a12233-a5ab-4f1a-9a5a-e27636a948e0.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277947-22a12233-a5ab-4f1a-9a5a-e27636a948e0.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277947-22a12233-a5ab-4f1a-9a5a-e27636a948e0.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277947-22a12233-a5ab-4f1a-9a5a-e27636a948e0.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277947-22a12233-a5ab-4f1a-9a5a-e27636a948e0.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It includes a number of UI patterns &#8220;built using modern CSS APIs.&#8221; In other words, it&#8217;s a very forward-thinking collection of CSS examples, but should be used with caution since some of the technologies incorporated may not have full browser support yet.</p>\n\n\n<h3 id=\"20-baseline-background-remover\">20. <a href=\"https://baseline.is/tools/background-remover/\" rel=\"noopener\">Baseline Background Remover</a></h3>\n\n\n<p>Admittedly, AI-based background remover tools have been a dime-a-dozen recently. This one is free and works really well from my brief testing with it.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://baseline.is/tools/background-remover/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277973-b5f345bc-9a9b-458b-89ac-16c89ecf285c.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361094\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277973-b5f345bc-9a9b-458b-89ac-16c89ecf285c.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277973-b5f345bc-9a9b-458b-89ac-16c89ecf285c.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277973-b5f345bc-9a9b-458b-89ac-16c89ecf285c.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277973-b5f345bc-9a9b-458b-89ac-16c89ecf285c.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277973-b5f345bc-9a9b-458b-89ac-16c89ecf285c.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>You can upload an image of up to 5MB and it will accept JPEG and PNG files. The resulting image is downloaded a transparent PNG, which you can use to add your own background or leave as transparent.</p>\n\n\n<h3 id=\"19-theatrejs\">19. <a href=\"https://www.theatrejs.com/\" rel=\"noopener\">Theatre.js</a></h3>\n\n\n<p>Here&#8217;s another animation library, but this time a JavaScript solution that allows you to animate DOM elements or WebGL using a convenient visual editor that works along with the code you write.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.theatrejs.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277996-25c04b61-63bc-47bf-aa99-77be91a29da0.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361096\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277996-25c04b61-63bc-47bf-aa99-77be91a29da0.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277996-25c04b61-63bc-47bf-aa99-77be91a29da0.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277996-25c04b61-63bc-47bf-aa99-77be91a29da0.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277996-25c04b61-63bc-47bf-aa99-77be91a29da0.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148277996-25c04b61-63bc-47bf-aa99-77be91a29da0.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>This is a really powerful tool that&#8217;s hard to encapsulate in just a few paragraphs. There&#8217;s a lenghty <a href=\"https://docs.theatrejs.com/getting-started/\" rel=\"noopener\">chapter-based video</a> used throughout the docs that really helps if you want to get familiar with it.</p>\n\n\n<h3 id=\"18-transitioncss\">18. <a href=\"https://www.transition.style/\" rel=\"noopener\">Transition.css</a></h3>\n\n\n<p>Drop-in CSS libraries are always popular and I&#8217;ll usually find at least one or two good ones each year. This one includes some neat CSS transitions you probably haven&#8217;t seen elsewhere.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.transition.style/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278121-0b484ebb-a245-4bd2-8894-f9352116f636.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361097\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278121-0b484ebb-a245-4bd2-8894-f9352116f636.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278121-0b484ebb-a245-4bd2-8894-f9352116f636.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278121-0b484ebb-a245-4bd2-8894-f9352116f636.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278121-0b484ebb-a245-4bd2-8894-f9352116f636.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278121-0b484ebb-a245-4bd2-8894-f9352116f636.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>You can try them out right on the page. My favourites are the ones that incorporate some hesitation in the animation, for an added uniqueness.</p>\n\n\n<h3 id=\"17-the-component-gallery\">17. <a href=\"https://component.gallery/\" rel=\"noopener\">The Component Gallery</a></h3>\n\n\n<p>This is sort of a catch-all for design systems as it features component examples sourced from real design systems built in various technologies — React, CSS, Angular, Vue, etc. — by various brands, including eBay, Goldman Sachs, GOV.UK, and lots more.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://component.gallery/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278163-2dcad79f-3201-492a-9049-6e84ba542c65.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361098\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278163-2dcad79f-3201-492a-9049-6e84ba542c65.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278163-2dcad79f-3201-492a-9049-6e84ba542c65.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278163-2dcad79f-3201-492a-9049-6e84ba542c65.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278163-2dcad79f-3201-492a-9049-6e84ba542c65.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278163-2dcad79f-3201-492a-9049-6e84ba542c65.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It works as a handy reference for anyone building their own design system, as you can compare the same components across the existing systems included here.</p>\n\n\n<h3 id=\"16-partyjs\">16. <a href=\"https://party.js.org/\" rel=\"noopener\">party.js</a></h3>\n\n\n<p>This is a fun and unique JavaScript library that lets you add particle effects to a web page, specifically confetti and sparkles.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://party.js.org/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278196-4c9622c2-f176-404f-b562-3c5021743538.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361099\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278196-4c9622c2-f176-404f-b562-3c5021743538.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278196-4c9622c2-f176-404f-b562-3c5021743538.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278196-4c9622c2-f176-404f-b562-3c5021743538.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278196-4c9622c2-f176-404f-b562-3c5021743538.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278196-4c9622c2-f176-404f-b562-3c5021743538.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>You&#8217;ll only use this in very specific circumstances, but it&#8217;s nice that you can customize the particle shapes, number of particles, spread, and so on.</p>\n\n\n<h3 id=\"15-headless-ui\">15. <a href=\"https://headlessui.dev/\" rel=\"noopener\">Headless UI</a></h3>\n\n\n<p>In the words of Nacho Libre, now we&#8217;re <a href=\"https://www.youtube.com/watch?v=hHWcoaM_59E\" rel=\"noopener\">really getting down to the nitty gritty</a>. This UI component library was released in late 2020 and has already amassed more than 12,000 stars on GitHub.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://headlessui.dev/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278221-610fbc6a-fe6e-4597-b932-5c61448cee57.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361100\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278221-610fbc6a-fe6e-4597-b932-5c61448cee57.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278221-610fbc6a-fe6e-4597-b932-5c61448cee57.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278221-610fbc6a-fe6e-4597-b932-5c61448cee57.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278221-610fbc6a-fe6e-4597-b932-5c61448cee57.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278221-610fbc6a-fe6e-4597-b932-5c61448cee57.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The components (dropdown menu, tabs, popover, etc.) are &#8220;headless.&#8221; That doesn&#8217;t mean their <a href=\"https://www.youtube.com/watch?v=FJC8OhfEuSw\" rel=\"noopener\">capa was detated</a>; it means they&#8217;re unstyled so that you can brand them as you please. They&#8217;re also fully accessible, designed to integrate with Tailwind CSS, and are compatible with React and Vue. That&#8217;s right — this one hits almost every front-end buzzword for 2022.</p>\n\n\n<h3 id=\"14-turbo\">14. <a href=\"https://turbo.hotwired.dev/\" rel=\"noopener\">Turbo</a></h3>\n\n\n<p>This is another one that did well throughout 2021 after a late 2020 release. It&#8217;s billed as &#8220;the speed of a single-page web application without having to write any JavaScript.&#8221;</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://turbo.hotwired.dev/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278260-33c3cb12-b000-41f4-88aa-1e270b0fd2c6.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361101\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278260-33c3cb12-b000-41f4-88aa-1e270b0fd2c6.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278260-33c3cb12-b000-41f4-88aa-1e270b0fd2c6.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278260-33c3cb12-b000-41f4-88aa-1e270b0fd2c6.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278260-33c3cb12-b000-41f4-88aa-1e270b0fd2c6.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148278260-33c3cb12-b000-41f4-88aa-1e270b0fd2c6.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>In brief, Turbo is a library that lets you take advantage of four main features: Turbo Drive, Turbo Frames, Turbo Streams, and Turbo Native. These use web components to add single-page app-like performance and interactivity to your pages without the need to reinvent the wheel with heavy custom scripts.</p>\n\n\n<h3 id=\"13-tidyjs\">13. <a href=\"https://pbeshai.github.io/tidy/\" rel=\"noopener\">tidy.js</a></h3>\n\n\n<p>This is a library of data-related JavaScript functions specifically for &#8220;tidying up&#8221; your data.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://pbeshai.github.io/tidy/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280602-1b7a5060-fbd3-4b53-b102-4a9694439843.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361102\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280602-1b7a5060-fbd3-4b53-b102-4a9694439843.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280602-1b7a5060-fbd3-4b53-b102-4a9694439843.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280602-1b7a5060-fbd3-4b53-b102-4a9694439843.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280602-1b7a5060-fbd3-4b53-b102-4a9694439843.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280602-1b7a5060-fbd3-4b53-b102-4a9694439843.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It includes 70+ functions under different categories (tidying, grouping, math, sequencing, etc.) and you can mess around with the different features using <a href=\"https://pbeshai.github.io/tidy/playground\" rel=\"noopener\">this playground</a>.</p>\n\n\n<h3 id=\"12-tailkit\">12. <a href=\"https://www.tailwind-kit.com/\" rel=\"noopener\">Tail-Kit</a></h3>\n\n\n<p>This is the first Tailwind UI kit on the list of top front-end tools, and it&#8217;s a doozy. It has more than 250 open-source components that are compatible with React, Vue, and Angular.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.tailwind-kit.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"684\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280639-1f9d7b87-c70f-42a7-9401-f9be339e0363.png?resize=1024%2C684&#038;ssl=1\" alt=\"\" class=\"wp-image-361103\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280639-1f9d7b87-c70f-42a7-9401-f9be339e0363.png?resize=1024%2C684&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280639-1f9d7b87-c70f-42a7-9401-f9be339e0363.png?resize=300%2C201&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280639-1f9d7b87-c70f-42a7-9401-f9be339e0363.png?resize=768%2C513&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280639-1f9d7b87-c70f-42a7-9401-f9be339e0363.png?resize=1000%2C668&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280639-1f9d7b87-c70f-42a7-9401-f9be339e0363.png?w=1357&amp;ssl=1 1357w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>There are components categorized under Elements, Forms, Commerce, Navigation, Sections, and Lists, or you can use from a number of templates, categorized under Dashboards, Landing Pages, and Error Pages.</p>\n\n\n<h3 id=\"11-tailwind-components\">11. <a href=\"https://tailwindcomponents.com/\" rel=\"noopener\">Tailwind Components</a></h3>\n\n\n<p>And here&#8217;s another Tailwind UI kit, again featuring open-source components and templates under 13 more refined categories, along with an &#8220;awesome&#8221; category that includes free but premium components.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://tailwindcomponents.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"738\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280679-06d1bd65-03a4-4426-9535-a578619d3f02.png?resize=1024%2C738&#038;ssl=1\" alt=\"\" class=\"wp-image-361104\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280679-06d1bd65-03a4-4426-9535-a578619d3f02.png?resize=1024%2C738&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280679-06d1bd65-03a4-4426-9535-a578619d3f02.png?resize=300%2C216&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280679-06d1bd65-03a4-4426-9535-a578619d3f02.png?resize=768%2C554&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280679-06d1bd65-03a4-4426-9535-a578619d3f02.png?resize=1000%2C721&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280679-06d1bd65-03a4-4426-9535-a578619d3f02.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>This site is more or less a directory of various community-contributed Tailwind components, rather than a cohesive set of UI elements like other kits.</p>\n\n\n<h3 id=\"10-pikaday\">10. <a href=\"https://github.com/Pikaday/Pikaday\" rel=\"noopener\">Pikaday</a></h3>\n\n\n<p>A JavaScript date picker cracks the top 10 tools of the year in 2021 — who would have thunk it? It seems to check all the boxes necessary for a date picker component: No dependencies, lightweight, and uses modular CSS for styling.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://github.com/Pikaday/Pikaday\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280715-43cb160f-8c0b-4e0c-b46e-d206bd4c6620.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361106\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280715-43cb160f-8c0b-4e0c-b46e-d206bd4c6620.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280715-43cb160f-8c0b-4e0c-b46e-d206bd4c6620.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280715-43cb160f-8c0b-4e0c-b46e-d206bd4c6620.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280715-43cb160f-8c0b-4e0c-b46e-d206bd4c6620.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280715-43cb160f-8c0b-4e0c-b46e-d206bd4c6620.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Like a few other front-end tools on this list, this isn&#8217;t a new tool. It&#8217;s been around for a while, but I first shared it in 2021 and it amazingly ended up in this year&#8217;s top 10.</p>\n\n\n<h3 id=\"9-html-boilerplates\">9. <a href=\"https://htmlboilerplates.com/\" rel=\"noopener\">HTML Boilerplates</a></h3>\n\n\n<p>This is a practical little online HTML generator that lets you customize the type of HTML starter template you want to generate, providing toggle options for what to include. This is probably most useful for generating a quick template for a landing page or demo.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://htmlboilerplates.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280753-bb532840-cd84-4dc0-9a6b-a5148f025555.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361107\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280753-bb532840-cd84-4dc0-9a6b-a5148f025555.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280753-bb532840-cd84-4dc0-9a6b-a5148f025555.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280753-bb532840-cd84-4dc0-9a6b-a5148f025555.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280753-bb532840-cd84-4dc0-9a6b-a5148f025555.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280753-bb532840-cd84-4dc0-9a6b-a5148f025555.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>In all honesty, I think it would be good if the tool was updated to use a few more modern options, but for a simple HTML starting point this gets the job done.</p>\n\n\n<h3 id=\"8-whirl\">8. <a href=\"https://whirl.netlify.app/\" rel=\"noopener\">Whirl</a></h3>\n\n\n<p>Here&#8217;s another CSS animation library, this time specifically a collection of animations for use as loading spinners. It includes 100+ animated loaders, some of which are really neat and unique.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://whirl.netlify.app/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280880-cefce8e5-e517-47b7-ba82-511bdc2bb6ac.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361108\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280880-cefce8e5-e517-47b7-ba82-511bdc2bb6ac.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280880-cefce8e5-e517-47b7-ba82-511bdc2bb6ac.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280880-cefce8e5-e517-47b7-ba82-511bdc2bb6ac.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280880-cefce8e5-e517-47b7-ba82-511bdc2bb6ac.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280880-cefce8e5-e517-47b7-ba82-511bdc2bb6ac.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>I like how the animations in the list (which you can try right on the page) are categorized as pseudo-element, single element, and multi-element. The best one by far is the &#8220;pong&#8221; animation, though I question whether anyone would correctly classify that as indicative of &#8220;content loading&#8221;!</p>\n\n\n<h3 id=\"7-riju\">7. <a href=\"https://riju.codes/\" rel=\"noopener\">Riju</a></h3>\n\n\n<p>Imagine if CodePen and JSFiddle had a baby, then you chopped that baby into 224 pieces. That&#8217;s what Riju is — a fast online playground for just about every programming language.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://riju.codes/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280902-e8dc4146-95ff-4a35-a01f-efcf2361048a-1024x755.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361109\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280902-e8dc4146-95ff-4a35-a01f-efcf2361048a.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280902-e8dc4146-95ff-4a35-a01f-efcf2361048a.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280902-e8dc4146-95ff-4a35-a01f-efcf2361048a.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280902-e8dc4146-95ff-4a35-a01f-efcf2361048a.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280902-e8dc4146-95ff-4a35-a01f-efcf2361048a.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>I can&#8217;t imagine there&#8217;s any coding language you&#8217;d want to play around with that&#8217;s missing here and most of it is stuff that you don&#8217;t normally associate with running in the browser.</p>\n\n\n<h3 id=\"6-devui\">6. <a href=\"https://devui.design/\" rel=\"noopener\">DevUI</a></h3>\n\n\n<p>This is an Angular toolkit that&#8217;s suitable for enterprise-level apps and includes components, icons, an admin dashboard template, and a design system for styling and branding.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://devui.design/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"771\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280929-7684f2e6-ac03-44d6-b688-9671752b7986.png?resize=1024%2C771&#038;ssl=1\" alt=\"\" class=\"wp-image-361110\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280929-7684f2e6-ac03-44d6-b688-9671752b7986.png?resize=1024%2C771&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280929-7684f2e6-ac03-44d6-b688-9671752b7986.png?resize=300%2C226&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280929-7684f2e6-ac03-44d6-b688-9671752b7986.png?resize=768%2C579&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280929-7684f2e6-ac03-44d6-b688-9671752b7986.png?resize=1000%2C753&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280929-7684f2e6-ac03-44d6-b688-9671752b7986.png?w=1204&amp;ssl=1 1204w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>I&#8217;m guessing this made the top 10 list of front-end tools because I didn&#8217;t specifically mention at first that it is for Angular apps (which isn&#8217;t clear on the home page either). Nonetheless, I did specify that it&#8217;s for enterprise-level projects, and that seemed to grab the attention of many.</p>\n\n\n<h3 id=\"5-pollen\">5. <a href=\"https://www.pollen.style/\" rel=\"noopener\">Pollen</a></h3>\n\n\n<p>This library works as a foundation for your own design system, and its practicality is evident in its use of CSS custom properties.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://www.pollen.style/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280956-6131d621-5e3f-4d9f-bd5f-96964a35bcee.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361111\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280956-6131d621-5e3f-4d9f-bd5f-96964a35bcee.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280956-6131d621-5e3f-4d9f-bd5f-96964a35bcee.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280956-6131d621-5e3f-4d9f-bd5f-96964a35bcee.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280956-6131d621-5e3f-4d9f-bd5f-96964a35bcee.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280956-6131d621-5e3f-4d9f-bd5f-96964a35bcee.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It provides you with low-level design tokens that you can easily customize and extend. Modules include Typography, Layout, UI, Grid, and Colors. I&#8217;m guessing there will be more added to this, so it&#8217;s one to keep an eye on in the coming year.</p>\n\n\n<h3 id=\"4-alternight\">4. <a href=\"https://github.com/spaceinvadev/alternight-vscode-theme\" rel=\"noopener\">AlterNight</a></h3>\n\n\n<p>Developers love VS Code, dark mode, and plugins. Combine those three things, and you have a great little front-end tool.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://github.com/spaceinvadev/alternight-vscode-theme\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280986-bcf07591-cf22-4cd3-b28c-9b068cbb523c.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361112\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280986-bcf07591-cf22-4cd3-b28c-9b068cbb523c.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280986-bcf07591-cf22-4cd3-b28c-9b068cbb523c.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280986-bcf07591-cf22-4cd3-b28c-9b068cbb523c.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280986-bcf07591-cf22-4cd3-b28c-9b068cbb523c.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148280986-bcf07591-cf22-4cd3-b28c-9b068cbb523c.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>AlterNight is a beautiful VS Code theme and has a modest ~3,000 installs so far, but it was able to crack the top five in this year&#8217;s list.</p>\n\n\n<h3 id=\"3-uisual\">3. <a href=\"https://uisual.com/\" rel=\"noopener\">UIsual</a></h3>\n\n\n<p>Here&#8217;s a collection of front-end templates, but with a bit of a twist that I think many seemed to appreciate: they&#8217;re greyscale.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://uisual.com/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148281027-75b69435-1869-4909-81e7-92879f8bb93f.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361113\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148281027-75b69435-1869-4909-81e7-92879f8bb93f.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148281027-75b69435-1869-4909-81e7-92879f8bb93f.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148281027-75b69435-1869-4909-81e7-92879f8bb93f.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148281027-75b69435-1869-4909-81e7-92879f8bb93f.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148281027-75b69435-1869-4909-81e7-92879f8bb93f.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>The set currently includes eight templates with diverse layouts. With the lack of any color-based branding, these are a good option to customize to your own needs without looking like every other landing page out there.</p>\n\n\n<h3 id=\"2-supabase-ui\">2. <a href=\"https://ui.supabase.io/\" rel=\"noopener\">Supabase UI</a></h3>\n\n\n<p>Here&#8217;s yet another open-source component library, this one for React and designed specifically for the Supabase product (an open-source Firebase alternative).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://ui.supabase.io/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"755\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275618-1d371a26-fe90-42f5-838a-6078c2f47e10.png?resize=1024%2C755&#038;ssl=1\" alt=\"\" class=\"wp-image-361114\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275618-1d371a26-fe90-42f5-838a-6078c2f47e10.png?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275618-1d371a26-fe90-42f5-838a-6078c2f47e10.png?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275618-1d371a26-fe90-42f5-838a-6078c2f47e10.png?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275618-1d371a26-fe90-42f5-838a-6078c2f47e10.png?resize=1000%2C737&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148275618-1d371a26-fe90-42f5-838a-6078c2f47e10.png?w=1230&amp;ssl=1 1230w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>It&#8217;s Tailwind-ready and I should also point out that it&#8217;s still in early development. Nonetheless, it was popular enough to make it to number 2 on this list.</p>\n\n\n<h3 id=\"1-css-layout-generator\">1. <a href=\"https://layout.bradwoods.io/\" rel=\"noopener\">CSS Layout Generator</a></h3>\n\n\n<p>This was the most-clicked tool in my newsletter over the past year. It&#8217;s a full-featured CSS and JSX generator for producing different kinds of layouts using the CSS Grid Layout syntax.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://layout.bradwoods.io/\" rel=\"noopener\"><img loading=\"lazy\" width=\"1024\" height=\"618\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148283078-965a96e8-eb03-4919-b2ba-120086f0902f.png?resize=1024%2C618&#038;ssl=1\" alt=\"\" class=\"wp-image-361115\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148283078-965a96e8-eb03-4919-b2ba-120086f0902f.png?resize=1024%2C618&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148283078-965a96e8-eb03-4919-b2ba-120086f0902f.png?resize=300%2C181&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148283078-965a96e8-eb03-4919-b2ba-120086f0902f.png?resize=768%2C463&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148283078-965a96e8-eb03-4919-b2ba-120086f0902f.png?resize=1000%2C603&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/148283078-965a96e8-eb03-4919-b2ba-120086f0902f.png?w=1512&amp;ssl=1 1512w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>Click on any of the five layout styles, and you&#8217;ll come to an interactive online editor that lets you mess around with various CSS Grid features like rows, columns, row gap, column gap, direction, grid alignment, and lots more. There&#8217;s quite a bit to play around with here, and apparently the tool will later include the Flexbox syntax for some of the examples.</p>\n\n\n<h3 id=\"what-were-your-favorite-frontend-tools-of-2021\">What were your favorite front-end tools of 2021?</h3>\n\n\n<p>That wraps up this year&#8217;s list of most interesting front-end tools. I hope you found something here you can bookmark or start using in a new project. It&#8217;s pretty cool that this list contained such a variety of tools — there were UI kits, animation libraries, a stock photo site, image tools, and more.</p>\n\n\n\n<p>Are there front-end tools not mentioned in this list that you enjoyed discovering over the past year? Feel free to drop it in the comments. You can also <a href=\"https://webtoolsweekly.com/\" rel=\"noopener\">subscribe to my newsletter</a> for more front-end tools in 2022 and feel free to hit me up if you’ve built something yourself that you’d like to share in a future issue.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/hottest-front-end-tools-in-2021/\">What Were the Hottest Front-End Tools in 2021?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Another year has passed and once again I’ve had the privilege of going through the Web Tools Weekly newsletter archives from the past 12 months to hunt down the front-end tools that readers found to be the most interesting during 2021. So, to kick off 2022, I’ve compiled a list of the 60 most popular tools. I’m sure there are at least one or two listed here that you can start using in your front-end projects today.\n\n\n\nSome of these front-end tools are super-practical, while others probably only made this list due to curiosity (which I base on the number of unique clicks). And since many of the tools that make my year-end lists are pretty new, I think this is a good indicator of the kinds of front-end tools that will be popular in the coming year.\n\n\n\nCounting down from the top!\n\n\n\n\n\n\n\n\n  \n          Table of contents\n      \n  \n\n\n60. Open Props\n59. NextUI\n58. Dopefolio\n57. Vizzu\n56. 10015 Tools\n55. Snoweb\n54. Tails\n53. MapLibre\n52. SVG Repo\n51. Animated Backgrounds\n50. Pico.css\n49. Coding Fonts\n48. UI-Neumorphism\n47. Beautiful CSS Buttons\n46. Shaper\n45. Prestige\n44. HTML.cafe\n43. Charts.css\n42. Buttons Generator\n41. Doodad Pattern Generator\n40. Kaboom\n39. Skuawk\n38. Glassmorphism CSS Generator\n37. Kalia\n36. AdminJS\n35. Pancake\n34. Mosaic Lite\n33. Iconduck\n32. Luxa CSS\n31. Glitter\n30. Components AI\n29. Unicode Arrows\n28. Type Scale Clamp Generator\n27. AnimXYZ\n26. Frontend Toolkit\n25. colorpalettes.earth\n24. Uncut\n23. Lowdefy\n22. JavaScript Booster\n21. Layout Patterns\n20. Baseline Background Remover\n19. Theatre.js\n18. Transition.css\n17. The Component Gallery\n16. party.js\n15. Headless UI\n14. Turbo\n13. tidy.js\n12. Tail-Kit\n11. Tailwind Components\n10. Pikaday\n9. HTML Boilerplates\n8. Whirl\n7. Riju\n6. DevUI\n5. Pollen\n4. AlterNight\n3. UIsual\n2. Supabase UI\n1. CSS Layout Generator\nWhat were your favorite front-end tools of 2021?\n\n\n\n\n\n\n\n60. Open Props\n\n\nOpen Props provides a set of hand-crafted design tokens made up of CSS custom properties. I can see this sort of thing being much more common due to the use of this particular CSS feature. These allow you to drop in small collections of useful groups of custom properties, like animations.css, borders.css, fonts.css, zindex.css, etc, with more coming soon. Or you can just use the main Open Props file to grab everything at once.\n\n\n\n\n\n\n\nThis is definitely one front-end tool to keep an eye on and maybe even a good one to contribute to if you want to help build the library of tokens available.\n\n\n59. NextUI\n\n\nA modern React library that uses Stitches, a popular CSS-in-JS solution, and includes light and dark UI components out-of-the-box along with a default color palette that might be good for quickly building landing pages or other content that’s not initially tied to any branding.\n\n\n\n\n\n\n\nIt’s currently listed as being in Alpha stage of development, so this is another one worth keeping tabs on in the coming year.\n\n\n58. Dopefolio\n\n\nIf you’re looking for an easy way to put together your own developer portfolio, Dopefolio is a quick solution that’s optimized for SEO and has strong Lighthouse scores out-of-the-box.\n\n\n\n\n\n\n\nThe live demo gives you an idea of what it looks like (responsive and all) and it includes a color picker component so you can live-test your own preferred primary color for the template.\n\n\n57. Vizzu\n\n\nThis is a unique one that made this year’s list of front-end tools. Vizzu an open-source JavaScript library for creating animated data stories and visualizations. Maybe this is popular due the apparent need for creating and embedding medical data nowadays.\n\n\n\n\n\n\n\nThis library allows you to easily build static data charts, animated charts, and data stories. You can see some live examples of the animated charts or data stories, which include a data story showing which guest character had the most lines throughout the run of the TV series Friends.\n\n\n56. 10015 Tools\n\n\nI seem to find a handful of these types of front-end tools every year. 10015 Tools is a collection of front-end tools rather than one single tool. It includes text tools, image tools, CSS tools, coding tools (e.g. minifiers), color tools, social media tools, and a few others under a miscellaneous category.\n\n\n\n\n\n\n\nThis is definitely one of the more comprehensive all-in-one solutions I’ve seen, so I’m sure you’ll find a few useful front-end tools here you can come back to.\n\n\n55. Snoweb\n\n\nIcon sets are always popular and I come across at least a dozen new ones every year. This one includes optimized SVG icons, many of which have a built-in animated effect when you hover over the icon (like the open/close envelope icon).\n\n\n\n\n\n\n\nLike many icon websites, you can search by keyword or filter by category, one of which is a “brand” category with icons for Twitter, Facebook, Vimeo, YouTube, Snapchat, etc.\n\n\n54. Tails\n\n\nHere’s the first Tailwind-based tool to make the list; something that’s been a trend the past few years as Tailwind continues to grow in popularity. This front-end tool a drag-and-drop page builder for projects using Tailwind CSS.\n\n\n\n\n\n\n\nIt includes two free “blocks” for each of the 15 categories, so there’s a decent amount of free stuff here and you can unlock the rest for a monthly fee.\n\n\n53. MapLibre\n\n\nThis open-source mapping library launched in March and has grown in popularity throughout the year. It includes a JavaScript library as well as an SDK for displaying maps inside of iOS and Android apps.\n\n\n\n\n\n\n\nThe docs include a bunch of examples that use JavaScript, if you want to see what’s possible with the web-based front-end tools.\n\n\n52. SVG Repo\n\n\nSVG Repo makes the list based on sheer numbers alone. It’s a repository of more than 300,000 free, optimized, SVG-based graphics and icons most of which are licensed for commercial use.\n\n\n\n\n\n\n\nEach icon you select tells you what type of license it falls under. You can search by keyword and “save” icons to your favorites for later use (no login required).\n\n\n51. Animated Backgrounds\n\n\nThis one made the top 60 this year but probably isn’t the most practical front-end tool of the bunch. Like I said at the outset, some stuff gets clicked on just out of sheer curiosity. It’s a gallery of animated backgrounds, sourced from various CodePen demos.\n\n\n\n\n\n\n\nThe gallery is useful in that it displays the backgrounds as pre-recorded videos so you don’t have to worry about all the demos loading and crashing your browser tab. Use these sparingly, if ever, as they often use heavy amounts of JavaScript and CSS.\n\n\n50. Pico.css\n\n\nThis is a different type of CSS framework compared to what’s popular nowadays. It’s kind of like an anti-Tailwind tool and more of a starter CSS file (like a reset) than a full-fledged framework.\n\n\n\n\n\n\n\nPico.css provides elegant default styles on all native HTML elements (which you can preview here) without the need to add swaths of classes to your markup — and the whole thing is less than 10kb minified and gzipped.\n\n\n49. Coding Fonts\n\n\nCoding fonts seem to be an exciting new trend of late, and CSS-Tricks has taken advantage of that with this little interactive info app.\n\n\n\n\n\n\n\nSelect a font on the left to display example code, typeface info (ligatures, italics, etc.), cost (most are free), along with options to display example code for HTML, CSS, or JavaScript.\n\n\n48. UI-Neumorphism\n\n\nThis React library is based on the old skeumorphism trend that apparently went out of style a number of years ago. Is this trend making a comeback? Probably not. In fact, this React library is about two years old even though I shared it for the first time this past year.\n\n\n\n\n\n\n\nThe library includes a slew of different components that all implement “neumorphism” look. Interesting to look at, but might not fit many projects.\n\n\n47. Beautiful CSS Buttons\n\n\nJust about every app or website needs buttons, so a collection like this always seems to do well. Many of these are different from what you probably have seen elsewhere.\n\n\n\n\n\n\n\nA lot of the buttons include interesting hover effects and you can easily copy and paste the HTML and CSS for any single button directly on the page.\n\n\n46. Shaper\n\n\nThis interactive tool lets you fiddle with various UI settings live on the page to build different page elements. Once you’ve tweaked things as you like, you can grab the code, which uses CSS custom properties.\n\n\n\n\n\n\n\nYou can switch between demo view and “specs” view (i.e. the code along with other useful info). This tool has a particular focus on typography along with the rest of the UI styles, which is an important part of getting a layout looking right.\n\n\n45. Prestige\n\n\nThis is a text-based HTTP client in the browser — like Postman but without an interface. It allows you to define requests in plain text, which you can optionally save as a Gist. It includes isolated cookie management, and has both dark and light modes.\n\n\n\n\n\n\n\nAs the author explains, “I built Prestige because I needed an app like this when working […] and playing with external APIs.”\n\n\n44. HTML.cafe\n\n\nThis is probably the simplest tool in the entire list. HTML.cafe is more or less a poor-man’s CodePen, for lack of a better term. I wouldn’t think people would be interested in this sort of thing, since there are already powerful tools that already do what it does. Nonetheless, it’s a really simple HTML editor with live preview.\n\n\n\n\n\n\n\nThere are no separate CSS or JavaScript windows like there are CodePen, but you can easily include those in <style> or <script> elements if you wish. I think the best use of this tool might be for teachers helping students who are completely unfamiliar with HTML, as this gets all the complexities out of the way.\n\n\n43. Charts.css\n\n\nThis front-end tool is sort of like a cross between Tailwind CSS and Chart.js. In short, Charts.css is a CSS framework that lets you use utility classes to build charts using HTML and CSS.\n\n\n\n\n\n\n\nYou can create bar charts, line charts, multi-dataset charts, percentage columns, and 3D bar charts. And best of all, the charts are accessible, responsive, and easy to customize to your branding needs.\n\n\n42. Buttons Generator\n\n\n“Buttons Generator” is probably a bit of a misnomer, since the page doesn’t exactly let you “generate” buttons. Like the previous buttons resource, this is a gallery of buttons built with HTML and CSS.\n\n\n\n\n\n\n\nThey’re divided up by category, include some neat hover or click effects, and you can click any button to copy the code to your clipboard.\n\n\n41. Doodad Pattern Generator\n\n\nThis interactive tool allows you to build your own patterned backgrounds that you can export in a variety of formats. You can use the “shuffle” button to generate a random pattern, or select from various category styles. You can also edit colors, filters, and various transforms.\n\n\n\n\n\n\n\nThe export dialog lets you save patterns and load previously-saved ones via Local Storage. Export your patterns as JPEG, PNG, inline SVG, SVG file, or CSS background.\n\n\n40. Kaboom\n\n\nEvery year I come across at least one or two new JavaScript game libraries, and this is the one that made this year’s list. It looks to have a fairly elegant and easy-to-use API and includes a healthy set of components, events, and other built-in functions.\n\n\n\n\n\n\n\nThere’s a handy playground to get your feet wet with using it and an introductory tutorial to get started.\n\n\n39. Skuawk\n\n\nIf you want an alternative to Unsplash, which is likely one of your go-to sources for free stock images, this collection of beautiful public domain images might be a good option with some gorgeous photos.\n\n\n\n\n\n\n\nThere are 16 categories of images from various photographers that have all allowed their images to be used under a CC0 license (i.e. do whatever you want).\n\n\n38. Glassmorphism CSS Generator\n\n\nThis is an online generator that lets you build a “glassmorphism” effect on a page element — kind of like frosted glass. This tool is apparently supposed to be part of a larger UI library that will incorporate this sort of effect on a number of different UI components.\n\n\n\n\n\n\n\nWhatever the case, I like this effect more than the “neumorphism” one and apparently my audience agrees.\n\n\n37. Kalia\n\n\nThis is one of three VS Code tools that made the list. It’s an attractive color scheme you can use for your VS Code setup.\n\n\n\n\n\n\n\nThe extension lists only about 800 installs so far, which is surprising, but it has a nice pastel color look that I think many will enjoy.\n\n\n36. AdminJS\n\n\nIf you’re a Node developer, this is an open-source admin panel that can be added to a Node.js app. It will generate a UI for you, based on data you’ve added from almost any database, allowing you and your team to manage your app’s content.\n\n\n\n\n\n\n\nYou can try it out using this example app, which is based on MongoDB and Postgres.\n\n\n35. Pancake\n\n\nHere’s another game engine to build cross-platform HTML5-based 2D games. This one got a lot of traction when I first shared it. While it made the list,it seems to require Python during the build step after you write the game.\n\n\n\n\n\n\n\nThe basic API uses plain JavaScript and you can view lots of neat little examples here.\n\n\n34. Mosaic Lite\n\n\nI find lots of dashboard templates built with different front-end technologies. This one is made with Tailwind and React and includes optional chart components built with Chart.js.\n\n\n\n\n\n\n\nLike other similar templates, this can be used for SaaS products, admin dashboards, and more. You can view a live demo.\n\n\n33. Iconduck\n\n\nHere’s another great source for open-source icons, this one offering well over 100,000 icons that are searchable by keyword and are all available for use in commercial projects.\n\n\n\n\n\n\n\nThe site includes ability to like and save icons and icon collections for later use (requires cookies, but no login).\n\n\n32. Luxa CSS\n\n\nThis is a CSS library that was actually released in mid-to late 2020, but I shared it for the first time in 2021. It’s described as a “minimalist” CSS framework.\n\n\n\n\n\n\n\nLuxa CSS includes some base styles, along with various components, helpers, and layout styles, which you can view in the docs or by checking out this CodePen collection.\n\n\n31. Glitter\n\n\nGlitter was definitely one of the strangest — yet coolest — front-end tools I came across over the past year and it seems to have drawn a lot of interest even though it’s as simple as any tool gets.\n\n\n\n\n\n\n\nIt’s a generator that produces text in a glitter-like style, which you can save as SVG. Definitely not for 99% of your projects, but a pretty cool text effect.\n\n\n30. Components AI\n\n\nWhen I originally shared this one, I was sharing the theme builder alone, which is what got it on this list. But it’s worth sharing the entire set of 15+ tools.\n\n\n\n\n\n\n\nIn addition to the theme builder, there’s a syntax highlighter builder, gradient and shadow tools, SVG pattern generators, animated backgrounds, and lots more.\n\n\n29. Unicode Arrows\n\n\nThis is pretty straightforward. Unicode Arrows a one-stop location to copy and paste — you guessed it — Unicode arrows along with each arrow’s associated hex code.\n\n\n\n\n\n\n\nNot much else to say about this one except that the site lets you buy Unicode arrow jewellery. Not that a bunch of coding nerds would be interested in that, no way.\n\n\n28. Type Scale Clamp Generator\n\n\nThis is not the first tool to attempt to generate a type scale for you, but it’s a relatively new one that incorporates CSS’s clamp() function.\n\n\n\n\n\n\n\nThe front-end tool allows you to select a range, font, preview text, and you can even test the responsiveness (though I don’t see how useful that latter feature is, considering this is just text).\n\n\n27. AnimXYZ\n\n\nThis one is described as “the first composable CSS animation toolkit” with support for Vue and React. What that means exactly is that you don’t have to write any keyframes. It seems to be kind of like Tailwind for animations, since you’re only using HTML classes.\n\n\n\n\n\n\n\nIn addition to adding classes, the values are built entirely using CSS variables. That means you can customize the values as you wish by modifying the variables themselves.\n\n\n26. Frontend Toolkit\n\n\nHere’s another all-in-one tools solution that includes more than 20 tools for doing various coding and image-related tasks.\n\n\n\n\n\n\n\nIt includes tools for CSS, JSON, favicons, SVG, image compression, npm, regex, and more.\n\n\n25. colorpalettes.earth\n\n\nHere’s one that’s unique in the list and may inspire some cool designs. This tool displays color palettes sourced from images of nature (taken from Unsplash) that are included on the site, with new palettes added regularly.\n\n\n\n\n\n\n\nClick any image and you’ll get a modal with access to the hex value for each of the colors that make up the image-derived palette.\n\n\n24. Uncut\n\n\nAdding to the diversity of this list, here’s a typeface catalogue that currently features 90 typefaces with a focus on contemporary, or modern, type.\n\n\n\n\n\n\n\nAll fonts included are open-source, so you’re free to use them in personal and commercial projects.\n\n\n23. Lowdefy\n\n\nBuilding internal tools seems to be a hot thing nowadays and this is one solution you might want to look into that lets you build your tools by writing YAML.\n\n\n\n\n\n\n\nIt’s described as an “open-source low-code framework to build web apps, admin panels, BI dashboards, workflows, and CRUD apps with ease.”\n\n\n22. JavaScript Booster\n\n\nThis is a VS Code extension that aims to help you, as the it says on the tin, boost your JavaScript, TypeScript, and React coding productivity. The extension adds a light bulb icon at certain points in your code, indicating that you can instantly trigger predefined code refactorings.\n\n\n\n\n\n\n\nSome examples include converting a regular function to an arrow function, flip an if-else construct, along with some React-specific refactorings.\n\n\n21. Layout Patterns\n\n\nThis is one of the most recent additions to Google Developers’ web.dev resource that I’m assuming will continue to grow in the coming year.\n\n\n\n\n\n\n\nIt includes a number of UI patterns “built using modern CSS APIs.” In other words, it’s a very forward-thinking collection of CSS examples, but should be used with caution since some of the technologies incorporated may not have full browser support yet.\n\n\n20. Baseline Background Remover\n\n\nAdmittedly, AI-based background remover tools have been a dime-a-dozen recently. This one is free and works really well from my brief testing with it.\n\n\n\n\n\n\n\nYou can upload an image of up to 5MB and it will accept JPEG and PNG files. The resulting image is downloaded a transparent PNG, which you can use to add your own background or leave as transparent.\n\n\n19. Theatre.js\n\n\nHere’s another animation library, but this time a JavaScript solution that allows you to animate DOM elements or WebGL using a convenient visual editor that works along with the code you write.\n\n\n\n\n\n\n\nThis is a really powerful tool that’s hard to encapsulate in just a few paragraphs. There’s a lenghty chapter-based video used throughout the docs that really helps if you want to get familiar with it.\n\n\n18. Transition.css\n\n\nDrop-in CSS libraries are always popular and I’ll usually find at least one or two good ones each year. This one includes some neat CSS transitions you probably haven’t seen elsewhere.\n\n\n\n\n\n\n\nYou can try them out right on the page. My favourites are the ones that incorporate some hesitation in the animation, for an added uniqueness.\n\n\n17. The Component Gallery\n\n\nThis is sort of a catch-all for design systems as it features component examples sourced from real design systems built in various technologies — React, CSS, Angular, Vue, etc. — by various brands, including eBay, Goldman Sachs, GOV.UK, and lots more.\n\n\n\n\n\n\n\nIt works as a handy reference for anyone building their own design system, as you can compare the same components across the existing systems included here.\n\n\n16. party.js\n\n\nThis is a fun and unique JavaScript library that lets you add particle effects to a web page, specifically confetti and sparkles.\n\n\n\n\n\n\n\nYou’ll only use this in very specific circumstances, but it’s nice that you can customize the particle shapes, number of particles, spread, and so on.\n\n\n15. Headless UI\n\n\nIn the words of Nacho Libre, now we’re really getting down to the nitty gritty. This UI component library was released in late 2020 and has already amassed more than 12,000 stars on GitHub.\n\n\n\n\n\n\n\nThe components (dropdown menu, tabs, popover, etc.) are “headless.” That doesn’t mean their capa was detated; it means they’re unstyled so that you can brand them as you please. They’re also fully accessible, designed to integrate with Tailwind CSS, and are compatible with React and Vue. That’s right — this one hits almost every front-end buzzword for 2022.\n\n\n14. Turbo\n\n\nThis is another one that did well throughout 2021 after a late 2020 release. It’s billed as “the speed of a single-page web application without having to write any JavaScript.”\n\n\n\n\n\n\n\nIn brief, Turbo is a library that lets you take advantage of four main features: Turbo Drive, Turbo Frames, Turbo Streams, and Turbo Native. These use web components to add single-page app-like performance and interactivity to your pages without the need to reinvent the wheel with heavy custom scripts.\n\n\n13. tidy.js\n\n\nThis is a library of data-related JavaScript functions specifically for “tidying up” your data.\n\n\n\n\n\n\n\nIt includes 70+ functions under different categories (tidying, grouping, math, sequencing, etc.) and you can mess around with the different features using this playground.\n\n\n12. Tail-Kit\n\n\nThis is the first Tailwind UI kit on the list of top front-end tools, and it’s a doozy. It has more than 250 open-source components that are compatible with React, Vue, and Angular.\n\n\n\n\n\n\n\nThere are components categorized under Elements, Forms, Commerce, Navigation, Sections, and Lists, or you can use from a number of templates, categorized under Dashboards, Landing Pages, and Error Pages.\n\n\n11. Tailwind Components\n\n\nAnd here’s another Tailwind UI kit, again featuring open-source components and templates under 13 more refined categories, along with an “awesome” category that includes free but premium components.\n\n\n\n\n\n\n\nThis site is more or less a directory of various community-contributed Tailwind components, rather than a cohesive set of UI elements like other kits.\n\n\n10. Pikaday\n\n\nA JavaScript date picker cracks the top 10 tools of the year in 2021 — who would have thunk it? It seems to check all the boxes necessary for a date picker component: No dependencies, lightweight, and uses modular CSS for styling.\n\n\n\n\n\n\n\nLike a few other front-end tools on this list, this isn’t a new tool. It’s been around for a while, but I first shared it in 2021 and it amazingly ended up in this year’s top 10.\n\n\n9. HTML Boilerplates\n\n\nThis is a practical little online HTML generator that lets you customize the type of HTML starter template you want to generate, providing toggle options for what to include. This is probably most useful for generating a quick template for a landing page or demo.\n\n\n\n\n\n\n\nIn all honesty, I think it would be good if the tool was updated to use a few more modern options, but for a simple HTML starting point this gets the job done.\n\n\n8. Whirl\n\n\nHere’s another CSS animation library, this time specifically a collection of animations for use as loading spinners. It includes 100+ animated loaders, some of which are really neat and unique.\n\n\n\n\n\n\n\nI like how the animations in the list (which you can try right on the page) are categorized as pseudo-element, single element, and multi-element. The best one by far is the “pong” animation, though I question whether anyone would correctly classify that as indicative of “content loading”!\n\n\n7. Riju\n\n\nImagine if CodePen and JSFiddle had a baby, then you chopped that baby into 224 pieces. That’s what Riju is — a fast online playground for just about every programming language.\n\n\n\n\n\n\n\nI can’t imagine there’s any coding language you’d want to play around with that’s missing here and most of it is stuff that you don’t normally associate with running in the browser.\n\n\n6. DevUI\n\n\nThis is an Angular toolkit that’s suitable for enterprise-level apps and includes components, icons, an admin dashboard template, and a design system for styling and branding.\n\n\n\n\n\n\n\nI’m guessing this made the top 10 list of front-end tools because I didn’t specifically mention at first that it is for Angular apps (which isn’t clear on the home page either). Nonetheless, I did specify that it’s for enterprise-level projects, and that seemed to grab the attention of many.\n\n\n5. Pollen\n\n\nThis library works as a foundation for your own design system, and its practicality is evident in its use of CSS custom properties.\n\n\n\n\n\n\n\nIt provides you with low-level design tokens that you can easily customize and extend. Modules include Typography, Layout, UI, Grid, and Colors. I’m guessing there will be more added to this, so it’s one to keep an eye on in the coming year.\n\n\n4. AlterNight\n\n\nDevelopers love VS Code, dark mode, and plugins. Combine those three things, and you have a great little front-end tool.\n\n\n\n\n\n\n\nAlterNight is a beautiful VS Code theme and has a modest ~3,000 installs so far, but it was able to crack the top five in this year’s list.\n\n\n3. UIsual\n\n\nHere’s a collection of front-end templates, but with a bit of a twist that I think many seemed to appreciate: they’re greyscale.\n\n\n\n\n\n\n\nThe set currently includes eight templates with diverse layouts. With the lack of any color-based branding, these are a good option to customize to your own needs without looking like every other landing page out there.\n\n\n2. Supabase UI\n\n\nHere’s yet another open-source component library, this one for React and designed specifically for the Supabase product (an open-source Firebase alternative).\n\n\n\n\n\n\n\nIt’s Tailwind-ready and I should also point out that it’s still in early development. Nonetheless, it was popular enough to make it to number 2 on this list.\n\n\n1. CSS Layout Generator\n\n\nThis was the most-clicked tool in my newsletter over the past year. It’s a full-featured CSS and JSX generator for producing different kinds of layouts using the CSS Grid Layout syntax.\n\n\n\n\n\n\n\nClick on any of the five layout styles, and you’ll come to an interactive online editor that lets you mess around with various CSS Grid features like rows, columns, row gap, column gap, direction, grid alignment, and lots more. There’s quite a bit to play around with here, and apparently the tool will later include the Flexbox syntax for some of the examples.\n\n\nWhat were your favorite front-end tools of 2021?\n\n\nThat wraps up this year’s list of most interesting front-end tools. I hope you found something here you can bookmark or start using in a new project. It’s pretty cool that this list contained such a variety of tools — there were UI kits, animation libraries, a stock photo site, image tools, and more.\n\n\n\nAre there front-end tools not mentioned in this list that you enjoyed discovering over the past year? Feel free to drop it in the comments. You can also subscribe to my newsletter for more front-end tools in 2022 and feel free to hit me up if you’ve built something yourself that you’d like to share in a future issue.\n\nWhat Were the Hottest Front-End Tools in 2021? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-17T15:13:26.000Z",
      "date_modified": "2022-01-17T15:13:26.000Z",
      "_plugin": {
        "pageFilename": "e63e5bd9474e7b095d5e10cfde429790626074dcd32861bf29f8f4fdf79b6703.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360928",
      "url": "https://css-tricks.com/css-me-not-bookmarklet/",
      "title": "Using the CSS Me Not Bookmarklet to See (and Disable) CSS Files",
      "summary": "Stoyan is absolutely correct. As much as we all love CSS, it’s still an important player in how websites load and using less of it is a good thing. He has a neat new bookmarklet called CSS Me Not …\n\nUsing the CSS Me Not Bookmarklet to See (and Disable) CSS Files originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Stoyan is <a href=\"https://calendar.perfplanet.com/2021/css-me-not/\" rel=\"noopener\">absolutely correct</a>. As much as we all love CSS, it&#8217;s still an important player in how websites load and using less of it is a good thing. He has a neat new bookmarklet called CSS Me Not to help diagnose unnecessary CSS files, but we&#8217;ll get to that in a moment.</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>The [problem] is that CSS is in the critical path, it blocks rendering and often even&nbsp;<a href=\"https://calendar.perfplanet.com/2021/combat-css-blockage-with-this-one-weird-little-trick/\" rel=\"noopener\">JavaScript execution</a>. We love CSS, it’s magic, it can do unbelievable feats and fix broken UIs and&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/hue-rotate()\" rel=\"noopener\">manipulate images</a>&nbsp;and&nbsp;<a href=\"https://diana-adrianne.com/purecss-francine/\" rel=\"noopener\">draw amazing pictures</a>. We love CSS. We just want… less of it, because of its inherently blocking nature.</p></blockquote>\n\n\n\n<p>Sometimes our sites use <em>entire stylesheets</em> that are simply unnecessary. I hate to admit it, but WordPress is a notorious offender here, loading stylesheets for plugins and blocks that you might not even really be using. I&#8217;m in that position on this site as I write. I just haven&#8217;t found the time to root out a couple of little stylesheets I don&#8217;t need from loading.</p>\n\n\n\n<span id=\"more-360928\"></span>\n\n\n\n<p>Stoyan <a href=\"https://calendar.perfplanet.com/2021/css-me-not/#:~:text=To%20install%20the%20bookmarklet\" rel=\"noopener\">created a quick bookmarklet called CSS Me Not</a> to see all those CSS files. The big benefit, of course, is that it lets you know what you&#8217;re up against.</p>\n\n\n\n<p>You could find these stylesheets in DevTools as well, but the CSS Me Not bookmarklet makes it extra easy and has a killer bonus feature: <strong>turning off those stylesheets.</strong> Testing the bookmarklet here on CSS-Tricks, I can see four stylesheets that WordPress loads (because of settings and plugins) that I know I don&#8217;t need. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2643\" height=\"1961\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=2643%2C1961&#038;ssl=1\" alt=\"Screenshot of a Chrome browser window showing the CSS Me Not bookmarklet circled in red just below the address bar, Below that is a table injected above the CSS-Tricks website showing six stylesheets including an action to disable a sheet, the sheet's media, the sheet's host, and the sheet's name.\" class=\"wp-image-360933\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?w=2643&amp;ssl=1 2643w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=1024%2C760&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=768%2C570&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=1536%2C1140&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=2048%2C1520&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.25.43@2x.png?resize=1000%2C742&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you wanted to do this in DevTools instead, you could filter your Network requests by CSS, find the stylesheet that you want to turn off, right-click and block it, and re-load. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1886\" height=\"1018\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?resize=1886%2C1018&#038;ssl=1\" alt=\"DevTools window screenshot with the Network panel open and the select menu open on a listed stylsheet with the option to block the request URL highlighted in bright blue.\" class=\"wp-image-360934\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?w=1886&amp;ssl=1 1886w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?resize=300%2C162&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?resize=1024%2C553&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?resize=768%2C415&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?resize=1536%2C829&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-09-at-09.41.42@2x.png?resize=1000%2C540&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I&#8217;ve been <a href=\"https://css-tricks.com/taking-control-cssjs-wordpress-plugins-load/\">fighting this fight</a> for ages, dequeuing scripts and styles in WordPress that I don&#8217;t want. </p>\n\n\n\n<p>Removing totally unused stylesheets is an obvious win, but there is the more squirrely issue of removing <a href=\"https://css-tricks.com/how-do-you-remove-unused-css-from-a-site/\">unused CSS</a>. I mention in that post the one-true-way of really knowing if any particular CSS is unused, which is attaching a <code>background-image</code> to every selector and then checking the server logs after a decent amount of production time to see which of those images were never requested. Stoyan corroborates my story here:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>UnCSS is sort of a “lab”. The “real world” may surprise you. So a trick we did at SomeCompany Inc. was to instrument all the CSS declarations at build time, where each selector gets a 1×1 transparent background image. Then rummage through the server logs after a week or so to see what is actually used.</p></blockquote>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-me-not-bookmarklet/\">Using the CSS Me Not Bookmarklet to See (and Disable) CSS Files</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Stoyan is absolutely correct. As much as we all love CSS, it’s still an important player in how websites load and using less of it is a good thing. He has a neat new bookmarklet called CSS Me Not to help diagnose unnecessary CSS files, but we’ll get to that in a moment.\n\n\n\nThe [problem] is that CSS is in the critical path, it blocks rendering and often even JavaScript execution. We love CSS, it’s magic, it can do unbelievable feats and fix broken UIs and manipulate images and draw amazing pictures. We love CSS. We just want… less of it, because of its inherently blocking nature.\n\n\n\nSometimes our sites use entire stylesheets that are simply unnecessary. I hate to admit it, but WordPress is a notorious offender here, loading stylesheets for plugins and blocks that you might not even really be using. I’m in that position on this site as I write. I just haven’t found the time to root out a couple of little stylesheets I don’t need from loading.\n\n\n\n\n\n\n\nStoyan created a quick bookmarklet called CSS Me Not to see all those CSS files. The big benefit, of course, is that it lets you know what you’re up against.\n\n\n\nYou could find these stylesheets in DevTools as well, but the CSS Me Not bookmarklet makes it extra easy and has a killer bonus feature: turning off those stylesheets. Testing the bookmarklet here on CSS-Tricks, I can see four stylesheets that WordPress loads (because of settings and plugins) that I know I don’t need. \n\n\n\n\n\n\n\nIf you wanted to do this in DevTools instead, you could filter your Network requests by CSS, find the stylesheet that you want to turn off, right-click and block it, and re-load. \n\n\n\n\n\n\n\nI’ve been fighting this fight for ages, dequeuing scripts and styles in WordPress that I don’t want. \n\n\n\nRemoving totally unused stylesheets is an obvious win, but there is the more squirrely issue of removing unused CSS. I mention in that post the one-true-way of really knowing if any particular CSS is unused, which is attaching a background-image to every selector and then checking the server logs after a decent amount of production time to see which of those images were never requested. Stoyan corroborates my story here:\n\n\n\nUnCSS is sort of a “lab”. The “real world” may surprise you. So a trick we did at SomeCompany Inc. was to instrument all the CSS declarations at build time, where each selector gets a 1×1 transparent background image. Then rummage through the server logs after a week or so to see what is actually used.\n\nUsing the CSS Me Not Bookmarklet to See (and Disable) CSS Files originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-15T00:06:56.000Z",
      "date_modified": "2022-01-15T00:06:56.000Z",
      "_plugin": {
        "pageFilename": "dd67f0e4d541cc98617a4e6a6abb171d37440522a660c0aadfc172c23e0cbcd6.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360864",
      "url": "https://css-tricks.com/mondrian-art-in-css-from-5-code-artists/",
      "title": "Mondrian Art in CSS From 5 Code Artists",
      "summary": "Mondrian is famous for paintings with big thick black lines forming a grid, where each cell is white, red, yellow, or blue. This aesthetic pairs well with the notoriously rectangular web, and that hasn’t gone unnoticed over the years with …\n\nMondrian Art in CSS From 5 Code Artists originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Mondrian is famous for paintings with big thick black lines forming a grid, where each cell is white, red, yellow, or blue. This aesthetic pairs well with the notoriously rectangular web, and that hasn&#8217;t gone unnoticed over the years with CSS developers. I saw some Mondrian Art in CSS going around the other day and figured I&#8217;d go looking for others I&#8217;ve seen over the years and round them up.</p>\n\n\n\n<span id=\"more-360864\"></span>\n\n\n<h3 id=\"vasilis-van-gemertwhat-if-mondrian-used-css-instead-of-paint\">Vasilis van Gemert:<br><a href=\"https://vasilis.nl/nerd/what-if-mondriaan-used-css-instead-of-paint/\" rel=\"noopener\">What if Mondrian used CSS instead of paint?</a></h3>\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Many people have tried to recreate a work of art by Mondriaan with CSS. It seems like a nice and simple exercise: rectangles are easy with CSS, and now with grid, it is easy to recreate most of his works. I tried it as well, and it turned out to be a bit more complicated than I thought. And the results are, well,&nbsp;surprising.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"3336\" height=\"3178\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=3336%2C3178&#038;ssl=1\" alt=\"Screenshot of a webpage with a large serif font in various sizes reading What if Mondrian Used CSS instead of Paint? above two paragraphs discussing Mondrian Art in CSS.\" class=\"wp-image-361759\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?w=3336&amp;ssl=1 3336w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=300%2C286&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=1024%2C976&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=768%2C732&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=1536%2C1463&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=2048%2C1951&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?resize=1000%2C953&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.03-PM.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"jen-simmons-labmondrian-art-in-css-grid\">Jen Simmons Lab:<br><a href=\"https://labs.jensimmons.com/2017/01-011.html\" rel=\"noopener\">Mondrian Art in CSS Grid</a></h3>\n\n\n<p>I love how Jen went the extra mile with the texture. Like most of these examples, <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">CSS grid</a> is used heavily.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2750\" height=\"2790\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=2750%2C2790&#038;ssl=1\" alt=\"Mondrian Art in CSS Grid from Jen Simmons. Includes rough grungy texture across the entire piece.\" class=\"wp-image-361760\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?w=2750&amp;ssl=1 2750w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=296%2C300&amp;ssl=1 296w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=1009%2C1024&amp;ssl=1 1009w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=768%2C779&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=1514%2C1536&amp;ssl=1 1514w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=2019%2C2048&amp;ssl=1 2019w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=1000%2C1015&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-2.53.47-PM.png?resize=100%2C100&amp;ssl=1 100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_aNjXLz\" src=\"//codepen.io/anon/embed/aNjXLz?height=550&amp;theme-id=1&amp;slug-hash=aNjXLz&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed aNjXLz\" title=\"CodePen Embed aNjXLz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"jen-schiffervar-t-piet-mondrian\">Jen Schiffer:<br><a href=\"http://vart.institute/mondrian/\" rel=\"noopener\"><code>var t;</code>: Piet Mondrian</a></h3>\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>I started with Mondrian not because he is my favorite artist (he is not), or that his work is very recognizeable (it is), but because I thought it would be a fun (yes) and easy start (lol nope) to this project.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2874\" height=\"2824\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=2874%2C2824&#038;ssl=1\" alt=\"Mondrian Art in CSS randomized 12 times in a 4 by 3 grid of boxes. A bright yellow header is above the grid bearing the site title: var t.\" class=\"wp-image-361762\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?w=2874&amp;ssl=1 2874w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=300%2C295&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=1024%2C1006&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=768%2C755&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=1536%2C1509&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=2048%2C2012&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.08.45-PM.png?resize=1000%2C983&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yoseD\" src=\"//codepen.io/anon/embed/yoseD?height=550&amp;theme-id=1&amp;slug-hash=yoseD&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yoseD\" title=\"CodePen Embed yoseD\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"riley-wongmake-your-own-mondrianstyle-painting-with-code\">Riley Wong:<br><a href=\"https://codepen.io/nancypwong/pen/vZaLXj\" rel=\"noopener\">Make Your Own Mondrian-Style Painting with Code</a></h3>\n\n\n<p>There is a <a href=\"https://github.com/rileynwong/mondrian\" rel=\"noopener\">12-step tutorial</a> on GitHub.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vZaLXj\" src=\"//codepen.io/anon/embed/vZaLXj?height=450&amp;theme-id=1&amp;slug-hash=vZaLXj&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vZaLXj\" title=\"CodePen Embed vZaLXj\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"adam-fuhrercss-mondrian\"><br>Adam Fuhrer:<br><a href=\"https://github.com/adamfuhrer/css-mondrian\" rel=\"noopener\">CSS Mondrian</a></h3>\n\n\n<blockquote class=\"wp-block-quote\"><p>Generative Piet Mondrian style art using CSS grid.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2788\" height=\"2788\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=2788%2C2788&#038;ssl=1\" alt=\"Screenshot of a full page Mondrian art example. There is a refresh button centered at the bottom of the page.\" class=\"wp-image-361763\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?w=2788&amp;ssl=1 2788w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=1024%2C1024&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=768%2C768&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=1536%2C1536&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=2048%2C2048&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=1000%2C1000&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.11.32-PM.png?resize=100%2C100&amp;ssl=1 100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"john-broerscss-mondriaan-grid\">John Broers:<br><a href=\"https://johnbroers.nl/portfolio/css-mondriaan-grid\" rel=\"noopener\">CSS Mondriaan Grid</a></h3>\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2690\" height=\"2284\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=2690%2C2284&#038;ssl=1\" alt=\"An example of Mondrian Art in CSS with a &quot;Generate New&quot; option. The example is a square box with plenty of padding around it on the white background page.\" class=\"wp-image-361764\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?w=2690&amp;ssl=1 2690w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=300%2C255&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=1024%2C869&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=768%2C652&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=1536%2C1304&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=2048%2C1739&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-3.13.20-PM.png?resize=1000%2C849&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/mondrian-art-in-css-from-5-code-artists/\">Mondrian Art in CSS From 5 Code Artists</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Mondrian is famous for paintings with big thick black lines forming a grid, where each cell is white, red, yellow, or blue. This aesthetic pairs well with the notoriously rectangular web, and that hasn’t gone unnoticed over the years with CSS developers. I saw some Mondrian Art in CSS going around the other day and figured I’d go looking for others I’ve seen over the years and round them up.\n\n\n\n\n\n\nVasilis van Gemert:What if Mondrian used CSS instead of paint?\n\n\nMany people have tried to recreate a work of art by Mondriaan with CSS. It seems like a nice and simple exercise: rectangles are easy with CSS, and now with grid, it is easy to recreate most of his works. I tried it as well, and it turned out to be a bit more complicated than I thought. And the results are, well, surprising.\n\n\n\n\n\n\nJen Simmons Lab:Mondrian Art in CSS Grid\n\n\nI love how Jen went the extra mile with the texture. Like most of these examples, CSS grid is used heavily.\n\n\n\n\n\n\n\nCodePen Embed Fallback\n\n\nJen Schiffer:var t;: Piet Mondrian\n\n\nI started with Mondrian not because he is my favorite artist (he is not), or that his work is very recognizeable (it is), but because I thought it would be a fun (yes) and easy start (lol nope) to this project.\n\n\n\n\n\n\n\nCodePen Embed Fallback\n\n\nRiley Wong:Make Your Own Mondrian-Style Painting with Code\n\n\nThere is a 12-step tutorial on GitHub.\n\n\n\nCodePen Embed Fallback\n\n\nAdam Fuhrer:CSS Mondrian\n\n\nGenerative Piet Mondrian style art using CSS grid.\n\n\n\n\n\n\nJohn Broers:CSS Mondriaan Grid\n\n\n\n\nMondrian Art in CSS From 5 Code Artists originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-14T18:15:03.000Z",
      "date_modified": "2022-01-14T18:15:03.000Z",
      "_plugin": {
        "pageFilename": "01c9999244fd922995f016ddadaadf0df38b06e46156b405025fa61a5d0b5ff8.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360781",
      "url": "https://css-tricks.com/making-your-first-custom-svelte-transition/",
      "title": "How to Build Your First Custom Svelte Transition",
      "summary": "The Svelte transition API provides a first-class way to animate your components when they enter or leave the document, including custom Svelte transitions. By default, the transition directive uses CSS animations, which generally offer better performance and allow the browser’s …\n\nHow to Build Your First Custom Svelte Transition originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>The <a href=\"https://svelte.dev/docs#run-time-svelte-transition\" rel=\"noopener\">Svelte <code>transition</code> API</a> provides a first-class way to animate your components when they enter or leave the document, including custom Svelte transitions. By default, the <code>transition</code> directive uses CSS animations, which generally offer better performance and allow the browser’s main thread to remain unblocked. The API is as simple as this: <code>&lt;element transition:transitionFunction /&gt;</code>. You can also specify <code>in</code> or <code>out</code> directives which are uni-directional transitions, only running when the element is mounted <em>or</em> unmounted.</p>\n\n\n\n<span id=\"more-360781\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"546\" height=\"390\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-svelte-transition-example.gif?resize=546%2C390&#038;ssl=1\" alt=\"An animated example of a custom Svelte transition showing a to do list. An item is typed and animated into the list of items when entered. Clicking a done button animates the item out of view.\" class=\"wp-image-360795\" data-recalc-dims=\"1\"/><figcaption>Example of a working Svelte transition (<a href=\"#demo-jump\">jump to demo</a>)</figcaption></figure>\n\n\n\n<p>Svelte offers a runtime <a href=\"https://svelte.dev/docs#svelte_transition\" rel=\"noopener\"><code>svelte/transition</code></a> package that ships with seven prepackaged Svelte transition functions, all of which can be dropped in and tweaked to your heart’s desire. Pairing this with the <a href=\"https://svelte.dev/docs#svelte_easing\" rel=\"noopener\"><code>svelte/easing</code></a> package, allows for a wide swath of interactions, without writing any of the transition code yourself. Play around with <a href=\"https://svelte.dev/repl/52c1e7ae1df14a4cbecca590080f0970?version=3.44.2\" rel=\"noopener\">different transitions and easing functions</a> to get a feel for what is possible.</p>\n\n\n\n<iframe src=\"https://codesandbox.io/embed/svelte-transition-playground-hprbi?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"svelte-transition-playground\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n\n<p class=\"is-style-explanation ticss-f6fd473d\">Looking for instructions on how to get started with Svelte? We have a <a href=\"https://css-tricks.com/getting-acquainted-with-svelte-the-new-framework-on-the-block/\">solid overview</a> for you to check out.</p>\n\n\n<h3 id=\"the-svelte-custom-transition-api\">The Svelte Custom Transition API</h3>\n\n\n<p>If you need even more control than what the Svelte Transition API offers out of the box, Svelte permits you to specify your own custom transition function, as long as you adhere to a few conventions. From the docs, here’s what the custom transition API looks like:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">transition = (node: HTMLElement, params: any) => {\n  delay?: number,\n  duration?: number,\n  easing?: (t: number) => number,\n  css?: (t: number, u: number) => string,\n  tick?: (t: number, u: number) => void\n} </code></pre>\n\n\n\n<p>Let’s break it down. A transition function takes a reference to the DOM node where the <code>transition</code> directive is used and returns an object with some parameters that control the animation and, most importantly, a <code>css</code> or <code>tick</code> function.</p>\n\n\n\n<p>The <code>css</code> function’s job is to return a string of CSS that describes the animation, typically including some kind of transform or opacity change. Alternatively, you can opt to return a <code>tick</code> function, which lets you control every aspect of the animation with the power JavaScript, but pays a performance penalty since this type of transition does not use CSS animations.</p>\n\n\n\n<p>Both the <code>css</code> and <code>tick</code> functions take two parameters called <code>(t, u)</code> by convention. <code>t</code> is a decimal number that travels from <code>0.00</code> to <code>1.00</code> while the element is entering the DOM and from <code>1.00</code> back to <code>0.00</code> when the element is leaving. The <code>u</code> parameter is the inverse of <code>t</code> or <code>1 - t</code> at any given moment. For example, if you return a string of <code>transform: scale(${t})</code>, your element would smoothly animate from <code>0</code> to <code>1</code> on enter, and vice versa on exit.</p>\n\n\n\n<p>These concepts may seem a bit abstract, so let’s solidify them by building our own custom Svelte transition!</p>\n\n\n<h3 id=\"building-your-first-custom-svelte-transition\">Building your first custom Svelte transition</h3>\n\n\n<p>First, let’s set up some boilerplate that allows us to toggle an element’s existence in the DOM using a Svelte <code>#if</code> block. Remember, Svelte transitions only run when an element is actually leaving or entering the DOM.</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  let showing = true\n&lt;/script>\n\n&lt;label for=\"showing\">\n  Showing\n&lt;/label>\n&lt;input id=\"showing\" type=\"checkbox\" bind:checked={showing} />\n\n{#if showing}\n  &lt;h1>Hello custom transition!&lt;/h1>\n{/if}</code></pre>\n\n\n\n<p>You should be able to toggle the checkbox and see our element starkly appear and disappear in place.</p>\n\n\n\n<iframe src=\"https://codesandbox.io/embed/svelte-custom-transition-wip-v2gs9?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"svelte-custom-transition-wip\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n\n<p>Next, let’s set up our custom Svelte transition function and get it wired up to our element.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"4,5,6,15\"><code markup=\"tt\">&lt;script>\n  let showing = true\n  // Custom transition function\n  function whoosh(node) {\n    console.log(node)\n  }\n&lt;/script>\n\n&lt;label for=\"showing\">\n  Showing\n&lt;/label>\n&lt;input id=\"showing\" type=\"checkbox\" bind:checked={showing} />\n\n{#if showing}\n  &lt;h1 transition:whoosh>Hello custom transition!&lt;/h1>\n{/if}</code></pre>\n\n\n\n<p>Now, if you toggle the checkbox, you will see the <code>&lt;h1&gt;</code> element logged to the console. This proves we have the custom transition connected properly! We won’t actually use the DOM node in our example, but it’s often useful to have access to the element to reference its current styles or dimensions.</p>\n\n\n\n<p>For our element to do any animation at all, we need to return an object that contains a <code>css</code> (or <code>tick</code>) function. Let’s have our <code>css</code> function return a single line of CSS that scales our element. We’ll also return a <code>duration</code> property that controls how long the animation takes.</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  function swoop() {\n    return {\n      duration: 1000,\n      css: () => `transform: scale(.5)`\n    }\n  }\n  let showing = true\n&lt;/script>\n\n&lt;!-- markup --></code></pre>\n\n\n\n<p>We’ve got something moving! You will notice our element jumps straight to <code>.5</code> scale when toggling the checkbox. This is something, but it would feel much better if it <em>smoothly</em> transitioned. That’s where the <code>(t, u)</code> parameters come in.</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"5\"><code markup=\"tt\">&lt;script>\n  function swoop() {\n    return {\n      duration: 1000,\n      css: (t) => `transform: scale(${t})`\n    }\n  }\n  let showing = true\n&lt;/script>\n\n&lt;!-- markup --></code></pre>\n\n\n\n<p>Now we are talking! Remember, <code>t</code> rolls smoothly from <code>0.00</code> to <code>1.00</code> when an element enters, and vice versa when it leaves. This allows us to achieve the smooth effect we want. In fact, what we just wrote is essentially the built-in <code>scale</code> transition from the <code>svelte/transition</code> package.</p>\n\n\n\n<p>Let’s get a little bit fancier. To live up to our custom Svelte transition’s namesake, <code>swoop</code>, let’s add a <code>translateX</code> to our <code>transform</code>, so that our element zooms in and out from the side.</p>\n\n\n\n<p>I want to challenge you to attempt the implementation first before we continue. Trust me, it will be fun! Assume that we want to translate to 100% when the element is leaving and back to 0% when it enters.</p>\n\n\n\n<p>[waiting&#8230;]</p>\n\n\n\n<p>How did it go? Want to compare answers?</p>\n\n\n\n<p>Here’s what I got:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">css: (t, u) => `transform: scale(${t}) translateX(${u * 100}%);`</code></pre>\n\n\n\n<p>It’s okay if you have something different! Let me break down what I did.</p>\n\n\n\n<p>The key thing here is the usage of the second parameter in the <code>css</code> function. If we think about our animation while the element is entering the screen, we want to <strong>end up</strong> at <code>scale(1) translateX(0%)</code>, so we can’t use unaltered <code>t</code> for both the <code>scale</code> and the <code>transform</code>. This is the convenience behind the <code>u</code> parameter — it is the inverse of <code>t</code> at any given moment, so we know it will be <code>0</code> when <code>t</code> is <code>1</code>! I then multiplied <code>u</code> by 100 to get the percentage value and tacked on the <code>%</code> sign at the end.</p>\n\n\n\n<p>Learning the interplay between <code>t</code> and <code>u</code> is an important piece of the custom transition puzzle in Svelte. These two parameters enable a world of dynamism for your animations; they can be divided, multiplied, twisted, or contorted into whatever needs you have.</p>\n\n\n\n<p>Let’s slap my favorite <code>svelte/easing</code> function on our transition and call it a day:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"2,6\"><code markup=\"tt\">&lt;script>\n  import { elasticOut } from 'svelte/easing'\n  function swoop() {\n    return {\n      duration: 1000,\n      easing: elasticOut,\n      css: (t, u) => `transform: scale(${t}) translateX(${u * 100}%)`\n    }\n  }\n  let showing = true\n&lt;/script>\n\n&lt;label for=\"showing\">\n  Showing\n&lt;/label>\n&lt;input id=\"showing\" type=\"checkbox\" bind:checked={showing} />\n\n{#if showing}\n  &lt;h1 transition:swoop>Hello custom transition!&lt;/h1>\n{/if}</code></pre>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>Congratulations! You can now build a custom Svelte transition function. We have only scratched the surface of what is possible but I hope you feel equipped with the tools to explore even further. I would highly recommend reading the <a href=\"https://svelte.dev/docs#transition_fn\" rel=\"noopener\">docs</a> and going through the <a href=\"https://svelte.dev/tutorial/transition\" rel=\"noopener\">official tutorial</a> to gain even more familiarity.</p>\n\n\n\n<iframe id=\"demo-jump\" src=\"https://codesandbox.io/embed/svelte-custom-transition-fall-zf5k8?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"svelte-custom-transition-fall\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/making-your-first-custom-svelte-transition/\">How to Build Your First Custom Svelte Transition</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "The Svelte transition API provides a first-class way to animate your components when they enter or leave the document, including custom Svelte transitions. By default, the transition directive uses CSS animations, which generally offer better performance and allow the browser’s main thread to remain unblocked. The API is as simple as this: <element transition:transitionFunction />. You can also specify in or out directives which are uni-directional transitions, only running when the element is mounted or unmounted.\n\n\n\n\n\n\n\nExample of a working Svelte transition (jump to demo)\n\n\n\nSvelte offers a runtime svelte/transition package that ships with seven prepackaged Svelte transition functions, all of which can be dropped in and tweaked to your heart’s desire. Pairing this with the svelte/easing package, allows for a wide swath of interactions, without writing any of the transition code yourself. Play around with different transitions and easing functions to get a feel for what is possible.\n\n\n\n\n\n\n\nLooking for instructions on how to get started with Svelte? We have a solid overview for you to check out.\n\n\nThe Svelte Custom Transition API\n\n\nIf you need even more control than what the Svelte Transition API offers out of the box, Svelte permits you to specify your own custom transition function, as long as you adhere to a few conventions. From the docs, here’s what the custom transition API looks like:\n\n\n\ntransition = (node: HTMLElement, params: any) => {\n  delay?: number,\n  duration?: number,\n  easing?: (t: number) => number,\n  css?: (t: number, u: number) => string,\n  tick?: (t: number, u: number) => void\n} \n\n\n\nLet’s break it down. A transition function takes a reference to the DOM node where the transition directive is used and returns an object with some parameters that control the animation and, most importantly, a css or tick function.\n\n\n\nThe css function’s job is to return a string of CSS that describes the animation, typically including some kind of transform or opacity change. Alternatively, you can opt to return a tick function, which lets you control every aspect of the animation with the power JavaScript, but pays a performance penalty since this type of transition does not use CSS animations.\n\n\n\nBoth the css and tick functions take two parameters called (t, u) by convention. t is a decimal number that travels from 0.00 to 1.00 while the element is entering the DOM and from 1.00 back to 0.00 when the element is leaving. The u parameter is the inverse of t or 1 - t at any given moment. For example, if you return a string of transform: scale(${t}), your element would smoothly animate from 0 to 1 on enter, and vice versa on exit.\n\n\n\nThese concepts may seem a bit abstract, so let’s solidify them by building our own custom Svelte transition!\n\n\nBuilding your first custom Svelte transition\n\n\nFirst, let’s set up some boilerplate that allows us to toggle an element’s existence in the DOM using a Svelte #if block. Remember, Svelte transitions only run when an element is actually leaving or entering the DOM.\n\n\n\n<script>\n  let showing = true\n</script>\n\n<label for=\"showing\">\n  Showing\n</label>\n<input id=\"showing\" type=\"checkbox\" bind:checked={showing} />\n\n{#if showing}\n  <h1>Hello custom transition!</h1>\n{/if}\n\n\n\nYou should be able to toggle the checkbox and see our element starkly appear and disappear in place.\n\n\n\n\n\n\n\nNext, let’s set up our custom Svelte transition function and get it wired up to our element.\n\n\n\n<script>\n  let showing = true\n  // Custom transition function\n  function whoosh(node) {\n    console.log(node)\n  }\n</script>\n\n<label for=\"showing\">\n  Showing\n</label>\n<input id=\"showing\" type=\"checkbox\" bind:checked={showing} />\n\n{#if showing}\n  <h1 transition:whoosh>Hello custom transition!</h1>\n{/if}\n\n\n\nNow, if you toggle the checkbox, you will see the <h1> element logged to the console. This proves we have the custom transition connected properly! We won’t actually use the DOM node in our example, but it’s often useful to have access to the element to reference its current styles or dimensions.\n\n\n\nFor our element to do any animation at all, we need to return an object that contains a css (or tick) function. Let’s have our css function return a single line of CSS that scales our element. We’ll also return a duration property that controls how long the animation takes.\n\n\n\n<script>\n  function swoop() {\n    return {\n      duration: 1000,\n      css: () => `transform: scale(.5)`\n    }\n  }\n  let showing = true\n</script>\n\n<!-- markup -->\n\n\n\nWe’ve got something moving! You will notice our element jumps straight to .5 scale when toggling the checkbox. This is something, but it would feel much better if it smoothly transitioned. That’s where the (t, u) parameters come in.\n\n\n\n<script>\n  function swoop() {\n    return {\n      duration: 1000,\n      css: (t) => `transform: scale(${t})`\n    }\n  }\n  let showing = true\n</script>\n\n<!-- markup -->\n\n\n\nNow we are talking! Remember, t rolls smoothly from 0.00 to 1.00 when an element enters, and vice versa when it leaves. This allows us to achieve the smooth effect we want. In fact, what we just wrote is essentially the built-in scale transition from the svelte/transition package.\n\n\n\nLet’s get a little bit fancier. To live up to our custom Svelte transition’s namesake, swoop, let’s add a translateX to our transform, so that our element zooms in and out from the side.\n\n\n\nI want to challenge you to attempt the implementation first before we continue. Trust me, it will be fun! Assume that we want to translate to 100% when the element is leaving and back to 0% when it enters.\n\n\n\n[waiting…]\n\n\n\nHow did it go? Want to compare answers?\n\n\n\nHere’s what I got:\n\n\n\ncss: (t, u) => `transform: scale(${t}) translateX(${u * 100}%);`\n\n\n\nIt’s okay if you have something different! Let me break down what I did.\n\n\n\nThe key thing here is the usage of the second parameter in the css function. If we think about our animation while the element is entering the screen, we want to end up at scale(1) translateX(0%), so we can’t use unaltered t for both the scale and the transform. This is the convenience behind the u parameter — it is the inverse of t at any given moment, so we know it will be 0 when t is 1! I then multiplied u by 100 to get the percentage value and tacked on the % sign at the end.\n\n\n\nLearning the interplay between t and u is an important piece of the custom transition puzzle in Svelte. These two parameters enable a world of dynamism for your animations; they can be divided, multiplied, twisted, or contorted into whatever needs you have.\n\n\n\nLet’s slap my favorite svelte/easing function on our transition and call it a day:\n\n\n\n<script>\n  import { elasticOut } from 'svelte/easing'\n  function swoop() {\n    return {\n      duration: 1000,\n      easing: elasticOut,\n      css: (t, u) => `transform: scale(${t}) translateX(${u * 100}%)`\n    }\n  }\n  let showing = true\n</script>\n\n<label for=\"showing\">\n  Showing\n</label>\n<input id=\"showing\" type=\"checkbox\" bind:checked={showing} />\n\n{#if showing}\n  <h1 transition:swoop>Hello custom transition!</h1>\n{/if}\n\n\nWrapping up\n\n\nCongratulations! You can now build a custom Svelte transition function. We have only scratched the surface of what is possible but I hope you feel equipped with the tools to explore even further. I would highly recommend reading the docs and going through the official tutorial to gain even more familiarity.\n\n\n\n\n\nHow to Build Your First Custom Svelte Transition originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-14T15:24:19.000Z",
      "date_modified": "2022-01-14T15:24:19.000Z",
      "_plugin": {
        "pageFilename": "3d683d7b5ec2130aa7bcfa7be08649afdcaa80cefd4e9ce11938889468f8f607.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360939",
      "url": "https://css-tricks.com/8-accessibility-links-january-2022/",
      "title": "8 Helpful Accessibility Links for January 2022",
      "summary": "Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. Accessibility is one of those things! Here’s a list of related links to other articles that I’ve been saving up and …\n\n8 Helpful Accessibility Links for January 2022 originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. <a href=\"https://css-tricks.com/tag/accessibility/\">Accessibility is one of those things!</a> Here’s a list of related links to other articles that I’ve been saving up and think are worth sharing.</p>\n\n\n\n<span id=\"more-360939\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"667\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?resize=1024%2C667&#038;ssl=1\" alt=\"Screenshot of the Accessibility Maze homepage.\" class=\"wp-image-361740\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?resize=1024%2C667&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?resize=300%2C195&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?resize=768%2C500&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?resize=1536%2C1000&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?resize=1000%2C651&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-13-at-12.48.26-PM.png?w=1754&amp;ssl=1 1754w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<ul class=\"is-style-super-link-list\"><li><a href=\"https://alvaromontoro.com/blog/67989/myths-about-web-accessibility\" rel=\"noopener\">Myths about Web Accessibility</a> — Alvaro Montoro covers some classics. My favorite is &#8220;accessibility is for people with disabilities.&#8221; Accessibility is for people with disabilities, because they are people, and accessibility is for people.</li><li><a href=\"https://a11ymyths.com/\" rel=\"noopener\">Accessibility Myths</a> — Speaking of myths, Sergei Kriger built this entire site for them. I&#8217;ll cherry pick &#8220;Accessibility can be achieved by only adding ARIA attributes&#8221;, which is famously wrong as the first rule of ARIA is <a href=\"https://w3c.github.io/using-aria/#rule1\" rel=\"noopener\">not using it</a>.</li><li><a href=\"https://web.dev/learn/forms/fields/\" rel=\"noopener\">Form fields in depth</a> — While perhaps not specifically about accessiblity, forms are among the most crucial things to get accessibility right on and go wrong far too often. This new guide from Google incorporates accessibility throughout and gets <a href=\"https://web.dev/learn/forms/accessibility/\" rel=\"noopener\">specifically into it</a> as well.  </li><li><a href=\"https://de.ryerson.ca/games/accessibility/\" rel=\"noopener\">Accessibility Maze</a> — Build by the Digital Education Strategies team in The G. Raymond Chang School of Continuing Education at Ryerson University. So fun! You can (and largely have to) play the whole game on the keyboard.</li><li><a href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/Focusgroup/explainer.md\" rel=\"noopener\">HTML focusgroup attribute</a> — You know how when you&#8217;ve focused on one of the radio buttons in a group of radio buttons, then you can use the arrow keys to move between them? Or how the up/down arrows work to navigate the items of a native select? You could call that &#8220;focus group navigation&#8221;, and unfortuantely we can&#8217;t tap into that behavior whenever we want to. But what if we could with something as simple as a <code>focusgrup</code> attribute in HTML? That&#8217;d be cool, someday.</li><li><a href=\"https://www.smashingmagazine.com/2021/11/dyslexia-friendly-mode-website/\" rel=\"noopener\">Adding A Dyslexia-Friendly Mode To A Website</a> — I always think of the <a href=\"https://www.dyslexiefont.com/\" rel=\"noopener\">Dyslexie font</a>, but clearly there is a lot more to it than just using the right font. A lot more spacing, especially typographically, and less clutter is helpful. <a href=\"https://codepen.io/smashingmag/pen/dyzwqXm\" rel=\"noopener\">See the demo.</a> A somewhat rare use-case of <code>word-spacing</code> in use there. Note there is <a href=\"https://www.linkedin.com/pulse/dyslexic-myths-presented-truths-gareth-ford-williams/\" rel=\"noopener\">some pushback to this article</a> via Gareth Ford Williams. </li><li><a href=\"https://hiddedevries.nl/en/blog/2021-12-05-how-many-people-with-disabilities-use-our-site\" rel=\"noopener\">How many people with disabilities use our site?</a> — Hidde de Vries says it&#8217;s probably not a big number, but that doesn&#8217;t matter (love the quote from Tim Cook). Still, if you need to find a business upside, Hidde points out a report that cites 15-20% of the world’s population has a disability. </li><li><a href=\"https://vimeo.com/654497457\" rel=\"noopener\">&#x1f3a5; Building The Most Inaccessible Site Possible</a> — Manuel Matuzovic proves you can get 100&#8217;s across the board on a Lighthouse test and yet make an entirely unusable site. It&#8217;s like learning in reverse. If you know what causes problems, you know how not to do those things.</li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/8-accessibility-links-january-2022/\">8 Helpful Accessibility Links for January 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. Accessibility is one of those things! Here’s a list of related links to other articles that I’ve been saving up and think are worth sharing.\n\n\n\n\n\n\n\n\n\n\n\nMyths about Web Accessibility — Alvaro Montoro covers some classics. My favorite is “accessibility is for people with disabilities.” Accessibility is for people with disabilities, because they are people, and accessibility is for people.Accessibility Myths — Speaking of myths, Sergei Kriger built this entire site for them. I’ll cherry pick “Accessibility can be achieved by only adding ARIA attributes”, which is famously wrong as the first rule of ARIA is not using it.Form fields in depth — While perhaps not specifically about accessiblity, forms are among the most crucial things to get accessibility right on and go wrong far too often. This new guide from Google incorporates accessibility throughout and gets specifically into it as well.  Accessibility Maze — Build by the Digital Education Strategies team in The G. Raymond Chang School of Continuing Education at Ryerson University. So fun! You can (and largely have to) play the whole game on the keyboard.HTML focusgroup attribute — You know how when you’ve focused on one of the radio buttons in a group of radio buttons, then you can use the arrow keys to move between them? Or how the up/down arrows work to navigate the items of a native select? You could call that “focus group navigation”, and unfortuantely we can’t tap into that behavior whenever we want to. But what if we could with something as simple as a focusgrup attribute in HTML? That’d be cool, someday.Adding A Dyslexia-Friendly Mode To A Website — I always think of the Dyslexie font, but clearly there is a lot more to it than just using the right font. A lot more spacing, especially typographically, and less clutter is helpful. See the demo. A somewhat rare use-case of word-spacing in use there. Note there is some pushback to this article via Gareth Ford Williams. How many people with disabilities use our site? — Hidde de Vries says it’s probably not a big number, but that doesn’t matter (love the quote from Tim Cook). Still, if you need to find a business upside, Hidde points out a report that cites 15-20% of the world’s population has a disability. 🎥 Building The Most Inaccessible Site Possible — Manuel Matuzovic proves you can get 100’s across the board on a Lighthouse test and yet make an entirely unusable site. It’s like learning in reverse. If you know what causes problems, you know how not to do those things.\n\n8 Helpful Accessibility Links for January 2022 originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-13T20:57:41.000Z",
      "date_modified": "2022-01-13T20:57:41.000Z",
      "_plugin": {
        "pageFilename": "a397c809c1aa19b8083a483294492fea4f76305718b9fe29d214bdf4323e5bbb.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360423",
      "url": "https://css-tricks.com/sass-default-parameters/",
      "title": "A Practical Tip For Using Sass Default Parameters",
      "summary": "Sass offers functions and mixins that accept parameters. You can use Sass default parameters, that is, parameters that have a value even if you don’t provide them when the function or mixin is called. \nLet’s focus on mixins here. …\n\nA Practical Tip For Using Sass Default Parameters originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Sass offers functions and mixins that <a href=\"https://sass-lang.com/documentation/at-rules/mixin#arguments\" rel=\"noopener\">accept parameters</a>. You can use Sass default parameters, that is, parameters that have a value even if you don&#8217;t provide them when the function or mixin is called. </p>\n\n\n\n<p>Let&#8217;s focus on mixins here. Here&#8217;s the syntax of a mixin:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin foo($a, $b, $c) {\n  // I can use $a, $b, and $c in here, but there is a risk they are null\n}\n\n.el {\n  @include foo(1, 2, 3);\n\n  // if I tried to do `@include foo;`\n  // ... which is valid syntax... \n  // I'd get `Error: Missing argument $a.` from Sass\n}</code></pre>\n\n\n\n<p>It&#8217;s safer and more useful to set up default parameters in this Sass mixin:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin foo($a: 1, $b: 2, $c: 3) {\n}\n\n.el {\n  // Now this is fine\n  @include foo;\n\n  // AND I can send in params as well\n  @include foo(\"three\", \"little\", \"pigs\");\n}</code></pre>\n\n\n\n<p>But what if I wanted to send in <code>$b</code> and <code>$c</code>, but leave <code>$a</code> as the Sass default parameter? The trick is that you send in <em>named</em> parameters:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin foo($a: 1, $b: 2, $c: 3) {\n}\n\n.el {\n  // Only sending in the second two params, $a will be the default.\n  @include foo($b: 2, $c: 3);\n}</code></pre>\n\n\n<h3 id=\"a-reallife-example-using-sass-default-parameters\">A real-life example using Sass default parameters</h3>\n\n\n<p>Here&#8217;s a quick-y mixin that outputs what you need for very basic styled scrollbars (<a href=\"https://css-tricks.com/snippets/sass/custom-scrollbars-mixin/\">Kitty has one as well</a>):</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">@mixin scrollbars(\n  $size: 10px,\n  $foreground-color: #eee,\n  $background-color: #333\n) {\n  // For Google Chrome\n  &amp;::-webkit-scrollbar {\n    width: $size;\n    height: $size;\n  }\n  &amp;::-webkit-scrollbar-thumb {\n    background: $foreground-color;\n  }\n  &amp;::-webkit-scrollbar-track {\n    background: $background-color;\n  }\n\n  // Standard version (Firefox only for now)\n  scrollbar-color: $foreground-color $background-color;\n}</code></pre>\n\n\n\n<p>Now I can call it like this:</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">.scrollable {\n  @include scrollbars;\n}\n\n.thick-but-otherwise-default-scrollable {\n  // I can skip $b and $c because they are second and third\n  @include scrollbars(30px);\n}\n\n.custom-colors-scrollable {\n  // I can skip the first param if all the others are named.\n  @include scrollbars($foreground-color: orange, $background-color: black);\n}\n\n.totally-custom-scrollable {\n  @include scrollbars(20px, red, black);\n}</code></pre>\n\n\n\n<p>I&#8217;m just noting this as I had to search around a bit to figure this out. I was trying stuff like sending empty strings or <code>null</code> as the first parameter in order to &#8220;skip&#8221; it, but that doesn&#8217;t work. Gotta do the named parameter approach. </p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/sass-default-parameters/\">A Practical Tip For Using Sass Default Parameters</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Sass offers functions and mixins that accept parameters. You can use Sass default parameters, that is, parameters that have a value even if you don’t provide them when the function or mixin is called. \n\n\n\nLet’s focus on mixins here. Here’s the syntax of a mixin:\n\n\n\n@mixin foo($a, $b, $c) {\n  // I can use $a, $b, and $c in here, but there is a risk they are null\n}\n\n.el {\n  @include foo(1, 2, 3);\n\n  // if I tried to do `@include foo;`\n  // ... which is valid syntax... \n  // I'd get `Error: Missing argument $a.` from Sass\n}\n\n\n\nIt’s safer and more useful to set up default parameters in this Sass mixin:\n\n\n\n@mixin foo($a: 1, $b: 2, $c: 3) {\n}\n\n.el {\n  // Now this is fine\n  @include foo;\n\n  // AND I can send in params as well\n  @include foo(\"three\", \"little\", \"pigs\");\n}\n\n\n\nBut what if I wanted to send in $b and $c, but leave $a as the Sass default parameter? The trick is that you send in named parameters:\n\n\n\n@mixin foo($a: 1, $b: 2, $c: 3) {\n}\n\n.el {\n  // Only sending in the second two params, $a will be the default.\n  @include foo($b: 2, $c: 3);\n}\n\n\nA real-life example using Sass default parameters\n\n\nHere’s a quick-y mixin that outputs what you need for very basic styled scrollbars (Kitty has one as well):\n\n\n\n@mixin scrollbars(\n  $size: 10px,\n  $foreground-color: #eee,\n  $background-color: #333\n) {\n  // For Google Chrome\n  &::-webkit-scrollbar {\n    width: $size;\n    height: $size;\n  }\n  &::-webkit-scrollbar-thumb {\n    background: $foreground-color;\n  }\n  &::-webkit-scrollbar-track {\n    background: $background-color;\n  }\n\n  // Standard version (Firefox only for now)\n  scrollbar-color: $foreground-color $background-color;\n}\n\n\n\nNow I can call it like this:\n\n\n\n.scrollable {\n  @include scrollbars;\n}\n\n.thick-but-otherwise-default-scrollable {\n  // I can skip $b and $c because they are second and third\n  @include scrollbars(30px);\n}\n\n.custom-colors-scrollable {\n  // I can skip the first param if all the others are named.\n  @include scrollbars($foreground-color: orange, $background-color: black);\n}\n\n.totally-custom-scrollable {\n  @include scrollbars(20px, red, black);\n}\n\n\n\nI’m just noting this as I had to search around a bit to figure this out. I was trying stuff like sending empty strings or null as the first parameter in order to “skip” it, but that doesn’t work. Gotta do the named parameter approach. \n\nA Practical Tip For Using Sass Default Parameters originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-13T15:17:28.000Z",
      "date_modified": "2022-01-13T15:17:28.000Z",
      "_plugin": {
        "pageFilename": "76ba4c50ef8b9a4f5c4fee9faa34b85a4fac821caf664f80e47949b7eeba8ec7.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361233",
      "url": "https://css-tricks.com/parcel-css/",
      "title": "Parcel CSS: A New CSS Parser, Transformer, and Minifier",
      "summary": "Hot off the presses from Devon Govett, creator of Parcel, is Parcel CSS:\n\nA CSS parser, transformer, and minifier written in Rust.\n\n\nNice. The CSS world could use a little processing shake up like this.\nI just wrote a …\n\nParcel CSS: A New CSS Parser, Transformer, and Minifier originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p><a href=\"https://twitter.com/devongovett/status/1481308471622516738\" rel=\"noopener\">Hot off the presses</a> from Devon Govett, creator of Parcel, is <a href=\"https://github.com/parcel-bundler/parcel-css\" rel=\"noopener\">Parcel CSS</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>A CSS parser, transformer, and minifier written in Rust.</p><p><a href=\"https://github.com/parcel-bundler/parcel-css#features\" rel=\"noopener\"></a></p></blockquote>\n\n\n\n<p>Nice. The CSS world could use a little processing shake up like this.</p>\n\n\n\n<p>I <a href=\"https://css-tricks.com/the-ui-fund/\">just wrote a few weeks ago</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Ya know how&nbsp;<a href=\"https://esbuild.github.io/\" rel=\"noopener\">esbuild</a>&nbsp;has seriously shaken things up for the JavaScript processing world? Maybe we need a cssbuild? It would process imports and do bundling (something we generally rely on Sass for). The point would be extreme speed. Maybe it would be plugin-based and compatible with the PostCSS API so that existing PostCSS plugins would work on it. Maybe it could make sourcemaps and do modification. Maybe it would run your Sass, too, I dunno. But something to spark the CSS ecosystem like that could be cool.</p></blockquote>\n\n\n\n<span id=\"more-361233\"></span>\n\n\n\n<p>Close! It looks like it <em>doesn&#8217;t</em> do bundling (<a href=\"https://twitter.com/devongovett/status/1481357003154939907\" rel=\"noopener\">standalone anyway</a>). I suppose it would have to just invent a syntax for that, as I think Sass somewhat regrets the ambiguity of how it uses <code>@import</code> just like native CSS does and I wouldn&#8217;t blame anyone for not wanting to go down that road. It&#8217;s tricky territory, for sure, as inventing syntax kinda puts it into a different category of tool. I think it would be worth it though, as breaking up CSS into smaller files but bundling them in development is like&#8230; a thing people do, and I could see really wanting to use this without having to necessarily commit to Parcel (which can bundle). </p>\n\n\n\n<p>So why run your CSS through this thing? From the docs, it looks like you&#8217;d wanna do that because&#8230;</p>\n\n\n\n<ul><li>it&#8217;s a minifier,</li><li>it does vendor prefixing,</li><li>it can process as CSS modules (<a href=\"https://github.com/css-modules/css-modules\" rel=\"noopener\">the classic library,</a> not the <a href=\"https://css-tricks.com/css-modules-the-native-ones/\">native ones</a>), and</li><li>you get sourcemaps.</li></ul>\n\n\n\n<p>(Originally, I thought it leveraged other tools for these tasks as tools like Autoprefixer and cssnano appeared in the project&#8217;s <code>package.json</code> file, but as the comment below from Devon confirms, Parcel CSS is a <em>replacement</em> for these, it doesn&#8217;t use them.)</p>\n\n\n\n<p>But there is one more! Seems to me the killer Parcel CSS feature is what they are calling &#8220;<strong>Syntax lowering</strong>&#8221; meaning you can use &#8220;future&#8221; CSS today (like, say, <a href=\"https://css-tricks.com/css-is-going-gosh-darned-hog-wild-i-tell-ya-what/#aa-native-nesting\">nesting</a>) by having it processed down to things that browsers understand, like Babel does in JavaScript. It feels similar in spirit to <a href=\"https://github.com/csstools/postcss-preset-env\" rel=\"noopener\">postcss-preset-env</a>. </p>\n\n\n\n<p>And crucially, it&#8217;s fast:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1370\" height=\"574\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/FI6pUwTWYAII2EW.jpeg?resize=1370%2C574&#038;ssl=1\" alt=\"Tow line charts chowing how fast Parcel CSS bundles packages and how small the resulting files are.\" class=\"wp-image-361285\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/FI6pUwTWYAII2EW.jpeg?w=1370&amp;ssl=1 1370w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/FI6pUwTWYAII2EW.jpeg?resize=300%2C126&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/FI6pUwTWYAII2EW.jpeg?resize=1024%2C429&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/FI6pUwTWYAII2EW.jpeg?resize=768%2C322&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/FI6pUwTWYAII2EW.jpeg?resize=1000%2C419&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Parcel CSS is <em>fast</em> and outputs <em>small</em> files. (Source: <a href=\"https://twitter.com/devongovett/status/1481308471622516738\" rel=\"noopener\">@devongovett</a>)</figcaption></figure>\n\n\n<h2 id=\"will-parcel-css-become-an-ecosystem\">Will Parcel CSS become an ecosystem?</h2>\n\n\n<p><strong>So I guess the big question is:</strong> If Parcel CSS becomes the CSS parser of choice, will we get plugins? And if we do, will it become a robust ecosystem <a href=\"https://www.postcss.parts/\" rel=\"noopener\">like PostCSS plugins</a>?</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/parcel-css/\">Parcel CSS: A New CSS Parser, Transformer, and Minifier</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Hot off the presses from Devon Govett, creator of Parcel, is Parcel CSS:\n\n\n\nA CSS parser, transformer, and minifier written in Rust.\n\n\n\nNice. The CSS world could use a little processing shake up like this.\n\n\n\nI just wrote a few weeks ago:\n\n\n\nYa know how esbuild has seriously shaken things up for the JavaScript processing world? Maybe we need a cssbuild? It would process imports and do bundling (something we generally rely on Sass for). The point would be extreme speed. Maybe it would be plugin-based and compatible with the PostCSS API so that existing PostCSS plugins would work on it. Maybe it could make sourcemaps and do modification. Maybe it would run your Sass, too, I dunno. But something to spark the CSS ecosystem like that could be cool.\n\n\n\n\n\n\n\nClose! It looks like it doesn’t do bundling (standalone anyway). I suppose it would have to just invent a syntax for that, as I think Sass somewhat regrets the ambiguity of how it uses @import just like native CSS does and I wouldn’t blame anyone for not wanting to go down that road. It’s tricky territory, for sure, as inventing syntax kinda puts it into a different category of tool. I think it would be worth it though, as breaking up CSS into smaller files but bundling them in development is like… a thing people do, and I could see really wanting to use this without having to necessarily commit to Parcel (which can bundle). \n\n\n\nSo why run your CSS through this thing? From the docs, it looks like you’d wanna do that because…\n\n\n\nit’s a minifier,it does vendor prefixing,it can process as CSS modules (the classic library, not the native ones), andyou get sourcemaps.\n\n\n\n(Originally, I thought it leveraged other tools for these tasks as tools like Autoprefixer and cssnano appeared in the project’s package.json file, but as the comment below from Devon confirms, Parcel CSS is a replacement for these, it doesn’t use them.)\n\n\n\nBut there is one more! Seems to me the killer Parcel CSS feature is what they are calling “Syntax lowering” meaning you can use “future” CSS today (like, say, nesting) by having it processed down to things that browsers understand, like Babel does in JavaScript. It feels similar in spirit to postcss-preset-env. \n\n\n\nAnd crucially, it’s fast:\n\n\n\nParcel CSS is fast and outputs small files. (Source: @devongovett)\n\n\nWill Parcel CSS become an ecosystem?\n\n\nSo I guess the big question is: If Parcel CSS becomes the CSS parser of choice, will we get plugins? And if we do, will it become a robust ecosystem like PostCSS plugins?\n\nParcel CSS: A New CSS Parser, Transformer, and Minifier originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-12T21:10:53.000Z",
      "date_modified": "2022-01-12T21:10:53.000Z",
      "_plugin": {
        "pageFilename": "25c3f9b130cfa63e7ee77537e22d51a5fa6a0bbee806a465d9d4e5c23bb2d00e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360607",
      "url": "https://css-tricks.com/open-source-sustainability/",
      "title": "Open Source & Sustainability",
      "summary": "It’s a god-damned miracle to me that open source is as robust as it is in tech. Consider the options. You could have a job (or be entrepreneurial) with your coding skills and likely be paid quite well. Or, you …\n\nOpen Source & Sustainability originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>It&#8217;s a god-damned miracle to me that open source is as robust as it is in tech. Consider the options. You could have a job (or be entrepreneurial) with your coding skills and likely be paid quite well. Or, you could write code for free and have strangers yell at you every day at all hours. I like being a contributing kinda guy, but I don&#8217;t have the stomach for the latter.</p>\n\n\n\n<p>Fair enough, in reality, most developers do a bit of coding work on both sides. And clearly, they find some value in doing open-source work; otherwise, they wouldn&#8217;t do it. But we&#8217;ve all heard the stories. It leads to developer burnout, depression, and countless abandoned projects. It&#8217;s like we know <a href=\"https://css-tricks.com/how-to-contribute-to-an-open-source-project/\">how to contribute to an open-source project</a> (and even have <a href=\"https://css-tricks.com/open-source-etiquette-guidebook/\">some ground rules on etiquette</a>), but lack an understanding of how to maintain it.</p>\n\n\n\n<span id=\"more-360607\"></span>\n\n\n\n<p>Dave, in <a href=\"https://daverupert.com/2021/12/sustaining-maintaining/\" rel=\"noopener\">&#8220;Sustaining Maintaining,&#8221;</a> thinks it might be a lack of education on how to manage open source:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p><a href=\"https://lab.github.com/\" rel=\"noopener\">There’s plenty of write-ups on GitHub</a>&nbsp;about&nbsp;<em>how to start</em>&nbsp;a new open source project, or&nbsp;<em>how to add tooling</em>, but almost no information or best practices on&nbsp;<em>how to maintain</em>&nbsp;a project over years. I think there’s a big education gap and opportunity here. GitHub has an obvious incentive to increase&nbsp;<code>num_developers</code>&nbsp;and&nbsp;<code>num_repos</code>, but I think it’s worthwhile to ease the burden of existing developers and increase the quality and security of existing repos. Open source maintenance needs a manual.</p></blockquote>\n\n\n\n<p>That&#8217;s a wonderful idea. I&#8217;ve been around tech a hot minute, but I don&#8217;t feel particularly knowledgeable about how to operate an open-source project. And frankly, that makes me scared of it, and my fear makes me avoid doing it at all.</p>\n\n\n\n<p>I know how to set up the basics, but what if the project blows up in popularity? How do I manage my time commitment do it? How do I handle community disputes? Do I need a request for comments workflow? Who can I trust to help? What are the monetization strategies? What are the security concerns? What do I do when there starts to be dozens, then hundreds, then thousands of open issues? What do I do when I stop caring about this project? How do I stop myself from burning it to the ground?</p>\n\n\n\n<p>If there was more education around how to do this well, more examples out there of people doing it well and benefitting from it, and some attempts at guardrails from the places that host them, that would go a long way. </p>\n\n\n\n<p>Money is a key factor. Whenever I see success in open source, I see actually usable amounts of money coming in. I see big donations appropriately <a href=\"https://vuejs.org/support-vuejs/\" rel=\"noopener\">coming into Vue</a>. I see <a href=\"https://automattic.com/\" rel=\"noopener\">Automattic</a> building an empire around their core open-source products. I see <a href=\"https://greensock.com/club/\" rel=\"noopener\">Greensock</a> having an open-source library but offering membership and a license for certain use cases and having that sustain a team long-term.</p>\n\n\n\n<p>If you&#8217;re interested in monetizing open-source, Nicholas C. Zakas has been writing about it lately. It&#8217;s a three-parter so far, but starts here in <a href=\"https://humanwhocodes.com/blog/2021/12/making-open-source-project-sponsor-ready-companies-trust/\" rel=\"noopener\">&#8220;Making your open source project sponsor-ready, Part 1: Companies and trust&#8221;</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>While it’s possible to bring in a decent amount of money through individual sponsorships, the real path to open source sustainability is to get larger donations from the companies that depend on your project. Getting $5 to $10 each month from a bunch of individuals is nice, but not as nice as getting $1,000 each month from a bunch of companies.</p></blockquote>\n\n\n\n<p>I think it would be cool to see a lot more developers making a proper healthy living on open source. If nothing else it would make me feel like this whole ecosystem is more stable. </p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Update: I wrote this before the whole Marak Squire <a href=\"https://www.bleepingcomputer.com/news/security/dev-corrupts-npm-libs-colors-and-faker-breaking-thousands-of-apps/\" rel=\"noopener\">kerfuffle</a>, but I feel that just underscores all this. </p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/open-source-sustainability/\">Open Source &#038; Sustainability</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "It’s a god-damned miracle to me that open source is as robust as it is in tech. Consider the options. You could have a job (or be entrepreneurial) with your coding skills and likely be paid quite well. Or, you could write code for free and have strangers yell at you every day at all hours. I like being a contributing kinda guy, but I don’t have the stomach for the latter.\n\n\n\nFair enough, in reality, most developers do a bit of coding work on both sides. And clearly, they find some value in doing open-source work; otherwise, they wouldn’t do it. But we’ve all heard the stories. It leads to developer burnout, depression, and countless abandoned projects. It’s like we know how to contribute to an open-source project (and even have some ground rules on etiquette), but lack an understanding of how to maintain it.\n\n\n\n\n\n\n\nDave, in “Sustaining Maintaining,” thinks it might be a lack of education on how to manage open source:\n\n\n\nThere’s plenty of write-ups on GitHub about how to start a new open source project, or how to add tooling, but almost no information or best practices on how to maintain a project over years. I think there’s a big education gap and opportunity here. GitHub has an obvious incentive to increase num_developers and num_repos, but I think it’s worthwhile to ease the burden of existing developers and increase the quality and security of existing repos. Open source maintenance needs a manual.\n\n\n\nThat’s a wonderful idea. I’ve been around tech a hot minute, but I don’t feel particularly knowledgeable about how to operate an open-source project. And frankly, that makes me scared of it, and my fear makes me avoid doing it at all.\n\n\n\nI know how to set up the basics, but what if the project blows up in popularity? How do I manage my time commitment do it? How do I handle community disputes? Do I need a request for comments workflow? Who can I trust to help? What are the monetization strategies? What are the security concerns? What do I do when there starts to be dozens, then hundreds, then thousands of open issues? What do I do when I stop caring about this project? How do I stop myself from burning it to the ground?\n\n\n\nIf there was more education around how to do this well, more examples out there of people doing it well and benefitting from it, and some attempts at guardrails from the places that host them, that would go a long way. \n\n\n\nMoney is a key factor. Whenever I see success in open source, I see actually usable amounts of money coming in. I see big donations appropriately coming into Vue. I see Automattic building an empire around their core open-source products. I see Greensock having an open-source library but offering membership and a license for certain use cases and having that sustain a team long-term.\n\n\n\nIf you’re interested in monetizing open-source, Nicholas C. Zakas has been writing about it lately. It’s a three-parter so far, but starts here in “Making your open source project sponsor-ready, Part 1: Companies and trust”:\n\n\n\nWhile it’s possible to bring in a decent amount of money through individual sponsorships, the real path to open source sustainability is to get larger donations from the companies that depend on your project. Getting $5 to $10 each month from a bunch of individuals is nice, but not as nice as getting $1,000 each month from a bunch of companies.\n\n\n\nI think it would be cool to see a lot more developers making a proper healthy living on open source. If nothing else it would make me feel like this whole ecosystem is more stable. \n\n\n\n\n\n\n\nUpdate: I wrote this before the whole Marak Squire kerfuffle, but I feel that just underscores all this. \n\nOpen Source & Sustainability originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-12T20:51:49.000Z",
      "date_modified": "2022-01-12T20:51:49.000Z",
      "_plugin": {
        "pageFilename": "84d93e36ba1043c4cb724f175bd3d0139e13ec71d7b854e8ee00437e8ef6a32e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360168",
      "url": "https://css-tricks.com/how-to-make-a-pure-css-3d-package-toggle/",
      "title": "How to Make a Pure CSS 3D Package Toggle",
      "summary": "You know how you can get cardboard boxes that come totally flat? You fold ‘em up and tape ‘em to make them into a useful box. Then when it’s time to recycle them, you cut them back apart to flatten …\n\nHow to Make a Pure CSS 3D Package Toggle originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>You know how you can get cardboard boxes that come totally flat? You fold ‘em up and tape ‘em to make them into a useful box. Then when it’s time to recycle them, you cut them back apart to flatten them. Recently, someone reached out to me about essentially this concept as a 3D animation and I thought it would make an interesting tutorial to do it entirely in CSS, so here we are!</p>\n\n\n\n<p>How might that animation look? How could we create that packing timeline? Could the sizing be flexible? Let’s make a pure CSS package toggle.</p>\n\n\n\n<span id=\"more-360168\"></span>\n\n\n\n<p>Here’s what we’re working towards. Tap to pack and unpack the cardboard box.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XWaGEgO\" src=\"//codepen.io/anon/embed/XWaGEgO?height=450&amp;theme-id=1&amp;slug-hash=XWaGEgO&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XWaGEgO\" title=\"CodePen Embed XWaGEgO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"where-to-start\">Where to start?</h3>\n\n\n<p>Where do you even start with something like this? It’s best to plan ahead. We know we&#8217;re going to have a template for our package. And that will need folding up in three dimensions. If working with 3D in CSS is new to you, I recommend <a href=\"https://css-tricks.com/css-in-3d-learning-to-think-in-cubes-instead-of-boxes/\">this article</a> to get you started.</p>\n\n\n\n<p>If you&#8217;re familiar with 3D CSS, it might be tempting to construct a cuboid and go from there. But, that&#8217;s going to pose some problems. We need to consider how a package goes from 2D to 3D.</p>\n\n\n\n<p>Let’s start by creating a template. We need to plan ahead with our markup and think about how we want our packing animation to work. Let’s start with some HTML.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"scene\">\n  &lt;div class=\"package__wrapper\">\n    &lt;div class=\"package\">\n      &lt;div class=\"package__side package__side--main\">\n        &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n        &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n        &lt;div class=\"package__side package__side--tabbed\">\n          &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n          &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n        &lt;/div>\n        &lt;div class=\"package__side package__side--extra\">\n          &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n          &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n          &lt;div class=\"package__side package__side--flipped\">\n            &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n            &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n          &lt;/div>\n        &lt;/div>\n      &lt;/div>\n    &lt;/div>\n  &lt;/div>\n&lt;/div></code></pre>\n\n\n<h3 id=\"mixins-are-a-good-idea\">Mixins are a good idea</h3>\n\n\n<p>There&#8217;s quite a bit happening there. It&#8217;s a lot of <code>div</code>s. I often like to use Pug for generating markup so I can split things up into reusable blocks. For example, every side will have two flaps. We can create a Pug mixin for the sides and use attributes to apply a modifier class name to make all that markup a lot easier to write.</p>\n\n\n\n<pre rel=\"Pug\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">mixin flaps()\n  .package__flap.package__flap--top\n  .package__flap.package__flap--bottom\n      \nmixin side()\n  .package__side(class=`package__side--${attributes.class || 'side'}`)\n    +flaps()\n    if block\n      block\n\n.scene\n  .package__wrapper\n    .package\n      +side()(class=\"main\")\n        +side()(class=\"tabbed\")\n        +side()(class=\"extra\")\n          +side()(class=\"flipped\")</code></pre>\n\n\n\n<p>We&#8217;re using two mixins. One creates the flaps for each side of the box. The other creates the sides of the box. Notice in the <code>side</code> mixin we are making use of <code>block</code>. That is where children of mixin usage get rendered which is particularly useful, as we need to nest some of the sides to make our lives easier later.</p>\n\n\n\n<p>Our generated markup:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"scene\">\n  &lt;div class=\"package__wrapper\">\n    &lt;div class=\"package\">\n      &lt;div class=\"package__side package__side--main\">\n        &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n        &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n        &lt;div class=\"package__side package__side--tabbed\">\n          &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n          &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n        &lt;/div>\n        &lt;div class=\"package__side package__side--extra\">\n          &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n          &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n          &lt;div class=\"package__side package__side--flipped\">\n            &lt;div class=\"package__flap package__flap--top\">&lt;/div>\n            &lt;div class=\"package__flap package__flap--bottom\">&lt;/div>\n          &lt;/div>\n        &lt;/div>\n      &lt;/div>\n    &lt;/div>\n  &lt;/div>\n&lt;/div></code></pre>\n\n\n<h3 id=\"nesting-the-sides\">Nesting the sides</h3>\n\n\n<p>Nesting the sides makes it easier to fold up our package. Much like each side has two flaps. The children of a side can inherit the sides&#8217; transform and then apply their own. If we started with a cuboid, it would be hard to leverage this.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1261\" height=\"339\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/box-flaps-nested.jpg?resize=1261%2C339&#038;ssl=1\" alt=\"Screenshot showing HTML markup on the left and a rendering the unfolded cardboard box on the right. The markup shows how one of the box’s sides is a parent container that sets the broad side of the box and contains children for the corresponding top and bottom flaps. Orange arrows connect each element to the visual rendering to outline which parts of the box correspond in HTML correspond to the visual rendering.\" class=\"wp-image-360171\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/box-flaps-nested.jpg?w=1261&amp;ssl=1 1261w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/box-flaps-nested.jpg?resize=300%2C81&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/box-flaps-nested.jpg?resize=1024%2C275&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/box-flaps-nested.jpg?resize=768%2C206&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/box-flaps-nested.jpg?resize=1000%2C269&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Check out this demo that flips between nested and non-nested elements to see the difference in action.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_92cb5a721624c63c002b420843a5af91\" src=\"//codepen.io/anon/embed/preview/92cb5a721624c63c002b420843a5af91?height=450&amp;theme-id=1&amp;slug-hash=92cb5a721624c63c002b420843a5af91&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 92cb5a721624c63c002b420843a5af91\" title=\"CodePen Embed 92cb5a721624c63c002b420843a5af91\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Each box has a <code>transform-origin</code> set to the bottom right corner with <code>100% 100%</code>. Checking the &#8220;Transform&#8221; toggle rotates each box <code>90deg</code>. But, see how the behavior of that <code>transform</code> changes if we nest the elements.</p>\n\n\n\n<p>We’re flipping between the two versions of markup but not changing anything else.</p>\n\n\n\n<p>Nested:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"boxes boxes--nested\">\n  &lt;div class=\"box\">\n    &lt;div class=\"box\">\n      &lt;div class=\"box\">\n        &lt;div class=\"box\">&lt;/div>\n      &lt;/div>\n    &lt;/div>\n  &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<p>Not nested:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"boxes\">\n  &lt;div class=\"box\">&lt;/div>\n  &lt;div class=\"box\">&lt;/div>\n  &lt;div class=\"box\">&lt;/div>\n  &lt;div class=\"box\">&lt;/div>\n&lt;/div></code></pre>\n\n\n<h3 id=\"transforming-all-the-things\">Transforming all the things</h3>\n\n\n<p>After applying some styles to our HTML, we have our package template.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWaWewx\" src=\"//codepen.io/anon/embed/preview/NWaWewx?height=450&amp;theme-id=1&amp;slug-hash=NWaWewx&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWaWewx\" title=\"CodePen Embed NWaWewx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The styles specify the different colors and position the sides to the package. Each side gets a position that’s relative to the &#8220;main&#8221; side. (You’ll see why all that nesting is useful in a moment.)</p>\n\n\n\n<p>There are some things to be aware of. Much like working with cuboids, we are using <code>--height</code>, <code>--width</code>, and <code>--depth</code> variables for sizing. This will make it easier to change our package sizing down the line.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package {\n  height: calc(var(--height, 20) * 1vmin);\n  width: calc(var(--width, 20) * 1vmin);\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">Why define sizing like this? We are using a unit-less default sizing of <code>20</code>, an idea I picked up from Lea Verou&#8217;s&nbsp;<a target=\"_blank\" href=\"https://youtu.be/kZOJCVvyF-4\" rel=\"noreferrer noopener\">2016 CSS ConfAsia talk</a> (starting at <a href=\"https://www.youtube.com/watch?v=kZOJCVvyF-4&amp;t=1278s\" rel=\"noopener\">52:44</a>). Using custom properties as&nbsp;“data”&nbsp;instead of&nbsp;“values,”&nbsp;we are free to do what we want with them using&nbsp;<code>calc()</code>. Additionally, JavaScript doesn’t have to care about value units and we can change to&nbsp;pixels,&nbsp;a percentage, etc., without having to make changes elsewhere. You could refactor this into a coefficient in the&nbsp;<code>--root</code>,&nbsp;but it could also quickly become overkill.</p>\n\n\n\n<p>The flaps for each side also need a size ever so smaller than the sides they are a part of. This is so we can see a slight gap as we would in real life. Also, the flaps on two sides need to sit a little lower. This is so that when we fold them up, we don&#8217;t get <code>z-index</code> fighting between them.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"2,3,19,23\"><code markup=\"tt\">.package__flap {\n  width: 99.5%;\n  height: 49.5%;\n  background: var(--flap-bg, var(--face-4));\n  position: absolute;\n  left: 50%;\n  transform: translate(-50%, 0);\n}\n.package__flap--top {\n  transform-origin: 50% 100%;\n  bottom: 100%;\n}\n.package__flap--bottom {\n  top: 100%;\n  transform-origin: 50% 0%;\n}\n.package__side--extra > .package__flap--bottom,\n.package__side--tabbed > .package__flap--bottom {\n  top: 99%;\n}\n.package__side--extra > .package__flap--top,\n.package__side--tabbed > .package__flap--top {\n  bottom: 99%;\n}</code></pre>\n\n\n\n<p>We&#8217;re also starting to consider the <code>transform-origin</code> for the individual pieces. A top flap will rotate from its bottom edge and a bottom flap will rotate from its top edge.</p>\n\n\n\n<p>We can use a pseudo-element for the tab on that right side. We are using <code>clip-path</code> to get that desired shape.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"8,9,10\"><code markup=\"tt\">.package__side--tabbed:after {\n  content: '';\n  position: absolute;\n  left: 99.5%;\n  height: 100%;\n  width: 10%;\n  background: var(--face-3);\n  -webkit-clip-path: polygon(0 0%, 100% 20%, 100% 80%, 0 100%);\n  clip-path: polygon(0 0%, 100% 20%, 100% 80%, 0 100%);\n  transform-origin: 0% 50%;\n}</code></pre>\n\n\n\n<p>Let&#8217;s start working with our template on a 3D plane. We can start by rotating the <code>.scene</code> on the X and Y axis.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.scene {\n  transform: rotateX(-24deg) rotateY(-32deg) rotateX(90deg);\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwMaMVE\" src=\"//codepen.io/anon/embed/preview/VwMaMVE?height=450&amp;theme-id=1&amp;slug-hash=VwMaMVE&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwMaMVE\" title=\"CodePen Embed VwMaMVE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"folding-up\">Folding up</h3>\n\n\n<p>We&#8217;re ready to start folding up our template! Our template will fold up based on a custom property, <code>--packaged</code>. If the value is <code>1</code>, then we can fold up the template. For example, let&#8217;s fold some of the sides and the pseudo-element tab.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package__side--tabbed,\n.package__side--tabbed:after {\n  transform: rotateY(calc(var(--packaged, 0) * -90deg)); \n}\n.package__side--extra {\n  transform: rotateY(calc(var(--packaged, 0) * 90deg));\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_23519fca78ec47b8c948c28a45c4148e\" src=\"//codepen.io/anon/embed/preview/23519fca78ec47b8c948c28a45c4148e?height=450&amp;theme-id=1&amp;slug-hash=23519fca78ec47b8c948c28a45c4148e&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 23519fca78ec47b8c948c28a45c4148e\" title=\"CodePen Embed 23519fca78ec47b8c948c28a45c4148e\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Or, we could write a rule for all sides that aren&#8217;t the &#8220;main&#8221; one.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package__side:not(.package__side--main),\n.package__side:not(.package__side--main):after {\n  transform: rotateY(calc((var(--packaged, 0) * var(--rotation, 90)) * 1deg));\n}\n.package__side--tabbed { --rotation: -90; }</code></pre>\n\n\n\n<p>And that would cover all the sides.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNGLXjW\" src=\"//codepen.io/anon/embed/preview/oNGLXjW?height=450&amp;theme-id=1&amp;slug-hash=oNGLXjW&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNGLXjW\" title=\"CodePen Embed oNGLXjW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Remember when I said the nested sides allow us to inherit a parent&#8217;s transform? If we update our demo so we can change the value of <code>--packaged</code>, we can see how the value affects the transforms. Try sliding the <code>--packaged</code> value between <code>1</code> and <code>0</code> and you’ll see exactly what I mean.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_763aaec9ee1493b1e50380c2c840e5a3\" src=\"//codepen.io/anon/embed/preview/763aaec9ee1493b1e50380c2c840e5a3?height=450&amp;theme-id=1&amp;slug-hash=763aaec9ee1493b1e50380c2c840e5a3&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 763aaec9ee1493b1e50380c2c840e5a3\" title=\"CodePen Embed 763aaec9ee1493b1e50380c2c840e5a3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now that we have a way to toggle the folding state of our template, we can start working on some motion. Our previous demo flips between the two states. We can make use of <code>transition</code> for that. The quickest way? Add a <code>transition</code> to the <code>transform</code> of every child in the <code>.scene</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.scene *,\n.scene *::after {\n  transition: transform calc(var(--speed, 0.2) * 1s);\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_43ab4ba93e9db73577b789aaff94419f\" src=\"//codepen.io/anon/embed/preview/43ab4ba93e9db73577b789aaff94419f?height=450&amp;theme-id=1&amp;slug-hash=43ab4ba93e9db73577b789aaff94419f&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 43ab4ba93e9db73577b789aaff94419f\" title=\"CodePen Embed 43ab4ba93e9db73577b789aaff94419f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"multistep-transitions\">Multi-step transitions!</h3>\n\n\n<p>But we don&#8217;t fold the template all up in one go — in real life, there&#8217;s a sequence to it where we’d fold up one side and its flap first then move on to the next, and so on. Scoped custom properties are perfect for this.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.scene *,\n.scene *::after {\n  transition: transform calc(var(--speed, 0.2) * 1s) calc((var(--step, 1) * var(--delay, 0.2)) * 1s);\n}</code></pre>\n\n\n\n<p>Here we are saying that, for each <code>transition</code>, use a <code>transition-delay</code> of <code>--step</code> multiplied by <code>--delay</code>. The <code>--delay</code> value won&#8217;t change but each element can define which &#8220;step&#8221; it is in the sequence. And then we can be explicit about the order in which things happen.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package__side--extra {\n  --step: 1;\n}\n.package__side--tabbed {\n  --step: 2;\n}\n.package__side--flipped,\n.package__side--tabbed::after {\n  --step: 3;\n}</code></pre>\n\n\n\n<p>Consider the following demo for a better idea of how this works. Change the slider values to update the order in which things happen. Can you change which car wins?</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYzeoJW\" src=\"//codepen.io/anon/embed/preview/LYzeoJW?height=450&amp;theme-id=1&amp;slug-hash=LYzeoJW&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYzeoJW\" title=\"CodePen Embed LYzeoJW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>That same technique is key for what we are going to for. We could even introduce an <code>--initial-delay</code> that adds a slight pause to everything for even more realism.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.race__light--animated,\n.race__light--animated:after,\n.car {\n  animation-delay: calc((var(--step, 0) * var(--delay-step, 0)) * 1s);\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_51626eaaf878e238d467c5fade2587b3\" src=\"//codepen.io/anon/embed/preview/51626eaaf878e238d467c5fade2587b3?height=450&amp;theme-id=1&amp;slug-hash=51626eaaf878e238d467c5fade2587b3&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 51626eaaf878e238d467c5fade2587b3\" title=\"CodePen Embed 51626eaaf878e238d467c5fade2587b3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If we look back at our package, we can take this further and apply a &#8220;step&#8221; to all the elements that are going to <code>transform</code>. It’s quite verbose but it does the job. Alternatively, you could inline these values in the markup.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package__side--extra > .package__flap--bottom {\n  --step: 4;\n}\n.package__side--tabbed > .package__flap--bottom {\n  --step: 5;\n}\n.package__side--main > .package__flap--bottom {\n  --step: 6;\n}\n.package__side--flipped > .package__flap--bottom {\n  --step: 7;\n}\n.package__side--extra > .package__flap--top {\n  --step: 8;\n}\n.package__side--tabbed > .package__flap--top {\n  --step: 9;\n}\n.package__side--main > .package__flap--top {\n  --step: 10;\n}\n.package__side--flipped > .package__flap--top {\n  --step: 11;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_a9bd18e19d78284123edf8087833ab2f\" src=\"//codepen.io/anon/embed/preview/a9bd18e19d78284123edf8087833ab2f?height=450&amp;theme-id=1&amp;slug-hash=a9bd18e19d78284123edf8087833ab2f&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed a9bd18e19d78284123edf8087833ab2f\" title=\"CodePen Embed a9bd18e19d78284123edf8087833ab2f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But, it doesn’t feel very realistic.</p>\n\n\n<h3 id=\"maybe-we-oughta-flip-the-box-too\">Maybe we oughta flip the box, too</h3>\n\n\n<p>If I were folding up the box in real life, I’d likely flip the box up before folding in the top flaps. So how might we do that? Well, those with an eager eye might have noticed the <code>.package__wrapper</code> element. We are going to use this to slide the package. Then we&#8217;re going to rotate the package on the x-axis. This will create the impression of flipping the package onto its side.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package {\n  transform-origin: 50% 100%;\n  transform: rotateX(calc(var(--packaged, 0) * -90deg));\n}\n.package__wrapper {\n  transform: translate(0, calc(var(--packaged, 0) * -100%));\n}</code></pre>\n\n\n\n<p>Adjusting the <code>--step</code> declarations accordingly gives us something like this.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_d267ef960b908d8c33fa61ddeffcf9dd\" src=\"//codepen.io/anon/embed/preview/d267ef960b908d8c33fa61ddeffcf9dd?height=450&amp;theme-id=1&amp;slug-hash=d267ef960b908d8c33fa61ddeffcf9dd&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed d267ef960b908d8c33fa61ddeffcf9dd\" title=\"CodePen Embed d267ef960b908d8c33fa61ddeffcf9dd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"unfolding-the-box\">Unfolding the box</h3>\n\n\n<p>If you flip between the folded and not folded states, you&#8217;ll notice that the unfold doesn&#8217;t look right. The unfolding sequence should be the exact reverse of the folding sequence. We could flip the <code>--step</code> based on <code>--packaged</code> and the number of steps. Our latest step is <code>15</code>. We can update our <code>transition</code> to this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.scene *,\n.scene *:after {\n  --no-of-steps: 15;\n  --step-delay: calc(var(--step, 1) - ((1 - var(--packaged, 0)) * (var(--step) - ((var(--no-of-steps) + 1) - var(--step)))));\n  transition: transform calc(var(--speed, 0.2) * 1s) calc((var(--step-delay) * var(--delay, 0.2)) * 1s);\n}</code></pre>\n\n\n\n<p>That is quite the mouthful of <code>calc</code> to reverse the <code>transition-delay</code>. But, it works! We must remind ourselves to keep that <code>--no-of-steps</code> value up to date though!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_c9308195b2ce3f548a0cb0c458fb03a7\" src=\"//codepen.io/anon/embed/preview/c9308195b2ce3f548a0cb0c458fb03a7?height=450&amp;theme-id=1&amp;slug-hash=c9308195b2ce3f548a0cb0c458fb03a7&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed c9308195b2ce3f548a0cb0c458fb03a7\" title=\"CodePen Embed c9308195b2ce3f548a0cb0c458fb03a7\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We do have another option. As we continue down the &#8220;pure CSS&#8221; route, we will eventually make use of the <a href=\"https://twitter.com/jh3yy/status/1380288957930475520?s=20\" rel=\"noopener\">checkbox hack</a> to toggling between the folding states. We could have two sets of defined “steps” where one set is active when our checkbox gets checked. It’s certainly a more verbose solution. But, it does give us more finite control.</p>\n\n\n\n<pre rel=\"SCSS\" class=\"wp-block-csstricks-code-block language-scss\" data-line=\"\"><code markup=\"tt\">/* Folding */\n:checked ~ .scene .package__side--extra {\n  --step: 1;\n}\n/* Unfolding */\n.package__side--extra {\n  --step: 15;\n}</code></pre>\n\n\n<h3 id=\"sizing-and-centering\">Sizing and centering</h3>\n\n\n<p>Before we ditch the use of <code>[dat.gui](https://github.com/dataarts/dat.gui)</code> in our demo, let&#8217;s have a play with the size of our package. We want to check that our package remains centered while folding and flipping. In this demo, the package has a larger <code>--height</code> and the <code>.scene</code> has a dashed border.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_fe89565a8ca6c96b383ec5234755135a\" src=\"//codepen.io/anon/embed/preview/fe89565a8ca6c96b383ec5234755135a?height=450&amp;theme-id=1&amp;slug-hash=fe89565a8ca6c96b383ec5234755135a&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed fe89565a8ca6c96b383ec5234755135a\" title=\"CodePen Embed fe89565a8ca6c96b383ec5234755135a\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We may as well tweak our <code>transform</code> to better center the package while we’re at it:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Considers package height by translating on z-axis */\n.scene {\n  transform: rotateX(calc(var(--rotate-x, -24) * 1deg)) rotateY(calc(var(--rotate-y, -32) * 1deg)) rotateX(90deg) translate3d(0, 0, calc(var(--height, 20) * -0.5vmin));\n}\n/* Considers package depth by sliding the depth before flipping */\n.package__wrapper {\n  transform: translate(0, calc((var(--packaged, 0) * var(--depth, 20)) * -1vmin));\n}</code></pre>\n\n\n\n<p>This gives us reliable centering in the scene. It all comes down to preference though!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_c13c46bb92fb911171bc64b527be93a2\" src=\"//codepen.io/anon/embed/preview/c13c46bb92fb911171bc64b527be93a2?height=450&amp;theme-id=1&amp;slug-hash=c13c46bb92fb911171bc64b527be93a2&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed c13c46bb92fb911171bc64b527be93a2\" title=\"CodePen Embed c13c46bb92fb911171bc64b527be93a2\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"adding-in-the-checkbox-hack\">Adding in the checkbox hack</h3>\n\n\n<p>Now let&#8217;s get <code>dat.gui</code> out of the way and make this &#8220;pure” CSS. For this, we need to introduce a bunch of controls in the HTML. We are going to use a checkbox for folding and unfolding our package. Then we&#8217;re going to use a <code>radio</code> button to pick a package size.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;input id=\"package\" type=\"checkbox\"/>\n\n&lt;input id=\"one\" type=\"radio\" name=\"size\"/>\n&lt;label class=\"size-label one\" for=\"one\">S&lt;/label>\n\n&lt;input id=\"two\" type=\"radio\" name=\"size\" checked=\"checked\"/>\n&lt;label class=\"size-label two\" for=\"two\">M&lt;/label>\n\n&lt;input id=\"three\" type=\"radio\" name=\"size\"/>\n&lt;label class=\"size-label three\" for=\"three\">L&lt;/label>\n\n&lt;input id=\"four\" type=\"radio\" name=\"size\"/>\n&lt;label class=\"size-label four\" for=\"four\">XL&lt;/label>\n\n&lt;label class=\"close\" for=\"package\">Close Package&lt;/label>\n&lt;label class=\"open\" for=\"package\">Open Package&lt;/label></code></pre>\n\n\n\n<p>In the final demo, we will hide the inputs and make use of the label elements. For now, though, let&#8217;s leave them all visible. The trick is to use the sibling combinator (<code>~</code>) when certain controls get <code>:checked</code>. We can then set custom property values on the <code>.scene</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#package:checked ~ .scene {\n  --packaged: 1;\n}\n#one:checked ~ .scene {\n  --height: 10;\n  --width: 20;\n  --depth: 20;\n}\n#two:checked ~ .scene {\n  --height: 20;\n  --width: 20;\n  --depth: 20;\n}\n#three:checked ~ .scene {\n  --height: 20;\n  --width: 30;\n  --depth: 20;\n}\n#four:checked ~ .scene {\n  --height: 30;\n  --width: 20;\n  --depth: 30;\n}</code></pre>\n\n\n\n<p>And here is the demo with that working!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_80819d5918de1e871528edf71f8348c7\" src=\"//codepen.io/anon/embed/80819d5918de1e871528edf71f8348c7?height=450&amp;theme-id=1&amp;slug-hash=80819d5918de1e871528edf71f8348c7&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 80819d5918de1e871528edf71f8348c7\" title=\"CodePen Embed 80819d5918de1e871528edf71f8348c7\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"final-polish\">Final polish</h3>\n\n\n<p>Now we&#8217;re in a place to make things look &#8220;pretty&#8221; and add some extra touches. Let&#8217;s start by hiding all the inputs.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">input {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}</code></pre>\n\n\n\n<p>We can style the sizing options as rounded buttons:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.size-label {\n  position: fixed;\n  top: var(--top);\n  right: 1rem;\n  z-index: 3;\n  font-family: sans-serif;\n  font-weight: bold;\n  color: #262626;\n  height: 44px;\n  width: 44px;\n  display: grid;\n  place-items: center;\n  background: #fcfcfc;\n  border-radius: 50%;\n  cursor: pointer;\n  border: 4px solid #8bb1b1;\n  transform: translate(0, calc(var(--y, 0) * 1%)) scale(var(--scale, 1));\n  transition: transform 0.1s;\n}\n.size-label:hover {\n  --y: -5;\n}\n.size-label:active {\n  --y: 2;\n  --scale: 0.9;\n}</code></pre>\n\n\n\n<p>We want to be able to tap anywhere to toggle between folding and unfolding our package. So our <code>.open</code> and <code>.close</code> labels will take up the full screen. Wondering why we have two labels? It’s a little trick. If we use a <code>transition-delay</code> and scale up the appropriate label, we can hide both labels while the package transitions. This is how we combat spam tapping (even though it won&#8217;t stop a user hitting the space bar on a keyboard).</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.close,\n.open {\n  position: fixed;\n  height: 100vh;\n  width: 100vw;\n  z-index: 2;\n  transform: scale(var(--scale, 1)) translate3d(0, 0, 50vmin);\n  transition: transform 0s var(--reveal-delay, calc(((var(--no-of-steps, 15) + 1) * var(--delay, 0.2)) * 1s));\n}\n\n#package:checked ~ .close,\n.open {\n  --scale: 0;\n  --reveal-delay: 0s;\n}\n#package:checked ~ .open {\n  --scale: 1;\n  --reveal-delay: calc(((var(--no-of-steps, 15) + 1) * var(--delay, 0.2)) * 1s);\n}</code></pre>\n\n\n\n<p>Check out this demo to see where we’ve added <code>background-color</code> to both <code>.open</code> and <code>.close</code>. Neither label is visible during the transition.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ba390feeff918d0328c3526af518bc3a\" src=\"//codepen.io/anon/embed/preview/ba390feeff918d0328c3526af518bc3a?height=450&amp;theme-id=1&amp;slug-hash=ba390feeff918d0328c3526af518bc3a&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ba390feeff918d0328c3526af518bc3a\" title=\"CodePen Embed ba390feeff918d0328c3526af518bc3a\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We&#8217;ve got complete functionality! But, our package is a little underwhelming at the moment. Let’s add extra details to make things more “box”-like with things like parcel tape and packing labels.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_fbe3070586437995ebdac2dbd13d0bb3\" src=\"//codepen.io/anon/embed/preview/fbe3070586437995ebdac2dbd13d0bb3?height=450&amp;theme-id=1&amp;slug-hash=fbe3070586437995ebdac2dbd13d0bb3&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed fbe3070586437995ebdac2dbd13d0bb3\" title=\"CodePen Embed fbe3070586437995ebdac2dbd13d0bb3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Little details like this are only limited by our imagination! We can use our <code>--packaged</code> custom property to affect anything. For example, the <code>.package__tape</code> is transitioning the <code>scaleY</code> transform:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.package__tape {\n  transform: translate3d(-50%, var(--offset-y), -2px) scaleX(var(--packaged, 0));\n}</code></pre>\n\n\n\n<p>The thing to remember is that whenever we add a new feature that affects the sequence, we need to update our steps. Not only the <code>--step</code> values, but also the <code>--no-of-steps</code> value.</p>\n\n\n<h3 id=\"thats-it\">That’s it!</h3>\n\n\n<p>That&#8217;s how you make a pure CSS 3D package toggle. Are you going to drop this into your website? Unlikely! But, it&#8217;s fun to see how you might achieve these things with CSS. Custom properties are so powerful.</p>\n\n\n\n<p>Why not get super festive and give the gift of CSS!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jOGroXN\" src=\"//codepen.io/anon/embed/jOGroXN?height=450&amp;theme-id=1&amp;slug-hash=jOGroXN&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jOGroXN\" title=\"CodePen Embed jOGroXN\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Stay Awesome! ʕ •ᴥ•ʔ</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-make-a-pure-css-3d-package-toggle/\">How to Make a Pure CSS 3D Package Toggle</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "You know how you can get cardboard boxes that come totally flat? You fold ‘em up and tape ‘em to make them into a useful box. Then when it’s time to recycle them, you cut them back apart to flatten them. Recently, someone reached out to me about essentially this concept as a 3D animation and I thought it would make an interesting tutorial to do it entirely in CSS, so here we are!\n\n\n\nHow might that animation look? How could we create that packing timeline? Could the sizing be flexible? Let’s make a pure CSS package toggle.\n\n\n\n\n\n\n\nHere’s what we’re working towards. Tap to pack and unpack the cardboard box.\n\n\n\nCodePen Embed Fallback\n\n\nWhere to start?\n\n\nWhere do you even start with something like this? It’s best to plan ahead. We know we’re going to have a template for our package. And that will need folding up in three dimensions. If working with 3D in CSS is new to you, I recommend this article to get you started.\n\n\n\nIf you’re familiar with 3D CSS, it might be tempting to construct a cuboid and go from there. But, that’s going to pose some problems. We need to consider how a package goes from 2D to 3D.\n\n\n\nLet’s start by creating a template. We need to plan ahead with our markup and think about how we want our packing animation to work. Let’s start with some HTML.\n\n\n\n<div class=\"scene\">\n  <div class=\"package__wrapper\">\n    <div class=\"package\">\n      <div class=\"package__side package__side--main\">\n        <div class=\"package__flap package__flap--top\"></div>\n        <div class=\"package__flap package__flap--bottom\"></div>\n        <div class=\"package__side package__side--tabbed\">\n          <div class=\"package__flap package__flap--top\"></div>\n          <div class=\"package__flap package__flap--bottom\"></div>\n        </div>\n        <div class=\"package__side package__side--extra\">\n          <div class=\"package__flap package__flap--top\"></div>\n          <div class=\"package__flap package__flap--bottom\"></div>\n          <div class=\"package__side package__side--flipped\">\n            <div class=\"package__flap package__flap--top\"></div>\n            <div class=\"package__flap package__flap--bottom\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\nMixins are a good idea\n\n\nThere’s quite a bit happening there. It’s a lot of divs. I often like to use Pug for generating markup so I can split things up into reusable blocks. For example, every side will have two flaps. We can create a Pug mixin for the sides and use attributes to apply a modifier class name to make all that markup a lot easier to write.\n\n\n\nmixin flaps()\n  .package__flap.package__flap--top\n  .package__flap.package__flap--bottom\n      \nmixin side()\n  .package__side(class=`package__side--${attributes.class || 'side'}`)\n    +flaps()\n    if block\n      block\n\n.scene\n  .package__wrapper\n    .package\n      +side()(class=\"main\")\n        +side()(class=\"tabbed\")\n        +side()(class=\"extra\")\n          +side()(class=\"flipped\")\n\n\n\nWe’re using two mixins. One creates the flaps for each side of the box. The other creates the sides of the box. Notice in the side mixin we are making use of block. That is where children of mixin usage get rendered which is particularly useful, as we need to nest some of the sides to make our lives easier later.\n\n\n\nOur generated markup:\n\n\n\n<div class=\"scene\">\n  <div class=\"package__wrapper\">\n    <div class=\"package\">\n      <div class=\"package__side package__side--main\">\n        <div class=\"package__flap package__flap--top\"></div>\n        <div class=\"package__flap package__flap--bottom\"></div>\n        <div class=\"package__side package__side--tabbed\">\n          <div class=\"package__flap package__flap--top\"></div>\n          <div class=\"package__flap package__flap--bottom\"></div>\n        </div>\n        <div class=\"package__side package__side--extra\">\n          <div class=\"package__flap package__flap--top\"></div>\n          <div class=\"package__flap package__flap--bottom\"></div>\n          <div class=\"package__side package__side--flipped\">\n            <div class=\"package__flap package__flap--top\"></div>\n            <div class=\"package__flap package__flap--bottom\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\nNesting the sides\n\n\nNesting the sides makes it easier to fold up our package. Much like each side has two flaps. The children of a side can inherit the sides’ transform and then apply their own. If we started with a cuboid, it would be hard to leverage this.\n\n\n\n\n\n\n\nCheck out this demo that flips between nested and non-nested elements to see the difference in action.\n\n\n\nCodePen Embed Fallback\n\n\n\nEach box has a transform-origin set to the bottom right corner with 100% 100%. Checking the “Transform” toggle rotates each box 90deg. But, see how the behavior of that transform changes if we nest the elements.\n\n\n\nWe’re flipping between the two versions of markup but not changing anything else.\n\n\n\nNested:\n\n\n\n<div class=\"boxes boxes--nested\">\n  <div class=\"box\">\n    <div class=\"box\">\n      <div class=\"box\">\n        <div class=\"box\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n\nNot nested:\n\n\n\n<div class=\"boxes\">\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n</div>\n\n\nTransforming all the things\n\n\nAfter applying some styles to our HTML, we have our package template.\n\n\n\nCodePen Embed Fallback\n\n\n\nThe styles specify the different colors and position the sides to the package. Each side gets a position that’s relative to the “main” side. (You’ll see why all that nesting is useful in a moment.)\n\n\n\nThere are some things to be aware of. Much like working with cuboids, we are using --height, --width, and --depth variables for sizing. This will make it easier to change our package sizing down the line.\n\n\n\n.package {\n  height: calc(var(--height, 20) * 1vmin);\n  width: calc(var(--width, 20) * 1vmin);\n}\n\n\n\nWhy define sizing like this? We are using a unit-less default sizing of 20, an idea I picked up from Lea Verou’s 2016 CSS ConfAsia talk (starting at 52:44). Using custom properties as “data” instead of “values,” we are free to do what we want with them using calc(). Additionally, JavaScript doesn’t have to care about value units and we can change to pixels, a percentage, etc., without having to make changes elsewhere. You could refactor this into a coefficient in the --root, but it could also quickly become overkill.\n\n\n\nThe flaps for each side also need a size ever so smaller than the sides they are a part of. This is so we can see a slight gap as we would in real life. Also, the flaps on two sides need to sit a little lower. This is so that when we fold them up, we don’t get z-index fighting between them.\n\n\n\n.package__flap {\n  width: 99.5%;\n  height: 49.5%;\n  background: var(--flap-bg, var(--face-4));\n  position: absolute;\n  left: 50%;\n  transform: translate(-50%, 0);\n}\n.package__flap--top {\n  transform-origin: 50% 100%;\n  bottom: 100%;\n}\n.package__flap--bottom {\n  top: 100%;\n  transform-origin: 50% 0%;\n}\n.package__side--extra > .package__flap--bottom,\n.package__side--tabbed > .package__flap--bottom {\n  top: 99%;\n}\n.package__side--extra > .package__flap--top,\n.package__side--tabbed > .package__flap--top {\n  bottom: 99%;\n}\n\n\n\nWe’re also starting to consider the transform-origin for the individual pieces. A top flap will rotate from its bottom edge and a bottom flap will rotate from its top edge.\n\n\n\nWe can use a pseudo-element for the tab on that right side. We are using clip-path to get that desired shape.\n\n\n\n.package__side--tabbed:after {\n  content: '';\n  position: absolute;\n  left: 99.5%;\n  height: 100%;\n  width: 10%;\n  background: var(--face-3);\n  -webkit-clip-path: polygon(0 0%, 100% 20%, 100% 80%, 0 100%);\n  clip-path: polygon(0 0%, 100% 20%, 100% 80%, 0 100%);\n  transform-origin: 0% 50%;\n}\n\n\n\nLet’s start working with our template on a 3D plane. We can start by rotating the .scene on the X and Y axis.\n\n\n\n.scene {\n  transform: rotateX(-24deg) rotateY(-32deg) rotateX(90deg);\n}\n\n\n\nCodePen Embed Fallback\n\n\nFolding up\n\n\nWe’re ready to start folding up our template! Our template will fold up based on a custom property, --packaged. If the value is 1, then we can fold up the template. For example, let’s fold some of the sides and the pseudo-element tab.\n\n\n\n.package__side--tabbed,\n.package__side--tabbed:after {\n  transform: rotateY(calc(var(--packaged, 0) * -90deg)); \n}\n.package__side--extra {\n  transform: rotateY(calc(var(--packaged, 0) * 90deg));\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nOr, we could write a rule for all sides that aren’t the “main” one.\n\n\n\n.package__side:not(.package__side--main),\n.package__side:not(.package__side--main):after {\n  transform: rotateY(calc((var(--packaged, 0) * var(--rotation, 90)) * 1deg));\n}\n.package__side--tabbed { --rotation: -90; }\n\n\n\nAnd that would cover all the sides.\n\n\n\nCodePen Embed Fallback\n\n\n\nRemember when I said the nested sides allow us to inherit a parent’s transform? If we update our demo so we can change the value of --packaged, we can see how the value affects the transforms. Try sliding the --packaged value between 1 and 0 and you’ll see exactly what I mean.\n\n\n\nCodePen Embed Fallback\n\n\n\nNow that we have a way to toggle the folding state of our template, we can start working on some motion. Our previous demo flips between the two states. We can make use of transition for that. The quickest way? Add a transition to the transform of every child in the .scene.\n\n\n\n.scene *,\n.scene *::after {\n  transition: transform calc(var(--speed, 0.2) * 1s);\n}\n\n\n\nCodePen Embed Fallback\n\n\nMulti-step transitions!\n\n\nBut we don’t fold the template all up in one go — in real life, there’s a sequence to it where we’d fold up one side and its flap first then move on to the next, and so on. Scoped custom properties are perfect for this.\n\n\n\n.scene *,\n.scene *::after {\n  transition: transform calc(var(--speed, 0.2) * 1s) calc((var(--step, 1) * var(--delay, 0.2)) * 1s);\n}\n\n\n\nHere we are saying that, for each transition, use a transition-delay of --step multiplied by --delay. The --delay value won’t change but each element can define which “step” it is in the sequence. And then we can be explicit about the order in which things happen.\n\n\n\n.package__side--extra {\n  --step: 1;\n}\n.package__side--tabbed {\n  --step: 2;\n}\n.package__side--flipped,\n.package__side--tabbed::after {\n  --step: 3;\n}\n\n\n\nConsider the following demo for a better idea of how this works. Change the slider values to update the order in which things happen. Can you change which car wins?\n\n\n\nCodePen Embed Fallback\n\n\n\nThat same technique is key for what we are going to for. We could even introduce an --initial-delay that adds a slight pause to everything for even more realism.\n\n\n\n.race__light--animated,\n.race__light--animated:after,\n.car {\n  animation-delay: calc((var(--step, 0) * var(--delay-step, 0)) * 1s);\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nIf we look back at our package, we can take this further and apply a “step” to all the elements that are going to transform. It’s quite verbose but it does the job. Alternatively, you could inline these values in the markup.\n\n\n\n.package__side--extra > .package__flap--bottom {\n  --step: 4;\n}\n.package__side--tabbed > .package__flap--bottom {\n  --step: 5;\n}\n.package__side--main > .package__flap--bottom {\n  --step: 6;\n}\n.package__side--flipped > .package__flap--bottom {\n  --step: 7;\n}\n.package__side--extra > .package__flap--top {\n  --step: 8;\n}\n.package__side--tabbed > .package__flap--top {\n  --step: 9;\n}\n.package__side--main > .package__flap--top {\n  --step: 10;\n}\n.package__side--flipped > .package__flap--top {\n  --step: 11;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nBut, it doesn’t feel very realistic.\n\n\nMaybe we oughta flip the box, too\n\n\nIf I were folding up the box in real life, I’d likely flip the box up before folding in the top flaps. So how might we do that? Well, those with an eager eye might have noticed the .package__wrapper element. We are going to use this to slide the package. Then we’re going to rotate the package on the x-axis. This will create the impression of flipping the package onto its side.\n\n\n\n.package {\n  transform-origin: 50% 100%;\n  transform: rotateX(calc(var(--packaged, 0) * -90deg));\n}\n.package__wrapper {\n  transform: translate(0, calc(var(--packaged, 0) * -100%));\n}\n\n\n\nAdjusting the --step declarations accordingly gives us something like this.\n\n\n\nCodePen Embed Fallback\n\n\nUnfolding the box\n\n\nIf you flip between the folded and not folded states, you’ll notice that the unfold doesn’t look right. The unfolding sequence should be the exact reverse of the folding sequence. We could flip the --step based on --packaged and the number of steps. Our latest step is 15. We can update our transition to this:\n\n\n\n.scene *,\n.scene *:after {\n  --no-of-steps: 15;\n  --step-delay: calc(var(--step, 1) - ((1 - var(--packaged, 0)) * (var(--step) - ((var(--no-of-steps) + 1) - var(--step)))));\n  transition: transform calc(var(--speed, 0.2) * 1s) calc((var(--step-delay) * var(--delay, 0.2)) * 1s);\n}\n\n\n\nThat is quite the mouthful of calc to reverse the transition-delay. But, it works! We must remind ourselves to keep that --no-of-steps value up to date though!\n\n\n\nCodePen Embed Fallback\n\n\n\nWe do have another option. As we continue down the “pure CSS” route, we will eventually make use of the checkbox hack to toggling between the folding states. We could have two sets of defined “steps” where one set is active when our checkbox gets checked. It’s certainly a more verbose solution. But, it does give us more finite control.\n\n\n\n/* Folding */\n:checked ~ .scene .package__side--extra {\n  --step: 1;\n}\n/* Unfolding */\n.package__side--extra {\n  --step: 15;\n}\n\n\nSizing and centering\n\n\nBefore we ditch the use of [dat.gui](https://github.com/dataarts/dat.gui) in our demo, let’s have a play with the size of our package. We want to check that our package remains centered while folding and flipping. In this demo, the package has a larger --height and the .scene has a dashed border.\n\n\n\nCodePen Embed Fallback\n\n\n\nWe may as well tweak our transform to better center the package while we’re at it:\n\n\n\n/* Considers package height by translating on z-axis */\n.scene {\n  transform: rotateX(calc(var(--rotate-x, -24) * 1deg)) rotateY(calc(var(--rotate-y, -32) * 1deg)) rotateX(90deg) translate3d(0, 0, calc(var(--height, 20) * -0.5vmin));\n}\n/* Considers package depth by sliding the depth before flipping */\n.package__wrapper {\n  transform: translate(0, calc((var(--packaged, 0) * var(--depth, 20)) * -1vmin));\n}\n\n\n\nThis gives us reliable centering in the scene. It all comes down to preference though!\n\n\n\nCodePen Embed Fallback\n\n\nAdding in the checkbox hack\n\n\nNow let’s get dat.gui out of the way and make this “pure” CSS. For this, we need to introduce a bunch of controls in the HTML. We are going to use a checkbox for folding and unfolding our package. Then we’re going to use a radio button to pick a package size.\n\n\n\n<input id=\"package\" type=\"checkbox\"/>\n\n<input id=\"one\" type=\"radio\" name=\"size\"/>\n<label class=\"size-label one\" for=\"one\">S</label>\n\n<input id=\"two\" type=\"radio\" name=\"size\" checked=\"checked\"/>\n<label class=\"size-label two\" for=\"two\">M</label>\n\n<input id=\"three\" type=\"radio\" name=\"size\"/>\n<label class=\"size-label three\" for=\"three\">L</label>\n\n<input id=\"four\" type=\"radio\" name=\"size\"/>\n<label class=\"size-label four\" for=\"four\">XL</label>\n\n<label class=\"close\" for=\"package\">Close Package</label>\n<label class=\"open\" for=\"package\">Open Package</label>\n\n\n\nIn the final demo, we will hide the inputs and make use of the label elements. For now, though, let’s leave them all visible. The trick is to use the sibling combinator (~) when certain controls get :checked. We can then set custom property values on the .scene.\n\n\n\n#package:checked ~ .scene {\n  --packaged: 1;\n}\n#one:checked ~ .scene {\n  --height: 10;\n  --width: 20;\n  --depth: 20;\n}\n#two:checked ~ .scene {\n  --height: 20;\n  --width: 20;\n  --depth: 20;\n}\n#three:checked ~ .scene {\n  --height: 20;\n  --width: 30;\n  --depth: 20;\n}\n#four:checked ~ .scene {\n  --height: 30;\n  --width: 20;\n  --depth: 30;\n}\n\n\n\nAnd here is the demo with that working!\n\n\n\nCodePen Embed Fallback\n\n\nFinal polish\n\n\nNow we’re in a place to make things look “pretty” and add some extra touches. Let’s start by hiding all the inputs.\n\n\n\ninput {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n\n\nWe can style the sizing options as rounded buttons:\n\n\n\n.size-label {\n  position: fixed;\n  top: var(--top);\n  right: 1rem;\n  z-index: 3;\n  font-family: sans-serif;\n  font-weight: bold;\n  color: #262626;\n  height: 44px;\n  width: 44px;\n  display: grid;\n  place-items: center;\n  background: #fcfcfc;\n  border-radius: 50%;\n  cursor: pointer;\n  border: 4px solid #8bb1b1;\n  transform: translate(0, calc(var(--y, 0) * 1%)) scale(var(--scale, 1));\n  transition: transform 0.1s;\n}\n.size-label:hover {\n  --y: -5;\n}\n.size-label:active {\n  --y: 2;\n  --scale: 0.9;\n}\n\n\n\nWe want to be able to tap anywhere to toggle between folding and unfolding our package. So our .open and .close labels will take up the full screen. Wondering why we have two labels? It’s a little trick. If we use a transition-delay and scale up the appropriate label, we can hide both labels while the package transitions. This is how we combat spam tapping (even though it won’t stop a user hitting the space bar on a keyboard).\n\n\n\n.close,\n.open {\n  position: fixed;\n  height: 100vh;\n  width: 100vw;\n  z-index: 2;\n  transform: scale(var(--scale, 1)) translate3d(0, 0, 50vmin);\n  transition: transform 0s var(--reveal-delay, calc(((var(--no-of-steps, 15) + 1) * var(--delay, 0.2)) * 1s));\n}\n\n#package:checked ~ .close,\n.open {\n  --scale: 0;\n  --reveal-delay: 0s;\n}\n#package:checked ~ .open {\n  --scale: 1;\n  --reveal-delay: calc(((var(--no-of-steps, 15) + 1) * var(--delay, 0.2)) * 1s);\n}\n\n\n\nCheck out this demo to see where we’ve added background-color to both .open and .close. Neither label is visible during the transition.\n\n\n\nCodePen Embed Fallback\n\n\n\nWe’ve got complete functionality! But, our package is a little underwhelming at the moment. Let’s add extra details to make things more “box”-like with things like parcel tape and packing labels.\n\n\n\nCodePen Embed Fallback\n\n\n\nLittle details like this are only limited by our imagination! We can use our --packaged custom property to affect anything. For example, the .package__tape is transitioning the scaleY transform:\n\n\n\n.package__tape {\n  transform: translate3d(-50%, var(--offset-y), -2px) scaleX(var(--packaged, 0));\n}\n\n\n\nThe thing to remember is that whenever we add a new feature that affects the sequence, we need to update our steps. Not only the --step values, but also the --no-of-steps value.\n\n\nThat’s it!\n\n\nThat’s how you make a pure CSS 3D package toggle. Are you going to drop this into your website? Unlikely! But, it’s fun to see how you might achieve these things with CSS. Custom properties are so powerful.\n\n\n\nWhy not get super festive and give the gift of CSS!\n\n\n\nCodePen Embed Fallback\n\n\n\nStay Awesome! ʕ •ᴥ•ʔ\n\nHow to Make a Pure CSS 3D Package Toggle originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-12T15:29:38.000Z",
      "date_modified": "2022-01-12T15:29:38.000Z",
      "_plugin": {
        "pageFilename": "0fae4c5ab9f18316f4924e2fb55dacaf030944d26ffc21cb5260be373c1160a6.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=361191",
      "url": "https://css-tricks.com/netlify-identity/",
      "title": "Netlify Identity, a Key Aspect to Jamstack Development",
      "summary": "(This is a sponsored post.)\nNetlify is amazing at static file hosting, but it’s really so much more than that. You can build any sort of website, even highly dynamic apps, with the Jamstack approach and static file hosting …\n\nNetlify Identity, a Key Aspect to Jamstack Development originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p><a href=\"https://www.netlify.com/\" rel=\"noopener\">Netlify</a> is amazing at static file hosting, but it&#8217;s really so much more than that. You can build any sort of website, even highly dynamic apps, with the Jamstack approach and static file hosting at the core. </p>\n\n\n\n<p>Say you want to build a TODO app with users. Those users will need to sign up and log in. Can&#8217;t do that with a static site, right? You can, actually. Netlify helps with <a href=\"https://docs.netlify.com/visitor-access/identity/\" rel=\"noopener\">Netlify Identity</a>, a robust offering they&#8217;ve had for years. Enabling it is just a few clicks in the admin UI, and they even <a href=\"https://github.com/netlify/netlify-identity-widget\" rel=\"noopener\">provide auth widgets</a> so you have to build precious little to get this working.</p>\n\n\n\n<span id=\"more-361191\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?resize=1600%2C800&#038;ssl=1\" alt=\"Showing a login widget powered by Netlify Identity.\" class=\"wp-image-361194\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?resize=1536%2C768&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/visitor-access-identity-widget-sample.png?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now you&#8217;ve got a website with authentication, great! But how do you keep going with your TODO app? You&#8217;ll need some kind of cloud storage for the data on your user&#8217;s lists. For that, you&#8217;ll have to reach outside of Netlify to find a cloud storage provider you like. Netlify has had <a href=\"https://www.netlify.com/blog/2019/09/10/announcing-the-faunadb-add-on-for-netlify/\" rel=\"noopener\">a first-class integration with Fauna</a> for years, so that&#8217;s a good choice.</p>\n\n\n\n<p>You&#8217;ll need to communicate with Fauna, of course, and being a static site, JavaScript is how that&#8217;s going to work. Fortunately, your client-side JavaScript can communicate with your own server-side JavaScript that Netlify helps with, which is called <a href=\"https://www.netlify.com/products/functions/\" rel=\"noopener\">Netlify Functions</a>. That&#8217;s right, Netlify helps you build/deploy Lambda functions. This means you can actually have the Lambda functions do the communicating with Faunda, keeping your API keys safe.</p>\n\n\n\n<p>Those are the building blocks. This is a well-worn approach, and really at the heart of Jamstack. Need a head start? Netlify has templates for this kind of thing. Here are some examples with this approach in mind: <a href=\"https://github.com/shortdiv/netlify-fauna-todo-app\" rel=\"noopener\">netlify-fauna-todo-app</a> and <a href=\"https://github.com/netlify/netlify-faunadb-example\" rel=\"noopener\">netlify-faunadb-example</a>. We even have a <a href=\"https://css-tricks.com/accessing-data-netlify-functions-react/#aa-how-to-authenticate-and-authorize-functions-by-netlify-identity\">tutorial that covers that</a>. And there’s a one-minute video demo:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-4-3 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"netlifyidentityfaunatodo\" width=\"500\" height=\"375\" src=\"https://www.youtube.com/embed/7OB_IjTTcwg?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p>There you have it, a website that is every bit as dynamic as something you&#8217;d build with a traditional server. Only now, you&#8217;re building with Netlify meaning you get so many other advantages, like the fact that you&#8217;re deploying from commits to a Git repository and getting build previews, and every other amazing feature Netlify offers. </p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/netlify-identity/\">Netlify Identity, a Key Aspect to Jamstack Development</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "(This is a sponsored post.)\nNetlify is amazing at static file hosting, but it’s really so much more than that. You can build any sort of website, even highly dynamic apps, with the Jamstack approach and static file hosting at the core. \n\n\n\nSay you want to build a TODO app with users. Those users will need to sign up and log in. Can’t do that with a static site, right? You can, actually. Netlify helps with Netlify Identity, a robust offering they’ve had for years. Enabling it is just a few clicks in the admin UI, and they even provide auth widgets so you have to build precious little to get this working.\n\n\n\n\n\n\n\n\n\n\n\nNow you’ve got a website with authentication, great! But how do you keep going with your TODO app? You’ll need some kind of cloud storage for the data on your user’s lists. For that, you’ll have to reach outside of Netlify to find a cloud storage provider you like. Netlify has had a first-class integration with Fauna for years, so that’s a good choice.\n\n\n\nYou’ll need to communicate with Fauna, of course, and being a static site, JavaScript is how that’s going to work. Fortunately, your client-side JavaScript can communicate with your own server-side JavaScript that Netlify helps with, which is called Netlify Functions. That’s right, Netlify helps you build/deploy Lambda functions. This means you can actually have the Lambda functions do the communicating with Faunda, keeping your API keys safe.\n\n\n\nThose are the building blocks. This is a well-worn approach, and really at the heart of Jamstack. Need a head start? Netlify has templates for this kind of thing. Here are some examples with this approach in mind: netlify-fauna-todo-app and netlify-faunadb-example. We even have a tutorial that covers that. And there’s a one-minute video demo:\n\n\n\n\n\n\n\n\n\nThere you have it, a website that is every bit as dynamic as something you’d build with a traditional server. Only now, you’re building with Netlify meaning you get so many other advantages, like the fact that you’re deploying from commits to a Git repository and getting build previews, and every other amazing feature Netlify offers. \n\nNetlify Identity, a Key Aspect to Jamstack Development originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-12T14:13:00.000Z",
      "date_modified": "2022-01-12T14:13:00.000Z",
      "_plugin": {
        "pageFilename": "7f40e0e9c7f76fbb2c2fdbb5197625c33bea70cf6088c642b5ba2b7449e5e9af.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360490",
      "url": "https://css-tricks.com/can-css-prevent-tooltips-from-overflowing/",
      "title": "What Would it Take to Prevent CSS Tooltips From Overflowing?",
      "summary": "Say you have an elements with CSS tooltips and you’re going to position those tooltips such that it opens up next to the element on hover (or probably better: when clicked/tapped). Next to it where? Above it? What if the …\n\nWhat Would it Take to Prevent CSS Tooltips From Overflowing? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Say you have an elements with <a href=\"https://css-tricks.com/perfect-tooltips-with-css-clipping-and-masking/\">CSS tooltips</a> and you&#8217;re going to position those tooltips such that it opens up next to the element on hover (or probably better: when clicked/tapped). Next to it where? Above it? What if the element is already really close to the top of the screen? In that case, it should probably open below it. Or vice versa — and the same goes for the left and right edges of the screen. You definitely want it to be visible rather than overflowing the viewport.</p>\n\n\n\n<p>Sometimes when you open new UI elements, they need to be edge-aware to prevent the content inside from triggering weird scrollbars, or worse, cutting off content. </p>\n\n\n\n<span id=\"more-360490\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1392\" height=\"624\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-04-at-1.27.47-PM.png?resize=1392%2C624&#038;ssl=1\" alt=\"A red button and an orange button, both with CSS tooltips, sitting above two large paragraphs of text. The orange button is hovered, revealing a tooltip to the right of it but it is cut off by the edge of the viewport, making the content illegible.\" class=\"wp-image-360573\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-04-at-1.27.47-PM.png?w=1392&amp;ssl=1 1392w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-04-at-1.27.47-PM.png?resize=300%2C134&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-04-at-1.27.47-PM.png?resize=1024%2C459&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-04-at-1.27.47-PM.png?resize=768%2C344&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-04-at-1.27.47-PM.png?resize=1000%2C448&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Very important what?!</figcaption></figure>\n\n\n\n<p>This is an age-old problem on the web. I remember using jQuery UI tooltips on purpose because it had this special ability to be edge-aware. You can imagine the JavaScript behind it. You figure out where the element is going to be and use positioning math to figure out if it will be within the viewport. If it won&#8217;t be, try a different position that <em>does</em> fit. </p>\n\n\n\n<p>As ever, everything old is new again. Check out <a href=\"https://floating-ui.com/\" rel=\"noopener\">Floating UI</a>, designed just for this problem. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2352\" height=\"2278\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=2352%2C2278&#038;ssl=1\" alt=\"FloatingUI home screen showing a logo that looks like a CSS tooltip with a happy face.\" class=\"wp-image-360491\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?w=2352&amp;ssl=1 2352w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=300%2C291&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=1024%2C992&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=768%2C744&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=1536%2C1488&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=2048%2C1984&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-03-at-3.38.56-PM.png?resize=1000%2C969&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>Floating UI is a low-level toolkit to position&nbsp;floating elements&nbsp;while intelligently keeping them in view. Tooltips, popovers, dropdowns, menus, and more.</p></blockquote>\n\n\n\n<p>It looks super well done. I like the focus, the demos are super well done, and it&#8217;s a pretty tiny dependency.</p>\n\n\n\n<p>But ya know what would be even cooler? If CSS could do this all by itself. That&#8217;s the vibe with <a href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/CSSAnchoredPositioning/explainer.md\" rel=\"noopener\">CSS Anchored Positioning</a> — for now just an &#8220;explainer&#8221; document:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>When building interactive components or applications, authors frequently want to leverage UI elements that can render in a &#8220;top-layer&#8221;. Examples of such UI elements include content pickers, teaching UI, tooltips, and menus.&nbsp;<a href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/Popup/explainer.md\" rel=\"noopener\">&#8220;Enabling Popups&#8221;</a>&nbsp;introduced a new&nbsp;<code>popup</code>&nbsp;element to make many of these top-layer elements easier to author.</p><p>Authors frequently wish to &#8220;pin&#8221; or &#8220;anchor&#8221; such top-layer UI to a point on another element, referred to here as an &#8220;anchor element&#8221;. How the top-layer UI is positioned with respect to its anchor element is further influenced or constrained by the edges of the layout viewport.</p></blockquote>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"816\" height=\"616\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Directionally-aware.png?resize=816%2C616&#038;ssl=1\" alt=\"A four-by-four grid showing the same blue button positioned at different corners of each cell, and a tooltip that avoids the edge of the screen where the button sits.\" class=\"wp-image-360493\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Directionally-aware.png?w=816&amp;ssl=1 816w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Directionally-aware.png?resize=300%2C226&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Directionally-aware.png?resize=768%2C580&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I love it. The web platform at its best. Seeing what authors are needing to do and reaching for libraries to do, and trying to step in and do it natively (and hopefully better). </p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/can-css-prevent-tooltips-from-overflowing/\">What Would it Take to Prevent CSS Tooltips From Overflowing?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Say you have an elements with CSS tooltips and you’re going to position those tooltips such that it opens up next to the element on hover (or probably better: when clicked/tapped). Next to it where? Above it? What if the element is already really close to the top of the screen? In that case, it should probably open below it. Or vice versa — and the same goes for the left and right edges of the screen. You definitely want it to be visible rather than overflowing the viewport.\n\n\n\nSometimes when you open new UI elements, they need to be edge-aware to prevent the content inside from triggering weird scrollbars, or worse, cutting off content. \n\n\n\n\n\n\n\nVery important what?!\n\n\n\nThis is an age-old problem on the web. I remember using jQuery UI tooltips on purpose because it had this special ability to be edge-aware. You can imagine the JavaScript behind it. You figure out where the element is going to be and use positioning math to figure out if it will be within the viewport. If it won’t be, try a different position that does fit. \n\n\n\nAs ever, everything old is new again. Check out Floating UI, designed just for this problem. \n\n\n\n\n\n\n\nFloating UI is a low-level toolkit to position floating elements while intelligently keeping them in view. Tooltips, popovers, dropdowns, menus, and more.\n\n\n\nIt looks super well done. I like the focus, the demos are super well done, and it’s a pretty tiny dependency.\n\n\n\nBut ya know what would be even cooler? If CSS could do this all by itself. That’s the vibe with CSS Anchored Positioning — for now just an “explainer” document:\n\n\n\nWhen building interactive components or applications, authors frequently want to leverage UI elements that can render in a “top-layer”. Examples of such UI elements include content pickers, teaching UI, tooltips, and menus. “Enabling Popups” introduced a new popup element to make many of these top-layer elements easier to author.Authors frequently wish to “pin” or “anchor” such top-layer UI to a point on another element, referred to here as an “anchor element”. How the top-layer UI is positioned with respect to its anchor element is further influenced or constrained by the edges of the layout viewport.\n\n\n\n\n\n\n\nI love it. The web platform at its best. Seeing what authors are needing to do and reaching for libraries to do, and trying to step in and do it natively (and hopefully better). \n\nWhat Would it Take to Prevent CSS Tooltips From Overflowing? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-11T23:18:56.000Z",
      "date_modified": "2022-01-11T23:18:56.000Z",
      "_plugin": {
        "pageFilename": "16844edcdef767ecdb1e1a05de94a131eb900561639a44301786b18dc2aeac0d.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359243",
      "url": "https://css-tricks.com/adding-vite-to-your-existing-web-app/",
      "title": "Adding Vite to Your Existing Web App",
      "summary": "Vite (pronounced “veet”) is a newish JavaScript bundler. It comes batteries-included, requires almost no configuration to be useful, and includes plenty of configuration options. Oh—and it’s fast. Incredibly fast.\nThis post will walk through the process of converting an existing …\n\nAdding Vite to Your Existing Web App originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p><a href=\"https://vitejs.dev/\" rel=\"noopener\">Vite</a> (pronounced “veet”) is a newish JavaScript bundler. It comes batteries-included, requires almost no configuration to be useful, and includes plenty of configuration options. Oh—and it’s fast. Incredibly fast.</p>\n\n\n\n<p>This post will walk through the process of converting an existing project to Vite. We’ll cover things like aliases, shimming webpack’s dotenv handling, and server proxying. In other words, we’re looking at how to move a project from its existing bundler to Vite. If you’re looking instead to start a fresh project, you’ll want to <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">jump to their documentation</a>.</p>\n\n\n\n<p>Long story, short: the CLI will ask for your framework of choice—React, Preact, Svelte, Vue, Vanilla, or even lit-html—and whether you want TypeScript, then give you a fully functioning project.</p>\n\n\n\n<span id=\"more-359243\"></span>\n\n\n\n<p class=\"is-style-explanation\">Scaffold first! If you are interested in learning about integrating Vite into a legacy project, I’d <em>still</em> recommend scaffolding an empty project and poking around it a bit. At times, I’ll be pasting some clumps of code, but most of that comes straight from the default Vite template.</p>\n\n\n<h3 id=\"our-use-case\">Our use case</h3>\n\n\n<p>What we’re looking at is based on my own experience migrating the webpack build of my <a href=\"https://mylibrary.io\" rel=\"noopener\">booklist project</a> (<a href=\"https://github.com/arackaf/booklist/tree/special/pre-vite-snapshot/react\" rel=\"noopener\">repo</a>). There isn’t anything particularly special about this project, but it’s fairly big and old, and leaned hard on webpack. So, in that sense, it’s a good opportunity to see some of Vite’s more useful configuration options in action as we migrate to it.</p>\n\n\n<h3 id=\"what-we-wont-need\">What we <em>won’t</em> need</h3>\n\n\n<p>One of the most compelling reasons to reach for Vite is that it already does a lot right out of the box, incorporating many of the responsi<a href=\"https://css-tricks.com/the-vite-ecosystem/\">bilities from other frameworks</a> so there are fewer dependencies and a more established baseline for configurations and conventions.</p>\n\n\n\n<p>So, instead of starting by calling out what we need to get started, let’s go over all the common webpack things we <em>don’t need</em> because Vite gives them to us for free.</p>\n\n\n<h4 id=\"static-asset-loading\">Static asset loading</h4>\n\n\n<p>We usually need to add something like this in webpack:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  test: /\\.(png|jpg|gif|svg|eot|woff|woff2|ttf)$/,\n  use: [\n    {\n      loader: \"file-loader\"\n    }\n  ]\n}</code></pre>\n\n\n\n<p>This takes any references to font files, images, SVG files, etc., and copies them over to your dist folder so they can be referenced from your new bundles. This comes standard in Vite.</p>\n\n\n<h4 id=\"styles\">Styles</h4>\n\n\n<p>I say &#8220;styles” as opposed to “css” intentionally here because, with webpack, you might have something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  test: /\\.s?css$/,\n  use: [MiniCssExtractPlugin.loader, \"css-loader\", \"sass-loader\"]\n},\n\n// later\n\nnew MiniCssExtractPlugin({ filename: \"[name]-[contenthash].css\" }),</code></pre>\n\n\n\n<p>…which allows the application to import CSS <em>or</em> SCSS files. You’ll grow tired of hearing me say this, but Vite supports this out of the box. Just be sure to install Sass itself into your project, and Vite will handle the rest.</p>\n\n\n<h4 id=\"transpilation-typescript\">Transpilation / TypeScript</h4>\n\n\n<p>It’s likely your code is using TypeScript, and or non-standard JavaScript features, like JSX. If that’s the case, you’ll need to transpile your code to remove those things and produce plain old JavaScript that a browser (or JavaScript parser) can understand. In webpack that would look something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  test: /\\.(t|j)sx?$/,\n  exclude: /node_modules/,\n  loader: \"babel-loader\"\n},</code></pre>\n\n\n\n<p>…with a corresponding Babel configuration to specify the appropriate plugins which, for me, looked like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"presets\": [\"@babel/preset-typescript\"],\n  \"plugins\": [\n    \"@babel/plugin-proposal-class-properties\",\n    \"@babel/plugin-syntax-dynamic-import\",\n    \"@babel/plugin-proposal-optional-chaining\",\n    \"@babel/plugin-proposal-nullish-coalescing-operator\"\n  ]\n}</code></pre>\n\n\n\n<p>While I could have probably stopped using those first two plugins years ago, it doesn’t really matter since, as I’m sure you’ve guessed, Vite does this all for us. It takes your code, removes any TypeScript and JSX, and produces code supported by modern browsers.</p>\n\n\n\n<p>If you’d like to support older browsers (and I’m not saying you should), then <a href=\"https://github.com/vitejs/vite/tree/main/packages/plugin-legacy\" rel=\"noopener\">there’s a plugin for that</a>.</p>\n\n\n<h4 id=\"nodemodules\"><code>node_modules</code></h4>\n\n\n<p>Surprisingly, webpack requires you to tell it to resolve imports from <code>node_modules</code>, which we do with this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">resolve: {\n  modules: [path.resolve(\"./node_modules\")]\n}</code></pre>\n\n\n\n<p>As expected, Vite already does this.</p>\n\n\n<h4 id=\"production-mode\">Production mode</h4>\n\n\n<p>One of the common things we do in webpack is distinguish between production and development environments by manually passing a <code>mode</code> property, like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">mode: isProd ? \"production\" : \"development\",</code></pre>\n\n\n\n<p>…which we normally surmise with something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const isProd = process.env.NODE_ENV == \"production\";</code></pre>\n\n\n\n<p>And, of course, we set that environment variable via our build process.</p>\n\n\n\n<p>Vite handles this a bit differently and gives us different commands to run for development builds versus those for production, which we’ll get into shortly.</p>\n\n\n<h4 id=\"file-extensions\">File extensions</h4>\n\n\n<p>At the risk of belaboring the point, I’ll quickly note that Vite also doesn’t require you to specify every file extension you’re using.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">resolve: {\n  extensions: [\".ts\", \".tsx\", \".js\"],\n}</code></pre>\n\n\n\n<p>Just set up the right kind of Vite project, and you’re good to go.</p>\n\n\n<h3 id=\"rollup-plugins-are-compatible\">Rollup plugins are compatible!</h3>\n\n\n<p>This is such a key point I wanted to call it out in its own section. If you still wind up with some webpack plugins you need to replace in your Vite app when you finish this blog post, then try to find an equivalent Rollup plugin and use <em>that.</em> You read that correctly: Rollup plugins are already (or usually, at least) compatible with Vite. Some Rollup plugins, of course, <strong>do things</strong> that are incompatible with how Vite works—but in general, they should just work.</p>\n\n\n\n<p>For more info, <a href=\"https://vitejs.dev/guide/using-plugins.html#using-plugins\" rel=\"noopener\">check out the docs</a>.</p>\n\n\n<h3 id=\"your-first-vite-project\">Your first Vite project</h3>\n\n\n<p>Remember, we’re moving an existing legacy webpack project to Vite. If you’re building something new, it’s better to <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">start a new Vite project</a> and go from there. That said, the initial code I’m showing you is basically copied right from what Vite scaffolds from a fresh project anyway, so taking a moment to scaffold a new project might also a good idea for you to compare processes.</p>\n\n\n<h4 id=\"the-html-entry-point\">The HTML entry point</h4>\n\n\n<p>Yeah, you read that right. Rather than putting HTML integration behind a plugin, like webpack does, Vite is HTML first. It expects an HTML file with a script tag to your JavaScript entrypoint, and generates everything from there.</p>\n\n\n\n<p>Here’s the HTML file (which Vite expects to be called <code>index.html</code>) we’re starting with:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n  &lt;head>\n    &lt;meta charset=\"UTF-8\" />\n    &lt;title>The GOAT of web apps&lt;/title>\n  &lt;/head>\n  &lt;body>\n    &lt;div id=\"home\">&lt;/div>\n    &lt;script type=\"module\" src=\"/reactStartup.tsx\">&lt;/script>\n  &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Note that the <code>&lt;script&gt;</code> tag points to <code>/reactStartup.tsx</code>. Adjust that to your own entry as needed.</p>\n\n\n\n<p>Let’s install a few things, like a React plugin:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npm i vite @vitejs/plugin-react @types/node</code></pre>\n\n\n\n<p>We also create the following <code>vite.config.ts</code> right next to the <code>index.html</code> file in the project directory.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n  plugins: [react()]\n});</code></pre>\n\n\n\n<p>Lastly, let’s add a few new npm scripts:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"dev\": \"vite\",\n\"build\": \"vite build\",\n\"preview\": \"vite preview\",</code></pre>\n\n\n\n<p>Now, let’s start Vite’s development server with <code>npm run dev</code>. It’s incredibly fast, and incrementally builds whatever it needs to, based on what’s requested.</p>\n\n\n\n<p>But, unfortunately, it fails. At least for right now.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1274\" height=\"322\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C4D835E8887DD7079D4DFB87EFAA6378B66A07D65019D9DEF872A309753C4317_1637377229818_image.png?resize=1274%2C322&#038;ssl=1\" alt=\"Screenshot of a terminal screen with a dark background and light text. There is an error in read that says there was an error when starting the development server.\" class=\"wp-image-359245\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C4D835E8887DD7079D4DFB87EFAA6378B66A07D65019D9DEF872A309753C4317_1637377229818_image.png?w=1274&amp;ssl=1 1274w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C4D835E8887DD7079D4DFB87EFAA6378B66A07D65019D9DEF872A309753C4317_1637377229818_image.png?resize=300%2C76&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C4D835E8887DD7079D4DFB87EFAA6378B66A07D65019D9DEF872A309753C4317_1637377229818_image.png?resize=1024%2C259&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C4D835E8887DD7079D4DFB87EFAA6378B66A07D65019D9DEF872A309753C4317_1637377229818_image.png?resize=768%2C194&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C4D835E8887DD7079D4DFB87EFAA6378B66A07D65019D9DEF872A309753C4317_1637377229818_image.png?resize=1000%2C253&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We’ll get to how to set up aliases in a moment, but for now, let’s instead modify our <code>reactStartup</code> file (or whatever your entry file is called) as follows:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import React from \"react\";\nimport { render } from \"react-dom\";\n\nrender(\n  &lt;div>\n    &lt;h1>Hi there&lt;/h1>\n  &lt;/div>,\n  document.getElementById(\"home\")\n);</code></pre>\n\n\n\n<p>Now we can run it our <code>npm run dev</code> command and browse to <code>localhost:3000</code>.</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"552\" height=\"242\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/8xvk4CFA.png?resize=552%2C242&#038;ssl=1\" alt=\"Screenshot of a terminal window with a black background and light text. Green text says the development server is running at localhost.\" class=\"wp-image-359247\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/8xvk4CFA.png?w=552&amp;ssl=1 552w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/8xvk4CFA.png?resize=300%2C132&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"582\" height=\"212\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/giVwEsxM.png?resize=582%2C212&#038;ssl=1\" alt=\"Screenshot of a blank white page that says hi there in black in a default serif font.\" class=\"wp-image-359248\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/giVwEsxM.png?w=582&amp;ssl=1 582w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/giVwEsxM.png?resize=300%2C109&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n</div>\n\n\n<h4 id=\"hot-module-reloading-hmr\">Hot module reloading (HMR)</h4>\n\n\n<p>Now that the development server is running, try modifying your source code. The output <em>should</em> update almost immediately via Vite’s HMR. This is one of Vite’s nicest features. It makes the development experience so much nicer when changes seem to reflect immediately rather than having to wait, or even trigger them ourselves.</p>\n\n\n\n<p>The rest of this post will go over all the things I had to do to get my own app to build and run with Vite. I hope some of them are relevant for you!</p>\n\n\n<h4 id=\"aliases\">Aliases</h4>\n\n\n<p>It’s not uncommon for webpack-based projects to have some config like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">resolve: {\n  alias: {\n    jscolor: \"util/jscolor.js\"\n  },\n  modules: [path.resolve(\"./\"), path.resolve(\"./node_modules\")]\n}</code></pre>\n\n\n\n<p>This sets up an alias to <code>jscolor</code> at the provided path, and tells webpack to look both in the root folder (<code>./</code>) and in <code>node_modules</code> when resolving imports. This allows us to have imports like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { thing } from \"util/helpers/foo\"</code></pre>\n\n\n\n<p>…anywhere in our component tree, assuming there’s a <code>util</code> folder at the very top.</p>\n\n\n\n<p>Vite doesn’t allow you to provide an entire folder for resolution like this, but it does allow you to specify aliases, which follow the same rules as the <a href=\"https://github.com/rollup/plugins/tree/master/packages/alias#entries\" rel=\"noopener\">@rollup/plugin-alias</a>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nimport path from \"path\";\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      jscolor: path.resolve(\"./util/jscolor.js\"),\n      app: path.resolve(\"./app\"),\n      css: path.resolve(\"./css\"),\n      util: path.resolve(\"./util\")\n    }\n  },\n  plugins: [react()]\n});</code></pre>\n\n\n\n<p>We’ve added a <code>resolve.alias</code> section, including entries for everything we need to alias. Our <code>jscolor</code> util is set to the relevant module, and we have aliases for our top-level directories. Now we can import from <code>app/</code>, <code>css*/*</code>, and <code>util/</code> from any component, anywhere.</p>\n\n\n\n<p>Note that these aliases only apply to the root of the import, e.g. <code>util/foo</code>. If you have some <em>other</em> util folder deeper in your tree, and you reference it with this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { thing } from \"./helpers/util\";</code></pre>\n\n\n\n<p>…then the alias above will <em>not</em> mess that up. This distinction is not well documented, but you can see it <a href=\"https://github.com/rollup/plugins/blob/02fb349d315f0ffc55970fba5de20e23f8ead881/packages/alias/src/index.ts#L7-L20\" rel=\"noopener\">in the Rollup alias plugin</a>. Vite’s alias matches that same behavior.</p>\n\n\n<h4 id=\"environment-variables\">Environment variables</h4>\n\n\n<p>Vite, of course, <a href=\"https://vitejs.dev/guide/env-and-mode.html\" rel=\"noopener\">supports environment variables</a>. It reads config values out of your <code>.env</code> files in development, or <code>process.env</code>, and injects them into your code. Unfortunately, things work a bit differently than what you might be used to. First, it does not replace <code>process.env.FOO</code> but rather <code>import.meta.env.FOO</code>. Not only that, but it only replaces variables prefixed with <code>VITE_</code> by default. So, <code>import.meta.env.VITE_FOO</code> would actually be replaced, but not my original <code>FOO</code>. This prefix can be configured, but not set to empty string.</p>\n\n\n\n<p>For a legacy project, you could grep and replace all your environment variables to use <code>import.meta.env</code>, then add a <code>VITE_</code> prefix, update your <code>.env</code> files, and update the environment variables in whatever CI/CD system you use. Or you can configure the more classic behavior of replacing <code>process.env.ANYTHING</code> with values from a <code>.env</code> file in development, or the real <code>process.env</code> value in production.</p>\n\n\n\n<p>Here’s how. Vite’s <a href=\"https://vitejs.dev/config/#define\" rel=\"noopener\"><code>define</code></a> feature is basically what we need. This registers global variables during development, and does raw text replacement for production. We need to set things up so that we manually read our <code>.env</code> file in development mode, and the <code>process.env</code> object in production mode, and then add the appropriate <code>define</code> entries.</p>\n\n\n\n<p>Let’s build that all into a Vite plugin. First, run <code>npm i dotenv</code>. </p>\n\n\n\n<p>Now let&#8217;s look at the code for the plugin:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import dotenv from \"dotenv\";\n\nconst isProd = process.env.NODE_ENV === \"production\";\nconst envVarSource = isProd ? process.env : dotenv.config().parsed;\n\nexport const dotEnvReplacement = () => {\n  const replacements = Object.entries(envVarSource).reduce((obj, [key, val]) => {\n    obj[`process.env.${key}`] = `\"${val}\"`;\n    return obj;\n  }, {});\n\n  return {\n    name: \"dotenv-replacement\",\n    config(obj) {\n      obj.define = obj.define || {};\n      Object.assign(obj.define, replacements);\n    }\n  };\n};</code></pre>\n\n\n\n<p>Vite sets <code>process.env.NODE_ENV</code> for us, so all we need to do is check that to see which mode we’re in.</p>\n\n\n\n<p>Now we get the actual environment variables. If we’re in production, we grab <code>process.env</code> itself. If we’re in dev, we ask dotenv to grab our <code>.env</code> file, parse it, and get back an object with all the values.</p>\n\n\n\n<p>Our plugin is a function that returns a Vite plugin object. We inject our environment values into a new object that has <code>process.env.</code> in front of the value, and then we return our actual plugin object. There is a number of hooks available to use. Here, though, we only need the <code>config</code> hook, which allows us to modify the current config object. We add a <code>define</code> entry if none exists, then add all our values.</p>\n\n\n\n<p>But before moving forward, I want to note that the Vite’s environment variables limitations we are working around exist for a reason. The code above is how bundlers are <em>frequently</em> configured, but that still means any random value in <code>process.env</code> is stuck into your source code if that key exists. There are potential security concerns there, so please keep that in mind.</p>\n\n\n<h4 id=\"server-proxy\">Server proxy</h4>\n\n\n<p>What does your deployed web application look like? If all it’s doing is serving JavaScript/CSS/HTML—with literally everything happening via separate services located elsewhere—then good! You’re effectively done. What I’ve shown you should be all you need. Vite’s development server will serve your assets as needed, which pings all your services just like they did before.</p>\n\n\n\n<p>But what if your web app is small enough that you have some services running right on your web server? For the project I’m converting, I have a GraphQL endpoint running on my web server. For development, I start my <a href=\"http://expressjs.com\" rel=\"noopener\">Express</a> server, which previously knew how to serve the assets that webpack generated. I also start a webpack watch task to generate those assets.</p>\n\n\n\n<p>But with Vite shipping its own dev server, we need to start that Express server (on a separate port than what Vite uses) and then proxy calls to <code>/graphql</code> over to <em>there</em>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">server: {\n  proxy: {\n    \"/graphql\": \"http://localhost:3001\"\n  }\n} </code></pre>\n\n\n\n<p>This tells Vite that any requests for <code>/graphql</code> should be sent to <code>http://localhost:3001/graphql</code>.</p>\n\n\n\n<p>Note that we do <strong>not</strong> set the proxy to <code>http://localhost:3001/graphql</code> in the config. Instead, we set it to <code>http://localhost:3001</code> and rely on Vite to add the <code>/graphql</code> part (as well any any query arguments) to the path.</p>\n\n\n<h3 id=\"building-libs\">Building libs</h3>\n\n\n<p>As a quick bonus section, let’s briefly discuss building libraries. For example, what if all you want to build is a JavaScript file, e.g. a library like Redux. There’s no associated HTML file, so you’ll first need to tell Vite what to make:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">build: {\n  outDir: \"./public\",\n  lib: {\n    entry: \"./src/index.ts\",\n    formats: [\"cjs\"],\n    fileName: \"my-bundle.js\"\n  }\n}</code></pre>\n\n\n\n<p>Tell Vite where to put the generated bundle, what to call it, and what formats to build. Note that I’m using CommonJS here instead of ES modules since the ES modules do not minify (as of this writing) due to concerns that it could break tree-shaking.</p>\n\n\n\n<p>You&#8217;d run this build with <code>vite build</code>. To start a watch and have the library rebuild on change, you&#8217;d run </p>\n\n\n\n<p><code>vite build --watch</code>.</p>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>Vite is an incredibly exciting tool. Not only does it take the pain, and tears out of bundling web apps, but it greatly improves the performance of doing so in the process. It ships with a blazingly fast development server that ships with hot module reloading and supports all major JavaScript frameworks. If you do web development—whether it’s for fun, it’s your job, or both!—I can’t recommend it strongly enough.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/adding-vite-to-your-existing-web-app/\">Adding Vite to Your Existing Web App</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Vite (pronounced “veet”) is a newish JavaScript bundler. It comes batteries-included, requires almost no configuration to be useful, and includes plenty of configuration options. Oh—and it’s fast. Incredibly fast.\n\n\n\nThis post will walk through the process of converting an existing project to Vite. We’ll cover things like aliases, shimming webpack’s dotenv handling, and server proxying. In other words, we’re looking at how to move a project from its existing bundler to Vite. If you’re looking instead to start a fresh project, you’ll want to jump to their documentation.\n\n\n\nLong story, short: the CLI will ask for your framework of choice—React, Preact, Svelte, Vue, Vanilla, or even lit-html—and whether you want TypeScript, then give you a fully functioning project.\n\n\n\n\n\n\n\nScaffold first! If you are interested in learning about integrating Vite into a legacy project, I’d still recommend scaffolding an empty project and poking around it a bit. At times, I’ll be pasting some clumps of code, but most of that comes straight from the default Vite template.\n\n\nOur use case\n\n\nWhat we’re looking at is based on my own experience migrating the webpack build of my booklist project (repo). There isn’t anything particularly special about this project, but it’s fairly big and old, and leaned hard on webpack. So, in that sense, it’s a good opportunity to see some of Vite’s more useful configuration options in action as we migrate to it.\n\n\nWhat we won’t need\n\n\nOne of the most compelling reasons to reach for Vite is that it already does a lot right out of the box, incorporating many of the responsibilities from other frameworks so there are fewer dependencies and a more established baseline for configurations and conventions.\n\n\n\nSo, instead of starting by calling out what we need to get started, let’s go over all the common webpack things we don’t need because Vite gives them to us for free.\n\n\nStatic asset loading\n\n\nWe usually need to add something like this in webpack:\n\n\n\n{\n  test: /\\.(png|jpg|gif|svg|eot|woff|woff2|ttf)$/,\n  use: [\n    {\n      loader: \"file-loader\"\n    }\n  ]\n}\n\n\n\nThis takes any references to font files, images, SVG files, etc., and copies them over to your dist folder so they can be referenced from your new bundles. This comes standard in Vite.\n\n\nStyles\n\n\nI say “styles” as opposed to “css” intentionally here because, with webpack, you might have something like this:\n\n\n\n{\n  test: /\\.s?css$/,\n  use: [MiniCssExtractPlugin.loader, \"css-loader\", \"sass-loader\"]\n},\n\n// later\n\nnew MiniCssExtractPlugin({ filename: \"[name]-[contenthash].css\" }),\n\n\n\n…which allows the application to import CSS or SCSS files. You’ll grow tired of hearing me say this, but Vite supports this out of the box. Just be sure to install Sass itself into your project, and Vite will handle the rest.\n\n\nTranspilation / TypeScript\n\n\nIt’s likely your code is using TypeScript, and or non-standard JavaScript features, like JSX. If that’s the case, you’ll need to transpile your code to remove those things and produce plain old JavaScript that a browser (or JavaScript parser) can understand. In webpack that would look something like this:\n\n\n\n{\n  test: /\\.(t|j)sx?$/,\n  exclude: /node_modules/,\n  loader: \"babel-loader\"\n},\n\n\n\n…with a corresponding Babel configuration to specify the appropriate plugins which, for me, looked like this:\n\n\n\n{\n  \"presets\": [\"@babel/preset-typescript\"],\n  \"plugins\": [\n    \"@babel/plugin-proposal-class-properties\",\n    \"@babel/plugin-syntax-dynamic-import\",\n    \"@babel/plugin-proposal-optional-chaining\",\n    \"@babel/plugin-proposal-nullish-coalescing-operator\"\n  ]\n}\n\n\n\nWhile I could have probably stopped using those first two plugins years ago, it doesn’t really matter since, as I’m sure you’ve guessed, Vite does this all for us. It takes your code, removes any TypeScript and JSX, and produces code supported by modern browsers.\n\n\n\nIf you’d like to support older browsers (and I’m not saying you should), then there’s a plugin for that.\n\n\nnode_modules\n\n\nSurprisingly, webpack requires you to tell it to resolve imports from node_modules, which we do with this:\n\n\n\nresolve: {\n  modules: [path.resolve(\"./node_modules\")]\n}\n\n\n\nAs expected, Vite already does this.\n\n\nProduction mode\n\n\nOne of the common things we do in webpack is distinguish between production and development environments by manually passing a mode property, like this:\n\n\n\nmode: isProd ? \"production\" : \"development\",\n\n\n\n…which we normally surmise with something like this:\n\n\n\nconst isProd = process.env.NODE_ENV == \"production\";\n\n\n\nAnd, of course, we set that environment variable via our build process.\n\n\n\nVite handles this a bit differently and gives us different commands to run for development builds versus those for production, which we’ll get into shortly.\n\n\nFile extensions\n\n\nAt the risk of belaboring the point, I’ll quickly note that Vite also doesn’t require you to specify every file extension you’re using.\n\n\n\nresolve: {\n  extensions: [\".ts\", \".tsx\", \".js\"],\n}\n\n\n\nJust set up the right kind of Vite project, and you’re good to go.\n\n\nRollup plugins are compatible!\n\n\nThis is such a key point I wanted to call it out in its own section. If you still wind up with some webpack plugins you need to replace in your Vite app when you finish this blog post, then try to find an equivalent Rollup plugin and use that. You read that correctly: Rollup plugins are already (or usually, at least) compatible with Vite. Some Rollup plugins, of course, do things that are incompatible with how Vite works—but in general, they should just work.\n\n\n\nFor more info, check out the docs.\n\n\nYour first Vite project\n\n\nRemember, we’re moving an existing legacy webpack project to Vite. If you’re building something new, it’s better to start a new Vite project and go from there. That said, the initial code I’m showing you is basically copied right from what Vite scaffolds from a fresh project anyway, so taking a moment to scaffold a new project might also a good idea for you to compare processes.\n\n\nThe HTML entry point\n\n\nYeah, you read that right. Rather than putting HTML integration behind a plugin, like webpack does, Vite is HTML first. It expects an HTML file with a script tag to your JavaScript entrypoint, and generates everything from there.\n\n\n\nHere’s the HTML file (which Vite expects to be called index.html) we’re starting with:\n\n\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>The GOAT of web apps</title>\n  </head>\n  <body>\n    <div id=\"home\"></div>\n    <script type=\"module\" src=\"/reactStartup.tsx\"></script>\n  </body>\n</html>\n\n\n\nNote that the <script> tag points to /reactStartup.tsx. Adjust that to your own entry as needed.\n\n\n\nLet’s install a few things, like a React plugin:\n\n\n\nnpm i vite @vitejs/plugin-react @types/node\n\n\n\nWe also create the following vite.config.ts right next to the index.html file in the project directory.\n\n\n\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n  plugins: [react()]\n});\n\n\n\nLastly, let’s add a few new npm scripts:\n\n\n\n\"dev\": \"vite\",\n\"build\": \"vite build\",\n\"preview\": \"vite preview\",\n\n\n\nNow, let’s start Vite’s development server with npm run dev. It’s incredibly fast, and incrementally builds whatever it needs to, based on what’s requested.\n\n\n\nBut, unfortunately, it fails. At least for right now.\n\n\n\n\n\n\n\nWe’ll get to how to set up aliases in a moment, but for now, let’s instead modify our reactStartup file (or whatever your entry file is called) as follows:\n\n\n\nimport React from \"react\";\nimport { render } from \"react-dom\";\n\nrender(\n  <div>\n    <h1>Hi there</h1>\n  </div>,\n  document.getElementById(\"home\")\n);\n\n\n\nNow we can run it our npm run dev command and browse to localhost:3000.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHot module reloading (HMR)\n\n\nNow that the development server is running, try modifying your source code. The output should update almost immediately via Vite’s HMR. This is one of Vite’s nicest features. It makes the development experience so much nicer when changes seem to reflect immediately rather than having to wait, or even trigger them ourselves.\n\n\n\nThe rest of this post will go over all the things I had to do to get my own app to build and run with Vite. I hope some of them are relevant for you!\n\n\nAliases\n\n\nIt’s not uncommon for webpack-based projects to have some config like this:\n\n\n\nresolve: {\n  alias: {\n    jscolor: \"util/jscolor.js\"\n  },\n  modules: [path.resolve(\"./\"), path.resolve(\"./node_modules\")]\n}\n\n\n\nThis sets up an alias to jscolor at the provided path, and tells webpack to look both in the root folder (./) and in node_modules when resolving imports. This allows us to have imports like this:\n\n\n\nimport { thing } from \"util/helpers/foo\"\n\n\n\n…anywhere in our component tree, assuming there’s a util folder at the very top.\n\n\n\nVite doesn’t allow you to provide an entire folder for resolution like this, but it does allow you to specify aliases, which follow the same rules as the @rollup/plugin-alias:\n\n\n\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nimport path from \"path\";\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      jscolor: path.resolve(\"./util/jscolor.js\"),\n      app: path.resolve(\"./app\"),\n      css: path.resolve(\"./css\"),\n      util: path.resolve(\"./util\")\n    }\n  },\n  plugins: [react()]\n});\n\n\n\nWe’ve added a resolve.alias section, including entries for everything we need to alias. Our jscolor util is set to the relevant module, and we have aliases for our top-level directories. Now we can import from app/, css*/*, and util/ from any component, anywhere.\n\n\n\nNote that these aliases only apply to the root of the import, e.g. util/foo. If you have some other util folder deeper in your tree, and you reference it with this:\n\n\n\nimport { thing } from \"./helpers/util\";\n\n\n\n…then the alias above will not mess that up. This distinction is not well documented, but you can see it in the Rollup alias plugin. Vite’s alias matches that same behavior.\n\n\nEnvironment variables\n\n\nVite, of course, supports environment variables. It reads config values out of your .env files in development, or process.env, and injects them into your code. Unfortunately, things work a bit differently than what you might be used to. First, it does not replace process.env.FOO but rather import.meta.env.FOO. Not only that, but it only replaces variables prefixed with VITE_ by default. So, import.meta.env.VITE_FOO would actually be replaced, but not my original FOO. This prefix can be configured, but not set to empty string.\n\n\n\nFor a legacy project, you could grep and replace all your environment variables to use import.meta.env, then add a VITE_ prefix, update your .env files, and update the environment variables in whatever CI/CD system you use. Or you can configure the more classic behavior of replacing process.env.ANYTHING with values from a .env file in development, or the real process.env value in production.\n\n\n\nHere’s how. Vite’s define feature is basically what we need. This registers global variables during development, and does raw text replacement for production. We need to set things up so that we manually read our .env file in development mode, and the process.env object in production mode, and then add the appropriate define entries.\n\n\n\nLet’s build that all into a Vite plugin. First, run npm i dotenv. \n\n\n\nNow let’s look at the code for the plugin:\n\n\n\nimport dotenv from \"dotenv\";\n\nconst isProd = process.env.NODE_ENV === \"production\";\nconst envVarSource = isProd ? process.env : dotenv.config().parsed;\n\nexport const dotEnvReplacement = () => {\n  const replacements = Object.entries(envVarSource).reduce((obj, [key, val]) => {\n    obj[`process.env.${key}`] = `\"${val}\"`;\n    return obj;\n  }, {});\n\n  return {\n    name: \"dotenv-replacement\",\n    config(obj) {\n      obj.define = obj.define || {};\n      Object.assign(obj.define, replacements);\n    }\n  };\n};\n\n\n\nVite sets process.env.NODE_ENV for us, so all we need to do is check that to see which mode we’re in.\n\n\n\nNow we get the actual environment variables. If we’re in production, we grab process.env itself. If we’re in dev, we ask dotenv to grab our .env file, parse it, and get back an object with all the values.\n\n\n\nOur plugin is a function that returns a Vite plugin object. We inject our environment values into a new object that has process.env. in front of the value, and then we return our actual plugin object. There is a number of hooks available to use. Here, though, we only need the config hook, which allows us to modify the current config object. We add a define entry if none exists, then add all our values.\n\n\n\nBut before moving forward, I want to note that the Vite’s environment variables limitations we are working around exist for a reason. The code above is how bundlers are frequently configured, but that still means any random value in process.env is stuck into your source code if that key exists. There are potential security concerns there, so please keep that in mind.\n\n\nServer proxy\n\n\nWhat does your deployed web application look like? If all it’s doing is serving JavaScript/CSS/HTML—with literally everything happening via separate services located elsewhere—then good! You’re effectively done. What I’ve shown you should be all you need. Vite’s development server will serve your assets as needed, which pings all your services just like they did before.\n\n\n\nBut what if your web app is small enough that you have some services running right on your web server? For the project I’m converting, I have a GraphQL endpoint running on my web server. For development, I start my Express server, which previously knew how to serve the assets that webpack generated. I also start a webpack watch task to generate those assets.\n\n\n\nBut with Vite shipping its own dev server, we need to start that Express server (on a separate port than what Vite uses) and then proxy calls to /graphql over to there:\n\n\n\nserver: {\n  proxy: {\n    \"/graphql\": \"http://localhost:3001\"\n  }\n} \n\n\n\nThis tells Vite that any requests for /graphql should be sent to http://localhost:3001/graphql.\n\n\n\nNote that we do not set the proxy to http://localhost:3001/graphql in the config. Instead, we set it to http://localhost:3001 and rely on Vite to add the /graphql part (as well any any query arguments) to the path.\n\n\nBuilding libs\n\n\nAs a quick bonus section, let’s briefly discuss building libraries. For example, what if all you want to build is a JavaScript file, e.g. a library like Redux. There’s no associated HTML file, so you’ll first need to tell Vite what to make:\n\n\n\nbuild: {\n  outDir: \"./public\",\n  lib: {\n    entry: \"./src/index.ts\",\n    formats: [\"cjs\"],\n    fileName: \"my-bundle.js\"\n  }\n}\n\n\n\nTell Vite where to put the generated bundle, what to call it, and what formats to build. Note that I’m using CommonJS here instead of ES modules since the ES modules do not minify (as of this writing) due to concerns that it could break tree-shaking.\n\n\n\nYou’d run this build with vite build. To start a watch and have the library rebuild on change, you’d run \n\n\n\nvite build --watch.\n\n\nWrapping up\n\n\nVite is an incredibly exciting tool. Not only does it take the pain, and tears out of bundling web apps, but it greatly improves the performance of doing so in the process. It ships with a blazingly fast development server that ships with hot module reloading and supports all major JavaScript frameworks. If you do web development—whether it’s for fun, it’s your job, or both!—I can’t recommend it strongly enough.\n\nAdding Vite to Your Existing Web App originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-11T15:38:06.000Z",
      "date_modified": "2022-01-11T15:38:06.000Z",
      "_plugin": {
        "pageFilename": "cef24f0ea8f26d63a987fdab8fcd0a8281e2b9c6f5ff3688d86ba56e2aa7efe4.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360061",
      "url": "https://css-tricks.com/use-custom-fields-in-wordpress/",
      "title": "How to Use Native Custom Fields in WordPress (and 5 Useful Examples)",
      "summary": "Custom Fields in WordPress are arbitrary bits of data that you can apply to Posts, Pages, and Custom Post Types in WordPress. Metadata, as it were, in the form of key/value pairs. For example:\n\nKey: subtitle / Value: They are \n\n…\n\nHow to Use Native Custom Fields in WordPress (and 5 Useful Examples) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Custom Fields in WordPress are arbitrary bits of data that you can apply to Posts, Pages, and Custom Post Types in WordPress. Metadata, as it were, in the form of key/value pairs. For example:</p>\n\n\n\n<ul><li>Key: <code>subtitle</code> / Value: <code>They are more than they are cracked up to be</code></li><li>Key: <code>header_color_override</code> / Value: <code>#e52e05</code></li><li>Key: <code>property_url</code> / Value: <code>https://example.com/123</code></li></ul>\n\n\n\n<p>WordPress <a href=\"https://wordpress.org/support/article/custom-fields/\" rel=\"noopener\">has their own documentation</a> of this feature, so I&#8217;m not trying to replicate that. I&#8217;d just like to show you essentially what custom fields in WordPress are, how they work, how to use them, and some use cases from my own personal experience.</p>\n\n\n\n<span id=\"more-360061\"></span>\n\n\n<h2 class=\"simpletoc-title\">Table of Contents</h2><ul class=\"simpletoc\">\n<li>\n<a  href=\"#how-to-addeditremove-custom-fields-in-wordpress\">How to Add/Edit/Remove Custom Fields in WordPress</a></li><li>\n<a  href=\"#why-use-custom-fields\">Why use Custom Fields?</a></li><li>\n<a  href=\"#wordpress-custom-fields-use-case-examples\">WordPress Custom Fields use case examples</a>\n\t\t<ul><li>\n<a  href=\"#1-display-additional-information\">1. Display additional information</a></li><li>\n<a  href=\"#2-hideshow-different-contentfeatures\">2. Hide/Show Different Content/Features</a></li><li>\n<a  href=\"#3-special-pull-quotes\">3. Special pull quotes</a></li><li>\n<a  href=\"#4-customize-an-rss-feed\">4. Customize an RSS feed</a></li><li>\n<a  href=\"#5-hideshow-author\">5. Hide/Show Author</a></li></ul>\n</li><li>\n<a  href=\"#the-apis-for-displaying-custom-fields-in-wordpress\">The APIs for displaying Custom Fields in WordPress</a></li><li>\n<a  href=\"#querying-for-custom-fields-in-wordpress\">Querying for Custom Fields in WordPress</a></li><li>\n<a  href=\"#limiting-custom-fields-in-the-name-dropdown\">Limiting Custom Fields in the Name dropdown</a></li><li>\n<a  href=\"#any-other-block-editor-concerns\">Any other Block Editor concerns?</a></li><li>\n<a  href=\"#relationship-to-advanced-custom-fields\">Relationship to Advanced Custom Fields</a></li><li>\n<a  href=\"#note-for-plugin-developers\">Note for plugin developers</a></li><li>\n<a  href=\"#more-examples-using-custom-fields-in-wordpress\">More examples using Custom Fields in WordPress</a></li><li>\n<a  href=\"#what-do-you-use-them-for\">What do you use them for?</a></li></ul>\n\n<h3 id=\"how-to-addeditremove-custom-fields-in-wordpress\">How to Add/Edit/Remove Custom Fields in WordPress</h3>\n\n\n<p>The UI for Custom Fields in WordPress looks like this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2391\" height=\"2081\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=2391%2C2081&#038;ssl=1\" alt=\"Showing that Custom Fields in WordPress appear below the content area of the block editor in the admin user interface.\" class=\"wp-image-360593\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?w=2391&amp;ssl=1 2391w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=300%2C261&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=1024%2C891&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=768%2C668&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=1536%2C1337&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=2048%2C1782&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/custom-field-ui-in-wordpress.png?resize=1000%2C870&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you don&#8217;t see it, it&#8217;s possible you may need to go under the three-dots menu, Preferences, and then find the toggle for Custom Fields and turn it on. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1778\" height=\"1482\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?resize=1778%2C1482&#038;ssl=1\" alt=\"Showing the option to enable Custom Fields in WordPresss in the Block Editor Preferences settings. It is at the first toggle beneath the Additional settings.\" class=\"wp-image-360063\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?w=1778&amp;ssl=1 1778w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?resize=300%2C250&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?resize=1024%2C854&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?resize=768%2C640&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?resize=1536%2C1280&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.32.52@2x.png?resize=1000%2C834&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The UI forces you to refresh the page when turning this feature on and off.</figcaption></figure>\n\n\n\n<p>To add a Custom Field, type in the Key (labeled &#8220;Name&#8221;) and Value, then click <strong>Add Custom Field</strong>. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1256\" height=\"492\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2021-12-29-at-05.34.29@2x.png.webp?resize=1256%2C492&#038;ssl=1\" alt=\"Showing a Custom Field in WordPress with a name of favorite_food and a value of burrito. There a button below the name input to add the custom field.\" class=\"wp-image-360754\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2021-12-29-at-05.34.29@2x.png.webp?w=1256&amp;ssl=1 1256w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2021-12-29-at-05.34.29@2x.png.webp?resize=300%2C118&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2021-12-29-at-05.34.29@2x.png.webp?resize=1024%2C401&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2021-12-29-at-05.34.29@2x.png.webp?resize=768%2C301&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2021-12-29-at-05.34.29@2x.png.webp?resize=1000%2C392&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>After it&#8217;s added, you can delete or update it from buttons below the Key/Name:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1272\" height=\"372\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.35.33@2x.png?resize=1272%2C372&#038;ssl=1\" alt=\"Showing a Custom Field in WordPress with a name of favorite_food and a value of burrito. There are two buttons below the name to delete or update the custom field.\" class=\"wp-image-360065\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.35.33@2x.png?w=1272&amp;ssl=1 1272w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.35.33@2x.png?resize=300%2C88&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.35.33@2x.png?resize=1024%2C299&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.35.33@2x.png?resize=768%2C225&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.35.33@2x.png?resize=1000%2C292&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>After you have used Custom Fields, the keys will form into a dropdown menu for easier selection. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"595\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.36.45@2x.png?resize=1024%2C595&#038;ssl=1\" alt=\"Showing the dropdown menu that opens when clocking on the Name field of a custom field in WordPress, allowing you to select an existing custom field.\" class=\"wp-image-360066\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.36.45@2x.png?resize=1024%2C595&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.36.45@2x.png?resize=300%2C174&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.36.45@2x.png?resize=768%2C446&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.36.45@2x.png?resize=1000%2C581&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-05.36.45@2x.png?w=1266&amp;ssl=1 1266w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"why-use-custom-fields\">Why use Custom Fields?</h3>\n\n\n<p>Custom Fields, along with Custom Post Types, <strong>are what make WordPress a <abbr title=\"content management system\">CMS</abbr></strong> out-of-the-box rather than being limited to a simple blogging platform. </p>\n\n\n\n<p>Here on CSS-Tricks, believe it or not, we use over 100 Custom Fields to do different things on this site. We tend to reach for them for <em>relatively simple</em> things, and it&#8217;s nice as it&#8217;s a core feature of WordPress that will continue to work forever without too much worry about compatibility or awkward technical debt. </p>\n\n\n\n<p>The big idea is to <strong>open up templating possibilities</strong>. Imagine you have a page for real estate listings that has:</p>\n\n\n\n<ul><li>Address</li><li>Listing price </li><li>Bedrooms</li><li>Bathrooms</li><li>etc.</li></ul>\n\n\n\n<p>With custom fields, you have all that information available as discreet little chunks of data that you can echo (i.e. display) into a page template wherever you need to. <strong>That&#8217;s much more flexible</strong> than having all that data in the post content itself, even with the Block Editor. </p>\n\n\n<h3 id=\"wordpress-custom-fields-use-case-examples\">WordPress Custom Fields use case examples</h3>\n\n\n<p>Custom Fields in WordPress can be used for so many different things! But let&#8217;s look at a five practical use cases that we have implemented here on CSS-Tricks.</p>\n\n\n<h4 id=\"1-display-additional-information\">1. Display additional information</h4>\n\n\n<p>Say you are publishing a video and want to have the running time of the video available to display. That&#8217;s as easy as saving the <code>running_time</code> as a Custom Field and displaying it wherever you&#8217;d like:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2400\" height=\"1654\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=2400%2C1654&#038;ssl=1\" alt=\"A side-by-side showing a published post on the left with the running time of a video circled in red, and the WordPress admin on the right with the running time custom field circled in the block editor showing the exact same information that is published in the post.\" class=\"wp-image-360086\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?w=2400&amp;ssl=1 2400w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=300%2C207&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=1024%2C706&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=768%2C529&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=1536%2C1059&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=2048%2C1411&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/CleanShot-2021-12-29-at-08.12.22@2x.png?resize=1000%2C689&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Note other Custom Fields in use here, like the <code>youtube</code> field, which we have so that we can output where the </figcaption></figure>\n\n\n<h4 id=\"2-hideshow-different-contentfeatures\">2. Hide/Show Different Content/Features</h4>\n\n\n<p>Let&#8217;s say you want to be able to collapse the Comments area <em>sometimes</em> on different blog posts. You could set a custom field called <code>should_toggle_comments</code> and set a value of <code>true</code>. That&#8217;s what we do here on CSS-Tricks. In our <code>comments.php</code> template, we output a <code>&lt;ol&gt;</code> of all the comments, but if this custom field is there, we wrap the whole thing in a <code>&lt;details&gt;</code> element, collapsing it by default:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;?php if (get_post_meta($post->ID, 'should_toggle_comments', true)) { ?>\n&lt;details class=\"open-all-comments\">\n  &lt;summary>Toggle All Comments (there are a lot!)&lt;/summary>\n  &lt;?php } ?>\n\n    &lt;ol class=\"commentlist\" id=\"commentlist\">\n      &lt;?php wp_list_comments('type=comment&amp;avatar_size=512&amp;callback=csstricks_comment'); ?>\n    &lt;/ol>\n\n  &lt;?php if (get_post_meta($post->ID, 'should_toggle_comments', true)) { ?>\n  &lt;/details>\n&lt;?php } ?></code></pre>\n\n\n<h4 id=\"3-special-pull-quotes\">3. Special pull quotes</h4>\n\n\n<p>Say you have a special Category archive that displays a group of posts that contain the same category, then use a custom template for that category, like <code>category-fancypants.php</code>. Maybe you yank out a custom quote from each article as a custom field called <code>main-pullquote</code>:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;blockquote>\n  &lt;?php\n    echo get_post_meta($post->ID, 'main-pullquote', true);\n  ?>\n&lt;/blockquote></code></pre>\n\n\n\n<p>That&#8217;s what we do for our annual <a href=\"https://css-tricks.com/category/2021-end-of-year-thoughts/\">end-of-year series</a>:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2874\" height=\"1646\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=2874%2C1646&#038;ssl=1\" alt=\"A side by side showing the the main pull quote custom field in WordPress circled in red, and the category archive on the right with a red arrow pointing to the corresponding pull-quote that displays on the page.\" class=\"wp-image-360596\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?w=2874&amp;ssl=1 2874w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=300%2C172&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=1024%2C586&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=768%2C440&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=1536%2C880&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=2048%2C1173&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-04-at-16.55.26@2x.png?resize=1000%2C573&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h4 id=\"4-customize-an-rss-feed\">4. Customize an RSS feed</h4>\n\n\n<p>We build a couple of totally custom RSS feeds here on CSS-Tricks that are different from what <a href=\"https://wordpress.org/support/article/wordpress-feeds/\" rel=\"noopener\">WordPress offers out of the box</a> — one for videos and one for newsletters. <a href=\"https://css-tricks.com/video-feed/\">The video feed</a> in particular relies on some WordPress Custom Fields to output special data that is required to make the feed work as a feed for our video podcast.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2876\" height=\"1654\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=2876%2C1654&#038;ssl=1\" alt=\"Side by side showing the rss videos template in code on the left with the custom field part circled in red, and the RSS feed open in the browser on the right with an arrow pointing to where the corresponding code renders as the video enclosure. \" class=\"wp-image-360620\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?w=2876&amp;ssl=1 2876w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=300%2C173&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=1024%2C589&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=768%2C442&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=1536%2C883&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=2048%2C1178&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.21.12@2x.png?resize=1000%2C575&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The location of the video and the duration are both kept in custom fields</figcaption></figure>\n\n\n<h4 id=\"5-hideshow-author\">5. Hide/Show Author</h4>\n\n\n<p>Our sponsored posts here on CSS-Tricks are sometimes written to sound largely like an announcement from a company. They were written like that on purpose and likely have been written by multiple people by the time its actually published. A post like that doesn&#8217;t really need to be &#8220;by&#8221; someone. But sometimes sponsored posts are definitely authored by a specific person, even sometimes in the first person, which would be weird without showing a byline. That&#8217;s why we use a <code>showSponsorAuthor</code> custom field, to show that author if we need it.</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"sponsored-post-byline\">\n  ❥ Sponsored\n  &lt;?php if (get_post_meta($post->ID, 'showSponsorAuthor', true)) { ?>\n    (Written by &lt;?php the_author(); ?>)\n  &lt;?php } ?>\n&lt;/div></code></pre>\n\n\n\n<p>Above is a part of a template. We always mark a sponsored post as sponsored in the byline (<a href=\"https://css-tricks.com/jetpack-features-we-love-and-use-at-css-tricks/\">example</a>), but only optionally do we visually show the author (<a href=\"https://css-tricks.com/jetpack-licensing-for-agencies-and-professionals/\">example</a>), controlled by a custom field.</p>\n\n\n<h3 id=\"the-apis-for-displaying-custom-fields-in-wordpress\">The APIs for displaying Custom Fields in WordPress</h3>\n\n\n<p>Most commonly, you&#8217;re looking to display the value of a single field:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;?php echo get_post_meta($post->ID, 'mood', true); ?></code></pre>\n\n\n\n<p>That <code>true</code> at the end there means &#8220;give me a <em>single</em> value,&#8221; meaning that even if there are multiple custom fields with the same name, you&#8217;ll only get one. To get multiple of the same name, use <code>false</code>, like:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"1\"><code markup=\"tt\">&lt;?php $songs = get_post_meta($post->ID, 'songs', false); ?>\n&lt;h3>This post inspired by:&lt;/h3>\n&lt;ul>\n  &lt;?php foreach($songs as $song) {\n    echo '&lt;li>'.$song.'&lt;/li>';\n  } ?>\n&lt;/ul></code></pre>\n\n\n\n<p>If you want to just dump them all out (probably mostly useful for debugging), you can do that like this:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;?php the_meta(); ?></code></pre>\n\n\n\n<p>Although, note that this skips custom fields that start with an underscore (<code>_</code>), so you might consider <a href=\"https://css-tricks.com/snippets/wordpress/dump-all-custom-fields/\">this approach instead</a>.</p>\n\n\n<h3 id=\"querying-for-custom-fields-in-wordpress\">Querying for Custom Fields in WordPress</h3>\n\n\n<p>Say you wanted to query for all posts that have some particular custom field. That&#8217;s possible!</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;?php\n$the_query = new WP_Query(array(\n  'meta_key' => 'example_field_name'\n  'meta_value' => 'example_field_value' // as a string! \n));\n\nif ($the_query->have_posts()) {\n  while ($the_query->have_posts()) {\n    $the_query->the_post();\n    echo '&lt;div>' . get_the_title() . '&lt;/div>';\n  }\n}\n\nwp_reset_postdata();</code></pre>\n\n\n\n<div class=\"wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<p>The example above will run a query for posts that have <em>both</em> a custom field of <code>example_field_name</code> and where that field has a value of <code>example_field_value</code>. You could do either/or. </p>\n\n\n\n<p>There is a lot more you can do here. You can use comparisons, you can get the values as numbers, and even query for multiple fields at once. We detail all that in <a href=\"https://css-tricks.com/snippets/wordpress/custom-loop-based-on-custom-fields/\">Custom Loop/Query Based on Custom Fields</a>.</p>\n\n\n<h3 id=\"limiting-custom-fields-in-the-name-dropdown\">Limiting Custom Fields in the Name dropdown</h3>\n\n\n<p>The UI dropdown for existing Custom Fields in WordPress is capped at something like 30 fields. So, if you have more than 100 different keys, the dropdown menu will look arbitrarily cut off. <a href=\"https://css-tricks.com/snippets/wordpress/increase-custom-fields-dropdown-limit/\">You can increase that number with a filter</a> in <code>functions.php</code> or a plugin:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function customfield_limit_increase( $limit ) {\n  $limit = 150;\n  return $limit;\n}\nadd_filter( 'postmeta_form_limit', 'customfield_limit_increase' );</code></pre>\n</div></div>\n\n\n<h3 id=\"any-other-block-editor-concerns\">Any other Block Editor concerns?</h3>\n\n\n<p>The main concern is when you can&#8217;t see the custom fields UI at all. We covered how to turn it back on (because it might default to off), so always check that. The <a href=\"https://www.advancedcustomfields.com\" rel=\"noopener\">Advanced Custom Fields plugin</a> also turns it off, so if you&#8217;re using that plugin, note there is a line below to help turn it back on (in the case you use both, as we do).</p>\n\n\n\n<p class=\"is-style-explanation\">I&#8217;m not sure there is a standard way to show the value of a custom field within a block in the block editor either. If you know of a clear way, <a href=\"#respond\">leave a comment</a>! </p>\n\n\n<h3 id=\"relationship-to-advanced-custom-fields\">Relationship to Advanced Custom Fields</h3>\n\n\n<p>The UI for native Custom Fields in WordPress is pretty&#8230; underserved. It&#8217;s not fancy, it&#8217;s got rough edges (we find that Custom Fields have a weird way of duplicating themselves on multiple post saves, for example). It doesn&#8217;t seem like Custom Fields, while native, are a particularly first-class feature of WordPress. </p>\n\n\n\n<p><a href=\"https://www.advancedcustomfields.com/\" rel=\"noopener\">Advanced Custom Fields</a> (ACF) changes that in a big way. The spirit remains the same: attach data to content. But rather than the simple string-based key-value interface that we&#8217;ve detailed, you essentially model the data with different types and it builds really nice custom UI for you to use to input that data, even integrating directly with the Block Editor.</p>\n\n\n\n<p>Imagine a podcast website where each post is an individual episode. The Block Editor might be nice for written content about the episode, but probably not a good idea for all of the metadata that goes with it. The list of guests, the duration, the location of the MP3 file, the sponsor, time jump links, etc. Custom Fields are great for that, but since there are so many, you&#8217;ll be well served by Advanced Custom Fields here instead of using native Custom Fields in WordPress. Here&#8217;s a setup example of what you get as we do on the <a href=\"https://shoptalkshow.com\" rel=\"noopener\">ShopTalk Show podcast</a>:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2302\" height=\"1634\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=2302%2C1634&#038;ssl=1\" alt=\"Side by side showing the settings for custom fields in the Advanced Custom Fields plugin on the left, and those custom fields displayed on the right in the  WordPress Block Editor of a new post.\" class=\"wp-image-360622\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?w=2302&amp;ssl=1 2302w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=300%2C213&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=1024%2C727&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=768%2C545&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=1536%2C1090&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=2048%2C1454&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-05-at-07.45.26@2x.png?resize=1000%2C710&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>ACF, probably in an attempt to encourage using it directly and not confusing people with the native Custom Fields interface, removes the native Custom Fields interface. If you&#8217;re like us and use both types of fields, you&#8217;ll need to bring the native Custom Fields UI back to the post editor with a filter that ACF provides:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">add_filter('acf/settings/remove_wp_meta_box', '__return_false');</code></pre>\n\n\n\n<p>If you use native Custom Fields in WordPress at all, you&#8217;ll want that in your <code>functions.php</code> file or a functionality plugin.</p>\n\n\n<h3 id=\"note-for-plugin-developers\">Note for plugin developers</h3>\n\n\n<p><strong>Use the underscore hiding technique.</strong></p>\n\n\n\n<p>Some plugins use the Custom Fields API as a place to store post-specific data. I think that&#8217;s OK, but I&#8217;d like to implore plugin developers to always use underscore-and-plugin-prefixed custom field names when doing so. </p>\n\n\n\n<p>When custom fields start with an underscore, they aren&#8217;t shown in the UI. Meaning for those of us who use the Custom Fields UI directly, it&#8217;s not cluttered with fields created by other plugins. The exception, of course, is if you intend users to be able to control what the plugin does with the Custom Field values. In that case, fine, leave those few non-underscore-prefixed fields.</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">_bobs_plugin_internal_value_1 // Hidden in UI\n_bobs_plugin_internal_value_2 // Hidden in UI\nbobs_plugin_config  // Shows in UI\n\n_adrians_plugin_internal_value_1  // Hidden in UI\n_adrians_plugin_internal_value_2 // Hidden in UI</code></pre>\n\n\n<h3 id=\"more-examples-using-custom-fields-in-wordpress\">More examples using Custom Fields in WordPress</h3>\n\n\n    \t\t\n    <div class=\"in-article-cards\">\n      <article class=\"in-article-card article\" id=\"mini-post-360061\">\n\n  <time datetime=\"2009-09-03\" title=\"Originally published Jan 10, 2022\">\n    <strong>\n                \n      Snippet\n      </strong>\n\n    on\n\n    Mar 2, 2010  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/snippets/wordpress/using-custom-fields/\">\n      Using Custom Fields    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/wordpress/\" rel=\"tag\">WordPress</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-360061\">\n\n  <time datetime=\"2009-11-05\" title=\"Originally published Jan 10, 2022\">\n    <strong>\n                \n      Snippet\n      </strong>\n\n    on\n\n    Jan 4, 2022  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/snippets/wordpress/dump-all-custom-fields/\">\n      Dump All Custom Fields    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/wordpress/\" rel=\"tag\">WordPress</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-360061\">\n\n  <time datetime=\"2009-10-30\" title=\"Originally published Jan 10, 2022\">\n    <strong>\n                \n      Snippet\n      </strong>\n\n    on\n\n    Apr 26, 2019  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/snippets/wordpress/custom-loop-based-on-custom-fields/\">\n      Custom Loop/Query Based on Custom Fields    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/wordpress/\" rel=\"tag\">WordPress</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card \" id=\"mini-post-360061\">\n\n  <time datetime=\"2014-08-11\" title=\"Originally published Jan 10, 2022\">\n    <strong>\n                \n      Snippet\n      </strong>\n\n    on\n\n    Aug 11, 2014  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/snippets/wordpress/increase-custom-fields-dropdown-limit/\">\n      Increase Custom Fields Dropdown Limit    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/wordpress/\" rel=\"tag\">WordPress</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-360061\">\n\n  <time datetime=\"2014-03-24\" title=\"Originally published Jan 10, 2022\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Apr 12, 2017  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/svg-wordpress-custom-fields/\">\n      SVG &#038; WordPress Custom Fields    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/wordpress/\" rel=\"tag\">WordPress</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/ianmarquette/\" aria-label=\"Author page of Ian Marquette\">\n      <img alt='' src='https://secure.gravatar.com/avatar/624ec0d14b5ffaae66a1b98f5808e85a?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/624ec0d14b5ffaae66a1b98f5808e85a?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/ianmarquette/\">\n      Ian Marquette    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-360061\">\n\n  <time datetime=\"2009-06-23\" title=\"Originally published Jan 10, 2022\">\n    <strong>\n                \n      Video\n      </strong>\n\n    on\n\n    Feb 25, 2015  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/video-screencasts/65-advanced-uses-for-custom-fields-in-wordpress/\">\n      #65: Advanced Uses for Custom Fields in WordPress    </a>\n  </h3>\n\n      <time>▶ Running Time: <span>47:48</span></time>\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/wordpress/\" rel=\"tag\">WordPress</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n    </div>\n  \n\n\n<h3 id=\"what-do-you-use-them-for\">What do you use them for?</h3>\n\n\n<p>Do you use Custom Fields in WordPress? I&#8217;m particularly curious about <em>native</em> custom field usage.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/use-custom-fields-in-wordpress/\">How to Use Native Custom Fields in WordPress (and 5 Useful Examples)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Custom Fields in WordPress are arbitrary bits of data that you can apply to Posts, Pages, and Custom Post Types in WordPress. Metadata, as it were, in the form of key/value pairs. For example:\n\n\n\nKey: subtitle / Value: They are more than they are cracked up to beKey: header_color_override / Value: #e52e05Key: property_url / Value: https://example.com/123\n\n\n\nWordPress has their own documentation of this feature, so I’m not trying to replicate that. I’d just like to show you essentially what custom fields in WordPress are, how they work, how to use them, and some use cases from my own personal experience.\n\n\n\n\n\n\nTable of Contents\n\nHow to Add/Edit/Remove Custom Fields in WordPress\nWhy use Custom Fields?\nWordPress Custom Fields use case examples\n\t\t\n1. Display additional information\n2. Hide/Show Different Content/Features\n3. Special pull quotes\n4. Customize an RSS feed\n5. Hide/Show Author\n\nThe APIs for displaying Custom Fields in WordPress\nQuerying for Custom Fields in WordPress\nLimiting Custom Fields in the Name dropdown\nAny other Block Editor concerns?\nRelationship to Advanced Custom Fields\nNote for plugin developers\nMore examples using Custom Fields in WordPress\nWhat do you use them for?\n\nHow to Add/Edit/Remove Custom Fields in WordPress\n\n\nThe UI for Custom Fields in WordPress looks like this:\n\n\n\n\n\n\n\nIf you don’t see it, it’s possible you may need to go under the three-dots menu, Preferences, and then find the toggle for Custom Fields and turn it on. \n\n\n\nThe UI forces you to refresh the page when turning this feature on and off.\n\n\n\nTo add a Custom Field, type in the Key (labeled “Name”) and Value, then click Add Custom Field. \n\n\n\n\n\n\n\nAfter it’s added, you can delete or update it from buttons below the Key/Name:\n\n\n\n\n\n\n\nAfter you have used Custom Fields, the keys will form into a dropdown menu for easier selection. \n\n\n\n\n\n\nWhy use Custom Fields?\n\n\nCustom Fields, along with Custom Post Types, are what make WordPress a CMS out-of-the-box rather than being limited to a simple blogging platform. \n\n\n\nHere on CSS-Tricks, believe it or not, we use over 100 Custom Fields to do different things on this site. We tend to reach for them for relatively simple things, and it’s nice as it’s a core feature of WordPress that will continue to work forever without too much worry about compatibility or awkward technical debt. \n\n\n\nThe big idea is to open up templating possibilities. Imagine you have a page for real estate listings that has:\n\n\n\nAddressListing price BedroomsBathroomsetc.\n\n\n\nWith custom fields, you have all that information available as discreet little chunks of data that you can echo (i.e. display) into a page template wherever you need to. That’s much more flexible than having all that data in the post content itself, even with the Block Editor. \n\n\nWordPress Custom Fields use case examples\n\n\nCustom Fields in WordPress can be used for so many different things! But let’s look at a five practical use cases that we have implemented here on CSS-Tricks.\n\n\n1. Display additional information\n\n\nSay you are publishing a video and want to have the running time of the video available to display. That’s as easy as saving the running_time as a Custom Field and displaying it wherever you’d like:\n\n\n\nNote other Custom Fields in use here, like the youtube field, which we have so that we can output where the \n\n\n2. Hide/Show Different Content/Features\n\n\nLet’s say you want to be able to collapse the Comments area sometimes on different blog posts. You could set a custom field called should_toggle_comments and set a value of true. That’s what we do here on CSS-Tricks. In our comments.php template, we output a <ol> of all the comments, but if this custom field is there, we wrap the whole thing in a <details> element, collapsing it by default:\n\n\n\n<?php if (get_post_meta($post->ID, 'should_toggle_comments', true)) { ?>\n<details class=\"open-all-comments\">\n  <summary>Toggle All Comments (there are a lot!)</summary>\n  <?php } ?>\n\n    <ol class=\"commentlist\" id=\"commentlist\">\n      <?php wp_list_comments('type=comment&avatar_size=512&callback=csstricks_comment'); ?>\n    </ol>\n\n  <?php if (get_post_meta($post->ID, 'should_toggle_comments', true)) { ?>\n  </details>\n<?php } ?>\n\n\n3. Special pull quotes\n\n\nSay you have a special Category archive that displays a group of posts that contain the same category, then use a custom template for that category, like category-fancypants.php. Maybe you yank out a custom quote from each article as a custom field called main-pullquote:\n\n\n\n<blockquote>\n  <?php\n    echo get_post_meta($post->ID, 'main-pullquote', true);\n  ?>\n</blockquote>\n\n\n\nThat’s what we do for our annual end-of-year series:\n\n\n\n\n\n\n4. Customize an RSS feed\n\n\nWe build a couple of totally custom RSS feeds here on CSS-Tricks that are different from what WordPress offers out of the box — one for videos and one for newsletters. The video feed in particular relies on some WordPress Custom Fields to output special data that is required to make the feed work as a feed for our video podcast.\n\n\n\nThe location of the video and the duration are both kept in custom fields\n\n\n5. Hide/Show Author\n\n\nOur sponsored posts here on CSS-Tricks are sometimes written to sound largely like an announcement from a company. They were written like that on purpose and likely have been written by multiple people by the time its actually published. A post like that doesn’t really need to be “by” someone. But sometimes sponsored posts are definitely authored by a specific person, even sometimes in the first person, which would be weird without showing a byline. That’s why we use a showSponsorAuthor custom field, to show that author if we need it.\n\n\n\n<div class=\"sponsored-post-byline\">\n  ❥ Sponsored\n  <?php if (get_post_meta($post->ID, 'showSponsorAuthor', true)) { ?>\n    (Written by <?php the_author(); ?>)\n  <?php } ?>\n</div>\n\n\n\nAbove is a part of a template. We always mark a sponsored post as sponsored in the byline (example), but only optionally do we visually show the author (example), controlled by a custom field.\n\n\nThe APIs for displaying Custom Fields in WordPress\n\n\nMost commonly, you’re looking to display the value of a single field:\n\n\n\n<?php echo get_post_meta($post->ID, 'mood', true); ?>\n\n\n\nThat true at the end there means “give me a single value,” meaning that even if there are multiple custom fields with the same name, you’ll only get one. To get multiple of the same name, use false, like:\n\n\n\n<?php $songs = get_post_meta($post->ID, 'songs', false); ?>\n<h3>This post inspired by:</h3>\n<ul>\n  <?php foreach($songs as $song) {\n    echo '<li>'.$song.'</li>';\n  } ?>\n</ul>\n\n\n\nIf you want to just dump them all out (probably mostly useful for debugging), you can do that like this:\n\n\n\n<?php the_meta(); ?>\n\n\n\nAlthough, note that this skips custom fields that start with an underscore (_), so you might consider this approach instead.\n\n\nQuerying for Custom Fields in WordPress\n\n\nSay you wanted to query for all posts that have some particular custom field. That’s possible!\n\n\n\n<?php\n$the_query = new WP_Query(array(\n  'meta_key' => 'example_field_name'\n  'meta_value' => 'example_field_value' // as a string! \n));\n\nif ($the_query->have_posts()) {\n  while ($the_query->have_posts()) {\n    $the_query->the_post();\n    echo '<div>' . get_the_title() . '</div>';\n  }\n}\n\nwp_reset_postdata();\n\n\n\n\nThe example above will run a query for posts that have both a custom field of example_field_name and where that field has a value of example_field_value. You could do either/or. \n\n\n\nThere is a lot more you can do here. You can use comparisons, you can get the values as numbers, and even query for multiple fields at once. We detail all that in Custom Loop/Query Based on Custom Fields.\n\n\nLimiting Custom Fields in the Name dropdown\n\n\nThe UI dropdown for existing Custom Fields in WordPress is capped at something like 30 fields. So, if you have more than 100 different keys, the dropdown menu will look arbitrarily cut off. You can increase that number with a filter in functions.php or a plugin:\n\n\n\nfunction customfield_limit_increase( $limit ) {\n  $limit = 150;\n  return $limit;\n}\nadd_filter( 'postmeta_form_limit', 'customfield_limit_increase' );\n\n\n\nAny other Block Editor concerns?\n\n\nThe main concern is when you can’t see the custom fields UI at all. We covered how to turn it back on (because it might default to off), so always check that. The Advanced Custom Fields plugin also turns it off, so if you’re using that plugin, note there is a line below to help turn it back on (in the case you use both, as we do).\n\n\n\nI’m not sure there is a standard way to show the value of a custom field within a block in the block editor either. If you know of a clear way, leave a comment! \n\n\nRelationship to Advanced Custom Fields\n\n\nThe UI for native Custom Fields in WordPress is pretty… underserved. It’s not fancy, it’s got rough edges (we find that Custom Fields have a weird way of duplicating themselves on multiple post saves, for example). It doesn’t seem like Custom Fields, while native, are a particularly first-class feature of WordPress. \n\n\n\nAdvanced Custom Fields (ACF) changes that in a big way. The spirit remains the same: attach data to content. But rather than the simple string-based key-value interface that we’ve detailed, you essentially model the data with different types and it builds really nice custom UI for you to use to input that data, even integrating directly with the Block Editor.\n\n\n\nImagine a podcast website where each post is an individual episode. The Block Editor might be nice for written content about the episode, but probably not a good idea for all of the metadata that goes with it. The list of guests, the duration, the location of the MP3 file, the sponsor, time jump links, etc. Custom Fields are great for that, but since there are so many, you’ll be well served by Advanced Custom Fields here instead of using native Custom Fields in WordPress. Here’s a setup example of what you get as we do on the ShopTalk Show podcast:\n\n\n\n\n\n\n\nACF, probably in an attempt to encourage using it directly and not confusing people with the native Custom Fields interface, removes the native Custom Fields interface. If you’re like us and use both types of fields, you’ll need to bring the native Custom Fields UI back to the post editor with a filter that ACF provides:\n\n\n\nadd_filter('acf/settings/remove_wp_meta_box', '__return_false');\n\n\n\nIf you use native Custom Fields in WordPress at all, you’ll want that in your functions.php file or a functionality plugin.\n\n\nNote for plugin developers\n\n\nUse the underscore hiding technique.\n\n\n\nSome plugins use the Custom Fields API as a place to store post-specific data. I think that’s OK, but I’d like to implore plugin developers to always use underscore-and-plugin-prefixed custom field names when doing so. \n\n\n\nWhen custom fields start with an underscore, they aren’t shown in the UI. Meaning for those of us who use the Custom Fields UI directly, it’s not cluttered with fields created by other plugins. The exception, of course, is if you intend users to be able to control what the plugin does with the Custom Field values. In that case, fine, leave those few non-underscore-prefixed fields.\n\n\n\n_bobs_plugin_internal_value_1 // Hidden in UI\n_bobs_plugin_internal_value_2 // Hidden in UI\nbobs_plugin_config  // Shows in UI\n\n_adrians_plugin_internal_value_1  // Hidden in UI\n_adrians_plugin_internal_value_2 // Hidden in UI\n\n\nMore examples using Custom Fields in WordPress\n\n\n    \t\t\n    \n      \n\n  \n    \n                \n      Snippet\n      \n\n    on\n\n    Mar 2, 2010  \n\n  \n    \n      Using Custom Fields    \n  \n\n  \n      \n      WordPress    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n\n\n  \n    \n                \n      Snippet\n      \n\n    on\n\n    Jan 4, 2022  \n\n  \n    \n      Dump All Custom Fields    \n  \n\n  \n      \n      WordPress    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n\n\n  \n    \n                \n      Snippet\n      \n\n    on\n\n    Apr 26, 2019  \n\n  \n    \n      Custom Loop/Query Based on Custom Fields    \n  \n\n  \n      \n      WordPress    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n\n\n  \n    \n                \n      Snippet\n      \n\n    on\n\n    Aug 11, 2014  \n\n  \n    \n      Increase Custom Fields Dropdown Limit    \n  \n\n  \n      \n      WordPress    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n\n\n  \n    \n                \n        Article\n      \n\n    on\n\n    Apr 12, 2017  \n\n  \n    \n      SVG & WordPress Custom Fields    \n  \n\n  \n      \n      WordPress    \n  \n  \n    \n          \n  \n    \n      Ian Marquette    \n  \n\n\n\n\n  \n    \n                \n      Video\n      \n\n    on\n\n    Feb 25, 2015  \n\n  \n    \n      #65: Advanced Uses for Custom Fields in WordPress    \n  \n\n      ▶ Running Time: 47:48\n  \n      \n      WordPress    \n  \n  \n    \n          \n  \n    \n      Chris Coyier    \n  \n\n\n    \n  \n\n\nWhat do you use them for?\n\n\nDo you use Custom Fields in WordPress? I’m particularly curious about native custom field usage.\n\nHow to Use Native Custom Fields in WordPress (and 5 Useful Examples) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-11T00:41:48.000Z",
      "date_modified": "2022-01-11T00:41:48.000Z",
      "_plugin": {
        "pageFilename": "51f542bf2123b855a62c927daa80a63c31de217a9614ca09d5c675a63bd89b1f.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360873",
      "url": "https://css-tricks.com/what-is-chromium-without-chrome-on-top/",
      "title": "What is Chromium Without Chrome on Top?",
      "summary": "Raw Chromium, perhaps?\nSo, Chrome is based on Chromium which is open-source. Chrome is Chromium with Google’s extra stuff on top of it. What extra stuff? Kinda lots! A few years ago, The Verge published “Microsoft reveals all the …\n\nWhat is Chromium Without Chrome on Top? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Raw Chromium, perhaps?</p>\n\n\n\n<p>So, Chrome is based on <a href=\"https://www.chromium.org/Home\" rel=\"noopener\">Chromium</a> which is <a href=\"https://chromium.googlesource.com/chromium/src/+/main/docs/mac_build_instructions.md#Get-the-code\" rel=\"noopener\">open-source</a>. Chrome is Chromium with Google&#8217;s extra stuff on top of it. What extra stuff? Kinda lots! A few years ago, <em>The Verge</em> published <a href=\"https://www.theverge.com/2019/4/8/18300772/microsoft-google-services-removed-changed-chromium-edge-browser\" rel=\"noopener\">&#8220;Microsoft reveals all the Google things it removed in its Chromium Edge browser&#8221;</a> with this image from Microsoft listing out all the stuff:</p>\n\n\n\n<span id=\"more-360873\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1699\" height=\"929\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?resize=1699%2C929&#038;ssl=1\" alt=\"A long list of features Microsoft has removed from Chromium split into four columns.\" class=\"wp-image-360874\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?w=1699&amp;ssl=1 1699w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?resize=300%2C164&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?resize=1024%2C560&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?resize=768%2C420&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?resize=1536%2C840&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nxRW7na.png?resize=1000%2C547&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>That suggests all this stuff is actually in Chromium, not added later to Chrome in some additional process. That means if you wanna build your own Chromium fork and de-couple yourself from Google, you&#8217;ve got some work to do.</p>\n\n\n\n<p>Several big players have done that work. Clearly, Microsoft has done it with Edge. Vivaldi and Brave are other big Chromium-based browsers with presumably similar de-Googleification.</p>\n\n\n\n<p>Dan Abramov was asking around about this the other day:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">is there a regularly updated mod of chrome that’s basically chromium (so chrome minus google-specific stuff except search) but also without experimental features and always based on a stable revision</p>&mdash; Dan (@dan_abramov) <a href=\"https://twitter.com/dan_abramov/status/1475691811830181890?ref_src=twsrc%5Etfw\" rel=\"noopener\">December 28, 2021</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>Sounds like Dan (and by extension: me) learned through this thread that Chromium isn&#8217;t actually just the core browser stuff where Chrome then adds stuff on top of it. It&#8217;s that if you want to base another browser on Chromium, you have to yank stuff <em>out</em> of Chromium.</p>\n\n\n\n<p>Seems a smidge weird to me, but hey, it&#8217;s open-source, so if you don&#8217;t like it, fork it. And obviously many have. Perhaps most notable is <strong><a href=\"https://github.com/Eloston/ungoogled-chromium\" rel=\"noopener\">ungoogled-chromium</a></strong>. It lists this as the philosophy:</p>\n\n\n\n<blockquote>\n<ol>\n<li>Remove all remaining background requests to any web services while building and running the browser</li>\n<li>Remove all code specific to Google web services</li>\n<li>Remove all uses of pre-made binaries from the source code, and replace them with user-provided alternatives when possible.</li>\n<li>Disable features that inhibit control and transparency, and add or modify features that promote them (these changes will almost always require manual activation or enabling).</li>\n</ol>\n</blockquote>\n\n\n\n<p>I have zero doubt that the browser world is converging on Chromium. You can imagine Apple hanging onto their own thing with WebKit forever, but things don&#8217;t seem to be going <a href=\"https://css-tricks.com/wp-content/uploads/2022/01/Screen_Shot_2022-01-06_at_6.43.52_AM.png\">terribly well</a> at Mozilla, and they haven&#8217;t for a while. Mozilla&#8217;s <a href=\"https://www.pcmag.com/news/mozilla-signs-lucrative-3-year-google-search-deal-for-firefox\" rel=\"noopener\">money seems to come from Google anyway</a> so it&#8217;s tough to imagine Mozilla&#8217;s browser engines hanging on for that much longer. Y&#8217;all can call me an ignorant asshole in January 2032 if Mozilla still has a competitive browser engine.</p>\n\n\n\n<p>The health of the browser ecosystem would benefit from a cleaner, company-agnostic version of Chromium (and maybe call it something else). If most browsers are based on it, so be it, but let the innovation happen from a level playing field.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/what-is-chromium-without-chrome-on-top/\">What is Chromium Without Chrome on Top?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Raw Chromium, perhaps?\n\n\n\nSo, Chrome is based on Chromium which is open-source. Chrome is Chromium with Google’s extra stuff on top of it. What extra stuff? Kinda lots! A few years ago, The Verge published “Microsoft reveals all the Google things it removed in its Chromium Edge browser” with this image from Microsoft listing out all the stuff:\n\n\n\n\n\n\n\n\n\n\n\nThat suggests all this stuff is actually in Chromium, not added later to Chrome in some additional process. That means if you wanna build your own Chromium fork and de-couple yourself from Google, you’ve got some work to do.\n\n\n\nSeveral big players have done that work. Clearly, Microsoft has done it with Edge. Vivaldi and Brave are other big Chromium-based browsers with presumably similar de-Googleification.\n\n\n\nDan Abramov was asking around about this the other day:\n\n\n\n\nis there a regularly updated mod of chrome that’s basically chromium (so chrome minus google-specific stuff except search) but also without experimental features and always based on a stable revision— Dan (@dan_abramov) December 28, 2021\n\n\n\n\nSounds like Dan (and by extension: me) learned through this thread that Chromium isn’t actually just the core browser stuff where Chrome then adds stuff on top of it. It’s that if you want to base another browser on Chromium, you have to yank stuff out of Chromium.\n\n\n\nSeems a smidge weird to me, but hey, it’s open-source, so if you don’t like it, fork it. And obviously many have. Perhaps most notable is ungoogled-chromium. It lists this as the philosophy:\n\n\n\n\n\nRemove all remaining background requests to any web services while building and running the browser\nRemove all code specific to Google web services\nRemove all uses of pre-made binaries from the source code, and replace them with user-provided alternatives when possible.\nDisable features that inhibit control and transparency, and add or modify features that promote them (these changes will almost always require manual activation or enabling).\n\n\n\n\n\nI have zero doubt that the browser world is converging on Chromium. You can imagine Apple hanging onto their own thing with WebKit forever, but things don’t seem to be going terribly well at Mozilla, and they haven’t for a while. Mozilla’s money seems to come from Google anyway so it’s tough to imagine Mozilla’s browser engines hanging on for that much longer. Y’all can call me an ignorant asshole in January 2032 if Mozilla still has a competitive browser engine.\n\n\n\nThe health of the browser ecosystem would benefit from a cleaner, company-agnostic version of Chromium (and maybe call it something else). If most browsers are based on it, so be it, but let the innovation happen from a level playing field.\n\nWhat is Chromium Without Chrome on Top? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-10T22:02:49.000Z",
      "date_modified": "2022-01-10T22:02:49.000Z",
      "_plugin": {
        "pageFilename": "8a10944290d73987200a3fd75e3b152e843194a9814f541ca315738b89dd170c.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359886",
      "url": "https://css-tricks.com/dont-fight-the-cascade-control-it/",
      "title": "Don’t Fight the Cascade, Control It!",
      "summary": "If you’re disciplined and make use of the inheritance that the CSS cascade provides, you’ll end up writing less CSS. But because our styles often comes from all kinds of sources — and can be a pain to structure and …\n\nDon’t Fight the Cascade, Control It! originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>If you’re disciplined and <em>make use of</em> the inheritance that the CSS cascade provides, you’ll end up writing <em>less</em> CSS. But because our styles often comes from all kinds of sources — and can be a pain to structure and maintain—the cascade can be a source of frustration, and the reason we end up with <em>more</em> CSS than necessary.</p>\n\n\n\n<p>Some years ago, Harry Roberts came up with <a href=\"https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/\" rel=\"noopener\">ITCSS</a> and it’s a clever way of structuring CSS.</p>\n\n\n\n<span id=\"more-359886\"></span>\n\n\n\n<figure class=\"wp-block-image size-full is-resized ticss-eabfcfdc\"><img loading=\"lazy\" src=\"https://css-tricks.com/wp-content/uploads/2021/12/itcss-layers2.svg\" alt=\"\" class=\"wp-image-359887\" width=\"656\" height=\"398\"/></figure>\n\n\n\n<p>Mixed with <a href=\"http://getbem.com/\" rel=\"noopener\">BEM</a>, ITCSS has become a popular way that people write and organize CSS.</p>\n\n\n\n<p>However, even with ITCSS and BEM, there are still times where we <em>still</em> struggle with the cascade. For example, I’m sure you’ve had to <code>@import</code> external CSS components at a specific location to prevent breaking things, or reach for the dreaded <code>!important</code> at some point in time.</p>\n\n\n\n<p>Recently, some new tools were added to our CSS toolbox, and they allow us to finally control the cascade. Let’s look at them.</p>\n\n\n<h3 id=\"o-cascade-where-art-thou\">O cascade, <code>:where</code> art thou?</h3>\n\n\n<p>Using the <a href=\"https://css-tricks.com/almanac/selectors/w/where/\"><code>:where</code> pseudo-selector</a> allows us to remove specificity to “just after the user-agent default styles,” no matter where or when the CSS is loaded into the document. That means the specificity of the whole thing is literally zero — totally wiped out. This is handy for <em>generic components</em>, which we’ll look into in a moment.</p>\n\n\n\n<p>First, imagine some generic <code>&lt;table&gt;</code> styles, using <code>:where</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where(table) {\n  background-color: tan;\n}</code></pre>\n\n\n\n<p>Now, if you add some other table styles <em>before</em> the <code>:where</code> selector, like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">table {\n  background-color: hotpink;\n}\n\n:where(table) {\n  background-color: tan;\n}</code></pre>\n\n\n\n<p>…the table background becomes <code>hotpink</code>, even though the <code>table</code> selector is specified <em>before</em> the <code>:where</code> selector in the cascade. That’s the beauty of <code>:where</code>, and why it’s already being used for <a href=\"https://css-tricks.com/an-interview-with-elad-shechter-on-the-new-css-reset/\">CSS resets</a>.</p>\n\n\n\n<p><code>:where</code> has a sibling, which has almost the exact opposite effect: <a href=\"https://css-tricks.com/almanac/selectors/i/is/\">the <code>:is</code> selector</a>.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The specificity of the <code>:is()</code> pseudo-class is replaced by the specificity of its most specific argument. Thus, a selector written with <code>:is()</code> does not necessarily have equivalent specificity to the equivalent selector written without <code>:is()</code>. <a href=\"https://www.w3.org/TR/selectors-4/#matches-pseudo\" rel=\"noopener\">Selectors Level 4 specification</a></p></blockquote>\n\n\n\n<p>Expanding on our previous example:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:is(table) {\n  --tbl-bgc: orange;\n}\ntable {\n  --tbl-bgc: tan;\n}\n:where(table) {\n  --tbl-bgc: hotpink;\n  background-color: var(--tbl-bgc);\n}</code></pre>\n\n\n\n<p>The <code>&lt;table class=\"c-tbl\"></code> background color will be <code>tan</code> because the specificity of <code>:is</code> is the same as <code>table</code>, but <code>table</code> is placed after.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XWeVaQw\" src=\"//codepen.io/anon/embed/XWeVaQw?height=450&amp;theme-id=1&amp;slug-hash=XWeVaQw&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XWeVaQw\" title=\"CodePen Embed XWeVaQw\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>However, if we were to change it to this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:is(table, .c-tbl) {\n  --tbl-bgc: orange;\n}</code></pre>\n\n\n\n<p>…the background color will be <code>orange</code>, since <code>:is</code> has the weight of it&#8217;s heaviest selector, which is <code>.c-tbl</code>.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwLxZmK\" src=\"//codepen.io/anon/embed/RwLxZmK?height=450&amp;theme-id=1&amp;slug-hash=RwLxZmK&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwLxZmK\" title=\"CodePen Embed RwLxZmK\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"example-a-configurable-table-component\">Example: A configurable table component</h3>\n\n\n<p>Now, let’s see how we can use <code>:where</code> in our components. We’ll be building a table component, starting with the HTML:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abLEygb\" src=\"//codepen.io/anon/embed/abLEygb?height=450&amp;theme-id=1&amp;slug-hash=abLEygb&amp;default-tab=html,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abLEygb\" title=\"CodePen Embed abLEygb\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Let’s wrap <code>.c-tbl</code> in a <code>:where</code>-selector and, just for fun, add rounded corners to the table. That means we need <code>border-collapse: separate</code>, as we can’t use <code>border-radius</code> on table cells when the table is using <code>border-collapse: collapse</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where(.c-tbl) {\n  border-collapse: separate;\n  border-spacing: 0;\n  table-layout: auto;\n  width: 99.9%;\n}</code></pre>\n\n\n\n<p>The cells use different styling for the <code>&lt;thead&gt;</code> and <code>&lt;tbody&gt;</code>-cells:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where(.c-tbl thead th) {\n  background-color: hsl(200, 60%, 40%);\n  border-style: solid;\n  border-block-start-width: 0;\n  border-inline-end-width: 1px;\n  border-block-end-width: 0;\n  border-inline-start-width: 0;\n  color: hsl(200, 60%, 99%);\n  padding-block: 1.25ch;\n  padding-inline: 2ch;\n  text-transform: uppercase;\n}\n:where(.c-tbl tbody td) {\n  background-color: #FFF;\n  border-color: hsl(200, 60%, 80%);\n  border-style: solid;\n  border-block-start-width: 0;\n  border-inline-end-width: 1px;\n  border-block-end-width: 1px;\n  border-inline-start-width: 0;\n  padding-block: 1.25ch;\n  padding-inline: 2ch;\n}</code></pre>\n\n\n\n<p>And, because of our rounded corners and the missing <code>border-collapse: collapse</code>, we need to add some extra styles, specifically for the table borders and a hover state on the cells:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where(.c-tbl tr td:first-of-type) {\n  border-inline-start-width: 1px;\n}\n:where(.c-tbl tr th:last-of-type) {\n  border-inline-color: hsl(200, 60%, 40%);\n}\n:where(.c-tbl tr th:first-of-type) {\n  border-inline-start-color: hsl(200, 60%, 40%);\n}\n:where(.c-tbl thead th:first-of-type) {\n  border-start-start-radius: 0.5rem;\n}\n:where(.c-tbl thead th:last-of-type) {\n  border-start-end-radius: 0.5rem;\n}\n:where(.c-tbl tbody tr:last-of-type td:first-of-type) {\n  border-end-start-radius: 0.5rem;\n}\n:where(.c-tbl tr:last-of-type td:last-of-type) {\n  border-end-end-radius: 0.5rem;\n}\n/* hover */\n@media (hover: hover) {\n  :where(.c-tbl) tr:hover td {\n    background-color: hsl(200, 60%, 95%);\n  }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GRMjpyb\" src=\"//codepen.io/anon/embed/GRMjpyb?height=450&amp;theme-id=1&amp;slug-hash=GRMjpyb&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GRMjpyb\" title=\"CodePen Embed GRMjpyb\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now we can create variations of our table component by injecting other styles before <strong>or</strong> after our generic styles (courtesy of the specificity-stripping powers of <code>:where</code>), either by overwriting the <code>.c-tbl</code> element or by adding a BEM-style modifier-class (e.g. <code>c-tbl--purple</code>):</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;table class=\"c-tbl c-tbl--purple\"></code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.c-tbl--purple th {\n  background-color: hsl(330, 50%, 40%)\n}\n.c-tbl--purple td {\n  border-color: hsl(330, 40%, 80%);\n}\n.c-tbl--purple tr th:last-of-type {\n  border-inline-color: hsl(330, 50%, 40%);\n}\n.c-tbl--purple tr th:first-of-type {\n  border-inline-start-color: hsl(330, 50%, 40%);\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ExwowYY\" src=\"//codepen.io/anon/embed/ExwowYY?height=450&amp;theme-id=1&amp;slug-hash=ExwowYY&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ExwowYY\" title=\"CodePen Embed ExwowYY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Cool! But notice how we keep repeating colors? And what if we want to change the <code>border-radius</code> or the <code>border-width</code>? That would end up with <em>a lot of</em> repeated CSS.</p>\n\n\n\n<p>Let’s move all of these to <a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">CSS custom properties</a> and, while we’re at it, we can move all <strong>configurable properties</strong> to the top of the component’s “scope“ — which is the table element itself — so we can easily play around with them later.</p>\n\n\n<h3 id=\"css-custom-properties\">CSS Custom Properties</h3>\n\n\n<p>I’m going to switch things up in the HTML and use a <code>data-component</code> attribute on the table element that can be targeted for styling.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;table data-component=\"table\" id=\"table\"></code></pre>\n\n\n\n<p>That <code>data-component</code> will hold the generic styles that we can use on any instance of the component, i.e. the styles the table needs no matter what color variation we apply. The styles for a <em>specific</em> table component instance will be contained in a regular class, using custom properties from the generic component.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[data-component=\"table\"] {\n  /* Styles needed for all table variations */\n}\n.c-tbl--purple {\n  /* Styles for the purple variation */\n}</code></pre>\n\n\n\n<p>If we place all the <em>generic styles</em> in a <a href=\"https://css-tricks.com/a-complete-guide-to-data-attributes/\">data-attribute</a>, we can use whatever naming convention we want. This way, we don’t have to worry if your boss insists on naming the table’s classes something like <code>.BIGCORP__TABLE</code>, <code>.table-component</code> or something else.</p>\n\n\n\n<p>In the generic component, each CSS property points to a custom property. Properties, that have to work on child-elements, like <code>border-color</code>, are specified at the <strong>root</strong> of the generic component:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where([data-component=\"table\"]) {\n  /* These will will be used multiple times, and in other selectors */\n  --tbl-hue: 200;\n  --tbl-sat: 50%;\n  --tbl-bdc: hsl(var(--tbl-hue), var(--tbl-sat), 80%);\n}\n\n/* Here, it's used on a child-node: */\n:where([data-component=\"table\"] td) {\n  border-color: var(--tbl-bdc);\n}</code></pre>\n\n\n\n<p>For other properties, decide whether it should have a <strong>static value</strong>, or be <strong>configurable</strong> with its own custom property. If you’re using custom properties, remember to define a default value that the table can fall back to in the event that a variation class is missing.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where([data-component=\"table\"]) {\n  /* These are optional, with fallbacks */\n  background-color: var(--tbl-bgc, transparent);\n  border-collapse: var(--tbl-bdcl, separate);\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">If you’re wondering how I’m naming the custom properties, I’m using a component-prefix (e.g. <code>--tbl</code>) followed by an Emmett-abbreviation (e.g. <code>-bgc</code>). In this case, <code>--tbl</code> is the component-prefix, <code>-bgc</code> is the background color, and <code>-bdcl</code> is the border collapse. So, for example, <code>--tbl-bgc</code> is the table component’s background color. I only use this naming convention when working with component properties, as opposed to global properties which I tend to keep more general.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWEjaBv\" src=\"//codepen.io/anon/embed/MWEjaBv?height=450&amp;theme-id=1&amp;slug-hash=MWEjaBv&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWEjaBv\" title=\"CodePen Embed MWEjaBv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now, if we open up DevTools, we can play around with the custom properties. For example, We can change <code>--tbl-hue</code> to a different hue value in the HSL color, set <code>--tbl-bdrs: 0</code> to remove <code>border-radius</code>, and so on.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"431\" height=\"155\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/vXUic0Fr.png?resize=431%2C155&#038;ssl=1\" alt=\"A :where CSS rule set showing the custom properties of the table showing how the cascade’s specificity scan be used in context.\" class=\"wp-image-359888\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/vXUic0Fr.png?w=431&amp;ssl=1 431w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/vXUic0Fr.png?resize=300%2C108&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>When working with your own components, this is the point in time you’ll discover which parameters (i.e. the custom property values) the component needs to make things look just right.</p>\n\n\n\n<p>We can also use custom properties to control column alignment and width:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:where[data-component=\"table\"] tr > *:nth-of-type(1)) {\n  text-align: var(--ca1, initial);\n  width: var(--cw1, initial);\n  /* repeat for column 2 and 3, or use a SCSS-loop ... */\n}</code></pre>\n\n\n\n<p>In DevTools, select the table and add these to the <code>element.styles</code> selector:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">element.style {\n  --ca2: center; /* Align second column center */\n  --ca3: right; /* Align third column right */\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"864\" height=\"246\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962857377_table_align.png?resize=864%2C246&#038;ssl=1\" alt=\"\" class=\"wp-image-359889\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962857377_table_align.png?w=864&amp;ssl=1 864w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962857377_table_align.png?resize=300%2C85&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962857377_table_align.png?resize=768%2C219&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now, let’s create our <em>specific</em> component styles, using a regular class, <code>.c-tbl</code> (which stands for “component-table” in BEM parlance). Let’s toss that class in the table markup.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;table class=\"c-tbl\" data-component=\"table\" id=\"table\"></code></pre>\n\n\n\n<p>Now, let’s change the <code>--tbl-hue</code> value in the CSS just to see how this works before we start messing around with all of the property values:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.c-tbl {\n  --tbl-hue: 330;\n}</code></pre>\n\n\n\n<p>Notice, that we only need to <strong>update properties</strong> rather than writing entirely new CSS! Changing one little property updates the table’s color — no new classes or overriding properties lower in the cascade.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1974\" height=\"492\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?resize=1974%2C492&#038;ssl=1\" alt=\"\" class=\"wp-image-359891\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?w=1974&amp;ssl=1 1974w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?resize=300%2C75&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?resize=1024%2C255&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?resize=768%2C191&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?resize=1536%2C383&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636973272294_127.0.0.1_5500_css-tricks_cascade_index.html.png?resize=1000%2C249&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Notice how the border colors change as well. That&#8217;s because all the colors in the table inherit from the <code>--tbl-hue</code> variable</figcaption></figure>\n\n\n\n<p>We can write a more complex selector, but still update a single property, to get something like zebra-striping:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.c-tbl tr:nth-child(even) td {\n  --tbl-td-bgc: hsl(var(--tbl-hue), var(--tbl-sat), 95%);\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"864\" height=\"246\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962048091_table_hue.png?resize=864%2C246&#038;ssl=1\" alt=\"\" class=\"wp-image-359892\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962048091_table_hue.png?w=864&amp;ssl=1 864w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962048091_table_hue.png?resize=300%2C85&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636962048091_table_hue.png?resize=768%2C219&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>And remember: It doesn’t matter <strong>where</strong> you load the class. Because our generic styles are using <code>:where</code>, the specificity is wiped out, and any custom styles for a specific variation will be applied no matter where they are used. That’s the beauty of using <code>:where</code> to take control of the cascade!</p>\n\n\n\n<p>And best of all, we can create <em>all kinds of</em> table components from the generic styles with a few lines of CSS.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1008\" height=\"246\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233085840_purple.png?resize=1008%2C246&#038;ssl=1\" alt=\"\" class=\"wp-image-359894\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233085840_purple.png?w=1008&amp;ssl=1 1008w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233085840_purple.png?resize=300%2C73&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233085840_purple.png?resize=768%2C187&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233085840_purple.png?resize=1000%2C244&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Purple table with zebra-striped columns</figcaption></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1008\" height=\"247\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233044068_light.png?resize=1008%2C247&#038;ssl=1\" alt=\"\" class=\"wp-image-359893\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233044068_light.png?w=1008&amp;ssl=1 1008w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233044068_light.png?resize=300%2C74&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233044068_light.png?resize=768%2C188&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1639233044068_light.png?resize=1000%2C245&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Light table with a&nbsp;“noinlineborder” parameter&#8230; which we&#8217;ll cover next</figcaption></figure>\n\n\n<h3 id=\"adding-parameters-with-another-dataattribute\">Adding parameters with another data-attribute</h3>\n\n\n<p>So far, so good! The generic table component is <em>very</em> simple. But what if it requires something more akin to <em>real</em> parameters? Perhaps for things like:</p>\n\n\n\n<ul><li>zebra-striped rows and columns</li><li>a sticky header and sticky column</li><li>hover-state options, such as hover row, hover cell, hover column</li></ul>\n\n\n\n<p>We could simply add BEM-style modifier classes, but we can actually accomplish it more efficiently by adding another data-attribute to the mix. Perhaps a <code>data-param</code> that holds the parameters like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;table data-component=\"table\" data-param=\"zebrarow stickyrow\"></code></pre>\n\n\n\n<p>Then, in our CSS, we can use an <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\" rel=\"noopener\">attribute-selector</a> to match a whole word in a list of parameters. For example, zebra-striped rows:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[data-component=\"table\"][data-param~=\"zebrarow\"] tr:nth-child(even) td {\n  --tbl-td-bgc: var(--tbl-zebra-bgc);\n}</code></pre>\n\n\n\n<p>Or zebra-striping columns:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[data-component=\"table\"][data-param~=\"zebracol\"] td:nth-of-type(odd) {\n  --tbl-td-bgc: var(--tbl-zebra-bgc);\n}</code></pre>\n\n\n\n<p>Let’s go nuts and make both the table header and the first column sticky:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">\n[data-component=\"table\"][data-param~=\"stickycol\"] thead tr th:first-child,[data-component=\"table\"][data-param~=\"stickycol\"] tbody tr td:first-child {\n  --tbl-td-bgc: var(--tbl-zebra-bgc);\n  inset-inline-start: 0;\n  position: sticky;\n}\n[data-component=\"table\"][data-param~=\"stickyrow\"] thead th {\n  inset-block-start: -1px;\n  position: sticky;\n}</code></pre>\n\n\n\n<p>Here’s a demo that allows you to change one parameter at a time:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxXEeXB\" src=\"//codepen.io/anon/embed/xxXEeXB?height=450&amp;theme-id=1&amp;slug-hash=xxXEeXB&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxXEeXB\" title=\"CodePen Embed xxXEeXB\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The default light theme in the demo is this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.c-tbl--light {\n  --tbl-bdrs: 0;\n  --tbl-sat: 15%;\n  --tbl-th-bgc: #eee;\n  --tbl-th-bdc: #eee;\n  --tbl-th-c: #555;\n  --tbl-th-tt: normal;\n}</code></pre>\n\n\n\n<p>…where <code>data-param</code> is set to <code>noinlineborder</code> which corresponds to these styles:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[data-param~=\"noinlineborder\"] thead tr > th {\n  border-block-start-width: 0;\n  border-inline-end-width: 0;\n  border-block-end-width: var(--tbl-bdw);\n  border-inline-start-width: 0;\n}</code></pre>\n\n\n\n<p>I know my <code>data-attribute</code> way of styling and configuring generic components is very opinionated. That’s just how I roll, so please feel free to stick with whatever method you’re most comfortable working with, whether it’s a BEM modifier class or something else.</p>\n\n\n\n<p>The bottom line is this: <strong>embrace <code>:where</code> and <code>:is</code> and the cascade-controlling powers they provide.</strong> And, if possible, construct the CSS in such a way that you wind up writing as little new CSS as possible when creating new component variations!</p>\n\n\n<h3 id=\"cascade-layers\">Cascade Layers</h3>\n\n\n<p>The last cascade-busting tool I want to look at is “Cascade Layers.” At the time of this writing, it’s an experimental feature defined in the <a href=\"https://www.w3.org/TR/css-cascade-5/#layering\" rel=\"noopener\">CSS Cascading and Inheritance Level 5 specification</a> that you can access in Safari or Chrome by enabling the <code>#enable-cascade-layers</code> flag.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"722\" height=\"97\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636728032349_image.png?resize=722%2C97&#038;ssl=1\" alt=\"\" class=\"wp-image-359896\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636728032349_image.png?w=722&amp;ssl=1 722w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_AAFF14CA4F2E3B88B4CE2A60E70AA9244DC37E52C4325B0814BA5C3448ECDD6D_1636728032349_image.png?resize=300%2C40&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Bramus Van Damme <a href=\"https://www.bram.us/2021/09/15/the-future-of-css-cascade-layers-css-at-layer/\" rel=\"noopener\">sums up the concept nicely</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The true power of Cascade Layers comes from its unique position in the Cascade: before Selector Specificity and Order Of Appearance. Because of that <strong>we don’t need to worry about the Selector Specificity of the CSS that is used in other Layers</strong>, nor about the order in which we load CSS into these Layers — something that will come in very handy for larger teams or when loading in third-party CSS.</p></blockquote>\n\n\n\n<p>Perhaps even nicer is his illustration showing where Cascade Layers fall in the cascade:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1DF7E6E072B0916EB7F87D80C547417848D48AF8ABF7C8A30B334495313EEE08_1640643601657_css-cascade-cascade-layers-champ-bramus-1120x630-1.png?resize=1024%2C576&#038;ssl=1\" alt=\"\" class=\"wp-image-359897\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1DF7E6E072B0916EB7F87D80C547417848D48AF8ABF7C8A30B334495313EEE08_1640643601657_css-cascade-cascade-layers-champ-bramus-1120x630-1.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1DF7E6E072B0916EB7F87D80C547417848D48AF8ABF7C8A30B334495313EEE08_1640643601657_css-cascade-cascade-layers-champ-bramus-1120x630-1.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1DF7E6E072B0916EB7F87D80C547417848D48AF8ABF7C8A30B334495313EEE08_1640643601657_css-cascade-cascade-layers-champ-bramus-1120x630-1.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1DF7E6E072B0916EB7F87D80C547417848D48AF8ABF7C8A30B334495313EEE08_1640643601657_css-cascade-cascade-layers-champ-bramus-1120x630-1.png?resize=1000%2C563&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1DF7E6E072B0916EB7F87D80C547417848D48AF8ABF7C8A30B334495313EEE08_1640643601657_css-cascade-cascade-layers-champ-bramus-1120x630-1.png?w=1120&amp;ssl=1 1120w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Credit: Bramus Van Damme</figcaption></figure>\n\n\n\n<p>At the beginning of this article, I mentioned ITCSS — a way of taming the cascade by specifying the load-order of generic styles, components etc. Cascade Layers allow us to inject a stylesheet at a given location. So a simplified version of this structure in Cascade Layers looks like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer generic, components;</code></pre>\n\n\n\n<p>With this single line, we’ve decided the <strong>order</strong> of our layers. First come the generic styles, followed by the component-specific ones.</p>\n\n\n\n<p>Let’s pretend that we’re loading our generic styles somewhere <strong>much later</strong> than our component styles:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer components {\n  body {\n    background-color: lightseagreen;\n  }\n}\n\n/* MUCH, much later... */\n\n@layer generic { \n  body {\n    background-color: tomato;\n  }\n}</code></pre>\n\n\n\n<p>The <code>background-color</code> will be <code>lightseagreen</code> because our component styles layer is set <em>after</em> the generic styles layer. So, the styles in the <code>components</code> layer “win” even if they are written <em>before</em> the <code>generic</code> layer styles.</p>\n\n\n\n<p>Again, just another tool for controlling how the CSS cascade applies styles, allowing us more flexibility to organize things logically rather than wrestling with specificity.</p>\n\n\n<h3 id=\"now-youre-in-control\">Now you’re in control!</h3>\n\n\n<p>The whole point here is that the CSS cascade is becoming a lot easier to wrangle, thanks to new features. We saw how the <code>:where</code> and <code>:is</code> pseudo-selectors allows us to control specificity, either by stripping out the specificity of an entire ruleset or taking on the specificity of the most specific argument, respectively. Then we used CSS Custom Properties to override styles without writing a new class to override another. From there, we took a slight detour down data-attribute lane to help us add more flexibility to create component variations merely by adding arguments to the HTML. And, finally, we poked at Cascade Layers which should prove handy for specifying the loading order or styles using <code>@layer</code>.</p>\n\n\n\n<p>If you leave with only one takeaway from this article, I hope it’s that the CSS cascade is no longer the enemy it’s often made to be. We are gaining the tools to stop fighting it and start leaning into even more.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p><small>Header photo by&nbsp;<a href=\"https://unsplash.com/@stephenleo1982?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Stephen Leonardi</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/s/photos/cascade?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Unsplash</a></small></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/dont-fight-the-cascade-control-it/\">Don&#8217;t Fight the Cascade, Control It!</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "If you’re disciplined and make use of the inheritance that the CSS cascade provides, you’ll end up writing less CSS. But because our styles often comes from all kinds of sources — and can be a pain to structure and maintain—the cascade can be a source of frustration, and the reason we end up with more CSS than necessary.\n\n\n\nSome years ago, Harry Roberts came up with ITCSS and it’s a clever way of structuring CSS.\n\n\n\n\n\n\n\n\n\n\n\nMixed with BEM, ITCSS has become a popular way that people write and organize CSS.\n\n\n\nHowever, even with ITCSS and BEM, there are still times where we still struggle with the cascade. For example, I’m sure you’ve had to @import external CSS components at a specific location to prevent breaking things, or reach for the dreaded !important at some point in time.\n\n\n\nRecently, some new tools were added to our CSS toolbox, and they allow us to finally control the cascade. Let’s look at them.\n\n\nO cascade, :where art thou?\n\n\nUsing the :where pseudo-selector allows us to remove specificity to “just after the user-agent default styles,” no matter where or when the CSS is loaded into the document. That means the specificity of the whole thing is literally zero — totally wiped out. This is handy for generic components, which we’ll look into in a moment.\n\n\n\nFirst, imagine some generic <table> styles, using :where:\n\n\n\n:where(table) {\n  background-color: tan;\n}\n\n\n\nNow, if you add some other table styles before the :where selector, like this:\n\n\n\ntable {\n  background-color: hotpink;\n}\n\n:where(table) {\n  background-color: tan;\n}\n\n\n\n…the table background becomes hotpink, even though the table selector is specified before the :where selector in the cascade. That’s the beauty of :where, and why it’s already being used for CSS resets.\n\n\n\n:where has a sibling, which has almost the exact opposite effect: the :is selector.\n\n\n\nThe specificity of the :is() pseudo-class is replaced by the specificity of its most specific argument. Thus, a selector written with :is() does not necessarily have equivalent specificity to the equivalent selector written without :is(). Selectors Level 4 specification\n\n\n\nExpanding on our previous example:\n\n\n\n:is(table) {\n  --tbl-bgc: orange;\n}\ntable {\n  --tbl-bgc: tan;\n}\n:where(table) {\n  --tbl-bgc: hotpink;\n  background-color: var(--tbl-bgc);\n}\n\n\n\nThe <table class=\"c-tbl\"> background color will be tan because the specificity of :is is the same as table, but table is placed after.\n\n\n\nCodePen Embed Fallback\n\n\n\nHowever, if we were to change it to this:\n\n\n\n:is(table, .c-tbl) {\n  --tbl-bgc: orange;\n}\n\n\n\n…the background color will be orange, since :is has the weight of it’s heaviest selector, which is .c-tbl.\n\n\n\nCodePen Embed Fallback\n\n\nExample: A configurable table component\n\n\nNow, let’s see how we can use :where in our components. We’ll be building a table component, starting with the HTML:\n\n\n\nCodePen Embed Fallback\n\n\n\nLet’s wrap .c-tbl in a :where-selector and, just for fun, add rounded corners to the table. That means we need border-collapse: separate, as we can’t use border-radius on table cells when the table is using border-collapse: collapse:\n\n\n\n:where(.c-tbl) {\n  border-collapse: separate;\n  border-spacing: 0;\n  table-layout: auto;\n  width: 99.9%;\n}\n\n\n\nThe cells use different styling for the <thead> and <tbody>-cells:\n\n\n\n:where(.c-tbl thead th) {\n  background-color: hsl(200, 60%, 40%);\n  border-style: solid;\n  border-block-start-width: 0;\n  border-inline-end-width: 1px;\n  border-block-end-width: 0;\n  border-inline-start-width: 0;\n  color: hsl(200, 60%, 99%);\n  padding-block: 1.25ch;\n  padding-inline: 2ch;\n  text-transform: uppercase;\n}\n:where(.c-tbl tbody td) {\n  background-color: #FFF;\n  border-color: hsl(200, 60%, 80%);\n  border-style: solid;\n  border-block-start-width: 0;\n  border-inline-end-width: 1px;\n  border-block-end-width: 1px;\n  border-inline-start-width: 0;\n  padding-block: 1.25ch;\n  padding-inline: 2ch;\n}\n\n\n\nAnd, because of our rounded corners and the missing border-collapse: collapse, we need to add some extra styles, specifically for the table borders and a hover state on the cells:\n\n\n\n:where(.c-tbl tr td:first-of-type) {\n  border-inline-start-width: 1px;\n}\n:where(.c-tbl tr th:last-of-type) {\n  border-inline-color: hsl(200, 60%, 40%);\n}\n:where(.c-tbl tr th:first-of-type) {\n  border-inline-start-color: hsl(200, 60%, 40%);\n}\n:where(.c-tbl thead th:first-of-type) {\n  border-start-start-radius: 0.5rem;\n}\n:where(.c-tbl thead th:last-of-type) {\n  border-start-end-radius: 0.5rem;\n}\n:where(.c-tbl tbody tr:last-of-type td:first-of-type) {\n  border-end-start-radius: 0.5rem;\n}\n:where(.c-tbl tr:last-of-type td:last-of-type) {\n  border-end-end-radius: 0.5rem;\n}\n/* hover */\n@media (hover: hover) {\n  :where(.c-tbl) tr:hover td {\n    background-color: hsl(200, 60%, 95%);\n  }\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nNow we can create variations of our table component by injecting other styles before or after our generic styles (courtesy of the specificity-stripping powers of :where), either by overwriting the .c-tbl element or by adding a BEM-style modifier-class (e.g. c-tbl--purple):\n\n\n\n<table class=\"c-tbl c-tbl--purple\">\n\n\n\n.c-tbl--purple th {\n  background-color: hsl(330, 50%, 40%)\n}\n.c-tbl--purple td {\n  border-color: hsl(330, 40%, 80%);\n}\n.c-tbl--purple tr th:last-of-type {\n  border-inline-color: hsl(330, 50%, 40%);\n}\n.c-tbl--purple tr th:first-of-type {\n  border-inline-start-color: hsl(330, 50%, 40%);\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nCool! But notice how we keep repeating colors? And what if we want to change the border-radius or the border-width? That would end up with a lot of repeated CSS.\n\n\n\nLet’s move all of these to CSS custom properties and, while we’re at it, we can move all configurable properties to the top of the component’s “scope“ — which is the table element itself — so we can easily play around with them later.\n\n\nCSS Custom Properties\n\n\nI’m going to switch things up in the HTML and use a data-component attribute on the table element that can be targeted for styling.\n\n\n\n<table data-component=\"table\" id=\"table\">\n\n\n\nThat data-component will hold the generic styles that we can use on any instance of the component, i.e. the styles the table needs no matter what color variation we apply. The styles for a specific table component instance will be contained in a regular class, using custom properties from the generic component.\n\n\n\n[data-component=\"table\"] {\n  /* Styles needed for all table variations */\n}\n.c-tbl--purple {\n  /* Styles for the purple variation */\n}\n\n\n\nIf we place all the generic styles in a data-attribute, we can use whatever naming convention we want. This way, we don’t have to worry if your boss insists on naming the table’s classes something like .BIGCORP__TABLE, .table-component or something else.\n\n\n\nIn the generic component, each CSS property points to a custom property. Properties, that have to work on child-elements, like border-color, are specified at the root of the generic component:\n\n\n\n:where([data-component=\"table\"]) {\n  /* These will will be used multiple times, and in other selectors */\n  --tbl-hue: 200;\n  --tbl-sat: 50%;\n  --tbl-bdc: hsl(var(--tbl-hue), var(--tbl-sat), 80%);\n}\n\n/* Here, it's used on a child-node: */\n:where([data-component=\"table\"] td) {\n  border-color: var(--tbl-bdc);\n}\n\n\n\nFor other properties, decide whether it should have a static value, or be configurable with its own custom property. If you’re using custom properties, remember to define a default value that the table can fall back to in the event that a variation class is missing.\n\n\n\n:where([data-component=\"table\"]) {\n  /* These are optional, with fallbacks */\n  background-color: var(--tbl-bgc, transparent);\n  border-collapse: var(--tbl-bdcl, separate);\n}\n\n\n\nIf you’re wondering how I’m naming the custom properties, I’m using a component-prefix (e.g. --tbl) followed by an Emmett-abbreviation (e.g. -bgc). In this case, --tbl is the component-prefix, -bgc is the background color, and -bdcl is the border collapse. So, for example, --tbl-bgc is the table component’s background color. I only use this naming convention when working with component properties, as opposed to global properties which I tend to keep more general.\n\n\n\nCodePen Embed Fallback\n\n\n\nNow, if we open up DevTools, we can play around with the custom properties. For example, We can change --tbl-hue to a different hue value in the HSL color, set --tbl-bdrs: 0 to remove border-radius, and so on.\n\n\n\n\n\n\n\nWhen working with your own components, this is the point in time you’ll discover which parameters (i.e. the custom property values) the component needs to make things look just right.\n\n\n\nWe can also use custom properties to control column alignment and width:\n\n\n\n:where[data-component=\"table\"] tr > *:nth-of-type(1)) {\n  text-align: var(--ca1, initial);\n  width: var(--cw1, initial);\n  /* repeat for column 2 and 3, or use a SCSS-loop ... */\n}\n\n\n\nIn DevTools, select the table and add these to the element.styles selector:\n\n\n\nelement.style {\n  --ca2: center; /* Align second column center */\n  --ca3: right; /* Align third column right */\n}\n\n\n\n\n\n\n\nNow, let’s create our specific component styles, using a regular class, .c-tbl (which stands for “component-table” in BEM parlance). Let’s toss that class in the table markup.\n\n\n\n<table class=\"c-tbl\" data-component=\"table\" id=\"table\">\n\n\n\nNow, let’s change the --tbl-hue value in the CSS just to see how this works before we start messing around with all of the property values:\n\n\n\n.c-tbl {\n  --tbl-hue: 330;\n}\n\n\n\nNotice, that we only need to update properties rather than writing entirely new CSS! Changing one little property updates the table’s color — no new classes or overriding properties lower in the cascade.\n\n\n\nNotice how the border colors change as well. That’s because all the colors in the table inherit from the --tbl-hue variable\n\n\n\nWe can write a more complex selector, but still update a single property, to get something like zebra-striping:\n\n\n\n.c-tbl tr:nth-child(even) td {\n  --tbl-td-bgc: hsl(var(--tbl-hue), var(--tbl-sat), 95%);\n}\n\n\n\n\n\n\n\nAnd remember: It doesn’t matter where you load the class. Because our generic styles are using :where, the specificity is wiped out, and any custom styles for a specific variation will be applied no matter where they are used. That’s the beauty of using :where to take control of the cascade!\n\n\n\nAnd best of all, we can create all kinds of table components from the generic styles with a few lines of CSS.\n\n\n\nPurple table with zebra-striped columns\n\n\n\nLight table with a “noinlineborder” parameter… which we’ll cover next\n\n\nAdding parameters with another data-attribute\n\n\nSo far, so good! The generic table component is very simple. But what if it requires something more akin to real parameters? Perhaps for things like:\n\n\n\nzebra-striped rows and columnsa sticky header and sticky columnhover-state options, such as hover row, hover cell, hover column\n\n\n\nWe could simply add BEM-style modifier classes, but we can actually accomplish it more efficiently by adding another data-attribute to the mix. Perhaps a data-param that holds the parameters like this:\n\n\n\n<table data-component=\"table\" data-param=\"zebrarow stickyrow\">\n\n\n\nThen, in our CSS, we can use an attribute-selector to match a whole word in a list of parameters. For example, zebra-striped rows:\n\n\n\n[data-component=\"table\"][data-param~=\"zebrarow\"] tr:nth-child(even) td {\n  --tbl-td-bgc: var(--tbl-zebra-bgc);\n}\n\n\n\nOr zebra-striping columns:\n\n\n\n[data-component=\"table\"][data-param~=\"zebracol\"] td:nth-of-type(odd) {\n  --tbl-td-bgc: var(--tbl-zebra-bgc);\n}\n\n\n\nLet’s go nuts and make both the table header and the first column sticky:\n\n\n\n\n[data-component=\"table\"][data-param~=\"stickycol\"] thead tr th:first-child,[data-component=\"table\"][data-param~=\"stickycol\"] tbody tr td:first-child {\n  --tbl-td-bgc: var(--tbl-zebra-bgc);\n  inset-inline-start: 0;\n  position: sticky;\n}\n[data-component=\"table\"][data-param~=\"stickyrow\"] thead th {\n  inset-block-start: -1px;\n  position: sticky;\n}\n\n\n\nHere’s a demo that allows you to change one parameter at a time:\n\n\n\nCodePen Embed Fallback\n\n\n\nThe default light theme in the demo is this:\n\n\n\n.c-tbl--light {\n  --tbl-bdrs: 0;\n  --tbl-sat: 15%;\n  --tbl-th-bgc: #eee;\n  --tbl-th-bdc: #eee;\n  --tbl-th-c: #555;\n  --tbl-th-tt: normal;\n}\n\n\n\n…where data-param is set to noinlineborder which corresponds to these styles:\n\n\n\n[data-param~=\"noinlineborder\"] thead tr > th {\n  border-block-start-width: 0;\n  border-inline-end-width: 0;\n  border-block-end-width: var(--tbl-bdw);\n  border-inline-start-width: 0;\n}\n\n\n\nI know my data-attribute way of styling and configuring generic components is very opinionated. That’s just how I roll, so please feel free to stick with whatever method you’re most comfortable working with, whether it’s a BEM modifier class or something else.\n\n\n\nThe bottom line is this: embrace :where and :is and the cascade-controlling powers they provide. And, if possible, construct the CSS in such a way that you wind up writing as little new CSS as possible when creating new component variations!\n\n\nCascade Layers\n\n\nThe last cascade-busting tool I want to look at is “Cascade Layers.” At the time of this writing, it’s an experimental feature defined in the CSS Cascading and Inheritance Level 5 specification that you can access in Safari or Chrome by enabling the #enable-cascade-layers flag.\n\n\n\n\n\n\n\nBramus Van Damme sums up the concept nicely:\n\n\n\nThe true power of Cascade Layers comes from its unique position in the Cascade: before Selector Specificity and Order Of Appearance. Because of that we don’t need to worry about the Selector Specificity of the CSS that is used in other Layers, nor about the order in which we load CSS into these Layers — something that will come in very handy for larger teams or when loading in third-party CSS.\n\n\n\nPerhaps even nicer is his illustration showing where Cascade Layers fall in the cascade:\n\n\n\nCredit: Bramus Van Damme\n\n\n\nAt the beginning of this article, I mentioned ITCSS — a way of taming the cascade by specifying the load-order of generic styles, components etc. Cascade Layers allow us to inject a stylesheet at a given location. So a simplified version of this structure in Cascade Layers looks like this:\n\n\n\n@layer generic, components;\n\n\n\nWith this single line, we’ve decided the order of our layers. First come the generic styles, followed by the component-specific ones.\n\n\n\nLet’s pretend that we’re loading our generic styles somewhere much later than our component styles:\n\n\n\n@layer components {\n  body {\n    background-color: lightseagreen;\n  }\n}\n\n/* MUCH, much later... */\n\n@layer generic { \n  body {\n    background-color: tomato;\n  }\n}\n\n\n\nThe background-color will be lightseagreen because our component styles layer is set after the generic styles layer. So, the styles in the components layer “win” even if they are written before the generic layer styles.\n\n\n\nAgain, just another tool for controlling how the CSS cascade applies styles, allowing us more flexibility to organize things logically rather than wrestling with specificity.\n\n\nNow you’re in control!\n\n\nThe whole point here is that the CSS cascade is becoming a lot easier to wrangle, thanks to new features. We saw how the :where and :is pseudo-selectors allows us to control specificity, either by stripping out the specificity of an entire ruleset or taking on the specificity of the most specific argument, respectively. Then we used CSS Custom Properties to override styles without writing a new class to override another. From there, we took a slight detour down data-attribute lane to help us add more flexibility to create component variations merely by adding arguments to the HTML. And, finally, we poked at Cascade Layers which should prove handy for specifying the loading order or styles using @layer.\n\n\n\nIf you leave with only one takeaway from this article, I hope it’s that the CSS cascade is no longer the enemy it’s often made to be. We are gaining the tools to stop fighting it and start leaning into even more.\n\n\n\n\n\n\n\nHeader photo by Stephen Leonardi on Unsplash\n\nDon’t Fight the Cascade, Control It! originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-10T15:22:08.000Z",
      "date_modified": "2022-01-10T15:22:08.000Z",
      "_plugin": {
        "pageFilename": "32d6ac9833c41fd7aded22d0b61984fd492a5561dc4f595d0d683efccf586981.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360711",
      "url": "https://css-tricks.com/typography-links-january-2022/",
      "title": "8 Interesting Typography Links for January 2022",
      "summary": "Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. Typography is one of those things! Here’s a list of typography links to other articles that I’ve been saving up and …\n\n8 Interesting Typography Links for January 2022 originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Every now and then, I find that I&#8217;ve accumulated a bunch of links about various things I find interesting. Typography is one of those things! Here&#8217;s a list of typography links to other articles that I&#8217;ve been saving up and think are worth sharing.</p>\n\n\n\n<span id=\"more-360711\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1646\" height=\"1060\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1646%2C1060&#038;ssl=1\" alt=\"A specimen of the Retail typeface, once of the typography links in the list.\" class=\"wp-image-360777\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?w=1646&amp;ssl=1 1646w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=300%2C193&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1024%2C659&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=768%2C495&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1536%2C989&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-06-at-11.01.40-AM.png?resize=1000%2C644&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>An awesome <a href=\"#retail-font\">new font</a> from OH no Type Company</figcaption></figure>\n\n\n\n<ul class=\"is-style-super-link-list\"><li><a href=\"https://mailchi.mp/252c1a3e328e/your-october-font-of-the-month-190523\" rel=\"noopener\">Output Sans goes variable</a> — David Jonathan Ross&#8217;s <a href=\"https://djr.com/output\" rel=\"noopener\">Output</a> is a real workhorse typeface. He&#8217;s been re-doing it as a variable as part of an effort to get variable fonts &#8220;over the hump&#8221; — that is, away from being thought of as experimental and thought of as practical for day-to-day usage.</li><li><a href=\"https://www.swyx.io/line-lengths/\" rel=\"noopener\">Line Lengths</a> — Shawn says, &#8220;it seems an obvious immediate win to apply&nbsp;<code>max-width: 69ch</code>&nbsp;to your blog content blocks.&#8221; Nice. Oliver Schöndorfer <a href=\"https://pimpmytype.com/line-length-line-height/\" rel=\"noopener\">dug into line length</a> recently too. </li><li><strong><a href=\"https://www.joshwcomeau.com/css/custom-css-reset/#:~:text=Smarter%20line-heights,Here%20it%20is%3A\" rel=\"noopener\">Smarter line-heights with “calc”</a></strong>  — Check out this particular part of Josh&#8217;s custom CSS reset. A potentially cool way to handle <code>line-height</code> for both body copy and headers in one swoop.</li><li><a href=\"https://www.women-in-type.com/\" rel=\"noopener\">Women in Type</a> — Just an incredible website from the University of Reading team. &#8220;These women worked daily on developing and producing typefaces that were, eventually, almost always attributed to male designers. They merit attention as key contributors to the design process of many renowned typefaces that emerged throughout the twentieth century.&#8221;</li><li><a id=\"retail-font\" href=\"https://ohnotype.co/fonts/retail\" rel=\"noopener\">Retail</a> — &#8220;Retail is the result of focussing our energy on the not-too-trendy world of humanist sans.&#8221; Very nice work from OH no Type Company.</li><li><a href=\"https://qodeinteractive.com/magazine/best-google-fonts/\" rel=\"noopener\">Designers’ Pick: Best Google Fonts for 2022</a> — The fact that you can go from zero to implemented custom fonts, for free, in like 30 seconds with Google Fonts is going to keep it the most-used custom font solution likely as long as it exists. Fortunately, the website for it has gotten a lot better, the performance of them has gotten good (and controllable), and as this post on Qode shows, there is a ton of really great new choices available. I like the look of <a href=\"https://fonts.google.com/specimen/Space+Grotesk\" rel=\"noopener\">Space Grotesk</a>. The <a href=\"https://www.typewolf.com/\" rel=\"noopener\">Typewolf</a> newsletter is always covering new good ones. Lately: <a href=\"https://fonts.google.com/specimen/Readex+Pro\" rel=\"noopener\">Readex Pro</a> &amp; <a href=\"https://fonts.google.com/specimen/Spline+Sans\" rel=\"noopener\">Spline Sans</a>.</li><li><a href=\"https://elliotjaystocks.com/blog/google-fonts-knowledge\" rel=\"noopener\">Google Fonts Knowledge</a> — Speaking of Google Fonts! Elliot Jay Stocks worked on this beefy project: &#8220;30+ lessons spread out over three modules —&nbsp;<a href=\"https://fonts.google.com/knowledge/introducing_type\" rel=\"noopener\">“Introducing Type”</a>,&nbsp;<a href=\"https://fonts.google.com/knowledge/choosing_type\" rel=\"noopener\">“Choosing Type”</a>, and&nbsp;<a href=\"https://fonts.google.com/knowledge/using_type\" rel=\"noopener\">“Using Type”</a>&nbsp;— and&nbsp;<a href=\"https://fonts.google.com/knowledge/glossary\" rel=\"noopener\">100+ glossary definitions</a>.&#8221; </li><li><a href=\"https://modern-fluid-typography.vercel.app/\" rel=\"noopener\">Modern fluid typography editor</a> — The output from this generator tool by Adrian Bece is a lot like the <code>clamp()</code> stuff from <a href=\"https://css-tricks.com/consistent-fluidly-scaling-type-and-spacing/\">Andy&#8217;s Consistent, Fluidly Scaling Type and Spacing</a>. Adrian&#8217;s helps you visualize the &#8220;curve&#8221;, but actually <em>this</em> <a href=\"https://www.fluid-type-scale.com/\" rel=\"noopener\">Fluid Type Scale Calculator</a> from <a href=\"https://www.aleksandrhovhannisyan.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Aleksandr Hovhannisyan</a> might be a smidge more useful when setting up a new project as it gives you a full spectrum of custom properties to use. </li></ul>\n\n\n\n<p>Do you have any interesting  typography links from  the past month worth sharing? Drop &#8217;em in the comments!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/typography-links-january-2022/\">8 Interesting Typography Links for January 2022</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Every now and then, I find that I’ve accumulated a bunch of links about various things I find interesting. Typography is one of those things! Here’s a list of typography links to other articles that I’ve been saving up and think are worth sharing.\n\n\n\n\n\n\n\nAn awesome new font from OH no Type Company\n\n\n\nOutput Sans goes variable — David Jonathan Ross’s Output is a real workhorse typeface. He’s been re-doing it as a variable as part of an effort to get variable fonts “over the hump” — that is, away from being thought of as experimental and thought of as practical for day-to-day usage.Line Lengths — Shawn says, “it seems an obvious immediate win to apply max-width: 69ch to your blog content blocks.” Nice. Oliver Schöndorfer dug into line length recently too. Smarter line-heights with “calc”  — Check out this particular part of Josh’s custom CSS reset. A potentially cool way to handle line-height for both body copy and headers in one swoop.Women in Type — Just an incredible website from the University of Reading team. “These women worked daily on developing and producing typefaces that were, eventually, almost always attributed to male designers. They merit attention as key contributors to the design process of many renowned typefaces that emerged throughout the twentieth century.”Retail — “Retail is the result of focussing our energy on the not-too-trendy world of humanist sans.” Very nice work from OH no Type Company.Designers’ Pick: Best Google Fonts for 2022 — The fact that you can go from zero to implemented custom fonts, for free, in like 30 seconds with Google Fonts is going to keep it the most-used custom font solution likely as long as it exists. Fortunately, the website for it has gotten a lot better, the performance of them has gotten good (and controllable), and as this post on Qode shows, there is a ton of really great new choices available. I like the look of Space Grotesk. The Typewolf newsletter is always covering new good ones. Lately: Readex Pro & Spline Sans.Google Fonts Knowledge — Speaking of Google Fonts! Elliot Jay Stocks worked on this beefy project: “30+ lessons spread out over three modules — “Introducing Type”, “Choosing Type”, and “Using Type” — and 100+ glossary definitions.” Modern fluid typography editor — The output from this generator tool by Adrian Bece is a lot like the clamp() stuff from Andy’s Consistent, Fluidly Scaling Type and Spacing. Adrian’s helps you visualize the “curve”, but actually this Fluid Type Scale Calculator from Aleksandr Hovhannisyan might be a smidge more useful when setting up a new project as it gives you a full spectrum of custom properties to use. \n\n\n\nDo you have any interesting  typography links from  the past month worth sharing? Drop ’em in the comments!\n\n8 Interesting Typography Links for January 2022 originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-07T22:31:52.000Z",
      "date_modified": "2022-01-07T22:31:52.000Z",
      "_plugin": {
        "pageFilename": "81720961ea1ef8071e2acbe193d32dd4a5eb3a4b9e54557de984e7c8349e0393.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360113",
      "url": "https://css-tricks.com/adam-argyles-sick-mouse-out-css-hover-effect/",
      "title": "Adam Argyle’s Sick Mouse-Out CSS Hover Effect",
      "summary": "I was killing some time browsing my CodePen feed for some eye candy and didn’t need to go past the first page before spotting a neat CSS hover effect by Adam Argyle.\nI must’ve spent 10 minutes just staring …\n\nAdam Argyle’s Sick Mouse-Out CSS Hover Effect originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I was killing some time browsing my CodePen feed for some eye candy and didn&#8217;t need to go past the first page before spotting a <a href=\"https://codepen.io/argyleink/pen/poEjvpd?editors=1100\" rel=\"noopener\">neat CSS hover effect</a> by <a href=\"https://twitter.com/argyleink\" rel=\"noopener\">Adam Argyle</a>.</p>\n\n\n\n<span id=\"more-360113\"></span>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"adam-cool-link-effect-mp4\" width='500' height='281' src='https://videopress.com/embed/bOm32AjY?cover=1&amp;loop=1&amp;muted=1&amp;persistVolume=0&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>I must&#8217;ve spent 10 minutes just staring at the demo in awe. There&#8217;s something about this that feels so app-like. I think it might be how contextually accurate it is in that the background color slides in from the left, then exits out through the right. It&#8217;s exactly the sort of behavior I&#8217;d expect from a mouse-in, mouse-out sort of interaction. </p>\n\n\n\n<p>Whatever the case, I fired up a fresh pen and went to work recreating it. And it&#8217;s not super complex or anything, but rather a clever use of transitions and transforms paired with proper offsets. Quite elegant! I&#8217;m actually a little embarrassed how long it took me to realize how the mouse-out part works.</p>\n\n\n\n<p>Here&#8217;s how I tackled it, warts and all.</p>\n\n\n<h3 id=\"i-bet-thats-using-a-transition-on-a-background\">&#8220;I bet that&#8217;s using a transition on a <code>background</code>.&#8221;</h3>\n\n\n<p>That was my first thought. Define the background-color, set the  <code>background-size</code> and <code>background-position</code>, then transition the <code>background-position</code>. That&#8217;s how I&#8217;ve seen that &#8220;growing&#8221; background color thing done in the past. I&#8217;ve done that myself on some projects, like this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GXoOdK\" src=\"//codepen.io/anon/embed/preview/GXoOdK?height=350&amp;theme-id=1&amp;slug-hash=GXoOdK&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GXoOdK\" title=\"CodePen Embed GXoOdK\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If I could do the same thing, only from left-to-right, then all that&#8217;s left is the mouse-out, right? Nope. The problem is there&#8217;s nothing that can really make the <code>background-position</code> transition from left-to-right to left-to-right. I could make it do one or the other, but not both.</p>\n\n\n<h3 id=\"maybe-its-a-transform-instead\">&#8220;Maybe it&#8217;s a <code>transform</code> instead.&#8221;</h3>\n\n\n<p>My next attempt was jump into transforms. The <code>transform</code> property provides a bunch of functions that can <code>transition</code> together for slightly more complex movement. For example, the <code>background</code> can &#8220;grow&#8221; or &#8220;shrink&#8221; by changing the element&#8217;s <code>scale()</code>. Or, in this case, just along the x-axis with <code>scaleX()</code>.</p>\n\n\n\n<p>But like I mentioned, there isn&#8217;t a way to isolate the element&#8217;s <code>background</code> to do that. Going from <code>scaleX(0)</code> to <code>scaleX(1)</code> scales the <em>entire</em> element, so that basically squishes the link — content and all — down to nothing, then stretches it back out to its natural size which is a totally different effect. Plus, it means starting with <code>scaleX(0)</code> which hides the whole dang thing by default making it unusable.</p>\n\n\n\n<p>But a pseudo-element could work! It doesn&#8217;t matter if that gets squished or hidden because it isn&#8217;t part of the actual content. Gotta put the <code>background</code> on that instead and position it directly under the link.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  /* Keeps the pseudo-element contained to the element */\n  position: relative;\n}\n\na::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0; /* Logical equivalent to physical offsets */\n  position: absolute;\n  transform: scaleX(0); /* Hide by default */\n  z-index: -1; /* Ensures the link is stacked on top */\n}</code></pre>\n\n\n<h3 id=\"now-i-need-before-to-change-on-hover\">&#8220;Now I need <code>::before</code> to change on hover.&#8221;</h3>\n\n\n<p>I knew I could make <code>::before</code> scale from <code>0</code> to <code>1</code> by chaining it to the link element&#8217;s <code>:hover</code> state.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a:hover::before {\n  transform: scaleX(1)\n}</code></pre>\n\n\n\n<p><em>Nice!</em> I was onto something.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBPxXEJ\" src=\"//codepen.io/anon/embed/preview/qBPxXEJ?height=350&amp;theme-id=1&amp;slug-hash=qBPxXEJ&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBPxXEJ\" title=\"CodePen Embed qBPxXEJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Sprinkle a little <code>transition</code> fairy dust on it and things start to come to life.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"7\"><code markup=\"tt\">a::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLzvoVz\" src=\"//codepen.io/anon/embed/preview/yLzvoVz?height=350&amp;theme-id=1&amp;slug-hash=yLzvoVz&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLzvoVz\" title=\"CodePen Embed yLzvoVz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"hmm-the-transition-moves-in-both-directions\">&#8220;Hmm, the transition moves in <em>both</em> directions.&#8221;</h3>\n\n\n<p>Again, this is where I sorta got stuck. Something in my head just wasn&#8217;t clicking for some reason. As per usual, I ran over to the <a href=\"https://css-tricks.com/almanac/\">CSS-Tricks Almanac</a> to see what property might&#8217;ve slipped my mind.</p>\n\n\n\n<p>Ah, yes. That would be <code><a href=\"https://css-tricks.com/almanac/properties/t/transform-origin/\">transform-origin</a></code>. That allows me to set where the <code>transform</code> starts, which is not totally dissimilar from setting the <code>background-position</code> like I tried earlier. The <code>transform</code> could start from the left instead of its default <code>50% 50%</code> position.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"7\"><code markup=\"tt\">a::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transform-origin: left;\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}</code></pre>\n\n\n\n<p>Yeah, like this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNZMEjp\" src=\"//codepen.io/anon/embed/preview/WNZMEjp?height=350&amp;theme-id=1&amp;slug-hash=WNZMEjp&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNZMEjp\" title=\"CodePen Embed WNZMEjp\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I was already transitioning <code>::before</code> to <code>scaleX(1)</code> on link hover. If I reversed the <code>transform-origin</code> from <code>left</code> to <code>right</code> at the same time, then <em>mayyyybe</em> the highlight goes out the opposite of how it came in when the mouse exits?</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"3\"><code markup=\"tt\">a:hover::before {\n  transform: scaleX(1);\n  transform-origin: right;\n}</code></pre>\n\n\n\n<p>&#x1f91e;</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_jOGZLLw\" src=\"//codepen.io/anon/embed/preview/jOGZLLw?height=350&amp;theme-id=1&amp;slug-hash=jOGZLLw&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed jOGZLLw\" title=\"CodePen Embed jOGZLLw\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Whoops, backwards! Let&#8217;s swap the <code>left</code> and <code>right</code> values. &#x1f643;</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLzvXyL\" src=\"//codepen.io/anon/embed/yLzvXyL?height=350&amp;theme-id=1&amp;slug-hash=yLzvXyL&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLzvXyL\" title=\"CodePen Embed yLzvXyL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Gorgeous. Thank you, Adam, for the inspiration!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/adam-argyles-sick-mouse-out-css-hover-effect/\">Adam Argyle&#8217;s Sick Mouse-Out CSS Hover Effect</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I was killing some time browsing my CodePen feed for some eye candy and didn’t need to go past the first page before spotting a neat CSS hover effect by Adam Argyle.\n\n\n\n\n\n\n\n\n\n\n\n\n\nI must’ve spent 10 minutes just staring at the demo in awe. There’s something about this that feels so app-like. I think it might be how contextually accurate it is in that the background color slides in from the left, then exits out through the right. It’s exactly the sort of behavior I’d expect from a mouse-in, mouse-out sort of interaction. \n\n\n\nWhatever the case, I fired up a fresh pen and went to work recreating it. And it’s not super complex or anything, but rather a clever use of transitions and transforms paired with proper offsets. Quite elegant! I’m actually a little embarrassed how long it took me to realize how the mouse-out part works.\n\n\n\nHere’s how I tackled it, warts and all.\n\n\n“I bet that’s using a transition on a background.”\n\n\nThat was my first thought. Define the background-color, set the  background-size and background-position, then transition the background-position. That’s how I’ve seen that “growing” background color thing done in the past. I’ve done that myself on some projects, like this:\n\n\n\nCodePen Embed Fallback\n\n\n\nIf I could do the same thing, only from left-to-right, then all that’s left is the mouse-out, right? Nope. The problem is there’s nothing that can really make the background-position transition from left-to-right to left-to-right. I could make it do one or the other, but not both.\n\n\n“Maybe it’s a transform instead.”\n\n\nMy next attempt was jump into transforms. The transform property provides a bunch of functions that can transition together for slightly more complex movement. For example, the background can “grow” or “shrink” by changing the element’s scale(). Or, in this case, just along the x-axis with scaleX().\n\n\n\nBut like I mentioned, there isn’t a way to isolate the element’s background to do that. Going from scaleX(0) to scaleX(1) scales the entire element, so that basically squishes the link — content and all — down to nothing, then stretches it back out to its natural size which is a totally different effect. Plus, it means starting with scaleX(0) which hides the whole dang thing by default making it unusable.\n\n\n\nBut a pseudo-element could work! It doesn’t matter if that gets squished or hidden because it isn’t part of the actual content. Gotta put the background on that instead and position it directly under the link.\n\n\n\na {\n  /* Keeps the pseudo-element contained to the element */\n  position: relative;\n}\n\na::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0; /* Logical equivalent to physical offsets */\n  position: absolute;\n  transform: scaleX(0); /* Hide by default */\n  z-index: -1; /* Ensures the link is stacked on top */\n}\n\n\n“Now I need ::before to change on hover.”\n\n\nI knew I could make ::before scale from 0 to 1 by chaining it to the link element’s :hover state.\n\n\n\na:hover::before {\n  transform: scaleX(1)\n}\n\n\n\nNice! I was onto something.\n\n\n\nCodePen Embed Fallback\n\n\n\nSprinkle a little transition fairy dust on it and things start to come to life.\n\n\n\na::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}\n\n\n\nCodePen Embed Fallback\n\n\n“Hmm, the transition moves in both directions.”\n\n\nAgain, this is where I sorta got stuck. Something in my head just wasn’t clicking for some reason. As per usual, I ran over to the CSS-Tricks Almanac to see what property might’ve slipped my mind.\n\n\n\nAh, yes. That would be transform-origin. That allows me to set where the transform starts, which is not totally dissimilar from setting the background-position like I tried earlier. The transform could start from the left instead of its default 50% 50% position.\n\n\n\na::before {\n  background: #ff9800;\n  content: \"\";\n  inset: 0;\n  position: absolute;\n  transform: scaleX(0);\n  transform-origin: left;\n  transition: transform .5s ease-in-out;\n  z-index: -1;\n}\n\n\n\nYeah, like this:\n\n\n\nCodePen Embed Fallback\n\n\n\nI was already transitioning ::before to scaleX(1) on link hover. If I reversed the transform-origin from left to right at the same time, then mayyyybe the highlight goes out the opposite of how it came in when the mouse exits?\n\n\n\na:hover::before {\n  transform: scaleX(1);\n  transform-origin: right;\n}\n\n\n\n🤞\n\n\n\nCodePen Embed Fallback\n\n\n\nWhoops, backwards! Let’s swap the left and right values. 🙃\n\n\n\nCodePen Embed Fallback\n\n\n\nGorgeous. Thank you, Adam, for the inspiration!\n\nAdam Argyle’s Sick Mouse-Out CSS Hover Effect originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-07T20:15:19.000Z",
      "date_modified": "2022-01-07T20:15:19.000Z",
      "_plugin": {
        "pageFilename": "423624b5afe7614d43baa2dd42ce5b5b2d459cc0e5bdf2231f8d8b4f4bbec5de.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359823",
      "url": "https://css-tricks.com/userainbow/",
      "title": "useRainbow()",
      "summary": "I took a break from work and started some small, personal projects (toys). One of those small projects is potato.horse where I keep all of my doodles, visual short stories and jokes. Check it out!\nHowever, this post is not …\n\nuseRainbow() originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I took a break from work and started some small, personal projects (toys). One of those small projects is <a href=\"https://potato.horse\" rel=\"noopener\">potato.horse</a> where I keep all of my doodles, visual short stories and jokes. Check it out!</p>\n\n\n\n<p>However, this post is not about my break from work, other experiments, or the site itself. People seem to like one particular technique I used in the design, notably, the background effect applied that transitions between colors when the user browses the content:</p>\n\n\n\n<span id=\"more-359823\"></span>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"use-rainbow-scroll-animation-mp4\" width='500' height='317' src='https://videopress.com/embed/OBqOLlnC?cover=1&amp;muted=1&amp;persistVolume=0&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>Some asked me how this effect was implemented (including going as far as reading the minified code, which is very flattering).</p>\n\n\n\n<p>So, here&#8217;s a quick gist, followed up with some context:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">export const useRainbowBg = () =>\nuseEffect(() => {\n  const cb = () => {\n    const viewportHeight = window.innerHeight\n    const contentHeight = document.body.getBoundingClientRect().height\n    const viewportsPerRotation = Math.min(\n      3,\n      contentHeight / viewportHeight\n    )\n    const from = 51\n    const progress =\n      window.scrollY / (viewportHeight * viewportsPerRotation)\n    const h = (from + 360 * progress) % 360\n\n    document.body.style.backgroundColor = `hsl(${h}deg, 100%, 50%)`\n  }\n  window.addEventListener('scroll', cb, { passive: true })\n  return () => window.removeEventListener('scroll', cb)\n})</code></pre>\n\n\n\n<p>In short, I map the <em>scroll position</em> into the <em>hue</em> in the HSL color notation. Let&#8217;s break this down.</p>\n\n\n<h3 id=\"color-models\">Color models</h3>\n\n\n<p>There are many ways of describing colors in CSS, with the two most common ones being RGB (left) and HSL (right):</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwLQKyE\" src=\"//codepen.io/anon/embed/RwLQKyE?height=700&amp;theme-id=1&amp;slug-hash=RwLQKyE&amp;default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwLQKyE\" title=\"CodePen Embed RwLQKyE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>RGB is an additive color palette. This means that mixing 100% of red, green and blue produces white, mixing 100% red and 100% green but 0% blue produces yellow, and so on. This is different from, say, using oil paint or the <a rel=\"noreferrer noopener\" href=\"https://en.wikipedia.org/wiki/CMYK_color_model\" target=\"_blank\">CMYK color model</a>, where the resulting tone would be black(-ish)<sup id=\"fn1\"><a href=\"#footnote-1\">1</a></sup>.</p>\n\n\n\n<p>We&#8217;re used to this approach because it&#8217;s easy to describe in code, but specifying colors in terms of hue, saturation and luminosity seems more natural, especially if you come from a design background, or&#8230; you know, are a human being using a human language.</p>\n\n\n\n<p>We&#8217;ve gotten used to RGB as developers, but in spoken language, using it would feel unnatural and confusing. <a rel=\"noreferrer noopener\" href=\"http://facade.photo\" target=\"_blank\">Façade</a> would be very hard to use in RGB.</p>\n\n\n\n<p>On the other hand, HSL can often be much more intuitive to work with. For instance, if I want to make a color slightly colder, I can just move the hue slider a bit towards blue and I should get closer to what I have in mind. With RGB, if we make the color appear colder by including more blue, the resulting tone will be a bit brighter as the blue component contributes to the overall lightness. This means that you&#8217;d have to lower the red and green values to compensate.</p>\n\n\n\n<p>To see how this works in practice, try maxing out the blue color in the example below.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoJQmVa\" src=\"//codepen.io/anon/embed/PoJQmVa?height=850&amp;theme-id=1&amp;slug-hash=PoJQmVa&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoJQmVa\" title=\"CodePen Embed PoJQmVa\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The first thing that stands out is that all tones are shifted towards blue and the overall brightness of the picture is increased. In the case of the effect we&#8217;re discussing, that would be undesirable.</p>\n\n\n\n<p>Now, let&#8217;s try to do the same with the HSL color circle. Drag the slider to the left, by <strong>ca. 90 degrees</strong>:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvrydNY\" src=\"//codepen.io/anon/embed/wvrydNY?height=700&amp;theme-id=1&amp;slug-hash=wvrydNY&amp;default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvrydNY\" title=\"CodePen Embed wvrydNY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>In this scenario, using HSL not only <em>turns Susan into a vampire</em>, but also maintains a similar<sup><a href=\"#footnote-2\">2</a></sup> level of brightness. And that&#8217;s exactly what I&#8217;m looking for.</p>\n\n\n\n<p>So, what I mean by saying this:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>How does this work? In short, I map the <em>scroll position</em> into the <em>hue</em> in the HSL color notation. Rafal, 2 days earlier</p></blockquote>\n\n\n\n<p>&#8230;is that that every time we detect a scroll event, I try to map it to an angle on the hue circle:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GRMQmzx\" src=\"//codepen.io/anon/embed/GRMQmzx?height=750&amp;theme-id=1&amp;slug-hash=GRMQmzx&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GRMQmzx\" title=\"CodePen Embed GRMQmzx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I didn&#8217;t want to start with red as it would make me hungry and the base yellow fits the design a bit better, so I applied a small initial shift—hence <code>const from = 51</code> set as the initial offset.</p>\n\n\n\n<p>And, as far as the basic implementation goes, that&#8217;s it!</p>\n\n\n\n<p>Now, there are three other areas of improvement.</p>\n\n\n<h3 id=\"userainbow-performance\">useRainbow performance</h3>\n\n\n<p>We&#8217;re triggering a repaint on every scroll, so I was a bit worried that older mobile devices, or even some hi-end laptops plugged in to 4k screens might not be able to maintain solid 60fps. But, I&#8217;m happy with the results so far. Using <a href=\"//developers.google.com/web/updates/2016/06/passive-event-listeners\" target=\"_blank\" rel=\"noreferrer noopener\">passive event listeners</a> provided a bit of a boost, especially on mobile.</p>\n\n\n\n<p>If I realize that performance is a problem, especially with more content down the line, I&#8217;ll probably focus on:</p>\n\n\n\n<ul><li>removing the unnecessary call to <code>getBoundingClientRect</code> on every scroll handler call, and</li><li>deferring or throttling background color changes using <code>requestAnimationFrame</code>.</li></ul>\n\n\n\n<p>I expect the first improvement to have some impact, but the benefits of the second one should be negligible.</p>\n\n\n\n<p>Measure before optimizing. Obsessing about the performance only makes sense when issues become noticeable, be it through a drop in framerate or battery impact. Your iPhone Pro has more computing power than many low-end laptops, so <a href=\"https://css-tricks.com/test-your-product-on-a-crappy-laptop/\">it&#8217;s a good idea to test on those devices too</a>. It&#8217;s good to have a crappy old Android phone exacly for that purpose if you can spare a few quid.</p>\n\n\n<h3 id=\"perceptually-uniform-color-spaces\">Perceptually uniform color spaces</h3>\n\n\n<p>You might&#8217;ve noticed that in the previous illustrations some fully saturated colors seemed darker than others. That&#8217;s because the color spaces we normally use when coding don&#8217;t reflect the way the human eye works. I&#8217;ll leave the in-depth explanation to <a rel=\"noreferrer noopener\" href=\"https://programmingdesignsystems.com/color/perceptually-uniform-color-spaces/\" target=\"_blank\">someone much more experienced than me</a>, but suffice to say (gross oversimplification alert!) that, generally, the same amount of red/green/yellow will appear brighter than blue. This means that in some cases the text on the page will be harder to read.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abLEMzW\" src=\"//codepen.io/anon/embed/abLEMzW?height=550&amp;theme-id=1&amp;slug-hash=abLEMzW&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abLEMzW\" title=\"CodePen Embed abLEMzW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p><em>For now</em>, this isn&#8217;t an issue as I&#8217;ve <em>just</em> put this thing online and titles serve a secondary purpose. But there&#8217;s a solution to the problem and it&#8217;s not overly complicated: use a perceptually uniform color space. There&#8217;s a bunch of libraries that do it out of the box, both in JavaScript/TypeScript and CSS/Sass/<code>&lt;pick your CSS flavor here&gt;</code>. <a href=\"https://www.hsluv.org\" rel=\"noopener\"><code>hsluv</code></a> seems like a good starting point.</p>\n\n\n<h3 id=\"accessiblity\">Accessiblity</h3>\n\n\n<p>Note that I&#8217;ll be focusing on the visual effect itself and not discussing the rest of the site (e.g. alt tags, document structure, etc&#8230;). I&#8217;d like to focus on contrast, color blindness and people who rely on <code><a href=\"https://css-tricks.com/revisiting-prefers-reduced-motion-the-reduced-motion-media-query/\">prefers-reduced-motion</a></code>. The site is a living document; there&#8217;s always so much to improve. For instance, contrast can be an issue in a few, non-critical places. I&#8217;m happy to accept feedback and implement it: <a href=\"https://sonnet.io/posts/hi/\" rel=\"nofollow noopener\">hit me up!</a>.</p>\n\n\n<h3 id=\"color-blindness\">color blindness</h3>\n\n\n<p>I wanted to make sure that the effect doesn&#8217;t break the site completely for people with color blindness. So I focused on the most common types: deuteranomaly and protanomaly (red-green color blindness), but also ran wider tests. I used Photoshop and <a href=\"https://github.com/oftheheadland/Colorblindly\" target=\"_blank\" rel=\"noreferrer noopener\">Colorblindly (Chrome extension)</a> for some rudimentary checks.</p>\n\n\n<h3 id=\"prefersreducedmotion\"><code>prefers-reduced-motion</code></h3>\n\n\n<blockquote class=\"wp-block-quote\"><p>The <strong><code>prefers-reduced-motion</code></strong> CSS media feature is used to detect if the user has requested that the system minimize the amount of non-essential motion it uses.</p><cite>—<a rel=\"noreferrer noopener\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\" target=\"_blank\">MDN</a></cite></blockquote>\n\n\n\n<p>This site doesn&#8217;t contain many animations (besides the <em>Little Sausage Angels</em> you&#8217;ll see if you hit &#8220;Share&#8221;), but I was wondering if people who rely on <code>prefers-reduced-motion</code> would like the background color to stay constant.</p>\n\n\n\n<p>The short answer is: I don&#8217;t know. My intuition is that rotating colors don&#8217;t really qualify as motion, but my experience and understanding of the problem is, to say the least, limited. In situations like this, I&#8217;d rather depend on user research than guesses.</p>\n\n\n\n<p>Luckily, the site had its five minutes of fame on Reddit which proved to be a decent opportunity to collect feedback. None of the users brought up an issue with the background effect so far. I&#8217;m also lucky enough to know a bunch of accessibility specialists, such as <a rel=\"noreferrer noopener\" href=\"https://twitter.com/a_sandrina_p\" target=\"_blank\">Sandrina Pereira</a>. Her suggestion was that (a) background animations definitely qualify as motion, and (b) perhaps the effect feels natural because it&#8217;s a direct result of a user interaction.</p>\n\n\n<h3 id=\"summary\">Summary</h3>\n\n\n<p>The late-90s Geocities web felt playful and weird. It was fun in an uninhibited, somewhat less performative, way. I wanted to incorporate some of this look and feel in the site. But still, I didn&#8217;t want to make it feel esoteric to the point where you&#8217;d need to up your hipsterdom-level to 9000 and browse it exclusively throught Netscape 7. All of that, while listening to the new Nirvana <em>Unplugged</em> album.</p>\n\n\n\n<p>I still wanted decent UX on mobile and desktop, and some space for easter eggs (something you can&#8217;t do when living in the strange and abusive relationship with social media we&#8217;ve grown so accustomed to).</p>\n\n\n\n<p>As a kid, I had built six websites before I even got access to the Internet for the first time. Now, after being burned out for three years, even considering changing my job, it was the first time I genuinely enjoyed coding. I forgot how much fun it was!</p>\n\n\n\n<p>Now, go out, pet your cat, and make stuff!</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>P.S. Check out <a rel=\"noreferrer noopener\" href=\"https://www.cameronsworld.net/\" target=\"_blank\">Cameron&#8217;s World</a>.</p>\n\n\n\n<p>P.P.S. The code for interactive diagrams <a href=\"https://github.com/paprikka/use-rainbow-article-examples\" rel=\"noopener\">can be found on GitHub</a>.</p>\n\n\n<h3 id=\"footnotes\">Footnotes</h3>\n\n\n<ol><li><span id=\"footnote-1\">Hence</span> the K component in CMYK meaning &#8220;black.&#8221; Using B would be confusing as it means &#8220;blue&#8221; in other color models. <a href=\"#fn1\">⮑</a></li><li><span id=\"footnote-2\">It&#8217;s</span> not perfect since the perceptual color space differs from what&#8217;s described using RGB/HSL. <a href=\"#fn2\">⮑</a></li></ol>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/userainbow/\">useRainbow()</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I took a break from work and started some small, personal projects (toys). One of those small projects is potato.horse where I keep all of my doodles, visual short stories and jokes. Check it out!\n\n\n\nHowever, this post is not about my break from work, other experiments, or the site itself. People seem to like one particular technique I used in the design, notably, the background effect applied that transitions between colors when the user browses the content:\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome asked me how this effect was implemented (including going as far as reading the minified code, which is very flattering).\n\n\n\nSo, here’s a quick gist, followed up with some context:\n\n\n\nexport const useRainbowBg = () =>\nuseEffect(() => {\n  const cb = () => {\n    const viewportHeight = window.innerHeight\n    const contentHeight = document.body.getBoundingClientRect().height\n    const viewportsPerRotation = Math.min(\n      3,\n      contentHeight / viewportHeight\n    )\n    const from = 51\n    const progress =\n      window.scrollY / (viewportHeight * viewportsPerRotation)\n    const h = (from + 360 * progress) % 360\n\n    document.body.style.backgroundColor = `hsl(${h}deg, 100%, 50%)`\n  }\n  window.addEventListener('scroll', cb, { passive: true })\n  return () => window.removeEventListener('scroll', cb)\n})\n\n\n\nIn short, I map the scroll position into the hue in the HSL color notation. Let’s break this down.\n\n\nColor models\n\n\nThere are many ways of describing colors in CSS, with the two most common ones being RGB (left) and HSL (right):\n\n\n\nCodePen Embed Fallback\n\n\n\nRGB is an additive color palette. This means that mixing 100% of red, green and blue produces white, mixing 100% red and 100% green but 0% blue produces yellow, and so on. This is different from, say, using oil paint or the CMYK color model, where the resulting tone would be black(-ish)1.\n\n\n\nWe’re used to this approach because it’s easy to describe in code, but specifying colors in terms of hue, saturation and luminosity seems more natural, especially if you come from a design background, or… you know, are a human being using a human language.\n\n\n\nWe’ve gotten used to RGB as developers, but in spoken language, using it would feel unnatural and confusing. Façade would be very hard to use in RGB.\n\n\n\nOn the other hand, HSL can often be much more intuitive to work with. For instance, if I want to make a color slightly colder, I can just move the hue slider a bit towards blue and I should get closer to what I have in mind. With RGB, if we make the color appear colder by including more blue, the resulting tone will be a bit brighter as the blue component contributes to the overall lightness. This means that you’d have to lower the red and green values to compensate.\n\n\n\nTo see how this works in practice, try maxing out the blue color in the example below.\n\n\n\nCodePen Embed Fallback\n\n\n\nThe first thing that stands out is that all tones are shifted towards blue and the overall brightness of the picture is increased. In the case of the effect we’re discussing, that would be undesirable.\n\n\n\nNow, let’s try to do the same with the HSL color circle. Drag the slider to the left, by ca. 90 degrees:\n\n\n\nCodePen Embed Fallback\n\n\n\nIn this scenario, using HSL not only turns Susan into a vampire, but also maintains a similar2 level of brightness. And that’s exactly what I’m looking for.\n\n\n\nSo, what I mean by saying this:\n\n\n\nHow does this work? In short, I map the scroll position into the hue in the HSL color notation. Rafal, 2 days earlier\n\n\n\n…is that that every time we detect a scroll event, I try to map it to an angle on the hue circle:\n\n\n\nCodePen Embed Fallback\n\n\n\nI didn’t want to start with red as it would make me hungry and the base yellow fits the design a bit better, so I applied a small initial shift—hence const from = 51 set as the initial offset.\n\n\n\nAnd, as far as the basic implementation goes, that’s it!\n\n\n\nNow, there are three other areas of improvement.\n\n\nuseRainbow performance\n\n\nWe’re triggering a repaint on every scroll, so I was a bit worried that older mobile devices, or even some hi-end laptops plugged in to 4k screens might not be able to maintain solid 60fps. But, I’m happy with the results so far. Using passive event listeners provided a bit of a boost, especially on mobile.\n\n\n\nIf I realize that performance is a problem, especially with more content down the line, I’ll probably focus on:\n\n\n\nremoving the unnecessary call to getBoundingClientRect on every scroll handler call, anddeferring or throttling background color changes using requestAnimationFrame.\n\n\n\nI expect the first improvement to have some impact, but the benefits of the second one should be negligible.\n\n\n\nMeasure before optimizing. Obsessing about the performance only makes sense when issues become noticeable, be it through a drop in framerate or battery impact. Your iPhone Pro has more computing power than many low-end laptops, so it’s a good idea to test on those devices too. It’s good to have a crappy old Android phone exacly for that purpose if you can spare a few quid.\n\n\nPerceptually uniform color spaces\n\n\nYou might’ve noticed that in the previous illustrations some fully saturated colors seemed darker than others. That’s because the color spaces we normally use when coding don’t reflect the way the human eye works. I’ll leave the in-depth explanation to someone much more experienced than me, but suffice to say (gross oversimplification alert!) that, generally, the same amount of red/green/yellow will appear brighter than blue. This means that in some cases the text on the page will be harder to read.\n\n\n\nCodePen Embed Fallback\n\n\n\nFor now, this isn’t an issue as I’ve just put this thing online and titles serve a secondary purpose. But there’s a solution to the problem and it’s not overly complicated: use a perceptually uniform color space. There’s a bunch of libraries that do it out of the box, both in JavaScript/TypeScript and CSS/Sass/<pick your CSS flavor here>. hsluv seems like a good starting point.\n\n\nAccessiblity\n\n\nNote that I’ll be focusing on the visual effect itself and not discussing the rest of the site (e.g. alt tags, document structure, etc…). I’d like to focus on contrast, color blindness and people who rely on prefers-reduced-motion. The site is a living document; there’s always so much to improve. For instance, contrast can be an issue in a few, non-critical places. I’m happy to accept feedback and implement it: hit me up!.\n\n\ncolor blindness\n\n\nI wanted to make sure that the effect doesn’t break the site completely for people with color blindness. So I focused on the most common types: deuteranomaly and protanomaly (red-green color blindness), but also ran wider tests. I used Photoshop and Colorblindly (Chrome extension) for some rudimentary checks.\n\n\nprefers-reduced-motion\n\n\nThe prefers-reduced-motion CSS media feature is used to detect if the user has requested that the system minimize the amount of non-essential motion it uses.—MDN\n\n\n\nThis site doesn’t contain many animations (besides the Little Sausage Angels you’ll see if you hit “Share”), but I was wondering if people who rely on prefers-reduced-motion would like the background color to stay constant.\n\n\n\nThe short answer is: I don’t know. My intuition is that rotating colors don’t really qualify as motion, but my experience and understanding of the problem is, to say the least, limited. In situations like this, I’d rather depend on user research than guesses.\n\n\n\nLuckily, the site had its five minutes of fame on Reddit which proved to be a decent opportunity to collect feedback. None of the users brought up an issue with the background effect so far. I’m also lucky enough to know a bunch of accessibility specialists, such as Sandrina Pereira. Her suggestion was that (a) background animations definitely qualify as motion, and (b) perhaps the effect feels natural because it’s a direct result of a user interaction.\n\n\nSummary\n\n\nThe late-90s Geocities web felt playful and weird. It was fun in an uninhibited, somewhat less performative, way. I wanted to incorporate some of this look and feel in the site. But still, I didn’t want to make it feel esoteric to the point where you’d need to up your hipsterdom-level to 9000 and browse it exclusively throught Netscape 7. All of that, while listening to the new Nirvana Unplugged album.\n\n\n\nI still wanted decent UX on mobile and desktop, and some space for easter eggs (something you can’t do when living in the strange and abusive relationship with social media we’ve grown so accustomed to).\n\n\n\nAs a kid, I had built six websites before I even got access to the Internet for the first time. Now, after being burned out for three years, even considering changing my job, it was the first time I genuinely enjoyed coding. I forgot how much fun it was!\n\n\n\nNow, go out, pet your cat, and make stuff!\n\n\n\n\n\n\n\nP.S. Check out Cameron’s World.\n\n\n\nP.P.S. The code for interactive diagrams can be found on GitHub.\n\n\nFootnotes\n\n\nHence the K component in CMYK meaning “black.” Using B would be confusing as it means “blue” in other color models. ⮑It’s not perfect since the perceptual color space differs from what’s described using RGB/HSL. ⮑\n\nuseRainbow() originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-07T14:59:04.000Z",
      "date_modified": "2022-01-07T14:59:04.000Z",
      "_plugin": {
        "pageFilename": "de046724b3ee498ac2d90f88778a555dd3faddc0be31c34d4c060d6dd25e14fd.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360320",
      "url": "https://css-tricks.com/a-new-container-query-polyfill-that-just-works/",
      "title": "A New Container Query Polyfill That Just Works",
      "summary": "There is an easy-to-use CSS container query polyfill now. You essentially conditionally load it and forget about it. Then write spec-compliant container queries code.\n\nA New Container Query Polyfill That Just Works originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>There is now <a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill\" rel=\"noopener\">a polyfill</a> for <a href=\"https://css-tricks.com/a-cornucopia-of-container-queries/\">Container Queries</a> that behaves as perfectly as a polyfill should:</p>\n\n\n\n<ol><li>You conditionally load it when you detect the browser doesn&#8217;t support Container Queries.</li><li>You write CSS as you normally would, including current-spec-compliant Container Queries syntax code.</li><li>It just works.</li></ol>\n\n\n\n<p>It&#8217;s pretty great to have a container query polyfill that is this easy to use and from Chrome itself, the first-movers as far as early test implementations. Looks like <a href=\"https://twitter.com/dassurma?lang=en\" rel=\"noopener\">Surma</a> put it together — thanks Surma! </p>\n\n\n\n<span id=\"more-360320\"></span>\n\n\n\n<p class=\"is-style-explanation\">There was a Container Query polyfill from Jonathan Neal called <a href=\"https://github.com/jsxtools/cqfill\" rel=\"noopener\">cqfill</a> that predates this. I&#8217;m not sure if it&#8217;s officially deprecated, but it required extra non-spec CSS to work and PostCSS processing, so I&#8217;d consider it deprecated in favor of this newer polyfill.</p>\n\n\n\n<p>Loading the polyfill is like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Support Test\nconst supportsContainerQueries = \"container\" in document.documentElement.style;\n\n// Conditional Import\nif (!supportsContainerQueries) {\n  import(\"https://cdn.skypack.dev/container-query-polyfill\");\n}</code></pre>\n\n\n\n<p>You can pull it from npm or use as a <code>&lt;script&gt;</code>, but this way seems best to me to keep things light and easy.</p>\n\n\n\n<p>Then you&#8217;re free to use the syntax for a container query in CSS. Say you have a weather widget in HTML. You&#8217;ll need an extra wrapper element for your queries. That&#8217;s just the rule: <em>you can&#8217;t query the thing you style</em>. </p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"weather-wrap\">\n  &lt;dl class=\"weather\">\n    &lt;div>\n      &lt;dt>Sunday&lt;/dt>\n      &lt;dd>\n        &lt;b>26°&lt;/b> 7°\n      &lt;/dd>\n    &lt;/div>\n    &lt;div>\n      &lt;dt>Monday&lt;/dt>\n      &lt;dd>\n        &lt;b>34°&lt;/b> 11°\n      &lt;/dd>\n    &lt;/div>\n    &lt;!-- etc -->\n  &lt;/dl>\n&lt;/div></code></pre>\n\n\n\n<p>The wrapper is instantiated as a container:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"2\"><code markup=\"tt\">.weather-wrap {\n  container: inline-size / weather-wrapper;\n  /* Shorthand for: */\n  /* container-type: inline-size; */\n  /* container-name: weather-wrapper; */\n\n  /* For quick testing, do this to get a resize handle on desktop: */\n  /* resize: both; */\n  /* overflow: hidden; */\n}</code></pre>\n\n\n\n<p>Then you write any global styling for that component, as well as container query scoped styles:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4\"><code markup=\"tt\">.weather {\n  display: flex;\n}\n@container weather-wrapper size(max-width: 700px) {\n  .weather {\n    flex-direction: column;\n  }\n}</code></pre>\n\n\n<h3 id=\"container-queries-polyfill-example\">Container Queries polyfill example</h3>\n\n\n<p>Here&#8217;s that slightly more fleshed-out demo of the Container Query polyfill using an actual weather widget:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLzKavz\" src=\"//codepen.io/anon/embed/yLzKavz?height=650&amp;theme-id=1&amp;slug-hash=yLzKavz&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLzKavz\" title=\"CodePen Embed yLzKavz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I first saw this <a href=\"https://www.bram.us/2021/11/26/a-first-look-at-container-query-polyfill-a-polyfill-for-css-container-queries/\" rel=\"noopener\">over on Bramus&#8217; blog</a>, and he&#8217;s got a classic card demo going with this Container Query polyfill. Scroll up and down. You&#8217;ll see a row of bear cards at the top (if your browser window is wide enough), and then similar bear cards in different layout positions below that change into nicer formats when they can, based on the container query.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYxNpeE\" src=\"//codepen.io/anon/embed/LYxNpeE?height=850&amp;theme-id=1&amp;slug-hash=LYxNpeE&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYxNpeE\" title=\"CodePen Embed LYxNpeE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"container-query-polyfill-browser-support\">Container Query polyfill browser support</h3>\n\n\n<p>The polyfill <a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill\" rel=\"noopener\">docs</a> say:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>The polyfill relies on&nbsp;<a href=\"https://caniuse.com/resizeobserver\" rel=\"noopener\"><code>ResizeObserver</code></a>,&nbsp;<a href=\"https://caniuse.com/mutationobserver\" rel=\"noopener\"><code>MutationObserver</code></a>&nbsp;and&nbsp;<a href=\"https://caniuse.com/css-matches-pseudo\" rel=\"noopener\"><code>:is()</code></a>. Therefore, it should work in all modern browsers, specifically Chrome/Edge 88+, Firefox 78+ and Safari 14+.</p><p><a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill#feature-support--limitations\" rel=\"noopener\"></a></p></blockquote>\n\n\n\n<p>There are all sorts of other minor little caveats covered in those docs, including what it does and doesn&#8217;t support. Seems like mostly niche stuff to me — the main/typical use cases are covered.</p>\n\n\n<h3 id=\"a-game-changer\">A game changer?</h3>\n\n\n<p>As I write, we&#8217;ve seen behind-flag support for Container Queries in Chrome, and it is an official spec draft now:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\nhttps://twitter.com/TerribleMia/status/1468632950212341770\n</div></figure>\n\n\n\n<p>That&#8217;s extremely exciting and points heavily toward browsers actually shipping with Container Queries, even if the syntax changes a bit on the way (it already has a number of times). But, of course, we have no idea if/when Container Queries do ship — and when that magical threshold is crossed, we also don&#8217;t know where we can use them without much worry, like we can with flexbox and grid now.</p>\n\n\n\n<p>That &#8220;just use it&#8221; date is probably a decent ways off, but if you&#8217;re into the idea of polyfilling and being careful with progressive enhancement, I&#8217;d say the date for using Container Queries could be right now-ish. Looks to me like the polyfill script comes across the wire at 2.8kb, so it&#8217;s fairly trivial in size for something so important. </p>\n\n\n\n<p>I suspect this polyfill will skyrocket usage of Container Queries in this coming year.</p>\n\n\n<h3 id=\"fouc\">FOUC?</h3>\n\n\n<p>The fact that your styles only correctly apply after a JavaScript file is downloaded and executed puts sites into Flash of Unstyled Content (FOUC) territory. <a href=\"https://cln.sh/k2jDfJ\" rel=\"noopener\">Here&#8217;s a video recording</a> where I can see it on my own demo. I&#8217;m not sure there is a way around this other than intentionally delaying rendering, which is generally considered a no-no. Similar to loading web fonts, FOUC is probably a good thing as it means your content is never hidden or delayed, even if the shifts aren&#8217;t ideal. The FOUC should go away once browser support lands and the polyfill stops loading at all.</p>\n\n\n\n<p>Have fun polyfilling container queries! I&#8217;d love to see more demos  of it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1316\" height=\"1445\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=1316%2C1445&#038;ssl=1\" alt=\"GitHub Repo for the Container Query Polyfill\" class=\"wp-image-360329\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?w=1316&amp;ssl=1 1316w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=273%2C300&amp;ssl=1 273w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=933%2C1024&amp;ssl=1 933w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=768%2C843&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-01-at-7.01.52-AM.png?resize=1000%2C1098&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-new-container-query-polyfill-that-just-works/\">A New Container Query Polyfill That Just Works</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "There is now a polyfill for Container Queries that behaves as perfectly as a polyfill should:\n\n\n\nYou conditionally load it when you detect the browser doesn’t support Container Queries.You write CSS as you normally would, including current-spec-compliant Container Queries syntax code.It just works.\n\n\n\nIt’s pretty great to have a container query polyfill that is this easy to use and from Chrome itself, the first-movers as far as early test implementations. Looks like Surma put it together — thanks Surma! \n\n\n\n\n\n\n\nThere was a Container Query polyfill from Jonathan Neal called cqfill that predates this. I’m not sure if it’s officially deprecated, but it required extra non-spec CSS to work and PostCSS processing, so I’d consider it deprecated in favor of this newer polyfill.\n\n\n\nLoading the polyfill is like this:\n\n\n\n// Support Test\nconst supportsContainerQueries = \"container\" in document.documentElement.style;\n\n// Conditional Import\nif (!supportsContainerQueries) {\n  import(\"https://cdn.skypack.dev/container-query-polyfill\");\n}\n\n\n\nYou can pull it from npm or use as a <script>, but this way seems best to me to keep things light and easy.\n\n\n\nThen you’re free to use the syntax for a container query in CSS. Say you have a weather widget in HTML. You’ll need an extra wrapper element for your queries. That’s just the rule: you can’t query the thing you style. \n\n\n\n<div class=\"weather-wrap\">\n  <dl class=\"weather\">\n    <div>\n      <dt>Sunday</dt>\n      <dd>\n        <b>26°</b> 7°\n      </dd>\n    </div>\n    <div>\n      <dt>Monday</dt>\n      <dd>\n        <b>34°</b> 11°\n      </dd>\n    </div>\n    <!-- etc -->\n  </dl>\n</div>\n\n\n\nThe wrapper is instantiated as a container:\n\n\n\n.weather-wrap {\n  container: inline-size / weather-wrapper;\n  /* Shorthand for: */\n  /* container-type: inline-size; */\n  /* container-name: weather-wrapper; */\n\n  /* For quick testing, do this to get a resize handle on desktop: */\n  /* resize: both; */\n  /* overflow: hidden; */\n}\n\n\n\nThen you write any global styling for that component, as well as container query scoped styles:\n\n\n\n.weather {\n  display: flex;\n}\n@container weather-wrapper size(max-width: 700px) {\n  .weather {\n    flex-direction: column;\n  }\n}\n\n\nContainer Queries polyfill example\n\n\nHere’s that slightly more fleshed-out demo of the Container Query polyfill using an actual weather widget:\n\n\n\nCodePen Embed Fallback\n\n\n\nI first saw this over on Bramus’ blog, and he’s got a classic card demo going with this Container Query polyfill. Scroll up and down. You’ll see a row of bear cards at the top (if your browser window is wide enough), and then similar bear cards in different layout positions below that change into nicer formats when they can, based on the container query.\n\n\n\nCodePen Embed Fallback\n\n\nContainer Query polyfill browser support\n\n\nThe polyfill docs say:\n\n\n\nThe polyfill relies on ResizeObserver, MutationObserver and :is(). Therefore, it should work in all modern browsers, specifically Chrome/Edge 88+, Firefox 78+ and Safari 14+.\n\n\n\nThere are all sorts of other minor little caveats covered in those docs, including what it does and doesn’t support. Seems like mostly niche stuff to me — the main/typical use cases are covered.\n\n\nA game changer?\n\n\nAs I write, we’ve seen behind-flag support for Container Queries in Chrome, and it is an official spec draft now:\n\n\n\n\nhttps://twitter.com/TerribleMia/status/1468632950212341770\n\n\n\n\nThat’s extremely exciting and points heavily toward browsers actually shipping with Container Queries, even if the syntax changes a bit on the way (it already has a number of times). But, of course, we have no idea if/when Container Queries do ship — and when that magical threshold is crossed, we also don’t know where we can use them without much worry, like we can with flexbox and grid now.\n\n\n\nThat “just use it” date is probably a decent ways off, but if you’re into the idea of polyfilling and being careful with progressive enhancement, I’d say the date for using Container Queries could be right now-ish. Looks to me like the polyfill script comes across the wire at 2.8kb, so it’s fairly trivial in size for something so important. \n\n\n\nI suspect this polyfill will skyrocket usage of Container Queries in this coming year.\n\n\nFOUC?\n\n\nThe fact that your styles only correctly apply after a JavaScript file is downloaded and executed puts sites into Flash of Unstyled Content (FOUC) territory. Here’s a video recording where I can see it on my own demo. I’m not sure there is a way around this other than intentionally delaying rendering, which is generally considered a no-no. Similar to loading web fonts, FOUC is probably a good thing as it means your content is never hidden or delayed, even if the shifts aren’t ideal. The FOUC should go away once browser support lands and the polyfill stops loading at all.\n\n\n\nHave fun polyfilling container queries! I’d love to see more demos  of it.\n\n\n\n\n\n\n\n\n\nA New Container Query Polyfill That Just Works originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-06T22:28:46.000Z",
      "date_modified": "2022-01-06T22:28:46.000Z",
      "_plugin": {
        "pageFilename": "4e07bb563a335f8238d683050129d3671ebccd8f9d5adc5a556c2445b2635c52.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=358917",
      "url": "https://css-tricks.com/fixed-background-effect/",
      "title": "The Search For a Fixed Background Effect With Inline Images",
      "summary": "I was working on a client project a few days ago and wanted to create a certain effect on an <img>. See, background images can do the effect I was looking for somewhat easily with background-attachment: fixed;. With …\n\nThe Search For a Fixed Background Effect With Inline Images originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I was working on a client project a few days ago and wanted to create a certain effect on an <code>&lt;img&gt;</code>. See, background images can do the effect I was looking for somewhat easily with <code>background-attachment: fixed;</code>. With that in place, a background image stays in place—even when the page scrolls. It isn’t used all that often, so the effect can look unusual and striking, especially when used sparingly.</p>\n\n\n\n<span id=\"more-358917\"></span>\n\n\n<h2 class=\"simpletoc-title\">Table of Contents</h2><ul class=\"simpletoc\">\n<li>\n<a  href=\"#why-use-ltimggt-instead-of-backgroundimage\">Why use &lt;img&gt; instead of background-image?</a></li><li>\n<a  href=\"#1-using-css-backgroundimage\">1. Using CSS background-image</a></li><li>\n<a  href=\"#2-using-the-clippath-trick-on-an-inline-image\">2. Using the clip-path trick on an inline image</a></li><li>\n<a  href=\"#is-there-something-better\">Is there something better?</a></li></ul>\n\n\n<p>It took me some time to figure out how to achieve the same effect only with an inline image, rather than a CSS background image. This is a video of the effect in action:</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"the20mysterious20css20property-mp4\" width='500' height='313' src='https://videopress.com/embed/2ciWn57o?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p class=\"is-style-explanation\">The exact code for the above demo is <a href=\"https://github.com/lazaralex98/nate-davis/blob/main/components/HomePage/BenefitsWithAttachementEffect.jsx\" rel=\"noopener\">available in this Git repo</a>. Just note that it’s a Next.js project. We’ll get to a CodePen example with raw HTML in a bit.</p>\n\n\n<h3 id=\"why-use-ltimggt-instead-of-backgroundimage\">Why use <code>&lt;img&gt;</code> instead of <code>background-image</code>?</h3>\n\n\n<p>The are a number of reasons I wanted this for my project:</p>\n\n\n\n<ul><li>It’s easier to lazy load (e.g. <code>&lt;img loading=\"lazy\"… &gt;</code>.</li><li>It provides better SEO (not to mention accessibility), thanks to <code>alt</code> text.</li><li>It’s possible to <a href=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/#using-srcset\" data-type=\"URL\" data-id=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/#using-srcset\">use <code>srcset</code>/<code>sizes</code></a> to improve the loading performance.</li><li>It’s possible to <a href=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/#using-picture\">use the <code>&lt;picture&gt;</code> tag</a> to pick the best image size and format for the user’s browser.</li><li>It allows users to download save the image (without resorting to DevTools).</li></ul>\n\n\n\n<p>Overall, it’s better to use the image tag where you can, particularly if the image could be considered content and not decoration. So, I wound up landing on a technique that uses CSS <code>clip-path</code>. We’ll get to that in a moment, right after we first look at the <code>background-image</code> method for a nice side-by-side comparison of both approaches.</p>\n\n\n<h3 id=\"1-using-css-backgroundimage\">1. Using CSS <code>background-image</code></h3>\n\n\n<p>This is the “original” way to pull off a fixed scrolling effect. Here’s the CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero-section {\n  background-image: url(\"nice_bg_image.jpg\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center; \n  background-attachment: fixed;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLoWoeR\" src=\"//codepen.io/anon/embed/yLoWoeR?height=550&amp;theme-id=1&amp;slug-hash=yLoWoeR&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLoWoeR\" title=\"CodePen Embed yLoWoeR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But as we just saw, this approach isn’t ideal for some situations because it relies on the CSS <code>background-image</code> property to call and load the image. That means the image is technically not considered content—and thus unrecognized by screen readers. If we’re working with an image that is part of the content, then we really ought to make it accessible so it is consumed like content rather than decoration.</p>\n\n\n\n<p>Otherwise, this technique works well, but only <em>if the image spans the whole width of the viewport and/or is centered</em>. If you have an image on the right or left side of the page like the example, you’ll run into a whole number of positioning issues because <code>background-position</code> is relative to the center of the viewport.</p>\n\n\n\n<p>Fixing it requires a few media queries to make sure it is positioned properly on all devices.</p>\n\n\n<h3 id=\"2-using-the-clippath-trick-on-an-inline-image\">2. Using the <code>clip-path</code> trick on an inline image</h3>\n\n\n<p><a href=\"https://stackoverflow.com/questions/33550450/how-to-use-css-background-attachment-in-img-tag/68466386#68466386\" rel=\"noopener\">Someone on StackOverflow</a> shared this <code>clip-path</code> trick and it gets the job done well. You also get to keep using the<code>&lt;img&gt;</code> tag, which, as we covered above, might be advantageous in some circumstances, especially where an image is part of the content rather than pure decoration.</p>\n\n\n\n<p>Here’s the trick:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4,8,9\"><code markup=\"tt\">.image-container {\n  position: relative;\n  height: 200px;\n  clip-path: inset(0);\n}\n\n.image {\n  object-fit: cover;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}</code></pre>\n\n\n\n<p>Check it out in action:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWvYVwG\" src=\"//codepen.io/anon/embed/NWvYVwG?height=450&amp;theme-id=1&amp;slug-hash=NWvYVwG&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWvYVwG\" title=\"CodePen Embed NWvYVwG\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now, before we rush out and plaster this snippet everywhere, it has its own set of downsides. For example, the code feels <em>a bit lengthy</em> to me for such a simple effect. But, even more important is the fact that working with <code>clip-path</code> comes with some implications as well. For one, I can’t just slap a <code>border-radius: 10px;</code> in there like I did in the earlier example to round the image’s corners. That won’t work—it requires making rounded corners from the clipping path itself.</p>\n\n\n\n<p>Another example: I don’t know how to position the image <em>within</em> the <code>clip-path</code>. Again, this might be a matter of knowing <code>clip-path</code> really well and drawing it where you need to, or cropping the image itself ahead of time as needed.</p>\n\n\n<h3 id=\"is-there-something-better\">Is there something better?</h3>\n\n\n<p>Personally, I gave up on using the fixed scrolling effect on inline images and am back to using a CSS background image—which I know is kind of limiting.</p>\n\n\n\n<p>Have you ever tried pulling this off, particularly with an inline image, and managed it well? I’d love to hear!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/fixed-background-effect/\">The Search For a Fixed Background Effect With Inline Images</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I was working on a client project a few days ago and wanted to create a certain effect on an <img>. See, background images can do the effect I was looking for somewhat easily with background-attachment: fixed;. With that in place, a background image stays in place—even when the page scrolls. It isn’t used all that often, so the effect can look unusual and striking, especially when used sparingly.\n\n\n\n\n\n\nTable of Contents\n\nWhy use <img> instead of background-image?\n1. Using CSS background-image\n2. Using the clip-path trick on an inline image\nIs there something better?\n\n\nIt took me some time to figure out how to achieve the same effect only with an inline image, rather than a CSS background image. This is a video of the effect in action:\n\n\n\n\n\n\n\n\n\nThe exact code for the above demo is available in this Git repo. Just note that it’s a Next.js project. We’ll get to a CodePen example with raw HTML in a bit.\n\n\nWhy use <img> instead of background-image?\n\n\nThe are a number of reasons I wanted this for my project:\n\n\n\nIt’s easier to lazy load (e.g. <img loading=\"lazy\"… >.It provides better SEO (not to mention accessibility), thanks to alt text.It’s possible to use srcset/sizes to improve the loading performance.It’s possible to use the <picture> tag to pick the best image size and format for the user’s browser.It allows users to download save the image (without resorting to DevTools).\n\n\n\nOverall, it’s better to use the image tag where you can, particularly if the image could be considered content and not decoration. So, I wound up landing on a technique that uses CSS clip-path. We’ll get to that in a moment, right after we first look at the background-image method for a nice side-by-side comparison of both approaches.\n\n\n1. Using CSS background-image\n\n\nThis is the “original” way to pull off a fixed scrolling effect. Here’s the CSS:\n\n\n\n.hero-section {\n  background-image: url(\"nice_bg_image.jpg\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center; \n  background-attachment: fixed;\n}\n\n\n\nCodePen Embed Fallback\n\n\n\nBut as we just saw, this approach isn’t ideal for some situations because it relies on the CSS background-image property to call and load the image. That means the image is technically not considered content—and thus unrecognized by screen readers. If we’re working with an image that is part of the content, then we really ought to make it accessible so it is consumed like content rather than decoration.\n\n\n\nOtherwise, this technique works well, but only if the image spans the whole width of the viewport and/or is centered. If you have an image on the right or left side of the page like the example, you’ll run into a whole number of positioning issues because background-position is relative to the center of the viewport.\n\n\n\nFixing it requires a few media queries to make sure it is positioned properly on all devices.\n\n\n2. Using the clip-path trick on an inline image\n\n\nSomeone on StackOverflow shared this clip-path trick and it gets the job done well. You also get to keep using the<img> tag, which, as we covered above, might be advantageous in some circumstances, especially where an image is part of the content rather than pure decoration.\n\n\n\nHere’s the trick:\n\n\n\n.image-container {\n  position: relative;\n  height: 200px;\n  clip-path: inset(0);\n}\n\n.image {\n  object-fit: cover;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n\n\n\nCheck it out in action:\n\n\n\nCodePen Embed Fallback\n\n\n\nNow, before we rush out and plaster this snippet everywhere, it has its own set of downsides. For example, the code feels a bit lengthy to me for such a simple effect. But, even more important is the fact that working with clip-path comes with some implications as well. For one, I can’t just slap a border-radius: 10px; in there like I did in the earlier example to round the image’s corners. That won’t work—it requires making rounded corners from the clipping path itself.\n\n\n\nAnother example: I don’t know how to position the image within the clip-path. Again, this might be a matter of knowing clip-path really well and drawing it where you need to, or cropping the image itself ahead of time as needed.\n\n\nIs there something better?\n\n\nPersonally, I gave up on using the fixed scrolling effect on inline images and am back to using a CSS background image—which I know is kind of limiting.\n\n\n\nHave you ever tried pulling this off, particularly with an inline image, and managed it well? I’d love to hear!\n\nThe Search For a Fixed Background Effect With Inline Images originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-06T15:58:55.000Z",
      "date_modified": "2022-01-06T15:58:55.000Z",
      "_plugin": {
        "pageFilename": "d9f6a133a48dc5fbb33cdde55c552a6448143c34d9637b6c397398a65bdc6872.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359736",
      "url": "https://css-tricks.com/notes-on-josh-comeaus-custom-css-reset/",
      "title": "Notes on Josh Comeau’s Custom CSS Reset",
      "summary": "We recently talked with Elad Shechter on his new CSS reset, and shortly after that Josh Comeau blogged his. \nWe’re in something of a new era of CSS resets where… you kind of don’t need one? There isn’t …\n\nNotes on Josh Comeau’s Custom CSS Reset originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>We recently talked with Elad Shechter on <a href=\"https://css-tricks.com/an-interview-with-elad-shechter-on-the-new-css-reset/\">his new CSS reset</a>, and shortly after that Josh Comeau <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/\" rel=\"noopener\">blogged his</a>. </p>\n\n\n\n<p>We&#8217;re in something of a new era of CSS resets where&#8230; you kind of don&#8217;t need one? There isn&#8217;t <em>that</em> many major differences between browsers on default styling, and by the time you&#8217;re off and running styling stuff, you&#8217;ve probably steamrolled things into place. And so perhaps &#8220;modern&#8221; CSS resets are more of a collection of opinionated default styles that do useful things that you want on all your new projects because, well, that&#8217;s how you roll. </p>\n\n\n\n<span id=\"more-359736\"></span>\n\n\n\n<p>Looking through Josh&#8217;s choices, that&#8217;s what it seems like to me: a collection of things that aren&#8217;t particularly opinionated about design, but <em>assist</em> the design by being things that pretty much any project will want.</p>\n\n\n\n<p>I&#8217;m gonna <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/#the-css-reset\" rel=\"noopener\">go through it</a> and toss out &#x1f525; flamin&#8217; hot opinions. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">*, *::before, *::after {\n  box-sizing: border-box;\n}</code></pre>\n\n\n\n<p>Heck yes. We used to consider this <a href=\"https://css-tricks.com/international-box-sizing-awareness-day/\">a global holiday</a> &#8217;round here. Although, with more and more layout being handled by grid and flexbox, I&#8217;m feeling like this is slightly less useful these days. When you&#8217;re setting up a layout with <code>fr</code> units and flexin&#8217; stuff, the <code>box-sizing</code> model doesn&#8217;t come into play all that much, even when <code>padding</code> and <code>border</code> are involved. But hey, I still prefer it to be in place. I do think if it goes into a CSS reset it should <a href=\"https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/\">use the inheritance model</a> though, as it&#8217;s easier to undo on a component that way. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">* {\n  margin: 0;\n}</code></pre>\n\n\n\n<p>This is basically why the CSS-Tricks logo &#8220;star&#8221; exists. I used to love this little snippet in my CSS resets. There was a period where it started to feel heavy-handed, but I think I&#8217;m back to liking it. I like how explicit you have to be when applying any margin at all. Personally, I&#8217;d rock <code>padding: 0;</code> too, as list elements tend to have some padding pushing them around. If you&#8217;re nuking spacing stuff, may as well nuke it all.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html, body {\n  height: 100%;\n}</code></pre>\n\n\n\n<p>Probably a good plan. Josh says &#8220;Allow percentage-based heights in the application,&#8221; which I can&#8217;t say comes up much in my day-today, but what it does is stuff like the body background not filling the space the way you might expect it to.</p>\n\n\n\n<p>Too bad <code>body { height: 100vh; }</code> isn&#8217;t enough here, but I feel like that&#8217;s not as reliable for some reason I can&#8217;t think of right now. <a href=\"https://css-tricks.com/css-fix-for-100vh-in-mobile-webkit/\">Maybe something to do with the footer navigation in iOS Safari?</a></p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}</code></pre>\n\n\n\n<p>I can&#8217;t get into the <code>-webkit-font-smoothing: antialiased;</code> thing. I think it tends to make type dramatically thin and I don&#8217;t love it. I don&#8217;t mind it as a tool, but I wouldn&#8217;t globally apply it on all my projects. </p>\n\n\n\n<p>I also generally like to put global typographic <em>sizing</em> stuff on the <code>html</code> selector instead, just because the &#8220;root&#8221; part of <code>rem</code> implies the <code>&lt;html&gt;</code> element — not the <code>&lt;body&gt;</code> — and I like sizing stuff in <code>rem</code> and then adjusting the root <code>font-size</code> at the root level in media queries.</p>\n\n\n\n<p>That <code>1.5</code> value feels like a good default <code>line-height</code> (more of a 1.4 guy myself, but I&#8217;d rather go up than down). But as soon as it&#8217;s set, I feel magnetically pulled into reducing it for heading elements where it&#8217;s <em>always</em> too much. That could happen via <code>h1, h2, h3</code> kinda selectors (maybe <code>h4</code>&#8211;<code>h6</code> don&#8217;t need it), but Josh has <a href=\"https://www.joshwcomeau.com/css/custom-css-reset/#digit-tweaking-line-height\" rel=\"noopener\">some CSS trickery at work</a> with this snippet that didn&#8217;t make it into the final reset:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">* {\n  line-height: calc(1em + 0.5rem);\n}</code></pre>\n\n\n\n<p>That&#8217;s clever in how the <code>0.5rem</code> goes a long way for small type, but isn&#8217;t as big of an influence for large type. I could see trying that on a greenfield project. Prior art here is by Jesús Ricarte in <a href=\"https://kittygiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/\" rel=\"noopener\">&#8220;Using calc to figure out optimal line-height.&#8221;</a> </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">img, picture, video, canvas, svg {\n  display: block;\n  max-width: 100%;\n}</code></pre>\n\n\n\n<p>Good move for a CSS reset. The <code>block</code> display type there prevents those annoying <code>line-height</code> gaps that always kill me. And you almost never want any of these media blocks to be wider than the parent. I somehow don&#8217;t think <code>picture</code> is necessary, though, as it&#8217;s not really a style-able block? Could be wrong. I&#8217;d probably toss <code>iframe</code> and <code>object</code> in there as well.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">p, h1, h2, h3, h4, h5, h6 {\n  overflow-wrap: break-word;\n}</code></pre>\n\n\n\n<p>Good move for sure. It&#8217;s bad news when a long word (<a href=\"https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/\">like a URL</a>) forces an element wide and borks a layout. I tend to chuck this on something — like <code>article</code> or <code>.text-content</code> or something — and let it cascade into that whole area (which would also catch text that happens to be contained in an improper element), but I don&#8217;t mind seeing it on specific text elements.</p>\n\n\n\n<p>If doing that, you probably wanna chuck <code>li, dl, dt, blockquote</code> on that chain. Despite having attempted to research this several times (<a href=\"https://codepen.io/chriscoyier/pen/qoLLpN\" rel=\"noopener\">here&#8217;s a playground</a>), I still don&#8217;t 100% know what the right cocktail of line-wrapping properties is best to use. There is <code>word-break: break-word;</code> that I think is basically the same thing. And I think it&#8217;s generally best to use <code>hyphens: auto;</code> too&#8230; right??</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#root, #__next {\n  isolation: isolate;\n}</code></pre>\n\n\n\n<p>I don&#8217;t quite understand what&#8217;s happening here. I get that this is a React/Next thing where you mount the app to these roots, and I get that it makes a stacking context, I just don&#8217;t get why it&#8217;s specifically useful to <em>have</em> that stacking context at this level. At the same time, I also don&#8217;t see any particular problem with it.</p>\n\n\n\n<p>All in all — pretty cool! I always enjoy seeing what other people use (and go so far as to suggest) for CSS resets.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/notes-on-josh-comeaus-custom-css-reset/\">Notes on Josh Comeau&#8217;s Custom CSS Reset</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "We recently talked with Elad Shechter on his new CSS reset, and shortly after that Josh Comeau blogged his. \n\n\n\nWe’re in something of a new era of CSS resets where… you kind of don’t need one? There isn’t that many major differences between browsers on default styling, and by the time you’re off and running styling stuff, you’ve probably steamrolled things into place. And so perhaps “modern” CSS resets are more of a collection of opinionated default styles that do useful things that you want on all your new projects because, well, that’s how you roll. \n\n\n\n\n\n\n\nLooking through Josh’s choices, that’s what it seems like to me: a collection of things that aren’t particularly opinionated about design, but assist the design by being things that pretty much any project will want.\n\n\n\nI’m gonna go through it and toss out 🔥 flamin’ hot opinions. \n\n\n\n*, *::before, *::after {\n  box-sizing: border-box;\n}\n\n\n\nHeck yes. We used to consider this a global holiday ’round here. Although, with more and more layout being handled by grid and flexbox, I’m feeling like this is slightly less useful these days. When you’re setting up a layout with fr units and flexin’ stuff, the box-sizing model doesn’t come into play all that much, even when padding and border are involved. But hey, I still prefer it to be in place. I do think if it goes into a CSS reset it should use the inheritance model though, as it’s easier to undo on a component that way. \n\n\n\n* {\n  margin: 0;\n}\n\n\n\nThis is basically why the CSS-Tricks logo “star” exists. I used to love this little snippet in my CSS resets. There was a period where it started to feel heavy-handed, but I think I’m back to liking it. I like how explicit you have to be when applying any margin at all. Personally, I’d rock padding: 0; too, as list elements tend to have some padding pushing them around. If you’re nuking spacing stuff, may as well nuke it all.\n\n\n\nhtml, body {\n  height: 100%;\n}\n\n\n\nProbably a good plan. Josh says “Allow percentage-based heights in the application,” which I can’t say comes up much in my day-today, but what it does is stuff like the body background not filling the space the way you might expect it to.\n\n\n\nToo bad body { height: 100vh; } isn’t enough here, but I feel like that’s not as reliable for some reason I can’t think of right now. Maybe something to do with the footer navigation in iOS Safari?\n\n\n\nbody {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}\n\n\n\nI can’t get into the -webkit-font-smoothing: antialiased; thing. I think it tends to make type dramatically thin and I don’t love it. I don’t mind it as a tool, but I wouldn’t globally apply it on all my projects. \n\n\n\nI also generally like to put global typographic sizing stuff on the html selector instead, just because the “root” part of rem implies the <html> element — not the <body> — and I like sizing stuff in rem and then adjusting the root font-size at the root level in media queries.\n\n\n\nThat 1.5 value feels like a good default line-height (more of a 1.4 guy myself, but I’d rather go up than down). But as soon as it’s set, I feel magnetically pulled into reducing it for heading elements where it’s always too much. That could happen via h1, h2, h3 kinda selectors (maybe h4–h6 don’t need it), but Josh has some CSS trickery at work with this snippet that didn’t make it into the final reset:\n\n\n\n* {\n  line-height: calc(1em + 0.5rem);\n}\n\n\n\nThat’s clever in how the 0.5rem goes a long way for small type, but isn’t as big of an influence for large type. I could see trying that on a greenfield project. Prior art here is by Jesús Ricarte in “Using calc to figure out optimal line-height.” \n\n\n\nimg, picture, video, canvas, svg {\n  display: block;\n  max-width: 100%;\n}\n\n\n\nGood move for a CSS reset. The block display type there prevents those annoying line-height gaps that always kill me. And you almost never want any of these media blocks to be wider than the parent. I somehow don’t think picture is necessary, though, as it’s not really a style-able block? Could be wrong. I’d probably toss iframe and object in there as well.\n\n\n\np, h1, h2, h3, h4, h5, h6 {\n  overflow-wrap: break-word;\n}\n\n\n\nGood move for sure. It’s bad news when a long word (like a URL) forces an element wide and borks a layout. I tend to chuck this on something — like article or .text-content or something — and let it cascade into that whole area (which would also catch text that happens to be contained in an improper element), but I don’t mind seeing it on specific text elements.\n\n\n\nIf doing that, you probably wanna chuck li, dl, dt, blockquote on that chain. Despite having attempted to research this several times (here’s a playground), I still don’t 100% know what the right cocktail of line-wrapping properties is best to use. There is word-break: break-word; that I think is basically the same thing. And I think it’s generally best to use hyphens: auto; too… right??\n\n\n\n#root, #__next {\n  isolation: isolate;\n}\n\n\n\nI don’t quite understand what’s happening here. I get that this is a React/Next thing where you mount the app to these roots, and I get that it makes a stacking context, I just don’t get why it’s specifically useful to have that stacking context at this level. At the same time, I also don’t see any particular problem with it.\n\n\n\nAll in all — pretty cool! I always enjoy seeing what other people use (and go so far as to suggest) for CSS resets.\n\nNotes on Josh Comeau’s Custom CSS Reset originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-05T21:22:45.000Z",
      "date_modified": "2022-01-05T21:22:45.000Z",
      "_plugin": {
        "pageFilename": "2f4ffcac4810619a6ec97ce1d0370897db7e3544128170b0bbc997ea70045693.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360239",
      "url": "https://css-tricks.com/make-a-component-multiple-frameworks-in-a-monorepo/",
      "title": "How to Make a Component That Supports Multiple Frameworks in a Monorepo",
      "summary": "Your mission — should you decide to accept it — is to build a Button component in four frameworks, but, only use one button.css file!\nThis idea is very important to me. I’ve been working on a component library called …\n\nHow to Make a Component That Supports Multiple Frameworks in a Monorepo originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Your mission — should you decide to accept it — is to build a Button component in four frameworks, but, only use one <code>button.css</code> file!</p>\n\n\n\n<p>This idea is very important to me. I’ve been working on a component library called <a href=\"https://agnosticui.com/\" rel=\"noopener\">AgnosticUI</a> where the purpose is building UI components that aren’t tied to any one particular JavaScript framework. AgnosticUI works in React, Vue 3, Angular, and Svelte. So that’s exactly what we’ll do today in this article: <strong>build a button component that works across all these frameworks.</strong></p>\n\n\n\n<span id=\"more-360239\"></span>\n\n\n\n<p class=\"is-style-explanation\">The source code for this article is <a href=\"https://github.com/roblevintennis/guest-posts/tree/the-little-button-that-could-series\" rel=\"noopener\">available on GitHub</a> on the <code>the-little-button-that-could-series</code> branch.</p>\n\n\n<h3 id=\"table-of-contents\">Table of contents</h3>\n\n\n<ul class=\"is-style-almanac-list\"><li><a href=\"#why-a-monorepo\">Why a monorepo?</a></li><li><a href=\"#setting-up\">Setting up</a></li><li><a href=\"#framework-specific-workspaces\">Framework-specific workspaces</a></li><li><a href=\"#what-have-we-just-done\">What have we just done?</a></li><li><a href=\"#finishing-touches\">Finishing touches</a></li><li><a href=\"#updating-each-component-to-take-a-mode-property\">Updating each component to take a&nbsp;<code>mode</code>&nbsp;property</a></li><li><a href=\"#code-complete\">Code complete</a></li><li><a href=\"#homework\">Homework</a></li><li><a href=\"#potential-pitfalls\">Potential pitfalls</a></li><li><a href=\"#conclusion\">Conclusion</a></li></ul>\n\n\n<h3 id=\"why-a-monorepo\">Why a monorepo?</h3>\n\n\n<p>We&#8217;re going to set up a tiny Yarn workspaces-based monorepo. Why? Chris actually has a <a href=\"https://css-tricks.com/monorepo/#advantages-of-the-monorepo-for-us\">nice outline of the benefits in another post</a>. But here’s my own biased list of benefits that I feel are relevant for our little buttons endeavor:</p>\n\n\n<h4 id=\"coupling\">Coupling</h4>\n\n\n<p>We’re trying to build a single button component that uses just one <code>button.css</code> file across multiple frameworks. So, by nature, there’s some purposeful <a href=\"https://en.wikipedia.org/wiki/Coupling_(computer_programming)#:~:text=In%20software%20engineering%252C%20coupling%20is,of%20the%20relationships%20between%20modules.\" rel=\"noopener\">coupling</a> going on between the various framework implementations and the single-source-of-truth CSS file. A monorepo setup provides a convenient structure that facilitates copying our single <code>button.css</code> component into various framework-based projects.</p>\n\n\n<h4 id=\"workflow\">Workflow</h4>\n\n\n<p>Let’s say the button needs a tweak — like the &#8220;focus-ring&#8221; implementation, or we screwed up the use of <code>aria</code> in the component templates. Ideally, we’d like to correct things in one place rather than making individual fixes in separate repositories.</p>\n\n\n<h4 id=\"testing\">Testing</h4>\n\n\n<p>We want the convenience of firing up all four button implementations at the same time for testing. As this sort of project grows, it’s safe to assume there will be more proper testing. In AgnosticUI, for example, I&#8217;m currently using Storybook and often kick off all the framework Storybooks, or run snapshot testing across the entire monorepo.</p>\n\n\n\n<p>I like what <a href=\"https://leoloso.com/\" rel=\"noopener\">Leonardo Losoviz</a> has to say <a href=\"https://css-tricks.com/from-a-single-repo-to-multi-repos-to-monorepo-to-multi-monorepo/#issues-with-the-monorepo\">about the monorepo approach</a>. (And it just so happens to align with with everything we’ve talked about so far.)</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>I believe the monorepo is particularly useful when all packages are coded in the same programming language, tightly coupled, and relying on the same tooling.</p></blockquote>\n\n\n<h3 id=\"setting-up\">Setting up</h3>\n\n\n<p>Time to dive into code — start by creating a top-level directory on the command-line to house the project and then <code>cd</code> into it. (Can’t think of a name? <code>mkdir buttons &amp;&amp; cd buttons</code> will work fine.)</p>\n\n\n\n<p>First off, let’s initialize the project:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$ yarn init\nyarn init v1.22.15\nquestion name (articles): littlebutton\nquestion version (1.0.0): \nquestion description: my little button project\nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json</code></pre>\n\n\n\n<p>That gives us a <code>package.json</code> file with something like this:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"my little button project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\"\n}</code></pre>\n\n\n<h4 id=\"creating-the-baseline-workspace\">Creating the baseline workspace</h4>\n\n\n<p>We can set the first one up with this command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">mkdir -p ./littlebutton-css</code></pre>\n\n\n\n<p>Next, we need to add the two following lines to the monorepo’s top-level <code>package.json</code> file so that we keep the monorepo itself private. It also declares our workspaces:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// ...\n\"private\": true,\n\"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\", \"littlebutton-css\"]</code></pre>\n\n\n\n<p>Now descend into the <code>littlebutton-css</code> directory. We&#8217;ll again want to generate a <code>package.json</code> with <code>yarn init</code>. Since we&#8217;ve named our directory <code>littlebutton-css</code> (the same as how we specified it in our <code>workspaces</code> in <code>package.json</code>) we can simply hit the <code>Return</code> key and accept all the prompts:</p>\n\n\n\n<pre rel=\"Teminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$ cd ./littlebutton-css &amp;&amp; yarn init\nyarn init v1.22.15\nquestion name (littlebutton-css): \nquestion version (1.0.0): \nquestion description: \nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json</code></pre>\n\n\n\n<p>At this point, the directory structure should look like this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">├── littlebutton-css\n│   └── package.json\n└── package.json</code></pre>\n\n\n\n<p>We&#8217;ve only created the CSS package workspace at this point as we&#8217;ll be generating our framework implementations with tools like <code>vite</code> which, in turn, generate a <code>package.json</code> and project directory for you. We will have to remember that the name we choose for these generated projects must match the name we’ve specified in the <code>package.json</code> for our earlier <code>workspaces</code> to work.</p>\n\n\n<h4 id=\"baseline-html-amp-css\">Baseline HTML &amp; CSS</h4>\n\n\n<p>Let&#8217;s stay in the <code>./littlebutton-css</code> workspace and create our simple button component using vanilla HTML and CSS files.</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">touch index.html ./css/button.css</code></pre>\n\n\n\n<p>Now our project directory should look like this:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">littlebutton-css\n├── css\n│   └── button.css\n├── index.html\n└── package.json</code></pre>\n\n\n\n<p>Let&#8217;s go ahead and connect some dots with some boilerplate HTML in <code>./index.html</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!doctype html>\n&lt;html lang=\"en\">\n&lt;head>\n  &lt;meta charset=\"utf-8\">\n  &lt;title>The Little Button That Could&lt;/title>\n  &lt;meta name=\"description\" content=\"\">\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  &lt;link rel=\"stylesheet\" href=\"css/button.css\">\n&lt;/head>\n&lt;body>\n  &lt;main>\n    &lt;button class=\"btn\">Go&lt;/button>\n  &lt;/main>\n&lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>And, just so we have something visual to test, we can add a little color in <code>./css/button.css</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  color: hotpink;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"612\" height=\"487\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640956693026_image.png?resize=612%2C487&#038;ssl=1\" alt=\"A mostly unstyled button with hot-pink text from the monorepo framework.\" class=\"wp-image-360244\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640956693026_image.png?w=612&amp;ssl=1 612w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640956693026_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now open up that <code>index.html</code> page in the browser. If you see an ugly generic button with <code>hotpink</code> text&#8230; success!</p>\n\n\n<h3 id=\"frameworkspecific-workspaces\">Framework-specific workspaces</h3>\n\n\n<p>So what we just accomplished is the baseline for our button component. What we want to do now is abstract it a bit so it’s extensible for other frameworks and such. For example, what if we want to use the button in a React project? We’re going to need workspaces in our monorepo for each one. We’ll start with React, then follow suit for Vue 3, Angular, and Svelte.</p>\n\n\n<h4 id=\"react\">React</h4>\n\n\n<p>We&#8217;re going to generate our React project using <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">vite</a>, a very lightweight and blazingly fast builder. Be forewarned that if you attempt to do this with <code>create-react-app</code>, there&#8217;s a very good chance you will run into conflicts later with <code>react-scripts</code> and conflicting webpack or Babel configurations from other frameworks, like Angular.</p>\n\n\n\n<p>To get our React workspace going, let’s go back into the terminal and <code>cd</code> back up to the top-level directory. From there, we’ll use <code>vite</code> to initialize a new project — let’s call it <code>littlebutton-react</code> — and, of course, we’ll select <code>react</code> as the framework and variant at the prompts:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">$ yarn create vite\nyarn create v1.22.15\n[1/4] &#x1f50d;  Resolving packages...\n[2/4] &#x1f69a;  Fetching packages...\n[3/4] &#x1f517;  Linking dependencies...\n[4/4] &#x1f528;  Building fresh packages...\n\nsuccess Installed \"create-vite@2.6.6\" with binaries:\n      - create-vite\n      - cva\n&#x2714; Project name: … littlebutton-react\n&#x2714; Select a framework: › react\n&#x2714; Select a variant: › react\n\nScaffolding project in /Users/roblevin/workspace/opensource/guest-posts/articles/littlebutton-react...\n\nDone. Now run:\n\n  cd littlebutton-react\n  yarn\n  yarn dev\n\n&#x2728;  Done in 17.90s.</code></pre>\n\n\n\n<p>We initialize the React app with these commands next:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">cd littlebutton-react\nyarn\nyarn dev</code></pre>\n\n\n\n<p>With React installed and verified, let&#8217;s replace the contents of <code>src/App.jsx</code> to house our button with the following code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"./App.css\";\n\nconst Button = () => {\n  return &lt;button>Go&lt;/button>;\n};\n\nfunction App() {\n  return (\n    &lt;div className=\"App\">\n      &lt;Button />\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Now we&#8217;re going to write a small Node script that copies our <code>littlebutton-css/css/button.css</code> right into our React application for us. This step is probably the most interesting one to me because it&#8217;s both magical and ugly at the same time. It&#8217;s magical because it means our React button component is truly deriving its styles from the same CSS written in the baseline project. It&#8217;s ugly because, well, we are reaching up out of one workspace and grabbing a file from another. ¯\\_(ツ)_/¯</p>\n\n\n\n<p>Add the following little Node script to <code>littlebutton-react/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/button.css\", css, \"utf8\");</code></pre>\n\n\n\n<p>Let&#8217;s place a <code>node</code> command to run that in a <code>package.json</code> script that happens before the <code>dev</code> script in <code>littlebutton-react/package.json</code>. We&#8217;ll add a <code>syncStyles</code> and update the <code>dev</code> to call <code>syncStyles</code> before <code>vite</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles &amp;&amp; vite\",</code></pre>\n\n\n\n<p>Now, anytime we fire up our React application with <code>yarn dev</code>, we&#8217;ll first be copying the CSS file over. In essence, we&#8217;re &#8220;forcing&#8221; ourselves to not diverge from the CSS package&#8217;s <code>button.css</code> in our React button.</p>\n\n\n\n<p>But we want to also leverage <a href=\"https://github.com/css-modules/css-modules\" rel=\"noopener\">CSS Modules</a> to prevent name collisions and global CSS leakage, so we have one more step to do to get that wired up (from the same <code>littlebutton-react</code> directory):</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">touch src/button.module.css</code></pre>\n\n\n\n<p>Next, add the following to the new <code>src/button.module.css</code> file:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  composes: btn from './button.css';\n}</code></pre>\n\n\n\n<p>I find <code>composes</code> (also known as <a href=\"https://github.com/css-modules/css-modules#composition\" rel=\"noopener\">composition</a>) to be one of the coolest features of CSS Modules. In a nutshell, we&#8217;re copying our HTML/CSS version of <code>button.css</code> over wholesale then composing from our one <code>.btn</code> style rule.</p>\n\n\n\n<p>With that, we can go back to our <code>src/App.jsx</code> and import the CSS Modules <code>styles</code> into our React component with this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = () => {\n  return &lt;button className={styles.btn}>Go&lt;/button>;\n};\n\nfunction App() {\n  return (\n    &lt;div className=\"App\">\n      &lt;Button />\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Whew! Let&#8217;s pause and try to run our React app again:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">yarn dev</code></pre>\n\n\n\n<p>If all went well, you should see that same generic button, but with <code>hotpink</code> text. Before we move on to the next framework, let&#8217;s move back up to our top-level monorepo directory and update its <code>package.json</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"toy project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\"],\n  \"scripts\": {\n    \"start:react\": \"yarn workspace littlebutton-react dev\"\n  }\n}</code></pre>\n\n\n\n<p>Run the <code>yarn</code> command from the top-level directory to get the monorepo-hoisted dependencies installed.</p>\n\n\n\n<p>The only change we’ve made to this <code>package.json</code> is a new <code>scripts</code> section with a single script to start the React app. By adding <code>start:react</code> we can now run <code>yarn start:react</code> from our top-level directory and it will fire up the project we just built in <code>./littlebutton-react</code> without the need for <code>cd</code>&#8216;ing — super convenient!</p>\n\n\n\n<p>We&#8217;ll tackle Vue and Svelte next. It turns out that we can take a pretty similar approach for these as they both use <a href=\"https://css-tricks.com/video-screencasts/182-babys-first-vue-sfc/\">single file components</a> (SFC). Basically, we get to mix HTML, CSS, and JavaScript all into one single file. Whether you like the SFC approach or not, it&#8217;s certainly adequate enough for building out presentational or primitive UI components.</p>\n\n\n<h4 id=\"vue\">Vue</h4>\n\n\n<p>Following the steps from <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noopener\">vite’s scaffolding docs</a> we&#8217;ll run the following command from the monorepo’s top-level directory to initialize a Vue app:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">yarn create vite littlebutton-vue --template vue</code></pre>\n\n\n\n<p>This generates scaffolding with some provided instructions to run the starter Vue app:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">cd littlebutton-vue\nyarn\nyarn dev</code></pre>\n\n\n\n<p>This should fire up a starter page in the browser with some heading like &#8220;Hello Vue 3 + Vite.&#8221; From here, we can update <code>src/App.vue</code> to:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template>\n  &lt;div id=\"app\">\n    &lt;Button class=\"btn\">Go&lt;/Button>\n  &lt;/div>\n&lt;/template>\n\n&lt;script>\nimport Button from './components/Button.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    Button\n  }\n}\n&lt;/script></code></pre>\n\n\n\n<p>And we&#8217;ll replace any <code>src/components/*</code> with <code>src/components/Button.vue</code>:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;template>\n  &lt;button :class=\"classes\">&lt;slot />&lt;/button>\n&lt;/template>\n\n&lt;script>\nexport default {\n  name: 'Button',\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n      }\n    }\n  }\n}\n&lt;/script>\n\n&lt;style module>\n.btn {\n  color: slateblue;\n}\n&lt;/style></code></pre>\n\n\n\n<p>Let&#8217;s break this down a bit:</p>\n\n\n\n<ul><li><code>:class=\"classes\"</code> is using Vue&#8217;s binding to call the computed <code>classes</code> method.</li><li>The <code>classes</code> method, in turn, is utilizing <a href=\"https://vue-loader.vuejs.org/guide/css-modules.html#usage\" rel=\"noopener\">CSS Modules in Vue</a> with the <code>this.$style.btn</code> syntax which will use styles contained in a <code>&lt;style module&gt;</code> tag.</li></ul>\n\n\n\n<p>For now, we&#8217;re hardcoding <code>color: slateblue</code> simply to test that things are working properly within the component. Try firing up the app again with <code>yarn dev</code>. If you see the button with our declared test color, then it&#8217;s working!</p>\n\n\n\n<p>Now we&#8217;re going to write a Node script that copies our <code>littlebutton-css/css/button.css</code> into our <code>Button.vue</code> file similar to the one we did for the React implementation. As mentioned, this component is a SFC so we&#8217;re going to have to do this a little differently using a simple <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" rel=\"noopener\">regular expression</a>.</p>\n\n\n\n<p>Add the following little Node.js script to <code>littlebutton-vue/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst vue = fs.readFileSync(\"./src/components/Button.vue\", \"utf8\");\n// Take everything between the starting and closing style tag and replace\nconst styleRegex = /&lt;style module>([\\s\\S]*?)&lt;\\/style>/;\nlet withSynchronizedStyles = vue.replace(styleRegex, `&lt;style module>\\n${css}\\n&lt;/style>`);\nfs.writeFileSync(\"./src/components/Button.vue\", withSynchronizedStyles, \"utf8\");</code></pre>\n\n\n\n<p>There&#8217;s a bit more complexity in this script, but using <code>replace</code> to copy text between opening and closing <code>style</code> tags via regex isn&#8217;t too bad.</p>\n\n\n\n<p>Now let’s add the following two scripts to the <code>scripts</code> clause in the <code>littlebutton-vue/package.json</code> file:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles &amp;&amp; vite\",</code></pre>\n\n\n\n<p>Now run <code>yarn syncStyles</code> and look at <code>./src/components/Button.vue</code> again. You should see that our style module gets replaced with this:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;style module>\n.btn {\n  color: hotpink;\n}\n&lt;/style></code></pre>\n\n\n\n<p>Run the Vue app again with <code>yarn dev</code> and verify you get the expected results — yes, a button with hotpink text. If so, we’re good to move on to the next framework workspace!</p>\n\n\n<h4 id=\"svelte\">Svelte</h4>\n\n\n<p>Per the <a href=\"https://svelte.dev/\" rel=\"noopener\">Svelte docs</a>, we should kick off our <code>littlebutton-svelte</code> workspace with the following, starting from the monorepo&#8217;s top-level directory:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npx degit sveltejs/template littlebutton-svelte\ncd littlebutton-svelte\nyarn &amp;&amp; yarn dev</code></pre>\n\n\n\n<p>Confirm you can hit the &#8220;Hello World&#8221; start page at <code>http://localhost:5000</code>. Then, update <code>littlebutton-svelte/src/App.svelte</code>:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  import Button from './Button.svelte';\n&lt;/script>\n&lt;main>\n  &lt;Button>Go&lt;/Button>\n&lt;/main></code></pre>\n\n\n\n<p>Also, in <code>littlebutton-svelte/src/main.js</code>, we want to remove the <code>name</code> prop so it looks like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import App from './App.svelte';\n\nconst app = new App({\n  target: document.body\n});\n\nexport default app;</code></pre>\n\n\n\n<p>And finally, add <code>littlebutton-svelte/src/Button.svelte</code> with the following:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button class=\"btn\">\n  &lt;slot>&lt;/slot>\n&lt;/button>\n\n&lt;script>\n&lt;/script>\n\n&lt;style>\n  .btn {\n    color: saddlebrown;\n  }\n&lt;/style></code></pre>\n\n\n\n<p>One last thing: Svelte appears to name our app: <code>\"name\": \"svelte-app\"</code> in the <code>package.json</code>. Change that to <code>\"name\": \"littlebutton-svelte\"</code> so it&#8217;s consistent with the <code>workspaces</code> name in our top-level <code>package.json</code> file.</p>\n\n\n\n<p>Once again, we can copy our baseline <code>littlebutton-css/css/button.css</code> into our <code>Button.svelte</code>. As mentioned, this component is a SFC, so we&#8217;re going to have to do this using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" rel=\"noopener\">regular expression</a>. Add the following Node script to <code>littlebutton-svelte/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst svelte = fs.readFileSync(\"./src/Button.svelte\", \"utf8\");\nconst styleRegex = /&lt;style>([\\s\\S]*?)&lt;\\/style>/;\nlet withSynchronizedStyles = svelte.replace(styleRegex, `&lt;style>\\n${css}\\n&lt;/style>`);\nfs.writeFileSync(\"./src/Button.svelte\", withSynchronizedStyles, \"utf8\");</code></pre>\n\n\n\n<p>This is super similar to the copy script we used with Vue, isn&#8217;t it? We&#8217;ll add similar scripts to our <code>package.json</code> script:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"dev\": \"yarn syncStyles &amp;&amp; rollup -c -w\",\n\"syncStyles\": \"node copystyles.js\",</code></pre>\n\n\n\n<p>Now run <code>yarn syncStyles &amp;&amp; yarn dev</code>. If all is good, we once again should see a button with <code>hotpink</code> text.</p>\n\n\n\n<p>If this is starting to feel repetitive, all I have to say is <em>welcome to my world</em>. What I&#8217;m showing you here is essentially the same process I&#8217;ve been using to build my <a href=\"https://github.com/AgnosticUI/agnosticui\" rel=\"noopener\">AgnosticUI</a> project!</p>\n\n\n<h4 id=\"angular\">Angular</h4>\n\n\n<p>You probably know the drill by now. From the monorepo&#8217;s top-level directory, install Angular and <a href=\"https://angular.io/guide/setup-local\" rel=\"noopener\">create an Angular app</a>. If we were creating a full-blown UI library we&#8217;d likely use <code>ng generate library</code> or even <code><a href=\"https://nx.dev/l/a/tutorial/08-create-libs\" rel=\"noopener\">nx</a></code>. But to keep things as straightforward as possible we&#8217;ll set up a boilerplate Angular app as follows:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">npm install -g @angular/cli ### unless you already have installed\nng new littlebutton-angular ### choose no for routing and CSS\n? Would you like to add Angular routing? (y/N) N\n❯ CSS \n  SCSS   [ https://sass-lang.com/documentation/syntax#scss ] \n  Sass   [ https://sass-lang.com/documentation/syntax#the-indented-syntax ] \n  Less   [ http://lesscss.org ]\n\ncd littlebutton-angular &amp;&amp; ng serve --open</code></pre>\n\n\n\n<p>With the Angular setup confirmed, let&#8217;s update some files. <code>cd littlebutton-angular</code>, delete the <code>src/app/app.component.spec.ts</code> file, and add a button component in <code>src/components/button.component.ts</code>, like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Component } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {}</code></pre>\n\n\n\n<p>Add the following to <code>src/components/button.component.html</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button class=\"btn\">Go&lt;/button></code></pre>\n\n\n\n<p>And put this in the <code>src/components/button.component.css</code> file for testing:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  color: fuchsia;\n}</code></pre>\n\n\n\n<p>In <code>src/app/app.module.ts</code>:</p>\n\n\n\n<pre rel=\"TypeScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { ButtonComponent } from '../components/button.component';\n\n@NgModule({\n  declarations: [AppComponent, ButtonComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}</code></pre>\n\n\n\n<p>Next, replace <code>src/app/app.component.ts</code> with:</p>\n\n\n\n<pre rel=\"TypeScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {}</code></pre>\n\n\n\n<p>Then, replace <code>src/app/app.component.html</code> with:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;main>\n  &lt;little-button>Go&lt;/little-button>\n&lt;/main></code></pre>\n\n\n\n<p>With that, let&#8217;s run <code>yarn start</code> and verify our button with <code>fuchsia</code> text renders as expected.</p>\n\n\n\n<p>Again, we want to copy over the CSS from our baseline workspace. We can do that by adding this to <code>littlebutton-angular/copystyles.js</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/components/button.component.css\", css, \"utf8\");</code></pre>\n\n\n\n<p>Angular is nice in that it uses <code><a href=\"https://angular.io/guide/view-encapsulation\" rel=\"noopener\">ViewEncapsulation</a></code> that defaults to to <code>emulate</code> which mimics, <a href=\"https://baldur.gitbook.io/angular/angular/angular-components-overview/view-encapsulation\" rel=\"noopener\">according to the docs</a>,</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>[&#8230;] the behavior of shadow DOM by preprocessing (and renaming) the CSS code to effectively scope the CSS to the component&#8217;s view.</p></blockquote>\n\n\n\n<p>This basically means we can literally copy over <code>button.css</code> and use it as-is.</p>\n\n\n\n<p>Finally, update the <code>package.json</code> file by adding these two lines in the <code>scripts</code> section:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"start\": \"yarn syncStyles &amp;&amp; ng serve\",\n\"syncStyles\": \"node copystyles.js\",</code></pre>\n\n\n\n<p>With that, we can now run <code>yarn start</code> once more and verify our button text color (which was <code>fuchsia</code>) is now <code>hotpink</code>.</p>\n\n\n<h3 id=\"what-have-we-just-done\">What have we just done?</h3>\n\n\n<p>Let&#8217;s take a break from coding and think about the bigger picture and what we&#8217;ve just done. Basically, we&#8217;ve set up a system where any changes to our CSS package&#8217;s <code>button.css</code> will get copied over into all the framework implementations as a result of our <code>copystyles.js</code> Node scripts. Further, we&#8217;ve incorporated idiomatic conventions for each of the frameworks:</p>\n\n\n\n<ul><li><code>SFC</code> for Vue and Svelte</li><li><code>CSS Modules</code> for React (and Vue within the SFC <code>&lt;style module&gt;</code> setup)</li><li><code>ViewEncapsulation</code> for Angular</li></ul>\n\n\n\n<p>Of course I state the obvious that these aren&#8217;t the only ways to do CSS in each of the above frameworks (e.g. CSS-in-JS is a popular choice), but they are certainly accepted practices and are working quite well for our greater goal — to have a single CSS source of truth to drive all framework implementations.</p>\n\n\n\n<p>If, for example, our button was in use and our design team decided we wanted to change from <code>4px</code> to <code>3px</code> <code>border-radius</code>, we could update the one file, and any separate implementations would stay synced.</p>\n\n\n\n<p>This is compelling if you have a polyglot team of developers that enjoy working in multiple frameworks, or, say an offshore team (that&#8217;s 3× productive in Angular) that&#8217;s being tasked to build a back-office application, but your flagship product is built in React. Or, you&#8217;re building an interim admin console and you&#8217;d love to experiment with using Vue or Svelte. You get the picture.</p>\n\n\n<h3 id=\"finishing-touches\">Finishing touches</h3>\n\n\n<p>OK, so we have the monorepo architecture in a really good spot. But there’s a few things we can do to make it even more useful as far as the developer experience goes.</p>\n\n\n<h4 id=\"better-start-scripts\">Better start scripts</h4>\n\n\n<p>Let&#8217;s move back up to our top-level monorepo directory and update its <code>package.json</code> <code>scripts</code> section with the following so we can kick any framework implementation without <code>cd</code>&#8216;ing:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// ...\n\"scripts\": {\n  \"start:react\": \"yarn workspace littlebutton-react dev\",\n  \"start:vue\": \"yarn workspace littlebutton-vue dev \",\n  \"start:svelte\": \"yarn workspace littlebutton-svelte dev\",\n  \"start:angular\": \"yarn workspace littlebutton-angular start\"\n},</code></pre>\n\n\n<h4 id=\"better-baseline-styles\">Better baseline styles</h4>\n\n\n<p>We can also provide a better set of baseline styles for the button so it starts from a nice, neutral place. Here’s what I did in the <code>littlebutton-css/css/button.css</code> file.</p>\n\n\n\n<details >\n  <summary>\n          View Full Snippet      </summary>\n  \n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  --button-dark: #333;\n  --button-line-height: 1.25rem;\n  --button-font-size: 1rem;\n  --button-light: #e9e9e9;\n  --button-transition-duration: 200ms;\n  --button-font-stack:\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    \"Segoe UI\",\n    Roboto,\n    Ubuntu,\n    \"Helvetica Neue\",\n    sans-serif;\n\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n  user-select: none;\n  appearance: none;\n  cursor: pointer;\n  box-sizing: border-box;\n  transition-property: all;\n  transition-duration: var(--button-transition-duration);\n  color: var(--button-dark);\n  background-color: var(--button-light);\n  border-color: var(--button-light);\n  border-style: solid;\n  border-width: 1px;\n  font-family: var(--button-font-stack);\n  font-weight: 400;\n  font-size: var(--button-font-size);\n  line-height: var(--button-line-height);\n  padding-block-start: 0.5rem;\n  padding-block-end: 0.5rem;\n  padding-inline-start: 0.75rem;\n  padding-inline-end: 0.75rem;\n  text-decoration: none;\n  text-align: center;\n}\n\n/* Respect users reduced motion preferences */\n@media (prefers-reduced-motion) {\n  .btn {\n    transition-duration: 0.001ms !important;\n  }\n}</code></pre>\n\n\n\n<p></p>\n\n\n</details>\n\n\n<p>Let’s test this out! Fire up each of the four framework implementations with the new and improved start scripts and confirm the styling changes are in effect.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"612\" height=\"487\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957723344_image.png?resize=612%2C487&#038;ssl=1\" alt=\"Neutral (gray) styled button from the monorepo framework\" class=\"wp-image-360271\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957723344_image.png?w=612&amp;ssl=1 612w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957723344_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>One CSS file update proliferated to four frameworks — pretty cool, eh!?</p>\n\n\n<h4 id=\"set-a-primary-mode\">Set a primary mode</h4>\n\n\n<p>We&#8217;re going to add a <code>mode</code> prop to each of our button’s and implement <code>primary</code> mode next. A primary button could be any color but we&#8217;ll go with a shade of green for the background and white text. Again, in the baseline stylesheet:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn {\n  --button-primary: #14775d;\n  --button-primary-color: #fff;\n  /* ... */\n}</code></pre>\n\n\n\n<p>Then, just before the <code>@media (prefers-reduced-motion)</code> query, add the following <code>btn-primary</code> to the same baseline stylesheet:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btn-primary {\n  background-color: var(--button-primary);\n  border-color: var(--button-primary);\n  color: var(--button-primary-color);\n}</code></pre>\n\n\n\n<p>There we go! Some developer conveniences and better baseline styles!</p>\n\n\n<h3 id=\"updating-each-component-to-take-a-mode-property\">Updating each component to take a <code>mode</code> property</h3>\n\n\n<p>Now that we&#8217;ve added our new <code>primary</code> mode represented by the <code>.btn-primary</code> class, we want to sync the styles for all four framework implementations. So, let&#8217;s add some more <code>package.json</code> scripts to our top level <code>scripts</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"sync:react\": \"yarn workspace littlebutton-react syncStyles\",\n\"sync:vue\": \"yarn workspace littlebutton-vue syncStyles\",\n\"sync:svelte\": \"yarn workspace littlebutton-svelte syncStyles\",\n\"sync:angular\": \"yarn workspace littlebutton-angular syncStyles\"</code></pre>\n\n\n\n<p>Be sure to respect JSON&#8217;s comma rules! Depending on where you place these lines within your <code>scripts: {...}</code>, you’ll want to make sure there are no missing or trailing commas.</p>\n\n\n\n<p>Go ahead and run the following to fully synchronize the styles:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">yarn sync:angular &amp;&amp; yarn sync:react &amp;&amp; yarn sync:vue &amp;&amp; yarn sync:svelte</code></pre>\n\n\n\n<p>Running this doesn’t change anything because we haven&#8217;t applied the primary class yet, but you should at least see the CSS has been copied over if you go look at the framework&#8217;s button component CSS.</p>\n\n\n<h4 id=\"react\">React</h4>\n\n\n<p>If you haven&#8217;t already, double-check that the updated CSS got copied over into <code>littlebutton-react/src/button.css</code>. If not, you can run <code>yarn syncStyles</code>. Note that if you forget to run <code>yarn syncStyles</code> our <code>dev</code> script will do this for us when we next start the application anyway:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"dev\": \"yarn syncStyles &amp;&amp; vite\",</code></pre>\n\n\n\n<p>For our React implementation, we additionally need to add a <em>composed</em> CSS Modules class in <code>littlebutton-react/src/button.module.css</code> that is composed from the new <code>.btn-primary</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.btnPrimary {\n  composes: btn-primary from './button.css';\n}</code></pre>\n\n\n\n<p>We&#8217;ll also update <code>littlebutton-react/src/App.jsx</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = ({ mode }) => {\n  const primaryClass = mode ? styles[`btn${mode.charAt(0).toUpperCase()}${mode.slice(1)}`] : '';\n  const classes = primaryClass ? `${styles.btn} ${primaryClass}` : styles.btn;\n  return &lt;button className={classes}>Go&lt;/button>;\n};\n\nfunction App() {\n  return (\n    &lt;div className=\"App\">\n      &lt;Button mode=\"primary\" />\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre>\n\n\n\n<p>Fire up the React app with <code>yarn start:react</code> from the top-level directory. If all goes well, you should now see your green primary button.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"612\" height=\"487\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957382007_image.png?resize=612%2C487&#038;ssl=1\" alt=\"A dark green button with white text positioning in the center of the screen.\" class=\"wp-image-360276\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957382007_image.png?w=612&amp;ssl=1 612w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_C89F243BD0E7903817542029274D9942FECD679F520F0AC0548818BADB08FAD8_1640957382007_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>As a note, I&#8217;m keeping the Button component in <code>App.jsx</code> for brevity. Feel free to tease out the Button component into its own file if that bothers you.</p>\n\n\n<h4 id=\"vue\">Vue</h4>\n\n\n<p>Again, double-check that the button styles were copied over and, if not, run <code>yarn syncStyles</code>.</p>\n\n\n\n<p>Next, make the following changes to the <code>&lt;script&gt;</code> section of <code>littlebutton-vue/src/components/Button.vue</code>:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\nexport default {\n  name: 'Button',\n  props: {\n    mode: {\n      type: String,\n      required: false,\n      default: '',\n      validator: (value) => {\n        const isValid = ['primary'].includes(value);\n        if (!isValid) {\n          console.warn(`Allowed types for Button are primary`);\n        }\n        return isValid;\n      },\n    }\n  },\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n        [this.$style['btn-primary']]: this.mode === 'primary',\n      }\n    }\n  }\n}\n&lt;/script></code></pre>\n\n\n\n<p>Now we can update the markup in <code>littlebutton-vue/src/App.vue</code> to use the new <code>mode</code> prop:</p>\n\n\n\n<pre rel=\"Vue\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;Button mode=\"primary\">Go&lt;/Button></code></pre>\n\n\n\n<p>Now you can <code>yarn start:vue</code> from the top-level directory and check for the same green button.</p>\n\n\n<h4 id=\"svelte\">Svelte</h4>\n\n\n<p>Let’s <code>cd</code> into <code>littlebutton-svelte</code> and verify that the styles in <code>littlebutton-svelte/src/Button.svelte</code> have the new <code>.btn-primary</code> class copied over, and <code>yarn syncStyles</code> if you need to. Again, the <code>dev</code> script will do that for us anyway on the next startup if you happen to forget.</p>\n\n\n\n<p>Next, update the Svelte template to pass the <code>mode</code> of <code>primary</code>. In <code>src/App.svelte</code>:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script>\n  import Button from './Button.svelte';\n&lt;/script>\n&lt;main>\n  &lt;Button mode=\"primary\">Go&lt;/Button>\n&lt;/main></code></pre>\n\n\n\n<p>We also need to update the top of our <code>src/Button.svelte</code> component itself to accept the <code>mode</code> prop and apply the CSS Modules class:</p>\n\n\n\n<pre rel=\"Svelte\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button class=\"{classes}\">\n  &lt;slot>&lt;/slot>\n&lt;/button>\n&lt;script>\n  export let mode = \"\";\n  const classes = [\n    \"btn\",\n    mode ? `btn-${mode}` : \"\",\n  ].filter(cls => cls.length).join(\" \");\n&lt;/script></code></pre>\n\n\n\n<p>Note that the <code>&lt;styles&gt;</code> section of our Svelte component shouldn’t be touched in this step.</p>\n\n\n\n<p>And now, you can <code>yarn dev</code> from <code>littlebutton-svelte</code> (or <code>yarn start:svelte</code> from a higher directory) to confirm the green button made it!</p>\n\n\n<h4 id=\"angular\">Angular</h4>\n\n\n<p>Same thing, different framework: check that the styles are copied over and run <code>yarn syncStyles</code> if needed.</p>\n\n\n\n<p>Let’s add the <code>mode</code> prop to the <code>littlebutton-angular/src/app/app.component.html</code> file:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;main>\n  &lt;little-button mode=\"primary\">Go&lt;/little-button>\n&lt;/main></code></pre>\n\n\n\n<p>Now we need to set up a binding to a <code>classes</code> getter to <code>compute</code> the correct classes based on if the <code>mode</code> was passed in to the component or not. Add this to <code>littlebutton-angular/src/components/button.component.html</code> (and note the binding is happening with the square brackets):</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;button [class]=\"classes\">Go&lt;/button></code></pre>\n\n\n\n<p>Next, we actually need to create the <code>classes</code> binding in our component at <code>littlebutton-angular/src/components/button.component.ts</code>:</p>\n\n\n\n<pre rel=\"TypeScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {\n  @Input() mode: 'primary' | undefined = undefined;\n\n  public get classes(): string {\n    const modeClass = this.mode ? `btn-${this.mode}` : '';\n    return [\n      'btn',\n      modeClass,\n    ].filter(cl => cl.length).join(' ');\n  }\n}</code></pre>\n\n\n\n<p>We use the <code>Input</code> directive to take in the <code>mode</code> prop, then we create a <code>classes</code> accessor which adds the mode class if it’s been passed in.</p>\n\n\n\n<p>Fire it up and look for the green button!</p>\n\n\n<h3 id=\"code-complete\">Code complete</h3>\n\n\n<p>If you’ve made it this far, congratulations — you’ve reached code complete! If something went awry, I’d encourage you to cross-reference <a href=\"https://github.com/roblevintennis/guest-posts/tree/the-little-button-that-could-series\" rel=\"noopener\">the source code over at GitHub</a> on the <code>the-little-button-that-could-series</code> branch. As bundlers and packages have a tendency to change abruptly, you might want to pin your package versions to the ones in this branch if you happen to experience any dependency issues.</p>\n\n\n\n<p>Take a moment to go back and compare the four framework-based button component implementations we just built. They’re still small enough to quickly notice some interesting differences in how <em>props</em> get passed in, how we <em>bind</em> to props, and how CSS <em>name collisions</em> are prevented among other subtle differences. As I continue to add components to <a href=\"https://agnosticui.com/\" rel=\"noopener\">AgnosticUI</a> (which supports these exact same four frameworks), I’m continually pondering which offers the best developer experience. What do you think?</p>\n\n\n<h3 id=\"homework\">Homework</h3>\n\n\n<p>If you&#8217;re the type that likes to figure things out on your own or enjoys digging in deeper, here are ideas.</p>\n\n\n<h4 id=\"button-states\">Button states</h4>\n\n\n<p>The current button styles do not account for various states, like <code>:hover</code>. I believe that&#8217;s a good first exercise.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* You should really implement the following states\n   but I will leave it as an exercise for you to \n   decide how to and what values to use.\n*/\n.btn:focus {\n  /* If you elect to remove the outline, replace it\n     with another proper affordance and research how\n     to use transparent outlines to support windows\n     high contrast\n  */\n}\n.btn:hover { }\n.btn:visited { }\n.btn:active { }\n.btn:disabled { }</code></pre>\n\n\n<h4 id=\"variants\">Variants</h4>\n\n\n<p>Most button libraries support many button variations for things like sizes, shapes, and colors. Try creating more than the <code>primary</code> mode we already have. Maybe a <code>secondary</code> variation? A <code>warning</code> or <code>success</code>? Maybe <code>filled</code> and <code>outline</code>? Again, you can look at AgnosticUI’s <a href=\"http://www.agnosticui.com/docs/components/buttons.html#examples\" rel=\"noopener\">buttons page</a> for ideas.</p>\n\n\n<h4 id=\"css-custom-properties\">CSS custom properties</h4>\n\n\n<p>If you haven&#8217;t started using CSS custom properties yet, I&#8217;d strongly recommend it. You can start by having a look at AgnosticUI&#8217;s <a href=\"https://github.com/AgnosticUI/agnosticui/blob/master/agnostic-css/css-dist/common.concat.css\" rel=\"noopener\">common styles</a>. I heavily lean on custom properties in there. Here are some great articles that cover what custom properties are and how you might leverage them:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">A Complete Guide to Custom Properties</a></li><li><a href=\"https://css-tricks.com/a-dry-approach-to-color-themes-in-css/\">A DRY Approach to Color Themes in CSS</a></li></ul>\n\n\n<h4 id=\"types\">Types</h4>\n\n\n<p>No&#8230; not typings, but the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type\" rel=\"noopener\"><code>&lt;button&gt;</code> element’s <code>type</code> attribute</a>. We didn’t cover that in our component but there’s an opportunity to extend the component to other use cases with valid types, like <code>button</code>, <code>submit</code>, and <code>reset</code>. This is pretty easy to do and will greatly improve the button’s API.</p>\n\n\n<h4 id=\"more-ideas\">More ideas</h4>\n\n\n<p>Gosh, you could do so much — add linting, convert it to Typescript, audit the accessibility, etc.</p>\n\n\n\n<p>The current Svelte implementation is suffering from some pretty loose assumptions as we have no defense if the valid <code>primary</code> mode isn’t passed — that would produce a garbage CSS class:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">mode ? `btn-${mode}` : \"\",</code></pre>\n\n\n\n<p>You could say, &#8220;Well, <code>.btn-garbage</code> as a class isn’t exactly harmful.&#8221; But it’s probably a good idea to <a href=\"https://css-tricks.com/defensive-css/\">style defensively</a> when and where possible.</p>\n\n\n<h3 id=\"potential-pitfalls\">Potential pitfalls</h3>\n\n\n<p>There are some things you should be aware of before taking this approach further:</p>\n\n\n\n<ul><li>Positional CSS based on the structure of the markup will not work well for the CSS Modules based techniques used here.</li><li>Angular makes positional techniques even harder as it generates <a href=\"https://angular.io/guide/component-styles#host\" rel=\"noopener\"><code>:host</code> element</a> representing each component view. This means you have these extra elements in between your template or markup structure. You&#8217;ll need to work around that.</li><li>Copying styles across workspace packages is a bit of an anti-pattern to some folks. I justify it because I believe the benefits outweigh the costs; also, when I think about how monorepos use symlinks and (not-so-failproof) hoisting, I don&#8217;t feel so bad about this approach.</li><li>You’ll have to subscribe to the decoupled techniques used here, so no CSS-in-JS.</li></ul>\n\n\n\n<p>I believe that all approaches to software development have their pros and cons and you ultimately have to decide if sharing a single CSS file across frameworks works for you or your specific project. There are certainly other ways you could do this (e.g. using <code>littlebuttons-css</code> as an npm package dependency) if needed.</p>\n\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n\n<p>Hopefully I’ve whet your appetite and you’re now really intrigued to create UI component libraries and/or design systems that are not tied to a particular framework. Maybe you have a better idea on how to achieve this — I&#8217;d love to hear your thoughts in the comments!</p>\n\n\n\n<p>I&#8217;m sure you&#8217;ve seen the venerable <a href=\"https://todomvc.com\" rel=\"noopener\">TodoMVC</a> project and how many framework implementations have been created for it. Similarly, wouldn&#8217;t it be nice to have a UI component library of primitives available for many frameworks? <a href=\"https://open-ui.org/\" rel=\"noopener\">Open UI</a> is making great strides to properly standardize native UI component defaults, but I believe we’ll always need to insert ourselves to some extent. Certainly, taking a good year to build a custom design system is quickly falling out of favor and companies are seriously questioning their <abbr title=\"returns on investments\">ROI</abbr>. Some sort of scaffolding is required to make the endeavor practical.</p>\n\n\n\n<p>The vision of <a href=\"https://agnosticui.com/\" rel=\"noopener\">AgnosticUI</a> is to have a relatively agnostic way to build design systems quickly that are not tied down to a particular frontend framework. If you’re compelled to get involved, the project is still very early and approachable and I’d love some help! Plus, you’re already pretty familiar with the how the project works now that you’ve gone through this tutorial!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/make-a-component-multiple-frameworks-in-a-monorepo/\">How to Make a Component That Supports Multiple Frameworks in a Monorepo</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Your mission — should you decide to accept it — is to build a Button component in four frameworks, but, only use one button.css file!\n\n\n\nThis idea is very important to me. I’ve been working on a component library called AgnosticUI where the purpose is building UI components that aren’t tied to any one particular JavaScript framework. AgnosticUI works in React, Vue 3, Angular, and Svelte. So that’s exactly what we’ll do today in this article: build a button component that works across all these frameworks.\n\n\n\n\n\n\n\nThe source code for this article is available on GitHub on the the-little-button-that-could-series branch.\n\n\nTable of contents\n\n\nWhy a monorepo?Setting upFramework-specific workspacesWhat have we just done?Finishing touchesUpdating each component to take a mode propertyCode completeHomeworkPotential pitfallsConclusion\n\n\nWhy a monorepo?\n\n\nWe’re going to set up a tiny Yarn workspaces-based monorepo. Why? Chris actually has a nice outline of the benefits in another post. But here’s my own biased list of benefits that I feel are relevant for our little buttons endeavor:\n\n\nCoupling\n\n\nWe’re trying to build a single button component that uses just one button.css file across multiple frameworks. So, by nature, there’s some purposeful coupling going on between the various framework implementations and the single-source-of-truth CSS file. A monorepo setup provides a convenient structure that facilitates copying our single button.css component into various framework-based projects.\n\n\nWorkflow\n\n\nLet’s say the button needs a tweak — like the “focus-ring” implementation, or we screwed up the use of aria in the component templates. Ideally, we’d like to correct things in one place rather than making individual fixes in separate repositories.\n\n\nTesting\n\n\nWe want the convenience of firing up all four button implementations at the same time for testing. As this sort of project grows, it’s safe to assume there will be more proper testing. In AgnosticUI, for example, I’m currently using Storybook and often kick off all the framework Storybooks, or run snapshot testing across the entire monorepo.\n\n\n\nI like what Leonardo Losoviz has to say about the monorepo approach. (And it just so happens to align with with everything we’ve talked about so far.)\n\n\n\nI believe the monorepo is particularly useful when all packages are coded in the same programming language, tightly coupled, and relying on the same tooling.\n\n\nSetting up\n\n\nTime to dive into code — start by creating a top-level directory on the command-line to house the project and then cd into it. (Can’t think of a name? mkdir buttons && cd buttons will work fine.)\n\n\n\nFirst off, let’s initialize the project:\n\n\n\n$ yarn init\nyarn init v1.22.15\nquestion name (articles): littlebutton\nquestion version (1.0.0): \nquestion description: my little button project\nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json\n\n\n\nThat gives us a package.json file with something like this:\n\n\n\n{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"my little button project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\"\n}\n\n\nCreating the baseline workspace\n\n\nWe can set the first one up with this command:\n\n\n\nmkdir -p ./littlebutton-css\n\n\n\nNext, we need to add the two following lines to the monorepo’s top-level package.json file so that we keep the monorepo itself private. It also declares our workspaces:\n\n\n\n// ...\n\"private\": true,\n\"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\", \"littlebutton-css\"]\n\n\n\nNow descend into the littlebutton-css directory. We’ll again want to generate a package.json with yarn init. Since we’ve named our directory littlebutton-css (the same as how we specified it in our workspaces in package.json) we can simply hit the Return key and accept all the prompts:\n\n\n\n$ cd ./littlebutton-css && yarn init\nyarn init v1.22.15\nquestion name (littlebutton-css): \nquestion version (1.0.0): \nquestion description: \nquestion entry point (index.js): \nquestion repository url: \nquestion author (Rob Levin): \nquestion license (MIT): \nquestion private: \nsuccess Saved package.json\n\n\n\nAt this point, the directory structure should look like this:\n\n\n\n├── littlebutton-css\n│   └── package.json\n└── package.json\n\n\n\nWe’ve only created the CSS package workspace at this point as we’ll be generating our framework implementations with tools like vite which, in turn, generate a package.json and project directory for you. We will have to remember that the name we choose for these generated projects must match the name we’ve specified in the package.json for our earlier workspaces to work.\n\n\nBaseline HTML & CSS\n\n\nLet’s stay in the ./littlebutton-css workspace and create our simple button component using vanilla HTML and CSS files.\n\n\n\ntouch index.html ./css/button.css\n\n\n\nNow our project directory should look like this:\n\n\n\nlittlebutton-css\n├── css\n│   └── button.css\n├── index.html\n└── package.json\n\n\n\nLet’s go ahead and connect some dots with some boilerplate HTML in ./index.html:\n\n\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>The Little Button That Could</title>\n  <meta name=\"description\" content=\"\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"stylesheet\" href=\"css/button.css\">\n</head>\n<body>\n  <main>\n    <button class=\"btn\">Go</button>\n  </main>\n</body>\n</html>\n\n\n\nAnd, just so we have something visual to test, we can add a little color in ./css/button.css:\n\n\n\n.btn {\n  color: hotpink;\n}\n\n\n\n\n\n\n\nNow open up that index.html page in the browser. If you see an ugly generic button with hotpink text… success!\n\n\nFramework-specific workspaces\n\n\nSo what we just accomplished is the baseline for our button component. What we want to do now is abstract it a bit so it’s extensible for other frameworks and such. For example, what if we want to use the button in a React project? We’re going to need workspaces in our monorepo for each one. We’ll start with React, then follow suit for Vue 3, Angular, and Svelte.\n\n\nReact\n\n\nWe’re going to generate our React project using vite, a very lightweight and blazingly fast builder. Be forewarned that if you attempt to do this with create-react-app, there’s a very good chance you will run into conflicts later with react-scripts and conflicting webpack or Babel configurations from other frameworks, like Angular.\n\n\n\nTo get our React workspace going, let’s go back into the terminal and cd back up to the top-level directory. From there, we’ll use vite to initialize a new project — let’s call it littlebutton-react — and, of course, we’ll select react as the framework and variant at the prompts:\n\n\n\n$ yarn create vite\nyarn create v1.22.15\n[1/4] 🔍  Resolving packages...\n[2/4] 🚚  Fetching packages...\n[3/4] 🔗  Linking dependencies...\n[4/4] 🔨  Building fresh packages...\n\nsuccess Installed \"create-vite@2.6.6\" with binaries:\n      - create-vite\n      - cva\n✔ Project name: … littlebutton-react\n✔ Select a framework: › react\n✔ Select a variant: › react\n\nScaffolding project in /Users/roblevin/workspace/opensource/guest-posts/articles/littlebutton-react...\n\nDone. Now run:\n\n  cd littlebutton-react\n  yarn\n  yarn dev\n\n✨  Done in 17.90s.\n\n\n\nWe initialize the React app with these commands next:\n\n\n\ncd littlebutton-react\nyarn\nyarn dev\n\n\n\nWith React installed and verified, let’s replace the contents of src/App.jsx to house our button with the following code:\n\n\n\nimport \"./App.css\";\n\nconst Button = () => {\n  return <button>Go</button>;\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\nNow we’re going to write a small Node script that copies our littlebutton-css/css/button.css right into our React application for us. This step is probably the most interesting one to me because it’s both magical and ugly at the same time. It’s magical because it means our React button component is truly deriving its styles from the same CSS written in the baseline project. It’s ugly because, well, we are reaching up out of one workspace and grabbing a file from another. ¯\\_(ツ)_/¯\n\n\n\nAdd the following little Node script to littlebutton-react/copystyles.js:\n\n\n\nconst fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/button.css\", css, \"utf8\");\n\n\n\nLet’s place a node command to run that in a package.json script that happens before the dev script in littlebutton-react/package.json. We’ll add a syncStyles and update the dev to call syncStyles before vite:\n\n\n\n\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles && vite\",\n\n\n\nNow, anytime we fire up our React application with yarn dev, we’ll first be copying the CSS file over. In essence, we’re “forcing” ourselves to not diverge from the CSS package’s button.css in our React button.\n\n\n\nBut we want to also leverage CSS Modules to prevent name collisions and global CSS leakage, so we have one more step to do to get that wired up (from the same littlebutton-react directory):\n\n\n\ntouch src/button.module.css\n\n\n\nNext, add the following to the new src/button.module.css file:\n\n\n\n.btn {\n  composes: btn from './button.css';\n}\n\n\n\nI find composes (also known as composition) to be one of the coolest features of CSS Modules. In a nutshell, we’re copying our HTML/CSS version of button.css over wholesale then composing from our one .btn style rule.\n\n\n\nWith that, we can go back to our src/App.jsx and import the CSS Modules styles into our React component with this:\n\n\n\nimport \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = () => {\n  return <button className={styles.btn}>Go</button>;\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\nWhew! Let’s pause and try to run our React app again:\n\n\n\nyarn dev\n\n\n\nIf all went well, you should see that same generic button, but with hotpink text. Before we move on to the next framework, let’s move back up to our top-level monorepo directory and update its package.json:\n\n\n\n{\n  \"name\": \"littlebutton\",\n  \"version\": \"1.0.0\",\n  \"description\": \"toy project\",\n  \"main\": \"index.js\",\n  \"author\": \"Rob Levin\",\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"workspaces\": [\"littlebutton-react\", \"littlebutton-vue\", \"littlebutton-svelte\", \"littlebutton-angular\"],\n  \"scripts\": {\n    \"start:react\": \"yarn workspace littlebutton-react dev\"\n  }\n}\n\n\n\nRun the yarn command from the top-level directory to get the monorepo-hoisted dependencies installed.\n\n\n\nThe only change we’ve made to this package.json is a new scripts section with a single script to start the React app. By adding start:react we can now run yarn start:react from our top-level directory and it will fire up the project we just built in ./littlebutton-react without the need for cd‘ing — super convenient!\n\n\n\nWe’ll tackle Vue and Svelte next. It turns out that we can take a pretty similar approach for these as they both use single file components (SFC). Basically, we get to mix HTML, CSS, and JavaScript all into one single file. Whether you like the SFC approach or not, it’s certainly adequate enough for building out presentational or primitive UI components.\n\n\nVue\n\n\nFollowing the steps from vite’s scaffolding docs we’ll run the following command from the monorepo’s top-level directory to initialize a Vue app:\n\n\n\nyarn create vite littlebutton-vue --template vue\n\n\n\nThis generates scaffolding with some provided instructions to run the starter Vue app:\n\n\n\ncd littlebutton-vue\nyarn\nyarn dev\n\n\n\nThis should fire up a starter page in the browser with some heading like “Hello Vue 3 + Vite.” From here, we can update src/App.vue to:\n\n\n\n<template>\n  <div id=\"app\">\n    <Button class=\"btn\">Go</Button>\n  </div>\n</template>\n\n<script>\nimport Button from './components/Button.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    Button\n  }\n}\n</script>\n\n\n\nAnd we’ll replace any src/components/* with src/components/Button.vue:\n\n\n\n<template>\n  <button :class=\"classes\"><slot /></button>\n</template>\n\n<script>\nexport default {\n  name: 'Button',\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n      }\n    }\n  }\n}\n</script>\n\n<style module>\n.btn {\n  color: slateblue;\n}\n</style>\n\n\n\nLet’s break this down a bit:\n\n\n\n:class=\"classes\" is using Vue’s binding to call the computed classes method.The classes method, in turn, is utilizing CSS Modules in Vue with the this.$style.btn syntax which will use styles contained in a <style module> tag.\n\n\n\nFor now, we’re hardcoding color: slateblue simply to test that things are working properly within the component. Try firing up the app again with yarn dev. If you see the button with our declared test color, then it’s working!\n\n\n\nNow we’re going to write a Node script that copies our littlebutton-css/css/button.css into our Button.vue file similar to the one we did for the React implementation. As mentioned, this component is a SFC so we’re going to have to do this a little differently using a simple regular expression.\n\n\n\nAdd the following little Node.js script to littlebutton-vue/copystyles.js:\n\n\n\nconst fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst vue = fs.readFileSync(\"./src/components/Button.vue\", \"utf8\");\n// Take everything between the starting and closing style tag and replace\nconst styleRegex = /<style module>([\\s\\S]*?)<\\/style>/;\nlet withSynchronizedStyles = vue.replace(styleRegex, `<style module>\\n${css}\\n</style>`);\nfs.writeFileSync(\"./src/components/Button.vue\", withSynchronizedStyles, \"utf8\");\n\n\n\nThere’s a bit more complexity in this script, but using replace to copy text between opening and closing style tags via regex isn’t too bad.\n\n\n\nNow let’s add the following two scripts to the scripts clause in the littlebutton-vue/package.json file:\n\n\n\n\"syncStyles\": \"node copystyles.js\",\n\"dev\": \"yarn syncStyles && vite\",\n\n\n\nNow run yarn syncStyles and look at ./src/components/Button.vue again. You should see that our style module gets replaced with this:\n\n\n\n<style module>\n.btn {\n  color: hotpink;\n}\n</style>\n\n\n\nRun the Vue app again with yarn dev and verify you get the expected results — yes, a button with hotpink text. If so, we’re good to move on to the next framework workspace!\n\n\nSvelte\n\n\nPer the Svelte docs, we should kick off our littlebutton-svelte workspace with the following, starting from the monorepo’s top-level directory:\n\n\n\nnpx degit sveltejs/template littlebutton-svelte\ncd littlebutton-svelte\nyarn && yarn dev\n\n\n\nConfirm you can hit the “Hello World” start page at http://localhost:5000. Then, update littlebutton-svelte/src/App.svelte:\n\n\n\n<script>\n  import Button from './Button.svelte';\n</script>\n<main>\n  <Button>Go</Button>\n</main>\n\n\n\nAlso, in littlebutton-svelte/src/main.js, we want to remove the name prop so it looks like this:\n\n\n\nimport App from './App.svelte';\n\nconst app = new App({\n  target: document.body\n});\n\nexport default app;\n\n\n\nAnd finally, add littlebutton-svelte/src/Button.svelte with the following:\n\n\n\n<button class=\"btn\">\n  <slot></slot>\n</button>\n\n<script>\n</script>\n\n<style>\n  .btn {\n    color: saddlebrown;\n  }\n</style>\n\n\n\nOne last thing: Svelte appears to name our app: \"name\": \"svelte-app\" in the package.json. Change that to \"name\": \"littlebutton-svelte\" so it’s consistent with the workspaces name in our top-level package.json file.\n\n\n\nOnce again, we can copy our baseline littlebutton-css/css/button.css into our Button.svelte. As mentioned, this component is a SFC, so we’re going to have to do this using a regular expression. Add the following Node script to littlebutton-svelte/copystyles.js:\n\n\n\nconst fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nconst svelte = fs.readFileSync(\"./src/Button.svelte\", \"utf8\");\nconst styleRegex = /<style>([\\s\\S]*?)<\\/style>/;\nlet withSynchronizedStyles = svelte.replace(styleRegex, `<style>\\n${css}\\n</style>`);\nfs.writeFileSync(\"./src/Button.svelte\", withSynchronizedStyles, \"utf8\");\n\n\n\nThis is super similar to the copy script we used with Vue, isn’t it? We’ll add similar scripts to our package.json script:\n\n\n\n\"dev\": \"yarn syncStyles && rollup -c -w\",\n\"syncStyles\": \"node copystyles.js\",\n\n\n\nNow run yarn syncStyles && yarn dev. If all is good, we once again should see a button with hotpink text.\n\n\n\nIf this is starting to feel repetitive, all I have to say is welcome to my world. What I’m showing you here is essentially the same process I’ve been using to build my AgnosticUI project!\n\n\nAngular\n\n\nYou probably know the drill by now. From the monorepo’s top-level directory, install Angular and create an Angular app. If we were creating a full-blown UI library we’d likely use ng generate library or even nx. But to keep things as straightforward as possible we’ll set up a boilerplate Angular app as follows:\n\n\n\nnpm install -g @angular/cli ### unless you already have installed\nng new littlebutton-angular ### choose no for routing and CSS\n? Would you like to add Angular routing? (y/N) N\n❯ CSS \n  SCSS   [ https://sass-lang.com/documentation/syntax#scss ] \n  Sass   [ https://sass-lang.com/documentation/syntax#the-indented-syntax ] \n  Less   [ http://lesscss.org ]\n\ncd littlebutton-angular && ng serve --open\n\n\n\nWith the Angular setup confirmed, let’s update some files. cd littlebutton-angular, delete the src/app/app.component.spec.ts file, and add a button component in src/components/button.component.ts, like this:\n\n\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {}\n\n\n\nAdd the following to src/components/button.component.html:\n\n\n\n<button class=\"btn\">Go</button>\n\n\n\nAnd put this in the src/components/button.component.css file for testing:\n\n\n\n.btn {\n  color: fuchsia;\n}\n\n\n\nIn src/app/app.module.ts:\n\n\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { ButtonComponent } from '../components/button.component';\n\n@NgModule({\n  declarations: [AppComponent, ButtonComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n\n\n\nNext, replace src/app/app.component.ts with:\n\n\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {}\n\n\n\nThen, replace src/app/app.component.html with:\n\n\n\n<main>\n  <little-button>Go</little-button>\n</main>\n\n\n\nWith that, let’s run yarn start and verify our button with fuchsia text renders as expected.\n\n\n\nAgain, we want to copy over the CSS from our baseline workspace. We can do that by adding this to littlebutton-angular/copystyles.js:\n\n\n\nconst fs = require(\"fs\");\nlet css = fs.readFileSync(\"../littlebutton-css/css/button.css\", \"utf8\");\nfs.writeFileSync(\"./src/components/button.component.css\", css, \"utf8\");\n\n\n\nAngular is nice in that it uses ViewEncapsulation that defaults to to emulate which mimics, according to the docs,\n\n\n\n[…] the behavior of shadow DOM by preprocessing (and renaming) the CSS code to effectively scope the CSS to the component’s view.\n\n\n\nThis basically means we can literally copy over button.css and use it as-is.\n\n\n\nFinally, update the package.json file by adding these two lines in the scripts section:\n\n\n\n\"start\": \"yarn syncStyles && ng serve\",\n\"syncStyles\": \"node copystyles.js\",\n\n\n\nWith that, we can now run yarn start once more and verify our button text color (which was fuchsia) is now hotpink.\n\n\nWhat have we just done?\n\n\nLet’s take a break from coding and think about the bigger picture and what we’ve just done. Basically, we’ve set up a system where any changes to our CSS package’s button.css will get copied over into all the framework implementations as a result of our copystyles.js Node scripts. Further, we’ve incorporated idiomatic conventions for each of the frameworks:\n\n\n\nSFC for Vue and SvelteCSS Modules for React (and Vue within the SFC <style module> setup)ViewEncapsulation for Angular\n\n\n\nOf course I state the obvious that these aren’t the only ways to do CSS in each of the above frameworks (e.g. CSS-in-JS is a popular choice), but they are certainly accepted practices and are working quite well for our greater goal — to have a single CSS source of truth to drive all framework implementations.\n\n\n\nIf, for example, our button was in use and our design team decided we wanted to change from 4px to 3px border-radius, we could update the one file, and any separate implementations would stay synced.\n\n\n\nThis is compelling if you have a polyglot team of developers that enjoy working in multiple frameworks, or, say an offshore team (that’s 3× productive in Angular) that’s being tasked to build a back-office application, but your flagship product is built in React. Or, you’re building an interim admin console and you’d love to experiment with using Vue or Svelte. You get the picture.\n\n\nFinishing touches\n\n\nOK, so we have the monorepo architecture in a really good spot. But there’s a few things we can do to make it even more useful as far as the developer experience goes.\n\n\nBetter start scripts\n\n\nLet’s move back up to our top-level monorepo directory and update its package.json scripts section with the following so we can kick any framework implementation without cd‘ing:\n\n\n\n// ...\n\"scripts\": {\n  \"start:react\": \"yarn workspace littlebutton-react dev\",\n  \"start:vue\": \"yarn workspace littlebutton-vue dev \",\n  \"start:svelte\": \"yarn workspace littlebutton-svelte dev\",\n  \"start:angular\": \"yarn workspace littlebutton-angular start\"\n},\n\n\nBetter baseline styles\n\n\nWe can also provide a better set of baseline styles for the button so it starts from a nice, neutral place. Here’s what I did in the littlebutton-css/css/button.css file.\n\n\n\n\n  \n          View Full Snippet      \n  \n\n.btn {\n  --button-dark: #333;\n  --button-line-height: 1.25rem;\n  --button-font-size: 1rem;\n  --button-light: #e9e9e9;\n  --button-transition-duration: 200ms;\n  --button-font-stack:\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    \"Segoe UI\",\n    Roboto,\n    Ubuntu,\n    \"Helvetica Neue\",\n    sans-serif;\n\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n  user-select: none;\n  appearance: none;\n  cursor: pointer;\n  box-sizing: border-box;\n  transition-property: all;\n  transition-duration: var(--button-transition-duration);\n  color: var(--button-dark);\n  background-color: var(--button-light);\n  border-color: var(--button-light);\n  border-style: solid;\n  border-width: 1px;\n  font-family: var(--button-font-stack);\n  font-weight: 400;\n  font-size: var(--button-font-size);\n  line-height: var(--button-line-height);\n  padding-block-start: 0.5rem;\n  padding-block-end: 0.5rem;\n  padding-inline-start: 0.75rem;\n  padding-inline-end: 0.75rem;\n  text-decoration: none;\n  text-align: center;\n}\n\n/* Respect users reduced motion preferences */\n@media (prefers-reduced-motion) {\n  .btn {\n    transition-duration: 0.001ms !important;\n  }\n}\n\n\n\n\n\n\n\n\n\nLet’s test this out! Fire up each of the four framework implementations with the new and improved start scripts and confirm the styling changes are in effect.\n\n\n\n\n\n\n\nOne CSS file update proliferated to four frameworks — pretty cool, eh!?\n\n\nSet a primary mode\n\n\nWe’re going to add a mode prop to each of our button’s and implement primary mode next. A primary button could be any color but we’ll go with a shade of green for the background and white text. Again, in the baseline stylesheet:\n\n\n\n.btn {\n  --button-primary: #14775d;\n  --button-primary-color: #fff;\n  /* ... */\n}\n\n\n\nThen, just before the @media (prefers-reduced-motion) query, add the following btn-primary to the same baseline stylesheet:\n\n\n\n.btn-primary {\n  background-color: var(--button-primary);\n  border-color: var(--button-primary);\n  color: var(--button-primary-color);\n}\n\n\n\nThere we go! Some developer conveniences and better baseline styles!\n\n\nUpdating each component to take a mode property\n\n\nNow that we’ve added our new primary mode represented by the .btn-primary class, we want to sync the styles for all four framework implementations. So, let’s add some more package.json scripts to our top level scripts:\n\n\n\n\"sync:react\": \"yarn workspace littlebutton-react syncStyles\",\n\"sync:vue\": \"yarn workspace littlebutton-vue syncStyles\",\n\"sync:svelte\": \"yarn workspace littlebutton-svelte syncStyles\",\n\"sync:angular\": \"yarn workspace littlebutton-angular syncStyles\"\n\n\n\nBe sure to respect JSON’s comma rules! Depending on where you place these lines within your scripts: {...}, you’ll want to make sure there are no missing or trailing commas.\n\n\n\nGo ahead and run the following to fully synchronize the styles:\n\n\n\nyarn sync:angular && yarn sync:react && yarn sync:vue && yarn sync:svelte\n\n\n\nRunning this doesn’t change anything because we haven’t applied the primary class yet, but you should at least see the CSS has been copied over if you go look at the framework’s button component CSS.\n\n\nReact\n\n\nIf you haven’t already, double-check that the updated CSS got copied over into littlebutton-react/src/button.css. If not, you can run yarn syncStyles. Note that if you forget to run yarn syncStyles our dev script will do this for us when we next start the application anyway:\n\n\n\n\"dev\": \"yarn syncStyles && vite\",\n\n\n\nFor our React implementation, we additionally need to add a composed CSS Modules class in littlebutton-react/src/button.module.css that is composed from the new .btn-primary:\n\n\n\n.btnPrimary {\n  composes: btn-primary from './button.css';\n}\n\n\n\nWe’ll also update littlebutton-react/src/App.jsx:\n\n\n\nimport \"./App.css\";\nimport styles from \"./button.module.css\";\n\nconst Button = ({ mode }) => {\n  const primaryClass = mode ? styles[`btn${mode.charAt(0).toUpperCase()}${mode.slice(1)}`] : '';\n  const classes = primaryClass ? `${styles.btn} ${primaryClass}` : styles.btn;\n  return <button className={classes}>Go</button>;\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button mode=\"primary\" />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\nFire up the React app with yarn start:react from the top-level directory. If all goes well, you should now see your green primary button.\n\n\n\n\n\n\n\nAs a note, I’m keeping the Button component in App.jsx for brevity. Feel free to tease out the Button component into its own file if that bothers you.\n\n\nVue\n\n\nAgain, double-check that the button styles were copied over and, if not, run yarn syncStyles.\n\n\n\nNext, make the following changes to the <script> section of littlebutton-vue/src/components/Button.vue:\n\n\n\n<script>\nexport default {\n  name: 'Button',\n  props: {\n    mode: {\n      type: String,\n      required: false,\n      default: '',\n      validator: (value) => {\n        const isValid = ['primary'].includes(value);\n        if (!isValid) {\n          console.warn(`Allowed types for Button are primary`);\n        }\n        return isValid;\n      },\n    }\n  },\n  computed: {\n    classes() {\n      return {\n        [this.$style.btn]: true,\n        [this.$style['btn-primary']]: this.mode === 'primary',\n      }\n    }\n  }\n}\n</script>\n\n\n\nNow we can update the markup in littlebutton-vue/src/App.vue to use the new mode prop:\n\n\n\n<Button mode=\"primary\">Go</Button>\n\n\n\nNow you can yarn start:vue from the top-level directory and check for the same green button.\n\n\nSvelte\n\n\nLet’s cd into littlebutton-svelte and verify that the styles in littlebutton-svelte/src/Button.svelte have the new .btn-primary class copied over, and yarn syncStyles if you need to. Again, the dev script will do that for us anyway on the next startup if you happen to forget.\n\n\n\nNext, update the Svelte template to pass the mode of primary. In src/App.svelte:\n\n\n\n<script>\n  import Button from './Button.svelte';\n</script>\n<main>\n  <Button mode=\"primary\">Go</Button>\n</main>\n\n\n\nWe also need to update the top of our src/Button.svelte component itself to accept the mode prop and apply the CSS Modules class:\n\n\n\n<button class=\"{classes}\">\n  <slot></slot>\n</button>\n<script>\n  export let mode = \"\";\n  const classes = [\n    \"btn\",\n    mode ? `btn-${mode}` : \"\",\n  ].filter(cls => cls.length).join(\" \");\n</script>\n\n\n\nNote that the <styles> section of our Svelte component shouldn’t be touched in this step.\n\n\n\nAnd now, you can yarn dev from littlebutton-svelte (or yarn start:svelte from a higher directory) to confirm the green button made it!\n\n\nAngular\n\n\nSame thing, different framework: check that the styles are copied over and run yarn syncStyles if needed.\n\n\n\nLet’s add the mode prop to the littlebutton-angular/src/app/app.component.html file:\n\n\n\n<main>\n  <little-button mode=\"primary\">Go</little-button>\n</main>\n\n\n\nNow we need to set up a binding to a classes getter to compute the correct classes based on if the mode was passed in to the component or not. Add this to littlebutton-angular/src/components/button.component.html (and note the binding is happening with the square brackets):\n\n\n\n<button [class]=\"classes\">Go</button>\n\n\n\nNext, we actually need to create the classes binding in our component at littlebutton-angular/src/components/button.component.ts:\n\n\n\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'little-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {\n  @Input() mode: 'primary' | undefined = undefined;\n\n  public get classes(): string {\n    const modeClass = this.mode ? `btn-${this.mode}` : '';\n    return [\n      'btn',\n      modeClass,\n    ].filter(cl => cl.length).join(' ');\n  }\n}\n\n\n\nWe use the Input directive to take in the mode prop, then we create a classes accessor which adds the mode class if it’s been passed in.\n\n\n\nFire it up and look for the green button!\n\n\nCode complete\n\n\nIf you’ve made it this far, congratulations — you’ve reached code complete! If something went awry, I’d encourage you to cross-reference the source code over at GitHub on the the-little-button-that-could-series branch. As bundlers and packages have a tendency to change abruptly, you might want to pin your package versions to the ones in this branch if you happen to experience any dependency issues.\n\n\n\nTake a moment to go back and compare the four framework-based button component implementations we just built. They’re still small enough to quickly notice some interesting differences in how props get passed in, how we bind to props, and how CSS name collisions are prevented among other subtle differences. As I continue to add components to AgnosticUI (which supports these exact same four frameworks), I’m continually pondering which offers the best developer experience. What do you think?\n\n\nHomework\n\n\nIf you’re the type that likes to figure things out on your own or enjoys digging in deeper, here are ideas.\n\n\nButton states\n\n\nThe current button styles do not account for various states, like :hover. I believe that’s a good first exercise.\n\n\n\n/* You should really implement the following states\n   but I will leave it as an exercise for you to \n   decide how to and what values to use.\n*/\n.btn:focus {\n  /* If you elect to remove the outline, replace it\n     with another proper affordance and research how\n     to use transparent outlines to support windows\n     high contrast\n  */\n}\n.btn:hover { }\n.btn:visited { }\n.btn:active { }\n.btn:disabled { }\n\n\nVariants\n\n\nMost button libraries support many button variations for things like sizes, shapes, and colors. Try creating more than the primary mode we already have. Maybe a secondary variation? A warning or success? Maybe filled and outline? Again, you can look at AgnosticUI’s buttons page for ideas.\n\n\nCSS custom properties\n\n\nIf you haven’t started using CSS custom properties yet, I’d strongly recommend it. You can start by having a look at AgnosticUI’s common styles. I heavily lean on custom properties in there. Here are some great articles that cover what custom properties are and how you might leverage them:\n\n\n\nA Complete Guide to Custom PropertiesA DRY Approach to Color Themes in CSS\n\n\nTypes\n\n\nNo… not typings, but the <button> element’s type attribute. We didn’t cover that in our component but there’s an opportunity to extend the component to other use cases with valid types, like button, submit, and reset. This is pretty easy to do and will greatly improve the button’s API.\n\n\nMore ideas\n\n\nGosh, you could do so much — add linting, convert it to Typescript, audit the accessibility, etc.\n\n\n\nThe current Svelte implementation is suffering from some pretty loose assumptions as we have no defense if the valid primary mode isn’t passed — that would produce a garbage CSS class:\n\n\n\nmode ? `btn-${mode}` : \"\",\n\n\n\nYou could say, “Well, .btn-garbage as a class isn’t exactly harmful.” But it’s probably a good idea to style defensively when and where possible.\n\n\nPotential pitfalls\n\n\nThere are some things you should be aware of before taking this approach further:\n\n\n\nPositional CSS based on the structure of the markup will not work well for the CSS Modules based techniques used here.Angular makes positional techniques even harder as it generates :host element representing each component view. This means you have these extra elements in between your template or markup structure. You’ll need to work around that.Copying styles across workspace packages is a bit of an anti-pattern to some folks. I justify it because I believe the benefits outweigh the costs; also, when I think about how monorepos use symlinks and (not-so-failproof) hoisting, I don’t feel so bad about this approach.You’ll have to subscribe to the decoupled techniques used here, so no CSS-in-JS.\n\n\n\nI believe that all approaches to software development have their pros and cons and you ultimately have to decide if sharing a single CSS file across frameworks works for you or your specific project. There are certainly other ways you could do this (e.g. using littlebuttons-css as an npm package dependency) if needed.\n\n\nConclusion\n\n\nHopefully I’ve whet your appetite and you’re now really intrigued to create UI component libraries and/or design systems that are not tied to a particular framework. Maybe you have a better idea on how to achieve this — I’d love to hear your thoughts in the comments!\n\n\n\nI’m sure you’ve seen the venerable TodoMVC project and how many framework implementations have been created for it. Similarly, wouldn’t it be nice to have a UI component library of primitives available for many frameworks? Open UI is making great strides to properly standardize native UI component defaults, but I believe we’ll always need to insert ourselves to some extent. Certainly, taking a good year to build a custom design system is quickly falling out of favor and companies are seriously questioning their ROI. Some sort of scaffolding is required to make the endeavor practical.\n\n\n\nThe vision of AgnosticUI is to have a relatively agnostic way to build design systems quickly that are not tied down to a particular frontend framework. If you’re compelled to get involved, the project is still very early and approachable and I’d love some help! Plus, you’re already pretty familiar with the how the project works now that you’ve gone through this tutorial!\n\nHow to Make a Component That Supports Multiple Frameworks in a Monorepo originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-05T15:42:59.000Z",
      "date_modified": "2022-01-05T15:42:59.000Z",
      "_plugin": {
        "pageFilename": "6fa12e1bab080a7c2877e50c0b9918fa4aef988e84dd3cafb88dd586add1919d.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359880",
      "url": "https://css-tricks.com/should-css-override-default-styles/",
      "title": "Should CSS Override Default Browser Styles?",
      "summary": "CSS overrides can change the default look of almost anything:\n\nYou can use CSS to override what a checkbox or radio button looks like, but if you don’t, the checkbox will look like a default checkbox on your operating system \n\n…\n\nShould CSS Override Default Browser Styles? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>CSS overrides can change the default look of almost anything:</p>\n\n\n\n<ul><li>You can use CSS to <a href=\"https://css-tricks.com/zero-trickery-custom-radios-and-checkboxes/\">override what a checkbox or radio button</a> looks like, but if you don&#8217;t, the checkbox will look like a default checkbox on your operating system and some would say that&#8217;s best for accessibility and usability.</li><li>You can use CSS to <a href=\"https://css-tricks.com/making-a-better-custom-select-element/\">override what a select menu</a> looks like, but if you don&#8217;t, the select will look like a default select menu on your operating system and some would say that&#8217;s best for accessibility and usability.</li><li>You can <a href=\"https://css-tricks.com/a-complete-guide-to-links-and-buttons/#links-heading-2\">override what anchor links look like</a>, but some would say they should be blue with underlines because that is the default and it&#8217;s best for accessibility and usability.</li><li>You can <a href=\"https://css-tricks.com/the-current-state-of-styling-scrollbars/\">override what scrollbars look like</a>, but if you don&#8217;t, the scrollbars will look (and behave) the way default scrollbars do on your operating system, and some would say that&#8217;s best for accessibility and usability. </li></ul>\n\n\n\n<p>It just goes on and on&#8230;</p>\n\n\n\n<span id=\"more-359880\"></span>\n\n\n\n<ul><li>You can <a href=\"https://css-tricks.com/a-complete-guide-to-links-and-buttons/#buttons-heading-2\">customize what a button looks like</a>, but&#8230;</li><li>You <a href=\"https://css-tricks.com/almanac/properties/c/cursor/\">can customize what the cursor looks like</a>, or particular elements on your site, but&#8230;</li><li>You can <a href=\"https://css-tricks.com/almanac/selectors/s/selection/\">change the text highlighting color</a>, you can <a href=\"https://css-tricks.com/almanac/properties/a/accent-color/\">change the accent color</a>, heck, soon you&#8217;ll be able to <a href=\"https://www.azabani.com/2021/12/16/spelling-grammar-2.html\" rel=\"noopener\">customize what spelling and grammer mistakes look like</a> in editable text areas, <em>but&#8230;</em></li></ul>\n\n\n\n<p>Where do you draw the line?</p>\n\n\n\n<p>In my experience, everyone has a different line. Nearly everybody styles their buttons. Nearly everybody styles their links, but some might only customize the hue of blue and leave the underline, drawing the line at more elaborate changes. It&#8217;s fairly popular to style form elements like checkboxes, radio buttons, and selects, but some people draw the line before that.</p>\n\n\n\n<p>Some people draw a line saying you should never change a default cursor, some push that line back to make the cursor into a pointer for created interactive elements, some push that line so far they are OK with custom images as cursors. Some people draw the line with scrollbars saying they should never be customized, while some people implement elaborate designs.</p>\n\n\n\n<p>CSS is a language for changing the design of websites. Every ruleset you write likely changes the defaults of something. The lines are relatively fuzzy, but I&#8217;d say there is nothing in CSS that should be outright banned from use — it&#8217;s more about the styling <em>choices</em> you make. So when you do choose to style something, it remains usable and accessible. Heck, <code>background-color</code> can be terribly abused making for inaccessible and unusable areas of a site, but nobody raises pitchforks over that.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/should-css-override-default-styles/\">Should CSS Override Default Browser Styles?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "CSS overrides can change the default look of almost anything:\n\n\n\nYou can use CSS to override what a checkbox or radio button looks like, but if you don’t, the checkbox will look like a default checkbox on your operating system and some would say that’s best for accessibility and usability.You can use CSS to override what a select menu looks like, but if you don’t, the select will look like a default select menu on your operating system and some would say that’s best for accessibility and usability.You can override what anchor links look like, but some would say they should be blue with underlines because that is the default and it’s best for accessibility and usability.You can override what scrollbars look like, but if you don’t, the scrollbars will look (and behave) the way default scrollbars do on your operating system, and some would say that’s best for accessibility and usability. \n\n\n\nIt just goes on and on…\n\n\n\n\n\n\n\nYou can customize what a button looks like, but…You can customize what the cursor looks like, or particular elements on your site, but…You can change the text highlighting color, you can change the accent color, heck, soon you’ll be able to customize what spelling and grammer mistakes look like in editable text areas, but…\n\n\n\nWhere do you draw the line?\n\n\n\nIn my experience, everyone has a different line. Nearly everybody styles their buttons. Nearly everybody styles their links, but some might only customize the hue of blue and leave the underline, drawing the line at more elaborate changes. It’s fairly popular to style form elements like checkboxes, radio buttons, and selects, but some people draw the line before that.\n\n\n\nSome people draw a line saying you should never change a default cursor, some push that line back to make the cursor into a pointer for created interactive elements, some push that line so far they are OK with custom images as cursors. Some people draw the line with scrollbars saying they should never be customized, while some people implement elaborate designs.\n\n\n\nCSS is a language for changing the design of websites. Every ruleset you write likely changes the defaults of something. The lines are relatively fuzzy, but I’d say there is nothing in CSS that should be outright banned from use — it’s more about the styling choices you make. So when you do choose to style something, it remains usable and accessible. Heck, background-color can be terribly abused making for inaccessible and unusable areas of a site, but nobody raises pitchforks over that.\n\nShould CSS Override Default Browser Styles? originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-04T19:50:18.000Z",
      "date_modified": "2022-01-04T19:50:18.000Z",
      "_plugin": {
        "pageFilename": "ddd0a37078967768f240261a0a1ae9072497e7a71ce99849d7acd70ca5706b70.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359838",
      "url": "https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/",
      "title": "CSS Underlines Are Too Thin and Too Low in Chrome",
      "summary": "I’ve encountered two bugs in Chrome while testing the new CSS text-decoration-thickness and text-underline-offset properties, and I want to share them with you here in this article.\nTable of Contents\n\n\nDefault underlines are inconsistent\n\nLuckily, we can override the browsers’ \n\n…\n\nCSS Underlines Are Too Thin and Too Low in Chrome originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I’ve encountered two bugs in Chrome while testing the new CSS <code>text-decoration-thickness</code> and <code>text-underline-offset</code> properties, and I want to share them with you here in this article.</p>\n\n\n\n<span id=\"more-359838\"></span>\n\n\n<h2 class=\"simpletoc-title\">Table of Contents</h2><ul class=\"simpletoc\">\n<li>\n<a  href=\"#default-underlines-are-inconsistent\">Default underlines are inconsistent</a></li><li>\n<a  href=\"#luckily-we-can-override-the-browsers-defaults\">Luckily, we can override the browsers’ defaults</a></li><li>\n<a  href=\"#chrome-bug-1-underlines-are-too-thin-on-macos\">Chrome bug 1: Underlines are too thin on macOS</a></li><li>\n<a  href=\"#chrome-bug-2-underlines-are-too-low\">Chrome bug 2: Underlines are too low</a></li><li>\n<a  href=\"#help-prioritize-the-chrome-bugs\">Help prioritize the Chrome bugs</a></li></ul>\n\n\n<p>First, let&#8217;s acknowledge one thing:</p>\n\n\n<h3 id=\"default-underlines-are-inconsistent\">Default underlines are inconsistent</h3>\n\n\n<p>Let’s add a text link to a plain web page, set its <code>font-family</code> to Arial, and compare the underlines across browsers and operating systems.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2018\" height=\"944\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=2018%2C944&#038;ssl=1\" alt=\"\" class=\"wp-image-359839\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?w=2018&amp;ssl=1 2018w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=300%2C140&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=1024%2C479&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=768%2C359&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=1536%2C719&amp;ssl=1 1536w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-link-underlines.png?resize=1000%2C468&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>From left to right: Chrome, Safari, and Firefox on macOS; Safari on iOS; Chrome, and Firefox on Windows; Chrome, and Firefox on Android.</figcaption></figure>\n\n\n\n<p>As you can see, the default underline is inconsistent across browsers. Each browser chooses their own default thickness and vertical position (offset from the baseline) for the underline. This is in line with the <a href=\"https://drafts.csswg.org/css-text-decor-4/\" rel=\"noopener\">CSS Text Decoration module</a>, which specifies the following default behavior (<code>auto</code> value):</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The user agent chooses an appropriate thickness for text decoration lines. […] The user agent chooses an appropriate offset for underlines.</p><p></p></blockquote>\n\n\n<h3 id=\"luckily-we-can-override-the-browsers-defaults\">Luckily, we can override the browsers’ defaults</h3>\n\n\n<p>There are two new, <a href=\"https://caniuse.com/mdn-css_properties_text-decoration-thickness,mdn-css_properties_text-underline-offset\" rel=\"noopener\">widely supported</a> CSS properties that allow us to precisely define the thickness and offset for our underlines:</p>\n\n\n\n<ul><li><a href=\"https://css-tricks.com/almanac/properties/t/text-decoration-thickness/\"><code>text-decoration-thickness</code></a></li><li><a href=\"https://css-tricks.com/almanac/properties/t/text-underline-offset/\"><code>text-underline-offset</code></a></li></ul>\n\n\n\n<p>With these properties, we can create consistent underlines even across two very different browsers, such as the Gecko-based Firefox on Android and the WebKit-based Safari on macOS.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\n  text-decoration: underline;\n  text-decoration-thickness: 0.04em;\n  text-underline-offset: 0.03em;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2016\" height=\"1426\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=2016%2C1426&#038;ssl=1\" alt=\"\" class=\"wp-image-359840\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?w=2016&amp;ssl=1 2016w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=300%2C212&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=1024%2C724&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=768%2C543&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=1536%2C1086&amp;ssl=1 1536w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/consistent-underlines.jpeg?resize=1000%2C707&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Top row: the browsers’ default underlines; bottom row: consistent underlines with CSS. (<a href=\"https://codepen.io/simevidas/pen/poWPBoX?editors=1100\" rel=\"noopener\">Demo</a>)</figcaption></figure>\n\n\n\n<p class=\"is-style-explanation\"><strong>Note:</strong> The <code>text-decoration-thickness</code> property also has a special <a href=\"https://drafts.csswg.org/css-text-decor-4/#valdef-text-decoration-thickness-from-font\" rel=\"noopener\"><code>from-font</code> value</a> that instructs browsers to use the font’s own preferred underline width, if available. I <a href=\"https://twitter.com/simevidas/status/1469790544335450112\" rel=\"noopener\">tested</a> this value with a few different fonts, but the underlines were inconsistent.</p>\n\n\n\n<p>OK, so let&#8217;s move on to the two Chrome bugs I noted earlier.</p>\n\n\n<h3 id=\"chrome-bug-1-underlines-are-too-thin-on-macos\">Chrome bug 1: Underlines are too thin on macOS</h3>\n\n\n<p>If you set the <code>text-decoration-thickness</code> property to a font-relative length value that computes to a non-integer pixel value, Chrome will “floor” that value instead of rounding it to the nearest integer. For example, if the declared thickness is <code>0.06em</code>, and that computes to <code>1.92px</code>, Chrome will paint a thickness of <code>1px</code> instead of <code>2px</code>. This issue is limited to macOS.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  font-size: 2em; /* computes to 32px */\n  text-decoration-thickness: 0.06em; /* computes to 1.92px */\n}</code></pre>\n\n\n\n<p>In the following screenshot, notice how the text decoration lines are twice as thin in Chrome (third row) than in Safari and Firefox.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1042\" height=\"462\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=1042%2C462&#038;ssl=1\" alt=\"\" class=\"wp-image-359843\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?w=1042&amp;ssl=1 1042w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=300%2C133&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=1024%2C454&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=768%2C341&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-1.png?resize=1000%2C443&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>From top to bottom: Safari, Firefox, and Chrome on macOS. (<a href=\"https://codepen.io/simevidas/pen/qBPjavx?editors=1100\" rel=\"noopener\">Demo</a>)</figcaption></figure>\n\n\n\n<p class=\"is-style-default\">For more information about this bug, see <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1255280\" rel=\"noopener\">Chromium issue #1255280</a>.</p>\n\n\n<h3 id=\"chrome-bug-2-underlines-are-too-low\">Chrome bug 2: Underlines are too low</h3>\n\n\n<p>The <code>text-underline-offset</code> property allows us to precisely set the distance between the alphabetic baseline and the underline (the underline’s offset from the baseline). Unfortunately, this feature is currently not implemented correctly in Chrome and, as a result, the underline is positioned too low.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">h1 {\n  text-decoration: underline;\n  text-decoration-color: #f707;\n\n  /* disable “skip ink” */\n  -webkit-text-decoration-skip: none; /* Safari */\n  text-decoration-skip-ink: none;\n\n  /* cover the entire descender */\n  text-decoration-thickness: 0.175em; /* descender height */\n  text-underline-offset: 0; /* no offset from baseline */\n}</code></pre>\n\n\n\n<p>Because of this bug, it is not possible to move the underline all the way up to the baseline in Chrome.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1316\" height=\"425\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=1316%2C425&#038;ssl=1\" alt=\"\" class=\"wp-image-359846\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?w=1316&amp;ssl=1 1316w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=300%2C97&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=1024%2C331&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=768%2C248&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chrome-bug-2.png?resize=1000%2C323&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>From left to right: Safari, Firefox, and Chrome on macOS. View this demo <a href=\"https://codepen.io/simevidas/pen/QWqgVKo?editors=0100\" rel=\"noopener\">on CodePen</a>.</figcaption></figure>\n\n\n\n<p>For more information about this bug, see <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1172623\" rel=\"noopener\">Chromium issue #1172623</a>.</p>\n\n\n\n<p class=\"is-style-explanation\"><strong>Note:</strong> As you might have noticed from the image above, Safari draws underlines on top of descenders instead of beneath them. This is a <a href=\"https://bugs.webkit.org/show_bug.cgi?id=227445\" rel=\"noopener\">WebKit bug</a> that was fixed very recently. The fix should ship in the next version of Safari.</p>\n\n\n<h3 id=\"help-prioritize-the-chrome-bugs\">Help prioritize the Chrome bugs</h3>\n\n\n<p>The two new CSS properties for styling underlines are a welcome addition to CSS. Hopefully, the two related Chrome bugs will be fixed sooner rather than later. If these CSS features are important to you, make your voice heard by starring the bugs in Chromium’s bug tracker.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2000\" height=\"872\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=2000%2C872&#038;ssl=1\" alt=\"\" class=\"wp-image-359848\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=300%2C131&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=1024%2C446&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=768%2C335&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=1536%2C670&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/chromium-bug-stars.png?resize=1000%2C436&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Sign in with your Google account and click the star button on issues <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1172623\" rel=\"noopener\">#1172623</a> and <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1255280\" rel=\"noopener\">#1255280</a>.</figcaption></figure>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-underlines-are-too-thin-and-too-low-in-chrome/\">CSS Underlines Are Too Thin and Too Low in Chrome</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I’ve encountered two bugs in Chrome while testing the new CSS text-decoration-thickness and text-underline-offset properties, and I want to share them with you here in this article.\n\n\n\n\n\n\nTable of Contents\n\nDefault underlines are inconsistent\nLuckily, we can override the browsers’ defaults\nChrome bug 1: Underlines are too thin on macOS\nChrome bug 2: Underlines are too low\nHelp prioritize the Chrome bugs\n\n\nFirst, let’s acknowledge one thing:\n\n\nDefault underlines are inconsistent\n\n\nLet’s add a text link to a plain web page, set its font-family to Arial, and compare the underlines across browsers and operating systems.\n\n\n\nFrom left to right: Chrome, Safari, and Firefox on macOS; Safari on iOS; Chrome, and Firefox on Windows; Chrome, and Firefox on Android.\n\n\n\nAs you can see, the default underline is inconsistent across browsers. Each browser chooses their own default thickness and vertical position (offset from the baseline) for the underline. This is in line with the CSS Text Decoration module, which specifies the following default behavior (auto value):\n\n\n\nThe user agent chooses an appropriate thickness for text decoration lines. […] The user agent chooses an appropriate offset for underlines.\n\n\nLuckily, we can override the browsers’ defaults\n\n\nThere are two new, widely supported CSS properties that allow us to precisely define the thickness and offset for our underlines:\n\n\n\ntext-decoration-thicknesstext-underline-offset\n\n\n\nWith these properties, we can create consistent underlines even across two very different browsers, such as the Gecko-based Firefox on Android and the WebKit-based Safari on macOS.\n\n\n\nh1 {\n  text-decoration: underline;\n  text-decoration-thickness: 0.04em;\n  text-underline-offset: 0.03em;\n}\n\n\n\nTop row: the browsers’ default underlines; bottom row: consistent underlines with CSS. (Demo)\n\n\n\nNote: The text-decoration-thickness property also has a special from-font value that instructs browsers to use the font’s own preferred underline width, if available. I tested this value with a few different fonts, but the underlines were inconsistent.\n\n\n\nOK, so let’s move on to the two Chrome bugs I noted earlier.\n\n\nChrome bug 1: Underlines are too thin on macOS\n\n\nIf you set the text-decoration-thickness property to a font-relative length value that computes to a non-integer pixel value, Chrome will “floor” that value instead of rounding it to the nearest integer. For example, if the declared thickness is 0.06em, and that computes to 1.92px, Chrome will paint a thickness of 1px instead of 2px. This issue is limited to macOS.\n\n\n\na {\n  font-size: 2em; /* computes to 32px */\n  text-decoration-thickness: 0.06em; /* computes to 1.92px */\n}\n\n\n\nIn the following screenshot, notice how the text decoration lines are twice as thin in Chrome (third row) than in Safari and Firefox.\n\n\n\nFrom top to bottom: Safari, Firefox, and Chrome on macOS. (Demo)\n\n\n\nFor more information about this bug, see Chromium issue #1255280.\n\n\nChrome bug 2: Underlines are too low\n\n\nThe text-underline-offset property allows us to precisely set the distance between the alphabetic baseline and the underline (the underline’s offset from the baseline). Unfortunately, this feature is currently not implemented correctly in Chrome and, as a result, the underline is positioned too low.\n\n\n\nh1 {\n  text-decoration: underline;\n  text-decoration-color: #f707;\n\n  /* disable “skip ink” */\n  -webkit-text-decoration-skip: none; /* Safari */\n  text-decoration-skip-ink: none;\n\n  /* cover the entire descender */\n  text-decoration-thickness: 0.175em; /* descender height */\n  text-underline-offset: 0; /* no offset from baseline */\n}\n\n\n\nBecause of this bug, it is not possible to move the underline all the way up to the baseline in Chrome.\n\n\n\nFrom left to right: Safari, Firefox, and Chrome on macOS. View this demo on CodePen.\n\n\n\nFor more information about this bug, see Chromium issue #1172623.\n\n\n\nNote: As you might have noticed from the image above, Safari draws underlines on top of descenders instead of beneath them. This is a WebKit bug that was fixed very recently. The fix should ship in the next version of Safari.\n\n\nHelp prioritize the Chrome bugs\n\n\nThe two new CSS properties for styling underlines are a welcome addition to CSS. Hopefully, the two related Chrome bugs will be fixed sooner rather than later. If these CSS features are important to you, make your voice heard by starring the bugs in Chromium’s bug tracker.\n\n\n\nSign in with your Google account and click the star button on issues #1172623 and #1255280.\n\nCSS Underlines Are Too Thin and Too Low in Chrome originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-04T15:30:18.000Z",
      "date_modified": "2022-01-04T15:30:18.000Z",
      "_plugin": {
        "pageFilename": "c3247eb3e5ca8e2fa5140c485a3d75b24c681f563648beced0123b93cdeb2175.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360452",
      "url": "https://css-tricks.com/jetpack-features-we-love-and-use-at-css-tricks/",
      "title": "Jetpack Features We Love and Use at CSS-Tricks",
      "summary": "(This is a sponsored post.)\nWe use and love Jetpack around here. It’s a WordPress plugin that brings a whole suite of functionality to your site ranging from security to marketing with lots of ridiculously useful stuff in between! …\n\nJetpack Features We Love and Use at CSS-Tricks originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p><meta charset=\"utf-8\">We use and love <a href=\"https://jetpack.com/?aff=8638\" rel=\"noopener\">Jetpack</a> around here. It&#8217;s a WordPress plugin that brings a whole suite of functionality to your site ranging from security to marketing with lots of ridiculously useful stuff in between! Here&#8217;s our favorite features around&nbsp;here.</p>\n\n\n\n<span id=\"more-360452\"></span>\n\n\n\n<div class=\"wp-block-columns ticss-ddea03eb\">\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-30791cf4 jetpack-box\"><div class=\"wp-block-group__inner-container\"><h2 id=\"powerful-search\">Powerful Search</h2>\n\n\n<p>Jetpack&#8217;s Search feature gives your site an incredibly powerful search engine with the flip of a switch. You get a very fast, truly <strong>intelligent search</strong> for your entire site that is easily sortable and filterable with <a href=\"https://css-tricks.com/jetpack-instant-search/\">literally zero work on your part</a>. You can&#8217;t rely on default WordPress search — this is a must-have. Bonus: it&#8217;s all handled offsite, so there is minimal burden on your server.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2700\" height=\"2278\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=2700%2C2278&#038;ssl=1\" alt=\"Showing the full-page JetPack search feature.\" class=\"wp-image-360439\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?w=2700&amp;ssl=1 2700w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=300%2C253&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=1024%2C864&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=768%2C648&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=1536%2C1296&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=2048%2C1728&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/jetpack-search.png?resize=1000%2C844&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/search/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-634991b5 jetpack-box\"><div class=\"wp-block-group__inner-container\"><h2 id=\"backups-amp-activity\">Backups &amp; Activity</h2>\n\n\n<p>We sleep easy knowing CSS-Tricks is entirely backed up in <strong>real-time</strong>. Everything is backed up from the site&#8217;s content, comments, settings, theme files, media, even WordPress itself. </p>\n\n\n\n<p>An activity log shows off everything that happens on the site, and I use that same log to restore the site to any point in time.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1790\" height=\"1942\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=1790%2C1942&#038;ssl=1\" alt=\"Showing a timeline log of site changes in Jetpack Backup.\" class=\"wp-image-306950\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?w=1790&amp;ssl=1 1790w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=277%2C300&amp;ssl=1 277w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=944%2C1024&amp;ssl=1 944w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=768%2C833&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=1416%2C1536&amp;ssl=1 1416w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-11.47.03-AM.png?resize=1000%2C1085&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/upgrade/backup/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns ticss-2cedae8d\">\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-335c9a47 jetpack-box\"><div class=\"wp-block-group__inner-container\"><h2 id=\"performant-media\">Performant Media </h2>\n\n\n<p>There are at least four things you have to do with images on websites to make sure you&#8217;re serving them in a performance responsible way: (1) use the responsive images syntax to serve an appropriately sized version, (2) optimize the image, (3) lazy load the image, and (4) serve the image from a CDN. Fortunately, WordPress itself helps with #1, which can be tricky. Jetpack helps with the others with the flip of a switch.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1394\" height=\"584\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=1394%2C584&#038;ssl=1\" alt=\"\" class=\"wp-image-306938\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?w=1394&amp;ssl=1 1394w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=300%2C126&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=1024%2C429&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=768%2C322&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.52.23-AM.png?resize=1000%2C419&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/site-accelerator/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n\n\n\n<p>And don&#8217;t forget about video! <a href=\"https://jetpack.com/videopress/?aff=8638\" rel=\"noopener\">VideoPress</a> does even more for your hosted videos. No ads, beautiful feature-rich player, CDN-hosted optimized video, poster graphics for mobile, and you do absolutely nothing different with your workflow: just drag and drop videos into posts.</p>\n</div>\n\n\n\n<div class=\"wp-block-column\"><h2 id=\"markdown\">Markdown</h2>\n\n\n<p>Writing content in Markdown can be awful handy. Especially on a developer-focused site, it makes sense to offer it to users in the comment section. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2360\" height=\"1044\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=2360%2C1044&#038;ssl=1\" alt=\"\" class=\"wp-image-306933\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?w=2360&amp;ssl=1 2360w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=300%2C133&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=1024%2C453&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=768%2C340&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=1536%2C679&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=2048%2C906&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.42.51-AM.png?resize=1000%2C442&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>With Jetpack Markdown, you also get a Markdown block to use in the block editor so you can write in chunks of Markdown wherever needed.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1060\" height=\"428\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=1060%2C428&#038;ssl=1\" alt=\"\" class=\"wp-image-360441\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?w=1060&amp;ssl=1 1060w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=300%2C121&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=1024%2C413&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=768%2C310&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2022/01/markdown-block.png?resize=1000%2C404&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/markdown/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-9decf36b jetpack-box\"><div class=\"wp-block-group__inner-container\"><h2 id=\"related-posts\">Related Posts</h2>\n\n\n<p>CSS-Tricks has thousands of pages of content! It&#8217;s a challenge for us to surface all the best stuff, particularly on a per-topic basis and without having to hand-pick everything. Showing related posts is tricky to pull off and we love that Jetpack does a great job with it, all without burdening our servers the way other related content solutions can.</p>\n</div></div>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2446\" height=\"714\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?fit=1024%2C299&amp;ssl=1\" alt=\"\" class=\"wp-image-306937\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?w=2446&amp;ssl=1 2446w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=300%2C88&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=1024%2C299&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=768%2C224&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=1536%2C448&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=2048%2C598&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-8.49.22-AM.png?resize=1000%2C292&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/support/related-posts/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<div class=\"wp-block-group ticss-b9939e63 jetpack-box\"><div class=\"wp-block-group__inner-container\"><h2 id=\"social-connections\">Social Connections</h2>\n\n\n<p>We like to tell the world as best as we can when we publish new content. Rather than having to do that manually, we can share the post to Twitter and Facebook the second we hit that &#8220;Publish&#8221; button. You can always head back to older content and <a href=\"https://jetpack.com/2021/12/07/jetpack-10-4-re-publish-social-posts-from-the-block-editor/?aff=8638\" rel=\"noopener\">re-publish</a> to social media as well.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-10.47.05-AM.png?resize=247%2C366&#038;ssl=1\" alt=\"Showing the Jetpack publishing settings prior to publishing the post. It shows options to publish to Twitter and Facebook and an area to customize the message.\" class=\"wp-image-306947\" width=\"247\" height=\"366\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-10.47.05-AM.png?w=634&amp;ssl=1 634w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-16-at-10.47.05-AM.png?resize=202%2C300&amp;ssl=1 202w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://jetpack.com/features/traffic/automatic-publishing/?aff=8638\" rel=\"noopener\">Read More</a></div>\n</div>\n</div></div>\n</div>\n</div>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>This isn&#8217;t a complete list. The official <a href=\"https://jetpack.com/features/?aff=8638\" rel=\"noopener\">features page</a> will show you even more. Every site&#8217;s needs will be different. There are all sorts of security, design, and promotion features that might be <em>your</em> favorites. If you manage a lot of WordPress sites, as agencies often too, take note there is <a href=\"https://jetpack.com/2021/10/27/announcing-jetpack-licensing/?aff=8638\" rel=\"noopener\">a new Licensing Portal</a> to manage billing across multiple sites much more easily.  </p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/jetpack-features-we-love-and-use-at-css-tricks/\">Jetpack Features We Love and Use at CSS-Tricks</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "(This is a sponsored post.)\nWe use and love Jetpack around here. It’s a WordPress plugin that brings a whole suite of functionality to your site ranging from security to marketing with lots of ridiculously useful stuff in between! Here’s our favorite features around here.\n\n\n\n\n\n\n\n\n\nPowerful Search\n\n\nJetpack’s Search feature gives your site an incredibly powerful search engine with the flip of a switch. You get a very fast, truly intelligent search for your entire site that is easily sortable and filterable with literally zero work on your part. You can’t rely on default WordPress search — this is a must-have. Bonus: it’s all handled offsite, so there is minimal burden on your server.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\n\nBackups & Activity\n\n\nWe sleep easy knowing CSS-Tricks is entirely backed up in real-time. Everything is backed up from the site’s content, comments, settings, theme files, media, even WordPress itself. \n\n\n\nAn activity log shows off everything that happens on the site, and I use that same log to restore the site to any point in time.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\n\n\n\nPerformant Media \n\n\nThere are at least four things you have to do with images on websites to make sure you’re serving them in a performance responsible way: (1) use the responsive images syntax to serve an appropriately sized version, (2) optimize the image, (3) lazy load the image, and (4) serve the image from a CDN. Fortunately, WordPress itself helps with #1, which can be tricky. Jetpack helps with the others with the flip of a switch.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\nAnd don’t forget about video! VideoPress does even more for your hosted videos. No ads, beautiful feature-rich player, CDN-hosted optimized video, poster graphics for mobile, and you do absolutely nothing different with your workflow: just drag and drop videos into posts.\n\n\n\n\nMarkdown\n\n\nWriting content in Markdown can be awful handy. Especially on a developer-focused site, it makes sense to offer it to users in the comment section. \n\n\n\n\n\n\n\nWith Jetpack Markdown, you also get a Markdown block to use in the block editor so you can write in chunks of Markdown wherever needed.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\n\n\nRelated Posts\n\n\nCSS-Tricks has thousands of pages of content! It’s a challenge for us to surface all the best stuff, particularly on a per-topic basis and without having to hand-pick everything. Showing related posts is tricky to pull off and we love that Jetpack does a great job with it, all without burdening our servers the way other related content solutions can.\n\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\nSocial Connections\n\n\nWe like to tell the world as best as we can when we publish new content. Rather than having to do that manually, we can share the post to Twitter and Facebook the second we hit that “Publish” button. You can always head back to older content and re-publish to social media as well.\n\n\n\n\n\n\n\n\nRead More\n\n\n\n\n\n\n\n\n\n\n\nThis isn’t a complete list. The official features page will show you even more. Every site’s needs will be different. There are all sorts of security, design, and promotion features that might be your favorites. If you manage a lot of WordPress sites, as agencies often too, take note there is a new Licensing Portal to manage billing across multiple sites much more easily.  \n\nJetpack Features We Love and Use at CSS-Tricks originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-04T15:28:03.000Z",
      "date_modified": "2022-01-04T15:28:03.000Z",
      "_plugin": {
        "pageFilename": "eaa92dfb6c0284fa6017cdce9a223fba9ce3345bb04a6aabb964d3bc78b71a57.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360385",
      "url": "https://css-tricks.com/css-based-fingerprinting/",
      "title": "CSS-Based Fingerprinting",
      "summary": "Fingerprinting is bad. It’s a term that refers to building up enough metadata about a user that you can essentially figure out who they are. JavaScript has access to all sorts of fingerprinting possibilities, which then combined with the IP …\n\nCSS-Based Fingerprinting originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>Fingerprinting is bad. It&#8217;s a term that refers to building up enough metadata about a user that you can essentially figure out who they are. JavaScript has access to all sorts of fingerprinting possibilities, which then combined with the IP address that the server has access to, means fingerprinting is all too common. </p>\n\n\n\n<p>You don&#8217;t generally think of CSS as being a fingerprinting vector though, and thus &#8220;safe&#8221; in that way. But Oliver Brotchie <a href=\"https://csstracking.dev/\" rel=\"noopener\">has documented an idea</a> that allows for some degree of<a href=\"https://csstracking.dev/\" rel=\"noopener\"> </a>fingerprinting with CSS alone. </p>\n\n\n\n<span id=\"more-360385\"></span>\n\n\n\n<p>Think of all the <code>@media</code> queries we have. We can test for pointer type with <code>any-pointer</code>. Imagine that for each value, we request a totally unique <code>background-image</code> from a server. If that image was requested, we know those <code>@media</code> queries were true. We can start to fingerprint with something like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.pointer {\n  background-image: url('/unique-id/pointer=none')\n}\n\n@media (any-pointer: coarse) {\n  .pointer {\n    background-image: url('/unique-id/pointer=coarse')\n  }\n}\n\n@media (any-pointer: fine) {\n  .pointer {\n    background-image: url('/unique-id/pointer=fine')\n  }\n}</code></pre>\n\n\n\n<p>Combine that with the fact that we can test for a dark mode preference with <code>prefers-color-scheme</code>, the fingerprint gets a bit clearer. In fact, it&#8217;s the <a href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/#what-lies-ahead\">current draft for CSS</a> user prefer media queries that Oliver is most concerned about:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Not only will the upcoming draft make this method scalable, but it will also increase its precision. Currently, without alternative means, it is hard to conclusively link every request to a specific visitor as the only feasible way to determine their origin, is to group the requests by the IP address of the connection. However, with the new draft, by generating a randomised string and interpolating it into the URL tag for every visitor, we can accurately identify all requests from said visitor.</p></blockquote>\n\n\n\n<p>There are tons more. We can make media queries that are <code>1px</code> apart and request a background image for each, perfectly guessing the visitor&#8217;s window size. There are probably a dozen or more exotic media queries that are rarely used, but are useful specifically to fingerprinting with CSS. Combine that with <code>@supports</code> queries for all sorts of things to essentially guess the exact browser. <em>And combine that</em> with the classic technique of testing for installation of specific local fonts, and you have a half-decent fingerprinting machine. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@font-face {\n  font-family: 'some-font';\n  src: local(some font), url('/unique-id/some-font');\n}\n\n.some-font {\n  font-family:'some-font';\n}</code></pre>\n\n\n\n<p>The generated CSS to do it is massive (<a href=\"https://github.com/OliverBrotchie/CSS-Fingerprint/blob/main/fingerprint.sass\" rel=\"noopener\">here&#8217;s the Sass</a> to generate it), but apparently it&#8217;s heavily reduced once we can use custom properties in URLs. </p>\n\n\n\n<p>I&#8217;m not heavily worried about it, mostly because I don&#8217;t disable JavaScript and JavaScript is so much more widely capable of fingerprinting already. Plus, there are already other types of CSS security vulnerabilities, from reading visited links (which browsers have addressed), keylogging, and user-generated inline styles, among others that folks have pointed out in <a href=\"https://css-tricks.com/css-security-vulnerabilities/\">another article on the topic</a>.</p>\n\n\n\n<p>But Oliver&#8217;s research on fingerprinting is really good and worthy of a look by everyone who knows more about web security than I do.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-based-fingerprinting/\">CSS-Based Fingerprinting</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Fingerprinting is bad. It’s a term that refers to building up enough metadata about a user that you can essentially figure out who they are. JavaScript has access to all sorts of fingerprinting possibilities, which then combined with the IP address that the server has access to, means fingerprinting is all too common. \n\n\n\nYou don’t generally think of CSS as being a fingerprinting vector though, and thus “safe” in that way. But Oliver Brotchie has documented an idea that allows for some degree of fingerprinting with CSS alone. \n\n\n\n\n\n\n\nThink of all the @media queries we have. We can test for pointer type with any-pointer. Imagine that for each value, we request a totally unique background-image from a server. If that image was requested, we know those @media queries were true. We can start to fingerprint with something like this:\n\n\n\n.pointer {\n  background-image: url('/unique-id/pointer=none')\n}\n\n@media (any-pointer: coarse) {\n  .pointer {\n    background-image: url('/unique-id/pointer=coarse')\n  }\n}\n\n@media (any-pointer: fine) {\n  .pointer {\n    background-image: url('/unique-id/pointer=fine')\n  }\n}\n\n\n\nCombine that with the fact that we can test for a dark mode preference with prefers-color-scheme, the fingerprint gets a bit clearer. In fact, it’s the current draft for CSS user prefer media queries that Oliver is most concerned about:\n\n\n\nNot only will the upcoming draft make this method scalable, but it will also increase its precision. Currently, without alternative means, it is hard to conclusively link every request to a specific visitor as the only feasible way to determine their origin, is to group the requests by the IP address of the connection. However, with the new draft, by generating a randomised string and interpolating it into the URL tag for every visitor, we can accurately identify all requests from said visitor.\n\n\n\nThere are tons more. We can make media queries that are 1px apart and request a background image for each, perfectly guessing the visitor’s window size. There are probably a dozen or more exotic media queries that are rarely used, but are useful specifically to fingerprinting with CSS. Combine that with @supports queries for all sorts of things to essentially guess the exact browser. And combine that with the classic technique of testing for installation of specific local fonts, and you have a half-decent fingerprinting machine. \n\n\n\n@font-face {\n  font-family: 'some-font';\n  src: local(some font), url('/unique-id/some-font');\n}\n\n.some-font {\n  font-family:'some-font';\n}\n\n\n\nThe generated CSS to do it is massive (here’s the Sass to generate it), but apparently it’s heavily reduced once we can use custom properties in URLs. \n\n\n\nI’m not heavily worried about it, mostly because I don’t disable JavaScript and JavaScript is so much more widely capable of fingerprinting already. Plus, there are already other types of CSS security vulnerabilities, from reading visited links (which browsers have addressed), keylogging, and user-generated inline styles, among others that folks have pointed out in another article on the topic.\n\n\n\nBut Oliver’s research on fingerprinting is really good and worthy of a look by everyone who knows more about web security than I do.\n\nCSS-Based Fingerprinting originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-03T21:45:10.000Z",
      "date_modified": "2022-01-03T21:45:10.000Z",
      "_plugin": {
        "pageFilename": "2cb7f5fbced9915e912da31ac839ebb4b1042cce9d3e18ae9821525746428e81.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359615",
      "url": "https://css-tricks.com/how-to-create-a-browser-extension/",
      "title": "How to Create a Browser Extension",
      "summary": "I’ll bet you are using browser extensions right now. Some of them are extremely popular and useful, like ad blockers, password managers, and PDF viewers. These extensions (or “add-ons”) are not limited to those purposes — you can do a …\n\nHow to Create a Browser Extension originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I’ll bet you are using browser extensions right now. Some of them are extremely popular and useful, like ad blockers, password managers, and PDF viewers. These extensions (or &#8220;add-ons&#8221;) are not limited to those purposes — you can do a lot more with them! In this article, I will give you an introduction on how to create one. Ultimately, we’ll make it work in multiple browsers.</p>\n\n\n\n<span id=\"more-359615\"></span>\n\n\n<h3 id=\"what-were-making\">What we’re making</h3>\n\n\n<p>We’re making an extension called <strong>&#8220;Transcribers of Reddit&#8221;</strong> and it’s going to improve Reddit’s accessibility by moving specific comments to the top of the comment section and adding <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\" rel=\"noopener\"><code>aria-</code> attributes</a> for screen readers. We will also take our extension a little further with options for adding borders and backgrounds to comments for better text contrast.</p>\n\n\n\n<p>The whole idea is that you’ll get a nice introduction for how to develop a browser extension. We will start by creating the extension for Chromium-based browsers (e.g. Google Chrome, Microsoft Edge, Brave, etc.). In a future post we will port the extension to work with Firefox, as well as Safari which <a href=\"https://webkit.org/blog/11989/new-webkit-features-in-safari-15/\" rel=\"noopener\">recently added support for Web Extensions</a> in both the MacOS and iOS versions of the browser.</p>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/Lars418/torExtension\" rel=\"noopener\">GitHub repo</a></div>\n</div>\n\n\n\n<p>Ready? Let’s take this one step at a time.</p>\n\n\n<h3 id=\"create-a-working-directory\">Create a working directory</h3>\n\n\n<p>Before anything else, we need a working space for our project. All we really need is to create a folder and give it a name (which I’m calling <code>transcribers-of-reddit</code>). Then, create another folder inside that one named <code>src</code> for our source code.</p>\n\n\n<h3 id=\"define-the-entry-point\">Define the entry point</h3>\n\n\n<p>The entry point is a file that contains general information about the extension (i.e. extension name, description, etc.) and defines permissions or scripts to execute.</p>\n\n\n\n<p>Our entry point can be a <code>manifest.json</code> file located in the <code>src</code> folder we just created. In it, let’s add the following three properties:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\"\n}</code></pre>\n\n\n\n<p>The <code>manifest_version</code> is similar to version in npm or Node. It defines what APIs are available (or not). We’re going to work on the bleeding edge and use the latest version, 3 (also known as as <code>mv3</code>).</p>\n\n\n\n<p>The second property is <code>name</code> and it specifies our extension name. This name is what’s displayed everywhere our extension appears, like <a href=\"https://chrome.google.com/webstore\" rel=\"noopener\">Chrome Web Store</a> and the <code>chrome://extensions</code> page in the Chrome browser.</p>\n\n\n\n<p>Then there’s <code>version</code>. It labels the extension with a version number. Keep in mind that this property (in contrast to <code>manifest_version</code>) is a string that can only contain numbers and dots (e.g. 1.3.5).</p>\n\n\n<h3 id=\"more-manifestjson-information\">More <code>manifest.json</code> information</h3>\n\n\n<p>There’s actually a lot more we can add to help add context to our extension. For example, we can provide a <code>description</code> that explains what the extension does. It’s a good idea to provide these sorts of things, as it gives users a better idea of what they’re getting into when they use it.</p>\n\n\n\n<p>In this case, we’re not only adding a description, but supplying icons and a web address that Chrome Web Store points to on the extension’s page.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\"\n}</code></pre>\n\n\n\n<ul><li>The <code>description</code> is displayed on Chrome’s management page (<code>chrome://extensions</code>) and should be brief, less than 132 characters.</li><li>The <code>icons</code> are used in lots of places. As the <a href=\"https://developer.chrome.com/docs/extensions/mv3/manifest/icons/\" rel=\"noopener\">docs</a> state, it’s best to provide three versions of the same icon in different resolutions, preferably as a PNG file. Feel free to use the ones in the <a href=\"https://github.com/Lars418/torExtension/tree/main/src/images/logo\" rel=\"noopener\">GitHub repository</a> for this example.</li><li>The <code>homepage_url</code> can be used to connect your website with the extension. A button including the link will be displayed when clicking on &#8220;More details&#8221; on the management page.</li></ul>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img loading=\"lazy\" width=\"566\" height=\"851\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/image-2.png?resize=566%2C851&#038;ssl=1\" alt=\"\" class=\"wp-image-359642\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/image-2.png?w=566&amp;ssl=1 566w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/image-2.png?resize=200%2C300&amp;ssl=1 200w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Our opened extension card inside the extension management page.</figcaption></figure></div>\n\n\n<h3 id=\"setting-permissions\">Setting permissions</h3>\n\n\n<p>One major advantage extensions have is that their APIs allow you to interact directly with the browser. But we have to explicitly give the extension those permissions, which also goes inside the <code>manifest.json</code> file.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"13,14,15,16\"><code markup=\"tt\">\n{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\",\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\",\n\n  \"permissions\": [\n    \"storage\",\n    \"webNavigation\"\n  ]\n}</code></pre>\n\n\n\n<p>What did we just give this extension permission to? First, storage. We want this extension to be able to save the user’s settings, so we need to access the browser’s web storage to hold them. For example, if the user wants red borders on the comments, then we’ll save that for next time rather than making them set it again.</p>\n\n\n\n<p>We also gave the extension permission to look at how the user navigated to the current screen. Reddit is a single-page application (SPA) which means it doesn’t trigger a page refresh. We need to &#8220;catch&#8221; this interaction, as Reddit will only load the comments of a post if we click on it. So, that’s why we’re tapping into <code>webNavigation</code>.</p>\n\n\n\n<p>We’ll get to executing code on a page later as it requires a whole new entry inside <code>manifest.json</code>.</p>\n\n\n\n<p>/explanation Depending on which permissions are allowed, the browser might display a warning to the user to accept the permissions. It’s only certain ones, though, and <a href=\"https://developer.chrome.com/docs/extensions/mv3/permission_warnings/#permissions_with_warnings\" rel=\"noopener\">Chrome has a nice outline of them</a>.</p>\n\n\n<h3 id=\"managing-translations\">Managing translations</h3>\n\n\n<p>Browser extensions have a built-in internalization (i18n) API. It allows you to manage translations for multiple languages (<a href=\"https://developer.chrome.com/docs/webstore/i18n/#choosing-locales-to-support\" rel=\"noopener\">full list</a>). To use the API, we have to define our translations and default language right in the <code>manifest.json</code> file:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"default_locale\": \"en\"</code></pre>\n\n\n\n<p>This sets English as the language. In the event that a browser is set to any other language that isn’t supported, the extension will fall back to the default locale (<code>en</code> in this example).</p>\n\n\n\n<p>Our translations are defined inside the <code>_locales</code> directory. Let’s create another folder in there each language you want to support. Each subdirectory gets its own <code>messages.json</code> file.</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">src \n └─ _locales\n     └─ en\n        └─ messages.json\n     └─ fr\n        └─ messages.json</code></pre>\n\n\n\n<p>A translation file consists of multiple parts:</p>\n\n\n\n<ul><li><strong>Translation key (&#8220;id&#8221;):</strong> This key is used to reference the translation.</li><li><strong>Message:</strong> The actual translation content</li><li><strong>Description (optional):</strong> Describes the translation (I wouldn’t use them, they just bloat up the file and your translation key should be descriptive enough)</li><li><strong>Placeholders (optional):</strong> Can be used to insert dynamic content inside a translation</li></ul>\n\n\n\n<p>Here’s an example that pulls all that together:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"userGreeting\": { // Translation key (\"id\")\n    \"message\": \"Good $daytime$, $user$!\" // Translation\n    \"description\": \"User Greeting\", // Optional description for translators\n    \"placeholders\": { // Optional placeholders\n      \"daytime\": { // As referenced inside the message\n        \"content\": \"$1\",\n        \"example\": \"morning\" // Example value for our content\n      },\n      \"user\": { \n        \"content\": \"$1\",\n        \"example\": \"Lars\"\n      }\n    }\n  }\n}</code></pre>\n\n\n\n<p>Using placeholders is a bit more challenging. At first we need to define the placeholder inside the message. A placeholder needs to be wrapped in between <code>$</code> characters. Afterwards, we have to add our placeholder to the &#8220;placeholder list.&#8221; This is a bit unintuitive, but Chrome wants to know what value should be inserted for our placeholders. We (obviously) want to use a dynamic value here, so we use the special <code>content</code> value <code>$1</code> which references our inserted value.</p>\n\n\n\n<p>The <code>example</code> property is optional. It can be used to give translators a hint what value the placeholder could be (but is not actually displayed).</p>\n\n\n\n<p>We need to define the following translations for our extension. Copy and paste them into the <code>messages.json</code> file. Feel free to add more languages (e.g. if you speak German, add a <code>de</code> folder inside <code>_locales</code>, and so on).</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  \"name\": {\n    \"message\": \"Transcribers of Reddit\"\n  },\n  \"description\": {\n    \"message\": \"Accessible image descriptions for subreddits.\"\n  },\n  \"popupManageSettings\": {\n    \"message\": \"Manage settings\"\n  },\n  \"optionsPageTitle\": {\n    \"message\": \"Settings\"\n  },\n  \"sectionGeneral\": {\n    \"message\": \"General settings\"\n  },\n  \"settingBorder\": {\n    \"message\": \"Show comment border\"\n  },\n  \"settingBackground\": {\n    \"message\": \"Show comment background\"\n  }\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">You might be wondering why we registered the permissions when there is no sign of an i18n permission, right? Chrome is a bit weird in that regard, as you don’t need to register every permission. Some (e.g. <code>chrome.i18n</code>) don’t require an entry inside the manifest. Other permissions require an entry but won’t be displayed to the user when installing the extension. Some other permissions are &#8220;hybrid&#8221; (e.g. <code>chrome.runtime</code>), meaning some of their functions can be used without declaring a permission—but other functions of the same API require one entry in the manifest. You’ll want to take a look at the <a href=\"https://developer.chrome.com/docs/extensions/reference/\" rel=\"noopener\">documentation</a> for a solid overview of the differences.</p>\n\n\n<h4 id=\"using-translations-inside-the-manifest\">Using translations inside the manifest</h4>\n\n\n<p>The first thing our end user will see is either the entry inside the Chrome Web Store or the extension overview page. We need to adjust our manifest file to make sure everything os translated.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">{\n  // Update these entries\n  \"name\": \"__MSG_name__\",\n  \"description\": \"__MSG_description__\"\n}</code></pre>\n\n\n\n<p>Applying this syntax uses the corresponding translation in our <code>messages.json</code> file (e.g. <code>_MSG_name_</code> uses the <code>name</code> translation).</p>\n\n\n<h4 id=\"using-translations-in-html-pages\">Using translations in HTML pages</h4>\n\n\n<p>Applying translations in an HTML file takes a little JavaScript.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.i18n.getMessage('name');</code></pre>\n\n\n\n<p>That code returns our defined translation (which is <code>Transcribers of Reddit</code>). Placeholders can be done in a similar way.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.i18n.getMessage('userGreeting', {\n  daytime: 'morning',\n  user: 'Lars'\n});</code></pre>\n\n\n\n<p>It would be a pain in the butt to apply translations to all elements this way. But we can write a little script that performs the translation based on a <code>data-</code> attribute. So, let’s create a new <code>js</code> folder inside the <code>src</code> directory, then add a new <code>util.js</code> file in it.</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">src \n └─ js\n     └─ util.js</code></pre>\n\n\n\n<p>This gets the job done:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const i18n = document.querySelectorAll(\"[data-intl]\");\ni18n.forEach(msg => {\n  msg.innerHTML = chrome.i18n.getMessage(msg.dataset.intl);\n});\n\nchrome.i18n.getAcceptLanguages(languages => {\n  document.documentElement.lang = languages[0];\n});</code></pre>\n\n\n\n<p>Once that script is added to an HTML page, we can add the <code>data-intl</code> attribute to an element to set its content. The document language will also be set based on the user language.</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- Before JS execution -->\n&lt;html>\n  &lt;body>\n    &lt;button data-intl=\"popupManageSettings\">&lt;/button>\n  &lt;/body>\n&lt;/html></code></pre>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- After JS execution -->\n&lt;html lang=\"en\">\n  &lt;body>\n    &lt;button data-intl=\"popupManageSettings\">Manage settings&lt;/button>\n  &lt;/body>\n&lt;/html></code></pre>\n</div>\n</div>\n\n\n<h3 id=\"adding-a-popup-and-options-page\">Adding a pop-up and options page</h3>\n\n\n<p>Before we dive into actual programming, we we need to create two pages:</p>\n\n\n\n<ol><li>An options page that contains user settings</li><li>A pop-up page that opens when interacting with the extension icon right next to our address bar. This page can be used for various scenarios (e.g. for displaying stats or quick settings).</li></ol>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"820\" height=\"298\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?resize=820%2C298&#038;ssl=1\" alt=\"\" class=\"wp-image-359621\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?w=820&amp;ssl=1 820w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?resize=300%2C109&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653699948_image.png?resize=768%2C279&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The options page containg our settings.</figcaption></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"356\" height=\"143\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image.png?resize=356%2C143&#038;ssl=1\" alt=\"\" class=\"wp-image-359622\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image.png?w=356&amp;ssl=1 356w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image.png?resize=300%2C121&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The pop-up containg a link to the options page.</figcaption></figure>\n</div>\n</div>\n\n\n\n<p>Here’s an outline of the folders and files we need in order to make the pages:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">src \n ├─ css\n |    └─ paintBucket.css\n ├─ popup\n |    ├─ popup.html\n |    ├─ popup.css\n |    └─ popup.js\n └─ options\n      ├─ options.html\n      ├─ options.css\n      └─ options.js</code></pre>\n\n\n\n<p>The <code>.css</code> files contain plain CSS, nothing more and nothing less. I won’t into detail because I know most of you reading this are already fully aware of how CSS works. You can copy and paste the styles from the <a href=\"https://github.com/Lars418/torExtension/tree/main/src\" rel=\"noopener\">GitHub repository</a> for this project.</p>\n\n\n\n<p class=\"is-style-explanation\">Note that the pop-up is not a tab and that its size depends on the content in it. If you want to use a fixed popup size, you can set the <code>width</code> and <code>height</code> properties on the <code>html</code> element.</p>\n\n\n<h4 id=\"creating-the-popup\">Creating the pop-up</h4>\n\n\n<p>Here’s an HTML skeleton that links up the CSS and JavaScript files and adds a headline and button inside the <code>&lt;body&gt;</code>.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!doctype html>\n&lt;html lang=\"en\">\n  &lt;head>\n    &lt;meta charset=\"UTF-8\">\n    &lt;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    &lt;title data-intl=\"name\">&lt;/title>\n\n    &lt;link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n    &lt;link rel=\"stylesheet\" href=\"popup.css\">\n\n    &lt;!-- Our \"translation\" script -->\n    &lt;script src=\"../js/util.js\" defer>&lt;/script>\n    &lt;script src=\"popup.js\" defer>&lt;/script>\n  &lt;/head>\n  &lt;body>\n    &lt;h1 id=\"title\">&lt;/h1>\n    &lt;button data-intl=\"popupManageSettings\">&lt;/button>\n  &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The <code>h1</code> contains the extension name and version; the <code>button</code> is used to open the options page. The headline will not be filled with a translation (because it lacks a <code>data-intl</code> attribute), and the button doesn’t have any click handler yet, so we need to populate our <code>popup.js</code> file:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const title = document.getElementById('title');\nconst settingsBtn = document.querySelector('button');\nconst manifest = chrome.runtime.getManifest();\n\ntitle.textContent = `${manifest.name} (${manifest.version})`;\n\nsettingsBtn.addEventListener('click', () => {\n  chrome.runtime.openOptionsPage();\n});</code></pre>\n\n\n\n<p>This script first looks for the manifest file. Chrome offers the <code>runtime</code> API which contains the <code>getManifest</code> method (this specific method does not require the <code>runtime</code> permission). It returns our <code>manifest.json</code> as a JSON object. After we populate the title with the extension name and version, we can add an event listener to the settings button. If the user interacts with it, we will open the options page using <code>chrome.runtime.openOptionsPage()</code> (again no permission entry needed).</p>\n\n\n\n<p>The pop-up page is now finished, but the extension doesn’t know it exists yet. We have to register the pop-up by appending the following property to the <code>manifest.json</code> file.</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"action\": {\n  \"default_popup\": \"popup/popup.html\",\n  \"default_icon\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  }\n},</code></pre>\n\n\n<h4 id=\"creating-the-options-page\">Creating the options page</h4>\n\n\n<p>Creating this page follows a pretty similar process as what we just completed. First, we populate our <code>options.html</code> file. Here’s some markup we can use:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!doctype html>\n&lt;html lang=\"en\">\n&lt;head>\n  &lt;meta charset=\"UTF-8\">\n  &lt;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  &lt;title data-intl=\"name\">&lt;/title>\n\n  &lt;link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n  &lt;link rel=\"stylesheet\" href=\"options.css\">\n\n  &lt;!-- Our \"translation\" script -->\n  &lt;script src=\"../js/util.js\" defer>&lt;/script>\n  &lt;script src=\"options.js\" defer>&lt;/script>\n&lt;/head>\n&lt;body>\n  &lt;header>\n    &lt;h1>\n      &lt;!-- Icon provided by feathericons.com -->\n      &lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" role=\"presentation\">\n        &lt;circle cx=\"12\" cy=\"12\" r=\"3\">&lt;/circle>\n        &lt;path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\">&lt;/path>\n      &lt;/svg>\n      &lt;span data-intl=\"optionsPageTitle\">&lt;/span>\n    &lt;/h1>\n  &lt;/header>\n\n  &lt;main>\n    &lt;section id=\"generalOptions\">\n      &lt;h2 data-intl=\"sectionGeneral\">&lt;/h2>\n\n      &lt;div id=\"generalOptionsWrapper\">&lt;/div>\n    &lt;/section>\n  &lt;/main>\n\n  &lt;footer>\n    &lt;p>Transcribers of Reddit extension by &lt;a href=\"https://lars.koelker.dev\" target=\"_blank\">lars.koelker.dev&lt;/a>.&lt;/p>\n    &lt;p>Reddit is a registered trademark of Reddit, Inc. This extension is not endorsed or affiliated with Reddit, Inc. in any way.&lt;/p>\n  &lt;/footer>\n&lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>There are no actual options yet (just their wrappers). We need to write the script for the options page. First, we define variables to access our wrappers and default settings inside <code>options.js</code>. &#8220;Freezing&#8221; our default settings prevents us from accidentally modifying them later.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const defaultSettings = Object.freeze({\n  border: false,\n  background: false,\n});\nconst generalSection = document.getElementById('generalOptionsWrapper');\n</code></pre>\n\n\n\n<p>Next, we need to load the saved settings. We can use the (previously registered) <code>storage</code> API for that. Specifically, we need to define if we want to store the data locally (<code>chrome.storage.local</code>) or sync settings through all devices the end user is logged in to (<code>chrome.storage.sync</code>). Let’s go with local storage for this project.</p>\n\n\n\n<p>Retrieving values needs to be done with the <code>get</code> method. It accepts two arguments:</p>\n\n\n\n<ol><li>The entries we want to load</li><li>A callback containing the values</li></ol>\n\n\n\n<p>Our entries can either be a string (e.g. like <code>settings</code> below) or an array of entries (useful if we want to load multiple entries). The argument inside the callback function contains an object of all entries we previously defined in <code>{ settings: ... }</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.storage.local.get('settings', ({ settings }) => {\n  const options = settings ?? defaultSettings; // Fall back to default if settings are not defined\n  if (!settings) {\n    chrome.storage.local.set({\n     settings: defaultSettings,\n    });\n }\n\n  // Create and display options\n  const generalOptions = Object.keys(options).filter(x => !x.startsWith('advanced'));\n  \n  generalOptions.forEach(option => createOption(option, options, generalSection));\n});</code></pre>\n\n\n\n<p>To render the options, we also need to create a <code>createOption()</code> function.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function createOption(setting, settingsObject, wrapper) {\n  const settingWrapper = document.createElement(\"div\");\n  settingWrapper.classList.add(\"setting-item\");\n  settingWrapper.innerHTML = `\n  &lt;div class=\"label-wrapper\">\n    &lt;label for=\"${setting}\" id=\"${setting}Desc\">\n      ${chrome.i18n.getMessage(`setting${setting}`)}\n    &lt;/label>\n  &lt;/div>\n\n  &lt;input type=\"checkbox\" ${settingsObject[setting] ? 'checked' : ''} id=\"${setting}\" />\n  &lt;label for=\"${setting}\"\n    tabindex=\"0\"\n    role=\"switch\"\n    aria-checked=\"${settingsObject[setting]}\"\n    aria-describedby=\"${setting}-desc\"\n    class=\"is-switch\"\n  >&lt;/label>\n  `;\n\n  const toggleSwitch = settingWrapper.querySelector(\"label.is-switch\");\n  const input = settingWrapper.querySelector(\"input\");\n\n  input.onchange = () => {\n    toggleSwitch.setAttribute('aria-checked', input.checked);\n    updateSetting(setting, input.checked);\n  };\n\n  toggleSwitch.onkeydown = e => {\n    if(e.key === \" \" || e.key === \"Enter\") {\n      e.preventDefault();\n      toggleSwitch.click();\n    }\n  }\n\n  wrapper.appendChild(settingWrapper);\n}</code></pre>\n\n\n\n<p>Inside the <code>onchange</code> event listener of our switch (aká radio button) we call the function <code>updateSetting</code>. This method will write the updated value of our radio button inside the storage.</p>\n\n\n\n<p>To accomplish this, we will make use of the <code>set</code> function. It has two arguments: The entry we want to overwrite and an (optional) callback (which we don’t use in our case). As our <code>settings</code> entry is not a boolean or a string but an object containing different settings, we use the spread operator (<code>…</code>) and only overwrite our actual key (setting) inside the <code>settings</code> object.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function updateSetting(key, value) {\n  chrome.storage.local.get('settings', ({ settings }) => {\n    chrome.storage.local.set({\n      settings: {\n        ...settings,\n        [key]: value\n      }\n    })\n  });\n}</code></pre>\n\n\n\n<p>Once again, we need to &#8220;inform&#8221; the extension about our options page by appending the following entry to the <code>manifest.json</code>:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"options_ui\": {\n  \"open_in_tab\": true,\n  \"page\": \"options/options.html\"\n},</code></pre>\n\n\n\n<p>Depending on your use case you can also force the options dialog to open as a popup by setting <code>open_in_tab</code> to <code>false</code>.</p>\n\n\n<h3 id=\"installing-the-extension-for-development\">Installing the extension for development</h3>\n\n\n<p>Now that we’ve successfully set up the manifest file and have added both the pop-up and options page to the mix, we can install our extension to check if our pages actually work. Navigate to <code>chrome://extensions</code> and enable &#8220;Developer mode.&#8221; Three buttons will appear. Click the one labeled &#8220;Load unpacked&#8221; and select the <code>src</code> folder of your extension to load it up.</p>\n\n\n\n<p>The extension should now be successfully installed and our &#8220;Transcribers of Reddit&#8221; tile should be on the page.</p>\n\n\n\n<p>We can already interact with our extension. Click on the puzzle piece (&#x1f9e9;) icon right next to the browser’s address bar and click on the newly-added &#8220;Transcribers of Reddit&#8221; extension. You should now be greeted by a small pop-up with the button to open the options page.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"356\" height=\"143\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image-1.png?resize=356%2C143&#038;ssl=1\" alt=\"\" class=\"wp-image-359628\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image-1.png?w=356&amp;ssl=1 356w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1636653810349_image-1.png?resize=300%2C121&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Lovely, right? It might look a bit different on your device, as I have dark mode enabled in these screenshots.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1129\" height=\"382\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=1129%2C382&#038;ssl=1\" alt=\"\" class=\"wp-image-359629\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?w=1129&amp;ssl=1 1129w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=300%2C102&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=1024%2C346&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=768%2C260&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/settings-page-reddit.png?resize=1000%2C338&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you enable the &#8220;Show comment background&#8221; and &#8220;Show comment border&#8221; settings, then reload the page, the state will persist because we’re saving it in the browser’s local storage.</p>\n\n\n<h3 id=\"adding-the-content-script\">Adding the content script</h3>\n\n\n<p>OK, so we can already trigger the pop-up and interact with the extension settings, but the extension doesn’t do anything particularly useful yet. To give it some life, we will add a content script.</p>\n\n\n\n<p>Add a file called <code>comment.js</code> inside the <code>js</code> directory and make sure to define it in the <code>manifest.json</code> file:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"content_scripts\": [\n  {\n    \"matches\": [ \"*://www.reddit.com/*\" ],\n    \"js\": [ \"js/comment.js\" ]\n  }\n],</code></pre>\n\n\n\n<p>The <code>content_scripts</code> is made up of two parts:</p>\n\n\n\n<ul><li><code>matches</code>: This array holds URLs that tell the browser where we want our content scripts to run. Being an extension for Reddit and all, we want this to run on any page matching <code>://www.redit.com/*</code>, where the asterisk is a wild card to match anything after the top-level domain.</li><li><code>js</code>: This array contains the actual content scripts.</li></ul>\n\n\n\n<p>Content scripts can’t interact with other (normal) JavaScripts. This means if a website’s scripts defines a variable or function, we can’t access it. For example:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// script_on_website.js\nconst username = 'Lars';\n\n// content_script.js\nconsole.log(username); // Error: username is not defined</code></pre>\n\n\n\n<p>Now let’s start writing our content script. First, we add some constants to <code>comment.js</code>. These constants contain RegEx expressions and selectors that will be used later on. The <code>CommentUtils</code> is used to determine whether or not a post contains a &#8220;tor comment,&#8221; or if comment wrappers exists.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst Selectors = Object.freeze({\n  commentWrapper: 'div[style*=\"--commentswrapper-gradient-color\"] > div, div[style*=\"max-height: unset\"] > div',\n  torComment: 'div[data-tor-comment]',\n  postContent: 'div[data-test-id=\"post-content\"]'\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst CommentUtils = Object.freeze({\n  isTorComment: (comment) => comment.querySelector('[data-test-id=\"comment\"]') ? comment.querySelector('[data-test-id=\"comment\"]').textContent.includes('m a human volunteer content transcriber for Reddit') : false,\n  torCommentsExist: () => !!document.querySelector(Selectors.torComment),\n  commentWrapperExists: () => !!document.querySelector('[data-reddit-comment-wrapper=\"true\"]')\n});</code></pre>\n\n\n\n<p>Next, we check whether or not a user directly opens a comment page (&#8220;post&#8221;), then perform a RegEx check and update the <code>directPage</code> variable. This case occurs when a user directly opens the URL (e.g. by typing it into the address bar or clicking on<code>&lt;a&gt;</code> element on another page, like Twitter).</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let directPage = false;\nif (UrlRegex.commentPage.test(window.location.href)) {\n  directPage = true;\n  moveComments();\n}</code></pre>\n\n\n\n<p>Besides opening a page directly, a user normally interacts with the SPA. To catch this case, we can add a message listener to our <code>comment.js</code> file by using the <code>runtime</code> API.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.runtime.onMessage.addListener(msg => {\n  if (msg.type === messageTypes.COMMENT_PAGE) {\n    waitForComment(moveComments);\n  }\n});</code></pre>\n\n\n\n<p>All we need now are the functions. Let’s create a <code>moveComments()</code> function. It moves the special &#8220;tor comment&#8221; to the start of the comment section. It also conditionally applies a background color and border (if borders are enabled in the settings) to the comment. For this, we call the <code>storage</code> API and load the <code>settings</code> entry:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function moveComments() {\n  if (CommentUtils.commentWrapperExists()) {\n    return;\n  }\n\n  const wrapper = document.querySelector(Selectors.commentWrapper);\n  let comments = wrapper.querySelectorAll(`${Selectors.commentWrapper} > div`);\n  const postContent = document.querySelector(Selectors.postContent);\n\n  wrapper.dataset.redditCommentWrapper = 'true';\n  wrapper.style.flexDirection = 'column';\n  wrapper.style.display = 'flex';\n\n  if (directPage) {\n    comments = document.querySelectorAll(\"[data-reddit-comment-wrapper='true'] > div\");\n  }\n\n  chrome.storage.local.get('settings', ({ settings }) => { // HIGHLIGHT 18\n    comments.forEach(comment => {\n      if (CommentUtils.isTorComment(comment)) {\n        comment.dataset.torComment = 'true';\n        if (settings.background) {\n          comment.style.backgroundColor = 'var(--newCommunityTheme-buttonAlpha05)';\n        }\n        if (settings.border) {\n          comment.style.outline = '2px solid red';\n        }\n        comment.style.order = \"-1\";\n        applyWaiAria(postContent, comment);\n      }\n    });\n  })\n}</code></pre>\n\n\n\n<p>The <code>applyWaiAria()</code> function is called inside the <code>moveComments()</code> function—it adds <code>aria-</code> attributes. The other function creates a unique identifier for use with the <code>aria-</code> attributes.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function applyWaiAria(postContent, comment) {\n  const postMedia = postContent.querySelector('img[class*=\"ImageBox-image\"], video');\n  const commentId = uuidv4();\n\n  if (!postMedia) {\n    return;\n  }\n\n  comment.setAttribute('id', commentId);\n  postMedia.setAttribute('aria-describedby', commentId);\n}\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r &amp; 0x3 | 0x8);\n    return v.toString(16);\n  });\n}</code></pre>\n\n\n\n<p>The following function waits for the comments to load and calls the <code>callback</code> parameter if it finds the comment wrapper.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function waitForComment(callback) {\n  const config = { childList: true, subtree: true };\n  const observer = new MutationObserver(mutations => {\n    for (const mutation of mutations) {\n      if (document.querySelector(Selectors.commentWrapper)) {\n        callback();\n        observer.disconnect();\n        clearTimeout(timeout);\n        break;\n      }\n    }\n  });\n\n  observer.observe(document.documentElement, config);\n  const timeout = startObservingTimeout(observer, 10);\n}\n\nfunction startObservingTimeout(observer, seconds) {\n  return setTimeout(() => {\n    observer.disconnect();\n  }, 1000 * seconds);\n}</code></pre>\n\n\n<h3 id=\"adding-a-service-worker\">Adding a service worker</h3>\n\n\n<p>Remember when we added a listener for messages inside the content script? This listener isn&#8217;t currently receiving messages. We need to send it to the content script ourselves. For this purpose we need to register a service worker.</p>\n\n\n\n<p>We have to register our service worker inside the <code>manifest.json</code> by appending the following code to it:</p>\n\n\n\n<pre rel=\"JSON\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">\"background\": {\n  \"service_worker\": \"sw.js\"\n}</code></pre>\n\n\n\n<p>Don’t forget to create the <code>sw.js</code> file inside the <code>src</code> directory (service workers always need to be created in the extension’s root directory, <code>src</code>.</p>\n\n\n\n<p>Now, let’s create some constants for the message and page types:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst Utils = Object.freeze({\n  getPageType: (url) => {\n    if (new URL(url).pathname === '/') {\n      return messageTypes.MAIN_PAGE;\n    } else if (UrlRegex.commentPage.test(url)) {\n      return messageTypes.COMMENT_PAGE;\n    } else if (UrlRegex.subredditPage.test(url)) {\n      return messageTypes.SUBREDDIT_PAGE;\n    }\n\n    return messageTypes.OTHER_PAGE;\n  }\n});</code></pre>\n\n\n\n<p>We can add the service worker’s actual content. We do this with an event listener on the history state (<code>onHistoryStateUpdated</code>) that detects when a page has been updated with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API\" rel=\"noopener\">History API</a> (which is commonly used in SPAs to navigate without a page refresh). Inside this listener, we query the active tab and extract its <code>tabId</code>. Then we send a message to our content script containing the page type and URL.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">chrome.webNavigation.onHistoryStateUpdated.addListener(async ({ url }) => {\n  const [{ id: tabId }] = await chrome.tabs.query({ active: true, currentWindow: true });\n\n  chrome.tabs.sendMessage(tabId, {\n    type: Utils.getPageType(url),\n    url\n  });\n});</code></pre>\n\n\n<h3 id=\"all-done\">All done!</h3>\n\n\n<p>We’re finished! Navigate to Chrome’s extension management page ( <code>chrome://extensions</code>) and hit the reload icon on the unpacked extension. If you open a Reddit post that contains a &#8220;Transcribers of Reddit&#8221; comment with an image transcription (like <a href=\"https://www.reddit.com/r/ProgrammerHumor/comments/oi8e26/why_would_you_hurt_me_in_such_a_way_the/\" rel=\"noopener\">this one</a>), it will be moved to the start of the comment section and be highlighted as long as we’ve enabled it in the extension settings.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1270\" height=\"1332\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=1270%2C1332&#038;ssl=1\" alt=\"\" class=\"wp-image-359633\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?w=1270&amp;ssl=1 1270w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=286%2C300&amp;ssl=1 286w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=976%2C1024&amp;ssl=1 976w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=768%2C805&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/s_1394379B6F411105A5BC2102DF48E9E66D4E0B302B5D9E367CAC2817C815F29E_1635293829919_Screenshot2021-10-27at02.16.01.png?resize=1000%2C1049&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The &#8220;Transcribers of Reddit&#8221; extension highlights a particular comment by moving it to the top of the Reddit thread’s comment list and giving it a bright red border</figcaption></figure>\n\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n\n<p>Was that as hard as you thought it would be? It’s definitely a lot more straightforward than I thought before digging in. After setting up the <code>manifest.json</code> and creating any page files and assets we need, all we’re really doing is writing HTML, CSS, and JavaScript like normal.</p>\n\n\n\n<p>If you ever find yourself stuck along the way, the <a href=\"https://developer.chrome.com/docs/extensions/reference/\" rel=\"noopener\">Chrome API</a> documentation is a great resource to get back on track.</p>\n\n\n\n<p>Once again, <a href=\"https://github.com/Lars418/torExtension\" rel=\"noopener\">here’s the GitHub repo</a> with all of the code we walked through in this article. Read it, use it, and let me know what you think of it!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-create-a-browser-extension/\">How to Create a Browser Extension</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I’ll bet you are using browser extensions right now. Some of them are extremely popular and useful, like ad blockers, password managers, and PDF viewers. These extensions (or “add-ons”) are not limited to those purposes — you can do a lot more with them! In this article, I will give you an introduction on how to create one. Ultimately, we’ll make it work in multiple browsers.\n\n\n\n\n\n\nWhat we’re making\n\n\nWe’re making an extension called “Transcribers of Reddit” and it’s going to improve Reddit’s accessibility by moving specific comments to the top of the comment section and adding aria- attributes for screen readers. We will also take our extension a little further with options for adding borders and backgrounds to comments for better text contrast.\n\n\n\nThe whole idea is that you’ll get a nice introduction for how to develop a browser extension. We will start by creating the extension for Chromium-based browsers (e.g. Google Chrome, Microsoft Edge, Brave, etc.). In a future post we will port the extension to work with Firefox, as well as Safari which recently added support for Web Extensions in both the MacOS and iOS versions of the browser.\n\n\n\n\nGitHub repo\n\n\n\n\nReady? Let’s take this one step at a time.\n\n\nCreate a working directory\n\n\nBefore anything else, we need a working space for our project. All we really need is to create a folder and give it a name (which I’m calling transcribers-of-reddit). Then, create another folder inside that one named src for our source code.\n\n\nDefine the entry point\n\n\nThe entry point is a file that contains general information about the extension (i.e. extension name, description, etc.) and defines permissions or scripts to execute.\n\n\n\nOur entry point can be a manifest.json file located in the src folder we just created. In it, let’s add the following three properties:\n\n\n\n{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\"\n}\n\n\n\nThe manifest_version is similar to version in npm or Node. It defines what APIs are available (or not). We’re going to work on the bleeding edge and use the latest version, 3 (also known as as mv3).\n\n\n\nThe second property is name and it specifies our extension name. This name is what’s displayed everywhere our extension appears, like Chrome Web Store and the chrome://extensions page in the Chrome browser.\n\n\n\nThen there’s version. It labels the extension with a version number. Keep in mind that this property (in contrast to manifest_version) is a string that can only contain numbers and dots (e.g. 1.3.5).\n\n\nMore manifest.json information\n\n\nThere’s actually a lot more we can add to help add context to our extension. For example, we can provide a description that explains what the extension does. It’s a good idea to provide these sorts of things, as it gives users a better idea of what they’re getting into when they use it.\n\n\n\nIn this case, we’re not only adding a description, but supplying icons and a web address that Chrome Web Store points to on the extension’s page.\n\n\n\n{\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\"\n}\n\n\n\nThe description is displayed on Chrome’s management page (chrome://extensions) and should be brief, less than 132 characters.The icons are used in lots of places. As the docs state, it’s best to provide three versions of the same icon in different resolutions, preferably as a PNG file. Feel free to use the ones in the GitHub repository for this example.The homepage_url can be used to connect your website with the extension. A button including the link will be displayed when clicking on “More details” on the management page.\n\n\n\nOur opened extension card inside the extension management page.\n\n\nSetting permissions\n\n\nOne major advantage extensions have is that their APIs allow you to interact directly with the browser. But we have to explicitly give the extension those permissions, which also goes inside the manifest.json file.\n\n\n\n\n{\n  \"manifest_version\": 3,\n  \"name\": \"Transcribers of Reddit\",\n  \"version\": \"1.0\",\n  \"description\": \"Reddit made accessible for disabled users.\",\n  \"icons\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  },\n  \"homepage_url\": \"https://lars.koelker.dev/extensions/tor/\",\n\n  \"permissions\": [\n    \"storage\",\n    \"webNavigation\"\n  ]\n}\n\n\n\nWhat did we just give this extension permission to? First, storage. We want this extension to be able to save the user’s settings, so we need to access the browser’s web storage to hold them. For example, if the user wants red borders on the comments, then we’ll save that for next time rather than making them set it again.\n\n\n\nWe also gave the extension permission to look at how the user navigated to the current screen. Reddit is a single-page application (SPA) which means it doesn’t trigger a page refresh. We need to “catch” this interaction, as Reddit will only load the comments of a post if we click on it. So, that’s why we’re tapping into webNavigation.\n\n\n\nWe’ll get to executing code on a page later as it requires a whole new entry inside manifest.json.\n\n\n\n/explanation Depending on which permissions are allowed, the browser might display a warning to the user to accept the permissions. It’s only certain ones, though, and Chrome has a nice outline of them.\n\n\nManaging translations\n\n\nBrowser extensions have a built-in internalization (i18n) API. It allows you to manage translations for multiple languages (full list). To use the API, we have to define our translations and default language right in the manifest.json file:\n\n\n\n\"default_locale\": \"en\"\n\n\n\nThis sets English as the language. In the event that a browser is set to any other language that isn’t supported, the extension will fall back to the default locale (en in this example).\n\n\n\nOur translations are defined inside the _locales directory. Let’s create another folder in there each language you want to support. Each subdirectory gets its own messages.json file.\n\n\n\nsrc \n └─ _locales\n     └─ en\n        └─ messages.json\n     └─ fr\n        └─ messages.json\n\n\n\nA translation file consists of multiple parts:\n\n\n\nTranslation key (“id”): This key is used to reference the translation.Message: The actual translation contentDescription (optional): Describes the translation (I wouldn’t use them, they just bloat up the file and your translation key should be descriptive enough)Placeholders (optional): Can be used to insert dynamic content inside a translation\n\n\n\nHere’s an example that pulls all that together:\n\n\n\n{\n  \"userGreeting\": { // Translation key (\"id\")\n    \"message\": \"Good $daytime$, $user$!\" // Translation\n    \"description\": \"User Greeting\", // Optional description for translators\n    \"placeholders\": { // Optional placeholders\n      \"daytime\": { // As referenced inside the message\n        \"content\": \"$1\",\n        \"example\": \"morning\" // Example value for our content\n      },\n      \"user\": { \n        \"content\": \"$1\",\n        \"example\": \"Lars\"\n      }\n    }\n  }\n}\n\n\n\nUsing placeholders is a bit more challenging. At first we need to define the placeholder inside the message. A placeholder needs to be wrapped in between $ characters. Afterwards, we have to add our placeholder to the “placeholder list.” This is a bit unintuitive, but Chrome wants to know what value should be inserted for our placeholders. We (obviously) want to use a dynamic value here, so we use the special content value $1 which references our inserted value.\n\n\n\nThe example property is optional. It can be used to give translators a hint what value the placeholder could be (but is not actually displayed).\n\n\n\nWe need to define the following translations for our extension. Copy and paste them into the messages.json file. Feel free to add more languages (e.g. if you speak German, add a de folder inside _locales, and so on).\n\n\n\n{\n  \"name\": {\n    \"message\": \"Transcribers of Reddit\"\n  },\n  \"description\": {\n    \"message\": \"Accessible image descriptions for subreddits.\"\n  },\n  \"popupManageSettings\": {\n    \"message\": \"Manage settings\"\n  },\n  \"optionsPageTitle\": {\n    \"message\": \"Settings\"\n  },\n  \"sectionGeneral\": {\n    \"message\": \"General settings\"\n  },\n  \"settingBorder\": {\n    \"message\": \"Show comment border\"\n  },\n  \"settingBackground\": {\n    \"message\": \"Show comment background\"\n  }\n}\n\n\n\nYou might be wondering why we registered the permissions when there is no sign of an i18n permission, right? Chrome is a bit weird in that regard, as you don’t need to register every permission. Some (e.g. chrome.i18n) don’t require an entry inside the manifest. Other permissions require an entry but won’t be displayed to the user when installing the extension. Some other permissions are “hybrid” (e.g. chrome.runtime), meaning some of their functions can be used without declaring a permission—but other functions of the same API require one entry in the manifest. You’ll want to take a look at the documentation for a solid overview of the differences.\n\n\nUsing translations inside the manifest\n\n\nThe first thing our end user will see is either the entry inside the Chrome Web Store or the extension overview page. We need to adjust our manifest file to make sure everything os translated.\n\n\n\n{\n  // Update these entries\n  \"name\": \"__MSG_name__\",\n  \"description\": \"__MSG_description__\"\n}\n\n\n\nApplying this syntax uses the corresponding translation in our messages.json file (e.g. _MSG_name_ uses the name translation).\n\n\nUsing translations in HTML pages\n\n\nApplying translations in an HTML file takes a little JavaScript.\n\n\n\nchrome.i18n.getMessage('name');\n\n\n\nThat code returns our defined translation (which is Transcribers of Reddit). Placeholders can be done in a similar way.\n\n\n\nchrome.i18n.getMessage('userGreeting', {\n  daytime: 'morning',\n  user: 'Lars'\n});\n\n\n\nIt would be a pain in the butt to apply translations to all elements this way. But we can write a little script that performs the translation based on a data- attribute. So, let’s create a new js folder inside the src directory, then add a new util.js file in it.\n\n\n\nsrc \n └─ js\n     └─ util.js\n\n\n\nThis gets the job done:\n\n\n\nconst i18n = document.querySelectorAll(\"[data-intl]\");\ni18n.forEach(msg => {\n  msg.innerHTML = chrome.i18n.getMessage(msg.dataset.intl);\n});\n\nchrome.i18n.getAcceptLanguages(languages => {\n  document.documentElement.lang = languages[0];\n});\n\n\n\nOnce that script is added to an HTML page, we can add the data-intl attribute to an element to set its content. The document language will also be set based on the user language.\n\n\n\n\n\n<!-- Before JS execution -->\n<html>\n  <body>\n    <button data-intl=\"popupManageSettings\"></button>\n  </body>\n</html>\n\n\n\n\n\n<!-- After JS execution -->\n<html lang=\"en\">\n  <body>\n    <button data-intl=\"popupManageSettings\">Manage settings</button>\n  </body>\n</html>\n\n\n\n\nAdding a pop-up and options page\n\n\nBefore we dive into actual programming, we we need to create two pages:\n\n\n\nAn options page that contains user settingsA pop-up page that opens when interacting with the extension icon right next to our address bar. This page can be used for various scenarios (e.g. for displaying stats or quick settings).\n\n\n\n\n\nThe options page containg our settings.\n\n\n\n\n\nThe pop-up containg a link to the options page.\n\n\n\n\n\nHere’s an outline of the folders and files we need in order to make the pages:\n\n\n\nsrc \n ├─ css\n |    └─ paintBucket.css\n ├─ popup\n |    ├─ popup.html\n |    ├─ popup.css\n |    └─ popup.js\n └─ options\n      ├─ options.html\n      ├─ options.css\n      └─ options.js\n\n\n\nThe .css files contain plain CSS, nothing more and nothing less. I won’t into detail because I know most of you reading this are already fully aware of how CSS works. You can copy and paste the styles from the GitHub repository for this project.\n\n\n\nNote that the pop-up is not a tab and that its size depends on the content in it. If you want to use a fixed popup size, you can set the width and height properties on the html element.\n\n\nCreating the pop-up\n\n\nHere’s an HTML skeleton that links up the CSS and JavaScript files and adds a headline and button inside the <body>.\n\n\n\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title data-intl=\"name\"></title>\n\n    <link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n    <link rel=\"stylesheet\" href=\"popup.css\">\n\n    <!-- Our \"translation\" script -->\n    <script src=\"../js/util.js\" defer></script>\n    <script src=\"popup.js\" defer></script>\n  </head>\n  <body>\n    <h1 id=\"title\"></h1>\n    <button data-intl=\"popupManageSettings\"></button>\n  </body>\n</html>\n\n\n\nThe h1 contains the extension name and version; the button is used to open the options page. The headline will not be filled with a translation (because it lacks a data-intl attribute), and the button doesn’t have any click handler yet, so we need to populate our popup.js file:\n\n\n\nconst title = document.getElementById('title');\nconst settingsBtn = document.querySelector('button');\nconst manifest = chrome.runtime.getManifest();\n\ntitle.textContent = `${manifest.name} (${manifest.version})`;\n\nsettingsBtn.addEventListener('click', () => {\n  chrome.runtime.openOptionsPage();\n});\n\n\n\nThis script first looks for the manifest file. Chrome offers the runtime API which contains the getManifest method (this specific method does not require the runtime permission). It returns our manifest.json as a JSON object. After we populate the title with the extension name and version, we can add an event listener to the settings button. If the user interacts with it, we will open the options page using chrome.runtime.openOptionsPage() (again no permission entry needed).\n\n\n\nThe pop-up page is now finished, but the extension doesn’t know it exists yet. We have to register the pop-up by appending the following property to the manifest.json file.\n\n\n\n\"action\": {\n  \"default_popup\": \"popup/popup.html\",\n  \"default_icon\": {\n    \"16\": \"images/logo/16.png\",\n    \"48\": \"images/logo/48.png\",\n    \"128\": \"images/logo/128.png\"\n  }\n},\n\n\nCreating the options page\n\n\nCreating this page follows a pretty similar process as what we just completed. First, we populate our options.html file. Here’s some markup we can use:\n\n\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title data-intl=\"name\"></title>\n\n  <link rel=\"stylesheet\" href=\"../css/paintBucket.css\">\n  <link rel=\"stylesheet\" href=\"options.css\">\n\n  <!-- Our \"translation\" script -->\n  <script src=\"../js/util.js\" defer></script>\n  <script src=\"options.js\" defer></script>\n</head>\n<body>\n  <header>\n    <h1>\n      <!-- Icon provided by feathericons.com -->\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" role=\"presentation\">\n        <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n        <path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\"></path>\n      </svg>\n      <span data-intl=\"optionsPageTitle\"></span>\n    </h1>\n  </header>\n\n  <main>\n    <section id=\"generalOptions\">\n      <h2 data-intl=\"sectionGeneral\"></h2>\n\n      <div id=\"generalOptionsWrapper\"></div>\n    </section>\n  </main>\n\n  <footer>\n    <p>Transcribers of Reddit extension by <a href=\"https://lars.koelker.dev\" target=\"_blank\">lars.koelker.dev</a>.</p>\n    <p>Reddit is a registered trademark of Reddit, Inc. This extension is not endorsed or affiliated with Reddit, Inc. in any way.</p>\n  </footer>\n</body>\n</html>\n\n\n\nThere are no actual options yet (just their wrappers). We need to write the script for the options page. First, we define variables to access our wrappers and default settings inside options.js. “Freezing” our default settings prevents us from accidentally modifying them later.\n\n\n\nconst defaultSettings = Object.freeze({\n  border: false,\n  background: false,\n});\nconst generalSection = document.getElementById('generalOptionsWrapper');\n\n\n\n\nNext, we need to load the saved settings. We can use the (previously registered) storage API for that. Specifically, we need to define if we want to store the data locally (chrome.storage.local) or sync settings through all devices the end user is logged in to (chrome.storage.sync). Let’s go with local storage for this project.\n\n\n\nRetrieving values needs to be done with the get method. It accepts two arguments:\n\n\n\nThe entries we want to loadA callback containing the values\n\n\n\nOur entries can either be a string (e.g. like settings below) or an array of entries (useful if we want to load multiple entries). The argument inside the callback function contains an object of all entries we previously defined in { settings: ... }:\n\n\n\nchrome.storage.local.get('settings', ({ settings }) => {\n  const options = settings ?? defaultSettings; // Fall back to default if settings are not defined\n  if (!settings) {\n    chrome.storage.local.set({\n     settings: defaultSettings,\n    });\n }\n\n  // Create and display options\n  const generalOptions = Object.keys(options).filter(x => !x.startsWith('advanced'));\n  \n  generalOptions.forEach(option => createOption(option, options, generalSection));\n});\n\n\n\nTo render the options, we also need to create a createOption() function.\n\n\n\nfunction createOption(setting, settingsObject, wrapper) {\n  const settingWrapper = document.createElement(\"div\");\n  settingWrapper.classList.add(\"setting-item\");\n  settingWrapper.innerHTML = `\n  <div class=\"label-wrapper\">\n    <label for=\"${setting}\" id=\"${setting}Desc\">\n      ${chrome.i18n.getMessage(`setting${setting}`)}\n    </label>\n  </div>\n\n  <input type=\"checkbox\" ${settingsObject[setting] ? 'checked' : ''} id=\"${setting}\" />\n  <label for=\"${setting}\"\n    tabindex=\"0\"\n    role=\"switch\"\n    aria-checked=\"${settingsObject[setting]}\"\n    aria-describedby=\"${setting}-desc\"\n    class=\"is-switch\"\n  ></label>\n  `;\n\n  const toggleSwitch = settingWrapper.querySelector(\"label.is-switch\");\n  const input = settingWrapper.querySelector(\"input\");\n\n  input.onchange = () => {\n    toggleSwitch.setAttribute('aria-checked', input.checked);\n    updateSetting(setting, input.checked);\n  };\n\n  toggleSwitch.onkeydown = e => {\n    if(e.key === \" \" || e.key === \"Enter\") {\n      e.preventDefault();\n      toggleSwitch.click();\n    }\n  }\n\n  wrapper.appendChild(settingWrapper);\n}\n\n\n\nInside the onchange event listener of our switch (aká radio button) we call the function updateSetting. This method will write the updated value of our radio button inside the storage.\n\n\n\nTo accomplish this, we will make use of the set function. It has two arguments: The entry we want to overwrite and an (optional) callback (which we don’t use in our case). As our settings entry is not a boolean or a string but an object containing different settings, we use the spread operator (…) and only overwrite our actual key (setting) inside the settings object.\n\n\n\nfunction updateSetting(key, value) {\n  chrome.storage.local.get('settings', ({ settings }) => {\n    chrome.storage.local.set({\n      settings: {\n        ...settings,\n        [key]: value\n      }\n    })\n  });\n}\n\n\n\nOnce again, we need to “inform” the extension about our options page by appending the following entry to the manifest.json:\n\n\n\n\"options_ui\": {\n  \"open_in_tab\": true,\n  \"page\": \"options/options.html\"\n},\n\n\n\nDepending on your use case you can also force the options dialog to open as a popup by setting open_in_tab to false.\n\n\nInstalling the extension for development\n\n\nNow that we’ve successfully set up the manifest file and have added both the pop-up and options page to the mix, we can install our extension to check if our pages actually work. Navigate to chrome://extensions and enable “Developer mode.” Three buttons will appear. Click the one labeled “Load unpacked” and select the src folder of your extension to load it up.\n\n\n\nThe extension should now be successfully installed and our “Transcribers of Reddit” tile should be on the page.\n\n\n\nWe can already interact with our extension. Click on the puzzle piece (🧩) icon right next to the browser’s address bar and click on the newly-added “Transcribers of Reddit” extension. You should now be greeted by a small pop-up with the button to open the options page.\n\n\n\n\n\n\n\nLovely, right? It might look a bit different on your device, as I have dark mode enabled in these screenshots.\n\n\n\n\n\n\n\nIf you enable the “Show comment background” and “Show comment border” settings, then reload the page, the state will persist because we’re saving it in the browser’s local storage.\n\n\nAdding the content script\n\n\nOK, so we can already trigger the pop-up and interact with the extension settings, but the extension doesn’t do anything particularly useful yet. To give it some life, we will add a content script.\n\n\n\nAdd a file called comment.js inside the js directory and make sure to define it in the manifest.json file:\n\n\n\n\"content_scripts\": [\n  {\n    \"matches\": [ \"*://www.reddit.com/*\" ],\n    \"js\": [ \"js/comment.js\" ]\n  }\n],\n\n\n\nThe content_scripts is made up of two parts:\n\n\n\nmatches: This array holds URLs that tell the browser where we want our content scripts to run. Being an extension for Reddit and all, we want this to run on any page matching ://www.redit.com/*, where the asterisk is a wild card to match anything after the top-level domain.js: This array contains the actual content scripts.\n\n\n\nContent scripts can’t interact with other (normal) JavaScripts. This means if a website’s scripts defines a variable or function, we can’t access it. For example:\n\n\n\n// script_on_website.js\nconst username = 'Lars';\n\n// content_script.js\nconsole.log(username); // Error: username is not defined\n\n\n\nNow let’s start writing our content script. First, we add some constants to comment.js. These constants contain RegEx expressions and selectors that will be used later on. The CommentUtils is used to determine whether or not a post contains a “tor comment,” or if comment wrappers exists.\n\n\n\nconst messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst Selectors = Object.freeze({\n  commentWrapper: 'div[style*=\"--commentswrapper-gradient-color\"] > div, div[style*=\"max-height: unset\"] > div',\n  torComment: 'div[data-tor-comment]',\n  postContent: 'div[data-test-id=\"post-content\"]'\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst CommentUtils = Object.freeze({\n  isTorComment: (comment) => comment.querySelector('[data-test-id=\"comment\"]') ? comment.querySelector('[data-test-id=\"comment\"]').textContent.includes('m a human volunteer content transcriber for Reddit') : false,\n  torCommentsExist: () => !!document.querySelector(Selectors.torComment),\n  commentWrapperExists: () => !!document.querySelector('[data-reddit-comment-wrapper=\"true\"]')\n});\n\n\n\nNext, we check whether or not a user directly opens a comment page (“post”), then perform a RegEx check and update the directPage variable. This case occurs when a user directly opens the URL (e.g. by typing it into the address bar or clicking on<a> element on another page, like Twitter).\n\n\n\nlet directPage = false;\nif (UrlRegex.commentPage.test(window.location.href)) {\n  directPage = true;\n  moveComments();\n}\n\n\n\nBesides opening a page directly, a user normally interacts with the SPA. To catch this case, we can add a message listener to our comment.js file by using the runtime API.\n\n\n\nchrome.runtime.onMessage.addListener(msg => {\n  if (msg.type === messageTypes.COMMENT_PAGE) {\n    waitForComment(moveComments);\n  }\n});\n\n\n\nAll we need now are the functions. Let’s create a moveComments() function. It moves the special “tor comment” to the start of the comment section. It also conditionally applies a background color and border (if borders are enabled in the settings) to the comment. For this, we call the storage API and load the settings entry:\n\n\n\nfunction moveComments() {\n  if (CommentUtils.commentWrapperExists()) {\n    return;\n  }\n\n  const wrapper = document.querySelector(Selectors.commentWrapper);\n  let comments = wrapper.querySelectorAll(`${Selectors.commentWrapper} > div`);\n  const postContent = document.querySelector(Selectors.postContent);\n\n  wrapper.dataset.redditCommentWrapper = 'true';\n  wrapper.style.flexDirection = 'column';\n  wrapper.style.display = 'flex';\n\n  if (directPage) {\n    comments = document.querySelectorAll(\"[data-reddit-comment-wrapper='true'] > div\");\n  }\n\n  chrome.storage.local.get('settings', ({ settings }) => { // HIGHLIGHT 18\n    comments.forEach(comment => {\n      if (CommentUtils.isTorComment(comment)) {\n        comment.dataset.torComment = 'true';\n        if (settings.background) {\n          comment.style.backgroundColor = 'var(--newCommunityTheme-buttonAlpha05)';\n        }\n        if (settings.border) {\n          comment.style.outline = '2px solid red';\n        }\n        comment.style.order = \"-1\";\n        applyWaiAria(postContent, comment);\n      }\n    });\n  })\n}\n\n\n\nThe applyWaiAria() function is called inside the moveComments() function—it adds aria- attributes. The other function creates a unique identifier for use with the aria- attributes.\n\n\n\nfunction applyWaiAria(postContent, comment) {\n  const postMedia = postContent.querySelector('img[class*=\"ImageBox-image\"], video');\n  const commentId = uuidv4();\n\n  if (!postMedia) {\n    return;\n  }\n\n  comment.setAttribute('id', commentId);\n  postMedia.setAttribute('aria-describedby', commentId);\n}\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n\n\nThe following function waits for the comments to load and calls the callback parameter if it finds the comment wrapper.\n\n\n\nfunction waitForComment(callback) {\n  const config = { childList: true, subtree: true };\n  const observer = new MutationObserver(mutations => {\n    for (const mutation of mutations) {\n      if (document.querySelector(Selectors.commentWrapper)) {\n        callback();\n        observer.disconnect();\n        clearTimeout(timeout);\n        break;\n      }\n    }\n  });\n\n  observer.observe(document.documentElement, config);\n  const timeout = startObservingTimeout(observer, 10);\n}\n\nfunction startObservingTimeout(observer, seconds) {\n  return setTimeout(() => {\n    observer.disconnect();\n  }, 1000 * seconds);\n}\n\n\nAdding a service worker\n\n\nRemember when we added a listener for messages inside the content script? This listener isn’t currently receiving messages. We need to send it to the content script ourselves. For this purpose we need to register a service worker.\n\n\n\nWe have to register our service worker inside the manifest.json by appending the following code to it:\n\n\n\n\"background\": {\n  \"service_worker\": \"sw.js\"\n}\n\n\n\nDon’t forget to create the sw.js file inside the src directory (service workers always need to be created in the extension’s root directory, src.\n\n\n\nNow, let’s create some constants for the message and page types:\n\n\n\nconst messageTypes = Object.freeze({\n  COMMENT_PAGE: 'comment_page',\n  SUBREDDIT_PAGE: 'subreddit_page',\n  MAIN_PAGE: 'main_page',\n  OTHER_PAGE: 'other_page',\n});\n\nconst UrlRegex = Object.freeze({\n  commentPage: /\\/r\\/.*\\/comments\\/.*/,\n  subredditPage: /\\/r\\/.*\\//\n});\n\nconst Utils = Object.freeze({\n  getPageType: (url) => {\n    if (new URL(url).pathname === '/') {\n      return messageTypes.MAIN_PAGE;\n    } else if (UrlRegex.commentPage.test(url)) {\n      return messageTypes.COMMENT_PAGE;\n    } else if (UrlRegex.subredditPage.test(url)) {\n      return messageTypes.SUBREDDIT_PAGE;\n    }\n\n    return messageTypes.OTHER_PAGE;\n  }\n});\n\n\n\nWe can add the service worker’s actual content. We do this with an event listener on the history state (onHistoryStateUpdated) that detects when a page has been updated with the History API (which is commonly used in SPAs to navigate without a page refresh). Inside this listener, we query the active tab and extract its tabId. Then we send a message to our content script containing the page type and URL.\n\n\n\nchrome.webNavigation.onHistoryStateUpdated.addListener(async ({ url }) => {\n  const [{ id: tabId }] = await chrome.tabs.query({ active: true, currentWindow: true });\n\n  chrome.tabs.sendMessage(tabId, {\n    type: Utils.getPageType(url),\n    url\n  });\n});\n\n\nAll done!\n\n\nWe’re finished! Navigate to Chrome’s extension management page ( chrome://extensions) and hit the reload icon on the unpacked extension. If you open a Reddit post that contains a “Transcribers of Reddit” comment with an image transcription (like this one), it will be moved to the start of the comment section and be highlighted as long as we’ve enabled it in the extension settings.\n\n\n\nThe “Transcribers of Reddit” extension highlights a particular comment by moving it to the top of the Reddit thread’s comment list and giving it a bright red border\n\n\nConclusion\n\n\nWas that as hard as you thought it would be? It’s definitely a lot more straightforward than I thought before digging in. After setting up the manifest.json and creating any page files and assets we need, all we’re really doing is writing HTML, CSS, and JavaScript like normal.\n\n\n\nIf you ever find yourself stuck along the way, the Chrome API documentation is a great resource to get back on track.\n\n\n\nOnce again, here’s the GitHub repo with all of the code we walked through in this article. Read it, use it, and let me know what you think of it!\n\nHow to Create a Browser Extension originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-03T15:12:31.000Z",
      "date_modified": "2022-01-03T15:12:31.000Z",
      "_plugin": {
        "pageFilename": "d645ef42f4bfa6c3bbb22fc24e5d59ee4bea6c3ff8605254f5ab8d51afc4d59e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359698",
      "url": "https://css-tricks.com/thank-you-2021-edition/",
      "title": "Thank You (2021 Edition)",
      "summary": "The year has come to a close and it’s time again for our end-of-year wrapup. The most important message is this: thank you. (thankyouthankyou)\nThanks for stopping by and reading this site. If you didn’t, I’d be out …\n\nThank You (2021 Edition) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>The year has come to a close and <a href=\"https://css-tricks.com/tag/thank-you/\">it&#8217;s time again</a> for our end-of-year wrapup. The most important message is this: thank you. (<em>thankyouthankyou</em>)</p>\n\n\n\n<p>Thanks for stopping by and reading this site. If you didn&#8217;t, I&#8217;d be out of a job around here, and I quite like this job so I owe it all to you. Like a family holiday card, allow me to share how the year went from our perspective, both with numbers and feelings, and then do a review of our goals. </p>\n\n\n\n<span id=\"more-359698\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"641\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=1024%2C641&#038;ssl=1\" alt=\"Thank you from Chris. Clear Ornaments hanging from the sky with gold glitten in them. A cookie candy cane embedded into the ground. Little tiny pine trees with gold stands and frosted white tips. \" class=\"wp-image-359872\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=1024%2C641&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=300%2C188&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=768%2C481&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?resize=1000%2C626&amp;ssl=1 1000w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/12/thanks-2021.png?w=1224&amp;ssl=1 1224w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"overall-traffic-analytics-numbers\">Overall Traffic Analytics Numbers</h3>\n\n\n<p class=\"ticss-a2910f25\">The site saw <strong>88m</strong> pageviews this year <strong>down 6%</strong> from the 93m last year. Traffic has yo-yo&#8217;d up and down a smidge like that a little over the last 4-5 years, but this 6% is a bit of an alarming drop that I don&#8217;t like to see. These numbers are from Google Analytics, and <a href=\"https://css-tricks.com/proxying-third-party-javascript-as-first-party-javascript-and-the-potential-effect-on-analytics/\">some of my own research</a> this year suggests perhaps 20-30% of visitors to this site actually block the run-of-the-mill client-side JavaScript-powered Google Analytics I use. So perhaps the real traffic is higher, but as the analytics implementation is exactly the same and I don&#8217;t see any reason blocking would have skyrocketed just this past year alone, the downward movement seems real.</p>\n\n\n\n<p>A ~3% drop in organic search traffic was largely responsible for the dip. That&#8217;s big, as search is <strong>74.6%</strong> of all traffic. This points to us just not hitting the mark well enough for what people are searching for. A nice 36% increase in direct traffic points to pretty decent brand awareness, but direct traffic is only <strong>5%</strong> of overall traffic anyway so it doesn&#8217;t make much of a difference compared to search engine traffic. Referral traffic is down, social is up, but both are such small slices right now they just don&#8217;t move the needle. </p>\n\n\n\n<p>You might think, <em>well hey content ages out, search engine traffic to existing content will decline over time</em>. That&#8217;s true, but we publish a ton of <em>new</em> content every year as well as maintain and improve existing content, hence the concern. </p>\n\n\n\n<p class=\"ticss-ae4e08a2\">We invest well into 6-figures in new and updated content every year. So seeing a decline in traffic is disheartening. </p>\n\n\n\n<p>But hey that&#8217;s the game sometimes. I suspect it&#8217;s heavy competition in the developer writing space, which is something we all benefit from as developers, so it ain&#8217;t all bad. We&#8217;ll live and learn and do our best to turn it around for the sake of the health of this site. I&#8217;ve already got (counts fingers and toes) a million ideas. </p>\n\n\n\n<p>All that said, while I do think pageviews is an interesting and relevant metric to a site that uses advertising as a primary business model, there are many others. Unique Visitors are <em>up</em> year over year to <strong>26.3m</strong> from 25.8m, suggesting <em>more different people</em> came to the site this year, which is great, they just didn&#8217;t bop around the site as much or come back quite as often. Pages per visit is very steady at <strong>1.35</strong> meaning for the most part people come, they read, they leave. No surprise there. It&#8217;s mostly that &#8220;come back&#8221; thing to work on.</p>\n\n\n<h3 id=\"the-biggest-leap-in-mobile-traffic-yet\">The Biggest Leap in Mobile Traffic Yet</h3>\n\n\n<p>Pretty big jump in mobile usage this year! </p>\n\n\n\n<p>2021: 20%<br>2020: 15%<br>2019: 15%<br>2018: 12%</p>\n\n\n\n<p>A fifth of all traffic is pretty interesting. Before 2018, even though mobile traffic was surging then too, we were in the low single digits, which I always thought <em>hey this is a reference site for coding and people code on desktop. </em>But clearly, that&#8217;s changing and perhaps people are reading the site in a more <em>news</em> kinda way, which I like. For years I had goals of making this site <em>both</em> full of referential long-green content <em>and</em> a site you could subscribe to for news, like an industry rag. So far so good.</p>\n\n\n<h3 id=\"content-by-the-numbers\">Content by the Numbers</h3>\n\n\n<p>You&#8217;d think if we missed the mark on new content this year, that perhaps some better year would beat articles-written-in-2021 in traffic, but that&#8217;s not the case. Articles written in 2021 drove the most traffic to the site in 2021 (13.5% of overall traffic). Here are the articles that were top-by-pageviews in 2021 <em>that were written in 2021</em>:</p>\n\n\n\n<ol><li><a href=\"https://css-tricks.com/vs-code-extensions-for-html/\">VS Code Extensions for&nbsp;HTML</a> — Chris Coyier</li><li><a href=\"https://css-tricks.com/how-to-create-neon-text-with-css/\">How to Create Neon Text With&nbsp;CSS</a> — Silvia O&#8217;Dwyer</li><li><a href=\"https://css-tricks.com/animating-with-lottie/\">Animating with Lottie</a> — Idorenyin Udoh&nbsp;</li><li><a href=\"https://css-tricks.com/did-you-know-about-the-has-css-selector/\">Did You Know About the :has CSS&nbsp;Selector?</a> — Robin Rendle</li><li><a href=\"https://css-tricks.com/a-table-with-both-a-sticky-header-and-a-sticky-first-column/\">A table with both a sticky header and a sticky first&nbsp;column</a> — Chris Coyier</li><li><a style=\"font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\" href=\"https://css-tricks.com/comparing-the-new-generation-of-build-tools/\">Comparing the New Generation of Build&nbsp;Tools</a> — Hugh Haworth&nbsp;</li><li><a href=\"https://css-tricks.com/mistakes-ive-made-as-an-engineering-manager/\">Mistakes I’ve Made as an Engineering&nbsp;Manager</a> — Sarah Drasner&nbsp;</li><li><a style=\"font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\" href=\"https://css-tricks.com/lets-create-a-custom-audio-player/\">Let’s Create a Custom Audio&nbsp;Player</a> — Idorenyin Udoh&nbsp;</li><li><a href=\"https://css-tricks.com/html-inputs-and-labels-a-love-story/\">HTML Inputs and Labels: A Love&nbsp;Story</a> — Amber Wilson</li><li><a href=\"https://css-tricks.com/front-end-testing-is-for-everyone/\">Front-End Testing is For&nbsp;Everyone</a> — Evgeny Klimenchenko</li></ol>\n\n\n\n<p class=\"is-style-explanation\">I almost shouldn&#8217;t post these lists! <a href=\"https://www.ctrl.blog/entry/most-copied.html\" rel=\"noopener\">Look at what happens to Daniel&nbsp;Aleksandersen</a>.</p>\n\n\n\n<p>Those articles above range from 100k pageviews to 71k pageviews. What&#8217;s interesting is that if you group together all posts that got 40k or more pageviews, there are 44 of them, putting them at about <strong>2.5-3m</strong> pageviews. That&#8217;s kinda cool I think — the &#8220;medium tail&#8221; of content is pretty thick around here. The flexbox guide page alone did <strong>6.7m</strong> pageviews, so that&#8217;s still a beast, but it is bested by all content published in 2021 which clocks in at 11.8m. So investing in content works, it just needs to get tuned such that we aren&#8217;t dropping overall. Perhaps that means SEO tuning of both new content and old.</p>\n\n\n\n<p>Here&#8217;s 11-20 from 2021 just for fun:</p>\n\n\n\n<ol start=\"11\"><li><a href=\"https://css-tricks.com/to-the-brain-reading-computer-code-is-not-the-same-as-reading-language/\">To the brain, reading computer code is not the same as reading&nbsp;language</a> — Geoff Graham&nbsp;</li><li><a href=\"https://css-tricks.com/in-praise-of-the-unambiguous-click-menu/\">In Praise of the Unambiguous Click&nbsp;Menu</a> — Mark Root-Wiley&nbsp;</li><li><a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\">aspect-ratio</a> — Geoff Graham&nbsp;</li><li><a href=\"https://css-tricks.com/theming-and-theme-switching-with-react-and-styled-components/\">Theming and Theme Switching with React and&nbsp;styled-components</a> — Tapas Adhikary&nbsp;</li><li><a href=\"https://css-tricks.com/the-holy-grail-layout-with-css-grid/\">The Holy Grail Layout with CSS&nbsp;Grid</a> — Chris Coyier</li><li><a href=\"https://css-tricks.com/creating-the-perfect-commit-in-git/\">Creating the Perfect Commit in&nbsp;Git</a> — Tobias Günther&nbsp;</li><li><a href=\"https://css-tricks.com/what-if-you-could-use-visual-studio-code-as-the-editor-of-in-browser-developer-tools/\">What if… you could use Visual Studio Code as the editor of in-browser Developer&nbsp;Tools? </a>— Geoff Graham&nbsp;</li><li><a href=\"https://css-tricks.com/is-css-a-programming-language/\">Is CSS a Programming&nbsp;Language?</a> — Chris Coyier</li><li><a href=\"https://css-tricks.com/a-love-letter-to-html-css/\">A Love Letter to HTML &amp; CSS</a> — Ashley Kolodziej&nbsp;</li><li><a href=\"https://css-tricks.com/json-in-css/\">JSON in CSS</a> — Chris Coyier</li></ol>\n\n\n\n<p>And here&#8217;s the top 10 regardless of year, but still scoped to traffic-in-2021:</p>\n\n\n\n<ol><li><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">A Complete Guide to Flexbox</a></li><li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">A Complete Guide to Grid</a></li><li><a href=\"https://css-tricks.com/perfect-full-page-background-image/\">Perfect Full Page&nbsp;Background&nbsp;Image</a></li><li><a href=\"https://css-tricks.com/using-svg/\">Using SVG</a></li><li><a href=\"https://css-tricks.com/the-shapes-of-css/\">The Shapes of CSS</a></li><li><a href=\"https://css-tricks.com/snippets/css/media-queries-for-standard-devices/\">Media Queries for Standard Devices</a></li><li><a href=\"https://css-tricks.com/almanac/properties/b/box-shadow/\">box-shadow</a></li><li><span style=\"color: initial; font-family: Blanco, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;\"><a href=\"https://css-tricks.com/snippets/css/css-triangle/\">CSS Triangle</a></span></li><li><a href=\"https://css-tricks.com/snippets/css/using-font-face-in-css/\">How to use @font-face in CSS</a></li><li><a href=\"https://css-tricks.com/scale-svg/\">How to Scale&nbsp;SVG</a></li></ol>\n\n\n\n<p>I like seeing the Almanac not only perform pretty well overall but have some individual pages be top-performers on their own. </p>\n\n\n<h3 id=\"comments\">Comments</h3>\n\n\n<p>We had about <strong>4,320</strong> legit comments on the site this year, <em>almost exactly</em> the number from last year. Weird!</p>\n\n\n\n<p>That seems like a lot, especially as we approve&#8230; I&#8217;d say half?&#8230; of commenters that are left. There is a lot of junk posts (e.g. &#8220;good post!&#8221; kinda stuff, that we just don&#8217;t post as to not bother the author with useless email notifications of new comments, nor readers with useless content). We just delete those junk posts (as in, not approve them in the first place). </p>\n\n\n\n<p>There is spam too of course. We crossed the <strong>2m</strong> spam comments threshold, but through a combination of <a href=\"https://akismet.com/\" rel=\"noopener\">Akismet</a> and <a href=\"https://wordpress.org/plugins/anti-spam/\" rel=\"noopener\">Anti-Spam</a> not too much spam sneaks through and is easily trashed before approval. </p>\n\n\n\n<p>Mentally, I really rollercoaster on comments. Sometimes they are great and helpful. Sometimes they are full of rudeness, hate, and anger. Those need to be looked at and trashed, meaning comments represent an entry point into my brain for all that negativity. Part of me thinks we should just shut them off, and if people have something important to say, we can encourage them to use their own blog (it ain&#8217;t hard to spin one up!) to comment and we&#8217;ll link to it if it&#8217;s good. </p>\n\n\n\n<p>But then I think of all the helpful comments and comments that help keep me up to date. Heck I just learned that Chrome is postponing all that removal of <code>alert()</code> stuff <a href=\"https://css-tricks.com/choice-words-about-the-upcoming-deprecation-of-javascript-dialogs/#comment-1787573\">via a comment from Kyle</a>, and I probably would have missed that otherwise. Plus the fact that there are <meta charset=\"utf-8\">4,320 of them this year that pass muster feels like the scale is tipped toward keeping them. </p>\n\n\n<h3 id=\"newsletter\">Newsletter</h3>\n\n\n<p>We&#8217;re at about <strong>91,000</strong> newsletter subscribers as this year wraps, up from 81,000 last year. A respectable march forward and makes it likely we&#8217;ll hit that 100k milestone sometime in 2022. </p>\n\n\n\n<p>Huge props to Robin for leading up <a href=\"https://css-tricks.com/newsletters/\">the newsletter</a> with wonderful writing. I think he really found a voice and stride on the newsletter this year. </p>\n\n\n\n<p>We didn&#8217;t miss a single week. Part of what helps there is that they have sponsors so there is some clear obligation to get them out on time, but I think it&#8217;s more like we have <a href=\"https://css-tricks.com/a-gutenburg-powered-newsletter/\">a system</a> and the system works. </p>\n\n\n\n<p>I&#8217;d really like to juice up newsletter subscriptions moreso because I think it&#8217;s actually a darn nice weekly read than for any specific business reason.</p>\n\n\n<h3 id=\"video\">Video</h3>\n\n\n<p>Thanks to <a href=\"https://daverupert.com/\" rel=\"noopener\">Dave&#8217;s</a> idea that we get <a href=\"https://shoptalkshow.com/video/\" rel=\"noopener\">ShopTalk more into video</a>, we&#8217;ve been using the <a href=\"https://www.youtube.com/realcsstricks\" rel=\"noopener\">CSS-Tricks YouTube channel</a> and thus had a banner year in publishing video! <strong>35</strong> brand new videos!</p>\n\n\n<h3 id=\"site-updates\">Site Updates</h3>\n\n\n<p>The design evolved a bit this year, but nothing overly dramatic. Normally this time of year my fingers are itching for a new design, and believe me there are Figma drafts cooking, but I just haven&#8217;t had the time or inspiration for a true v19 just yet. </p>\n\n\n\n<p>So no major changes to the tech behind the site, but plenty of minor ones. For instance:</p>\n\n\n\n<ul><li>The Yoast SEO plugin was giving me problems. It had super frequent updates, which I guess is good, but there was a high frequency of problems with the updates where either the core plugin or the pro plugin wouldn&#8217;t update correctly (up to causing such problems as literally taking down the site) and settings getting messed up during updates. For a while I just turned it off entirely. But then I started hearing good things about <a href=\"https://rankmath.com/\" rel=\"noopener\">RankMath</a> so I&#8217;m trying that, and so far so good. It&#8217;s got me kinda inspired to take content SEO more seriously. Yoast had some claws in the site in other ways, for example it provides a pretty nice Table of Contents block that I&#8217;m still searching for a solution for (maybe it&#8217;s coming to <a href=\"https://github.com/WordPress/gutenberg/pull/29739\" rel=\"noopener\">core?</a>). It also had pretty nice breadcrumbs, and had to switch over to <a href=\"https://mtekk.us/code/breadcrumb-navxt/\" rel=\"noopener\">Breadcrumb NavXT</a>.</li><li><a href=\"https://wordpress.org/plugins/jetpack-boost/\" rel=\"noopener\">Jetpack Boost</a> is new to the site this year, and I&#8217;m impressed at how it handles critical CSS. <a href=\"https://css-tricks.com/jetpack/\">Jetpack</a> (full disclosure: a long time sponsor) is generally extremely helpful. I particularly like how the site search works, which is just out-of-the-box Jetpack Instant Search.</li><li>We really dialed in <a href=\"https://css-tricks.com/auto-generated-social-media-images/\">the social media images</a> this year. </li><li>We also dialed in the eCommerce situation. The <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter membership</a> unlocks additional content on the site, which I can <a href=\"https://css-tricks.com/the-greatest-css-tricks-vol-i-ebook-pdf-and-epub/\">now provide in eBook formats</a>. So I&#8217;m really all set to produce more of that type of content.</li></ul>\n\n\n<h3 id=\"goal-review\">Goal Review</h3>\n\n\n<p><strong>&#x1f6ab; Publish Three Guides. </strong>I thought this would be easy since last year our goal was 2 guides and we published 9! But this year we only managed one: <a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">A Complete Guide to Custom Properties</a>. We did publish some other pretty big series like Tobias Günther&#8217;s <a href=\"https://css-tricks.com/creating-the-perfect-commit-in-git/#advanced-git-series\">9-part Advanced Git series</a> and four more entries in Jay Hoffman&#8217;s <a href=\"https://css-tricks.com/category/history/\">Web History series</a>. </p>\n\n\n\n<p><meta charset=\"utf-8\"><strong>&#x1f6ab;</strong> <strong>Stay focused on how-to technical content around our strengths.</strong> Kind of a close call here. It&#8217;s not like we didn&#8217;t publish quite a bit of how-to technical content. But I&#8217;m going to say we failed because I don&#8217;t think we kept this in mind strongly enough throughout the year. We didn&#8217;t say &#8220;we&#8217;re good at this type of content so we&#8217;re going to lean into that specifically&#8221; like this goal suggested we should. </p>\n\n\n\n<p><meta charset=\"utf-8\"><strong>&#x1f6ab;</strong> <strong>Complete all missing Almanac entries.</strong> I hate marking this as failed, but I&#8217;m only doing that because of how it was worded with &#8220;all&#8221;. I think I had in mind that there was a really clear finite number of Alamanc articles to finish and we just had to do that. I think it&#8217;s a lot more wishy-washy than that, partially because of editorial choices (do you publish a unique entry for every single <a href=\"https://css-tricks.com/css-logical-properties-and-values/\">logical property</a> or group them, for example). </p>\n\n\n\n<p>But also, should we build an SVG-specific section? Should we have a new section for all the @at rules? It&#8217;s hard to say when the Almanac would be &#8220;complete&#8221;, so I&#8217;d just rather not. This page really needs a cleanup, but it&#8217;s got many ideas in there for more work that needs to be done/commissioned if anyone is so inclined.</p>\n\n\n\n<p>We <em>did</em> do a pretty good job on publishing <em>new</em> entries though — more than any relatively recent year! </p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Almanac Entry</th><th>Published</th></tr></thead><tbody><tr><td><a href=\"https://css-tricks.com/almanac/properties/s/scale/\">scale</a></td><td>2021-11-10</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/t/translate/\">translate</a></td><td>2021-11-09</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/r/rotate/\">rotate</a></td><td>2021-11-08</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-border/\">mask-border</a></td><td>2021-11-03</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/p/padding-inline/\">padding-inline</a></td><td>2021-09-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/overscroll-behavior/\">overscroll-behavior</a></td><td>2021-09-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/b/border-block/\">border-block</a></td><td>2021-09-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/outline-color/\">outline-color</a></td><td>2021-09-01</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/a/accent-color/\">accent-color</a></td><td>2021-08-26</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/b/block-size/\">block-size</a></td><td>2021-08-25</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/outline-style/\">outline-style</a></td><td>2021-08-16</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/o/outline-width/\">outline-width</a></td><td>2021-08-10</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/t/text-emphasis/\">text-emphasis</a></td><td>2021-08-04</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/b/backdrop/\">::backdrop</a></td><td>2021-08-03</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/h/hyphenate-limit-chars/\">hyphenate-limit-chars</a></td><td>2021-07-15</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/f/fullscreen/\">:fullscreen</a></td><td>2021-07-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask/\">mask</a></td><td>2021-07-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/c/content-visibility/\">content-visibility</a></td><td>2021-06-21</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/p/place-content/\">place-content</a></td><td>2021-05-13</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-composite/\">mask-composite</a></td><td>2021-05-10</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/e/empty/\">:empty</a></td><td>2021-04-27</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/w/where/\">:where</a></td><td>2021-03-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/j/justify-self/\">justify-self</a></td><td>2021-03-18</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-type/\">mask-type</a></td><td>2021-03-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/p/place-self/\">place-self</a></td><td>2021-03-02</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/c/current/\">:current</a></td><td>2021-02-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/selectors/f/future/\">:future</a></td><td>2021-02-23</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/b/border-boundary/\">border-boundary</a></td><td>2021-02-09</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/mask-mode/\">mask-mode</a></td><td>2021-02-03</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/c/caret-shape/\">caret-shape</a></td><td>2021-01-27</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/c/caret/\">caret</a></td><td>2021-01-27</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\">aspect-ratio</a></td><td>2021-01-20</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-inline/\">margin-inline</a></td><td>2021-01-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-inline-end/\">margin-inline-end</a></td><td>2021-01-14</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-block-start/\">margin-block-start</a></td><td>2021-01-08</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-block-end/\">margin-block-end</a></td><td>2021-01-08</td></tr><tr><td><a href=\"https://css-tricks.com/almanac/properties/m/margin-block/\">margin-block</a></td><td>2021-01-06</td></tr></tbody></table></figure>\n\n\n<h3 id=\"settting-2022-goals\">Settting 2022 Goals</h3>\n\n\n<ul><li><strong>More SEO focus.</strong> I&#8217;ve almost shunned SEO in the past. Partially because the HTML best practices seem pretty easy and obvious, and my inbox is so full of total slimeball link builders I&#8217;d like to see do literally anything else with their time. Butttt. I&#8217;m just being ignorant about it. I think it will be fun, interesting, and likely useful to take a more considered look at SEO best practices for a content site like this and make a stab at improving it. The related goal being: <strong>Gain 10% in pageview traffic.</strong> We lost 6% this year, so I think 10% will get us back on track and moving upward. But it&#8217;s a big goal so I&#8217;m already nervous about it.</li><li><strong>Another digital book.</strong> All the infrastructure is there for this and I&#8217;ve got ideas. I just need to write and put it in place.</li><li><strong>More social media experimentation. </strong>That&#8217;s a loosey-goosey goal but whatever, we&#8217;ve got our work cut out for us in other ways. Like SEO, for a few years there I kinda shunned dedicated social media work for the CSS-Tricks brand. Mostly because when I look at the traffic numbers, <em>so very little of it</em> comes from social media, especially considering how much time we were spending on it in the past. We don&#8217;t really benefit much from brand social media, so why bother? Well, maybe I was thinking about it the wrong way. Maybe we can just not care what <em>traffic</em> it drives but care about the connection with readers directly there. If we&#8217;re more fun and interesting on social media, maybe we continue to build trust in what we&#8217;re doing here. Maybe it can help drive sales if we get that second goal done. Maybe its more directly monetizeable.</li></ul>\n\n\n<h3 id=\"thank-you\">Thank You</h3>\n\n\n<p>Special thanks to <a href=\"https://geoffgraham.me/\" rel=\"noopener\">Geoff</a>! If you didn&#8217;t know, he&#8217;s our lead editor around here and keeping this entire site humming along nicely. You&#8217;ll work with Geoff if you do any <a href=\"https://css-tricks.com/guest-writing-for-css-tricks/\">guest writing</a> here at all. </p>\n\n\n\n<p>Special thanks to our biggest year-long sponsors <a href=\"https://automattic.com/?aff=8638\" rel=\"noopener\">Automattic</a> and <a href=\"https://frontendmasters.com/?utm_source=css-tricks&amp;utm_medium=website&amp;utm_campaign=css-tricks-tags-sidebar\" rel=\"noopener\">Frontend Masters</a>. <a href=\"https://css-tricks.com/category/2021-end-of-year-thoughts/\">Our year-end series</a> is both a thank you to you the readers and to them. </p>\n\n\n\n<p>To another year!</p>\n\n\n\n<p>&#x1f64f;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/thank-you-2021-edition/\">Thank You (2021 Edition)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "The year has come to a close and it’s time again for our end-of-year wrapup. The most important message is this: thank you. (thankyouthankyou)\n\n\n\nThanks for stopping by and reading this site. If you didn’t, I’d be out of a job around here, and I quite like this job so I owe it all to you. Like a family holiday card, allow me to share how the year went from our perspective, both with numbers and feelings, and then do a review of our goals. \n\n\n\n\n\n\n\n\n\n\nOverall Traffic Analytics Numbers\n\n\nThe site saw 88m pageviews this year down 6% from the 93m last year. Traffic has yo-yo’d up and down a smidge like that a little over the last 4-5 years, but this 6% is a bit of an alarming drop that I don’t like to see. These numbers are from Google Analytics, and some of my own research this year suggests perhaps 20-30% of visitors to this site actually block the run-of-the-mill client-side JavaScript-powered Google Analytics I use. So perhaps the real traffic is higher, but as the analytics implementation is exactly the same and I don’t see any reason blocking would have skyrocketed just this past year alone, the downward movement seems real.\n\n\n\nA ~3% drop in organic search traffic was largely responsible for the dip. That’s big, as search is 74.6% of all traffic. This points to us just not hitting the mark well enough for what people are searching for. A nice 36% increase in direct traffic points to pretty decent brand awareness, but direct traffic is only 5% of overall traffic anyway so it doesn’t make much of a difference compared to search engine traffic. Referral traffic is down, social is up, but both are such small slices right now they just don’t move the needle. \n\n\n\nYou might think, well hey content ages out, search engine traffic to existing content will decline over time. That’s true, but we publish a ton of new content every year as well as maintain and improve existing content, hence the concern. \n\n\n\nWe invest well into 6-figures in new and updated content every year. So seeing a decline in traffic is disheartening. \n\n\n\nBut hey that’s the game sometimes. I suspect it’s heavy competition in the developer writing space, which is something we all benefit from as developers, so it ain’t all bad. We’ll live and learn and do our best to turn it around for the sake of the health of this site. I’ve already got (counts fingers and toes) a million ideas. \n\n\n\nAll that said, while I do think pageviews is an interesting and relevant metric to a site that uses advertising as a primary business model, there are many others. Unique Visitors are up year over year to 26.3m from 25.8m, suggesting more different people came to the site this year, which is great, they just didn’t bop around the site as much or come back quite as often. Pages per visit is very steady at 1.35 meaning for the most part people come, they read, they leave. No surprise there. It’s mostly that “come back” thing to work on.\n\n\nThe Biggest Leap in Mobile Traffic Yet\n\n\nPretty big jump in mobile usage this year! \n\n\n\n2021: 20%2020: 15%2019: 15%2018: 12%\n\n\n\nA fifth of all traffic is pretty interesting. Before 2018, even though mobile traffic was surging then too, we were in the low single digits, which I always thought hey this is a reference site for coding and people code on desktop. But clearly, that’s changing and perhaps people are reading the site in a more news kinda way, which I like. For years I had goals of making this site both full of referential long-green content and a site you could subscribe to for news, like an industry rag. So far so good.\n\n\nContent by the Numbers\n\n\nYou’d think if we missed the mark on new content this year, that perhaps some better year would beat articles-written-in-2021 in traffic, but that’s not the case. Articles written in 2021 drove the most traffic to the site in 2021 (13.5% of overall traffic). Here are the articles that were top-by-pageviews in 2021 that were written in 2021:\n\n\n\nVS Code Extensions for HTML — Chris CoyierHow to Create Neon Text With CSS — Silvia O’DwyerAnimating with Lottie — Idorenyin Udoh Did You Know About the :has CSS Selector? — Robin RendleA table with both a sticky header and a sticky first column — Chris CoyierComparing the New Generation of Build Tools — Hugh Haworth Mistakes I’ve Made as an Engineering Manager — Sarah Drasner Let’s Create a Custom Audio Player — Idorenyin Udoh HTML Inputs and Labels: A Love Story — Amber WilsonFront-End Testing is For Everyone — Evgeny Klimenchenko\n\n\n\nI almost shouldn’t post these lists! Look at what happens to Daniel Aleksandersen.\n\n\n\nThose articles above range from 100k pageviews to 71k pageviews. What’s interesting is that if you group together all posts that got 40k or more pageviews, there are 44 of them, putting them at about 2.5-3m pageviews. That’s kinda cool I think — the “medium tail” of content is pretty thick around here. The flexbox guide page alone did 6.7m pageviews, so that’s still a beast, but it is bested by all content published in 2021 which clocks in at 11.8m. So investing in content works, it just needs to get tuned such that we aren’t dropping overall. Perhaps that means SEO tuning of both new content and old.\n\n\n\nHere’s 11-20 from 2021 just for fun:\n\n\n\nTo the brain, reading computer code is not the same as reading language — Geoff Graham In Praise of the Unambiguous Click Menu — Mark Root-Wiley aspect-ratio — Geoff Graham Theming and Theme Switching with React and styled-components — Tapas Adhikary The Holy Grail Layout with CSS Grid — Chris CoyierCreating the Perfect Commit in Git — Tobias Günther What if… you could use Visual Studio Code as the editor of in-browser Developer Tools? — Geoff Graham Is CSS a Programming Language? — Chris CoyierA Love Letter to HTML & CSS — Ashley Kolodziej JSON in CSS — Chris Coyier\n\n\n\nAnd here’s the top 10 regardless of year, but still scoped to traffic-in-2021:\n\n\n\nA Complete Guide to FlexboxA Complete Guide to GridPerfect Full Page Background ImageUsing SVGThe Shapes of CSSMedia Queries for Standard Devicesbox-shadowCSS TriangleHow to use @font-face in CSSHow to Scale SVG\n\n\n\nI like seeing the Almanac not only perform pretty well overall but have some individual pages be top-performers on their own. \n\n\nComments\n\n\nWe had about 4,320 legit comments on the site this year, almost exactly the number from last year. Weird!\n\n\n\nThat seems like a lot, especially as we approve… I’d say half?… of commenters that are left. There is a lot of junk posts (e.g. “good post!” kinda stuff, that we just don’t post as to not bother the author with useless email notifications of new comments, nor readers with useless content). We just delete those junk posts (as in, not approve them in the first place). \n\n\n\nThere is spam too of course. We crossed the 2m spam comments threshold, but through a combination of Akismet and Anti-Spam not too much spam sneaks through and is easily trashed before approval. \n\n\n\nMentally, I really rollercoaster on comments. Sometimes they are great and helpful. Sometimes they are full of rudeness, hate, and anger. Those need to be looked at and trashed, meaning comments represent an entry point into my brain for all that negativity. Part of me thinks we should just shut them off, and if people have something important to say, we can encourage them to use their own blog (it ain’t hard to spin one up!) to comment and we’ll link to it if it’s good. \n\n\n\nBut then I think of all the helpful comments and comments that help keep me up to date. Heck I just learned that Chrome is postponing all that removal of alert() stuff via a comment from Kyle, and I probably would have missed that otherwise. Plus the fact that there are 4,320 of them this year that pass muster feels like the scale is tipped toward keeping them. \n\n\nNewsletter\n\n\nWe’re at about 91,000 newsletter subscribers as this year wraps, up from 81,000 last year. A respectable march forward and makes it likely we’ll hit that 100k milestone sometime in 2022. \n\n\n\nHuge props to Robin for leading up the newsletter with wonderful writing. I think he really found a voice and stride on the newsletter this year. \n\n\n\nWe didn’t miss a single week. Part of what helps there is that they have sponsors so there is some clear obligation to get them out on time, but I think it’s more like we have a system and the system works. \n\n\n\nI’d really like to juice up newsletter subscriptions moreso because I think it’s actually a darn nice weekly read than for any specific business reason.\n\n\nVideo\n\n\nThanks to Dave’s idea that we get ShopTalk more into video, we’ve been using the CSS-Tricks YouTube channel and thus had a banner year in publishing video! 35 brand new videos!\n\n\nSite Updates\n\n\nThe design evolved a bit this year, but nothing overly dramatic. Normally this time of year my fingers are itching for a new design, and believe me there are Figma drafts cooking, but I just haven’t had the time or inspiration for a true v19 just yet. \n\n\n\nSo no major changes to the tech behind the site, but plenty of minor ones. For instance:\n\n\n\nThe Yoast SEO plugin was giving me problems. It had super frequent updates, which I guess is good, but there was a high frequency of problems with the updates where either the core plugin or the pro plugin wouldn’t update correctly (up to causing such problems as literally taking down the site) and settings getting messed up during updates. For a while I just turned it off entirely. But then I started hearing good things about RankMath so I’m trying that, and so far so good. It’s got me kinda inspired to take content SEO more seriously. Yoast had some claws in the site in other ways, for example it provides a pretty nice Table of Contents block that I’m still searching for a solution for (maybe it’s coming to core?). It also had pretty nice breadcrumbs, and had to switch over to Breadcrumb NavXT.Jetpack Boost is new to the site this year, and I’m impressed at how it handles critical CSS. Jetpack (full disclosure: a long time sponsor) is generally extremely helpful. I particularly like how the site search works, which is just out-of-the-box Jetpack Instant Search.We really dialed in the social media images this year. We also dialed in the eCommerce situation. The MVP Supporter membership unlocks additional content on the site, which I can now provide in eBook formats. So I’m really all set to produce more of that type of content.\n\n\nGoal Review\n\n\n🚫 Publish Three Guides. I thought this would be easy since last year our goal was 2 guides and we published 9! But this year we only managed one: A Complete Guide to Custom Properties. We did publish some other pretty big series like Tobias Günther’s 9-part Advanced Git series and four more entries in Jay Hoffman’s Web History series. \n\n\n\n🚫 Stay focused on how-to technical content around our strengths. Kind of a close call here. It’s not like we didn’t publish quite a bit of how-to technical content. But I’m going to say we failed because I don’t think we kept this in mind strongly enough throughout the year. We didn’t say “we’re good at this type of content so we’re going to lean into that specifically” like this goal suggested we should. \n\n\n\n🚫 Complete all missing Almanac entries. I hate marking this as failed, but I’m only doing that because of how it was worded with “all”. I think I had in mind that there was a really clear finite number of Alamanc articles to finish and we just had to do that. I think it’s a lot more wishy-washy than that, partially because of editorial choices (do you publish a unique entry for every single logical property or group them, for example). \n\n\n\nBut also, should we build an SVG-specific section? Should we have a new section for all the @at rules? It’s hard to say when the Almanac would be “complete”, so I’d just rather not. This page really needs a cleanup, but it’s got many ideas in there for more work that needs to be done/commissioned if anyone is so inclined.\n\n\n\nWe did do a pretty good job on publishing new entries though — more than any relatively recent year! \n\n\n\nAlmanac EntryPublishedscale2021-11-10translate2021-11-09rotate2021-11-08mask-border2021-11-03padding-inline2021-09-23overscroll-behavior2021-09-14border-block2021-09-02outline-color2021-09-01accent-color2021-08-26block-size2021-08-25outline-style2021-08-16outline-width2021-08-10text-emphasis2021-08-04::backdrop2021-08-03hyphenate-limit-chars2021-07-15:fullscreen2021-07-14mask2021-07-02content-visibility2021-06-21place-content2021-05-13mask-composite2021-05-10:empty2021-04-27:where2021-03-23justify-self2021-03-18mask-type2021-03-02place-self2021-03-02:current2021-02-23:future2021-02-23border-boundary2021-02-09mask-mode2021-02-03caret-shape2021-01-27caret2021-01-27aspect-ratio2021-01-20margin-inline2021-01-14margin-inline-end2021-01-14margin-block-start2021-01-08margin-block-end2021-01-08margin-block2021-01-06\n\n\nSettting 2022 Goals\n\n\nMore SEO focus. I’ve almost shunned SEO in the past. Partially because the HTML best practices seem pretty easy and obvious, and my inbox is so full of total slimeball link builders I’d like to see do literally anything else with their time. Butttt. I’m just being ignorant about it. I think it will be fun, interesting, and likely useful to take a more considered look at SEO best practices for a content site like this and make a stab at improving it. The related goal being: Gain 10% in pageview traffic. We lost 6% this year, so I think 10% will get us back on track and moving upward. But it’s a big goal so I’m already nervous about it.Another digital book. All the infrastructure is there for this and I’ve got ideas. I just need to write and put it in place.More social media experimentation. That’s a loosey-goosey goal but whatever, we’ve got our work cut out for us in other ways. Like SEO, for a few years there I kinda shunned dedicated social media work for the CSS-Tricks brand. Mostly because when I look at the traffic numbers, so very little of it comes from social media, especially considering how much time we were spending on it in the past. We don’t really benefit much from brand social media, so why bother? Well, maybe I was thinking about it the wrong way. Maybe we can just not care what traffic it drives but care about the connection with readers directly there. If we’re more fun and interesting on social media, maybe we continue to build trust in what we’re doing here. Maybe it can help drive sales if we get that second goal done. Maybe its more directly monetizeable.\n\n\nThank You\n\n\nSpecial thanks to Geoff! If you didn’t know, he’s our lead editor around here and keeping this entire site humming along nicely. You’ll work with Geoff if you do any guest writing here at all. \n\n\n\nSpecial thanks to our biggest year-long sponsors Automattic and Frontend Masters. Our year-end series is both a thank you to you the readers and to them. \n\n\n\nTo another year!\n\n\n\n🙏\n\nThank You (2021 Edition) originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2022-01-01T17:50:59.000Z",
      "date_modified": "2022-01-01T17:50:59.000Z",
      "_plugin": {
        "pageFilename": "737350f03920d81a4955296b047e2e6008c397f2d29517aef8eb0b675b032f5e.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=360073",
      "url": "https://css-tricks.com/defensive-css/",
      "title": "Defensive CSS",
      "summary": "Ahmad Shadeed nails it again with “Defensive CSS.” The idea is that you should write CSS to be ready for issues caused by dynamic content. \nMore items than you thought would be there? No problem, the area can expand or …\n\nDefensive CSS originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p><br>Ahmad&nbsp;Shadeed nails it again with <a href=\"https://ishadeed.com/article/defensive-css/\" rel=\"noopener\">&#8220;Defensive CSS.&#8221;</a> The idea is that you should write CSS to be <em>ready for issues caused by dynamic content</em>. </p>\n\n\n\n<p>More items than you thought would be there? No problem, the area can expand or scroll. Title too long? No problem, it either wraps or truncates, and won&#8217;t bump into anything weird because margins or gaps are set up. Image come over in an unexpected size? No worries, the layout is designed to make sure the dedicated area is filled with image and will handle the sizing/cropping accordingly.</p>\n\n\n\n<p>There is no such thing as being a good CSS developer and not coding defensively. This is what being a CSS developer is, especially when you factor in progressive enhancement concepts and cross-browser/device unknowns.</p>\n<p><a href=\"https://ishadeed.com/article/defensive-css/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/defensive-css/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/defensive-css/\">Defensive CSS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "Ahmad Shadeed nails it again with “Defensive CSS.” The idea is that you should write CSS to be ready for issues caused by dynamic content. \n\n\n\nMore items than you thought would be there? No problem, the area can expand or scroll. Title too long? No problem, it either wraps or truncates, and won’t bump into anything weird because margins or gaps are set up. Image come over in an unexpected size? No worries, the layout is designed to make sure the dedicated area is filled with image and will handle the sizing/cropping accordingly.\n\n\n\nThere is no such thing as being a good CSS developer and not coding defensively. This is what being a CSS developer is, especially when you factor in progressive enhancement concepts and cross-browser/device unknowns.\nTo Shared Link — Permalink on CSS-Tricks\nDefensive CSS originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2021-12-31T18:41:47.000Z",
      "date_modified": "2021-12-31T18:41:47.000Z",
      "_plugin": {
        "pageFilename": "31cc8d6f8d9f6700e649a1f61f0c7382e8300f019e30946084510b081941ab21.html"
      }
    },
    {
      "id": "https://css-tricks.com/?p=359941",
      "url": "https://css-tricks.com/the-web-is-more-gooder-and-other-observations-on-todays-web-tech/",
      "title": "The Web is More Gooder, and Other Observations on Today’s Web Tech",
      "summary": "I’m actually working on a talk (whew! been a while! kinda feels good!) about just how good the world of building websites has gotten. I plan to cover a wide swath of web tech, on purpose, because I …\n\nThe Web is More Gooder, and Other Observations on Today’s Web Tech originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "content_html": "<p>I&#8217;m actually working on a talk (<em>whew! been a while! kinda feels good!</em>) about just how <em>good</em> the world of building websites has gotten. I plan to cover a wide swath of web tech, on purpose, because I feel like things have gotten good all around. CSS is doing great, but so is nearly everything else involved in making websites, especially if we take care in what we&#8217;re doing.</p>\n\n\n\n<p>It also strikes me that updates to the web platform and the ecosystem around it are generally <em>additive</em>. If you feel like the web used to be simpler, well, perhaps it was—but it also <em>still is</em>. Whatever you could do then you can do now, if you want to, although, it would be a fair point if you&#8217;re job searching and the expectations to get hired involve a wheelbarrow of complicated tech.</p>\n\n\n\n<span id=\"more-359941\"></span>\n\n\n\n<p>This idea of the web getting better feels like it&#8217;s in the water a bit&#8230;</p>\n\n\n\n<p>Chris Ferdinandi in <a href=\"https://gomakethings.com/web-tech-is-better.-developer-norms-are-worse./\" rel=\"noopener\">&#8220;Web tech is better. Developer norms are worse.&#8221;</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>What the modern web can actually do, easily and out-of-the-box, is amazing. My friend Sarah Dayan started her career at around the same time as me, and has&nbsp;<a href=\"https://twitter.com/frontstuff_io/status/1467551852447379462\" rel=\"noopener\">a wonderful thread on how things have changed since then</a>.<br><br>In particular, Sarah talks about the dramatically improved capabilities of the web&nbsp;<em>and</em>&nbsp;expectations from customers and the people who use it.</p><p><strong>Modern web technology is lightyears ahead of the late 2000s.</strong></p></blockquote>\n\n\n\n<p>Wes and Scott on Syntax.fm 410 also <a href=\"https://syntax.fm/show/410/everything-in-web-dev-is-amazing\" rel=\"noopener\">talk about all kinds of stuff that is great now</a>, from HTML, CSS, and JavaScript to tooling and hosting.</p>\n\n\n\n<p>Simeon Griggs in <a href=\"https://www.simeongriggs.dev/there-has-never-been-a-better-time-to-build-websites\" rel=\"noopener\">&#8220;There&#8217;s never been a better time to build websites&#8221;</a> has a totally different take on what is great on the web these days than mine, but I appreciate that. The <em>options</em> around building websites have also widened, meaning there are approaches to things that just feel better to people who think and work in different ways. </p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>While there&#8217;s absolutely a learning curve to getting started, once you&#8217;ve got momentum, modern web development feels like having rocket boosters. The distance between idea and execution is as short as it&#8217;s ever been.</p></blockquote>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/the-web-is-more-gooder-and-other-observations-on-todays-web-tech/\">The Web is More Gooder, and Other Observations on Today&#8217;s Web Tech</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>",
      "content_text": "I’m actually working on a talk (whew! been a while! kinda feels good!) about just how good the world of building websites has gotten. I plan to cover a wide swath of web tech, on purpose, because I feel like things have gotten good all around. CSS is doing great, but so is nearly everything else involved in making websites, especially if we take care in what we’re doing.\n\n\n\nIt also strikes me that updates to the web platform and the ecosystem around it are generally additive. If you feel like the web used to be simpler, well, perhaps it was—but it also still is. Whatever you could do then you can do now, if you want to, although, it would be a fair point if you’re job searching and the expectations to get hired involve a wheelbarrow of complicated tech.\n\n\n\n\n\n\n\nThis idea of the web getting better feels like it’s in the water a bit…\n\n\n\nChris Ferdinandi in “Web tech is better. Developer norms are worse.”:\n\n\n\nWhat the modern web can actually do, easily and out-of-the-box, is amazing. My friend Sarah Dayan started her career at around the same time as me, and has a wonderful thread on how things have changed since then.In particular, Sarah talks about the dramatically improved capabilities of the web and expectations from customers and the people who use it.Modern web technology is lightyears ahead of the late 2000s.\n\n\n\nWes and Scott on Syntax.fm 410 also talk about all kinds of stuff that is great now, from HTML, CSS, and JavaScript to tooling and hosting.\n\n\n\nSimeon Griggs in “There’s never been a better time to build websites” has a totally different take on what is great on the web these days than mine, but I appreciate that. The options around building websites have also widened, meaning there are approaches to things that just feel better to people who think and work in different ways. \n\n\n\nWhile there’s absolutely a learning curve to getting started, once you’ve got momentum, modern web development feels like having rocket boosters. The distance between idea and execution is as short as it’s ever been.\n\nThe Web is More Gooder, and Other Observations on Today’s Web Tech originally published on CSS-Tricks. You should get the newsletter and become a supporter.",
      "date_published": "2021-12-30T20:08:07.000Z",
      "date_modified": "2021-12-30T20:08:07.000Z",
      "_plugin": {
        "pageFilename": "e8cbc7fa8ae5d9c82cf7c8fa61ae6b1232062147066385a345aab4b9ca146484.html"
      }
    }
  ],
  "_plugin": {
    "rawFeed": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\"\n\txmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n\txmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n\txmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n\txmlns:atom=\"http://www.w3.org/2005/Atom\"\n\txmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n\txmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\"\n\t xmlns:media=\"http://search.yahoo.com/mrss/\" \n\txmlns:georss=\"http://www.georss.org/georss\"\n\txmlns:geo=\"http://www.w3.org/2003/01/geo/wgs84_pos#\"\n\t>\n\n<channel>\n\t<title>CSS-Tricks</title>\n\t<atom:link href=\"https://css-tricks.com/feed/\" rel=\"self\" type=\"application/rss+xml\" />\n\t<link>https://css-tricks.com</link>\n\t<description>Tips, Tricks, and Techniques on using Cascading Style Sheets.</description>\n\t<lastBuildDate>Thu, 27 Jan 2022 18:34:23 +0000</lastBuildDate>\n\t<language>en-US</language>\n\t<sy:updatePeriod>\n\thourly\t</sy:updatePeriod>\n\t<sy:updateFrequency>\n\t1\t</sy:updateFrequency>\n\t<generator>https://wordpress.org/?v=5.9</generator>\n\n<image>\n\t<url>https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=32%2C32&#038;ssl=1</url>\n\t<title>CSS-Tricks</title>\n\t<link>https://css-tricks.com</link>\n\t<width>32</width>\n\t<height>32</height>\n</image> \n<site xmlns=\"com-wordpress:feed-additions:1\">45537868</site>\t<item>\n\t\t<title>Demystifying TypeScript Discriminated Unions</title>\n\t\t<link>https://css-tricks.com/typescript-discriminated-unions/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/typescript-discriminated-unions/#respond</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Adam Rackis]]></dc:creator>\n\t\t<pubDate>Thu, 27 Jan 2022 15:20:57 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[typescript]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=362091</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>TypeScript is a wonderful tool for writing JavaScript that scales. It’s more or less the de facto standard for the web when it comes to large JavaScript projects. As outstanding as it is, there are some <a href=\"https://css-tricks.com/typescript-relevance/\">tricky pieces for the </a>&#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/typescript-discriminated-unions/\">Demystifying TypeScript Discriminated Unions</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>TypeScript is a wonderful tool for writing JavaScript that scales. It’s more or less the de facto standard for the web when it comes to large JavaScript projects. As outstanding as it is, there are some <a href=\"https://css-tricks.com/typescript-relevance/\">tricky pieces for the unaccustomed</a>. One such area is TypeScript discriminated unions.</p>\n\n\n\n<p>Specifically, given this code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">interface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}\nlet animal: Dog | Cat;</code></pre>\n\n\n\n<p>&#8230;many developers are surprised (and maybe even angry) to discover that when they do <code>animal.</code>, only the <code>weight</code> property is valid, and not <code>whiskers</code> or <code>friendly</code>. By the end of this post, this will make perfect sense.</p>\n\n\n\n<span id=\"more-362091\"></span>\n\n\n\n<p>Before we dive in, let’s do a quick (and necessary) review of structural typing, and how it differs from nominal typing. This will set up our discussion of TypeScript&#8217;s discriminated unions nicely.</p>\n\n\n\n<h3 id=\"structural-typing\">Structural typing</h3>\n\n\n\n<p>The best way to introduce structural typing is to compare it to <em>what it’s not</em>. Most typed languages you’ve probably used are nominally typed. Consider this C# code (Java or C++ would look similar):</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">class Foo {\n  public int x;\n}\nclass Blah {\n  public int x;\n}</code></pre>\n\n\n\n<p>Even though <code>Foo</code> and <code>Blah</code> are structured exactly the same, they cannot be assigned to one another. The following code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">Blah b = new Foo();</code></pre>\n\n\n\n<p>…generates this error:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">Cannot implicitly convert type 'Foo' to 'Blah'</code></pre>\n\n\n\n<p>The <em>structure</em> of these classes is irrelevant. A variable of type <code>Foo</code> can only be assigned to instances of the <code>Foo</code> class (or subclasses thereof).</p>\n\n\n\n<p>TypeScript operates the opposite way. TypeScript considers types to be compatible if they have the same <em>structure</em>—hence the name, <strong>structural typing</strong>. Get it?</p>\n\n\n\n<p>So, the following runs without error:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">class Foo {\n  x: number = 0;\n}\nclass Blah {\n  x: number = 0;\n}\nlet f: Foo = new Blah();\nlet b: Blah = new Foo();</code></pre>\n\n\n\n<h3 id=\"types-as-sets-of-matching-values\">Types as sets of matching values</h3>\n\n\n\n<p>Let’s hammer this home. Given this code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">class Foo {\n  x: number = 0;\n}\n\nlet f: Foo;</code></pre>\n\n\n\n<p><code>f</code> is a variable holding any object that matches the <em>structure</em> of instances created by the <code>Foo</code> class which, in this case, means an <code>x</code> property that represents a number. That means even a plain JavaScript object will be accepted.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let f: Foo;\nf = {\n  x: 0\n}</code></pre>\n\n\n\n<h3 id=\"unions\">Unions</h3>\n\n\n\n<p>Thanks for sticking with me so far. Let’s get back to the code from the beginning:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">interface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}</code></pre>\n\n\n\n<p>We know that this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog;</code></pre>\n\n\n\n<p>&#8230;makes <code>animal</code> any object that has the same structure as the <code>Dog</code> interface. So what does the following mean?</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat;</code></pre>\n\n\n\n<p>This types <code>animal</code> as any object that matches the <code>Dog</code> interface, <strong>or any object that matches the <code>Cat</code> interface</strong>.</p>\n\n\n\n<p>So why does <code>animal</code>—as it exists now—only allow us to access the <code>weight</code> property? To put it simply, it’s because TypeScript does not know which type it is. TypeScript knows that <code>animal</code> has to be either a <code>Dog</code> or <code>Cat</code>, but it <em>could</em> be either (or both at the same time, but let&#8217;s keep it simple). We’d likely get runtime errors if we were allowed to access the <code>friendly</code> property, but the instance wound up being a <code>Cat</code> instead of a <code>Dog</code>. Likewise for the <code>whiskers</code> property if the object wound up being a <code>Dog</code>.</p>\n\n\n\n<p>Type unions are unions of valid values rather than unions of properties. Developers often write something like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat;</code></pre>\n\n\n\n<p>&#8230;and expect <code>animal</code> to have the union of <code>Dog</code> and <code>Cat</code> properties. But again, that’s a mistake. This specifies <code>animal</code> as having a <strong>value</strong> that matches the union of valid <code>Dog</code> values and valid <code>Cat</code> values. But TypeScript will only allow you to access properties it <em>knows</em> are there. For now, that means properties on all the types in the union.</p>\n\n\n\n<h3 id=\"narrowing\">Narrowing</h3>\n\n\n\n<p>Right now, we have this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat;</code></pre>\n\n\n\n<p>How do we properly treat <code>animal</code> as a <code>Dog</code> when it’s a <code>Dog</code>, and access properties on the <code>Dog</code> interface, and likewise when it’s a <code>Cat</code>? For now, we can use the <code>in</code> operator. This is an old-school JavaScript operator you probably don’t see very often, but it essentially allows us to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\" rel=\"noopener\">test if a property is in an object</a>. Like this:</p>\n\n\n\n<pre rel=\"JSX\" class=\"wp-block-csstricks-code-block language-jsx\" data-line=\"\"><code markup=\"tt\">let o = { a: 12 };\n\n\"a\" in o; // true\n\"x\" in o; // false</code></pre>\n\n\n\n<p>It turns out TypeScript is deeply integrated with the <code>in</code> operator. Let’s see how:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat = {} as any;\n\nif (\"friendly\" in animal) {\n  console.log(animal.friendly);\n} else {\n  console.log(animal.whiskers);\n}</code></pre>\n\n\n\n<p>This code produces no errors. When inside the <code>if</code> block, TypeScript knows there’s a <code>friendly</code> property, and therefore casts <code>animal</code> as a <code>Dog</code>. And when inside the <code>else</code> block, TypeScript similarly treats <code>animal</code> as a <code>Cat</code>. You can even see this if you hover over the animal object inside these blocks in your code editor:</p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"530\" height=\"240\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631612006_image.png?resize=530%2C240&#038;ssl=1\" alt=\"Showing a tooltip open on top of a a TypeScript discriminated unions example that shows `let animal: Dog`.\" class=\"wp-image-362094\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631612006_image.png?w=530&amp;ssl=1 530w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631612006_image.png?resize=300%2C136&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"546\" height=\"238\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631569569_image.png?resize=546%2C238&#038;ssl=1\" alt=\"Showing a tooltip open on top of a a TypeScript discriminated union example that shows `let animal: Cat`.\" class=\"wp-image-362095\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631569569_image.png?w=546&amp;ssl=1 546w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639631569569_image.png?resize=300%2C131&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n</div>\n\n\n\n<h3 id=\"discriminated-unions\">Discriminated unions</h3>\n\n\n\n<p>You might expect the blog post to end here but, unfortunately, narrowing type unions by checking for the existence of properties is incredibly limited. It worked well for our trivial <code>Dog</code> and <code>Cat</code> types, but things can easily get more complicated, and more fragile, when we have more types, as well as more overlap between those types.</p>\n\n\n\n<p>This is where discriminated unions come in handy. We’ll keep everything the same from before, except add a property to each type whose only job is to distinguish (or “discriminate”) between the types:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">interface Cat {\n  weight: number;\n  whiskers: number;\n  ANIMAL_TYPE: \"CAT\";\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n  ANIMAL_TYPE: \"DOG\";\n}</code></pre>\n\n\n\n<p>Note the <code>ANIMAL_TYPE</code> property on both types. Don’t mistake this as a string with two different values; this is a literal type. <code>ANIMAL_TYPE: \"CAT\";</code> means a type that holds exactly the string <code>\"CAT\"</code>, and nothing else.</p>\n\n\n\n<p>And now our check becomes a bit more reliable:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let animal: Dog | Cat = {} as any;\n\nif (animal.ANIMAL_TYPE === \"DOG\") {\n  console.log(animal.friendly);\n} else {\n  console.log(animal.whiskers);\n}</code></pre>\n\n\n\n<p>Assuming each type participating in the union has a distinct value for the <code>ANIMAL_TYPE</code> property, this check becomes foolproof.</p>\n\n\n\n<p>The only downside is that you now have a new property to deal with. Any time you create an instance of a <code>Dog</code> or a <code>Cat</code>, you have to supply the <em>single</em> correct value for the <code>ANIMAL_TYPE</code>. But don’t worry about forgetting because TypeScript will remind you. &#x1f642;</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"942\" height=\"268\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719169299_image.png?resize=942%2C268&#038;ssl=1\" alt=\"Showing the TypeScript discriminated union for a createDog function that returns weight and friendly properties.\" class=\"wp-image-362099\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719169299_image.png?w=942&amp;ssl=1 942w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719169299_image.png?resize=300%2C85&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719169299_image.png?resize=768%2C218&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1832\" height=\"428\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=1832%2C428&#038;ssl=1\" alt=\"Screenshot of TypeScript displaying a warning in the code editor as a result of not providing a single value for the ANIMAL_TYPE property.\" class=\"wp-image-362098\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?w=1832&amp;ssl=1 1832w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=300%2C70&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=1024%2C239&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=768%2C179&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=1536%2C359&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_C042550731363AC0140758934CB7FC9C2D11FACDC25250023A2CC6E2179F8848_1639719190854_image.png?resize=1000%2C234&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p></p>\n\n\n\n<h2 id=\"further-reading\"><br>Further reading</h2>\n\n\n\n<p>If you&#8217;d like to learn more, I&#8217;d recommend the TypeScript <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\" rel=\"noopener\">docs on narrowing</a>. That&#8217;ll provide some deeper coverage of what we went over here. Inside of that link is a section on <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\" rel=\"noopener\">type predicates</a>. These allow you to define your own, custom checks to narrow types, without needing to use type discriminators, and without relying on the <code>in</code> keyword.</p>\n\n\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n\n\n<p>At the beginning of this article, I said it would make sense why <code>weight</code> is the only accessible property in the following example:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">interface Cat {\n  weight: number;\n  whiskers: number;\n}\ninterface Dog {\n  weight: number;\n  friendly: boolean;\n}\nlet animal: Dog | Cat;</code></pre>\n\n\n\n<p>What we learned is that TypeScript only knows that <code>animal</code> could be either a <code>Dog</code> or a <code>Cat</code>, but not both. As such, all we get is <code>weight</code>, which is the only common property between the two.</p>\n\n\n\n<p>The concept of <strong>discriminated unions</strong> is how TypeScript differentiates between those objects and does so in a way that scales extremely well, even with larger sets of objects. As such, we had to create a new <code>ANIMAL_TYPE</code> property on both types that holds a single literal value we can use to check against. Sure, it’s another thing to track, but it also produces more reliable results—which is what we want from TypeScript in the first place.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/typescript-discriminated-unions/\">Demystifying TypeScript Discriminated Unions</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/typescript-discriminated-unions/feed/</wfw:commentRss>\n\t\t\t<slash:comments>0</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">362091</post-id>\t</item>\n\t\t<item>\n\t\t<title>Build, Ship, &#038; Maintain Design Systems with Backlight</title>\n\t\t<link>https://css-tricks.com/design-systems-with-backlight/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/design-systems-with-backlight/#respond</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Thu, 27 Jan 2022 15:18:25 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[Sponsored]]></category>\n\t\t<category><![CDATA[backlight]]></category>\n\t\t<category><![CDATA[design systems]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=361971</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>Design systems are an entire job these days. Agencies are hired to create them. In-house teams are formed to handle them, shipping them so that other teams can use them and helping ensure they &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/design-systems-with-backlight/\">Build, Ship, &#038; Maintain Design Systems with Backlight</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>Design systems are an entire job these days. Agencies are hired to create them. In-house teams are formed to handle them, shipping them so that other teams can use them and helping ensure they do. Design systems aren&#8217;t a fad, they are a positive evolution of how digital design is done. <a href=\"https://srv.buysellads.com/ads/long/x/TFIVHAD3TTTTTT3JJUSC4TTTTTTVTWGUK6TTTTTTLTNGTYVTTTTTTMLMFHLDKBIGVQ2DE7I3VHIW6LDD22WNPAB322JE\" rel=\"noopener\">Backlight</a> is the ultimate all-in-one development tool for design systems.</p>\n\n\n\n<p>I think it&#8217;s interesting to start thinking about this at the end. What&#8217;s the best-case scenario for a design system for websites? I think it&#8217;s when you&#8217;ve published a versioned design system to npm. That way teams can pull it in as a dependency on the project and use it. How do you do that? Your design system is on GitHub and you publish from there. How do you do that? You work on your design system through a development environment that pushes to GitHub. What is Backlight? It&#8217;s that development environment. </p>\n\n\n\n<span id=\"more-361971\"></span>\n\n\n\n<h3 id=\"spin-up-a-complete-design-system-in-seconds\">Spin up a complete design system in seconds</h3>\n\n\n\n<p>Wanna watch me do it?</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"cleanshot-2022-01-21-at-13-58-34-mp4\" width='500' height='377' src='https://videopress.com/embed/wOa1BB7c?cover=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>You don&#8217;t <em>have</em> to pick a starter template, but it&#8217;s enlightening to see all the possibilities. Backlight isn&#8217;t particularly opinionated about what technology you want to use for the system. Lit and Web Components? Great. React and Emotion? Cool. Just Vue? All good. Nunjucks and Sass? That works.</p>\n\n\n\n<p>Having a starter design system really gives you a leg up here. If you&#8217;re cool with using something off-the-shelf and then customizing it, you&#8217;ll be off and running incredibly quickly. Something that you might assume would take a few weeks to figure out and settle into is done in an instant. And if you want to be 100% custom about everything, that&#8217;s still completely on the table. </p>\n\n\n\n<h3 id=\"kick-it-up-to-github\">Kick it up to GitHub</h3>\n\n\n\n<p>Even if you&#8217;re still just testing, I think it&#8217;s amazingly easy and impressive how you can just create a GitHub (or GitLab) repo and push to it in a few clicks.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"731\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=1024%2C731&#038;ssl=1\" alt=\"\" class=\"wp-image-362414\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=1024%2C731&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=300%2C214&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=768%2C548&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=1536%2C1096&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=2048%2C1462&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.06.31-PM.png?resize=1000%2C714&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"731\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=1024%2C731&#038;ssl=1\" alt=\"\" class=\"wp-image-362415\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=1024%2C731&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=300%2C214&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=768%2C548&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=1536%2C1096&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=2048%2C1462&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.07.14-PM.png?resize=1000%2C714&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"874\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=1024%2C874&#038;ssl=1\" alt=\"\" class=\"wp-image-362416\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=1024%2C874&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=300%2C256&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=768%2C656&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=1536%2C1311&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=2048%2C1748&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.08.54-PM.png?resize=1000%2C854&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>To me, this is the moment it really becomes real. This isn&#8217;t some third-party tool where everyone is 100% forced to use it and you&#8217;re locked into it forever and it&#8217;s only really useful when people buy into the third-party tool. <a href=\"https://srv.buysellads.com/ads/long/x/TFIVHAD3TTTTTT3JJUSC4TTTTTTVTWGUK6TTTTTTLTNGTYVTTTTTTMLMFHLDKBIGVQ2DE7I3VHIW6LDD22WNPAB322JE\" rel=\"noopener\">Backlight</a> just takes very industry-standard practices and makes them easier and more convenient to work with. </p>\n\n\n\n<h3 id=\"then-kick-it-to-a-registry\">Then, kick it to a registry.</h3>\n\n\n\n<p>Like I said at the top, this is the big moment for any design system. When you send it to a package registry like <a href=\"https://www.npmjs.com/\" rel=\"noopener\">npm</a> or <a href=\"https://github.com/features/packages\" rel=\"noopener\">GitHub packages</a>, that means that anyone hoping to use your design system can now install it and use it like any other dependency. </p>\n\n\n\n<p>In Backlight, this is just a matter of clicking a few buttons. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"778\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=1024%2C778&#038;ssl=1\" alt=\"\" class=\"wp-image-362605\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=1024%2C778&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=300%2C228&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=768%2C583&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=1536%2C1167&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=2048%2C1556&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-25-at-1.18.24-PM.png?resize=1000%2C760&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>With a PRO membership, you can change the scope to your own organization. Soon you&#8217;ll be handling all your design system releases right from here, including major, minor, and patch versions. </p>\n\n\n\n<h3 id=\"make-a-component\">Make a Component</h3>\n\n\n\n<p>I&#8217;d never used Backlight before, nobody helped me, and I didn&#8217;t read any of the (robust) documentation. I just clicked around and created a new Component easily. In my case here, I made a new Nunjucks <code>macro</code>, made some SCSS styles, then created a demo of it as a Storybook &#8220;story&#8221;. All I did was reference an existing component to see how it all worked. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"635\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=1024%2C635&#038;ssl=1\" alt=\"\" class=\"wp-image-362417\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=1024%2C635&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=300%2C186&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=768%2C477&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=1536%2C953&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=2048%2C1271&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.25.08-PM.png?resize=1000%2C621&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>As one of the creators of CodePen, of course, I highly appreciated the in-browser IDE qualities to all this. It runs re-builds your code changes (looks like a Vite process) super quickly, alerting you helpfully to any errors. </p>\n\n\n\n<p>Now because this is a Very Real Serious Design System, I wouldn&#8217;t push this new component directly to <code>master</code> in our repository, first it becomes a branch, and then I commit to that. I wouldn&#8217;t have to know anything at all about Git to pull this off, look how easy it is:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"635\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=1024%2C635&#038;ssl=1\" alt=\"\" class=\"wp-image-362418\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=1024%2C635&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=300%2C186&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=768%2C477&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=1536%2C953&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=2048%2C1271&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-21-at-2.27.57-PM.png?resize=1000%2C621&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 id=\"howdy-stakeholders\">Howdy, Stakeholders!</h3>\n\n\n\n<p>Design systems are as much of a people concern as they are a technological concern. Design systems need to get talked about. I really appreciate how I can share Backlight with anyone, even if they aren&#8217;t logged in. Just copy a sharing link (that nobody could ever guess) and away you go. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"671\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=1024%2C671&#038;ssl=1\" alt=\"\" class=\"wp-image-362419\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=1024%2C671&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=300%2C197&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=768%2C504&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=1536%2C1007&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=2048%2C1343&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-21-at-14.31.49@2x.png?resize=1000%2C656&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3 id=\"there-is-a-lot-here\">There is a lot here.</h3>\n\n\n\n<p>You can manage an entire design system in here. You&#8217;re managing things from the atomic token level all the way up to building example pages and piecing together the system. You&#8217;re literally writing the code to build all this stuff, including the templates, stories, and tests, right there in Backlight. </p>\n\n\n\n<p class=\"is-style-explanation\">What about those people on your team who really just can&#8217;t be persuaded to leave their local development environment. Backlight understands this, and it doesn&#8217;t force them to! Backlight has <a href=\"https://backlight.dev/docs/cli\" rel=\"noopener\">a CLI</a> which enables local development, including spinning up a server to preview active work. </p>\n\n\n\n<p>But it doesn&#8217;t stop there. You can build documentation for everything right in Backlight. Design systems are often best explained in words! And design systems might actually start life (or live a parallel life) in entirely design-focused software like Figma, Sketch, or Adobe XD. It&#8217;s possible to link design documents right in Backlight, making them easy to find and much more organized. </p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>I&#8217;m highly impressed! I wasn&#8217;t sure at first what to make of a tool that wants to be a complete tool for design systems, knowing how complex that whole world is, but <a href=\"https://srv.buysellads.com/ads/long/x/TFIVHAD3TTTTTT3JJUSC4TTTTTTVTWGUK6TTTTTTLTNGTYVTTTTTTMLMFHLDKBIGVQ2DE7I3VHIW6LDD22WNPAB322JE\" rel=\"noopener\">Backlight</a> really delivers in a way that I find highly satisfying, especially coming at it from the role of a front-end developer, designer, and manager.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/design-systems-with-backlight/\">Build, Ship, &#038; Maintain Design Systems with Backlight</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/design-systems-with-backlight/feed/</wfw:commentRss>\n\t\t\t<slash:comments>0</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">361971</post-id>\t</item>\n\t\t<item>\n\t\t<title>How to Cycle Through Classes on an HTML Element</title>\n\t\t<link>https://css-tricks.com/cycle-through-classes-html-element/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/cycle-through-classes-html-element/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Wed, 26 Jan 2022 19:48:49 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[classes]]></category>\n\t\t<category><![CDATA[classlist]]></category>\n\t\t<category><![CDATA[JavaScript]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=361200</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Say you have three HTML classes, and a DOM element should only have one of them at a time:</p>\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&#60;div class=\"state-1\"&#60;/div&#60;div class=\"state-2\"&#60;/div&#60;div class=\"state-3\"&#60;/div</code></pre>\n<p>Now your job is to rotate them. That is, cycle through classes &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/cycle-through-classes-html-element/\">How to Cycle Through Classes on an HTML Element</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>Say you have three HTML classes, and a DOM element should only have one of them at a time:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"state-1\">&lt;/div>\n&lt;div class=\"state-2\">&lt;/div>\n&lt;div class=\"state-3\">&lt;/div></code></pre>\n\n\n\n<p>Now your job is to rotate them. That is, cycle through classes on an HTML element. When some event occurs, if the element has <code>state-1</code> on it, remove <code>state-1</code> and add <code>state-2</code>. If it has <code>state-2</code> on it, remove that and add <code>state-3</code>. On the last state, remove it, and cycle back to <code>state-1</code>.</p>\n\n\n\n<span id=\"more-361200\"></span>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/CleanShot-2022-01-19-at-07.02.53.gif?resize=538%2C339&#038;ssl=1\" alt=\"Example of how to Cycle Through Classes on an HTML Element. Here a large <button&gt; with an <svg&gt; inside cycles through state-1, state-2, and state-3 classes, turning from red to yellow to green.\" class=\"wp-image-362171\" width=\"538\" height=\"339\" data-recalc-dims=\"1\" /></figure></div>\n\n\n\n<p>It&#8217;s notable that we&#8217;re talking about 3+ classes here. The DOM has a <code>.classList.toggle()</code> function, even one that takes a conditional as a second parameter, but that&#8217;s primarily useful in a two-class on/off situation, not cycling through classes.</p>\n\n\n\n<p class=\"is-style-explanation\"><strong>Why?</strong> There is a number of reasons. Changing a class name gives you lots of power to re-style things in the DOM, and state management like that is a cornerstone of modern web development. But to be specific, in my case, I was wanting to do <a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\">FLIP animations</a> where I&#8217;d change a layout and trigger a tween animation between the different states.</p>\n\n\n\n<p class=\"is-style-explanation\"><strong>Careful</strong> about existing classes! I saw some ideas that overwrote <code>.className</code>, which isn&#8217;t friendly toward other classes that might be on the DOM element. All these are &#8220;safe&#8221; choices for cycling through classes in that way.</p>\n\n\n\n<p>Because this is programming, there are <em>lots</em> of ways to get this done. Let&#8217;s cover a bunch of them — <em>for fun.</em> I <a href=\"https://twitter.com/chriscoyier/status/1481028373002473472\" rel=\"noopener\">tweeted about this issue</a>, so many of these solutions are from people who chimed into that discussion.</p>\n\n\n\n<h3 id=\"a-verbose-if-else-statement-to-cycle-through-classes\">A verbose if/else statement to cycle through classes</h3>\n\n\n\n<p>This is what I did at first to cycle through classes. That&#8217;s how my brain works. Just write out very specific instructions for exactly what you want to happen:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">if (el.classList.contains(\"state-1\")) {\n  el.classList.remove(\"state-1\");\n  el.classList.add(\"state-2\");\n} else if (el.classList.contains(\"state-2\")) {\n  el.classList.remove(\"state-2\");\n  el.classList.add(\"state-3\");\n} else {\n  el.classList.remove(\"state-3\");\n  el.classList.add(\"state-1\");\n}</code></pre>\n\n\n\n<p>I don&#8217;t mind the verbosity here, because to me it&#8217;s super clear what&#8217;s going on and will be easy to return to this code and &#8220;reason about it,&#8221; as they say. You could consider the verbosity a problem — surely there is a way to cycle through classes with less code. But a bigger issue is that it isn&#8217;t very extensible. There is no semblance of configuration (e.g. change the names of the classes easily) or simple way to add classes to the party, or remove them. </p>\n\n\n\n<p>We could use constants, at least:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const STATE_1 = \"state-1\";\nconst STATE_2 = \"state-2\";\nconst STATE_3 = \"state-3\";\n\nif (el.classList.contains(STATE_1)) {\n  el.classList.remove(STATE_1);\n  el.classList.add(STATE_2);\n} else if (el.classList.contains(STATE_2)) {\n  el.classList.remove(STATE_2);\n  el.classList.add(STATE_3);\n} else {\n  el.classList.remove(STATE_3);\n  el.classList.add(STATE_1);\n}</code></pre>\n\n\n\n<p>But that&#8217;s not wildly different or better.</p>\n\n\n\n<h3 id=\"regex-off-the-old-class-increment-state-then-re-add\">RegEx off the old class, increment state, then re-add</h3>\n\n\n\n<p>This one <a href=\"https://twitter.com/tabatkins/status/1481030336481947648\" rel=\"noopener\">comes from Tab Atkins</a>. Since we know the format of the class, <code>state-N</code>, we can look for that, pluck off the number, use a little ternary to increment it (but not higher than the highest state), then add/remove the classes as a way of cycling through them:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const oldN = +/\\bstate-(\\d+)\\b/.exec(el.getAttribute('class'))[1];\nconst newN = oldN >= 3 ? 1 : oldN+1;\nel.classList.remove(`state-${oldN}`);\nel.classList.add(`state-${newN}`);</code></pre>\n\n\n\n<h3 id=\"find-the-index-of-the-class-then-remove-add\">Find the index of the class, then remove/add</h3>\n\n\n\n<p>A bunch of techniques to cycle through classes center around setting up an array of classes up front. This acts as configuration for cycling through classes, which I think is a smart way to do it. Once you have that, you can find the relevant classes for adding and removing them. This one is <a href=\"https://twitter.com/ckirknielsen/status/1481047709654167553\" rel=\"noopener\">from Christopher Kirk-Nielsen</a>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const classes = [\"state-1\", \"state-2\", \"state-3\"];\nconst activeIndex = classes.findIndex((c) => el.classList.contains(c));\nconst nextIndex = (activeIndex + 1) % classes.length;\n\nel.classList.remove(classes[activeIndex]);\nel.classList.add(classes[nextIndex]);</code></pre>\n\n\n\n<p>Christopher had a nice idea for making the add/remove technique shorter as well. Turns out it&#8217;s the same&#8230;</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">el.classList.remove(classes[activeIndex]);\nel.classList.add(classes[nextIndex]);\n\n// Does the same thing.\nel.classList.replace(classes[activeIndex], classes[nextIndex]);</code></pre>\n\n\n\n<p><a href=\"https://twitter.com/m_yxnk/status/1481037368220164097\" rel=\"noopener\">Mayank had a similar idea</a> for cycling through classes by finding the class in an array, only rather than using <code>classList.contains()</code>, you check the classes currently on the DOM element with what is in the array.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const states = [\"state-1\", \"state-2\", \"state-3\"];\nconst current = [...el.classList].find(cls => states.includes(cls));\nconst next = states[(states.indexOf(current) + 1) % states.length];\nel.classList.remove(current);\nel.classList.add(next);</code></pre>\n\n\n\n<p>Variations of this were the most common idea. <a href=\"https://twitter.com/jh3yy/status/1481034247473438725\" rel=\"noopener\">Here&#8217;s Jhey&#8217;s</a> and <a href=\"https://twitter.com/mike_wagz/status/1481032265333415941\" rel=\"noopener\">here&#8217;s Mike Wagz</a> which sets up functions for moving forward and backward.</p>\n\n\n\n<h3 id=\"cascading-replace-statements\">Cascading replace statements</h3>\n\n\n\n<p>Speaking of that <code>replace</code> API, <a href=\"https://twitter.com/ccalo/status/1481221461293600772\" rel=\"noopener\">Chris Calo had a clever idea</a> where you chain them with the <code>or</code> operator and rely on the fact that it returns true/false if it works or doesn&#8217;t. So you do all three and one of them will work!</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\"> el.classList.replace(\"state-1\", \"state-2\") ||\n el.classList.replace(\"state-2\", \"state-3\") ||\n el.classList.replace(\"state-3\", \"state-1\");</code></pre>\n\n\n\n<p><a href=\"https://twitter.com/NicoloRibaudo\" rel=\"noopener\"></a><a href=\"https://twitter.com/NicoloRibaudo/status/1481037397995438081\" rel=\"noopener\">Nicolò Ribaudo came to</a> the same conclusion.</p>\n\n\n\n<h3 id=\"just-cycle-through-class-numbers\">Just cycle through class numbers</h3>\n\n\n\n<p>If you pre-configured a <code>1</code> upfront, you could cycle through classes 1-3 and add/remove them based on that. This is <a href=\"https://twitter.com/zzzzBov/status/1481032199835201537\" rel=\"noopener\">from Timothy Leverett</a> who lists another similar option in the same tweet. </p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Assumes a `let s = 1` upfront\nel.classList.remove(`state-${s + 1}`);\ns = (s + 1) % 3;\nel.classList.add(`state-${s + 1}`);</code></pre>\n\n\n\n<h3 id=\"use-data-attributes-instead\">Use <code>data-*</code> attributes instead</h3>\n\n\n\n<p><a href=\"https://css-tricks.com/a-complete-guide-to-data-attributes/\">Data attributes</a> have the same specificity power, so I have no issue with this. They might actually be more clear in terms of state handling, but even better, they have <a href=\"https://css-tricks.com/a-complete-guide-to-data-attributes/#aa-accessing-data-attributes-in-javascript\">a special API</a> that makes them nice to manipulate. <a href=\"https://twitter.com/munawwarfiroz/status/1481156536277864450\" rel=\"noopener\">Munawwar Firoz had an idea</a> that gets this down to a one-liner:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">el.dataset.state = (+el.dataset.state % 3) + 1</code></pre>\n\n\n\n<h3 id=\"a-data-attribute-state-machine\">A data attribute state machine</h3>\n\n\n\n<p>You can <a href=\"https://twitter.com/DavidKPiano/status/1481044698152280068\" rel=\"noopener\">count on David Khourshid</a> to be ready with a state machine:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const simpleMachine = {\n  \"1\": \"2\",\n  \"2\": \"3\",\n  \"3\": \"1\"\n};\nel.dataset.state = simpleMachine[el.dataset.state];</code></pre>\n\n\n\n<h3 id=\"you-ll-almost-surely-want-a-function\">You&#8217;ll almost surely want a function</h3>\n\n\n\n<p>Give yourself a little abstraction, right? Many of the ideas wrote code this way, but so far I&#8217;ve move it out to focus on the idea itself. Here, I&#8217;ll leave the function in. This one is <a href=\"https://twitter.com/WebReflection/status/1481188307526631428\" rel=\"noopener\">from Andrea Giammarchi</a> in which a unique function for cycling through classes is set up ahead of time, then you call it as needed:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const rotator = (classes) => ({ classList }) => {\n  const current = classes.findIndex((cls) => classList.contains(cls));\n  classList.remove(...classes);\n  classList.add(classes[(current + 1) % classes.length]);\n};\n\nconst rotate = rotator([\"state-1\", \"state-2\", \"state-3\"]);\nrotate(el);</code></pre>\n\n\n\n<p>I heard from Kyle Simpson who had this same idea, almost character for character.</p>\n\n\n\n<h3 id=\"others\">Others?</h3>\n\n\n\n<p>There were more ideas in the replies to my <a href=\"https://twitter.com/chriscoyier/status/1481028373002473472\" rel=\"noopener\">original tweet</a>, but are, best I can tell, variations on what I&#8217;ve already shared above. Apologies if I missed yours! Feel free to share your idea again in the comments here. I see nobody used a <code>switch</code> statements — that could be a possibility!</p>\n\n\n\n<p>David Desandro went as far as recording a video, which is wonderful as it slowly abstracts the concepts further and further until it&#8217;s succinct but still readable and much more flexible:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"State variable and cycling through an array\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/hXrHZ_LSzkk?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p>And here&#8217;s a demo Pen with all the code for each example in there. They are numbered, so to test out another one, comment out the one that is uncommented, and uncomment another example:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxXeXPN\" src=\"//codepen.io/anon/embed/xxXeXPN?height=550&amp;theme-id=1&amp;slug-hash=xxXeXPN&amp;default-tab=js,result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxXeXPN\" title=\"CodePen Embed xxXeXPN\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/cycle-through-classes-html-element/\">How to Cycle Through Classes on an HTML Element</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/cycle-through-classes-html-element/feed/</wfw:commentRss>\n\t\t\t<slash:comments>2</slash:comments>\n\t\t\n\t\t\n\t\t<media:content url=\"https://www.youtube.com/embed/hXrHZ_LSzkk\" medium=\"video\" width=\"1280\" height=\"720\">\n\t\t\t<media:player>https://www.youtube.com/embed/hXrHZ_LSzkk</media:player>\n\t\t\t<media:title type=\"plain\">State variable and cycling through an array</media:title>\n\t\t\t<media:description type=\"html\"><![CDATA[Checking the DOM for a class?  Quick lesson on state variable and cycling thru an array, digging into Chris Coyier&#039;s lil code blockhttps://codepen.io/desandr...]]></media:description>\n\t\t\t<media:thumbnail url=\"https://css-tricks.com/wp-content/uploads/2022/01/maxresdefault-10.jpg\" />\n\t\t\t<media:rating scheme=\"urn:simple\">nonadult</media:rating>\n\t\t</media:content>\n<post-id xmlns=\"com-wordpress:feed-additions:1\">361200</post-id>\t</item>\n\t\t<item>\n\t\t<title>Fancy CSS Borders Using Masks</title>\n\t\t<link>https://css-tricks.com/css-borders-using-masks/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/css-borders-using-masks/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Temani Afif]]></dc:creator>\n\t\t<pubDate>Wed, 26 Jan 2022 14:26:49 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[borders]]></category>\n\t\t<category><![CDATA[gradients]]></category>\n\t\t<category><![CDATA[mask]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=362018</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Have you ever tried to make CSS borders in a repeating zig-zag pattern? Like where a colored section of a website ends and another differently colored section begins — not with a straight line, but angled zig zags, rounded humps, &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-borders-using-masks/\">Fancy CSS Borders Using Masks</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>Have you ever tried to make CSS borders in a repeating zig-zag pattern? Like where a colored section of a website ends and another differently colored section begins — not with a straight line, but angled zig zags, rounded humps, or waves. There are a number of ways you could do this sort of CSS border, dating all the way back to using a <code>background-image</code>. But we can get more modern and programmatic with it. In this article, we’ll look at some modern CSS mask techniques to achieve the look.</p>\n\n\n\n<span id=\"more-362018\"></span>\n\n\n\n<p>Before we dig into the technical parts, though, let’s take a look at what we are building. I have made a <a href=\"https://css-generators.com/custom-borders/\" target=\"_blank\" rel=\"noreferrer noopener\">CSS border generator</a> where you can easily generate any kind of border within a few seconds and get the CSS code.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"usage-of-the-generator-mp4\" width='500' height='207' src='https://videopress.com/embed/KzpD7MM6?cover=1&amp;muted=1&amp;persistVolume=0&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>Did you see that? With the <a href=\"https://css-tricks.com/almanac/properties/m/mask/\">CSS <code>mask</code> property</a> and a few <a href=\"https://css-tricks.com/a-complete-guide-to-css-gradients/\">CSS gradients</a>, we get a responsive and cool-looking border — all with CSS by itself. Not only this, but such effect can be applied to any element where we can have any kind of coloration (e.g. image, gradient, etc). We get all this without extra elements, pseudo elements, or magic numbers coming from nowhere!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Oh great! All I have to do is to copy/paste code and it’s done!</p></blockquote>\n\n\n\n<p>True, but it’s good to understand the logic to be able to manually adjust the code if you need to.</p>\n\n\n\n<h3>Masking things</h3>\n\n\n\n<p>Since all our effects rely on the CSS <code>mask</code> property, let’s take a quick refresh on how it works. Straight from <a href=\"https://drafts.fxtf.org/css-masking/#masking\" rel=\"noopener\">the spec</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The effect of applying a mask to a graphical object is as if the graphical object will be painted onto the background through a mask, thus completely or partially masking out parts of the graphical object.</p></blockquote>\n\n\n\n<p>If we check the <a href=\"https://drafts.fxtf.org/css-masking/#the-mask-image\" rel=\"noopener\">formal syntax</a> of the <code>mask</code> property we can see it accepts an <code>&lt;image&gt;</code> as a value, meaning either a URL of an image or a color gradient. Gradients are what we’ll be using here. Let’s start with basic examples:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYGMjmO\" src=\"//codepen.io/anon/embed/eYGMjmO?height=300&amp;theme-id=1&amp;slug-hash=eYGMjmO&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYGMjmO\" title=\"CodePen Embed eYGMjmO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>In the first example of this demo, a gradient is used to make it appear as though the image is fading away. The second example, meanwhile, also uses a gradient, but rather than a soft transition between colors, a <a href=\"https://css-tricks.com/books/greatest-css-tricks/hard-stop-gradients/\">hard color stop</a> is used to hide (or mask) half of the image. That second example illustrates the technique we will be using to create our fancy borders.</p>\n\n\n\n<p>Oh, and the CSS <code>mask</code> property can take multiple gradients as long as they are comma-separated. That means we have even more control to mask additional parts of the image.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJxvwVZ\" src=\"//codepen.io/anon/embed/OJxvwVZ?height=300&amp;theme-id=1&amp;slug-hash=OJxvwVZ&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJxvwVZ\" title=\"CodePen Embed OJxvwVZ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>That example showing multiple masking gradients may look a bit tricky at first glance, but what’s happening is the same as applying the multiple gradients on the <code>background</code> property. But instead of using a color that blends in with the page background, we use a “transparent” black value (<code>#0000</code>) for the hidden parts of the image and full black (<code>#000</code>) for the visible parts.</p>\n\n\n\n<p>That’s it! Now we can tackle our fancy borders.</p>\n\n\n\n<h3>Zig-Zag CSS borders</h3>\n\n\n\n<p>As we saw in the video at the start of this article, <a href=\"https://css-generators.com/custom-borders/\" target=\"_blank\" rel=\"noreferrer noopener\">the generator</a> can apply borders on one side, two sides, or all sides. Let’s start with the bottom side using a step-by-step illustration:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNGqMQE\" src=\"//codepen.io/anon/embed/oNGqMQE?height=510&amp;theme-id=1&amp;slug-hash=oNGqMQE&amp;default-tab=result\" height=\"510\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNGqMQE\" title=\"CodePen Embed oNGqMQE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<ol><li>We start by adding the first gradient layer with a solid color (<code>red</code>) at the top. A height that’s equal to <code>calc(100% - 40px)</code> is used to leave <code>40px</code> of empty space at the bottom.</li><li>We add a second gradient placed at the bottom that takes the remaining height of the container. There&#8217;s a little bit of geometry happening to make this work.</li></ol>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"918\" height=\"329\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641129713838_image.png?resize=918%2C329&#038;ssl=1\" alt=\"Diagram showing how the shape of a zig-zag is created in CSS. An upside down triangle in blue represents the shape and green areas to the left and right of it show the leftover space that is masked out with CSS.\" class=\"wp-image-362029\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641129713838_image.png?w=918&amp;ssl=1 918w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641129713838_image.png?resize=300%2C108&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641129713838_image.png?resize=768%2C275&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<ol start=\"3\"><li>Next, we repeat the last gradient horizontally (replacing <code>no-repeat</code> with <code>repeat-x</code>). We can already see the zig-zag shape!</li><li>Gradients are known to have anti-aliasing issues creating jagged edges (especially on Chrome). To avoid this, we add a slight transition between the colors, changing <code>blue 90deg, green 0</code> to <code>green, blue 1deg 89deg, green 90deg</code>.</li><li>Then we update the colors to have a uniform shape</li><li>Last, we use everything inside the <code>mask</code> property!</li></ol>\n\n\n\n<p>We can extract two variables from those steps to define our shape: size (<code>40px</code>) and angle (<code>90deg</code>). Here’s how we can express that using placeholders for those variables. I will be using JavaScript to replace those variables with their final values.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(red 0 0) top/100% calc(100% - {size}) no-repeat,\n  conic-gradient(\n    from {-angle/2} at bottom,\n    #0000, #000 1deg {angle - 1} ,#0000 {angle}\n  ) bottom/{size*2*tan(angle/2)} {size} repeat-x;</code></pre>\n\n\n\n<p>We can use CSS custom properties for the size and the angle, but trigonometric functions are unsupported features at this moment. In the future, we’ll be able to do something like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--size: 40px;\n--angle: 90deg;\nmask:\n  linear-gradient(red 0 0) top/100% calc(100% - var(--size)) no-repeat,\n  conic-gradient(\n    from calc(var(--angle)/-2) at bottom,\n    #0000, #000 1deg calc(var(--angle) - 1deg), #0000 var(--angle)\n  ) bottom/calc(var(--size)*2*tan(var(--angle)/2)) var(--size) repeat-x;</code></pre>\n\n\n\n<p>Similar to the bottom border, the top one will have almost the same code with a few adjustments:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(red 0 0) bottom/100% calc(100% - {size}) no-repeat,\n  conic-gradient(\n    from {180deg - angle/2} at top,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) top/{size*2*tan(angle/2)} {size} repeat-x;</code></pre>\n\n\n\n<p>We changed <code>bottom</code> with <code>top</code> and <code>top</code> with <code>bottom</code>, then updated the rotation of the gradient to <code>180deg - angle/2</code> instead of <code>-angle/2</code>. As simple as that!</p>\n\n\n\n<p>That’s the pattern we can use for the rest of the sides, like the left:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(red 0 0) right/calc(100% - {size}) 100% no-repeat,\n  conic-gradient(\n    from {90deg - angle/2} at left,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) left/{size} {size*2*tan(angle/2)} repeat-y;</code></pre>\n\n\n\n<p>…and the right:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(red 0 0) left/calc(100% - {size}) 100% no-repeat,\n  conic-gradient(\n    from {-90deg - angle/2} at right,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) right/{size} {size*2*tan(angle/2)} repeat-y;</code></pre>\n\n\n\n<p>Let’s make the borders for when they’re applied to two sides at once. We can actually reuse the same code. To get both the top and bottom borders, we simply combine the code of both the top and bottom border.</p>\n\n\n\n<p>We use the <code>conic-gradient()</code> of the top side,  the <code>conic-gradient()</code> of the bottom side plus a <code>linear-gradient()</code> to cover the middle area. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(#000 0 0) center/100% calc(100% - {2*size}) no-repeat,\n  conic-gradient(\n    from {-angle/2} at bottom,\n    #0000, #000 1deg {angle - 1},\n    #0000 {angle}\n  ) bottom/{size*2*tan(angle/2)} {size} repeat-x;\n  conic-gradient(\n    from {180deg - angle/2} at top, \n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) top/{size*2*tan(angle/2)} {size} repeat-x;</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWaYOOM\" src=\"//codepen.io/anon/embed/NWaYOOM?height=450&amp;theme-id=1&amp;slug-hash=NWaYOOM&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWaYOOM\" title=\"CodePen Embed NWaYOOM\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The same goes when applying borders to the left and right sides together:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(#000 0 0) center/calc(100% - {2*size}) 100% no-repeat,\n  conic-gradient(\n    from {90deg - angle/2} at left,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) left/{size} {size*2*tan(angle/2)} repeat-y,\n  conic-gradient(\n    from {-90deg - angle/2} at right,\n    #0000, #000 1deg {angle - 1}, #0000 {angle}\n  ) right/{size} {size*2*tan(angle/2)} repeat-y;</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWEVPxx\" src=\"//codepen.io/anon/embed/MWEVPxx?height=400&amp;theme-id=1&amp;slug-hash=MWEVPxx&amp;default-tab=result\" height=\"400\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWEVPxx\" title=\"CodePen Embed MWEVPxx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>So, if we want to apply borders to all of the sides at once, we add all the gradients together, right?</p></blockquote>\n\n\n\n<p>Exactly! We have four conic gradients (one on each side) and one <code>linear-gradient()</code> in the middle. We set a fixed angle equal to <code>90deg</code> because it the only one that results in nicer corners without weird overlapping. Note that I’m also using <code>space</code> instead of <code>repeat-x</code> or <code>repeat-y</code> to avoid bad result on corners like this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYzavXq\" src=\"//codepen.io/anon/embed/LYzavXq?height=500&amp;theme-id=1&amp;slug-hash=LYzavXq&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYzavXq\" title=\"CodePen Embed LYzavXq\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"background-space-mp4\" width='500' height='267' src='https://videopress.com/embed/VYDliPCk?cover=1&amp;controls=0&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div><figcaption>Resizing a container with four sides configuration</figcaption></figure>\n\n\n\n<h3>Rounded CSS borders</h3>\n\n\n\n<p>Now let’s tackle rounded borders!</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Oh no! another long explanation with a lot of calculation?!</p></blockquote>\n\n\n\n<p>Not at all! There is nothing to explain here. We take everything from the zig-zag example and update the <code>conic-gradient()</code> with a <code>radial-gradient()</code>. It’s even easier because we don’t have any angles to deal with — only the size variable.</p>\n\n\n\n<p>Here is an illustration for one side to see how little we need to do to switch from the zig-zag border to the rounded border:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_BawxaKV\" src=\"//codepen.io/anon/embed/BawxaKV?height=600&amp;theme-id=1&amp;slug-hash=BawxaKV&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed BawxaKV\" title=\"CodePen Embed BawxaKV\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Again, all I did there was replace the <code>conic-gradient()</code> with this (using placeholders for size):</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">background: \n  radial-gradient(circle farthest-side, #0000 98%, #000) \n  50% calc(100% + {size})/{1.85*size} {2*size} repeat-x</code></pre>\n\n\n\n<p>And this for the second one:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">background:\n  radial-gradient(circle farthest-side, #000 98%, #0000) \n  bottom/{1.85*size} {2*size} repeat-x</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What is the logic behind the magic numbers 1.85 and 98%?</p></blockquote>\n\n\n\n<p>Logically, we should use <code>100%</code> instead of <code>98%</code> to have a circle that touches the edges of the background area; but again, it’s the anti-aliasing issue and those jagged edges. We use a slightly smaller value to prevent weird overlapping.</p>\n\n\n\n<p>The <code>1.85</code> value is more of a personal preference than anything. I initially used <code>2</code> which is the logical value to get a perfect circle, but the result doesn&#8217;t look quite as nice, so the smaller value creates a more seamless overlap between the circles.</p>\n\n\n\n<p>Here’s the difference:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNGvNzO\" src=\"//codepen.io/anon/embed/rNGvNzO?height=600&amp;theme-id=1&amp;slug-hash=rNGvNzO&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNGvNzO\" title=\"CodePen Embed rNGvNzO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now we need to replicate this for the rest of the sides, just as we did with the zig-zag CSS border. </p>\n\n\n\n<p>There is a small difference, however, when applying all four sides at once.  You will notice that for one of the rounded borders, I used only one <code>radial-gradient()</code> instead of four. That makes sense since we can repeat a circular shape over all the sides using one gradient like illustrated below:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ZEXoEVW\" src=\"//codepen.io/anon/embed/ZEXoEVW?height=525&amp;theme-id=1&amp;slug-hash=ZEXoEVW&amp;default-tab=result\" height=\"525\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ZEXoEVW\" title=\"CodePen Embed ZEXoEVW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here’s the final CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  linear-gradient(#000 0 0) center/calc(100% - {1.85*size}) calc(100% - {1.85*size}) no-repeat,\n  radial-gradient(farthest-side,#000 98%,#0000) 0 0/{2*size} {2*size} round;</code></pre>\n\n\n\n<p class=\"is-style-explanation\">Note how I’m using the <code>round</code> value instead of <code>repeat</code>. That’s to make sure we don&#8217;t cut off any of the circles. And, again, that <code>1.85</code> value is a personal preference value.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"all-sides-rounded-mp4\" width='500' height='267' src='https://videopress.com/embed/fRRg3xQp?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" ></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1633526814'></script>\n</div></figure>\n\n\n\n<p>For the other type of rounded border, we still have to use four radial gradients, but I had to introduce the CSS <a href=\"https://css-tricks.com/almanac/properties/c/clip-path/\"><code>clip-path</code></a> property to correct an overlapping issue at the corners. You can see the difference between with and without <code>clip-path</code> in the following demo:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoJewpM\" src=\"//codepen.io/anon/embed/PoJewpM?height=300&amp;theme-id=1&amp;slug-hash=PoJewpM&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoJewpM\" title=\"CodePen Embed PoJewpM\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>It’s an eight-point path to cut the corners:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">clip-path: polygon(\n   {2*size} 0,calc(100% - {2*size}) 0,\n   100% {2*size},100% calc(100% - {2*size}),\n   calc(100% - {2*size}) 100%,{2*size} 100%,\n   0 calc(100% - {2*size}),0 {2*size}\n);</code></pre>\n\n\n\n<h3>Wavy CSS borders</h3>\n\n\n\n<p>Both the zig-zag and rounded CSS borders needed one gradient to get the shapes we wanted. What about a wavy sort of border? That take two gradients. Below is an illustration to understand how we create one wave with two radial gradients.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"717\" height=\"396\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641213151962_image.png?resize=717%2C396&#038;ssl=1\" alt=\"Showing three diagrams of CSS borders, each with a piece of the border and an accompanying snippet of CSS to achieve the effect.It shows how one part cuts a circular white shape out of a red rectangle. The second part showing how to create a red circle shape. The third part shows two radial gradients used to position the two circles so they combine to create the wave shape.\" class=\"wp-image-362031\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641213151962_image.png?w=717&amp;ssl=1 717w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641213151962_image.png?resize=300%2C166&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We repeat that shape at the bottom plus a linear gradient at the top and we get the wavy border at the bottom side. </p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNYNdqv\" src=\"//codepen.io/anon/embed/rNYNdqv?height=500&amp;theme-id=1&amp;slug-hash=rNYNdqv&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNYNdqv\" title=\"CodePen Embed rNYNdqv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask: \n  linear-gradient(#000 0 0) top/100% calc(100% - {2*size}) no-repeat,\n  radial-gradient(circle {size} at 75% 100%,#0000 98%,#000) 50% calc(100% - {size})/{4*size} {size} repeat-x,\n  radial-gradient(circle closest-side at 25% 50%,#000 99%,#0000 101%) bottom/{4*size} {2*size} repeat-x;</code></pre>\n\n\n\n<p>We do the same process for the other sides as we did with the zig-zag and rounded CSS borders. All we need is to update a few variables to have a different wave for each side.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"870\" height=\"467\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641215714172_image.png?resize=870%2C467&#038;ssl=1\" alt=\"\" class=\"wp-image-362034\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641215714172_image.png?w=870&amp;ssl=1 870w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641215714172_image.png?resize=300%2C161&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_A3084A7959ED2163D29D34D5EA98CABA5F7F15AD2078B30A2F17B32FB22486C3_1641215714172_image.png?resize=768%2C412&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Showing part of the CSS for each side.&nbsp;You can find the full code&nbsp;over at&nbsp;<a target=\"_blank\" href=\"https://css-generators.com/custom-borders/\" rel=\"noreferrer noopener\">the generator</a>.</figcaption></figure>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What about applying a wavy CSS border on all four sides? Will we have 9 gradients in total??”</p></blockquote>\n\n\n\n<p>Nope, and that’s because there is no demo where a wavy border is applied to all four sides. I was unable to find a combination of gradients that gives a good result on the corners. Maybe someone reading this knows a good approach? &#x1f609;</p>\n\n\n\n<h3>That’s <em>border</em>line great stuff!</h3>\n\n\n\n<p>So, you know the ins and outs of <a href=\"https://css-generators.com/custom-borders/\" target=\"_blank\" rel=\"noreferrer noopener\">my cool little online CSS border generator</a>! Sure, you can use the code it spits out and do just fine — but now you have the secret sauce recipe that makes it work.</p>\n\n\n\n<p>Specifically, we saw how gradients can be used to mask portions of an element. Then we went to work on <em>multiple</em> gradients to make certain shapes from those gradient CSS masks. And the result is a pattern that can be used along the edges of an element, creating the appearance of fancy borders that you might otherwise result to <code>background-image</code> for. Only this way, all it takes is swapping out some values to change the appearance rather than replace an entire raster image file or something.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-borders-using-masks/\">Fancy CSS Borders Using Masks</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/css-borders-using-masks/feed/</wfw:commentRss>\n\t\t\t<slash:comments>1</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">362018</post-id>\t</item>\n\t\t<item>\n\t\t<title>How Do You Handle Component Spacing in a Design System?</title>\n\t\t<link>https://css-tricks.com/component-spacing-design-system/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/component-spacing-design-system/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Tue, 25 Jan 2022 23:10:20 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[components]]></category>\n\t\t<category><![CDATA[design systems]]></category>\n\t\t<category><![CDATA[layout]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=362044</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Say you&#8217;ve got a <code>&#60;Card /&#62;</code> component. It&#8217;s highly likely it shouldn&#8217;t be butted right up against any other components with no spacing around it. That&#8217;s true for&#8230; pretty much every component. So, how do you handle component spacing in &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/component-spacing-design-system/\">How Do You Handle Component Spacing in a Design System?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>Say you&#8217;ve got a <code>&lt;Card /&gt;</code> component. It&#8217;s highly likely it shouldn&#8217;t be butted right up against any other components with no spacing around it. That&#8217;s true for&#8230; pretty much every component. So, how do you handle component spacing in a design system?</p>\n\n\n\n<p>Do you apply spacing using margin directly on the <code>&lt;Card /&gt;</code>? Perhaps <code>margin-block-end: 1rem; margin-inline-end: 1rem;</code> so it pushes away from the two sides where more content natural flows? That&#8217;s a little presumptuous. Perhaps the cards are children inside a <code>&lt;Grid /&gt;</code> component and the grid applies a <code>gap: 1rem</code>.  That&#8217;s awkward, as now the <code>&lt;Card /&gt;</code> component spacing is going to conflict with the <code>&lt;Grid /&gt;</code> component spacing, which is very likely not what you want, not to mention the amount of space is hard coded.</p>\n\n\n\n<span id=\"more-362044\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1709\" height=\"1048\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=1709%2C1048&#038;ssl=1\" alt=\"Example of a component spacing where a card component is to the left of an accordion component and above an article, with 50 pixels of spacing between all three elements. Lorem i-sum text throughout in a mono font. The card has a Calvin and Hobbes comic image.\" class=\"wp-image-362229\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?w=1709&amp;ssl=1 1709w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=300%2C184&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=1024%2C628&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=768%2C471&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=1536%2C942&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/component-layout-example.png?resize=1000%2C613&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Adding space to the inline start and block end of a card component.</figcaption></figure>\n\n\n\n<h2>Different perspectives on component spacing</h2>\n\n\n\n<p>Eric Bailey <a href=\"https://ericwbailey.design/writing/where-do-you-put-spacing-on-design-system-components/\" rel=\"noopener\">got into this recently</a> and looked at some options:</p>\n\n\n\n<ul><li>You could bake spacing into every component and try to be as clever as you can about it. (But that&#8217;s pretty limiting.)</li><li>You could pass in component spacing, like <code>&lt;Card space=\"xxl\" /&gt;</code>. (That can be a good approach, likely needs more than one prop, maybe even one for each direction, which is quite verbose.)</li><li>You could use no component spacing and create something like a <code>&lt;Spacer /&gt;</code> or <code>&lt;Layout /&gt;</code> component specifically for spacing between components. (It breaks up the job of components nicely, but can also be verbose and add unnecessary DOM weight.)</li></ul>\n\n\n\n<p>This conversation has a wide spectrum of viewpoints, some as extreme as Max Stoiber saying <a href=\"https://mxstbr.com/thoughts/margin/\" rel=\"noopener\">just never use <code>margin</code> ever at all</a>. That&#8217;s a little dogmatic for me, but I like that it&#8217;s trying to rethink things. I do like the idea of taking the job of spacing and layout away from components themselves — like, for example, those content components should completely not care where they are used and let layout happen a level up from them. </p>\n\n\n\n<p>Adam Argyle <a href=\"https://dev.to/argyleink/5-css-predictions-for-2020-pl3\" rel=\"noopener\">predicted a few years back</a> that the use of <code>margin</code> in CSS would decline as the use of <code>gap</code> rises. He&#8217;s probably going to end up right about this, especially now that <a href=\"https://css-tricks.com/gaps-gasp/\">flexbox has <code>gap</code></a> and that developers have an appetite these dats to use CSS Flexbox and Grid on nearly everything at both a macro and micro level.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/component-spacing-design-system/\">How Do You Handle Component Spacing in a Design System?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/component-spacing-design-system/feed/</wfw:commentRss>\n\t\t\t<slash:comments>4</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">362044</post-id>\t</item>\n\t\t<item>\n\t\t<title>How to Make a Scroll-Triggered Animation With Basic JavaScript</title>\n\t\t<link>https://css-tricks.com/scroll-triggered-animation-vanilla-javascript/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/scroll-triggered-animation-vanilla-javascript/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Md Shuvo]]></dc:creator>\n\t\t<pubDate>Tue, 25 Jan 2022 14:14:11 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[IntersectionObserver]]></category>\n\t\t<category><![CDATA[Scroll Linked Animation]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=360550</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>A little bit of animation on a site can add some flair, impress users, and get their attention. You could have them run, no matter where they are on the page, immediately when the page loads. But what if your &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/scroll-triggered-animation-vanilla-javascript/\">How to Make a Scroll-Triggered Animation With Basic JavaScript</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>A little bit of animation on a site can add some flair, impress users, and get their attention. You could have them run, no matter where they are on the page, immediately when the page loads. But what if your website is fairly long so it took some time for the user to scroll down to that element? They might miss it.</p>\n\n\n\n<p>You could have them run all the time, but perhaps the animation is best designed so that you for sure see the beginning of it. The trick is to start the animation when the user scrolls down to that element — scroll-triggered animation, if you will.</p>\n\n\n\n<span id=\"more-360550\"></span>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwMvbbg\" src=\"//codepen.io/anon/embed/VwMvbbg?height=450&amp;theme-id=1&amp;slug-hash=VwMvbbg&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwMvbbg\" title=\"CodePen Embed VwMvbbg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>To tackle this we use <strong>scroll triggers</strong>. When the user scrolls down to any particular element, we can use that event to do something. It could be anything, even the beginning of an animation. It could even be scroll-triggered lazy loading on images or lazy loading a whole comments section. In that way, we won’t force users to download elements that aren’t in the viewport on initial page load. Many users may never scroll down at all, so we really save them (and us) bandwidth and load time.</p>\n\n\n\n<p>Scroll triggers are very useful. There are many libraries out there that you can use to implement them, like <a href=\"https://greensock.com/scrolltrigger/\" rel=\"noopener\">Greensock’s popular ScrollTrigger plugin</a>. But you don’t <em>have</em> to use a third-party library, particularly for fairly simple ideas. In fact, you can implement it yourself using only a small handful of vanilla JavaScript. That is what we are going to do in this article.</p>\n\n\n\n<h3>Here&#8217;s how we&#8217;ll make our scroll-triggered event</h3>\n\n\n\n<ul><li>Create a function called <code>scrollTrigger</code> we can apply to certain elements</li><li>Apply an <code>.active</code> class on an element when it enters the viewport</li><li>Animate that .<code>active</code> class with CSS</li></ul>\n\n\n\n<p>There are times where adding a <code>.active</code> class is not enough. For example, we might want to execute a custom function instead. That means we should be able to pass a custom function that executes when the element is visible. Like this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">scrollTrigger('.loader', {\n  cb: function(el) {\n    el.innerText = 'Loading ...'\n    loadContent()\n  }\n})</code></pre>\n\n\n\n<p>We’ll also attempt to handle scroll triggers for older non-supporting browsers.</p>\n\n\n\n<h3>But first, the <code>IntersectionObserver</code> API</h3>\n\n\n\n<p>The main JavaScript feature we’re going to use is the <a href=\"https://css-tricks.com/an-explanation-of-how-the-intersection-observer-watches/\">Intersection Observer</a>. This API provides a way to <em>asynchronously</em> observe changes in the intersection of a target element — and it does so more in a more performant way than watching for <code>scroll</code> events. We will use <code>IntersectionObserver</code> to monitor when scrolling reaches the point where certain elements are visible on the page.</p>\n\n\n\n<h3>Let’s start building the scroll trigger</h3>\n\n\n\n<p>We want to create a function called <code>scrollTrigger</code> and this function should take a selector as its argument.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function scrollTrigger(selector) {\n  // Multiple element can have same class/selector,\n  // so we are using querySelectorAll\n  let els = document.querySelectorAll(selector)\n  // The above `querySelectorAll` returns a nodeList,\n  // so we are converting it to an array\n  els = Array.from(els)\n  // Now we are iterating over the elements array\n  els.forEach(el => {\n    // `addObserver function` will attach the IntersectionObserver to the element\n    // We will create this function next\n    addObserver(el)\n  })\n}\n// Example usage\nscrollTrigger('.scroll-reveal')</code></pre>\n\n\n\n<p>Now let’s create the <code>addObserver</code> function that want to attach to the element using <code>IntersectionObserver</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function scrollTrigger(selector){\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el)\n  })\n}\nfunction addObserver(el){\n    // We are creating a new IntersectionObserver instance\n    let observer = new IntersectionObserver((entries, observer) => { // This takes a callback function that receives two arguments: the elements list and the observer instance.\n      entries.forEach(entry => {\n        // `entry.isIntersecting` will be true if the element is visible\n      if(entry.isIntersecting) {\n        entry.target.classList.add('active')\n        // We are removing the observer from the element after adding the active class\n        observer.unobserve(entry.target)\n      }\n    })\n  })\n  // Adding the observer to the element\n  observer.observe(el)\n}\n// Example usage\nscrollTrigger('.scroll-reveal')</code></pre>\n\n\n\n<p>If we do this and scroll to an element with a <code>.scroll-reveal</code> class, an <code>.active</code> class is added to that element. But notice that the <code>active</code> class is added as soon as any small part of the element is visible.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/scrolltrigger.gif?resize=1920%2C1080&#038;ssl=1\" alt=\"Animated screenshot of the scroll-triggered animation with the code for it to the left and DevTools open on the right.\" class=\"wp-image-360567\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>But that might be overkill. Instead, we might want the <code>.active</code> class to be added once a <em>bigger</em> part of the element is visible. Well, thankfully, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#creating_an_intersection_observer\" rel=\"noopener\"><code>IntersectionObserver</code> accepts some options for that</a> as its second argument. Let&#8217;s apply those to our <code>scrollTrigger</code> function:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"27\"><code markup=\"tt\">// Receiving options as an object\n// If the user doesn't pass any options, the default will be `{}`\nfunction scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    // Passing the options object to the addObserver function\n    addObserver(el, options)\n  })\n}\n// Receiving options passed from the scrollTrigger function\nfunction addObserver(el, options) {\n  let observer = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      if(entry.isIntersecting) {\n        entry.target.classList.add('active')\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options) // Passing the options object to the observer\n  observer.observe(el)\n}\n// Example usage 1:\n// scrollTrigger('.scroll-reveal')\n// Example usage 2:\nscrollTrigger('.scroll-reveal', {\n  rootMargin: '-200px'\n})</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_CD503958969E4F5622656FA7ED4FB1213AF5585B5A906D3210B0301CA7387C42_1639110569153_demo_2.gif\" alt=\"\"/></figure>\n\n\n\n<p>And just like that, our first two agenda items are fulfilled!</p>\n\n\n\n<p>Let’s move on to the third item — adding the ability to execute a callback function when we scroll to a targeted element. Specifically, let’s pass the callback function in our options object as <code>cb</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"12,13,14\"><code markup=\"tt\">function scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el, options)\n  })\n}\nfunction addObserver(el, options){\n  let observer = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      if(entry.isIntersecting){\n        if(options.cb) {\n          // If we've passed a callback function, we'll call it\n          options.cb(el)\n        } else{\n          // If we haven't, we'll just add the active class\n          entry.target.classList.add('active')\n        }\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options)\n  observer.observe(el)\n}\n// Example usage:\nscrollTrigger('.loader', {\n  rootMargin: '-200px',\n  cb: function(el){\n    el.innerText = 'Loading...'\n    // Done loading\n    setTimeout(() => {\n      el.innerText = 'Task Complete!'\n    }, 1000)\n  }\n})</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/kHk-F7QE.gif?resize=1920%2C1080&#038;ssl=1\" alt=\"An updated animated screenshot of the same scroll-triggered animation. As boxes enter the screen from the bottom, a they rotate. A &quot;loading&quot; message that changes to &quot;finished loading&quot; message is the last element to scroll into view. The code is open to the left of the animation.\" class=\"wp-image-360570\" data-recalc-dims=\"1\"/></figure>\n\n\n\n<p>Great! There’s one last thing that we need to take care of: legacy browser support. Certain browsers might lack support for <code>IntersectionObserver</code>, so let’s handle that case in our <code>addObserver</code> function:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"10\"><code markup=\"tt\">function scrollTrigger(selector, options = {}) {\n  let els = document.querySelectorAll(selector)\n  els = Array.from(els)\n  els.forEach(el => {\n    addObserver(el, options)\n  })\n}\nfunction addObserver(el, options) {\n  // Check if `IntersectionObserver` is supported\n  if(!('IntersectionObserver' in window)) {\n    // Simple fallback\n    // The animation/callback will be called immediately so\n    // the scroll animation doesn't happen on unsupported browsers\n    if(options.cb){\n      options.cb(el)\n    } else{\n      entry.target.classList.add('active')\n    }\n    // We don't need to execute the rest of the code\n    return\n  }\n  let observer = new IntersectionObserver((entries, observer) =>; {\n    entries.forEach(entry => {\n      if(entry.isIntersecting) {\n        if(options.cb) {\n          options.cb(el)\n        } else{\n          entry.target.classList.add('active')\n        }\n        observer.unobserve(entry.target)\n      }\n    })\n  }, options)\n  observer.observe(el)\n}\n// Example usages:\nscrollTrigger('.intro-text')\nscrollTrigger('.scroll-reveal', {\n  rootMargin: '-200px',\n})\nscrollTrigger('.loader', {\n  rootMargin: '-200px',\n  cb: function(el){\n    el.innerText = 'Loading...'\n    setTimeout(() => {\n      el.innerText = 'Task Complete!'\n    }, 1000)\n  }\n})</code></pre>\n\n\n\n<p>Here’s that live demo again:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwMvbbg\" src=\"//codepen.io/anon/embed/VwMvbbg?height=450&amp;theme-id=1&amp;slug-hash=VwMvbbg&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwMvbbg\" title=\"CodePen Embed VwMvbbg\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And that&#8217;s all for this little journey! I hope you enjoyed it and learned something new in the process.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/scroll-triggered-animation-vanilla-javascript/\">How to Make a Scroll-Triggered Animation With Basic JavaScript</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/scroll-triggered-animation-vanilla-javascript/feed/</wfw:commentRss>\n\t\t\t<slash:comments>2</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">360550</post-id>\t</item>\n\t\t<item>\n\t\t<title>Why Don&#8217;t Developers Take Accessibility Seriously?</title>\n\t\t<link>https://css-tricks.com/why-dont-developers-take-accessibility-seriously/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/why-dont-developers-take-accessibility-seriously/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Melanie Sumner]]></dc:creator>\n\t\t<pubDate>Mon, 24 Jan 2022 14:49:18 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[accessibility]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=360811</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>You know that joke, “Two front-end developers walk into a bar and find they have nothing in common”? It’s funny, yet frustrating, because it’s true.</p>\n<p>This article will present three different perspectives on accessibility in web design and development. Three &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/why-dont-developers-take-accessibility-seriously/\">Why Don&#8217;t Developers Take Accessibility Seriously?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>You know that joke, “Two front-end developers walk into a bar and find they have nothing in common”? It’s funny, yet frustrating, because it’s true.</p>\n\n\n\n<p>This article will present three different perspectives on accessibility in web design and development. Three perspectives that could help us bridge the great divide between users and designers/developers. It might help us find the common ground to building a better web and a better future.</p>\n\n\n\n<span id=\"more-360811\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1200\" height=\"600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=1200%2C600&#038;ssl=1\" alt=\"The corner of a white and blue building in focus, with white on the left and blue on the right representing the divide between developers when it comes to accessibility practices.\" class=\"wp-image-360818\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/divide-corner-building.webp?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Photo by&nbsp;<a href=\"https://unsplash.com/@alexandernaglestad?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Alexander Naglestad</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/collections/487461/divisions?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Unsplash</a></figcaption></figure>\n\n\n\n<h3 class=\"ticss-462d3495\">Act 1</h3>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>“I just don’t know how developers don’t think about accessibility.”</p></blockquote>\n\n\n\n<p>Someone once said that to me. Let’s stop and think about it for a minute. Maybe there’s a perspective to be had.</p>\n\n\n\n<p>Think about how <em>many things</em> you have to know as a developer to successfully build a website. In any given day, for any given job position in web development, <a href=\"https://css-tricks.com/front-end-developer-aware/\">there are <em>the other details</em> of web development that come up</a>. Meaning, it’s more than <em>“just”</em> knowing HTML, CSS, ARIA, and JavaScript. Developers will also learn other things over the course of their careers, based on what they need to do.</p>\n\n\n\n<p>This could be package management, workspaces, code generators, collaboration tools, asset loading, asset management, CDN optimizations, bundle optimizations, unit tests, integration tests, visual regression tests, browser integration tests, code reviews, linting, formatting, communication through examples, changelogs, documentation, semantic versioning, security, app deployment, package releases, rollbacks, incremental improvements, incremental testing, continuous deployments, merge management, user experience, user interaction design, typography scales, aspect ratios for responsive design, data management, and… well, the list could go on, but you get the idea.</p>\n\n\n\n<p>As a developer, I consider myself to be pretty gosh darn smart for knowing how to do most these things! Stop and consider this: if you think about how many people are in the world, and compare that to how many people in the world can build websites, it’s proportionally a very small percentage. That’s kind of… <em>cool</em>. Incredible, even. On top of that, think about the last time you shipped code and how good that felt. “I figured out a hard thing and made it work! Ahhhhh! I feel amazing!”</p>\n\n\n\n<p>That kind of emotional high is pretty great, isn’t it? It makes me smile just to think about it.</p>\n\n\n\n<p>Now, imagine that an accessibility subject-matter expert comes along and essentially tells you that not only are you <em>not</em> particularly smart, but you have been doing things <em>wrong</em> for a long time.</p>\n\n\n\n<p>Ouch. Suddenly you don’t feel very good. Wrong? <em>Me??</em> What??? Your adrenaline can even kick in and you start to feel defensive. Time to stick up for yourself… right? Time to dig those heels.</p>\n\n\n\n<p>The cognitive dissonance can even be really overwhelming. It feels bad to find out that not only are you not good at the thing you thought you were really good at doing, but you’ve also been saying, “Screw you, who cares about you <em>anyway</em>,” to a whole bunch of people who can’t use the websites you’ve helped build because you (accidentally or otherwise) ignored that they even existed, that you ignored users who needed something more than the cleverness you were delivering for all these years. Ow.</p>\n\n\n\n<p>All things considered, it is quite understandable to me that a developer would want to put their fingers in their ears and pretend that <em>none</em> of this has happened at <em>all</em>, that they are still very clever and awesome. That the <em>one</em> “expert” telling you that you did it <em>wrong</em> is just one person. And one person is easy to ignore.</p>\n\n\n\n<p>— <em>end scene.</em></p>\n\n\n\n<h3>Act 2</h3>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>“I feel like I don’t matter at all.”</p></blockquote>\n\n\n\n<p>This is a common refrain I hear from people who need assistive technology to use websites, but often find them unusable for <a href=\"https://noti.st/melsumner/Phhimm/dont-break-the-web#sPuy1Xd\" rel=\"noopener\">any number of reasons</a>. Maybe they can’t read the text because the website’s design has ignored color contrast. Maybe there are nested interactive elements, so they <em>can’t even log in</em> to do things like pay a utility bill or buy essential items on their own. Maybe their favorite singer has finally set up an online shop but the user with assistive technology cannot even navigate the site because, while it might look interactive from a sighted-user’s perspective, all the buttons are divs and are not interactive with a keyboard… at all.</p>\n\n\n\n<p>This frustration can boil over and spill out; the brunt of this frustration is often borne by the folks who are trying to deliver more inclusive products. The result is a negative feedback cycle; some tech folks opt out of listening because “it’s rude” (and completely missing the irony of that statement). Other tech folks struggle with the emotional weight that so often accompanies working in accessibility-focused design and development. </p>\n\n\n\n<p>The thing is, these users have been ignored for so long that it can feel like they are screaming into a void. <em>Isn’t anyone listening? Doesn’t anyone care?</em> It seems like the only way to even be acknowledged is to demand the treatment that the law affords them! Even then, they often feel ignored and forgotten. Are lawsuits the only recourse?</p>\n\n\n\n<p>It increasingly seems that being loud and militant is the only way to be heard, and even then it might be a long time before anything happens.</p>\n\n\n\n<p>— <em>end scene.</em></p>\n\n\n\n<h3>Act 3</h3>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>“I know it doesn’t pass color contrast, but I feel like it’s just so <strong>restrictive</strong> on my creativity as a designer. I don’t like the way this <strong>looks</strong>, at all.”</p></blockquote>\n\n\n\n<p>I’ve heard this a lot across the span of my career. To some, inclusive design is not the necessary guardrail to ensure that our websites can be used by all, but rather a dampener on their creative freedom.</p>\n\n\n\n<p>If you are a designer who thinks this way, please consider this: you’re not designing for yourself. This is not like physical art; while your visual design can be artistic, it’s still on the web. It’s still <em>for</em> the web. Web designers have a higher challenge—their artistic vision needs to be usable by everyone. Challenge yourself to move the conversation into a different space: you just haven’t found the right design <em>yet</em>. It’s a false choice to think that a design can either be beautiful or accessible; don’t fall into that trap.</p>\n\n\n\n<p>— <em>end scene.</em></p>\n\n\n\n<h3>Let’s re-frame the conversation</h3>\n\n\n\n<p>These are just three of the perspectives we could consider when it comes to digital accessibility.</p>\n\n\n\n<p>We could talk about the project manager that “just wants to ship features” and says that “we can come back to accessibility later.” We could talk about the developer who jokes that “they wouldn’t use the internet if they were blind anyway,” or the one that says they will only pay attention to accessibility “once browsers make them do it.”</p>\n\n\n\n<p>We could, but we don’t really need to. We know how these these conversations go, because many of us have lived these experiences. The project never gets retrofitted. The company pays once to develop the product, then pays for an accessibility audit, then pays for the re-write after the audit shows that a retrofit is going to be more costly than building something new. We know the developer who insists they should only be forced to do something if the browser otherwise disallows it, and that they are unlikely to be convinced that the inclusive architecture of their code is not only beneficial, but necessary.</p>\n\n\n\n<p>So what <em>should</em> we be talking about, then?</p>\n\n\n\n<p>We need to acknowledge that designers and developers need to be learning about accessibility much sooner in their careers. I think of it with this analogy: Imagine you’ve learned a foreign language, but you only learned that language’s slang. Your words are technically correct, but there are a lot of native speakers of that language who will never be able to understand you. JavaScript-first web developers are often technically correct from a JavaScript perspective, but they also frequently create solutions that leave out a whole lotta people in the end.</p>\n\n\n\n<p>How do we correct for this? I’m going to be resolute here, as we all must be. We need to make sure that any documentation we produce includes accessible code samples. Designs must contain accessible annotations. Our conference talks must include accessibility. The cool fun toys we make to make our lives easier? They must be accessible, and there must be no excuse for anything less This becomes our new minimum-viable product for anything related to the web.</p>\n\n\n\n<p>But what about the code that already exists? What about the thousands of articles already written, talks already given, libraries already produced? How do we get past that? Even as I write this article for CSS-Tricks, I think about all of the articles I’ve read and the disappointment I’ve felt when I knew the end result was inaccessible. Or the really fun code-generating tools that don’t produce accessible code. Or the popular CSS frameworks that fail to consider tab order or color contrast. Do I want all of those people to feel bad, or be punished somehow?</p>\n\n\n\n<p>Nope. Not even remotely. Nothing good comes from that kind of thinking. The good comes from the places we already know—compassion and curiosity.</p>\n\n\n\n<p>We approach this with compassion and curiosity, because these are sustainable ways to improve. We will never improve if we wallow in the guilt of past actions, berating ourselves or others for ignoring accessibility for all these years. Frankly, we wouldn’t get anything done if we had to somehow pay for past ignorant actions; because yes, we did ignore it. In many ways, we still do ignore it.</p>\n\n\n\n<p>Real examples: the Google Developer training teaches a lot of things, but it&nbsp;doesn’t teach anything more than the <a href=\"https://web.dev/accessible/\" rel=\"noopener\">super basic parts of accessibility</a>. JavaScript frameworks get so caught up in the cleverness and complexity of JavaScript that they completely forget that HTML already exists. Even then, accessibility can still take a back seat. Ember existed for about eight years before adding an accessibility-focused community group (even if they have made <a href=\"https://noti.st/melsumner/FfqsyB/accessibility-is-reach\" rel=\"noopener\">a lot of progress</a> since then). React had to have a completely different <a href=\"https://reach.tech/router/\" rel=\"noopener\">router solution</a> created. Vue hasn’t even begun to publicly address accessibility in the core framework (although there are <a href=\"https://vue-a11y.com/\" rel=\"noopener\">community efforts</a>). Accessibility engineers have been begging for <a href=\"https://github.com/WICG/inert\" rel=\"noopener\"><code>inert</code></a> to be implemented in browsers natively, but it often is underfunded and de-prioritized.</p>\n\n\n\n<p>But we are technologists and artists, so our curiosity wins when we read <a href=\"https://alistapart.com/article/semantics-to-screen-readers/\" rel=\"noopener\">interesting articles</a> about how the accessibility object model and how our code can be translated by operating systems and fed into assistive technology. That’s pretty cool. After all, writing machine code so it can talk to another machine is probably more of what we imagined we’d be doing, right?</p>\n\n\n\n<p>The thing is, we can only start to be compassionate toward other people once we are able to be compassionate toward ourselves. Sure, we messed up—but we don’t have to stay ignorant. Think about that time you debugged your code for hours and hours and it ended up being a typo or a missing semicolon. Do you still beat yourself up over that? No, you developed compassion through logical thinking. Think about the junior developer that started to be discouraged, and how you motivated them to keep trying and that we all have good days and bad. That’s compassion.</p>\n\n\n\n<p>Here’s the cool part: not only do we have the technology, we are <em>literally</em> the ones that can fix it. We can get up and try to do better tomorrow. We can make some time to read about accessibility, and keep reading about it every day until we know it just as well as we do other things. It will be hard at first, just like the first time we tried… writing tests. Writing CSS. Working with that one API that is forever burned in our memory. But with repetition and practice, we got better. It got easier.</p>\n\n\n\n<p>Logically, we know we can learn hard things; we have already learned hard things, time and time again. This is the life and the career we signed up for. This is what gets us out of bed every morning. We love challenges and we love figuring them out. We are totally here for this.</p>\n\n\n\n<h3>What can we do? Here are some action steps.</h3>\n\n\n\n<p>Perhaps I have lost some readers by this point. But, if you’ve gotten this far, maybe you’re asking, “Melanie, you’ve convinced me, but what can I do <em>right now</em>?” I will give you two lists to empower you to take action by giving you a place to start.</p>\n\n\n\n<h4>Compassionately improve yourself:</h4>\n\n\n\n<ol><li><strong>Start following some folks with disabilities</strong> who are on social media with the goal of learning from their experiences. Listen to what they have to say. Don’t argue with them. Don’t tone police them. Listen to <em>what</em> they are trying to tell you. Maybe it won’t always come out in the way you’d prefer, but listen anyway.</li><li><strong>Retro-fit your knowledge.</strong> Try to start writing your next component with HTML first, then add functionality with JavaScript. <a href=\"https://codepen.io/melsumner/pen/ExYwqxZ\" rel=\"noopener\">Learn what you get for free</a> from HTML and the browser. Take some courses that are focused on accessibility for engineers. Invest in your own improvement for the sake of improving your craft.</li><li><strong>Turn on a screen reader.</strong> Learn how it works. Figure out the settings—how do you turn on a text-only version? How do you change the voice? How do you make it stop talking, or make it talk faster? How do you browse by headings? How do you get a list of links? What are the <a href=\"https://dequeuniversity.com/screenreaders/\" rel=\"noopener\">keyboard shortcuts</a>?</li></ol>\n\n\n\n<p><strong>Bonus Challenge:</strong> Try your hand at building some accessibility-related tooling. Check out <a href=\"https://a11y-automation.dev/\" rel=\"noopener\">A11y Automation Tracker</a>, an open source project that intends to track what automation could exist, but just hasn’t been created yet.</p>\n\n\n\n<h4>Incrementally improve your code</h4>\n\n\n\n<p>There are critical blockers that stop people from using your website. Don’t stop and feel bad about them; propel yourself into action and make your code even <strong>better</strong> than it was before.</p>\n\n\n\n<p>Here are some of the worst ones:</p>\n\n\n\n<ol><li><a href=\"https://github.com/ember-template-lint/ember-template-lint/blob/master/docs/rule/no-nested-interactive.md\" rel=\"noopener\">Nested interactive elements.</a> Like putting a button inside of a link. Or another button inside of a button.</li><li>Missing <a href=\"https://www.w3.org/WAI/tutorials/forms/labels/\" rel=\"noopener\">labels on input fields</a> (or non-associated labels)</li><li>Keyboard traps stop your users in their tracks. <a href=\"https://www.w3.org/WAI/WCAG21/quickref/#keyboard-accessible\" rel=\"noopener\">Learn what they are</a> and how to avoid them.</li><li>Are the images on your site important for users? Do they have <a href=\"https://noti.st/melsumner/Phhimm/dont-break-the-web#sVVa2ve\" rel=\"noopener\">the <code>alt</code> attribute</a> with a meaningful value?</li><li>Are there empty links on your site? Did you <a href=\"https://marcysutton.com/links-vs-buttons-in-modern-web-applications\" rel=\"noopener\">use a link</a> when you should have used a button?</li></ol>\n\n\n\n<p><strong>Suggestion:</strong> Read through the <a href=\"https://www.a11yproject.com/checklist/\" rel=\"noopener\">c</a><a href=\"https://www.a11yproject.com/checklist/\" rel=\"noopener\">hecklist on The A11y Project</a>. It’s by no means exhaustive, but it will get you started.</p>\n\n\n\n<p>And you know what? A good place to start is <em>exactly</em> where you are. A good time to start? Today.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p class=\"ticss-11061302\">Featured header photo by&nbsp;<a href=\"https://unsplash.com/@scottrodgerson?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Scott Rodgerson</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/s/photos/warning?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Unsplash</a></p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/why-dont-developers-take-accessibility-seriously/\">Why Don&#8217;t Developers Take Accessibility Seriously?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/why-dont-developers-take-accessibility-seriously/feed/</wfw:commentRss>\n\t\t\t<slash:comments>12</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">360811</post-id>\t</item>\n\t\t<item>\n\t\t<title>Using SVG in WordPress (2 Helpful Plugin Recommendations)</title>\n\t\t<link>https://css-tricks.com/using-svg-in-wordpress/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/using-svg-in-wordpress/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Chris Coyier]]></dc:creator>\n\t\t<pubDate>Fri, 21 Jan 2022 19:35:31 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[security]]></category>\n\t\t<category><![CDATA[SVG]]></category>\n\t\t<category><![CDATA[WordPress]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=360346</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>SVG is a great image format, so it's nice to able to use it in WordPress. If you're looking to be using SVG in WordPress. , we've got you covered here with all the best options.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/using-svg-in-wordpress/\">Using SVG in WordPress (2 Helpful Plugin Recommendations)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>There is a little legwork to do if you plan on using SVG in WordPress. For fair-enough reasons, WordPress doesn&#8217;t allow SVG out of the box. SVG is a markup syntax that has lots of power, including the ability to load other resources and run JavaScript. So, if WordPress were to blanket-ly allow SVG by default, users even with quite limited roles could upload SVG and <a href=\"https://css-tricks.com/svg-uploads-wordpress-inconvenient-truth/\">cause problems</a>, like XSS vulnerabilities.</p>\n\n\n\n<p>But say that&#8217;s not a problem for your site and you just use SVG gosh darn it. First, let&#8217;s be clear what we mean by using SVG in WordPress: <strong>uploading SVG through the media uploader and using the SVG images within post content and as featured images. </strong></p>\n\n\n\n<span id=\"more-360346\"></span>\n\n\n\n<p>There is nothing stopping you from, say, using SVG in your templates. Meaning inline <code>&lt;svg&gt;</code> or SVG files you link up as images in your template from your CSS or whatnot. That&#8217;s completely fine and <em>you don&#8217;t need to do anything special</em> for that to work in WordPress.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2884\" height=\"2322\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=2884%2C2322&#038;ssl=1\" alt=\"Example of Using SVG in WordPress. the media library is open and shows tile previews of different SVG files.\" class=\"wp-image-362072\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?w=2884&amp;ssl=1 2884w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=300%2C242&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=1024%2C824&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=768%2C618&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=1536%2C1237&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=2048%2C1649&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/using-svg-in-wordpress.png?resize=1000%2C805&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3>Taking matters into your own hands</h3>\n\n\n\n<p>What prevents you from using SVG in WordPress is that the Media Library Uploader rejects the file&#8217;s MIME type. To allow SVG in WordPress, you really just need this filter. This would go in your <code>functions.php</code> or a functionality plugin:</p>\n\n\n\n<pre rel=\"PHP\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function cc_mime_types($mimes) {\n  $mimes['svg'] = 'image/svg+xml';\n  return $mimes;\n}\nadd_filter('upload_mimes', 'cc_mime_types');</code></pre>\n\n\n\n<p>But the problem after that is that the SVG file usually won&#8217;t display correctly in the various places it needs to, like the Media Library&#8217;s image previews, the Featured Image widget, and possibly even the classic or Block Editor. I have a <a href=\"https://css-tricks.com/snippets/wordpress/allow-svg-through-wordpress-media-uploader/\">snippet of CSS that can be injected to fix this</a>. But — and this is kinda why I&#8217;m writing this new post — that doesn&#8217;t seem to work for me anymore, which has got me thinking.</p>\n\n\n\n<h3>Plugins for using SVG in WordPress</h3>\n\n\n\n<p>I used to think, eh, why bother, it&#8217;s so little code to allow this might that I may as well just do it myself with the function. But WordPress, of course, has a way of shifting over time, and since supporting SVG isn&#8217;t something WordPress is going to do out of the box, this is actually a great idea for a plugin to handle. That way, the SVG plugin can evolve to handle quirks as WordPress evolves and, theoretically, if enough people use the SVG plugin, it will be maintained.</p>\n\n\n\n<p>So, with that, here are a couple of plugin recommendations for using SVG in WordPress.</p>\n\n\n\n<h4><a href=\"https://wordpress.org/plugins/svg-support/\" rel=\"noopener\">SVG Support</a></h4>\n\n\n\n<p><a href=\"https://wordpress.org/plugins/svg-support/\" rel=\"noopener\">This is the one</a> I&#8217;ve been using lately and it seems to work great for me. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2912\" height=\"2604\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=2912%2C2604&#038;ssl=1\" alt=\"Screenshot of the SVG Support plugin for WordPress in the WordPress Plugin Directory.\" class=\"wp-image-362069\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?w=2912&amp;ssl=1 2912w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=300%2C268&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=1024%2C916&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=768%2C687&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=1536%2C1374&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=2048%2C1831&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/svg-support.png?resize=1000%2C894&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I just install it, activate it, and do nothing else. It does have a settings screen, but I don&#8217;t need any of those things. I really like how it asks you if it&#8217;s OK to load additional CSS on the front-end (for me, it&#8217;s not OK, so I leave it off) — although even better would be for the plugin to show you what it&#8217;s going to load so you can add it to your own CSS if you want.</p>\n\n\n\n<p>The setting to restrict uploading SVG in WordPress to admins is smart, although if you want to be more serious about SVG safety, you could use this next plugin instead&#8230;</p>\n\n\n\n<h4><a href=\"https://wordpress.org/plugins/safe-svg/\" rel=\"noopener\">Safe SVG</a></h4>\n\n\n\n<p><a href=\"https://wordpress.org/plugins/safe-svg/\" rel=\"noopener\">This</a> one hasn&#8217;t been updated in years, but it goes the extra mile for SVG safety in that it literally sanitizes SVG files as you upload them, and even optimizes them while it adds the SVG in WordPress. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2680\" height=\"2666\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=2680%2C2666&#038;ssl=1\" alt=\"Screenshot of the Safe SVG plugin in the WordPress Plugin Directory.\" class=\"wp-image-362071\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?w=2680&amp;ssl=1 2680w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=300%2C298&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=1024%2C1019&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=768%2C764&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=1536%2C1528&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=2048%2C2037&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=1000%2C995&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/safe-svg.png?resize=100%2C100&amp;ssl=1 100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We have fairly tight editorial control over authors and such here on this site, so the security aspects of this SVG plugin aren&#8217;t a big worry to me. Plus, I like to be in charge of my own SVG optimization, so this one isn&#8217;t as perfect for me, though I&#8217;d probably recommend it to a site with less technical expertise at the site owner level.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Looks like there is <a href=\"https://wordpress.org/plugins/easy-svg/\" rel=\"noopener\">Easy SVG Support</a> as well, but it doesn&#8217;t seem to be as nice as the Support SVG plugin and hasn&#8217;t been updated recently, so I can&#8217;t recommend that. </p>\n\n\n\n<p>What plugins have you successfully tried for using SVG in WordPress? Any recommendations you&#8217;d like to add?</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/using-svg-in-wordpress/\">Using SVG in WordPress (2 Helpful Plugin Recommendations)</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/using-svg-in-wordpress/feed/</wfw:commentRss>\n\t\t\t<slash:comments>5</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">360346</post-id>\t</item>\n\t\t<item>\n\t\t<title>Context-Aware Web Components Are Easier Than You Think</title>\n\t\t<link>https://css-tricks.com/context-aware-web-components/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/context-aware-web-components/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[John Rhea]]></dc:creator>\n\t\t<pubDate>Fri, 21 Jan 2022 14:08:05 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[lifecycle callbacks]]></category>\n\t\t<category><![CDATA[web components]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=360665</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Another aspect of web components that we haven’t talked about yet is that a JavaScript function is called whenever a web component is added or removed from a page. These lifecycle callbacks can be used for many things, including making &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/context-aware-web-components/\">Context-Aware Web Components Are Easier Than You Think</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>Another aspect of web components that we haven’t talked about yet is that a JavaScript function is called whenever a web component is added or removed from a page. These lifecycle callbacks can be used for many things, including making an element aware of its context.</p>\n\n\n\n<span id=\"more-360665\"></span>\n\n\n\n<h2>Article series</h2>\n\n\n\n<ul class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/web-components-are-easier-than-you-think/\">Web Components Are Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/interactive-web-components-are-easier-than-you-think/\">Interactive Web Components Are Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/using-web-components-in-wordpress-is-easier-than-you-think/\">Using Web Components in WordPress is Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/supercharging-built-in-elements-with-web-components-is-easier-than-you-think/\">Supercharging Built-In Elements With Web Components &#8220;is&#8221; Easier Than You Think</a></li><li><a href=\"https://css-tricks.com/context-aware-web-components\">Context-Aware Web Components Are Easier Than You Think</a> (<em>You are here!</em>)</li></ul>\n\n\n\n<h3>The four lifecycle callbacks of web components</h3>\n\n\n\n<p>There are <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks\" rel=\"noopener\">four lifecycle callbacks</a> that can be used with web components:</p>\n\n\n\n<ul><li><code>connectedCallback</code>: This callback fires when the custom element is <em>attached</em> to the element.</li><li><code>disconnectedCallback</code>: This callback fires when the element is <em>removed</em> from the document.</li><li><code>adoptedCallback</code>: This callback fires when the element is <em>added</em> to a new document.</li><li><code>attributeChangedCallback</code>: This callback fires when an <em>attribute</em> is changed, added or removed, as long as that attribute is being observed.</li></ul>\n\n\n\n<p>Let&#8217;s look at each of these in action.</p>\n\n\n\n<h3>Our post-apocalyptic person component</h3>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1520\" height=\"712\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=1520%2C712&#038;ssl=1\" alt=\"Two renderings of the web component side-by-side, the left is a human, and the right is a zombie.\" class=\"wp-image-360671\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?w=1520&amp;ssl=1 1520w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=300%2C141&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=1024%2C480&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=768%2C360&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/Screen-Shot-2022-01-05-at-1.33.02-PM.png?resize=1000%2C468&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We’ll start by creating a web component called <code>&lt;postapocalyptic-person&gt;</code>. Every person after the apocalypse is either a human or a zombie and we’ll know which one based on a class — either <code>.human</code> or <code>.zombie</code> — that’s applied to the parent element of the <code>&lt;postapocalyptic-person&gt;</code> component. We won’t do anything fancy with it (yet), but we’ll add a <code>shadowRoot</code> we can use to attach a corresponding image based on that classification.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">customElements.define(\n  \"postapocalyptic-person\",\n  class extends HTMLElement {\n    constructor() {\n      super();\n      const shadowRoot = this.attachShadow({ mode: \"open\" });\n    }\n}</code></pre>\n\n\n\n<p>Our HTML looks like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"humans\">\n  &lt;postapocalyptic-person>&lt;/postapocalyptic-person>\n&lt;/div>\n&lt;div class=\"zombies\">\n  &lt;postapocalyptic-person>&lt;/postapocalyptic-person>\n&lt;/div></code></pre>\n\n\n\n<h3>Inserting people with <code>connectedCallback</code></h3>\n\n\n\n<p>When a <code>&lt;postapocalyptic-person&gt;</code> is loaded on the page, the <code>connectedCallback()</code> function is called.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">connectedCallback() {\n  let image = document.createElement(\"img\");\n  if (this.parentNode.classList.contains(\"humans\")) {\n    image.src = \"https://assets.codepen.io/1804713/lady.png\";\n    this.shadowRoot.appendChild(image);\n  } else if (this.parentNode.classList.contains(\"zombies\")) {\n    image.src = \"https://assets.codepen.io/1804713/ladyz.png\";\n    this.shadowRoot.appendChild(image);\n  }\n}</code></pre>\n\n\n\n<p>This makes sure that an image of a human is output when the <code>&lt;postapocalyptic-person&gt;</code> is a human, and a zombie image when the component is a zombie.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_zYErBJQ\" src=\"//codepen.io/anon/embed/zYErBJQ?height=450&amp;theme-id=1&amp;slug-hash=zYErBJQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed zYErBJQ\" title=\"CodePen Embed zYErBJQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">Be careful working with <code>connectedCallback</code>. It runs more often than you might realize, firing any time the element is moved and could (baffling-ly) even run <em>after</em> the node is no longer connected — which can be an expensive performance cost. You can use <code>this.isConnected</code> to know whether the element is connected or not.</p>\n\n\n\n<h3>Counting people with <code>connectedCallback()</code> when they are added</h3>\n\n\n\n<p>Let&#8217;s get a little more complex by adding a couple of buttons to the mix. One will add a <code>&lt;postapocalyptic-person&gt;</code>, using a &#8220;coin flip&#8221; approach to decide whether it’s a human or a zombie. The other button will do the opposite, removing a <code>&lt;postapocalyptic-person&gt;</code> at random. We&#8217;ll keep track of how many humans and zombies are in view while we’re at it.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"btns\">\n  &lt;button id=\"addbtn\">Add Person&lt;/button>\n  &lt;button id=\"rmvbtn\">Remove Person&lt;/button> \n  &lt;span class=\"counts\">\n    Humans: &lt;span id=\"human-count\">0&lt;/span> \n    Zombies: &lt;span id=\"zombie-count\">0&lt;/span>\n  &lt;/span>\n&lt;/div></code></pre>\n\n\n\n<p>Here’s what our buttons will do:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let zombienest = document.querySelector(\".zombies\"),\n  humancamp = document.querySelector(\".humans\");\n\ndocument.getElementById(\"addbtn\").addEventListener(\"click\", function () {\n  // Flips a \"coin\" and adds either a zombie or a human\n  if (Math.random() > 0.5) {\n    zombienest.appendChild(document.createElement(\"postapocalyptic-person\"));\n  } else {\n    humancamp.appendChild(document.createElement(\"postapocalyptic-person\"));\n  }\n});\ndocument.getElementById(\"rmvbtn\").addEventListener(\"click\", function () {\n  // Flips a \"coin\" and removes either a zombie or a human\n  // A console message is logged if no more are available to remove.\n  if (Math.random() > 0.5) {\n    if (zombienest.lastElementChild) {\n      zombienest.lastElementChild.remove();\n    } else {\n      console.log(\"No more zombies to remove\");\n    }\n  } else {\n    if (humancamp.lastElementChild) {\n      humancamp.lastElementChild.remove();\n    } else {\n      console.log(\"No more humans to remove\");\n    }\n  }\n});</code></pre>\n\n\n\n<p>Here’s the code in <code>connectedCallback()</code> that counts the humans and zombies as they are added:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">connectedCallback() {\n  let image = document.createElement(\"img\");\n  if (this.parentNode.classList.contains(\"humans\")) {\n    image.src = \"https://assets.codepen.io/1804713/lady.png\";\n    this.shadowRoot.appendChild(image);\n    // Get the existing human count.\n    let humancount = document.getElementById(\"human-count\");\n    // Increment it\n    humancount.innerHTML = parseInt(humancount.textContent) + 1;\n  } else if (this.parentNode.classList.contains(\"zombies\")) {\n    image.src = \"https://assets.codepen.io/1804713/ladyz.png\";\n    this.shadowRoot.appendChild(image);\n    // Get the existing zombie count.\n    let zombiecount = document.getElementById(\"zombie-count\");\n    // Increment it\n    zombiecount.innerHTML = parseInt(zombiecount.textContent) + 1;\n  }\n}</code></pre>\n\n\n\n<h3>Updating counts with <code>disconnectedCallback</code></h3>\n\n\n\n<p>Next, we can use <code>disconnectedCallback()</code> to decrement the number as a humans and zombies are removed. However, we are unable to check the class of the parent element because the parent element with the corresponding class is already gone by the time <code>disconnectedCallback</code> is called. We could set an attribute on the element, or add a property to the object, but since the image’s <code>src</code> attribute is already determined by its parent element, we can use that as a proxy for knowing whether the web component being removed is a human or zombie.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">disconnectedCallback() {\n  let image = this.shadowRoot.querySelector('img');\n  // Test for the human image\n  if (image.src == \"https://assets.codepen.io/1804713/lady.png\") {\n    let humancount = document.getElementById(\"human-count\");\n    humancount.innerHTML = parseInt(humancount.textContent) - 1; // Decrement count\n  // Test for the zombie image\n  } else if (image.src == \"https://assets.codepen.io/1804713/ladyz.png\") {\n    let zombiecount = document.getElementById(\"zombie-count\");\n    zombiecount.innerHTML = parseInt(zombiecount.textContent) - 1; // Decrement count\n  }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWqNjKp\" src=\"//codepen.io/anon/embed/QWqNjKp?height=600&amp;theme-id=1&amp;slug-hash=QWqNjKp&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWqNjKp\" title=\"CodePen Embed QWqNjKp\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3>Beware of clowns!</h3>\n\n\n\n<p>Now (and I’m speaking from experience here, of course) the only thing scarier than a horde of zombies bearing down on your position is a clown — all it takes is one! So, even though we’re already dealing with frightening post-apocalyptic zombies, let’s add the possibility of a clown entering the scene for even more horror. In fact, we’ll do it in such a way that there’s a possibility any human or zombie on the screen is secretly a clown in disguise!</p>\n\n\n\n<p>I take back what I said earlier: a single zombie clown is scarier than even a group of &#8220;normal&#8221; clowns. Let’s say that if any sort of clown is found — be it human or zombie — we separate them from the human and zombie populations by sending them to a whole different document — an <code>&lt;iframe&gt;</code> jail, if you will. (I hear that &#8220;clowning&#8221; may be even more contagious than zombie contagion.)</p>\n\n\n\n<p>And when we move a suspected clown from the current document to an <code>&lt;iframe&gt;</code>, it doesn’t destroy and recreate the original node; rather it adopts and connects said node, first calling <code>adoptedCallback</code> then <code>connectedCallback</code>.</p>\n\n\n\n<p>We don’t need anything in the <code>&lt;iframe&gt;</code> document except a body with a <code>.clowns</code> class. As long as this document is in the iframe of the main document — not viewed separately — we don’t even need the <code>&lt;postapocalyptic-person&gt;</code> instantiation code. We’ll include one space for humans, another space for zombies, and yes, the clowns’s jail… errr&#8230; <code>&lt;iframe&gt;</code> of&#8230; fun.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"btns\">\n  &lt;button id=\"addbtn\">Add Person&lt;/button>\n  &lt;button id=\"jailbtn\">Jail Potential Clown&lt;/button>\n&lt;/div>\n&lt;div class=\"humans\">\n  &lt;postapocalyptic-person>&lt;/postapocalyptic-person>\n&lt;/div>\n&lt;div class=\"zombies\">\n  &lt;postapocalyptic-person>&lt;/postapocalyptic-person>\n&lt;/div>\n&lt;iframe class=\"clowniframeoffun” src=\"adoptedCallback-iframe.html\">\n&lt;/iframe></code></pre>\n\n\n\n<p>Our &#8220;Add Person&#8221; button works the same as it did in the last example: it flips a digital coin to randomly insert either a human or a zombie. When we hit the &#8220;Jail Potential Clown&#8221; button another coin is flipped and takes either a zombie or a human, handing them over to <code>&lt;iframe&gt;</code> jail.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">document.getElementById(\"jailbtn\").addEventListener(\"click\", function () {\n  if (Math.random() > 0.5) {\n    let human = humancamp.querySelector('postapocalyptic-person');\n    if (human) {\n      clowncollege.contentDocument.querySelector('body').appendChild(document.adoptNode(human));\n    } else {\n      console.log(\"No more potential clowns at the human camp\");\n    }\n  } else {\n    let zombie = zombienest.querySelector('postapocalyptic-person');\n    if (zombie) {\n      clowncollege.contentDocument.querySelector('body').appendChild(document.adoptNode(zombie));\n    } else {\n      console.log(\"No more potential clowns at the zombie nest\");\n    }\n  }\n});</code></pre>\n\n\n\n<h3>Revealing clowns with <code>adoptedCallback</code></h3>\n\n\n\n<p>In the <code>adoptedCallback</code> we’ll determine whether the clown is of the zombie human variety based on their corresponding image and then change the image accordingly. <code>connectedCallback</code> will be called after that, but we don’t have anything it needs to do, and what it does won’t interfere with our changes. So we can leave it as is.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">adoptedCallback() {\n  let image = this.shadowRoot.querySelector(\"img\");\n  if (this.parentNode.dataset.type == \"clowns\") {\n    if (image.src.indexOf(\"lady.png\") != -1) { \n      // Sometimes, the full URL path including the domain is saved in `image.src`.\n      // Using `indexOf` allows us to skip the unnecessary bits. \n      image.src = \"ladyc.png\";\n      this.shadowRoot.appendChild(image);\n    } else if (image.src.indexOf(\"ladyz.png\") != -1) {\n      image.src = \"ladyzc.png\";\n      this.shadowRoot.appendChild(image);\n    }\n  }\n}</code></pre>\n\n\n\n<iframe loading=\"lazy\" title=\"Humans and Zombies Web Component Demo\" src=\"https://undead.institute/files/adoptedCallback/index.html\" width=\"800\" height=\"600\"></iframe>\n\n\n\n<h3>Detecting hidden clowns with <code>attributeChangedCallback</code></h3>\n\n\n\n<p>Finally, we have the <code>attributeChangedCallback</code>. Unlike the the other three lifecycle callbacks, we need to observe the attributes of our web component in order for the the callback to fire. We can do this by adding an <code>observedAttributes()</code> function to the custom element’s class and have that function return an array of attribute names.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">static get observedAttributes() {\n  return [“attribute-name”];\n}</code></pre>\n\n\n\n<p>Then, if that attribute changes — including being added or removed — the <code>attributeChangedCallback</code> fires.</p>\n\n\n\n<p>Now, the thing you have to worry about with clowns is that some of the humans you know and love (or the ones that you knew and loved before they turned into zombies) could secretly be clowns in disguise. I’ve set up a clown detector that looks at a group of humans and zombies and, when you click the &#8220;Reveal Clowns&#8221; button, the detector will (through completely scientific and totally trustworthy means that are <strong>not</strong> based on random numbers choosing an index) apply <code>data-clown=\"true\"</code> to the component. And when this attribute is applied, <code>attributeChangedCallback</code> fires and updates the component’s image to uncover their clownish colors.</p>\n\n\n\n<p>I should also note that the <code>attributeChangedCallback</code> takes three parameters:</p>\n\n\n\n<ul><li>the name of the attribute</li><li>the previous value of the attribute</li><li>the new value of the attribute</li></ul>\n\n\n\n<p>Further, the callback lets you make changes based on how much the attribute has changed, or based on the transition between two states.</p>\n\n\n\n<p>Here’s our <code>attributeChangedCallback</code> code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">attributeChangedCallback(name, oldValue, newValue) {\n  let image = this.shadowRoot.querySelector(\"img\");\n  // Ensures that `data-clown` was the attribute that changed,\n  // that its value is true, and that it had an image in its `shadowRoot`\n  if (name=\"data-clown\" &amp;&amp; this.dataset.clown &amp;&amp; image) {\n    // Setting and updating the counts of humans, zombies,\n    // and clowns on the page\n    let clowncount = document.getElementById(\"clown-count\"),\n    humancount = document.getElementById(\"human-count\"),\n    zombiecount = document.getElementById(\"zombie-count\");\n    if (image.src.indexOf(\"lady.png\") != -1) {\n      image.src = \"https://assets.codepen.io/1804713/ladyc.png\";\n      this.shadowRoot.appendChild(image);\n      // Update counts\n      clowncount.innerHTML = parseInt(clowncount.textContent) + 1;\n      humancount.innerHTML = parseInt(humancount.textContent) - 1;\n    } else if (image.src.indexOf(\"ladyz.png\") != -1) {\n      image.src = \"https://assets.codepen.io/1804713/ladyzc.png\";\n      this.shadowRoot.appendChild(image);\n      // Update counts\n      clowncount.innerHTML = parseInt(clowncount.textContent) + 1;\n      zombiecount.innerHTML = parseInt(zombiecount.textContent) - 1;\n    }\n  }\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzrWdvW\" src=\"//codepen.io/anon/embed/YzrWdvW?height=900&amp;theme-id=1&amp;slug-hash=YzrWdvW&amp;default-tab=result\" height=\"900\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzrWdvW\" title=\"CodePen Embed YzrWdvW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And there you have it! Not only have we found out that web component callbacks and creating context-aware custom elements are easier than you may have thought, but detecting post-apocalyptic clowns, though terrifying, is also easier that you thought. What kind of devious, post-apocalyptic clowns can you detect with these web component callback functions?</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/context-aware-web-components/\">Context-Aware Web Components Are Easier Than You Think</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/context-aware-web-components/feed/</wfw:commentRss>\n\t\t\t<slash:comments>2</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">360665</post-id>\t</item>\n\t\t<item>\n\t\t<title>A Complete Beginner&#8217;s Guide to npm</title>\n\t\t<link>https://css-tricks.com/a-complete-beginners-guide-to-npm/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/a-complete-beginners-guide-to-npm/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Josh Collinsworth]]></dc:creator>\n\t\t<pubDate>Thu, 20 Jan 2022 15:07:32 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[Sponsored]]></category>\n\t\t<category><![CDATA[npm]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=361210</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>I remember vividly a period early in my coding career when I began to feel that things were changing away from what I knew, and headed towards a more complex set of tools and &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm/\">A Complete Beginner&#8217;s Guide to npm</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>I remember vividly a period early in my coding career when I began to feel that things were changing away from what I knew, and headed towards a more complex set of tools and practices, anchored in the command line and something called <a href=\"https://www.npmjs.com/\" rel=\"noopener\">npm</a>.</p>\n\n\n\n<p>This is the first part of a beginner’s guide where we cover the broad topic of Node Package Manager, or npm. We often take those three little letters—npm—for granted as we type them into the command line, but npm is part of a much larger ecosystem that can often be intimidating or confusing to anyone jumping in for the first time. This guide will help de-mystify that ecosystem and help you not only understand what npm is and does, but ultimately feel comfortable working with it.</p>\n\n\n\n<span id=\"more-361210\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"#aa-who-the-heck-is-this-guide-for\">Who the Heck is This Guide For?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"512\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=1024%2C512&#038;ssl=1\" alt=\"The npm logo in white against a gradient background tat goes from bright red to orange from left to right to kick off this npm guide.\" class=\"wp-image-285418\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?resize=1000%2C500&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/03/npm.png?w=1200&amp;ssl=1 1200w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Modern <a href=\"https://css-tricks.com/front-of-the-front-back-of-the-front/\">“back-of-the-front-end” development</a>—which npm is a part of—seems complex because it’s one name for lots of interconnected tools. When you add in the fact that the front-end world seems to move much more quickly than it actually does, producing a feeling that you will be left behind for not jumping on the newest thing right away, everything about it can seem unapproachable.</p>\n\n\n\n<p>That’s why we’re starting this guide—to make the technology more accessible for you to use in your own work.</p>\n\n\n\n<h3>Who the heck is this guide for?</h3>\n\n\n\n<p>In my own personal development learning journey, I would read guides about technologies that excited me, then get to a part that said “just <code>npm install</code>&#8221; this or that, and I’d heave yet another disappointed sigh and give up on using whatever that cool-looking thing was. Or, on more adventurous days, I might copy the command, but then inevitably end up either at another step I didn’t understand (“just,” they always said, “do [some thing I had no idea about]”), or get an error message the guide didn’t explain that stops me in my tracks.</p>\n\n\n\n<p><strong>Whatever npm was—whatever those commands did and wherever you were supposed to type them—nobody had ever taken the time to explain it to me.</strong> And the more I read guides written by people who took that knowledge for granted, the more I felt isolated.</p>\n\n\n\n<p><strong>If any of that sounds familiar: this series is for you</strong>.</p>\n\n\n\n<p>You most likely fall well within the group that’s been described in recent years as “<a href=\"https://bradfrost.com/blog/post/front-of-the-front-end-and-back-of-the-front-end-web-development/\" rel=\"noopener\">front-of-the-front-end</a>.” Like me, you probably know your stuff when it comes to HTML and CSS. Maybe you also know some JavaScript, either “vanilla” JavaScript, or by way of jQuery. Either way is fine, both for the purposes of this article and in general.</p>\n\n\n\n<p>Maybe you’ve even tried out a framework like React or Vue, but you mostly just copied and pasted some stuff to get your project up and running, and weren’t exactly sure what that stuff actually <em>did.</em></p>\n\n\n\n<ul><li><strong>This post is for you</strong> if you sense <a href=\"https://css-tricks.com/the-great-divide/\">The Great Divide</a> between the more traditional and &#8220;modern&#8221; definitions of front-end development—and if you worry that you might be hurting your career if you don&#8217;t bridge that chasm.</li><li><strong>This post is for you</strong> if you aren’t really sure what all the fuss about terminals and command lines is about, and you’d much prefer to just never touch one at all.</li><li><strong>This post is for you</strong> if you wonder why other developers seem to love making things <em>so damn complicated</em>, and what the point of all that command line junk is in the first place, when you could just write plain, simple HTML, CSS and JavaScript instead.</li><li><strong>This post is for you</strong> if you feel left out. If you sense there&#8217;s some <em>thing,</em> some <em>really big thing</em>, that nobody’s ever really bothered explaining to you, and you’re worried you’re the only one who doesn’t get it.</li></ul>\n\n\n\n<p>Know this, my fellow front-end developer: <strong>you are not alone.</strong> You are far from it. You are exactly where I was not so long ago, and the unsettled memory of that place is still fresh in my mind.</p>\n\n\n\n<p>Let me try to answer the questions you probably have—the same ones that I had—in the way I wish somebody would have for me, before I even knew how to ask them.</p>\n\n\n\n<h3>What is covered in this guide</h3>\n\n\n\n<p>This guide is a series of articles. That’s not because this stuff is extremely difficult to understand in and of itself; it’s because there are many parts to it, and each one bears explanation on its own. This is wide territory with a number of rabbit holes to explore. Focusing on one solid step at a time allows us to spend time on making things clear and understandable. The goal isn&#8217;t to cover everything, but I do want to be more thorough than quick.</p>\n\n\n\n<p>We’ll start by talking about the current lay of the land; what npm is, a bit about where it came from, and how we got here. From there, we’ll cover what Node itself is, followed by what package managers are in general, before actually working with npm. We’ll finish by installing Node and npm (if they’re not already), initializing a project to get an idea of how it works, and finally, installing a real-life npm project from GitHub with all its packages and commands.</p>\n\n\n\n<p>Some (or all) of that may sound very intimidating right now, but don’t worry. That’s why we’re spending the length of an entire guide together.</p>\n\n\n\n<h3>What to know before we begin</h3>\n\n\n\n<p>I&#8217;ll do my best to assume as little as possible about you, beyond that you are a web developer who generally knows how to build a website with HTML and CSS. You won’t need to know much about JavaScript or write any for the purposes of following this guide, but it will definitely help if you have at least a foundational understanding of what JavaScript is and how it works.</p>\n\n\n\n<p>JSON is the only other bit it might be helpful to know before getting started. If you’re unfamiliar with JSON, it might be worth glancing over this <a href=\"https://www.w3schools.com/whatis/whatis_json.asp\" rel=\"noopener\">guide to JSON</a>, or at least having it ready for when we do get to that part.</p>\n\n\n\n<p>Beyond that, I may reference specific tools, projects, and frameworks like <a href=\"https://getbootstrap.com\" rel=\"noopener\">Bootstrap</a>, <a href=\"https://reactjs.org\" rel=\"noopener\">React</a>, <a href=\"http://vuejs.org\" rel=\"noopener\">Vue</a> and <a href=\"https://kit.svelte.dev\" rel=\"noopener\">SvelteKit</a>, but I won’t assume you have any any hands-on experience with them whatsoever, nor will I assume that you’ve ever used npm or the command line before.</p>\n\n\n\n<p>Ready to get started? Let’s begin by clarifying what we mean by &#8220;npm,&#8221; such as what it stands for and how it fits into modern web development.</p>\n\n\n\n<div class=\"wp-container-61f32eef92447 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">Chapter 2 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm/\">A Complete Beginner&#8217;s Guide to npm</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/a-complete-beginners-guide-to-npm/feed/</wfw:commentRss>\n\t\t\t<slash:comments>3</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">361210</post-id>\t</item>\n\t\t<item>\n\t\t<title>What the Heck Does “npm” Mean?</title>\n\t\t<link>https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Josh Collinsworth]]></dc:creator>\n\t\t<pubDate>Thu, 20 Jan 2022 15:04:15 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[npm]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=361214</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>One of the things that makes this new, tooling-heavy era of front-end development so seemingly hard to understand at first is that, while we often <em>call</em> things by a singular name, they tend to be actually comprised of several different &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does/\">What the Heck Does “npm” Mean?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>One of the things that makes this new, tooling-heavy era of front-end development so seemingly hard to understand at first is that, while we often <em>call</em> things by a singular name, they tend to be actually comprised of several different interconnected pieces. The same is true for npm and the ecosystem around it.</p>\n\n\n\n<p>For example: Think of how we casually refer to “the internet,” even though the web itself is not a single, unified thing, but a collection of protocols, DNS, servers, browsers, networks, requests and responses, plus lots of other things assembled over years of iterations. For that matter, even the browser itself is one machine with many parts.</p>\n\n\n\n<span id=\"more-361214\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>npm is a collection of technologies</h3>\n\n\n\n<p>In that same way, what we generally think of as “npm” (yes, <a href=\"https://github.com/npm/cli#faq-on-branding\" rel=\"noopener\">all lowercase</a>) and “back-of-the-front-end” in particular is a single name for a collection of many different individual technologies and systems; a sort of <a href=\"https://en.wikipedia.org/wiki/Rube_Goldberg_machine\" rel=\"noopener\">Rube Goldberg machine</a> to generate browser-friendly code.</p>\n\n\n\n<p>I mentioned the command line already; that’s a big part of the ecosystem because it’s how we interact with it. But more on that in the <a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">next chapter</a>.</p>\n\n\n\n<p>And then there’s npm, which is in a category known as “package management” software. We’ll cover that as well. In fact, you&#8217;ll likely see me refer to npm as a package manager throughout this guide.</p>\n\n\n\n<p>And finally, there’s <a href=\"https://nodejs.org/\" rel=\"noopener\">Node</a> itself, which is so tricky to explain succinctly I often describe it by paraphrasing <a href=\"https://douglasadams.com\" rel=\"noopener\">Douglas Adams</a>: it&#8217;s a programming language that’s almost—but not quite—entirely like JavaScript.</p>\n\n\n\n<h3>npm manages project tools</h3>\n\n\n\n<p>To further muddy the waters, many projects where you type <code>npm install</code> into the command line might come with pre-installed tools to help you do a wide variety of things in your project, like process your code (e.g., turn Sass code into CSS). There are many all-in-one, preconfigured projects out there just waiting for you to install them and get started (<a href=\"https://create-react-app.dev/\" rel=\"noopener\">Create React App</a>, <a href=\"https://nextjs.org/\" rel=\"noopener\">Next</a>, <a href=\"https://nuxtjs.org/\" rel=\"noopener\">Nuxt</a>, and <a href=\"https://kit.svelte.dev/\" rel=\"noopener\">SvelteKit</a>, to name a few). This is convenient when done well, of course, but it&#8217;s also added complexity—meaning many more names we need to add to our list of back-of-the-front-end things.</p>\n\n\n\n<p>This list often includes tools like <a href=\"https://babeljs.io\" rel=\"noopener\">Babel</a> (for compiling JavaScript), <a href=\"https://babeljs.io\" rel=\"noopener\">Sass</a> (for compiling CSS), <a href=\"https://webpack.js.org\" rel=\"noopener\">webpack</a> (for asset bundling), <a href=\"https://vitejs.dev\" rel=\"noopener\">Vite</a> (for development servers and other tooling), <a href=\"https://postcss.org\" rel=\"noopener\">PostCSS</a> (for transforming one syntax into another); <a href=\"https://autoprefixer.github.io\" rel=\"noopener\">Autoprefixer</a> (which can be a PostCSS plugin for CSS vendor prefixes); <a href=\"https://www.typescriptlang.org\" rel=\"noopener\">TypeScript</a> (for additional JavaScript syntax); <a href=\"https://eslint.org\" rel=\"noopener\">ESlint</a> (for checking code quality); <a href=\"https://prettier.io\" rel=\"noopener\">Prettier</a> (for formatting code), and testing libraries like <a href=\"https://jestjs.io\" rel=\"noopener\">Jest</a> or <a href=\"https://www.cypress.io\" rel=\"noopener\">Cypress</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1200\" height=\"600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=1200%2C600&#038;ssl=1\" alt=\"The stark stark white interior of a library building with multiple floors and bookcases filled with brightly colored books, illustrating how npm manages front-end development tools.\" class=\"wp-image-361219\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/library-building.jpg?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>npm is like a library building with floors of book collections that are organized, making things easier to find and manage. (Photo: <a href=\"https://unsplash.com/@leonardo_64?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Johannes Mändle</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/s/photos/library?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" rel=\"noopener\">Unsplash</a>)</figcaption></figure>\n\n\n\n<p>All those things (and more) fall into this broad, general category of tools that often come <em>with</em> npm-installed projects—or that can be installed and used via npm—but are not actually part of npm itself. They’re just examples of modern tools that help us do nice things with our code, and I mention them here only because it’s worth noting the distinction, to get a sense of where the boundaries lie in this large, new world.</p>\n\n\n\n<p>And by the way, if you didn’t know what most (or <em>any</em>) of those tools mentioned above are, that’s ok. Maybe you haven’t come across them yet, or maybe you’ve worked on a project that had them installed without knowing them by name. Either way, all of this is merely for additional context.</p>\n\n\n\n<h3>Let’s break here</h3>\n\n\n\n<p>If you’re already feeling a bit overwhelmed at this point: don’t sweat it. The key thing I want you to walk away with after reading this specific chapter is that what we think of as “npm” (or maybe more casually as “all that command line, back-end-y stuff”) is not really one thing, but a collection of things that work together to make development easier for us.</p>\n\n\n\n<p>And yes: while all that complication seems intimidating up-front, it <em>does</em> actually make things better. I promise.</p>\n\n\n\n<p>While front-end <em>seems</em> to move very quickly, <strong>no, you have not been left behind</strong>. You may just have a bit of continuing education to get caught up on.</p>\n\n\n\n<div class=\"wp-container-61f32eef950d8 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">← Chapter 1</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">Chapter 3 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does/\">What the Heck Does “npm” Mean?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does/feed/</wfw:commentRss>\n\t\t\t<slash:comments>2</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">361214</post-id>\t</item>\n\t\t<item>\n\t\t<title>What the Heck is the Command Line?</title>\n\t\t<link>https://css-tricks.com/a-deep-look-at-the-command-line/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/a-deep-look-at-the-command-line/#respond</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Josh Collinsworth]]></dc:creator>\n\t\t<pubDate>Thu, 20 Jan 2022 15:04:09 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[npm]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=361226</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Now that we know <a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">what npm stands for</a> and have a super general idea of what it does and how it fits into web development, we ought to spend a little bit of time looking at the command line, because &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-deep-look-at-the-command-line/\">What the Heck is the Command Line?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>Now that we know <a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">what npm stands for</a> and have a super general idea of what it does and how it fits into web development, we ought to spend a little bit of time looking at the command line, because it’s how we interact with npm.</p>\n\n\n\n<span id=\"more-361226\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>An overview of the command line</h3>\n\n\n\n<p>The command line is a place we can type (predictably enough) <em>commands</em> to be executed directly by our computer. It’s extremely fast, and allows greater admin permissions than most apps that attempt to handle the command line for you. Need to install something on your system, or perhaps update it? The command line can do that, not to mention uninstall them, too. Heck, even server-side languages can run on the command line, opening up a wide range of tools and development techniques.</p>\n\n\n\n<p>It’s for those reasons the command line is considered an indispensable tool for many developers. Even if you&#8217;re not a developer, odds are you’ve encountered the command line at some point. Maybe you’ve accessed it when you opened the Terminal app in MacOS. Maybe you’ve used one built directly into your code editor—<a href=\"https://code.visualstudio.com/\" rel=\"noopener\">VS Code</a> and many other code editors come with integrated terminal. Perhaps you’ve even come across third-party terminal apps like <a href=\"https://iterm2.com/\" rel=\"noopener\">iTerm</a> or <a href=\"https://hyper.is/\" rel=\"noopener\">Hyper</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1200\" height=\"600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=1200%2C600&#038;ssl=1\" alt=\"A collage of screenshots showing a terminal and the command line in different applications.\" class=\"wp-image-361228\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=1024%2C512&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=768%2C384&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641841239725_termina-collage.png?resize=1000%2C500&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If you&#8217;ve used the terminal, it&#8217;s possible that much of your command line usage to this point has simply been typing (or pasting) commands somebody else gave you. That’s fine; that’s often how we get things done.</p>\n\n\n\n<p>But let’s take a moment to understand exactly what the command line <em>is,</em> and why it’s so broadly used.</p>\n\n\n\n<h3>Command line vs. terminal</h3>\n\n\n\n<p>The “command line” and the “terminal” are technically two different and distinct things, but are often used interchangeably. You may also hear the command line called a “shell” or see it abbreviated as “CLI” which is short for “command line interface.”</p>\n\n\n\n<p>Pedantic distinctions aside, the terms are often used to mean pretty much the same thing. So just to keep things as simple as possible, I&#8217;ll be using them interchangeably from here on out.</p>\n\n\n\n<h3>Opening the command line</h3>\n\n\n\n<p>Whatever you want to call it, you probably know the command line as that scary-looking window, perhaps with a dark background and white (sometimes greenish) text, where you type commands that your computer seems to understand, even if you do not.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1836\" height=\"1072\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=1836%2C1072&#038;ssl=1\" alt=\"Screenshot of a blank open terminal window with a dark background.\" class=\"wp-image-361447\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?w=1836&amp;ssl=1 1836w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=300%2C175&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=1024%2C598&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=768%2C448&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=1536%2C897&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636839317256_13-35-o8mu2-c0j7c.png?resize=1000%2C584&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>By default, a terminal window probably looks something like this, though its appearance can vary.</figcaption></figure>\n\n\n\n<p>Depending on where and how you&#8217;re working on the command line, one of the first things you might notice is an inconspicuous dollar sign character, <code>$</code>, that’s displayed on the first line where you’re able to start typing. You may have even seen it in other articles or documentation.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1532\" height=\"624\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=1532%2C624&#038;ssl=1\" alt=\"This screenshot of Vue’s documentation for using npm includes the $ character in a command example.\" class=\"wp-image-361445\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?w=1532&amp;ssl=1 1532w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=300%2C122&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=1024%2C417&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=768%2C313&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636412296622_08-40-5i11f-ix6tu-modified-2.png?resize=1000%2C407&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It’s common convention to prefix commands with a <code>$</code> character—but it’s a confusing convention for sure. That’s because there’s no need to type it. It’s literally <em>not</em> part of the command. Instead, <code>$</code> signifies a command that’s meant to be run in a terminal.</p>\n\n\n\n<p>So here’s the first rule to know about working with the command line: if you find yourself typing or copying an instruction that includes the <code>$</code> character, know that there is no need to include it in your work; the terminal’s got it covered.</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">## No need to copy the $\n$ npm run build</code></pre>\n\n\n\n<p>You may see something else beginning a line instead of <code>$</code>, like <code>&gt;</code>, <code>_</code> , or even an arrow. Again, whatever it is, it’s almost certainly not meant to be typed or pasted directly into the command line. Whether or not documentation or other tutorials should include the starting character of a line is an entirely different conversation (one that <a href=\"https://css-tricks.com/to-or-not-to-displaying-terminal-code-snippets/\">Chris has discussed at length</a>). Either way, it has the potential to be confusing, so I want to make sure that’s called out.</p>\n\n\n\n<h3>What does the command line do?</h3>\n\n\n\n<p>Movies and TV shows often portray a terminal as something fast-typing hackers use in a dark, secluded room. That’s partly just because it makes for good entertainment for folks who probably wouldn’t know a real terminal from the cascading letters in <em>The Matrix</em>. (Nor should they; I couldn’t tell if a surgery portrayed on a TV show is accurate, and am perfectly content leaving that distinction to the professionals.)</p>\n\n\n\n<p>But the command line isn’t exactly for writing code. As the name “command line” implies, it&#8217;s for writing <em>commands.</em> I suppose you could say that <em>all</em> coding is commands to some extent, so this is admittedly a bit of a blurry line. But generally speaking, code in a terminal is written differently than it is in a code editor. Instead, you use the terminal to boss your computer around with commands you want it to run <em>immediately</em>.</p>\n\n\n\n<h3>The advantages of the command line</h3>\n\n\n\n<p>You may wonder why developers like to work in the command line in the first place. You might prefer a nice app, or graphical user interface (GUI for short, sometimes pronounced “gooey”) where you can <em>see</em> all your options and find the best one visually. That’s perfectly fine, and we’ll talk a bit about GUIs in this chapter and provide examples of them.</p>\n\n\n\n<p>Many developers feel that way, even if it doesn’t seem like it. But working within the command line brings some advantages that aren’t always easy to replicate in a visual app.</p>\n\n\n\n<h4>It grants you god-like system privileges</h4>\n\n\n\n<p>The command line is what computer science-y people refer to as a “privileged environment.” That might sound like it refers to a Yale frat house, but it just means it’s a place where there are very few restrictions on what you are allowed to do; a place without guardrails.</p>\n\n\n\n<p>This is where the command line’s daunting reputation comes from—whatever command you type, as far as it’s valid, is executed immediately and, often, irreversibly. It’s capable of interacting with the hidden files your operating system tries to prevent you from editing. You have the <em>power</em> to access anything in the system. You even have the power to interact with similar core files on a remote server—and we all know the adage that great responsibility comes with that kind of power.</p>\n\n\n\n<p>It might be helpful to think of the command line like a lazy security guard. It assumes you <em>always</em> know what you’re doing and lets you right through the entrance. That makes it a bit risky, yes, but it also makes it very powerful, and the perfect choice for certain tasks and projects.</p>\n\n\n\n<h4>It’s super fast</h4>\n\n\n\n<p>Another advantage the command line has over typical apps is: <strong>it’s fast</strong>.</p>\n\n\n\n<p>This isn’t always the case; the command line’s speed tends to be overstated and depends largely on the task in question. But when it <em>is</em> faster, it can often be <em>many times</em> faster. Plus, the place where the command line really shines tends to be exactly the place where code projects need speed the most, which is downloading and creating files.</p>\n\n\n\n<p>As we’ll see in other chapters of this guide, a key part of what npm does is install things on your machine (usually in a folder that’s designated for the project you’re working on). That’s what makes the command line great for working with a package manager (we&#8217;ll get to what that means, too) like npm—it downloads and transmits files between computers—generally much, <em>much</em> faster than, say, using a browser to do it.</p>\n\n\n\n<p>The command line enables npm to generate tons of files with incredible speed. The ability to run a single command that installs, updates, or deletes those files together in one fell swoop at high speed makes the terminal the fastest, most efficient tool for many jobs.</p>\n\n\n\n<h4>It does what other languages cannot</h4>\n\n\n\n<p>One more other reason working in the terminal is so advantageous is that it’s the place where many of the tools you might want to use in your project are already available to you without any additional setup.</p>\n\n\n\n<p>But let’s back up a bit.</p>\n\n\n\n<p>When you hear the phrase “server-side language,” you might think of PHP, Ruby, or Java. Maybe it’s even newer entries into the space, like Rust or Go. You might even already know that Node belongs on that list, but if not, forgive me for jumping ahead just a bit.</p>\n\n\n\n<p>Anyway, when most people think of server-side languages like these, they tend to think of a web server waiting for requests and then responding to them. WordPress, for example, sits idle until it receives a request that fires up PHP. When you send a new tweet, that’s a request on Twitter&#8217;s servers that eventually hits a Ruby method in Rails.</p>\n\n\n\n<p>Server-side languages are rightly considered more powerful, so to speak, than web languages. HTML, CSS, and JavaScript are wonderful, but they can’t work with a file system, send email, process images, issue system commands, interact with the operating system, or run scheduled tasks; among many, many other things an app or website might need to do. By default, JavaScript in the browser can’t even <em>run</em> unless somebody is actively looking at the web page in their browser.</p>\n\n\n\n<p>It’s normal to think of server-side languages as the powerful engine behind more robust apps and software. And, in many cases, that’s accurate. But let’s take a moment to recognize that for the purpose of running code, <em>your machine is a server.</em> Not a <em>web</em> server although (it <em>could</em> be one, but that would be weird and probably unwise). But a server, nonetheless.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"800\" height=\"600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/r_1963500_fWs1u.jpg?resize=800%2C600&#038;ssl=1\" alt=\"A photo of a laptop that is half-closed with a sheet of paper from a yellow legal pad that says This 9s a server (yes, really), do not close the lid!\" class=\"wp-image-361231\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/r_1963500_fWs1u.jpg?w=800&amp;ssl=1 800w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/r_1963500_fWs1u.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/r_1963500_fWs1u.jpg?resize=768%2C576&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>You probably don’t think of your machine as a server—nor should you. But it can run server-side programming languages.</figcaption></figure>\n\n\n\n<p>You can install and run any of the server-side languages we&#8217;ve mentioned, and perhaps you’ve already even done so at some point (or at least tried to). You might have installed PHP so you can run WordPress (though these days there are much <a href=\"https://css-tricks.com/using-local-with-flywheel/\">nicer ways to do it</a>), or you may have installed Ruby so that you could follow some tutorials about Rails, just as examples.</p>\n\n\n\n<p>Or, maybe not. Maybe you’ve never installed a whole dang programming language before. Either way, just know that these languages run <em>on a server</em> rather than a web browser—and for that purpose, your machine is a server.</p>\n\n\n\n<p>Beyond that, many of the tools you might want to use with your development workflow—things like Sass for compiling CSS—actually <em>run</em> on server-side languages. So using the command line puts you in the place where all the most powerful tools are readily available.</p>\n\n\n\n<h3>Using an app instead of the command line</h3>\n\n\n\n<p>We briefly touched on GUIs earlier in this article. It’s worth noting that some command line tasks have corresponding GUIs that make working with the command line more visual and programmatic.</p>\n\n\n\n<p>Good examples include <a href=\"https://desktop.github.com/\" rel=\"noopener\">GitHub Desktop</a> (for managing code repositories) and <a href=\"https://codekitapp.com/\" rel=\"noopener\">CodeKit</a> (for processing, bundling and compiling assets), though the Source Control tab in VS Code also qualifies. Even though GUIs like these are generally focused on specific duties, they let you get things done through a nice visual user interface, in an actual app window that’s outside of the terminal window.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1892\" height=\"1312\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=1892%2C1312&#038;ssl=1\" alt=\"Screenshot of the CodeKit app after running ESlint showing how an app can visualize the command line.\" class=\"wp-image-361234\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?w=1892&amp;ssl=1 1892w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=300%2C208&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=1024%2C710&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=768%2C533&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=1536%2C1065&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_8CF5173DD91675E08D4F2F06D8370C1F540F7058C4BC65179119ACE97ABB10CF_1641845500862_032x.png?resize=1000%2C693&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>CodeKit can execute a command to check code formatting with tools like ESLint without directly using the command line.</figcaption></figure>\n\n\n\n<p>A GUI is lovely to have as an option, and even though I’ve become quite comfortable working on the command line over the years, I still wish there were more GUIs to do the things the command line makes possible—both for my own convenience and to lower the barrier to entry for new developers.</p>\n\n\n\n<p>I believe the reason there aren’t more such apps, however, is because of speed. It’s much quicker and easier to build a command line interface (CLI) than it is to put together a full-fledged app, often by orders of magnitude. So if we want nice things <em>today</em>, the command line is often the place we need to go for them.</p>\n\n\n\n<h3>What’s next</h3>\n\n\n\n<p>We just spent some time getting acquainted with the command line. Even though the command line is not <em>specific</em> to npm, it’s core to working <em>with</em> npm. It’s the interface from which we tell the system what to do, granting us incredible powers at the system or server level to complete tasks in large swaths at breakneck speeds. As a package manager, npm is in the business of installing, updating, and deleting files (among other things) for a web project. The command line is how we communicate with npm to do all of that.</p>\n\n\n\n<p>Next up, we’re going to break down what npm is a little more by focusing on the first letter in the abbreviation: “n” for Node. What the heck is that and why is it in the name? That’s where we turn our focus next.</p>\n\n\n\n<div class=\"wp-container-61f32eef991b3 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">← Chapter 2</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">Chapter 4 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/a-deep-look-at-the-command-line/\">What the Heck is the Command Line?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/a-deep-look-at-the-command-line/feed/</wfw:commentRss>\n\t\t\t<slash:comments>0</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">361226</post-id>\t</item>\n\t\t<item>\n\t\t<title>What the Heck is Node?</title>\n\t\t<link>https://css-tricks.com/node-and-how-it-works-with-npm/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/node-and-how-it-works-with-npm/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Josh Collinsworth]]></dc:creator>\n\t\t<pubDate>Thu, 20 Jan 2022 15:04:03 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[Sponsored]]></category>\n\t\t<category><![CDATA[node]]></category>\n\t\t<category><![CDATA[npm]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=361241</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>Here’s what you need to know about Node.js (or simply Node) and how it relates to npm right off the bat:</p>\n<ul>\n<li>Node is JavaScript, but as a server-side language.</li>\n<li>This is possible because of </li>\n</ul>\n<p>&#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/node-and-how-it-works-with-npm/\">What the Heck is Node?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>Here’s what you need to know about Node.js (or simply Node) and how it relates to npm right off the bat:</p>\n\n\n\n<ul><li>Node is JavaScript, but as a server-side language.</li><li>This is possible because of V8, Chromium’s JavaScript engine, which can run on its own, outside the confines of the browser.</li><li>Node and browser-based JavaScript can be very different, and have different capabilities, though both are JavaScript at their core.</li><li>You don’t need to know Node to use npm.</li></ul>\n\n\n\n<p>As you may know by now, npm stands for <strong>Node Package Manager</strong> (even if the official <a href=\"https://www.npmjs.com/\" rel=\"noopener\">npm website</a> displays amusing alternative names in its header on each page load, like “Ninja Pumpkin Mutants”).</p>\n\n\n\n<p>The key thing to understand right away is this: “Node” and “Package Manager” are the two big, distinct pieces that combine to make npm.</p>\n\n\n\n<p>We’ll cover what a package manager is and why you might consider using one when we get to the next chapter in this npm guide. For now, though, let’s focus on understanding what Node is, as it’s is a key part to understanding modern web development.</p>\n\n\n\n<span id=\"more-361241\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>Node is JavaScript, but without all the browser</h3>\n\n\n\n<p>You likely know JavaScript primarily as a language that runs in the browser, similar to HTML and CSS. Yes, each of these languages has abstractions and supersets (like <a href=\"https://haml.info\" rel=\"noopener\">HAML</a> for HTML, Sass for CSS, and TypeScript for JavaScript, as examples), as well as compilers and transpilers and all kinds of things that transform them into this shape or that. But ultimately, what these tools generate is vanilla (i.e., pure) code in the correct syntax, as if the abstractions were never used, to run in the browser and in the browser alone.</p>\n\n\n\n<p>That’s the thing that took me the longest time to understand, and which, honestly, might be an even bigger missed memo than the whole npm thing. JavaScript doesn’t need a browser anymore in order to run. So, you&#8217;ll sometimes see me refer to Node JavaScript when distinguishing between it and &#8220;browser-based&#8221; JavaScript.</p>\n\n\n\n<h3>Server-side vs. client-side languages</h3>\n\n\n\n<p>At this point, I feel it’s worth taking a moment to explore the distinction between client-side languages (HTML, CSS, JavaScript), and server-side languages (basically all the rest of them). I won’t assume you have any experience with server-side languages, like PHP, Ruby, or Python, but if the <em>concept</em> of server-side languages is entirely new to you, it may be worth <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Introduction\" rel=\"noopener\">reading up on what they are</a>. (To summarize: they&#8217;re code languages that run purely on a server instead of the browser, and generally have much broader and more powerful capabilities.)</p>\n\n\n\n<p>This is relevant because several years ago, circa 2009, there were some very smart people who <em>really</em> liked JavaScript. In particular, they liked how <em>fast</em> JavaScript is (especially compared to the dominant server-side languages at the time, most notably, PHP and Ruby), and they wanted to have JavaScript <em>everywhere</em>, not just in a browser.</p>\n\n\n\n<p><a href=\"https://en.wikipedia.org/wiki/Ryan_Dahl\" rel=\"noopener\">Ryan Dahl</a> is the most prominent figure among them, and is credited with the invention of Node (and more recently, <a href=\"https://deno.land/\" rel=\"noopener\">Deno</a>, which is an anagram of Node). That’s a fun thing to know, but otherwise not strictly relevant to this topic.</p>\n\n\n\n<h3>How Node works</h3>\n\n\n\n<p>What is relevant, though, is that <strong>Node is essentially JavaScript as a server-side language that runs <em>outside</em> <em>of</em> the browser</strong>.</p>\n\n\n\n<p>How is that possible? Under the hood, each browser has its own individual JavaScript engine. This is the part of the browser that actually <em>runs</em> JavaScript. Yes, that’s apparently a separate piece of the browser and not part of the same bits that do the HTML and CSS—which I guess makes sense when you think about the fact that we have literal APIs between the document and JavaScript. Heck, even <a href=\"https://css-tricks.com/dom/\">the concept of a DOM</a> makes more sense when you think of the department that handles JavaScript as a makeshift office down the hall from the HTML department.</p>\n\n\n\n<p>The JavaScript engine in Chromium-based browsers is called V8, presumably after <a href=\"https://en.wikipedia.org/wiki/V8_engine\" rel=\"noopener\">a specific kind of car engine</a> (not the “<a href=\"https://www.campbells.com/v8/\" rel=\"noopener\">vegetable drink</a>” made mostly of tomato juice). V8 is by far the most popular JavaScript engine. Thanks to <a href=\"https://en.wikipedia.org/wiki/ECMAScript\" rel=\"noopener\">ECMAScript</a> standardization efforts over approximately the last 15 years, there aren’t really any major differences between JavaScript engines anymore as far as browsers go. The engine used in Chrome is a lot like the engine that runs in Firefox, which is a lot like Safari, and so on. V8’s popularity these days has less to do with its distinctions, and more to do with Chrome’s self-sustaining ubiquity.</p>\n\n\n\n<p>(Side note: Firefox’s JavaScript engine is named SpiderMonkey. That’s not particularly relevant, but it <em>is</em> further proof that Firefox is the coolest.)</p>\n\n\n\n<p>Why does this matter? Well, it turns out, you can take the JavaScript engine <em>out</em> of a browser, and with some modification, run it on its own—kind of like if you decided to pull the stereo out of a car, tinker a bit, and make it into a stereo system for your home instead. V8 (and, presumably, a car’s stereo) can function perfectly fine as a standalone unit in <em>any</em> environment.</p>\n\n\n\n<p>In other words: V8 makes it possible to run JavaScript <em>anywhere</em>. That&#8217;s why we have &#8220;Node&#8221; JavaScript and &#8220;browser-based&#8221; JavaScript.</p>\n\n\n\n<h3>Node is almost (but not exactly) JavaScript</h3>\n\n\n\n<p>To recap: JavaScript is a server-side language now! It’s called Node, and it <em>could</em> mean you don’t even <em>need</em> to learn anything about other server-side languages. We are front-end developers, and <a href=\"https://css-tricks.com/video-screencasts/160-the-all-powerful-front-end-developer/\">we have super-powers now</a>.</p>\n\n\n\n<p>Having said all this, however, <strong>Node and the JavaScript you’re used to running in the browser are both similar and very different from each other.</strong></p>\n\n\n\n<p>At the risk of veering too far into the weeds here: while both are JavaScript at their core, and while the language and syntax is the same, many staples of JavaScript in the browser (like the <code>window</code> or <code>document</code>, and even the oft-taken-for-granted <code>alert</code>) are not present in a purely server-side Node environment. There <em>is</em> no window, of course, when the language is just running on its own, and not in a browser. New Node JavaScript developers are often surprised to learn that even <code>fetch</code> is actually a browser API, not &#8220;pure&#8221; JavaScript.</p>\n\n\n\n<p>Fear not, however. <code>console.log</code> is still your best friend, and there are many <em>new</em>, environment-specific features of Node JavaScript that differ from the browser’s implementation of JavaScript, such as the <code>process</code> object, which contains all the details about any processes that are currently running.</p>\n\n\n\n<p>Node and its ecosystem have often, out of necessity, grown in a very different direction than browser-based JavaScript over the years. (As an obvious example: the syntax for imports between the two has been different for years, and only now is beginning to merge together again. We&#8217;ll talk about that a little more in <a href=\"https://css-tricks.com/how-to-install-an-npm-project\">the final chapter</a>.)</p>\n\n\n\n<p>Node long held the privilege of being able to move much faster than browsers when it comes to gaining new features, and has had its own set of concerns to deal with as well. It began to power server-side apps the same way Ruby and PHP had been doing for years, even while browsers were still trying to coalesce on standards. This has resulted in Node JavaScript and browser-based JavaScript becoming more like cousins than clones.</p>\n\n\n\n<p>Here’s what I think is a fair analogy to explain the differences between the two JavaScript cousins: consider two similar musical instruments, say an upright bass and a modern electric bass guitar. Both instruments are tuned the same, and play the same notes; if you know one, in many ways, you kind of know the other. But while you’ll find it much easier to learn one after you’ve learned the other, <em>playing</em> the new one will be very different from what you’re used to.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=1024%2C576&#038;ssl=1\" alt=\"\" class=\"wp-image-361921\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?resize=1000%2C563&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/basses1.jpg?w=1280&amp;ssl=1 1280w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The same, but different (Photos: <a href=\"https://commons.wikimedia.org\" rel=\"noopener\">Wikimedia Commons</a>, <a href=\"https://unsplash.com\" rel=\"noopener\">Unplash</a>)</figcaption></figure>\n\n\n\n<p>Similarly, while one developer might write one type of JavaScript and a second developer writes in another type of JavaScript, their jobs are unlikely to look the same.</p>\n\n\n\n<p>Node is JavaScript, with the capabilities of other server-side languages mentioned before—things like reading from and writing to the file system, access to system-level APIs, email, the ability to listen for and respond to requests, scheduled tasks… the list goes on.</p>\n\n\n\n<p>I won’t say more on that here, but just know that while both are JavaScript at the end of the day, they run in different environments and are each capable of doing some things the other can’t. Even if you’ve written browser-based JavaScript before, Node will still likely feel a bit foreign to you beyond the foundational syntax, and will often be used in very different ways.</p>\n\n\n\n<h3>Running Node locally</h3>\n\n\n\n<p>As is generally the case with server-side languages, you <em>do</em> need to install Node before you can use it.</p>\n\n\n\n<p>Node is commonly installed alongside npm, together as one, since the package manager part needs Node, and the Node part is more useful with a package manager. (You could say they’re a <em>package</em> deal. No, I will not apologize for that joke. I am a dad, after all.)</p>\n\n\n\n<p>I’d like to stress at this point that <strong>you don’t need to know anything about Node to use npm</strong>. So, even though I&#8217;m about to cover some Node examples here, please consider this entire section something that’s nice to know, but inessential to that end. I feel it’s still useful to get a slightly better idea of how Node works, just for the sake of painting a more complete picture.</p>\n\n\n\n<p class=\"is-style-explanation\">We will cover <a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">how to install Node and npm</a> in an upcoming chapter of this guide. So, if you don’t have it installed already, you can either just glance over this part, or come back here when you do have it ready. Either way, this won’t be crucial for following along with this npm guide.</p>\n\n\n\n<p>If you would like to try it out, you can create a new <code>test.js</code> file and put some generic JavaScript in it. Something contrived like the following code that logs some content to the console should do the trick:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">console.log('Look, ma, Node hands!')\n\nconst oneThroughFive = [1, 2, 3, 4, 5]\n\noneThroughFive.forEach(number => {\n  console.log(number)\n})</code></pre>\n\n\n\n<p>Let’s say you save that code, then open the command line in a terminal window, navigate to where the file is (using <code>cd</code>, or “change directory&#8221;), and run <code>node test.js</code> to get the following output:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">Look, ma, Node hands!\n1\n2\n3\n4\n5</code></pre>\n\n\n\n<p>You can <em>also</em> enter <code>node</code> by itself (no filename afterwards) to open an interactive terminal where you can run arbitrary Node JavaScript. If you’ve ever popped open the console in your browser&#8217;s DevTools to type out some code, that’s <em>exactly</em> what this is, just on the command line with Node instead.</p>\n\n\n\n<p>Try it out if you’d like to, assuming you do have Node installed. But again, this is all just for illustration and not required for using npm.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1714\" height=\"878\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=1714%2C878&#038;ssl=1\" alt=\"A screenshot of an open terminal window showing Node version 17.0.1 running and the output from the previous example under it.\" class=\"wp-image-361246\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?w=1714&amp;ssl=1 1714w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=300%2C154&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=1024%2C525&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=768%2C393&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=1536%2C787&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1636670874527_11-47-duzwo-b2x5h.png?resize=1000%2C512&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<h3>What’s next</h3>\n\n\n\n<p>Everything we covered in this chapter is nifty and hopefully helps to show you (however simply) the way Node works. Remember, while we didn’t cover any specific example of it, Node is capable of doing anything a server-side language can do. It’s hopefully not too hard to picture how running some JavaScript to do virtually anything you can think of on the system level or even on a remote server is very appealing and advantageous.</p>\n\n\n\n<p>The concept of Node started as a way to run JavaScript outside of the browser. As such, we have Node-based packages of scripts that are used to help us with front-end development. So how do we install those packages and make sure they’re not only updated but that they can be uninstalled? That’s contained in the last two letters in the npm abbreviation: <em>package manager</em>.</p>\n\n\n\n<p>In other words, npm is a tool that manages packages written in Node JavaScript. What exactly is a package manager and how does npm qualify as one? That’s up next in our npm guide.</p>\n\n\n\n<div class=\"wp-container-61f32eef9df86 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">← Chapter 3</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">Chapter 5 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/node-and-how-it-works-with-npm/\">What the Heck is Node?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/node-and-how-it-works-with-npm/feed/</wfw:commentRss>\n\t\t\t<slash:comments>2</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">361241</post-id>\t</item>\n\t\t<item>\n\t\t<title>What the Heck is a Package Manager?</title>\n\t\t<link>https://css-tricks.com/what-the-heck-is-a-package-manager/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/what-the-heck-is-a-package-manager/#respond</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Josh Collinsworth]]></dc:creator>\n\t\t<pubDate>Thu, 20 Jan 2022 15:03:59 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[npm]]></category>\n\t\t<category><![CDATA[package manager]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=361257</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>If you’re keeping score, so far in this npm guide we&#8217;ve developed a general understanding of what npm is—notably, that it stands for Node Package Manager. In the process, we’ve discussed the importance of the command line and how it&#8217;s &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/what-the-heck-is-a-package-manager/\">What the Heck is a Package Manager?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>If you’re keeping score, so far in this npm guide we&#8217;ve developed a general understanding of what npm is—notably, that it stands for Node Package Manager. In the process, we’ve discussed the importance of the command line and how it&#8217;s used with npm.</p>\n\n\n\n<p>We also looked specifically at the “n” in npm—Node—and learned that Node is a lot like the JavaScript code we write to run on websites in a browser. In fact, Node <em>is</em> JavaScript; it just runs outside of the browser, and is capable of doing different things than its browser-based counterpart.</p>\n\n\n\n<span id=\"more-361257\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This </a><a href=\"http://a-complete-beginners-guide-to-npm\">Guide</a> <a href=\"http://a-complete-beginners-guide-to-npm\">For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>What we mean by “package”</h3>\n\n\n\n<p>Now let’s turn our attention to the last two letters in npm, namely the “package manager” part. In order to fully understand what npm is, we need to know what a package manager is. So it naturally follows that in order to understand <em>that</em>, we need to understand what the heck a “package” is.</p>\n\n\n\n<p>“<dfn>Package</dfn>” is a catch-all term for any external code files that you pull into a project and use in some way. Perhaps you’ve used <a href=\"https://jquery.com\" rel=\"noopener\">jQuery</a>, <a href=\"https://getbootstrap.com\" rel=\"noopener\">Bootstrap</a>, or <a href=\"https://axios-http.com\" rel=\"noopener\">Axios</a> on a project in the past. Those are common examples of packages.</p>\n\n\n\n<p>We call these “packages” because they’re “packaged up” and ready to be used. Some languages call them by other names (Ruby calls them “gems” for example), but the concept is the same. At the risk of oversimplifying, <strong>a <dfn>package</dfn> is code that you didn’t write but got from some public source to use in your project.</strong> You know, third-party code.</p>\n\n\n\n<p>Or, if you prefer musical parodies for your mnemonic devices:</p>\n\n\n\n<p>&#x1f3b5; <em>When there’s code that you choose</em><br>&#x1f3b5; <em>That’s not yours, but you use</em><br>&#x1f3b5; <em>That’s a package</em><br>&#x1f3b5; <em>When it’s stuff you install</em><br>&#x1f3b5; <em>That you import and call,</em><br>&#x1f3b5; <em>That’s a package</em></p>\n\n\n\n<p>Packages are also often also referred to as “dependencies,” because the code you write <em>depends</em> on them being present. Code written using jQuery’s <code>$</code> won’t work right if jQuery itself isn’t already loaded, for instance. (For this reason, package managers are also sometimes called “dependency managers.”)</p>\n\n\n\n<p>Packages can be big or small in terms of how much code they contain. A package might do something huge that changes how you write your whole project (like an entire framework), or it might do something very small and focused that you sprinkle in only where needed (like a widget, or a helper for a specific task).</p>\n\n\n\n<h3>Using packages without a package manager</h3>\n\n\n\n<p>Most likely, if you have used a package in the past, you’ve simply applied it with a script tag in the HTML that pulls from an external URL (ideally <a href=\"https://css-tricks.com/adding-a-cdn-to-your-website/\">from a CDN</a>). Here’s how you might include jQuery in the HTML of your site:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js\">&lt;/script></code></pre>\n\n\n\n<p>Another approach is to download a copy of the package, add it to your project’s files, and link to it locally, like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;script src=\"/jquery.min.js\">&lt;/script></code></pre>\n\n\n\n<h3>What package managers solve</h3>\n\n\n\n<p>These two approaches have worked well for years. It’s simple. It’s clean. It generally lets you “set it and forget it” as far as the package goes. So why would you need something else?</p>\n\n\n\n<p>You can probably imagine how owning a car might seem unappealing to somebody who has ready access to convenient transit, or who has no need for long-distance travel. (This will tie back into the package manager talk, I promise. Stick with me.)</p>\n\n\n\n<p>If you have easy access to convenient and efficient mass transit, then paying a large price for a massive machine that you have to store somewhere, regularly clean, maintain, and fill with costly fuel probably won’t carry much upside from your perspective. In that specific case, the benefits are negligible; the costs are comparatively overwhelming. Someone in that hypothetical position might even wonder why anybody wants a car at all!</p>\n\n\n\n<p>I bring up this analogy because learning about a new technology can be very hard when <em>it solves a problem you don’t have</em>, in very much the same way that buying a car might fail to solve transportation you already have. It might seem like a massive, needless expenditure.</p>\n\n\n\n<p>What a package manager solves, then, is more a matter of scaling and handling concerns. Simply linking to a package in a script tag works well, as long as:</p>\n\n\n\n<ul><li>the number of projects you have is manageable;</li><li>the number of people working on the projects is manageable;</li><li>the number of updates that need to be made to the packages are manageable; and, most crucially,</li><li>every package used in your projects is client-side (browser) JavaScript or CSS.</li></ul>\n\n\n\n<p>That last one is the doozy, because there’s a plethora of tooling you can’t ever use if you <em>only</em> run things in the browser (more on that in a moment).</p>\n\n\n\n<p>If you <em>do</em> check all of those boxes, you might not ever outgrow this approach. Your development approach might just look like this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1280\" height=\"720\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=1280%2C720&#038;ssl=1\" alt=\"A black and white line illustration showing the diagram of packages with a package manager. A cloud labelled packages is followed by three files, HTML, CSS, and JavaScript, which are followed by the browser.\" class=\"wp-image-361261\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?w=1280&amp;ssl=1 1280w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480027486_SimpleProcess.png?resize=1000%2C563&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But even in that case, when you have multiple <code>&lt;script&gt;</code> tags, each linking to a specific version of some script or library, the <em>only</em> way to get any visibility at all into what packages you’re using—and whether they’re up-to-date—is to go manually open up the HTML and look at the code.</p>\n\n\n\n<p>That’s not much of an issue in and of itself, but it’s a problem that grows exponentially as the size and scope of a project ramps up. You may be able to keep track of a few packages manually, but how could you possibly do that when we’re talking about hundreds—if not thousands—of packages? And even if you could manually track those, that’s still introducing a high risk of human error.</p>\n\n\n\n<p><strong>It’s not HTML’s job to be the source of truth for all of the packages used on a project.</strong> Aside from mixing concerns, it also potentially introduces conflicts when trying to merge unrelated work between teammates.</p>\n\n\n\n<p>All this is important, but it’s the smallest part of a larger problem. Understand that client-side JavaScript probably isn’t the <em>only</em> type of package you’ll want to include in your projects forever, even if it is at the moment—and that’s where things <em>really</em> start to fall apart.</p>\n\n\n\n<p>Many production apps use some combination of the following tools and packages, if not all of them:</p>\n\n\n\n<ul><li>Sass (makes writing CSS easier)</li><li>PostCSS (enhances CSS for maximum efficiency and compatibility)</li><li>Babel (transpiles newer JavaScript to run in older browsers)</li><li>TypeScript (adds type checking to JavaScript)</li><li>Hot module reloading by a dev server that auto-refreshes the browser to show your changes</li><li>Additional utilities for code bundling, minification and/or concatenation</li><li>Automatic image compression</li><li>Testing libraries</li><li>Linters</li></ul>\n\n\n\n<p>That all sounds wonderful—and it is!—but notice that you now have multiple dependencies that are not only <em>not</em> present in your script tags, but are <em>not accounted for anywhere in your project at all</em>! There’s no way for anybody—including your future self—to have any idea what tools were used or are required to to get this project running.</p>\n\n\n\n<p>And even if you could know exactly what the project needed that way, you’d still need to go locate, download, and install all of those packages yourself… manually. Depending on the project, this could easily be a day-long task, or longer.</p>\n\n\n\n<p>All this means your workflow now looks a little more like this:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=1024%2C576&#038;ssl=1\" alt=\"A black and white line illustration showing the diagram of packages without a package manager. A group that consists of templates, Sass, and TypeScript or followed by static HTML, CSS, and JavaScript files, which are followed by a group that contains PostCSS and Babel, which is followed by a build tool, which is followed by two forks, one the dev server preview and the other the production browser.\" class=\"wp-image-361263\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?resize=1000%2C563&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1638480600785_BuildProcess.png?w=1280&amp;ssl=1 1280w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Again, this is all good. This toolchain means that what gets shipped to the browser is highly optimized—but it’s also additional overhead and complexity.</figcaption></figure>\n\n\n\n<p><strong>Convenient as all the tools above are, you still need to <em>manage</em> them</strong>. Dependencies are projects, too, and they ship updates to patch bugs and introduce new features. As such, it’s unrealistic to simply paste a script tag in the HTML with a link that points to package on a CDN then call it good. You have to make sure each thing is installed and working properly not just on <em>your</em> machine, but on every collaborator’s machine, too.</p>\n\n\n\n<p>Package managers exist to make the packages—or dependencies—of a project manageable by knowing what is installed, what’s available to update, and whether one package might create conflicts with another. And the beauty of a package manager is that it accomplishes all of this directly from the command line, with minimal effort.</p>\n\n\n\n<p>Many package managers, especially npm, also provide additional features that open up even more possibilities to make development more efficient. But managing packages is the main attraction.</p>\n\n\n\n<h3>There are package managers that aren’t npm</h3>\n\n\n\n<p>This part isn’t super relevant to npm itself, but for the sake of completeness, I should also mention that npm isn’t the <em>only</em> JavaScript package manager. For example, you may see <a href=\"https://yarnpkg.com/\" rel=\"noopener\">Yarn</a> referenced in code examples. Yarn and npm work much the same way, to the extent that a great deal of interoperability between the two is purposely built in.</p>\n\n\n\n<p>Some folks prefer one package manager over another. Personally, I think the differences between npm and Yarn were more pronounced at first, but the two are now more similar than not.</p>\n\n\n\n<p>You may see code examples (including some in CSS-Tricks articles) that reference both <code>yarn</code> and <code>npm</code> together. That’s to let the reader know that either approach is fine, rather than the need to use both of them together.</p>\n\n\n\n<p>The syntax for Yarn and npm differ at times, but where only one is present, it’s generally trivial to convert a command or project from one to the other. Functionally, it rarely (if ever) matters which one you use—except, of course, that everybody working on the same project together will want to be using the same one to ensure compatibility and consistency.</p>\n\n\n\n<p>While npm and Yarn make up the vast majority of package managers that developers use, <a href=\"https://pnpm.io\" rel=\"noopener\">there’s another package manager called PnPm</a> that is effectively npm, but more performant and efficient. The tradeoff is that PnPm requires a bit more technical know-how in some cases, so it’s a bit more of an advanced option.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_AF038BF04094A70509D67F40885F11F49B56FA082F53552BB58B184DA068C273_1637444428589_20-40-h5en5-kw94x.png\" alt=\"Three examples of installing Vite in terminal via command line. First is npm, then Yarn, then PNPM.\"/><figcaption>The syntax differences between different package managers are generally minimal.&nbsp;(Source:&nbsp;<a target=\"_blank\" href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" rel=\"noreferrer noopener\">Vite</a>)</figcaption></figure>\n\n\n\n<h3>What makes npm the “standard” package manager</h3>\n\n\n\n<p>Again, I only bring up other package managers to illustrate that npm isn’t the only package manager out there—but it is generally the standard.</p>\n\n\n\n<p>What makes it the “standard” among package managers? Other languages, including Ruby and PHP, have had package managers for many years; JavaScript really didn’t have any good ones before npm.</p>\n\n\n\n<p>npm started as an independent, open-source project, but was <a href=\"https://www.cnbc.com/2020/03/16/microsoft-github-agrees-to-buy-code-distribution-start-up-npm.html\" rel=\"noopener\">acquired by Microsoft in 2020</a>. It technically has two parts: the actual package manager itself; and the package registry, which is an ever-growing list of <em>nearly two million</em> packages available to install.</p>\n\n\n\n<p>You could think of npm as the app store for anything you might want to use on a front-end or Node-based project. Find what you want and install it to your system via the command line. You might update that package when a new version is released, or delete it altogether if the project no longer depends on it.</p>\n\n\n\n<h3>A note on npx</h3>\n\n\n\n<p>You may <em>also</em> see <code>npx</code> commands floating out there. <a href=\"https://docs.npmjs.com/cli/v7/commands/npx\" rel=\"noopener\">npx</a> is actually a part of npm, but by using <code>npx</code> in a command instead of <code>npm</code> , you can execute the code of a package <em>without</em> <em>permanently</em> <em>installing it</em>. NPX just installs what it needs to, runs it, and dumps it.</p>\n\n\n\n<p>This is helpful if, for example, you want to run an installer script. Rather than downloading the installer, <em>then</em> running it, npx lets you simply run the installer directly, leaving nothing on your machine afterward. It’s like the house guest that cleans up after themselves.</p>\n\n\n\n<p>Another cool example: you could run <code>npx sass</code> (along with the necessary input and output arguments) if you wanted to compile your project’s Sass files just once without going to the trouble of completely installing Sass. This probably isn’t practical in most cases, but if you just needed a quick one-off compilation here and there, npx would be a handy way to do it, as it means fewer installed packages that need to be updated and maintained.</p>\n\n\n\n<h3>What&#8217;s next</h3>\n\n\n\n<p>Alright, so that&#8217;s a deep dive into what we mean when we call something a package manager. In the case of npm, it is used specifically to install and manage Node packages, tools that help add features to a project, add handy developer conveniences&#8230; or all of the above!</p>\n\n\n\n<p>Next up, we&#8217;re going to take our first step into <em>using</em> npm. And to do that, we need to install it to our system. That&#8217;s next up in this complete guide to npm.</p>\n\n\n\n<div class=\"wp-container-61f32eefa219c wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">← Chapter 4</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">Chapter 6 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/what-the-heck-is-a-package-manager/\">What the Heck is a Package Manager?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/what-the-heck-is-a-package-manager/feed/</wfw:commentRss>\n\t\t\t<slash:comments>0</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">361257</post-id>\t</item>\n\t\t<item>\n\t\t<title>How the Heck Do You Install npm?</title>\n\t\t<link>https://css-tricks.com/how-to-install-npm-node-nvm/</link>\n\t\t\t\t\t<comments>https://css-tricks.com/how-to-install-npm-node-nvm/#comments</comments>\n\t\t\n\t\t<dc:creator><![CDATA[Josh Collinsworth]]></dc:creator>\n\t\t<pubDate>Thu, 20 Jan 2022 15:03:53 +0000</pubDate>\n\t\t\t\t<category><![CDATA[Article]]></category>\n\t\t<category><![CDATA[npm]]></category>\n\t\t<guid isPermaLink=\"false\">https://css-tricks.com/?p=361270</guid>\n\n\t\t\t\t\t<description><![CDATA[<p>Feel like you have a pretty good idea of what a package manager is? We’ve certainly covered a lot of ground getting familiar with all the terms and concepts of package managers, but I’d say it’s high time we actually &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-install-npm-node-nvm/\">How the Heck Do You Install npm?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></description>\n\t\t\t\t\t\t\t\t\t\t<content:encoded><![CDATA[\n<p>Feel like you have a pretty good idea of what a package manager is? We’ve certainly covered a lot of ground getting familiar with all the terms and concepts of package managers, but I’d say it’s high time we actually <em>do</em> something with our newfound knowledge. But first, we need to install npm.</p>\n\n\n\n<p>To that end, we’re going to make sure we have Node and npm installed, then make a little sample project to give you real hands-on experience working with the npm basics and what it looks like to use npm in your front-end development workflow.</p>\n\n\n\n<span id=\"more-361270\"></span>\n\n\n\n<h2>Guide chapters</h2>\n\n\n\n<ol class=\"is-style-almanac-list\"><li><a href=\"https://css-tricks.com/a-complete-beginners-guide-to-npm\">Who the Heck is This Guide For?</a></li><li><a href=\"https://css-tricks.com/a-clear-definition-of-npm-and-what-it-does\">What the Heck Does “npm” Mean?</a></li><li><a href=\"https://css-tricks.com/a-deep-look-at-the-command-line\">What the Heck is the Command Line?</a></li><li><a href=\"https://css-tricks.com/node-and-how-it-works-with-npm\">What the Heck is Node?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">What the Heck is a Package Manager?</a></li><li><a href=\"https://css-tricks.com/how-to-install-npm-node-nvm\">How the Heck Do You Install npm?</a> <em>(You are here!)</em></li><li><a href=\"https://css-tricks.com/how-to-install-npm-packages\">How the Heck Do You Install npm Packages?</a></li><li><a href=\"https://css-tricks.com/what-the-heck-are-npm-commands\">What the Heck Are npm Commands?</a></li><li><a href=\"https://css-tricks.com/how-to-install-an-npm-project\">How the Heck Do You Install an Existing npm Project?</a></li></ol>\n\n\n\n<h3>Confirm whether npm is already installed</h3>\n\n\n\n<p>Before installing npm, we should confirm whether it&#8217;s already installed! If you’re unsure whether or not npm is already installed on your system, open your terminal of choice, whether it’s the Terminal app in MacOS, the integrated terminal in a code editor like VS Code, or some other terminal where you have access to the command line.</p>\n\n\n\n<p>Ready? Start with this command (notice we’re not including the <code>$</code> character in these examples):</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">node -v</code></pre>\n\n\n\n<p>That command displays the current version of Node—that is, if it is installed. If Node <em>is</em> installed, the command line will respond with the Node version number that is currently installed:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">v16.9.1</code></pre>\n\n\n\n<p>Your version may be different, of course. Either way, the fact that you see a version number confirms that npm is installed on your system! Let me stress that <strong>the numbers themselves are unimportant</strong>, just as long as we get <em>some</em> version number.</p>\n\n\n\n<p>If npm or Node is <em>not</em> currently installed, you’ll see a message along the lines of “Command not found” instead. In the unlikely event that npm is installed but Node is not (or vice versa), then it’s probably worth uninstalling it before continuing.</p>\n\n\n\n<p>Assuming you <em>do</em> need to install npm and Node (and if you don’t, you’re welcome to skip ahead to the next section), we’re going to take the advice of <a href=\"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\" rel=\"noopener\">the official NPM directions</a> and do so via a program called <a href=\"https://github.com/nvm-sh/nvm\" rel=\"noopener\">nvm</a>.</p>\n\n\n\n<h3>Installing Node Version Manager</h3>\n\n\n\n<p>Node Version Manager, or nvm, allows you to install, update, and uninstall Node on your system, and also to manage multiple versions of Node that you can switch between.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2424\" height=\"1802\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=2424%2C1802&#038;ssl=1\" alt=\"Screenshot of the Node Version Manager repository on GitHub which is closely related to how to install npm in terms of installing Node itself.\" class=\"wp-image-361275\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?w=2424&amp;ssl=1 2424w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=1024%2C761&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=768%2C571&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=1536%2C1142&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=2048%2C1522&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/01/nvm-github.png?resize=1000%2C743&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The <a href=\"https://github.com/nvm-sh/nvm\" rel=\"noopener\">Node Version Manager repository</a> on GitHub</figcaption></figure>\n\n\n\n<p class=\"is-style-explanation\">As you may know, server-side languages have their own release versions, e.g., Node 17.1.0, rather than being tied to browser versions, such as Chrome 96. We won’t need any version of Node but the latest, so this won’t be necessary for us right now, although it may be advantageous for you down the road.</p>\n\n\n\n<p>I know, it may seem like a lot of extra work to install one program just to install another, but again, this is the recommended path, and doing things the right way from the start makes them much easier in the long run. I’d rather set you up for success than make things briefly easier at the expense of more complexity later.</p>\n\n\n\n<h4>Installing nvm on Windows</h4>\n\n\n\n<p>If you’re on Windows, you’ll actually have an easier time here. You’ll need nvm for Windows specifically, but luckily, Windows already has an installer you simply download and run. The directions are in the <a href=\"https://github.com/coreybutler/nvm-windows\" rel=\"noopener\">NVM for Windows</a> repo over at GitHub.</p>\n\n\n\n<ul><li>Download the <a href=\"https://github.com/coreybutler/nvm-windows/releases\" rel=\"noopener\">latest version of NVM for Windows</a>. It can be <a href=\"https://github.com/coreybutler/nvm-windows/wiki#manual-installation\" rel=\"noopener\">installed manually</a>, if you prefer.</li><li>Open the terminal and run the <code>nvm list available</code> command to see a list of Node versions that are available to download and install.</li><li>Run the <code>nvm use</code> command, followed by the version number of Node you want to use (e.g. <code>nvm use 16.9.1</code>) to use a specific version. Alternatively, you can use use <code>latest</code>, <code>lts</code>, or <code>newest</code> instead of a specific version number, where <code>newest</code> is the latest <em>installed</em> version.</li></ul>\n\n\n\n<p>Once it’s installed, nvm will work the same way on your Windows machine as it does on any other system.</p>\n\n\n\n<h4>Installing nvm on MacOS</h4>\n\n\n\n<p>To install nvm on MacOS, the first step is to download it with this command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</code></pre>\n\n\n\n<p class=\"is-style-explanation\"><code>0.39.0</code> is the latest version at publish time, but it may be worth checking the <a href=\"https://github.com/nvm-sh/nvm#installing-and-updating\" rel=\"noopener\">nvm installation readme</a> and getting the latest, if different.</p>\n\n\n\n<p>Once you’ve pasted that command into the terminal and hit <kbd>Enter</kbd>, you’ll see your terminal output a bunch of stuff that doesn’t really matter. In fact, I’ll let you in on a little secret: nobody reads the things in their terminals most of the time. All we care about is that&#8230;</p>\n\n\n\n<ol><li>the command eventually finishes; and</li><li>it doesn’t end with an error message.</li></ol>\n\n\n\n<p class=\"is-style-explanation\">If you are prompted for a command in the middle of the installation, hit the <kbd>q</kbd> key to quit and continue.</p>\n\n\n\n<p>You’ll know the command is finished running when the typing cursor starts blinking again, indicating the terminal is waiting for your typed input. You might even see this right after nvm has completed installing:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">=> Close and reopen your terminal to start using nvm or run the following to use it now:\n</code></pre>\n\n\n\n<p>Assuming you see no errors at this point, I would recommend the simpler option of quitting and restarting whatever terminal app you’re using before moving on. It&#8217;s a nice way to make sure you&#8217;re working with a clean slate.</p>\n\n\n\n<h3>How to install npm via Node</h3>\n\n\n\n<p>Now that nvm is installed, we’re ready to do what we <em>really</em> wanted to do in the first place: install npm and Node on our system.</p>\n\n\n\n<p>It’s not a bad idea to confirm nvm is installed properly, by running <code>nvm -v</code>. If the terminal shows you the installed version number, you’re good to go! If not, remember that you might have to restart your terminal app before the installation fully processes.</p>\n\n\n\n<p>Now that we have nvm, installing Node is a super short command:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">nvm install node</code></pre>\n\n\n\n<p>Simple enough, eh?</p>\n\n\n\n<p>You should see a message along the lines of <code>Downloading and installing node v17.1.0</code>, though the version number may not match, which is fine. You’ll get whatever the latest stable version is at runtime. Wait until the command has finished running—again, you’ll know it’s done once you are back at the default prompt and you’re able to type more commands.</p>\n\n\n\n<p>After that, you’re all done here! That simple command not only installs Node, but it will install npm as well. Again, you can verify everything is installed and up to date with <code>npm -v</code> and <code>node -v</code>. If all is good, you’ll get a version number.</p>\n\n\n\n<h3>What’s next</h3>\n\n\n\n<p>Alright, at this point, we have nvm for installing and managing Node, Node itself, and npm for handling Node packages. Next up in this npm guide, we’re going to install some packages into a project!</p>\n\n\n\n<div class=\"wp-container-61f32eefa68c6 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/what-the-heck-is-a-package-manager\">← Chapter 5</a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://css-tricks.com/how-to-install-npm-packages\">Chapter 7 →</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-install-npm-node-nvm/\">How the Heck Do You Install npm?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a> and <a href=\"https://css-tricks.com/product/mvp-supporter/\">become a supporter</a>.</small></p>\n]]></content:encoded>\n\t\t\t\t\t\n\t\t\t\t\t<wfw:commentRss>https://css-tricks.com/how-to-install-npm-node-nvm/feed/</wfw:commentRss>\n\t\t\t<slash:comments>2</slash:comments>\n\t\t\n\t\t\n\t\t<post-id xmlns=\"com-wordpress:feed-additions:1\">361270</post-id>\t</item>\n\t</channel>\n</rss>\n"
  },
  "description": "Tips, Tricks, and Techniques on using Cascading Style Sheets.",
  "home_page_url": "https://css-tricks.com",
  "icon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=32%2C32&ssl=1",
  "_ext": {
    "date_published": "2022-01-27T15:20:57.000Z",
    "date_modified": "2022-01-27T18:34:23.000Z"
  }
}