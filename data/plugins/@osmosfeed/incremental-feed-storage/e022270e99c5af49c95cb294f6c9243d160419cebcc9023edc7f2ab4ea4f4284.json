{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Go Make Things",
  "feed_url": "https://gomakethings.com/feed/index.xml",
  "items": [
    {
      "id": "https://gomakethings.com/listening-for-events-on-multiple-elements-using-javascript-event-delegation/",
      "url": "https://gomakethings.com/listening-for-events-on-multiple-elements-using-javascript-event-delegation/",
      "title": "Listening for events on multiple elements using JavaScript event delegation",
      "summary": "In JavaScript, event listeners have to be attached to individual elements. You can’t attach them to an array or node list of matching elements like you might in jQuery.\nToday, we’re going to look at a technique that you can use listen for the same even on multiple elements without having to attach to each element individually: event delegation.\nLet’s dig in!\nThe EventTarget.addEventListener() method As a quick primer, you can use the EventTarget.",
      "content_html": "<p>In JavaScript, event listeners have to be attached to individual elements. You can&rsquo;t attach them to an array or node list of matching elements like you might in jQuery.</p>\n\n<p>Today, we&rsquo;re going to look at a technique that you can use listen for the same even on multiple elements <em>without</em> having to attach to each element individually: event delegation.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-eventtarget-addeventlistener-method\">The <code>EventTarget.addEventListener()</code> method</h2>\n\n<p>As a quick primer, you can use the <code>EventTarget.addEventListener()</code> method to listen for events on an element. <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">You can find a full list of available events on the Mozilla Developer Network.</a></p>\n\n<p>Attached the <code>EventTarget.addEventListener()</code> method to the element you want to listen for events on. It accepts two arguments: the event to listen for, and a callback function to run when the event happens.</p>\n\n<p>You can pass the <code>event</code> into the callback function as an argument. The <code>event.target</code> property is the element that triggered the event. The <code>event</code> object has other properties as well, many of them specific to the type of event that occurred.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#click-me&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span> <span class=\"c1\">// The event details\n</span><span class=\"c1\"></span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">);</span> <span class=\"c1\">// The clicked element\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/KKXjPdN?editors=0011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"listening-for-the-same-event-on-multiple-elements\">Listening for the same event on multiple elements</h2>\n\n<p>One trick to listen a specific event on bunch of elements at once is to attach your listener to a parent element that your elements are contained within, such as the <code>window</code> or <code>document</code>.</p>\n\n<p>Events that happens on elements inside that parent element <em>bubble up</em>.</p>\n\n<p>The <code>event.target</code> property is the element that triggered the event. We can use that property to check if the element that triggered the event has a matching selector.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// Listen for clicks on the entire window\n</span><span class=\"c1\"></span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// If the clicked element has the `.click-me` class, it&#39;s a match!\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">matches</span><span class=\"p\">(</span><span class=\"s1\">&#39;.click-me&#39;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\t\t<span class=\"c1\">// Do something...\n</span><span class=\"c1\"></span>\t<span class=\"p\">}</span>\n\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/poWXzNP?editors=1011\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"why-wouldn-t-you-just-loop-through-each-element-and-attach-an-event-listener\">Why wouldn&rsquo;t you just loop through each element and attach an event listener?</h2>\n\n<p>You <em>can</em> attach event listeners to individual elements by looping over each one, like this.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * This works, but it&#39;s bad for performance\n</span><span class=\"cm\"> * DON&#39;T DO IT!\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">let</span> <span class=\"nx\">btns</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">&#39;.click-me&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"k\">of</span> <span class=\"nx\">btns</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span> <span class=\"c1\">// The event details\n</span><span class=\"c1\"></span>\t\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">);</span> <span class=\"c1\">// The clicked element\n</span><span class=\"c1\"></span>\t<span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But if you have a lot of elements, it can actually be worse for performance than event delegation.</p>\n\n<p>Every event listener you create uses memory in the browser. It’s “cheaper” for the browser to track one event and fire it on every click that it is to manage multiple events.</p>\n\n<p>If you’re only listening for events on a single element, feel free to attach directly to that element. But if you’re listening for events on multiple elements, I’d recommend using event delegation.</p>\n\n<h2 id=\"capturing-events-that-don-t-bubble\">Capturing events that don&rsquo;t bubble</h2>\n\n<p>Certain events, like <code>focus</code>, don&rsquo;t bubble. In order to use event delegation with events that don&rsquo;t bubble, you can set an optional third argument on the <code>EventTarget.addEventListener()</code> method, called <code>useCapture</code>, to <code>true</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// Listen for all focus events in the document\n</span><span class=\"c1\"></span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;focus&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"c1\">// Run functions whenever an element in the document comes into focus\n</span><span class=\"c1\"></span><span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>You can determine if <code>useCapture</code> should be set to <code>true</code> or <code>false</code> by looking at the event details page on the Mozilla Developer Network (<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event\">like this one for the <code>focus</code> event</a>).</p>\n\n<p>If <em>Bubbles</em> in the chart at the top of the page is &ldquo;No,&rdquo; you need to set <code>useCapture</code> to <code>true</code> to use event delegation.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/ExwBYZR?editors=1011\">Here&rsquo;s one last demo.</a></p>",
      "content_text": "In JavaScript, event listeners have to be attached to individual elements. You can’t attach them to an array or node list of matching elements like you might in jQuery.\n\nToday, we’re going to look at a technique that you can use listen for the same even on multiple elements without having to attach to each element individually: event delegation.\n\nLet’s dig in!\n\nThe EventTarget.addEventListener() method\n\nAs a quick primer, you can use the EventTarget.addEventListener() method to listen for events on an element. You can find a full list of available events on the Mozilla Developer Network.\n\nAttached the EventTarget.addEventListener() method to the element you want to listen for events on. It accepts two arguments: the event to listen for, and a callback function to run when the event happens.\n\nYou can pass the event into the callback function as an argument. The event.target property is the element that triggered the event. The event object has other properties as well, many of them specific to the type of event that occurred.\nlet btn = document.querySelector('#click-me');\n\nbtn.addEventListener('click', function (event) {\n\tconsole.log(event); // The event details\n\tconsole.log(event.target); // The clicked element\n});\n\nHere’s a demo.\n\nListening for the same event on multiple elements\n\nOne trick to listen a specific event on bunch of elements at once is to attach your listener to a parent element that your elements are contained within, such as the window or document.\n\nEvents that happens on elements inside that parent element bubble up.\n\nThe event.target property is the element that triggered the event. We can use that property to check if the element that triggered the event has a matching selector.\n// Listen for clicks on the entire window\ndocument.addEventListener('click', function (event) {\n\n\t// If the clicked element has the `.click-me` class, it's a match!\n\tif (event.target.matches('.click-me')) {\n\t\t// Do something...\n\t}\n\n});\n\nHere’s another demo.\n\nWhy wouldn’t you just loop through each element and attach an event listener?\n\nYou can attach event listeners to individual elements by looping over each one, like this.\n/**\n * This works, but it's bad for performance\n * DON'T DO IT!\n */\nlet btns = document.querySelectorAll('.click-me');\n\nfor (let btn of btns) {\n\tbtn.addEventListener('click', function (event) {\n\t\tconsole.log(event); // The event details\n\t\tconsole.log(event.target); // The clicked element\n\t});\n}\n\nBut if you have a lot of elements, it can actually be worse for performance than event delegation.\n\nEvery event listener you create uses memory in the browser. It’s “cheaper” for the browser to track one event and fire it on every click that it is to manage multiple events.\n\nIf you’re only listening for events on a single element, feel free to attach directly to that element. But if you’re listening for events on multiple elements, I’d recommend using event delegation.\n\nCapturing events that don’t bubble\n\nCertain events, like focus, don’t bubble. In order to use event delegation with events that don’t bubble, you can set an optional third argument on the EventTarget.addEventListener() method, called useCapture, to true.\n// Listen for all focus events in the document\ndocument.addEventListener('focus', function (event) {\n\t// Run functions whenever an element in the document comes into focus\n}, true);\n\nYou can determine if useCapture should be set to true or false by looking at the event details page on the Mozilla Developer Network (like this one for the focus event).\n\nIf Bubbles in the chart at the top of the page is “No,” you need to set useCapture to true to use event delegation.\n\nHere’s one last demo.",
      "date_published": "2022-01-20T15:30:00.000Z",
      "date_modified": "2022-01-20T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "ca284de929347c1bf42cd30eb1593df86011060dfc9ae3bd67e633460d6cc62b.html"
      }
    },
    {
      "id": "https://gomakethings.com/how-to-get-set-and-remove-attributes-and-properties-with-vanilla-javascript/",
      "url": "https://gomakethings.com/how-to-get-set-and-remove-attributes-and-properties-with-vanilla-javascript/",
      "title": "How to get, set, and remove attributes and properties with vanilla JavaScript",
      "summary": "Today, we’re going to look at how to get, set, and remove attributes and properties with vanilla JS. We’ll also learn the difference between attributes and properties, and some “gotchas” when working with them.\nLet’s dig in!\nThe Element.*Attribute() methods You can use the Element.getAttribute(), Element.setAttribute(), Element.removeAttribute(), and Element.hasAttribute() methods to get, set, remove, and check for the existence of attributes (including data attributes) on an element, respectively.\nIf an attribute does not exist on an element, the Element.",
      "content_html": "<p>Today, we&rsquo;re going to look at how to get, set, and remove attributes and properties with vanilla JS. We&rsquo;ll also learn the difference between attributes and properties, and some &ldquo;gotchas&rdquo; when working with them.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-element-attribute-methods\">The <code>Element.*Attribute()</code> methods</h2>\n\n<p>You can use the <code>Element.getAttribute()</code>, <code>Element.setAttribute()</code>, <code>Element.removeAttribute()</code>, and <code>Element.hasAttribute()</code> methods to get, set, remove, and check for the existence of attributes (including data attributes) on an element, respectively.</p>\n\n<p>If an attribute does not exist on an element, the <code>Element.getAttribute()</code> method returns <code>null</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">elem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#lunch&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Get the value of the [data-sandwich] attribute\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"o\">=</span> <span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;data-sandwich&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Set a value for the [data-sandwich] attribute\n</span><span class=\"c1\"></span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;data-sandwich&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;turkey&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Remove the [data-chips] attribute\n</span><span class=\"c1\"></span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">removeAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;data-chips&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Check if an element has the `[data-drink]` attribute\n</span><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">hasAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;data-drink&#39;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Add a drink!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/VwMOjGz?editors=1111\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"element-properties\">Element properties</h2>\n\n<p>HTML elements have dozens of properties that you can access directly.</p>\n\n<p>Some of them are <em>read only</em>, meaning you can get their value but not set it. Others can be used to both read and set values. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element\">You can find a full list on the Mozilla Developer Network.</a></p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">elem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#main&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Get the ID of the element\n</span><span class=\"c1\">// returns &#34;main&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Set the ID of the element\n</span><span class=\"c1\"></span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;secondary&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Get the parentNode of the element\n</span><span class=\"c1\">// This property is read-only\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">parent</span> <span class=\"o\">=</span> <span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">parentNode</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/ExwzydK?editors=1111\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"what-s-the-difference-between-attributes-and-properties\">What&rsquo;s the difference between attributes and properties?</h2>\n\n<p>In JavaScript, an element has attributes and properties. The terms are often used interchangeably, but they&rsquo;re actually two separate things.</p>\n\n<p>An <em>attribute</em> is the <em>initial state</em> when rendered in the DOM. A <em>property</em> is the <em>current state</em>.</p>\n\n<p>In most cases, attributes and properties are kept in-sync automatically. For example, when you use <code>Element.setAttribute()</code> to update an ID attribute, the <code>id</code> property is updated as well.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Hello<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Update the ID\n</span><span class=\"c1\"></span><span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;first-paragraph&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// These both return &#34;first-paragraph&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">id1</span> <span class=\"o\">=</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span> <span class=\"nx\">id2</span> <span class=\"o\">=</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>However, user-changeable form properties&mdash;noteably, <code>value</code>, <code>checked</code>, and <code>selected</code>&mdash;are <em>not</em> automatically synced.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">&#34;greeting&#34;</span><span class=\"p\">&gt;</span>Greeting<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;greeting&#34;</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#greeting&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Update the value\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;value&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Hello there!&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// If you haven&#39;t made any updates to the field, these both return &#34;Hello there!&#34;\n</span><span class=\"c1\">// If you HAVE updated the field, val1 returns whatever was typed in the field instead\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">val1</span> <span class=\"o\">=</span> <span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">val2</span> <span class=\"o\">=</span> <span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;value&#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>If you try to update the <code>value</code> property directly, that <em>will</em> update the UI.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Hello there!&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>This allows you to choose different approaches depending on whether you want to overwrite user updates or not.</p>\n\n<p>If you want to update a field, but <em>only if</em> the user hasn&rsquo;t made any changes, use <code>Element.setAttribute()</code>. If you want to overwrite anything they&rsquo;ve done, use the <code>value</code> property.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/abLrZPm?editors=1111\">Here&rsquo;s one last demo.</a></p>",
      "content_text": "Today, we’re going to look at how to get, set, and remove attributes and properties with vanilla JS. We’ll also learn the difference between attributes and properties, and some “gotchas” when working with them.\n\nLet’s dig in!\n\nThe Element.*Attribute() methods\n\nYou can use the Element.getAttribute(), Element.setAttribute(), Element.removeAttribute(), and Element.hasAttribute() methods to get, set, remove, and check for the existence of attributes (including data attributes) on an element, respectively.\n\nIf an attribute does not exist on an element, the Element.getAttribute() method returns null.\nlet elem = document.querySelector('#lunch');\n\n// Get the value of the [data-sandwich] attribute\nlet sandwich = elem.getAttribute('data-sandwich');\n\n// Set a value for the [data-sandwich] attribute\nelem.setAttribute('data-sandwich', 'turkey');\n\n// Remove the [data-chips] attribute\nelem.removeAttribute('data-chips');\n\n// Check if an element has the `[data-drink]` attribute\nif (elem.hasAttribute('data-drink')) {\n\tconsole.log('Add a drink!');\n}\n\nHere’s a demo.\n\nElement properties\n\nHTML elements have dozens of properties that you can access directly.\n\nSome of them are read only, meaning you can get their value but not set it. Others can be used to both read and set values. You can find a full list on the Mozilla Developer Network.\nlet elem = document.querySelector('#main');\n\n// Get the ID of the element\n// returns \"main\"\nlet id = elem.id;\n\n// Set the ID of the element\nelem.id = 'secondary';\n\n// Get the parentNode of the element\n// This property is read-only\nlet parent = elem.parentNode;\n\nHere’s another demo.\n\nWhat’s the difference between attributes and properties?\n\nIn JavaScript, an element has attributes and properties. The terms are often used interchangeably, but they’re actually two separate things.\n\nAn attribute is the initial state when rendered in the DOM. A property is the current state.\n\nIn most cases, attributes and properties are kept in-sync automatically. For example, when you use Element.setAttribute() to update an ID attribute, the id property is updated as well.\n<p>Hello</p>let p = document.querySelector('p');\n\n// Update the ID\np.setAttribute('id', 'first-paragraph');\n\n// These both return \"first-paragraph\"\nlet id1 = p.getAttribute('id');\nlet id2 = p.id;\n\nHowever, user-changeable form properties—noteably, value, checked, and selected—are not automatically synced.\n<label for=\"greeting\">Greeting</label>\n<input type=\"text\" id=\"greeting\">let greeting = document.querySelector('#greeting');\n\n// Update the value\ngreeting.setAttribute('value', 'Hello there!');\n\n// If you haven't made any updates to the field, these both return \"Hello there!\"\n// If you HAVE updated the field, val1 returns whatever was typed in the field instead\nlet val1 = greeting.value;\nlet val2 = greeting.getAttribute('value');\n\nIf you try to update the value property directly, that will update the UI.\ngreeting.value = 'Hello there!';\n\nThis allows you to choose different approaches depending on whether you want to overwrite user updates or not.\n\nIf you want to update a field, but only if the user hasn’t made any changes, use Element.setAttribute(). If you want to overwrite anything they’ve done, use the value property.\n\nHere’s one last demo.",
      "date_published": "2022-01-19T15:30:00.000Z",
      "date_modified": "2022-01-19T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "14c752c648597191ccf398a2bdb8bbd40f0f11c3aa69cf305abf936d1353061f.html"
      }
    },
    {
      "id": "https://gomakethings.com/three-simple-ways-to-get-and-set-css-properties-with-vanilla-javascript/",
      "url": "https://gomakethings.com/three-simple-ways-to-get-and-set-css-properties-with-vanilla-javascript/",
      "title": "Three simple ways to get and set CSS properties with vanilla JavaScript",
      "summary": "In today’s article, we’re going to look at three different techniques you can use to get and set CSS properties with vanilla JS.\nLet’s dig in!\nA quick note on case Vanilla JavaScript uses camelCased versions of the properties you would use in CSS.\nFor example, background-image in CSS is backgroundImage in JavaScript. The font-weight property in CSS is fontWeight in JavaScript.\nThe Mozilla Developer Network provides a comprehensive list of available attributes and their JavaScript counterparts.",
      "content_html": "<p>In today&rsquo;s article, we&rsquo;re going to look at three different techniques you can use to get and set CSS properties with vanilla JS.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"a-quick-note-on-case\">A quick note on case</h2>\n\n<p>Vanilla JavaScript uses camelCased versions of the properties you would use in CSS.</p>\n\n<p>For example, <code>background-image</code> in CSS is <code>backgroundImage</code> in JavaScript. The <code>font-weight</code> property in CSS is <code>fontWeight</code> in JavaScript.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference\">The Mozilla Developer Network provides a comprehensive list of available attributes and their JavaScript counterparts.</a></p>\n\n<h2 id=\"the-element-style-property\">The <code>Element.style</code> property</h2>\n\n<p>You can get and set inline styles for an element with the <code>Element.style</code> property.</p>\n\n<p>The <code>Element.style</code> property is a read-only object. You can get and set individual style properties on it using camelCase style names as properties on the <code>Element.style</code> object.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;sandwich&#34;</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"s\">&#34;background-color: green; color: white;&#34;</span><span class=\"p\">&gt;</span>\n\tSandwich\n<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#sandwich&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Get a style\n</span><span class=\"c1\">// If this style is not set as an inline style directly on the element, it returns an empty string\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">bgColor</span> <span class=\"o\">=</span> <span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundColor</span><span class=\"p\">;</span> <span class=\"c1\">// this will return &#34;green&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">fontWeight</span> <span class=\"o\">=</span> <span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">fontWeight</span><span class=\"p\">;</span> <span class=\"c1\">// this will return &#34;&#34;\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// Set the background-color style property\n</span><span class=\"c1\"></span><span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;purple&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>You can also <em>get and set</em> a string representation of the entire inline <code>style</code> property on the element itself with the <code>Element.style.cssText</code> property.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Get the styles on an element\n</span><span class=\"c1\">// returns &#34;background-color: green; color: white;&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">styles</span> <span class=\"o\">=</span> <span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">cssText</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Completely replace the inline styles on an element\n</span><span class=\"c1\"></span><span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">cssText</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;font-size: 2em; font-weight: bold;&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Add additional styles\n</span><span class=\"c1\"></span><span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">cssText</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;color: purple;&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/OJxGPRK\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"the-window-getcomputedstyle-method\">The <code>window.getComputedStyle()</code> method</h2>\n\n<p>The <code>window.getComputedStyle()</code> method gets the actual computed style of an element. This factors in browser default styles as well as external stylesheets being used on the page.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#sandwich&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span> <span class=\"nx\">bgColor</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">getComputedStyle</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">).</span><span class=\"nx\">backgroundColor</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>This is <em>read only</em>, and can&rsquo;t be used to actually modify styles on an element.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/gOGybLJ?editors=1111\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"adding-a-styles-to-the-document\">Adding a styles to the document</h2>\n\n<p>The <code>Element.style</code> property is useful for adding inline styles to specific elements.</p>\n\n<p>But what if you want to add styles to <em>all elements</em> that match a specific selector? You <em>could</em> loop through each matching element and add styles using the <code>Element.style</code> property.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">&#39;.wizard&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">wizard</span> <span class=\"k\">of</span> <span class=\"nx\">wizards</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;rebeccapurple&#39;</span><span class=\"p\">;</span>\n\t<span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">color</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;white&#39;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Or, you can add CSS directly to the document by creating a <code>style</code> element and appending it into the DOM.</p>\n\n<p>First, create a <code>style</code> element using the <code>document.createElement()</code> method. Then, add your CSS to it using the <code>Element.textContent</code> property.</p>\n\n<p>Finally, you can inject it into the document using the <code>Element.append()</code> method. I like to append into the <code>document.head</code>, but <code>document.body</code> works, too.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">style</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;style&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span>\n\t<span class=\"sb\">`.wizard {\n</span><span class=\"sb\">\t\tbackground-color: rebeccapurple;\n</span><span class=\"sb\">\t\tcolor: white;\n</span><span class=\"sb\">\t}`</span><span class=\"p\">;</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">style</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/RwLONVd\">Here&rsquo;s one last demo.</a></p>",
      "content_text": "In today’s article, we’re going to look at three different techniques you can use to get and set CSS properties with vanilla JS.\n\nLet’s dig in!\n\nA quick note on case\n\nVanilla JavaScript uses camelCased versions of the properties you would use in CSS.\n\nFor example, background-image in CSS is backgroundImage in JavaScript. The font-weight property in CSS is fontWeight in JavaScript.\n\nThe Mozilla Developer Network provides a comprehensive list of available attributes and their JavaScript counterparts.\n\nThe Element.style property\n\nYou can get and set inline styles for an element with the Element.style property.\n\nThe Element.style property is a read-only object. You can get and set individual style properties on it using camelCase style names as properties on the Element.style object.\n<p id=\"sandwich\" style=\"background-color: green; color: white;\">\n\tSandwich\n</p>let sandwich = document.querySelector('#sandwich');\n\n// Get a style\n// If this style is not set as an inline style directly on the element, it returns an empty string\nlet bgColor = sandwich.style.backgroundColor; // this will return \"green\"\nlet fontWeight = sandwich.style.fontWeight; // this will return \"\"\n\n// Set the background-color style property\nsandwich.style.backgroundColor = 'purple';\n\nYou can also get and set a string representation of the entire inline style property on the element itself with the Element.style.cssText property.\n// Get the styles on an element\n// returns \"background-color: green; color: white;\"\nlet styles = sandwich.style.cssText;\n\n// Completely replace the inline styles on an element\nsandwich.style.cssText = 'font-size: 2em; font-weight: bold;';\n\n// Add additional styles\nsandwich.style.cssText += 'color: purple;';\n\nHere’s a demo.\n\nThe window.getComputedStyle() method\n\nThe window.getComputedStyle() method gets the actual computed style of an element. This factors in browser default styles as well as external stylesheets being used on the page.\nlet sandwich = document.querySelector('#sandwich');\nlet bgColor = window.getComputedStyle(sandwich).backgroundColor;\n\nThis is read only, and can’t be used to actually modify styles on an element.\n\nHere’s another demo.\n\nAdding a styles to the document\n\nThe Element.style property is useful for adding inline styles to specific elements.\n\nBut what if you want to add styles to all elements that match a specific selector? You could loop through each matching element and add styles using the Element.style property.\nlet wizards = document.querySelectorAll('.wizard');\n\nfor (let wizard of wizards) {\n\twizard.style.backgroundColor = 'rebeccapurple';\n\twizard.style.color = 'white';\n}\n\nOr, you can add CSS directly to the document by creating a style element and appending it into the DOM.\n\nFirst, create a style element using the document.createElement() method. Then, add your CSS to it using the Element.textContent property.\n\nFinally, you can inject it into the document using the Element.append() method. I like to append into the document.head, but document.body works, too.\nlet style = document.createElement('style');\nstyle.textContent =\n\t`.wizard {\n\t\tbackground-color: rebeccapurple;\n\t\tcolor: white;\n\t}`;\ndocument.head.append(style);\n\nHere’s one last demo.",
      "date_published": "2022-01-18T15:30:00.000Z",
      "date_modified": "2022-01-18T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "28ba81da80f2214598da9029a651b4b0e3c0bb6be3121c41f3c126fd446d2c56.html"
      }
    },
    {
      "id": "https://gomakethings.com/the-best-way-to-learn-javascript-in-2022/",
      "url": "https://gomakethings.com/the-best-way-to-learn-javascript-in-2022/",
      "title": "The best way to learn JavaScript in 2022",
      "summary": "Yesterday, I got an email from a newsletter subscriber asking:\n What’s the best way to practice JavaScript?\n There’s no one right way to learn JavaScript. But after teaching it for a handful of years now, I have found some trends and common approaches that make things easier for a lot of students.\nLet’s dig in!\nLean into your learning style Some folks learn best by reading, others from watching videos, and others from just diving in and trying a bunch of stuff until things click.",
      "content_html": "<p>Yesterday, I got an email from a newsletter subscriber asking:</p>\n\n<blockquote>\n<p>What&rsquo;s the best way to practice JavaScript?</p>\n</blockquote>\n\n<p>There&rsquo;s no one right way to learn JavaScript. But after teaching it for a handful of years now, I have found some trends and common approaches that make things easier for a lot of students.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"lean-into-your-learning-style\">Lean into your learning style</h2>\n\n<p>Some folks learn best by reading, others from watching videos, and others from just diving in and trying a bunch of stuff until things click.</p>\n\n<p>I personally find that I learn best from reading a little and trying a little, then reading some more. I know a lot of folks who prefer to watch videos initially, then read later to reinforce what they learned.</p>\n\n<p>When you can, try to find resources that fit your learning preferences.</p>\n\n<h2 id=\"put-what-you-learn-into-practice\">Put what you learn into practice</h2>\n\n<p>One of the biggest challenges I hear from folks who are learning is making that jump from &ldquo;I learned these methods and techniques&rdquo; to &ldquo;I know how to apply these techniques&rdquo; is <em>really hard</em>.</p>\n\n<p>The most effective way I&rsquo;ve found to bridge that gap is by working on real projects.</p>\n\n<h2 id=\"don-t-try-to-go-too-big-too-soon-with-your-projects\">Don&rsquo;t try to go too big, too soon with your projects</h2>\n\n<p>Where I see most students get stuck with project work is trying to do projects that are too big, too soon.</p>\n\n<p>Don&rsquo;t jump right into building a todo app or an ecommerce platform or anything like that. You want to start small. Like, really small. For example&hellip;</p>\n\n<ul>\n<li>write a script that shows a piece of hidden content when a button is clicked. When you click it again, hide the content again.</li>\n<li>Once you&rsquo;ve got that figured out, you can modify it to work like an accordion, where opening one piece of content closes all others in a group.</li>\n<li>Then you can add more features and details, like letting users pass in their own options or settings</li>\n</ul>\n\n<p>Start really small, and layer in more complexity as you learn.</p>\n\n<p>(<em>I&rsquo;m actually working on a new product that will provide this kind of thing in a more guided, structured way.</em>)</p>\n\n<h2 id=\"learning-inertia-is-more-important-than-picking-the-right-tools\">Learning inertia is more important than picking the right tools</h2>\n\n<p>I see a lot of learners get hung up on which tool to choose.</p>\n\n<blockquote>\n<p>Should I learn vanilla JS or React first? A framework or jQuery?</p>\n</blockquote>\n\n<p>Honestly, it doesn&rsquo;t matter. The most important thing is that you pick something that you find easiest to get started with, the thing that takes you from idea to &ldquo;I built a thing that works&rdquo; fastest.</p>\n\n<p><strong>Inertia is more important than perfect.</strong></p>\n\n<p>You can learn a framework or library more easily if you build a solid foundation of vanilla JS skills. If a library clicks more easily for you, you can back into vanilla JS later (I learned jQuery first, then backed into vanilla JS).</p>\n\n<p>Don&rsquo;t overthink it!</p>",
      "content_text": "Yesterday, I got an email from a newsletter subscriber asking:\n\n\nWhat’s the best way to practice JavaScript?\n\n\nThere’s no one right way to learn JavaScript. But after teaching it for a handful of years now, I have found some trends and common approaches that make things easier for a lot of students.\n\nLet’s dig in!\n\nLean into your learning style\n\nSome folks learn best by reading, others from watching videos, and others from just diving in and trying a bunch of stuff until things click.\n\nI personally find that I learn best from reading a little and trying a little, then reading some more. I know a lot of folks who prefer to watch videos initially, then read later to reinforce what they learned.\n\nWhen you can, try to find resources that fit your learning preferences.\n\nPut what you learn into practice\n\nOne of the biggest challenges I hear from folks who are learning is making that jump from “I learned these methods and techniques” to “I know how to apply these techniques” is really hard.\n\nThe most effective way I’ve found to bridge that gap is by working on real projects.\n\nDon’t try to go too big, too soon with your projects\n\nWhere I see most students get stuck with project work is trying to do projects that are too big, too soon.\n\nDon’t jump right into building a todo app or an ecommerce platform or anything like that. You want to start small. Like, really small. For example…\n\n\nwrite a script that shows a piece of hidden content when a button is clicked. When you click it again, hide the content again.\nOnce you’ve got that figured out, you can modify it to work like an accordion, where opening one piece of content closes all others in a group.\nThen you can add more features and details, like letting users pass in their own options or settings\n\n\nStart really small, and layer in more complexity as you learn.\n\n(I’m actually working on a new product that will provide this kind of thing in a more guided, structured way.)\n\nLearning inertia is more important than picking the right tools\n\nI see a lot of learners get hung up on which tool to choose.\n\n\nShould I learn vanilla JS or React first? A framework or jQuery?\n\n\nHonestly, it doesn’t matter. The most important thing is that you pick something that you find easiest to get started with, the thing that takes you from idea to “I built a thing that works” fastest.\n\nInertia is more important than perfect.\n\nYou can learn a framework or library more easily if you build a solid foundation of vanilla JS skills. If a library clicks more easily for you, you can back into vanilla JS later (I learned jQuery first, then backed into vanilla JS).\n\nDon’t overthink it!",
      "date_published": "2022-01-17T15:30:00.000Z",
      "date_modified": "2022-01-17T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "73a700a4548347bb3de83f7a9bcf765a506a857c8a1a2689e93be6d72d551520.html"
      }
    },
    {
      "id": "https://gomakethings.com/how-i-record-my-vanilla-js-video-courses/",
      "url": "https://gomakethings.com/how-i-record-my-vanilla-js-video-courses/",
      "title": "How I record my vanilla JS video courses",
      "summary": "Yesterday, one of my students asked me how I record my JavaScript video courses and workshop lessons.\nToday, I wanted to share both my technical setup and general approach to making videos. Let’s dig in!\nScreen recording I use Screenflow for screen recording.\nIt’s macOS only. If you’re feeling cheap, you can also just use QuickTime, but I found that makes my fans spin like crazy. Screenflow also has some great editing features, including easy cropping and zooming, noise isolation, and so on.",
      "content_html": "<p>Yesterday, one of my students asked me how I record <a href=\"https://vanillajsguides.com\">my JavaScript video courses</a> and <a href=\"https://vanillajsacademy.com\">workshop lessons</a>.</p>\n\n<p>Today, I wanted to share both my technical setup and general approach to making videos. Let&rsquo;s dig in!</p>\n\n<h2 id=\"screen-recording\">Screen recording</h2>\n\n<p>I use <a href=\"https://www.telestream.net/screenflow/\">Screenflow</a> for screen recording.</p>\n\n<p>It&rsquo;s macOS only. If you&rsquo;re feeling cheap, you can also just use QuickTime, but I found that makes my fans spin like crazy. Screenflow also has some great editing features, including easy cropping and zooming, noise isolation, and so on.</p>\n\n<p>If you&rsquo;re on Windows, you can alternative use <a href=\"https://www.techsmith.com/video-editor.html\">Camtasia</a>, which I haven&rsquo;t used in years but used to when I was on a Windows rig.</p>\n\n<h2 id=\"microphone\">Microphone</h2>\n\n<p>For microphones, I used a <a href=\"https://www.bluemic.com/en-us/products/yeti/\">Blue Yeti</a> for years.</p>\n\n<p>It&rsquo;s the most entry-level of &ldquo;nice microphones,&rdquo; with a price to match. The audio quality on it is actually <em>really</em> good, if you configure it and use it properly.</p>\n\n<p>However, it&rsquo;s what&rsquo;s known as a <em>condenser microphone</em>. It picks up a wide range of tones, but is also very sensitive to low volumes, and thus, picks up a lot of background noise.</p>\n\n<p>Now that everyone is remote, there&rsquo;s a lot more noise in my house, which was making recording very difficult. In a sound-treated space or dedicated studio, the Blue Yeti is amazing. But it&rsquo;s very unforgiving to background noise.</p>\n\n<p>I recently upgraded to the <a href=\"https://www.shure.com/en-US/products/microphones/mv7\">Shure MV7</a>.</p>\n\n<p>It&rsquo;s what&rsquo;s known as a <em>dynamic microphone</em>. You need to put your mouth much closer to microphone to pick up a good audio level, but it isolates almost all noise that&rsquo;s not directly in front of it, which is just what I needed!</p>\n\n<p>Shure makes some other microphones that are technically a bit better, but the MV7 is a USB mic, which lets me plug it directly into my computer. Most of their other mics are XLR microphones, which require a special interface to boost the audio before connecting to your computer.</p>\n\n<p>If you&rsquo;re on a budget, any headset with a built-in microphone is a great place to start. Just beware that the mic on Apple&rsquo;s old-school corded airbuds tend to drag across beards and clothing and pick up noise that way.</p>\n\n<h2 id=\"boom-arm\">Boom Arm</h2>\n\n<p>While upgrading my microphone, I also purchased a <a href=\"https://www.rode.com/accessories/stands/psa1\">RØDE PSA1 boom arm</a>.</p>\n\n<p>This lets me position the mic directly in front of my mouth, without interfering with my keyboard or notes as I record. Some folks recommend optional things like shock arms to absorb desk movement, but I&rsquo;ve found that&rsquo;s totally unnecessary with this mic.</p>\n\n<p>Instead of a boom arm, you can use a desk stand. I did for years. They do sometimes pick up typing noises, so you have to be a bit careful about how hard you hit the desk.</p>\n\n<h2 id=\"positioning-the-mic\">Positioning the Mic</h2>\n\n<p>The microphone has a built-in pop filter to minimize the popping noises that result from saying &ldquo;p words&rdquo; (called <em>plosives</em>).</p>\n\n<p>I found that all of my s words sounded slurred with the new mic. From research, this often happens when a mic is positioned closer to your mouth.</p>\n\n<p>After some trial and error, I found that positioning it below my mouth pointed up made that go away. But it&rsquo;s different for each person. Try positioning the microphone to the side, from the bottom, and from above until you find something that works best for you.</p>\n\n<h2 id=\"text-editor-settings\">Text Editor Settings</h2>\n\n<p>While I normally code in a dark theme, I use a light theme for my recordings, as many folks report that it&rsquo;s easier to see and read in well lit settings.</p>\n\n<p>I boost the size of my text up to 19 pixels to make it easier to read on smaller screens. It&rsquo;s a bit awkwardly large on my end, but much better for the people watching my videos.</p>\n\n<p>I use Monokai Light as my syntax highlighting theme. I&rsquo;ve found that it has good contrast for easier visibility.</p>\n\n<h2 id=\"approach\">Approach</h2>\n\n<p>I prefer talking over code to showing my face. Worrying about whether or not I&rsquo;m making stupid faces makes recording even harder than it already it is.</p>\n\n<p>I used to use a script, and restart my recordings every time I fucked up and said an &ldquo;ooh,&rdquo; &ldquo;um,&rdquo;, or &ldquo;ah.&rdquo;</p>\n\n<p>Then, I did a few live streaming things, and had folks tell me they preferred the more casual tone of those over my well scripted videos. Some research indicates that filler words (the &ldquo;ums&rdquo; and such) often go unnoticed consciously, but trigger brains to pay more attention to what&rsquo;s being said.</p>\n\n<p>Now, I tend to write out a few notes on a piece of paper and &ldquo;just wing it.&rdquo;</p>\n\n<p>I aim for a single take with no edits beyond cropping the frame to HD and adjusting the audio level. If the video is longer than a minute or two, I may copy/paste the text into an email and keep it positioned on my phone in front of me instead.</p>\n\n<p>But I always keep it conversational, and leave in the mess ups and debugging. Students have actively told me they like to see that stuff and how I work through it.</p>\n\n<h2 id=\"creating-the-content\">Creating the Content</h2>\n\n<p>Each video starts with me creating the source code.</p>\n\n<p>Next, I write up how it works. Then, I use that text version to help guide the talking points in the video. Some folks prefer to learn by reading, so I include text options as well.</p>\n\n<h2 id=\"hosting\">Hosting</h2>\n\n<p>I host all of my videos on <a href=\"https://vimeo.com/upgrade\">Vimeo Pro</a>.</p>\n\n<p>They handle compressing the video, and dynamically serve it at different rates based on the user&rsquo;s bandwidth and screen size. They also let me control the UI of the video player, and where it can be embedded. Finally, they have a &ldquo;download video&rdquo; link, which is also useful for my students.</p>\n\n<p>Vimeo Pro is money well spent!</p>\n\n<p><em><strong>Note:</strong> for business videos, you need at least Vimeo Pro. The Vimeo Plus plan does not allow business videos under its TOS.</em></p>\n\n<h2 id=\"captions\">Captions</h2>\n\n<p>I use <a href=\"https://www.rev.com/\">Rev</a> for video captioning.</p>\n\n<p>You can link your Vimeo account directly in Rev using the Vimeo API, and select the videos you want to caption directly from the Rev UI. Captions are uploaded directly to the video without you having to manually upload them.</p>\n\n<p>This saves me a <em>ton</em> of time.</p>\n\n<h2 id=\"anything-i-missed\">Anything I missed?</h2>\n\n<p>Hope that helps! Let me know if there&rsquo;s anything you want me to talk about that I missed.</p>",
      "content_text": "Yesterday, one of my students asked me how I record my JavaScript video courses and workshop lessons.\n\nToday, I wanted to share both my technical setup and general approach to making videos. Let’s dig in!\n\nScreen recording\n\nI use Screenflow for screen recording.\n\nIt’s macOS only. If you’re feeling cheap, you can also just use QuickTime, but I found that makes my fans spin like crazy. Screenflow also has some great editing features, including easy cropping and zooming, noise isolation, and so on.\n\nIf you’re on Windows, you can alternative use Camtasia, which I haven’t used in years but used to when I was on a Windows rig.\n\nMicrophone\n\nFor microphones, I used a Blue Yeti for years.\n\nIt’s the most entry-level of “nice microphones,” with a price to match. The audio quality on it is actually really good, if you configure it and use it properly.\n\nHowever, it’s what’s known as a condenser microphone. It picks up a wide range of tones, but is also very sensitive to low volumes, and thus, picks up a lot of background noise.\n\nNow that everyone is remote, there’s a lot more noise in my house, which was making recording very difficult. In a sound-treated space or dedicated studio, the Blue Yeti is amazing. But it’s very unforgiving to background noise.\n\nI recently upgraded to the Shure MV7.\n\nIt’s what’s known as a dynamic microphone. You need to put your mouth much closer to microphone to pick up a good audio level, but it isolates almost all noise that’s not directly in front of it, which is just what I needed!\n\nShure makes some other microphones that are technically a bit better, but the MV7 is a USB mic, which lets me plug it directly into my computer. Most of their other mics are XLR microphones, which require a special interface to boost the audio before connecting to your computer.\n\nIf you’re on a budget, any headset with a built-in microphone is a great place to start. Just beware that the mic on Apple’s old-school corded airbuds tend to drag across beards and clothing and pick up noise that way.\n\nBoom Arm\n\nWhile upgrading my microphone, I also purchased a RØDE PSA1 boom arm.\n\nThis lets me position the mic directly in front of my mouth, without interfering with my keyboard or notes as I record. Some folks recommend optional things like shock arms to absorb desk movement, but I’ve found that’s totally unnecessary with this mic.\n\nInstead of a boom arm, you can use a desk stand. I did for years. They do sometimes pick up typing noises, so you have to be a bit careful about how hard you hit the desk.\n\nPositioning the Mic\n\nThe microphone has a built-in pop filter to minimize the popping noises that result from saying “p words” (called plosives).\n\nI found that all of my s words sounded slurred with the new mic. From research, this often happens when a mic is positioned closer to your mouth.\n\nAfter some trial and error, I found that positioning it below my mouth pointed up made that go away. But it’s different for each person. Try positioning the microphone to the side, from the bottom, and from above until you find something that works best for you.\n\nText Editor Settings\n\nWhile I normally code in a dark theme, I use a light theme for my recordings, as many folks report that it’s easier to see and read in well lit settings.\n\nI boost the size of my text up to 19 pixels to make it easier to read on smaller screens. It’s a bit awkwardly large on my end, but much better for the people watching my videos.\n\nI use Monokai Light as my syntax highlighting theme. I’ve found that it has good contrast for easier visibility.\n\nApproach\n\nI prefer talking over code to showing my face. Worrying about whether or not I’m making stupid faces makes recording even harder than it already it is.\n\nI used to use a script, and restart my recordings every time I fucked up and said an “ooh,” “um,”, or “ah.”\n\nThen, I did a few live streaming things, and had folks tell me they preferred the more casual tone of those over my well scripted videos. Some research indicates that filler words (the “ums” and such) often go unnoticed consciously, but trigger brains to pay more attention to what’s being said.\n\nNow, I tend to write out a few notes on a piece of paper and “just wing it.”\n\nI aim for a single take with no edits beyond cropping the frame to HD and adjusting the audio level. If the video is longer than a minute or two, I may copy/paste the text into an email and keep it positioned on my phone in front of me instead.\n\nBut I always keep it conversational, and leave in the mess ups and debugging. Students have actively told me they like to see that stuff and how I work through it.\n\nCreating the Content\n\nEach video starts with me creating the source code.\n\nNext, I write up how it works. Then, I use that text version to help guide the talking points in the video. Some folks prefer to learn by reading, so I include text options as well.\n\nHosting\n\nI host all of my videos on Vimeo Pro.\n\nThey handle compressing the video, and dynamically serve it at different rates based on the user’s bandwidth and screen size. They also let me control the UI of the video player, and where it can be embedded. Finally, they have a “download video” link, which is also useful for my students.\n\nVimeo Pro is money well spent!\n\nNote: for business videos, you need at least Vimeo Pro. The Vimeo Plus plan does not allow business videos under its TOS.\n\nCaptions\n\nI use Rev for video captioning.\n\nYou can link your Vimeo account directly in Rev using the Vimeo API, and select the videos you want to caption directly from the Rev UI. Captions are uploaded directly to the video without you having to manually upload them.\n\nThis saves me a ton of time.\n\nAnything I missed?\n\nHope that helps! Let me know if there’s anything you want me to talk about that I missed.",
      "date_published": "2022-01-14T15:30:00.000Z",
      "date_modified": "2022-01-14T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "99aeccbd43b4de6ff522208a8b0431937a6654a76ea0064046b66f7685704064.html"
      }
    },
    {
      "id": "https://gomakethings.com/how-i-structure-my-javascript-projects-in-2022/",
      "url": "https://gomakethings.com/how-i-structure-my-javascript-projects-in-2022/",
      "title": "How I structure my JavaScript projects in 2022",
      "summary": "One of the things I get the most questions about from my students is about what the “best way” to structure code is.\nThe truth is, there is no best way. But I do have a series of conventions and rough guidelines that I follow. Today, I thought I’d share them with you.\nLet’s dig in!\nThe JavaScript patterns I use I have a small handful of JavaScript patterns I use, depending on the needs of the project.",
      "content_html": "<p>One of the things I get the most questions about from my students is about what the &ldquo;best way&rdquo; to structure code is.</p>\n\n<p>The truth is, there is no <em>best way</em>. But I do have a series of conventions and rough guidelines that I follow. Today, I thought I&rsquo;d share them with you.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-javascript-patterns-i-use\">The JavaScript patterns I use</h2>\n\n<p>I have a small handful of JavaScript patterns I use, depending on the needs of the project.</p>\n\n<ul>\n<li>For libraries, I typically use <a href=\"https://gomakethings.com/an-introduction-to-the-javascript-constructor-pattern/\">a Constructor pattern</a>.</li>\n<li>For simple scripts on personal projects, I typically use a small function as a wrapper. I generally want to explicitly invoke it rather than using <a href=\"https://gomakethings.com/the-many-ways-to-write-an-immediately-invoked-function-expression-iife-in-javascript/\">an Immediately Invoked Function Expression (or IIFE)</a>.</li>\n</ul>\n\n<p>I used to use <a href=\"https://vanillajstoolkit.com/boilerplates/revealing-module-pattern/\">revealing module patterns</a> a lot more often, but these days, I tend to <a href=\"https://vanillajsguides.com/es-modules/\">use ES modules</a> instead (more on that in a bit).</p>\n\n<h2 id=\"the-build-tools-i-use\">The build tools I use</h2>\n\n<p>I used to use <a href=\"https://gulpjs.com/\">Gulp.js</a>, and <a href=\"https://codekitapp.com/\">CodeKit</a> before that.</p>\n\n<p>Now, I&rsquo;m a big fan of running NPM scripts directly. It gives me more control than CodeKit, but a much smaller set of dependencies (and less things breaking all the time) than Gulp.</p>\n\n<p><strong>Every single one of my projects now uses my <a href=\"https://github.com/cferdinandi/build-tool-boilerplate\">Build Tool Boilerplate</a>.</strong></p>\n\n<p>It&rsquo;s setup to let me easily drop out the stuff I don&rsquo;t need, and customize the stuff I do through a configurations object. It includes <a href=\"https://www.rollupjs.org/guide/en/\">rollup.js</a> for JavaScript, <a href=\"https://sass-lang.com/\">Sass</a> for CSS, and a handful of SVG and image optimization tools.</p>\n\n<p>I <em>don&rsquo;t</em> use webpack, because it&rsquo;s confusing and complicated. I also don&rsquo;t use TypeScript, because it&rsquo;s an added layer of dependencies, and solves problems I don&rsquo;t personally have.</p>\n\n<h2 id=\"how-i-organize-code-within-a-file\">How I organize code within a file</h2>\n\n<p>I tend to maintain a specific structure to my files&hellip;</p>\n\n<ul>\n<li>Variables at the top of the page</li>\n<li>Functions and methods in the middle</li>\n<li>Initializations and event listeners at the end</li>\n</ul>\n\n<p>This makes it really easy for me to open any particular file and have a rough idea of how it&rsquo;s organized and how to find what I&rsquo;m looking for relatively easily.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// \n</span><span class=\"c1\">// Variables\n</span><span class=\"c1\">// \n</span><span class=\"c1\"></span>\n<span class=\"kd\">let</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">spells</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">teapots</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Dancing teapots&#39;</span><span class=\"p\">,</span> \n\t<span class=\"nx\">fish</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Turn into a fish&#39;</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"c1\">//\n</span><span class=\"c1\">// Methods\n</span><span class=\"c1\">// \n</span><span class=\"c1\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * Cast the spell\n</span><span class=\"cm\"> * @param  {String} spell The spell to cast\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">castSpell</span> <span class=\"p\">(</span><span class=\"nx\">spell</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">spell</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"c1\">// \n</span><span class=\"c1\">// Inits &amp; Event Listeners\n</span><span class=\"c1\">// \n</span><span class=\"c1\"></span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">castSpell</span><span class=\"p\">(</span><span class=\"nx\">spells</span><span class=\"p\">.</span><span class=\"nx\">fish</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>I use <a href=\"https://jsdoc.app/\">JSDoc</a> to document my code. Some text editors will use this to pull out information about functions when used in other places in your code, which is quite nice!</p>\n\n<p>I maintain a similar structure <em>within functions</em> as well.</p>\n\n<h2 id=\"how-i-modularize-and-organize-files\">How I modularize and organize files</h2>\n\n<p>I&rsquo;m <a href=\"https://vanillajsguides.com/es-modules/\">a big fan of ES modules</a>. They help me keep my code more structured and organized.</p>\n\n<p>But I&rsquo;ve also seen people go <em>too</em> modular for my liking, creating deeply nested file trees with each function in its own little file. This creates, in my opinion, a different kind of organizational challenge (that I&rsquo;ve been guilty of myself).</p>\n\n<p>To avoid doing this, I tend to start all of my projects as a single JavaScript file.</p>\n\n<p>At some point, it may start to feel too big. I&rsquo;m doing a lot of scrolling up-and-down, or I open the file a second time in another tab to easily reference different parts of it.</p>\n\n<p>That&rsquo;s usually my sign that it&rsquo;s time to break things up a bit.</p>\n\n<ul>\n<li><strong>For JavaScript libraries,</strong> I organize my functions and files by what they do: <code>event-listeners.js</code>, <code>dom.js</code>, <code>constructor.js</code>, and so on.</li>\n<li><strong>For websites and apps,</strong> I tend to keep each library or discrete piece of functionality in its own file, and <code>import</code> them into files specific to the pages they&rsquo;re needed on: <code>search.js</code>, <code>table-of-contents.js</code>, and so on.</li>\n</ul>\n\n<p>I keep all of my build files in a <code>src</code> directory, and compile them with rollup.js and my <a href=\"https://github.com/cferdinandi/build-tool-boilerplate\">Build Tools Boilerplate</a> into a <code>dist</code> directory.</p>\n\n<h2 id=\"what-did-i-miss\">What did I miss?</h2>\n\n<p>That&rsquo;s a rough overview of how I work, but I&rsquo;m sure I missed some details.</p>\n\n<p>Is there anything you&rsquo;d like me to dig into more about my work setup that I didn&rsquo;t cover in this article? Send me an email and let me know!</p>",
      "content_text": "One of the things I get the most questions about from my students is about what the “best way” to structure code is.\n\nThe truth is, there is no best way. But I do have a series of conventions and rough guidelines that I follow. Today, I thought I’d share them with you.\n\nLet’s dig in!\n\nThe JavaScript patterns I use\n\nI have a small handful of JavaScript patterns I use, depending on the needs of the project.\n\n\nFor libraries, I typically use a Constructor pattern.\nFor simple scripts on personal projects, I typically use a small function as a wrapper. I generally want to explicitly invoke it rather than using an Immediately Invoked Function Expression (or IIFE).\n\n\nI used to use revealing module patterns a lot more often, but these days, I tend to use ES modules instead (more on that in a bit).\n\nThe build tools I use\n\nI used to use Gulp.js, and CodeKit before that.\n\nNow, I’m a big fan of running NPM scripts directly. It gives me more control than CodeKit, but a much smaller set of dependencies (and less things breaking all the time) than Gulp.\n\nEvery single one of my projects now uses my Build Tool Boilerplate.\n\nIt’s setup to let me easily drop out the stuff I don’t need, and customize the stuff I do through a configurations object. It includes rollup.js for JavaScript, Sass for CSS, and a handful of SVG and image optimization tools.\n\nI don’t use webpack, because it’s confusing and complicated. I also don’t use TypeScript, because it’s an added layer of dependencies, and solves problems I don’t personally have.\n\nHow I organize code within a file\n\nI tend to maintain a specific structure to my files…\n\n\nVariables at the top of the page\nFunctions and methods in the middle\nInitializations and event listeners at the end\n\n\nThis makes it really easy for me to open any particular file and have a rough idea of how it’s organized and how to find what I’m looking for relatively easily.\n// \n// Variables\n// \n\nlet name = 'Merlin';\nlet spells = {\n\tteapots: 'Dancing teapots', \n\tfish: 'Turn into a fish'\n};\n\n\n//\n// Methods\n// \n\n/**\n * Cast the spell\n * @param  {String} spell The spell to cast\n */\nfunction castSpell (spell) {\n\talert(spell);\n}\n\n\n// \n// Inits & Event Listeners\n// \n\ndocument.addEventListener('click', function (event) {\n\tcastSpell(spells.fish);\n});\n\nI use JSDoc to document my code. Some text editors will use this to pull out information about functions when used in other places in your code, which is quite nice!\n\nI maintain a similar structure within functions as well.\n\nHow I modularize and organize files\n\nI’m a big fan of ES modules. They help me keep my code more structured and organized.\n\nBut I’ve also seen people go too modular for my liking, creating deeply nested file trees with each function in its own little file. This creates, in my opinion, a different kind of organizational challenge (that I’ve been guilty of myself).\n\nTo avoid doing this, I tend to start all of my projects as a single JavaScript file.\n\nAt some point, it may start to feel too big. I’m doing a lot of scrolling up-and-down, or I open the file a second time in another tab to easily reference different parts of it.\n\nThat’s usually my sign that it’s time to break things up a bit.\n\n\nFor JavaScript libraries, I organize my functions and files by what they do: event-listeners.js, dom.js, constructor.js, and so on.\nFor websites and apps, I tend to keep each library or discrete piece of functionality in its own file, and import them into files specific to the pages they’re needed on: search.js, table-of-contents.js, and so on.\n\n\nI keep all of my build files in a src directory, and compile them with rollup.js and my Build Tools Boilerplate into a dist directory.\n\nWhat did I miss?\n\nThat’s a rough overview of how I work, but I’m sure I missed some details.\n\nIs there anything you’d like me to dig into more about my work setup that I didn’t cover in this article? Send me an email and let me know!",
      "date_published": "2022-01-13T15:30:00.000Z",
      "date_modified": "2022-01-13T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "38fd1a6a2ee93857b49a51cf955250caf1ea23a4c22ea52f8367bfcc187f763f.html"
      }
    },
    {
      "id": "https://gomakethings.com/the-many-ways-to-mutate-arrays-with-javascript/",
      "url": "https://gomakethings.com/the-many-ways-to-mutate-arrays-with-javascript/",
      "title": "The many ways to mutate arrays (with JavaScript)",
      "summary": "This week, we’ve looked at various techniques for looping over arrays and objects.\nIn both articles I noted:\n in a real site or application, you might want to manipulate the data in some way.\n Today, we’re going to look at how to mutate and transform arrays. Let’s dig in!\nAn example array For today’s article, lets use an array of wizards as an example. Each item in the array is an object with the wizard’s name and signature spell.",
      "content_html": "<p>This week, we&rsquo;ve looked at various techniques for <a href=\"https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/\">looping over arrays</a> and <a href=\"https://gomakethings.com/whats-the-best-way-to-loop-over-an-object-with-javascript/\">objects</a>.</p>\n\n<p>In both articles I noted:</p>\n\n<blockquote>\n<p>in a real site or application, you might want to manipulate the data in some way.</p>\n</blockquote>\n\n<p>Today, we&rsquo;re going to look at how to mutate and transform arrays. Let&rsquo;s dig in!</p>\n\n<h2 id=\"an-example-array\">An example array</h2>\n\n<p>For today’s article, lets use an array of <code>wizards</code> as an example. Each item in the array is an object with the wizard&rsquo;s <code>name</code> and signature <code>spell</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">spell</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Dancing teacups&#39;</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Gandalf&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">spell</span><span class=\"o\">:</span> <span class=\"s1\">&#39;You shall not pass!&#39;</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Radagast&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">spell</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Talk to animals&#39;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">];</span>\n</code></pre></div>\n<p>We&rsquo;ll transform it in various ways to create a new array.</p>\n\n<h2 id=\"the-array-map-method\">The <code>Array.map()</code> method</h2>\n\n<p>You can use the <code>Array.map()</code> method to loop through each item in an array, transform it, and return a new array. Pass in a callback function that accepts three arguments: the current item in the loop, its index, and the array itself. All three are optional.</p>\n\n<p>Whatever you <code>return</code> inside the callback function becomes the new value at that index in the new array.</p>\n\n<p>In this example, we&rsquo;re creating a new array that contains just the wizard&rsquo;s names.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// returns [&#34;Merlin&#34;, &#34;Gandalf&#34;, &#34;Radagast&#34;]\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">names</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/pen/?editors=0011\">Here&rsquo;s a demo of the <code>Array.map()</code> method.</a></p>\n\n<h2 id=\"the-array-filter-method\">The <code>Array.filter()</code> method</h2>\n\n<p>You can use the <code>Array.filter()</code> method to create a new array with only elements that pass a test you include as a callback function. The callback accepts three arguments: the current item in the loop&rsquo;s value, its index, and the array itself. All three are optional.</p>\n\n<p>In this example, we&rsquo;re creating a new array that contains only wizards whose spell does not include an exclamation mark (<code>!</code>).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// includes Merlin and Radagast, but not Gandalf\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">quiet</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"o\">!</span><span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">spell</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">&#39;!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/eYGQZZN?editors=0011\">Here&rsquo;s a demo of the <code>Array.filter()</code> method.</a></p>\n\n<h2 id=\"the-array-reduce-method\">The <code>Array.reduce()</code> method</h2>\n\n<p>The <code>Array.reduce()</code> method takes the content of an array and returns a single value. That value can be anything: a string, number, object, or even another array.</p>\n\n<p>The <code>Array.reduce()</code> method accepts two arguments: a callback method to run against each item in the array, and a starting value. Both are required.</p>\n\n<p>The callback also accepts two arguments: the <code>accumulator</code>, which is the current combined value, and the <code>current</code> item in the loop. Whatever you return is used as the accumulator for the next item in the loop. On the very first loop, that starting value is used instead.</p>\n\n<p>In this example, we&rsquo;re going to group our <code>wizards</code> into an object, organized by the number of characters in their <code>spell</code>. We&rsquo;ll pass in an empty object (<code>{}</code>) as the starting value.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// returns {15: [&#34;Merlin&#34;, &#34;Radagast&#34;], 19: [&#34;Gandalf&#34;]}\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">spellLengths</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">wizard</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Get the spell length\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">spell</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n\n\t<span class=\"c1\">// if there&#39;s no property yet, create one\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">length</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">length</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"c1\">// Add the wizard to the object\n</span><span class=\"c1\"></span>\t<span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">length</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n\n<span class=\"p\">},</span> <span class=\"p\">{});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/OJxaNRB?editors=0011\">Here&rsquo;s a demo of the <code>Array.reduce()</code> method.</a></p>\n\n<p><em><strong>A quick note about the <code>Array.reduce()</code> method:</strong> using a more verbose method (or combination of methods) <a href=\"https://gomakethings.com/revisiting-array.reduce/\">typically results in more readable code</a>. I tend to avoid this one now.</em></p>\n\n<h2 id=\"the-array-reverse-method\">The <code>Array.reverse()</code> method</h2>\n\n<p>You can use the <code>Array.reverse()</code> method to reverse the order of items in an array.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// Now Radagast is first and Merlin is last\n</span><span class=\"c1\"></span><span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">reverse</span><span class=\"p\">();</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/xxXQVqq?editors=0011\">Here&rsquo;s a demo of the <code>Array.reverse()</code> method.</a></p>\n\n<h2 id=\"the-array-join-method\">The <code>Array.join()</code> method</h2>\n\n<p>You can use the <code>Array.join()</code> method to combine all items in an array into a string, separated by a delimiter that you can pass in as an argument. By default, it will use a comma (<code>,</code>) as the delimiter if one is not provided.</p>\n\n<p>In this example, we&rsquo;re using the <code>Array.map()</code> method to create an array of wizard names, and then joining them together, separated by a dash (<code>-</code>).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// returns &#34;Merlin - Gandalf - Radagast&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">wizardList</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39; - &#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/ExwOKmN?editors=0011\">Here&rsquo;s a demo of the <code>Array.join()</code> method.</a></p>\n\n<h2 id=\"using-a-loop\">Using a loop</h2>\n\n<p>You can replicate any of the features of the dedicated methods above using <a href=\"https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/\">an array loop</a>.</p>\n\n<p>For example, we can replicate the <code>Array.map()</code> method by first creating an empty array, and then looping through the <code>wizards</code> array and pushing items into the new one.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">names</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">wizard</span> <span class=\"k\">of</span> <span class=\"nx\">wizards</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">names</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/abLQNwJ?editors=0011\">Here&rsquo;s a demo of this technique.</a></p>\n\n<p>A lot of people who are learning JavaScript find this approach easier to read and understand because what you&rsquo;re doing is more explicit. Ultimately, it doesn&rsquo;t matter, so choose whatever approach you personally find most readable.</p>",
      "content_text": "This week, we’ve looked at various techniques for looping over arrays and objects.\n\nIn both articles I noted:\n\n\nin a real site or application, you might want to manipulate the data in some way.\n\n\nToday, we’re going to look at how to mutate and transform arrays. Let’s dig in!\n\nAn example array\n\nFor today’s article, lets use an array of wizards as an example. Each item in the array is an object with the wizard’s name and signature spell.\nlet wizards = [\n\t{\n\t\tname: 'Merlin',\n\t\tspell: 'Dancing teacups'\n\t},\n\t{\n\t\tname: 'Gandalf',\n\t\tspell: 'You shall not pass!'\n\t},\n\t{\n\t\tname: 'Radagast',\n\t\tspell: 'Talk to animals'\n\t}\n];\n\nWe’ll transform it in various ways to create a new array.\n\nThe Array.map() method\n\nYou can use the Array.map() method to loop through each item in an array, transform it, and return a new array. Pass in a callback function that accepts three arguments: the current item in the loop, its index, and the array itself. All three are optional.\n\nWhatever you return inside the callback function becomes the new value at that index in the new array.\n\nIn this example, we’re creating a new array that contains just the wizard’s names.\n// returns [\"Merlin\", \"Gandalf\", \"Radagast\"]\nlet names = wizards.map(function (wizard) {\n\treturn wizard.name;\n});\n\nHere’s a demo of the Array.map() method.\n\nThe Array.filter() method\n\nYou can use the Array.filter() method to create a new array with only elements that pass a test you include as a callback function. The callback accepts three arguments: the current item in the loop’s value, its index, and the array itself. All three are optional.\n\nIn this example, we’re creating a new array that contains only wizards whose spell does not include an exclamation mark (!).\n// includes Merlin and Radagast, but not Gandalf\nlet quiet = wizards.filter(function (wizard) {\n\treturn !wizard.spell.includes('!');\n});\n\nHere’s a demo of the Array.filter() method.\n\nThe Array.reduce() method\n\nThe Array.reduce() method takes the content of an array and returns a single value. That value can be anything: a string, number, object, or even another array.\n\nThe Array.reduce() method accepts two arguments: a callback method to run against each item in the array, and a starting value. Both are required.\n\nThe callback also accepts two arguments: the accumulator, which is the current combined value, and the current item in the loop. Whatever you return is used as the accumulator for the next item in the loop. On the very first loop, that starting value is used instead.\n\nIn this example, we’re going to group our wizards into an object, organized by the number of characters in their spell. We’ll pass in an empty object ({}) as the starting value.\n// returns {15: [\"Merlin\", \"Radagast\"], 19: [\"Gandalf\"]}\nlet spellLengths = wizards.reduce(function (obj, wizard) {\n\n\t// Get the spell length\n\tlet length = wizard.spell.length;\n\n\t// if there's no property yet, create one\n\tif (!obj[length]) {\n\t\tobj[length] = [];\n\t}\n\n\t// Add the wizard to the object\n\tobj[length].push(wizard.name);\n\n}, {});\n\nHere’s a demo of the Array.reduce() method.\n\nA quick note about the Array.reduce() method: using a more verbose method (or combination of methods) typically results in more readable code. I tend to avoid this one now.\n\nThe Array.reverse() method\n\nYou can use the Array.reverse() method to reverse the order of items in an array.\n// Now Radagast is first and Merlin is last\nwizards.reverse();\n\nHere’s a demo of the Array.reverse() method.\n\nThe Array.join() method\n\nYou can use the Array.join() method to combine all items in an array into a string, separated by a delimiter that you can pass in as an argument. By default, it will use a comma (,) as the delimiter if one is not provided.\n\nIn this example, we’re using the Array.map() method to create an array of wizard names, and then joining them together, separated by a dash (-).\n// returns \"Merlin - Gandalf - Radagast\"\nlet wizardList = wizards.map(function (wizard) {\n\treturn wizard.name;\n}).join(' - ');\n\nHere’s a demo of the Array.join() method.\n\nUsing a loop\n\nYou can replicate any of the features of the dedicated methods above using an array loop.\n\nFor example, we can replicate the Array.map() method by first creating an empty array, and then looping through the wizards array and pushing items into the new one.\nlet names = [];\n\nfor (let wizard of wizards) {\n\tnames.push(wizard.name);\n}\n\nHere’s a demo of this technique.\n\nA lot of people who are learning JavaScript find this approach easier to read and understand because what you’re doing is more explicit. Ultimately, it doesn’t matter, so choose whatever approach you personally find most readable.",
      "date_published": "2022-01-12T15:30:00.000Z",
      "date_modified": "2022-01-12T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "2e4dbe161d0bf8a89ce42761292e1d30f95470de83f7ac045aea03c3edc8d717.html"
      }
    },
    {
      "id": "https://gomakethings.com/whats-the-best-way-to-loop-over-an-object-with-javascript/",
      "url": "https://gomakethings.com/whats-the-best-way-to-loop-over-an-object-with-javascript/",
      "title": "What's the best way to loop over an object with JavaScript?",
      "summary": "Yesterday, we looked at different approach to looping over arrays and elements with JavaScript. Today, we’re going to look at a few methods for looping over objects.\nLet’s dig in!\nAn example object For today’s article, let’s use an object with the details of a lunch order as an example.\nlet lunch = { sandwich: 'turkey', chips: 'cape cod', drink: 'soda' };  We’ll loop over it and log each item to the console, but in a real site or application, you might want to manipulate the data in some way.",
      "content_html": "<p>Yesterday, we looked at <a href=\"https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/\">different approach to looping over arrays and elements with JavaScript</a>. Today, we&rsquo;re going to look at a few methods for looping over objects.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"an-example-object\">An example object</h2>\n\n<p>For today’s article, let&rsquo;s use an object with the details of a <code>lunch</code> order as an example.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">lunch</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">sandwich</span><span class=\"o\">:</span> <span class=\"s1\">&#39;turkey&#39;</span><span class=\"p\">,</span>\n\t<span class=\"nx\">chips</span><span class=\"o\">:</span> <span class=\"s1\">&#39;cape cod&#39;</span><span class=\"p\">,</span>\n\t<span class=\"nx\">drink</span><span class=\"o\">:</span> <span class=\"s1\">&#39;soda&#39;</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>We’ll loop over it and log each item to the console, but in a real site or application, you might want to manipulate the data in some way.</p>\n\n<h2 id=\"the-for-in-loop\">The <code>for...in</code> loop</h2>\n\n<p>A <code>for...in</code> loop is similar to <a href=\"https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/#the-for-of-loop\">the <code>for...of</code> loop we looked at yesterday</a>, but used to loop through objects.</p>\n\n<p>In a <code>for...in</code> loop, you define a variable to represent the <code>key</code> of the current item <code>in</code> the object that you’re looping over. Inside the block (the stuff between curly brackets), you can use that variable to reference the current item.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs &#34;sandwich&#34;, &#34;ham&#34;, &#34;snack&#34;, &#34;chips&#34;, &#34;drink&#34;, &#34;soda&#34;, &#34;desert&#34;, &#34;cookie&#34;, &#34;guests&#34;, 3, &#34;alcohol&#34;, false\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">lunch</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">);</span>        <span class=\"c1\">// key\n</span><span class=\"c1\"></span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span> <span class=\"c1\">// value\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/LYzgjNp?editors=0011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"skipping-and-ending-the-loop\">Skipping and ending the loop</h2>\n\n<p>Just like with a <code>for</code> and <code>for...of</code> loop, you can use the <code>continue</code> and <code>break</code> operators in a <code>for...in</code> loop.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">lunch</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">key</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;drink&#39;</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/MWEPvyZ?editors=0011\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"the-object-keys-method\">The <code>Object.keys()</code> method</h2>\n\n<p>The <code>Object.keys()</code> method returns an array of keys from an object. You pass in the object as an argument.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs [&#34;sandwich&#34;, &#34;chips&#34;, &#34;drink&#34;]\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">keys</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">keys</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>You can combine it with a <code>for...of</code> loop (or any of the other array techniques we looked at yesterday) to loop through the object.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">key</span> <span class=\"k\">of</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">);</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/oNGaezx?editors=0011\">Here&rsquo;s a demo of this technique in action.</a></p>\n\n<h2 id=\"the-object-entries-method\">The <code>Object.entries()</code> method</h2>\n\n<p>The <code>Object.entries()</code> method returns an array of key/value pairs from an object, also represented as arrays. Pass in the object as an argument.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs [[&#34;sandwich&#34;, &#34;turkey&#34;], [&#34;chips&#34;, &#34;cape cod&#34;], [&#34;drink&#34;, &#34;soda&#34;]]\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">entries</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">entries</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">entries</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>You can combine this technique with a <code>for...of</code> loop and <a href=\"https://gomakethings.com/destructuring-in-javascript/#destructuring-arrays-with-vanilla-js\">array destructuring</a> to loop through the object.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">item</span><span class=\"p\">]</span> <span class=\"k\">of</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">entries</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">);</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/QWqZMpV?editors=0011\">Here&rsquo;s one last demo for you.</a></p>\n\n<h2 id=\"which-method-should-you-use-and-why\">Which method should you use, and why?</h2>\n\n<p>This one is pretty straightforward for me: <code>Object.entries()</code> with <code>for...of</code>. Having a dedicated variable for the <code>item</code> in the loop is really nice.</p>",
      "content_text": "Yesterday, we looked at different approach to looping over arrays and elements with JavaScript. Today, we’re going to look at a few methods for looping over objects.\n\nLet’s dig in!\n\nAn example object\n\nFor today’s article, let’s use an object with the details of a lunch order as an example.\nlet lunch = {\n\tsandwich: 'turkey',\n\tchips: 'cape cod',\n\tdrink: 'soda'\n};\n\nWe’ll loop over it and log each item to the console, but in a real site or application, you might want to manipulate the data in some way.\n\nThe for...in loop\n\nA for...in loop is similar to the for...of loop we looked at yesterday, but used to loop through objects.\n\nIn a for...in loop, you define a variable to represent the key of the current item in the object that you’re looping over. Inside the block (the stuff between curly brackets), you can use that variable to reference the current item.\n// logs \"sandwich\", \"ham\", \"snack\", \"chips\", \"drink\", \"soda\", \"desert\", \"cookie\", \"guests\", 3, \"alcohol\", false\nfor (let key in lunch) {\n\tconsole.log(key);        // key\n\tconsole.log(lunch[key]); // value\n}\n\nHere’s a demo.\n\nSkipping and ending the loop\n\nJust like with a for and for...of loop, you can use the continue and break operators in a for...in loop.\nfor (let key in lunch) {\n\tif (key === 'drink') break;\n\tconsole.log(lunch[key]);\n}\n\nHere’s another demo.\n\nThe Object.keys() method\n\nThe Object.keys() method returns an array of keys from an object. You pass in the object as an argument.\n// logs [\"sandwich\", \"chips\", \"drink\"]\nlet keys = Object.keys(lunch);\nconsole.log(keys);\n\nYou can combine it with a for...of loop (or any of the other array techniques we looked at yesterday) to loop through the object.\nfor (let key of Object.keys(lunch)) {\n\tconsole.log(key);\n\tconsole.log(lunch[key]);\n}\n\nHere’s a demo of this technique in action.\n\nThe Object.entries() method\n\nThe Object.entries() method returns an array of key/value pairs from an object, also represented as arrays. Pass in the object as an argument.\n// logs [[\"sandwich\", \"turkey\"], [\"chips\", \"cape cod\"], [\"drink\", \"soda\"]]\nlet entries = Object.entries(lunch);\nconsole.log(entries);\n\nYou can combine this technique with a for...of loop and array destructuring to loop through the object.\nfor (let [key, item] of Object.entries(lunch)) {\n\tconsole.log(key);\n\tconsole.log(item);\n}\n\nHere’s one last demo for you.\n\nWhich method should you use, and why?\n\nThis one is pretty straightforward for me: Object.entries() with for...of. Having a dedicated variable for the item in the loop is really nice.",
      "date_published": "2022-01-11T15:30:00.000Z",
      "date_modified": "2022-01-11T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "da00ace68fcddfd09debe881485572283f90012304649a69c529e4e685d24dcb.html"
      }
    },
    {
      "id": "https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/",
      "url": "https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/",
      "title": "What's the best way to loop over arrays and elements in JavaScript?",
      "summary": "JavaScript provides a handful of methods and techniques for looping over arrays and elements and doing things with them. So… which approach should you use, and why?\nToday, we’re going to look at the different ways you can loop over things with vanilla JS, and when and why to choose one over the other.\nLet’s dig in!\nAn example array For today’s article, lets use an array of sandwiches as an example.",
      "content_html": "<p>JavaScript provides a handful of methods and techniques for looping over arrays and elements and doing things with them. So&hellip; which approach should you use, and why?</p>\n\n<p>Today, we&rsquo;re going to look at the different ways you can loop over things with vanilla JS, and when and why to choose one over the other.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"an-example-array\">An example array</h2>\n\n<p>For today&rsquo;s article, lets use an array of <code>sandwiches</code> as an example.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">sandwiches</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;turkey&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tuna&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pb&amp;j&#39;</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>We&rsquo;ll loop over it and log each item to the console, but in a real site or application, you might want to manipulate the data in some way.</p>\n\n<h2 id=\"the-for-loop\">The <code>for</code> loop</h2>\n\n<p>You can use a <code>for</code> loop to iterate over arrays, NodeLists, and other array-like objects. This is the old-school way to loop over things.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs 0, &#34;turkey&#34;, 1, &#34;tuna&#34;, 2, &#34;ham&#34;, 3, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">sandwiches</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">);</span> <span class=\"c1\">// index\n</span><span class=\"c1\"></span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwiches</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]);</span> <span class=\"c1\">// value\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>In the first part of the loop, before the first semicolon, we set a counter variable (typically <code>i</code>, but it can be anything) to <code>0</code>.</li>\n<li>The second part, between the two semicolons, is the test we check against after each iteration of the loop. In this case, we want to make sure the counter value is less than the total number of items in our array. We do this by checking the <code>.length</code> of our array.</li>\n<li>Finally, after the second semicolon, we specify what to run after each loop. In this case, we&rsquo;re adding <code>1</code> to the value of <code>i</code> with <code>i++</code>.</li>\n</ul>\n\n<p>We can then use <code>i</code> to grab the current item in the loop from our array.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/WNZabyL?editors=1011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"the-for-of-loop\">The <code>for...of</code> loop</h2>\n\n<p>A more modern approach, you can use <code>for...of</code> to loop through <em>iterable objects</em>. That includes strings, arrays, and other array-like objects such as NodeLists, HTMLCollections, and HTMLFormControlsCollection, but <em>not</em> plain objects (<code>{}</code>).</p>\n\n<p>In a <code>for...of</code> loop, you define a <em>variable</em> to represent the current item <code>of</code> the iterable that you&rsquo;re looping over. Inside the <em>block</em> (the stuff between curly brackets), you can use that variable to reference the current item.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs &#34;turkey&#34;, &#34;tuna&#34;, &#34;ham&#34;, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"k\">of</span> <span class=\"nx\">sandwiches</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/LYzgEJW?editors=0011\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"skipping-and-ending-loops\">Skipping and ending loops</h2>\n\n<p>You can skip to the next item in a <code>for</code> or <code>for...of</code> loop using <code>continue</code>, or end the loop altogether with <code>break</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs &#34;turkey&#34;, &#34;tuna&#34;, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"k\">of</span> <span class=\"nx\">sandwiches</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Skip to the next item in the loop\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Logs &#34;turkey&#34;, &#34;tuna&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"k\">of</span> <span class=\"nx\">sandwiches</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Skip to the next item in the loop\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/eYGPmQN?editors=0011\">Here&rsquo;s a demo of <code>continue</code> and <code>break</code>.</a></p>\n\n<h2 id=\"the-array-foreach-and-nodelist-foreach-methods\">The <code>Array.forEach()</code> and <code>NodeList.forEach()</code> methods</h2>\n\n<p>The <code>Array.forEach()</code> and <code>NodeList.forEach()</code> methods provide a simpler way to iterate over arrays and NodeLists while still having access to the index.</p>\n\n<p>You pass a callback function into the <code>forEach()</code> method. The callback itself accepts three arguments: the current item in the loop, the index of the current item in the loop, and the array itself. All three are optional, and you can name them anything you want.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs 0, &#34;turkey&#34;, 1, &#34;tuna&#34;, 2, &#34;ham&#34;, 3, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">sandwiches</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">);</span>    <span class=\"c1\">// index\n</span><span class=\"c1\"></span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span> <span class=\"c1\">// value\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/wvrYBOR?editors=0011\">Here&rsquo;s a demo of the <code>Array.forEach()</code> method.</a></p>\n\n<p>Unlike with <code>for</code> and <code>for...of</code> loops, you can&rsquo;t end a <code>forEach()</code> callback function before it&rsquo;s looped through all items. You can <code>return</code> to end the current loop (like you would with <code>continue</code>), but there&rsquo;s no way to <code>break</code> the loop.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Skip &#34;ham&#34;\n</span><span class=\"c1\">// logs &#34;turkey&#34;, &#34;tuna&#34;, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">sandwiches</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/ExwdaJg?editors=0011\">Here&rsquo;s a demo of skipping items in an <code>Array.forEach()</code> loop.</a></p>\n\n<h2 id=\"which-method-should-you-use-and-why\">Which method should you use, and why?</h2>\n\n<p>In most cases, most of the time, I use a <code>for...of</code> loop. It&rsquo;s simple and straightforward, and easy to type.</p>\n\n<p>There are a few situational exceptions to that, however&hellip;</p>\n\n<ol>\n<li>If I need the index of the item, I&rsquo;ll use the <code>Array.forEach()</code> or <code>NodeList.forEach()</code> method.</li>\n<li>If I need the index <em>and</em> want to end the loop early once a condition is met, I&rsquo;ll use a <code>for</code> loop.</li>\n</ol>\n\n<p>I try to avoid <code>for</code> loops unless there&rsquo;s a compelling reason to use them. They&rsquo;re hard to read. They&rsquo;re hard to write. They&rsquo;re just messy.</p>\n\n<p>The humble <code>for...of</code> loop is the real workhorse of my code bases!</p>",
      "content_text": "JavaScript provides a handful of methods and techniques for looping over arrays and elements and doing things with them. So… which approach should you use, and why?\n\nToday, we’re going to look at the different ways you can loop over things with vanilla JS, and when and why to choose one over the other.\n\nLet’s dig in!\n\nAn example array\n\nFor today’s article, lets use an array of sandwiches as an example.\nlet sandwiches = ['turkey', 'tuna', 'ham', 'pb&j'];\n\nWe’ll loop over it and log each item to the console, but in a real site or application, you might want to manipulate the data in some way.\n\nThe for loop\n\nYou can use a for loop to iterate over arrays, NodeLists, and other array-like objects. This is the old-school way to loop over things.\n// logs 0, \"turkey\", 1, \"tuna\", 2, \"ham\", 3, \"pb&j\"\nfor (let i = 0; i < sandwiches.length; i++) {\n\tconsole.log(i); // index\n\tconsole.log(sandwiches[i]); // value\n}\n\n\nIn the first part of the loop, before the first semicolon, we set a counter variable (typically i, but it can be anything) to 0.\nThe second part, between the two semicolons, is the test we check against after each iteration of the loop. In this case, we want to make sure the counter value is less than the total number of items in our array. We do this by checking the .length of our array.\nFinally, after the second semicolon, we specify what to run after each loop. In this case, we’re adding 1 to the value of i with i++.\n\n\nWe can then use i to grab the current item in the loop from our array.\n\nHere’s a demo.\n\nThe for...of loop\n\nA more modern approach, you can use for...of to loop through iterable objects. That includes strings, arrays, and other array-like objects such as NodeLists, HTMLCollections, and HTMLFormControlsCollection, but not plain objects ({}).\n\nIn a for...of loop, you define a variable to represent the current item of the iterable that you’re looping over. Inside the block (the stuff between curly brackets), you can use that variable to reference the current item.\n// logs \"turkey\", \"tuna\", \"ham\", \"pb&j\"\nfor (let sandwich of sandwiches) {\n\tconsole.log(sandwich);\n}\n\nHere’s another demo.\n\nSkipping and ending loops\n\nYou can skip to the next item in a for or for...of loop using continue, or end the loop altogether with break.\n// logs \"turkey\", \"tuna\", \"pb&j\"\nfor (let sandwich of sandwiches) {\n\n\t// Skip to the next item in the loop\n\tif (sandwich === 'ham') continue;\n\n\tconsole.log(sandwich);\n\n}\n\n// Logs \"turkey\", \"tuna\"\nfor (let sandwich of sandwiches) {\n\n\t// Skip to the next item in the loop\n\tif (sandwich === 'ham') break;\n\n\tconsole.log(sandwich);\n\n}\n\nHere’s a demo of continue and break.\n\nThe Array.forEach() and NodeList.forEach() methods\n\nThe Array.forEach() and NodeList.forEach() methods provide a simpler way to iterate over arrays and NodeLists while still having access to the index.\n\nYou pass a callback function into the forEach() method. The callback itself accepts three arguments: the current item in the loop, the index of the current item in the loop, and the array itself. All three are optional, and you can name them anything you want.\n// logs 0, \"turkey\", 1, \"tuna\", 2, \"ham\", 3, \"pb&j\"\nsandwiches.forEach(function (sandwich, index) {\n\tconsole.log(index);    // index\n\tconsole.log(sandwich); // value\n});\n\nHere’s a demo of the Array.forEach() method.\n\nUnlike with for and for...of loops, you can’t end a forEach() callback function before it’s looped through all items. You can return to end the current loop (like you would with continue), but there’s no way to break the loop.\n// Skip \"ham\"\n// logs \"turkey\", \"tuna\", \"pb&j\"\nsandwiches.forEach(function (sandwich, index) {\n\tif (sandwich === 'ham') return;\n\tconsole.log(sandwich);\n});\n\nHere’s a demo of skipping items in an Array.forEach() loop.\n\nWhich method should you use, and why?\n\nIn most cases, most of the time, I use a for...of loop. It’s simple and straightforward, and easy to type.\n\nThere are a few situational exceptions to that, however…\n\n\nIf I need the index of the item, I’ll use the Array.forEach() or NodeList.forEach() method.\nIf I need the index and want to end the loop early once a condition is met, I’ll use a for loop.\n\n\nI try to avoid for loops unless there’s a compelling reason to use them. They’re hard to read. They’re hard to write. They’re just messy.\n\nThe humble for...of loop is the real workhorse of my code bases!",
      "date_published": "2022-01-10T15:30:00.000Z",
      "date_modified": "2022-01-10T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "36ac8b2553095b5b2761b849fdebef7af3e45abc83c8413009090193181ed5f1.html"
      }
    },
    {
      "id": "https://gomakethings.com/two-ways-to-clear-an-array-with-vanilla-javascript/",
      "url": "https://gomakethings.com/two-ways-to-clear-an-array-with-vanilla-javascript/",
      "title": "Two ways to clear an array with vanilla JavaScript",
      "summary": "Today, we’re going to look at two different ways to empty an array with JavaScript. Let’s dig in!\nReassigning the variable Let’s say you have an array of wizards, like this.\nlet wizards = ['Gandalf', 'Radagast', 'Merlin'];  You want to completely wipe it out. The most common way to do this is to reassign the value of the wizards variable to an empty array ([]).\nwizards = [];  Here’s a demo.",
      "content_html": "<p>Today, we&rsquo;re going to look at two different ways to empty an array with JavaScript. Let&rsquo;s dig in!</p>\n\n<h2 id=\"reassigning-the-variable\">Reassigning the variable</h2>\n\n<p>Let&rsquo;s say you have an array of wizards, like this.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Gandalf&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Radagast&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>You want to completely wipe it out. The most common way to do this is to reassign the value of the <code>wizards</code> variable to an empty array (<code>[]</code>).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/NWaBMqE?editors=0011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"setting-the-length-to-0\">Setting the <code>length</code> to <code>0</code></h2>\n\n<p>Another way to clear an array is to set the array&rsquo;s <code>length</code> property to <code>0</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/PoJBeNa?editors=0011\">Here&rsquo;s another demo.</a></p>\n\n<p>(<em><a href=\"https://twitter.com/KittyGiraudel/status/1479393765844520960?s=20\">Thanks to Kitty Giraudel for this tip.</a></em>)</p>\n\n<h2 id=\"why-would-you-set-the-length-instead-of-reassigning-the-variable\">Why would you set the <code>length</code> instead of reassigning the variable?</h2>\n\n<p>In most situations, reassigning the variable to an empty array is the better choice. It&rsquo;s shorter and more explicit than adjusting the <code>length</code> property.</p>\n\n<p>But sometimes, you have an array that&rsquo;s <em>assigned by reference</em>, and you want to keep them linked.</p>\n\n<p>Here, I have my array of <code>wizards</code>. I also have an <code>alsoWizards</code> variable, and I set its value to the <code>wizards</code> array. The <code>alsoWizards</code> array is <em>not</em> a copy of <code>wizards</code>. It references the original array.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Gandalf&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Radagast&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">];</span>\n<span class=\"kd\">let</span> <span class=\"nx\">alsoWizards</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>If I reassign the value of <code>wizards</code>, the <code>alsoWizards</code> variable still points to the original array that was assigned to it.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Clear the array\n</span><span class=\"c1\"></span><span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\n<span class=\"c1\">// logs []\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wizards</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// logs [&#34;Gandalf&#34;, &#34;Radagast&#34;, &#34;Merlin&#34;]\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">alsoWizards</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/QWqBryY?editors=0011\">You can see it in action here.</a></p>\n\n<p>If I instead set the <code>length</code> of <code>wizards</code> to <code>0</code>, the <code>alsoWizards</code> variable is also an empty array, because the array that <code>wizards</code> points to has not changed.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Clear the array\n</span><span class=\"c1\"></span><span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// logs []\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wizards</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// logs []\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">alsoWizards</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/RwLBypQ?editors=0011\">Here&rsquo;s one last demo.</a></p>",
      "content_text": "Today, we’re going to look at two different ways to empty an array with JavaScript. Let’s dig in!\n\nReassigning the variable\n\nLet’s say you have an array of wizards, like this.\nlet wizards = ['Gandalf', 'Radagast', 'Merlin'];\n\nYou want to completely wipe it out. The most common way to do this is to reassign the value of the wizards variable to an empty array ([]).\nwizards = [];\n\nHere’s a demo.\n\nSetting the length to 0\n\nAnother way to clear an array is to set the array’s length property to 0.\nwizards.length = 0;\n\nHere’s another demo.\n\n(Thanks to Kitty Giraudel for this tip.)\n\nWhy would you set the length instead of reassigning the variable?\n\nIn most situations, reassigning the variable to an empty array is the better choice. It’s shorter and more explicit than adjusting the length property.\n\nBut sometimes, you have an array that’s assigned by reference, and you want to keep them linked.\n\nHere, I have my array of wizards. I also have an alsoWizards variable, and I set its value to the wizards array. The alsoWizards array is not a copy of wizards. It references the original array.\nlet wizards = ['Gandalf', 'Radagast', 'Merlin'];\nlet alsoWizards = wizards;\n\nIf I reassign the value of wizards, the alsoWizards variable still points to the original array that was assigned to it.\n// Clear the array\nwizards = [];\n\n// logs []\nconsole.log(wizards);\n\n// logs [\"Gandalf\", \"Radagast\", \"Merlin\"]\nconsole.log(alsoWizards);\n\nYou can see it in action here.\n\nIf I instead set the length of wizards to 0, the alsoWizards variable is also an empty array, because the array that wizards points to has not changed.\n// Clear the array\nwizards.length = 0;\n\n// logs []\nconsole.log(wizards);\n\n// logs []\nconsole.log(alsoWizards);\n\nHere’s one last demo.",
      "date_published": "2022-01-07T15:30:00.000Z",
      "date_modified": "2022-01-07T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "029707516301d8cf38ff3817e866bf3113d61ce236febfa32b4a7a9ab59fb222.html"
      }
    },
    {
      "id": "https://gomakethings.com/30-day-beginner-html-and-css-with-bree-hall/",
      "url": "https://gomakethings.com/30-day-beginner-html-and-css-with-bree-hall/",
      "title": "30 day beginner HTML and CSS with Bree Hall",
      "summary": "I focus a lot on JavaScript here, and I often get asked if I have any recommendations on where to learn HTML and CSS basics.\nToday, I wanted to share a cool new project from Bree Hall: 30 Day Beginner HTML & CSS Coding Calendar. Bree explains how it works in this video.\n  This 30 day calendar will take you on a journey of learning, understanding, and practicing the fundamentals of HTML and CSS through free videos, practice exercises, and games that can be found online.",
      "content_html": "<p>I focus a lot on JavaScript here, and I often get asked if I have any recommendations on where to learn HTML and CSS basics.</p>\n\n<p>Today, I wanted to share a cool new project from Bree Hall: <a href=\"https://github.com/breehall/30-Day-HTML-CSS-Coding-Calendar\">30 Day Beginner HTML &amp; CSS Coding Calendar</a>. Bree explains <a href=\"https://www.youtube.com/watch?v=HDssvUHgpYk\">how it works in this video</a>.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/HDssvUHgpYk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<blockquote>\n<p>This 30 day calendar will take you on a journey of learning, understanding, and practicing the fundamentals of HTML and CSS through free videos, practice exercises, and games that can be found online.</p>\n\n<p>I recommend this coding calendar to anyone who is interested in pursuing a career in development, and anyone who is on the fence and just wants to test the waters. The technical and coding resources on this calendar have been created by talented minds and are absolutely free to use! I do not own them, but they’re always my go to resources for new developers. Links to all resources can be found below.</p>\n</blockquote>\n\n<p>Bree is an amazing, supportive teacher. You can <a href=\"https://www.youtube.com/c/breehall\">subscribe to her YouTube channel</a> or <a href=\"https://twitter.com/bytesofbree\">follow her on Twitter</a> for lots of frontend goodness.</p>",
      "content_text": "I focus a lot on JavaScript here, and I often get asked if I have any recommendations on where to learn HTML and CSS basics.\n\nToday, I wanted to share a cool new project from Bree Hall: 30 Day Beginner HTML & CSS Coding Calendar. Bree explains how it works in this video.\n\n\n\n\nThis 30 day calendar will take you on a journey of learning, understanding, and practicing the fundamentals of HTML and CSS through free videos, practice exercises, and games that can be found online.\n\nI recommend this coding calendar to anyone who is interested in pursuing a career in development, and anyone who is on the fence and just wants to test the waters. The technical and coding resources on this calendar have been created by talented minds and are absolutely free to use! I do not own them, but they’re always my go to resources for new developers. Links to all resources can be found below.\n\n\nBree is an amazing, supportive teacher. You can subscribe to her YouTube channel or follow her on Twitter for lots of frontend goodness.",
      "date_published": "2022-01-06T15:30:00.000Z",
      "date_modified": "2022-01-06T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "55000cdd9eb348d122689b4323afe6a3c67bf65cb567e52086122a58547ceee2.html"
      }
    },
    {
      "id": "https://gomakethings.com/changing-the-default-text-editor-on-macos/",
      "url": "https://gomakethings.com/changing-the-default-text-editor-on-macos/",
      "title": "Changing the default text editor on macOS",
      "summary": "I’ve been using the same computer for almost a decade, but recently upgraded my computer.\nBy default, macOS uses Apple’s TextEdit app for any text file, and it’s pretty bad. Years ago, on my old machine, I setup Sublime to be my default editor for everything, but couldn’t remember how I did.\nI eventually stumbled onto a thread on StackExchange with a working solution. I wanted to document it here so I wouldn’t forget again next time.",
      "content_html": "<p>I&rsquo;ve been using the same computer for almost a decade, but recently upgraded my computer.</p>\n\n<p>By default, macOS uses Apple&rsquo;s TextEdit app for any text file, and it&rsquo;s pretty bad. Years ago, on my old machine, I setup Sublime to be my default editor for everything, but couldn&rsquo;t remember how I did.</p>\n\n<p>I eventually stumbled onto <a href=\"https://apple.stackexchange.com/questions/123833/replace-text-edit-as-the-default-text-editor/123834#123834\">a thread on StackExchange with a working solution</a>. I wanted to document it here so I wouldn&rsquo;t forget again next time.</p>\n\n<p><em><strong>Just a heads up:</strong> this requires using the command line.</em></p>\n\n<p>In terminal, copy-and-paste the command from below that matches the text editor you want to use as your default. Then, press <code>return</code> to run it, and restart your machine.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"c1\"># Sublime Text 3</span>\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add <span class=\"s1\">&#39;{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.3;}&#39;</span>\n\n<span class=\"c1\"># Sublime Text 4</span>\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add <span class=\"s1\">&#39;{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.4;}&#39;</span>\n\n<span class=\"c1\"># VS Code</span>\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add <span class=\"s1\">&#39;{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.microsoft.VSCode;}&#39;</span></code></pre></div>\n<p>A lot of places suggested right clicking the file, selecting &ldquo;Get Info,&rdquo; and changing the &ldquo;Open With&rdquo; setting for all files of that type.</p>\n\n<p>I tried that at first, but its time consuming when you work with lots of different file types. And it doesn&rsquo;t work at all for hidden files like <code>.htaccess</code> and <code>.gitignore</code>.</p>\n\n<p>The command line trick works for all text files across the whole system, including hidden files, and I never have to think about it again.</p>",
      "content_text": "I’ve been using the same computer for almost a decade, but recently upgraded my computer.\n\nBy default, macOS uses Apple’s TextEdit app for any text file, and it’s pretty bad. Years ago, on my old machine, I setup Sublime to be my default editor for everything, but couldn’t remember how I did.\n\nI eventually stumbled onto a thread on StackExchange with a working solution. I wanted to document it here so I wouldn’t forget again next time.\n\nJust a heads up: this requires using the command line.\n\nIn terminal, copy-and-paste the command from below that matches the text editor you want to use as your default. Then, press return to run it, and restart your machine.\n# Sublime Text 3\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add '{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.3;}'\n\n# Sublime Text 4\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add '{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.4;}'\n\n# VS Code\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add '{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.microsoft.VSCode;}'\nA lot of places suggested right clicking the file, selecting “Get Info,” and changing the “Open With” setting for all files of that type.\n\nI tried that at first, but its time consuming when you work with lots of different file types. And it doesn’t work at all for hidden files like .htaccess and .gitignore.\n\nThe command line trick works for all text files across the whole system, including hidden files, and I never have to think about it again.",
      "date_published": "2022-01-05T15:30:00.000Z",
      "date_modified": "2022-01-05T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "4d2c7d0cf04a432d8e239d06d788826628248fb942cc9bfe3559404f919c7edc.html"
      }
    },
    {
      "id": "https://gomakethings.com/add-a-service-worker-to-your-site-this-year/",
      "url": "https://gomakethings.com/add-a-service-worker-to-your-site-this-year/",
      "title": "Add a service worker to your site this year",
      "summary": "Last week, I wrote an article for CSS Tricks on the one thing I wish everyone would do to make the web better in 2022.\n One of the best things you can do for your website in 2022 is add a service worker, if you don’t have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.",
      "content_html": "<p>Last week, I wrote <a href=\"https://css-tricks.com/add-a-service-worker-to-your-site/\">an article for CSS Tricks on the one thing I wish everyone would do to make the web better in 2022</a>.</p>\n\n<blockquote>\n<p>One of the best things you can do for your website in 2022 is add a service worker, if you don’t have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.</p>\n</blockquote>\n\n<p>The article includes step-by-step instructions for getting a basic service worker setup, and links to additional resources if you want to dig deeper.</p>\n\n<p><a href=\"https://css-tricks.com/add-a-service-worker-to-your-site/\">Read the whole thing on CSS Tricks.</a></p>",
      "content_text": "Last week, I wrote an article for CSS Tricks on the one thing I wish everyone would do to make the web better in 2022.\n\n\nOne of the best things you can do for your website in 2022 is add a service worker, if you don’t have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.\n\n\nThe article includes step-by-step instructions for getting a basic service worker setup, and links to additional resources if you want to dig deeper.\n\nRead the whole thing on CSS Tricks.",
      "date_published": "2022-01-04T15:30:00.000Z",
      "date_modified": "2022-01-04T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "a040eff02fe94747d36f083f3284e4d220d4248158947c091a671385d217b613.html"
      }
    },
    {
      "id": "https://gomakethings.com/can-you-do-me-a-favor/",
      "url": "https://gomakethings.com/can-you-do-me-a-favor/",
      "title": "Can you do me a favor?",
      "summary": "A lot of folks don’t know this, but I have a day job.\nMy JavaScript education business is actually a side-hustle. It’s a pretty successful one, but not enough to be my full-time thing… yet.\nI’d like to make 2022 the year that changes, but I need your help.\nTo make my JS education work fully self-sustaining, I need to reach more people. If you’ve enjoyed learning from me, here are some specific ways you can help…",
      "content_html": "<p>A lot of folks don&rsquo;t know this, but I have a day job.</p>\n\n<p><a href=\"https://gomakethings.com/resources\">My JavaScript education business</a> is actually a side-hustle. It&rsquo;s a pretty successful one, but not enough to be my full-time thing&hellip; yet.</p>\n\n<p><strong>I&rsquo;d like to make 2022 the year that changes, but I need your help.</strong></p>\n\n<p>To make my JS education work fully self-sustaining, I need to reach more people. If you&rsquo;ve enjoyed learning from me, here are some specific ways you can help&hellip;</p>\n\n<ul>\n<li>Recommend <a href=\"https://gomakethings.com\">my newsletter</a> to anyone who you think might enjoy it.</li>\n<li>Ask your company to <a href=\"https://vanillajsacademy.com/teams/\">hire me to run a private workshop</a> or <a href=\"https://vanillajsguides.com/teams/\">purchase my courses for your team</a>.</li>\n<li>Suggest podcasts or live stream shows I should go on to reach new people.</li>\n</ul>\n\n<p>Thanks in advance, and Happy New Year!</p>",
      "content_text": "A lot of folks don’t know this, but I have a day job.\n\nMy JavaScript education business is actually a side-hustle. It’s a pretty successful one, but not enough to be my full-time thing… yet.\n\nI’d like to make 2022 the year that changes, but I need your help.\n\nTo make my JS education work fully self-sustaining, I need to reach more people. If you’ve enjoyed learning from me, here are some specific ways you can help…\n\n\nRecommend my newsletter to anyone who you think might enjoy it.\nAsk your company to hire me to run a private workshop or purchase my courses for your team.\nSuggest podcasts or live stream shows I should go on to reach new people.\n\n\nThanks in advance, and Happy New Year!",
      "date_published": "2022-01-03T15:30:00.000Z",
      "date_modified": "2022-01-03T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "aa3d8949fe703c1fbd011e659d67a9fd16d980487e804ee588e4fca828c7a611.html"
      }
    },
    {
      "id": "https://gomakethings.com/master-javascript-in-2022-and-save-a-bunch-of-money/",
      "url": "https://gomakethings.com/master-javascript-in-2022-and-save-a-bunch-of-money/",
      "title": "Master JavaScript in 2022 (and save a bunch of money)",
      "summary": "If you want to learn JavaScript in 2022 (or take your skills to the next level), all of my JavaScript learning resources are 40-percent off from now through New Year’s Day.\n If you prefer self-paced learning, my video courses and ebooks are a great choice. You’ll learn the ins-and-outs of a topic in about an hour. For a more deep and immersive experience, a new session of my workshop series starts in January.",
      "content_html": "<p>If you want to learn JavaScript in 2022 (or take your skills to the next level), <strong><a href=\"https://gomakethings.com/resources\">all of my JavaScript learning resources</a> are 40-percent off from now through New Year&rsquo;s Day.</strong></p>\n\n<ul>\n<li>If you prefer self-paced learning, my <strong><a href=\"https://vanillajsguides.com\">video courses and ebooks</a></strong> are a great choice. You&rsquo;ll learn the ins-and-outs of a topic in about an hour.</li>\n<li>For a more deep and immersive experience, <strong><a href=\"https://vanillajsacademy.com\">a new session of my workshop series</a></strong> starts in January. You&rsquo;ll work on a series of projects that build on each other, connect with other learners, and get to interact with me directly on Slack and during video office hours.</li>\n</ul>\n\n<p><strong>You’ll also get $436 in free bonuses if you register for Academy or purchase one of the pocket guide bundles (in ebook format, video series, or both).</strong></p>\n\n<ul>\n<li>Watch me live-code vanilla JS projects with the Vanilla JS Live-Code Series. Follow along, try it yourself first, or dig into the completed source code for over a dozen projects. <em>Valued at $239.</em></li>\n<li>Get hands-on learning with real projects with the Project Bundle. You get starter templates, helpful tips and resources, and step-by-step tutorials. <em>Valued at $119.</em></li>\n<li>Learn how to build insanely fast WordPress sites Wicked Fast Websites. You’ll learn how to measure performance, reduce page weight, and make simple server optimizations. <em>Valued at $39.</em></li>\n<li>Learn how to write resumes that get seen by an actual human, navigate the interview process, and more with my Web Developer Career Guide. <em>Valued at $39.</em></li>\n</ul>\n\n<p>Let&rsquo;s make 2022 the year you take your JS skills to the next level!</p>",
      "content_text": "If you want to learn JavaScript in 2022 (or take your skills to the next level), all of my JavaScript learning resources are 40-percent off from now through New Year’s Day.\n\n\nIf you prefer self-paced learning, my video courses and ebooks are a great choice. You’ll learn the ins-and-outs of a topic in about an hour.\nFor a more deep and immersive experience, a new session of my workshop series starts in January. You’ll work on a series of projects that build on each other, connect with other learners, and get to interact with me directly on Slack and during video office hours.\n\n\nYou’ll also get $436 in free bonuses if you register for Academy or purchase one of the pocket guide bundles (in ebook format, video series, or both).\n\n\nWatch me live-code vanilla JS projects with the Vanilla JS Live-Code Series. Follow along, try it yourself first, or dig into the completed source code for over a dozen projects. Valued at $239.\nGet hands-on learning with real projects with the Project Bundle. You get starter templates, helpful tips and resources, and step-by-step tutorials. Valued at $119.\nLearn how to build insanely fast WordPress sites Wicked Fast Websites. You’ll learn how to measure performance, reduce page weight, and make simple server optimizations. Valued at $39.\nLearn how to write resumes that get seen by an actual human, navigate the interview process, and more with my Web Developer Career Guide. Valued at $39.\n\n\nLet’s make 2022 the year you take your JS skills to the next level!",
      "date_published": "2021-12-28T14:30:00.000Z",
      "date_modified": "2021-12-28T14:30:00.000Z",
      "_plugin": {
        "pageFilename": "11b9474968b42ea2e3035ae8c763ff46cf640fd962dcd46ab194dd3a793e068f.html"
      }
    },
    {
      "id": "https://gomakethings.com/the-stack-overflow-podcast/",
      "url": "https://gomakethings.com/the-stack-overflow-podcast/",
      "title": "The Stack Overflow podcast",
      "summary": "The other day, I had the pleasure of chatting with the Stack Overflow team about the challenges of learning how to code, and why focusing on the fundamentals is often (but not always) a good place to start.\nWe talked about the difficulty with knowing where to start, “the experts dilemma,” and more!\nYou can listen to our conversation here.",
      "content_html": "<p>The other day, I had the pleasure of <a href=\"https://stackoverflow.blog/2021/12/21/podcast-402-teaching-developers-about-the-most-lightweight-web-framework-around-vanillajs/?utm_source=twitter&amp;utm_medium=social&amp;utm_campaign=so-podcast&amp;utm_content=pod402\">chatting with the Stack Overflow team</a> about the challenges of learning how to code, and why focusing on the fundamentals is often (but not always) a good place to start.</p>\n\n<p>We talked about the difficulty with knowing where to start, &ldquo;the experts dilemma,&rdquo; and more!</p>\n\n<p><a href=\"https://stackoverflow.blog/2021/12/21/podcast-402-teaching-developers-about-the-most-lightweight-web-framework-around-vanillajs/?utm_source=twitter&amp;utm_medium=social&amp;utm_campaign=so-podcast&amp;utm_content=pod402\">You can listen to our conversation here.</a></p>",
      "content_text": "The other day, I had the pleasure of chatting with the Stack Overflow team about the challenges of learning how to code, and why focusing on the fundamentals is often (but not always) a good place to start.\n\nWe talked about the difficulty with knowing where to start, “the experts dilemma,” and more!\n\nYou can listen to our conversation here.",
      "date_published": "2021-12-22T15:30:00.000Z",
      "date_modified": "2021-12-22T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "f206b3d34853a9f9bdc7ebf282d6eb3e11da5354a8e7b767764563c71cd079ac.html"
      }
    }
  ],
  "_plugin": {
    "rawFeed": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\"\n\txmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n\txmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n\txmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n\txmlns:atom=\"http://www.w3.org/2005/Atom\"\n\txmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n\txmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\"\n>\n\t<channel>\n\t\t<title>Go Make Things</title>\n\t\t<atom:link href=\"https://gomakethings.com/feed/\" rel=\"self\" type=\"application/rss+xml\" />\n\t\t<link>https://gomakethings.com</link>\n\t\t<description>A simpler, more resilient way to make things for the web.</description>\n\t\t<lastBuildDate>Sun, 14 Jan 2018 21:38:44 -0500</lastBuildDate>\n\t\t<language>en-us</language>\n\t\t<sy:updatePeriod>hourly</sy:updatePeriod>\n\t\t<sy:updateFrequency>1</sy:updateFrequency>\n\t\t<generator>Hugo -- gohugo.io</generator>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>Listening for events on multiple elements using JavaScript event delegation</title>\n\t\t\t\t<link>https://gomakethings.com/listening-for-events-on-multiple-elements-using-javascript-event-delegation/</link>\n\t\t\t\t<pubDate>Thu, 20 Jan 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/listening-for-events-on-multiple-elements-using-javascript-event-delegation/</guid>\n\t\t\t\t<description><![CDATA[ In JavaScript, event listeners have to be attached to individual elements. You can&rsquo;t attach them to an array or node list of matching elements like you might in jQuery.\nToday, we&rsquo;re going to look at a technique that you can use listen for the same even on multiple elements without having to attach to each element individually: event delegation.\nLet&rsquo;s dig in!\nThe EventTarget.addEventListener() method As a quick primer, you can use the EventTarget.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ \n\n<p>In JavaScript, event listeners have to be attached to individual elements. You can&rsquo;t attach them to an array or node list of matching elements like you might in jQuery.</p>\n\n<p>Today, we&rsquo;re going to look at a technique that you can use listen for the same even on multiple elements <em>without</em> having to attach to each element individually: event delegation.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-eventtarget-addeventlistener-method\">The <code>EventTarget.addEventListener()</code> method</h2>\n\n<p>As a quick primer, you can use the <code>EventTarget.addEventListener()</code> method to listen for events on an element. <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">You can find a full list of available events on the Mozilla Developer Network.</a></p>\n\n<p>Attached the <code>EventTarget.addEventListener()</code> method to the element you want to listen for events on. It accepts two arguments: the event to listen for, and a callback function to run when the event happens.</p>\n\n<p>You can pass the <code>event</code> into the callback function as an argument. The <code>event.target</code> property is the element that triggered the event. The <code>event</code> object has other properties as well, many of them specific to the type of event that occurred.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#click-me&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span> <span class=\"c1\">// The event details\n</span><span class=\"c1\"></span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">);</span> <span class=\"c1\">// The clicked element\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/KKXjPdN?editors=0011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"listening-for-the-same-event-on-multiple-elements\">Listening for the same event on multiple elements</h2>\n\n<p>One trick to listen a specific event on bunch of elements at once is to attach your listener to a parent element that your elements are contained within, such as the <code>window</code> or <code>document</code>.</p>\n\n<p>Events that happens on elements inside that parent element <em>bubble up</em>.</p>\n\n<p>The <code>event.target</code> property is the element that triggered the event. We can use that property to check if the element that triggered the event has a matching selector.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// Listen for clicks on the entire window\n</span><span class=\"c1\"></span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// If the clicked element has the `.click-me` class, it&#39;s a match!\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">matches</span><span class=\"p\">(</span><span class=\"s1\">&#39;.click-me&#39;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\t\t<span class=\"c1\">// Do something...\n</span><span class=\"c1\"></span>\t<span class=\"p\">}</span>\n\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/poWXzNP?editors=1011\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"why-wouldn-t-you-just-loop-through-each-element-and-attach-an-event-listener\">Why wouldn&rsquo;t you just loop through each element and attach an event listener?</h2>\n\n<p>You <em>can</em> attach event listeners to individual elements by looping over each one, like this.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * This works, but it&#39;s bad for performance\n</span><span class=\"cm\"> * DON&#39;T DO IT!\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">let</span> <span class=\"nx\">btns</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">&#39;.click-me&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"k\">of</span> <span class=\"nx\">btns</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span> <span class=\"c1\">// The event details\n</span><span class=\"c1\"></span>\t\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">);</span> <span class=\"c1\">// The clicked element\n</span><span class=\"c1\"></span>\t<span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But if you have a lot of elements, it can actually be worse for performance than event delegation.</p>\n\n<p>Every event listener you create uses memory in the browser. It’s “cheaper” for the browser to track one event and fire it on every click that it is to manage multiple events.</p>\n\n<p>If you’re only listening for events on a single element, feel free to attach directly to that element. But if you’re listening for events on multiple elements, I’d recommend using event delegation.</p>\n\n<h2 id=\"capturing-events-that-don-t-bubble\">Capturing events that don&rsquo;t bubble</h2>\n\n<p>Certain events, like <code>focus</code>, don&rsquo;t bubble. In order to use event delegation with events that don&rsquo;t bubble, you can set an optional third argument on the <code>EventTarget.addEventListener()</code> method, called <code>useCapture</code>, to <code>true</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// Listen for all focus events in the document\n</span><span class=\"c1\"></span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;focus&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"c1\">// Run functions whenever an element in the document comes into focus\n</span><span class=\"c1\"></span><span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>You can determine if <code>useCapture</code> should be set to <code>true</code> or <code>false</code> by looking at the event details page on the Mozilla Developer Network (<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event\">like this one for the <code>focus</code> event</a>).</p>\n\n<p>If <em>Bubbles</em> in the chart at the top of the page is &ldquo;No,&rdquo; you need to set <code>useCapture</code> to <code>true</code> to use event delegation.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/ExwBYZR?editors=1011\">Here&rsquo;s one last demo.</a></p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>How to get, set, and remove attributes and properties with vanilla JavaScript</title>\n\t\t\t\t<link>https://gomakethings.com/how-to-get-set-and-remove-attributes-and-properties-with-vanilla-javascript/</link>\n\t\t\t\t<pubDate>Wed, 19 Jan 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/how-to-get-set-and-remove-attributes-and-properties-with-vanilla-javascript/</guid>\n\t\t\t\t<description><![CDATA[ Today, we&rsquo;re going to look at how to get, set, and remove attributes and properties with vanilla JS. We&rsquo;ll also learn the difference between attributes and properties, and some &ldquo;gotchas&rdquo; when working with them.\nLet&rsquo;s dig in!\nThe Element.*Attribute() methods You can use the Element.getAttribute(), Element.setAttribute(), Element.removeAttribute(), and Element.hasAttribute() methods to get, set, remove, and check for the existence of attributes (including data attributes) on an element, respectively.\nIf an attribute does not exist on an element, the Element.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ \n\n<p>Today, we&rsquo;re going to look at how to get, set, and remove attributes and properties with vanilla JS. We&rsquo;ll also learn the difference between attributes and properties, and some &ldquo;gotchas&rdquo; when working with them.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-element-attribute-methods\">The <code>Element.*Attribute()</code> methods</h2>\n\n<p>You can use the <code>Element.getAttribute()</code>, <code>Element.setAttribute()</code>, <code>Element.removeAttribute()</code>, and <code>Element.hasAttribute()</code> methods to get, set, remove, and check for the existence of attributes (including data attributes) on an element, respectively.</p>\n\n<p>If an attribute does not exist on an element, the <code>Element.getAttribute()</code> method returns <code>null</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">elem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#lunch&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Get the value of the [data-sandwich] attribute\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"o\">=</span> <span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;data-sandwich&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Set a value for the [data-sandwich] attribute\n</span><span class=\"c1\"></span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;data-sandwich&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;turkey&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Remove the [data-chips] attribute\n</span><span class=\"c1\"></span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">removeAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;data-chips&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Check if an element has the `[data-drink]` attribute\n</span><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">hasAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;data-drink&#39;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Add a drink!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/VwMOjGz?editors=1111\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"element-properties\">Element properties</h2>\n\n<p>HTML elements have dozens of properties that you can access directly.</p>\n\n<p>Some of them are <em>read only</em>, meaning you can get their value but not set it. Others can be used to both read and set values. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element\">You can find a full list on the Mozilla Developer Network.</a></p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">elem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#main&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Get the ID of the element\n</span><span class=\"c1\">// returns &#34;main&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Set the ID of the element\n</span><span class=\"c1\"></span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;secondary&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Get the parentNode of the element\n</span><span class=\"c1\">// This property is read-only\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">parent</span> <span class=\"o\">=</span> <span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">parentNode</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/ExwzydK?editors=1111\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"what-s-the-difference-between-attributes-and-properties\">What&rsquo;s the difference between attributes and properties?</h2>\n\n<p>In JavaScript, an element has attributes and properties. The terms are often used interchangeably, but they&rsquo;re actually two separate things.</p>\n\n<p>An <em>attribute</em> is the <em>initial state</em> when rendered in the DOM. A <em>property</em> is the <em>current state</em>.</p>\n\n<p>In most cases, attributes and properties are kept in-sync automatically. For example, when you use <code>Element.setAttribute()</code> to update an ID attribute, the <code>id</code> property is updated as well.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Hello<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Update the ID\n</span><span class=\"c1\"></span><span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;first-paragraph&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// These both return &#34;first-paragraph&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">id1</span> <span class=\"o\">=</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span> <span class=\"nx\">id2</span> <span class=\"o\">=</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>However, user-changeable form properties&mdash;noteably, <code>value</code>, <code>checked</code>, and <code>selected</code>&mdash;are <em>not</em> automatically synced.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">&#34;greeting&#34;</span><span class=\"p\">&gt;</span>Greeting<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;greeting&#34;</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#greeting&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Update the value\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;value&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Hello there!&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// If you haven&#39;t made any updates to the field, these both return &#34;Hello there!&#34;\n</span><span class=\"c1\">// If you HAVE updated the field, val1 returns whatever was typed in the field instead\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">val1</span> <span class=\"o\">=</span> <span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">val2</span> <span class=\"o\">=</span> <span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;value&#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>If you try to update the <code>value</code> property directly, that <em>will</em> update the UI.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Hello there!&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>This allows you to choose different approaches depending on whether you want to overwrite user updates or not.</p>\n\n<p>If you want to update a field, but <em>only if</em> the user hasn&rsquo;t made any changes, use <code>Element.setAttribute()</code>. If you want to overwrite anything they&rsquo;ve done, use the <code>value</code> property.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/abLrZPm?editors=1111\">Here&rsquo;s one last demo.</a></p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>Three simple ways to get and set CSS properties with vanilla JavaScript</title>\n\t\t\t\t<link>https://gomakethings.com/three-simple-ways-to-get-and-set-css-properties-with-vanilla-javascript/</link>\n\t\t\t\t<pubDate>Tue, 18 Jan 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/three-simple-ways-to-get-and-set-css-properties-with-vanilla-javascript/</guid>\n\t\t\t\t<description><![CDATA[ In today&rsquo;s article, we&rsquo;re going to look at three different techniques you can use to get and set CSS properties with vanilla JS.\nLet&rsquo;s dig in!\nA quick note on case Vanilla JavaScript uses camelCased versions of the properties you would use in CSS.\nFor example, background-image in CSS is backgroundImage in JavaScript. The font-weight property in CSS is fontWeight in JavaScript.\nThe Mozilla Developer Network provides a comprehensive list of available attributes and their JavaScript counterparts.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ \n\n<p>In today&rsquo;s article, we&rsquo;re going to look at three different techniques you can use to get and set CSS properties with vanilla JS.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"a-quick-note-on-case\">A quick note on case</h2>\n\n<p>Vanilla JavaScript uses camelCased versions of the properties you would use in CSS.</p>\n\n<p>For example, <code>background-image</code> in CSS is <code>backgroundImage</code> in JavaScript. The <code>font-weight</code> property in CSS is <code>fontWeight</code> in JavaScript.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference\">The Mozilla Developer Network provides a comprehensive list of available attributes and their JavaScript counterparts.</a></p>\n\n<h2 id=\"the-element-style-property\">The <code>Element.style</code> property</h2>\n\n<p>You can get and set inline styles for an element with the <code>Element.style</code> property.</p>\n\n<p>The <code>Element.style</code> property is a read-only object. You can get and set individual style properties on it using camelCase style names as properties on the <code>Element.style</code> object.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;sandwich&#34;</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"s\">&#34;background-color: green; color: white;&#34;</span><span class=\"p\">&gt;</span>\n\tSandwich\n<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#sandwich&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Get a style\n</span><span class=\"c1\">// If this style is not set as an inline style directly on the element, it returns an empty string\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">bgColor</span> <span class=\"o\">=</span> <span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundColor</span><span class=\"p\">;</span> <span class=\"c1\">// this will return &#34;green&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">fontWeight</span> <span class=\"o\">=</span> <span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">fontWeight</span><span class=\"p\">;</span> <span class=\"c1\">// this will return &#34;&#34;\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// Set the background-color style property\n</span><span class=\"c1\"></span><span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;purple&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>You can also <em>get and set</em> a string representation of the entire inline <code>style</code> property on the element itself with the <code>Element.style.cssText</code> property.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Get the styles on an element\n</span><span class=\"c1\">// returns &#34;background-color: green; color: white;&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">styles</span> <span class=\"o\">=</span> <span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">cssText</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Completely replace the inline styles on an element\n</span><span class=\"c1\"></span><span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">cssText</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;font-size: 2em; font-weight: bold;&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Add additional styles\n</span><span class=\"c1\"></span><span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">cssText</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;color: purple;&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/OJxGPRK\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"the-window-getcomputedstyle-method\">The <code>window.getComputedStyle()</code> method</h2>\n\n<p>The <code>window.getComputedStyle()</code> method gets the actual computed style of an element. This factors in browser default styles as well as external stylesheets being used on the page.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#sandwich&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span> <span class=\"nx\">bgColor</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">getComputedStyle</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">).</span><span class=\"nx\">backgroundColor</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>This is <em>read only</em>, and can&rsquo;t be used to actually modify styles on an element.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/gOGybLJ?editors=1111\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"adding-a-styles-to-the-document\">Adding a styles to the document</h2>\n\n<p>The <code>Element.style</code> property is useful for adding inline styles to specific elements.</p>\n\n<p>But what if you want to add styles to <em>all elements</em> that match a specific selector? You <em>could</em> loop through each matching element and add styles using the <code>Element.style</code> property.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">&#39;.wizard&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">wizard</span> <span class=\"k\">of</span> <span class=\"nx\">wizards</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;rebeccapurple&#39;</span><span class=\"p\">;</span>\n\t<span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">color</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;white&#39;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Or, you can add CSS directly to the document by creating a <code>style</code> element and appending it into the DOM.</p>\n\n<p>First, create a <code>style</code> element using the <code>document.createElement()</code> method. Then, add your CSS to it using the <code>Element.textContent</code> property.</p>\n\n<p>Finally, you can inject it into the document using the <code>Element.append()</code> method. I like to append into the <code>document.head</code>, but <code>document.body</code> works, too.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">style</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;style&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span>\n\t<span class=\"sb\">`.wizard {\n</span><span class=\"sb\">\t\tbackground-color: rebeccapurple;\n</span><span class=\"sb\">\t\tcolor: white;\n</span><span class=\"sb\">\t}`</span><span class=\"p\">;</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">style</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/RwLONVd\">Here&rsquo;s one last demo.</a></p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>The best way to learn JavaScript in 2022</title>\n\t\t\t\t<link>https://gomakethings.com/the-best-way-to-learn-javascript-in-2022/</link>\n\t\t\t\t<pubDate>Mon, 17 Jan 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/the-best-way-to-learn-javascript-in-2022/</guid>\n\t\t\t\t<description><![CDATA[ Yesterday, I got an email from a newsletter subscriber asking:\n What&rsquo;s the best way to practice JavaScript?\n There&rsquo;s no one right way to learn JavaScript. But after teaching it for a handful of years now, I have found some trends and common approaches that make things easier for a lot of students.\nLet&rsquo;s dig in!\nLean into your learning style Some folks learn best by reading, others from watching videos, and others from just diving in and trying a bunch of stuff until things click.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ \n\n<p>Yesterday, I got an email from a newsletter subscriber asking:</p>\n\n<blockquote>\n<p>What&rsquo;s the best way to practice JavaScript?</p>\n</blockquote>\n\n<p>There&rsquo;s no one right way to learn JavaScript. But after teaching it for a handful of years now, I have found some trends and common approaches that make things easier for a lot of students.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"lean-into-your-learning-style\">Lean into your learning style</h2>\n\n<p>Some folks learn best by reading, others from watching videos, and others from just diving in and trying a bunch of stuff until things click.</p>\n\n<p>I personally find that I learn best from reading a little and trying a little, then reading some more. I know a lot of folks who prefer to watch videos initially, then read later to reinforce what they learned.</p>\n\n<p>When you can, try to find resources that fit your learning preferences.</p>\n\n<h2 id=\"put-what-you-learn-into-practice\">Put what you learn into practice</h2>\n\n<p>One of the biggest challenges I hear from folks who are learning is making that jump from &ldquo;I learned these methods and techniques&rdquo; to &ldquo;I know how to apply these techniques&rdquo; is <em>really hard</em>.</p>\n\n<p>The most effective way I&rsquo;ve found to bridge that gap is by working on real projects.</p>\n\n<h2 id=\"don-t-try-to-go-too-big-too-soon-with-your-projects\">Don&rsquo;t try to go too big, too soon with your projects</h2>\n\n<p>Where I see most students get stuck with project work is trying to do projects that are too big, too soon.</p>\n\n<p>Don&rsquo;t jump right into building a todo app or an ecommerce platform or anything like that. You want to start small. Like, really small. For example&hellip;</p>\n\n<ul>\n<li>write a script that shows a piece of hidden content when a button is clicked. When you click it again, hide the content again.</li>\n<li>Once you&rsquo;ve got that figured out, you can modify it to work like an accordion, where opening one piece of content closes all others in a group.</li>\n<li>Then you can add more features and details, like letting users pass in their own options or settings</li>\n</ul>\n\n<p>Start really small, and layer in more complexity as you learn.</p>\n\n<p>(<em>I&rsquo;m actually working on a new product that will provide this kind of thing in a more guided, structured way.</em>)</p>\n\n<h2 id=\"learning-inertia-is-more-important-than-picking-the-right-tools\">Learning inertia is more important than picking the right tools</h2>\n\n<p>I see a lot of learners get hung up on which tool to choose.</p>\n\n<blockquote>\n<p>Should I learn vanilla JS or React first? A framework or jQuery?</p>\n</blockquote>\n\n<p>Honestly, it doesn&rsquo;t matter. The most important thing is that you pick something that you find easiest to get started with, the thing that takes you from idea to &ldquo;I built a thing that works&rdquo; fastest.</p>\n\n<p><strong>Inertia is more important than perfect.</strong></p>\n\n<p>You can learn a framework or library more easily if you build a solid foundation of vanilla JS skills. If a library clicks more easily for you, you can back into vanilla JS later (I learned jQuery first, then backed into vanilla JS).</p>\n\n<p>Don&rsquo;t overthink it!</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>How I record my vanilla JS video courses</title>\n\t\t\t\t<link>https://gomakethings.com/how-i-record-my-vanilla-js-video-courses/</link>\n\t\t\t\t<pubDate>Fri, 14 Jan 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/how-i-record-my-vanilla-js-video-courses/</guid>\n\t\t\t\t<description><![CDATA[ Yesterday, one of my students asked me how I record my JavaScript video courses and workshop lessons.\nToday, I wanted to share both my technical setup and general approach to making videos. Let&rsquo;s dig in!\nScreen recording I use Screenflow for screen recording.\nIt&rsquo;s macOS only. If you&rsquo;re feeling cheap, you can also just use QuickTime, but I found that makes my fans spin like crazy. Screenflow also has some great editing features, including easy cropping and zooming, noise isolation, and so on.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ \n\n<p>Yesterday, one of my students asked me how I record <a href=\"https://vanillajsguides.com\">my JavaScript video courses</a> and <a href=\"https://vanillajsacademy.com\">workshop lessons</a>.</p>\n\n<p>Today, I wanted to share both my technical setup and general approach to making videos. Let&rsquo;s dig in!</p>\n\n<h2 id=\"screen-recording\">Screen recording</h2>\n\n<p>I use <a href=\"https://www.telestream.net/screenflow/\">Screenflow</a> for screen recording.</p>\n\n<p>It&rsquo;s macOS only. If you&rsquo;re feeling cheap, you can also just use QuickTime, but I found that makes my fans spin like crazy. Screenflow also has some great editing features, including easy cropping and zooming, noise isolation, and so on.</p>\n\n<p>If you&rsquo;re on Windows, you can alternative use <a href=\"https://www.techsmith.com/video-editor.html\">Camtasia</a>, which I haven&rsquo;t used in years but used to when I was on a Windows rig.</p>\n\n<h2 id=\"microphone\">Microphone</h2>\n\n<p>For microphones, I used a <a href=\"https://www.bluemic.com/en-us/products/yeti/\">Blue Yeti</a> for years.</p>\n\n<p>It&rsquo;s the most entry-level of &ldquo;nice microphones,&rdquo; with a price to match. The audio quality on it is actually <em>really</em> good, if you configure it and use it properly.</p>\n\n<p>However, it&rsquo;s what&rsquo;s known as a <em>condenser microphone</em>. It picks up a wide range of tones, but is also very sensitive to low volumes, and thus, picks up a lot of background noise.</p>\n\n<p>Now that everyone is remote, there&rsquo;s a lot more noise in my house, which was making recording very difficult. In a sound-treated space or dedicated studio, the Blue Yeti is amazing. But it&rsquo;s very unforgiving to background noise.</p>\n\n<p>I recently upgraded to the <a href=\"https://www.shure.com/en-US/products/microphones/mv7\">Shure MV7</a>.</p>\n\n<p>It&rsquo;s what&rsquo;s known as a <em>dynamic microphone</em>. You need to put your mouth much closer to microphone to pick up a good audio level, but it isolates almost all noise that&rsquo;s not directly in front of it, which is just what I needed!</p>\n\n<p>Shure makes some other microphones that are technically a bit better, but the MV7 is a USB mic, which lets me plug it directly into my computer. Most of their other mics are XLR microphones, which require a special interface to boost the audio before connecting to your computer.</p>\n\n<p>If you&rsquo;re on a budget, any headset with a built-in microphone is a great place to start. Just beware that the mic on Apple&rsquo;s old-school corded airbuds tend to drag across beards and clothing and pick up noise that way.</p>\n\n<h2 id=\"boom-arm\">Boom Arm</h2>\n\n<p>While upgrading my microphone, I also purchased a <a href=\"https://www.rode.com/accessories/stands/psa1\">RØDE PSA1 boom arm</a>.</p>\n\n<p>This lets me position the mic directly in front of my mouth, without interfering with my keyboard or notes as I record. Some folks recommend optional things like shock arms to absorb desk movement, but I&rsquo;ve found that&rsquo;s totally unnecessary with this mic.</p>\n\n<p>Instead of a boom arm, you can use a desk stand. I did for years. They do sometimes pick up typing noises, so you have to be a bit careful about how hard you hit the desk.</p>\n\n<h2 id=\"positioning-the-mic\">Positioning the Mic</h2>\n\n<p>The microphone has a built-in pop filter to minimize the popping noises that result from saying &ldquo;p words&rdquo; (called <em>plosives</em>).</p>\n\n<p>I found that all of my s words sounded slurred with the new mic. From research, this often happens when a mic is positioned closer to your mouth.</p>\n\n<p>After some trial and error, I found that positioning it below my mouth pointed up made that go away. But it&rsquo;s different for each person. Try positioning the microphone to the side, from the bottom, and from above until you find something that works best for you.</p>\n\n<h2 id=\"text-editor-settings\">Text Editor Settings</h2>\n\n<p>While I normally code in a dark theme, I use a light theme for my recordings, as many folks report that it&rsquo;s easier to see and read in well lit settings.</p>\n\n<p>I boost the size of my text up to 19 pixels to make it easier to read on smaller screens. It&rsquo;s a bit awkwardly large on my end, but much better for the people watching my videos.</p>\n\n<p>I use Monokai Light as my syntax highlighting theme. I&rsquo;ve found that it has good contrast for easier visibility.</p>\n\n<h2 id=\"approach\">Approach</h2>\n\n<p>I prefer talking over code to showing my face. Worrying about whether or not I&rsquo;m making stupid faces makes recording even harder than it already it is.</p>\n\n<p>I used to use a script, and restart my recordings every time I fucked up and said an &ldquo;ooh,&rdquo; &ldquo;um,&rdquo;, or &ldquo;ah.&rdquo;</p>\n\n<p>Then, I did a few live streaming things, and had folks tell me they preferred the more casual tone of those over my well scripted videos. Some research indicates that filler words (the &ldquo;ums&rdquo; and such) often go unnoticed consciously, but trigger brains to pay more attention to what&rsquo;s being said.</p>\n\n<p>Now, I tend to write out a few notes on a piece of paper and &ldquo;just wing it.&rdquo;</p>\n\n<p>I aim for a single take with no edits beyond cropping the frame to HD and adjusting the audio level. If the video is longer than a minute or two, I may copy/paste the text into an email and keep it positioned on my phone in front of me instead.</p>\n\n<p>But I always keep it conversational, and leave in the mess ups and debugging. Students have actively told me they like to see that stuff and how I work through it.</p>\n\n<h2 id=\"creating-the-content\">Creating the Content</h2>\n\n<p>Each video starts with me creating the source code.</p>\n\n<p>Next, I write up how it works. Then, I use that text version to help guide the talking points in the video. Some folks prefer to learn by reading, so I include text options as well.</p>\n\n<h2 id=\"hosting\">Hosting</h2>\n\n<p>I host all of my videos on <a href=\"https://vimeo.com/upgrade\">Vimeo Pro</a>.</p>\n\n<p>They handle compressing the video, and dynamically serve it at different rates based on the user&rsquo;s bandwidth and screen size. They also let me control the UI of the video player, and where it can be embedded. Finally, they have a &ldquo;download video&rdquo; link, which is also useful for my students.</p>\n\n<p>Vimeo Pro is money well spent!</p>\n\n<p><em><strong>Note:</strong> for business videos, you need at least Vimeo Pro. The Vimeo Plus plan does not allow business videos under its TOS.</em></p>\n\n<h2 id=\"captions\">Captions</h2>\n\n<p>I use <a href=\"https://www.rev.com/\">Rev</a> for video captioning.</p>\n\n<p>You can link your Vimeo account directly in Rev using the Vimeo API, and select the videos you want to caption directly from the Rev UI. Captions are uploaded directly to the video without you having to manually upload them.</p>\n\n<p>This saves me a <em>ton</em> of time.</p>\n\n<h2 id=\"anything-i-missed\">Anything I missed?</h2>\n\n<p>Hope that helps! Let me know if there&rsquo;s anything you want me to talk about that I missed.</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>How I structure my JavaScript projects in 2022</title>\n\t\t\t\t<link>https://gomakethings.com/how-i-structure-my-javascript-projects-in-2022/</link>\n\t\t\t\t<pubDate>Thu, 13 Jan 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/how-i-structure-my-javascript-projects-in-2022/</guid>\n\t\t\t\t<description><![CDATA[ One of the things I get the most questions about from my students is about what the &ldquo;best way&rdquo; to structure code is.\nThe truth is, there is no best way. But I do have a series of conventions and rough guidelines that I follow. Today, I thought I&rsquo;d share them with you.\nLet&rsquo;s dig in!\nThe JavaScript patterns I use I have a small handful of JavaScript patterns I use, depending on the needs of the project.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ \n\n<p>One of the things I get the most questions about from my students is about what the &ldquo;best way&rdquo; to structure code is.</p>\n\n<p>The truth is, there is no <em>best way</em>. But I do have a series of conventions and rough guidelines that I follow. Today, I thought I&rsquo;d share them with you.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-javascript-patterns-i-use\">The JavaScript patterns I use</h2>\n\n<p>I have a small handful of JavaScript patterns I use, depending on the needs of the project.</p>\n\n<ul>\n<li>For libraries, I typically use <a href=\"https://gomakethings.com/an-introduction-to-the-javascript-constructor-pattern/\">a Constructor pattern</a>.</li>\n<li>For simple scripts on personal projects, I typically use a small function as a wrapper. I generally want to explicitly invoke it rather than using <a href=\"https://gomakethings.com/the-many-ways-to-write-an-immediately-invoked-function-expression-iife-in-javascript/\">an Immediately Invoked Function Expression (or IIFE)</a>.</li>\n</ul>\n\n<p>I used to use <a href=\"https://vanillajstoolkit.com/boilerplates/revealing-module-pattern/\">revealing module patterns</a> a lot more often, but these days, I tend to <a href=\"https://vanillajsguides.com/es-modules/\">use ES modules</a> instead (more on that in a bit).</p>\n\n<h2 id=\"the-build-tools-i-use\">The build tools I use</h2>\n\n<p>I used to use <a href=\"https://gulpjs.com/\">Gulp.js</a>, and <a href=\"https://codekitapp.com/\">CodeKit</a> before that.</p>\n\n<p>Now, I&rsquo;m a big fan of running NPM scripts directly. It gives me more control than CodeKit, but a much smaller set of dependencies (and less things breaking all the time) than Gulp.</p>\n\n<p><strong>Every single one of my projects now uses my <a href=\"https://github.com/cferdinandi/build-tool-boilerplate\">Build Tool Boilerplate</a>.</strong></p>\n\n<p>It&rsquo;s setup to let me easily drop out the stuff I don&rsquo;t need, and customize the stuff I do through a configurations object. It includes <a href=\"https://www.rollupjs.org/guide/en/\">rollup.js</a> for JavaScript, <a href=\"https://sass-lang.com/\">Sass</a> for CSS, and a handful of SVG and image optimization tools.</p>\n\n<p>I <em>don&rsquo;t</em> use webpack, because it&rsquo;s confusing and complicated. I also don&rsquo;t use TypeScript, because it&rsquo;s an added layer of dependencies, and solves problems I don&rsquo;t personally have.</p>\n\n<h2 id=\"how-i-organize-code-within-a-file\">How I organize code within a file</h2>\n\n<p>I tend to maintain a specific structure to my files&hellip;</p>\n\n<ul>\n<li>Variables at the top of the page</li>\n<li>Functions and methods in the middle</li>\n<li>Initializations and event listeners at the end</li>\n</ul>\n\n<p>This makes it really easy for me to open any particular file and have a rough idea of how it&rsquo;s organized and how to find what I&rsquo;m looking for relatively easily.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// \n</span><span class=\"c1\">// Variables\n</span><span class=\"c1\">// \n</span><span class=\"c1\"></span>\n<span class=\"kd\">let</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">spells</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">teapots</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Dancing teapots&#39;</span><span class=\"p\">,</span> \n\t<span class=\"nx\">fish</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Turn into a fish&#39;</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"c1\">//\n</span><span class=\"c1\">// Methods\n</span><span class=\"c1\">// \n</span><span class=\"c1\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * Cast the spell\n</span><span class=\"cm\"> * @param  {String} spell The spell to cast\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">castSpell</span> <span class=\"p\">(</span><span class=\"nx\">spell</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">spell</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"c1\">// \n</span><span class=\"c1\">// Inits &amp; Event Listeners\n</span><span class=\"c1\">// \n</span><span class=\"c1\"></span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">castSpell</span><span class=\"p\">(</span><span class=\"nx\">spells</span><span class=\"p\">.</span><span class=\"nx\">fish</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>I use <a href=\"https://jsdoc.app/\">JSDoc</a> to document my code. Some text editors will use this to pull out information about functions when used in other places in your code, which is quite nice!</p>\n\n<p>I maintain a similar structure <em>within functions</em> as well.</p>\n\n<h2 id=\"how-i-modularize-and-organize-files\">How I modularize and organize files</h2>\n\n<p>I&rsquo;m <a href=\"https://vanillajsguides.com/es-modules/\">a big fan of ES modules</a>. They help me keep my code more structured and organized.</p>\n\n<p>But I&rsquo;ve also seen people go <em>too</em> modular for my liking, creating deeply nested file trees with each function in its own little file. This creates, in my opinion, a different kind of organizational challenge (that I&rsquo;ve been guilty of myself).</p>\n\n<p>To avoid doing this, I tend to start all of my projects as a single JavaScript file.</p>\n\n<p>At some point, it may start to feel too big. I&rsquo;m doing a lot of scrolling up-and-down, or I open the file a second time in another tab to easily reference different parts of it.</p>\n\n<p>That&rsquo;s usually my sign that it&rsquo;s time to break things up a bit.</p>\n\n<ul>\n<li><strong>For JavaScript libraries,</strong> I organize my functions and files by what they do: <code>event-listeners.js</code>, <code>dom.js</code>, <code>constructor.js</code>, and so on.</li>\n<li><strong>For websites and apps,</strong> I tend to keep each library or discrete piece of functionality in its own file, and <code>import</code> them into files specific to the pages they&rsquo;re needed on: <code>search.js</code>, <code>table-of-contents.js</code>, and so on.</li>\n</ul>\n\n<p>I keep all of my build files in a <code>src</code> directory, and compile them with rollup.js and my <a href=\"https://github.com/cferdinandi/build-tool-boilerplate\">Build Tools Boilerplate</a> into a <code>dist</code> directory.</p>\n\n<h2 id=\"what-did-i-miss\">What did I miss?</h2>\n\n<p>That&rsquo;s a rough overview of how I work, but I&rsquo;m sure I missed some details.</p>\n\n<p>Is there anything you&rsquo;d like me to dig into more about my work setup that I didn&rsquo;t cover in this article? Send me an email and let me know!</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>The many ways to mutate arrays (with JavaScript)</title>\n\t\t\t\t<link>https://gomakethings.com/the-many-ways-to-mutate-arrays-with-javascript/</link>\n\t\t\t\t<pubDate>Wed, 12 Jan 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/the-many-ways-to-mutate-arrays-with-javascript/</guid>\n\t\t\t\t<description><![CDATA[ This week, we&rsquo;ve looked at various techniques for looping over arrays and objects.\nIn both articles I noted:\n in a real site or application, you might want to manipulate the data in some way.\n Today, we&rsquo;re going to look at how to mutate and transform arrays. Let&rsquo;s dig in!\nAn example array For today’s article, lets use an array of wizards as an example. Each item in the array is an object with the wizard&rsquo;s name and signature spell.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ \n\n<p>This week, we&rsquo;ve looked at various techniques for <a href=\"https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/\">looping over arrays</a> and <a href=\"https://gomakethings.com/whats-the-best-way-to-loop-over-an-object-with-javascript/\">objects</a>.</p>\n\n<p>In both articles I noted:</p>\n\n<blockquote>\n<p>in a real site or application, you might want to manipulate the data in some way.</p>\n</blockquote>\n\n<p>Today, we&rsquo;re going to look at how to mutate and transform arrays. Let&rsquo;s dig in!</p>\n\n<h2 id=\"an-example-array\">An example array</h2>\n\n<p>For today’s article, lets use an array of <code>wizards</code> as an example. Each item in the array is an object with the wizard&rsquo;s <code>name</code> and signature <code>spell</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">spell</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Dancing teacups&#39;</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Gandalf&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">spell</span><span class=\"o\">:</span> <span class=\"s1\">&#39;You shall not pass!&#39;</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Radagast&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">spell</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Talk to animals&#39;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">];</span>\n</code></pre></div>\n<p>We&rsquo;ll transform it in various ways to create a new array.</p>\n\n<h2 id=\"the-array-map-method\">The <code>Array.map()</code> method</h2>\n\n<p>You can use the <code>Array.map()</code> method to loop through each item in an array, transform it, and return a new array. Pass in a callback function that accepts three arguments: the current item in the loop, its index, and the array itself. All three are optional.</p>\n\n<p>Whatever you <code>return</code> inside the callback function becomes the new value at that index in the new array.</p>\n\n<p>In this example, we&rsquo;re creating a new array that contains just the wizard&rsquo;s names.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// returns [&#34;Merlin&#34;, &#34;Gandalf&#34;, &#34;Radagast&#34;]\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">names</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/pen/?editors=0011\">Here&rsquo;s a demo of the <code>Array.map()</code> method.</a></p>\n\n<h2 id=\"the-array-filter-method\">The <code>Array.filter()</code> method</h2>\n\n<p>You can use the <code>Array.filter()</code> method to create a new array with only elements that pass a test you include as a callback function. The callback accepts three arguments: the current item in the loop&rsquo;s value, its index, and the array itself. All three are optional.</p>\n\n<p>In this example, we&rsquo;re creating a new array that contains only wizards whose spell does not include an exclamation mark (<code>!</code>).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// includes Merlin and Radagast, but not Gandalf\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">quiet</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"o\">!</span><span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">spell</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">&#39;!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/eYGQZZN?editors=0011\">Here&rsquo;s a demo of the <code>Array.filter()</code> method.</a></p>\n\n<h2 id=\"the-array-reduce-method\">The <code>Array.reduce()</code> method</h2>\n\n<p>The <code>Array.reduce()</code> method takes the content of an array and returns a single value. That value can be anything: a string, number, object, or even another array.</p>\n\n<p>The <code>Array.reduce()</code> method accepts two arguments: a callback method to run against each item in the array, and a starting value. Both are required.</p>\n\n<p>The callback also accepts two arguments: the <code>accumulator</code>, which is the current combined value, and the <code>current</code> item in the loop. Whatever you return is used as the accumulator for the next item in the loop. On the very first loop, that starting value is used instead.</p>\n\n<p>In this example, we&rsquo;re going to group our <code>wizards</code> into an object, organized by the number of characters in their <code>spell</code>. We&rsquo;ll pass in an empty object (<code>{}</code>) as the starting value.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// returns {15: [&#34;Merlin&#34;, &#34;Radagast&#34;], 19: [&#34;Gandalf&#34;]}\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">spellLengths</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">wizard</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Get the spell length\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">spell</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n\n\t<span class=\"c1\">// if there&#39;s no property yet, create one\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">length</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">length</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"c1\">// Add the wizard to the object\n</span><span class=\"c1\"></span>\t<span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">length</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n\n<span class=\"p\">},</span> <span class=\"p\">{});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/OJxaNRB?editors=0011\">Here&rsquo;s a demo of the <code>Array.reduce()</code> method.</a></p>\n\n<p><em><strong>A quick note about the <code>Array.reduce()</code> method:</strong> using a more verbose method (or combination of methods) <a href=\"https://gomakethings.com/revisiting-array.reduce/\">typically results in more readable code</a>. I tend to avoid this one now.</em></p>\n\n<h2 id=\"the-array-reverse-method\">The <code>Array.reverse()</code> method</h2>\n\n<p>You can use the <code>Array.reverse()</code> method to reverse the order of items in an array.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// Now Radagast is first and Merlin is last\n</span><span class=\"c1\"></span><span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">reverse</span><span class=\"p\">();</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/xxXQVqq?editors=0011\">Here&rsquo;s a demo of the <code>Array.reverse()</code> method.</a></p>\n\n<h2 id=\"the-array-join-method\">The <code>Array.join()</code> method</h2>\n\n<p>You can use the <code>Array.join()</code> method to combine all items in an array into a string, separated by a delimiter that you can pass in as an argument. By default, it will use a comma (<code>,</code>) as the delimiter if one is not provided.</p>\n\n<p>In this example, we&rsquo;re using the <code>Array.map()</code> method to create an array of wizard names, and then joining them together, separated by a dash (<code>-</code>).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// returns &#34;Merlin - Gandalf - Radagast&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">wizardList</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39; - &#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/ExwOKmN?editors=0011\">Here&rsquo;s a demo of the <code>Array.join()</code> method.</a></p>\n\n<h2 id=\"using-a-loop\">Using a loop</h2>\n\n<p>You can replicate any of the features of the dedicated methods above using <a href=\"https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/\">an array loop</a>.</p>\n\n<p>For example, we can replicate the <code>Array.map()</code> method by first creating an empty array, and then looping through the <code>wizards</code> array and pushing items into the new one.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">names</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">wizard</span> <span class=\"k\">of</span> <span class=\"nx\">wizards</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">names</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/abLQNwJ?editors=0011\">Here&rsquo;s a demo of this technique.</a></p>\n\n<p>A lot of people who are learning JavaScript find this approach easier to read and understand because what you&rsquo;re doing is more explicit. Ultimately, it doesn&rsquo;t matter, so choose whatever approach you personally find most readable.</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t</channel>\n</rss>"
  },
  "description": "A simpler, more resilient way to make things for the web.",
  "home_page_url": "https://gomakethings.com",
  "_ext": {
    "date_published": "2022-01-20T15:30:00.000Z",
    "date_modified": "2018-01-15T02:38:44.000Z"
  }
}