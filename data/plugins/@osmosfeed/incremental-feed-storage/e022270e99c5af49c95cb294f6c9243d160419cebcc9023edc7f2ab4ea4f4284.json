{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Go Make Things",
  "feed_url": "https://gomakethings.com/feed/index.xml",
  "items": [
    {
      "id": "https://gomakethings.com/javascript-is-weird/",
      "url": "https://gomakethings.com/javascript-is-weird/",
      "title": "JavaScript is weird",
      "summary": "Last week, Ryan Cavanaugh, the engineering lead for Typescript, tweeted about a weird JS performance quirk.\nImagine an array of objects. Each object has a val property, with a numeric value.\nlet arr = [ {val: 1}, {val: 42}, {val: 24} ];  As a test, Ryan created a function that adds the val property for each item in the array together to get the sum.\nfunction sum (arr) { let acc = 0; for (let i = 0; i < arr.",
      "content_html": "<p>Last week, <a href=\"https://twitter.com/SeaRyanC/status/1496273922714902528\">Ryan Cavanaugh, the engineering lead for Typescript, tweeted about a weird JS performance quirk</a>.</p>\n\n<p>Imagine an array of objects. Each object has a <code>val</code> property, with a numeric value.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">{</span><span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n\t<span class=\"p\">{</span><span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">42</span><span class=\"p\">},</span>\n\t<span class=\"p\">{</span><span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">24</span><span class=\"p\">}</span>\n<span class=\"p\">];</span>\n</code></pre></div>\n<p>As a test, Ryan created a function that adds the <code>val</code> property for each item in the array together to get the sum.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">sum</span> <span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">acc</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">arr</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">acc</span> <span class=\"o\">+=</span> <span class=\"nx\">arr</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">val</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">acc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Next, he created two arrays, each with 100 million identical objects (<code>[{val: 1}, ...]</code>). Then, he added some bonus items to each array.</p>\n\n<blockquote>\n<p><code>array1</code> gets uniform items, but <code>array2</code> elements get some other properties too</p>\n</blockquote>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">array1</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"p\">});</span>\n\n<span class=\"nx\">array2</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"nx\">d</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">});</span>\n</code></pre></div>\n<p>Finally, he ran some performance tests. He passed each one into the <code>sum()</code> function five times, and calculated how long in milliseconds it took to complete the operation.</p>\n\n<p>The results were&hellip; bonkers!</p>\n\n<ol>\n<li>With <code>array1</code>, the <code>sum()</code> function got faster each time it ran, ultimately running twice as fast on the fifth pass as on the first.</li>\n<li>With <code>array2</code>, the <code>sum()</code> function got <em>slower</em> each time it ran, ultimately running <em>six times slower (!!!)</em> on the fifth pass as on the first.</li>\n<li>When Ryan ran <code>sum()</code> with <code>array1</code> again <em>after</em> running it with <code>array2</code>, it ran just as slow as <code>array2</code> did.</li>\n</ol>\n\n<p>Ryan notes&hellip;</p>\n\n<blockquote>\n<p>When sum hit the different objects at the end of the array, they were not the same shape as the rest, so the property access became &ldquo;megamorphic&rdquo; - not suitable for optimization.\n&hellip;</p>\n\n<p>This is despite the fact that every object to ever enter &lsquo;sum&rsquo; had &lsquo;val&rsquo; as its first property with type number, and that sum ever only looked at that property. Doesn&rsquo;t matter; the extra properties are different types and this 100% matters to the engine.</p>\n</blockquote>\n\n<p><a href=\"https://twitter.com/SeaRyanC/status/1496273922714902528\">Ryan has a bunch more insights in his Twitter thread.</a> I&rsquo;d strongly encourage you to go give it a read!</p>",
      "content_text": "Last week, Ryan Cavanaugh, the engineering lead for Typescript, tweeted about a weird JS performance quirk.\n\nImagine an array of objects. Each object has a val property, with a numeric value.\nlet arr = [\n\t{val: 1},\n\t{val: 42},\n\t{val: 24}\n];\n\nAs a test, Ryan created a function that adds the val property for each item in the array together to get the sum.\nfunction sum (arr) {\n\tlet acc = 0;\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tacc += arr[i].val;\n\t}\n\treturn acc;\n}\n\nNext, he created two arrays, each with 100 million identical objects ([{val: 1}, ...]). Then, he added some bonus items to each array.\n\n\narray1 gets uniform items, but array2 elements get some other properties too\n\narray1.push({ val: 0 }, { val: 1 }, { val: 2 }, { val: 3 });\n\narray2.push({ val: 0, a: 0 }, { val: 1, b: 0 }, { val: 2, c: 0 }, { val: 3, d: 0 });\n\nFinally, he ran some performance tests. He passed each one into the sum() function five times, and calculated how long in milliseconds it took to complete the operation.\n\nThe results were… bonkers!\n\n\nWith array1, the sum() function got faster each time it ran, ultimately running twice as fast on the fifth pass as on the first.\nWith array2, the sum() function got slower each time it ran, ultimately running six times slower (!!!) on the fifth pass as on the first.\nWhen Ryan ran sum() with array1 again after running it with array2, it ran just as slow as array2 did.\n\n\nRyan notes…\n\n\nWhen sum hit the different objects at the end of the array, they were not the same shape as the rest, so the property access became “megamorphic” - not suitable for optimization.\n…\n\nThis is despite the fact that every object to ever enter ‘sum’ had ‘val’ as its first property with type number, and that sum ever only looked at that property. Doesn’t matter; the extra properties are different types and this 100% matters to the engine.\n\n\nRyan has a bunch more insights in his Twitter thread. I’d strongly encourage you to go give it a read!",
      "date_published": "2022-03-03T15:30:00.000Z",
      "date_modified": "2022-03-03T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "99ada633cfc2736f7736b84c1150d1af1c056828d93d1b68e87947e59cee8863.html"
      }
    },
    {
      "id": "https://gomakethings.com/progressive-enhancement-the-new-hotness/",
      "url": "https://gomakethings.com/progressive-enhancement-the-new-hotness/",
      "title": "Progressive Enhancement, the New Hotness™",
      "summary": "Yesterday, my web friend Sara Soueidan tweeted out a poll…\n Do you use Progressive Enhancement (PE) to build your Web products? If you don’t, do you mind sharing the reason(s) why?\n A shocking 36.8 percent of respondents said they didn’t know what progressive enhancement was! Another 13.5 percent said they don’t use it.\nSo today, we’re going to talk about Progressive Enhancement, the New Hotness™.\nLet’s dig in!",
      "content_html": "<p>Yesterday, <a href=\"https://twitter.com/SaraSoueidan/status/1498655196347604993\">my web friend Sara Soueidan tweeted out a poll</a>&hellip;</p>\n\n<blockquote>\n<p>Do you use Progressive Enhancement (PE) to build your Web products? If you <em>don’t</em>, do you mind sharing the reason(s) why?</p>\n</blockquote>\n\n<p>A shocking 36.8 percent of respondents said they didn&rsquo;t know what progressive enhancement was! Another 13.5 percent said they don&rsquo;t use it.</p>\n\n<p>So today, we&rsquo;re going to talk about Progressive Enhancement, the New Hotness™.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"what-is-progressive-enhancement\">What is progressive enhancement?</h2>\n\n<p>Progressive enhancement means that you add functionality to the things you build in layers.</p>\n\n<p>All users, when possible, should get a basic &ldquo;minimum functionality&rdquo; as part of the HTML file. Then, you can progressively layer in enhancements through your CSS and JavaScript.</p>\n\n<p>If the CSS or JS fail, the user still gets a usable, albeit less flashy, experience.</p>\n\n<p>Progressive enhancement stands in contrast to the &ldquo;all or nothing&rdquo; approach you often see with modern websites, where if something fails, the user gets no experience at all.</p>\n\n<h2 id=\"an-example-of-progressive-enhancement\">An example of progressive enhancement</h2>\n\n<p>A good, simple example of progressive is a &ldquo;slide in navigation&rdquo; component, where the site navigation <em>slides in</em> from the side of the page when a hamburger icon is clicked.</p>\n\n<p>Let&rsquo;s imagine that by default the nav menu is hidden with some CSS. When the hamburger icon is clicked, a CSS class is added that shows it (probably will some animation). Clicking the hamburger again removes the class and hides it.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-css\" data-lang=\"css\"><span class=\"p\">#</span><span class=\"nn\">nav</span> <span class=\"p\">{</span>\n\t<span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">fixed</span><span class=\"p\">;</span>\n\t<span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">right</span><span class=\"p\">:</span> <span class=\"mi\">-10</span><span class=\"kt\">em</span><span class=\"p\">;</span>\n\t<span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">nav</span><span class=\"p\">.</span><span class=\"nc\">slide-in</span> <span class=\"p\">{</span>\n\t<span class=\"k\">right</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div>\n<p>What happens if the JavaScript file that powers the nav menu fails? Now, the user can&rsquo;t navigate the site.</p>\n\n<p>As an alternative, you could place the nav in the footer, and use an anchor link for the hamburger.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;#nav&#34;</span><span class=\"p\">&gt;</span>Menu<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span></code></pre></div>\n<p>When your JavaScript loads, you can add some classes and attributes to <em>progressively enhance</em> the menu from a simple &ldquo;anchor to the footer&rdquo; experience into a slide-in navigation.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">hamburger</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;[href=&#34;#nav&#34;]&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span> <span class=\"nx\">nav</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#nav&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Add a11y attribute to link\n</span><span class=\"c1\"></span><span class=\"nx\">hamburger</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;role&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;button&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Add &#34;component ready&#34; class to nav menu\n</span><span class=\"c1\"></span><span class=\"nx\">nav</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s1\">&#39;slider&#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Then, you make your CSS conditional on the inclusion of the <code>.slider</code> class (you probably don&rsquo;t need or want that much specificity).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-css\" data-lang=\"css\"><span class=\"p\">#</span><span class=\"nn\">nav</span><span class=\"p\">.</span><span class=\"nc\">slider</span> <span class=\"p\">{</span>\n\t<span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">fixed</span><span class=\"p\">;</span>\n\t<span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">right</span><span class=\"p\">:</span> <span class=\"mi\">-10</span><span class=\"kt\">em</span><span class=\"p\">;</span>\n\t<span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">nav</span><span class=\"p\">.</span><span class=\"nc\">slider</span><span class=\"p\">.</span><span class=\"nc\">slide-in</span> <span class=\"p\">{</span>\n\t<span class=\"k\">right</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div>\n<p>This ensures a baseline experience for everyone, and a nicer experience for people when nothing goes wrong.</p>\n\n<h2 id=\"why-isn-t-progressive-enhancement-more-popular\">Why isn&rsquo;t progressive enhancement more popular</h2>\n\n<p>There are a lot of myths about progressive enhancement.</p>\n\n<p>Many of them were popularized by JS library &ldquo;thought leaders&rdquo; as a way to dismiss legitimate feedback about the tools they were building.</p>\n\n<dl>\n<dt>Myth: PE is only for people who disable JS on purpose, and you shouldn&rsquo;t do that.</dt>\n<dd>JavaScript fails about 1 percent of the time. Most of those failures are not people deliberately turning it off (though there are valid reasons to do so). File errors cause JS failures. CDNs go down. Ad blockers flag a file incorrectly. Overzealous corporate firewalls block your file.</dd>\n<dt>Myth: PE is only for older browsers.</dt>\n<dd>All of those file errors? They happen in new browsers, too!</dd>\n<dt>Myth: PE is only for JavaScript.</dt>\n<dd>CSS enhancements can be treated as progressive enhancement, too. CSS files also fail to load sometimes, and modern features don&rsquo;t always work everywhere. Grid-based layouts? Progressive enhancement! A single column layout is the base experience. Animations? Progressive enhancement! Any styles at all? Progressive enhancement!</dd>\n<dt>Myth: PE is inherently more work.</dt>\n<dd>In the comments on Sara&rsquo;s poll, there&rsquo;s a lot of, &ldquo;progressive enhancement is a lot more work and clients won&rsquo;t pay for that.&rdquo; But it doesn&rsquo;t have to be! It can be just a little more work, or none at all, depending on how you structure your code!</dd>\n</dl>\n\n<h2 id=\"some-low-hanging-fruit-progressive-enhancement\">Some low-hanging fruit progressive enhancement</h2>\n\n<p>Here are some simple ways you can start to implement progressive enhancement.</p>\n\n<h3 id=\"treat-css-as-an-enhancement\">Treat CSS as an enhancement</h3>\n\n<p>Disable it on your site, then look at it. Is the HTML well structured? Is there any &ldquo;hidden by CSS&rdquo; junk that completely ruins the experience or is confusing? Can you still navigate around?</p>\n\n<h3 id=\"use-css-and-html-elements-that-provide-progressive-enhancement-out-of-the-box\">Use CSS and HTML elements that provide progressive enhancement out-of-the-box</h3>\n\n<p><a href=\"https://gomakethings.com/how-to-build-a-progressively-enhanced-accordion-component-with-vanilla-js/\">The <code>details</code> and <code>summary</code> elements create a disclosure component.</a></p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">details</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">summary</span><span class=\"p\">&gt;</span>Click Me<span class=\"p\">&lt;/</span><span class=\"nt\">summary</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Oh, hello there!<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">details</span><span class=\"p\">&gt;</span></code></pre></div>\n<p><details>\n    <summary>Click Me</summary>\n    <p>Oh, hello there!</p>\n</details></p>\n\n<p>In older browsers, you get a heading and always-visible content. In modern browsers, you get an expand-and-collapse component. Progressive enhancement is baked right in.</p>\n\n<p><a href=\"https://gomakethings.com/smooth-scrolling-links-with-only-css/\">The CSS <code>scroll-behavior</code> property lets you animate scrolling to anchor links.</a></p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-css\" data-lang=\"css\"><span class=\"c\">/**\n</span><span class=\"c\"> * Smooth scrolling on the whole document\n</span><span class=\"c\"> */</span>\n<span class=\"nt\">html</span> <span class=\"p\">{</span>\n\t<span class=\"n\">scroll-behavior</span><span class=\"p\">:</span> <span class=\"kc\">smooth</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">prefers-reduced-motion</span><span class=\"o\">:</span> <span class=\"nt\">reduce</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nt\">html</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">scroll-behavior</span><span class=\"p\">:</span> <span class=\"kc\">auto</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div>\n<p>In older and unsupported browsers (I&rsquo;m looking at you, Safari!), anchor links jump to the location. In modern browsers, you can a nice animated scroll effect. Progressive enhancement is baked right in!</p>\n\n<p>And, if someone has <em>prefers reduced motion</em>, an accessibility setting, enabled in their operating system, you can also disable it with a single line of CSS.</p>\n\n<h3 id=\"provide-fallback-loading-content\">Provide fallback/loading content</h3>\n\n<p>If you&rsquo;re pulling data in from an API, you can provide alternative content while you&rsquo;re waiting for it to load.</p>\n\n<p>For example, if you&rsquo;re using the GitHub API to get and render a list of your top repositories on Github, you might include a link to your GitHub profile as the default HTML.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;github&#34;</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;https://github.com/cferdinandi&#34;</span><span class=\"p\">&gt;</span>🐙🐱 View my Profile on GitHub<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span></code></pre></div>\n<p>When the API returns data, you can wipe the content out and replace it with dynamically rendered HTML.</p>\n\n<p>This works for any API-driven content that also provides an alternative view elsewhere, and takes about 15 seconds worth of effort to implement.</p>\n\n<h2 id=\"progressive-enhancement-is-for-everyone\">Progressive enhancement is for everyone</h2>\n\n<p>If you work in tech, you know that eventually things break. Sometimes its your fault. Sometimes things just go wrong.</p>\n\n<p>Progressive enhancement adds <a href=\"https://adactio.com/\">what Jeremy Keith calls &ldquo;fault tolerance.&rdquo;</a></p>\n\n<p>If you care about quality engineering, you want as much fault tolerance in the things you build as possible.</p>",
      "content_text": "Yesterday, my web friend Sara Soueidan tweeted out a poll…\n\n\nDo you use Progressive Enhancement (PE) to build your Web products? If you don’t, do you mind sharing the reason(s) why?\n\n\nA shocking 36.8 percent of respondents said they didn’t know what progressive enhancement was! Another 13.5 percent said they don’t use it.\n\nSo today, we’re going to talk about Progressive Enhancement, the New Hotness™.\n\nLet’s dig in!\n\nWhat is progressive enhancement?\n\nProgressive enhancement means that you add functionality to the things you build in layers.\n\nAll users, when possible, should get a basic “minimum functionality” as part of the HTML file. Then, you can progressively layer in enhancements through your CSS and JavaScript.\n\nIf the CSS or JS fail, the user still gets a usable, albeit less flashy, experience.\n\nProgressive enhancement stands in contrast to the “all or nothing” approach you often see with modern websites, where if something fails, the user gets no experience at all.\n\nAn example of progressive enhancement\n\nA good, simple example of progressive is a “slide in navigation” component, where the site navigation slides in from the side of the page when a hamburger icon is clicked.\n\nLet’s imagine that by default the nav menu is hidden with some CSS. When the hamburger icon is clicked, a CSS class is added that shows it (probably will some animation). Clicking the hamburger again removes the class and hides it.\n#nav {\n\tposition: fixed;\n\ttop: 0;\n\tright: -10em;\n\twidth: 10em;\n}\n\n#nav.slide-in {\n\tright: 0;\n}\nWhat happens if the JavaScript file that powers the nav menu fails? Now, the user can’t navigate the site.\n\nAs an alternative, you could place the nav in the footer, and use an anchor link for the hamburger.\n<a href=\"#nav\">Menu</a>\nWhen your JavaScript loads, you can add some classes and attributes to progressively enhance the menu from a simple “anchor to the footer” experience into a slide-in navigation.\nlet hamburger = document.querySelector('[href=\"#nav\"]');\nlet nav = document.querySelector('#nav');\n\n// Add a11y attribute to link\nhamburger.setAttribute('role', 'button');\n\n// Add \"component ready\" class to nav menu\nnav.classList.add('slider');\n\nThen, you make your CSS conditional on the inclusion of the .slider class (you probably don’t need or want that much specificity).\n#nav.slider {\n\tposition: fixed;\n\ttop: 0;\n\tright: -10em;\n\twidth: 10em;\n}\n\n#nav.slider.slide-in {\n\tright: 0;\n}\nThis ensures a baseline experience for everyone, and a nicer experience for people when nothing goes wrong.\n\nWhy isn’t progressive enhancement more popular\n\nThere are a lot of myths about progressive enhancement.\n\nMany of them were popularized by JS library “thought leaders” as a way to dismiss legitimate feedback about the tools they were building.\n\n\nMyth: PE is only for people who disable JS on purpose, and you shouldn’t do that.\nJavaScript fails about 1 percent of the time. Most of those failures are not people deliberately turning it off (though there are valid reasons to do so). File errors cause JS failures. CDNs go down. Ad blockers flag a file incorrectly. Overzealous corporate firewalls block your file.\nMyth: PE is only for older browsers.\nAll of those file errors? They happen in new browsers, too!\nMyth: PE is only for JavaScript.\nCSS enhancements can be treated as progressive enhancement, too. CSS files also fail to load sometimes, and modern features don’t always work everywhere. Grid-based layouts? Progressive enhancement! A single column layout is the base experience. Animations? Progressive enhancement! Any styles at all? Progressive enhancement!\nMyth: PE is inherently more work.\nIn the comments on Sara’s poll, there’s a lot of, “progressive enhancement is a lot more work and clients won’t pay for that.” But it doesn’t have to be! It can be just a little more work, or none at all, depending on how you structure your code!\n\n\nSome low-hanging fruit progressive enhancement\n\nHere are some simple ways you can start to implement progressive enhancement.\n\nTreat CSS as an enhancement\n\nDisable it on your site, then look at it. Is the HTML well structured? Is there any “hidden by CSS” junk that completely ruins the experience or is confusing? Can you still navigate around?\n\nUse CSS and HTML elements that provide progressive enhancement out-of-the-box\n\nThe details and summary elements create a disclosure component.\n<details>\n\t<summary>Click Me</summary>\n\t<p>Oh, hello there!</p>\n</details>\n\n    Click Me\n    Oh, hello there!\n\n\nIn older browsers, you get a heading and always-visible content. In modern browsers, you get an expand-and-collapse component. Progressive enhancement is baked right in.\n\nThe CSS scroll-behavior property lets you animate scrolling to anchor links.\n/**\n * Smooth scrolling on the whole document\n */\nhtml {\n\tscroll-behavior: smooth;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n\thtml {\n\t\tscroll-behavior: auto;\n\t}\n}\nIn older and unsupported browsers (I’m looking at you, Safari!), anchor links jump to the location. In modern browsers, you can a nice animated scroll effect. Progressive enhancement is baked right in!\n\nAnd, if someone has prefers reduced motion, an accessibility setting, enabled in their operating system, you can also disable it with a single line of CSS.\n\nProvide fallback/loading content\n\nIf you’re pulling data in from an API, you can provide alternative content while you’re waiting for it to load.\n\nFor example, if you’re using the GitHub API to get and render a list of your top repositories on Github, you might include a link to your GitHub profile as the default HTML.\n<div id=\"github\">\n\t<p><a href=\"https://github.com/cferdinandi\">🐙🐱 View my Profile on GitHub</a></p>\n</div>\nWhen the API returns data, you can wipe the content out and replace it with dynamically rendered HTML.\n\nThis works for any API-driven content that also provides an alternative view elsewhere, and takes about 15 seconds worth of effort to implement.\n\nProgressive enhancement is for everyone\n\nIf you work in tech, you know that eventually things break. Sometimes its your fault. Sometimes things just go wrong.\n\nProgressive enhancement adds what Jeremy Keith calls “fault tolerance.”\n\nIf you care about quality engineering, you want as much fault tolerance in the things you build as possible.",
      "date_published": "2022-03-02T15:30:00.000Z",
      "date_modified": "2022-03-02T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "98fa0026345bbab2cca15980705b559144e053253a3fa0697aa22db8e241bc61.html"
      }
    },
    {
      "id": "https://gomakethings.com/how-to-write-good-comments/",
      "url": "https://gomakethings.com/how-to-write-good-comments/",
      "title": "How to write good comments",
      "summary": "Dr. Kate Compton shared this delightful little one-sentence gem about how to write good comments on Twitter last week…\n Programming pro tip: In your comments, write what you did and why, record your level of petulance (REALLY) and the StackOverflow link that made you realize something\n She also shared a sample comment, which I’ve converted to JSDoc style.\n/** * Copy into the local scope * NOTE: this has issues with scope for eval'ing list comprehensions, which sucks * {@link https://stackoverflow.",
      "content_html": "<p>Dr. Kate Compton shared <a href=\"https://twitter.com/GalaxyKate/status/1497733203611852803\">this delightful little one-sentence gem about how to write good comments</a> on Twitter last week&hellip;</p>\n\n<blockquote>\n<p>Programming pro tip: In your comments, write what you did and why, record your level of petulance (REALLY) and the StackOverflow link that made you realize something</p>\n</blockquote>\n\n<p>She also shared a sample comment, which I&rsquo;ve <a href=\"https://gomakethings.com/documenting-javascript/\">converted to JSDoc style</a>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Copy into the local scope\n</span><span class=\"cm\"> * NOTE: this has issues with scope for eval&#39;ing list comprehensions, which sucks\n</span><span class=\"cm\"> * {@link https://stackoverflow.com/questions/45194934/eval-fails-in-list-comprehension}\n</span><span class=\"cm\"> */</span>\n</code></pre></div>\n<p>I love it!</p>",
      "content_text": "Dr. Kate Compton shared this delightful little one-sentence gem about how to write good comments on Twitter last week…\n\n\nProgramming pro tip: In your comments, write what you did and why, record your level of petulance (REALLY) and the StackOverflow link that made you realize something\n\n\nShe also shared a sample comment, which I’ve converted to JSDoc style.\n/**\n * Copy into the local scope\n * NOTE: this has issues with scope for eval'ing list comprehensions, which sucks\n * {@link https://stackoverflow.com/questions/45194934/eval-fails-in-list-comprehension}\n */\n\nI love it!",
      "date_published": "2022-03-01T15:30:00.000Z",
      "date_modified": "2022-03-01T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "f8b3cbbc5320a1e125bd6af489a754b71062d71fc99bcc1853b23dcb08de29a2.html"
      }
    },
    {
      "id": "https://gomakethings.com/vanilla-js-projects/",
      "url": "https://gomakethings.com/vanilla-js-projects/",
      "title": "Vanilla JS Projects",
      "summary": "If you need a break from everything going on right now, I just released Vanilla JS Projects, a collection of free self-paced JavaScript projects.\nEach project is broken up into 3-4 smaller mini-projects that build on each other. Each part includes a few short lessons and a template to get you started.\nDepending on your comfort level, you can…\n Do It Yourself (DIY). You can try to complete the project on your own, then come back and watch me explain my approach.",
      "content_html": "<p>If you need a break from everything going on right now, I just released <a href=\"https://vanillajsprojects.com\">Vanilla JS Projects</a>, a collection of free self-paced JavaScript projects.</p>\n\n<p>Each project is broken up into 3-4 smaller mini-projects that build on each other. Each part includes a few short lessons and a template to get you started.</p>\n\n<p>Depending on your comfort level, you can&hellip;</p>\n\n<ol>\n<li><strong>Do It Yourself (DIY).</strong> You can try to complete the project on your own, then come back and watch me explain my approach.</li>\n<li><strong>Code Along.</strong> If you&rsquo;d prefer, you can code along with me as I walk through my solution.</li>\n</ol>\n\n<p>You can also mix-and-match approaches depending on how you feel about any particular project.</p>\n\n<p><strong>Grab your free vanilla JS Projects starter bundle at <a href=\"https://vanillajsprojects.com\">vanillaJSprojects.com</a>.</strong> And if you like it, I&rsquo;d be delighted if you shared with others.</p>",
      "content_text": "If you need a break from everything going on right now, I just released Vanilla JS Projects, a collection of free self-paced JavaScript projects.\n\nEach project is broken up into 3-4 smaller mini-projects that build on each other. Each part includes a few short lessons and a template to get you started.\n\nDepending on your comfort level, you can…\n\n\nDo It Yourself (DIY). You can try to complete the project on your own, then come back and watch me explain my approach.\nCode Along. If you’d prefer, you can code along with me as I walk through my solution.\n\n\nYou can also mix-and-match approaches depending on how you feel about any particular project.\n\nGrab your free vanilla JS Projects starter bundle at vanillaJSprojects.com. And if you like it, I’d be delighted if you shared with others.",
      "date_published": "2022-02-28T15:30:00.000Z",
      "date_modified": "2022-02-28T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "396cb2c00a218bd68b208908ba9b572f1be0d0e1015ff2bcc76ea9a19fc2a5a2.html"
      }
    },
    {
      "id": "https://gomakethings.com/interview-with-a-senior-javascript-developer-in-2022/",
      "url": "https://gomakethings.com/interview-with-a-senior-javascript-developer-in-2022/",
      "title": "Interview with a senior JavaScript developer in 2022",
      "summary": "Everything is terrible right now. If you need a break, this satirical interview with a JS developer in 2022 is one of the most painfully accurate and funny things I’ve seen in a while.\n Some of my favorite quotes…\n “Yea, we use React! Well, we actually use Preact. We actually use Svelte. We actually went back to vanilla JavaScript…” “At least you know it’s bad…” “jQuery? What are you, 5?",
      "content_html": "<p>Everything is terrible right now. If you need a break, <a href=\"https://www.youtube.com/watch?v=Uo3cL4nrGOk\">this satirical interview with a JS developer in 2022</a> is one of the most painfully accurate and funny things I&rsquo;ve seen in a while.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/Uo3cL4nrGOk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<p>Some of my favorite quotes&hellip;</p>\n\n<ul>\n<li>&ldquo;Yea, we use React! Well, we actually use Preact. We actually use Svelte. We actually went back to vanilla JavaScript&hellip;&rdquo;</li>\n<li>&ldquo;At least you know it&rsquo;s bad&hellip;&rdquo;</li>\n<li>&ldquo;jQuery? What are you, 5? We use JJQuery.&rdquo;</li>\n<li>&ldquo;It&rsquo;s such a messy language. We use it for our website, desktop app, mobile app, the fridge, the Tesla&hellip;&rdquo;</li>\n</ul>\n\n<p>If you need a laugh amid the sea of awful, <a href=\"https://www.youtube.com/watch?v=Uo3cL4nrGOk\">take a few minutes to watch the whole thing</a>.</p>",
      "content_text": "Everything is terrible right now. If you need a break, this satirical interview with a JS developer in 2022 is one of the most painfully accurate and funny things I’ve seen in a while.\n\n\n\nSome of my favorite quotes…\n\n\n“Yea, we use React! Well, we actually use Preact. We actually use Svelte. We actually went back to vanilla JavaScript…”\n“At least you know it’s bad…”\n“jQuery? What are you, 5? We use JJQuery.”\n“It’s such a messy language. We use it for our website, desktop app, mobile app, the fridge, the Tesla…”\n\n\nIf you need a laugh amid the sea of awful, take a few minutes to watch the whole thing.",
      "date_published": "2022-02-24T15:30:00.000Z",
      "date_modified": "2022-02-24T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "7d1ab8f1f923d254e172b7685b9808e0dbf3e73189e3b31879058272b7049325.html"
      }
    },
    {
      "id": "https://gomakethings.com/how-to-make-mpas-that-are-as-fast-as-spas/",
      "url": "https://gomakethings.com/how-to-make-mpas-that-are-as-fast-as-spas/",
      "title": "How to make MPAs that are as fast as SPAs",
      "summary": "Yesterday, I wrote about how SPAs were a mistake. Today, I want to talk about how you can build multi-page apps (or, you know, regular websites) that are as fast as SPAs.\nLet’s dig in!\nA quick summary The sites and apps I build are absurdly fast. They load nearly instantly.\nEven on spotty 3G connections on the other side of the world, where many of my students live, things still load really quickly (like, 3 seconds or less fast).",
      "content_html": "<p>Yesterday, I wrote about how <a href=\"https://gomakethings.com/spas-were-a-mistake/\">SPAs were a mistake</a>. Today, I want to talk about how you can build multi-page apps (or, you know, regular websites) that are as fast as SPAs.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"a-quick-summary\">A quick summary</h2>\n\n<p>The sites and apps I build are absurdly fast. They load nearly instantly.</p>\n\n<p>Even on spotty 3G connections on the other side of the world, where many of my students live, things still load really quickly (like, 3 seconds or less fast). And I do it from cheap, shared, $5 a month hosting.</p>\n\n<p>Here&rsquo;s a quick high-level summary of what I do&hellip;</p>\n\n<ol>\n<li>Serve pre-rendered, mostly static HTML.</li>\n<li>Inline everything, including CSS and JavaScript.</li>\n<li>Use mostly platform-native JavaScript, and as little of it as possible.</li>\n<li>Minify and gzip all the things.</li>\n<li>Lean heavily on service workers.</li>\n</ol>\n\n<p>Lets take a closer look at each of these.</p>\n\n<h2 id=\"serve-pre-rendered-mostly-static-html\">Serve pre-rendered, mostly static HTML</h2>\n\n<p>All of my sites are powered by <a href=\"https://gomakethings.com/series/hugo-and-static-site-generators/\">Hugo, a static-site generator</a>.</p>\n\n<p>When you request any page from any of my sites, or from the courses portal that students have access to, my cheap, shared, $5-a-month server grabs an already-rendered HTML file and immediately sends it back.</p>\n\n<p>With the exception of the course portal, all of the content is already there, hard-coded into the page and ready to get displayed by your browser. It reduces the server response time dramatically, because the server barely has to do any work.</p>\n\n<p>With dynamically generated sites (powered by WordPress, PHP, Node, and so on), content from a database gets mashed together with template files in real time.</p>\n\n<p>Caching can help a lot with this, but flat HTML files are just so absurdly fast.</p>\n\n<h2 id=\"inline-everything-including-css-and-javascript\">Inline everything, including CSS and JavaScript</h2>\n\n<p>Severs respond to HTTP requests in 14kb chunks.</p>\n\n<p>If you have, for example, a 250kb image, 18 small packets of data will be sent one-at-a-time for it: 17 packets 14kb in size, plus one not-quite-12kb one.</p>\n\n<p>Each HTTP request adds a bit of latency to the rendering process, as browsers and servers do a little handshake dance with each other.</p>\n\n<p>Because my HTML, CSS, and JavaScript are all so small (more on that shortly), their combined weight is often under 14kb. Inlining everything into a single HTML file instead of using external CSS and JavaScript files means that everything the browser needs to start rendering gets sent in a single HTTP request.</p>\n\n<p>This dramatically reduces the <em>time to first render</em> for my sites.</p>\n\n<p>You request a page, you get back a single HTTP request, and the browser goes off and does its thing. <a href=\"https://gomakethings.com/inlining-literally-everything-for-better-performance/\">Here&rsquo;s a bit more detail about how I implement this.</a></p>\n\n<h2 id=\"use-mostly-platform-native-javascript-and-as-little-of-it-as-possible\">Use mostly platform-native JavaScript, and as little of it as possible</h2>\n\n<p>One of the ways I keep my combined HTML + CSS + JavaScript size so damn small is by using mostly platform-native JavaScript.</p>\n\n<p>The lack of dependencies means less code to ship and load in the browser. Over time, as modern JS and CSS have gotten more powerful, that footprint has gotten even smaller.</p>\n\n<p>I used to use a JS plugin for animating scrolling to anchor links. <a href=\"https://gomakethings.com/smooth-scrolling-links-with-only-css/\">CSS handles that with one line of code now.</a> I used to use a library for responsive iframe embeds. <a href=\"https://gomakethings.com/responsive-iframes-with-the-css-aspect-ratio-property/\">Modern CSS does the same thing in just three lines of code.</a></p>\n\n<p><a href=\"https://vanillajsguides.com/es-modules/\">I use ES modules to create tiny bundles of JS</a> that I can load only on the pages that need them. Modules let me reuse shared snippets across pages <em>without</em> having to copy/paste/repeat, which would be an unmaintainable nightmare.</p>\n\n<h2 id=\"minify-and-gzip-all-the-things\">Minify and gzip all the things</h2>\n\n<p>I tend to be very generous with <a href=\"https://gomakethings.com/documenting-javascript/\">inline documentation in my code</a>.</p>\n\n<p>It&rsquo;s really helpful when I go back and look at some code I wrote a while ago to have a bunch of comments explaining what it does and why it does it. But all of those comments add a bunch of weight.</p>\n\n<p>I <a href=\"https://gomakethings.com/do-you-need-build-tools/\">minify all of the code</a> that gets shipped in production. A third-party tools removes all of the comments and white space, and converts my verbose, easy-to-understand variable names into short one-letter versions that only robots understand.</p>\n\n<p>This reduces file size by 30 percent or more!</p>\n\n<p>I also <a href=\"https://gomakethings.com/wtf-is-gzipping-and-how-is-it-different-from-minification/\">have my server configured to gzip all-the-things</a>. The <code>.gzip</code> format is a compressed file format, a lot like <code>.zip</code>. It reduces the size of your files by, on average, 70 percent.</p>\n\n<p>The combination of minification and gzipping is what results in all of my HTML files being under 14kb.</p>\n\n<h2 id=\"lean-heavily-on-service-workers\">Lean heavily on service workers</h2>\n\n<p><a href=\"https://vanillajsguides.com/service-workers/\">Service workers are like magic pixie dust</a> on the sites I build.</p>\n\n<p>For my static websites, they add resilience. I cache HTML pages as the user browses. If they ever lose their connection, the cached pages are sent from the service worker instead of the network, so they can still use and access the site.</p>\n\n<p>I also cache my custom fonts, and any images, and always load those from the service worker cache, removing a bunch of network calls in the process. These assets load instantly after they&rsquo;re cached.</p>\n\n<p>The student portal, where learners access their <a href=\"https://vanillajsguides.com\">courses</a> and <a href=\"https://vanillajsacademy.com\">workshops</a>, is dynamically rendered with JavaScript. I make an API call to get their purchases, and render the content they have access to into the UI.</p>\n\n<p>Service workers cache those API calls for a short period of time, and load API responses from cache instead of the network.</p>\n\n<p>After that initial API call, all subsequent page loads are instant, just like a SPA would be! No, seriously. <a href=\"https://vimeo.com/680472206/85dab4e10d\">Here&rsquo;s a video I took of me navigating through the portal.</a></p>\n\n<iframe src=\"https://player.vimeo.com/video/680472206?h=85dab4e10d\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n\n<p>And, if the user loses their connection, the API call is cached and they can continue to use the site while offline!</p>\n\n<h2 id=\"mpas-ftw\">MPAs FTW!</h2>\n\n<p>Using a traditional &ldquo;just load separate HTML files&rdquo; approach to web development instead of using SPAs has allowed me to dramatically reduce the complexity of my development process, and provide a better and more resilient experience to my users.</p>\n\n<p>It&rsquo;s a no-brainer win-win solution. I&rsquo;d love to see a shift back to MPAs become the norm in our industry again!</p>",
      "content_text": "Yesterday, I wrote about how SPAs were a mistake. Today, I want to talk about how you can build multi-page apps (or, you know, regular websites) that are as fast as SPAs.\n\nLet’s dig in!\n\nA quick summary\n\nThe sites and apps I build are absurdly fast. They load nearly instantly.\n\nEven on spotty 3G connections on the other side of the world, where many of my students live, things still load really quickly (like, 3 seconds or less fast). And I do it from cheap, shared, $5 a month hosting.\n\nHere’s a quick high-level summary of what I do…\n\n\nServe pre-rendered, mostly static HTML.\nInline everything, including CSS and JavaScript.\nUse mostly platform-native JavaScript, and as little of it as possible.\nMinify and gzip all the things.\nLean heavily on service workers.\n\n\nLets take a closer look at each of these.\n\nServe pre-rendered, mostly static HTML\n\nAll of my sites are powered by Hugo, a static-site generator.\n\nWhen you request any page from any of my sites, or from the courses portal that students have access to, my cheap, shared, $5-a-month server grabs an already-rendered HTML file and immediately sends it back.\n\nWith the exception of the course portal, all of the content is already there, hard-coded into the page and ready to get displayed by your browser. It reduces the server response time dramatically, because the server barely has to do any work.\n\nWith dynamically generated sites (powered by WordPress, PHP, Node, and so on), content from a database gets mashed together with template files in real time.\n\nCaching can help a lot with this, but flat HTML files are just so absurdly fast.\n\nInline everything, including CSS and JavaScript\n\nSevers respond to HTTP requests in 14kb chunks.\n\nIf you have, for example, a 250kb image, 18 small packets of data will be sent one-at-a-time for it: 17 packets 14kb in size, plus one not-quite-12kb one.\n\nEach HTTP request adds a bit of latency to the rendering process, as browsers and servers do a little handshake dance with each other.\n\nBecause my HTML, CSS, and JavaScript are all so small (more on that shortly), their combined weight is often under 14kb. Inlining everything into a single HTML file instead of using external CSS and JavaScript files means that everything the browser needs to start rendering gets sent in a single HTTP request.\n\nThis dramatically reduces the time to first render for my sites.\n\nYou request a page, you get back a single HTTP request, and the browser goes off and does its thing. Here’s a bit more detail about how I implement this.\n\nUse mostly platform-native JavaScript, and as little of it as possible\n\nOne of the ways I keep my combined HTML + CSS + JavaScript size so damn small is by using mostly platform-native JavaScript.\n\nThe lack of dependencies means less code to ship and load in the browser. Over time, as modern JS and CSS have gotten more powerful, that footprint has gotten even smaller.\n\nI used to use a JS plugin for animating scrolling to anchor links. CSS handles that with one line of code now. I used to use a library for responsive iframe embeds. Modern CSS does the same thing in just three lines of code.\n\nI use ES modules to create tiny bundles of JS that I can load only on the pages that need them. Modules let me reuse shared snippets across pages without having to copy/paste/repeat, which would be an unmaintainable nightmare.\n\nMinify and gzip all the things\n\nI tend to be very generous with inline documentation in my code.\n\nIt’s really helpful when I go back and look at some code I wrote a while ago to have a bunch of comments explaining what it does and why it does it. But all of those comments add a bunch of weight.\n\nI minify all of the code that gets shipped in production. A third-party tools removes all of the comments and white space, and converts my verbose, easy-to-understand variable names into short one-letter versions that only robots understand.\n\nThis reduces file size by 30 percent or more!\n\nI also have my server configured to gzip all-the-things. The .gzip format is a compressed file format, a lot like .zip. It reduces the size of your files by, on average, 70 percent.\n\nThe combination of minification and gzipping is what results in all of my HTML files being under 14kb.\n\nLean heavily on service workers\n\nService workers are like magic pixie dust on the sites I build.\n\nFor my static websites, they add resilience. I cache HTML pages as the user browses. If they ever lose their connection, the cached pages are sent from the service worker instead of the network, so they can still use and access the site.\n\nI also cache my custom fonts, and any images, and always load those from the service worker cache, removing a bunch of network calls in the process. These assets load instantly after they’re cached.\n\nThe student portal, where learners access their courses and workshops, is dynamically rendered with JavaScript. I make an API call to get their purchases, and render the content they have access to into the UI.\n\nService workers cache those API calls for a short period of time, and load API responses from cache instead of the network.\n\nAfter that initial API call, all subsequent page loads are instant, just like a SPA would be! No, seriously. Here’s a video I took of me navigating through the portal.\n\n\n\nAnd, if the user loses their connection, the API call is cached and they can continue to use the site while offline!\n\nMPAs FTW!\n\nUsing a traditional “just load separate HTML files” approach to web development instead of using SPAs has allowed me to dramatically reduce the complexity of my development process, and provide a better and more resilient experience to my users.\n\nIt’s a no-brainer win-win solution. I’d love to see a shift back to MPAs become the norm in our industry again!",
      "date_published": "2022-02-23T15:30:00.000Z",
      "date_modified": "2022-02-23T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "239864f22f15cb7979487ce129c30fa4c7ca7b787f13abc894be7e3c239ddae1.html"
      }
    },
    {
      "id": "https://gomakethings.com/spas-were-a-mistake/",
      "url": "https://gomakethings.com/spas-were-a-mistake/",
      "title": "SPAs were a mistake",
      "summary": "For years, a trend in our industry has been to build single-page apps, or SPAs.\nWith an SPA, the entire site or app lives in a single HTML file. After the initial load, everything about the app is handled with JavaScript. This is, in theory, supposed to result in web apps that feel as fast and snappy as native apps.\nToday, I want to explore why that’s nonsense. Let’s dig in!",
      "content_html": "<p>For years, a trend in our industry has been to build single-page apps, or SPAs.</p>\n\n<p>With an SPA, the entire site or app lives in a single HTML file. After the initial load, everything about the app is handled with JavaScript. This is, in theory, supposed to result in web apps that feel as fast and snappy as native apps.</p>\n\n<p>Today, I want to explore why that&rsquo;s nonsense. Let&rsquo;s dig in!</p>\n\n<h2 id=\"when-spas-make-sense\">When SPAs make sense</h2>\n\n<p>First, let me get this out of the way: there are a few narrow examples of where SPAs make sense and are the right choice.</p>\n\n<p>YouTube is a great example. Being able to keep a video playing while you explore other videos is fantastic. Same goes for audio websites like SoundCloud, where you can keep a song playing as you navigate around and explore other artists. So&hellip; media sites, really.</p>\n\n<p>Generally speaking, though, SPAs as an industry trend or &ldquo;best practice&rdquo; were mistake.</p>\n\n<h2 id=\"we-keep-reinventing-the-wheel\">We keep reinventing the wheel</h2>\n\n<p>Browsers give you a ton of stuff for free, built right in, out-of-the-box. SPAs break all that, and force you to recreate it yourself with JavaScript. Most developers do it wrong, and for the ones who do it right, it results in a ton of extra code to recreate features the browser already gave you for free.</p>\n\n<p>With an SPA, when someone clicks a link you need to&hellip;</p>\n\n<ol>\n<li>Determine if the link points to the current site or an external location.</li>\n<li>If it&rsquo;s the current site, match the URL path to content.</li>\n<li>If the content is API-driven, get it via a <code>fetch()</code> request.</li>\n<li><a href=\"https://gomakethings.com/how-to-replace-the-current-url-in-the-browsers-history-with-the-vanilla-js-replacestate-method/\">Update the URL path and browser history</a>, without triggering a page reload.</li>\n<li>Render the content onto the page.</li>\n<li>If there&rsquo;s an anchor link in the URL, scroll to the anchored element.</li>\n<li>Shift focus to either the top of the document, or the anchored element (most SPAs get this wrong).</li>\n<li>Announce the page load/content change to screen reader users (many SPAs also get this wrong).</li>\n<li>If any scripts you&rsquo;re running rely on a specific DOM structure, or are attached to specific elements, reinitialize them.</li>\n</ol>\n\n<p>You also need to detect when the users clicks the browser&rsquo;s forward/backward buttons, and repeat most of the steps above in response.</p>\n\n<p>Pretty much all of this stuff is just done for you by the browser with a traditional MPA/website. Some of it is easy. Some of it is complicated and nuanced, or easy to get wrong, or easy to forget. All of it adds a lot of code to your site.</p>\n\n<p>And as a result, we build things that are fragile and easily broken. We get the &ldquo;improved user experience&rdquo; that led us down this path when all of the stars line up perfectly, and a bunch of edge case situations where the UX is much, much worse.</p>\n\n<p>SPAs were a mistake. Tomorrow, I&rsquo;ll show you how we can build MPAs that are just as performant as SPAs, with less complexity and fragility.</p>",
      "content_text": "For years, a trend in our industry has been to build single-page apps, or SPAs.\n\nWith an SPA, the entire site or app lives in a single HTML file. After the initial load, everything about the app is handled with JavaScript. This is, in theory, supposed to result in web apps that feel as fast and snappy as native apps.\n\nToday, I want to explore why that’s nonsense. Let’s dig in!\n\nWhen SPAs make sense\n\nFirst, let me get this out of the way: there are a few narrow examples of where SPAs make sense and are the right choice.\n\nYouTube is a great example. Being able to keep a video playing while you explore other videos is fantastic. Same goes for audio websites like SoundCloud, where you can keep a song playing as you navigate around and explore other artists. So… media sites, really.\n\nGenerally speaking, though, SPAs as an industry trend or “best practice” were mistake.\n\nWe keep reinventing the wheel\n\nBrowsers give you a ton of stuff for free, built right in, out-of-the-box. SPAs break all that, and force you to recreate it yourself with JavaScript. Most developers do it wrong, and for the ones who do it right, it results in a ton of extra code to recreate features the browser already gave you for free.\n\nWith an SPA, when someone clicks a link you need to…\n\n\nDetermine if the link points to the current site or an external location.\nIf it’s the current site, match the URL path to content.\nIf the content is API-driven, get it via a fetch() request.\nUpdate the URL path and browser history, without triggering a page reload.\nRender the content onto the page.\nIf there’s an anchor link in the URL, scroll to the anchored element.\nShift focus to either the top of the document, or the anchored element (most SPAs get this wrong).\nAnnounce the page load/content change to screen reader users (many SPAs also get this wrong).\nIf any scripts you’re running rely on a specific DOM structure, or are attached to specific elements, reinitialize them.\n\n\nYou also need to detect when the users clicks the browser’s forward/backward buttons, and repeat most of the steps above in response.\n\nPretty much all of this stuff is just done for you by the browser with a traditional MPA/website. Some of it is easy. Some of it is complicated and nuanced, or easy to get wrong, or easy to forget. All of it adds a lot of code to your site.\n\nAnd as a result, we build things that are fragile and easily broken. We get the “improved user experience” that led us down this path when all of the stars line up perfectly, and a bunch of edge case situations where the UX is much, much worse.\n\nSPAs were a mistake. Tomorrow, I’ll show you how we can build MPAs that are just as performant as SPAs, with less complexity and fragility.",
      "date_published": "2022-02-22T15:30:00.000Z",
      "date_modified": "2022-02-22T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "c6e34bb49b91f0244ffa866c7dbe97ff4b7e5a08005f2be57e88ce6b898b0e80.html"
      }
    },
    {
      "id": "https://gomakethings.com/how-to-update-the-url-of-a-page-without-causing-a-reload-using-vanilla-javascript/",
      "url": "https://gomakethings.com/how-to-update-the-url-of-a-page-without-causing-a-reload-using-vanilla-javascript/",
      "title": "How to update the URL of a page without causing a reload using vanilla JavaScript",
      "summary": "Yesterday, we looked at how to build a vanilla JavaScript search feature for a static website. At the end, I mentioned…\n Tomorrow, I’ll show you how I update the URL with the search query, and run a search automatically on page load if there’s a query in the URL.\n Well, today is tomorrow, so let’s dig in!\nNote: If you haven’t yet, you should probably read yesterday’s post first, or today’s won’t make much sense.",
      "content_html": "<p>Yesterday, we looked at <a href=\"https://gomakethings.com/how-to-create-a-search-page-for-a-static-website-with-vanilla-js/\">how to build a vanilla JavaScript search feature for a static website</a>. At the end, I mentioned&hellip;</p>\n\n<blockquote>\n<p>Tomorrow, I’ll show you how I update the URL with the search query, and run a search automatically on page load if there’s a query in the URL.</p>\n</blockquote>\n\n<p>Well, today is tomorrow, so let&rsquo;s dig in!</p>\n\n<p><em><strong>Note:</strong> If you haven&rsquo;t yet, you should probably read yesterday&rsquo;s post first, or today&rsquo;s won&rsquo;t make much sense.</em></p>\n\n<h2 id=\"updating-the-url\">Updating the URL</h2>\n\n<p>In our <code>search()</code> function, we create an array of regex patterns, get an array of matching items (sorted by how many matches they have), and then render them into the UI.</p>\n\n<p>Let&rsquo;s create another function, <code>updateURL()</code>, to update the URL for us. We&rsquo;ll pass in the search <code>query</code> as an argument.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Search for matches\n</span><span class=\"cm\"> * @param  {String} query The term to search for\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">search</span> <span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// ...\n</span><span class=\"c1\"></span>\n\t<span class=\"c1\">// Display the results\n</span><span class=\"c1\"></span>\t<span class=\"nx\">showResults</span><span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">);</span>\n\n\t<span class=\"c1\">// Update the URL\n</span><span class=\"c1\"></span>\t<span class=\"nx\">updateURL</span><span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We&rsquo;re going to use <a href=\"https://gomakethings.com/how-to-update-the-browser-url-without-refreshing-the-page-using-the-vanilla-js-history-api/\">the <code>history.pushState()</code> method</a> to update our URL.</p>\n\n<p>This creates a new entry in the browser&rsquo;s history (and updates the URL) <em>without</em> causing the page to reload. It accepts three arguments: the browser <code>state</code>, a <code>title</code> to use in the <code>document</code>, and the <code>url</code>.</p>\n\n<p>We&rsquo;ll use the current <code>history.state</code>, no need to replace anything. We&rsquo;ll also use the current <code>document.title</code>.</p>\n\n<p>For the <code>url</code>, we&rsquo;ll combine the <code>location.origin</code> and <code>location.pathname</code>, then append the <code>?s</code> query string parameter, and use the <code>query</code> for its value. We&rsquo;ll pass the <code>query</code> into the <code>encodeURI()</code> method to encode it.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Update the URL with a query string for the search string\n</span><span class=\"cm\"> * @param  {String} query The search query\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">updateURL</span> <span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Create the properties\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">history</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">;</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">title</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">;</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">origin</span> <span class=\"o\">+</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">pathname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;?s=&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">encodeURI</span><span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Finally, we can pass all three into the <code>history.pushState()</code> method to update the URL.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Update the URL with a query string for the search string\n</span><span class=\"cm\"> * @param  {String} query The search query\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">updateURL</span> <span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Create the properties\n</span><span class=\"c1\"></span>\t<span class=\"c1\">// ...\n</span><span class=\"c1\"></span>\n\t<span class=\"c1\">// Update the URL\n</span><span class=\"c1\"></span>\t<span class=\"nx\">history</span><span class=\"p\">.</span><span class=\"nx\">pushState</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">title</span><span class=\"p\">,</span> <span class=\"nx\">url</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2 id=\"running-a-search-on-page-load\">Running a search on page load</h2>\n\n<p>If the URL has an <code>s</code> query string parameter when the page loads, we should also run a search immediately. This lets users bookmark search pages for later.</p>\n\n<p>First, we&rsquo;ll create an <code>onload()</code> function to run immediately with the script.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Create a submit handler\n</span><span class=\"c1\"></span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;submit&#39;</span><span class=\"p\">,</span> <span class=\"nx\">submitHandler</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Check for query strings onload\n</span><span class=\"c1\"></span><span class=\"nx\">onload</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>We&rsquo;ll use <a href=\"https://gomakethings.com/getting-values-from-a-url-with-vanilla-js/\">the <code>new URLSearchParams()</code> constructor</a> to create a <code>URLSearchParams</code> object from the <code>location.search</code> property.</p>\n\n<p>Then, we&rsquo;ll use the <code>URLSearchParams.get()</code> method to look for a query string parameter with a key of <code>s</code>.</p>\n\n<p>If one is <em>not</em> found, we&rsquo;ll use the <code>return</code> operator to end our function.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * If there&#39;s a query string search term, search it on page load\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onload</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">query</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">URLSearchParams</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">).</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;s&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">query</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>If a <code>query</code> exists, we&rsquo;ll update the <code>input.value</code> property with it so that the search field contains the search <code>query</code>. Then, we&rsquo;ll pass the <code>query</code> into the <code>search()</code> function to run a search.</p>\n\n<p>The <code>URLSearchParams.get()</code> method automatically decodes the parameter for us, so we don&rsquo;t need to worry about that.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * If there&#39;s a query string search term, search it on page load\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onload</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">query</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">URLSearchParams</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">).</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;s&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">query</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">query</span><span class=\"p\">;</span>\n\t<span class=\"nx\">search</span><span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now, when someone reloads or revists a search page, a new search will automatically run.</p>",
      "content_text": "Yesterday, we looked at how to build a vanilla JavaScript search feature for a static website. At the end, I mentioned…\n\n\nTomorrow, I’ll show you how I update the URL with the search query, and run a search automatically on page load if there’s a query in the URL.\n\n\nWell, today is tomorrow, so let’s dig in!\n\nNote: If you haven’t yet, you should probably read yesterday’s post first, or today’s won’t make much sense.\n\nUpdating the URL\n\nIn our search() function, we create an array of regex patterns, get an array of matching items (sorted by how many matches they have), and then render them into the UI.\n\nLet’s create another function, updateURL(), to update the URL for us. We’ll pass in the search query as an argument.\n/**\n * Search for matches\n * @param  {String} query The term to search for\n */\nfunction search (query) {\n\n\t// ...\n\n\t// Display the results\n\tshowResults(results);\n\n\t// Update the URL\n\tupdateURL(query);\n\n}\n\nWe’re going to use the history.pushState() method to update our URL.\n\nThis creates a new entry in the browser’s history (and updates the URL) without causing the page to reload. It accepts three arguments: the browser state, a title to use in the document, and the url.\n\nWe’ll use the current history.state, no need to replace anything. We’ll also use the current document.title.\n\nFor the url, we’ll combine the location.origin and location.pathname, then append the ?s query string parameter, and use the query for its value. We’ll pass the query into the encodeURI() method to encode it.\n/**\n * Update the URL with a query string for the search string\n * @param  {String} query The search query\n */\nfunction updateURL (query) {\n\n\t// Create the properties\n\tlet state = history.state;\n\tlet title = document.title;\n\tlet url = window.location.origin + window.location.pathname + '?s=' + encodeURI(query);\n\n}\n\nFinally, we can pass all three into the history.pushState() method to update the URL.\n/**\n * Update the URL with a query string for the search string\n * @param  {String} query The search query\n */\nfunction updateURL (query) {\n\n\t// Create the properties\n\t// ...\n\n\t// Update the URL\n\thistory.pushState(state, title, url);\n\n}\n\nRunning a search on page load\n\nIf the URL has an s query string parameter when the page loads, we should also run a search immediately. This lets users bookmark search pages for later.\n\nFirst, we’ll create an onload() function to run immediately with the script.\n// Create a submit handler\nform.addEventListener('submit', submitHandler);\n\n// Check for query strings onload\nonload();\n\nWe’ll use the new URLSearchParams() constructor to create a URLSearchParams object from the location.search property.\n\nThen, we’ll use the URLSearchParams.get() method to look for a query string parameter with a key of s.\n\nIf one is not found, we’ll use the return operator to end our function.\n/**\n * If there's a query string search term, search it on page load\n */\nfunction onload () {\n\tlet query = new URLSearchParams(window.location.search).get('s');\n\tif (!query) return;\n}\n\nIf a query exists, we’ll update the input.value property with it so that the search field contains the search query. Then, we’ll pass the query into the search() function to run a search.\n\nThe URLSearchParams.get() method automatically decodes the parameter for us, so we don’t need to worry about that.\n/**\n * If there's a query string search term, search it on page load\n */\nfunction onload () {\n\tlet query = new URLSearchParams(window.location.search).get('s');\n\tif (!query) return;\n\tinput.value = query;\n\tsearch(query);\n}\n\nNow, when someone reloads or revists a search page, a new search will automatically run.",
      "date_published": "2022-02-18T15:30:00.000Z",
      "date_modified": "2022-02-18T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "0349a0ad09ea234b2017ef6ba7c16ebe31f00a34ee73624979a4040ba478b0b1.html"
      }
    },
    {
      "id": "https://gomakethings.com/how-to-create-a-search-page-for-a-static-website-with-vanilla-js/",
      "url": "https://gomakethings.com/how-to-create-a-search-page-for-a-static-website-with-vanilla-js/",
      "title": "How to create a search page for a static website with vanilla JS",
      "summary": "One of the biggest missing features from most static site generators (like Hugo, 11ty, and Jekyll, ) is that they lack built-in search.\nDatabase-driven platforms like WordPress make a server call and search the database to find matching content. Static websites have no database to query.\nToday, I’m going to share how I built the search functionality for my site with vanilla JS. Let’s dig in!\nQuick aside: done-for-you alternative If you don’t want to roll-your-own search functionality, Algolia and ElasticSearch are two done-for-you search vendors.",
      "content_html": "<p>One of the biggest missing features from most static site generators (like <a href=\"https://gohugo.io/\">Hugo</a>, <a href=\"https://www.11ty.io/\">11ty</a>, and <a href=\"https://jekyllrb.com/\">Jekyll</a>, ) is that they lack built-in search.</p>\n\n<p>Database-driven platforms like WordPress make a server call and search the database to find matching content. Static websites have no database to query.</p>\n\n<p>Today, I&rsquo;m going to share how I built <a href=\"https://gomakethings.com/search/\">the search functionality for my site</a> with vanilla JS. Let&rsquo;s dig in!</p>\n\n<h2 id=\"quick-aside-done-for-you-alternative\">Quick aside: done-for-you alternative</h2>\n\n<p>If you don&rsquo;t want to roll-your-own search functionality, <a href=\"https://www.algolia.com/\">Algolia</a> and <a href=\"https://www.elastic.co/\">ElasticSearch</a> are two done-for-you search vendors.</p>\n\n<p>They both offer free tiers, as well as paid versions with more advanced features.</p>\n\n<p>But, because I like to <del>do things the hard way</del> have more control over the user experience, I wrote my own search functionality instead of using one of them.</p>\n\n<h2 id=\"the-search-form\">The Search Form</h2>\n\n<p>My search functionality starts as a progressively enhanced search form.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">&#34;https://duckduckgo.com/&#34;</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">&#34;get&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;form-search&#34;</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">&#34;input-search&#34;</span><span class=\"p\">&gt;</span>Enter your search criteria:<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;q&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;input-search&#34;</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;hidden&#34;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;sites&#34;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;YourAwesomeWebsite.com&#34;</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>Search<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span></code></pre></div>\n<p>If the JavaScript fails (or the user tries to search before it loads), this will open up <a href=\"https://duckduckgo.com/\">Duck Duck Go</a> and search for articles only on my site.</p>\n\n<p>Be sure to replace <code>YourAwesomeWebsite.com</code> with the actual URL to your site.</p>\n\n<p>We&rsquo;ll also add two additional elements to the page. The <code>#search-results</code> element is where we&rsquo;ll inject the actual search results. The <code>#search-status</code> element is where we&rsquo;ll display the number of items found.</p>\n\n<p>We want this to announce to screen readers, so we&rsquo;ll also add the <code>[role=&quot;status&quot;]</code> attribute to it.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;search-status&#34;</span> <span class=\"na\">role</span><span class=\"o\">=</span><span class=\"s\">&#34;status&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;search-results&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span></code></pre></div>\n<h2 id=\"creating-a-search-index\">Creating a search index</h2>\n\n<p>In order to search your site, we need to create an index of content.</p>\n\n<p>The process for this varies from one static site generator to another, but the end result is the same. You want to generate an array of all of the searchable content on your site.</p>\n\n<p>Some people create an external JSON file for this, but I prefer to embed it as a JavaScript variable directly on the search page. it looks like this:</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">searchIndex</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s2\">&#34;My awesome article&#34;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">date</span><span class=\"o\">:</span> <span class=\"s2\">&#34;December 18, 2018&#34;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s2\">&#34;https://gomakethings.com/my-awesome-article&#34;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"s2\">&#34;The full text of the content...&#34;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">summary</span><span class=\"o\">:</span> <span class=\"s2\">&#34;A short summary or preview of the content (can also be a clipped version of the first few sentences)...&#34;</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"c1\">// More content...\n</span><span class=\"c1\"></span><span class=\"p\">];</span>\n</code></pre></div>\n<p>We can use this to both search for articles and generate results on the page.</p>\n\n<h2 id=\"creating-a-search-function\">Creating a search function</h2>\n\n<p>Next, let&rsquo;s create a function to actually <em>do</em> the searching. This can be <a href=\"https://gomakethings.com/the-many-ways-to-write-an-immediately-invoked-function-expression-iife-in-javascript/\">an IIFE</a> or a named function. We just want a way to <a href=\"https://gomakethings.com/how-scope-works-in-javascript/\">scope our code</a>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"c1\">// Code will go here...\n</span><span class=\"c1\"></span><span class=\"p\">})();</span>\n</code></pre></div>\n<p>Next, we need to get the needed elements from the DOM. We can do that with the <code>document.querySelector()</code> method.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Get the DOM elements\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#form-search&#39;</span><span class=\"p\">);</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#input-search&#39;</span><span class=\"p\">);</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">resultList</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#search-results&#39;</span><span class=\"p\">);</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">searchStatus</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#search-status&#39;</span><span class=\"p\">);</span>\n\n<span class=\"p\">})();</span>\n</code></pre></div>\n<p>If we can&rsquo;t find any of them, or if the <code>searchIndex</code> doesn&rsquo;t exist, we&rsquo;ll <code>return</code> to stop the function from doing anything else.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Get the DOM elements\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#form-search&#39;</span><span class=\"p\">);</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#input-search&#39;</span><span class=\"p\">);</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">resultList</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#search-results&#39;</span><span class=\"p\">);</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">searchStatus</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#search-status&#39;</span><span class=\"p\">);</span>\n\n\t<span class=\"c1\">// Make sure required content exists\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">form</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">input</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">resultList</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">searchStatus</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">searchIndex</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n<span class=\"p\">})();</span>\n</code></pre></div>\n<h2 id=\"running-a-search\">Running a search</h2>\n\n<p>Next, we need to detect when the user searches for something. To do that, we&rsquo;ll listen for <code>submit</code> events on the <code>form</code> element.</p>\n\n<p>(<em>The rest of the code all happens inside the IIFE, but I&rsquo;m sharing just the relevant stuff to make it easier to read.</em>)</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Create a submit handler\n</span><span class=\"c1\"></span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;submit&#39;</span><span class=\"p\">,</span> <span class=\"nx\">submitHandler</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>In the <code>submitHandler()</code> function, we&rsquo;ll use the <code>event.preventDefault()</code> method to stop the form from submitting to Duck Duck Go. Then, we&rsquo;ll pass the <code>input.value</code> into a <code>search()</code> function that will actually look for results.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Handle submit events\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">submitHandler</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\t<span class=\"nx\">search</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2 id=\"searching-for-results\">Searching for results</h2>\n\n<p>Here&rsquo;s where stuff gets a bit messy.</p>\n\n<p>Rather than search for complete phrases, we want to look at each word from the search query, and look for it in the titles and content of our articles. We want to ignore case, and we probably also want to ignore common words like <code>a</code>, <code>an</code>, and <code>the</code>.</p>\n\n<p>I use <a href=\"https://gomakethings.com/converting-strings-to-uppercase-and-lowercase-with-vanilla-javascript/\">the <code>String.toLowerCase()</code> method</a> to convert the <code>query</code> to lowercase. Then, I use <a href=\"https://gomakethings.com/getting-an-array-from-a-string-with-vanilla-js/\">the <code>String.split()</code> method</a> to convert it to an array, with each word as its own item.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Search for matches\n</span><span class=\"cm\"> * @param  {String} query The term to search for\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">search</span> <span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Create a regex for each query\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">regMap</span> <span class=\"o\">=</span> <span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">().</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Next, I created an array of <code>stopWords</code>: words that should be ignored. I found a list on the web, and modified it based on the type of content I have on my site.</p>\n\n<p>For example, I added <code>vanilla</code>, <code>javascript</code>, and <code>js</code> to my list, since almost every article I write includes those words heavily, making them meaningless.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">stopWords</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;an&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;and&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;are&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aren\\&#39;t&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;as&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;by&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;can&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cannot&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;can\\&#39;t&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;could&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;couldn\\&#39;t&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;how&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;isn\\&#39;t&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;it&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;its&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;it\\&#39;s&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;that&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;the&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;their&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;there&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;they&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;they\\&#39;re&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;them&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;to&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;too&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;us&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;very&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;was&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;we&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;well&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;were&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;what&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;whatever&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;when&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;whenever&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;where&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;with&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;would&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;yet&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;you&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;your&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;yours&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;yourself&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;yourselves&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;the&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;vanilla&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;javascript&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;js&#39;</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>Back in my <code>search()</code> function, I use <a href=\"https://gomakethings.com/what-array.filter-does-in-vanilla-js/\">the <code>Array.filter()</code> method</a> to remove any <code>word</code> that&rsquo;s an empty string or part of the <code>stopWords</code> array.</p>\n\n<p>I use <a href=\"https://gomakethings.com/how-to-check-for-an-item-in-an-array-with-vanilla-js/\">the <code>Array.includes()</code> method</a> to check if the <code>word</code> is in <code>stopWords</code>.</p>\n\n<p>Finally, I use <a href=\"https://gomakethings.com/what-array.map-does-in-vanilla-js/\">the <code>Array.map()</code> method</a> an <code>new RegExp()</code> constructor to create an array of regex searches from my <code>query</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Search for matches\n</span><span class=\"cm\"> * @param  {String} query The term to search for\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">search</span> <span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Create a regex for each query\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">regMap</span> <span class=\"o\">=</span> <span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">().</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">).</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">word</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"nx\">word</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"nx\">stopWords</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">word</span><span class=\"p\">);</span>\n\t<span class=\"p\">}).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">word</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"nx\">word</span><span class=\"p\">,</span> <span class=\"s1\">&#39;i&#39;</span><span class=\"p\">);</span>\n\t<span class=\"p\">});</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2 id=\"doing-the-actual-search\">Doing the actual search</h2>\n\n<p>Now that I have my regex patterns all setup, I can actually <em>do</em> the search.</p>\n\n<p>For this, I use <a href=\"https://gomakethings.com/using-array.reduce-in-vanilla-js/\">the <code>Array.reduce()</code> method</a> on my <code>searchIndex</code>. I want to create a new array containing just matching items. I also want to include a <code>priority</code> rating, so that more closing matching items are shown higher in the results.</p>\n\n<p>I pass in an empty array (<code>[]</code>) as my <em>accumulator</em>, which I assign to the <code>results</code> parameter.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Search for matches\n</span><span class=\"cm\"> * @param  {String} query The term to search for\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">search</span> <span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Create a regex for each query\n</span><span class=\"c1\"></span>\t<span class=\"c1\">// ...\n</span><span class=\"c1\"></span>\n\t<span class=\"c1\">// Get and sort the results\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"nx\">searchIndex</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">,</span> <span class=\"nx\">article</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"c1\">// Do stuff...\n</span><span class=\"c1\"></span>\t<span class=\"p\">},</span> <span class=\"p\">[]);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Inside the callback function, I create a <code>priority</code> variable with a value of <code>0</code>.</p>\n\n<p>Then, I loop through each item in my <code>regMap</code> using <a href=\"https://gomakethings.com/the-for...of-loop-in-vanilla-js/\">a <code>for...of</code> loop</a>. I use the <code>RegExp.test()</code> method to look for matches in the <code>article.title</code>, and <code>RegExp.match()</code> method to look for matches in the <code>article.content</code>.</p>\n\n<p>I give more weight to the <code>title</code> than content. If there&rsquo;s a match, I increase the <code>priority</code> by <code>100</code>. For every match in <code>content</code>, I increase the <code>priority</code> by <code>1</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Search for matches\n</span><span class=\"cm\"> * @param  {String} query The term to search for\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">search</span> <span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Create a regex for each query\n</span><span class=\"c1\"></span>\t<span class=\"c1\">// ...\n</span><span class=\"c1\"></span>\n\t<span class=\"c1\">// Get and sort the results\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"nx\">searchIndex</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">,</span> <span class=\"nx\">article</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t\t<span class=\"c1\">// Setup priority count\n</span><span class=\"c1\"></span>\t\t<span class=\"kd\">let</span> <span class=\"nx\">priority</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n\t\t<span class=\"c1\">// Assign priority\n</span><span class=\"c1\"></span>\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">reg</span> <span class=\"k\">of</span> <span class=\"nx\">regMap</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">reg</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">article</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"nx\">priority</span> <span class=\"o\">+=</span> <span class=\"mi\">100</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\t\t\t<span class=\"kd\">let</span> <span class=\"nx\">occurences</span> <span class=\"o\">=</span> <span class=\"nx\">article</span><span class=\"p\">.</span><span class=\"nx\">content</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"nx\">reg</span><span class=\"p\">);</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">occurences</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">priority</span> <span class=\"o\">+=</span> <span class=\"nx\">occurences</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\n\t<span class=\"p\">},</span> <span class=\"p\">[]);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>If <code>priority</code> is greater than <code>0</code>, I use the <code>Array.push()</code> method to add a new object (<code>{}</code>) to the <code>results</code> array.</p>\n\n<p>I include the <code>priority</code> and <code>article</code> as properties. Then, I <code>return</code> the <code>results</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Search for matches\n</span><span class=\"cm\"> * @param  {String} query The term to search for\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">search</span> <span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Create a regex for each query\n</span><span class=\"c1\"></span>\t<span class=\"c1\">// ...\n</span><span class=\"c1\"></span>\n\t<span class=\"c1\">// Get and sort the results\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"nx\">searchIndex</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">,</span> <span class=\"nx\">article</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t\t<span class=\"c1\">// Setup priority count\n</span><span class=\"c1\"></span>\t\t<span class=\"kd\">let</span> <span class=\"nx\">priority</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n\t\t<span class=\"c1\">// Assign priority\n</span><span class=\"c1\"></span>\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">reg</span> <span class=\"k\">of</span> <span class=\"nx\">regMap</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">reg</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">article</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"nx\">priority</span> <span class=\"o\">+=</span> <span class=\"mi\">100</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\t\t\t<span class=\"kd\">let</span> <span class=\"nx\">occurences</span> <span class=\"o\">=</span> <span class=\"nx\">article</span><span class=\"p\">.</span><span class=\"nx\">content</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"nx\">reg</span><span class=\"p\">);</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">occurences</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">priority</span> <span class=\"o\">+=</span> <span class=\"nx\">occurences</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\n\t\t<span class=\"c1\">// If any matches, push to results\n</span><span class=\"c1\"></span>\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">priority</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span>\n\t\t\t\t<span class=\"nx\">priority</span><span class=\"o\">:</span> <span class=\"nx\">priority</span><span class=\"p\">,</span>\n\t\t\t\t<span class=\"nx\">article</span><span class=\"o\">:</span> <span class=\"nx\">article</span>\n\t\t\t<span class=\"p\">});</span>\n\t\t<span class=\"p\">}</span>\n\n\t\t<span class=\"k\">return</span> <span class=\"nx\">results</span><span class=\"p\">;</span>\n\n\t<span class=\"p\">},</span> <span class=\"p\">[]);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Finally, I use <a href=\"https://gomakethings.com/array-sorting-basics-with-vanilla-javascript/\">the <code>Array.sort()</code> method</a> to order the <code>results</code> by article priority. Items with the highest <code>priority</code> show up first.</p>\n\n<p>Then, I pass the <code>results</code> into a <code>showResults()</code> method that renders them into the UI.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Search for matches\n</span><span class=\"cm\"> * @param  {String} query The term to search for\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">search</span> <span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Create a regex for each query\n</span><span class=\"c1\"></span>\t<span class=\"c1\">// ...\n</span><span class=\"c1\"></span>\n\t<span class=\"c1\">// Get and sort the results\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"nx\">searchIndex</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">,</span> <span class=\"nx\">article</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"c1\">// ...\n</span><span class=\"c1\"></span>\t<span class=\"p\">},</span> <span class=\"p\">[]).</span><span class=\"nx\">sort</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">article1</span><span class=\"p\">,</span> <span class=\"nx\">article2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"nx\">article2</span><span class=\"p\">.</span><span class=\"nx\">priority</span> <span class=\"o\">-</span> <span class=\"nx\">article1</span><span class=\"p\">.</span><span class=\"nx\">priority</span><span class=\"p\">;</span>\n\t<span class=\"p\">});</span>\n\n\t<span class=\"c1\">// Display the results\n</span><span class=\"c1\"></span>\t<span class=\"nx\">showResults</span><span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2 id=\"rendering-search-results\">Rendering search results</h2>\n\n<p>Inside the <code>showResults()</code> method, I do a quick check to see if their are any results to show.</p>\n\n<p>If there are, I inject a message into the <code>searchStatus</code> element that shares how many matches were found. This also gets read aloud by screen readers.</p>\n\n<p>Then, I use the <code>results</code> to create an HTML string with the <code>title</code> and a link to the article. The appearance of this varies from one site to another, but you can style it however you want.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Show the search results in the UI\n</span><span class=\"cm\"> * @param  {Array}  results The results to display\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">showResults</span> <span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">searchStatus</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"sb\">`&lt;p&gt;Found </span><span class=\"si\">${</span><span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"si\">}</span><span class=\"sb\"> matching articles&lt;/p&gt;`</span><span class=\"p\">;</span>\n\t\t<span class=\"nx\">resultList</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"nx\">myTemplate</span><span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>If there are no <code>results</code>, I clear the <code>resultList</code> element and show a message saying there were no matches.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Show the search results in the UI\n</span><span class=\"cm\"> * @param  {Array}  results The results to display\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">showResults</span> <span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">searchStatus</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"sb\">`&lt;p&gt;Found </span><span class=\"si\">${</span><span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"si\">}</span><span class=\"sb\"> matching articles&lt;/p&gt;`</span><span class=\"p\">;</span>\n\t\t<span class=\"nx\">resultList</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"nx\">myTemplate</span><span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">searchStatus</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;p&gt;Sorry, no matches were found.&lt;/p&gt;&#39;</span><span class=\"p\">;</span>\n\t\t<span class=\"nx\">resultList</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2 id=\"what-else\">What else?</h2>\n\n<p>Tomorrow, I&rsquo;ll show you how I update the URL with the search query, and run a search automatically on page load if there&rsquo;s a query in the URL.</p>\n\n<p>This let&rsquo;s people bookmark searches.</p>",
      "content_text": "One of the biggest missing features from most static site generators (like Hugo, 11ty, and Jekyll, ) is that they lack built-in search.\n\nDatabase-driven platforms like WordPress make a server call and search the database to find matching content. Static websites have no database to query.\n\nToday, I’m going to share how I built the search functionality for my site with vanilla JS. Let’s dig in!\n\nQuick aside: done-for-you alternative\n\nIf you don’t want to roll-your-own search functionality, Algolia and ElasticSearch are two done-for-you search vendors.\n\nThey both offer free tiers, as well as paid versions with more advanced features.\n\nBut, because I like to do things the hard way have more control over the user experience, I wrote my own search functionality instead of using one of them.\n\nThe Search Form\n\nMy search functionality starts as a progressively enhanced search form.\n<form action=\"https://duckduckgo.com/\" method=\"get\" id=\"form-search\">\n\t<label for=\"input-search\">Enter your search criteria:</label>\n\t<input type=\"text\" name=\"q\" id=\"input-search\">\n\t<input type=\"hidden\" name=\"sites\" value=\"YourAwesomeWebsite.com\">\n\t<button>Search</button>\n</form>\nIf the JavaScript fails (or the user tries to search before it loads), this will open up Duck Duck Go and search for articles only on my site.\n\nBe sure to replace YourAwesomeWebsite.com with the actual URL to your site.\n\nWe’ll also add two additional elements to the page. The #search-results element is where we’ll inject the actual search results. The #search-status element is where we’ll display the number of items found.\n\nWe want this to announce to screen readers, so we’ll also add the [role=\"status\"] attribute to it.\n<div id=\"search-status\" role=\"status\"></div>\n<div id=\"search-results\"></div>\nCreating a search index\n\nIn order to search your site, we need to create an index of content.\n\nThe process for this varies from one static site generator to another, but the end result is the same. You want to generate an array of all of the searchable content on your site.\n\nSome people create an external JSON file for this, but I prefer to embed it as a JavaScript variable directly on the search page. it looks like this:\nlet searchIndex = [\n\t{\n\t\ttitle: \"My awesome article\",\n\t\tdate: \"December 18, 2018\",\n\t\turl: \"https://gomakethings.com/my-awesome-article\",\n\t\tcontent: \"The full text of the content...\",\n\t\tsummary: \"A short summary or preview of the content (can also be a clipped version of the first few sentences)...\"\n\t},\n\t// More content...\n];\n\nWe can use this to both search for articles and generate results on the page.\n\nCreating a search function\n\nNext, let’s create a function to actually do the searching. This can be an IIFE or a named function. We just want a way to scope our code.\n(function () {\n\t// Code will go here...\n})();\n\nNext, we need to get the needed elements from the DOM. We can do that with the document.querySelector() method.\n(function () {\n\n\t// Get the DOM elements\n\tlet form = document.querySelector('#form-search');\n\tlet input = document.querySelector('#input-search');\n\tlet resultList = document.querySelector('#search-results');\n\tlet searchStatus = document.querySelector('#search-status');\n\n})();\n\nIf we can’t find any of them, or if the searchIndex doesn’t exist, we’ll return to stop the function from doing anything else.\n(function () {\n\n\t// Get the DOM elements\n\tlet form = document.querySelector('#form-search');\n\tlet input = document.querySelector('#input-search');\n\tlet resultList = document.querySelector('#search-results');\n\tlet searchStatus = document.querySelector('#search-status');\n\n\t// Make sure required content exists\n\tif (!form || !input || !resultList || !searchStatus || !searchIndex) return;\n\n})();\n\nRunning a search\n\nNext, we need to detect when the user searches for something. To do that, we’ll listen for submit events on the form element.\n\n(The rest of the code all happens inside the IIFE, but I’m sharing just the relevant stuff to make it easier to read.)\n// Create a submit handler\nform.addEventListener('submit', submitHandler);\n\nIn the submitHandler() function, we’ll use the event.preventDefault() method to stop the form from submitting to Duck Duck Go. Then, we’ll pass the input.value into a search() function that will actually look for results.\n/**\n * Handle submit events\n */\nfunction submitHandler (event) {\n\tevent.preventDefault();\n\tsearch(input.value);\n}\n\nSearching for results\n\nHere’s where stuff gets a bit messy.\n\nRather than search for complete phrases, we want to look at each word from the search query, and look for it in the titles and content of our articles. We want to ignore case, and we probably also want to ignore common words like a, an, and the.\n\nI use the String.toLowerCase() method to convert the query to lowercase. Then, I use the String.split() method to convert it to an array, with each word as its own item.\n/**\n * Search for matches\n * @param  {String} query The term to search for\n */\nfunction search (query) {\n\n\t// Create a regex for each query\n\tlet regMap = query.toLowerCase().split(' ');\n}\n\nNext, I created an array of stopWords: words that should be ignored. I found a list on the web, and modified it based on the type of content I have on my site.\n\nFor example, I added vanilla, javascript, and js to my list, since almost every article I write includes those words heavily, making them meaningless.\nlet stopWords = ['a', 'an', 'and', 'are', 'aren\\'t', 'as', 'by', 'can', 'cannot', 'can\\'t', 'could', 'couldn\\'t', 'how', 'is', 'isn\\'t', 'it', 'its', 'it\\'s', 'that', 'the', 'their', 'there', 'they', 'they\\'re', 'them', 'to', 'too', 'us', 'very', 'was', 'we', 'well', 'were', 'what', 'whatever', 'when', 'whenever', 'where', 'with', 'would', 'yet', 'you', 'your', 'yours', 'yourself', 'yourselves', 'the', 'vanilla', 'javascript', 'js'];\n\nBack in my search() function, I use the Array.filter() method to remove any word that’s an empty string or part of the stopWords array.\n\nI use the Array.includes() method to check if the word is in stopWords.\n\nFinally, I use the Array.map() method an new RegExp() constructor to create an array of regex searches from my query.\n/**\n * Search for matches\n * @param  {String} query The term to search for\n */\nfunction search (query) {\n\n\t// Create a regex for each query\n\tlet regMap = query.toLowerCase().split(' ').filter(function (word) {\n\t\treturn word.length && !stopWords.includes(word);\n\t}).map(function (word) {\n\t\treturn new RegExp(word, 'i');\n\t});\n\n}\n\nDoing the actual search\n\nNow that I have my regex patterns all setup, I can actually do the search.\n\nFor this, I use the Array.reduce() method on my searchIndex. I want to create a new array containing just matching items. I also want to include a priority rating, so that more closing matching items are shown higher in the results.\n\nI pass in an empty array ([]) as my accumulator, which I assign to the results parameter.\n/**\n * Search for matches\n * @param  {String} query The term to search for\n */\nfunction search (query) {\n\n\t// Create a regex for each query\n\t// ...\n\n\t// Get and sort the results\n\tlet results = searchIndex.reduce(function (results, article, index) {\n\t\t// Do stuff...\n\t}, []);\n}\n\nInside the callback function, I create a priority variable with a value of 0.\n\nThen, I loop through each item in my regMap using a for...of loop. I use the RegExp.test() method to look for matches in the article.title, and RegExp.match() method to look for matches in the article.content.\n\nI give more weight to the title than content. If there’s a match, I increase the priority by 100. For every match in content, I increase the priority by 1.\n/**\n * Search for matches\n * @param  {String} query The term to search for\n */\nfunction search (query) {\n\n\t// Create a regex for each query\n\t// ...\n\n\t// Get and sort the results\n\tlet results = searchIndex.reduce(function (results, article, index) {\n\n\t\t// Setup priority count\n\t\tlet priority = 0;\n\n\t\t// Assign priority\n\t\tfor (let reg of regMap) {\n\t\t\tif (reg.test(article.title)) { priority += 100; }\n\t\t\tlet occurences = article.content.match(reg);\n\t\t\tif (occurences) { priority += occurences.length; }\n\t\t}\n\n\t}, []);\n}\n\nIf priority is greater than 0, I use the Array.push() method to add a new object ({}) to the results array.\n\nI include the priority and article as properties. Then, I return the results.\n/**\n * Search for matches\n * @param  {String} query The term to search for\n */\nfunction search (query) {\n\n\t// Create a regex for each query\n\t// ...\n\n\t// Get and sort the results\n\tlet results = searchIndex.reduce(function (results, article, index) {\n\n\t\t// Setup priority count\n\t\tlet priority = 0;\n\n\t\t// Assign priority\n\t\tfor (let reg of regMap) {\n\t\t\tif (reg.test(article.title)) { priority += 100; }\n\t\t\tlet occurences = article.content.match(reg);\n\t\t\tif (occurences) { priority += occurences.length; }\n\t\t}\n\n\t\t// If any matches, push to results\n\t\tif (priority > 0) {\n\t\t\tresults.push({\n\t\t\t\tpriority: priority,\n\t\t\t\tarticle: article\n\t\t\t});\n\t\t}\n\n\t\treturn results;\n\n\t}, []);\n}\n\nFinally, I use the Array.sort() method to order the results by article priority. Items with the highest priority show up first.\n\nThen, I pass the results into a showResults() method that renders them into the UI.\n/**\n * Search for matches\n * @param  {String} query The term to search for\n */\nfunction search (query) {\n\n\t// Create a regex for each query\n\t// ...\n\n\t// Get and sort the results\n\tlet results = searchIndex.reduce(function (results, article, index) {\n\t\t// ...\n\t}, []).sort(function (article1, article2) {\n\t\treturn article2.priority - article1.priority;\n\t});\n\n\t// Display the results\n\tshowResults(results);\n\n}\n\nRendering search results\n\nInside the showResults() method, I do a quick check to see if their are any results to show.\n\nIf there are, I inject a message into the searchStatus element that shares how many matches were found. This also gets read aloud by screen readers.\n\nThen, I use the results to create an HTML string with the title and a link to the article. The appearance of this varies from one site to another, but you can style it however you want.\n/**\n * Show the search results in the UI\n * @param  {Array}  results The results to display\n */\nfunction showResults (results) {\n\tif (results.length) {\n\t\tsearchStatus.innerHTML = `<p>Found ${results.length} matching articles</p>`;\n\t\tresultList.innerHTML = myTemplate(results);\n\t}\n}\n\nIf there are no results, I clear the resultList element and show a message saying there were no matches.\n/**\n * Show the search results in the UI\n * @param  {Array}  results The results to display\n */\nfunction showResults (results) {\n\tif (results.length) {\n\t\tsearchStatus.innerHTML = `<p>Found ${results.length} matching articles</p>`;\n\t\tresultList.innerHTML = myTemplate(results);\n\t} else {\n\t\tsearchStatus.innerHTML = '<p>Sorry, no matches were found.</p>';\n\t\tresultList.innerHTML = '';\n\t}\n}\n\nWhat else?\n\nTomorrow, I’ll show you how I update the URL with the search query, and run a search automatically on page load if there’s a query in the URL.\n\nThis let’s people bookmark searches.",
      "date_published": "2022-02-17T15:30:00.000Z",
      "date_modified": "2022-02-17T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "96d7425d2fcf26797d0852a25ca6c6ddaddbbfc251d8e07cf43a57bad391007e.html"
      }
    },
    {
      "id": "https://gomakethings.com/the-best-resources-for-learning-vanilla-css/",
      "url": "https://gomakethings.com/the-best-resources-for-learning-vanilla-css/",
      "title": "The best resources for learning vanilla CSS",
      "summary": "The other day, I had someone ask me if I ever planned on creating vanilla CSS resources.\nI’ve thought about it before, but the truth is, there are a few folks out there who already do that with a much deeper expertise than I have. Today, I wanted to recommend there work!\nStephanie Eckles is the me of CSS.\nWhenever I’m work on a new project, her SmolCSS reference site is constantly open.",
      "content_html": "<p>The other day, I had someone ask me if I ever planned on creating vanilla CSS resources.</p>\n\n<p>I&rsquo;ve thought about it before, but the truth is, there are a few folks out there who already do that with a much deeper expertise than I have. Today, I wanted to recommend there work!</p>\n\n<p><a href=\"https://thinkdobecreate.com/\">Stephanie Eckles</a> is the me of CSS.</p>\n\n<p>Whenever I&rsquo;m work on a new project, her <a href=\"https://smolcss.dev/\">SmolCSS</a> reference site is constantly open. She also <a href=\"https://moderncss.dev/\">writes about modern CSS</a> and shares lots of cool goodness that makes complicated tasks simple.</p>\n\n<p>If you&rsquo;re looking for details on the various ways to layout a page, <a href=\"https://every-layout.dev/\">Every Layout by Heydon Pickering and Andy Bell</a> is an amazing resource. They recently updated the whole thing, and are selling it for 40-percent off right now.</p>",
      "content_text": "The other day, I had someone ask me if I ever planned on creating vanilla CSS resources.\n\nI’ve thought about it before, but the truth is, there are a few folks out there who already do that with a much deeper expertise than I have. Today, I wanted to recommend there work!\n\nStephanie Eckles is the me of CSS.\n\nWhenever I’m work on a new project, her SmolCSS reference site is constantly open. She also writes about modern CSS and shares lots of cool goodness that makes complicated tasks simple.\n\nIf you’re looking for details on the various ways to layout a page, Every Layout by Heydon Pickering and Andy Bell is an amazing resource. They recently updated the whole thing, and are selling it for 40-percent off right now.",
      "date_published": "2022-02-15T15:30:00.000Z",
      "date_modified": "2022-02-15T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "12ca8b7d7860fcba624d0431a4b88b7b97530d676ce3791c481d923aac1f1e14.html"
      }
    },
    {
      "id": "https://gomakethings.com/cdn-caching-isnt-the-performance-boost-it-used-to-be/",
      "url": "https://gomakethings.com/cdn-caching-isnt-the-performance-boost-it-used-to-be/",
      "title": "CDN caching isn't the performance boost it used to be",
      "summary": "Today, we’re going to talk about a tried-and-true performance recommendation that’s not so tried or true anymore: CDN caching.\nLet’s dig in!\nThe old best-practice around CDNs For years, one of the big performance recommendations with large JavaScript and CSS libraries was to host it from a shared CDN.\nTake jQuery, for example. The idea was simple: someone visits catsarethebest.com, where they’re loading jquery.1.1.8.js from the jQuery CDN. Then, that same person visits dogsarebetter.",
      "content_html": "<p>Today, we&rsquo;re going to talk about a tried-and-true performance recommendation that&rsquo;s not so tried or true anymore: CDN caching.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-old-best-practice-around-cdns\">The old best-practice around CDNs</h2>\n\n<p>For years, one of the big performance recommendations with large JavaScript and CSS libraries was to host it from a shared CDN.</p>\n\n<p>Take jQuery, for example. The idea was simple: someone visits <code>catsarethebest.com</code>, where they&rsquo;re loading <code>jquery.1.1.8.js</code> from the jQuery CDN. Then, that same person visits <code>dogsarebetter.com</code>, where that same file is hosted from that same CDN.</p>\n\n<p>Since the browser already loaded that file from that exact URL on another site, it&rsquo;s already cached and doesn&rsquo;t need to be downloaded again.</p>\n\n<p><strong>Make a lot of sense, right? Problem is&hellip; browsers don&rsquo;t actually do that anymore.</strong></p>\n\n<h2 id=\"cross-domain-caching-doesn-t-work-anymore\">Cross-domain caching doesn&rsquo;t work anymore</h2>\n\n<p><a href=\"https://www.stefanjudis.com/notes/say-goodbye-to-resource-caching-across-sites-and-domains/\">In an article from 2020, Stefan Judis explains&hellip;</a></p>\n\n<blockquote>\n<p>All this worked great, but as it is with many great inventions in web technology, cross-site resource caching enabled new ways to track users across different sites.</p>\n\n<p>As an example, let&rsquo;s assume Facebook loads a unique file in their logged-in area (<code>fb-logo-ajgdmaks839–as.svg</code> – I made that file path up); if I would know the file path to such a file, request it on <code>stefanjudis.com</code> and see a rapid response coming from the browser cache, I can almost be sure that the user has logged into Facebook lately.</p>\n</blockquote>\n\n<p>Historically, browsers used just the asset URL as the cache key. Modern implementations now use a combination of the URL, the requesting domain, and the current frame instead.</p>\n\n<p><a href=\"https://bugs.webkit.org/show_bug.cgi?id=110269\">Safari implemented an approach like this</a> as far back as 2013! Chrome started doing it in 2020. <a href=\"https://developer.mozilla.org/en-US/docs/Web/Privacy/State_Partitioning#network_partitioning\">Firefox added this feature</a> at the start of 2021.</p>\n\n<p>As Stefan explains&hellip;</p>\n\n<blockquote>\n<p>If your sites request the global jQuery, modules from unpkg.com, font files from Google fonts or GA&rsquo;s (Google Analytics) analytics.js, users will redownload the resources no matter if they downloaded and cached them for other sites already.</p>\n\n<p>What does this change mean for you? If your sites live on modern hosting that provides a CDN and supports HTTP/2, you should drop the third-parties and ship all resources yourself. Relying on a third party resources offers little value in 2020.</p>\n</blockquote>\n\n<h2 id=\"what-does-this-mean-in-practical-terms\">What does this mean in practical terms?</h2>\n\n<p>A few things&hellip;</p>\n\n<ol>\n<li>The idea that it&rsquo;s ok to ship 30kb of minzipped React because &ldquo;everyone uses it now so users probably already have it cached&rdquo; is complete and utter bullshit.</li>\n<li>CDNs are still incredibly valuable at pushing assets closer to the person who&rsquo;s accessing them. Not having to send files from a server in New York to someone in Sydney can dramatically reduce load times!</li>\n<li>Third-party CDNs provide no performance benefit over a CDN you control, and potentially introduce a security vulnerability. Better to self-host if you can.</li>\n</ol>",
      "content_text": "Today, we’re going to talk about a tried-and-true performance recommendation that’s not so tried or true anymore: CDN caching.\n\nLet’s dig in!\n\nThe old best-practice around CDNs\n\nFor years, one of the big performance recommendations with large JavaScript and CSS libraries was to host it from a shared CDN.\n\nTake jQuery, for example. The idea was simple: someone visits catsarethebest.com, where they’re loading jquery.1.1.8.js from the jQuery CDN. Then, that same person visits dogsarebetter.com, where that same file is hosted from that same CDN.\n\nSince the browser already loaded that file from that exact URL on another site, it’s already cached and doesn’t need to be downloaded again.\n\nMake a lot of sense, right? Problem is… browsers don’t actually do that anymore.\n\nCross-domain caching doesn’t work anymore\n\nIn an article from 2020, Stefan Judis explains…\n\n\nAll this worked great, but as it is with many great inventions in web technology, cross-site resource caching enabled new ways to track users across different sites.\n\nAs an example, let’s assume Facebook loads a unique file in their logged-in area (fb-logo-ajgdmaks839–as.svg – I made that file path up); if I would know the file path to such a file, request it on stefanjudis.com and see a rapid response coming from the browser cache, I can almost be sure that the user has logged into Facebook lately.\n\n\nHistorically, browsers used just the asset URL as the cache key. Modern implementations now use a combination of the URL, the requesting domain, and the current frame instead.\n\nSafari implemented an approach like this as far back as 2013! Chrome started doing it in 2020. Firefox added this feature at the start of 2021.\n\nAs Stefan explains…\n\n\nIf your sites request the global jQuery, modules from unpkg.com, font files from Google fonts or GA’s (Google Analytics) analytics.js, users will redownload the resources no matter if they downloaded and cached them for other sites already.\n\nWhat does this change mean for you? If your sites live on modern hosting that provides a CDN and supports HTTP/2, you should drop the third-parties and ship all resources yourself. Relying on a third party resources offers little value in 2020.\n\n\nWhat does this mean in practical terms?\n\nA few things…\n\n\nThe idea that it’s ok to ship 30kb of minzipped React because “everyone uses it now so users probably already have it cached” is complete and utter bullshit.\nCDNs are still incredibly valuable at pushing assets closer to the person who’s accessing them. Not having to send files from a server in New York to someone in Sydney can dramatically reduce load times!\nThird-party CDNs provide no performance benefit over a CDN you control, and potentially introduce a security vulnerability. Better to self-host if you can.\n",
      "date_published": "2022-02-14T15:30:00.000Z",
      "date_modified": "2022-02-14T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "9a34f1ab28168a67d1d0caa8bce01ca4c4b384683b4b1beee7457deaf084e9c7.html"
      }
    },
    {
      "id": "https://gomakethings.com/google-fonts-and-gdpr/",
      "url": "https://gomakethings.com/google-fonts-and-gdpr/",
      "title": "Google Fonts and GDPR",
      "summary": "Last month, a German court ruled that serving custom web fonts from Google Fonts violates GDPR, because it shares a visitors IP address with Google without their permission or consent.\n The decision, by Landgericht München’s third civil chamber in Munich, found that the website, by including Google-Fonts-hosted font on its pages, passed the unidentified plaintiff’s IP address to Google without authorization and without a legitimate reason for doing so.",
      "content_html": "<p>Last month, <a href=\"https://www.theregister.com/2022/01/31/website_fine_google_fonts_gdpr/\">a German court ruled that serving custom web fonts from Google Fonts violates GDPR</a>, because it shares a visitors IP address with Google without their permission or consent.</p>\n\n<blockquote>\n<p>The decision, by Landgericht München&rsquo;s third civil chamber in Munich, found that the website, by including Google-Fonts-hosted font on its pages, passed the unidentified plaintiff&rsquo;s IP address to Google without authorization and without a legitimate reason for doing so. And that violates Europe&rsquo;s General Data Protection Regulation (GDPR).</p>\n\n<p>That is to say, when the plaintiff visited the website, the page made the user&rsquo;s browser fetch a font from Google Fonts to use for some text, and this disclosed the netizen&rsquo;s IP address to the US internet giant. This kind of hot-linking is normal with Google Fonts; the issue here is that the visitor apparently didn&rsquo;t give permission for their IP address to be shared. The website could have avoided this drama by self-hosting the font, if possible.</p>\n</blockquote>\n\n<p>The penalties for violating this ruling are pretty serious!</p>\n\n<blockquote>\n<p>The ruling directs the website to stop providing IP addresses to Google and threatens the site operator with a fine of €250,000 for each violation, or up to six months in prison, for continued improper use of Google Fonts.</p>\n</blockquote>\n\n<h2 id=\"so-what-can-you-do\">So&hellip; what can you do?</h2>\n\n<p><a href=\"https://gomakethings.com/how-to-self-host-google-fonts/\">You can self-host your custom web fonts.</a></p>\n\n<p>I started doing that two years ago, out of privacy concerns with Google-hosted fonts.</p>\n\n<blockquote>\n<p>Earlier this year, I wrote about how <a href=\"https://gomakethings.com/i-dont-know-if-youre-reading-this/\">I removed all tracking from my website and newsletter</a>.</p>\n\n<p>But the brilliant <a href=\"https://laurakalbag.com/\">Laura Kalbag</a> pointed out a vector I’d missed: Google Fonts. While the data is not as rich as you’d get from a full on analytics script, it still gives Google more information about who your visitors are.</p>\n</blockquote>\n\n<p>Not only do you get a privacy benefit, but if you <a href=\"https://vanillajsguides.com/service-workers/\">pair self-hosting with service workers</a>, your fonts load amazingly fast with dramatically reduced data usage.</p>\n\n<h2 id=\"how-is-this-different-from-loading-assets-from-other-cdns\">How is this different from loading assets from other CDNs?</h2>\n\n<p>It&rsquo;s not, really!</p>\n\n<p>For example, if you use Cloudflare, the visitor&rsquo;s IP address gets sent along with the request. Same with JSDelivr and other CDN-for-OSS-projects services.</p>\n\n<p>I&rsquo;m not sure if this ruling affects how other CDNs will operate going forward, or if Google was targeted specifically because they&rsquo;re in the &ldquo;suck up data to sell ads&rdquo; business.</p>",
      "content_text": "Last month, a German court ruled that serving custom web fonts from Google Fonts violates GDPR, because it shares a visitors IP address with Google without their permission or consent.\n\n\nThe decision, by Landgericht München’s third civil chamber in Munich, found that the website, by including Google-Fonts-hosted font on its pages, passed the unidentified plaintiff’s IP address to Google without authorization and without a legitimate reason for doing so. And that violates Europe’s General Data Protection Regulation (GDPR).\n\nThat is to say, when the plaintiff visited the website, the page made the user’s browser fetch a font from Google Fonts to use for some text, and this disclosed the netizen’s IP address to the US internet giant. This kind of hot-linking is normal with Google Fonts; the issue here is that the visitor apparently didn’t give permission for their IP address to be shared. The website could have avoided this drama by self-hosting the font, if possible.\n\n\nThe penalties for violating this ruling are pretty serious!\n\n\nThe ruling directs the website to stop providing IP addresses to Google and threatens the site operator with a fine of €250,000 for each violation, or up to six months in prison, for continued improper use of Google Fonts.\n\n\nSo… what can you do?\n\nYou can self-host your custom web fonts.\n\nI started doing that two years ago, out of privacy concerns with Google-hosted fonts.\n\n\nEarlier this year, I wrote about how I removed all tracking from my website and newsletter.\n\nBut the brilliant Laura Kalbag pointed out a vector I’d missed: Google Fonts. While the data is not as rich as you’d get from a full on analytics script, it still gives Google more information about who your visitors are.\n\n\nNot only do you get a privacy benefit, but if you pair self-hosting with service workers, your fonts load amazingly fast with dramatically reduced data usage.\n\nHow is this different from loading assets from other CDNs?\n\nIt’s not, really!\n\nFor example, if you use Cloudflare, the visitor’s IP address gets sent along with the request. Same with JSDelivr and other CDN-for-OSS-projects services.\n\nI’m not sure if this ruling affects how other CDNs will operate going forward, or if Google was targeted specifically because they’re in the “suck up data to sell ads” business.",
      "date_published": "2022-02-11T15:30:00.000Z",
      "date_modified": "2022-02-11T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "b5dab2e79c7a3b517a5fb84033be7e3ab0ed74052cfad6a0519435dc05ebce8b.html"
      }
    },
    {
      "id": "https://gomakethings.com/aha-programming-a-nice-balance-between-dry-and-wet/",
      "url": "https://gomakethings.com/aha-programming-a-nice-balance-between-dry-and-wet/",
      "title": "AHA programming, a nice balance between DRY and WET",
      "summary": "On Tuesday, I wrote about DRY programing, and how it’s actually OK to repeat yourself.\nSomeone pointed me to this article by Kent C. Dodds from two years ago on AHA programing as a nice follow-up read.\n AHA (pronounced “Aha!” like you just made a discovery) is an acronym I got from Cher Scarlett which stands for “Avoid Hasty Abstractions.”\nThe way I think of this principle is beautifully described by Sandi Metz who wrote: “prefer duplication over the wrong abstraction.",
      "content_html": "<p>On Tuesday, I wrote about <a href=\"https://gomakethings.com/its-ok-to-repeat-yourself-dry-coding-isnt-the-holy-grail/\">DRY programing, and how it&rsquo;s actually OK to repeat yourself</a>.</p>\n\n<p>Someone pointed me to <a href=\"https://kentcdodds.com/blog/aha-programming\">this article by Kent C. Dodds from two years ago on AHA programing</a> as a nice follow-up read.</p>\n\n<blockquote>\n<p>AHA (pronounced &ldquo;Aha!&rdquo; like you just made a discovery) is an acronym I <a href=\"https://twitter.com/cherthedev\">got from Cher Scarlett</a> which stands for &ldquo;Avoid Hasty Abstractions.&rdquo;</p>\n\n<p>The way I think of this principle is beautifully described by <a href=\"https://twitter.com/sandimetz\">Sandi Metz</a> who <a href=\"https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction\">wrote</a>: &ldquo;prefer duplication over the wrong abstraction.&rdquo;</p>\n\n<p>This is such a solid golden nugget of wisdom that I want you to read it again, then read Sandi&rsquo;s blog post on the subject: <a href=\"https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction\">The Wrong Abstraction</a>. It&rsquo;s fantastic.</p>\n</blockquote>\n\n<p>For me, these two sentences really sum up years of evolving thinking and experience for me:</p>\n\n<blockquote>\n<p>I think the key is that we don&rsquo;t know what the future of code will be. We could spend weeks optimizing code for performance, or coming up with the best API for our new abstraction, only to find out the next day that we made incorrect assumptions and the API needs a complete rework or the feature the code was written for is no longer needed.</p>\n</blockquote>\n\n<p><a href=\"https://gomakethings.com/its-ok-to-repeat-yourself-dry-coding-isnt-the-holy-grail/\">Go read Kent&rsquo;s entire article</a>, and the articles he links to. It&rsquo;s all really good stuff!</p>",
      "content_text": "On Tuesday, I wrote about DRY programing, and how it’s actually OK to repeat yourself.\n\nSomeone pointed me to this article by Kent C. Dodds from two years ago on AHA programing as a nice follow-up read.\n\n\nAHA (pronounced “Aha!” like you just made a discovery) is an acronym I got from Cher Scarlett which stands for “Avoid Hasty Abstractions.”\n\nThe way I think of this principle is beautifully described by Sandi Metz who wrote: “prefer duplication over the wrong abstraction.”\n\nThis is such a solid golden nugget of wisdom that I want you to read it again, then read Sandi’s blog post on the subject: The Wrong Abstraction. It’s fantastic.\n\n\nFor me, these two sentences really sum up years of evolving thinking and experience for me:\n\n\nI think the key is that we don’t know what the future of code will be. We could spend weeks optimizing code for performance, or coming up with the best API for our new abstraction, only to find out the next day that we made incorrect assumptions and the API needs a complete rework or the feature the code was written for is no longer needed.\n\n\nGo read Kent’s entire article, and the articles he links to. It’s all really good stuff!",
      "date_published": "2022-02-10T15:30:00.000Z",
      "date_modified": "2022-02-10T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "2ac98620d5abf01be9a10a6867d75af8684b42685642847e31bf605d15b73d38.html"
      }
    },
    {
      "id": "https://gomakethings.com/how-i-became-the-vanilla-js-guy/",
      "url": "https://gomakethings.com/how-i-became-the-vanilla-js-guy/",
      "title": "How I became the vanilla JS guy",
      "summary": "Yesterday, I had the pleasure of chatting with Chris Bongers about how I became the vanilla JS guy.\nWe talked about how I got into web development after years as an HR professional, how I made the career switch, the viability of CSS as a career path, and why I got into JavaScript.\nWe also talked a fair bit about the value of sharing everything you learn, and the power of daily writing.",
      "content_html": "<p>Yesterday, I had the pleasure of <a href=\"https://www.youtube.com/watch?v=qw0u56LBmSo\">chatting with Chris Bongers about how I became the vanilla JS guy</a>.</p>\n\n<p>We talked about how I got into web development after years as an HR professional, how I made the career switch, the viability of CSS as a career path, and why I got into JavaScript.</p>\n\n<p>We also talked a fair bit about the value of sharing everything you learn, and the power of daily writing.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/qw0u56LBmSo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<p><a href=\"https://www.youtube.com/watch?v=qw0u56LBmSo\">You can watch the whole conversation on YouTube.</a></p>",
      "content_text": "Yesterday, I had the pleasure of chatting with Chris Bongers about how I became the vanilla JS guy.\n\nWe talked about how I got into web development after years as an HR professional, how I made the career switch, the viability of CSS as a career path, and why I got into JavaScript.\n\nWe also talked a fair bit about the value of sharing everything you learn, and the power of daily writing.\n\n\n\nYou can watch the whole conversation on YouTube.",
      "date_published": "2022-02-09T15:30:00.000Z",
      "date_modified": "2022-02-09T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "e60564712f4078ae04dd41f3251bac8f79ba0642627d1de0c756162a5ff5456e.html"
      }
    },
    {
      "id": "https://gomakethings.com/its-ok-to-repeat-yourself-dry-coding-isnt-the-holy-grail/",
      "url": "https://gomakethings.com/its-ok-to-repeat-yourself-dry-coding-isnt-the-holy-grail/",
      "title": "Its OK to repeat yourself (DRY coding isn't the Holy Grail)",
      "summary": "Last week, Ali Spittel tweeted…\n Don’t repeat yourself too much, but also don’t abstract your code to an extent that it is not understandable.\n In programing, DRY is an acronym that stands for Don’t Repeat Yourself. It’s good advice that’s sometimes treated as a Holy Grail in coding.\nSometimes, a little repeated code a good thing. Today, I wanted to look at some specific examples of when DRY is good, and when it creates more problems than it solves.",
      "content_html": "<p>Last week, <a href=\"https://twitter.com/ASpittel/status/1489616929241563137\">Ali Spittel tweeted</a>&hellip;</p>\n\n<blockquote>\n<p>Don&rsquo;t repeat yourself too much, but also don&rsquo;t abstract your code to an extent that it is not understandable.</p>\n</blockquote>\n\n<p>In programing, DRY is an acronym that stands for <em>Don&rsquo;t Repeat Yourself</em>. It&rsquo;s good advice that&rsquo;s sometimes treated as a Holy Grail in coding.</p>\n\n<p>Sometimes, a little repeated code a good thing. Today, I wanted to look at some specific examples of when DRY is good, and when it creates more problems than it solves.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"why-dry\">Why DRY?</h2>\n\n<p>With any code you write, the &ldquo;ideal&rdquo; structure is one that makes your code easier to understand and maintain long term.</p>\n\n<p>Blocks of repeated code create maintenance challenges.</p>\n\n<p>Consider this function, <code>contentList()</code>. It takes an array of items and generates an unordered list (<code>ul</code>) as an HTML string from them.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Create a list of linked content items\n</span><span class=\"cm\"> * @param  {Array}   items The content\n</span><span class=\"cm\"> * @return {String}        The content list HTML\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">contentList</span> <span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"sb\">`&lt;li id=&#34;</span><span class=\"si\">${</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"si\">}</span><span class=\"sb\">&#34;&gt;&lt;a class=&#34;link-no-underline&#34; href=&#34;</span><span class=\"si\">${</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"si\">}</span><span class=\"sb\">&#34;&gt;</span><span class=\"si\">${</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"si\">}</span><span class=\"sb\">&lt;/a&gt;&lt;/li&gt;`</span><span class=\"p\">;</span>\n\t<span class=\"p\">}).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span><span class=\"sb\">`&lt;ul&gt;</span><span class=\"si\">${</span><span class=\"nx\">list</span><span class=\"si\">}</span><span class=\"sb\">&lt;/ul&gt;`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>What if you <em>also</em> needed a way to create an <em>ordered list</em> (<code>ol</code>) from an array of items? You might create a second function, <code>contentListOrdered()</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Create a list of linked content items\n</span><span class=\"cm\"> * @param  {Array}   items The content\n</span><span class=\"cm\"> * @return {String}        The content list HTML\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">contentListOrdered</span> <span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"sb\">`&lt;li id=&#34;</span><span class=\"si\">${</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"si\">}</span><span class=\"sb\">&#34;&gt;&lt;a class=&#34;link-no-underline&#34; href=&#34;</span><span class=\"si\">${</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"si\">}</span><span class=\"sb\">&#34;&gt;</span><span class=\"si\">${</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"si\">}</span><span class=\"sb\">&lt;/a&gt;&lt;/li&gt;`</span><span class=\"p\">;</span>\n\t<span class=\"p\">}).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span><span class=\"sb\">`&lt;ol&gt;</span><span class=\"si\">${</span><span class=\"nx\">list</span><span class=\"si\">}</span><span class=\"sb\">&lt;/ol&gt;`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This absolutely works! But, now you&rsquo;re also repeating yourself.</p>\n\n<p>Imagine that something changes. Maybe one of the properties in the array of <code>items</code> gets renamed. Maybe you want to remove a class. Maybe you want to add an icon.</p>\n\n<p>Whatever it is, now you need to make that same change in two places. This is where DRY programming comes in.</p>\n\n<h2 id=\"making-functions-dry\">Making functions DRY</h2>\n\n<p>With our content list functions, the only difference between them is whether the list is <em>ordered</em> or <em>unordered</em>.</p>\n\n<p>This makes it a great candidate for abstraction! We can add a second property to our <code>contentList()</code> function, <code>ordered</code>. If <code>true</code>, we&rsquo;ll return an <em>ordered list</em>. If not, we&rsquo;ll return an <em>unordered list</em> instead.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Create a list of linked content items\n</span><span class=\"cm\"> * @param  {Array}   items   The content\n</span><span class=\"cm\"> * @param  {Boolean} ordered If true, return an ordered list\n</span><span class=\"cm\"> * @return {String}          The content list HTML\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">contentList</span> <span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">,</span> <span class=\"nx\">ordered</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"sb\">`&lt;li id=&#34;</span><span class=\"si\">${</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"si\">}</span><span class=\"sb\">&#34;&gt;&lt;a class=&#34;link-no-underline&#34; href=&#34;</span><span class=\"si\">${</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"si\">}</span><span class=\"sb\">&#34;&gt;</span><span class=\"si\">${</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"si\">}</span><span class=\"sb\">&lt;/a&gt;&lt;/li&gt;`</span><span class=\"p\">;</span>\n\t<span class=\"p\">}).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">ordered</span> <span class=\"o\">?</span> <span class=\"sb\">`&lt;ol&gt;</span><span class=\"si\">${</span><span class=\"nx\">list</span><span class=\"si\">}</span><span class=\"sb\">&lt;/ol&gt;`</span> <span class=\"o\">:</span> <span class=\"sb\">`&lt;ul&gt;</span><span class=\"si\">${</span><span class=\"nx\">list</span><span class=\"si\">}</span><span class=\"sb\">&lt;/ul&gt;`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>With one function parameter and a one-line code change, we removed six lines of code and a bunch of future maintenance challenges. That&rsquo;s great!</p>\n\n<p>But sometimes, you can take this too far.</p>\n\n<h2 id=\"too-much-abstraction-is-bad\">Too much abstraction is bad</h2>\n\n<p>In the portal that my students use to access <a href=\"https://vanillajsguides.com\">their courses, books,</a> and <a href=\"https://vanillajsacademy.com\">workshops</a>, I have two endpoints.</p>\n\n<p>One handles all of the <em>account management</em> stuff: logging in, changing your password, and so on. The other is used to get product data to render into the UI.</p>\n\n<p>I have two utility functions to help me with that.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Make a call to the courses API\n</span><span class=\"cm\"> * @param  {Object}  data  Data to send with the API [optional]\n</span><span class=\"cm\"> * @return {Promise}       The fetch Promise\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">callAPI</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;/account-endpoint&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">method</span><span class=\"o\">:</span> <span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">headers</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"s1\">&#39;X-Requested-With&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;XMLHttpRequest&#39;</span><span class=\"p\">,</span>\n\t\t\t<span class=\"s1\">&#39;Content-type&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;application/x-www-form-urlencoded&#39;</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"nx\">body</span><span class=\"o\">:</span> <span class=\"nx\">buildQuery</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span>\n\t<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n\t<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">code</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">200</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">code</span> <span class=\"o\">&lt;</span> <span class=\"mi\">300</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">throw</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n\t<span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * Get data for a product\n</span><span class=\"cm\"> * @return {Promise} The fetch Promise\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">getProductData</span> <span class=\"p\">(</span><span class=\"nx\">api</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"sb\">`/product-endpoint&amp;api=</span><span class=\"si\">${</span><span class=\"nx\">api</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n\t<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">code</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">200</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">code</span> <span class=\"o\">&lt;</span> <span class=\"mi\">300</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">throw</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n\t<span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">code</span> <span class=\"o\">===</span> <span class=\"mi\">401</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nx\">logoutUser</span><span class=\"p\">();</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Both of these methods using <code>fetch()</code> to call an API. They both accept some data as an argument. They both convert the <code>response</code> to JSON, and handle errors.</p>\n\n<p>It&rsquo;s tempting to look at these and try to wrap them into one utility function.</p>\n\n<p><strong>But they have a handful of small differences that make additional abstraction worse than just having two functions.</strong></p>\n\n<p>The <code>callAPI()</code> method sends <code>POST</code> requests. The <code>getProductData()</code> method makes <code>GET</code> requests. The endpoint for each is different. The <code>headers</code> are different. The way data is passed along to the API is different. The way errors are handled is different.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">getData</span> <span class=\"p\">(</span><span class=\"nx\">product</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Setup all of the options\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">endpoint</span> <span class=\"o\">=</span> <span class=\"nx\">product</span> <span class=\"o\">?</span> <span class=\"sb\">`/product-endpoint&amp;api=</span><span class=\"si\">${</span><span class=\"nx\">api</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"o\">:</span> <span class=\"s1\">&#39;/account-endpoint&#39;</span><span class=\"p\">;</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">products</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nx\">method</span><span class=\"o\">:</span> <span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nx\">headers</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"s1\">&#39;X-Requested-With&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;XMLHttpRequest&#39;</span><span class=\"p\">,</span>\n\t\t\t\t<span class=\"s1\">&#39;Content-type&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;application/x-www-form-urlencoded&#39;</span>\n\t\t\t<span class=\"p\">},</span>\n\t\t\t<span class=\"nx\">body</span><span class=\"o\">:</span> <span class=\"nx\">buildQuery</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">};</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"c1\">// Make the call\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">call</span> <span class=\"o\">=</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n\t<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">code</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">200</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">code</span> <span class=\"o\">&lt;</span> <span class=\"mi\">300</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">throw</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n\t<span class=\"p\">});</span>\n\n\t<span class=\"c1\">// If it&#39;s the product API, handle errors\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">product</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">call</span><span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">code</span> <span class=\"o\">===</span> <span class=\"mi\">401</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"nx\">logoutUser</span><span class=\"p\">();</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">});</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"c1\">// Return the API call\n</span><span class=\"c1\"></span>\t<span class=\"k\">return</span> <span class=\"nx\">call</span><span class=\"p\">;</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>By the time you account for all of these differences, you end up with an abstracted function that&rsquo;s more bloated and less usable than just having two functions.</p>\n\n<p>I often tell my students &ldquo;readability is more important than brevity.&rdquo; It&rsquo;s also more important than abstraction.</p>",
      "content_text": "Last week, Ali Spittel tweeted…\n\n\nDon’t repeat yourself too much, but also don’t abstract your code to an extent that it is not understandable.\n\n\nIn programing, DRY is an acronym that stands for Don’t Repeat Yourself. It’s good advice that’s sometimes treated as a Holy Grail in coding.\n\nSometimes, a little repeated code a good thing. Today, I wanted to look at some specific examples of when DRY is good, and when it creates more problems than it solves.\n\nLet’s dig in!\n\nWhy DRY?\n\nWith any code you write, the “ideal” structure is one that makes your code easier to understand and maintain long term.\n\nBlocks of repeated code create maintenance challenges.\n\nConsider this function, contentList(). It takes an array of items and generates an unordered list (ul) as an HTML string from them.\n/**\n * Create a list of linked content items\n * @param  {Array}   items The content\n * @return {String}        The content list HTML\n */\nfunction contentList (items) {\n\tlet list = items.map(function (item) {\n\t\treturn `<li id=\"${item.id}\"><a class=\"link-no-underline\" href=\"${item.url}\">${item.title}</a></li>`;\n\t}).join('');\n\treturn`<ul>${list}</ul>`;\n}\n\nWhat if you also needed a way to create an ordered list (ol) from an array of items? You might create a second function, contentListOrdered().\n/**\n * Create a list of linked content items\n * @param  {Array}   items The content\n * @return {String}        The content list HTML\n */\nfunction contentListOrdered (items) {\n\tlet list = items.map(function (item) {\n\t\treturn `<li id=\"${item.id}\"><a class=\"link-no-underline\" href=\"${item.url}\">${item.title}</a></li>`;\n\t}).join('');\n\treturn`<ol>${list}</ol>`;\n}\n\nThis absolutely works! But, now you’re also repeating yourself.\n\nImagine that something changes. Maybe one of the properties in the array of items gets renamed. Maybe you want to remove a class. Maybe you want to add an icon.\n\nWhatever it is, now you need to make that same change in two places. This is where DRY programming comes in.\n\nMaking functions DRY\n\nWith our content list functions, the only difference between them is whether the list is ordered or unordered.\n\nThis makes it a great candidate for abstraction! We can add a second property to our contentList() function, ordered. If true, we’ll return an ordered list. If not, we’ll return an unordered list instead.\n/**\n * Create a list of linked content items\n * @param  {Array}   items   The content\n * @param  {Boolean} ordered If true, return an ordered list\n * @return {String}          The content list HTML\n */\nfunction contentList (items, ordered) {\n\tlet list = items.map(function (item) {\n\t\treturn `<li id=\"${item.id}\"><a class=\"link-no-underline\" href=\"${item.url}\">${item.title}</a></li>`;\n\t}).join('');\n\treturn ordered ? `<ol>${list}</ol>` : `<ul>${list}</ul>`;\n}\n\nWith one function parameter and a one-line code change, we removed six lines of code and a bunch of future maintenance challenges. That’s great!\n\nBut sometimes, you can take this too far.\n\nToo much abstraction is bad\n\nIn the portal that my students use to access their courses, books, and workshops, I have two endpoints.\n\nOne handles all of the account management stuff: logging in, changing your password, and so on. The other is used to get product data to render into the UI.\n\nI have two utility functions to help me with that.\n/**\n * Make a call to the courses API\n * @param  {Object}  data  Data to send with the API [optional]\n * @return {Promise}       The fetch Promise\n */\nfunction callAPI (data) {\n\treturn fetch('/account-endpoint', {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'X-Requested-With': 'XMLHttpRequest',\n\t\t\t'Content-type': 'application/x-www-form-urlencoded'\n\t\t},\n\t\tbody: buildQuery(data)\n\t}).then(function (response) {\n\t\treturn response.json();\n\t}).then(function (data) {\n\t\tif (data.code >= 200 && data.code < 300) return data;\n\t\tthrow data;\n\t});\n}\n\n/**\n * Get data for a product\n * @return {Promise} The fetch Promise\n */\nfunction getProductData (api) {\n\treturn fetch(`/product-endpoint&api=${api}`).then(function (response) {\n\t\treturn response.json();\n\t}).then(function (data) {\n\t\tif (data.code >= 200 && data.code < 300) return data;\n\t\tthrow data;\n\t}).catch(function (error) {\n\t\tif (error.code === 401) {\n\t\t\tlogoutUser();\n\t\t}\n\t});\n}\n\nBoth of these methods using fetch() to call an API. They both accept some data as an argument. They both convert the response to JSON, and handle errors.\n\nIt’s tempting to look at these and try to wrap them into one utility function.\n\nBut they have a handful of small differences that make additional abstraction worse than just having two functions.\n\nThe callAPI() method sends POST requests. The getProductData() method makes GET requests. The endpoint for each is different. The headers are different. The way data is passed along to the API is different. The way errors are handled is different.\nfunction getData (product, data) {\n\n\t// Setup all of the options\n\tlet endpoint = product ? `/product-endpoint&api=${api}` : '/account-endpoint';\n\tlet options = {};\n\tif (!products) {\n\t\toptions = {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'X-Requested-With': 'XMLHttpRequest',\n\t\t\t\t'Content-type': 'application/x-www-form-urlencoded'\n\t\t\t},\n\t\t\tbody: buildQuery(data)\n\t\t};\n\t}\n\n\t// Make the call\n\tlet call = fetch(endpoint, options).then(function (response) {\n\t\treturn response.json();\n\t}).then(function (data) {\n\t\tif (data.code >= 200 && data.code < 300) return data;\n\t\tthrow data;\n\t});\n\n\t// If it's the product API, handle errors\n\tif (product) {\n\t\tcall.catch(function (error) {\n\t\t\tif (error.code === 401) {\n\t\t\t\tlogoutUser();\n\t\t\t}\n\t\t});\n\t}\n\n\t// Return the API call\n\treturn call;\n\n}\n\nBy the time you account for all of these differences, you end up with an abstracted function that’s more bloated and less usable than just having two functions.\n\nI often tell my students “readability is more important than brevity.” It’s also more important than abstraction.",
      "date_published": "2022-02-08T15:30:00.000Z",
      "date_modified": "2022-02-08T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "f489c4917089e8eff18af77a2b850410f91dbd29d6b356ef574f5a20082ee70e.html"
      }
    },
    {
      "id": "https://gomakethings.com/the-many-ways-to-announce-content-to-screen-reader-users/",
      "url": "https://gomakethings.com/the-many-ways-to-announce-content-to-screen-reader-users/",
      "title": "The many ways to announce content to screen reader users",
      "summary": "My friend Scott O’Hara is an accessibility specialist.\nHis blog is a trove of goodness. A few weeks ago, he wrote about how the div element isn’t as terrible as some people make it out to be.\nBut today, I wanted to share a recent post he wrote on how to announce content to screen reader users.\n Live regions are elements that inform assistive technologies, such as screen readers, that their descendant content may update.",
      "content_html": "<p>My friend Scott O&rsquo;Hara is an accessibility specialist.</p>\n\n<p><a href=\"https://www.scottohara.me/writing/\">His blog is a trove of goodness</a>. A few weeks ago, he wrote about <a href=\"https://www.scottohara.me/blog/2022/01/20/divisive.html\">how the <code>div</code> element isn&rsquo;t as terrible as some people make it out to be</a>.</p>\n\n<p>But today, I wanted to share a recent post he wrote on <a href=\"https://www.scottohara.me/blog/2022/02/05/are-we-live.html\">how to announce content to screen reader users</a>.</p>\n\n<blockquote>\n<p>Live regions are elements that inform assistive technologies, such as screen readers, that their descendant content may update. And, in such situations those updates need to be relayed to their users.</p>\n\n<p>Live regions may be implemented into a web page via three different methods:</p>\n\n<ul>\n<li>Using specific <a href=\"https://www.w3.org/TR/wai-aria-1.2/#live_region_roles\">ARIA live region roles</a>, such as <code>alert</code>, <code>log</code> or <code>status</code>. There’s also <code>marquee</code> and <code>timer</code>&hellip; but more on those in a second.</li>\n<li>Using the <a href=\"https://www.w3.org/TR/wai-aria-1.2/#aria-live\"><code>aria-live</code> attribute</a> to turn “any element” into a live region. There are three states that a live region may be in.\n\n<ul>\n<li><code>assertive</code>: high importance updates which take precedence over other announcements.</li>\n<li><code>polite</code>: announcements that will be made at the next opportunity.</li>\n<li><code>off</code>: announcements will not be made unless focus is presently on the live region element.</li>\n</ul></li>\n<li><a href=\"https://www.scottohara.me/blog/2019/07/10/the-output-element.html\">Using HTML’s native <code>&lt;output&gt;</code> element.</a> This element has the implicit ARIA role of <code>status</code>.</li>\n</ul>\n\n<p>Why you would use one method over the other will depend on how you want the content exposed to your users.</p>\n</blockquote>\n\n<p>Scott&rsquo;s article digs into the various approaches, and when and why you&rsquo;d choose one over the other.</p>\n\n<p>Even if you&rsquo;ve got a pretty good grasp on this, I&rsquo;d recommend <a href=\"https://www.scottohara.me/blog/2022/02/05/are-we-live.html\">giving the whole article a read</a>. Scott is one of the most knowledgeable folks I know, and his articles always deliver tons of goodness!</p>",
      "content_text": "My friend Scott O’Hara is an accessibility specialist.\n\nHis blog is a trove of goodness. A few weeks ago, he wrote about how the div element isn’t as terrible as some people make it out to be.\n\nBut today, I wanted to share a recent post he wrote on how to announce content to screen reader users.\n\n\nLive regions are elements that inform assistive technologies, such as screen readers, that their descendant content may update. And, in such situations those updates need to be relayed to their users.\n\nLive regions may be implemented into a web page via three different methods:\n\n\nUsing specific ARIA live region roles, such as alert, log or status. There’s also marquee and timer… but more on those in a second.\nUsing the aria-live attribute to turn “any element” into a live region. There are three states that a live region may be in.\n\n\nassertive: high importance updates which take precedence over other announcements.\npolite: announcements that will be made at the next opportunity.\noff: announcements will not be made unless focus is presently on the live region element.\n\nUsing HTML’s native <output> element. This element has the implicit ARIA role of status.\n\n\nWhy you would use one method over the other will depend on how you want the content exposed to your users.\n\n\nScott’s article digs into the various approaches, and when and why you’d choose one over the other.\n\nEven if you’ve got a pretty good grasp on this, I’d recommend giving the whole article a read. Scott is one of the most knowledgeable folks I know, and his articles always deliver tons of goodness!",
      "date_published": "2022-02-07T15:30:00.000Z",
      "date_modified": "2022-02-07T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "10bbaa29469980de64486d2180dceadf9bf40a7838697382238b4b9888657a48.html"
      }
    },
    {
      "id": "https://gomakethings.com/five-more-ways-to-inject-html-into-the-dom-with-vanilla-javascript/",
      "url": "https://gomakethings.com/five-more-ways-to-inject-html-into-the-dom-with-vanilla-javascript/",
      "title": "Five more ways to inject HTML into the dom with vanilla JavaScript",
      "summary": "Yesterday, we looked at four ways to inject text and HTML into the DOM with vanilla JS. Today, we’re going to look at five more.\nLet’s dig in!\nThe document.createElement() method You can use the document.createElement() method to create an element. Pass in the element to create, without angled brackets (<>), as an argument\nlet div = document.createElement('div'); let link = document.createElement('a'); let article = document.createElement('article');  You can use any valid HTML tag, and even create custom ones, too.",
      "content_html": "<p>Yesterday, we looked at <a href=\"https://gomakethings.com/four-different-ways-to-inject-text-and-html-into-an-element-with-vanilla-javascript/\">four ways to inject text and HTML into the DOM with vanilla JS</a>. Today, we&rsquo;re going to look at five more.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-document-createelement-method\">The <code>document.createElement()</code> method</h2>\n\n<p>You can use the <code>document.createElement()</code> method to create an element. Pass in the element to create, without angled brackets (<code>&lt;&gt;</code>), as an argument</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">div</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;div&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span> <span class=\"nx\">link</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span> <span class=\"nx\">article</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;article&#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>You can use any valid HTML tag, and even create custom ones, too. For example, these also work.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">chicken</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;chicken&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// &lt;chicken&gt;&lt;/chicken&gt;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">placeholder</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// &lt;_&gt;&lt;/_&gt;\n</span></code></pre></div>\n<p>You can manipulate an element created with <code>document.createElement()</code> like you would any other element in the DOM. Add classes, attributes, styles, and more.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">div</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;div&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Hello, world!&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;new-div&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;new-div&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;data-div&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;new&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">color</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#fff&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;rebeccapurple&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/qBVaVYB?editors=0011\">Here&rsquo;s a demo of the <code>document.createElement()</code> method.</a></p>\n\n<h2 id=\"the-node-before-method\">The <code>Node.before()</code> method</h2>\n\n<p>The <code>Node.before()</code> method inserts elements and strings before another element. Call the <code>Node.before()</code> method on the node you want to insert before, and pass in one or more new elements or strings as arguments.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;app&#34;</span><span class=\"p\">&gt;</span>Good evening<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Create a new element\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Hello!&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Get the target node\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#app&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Insert the new node before the target node\n</span><span class=\"c1\">// &lt;p&gt;Hello!&lt;/p&gt;&lt;div id=&#34;app&#34;&gt;Good evening&lt;/div&gt;\n</span><span class=\"c1\"></span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">before</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// You can inject more than one item by passing in multiple arguments\n</span><span class=\"c1\">// &lt;p&gt;Hello!&lt;/p&gt;What&#39;s poppin&#39;&lt;div id=&#34;app&#34;&gt;Good evening&lt;/div&gt;\n</span><span class=\"c1\"></span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">before</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span> <span class=\"sb\">`What&#39;s poppin?`</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/bGYwYMY?editors=1010\">Here&rsquo;s a demo of the <code>Node.before()</code> method.</a></p>\n\n<h2 id=\"the-node-after-method\">The <code>Node.after()</code> method</h2>\n\n<p>The <code>Node.after()</code> method inserts elements and strings after another element. Call the <code>Node.after()</code> method on the node you want to insert after, and pass in one or more new elements or strings as arguments.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;app&#34;</span><span class=\"p\">&gt;</span>Good morning<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Create a new element\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Hello!&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Get the target node\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#app&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Insert the new node after the target node\n</span><span class=\"c1\">// &lt;div id=&#34;app&#34;&gt;Good morning&lt;/div&gt;&lt;p&gt;Hello!&lt;/p&gt;\n</span><span class=\"c1\"></span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">after</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// You can inject more than one item by passing in multiple arguments\n</span><span class=\"c1\">// &lt;div id=&#34;app&#34;&gt;Good morning&lt;/div&gt;&lt;p&gt;Hello!&lt;/p&gt;What&#39;s poppin&#39;\n</span><span class=\"c1\"></span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">after</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span> <span class=\"sb\">`What&#39;s poppin?`</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/JjOROZP?editors=1010\">Here&rsquo;s a demo of the <code>Node.after()</code> method.</a></p>\n\n<h2 id=\"the-element-append-method\">The <code>Element.append()</code> method</h2>\n\n<p>You can use the <code>Element.append()</code> method to insert one or more elements or strings at the end of a set elements inside a shared parent. Call the <code>Element.append()</code> method on the target node, and pass in one or more new elements or strings as arguments.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;list&#34;</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Item 1<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Item 2<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Item 3<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Create a new element\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">li</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;li&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">li</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;I am new here.&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Create another new element\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">liToo</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;li&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">liToo</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"sb\">`I&#39;m new, too!`</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Get the parent node\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#list&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Insert the new node after the last element in the parent node\n</span><span class=\"c1\">// ...&lt;li&gt;Item 3&lt;/li&gt;&lt;li&gt;I am new here.&lt;/li&gt;\n</span><span class=\"c1\"></span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">li</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// You can inject more than one item by passing in multiple arguments\n</span><span class=\"c1\">// ...&lt;li&gt;Item 3&lt;/li&gt;&lt;li&gt;I am new here.&lt;/li&gt;&lt;li&gt;I&#39;m new, too!&lt;/li&gt;\n</span><span class=\"c1\"></span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">li</span><span class=\"p\">,</span> <span class=\"nx\">liToo</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/eYedeKb?editors=1010\">Here&rsquo;s a demo of the <code>Element.append()</code> method.</a></p>\n\n<h2 id=\"the-element-prepend-method\">The <code>Element.prepend()</code> method</h2>\n\n<p>You can use the <code>Element.prepend()</code> method to insert one or more elements or strings at the beginning of a set elements inside a shared parent. Call the <code>Element.prepend()</code> method on the target node, and pass in one or more new elements or strings as arguments.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;list&#34;</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Item 1<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Item 2<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Item 3<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Create a new element\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">li</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;li&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">li</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;I am new here.&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Create another new element\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">liToo</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;li&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">liToo</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"sb\">`I&#39;m new, too!`</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Get the parent node\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#list&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Insert the new node before the first element in the parent node\n</span><span class=\"c1\">// &lt;li&gt;I am new here.&lt;/li&gt;&lt;li&gt;Item 1&lt;/li&gt;...\n</span><span class=\"c1\"></span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">prepend</span><span class=\"p\">(</span><span class=\"nx\">li</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// You can inject more than one item by passing in multiple arguments\n</span><span class=\"c1\">// &lt;li&gt;I am new here.&lt;/li&gt;&lt;li&gt;I&#39;m new, too!&lt;/li&gt;&lt;li&gt;Item 1&lt;/li&gt;...\n</span><span class=\"c1\"></span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">prepend</span><span class=\"p\">(</span><span class=\"nx\">li</span><span class=\"p\">,</span> <span class=\"nx\">liToo</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/gOXwXdW?editors=1010\">Here&rsquo;s a demo of the <code>Element.prepend()</code> method.</a></p>\n\n<h2 id=\"the-node-replacewith-method\">The <code>Node.replaceWith()</code> method</h2>\n\n<p>The <code>Node.replaceWith()</code> method replaces an element (and all of its HTML elements and content) with another. Call the <code>Node.replaceWith()</code> method on the target node, and pass in one or more elements or strings as arguments.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>Good evening<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Get the target element\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">h1</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;h1&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Create a new element\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Good morning&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Replace the target with the new element\n</span><span class=\"c1\">// &lt;p&gt;Good morning&lt;/p&gt;\n</span><span class=\"c1\"></span><span class=\"nx\">h1</span><span class=\"p\">.</span><span class=\"nx\">replaceWith</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// You can replace it with more than one item by passing in multiple arguments\n</span><span class=\"c1\">// &lt;p&gt;Good morning&lt;/p&gt;How are you today?\n</span><span class=\"c1\"></span><span class=\"nx\">h1</span><span class=\"p\">.</span><span class=\"nx\">replaceWith</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span> <span class=\"s1\">&#39;How are you today?&#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/BamLmqw?editors=1010\">Here&rsquo;s a demo of the <code>Node.replaceWith()</code> method.</a></p>",
      "content_text": "Yesterday, we looked at four ways to inject text and HTML into the DOM with vanilla JS. Today, we’re going to look at five more.\n\nLet’s dig in!\n\nThe document.createElement() method\n\nYou can use the document.createElement() method to create an element. Pass in the element to create, without angled brackets (<>), as an argument\nlet div = document.createElement('div');\nlet link = document.createElement('a');\nlet article = document.createElement('article');\n\nYou can use any valid HTML tag, and even create custom ones, too. For example, these also work.\nlet chicken = document.createElement('chicken'); // <chicken></chicken>\nlet placeholder = document.createElement('_'); // <_></_>\n\nYou can manipulate an element created with document.createElement() like you would any other element in the DOM. Add classes, attributes, styles, and more.\nlet div = document.createElement('div');\ndiv.textContent = 'Hello, world!';\ndiv.className = 'new-div';\ndiv.id = 'new-div';\ndiv.setAttribute('data-div', 'new');\ndiv.style.color = '#fff';\ndiv.style.backgroundColor = 'rebeccapurple';\n\nHere’s a demo of the document.createElement() method.\n\nThe Node.before() method\n\nThe Node.before() method inserts elements and strings before another element. Call the Node.before() method on the node you want to insert before, and pass in one or more new elements or strings as arguments.\n<div id=\"app\">Good evening</div>// Create a new element\nlet p = document.createElement('p');\np.textContent = 'Hello!';\n\n// Get the target node\nlet app = document.querySelector('#app');\n\n// Insert the new node before the target node\n// <p>Hello!</p><div id=\"app\">Good evening</div>\napp.before(p);\n\n// You can inject more than one item by passing in multiple arguments\n// <p>Hello!</p>What's poppin'<div id=\"app\">Good evening</div>\napp.before(p, `What's poppin?`);\n\nHere’s a demo of the Node.before() method.\n\nThe Node.after() method\n\nThe Node.after() method inserts elements and strings after another element. Call the Node.after() method on the node you want to insert after, and pass in one or more new elements or strings as arguments.\n<div id=\"app\">Good morning</div>// Create a new element\nlet p = document.createElement('p');\np.textContent = 'Hello!';\n\n// Get the target node\nlet app = document.querySelector('#app');\n\n// Insert the new node after the target node\n// <div id=\"app\">Good morning</div><p>Hello!</p>\napp.after(p);\n\n// You can inject more than one item by passing in multiple arguments\n// <div id=\"app\">Good morning</div><p>Hello!</p>What's poppin'\napp.after(p, `What's poppin?`);\n\nHere’s a demo of the Node.after() method.\n\nThe Element.append() method\n\nYou can use the Element.append() method to insert one or more elements or strings at the end of a set elements inside a shared parent. Call the Element.append() method on the target node, and pass in one or more new elements or strings as arguments.\n<ul id=\"list\">\n\t<li>Item 1</li>\n\t<li>Item 2</li>\n\t<li>Item 3</li>\n</ul>// Create a new element\nlet li = document.createElement('li');\nli.textContent = 'I am new here.';\n\n// Create another new element\nlet liToo = document.createElement('li');\nliToo.textContent = `I'm new, too!`;\n\n// Get the parent node\nlet list = document.querySelector('#list');\n\n// Insert the new node after the last element in the parent node\n// ...<li>Item 3</li><li>I am new here.</li>\nlist.append(li);\n\n// You can inject more than one item by passing in multiple arguments\n// ...<li>Item 3</li><li>I am new here.</li><li>I'm new, too!</li>\nlist.append(li, liToo);\n\nHere’s a demo of the Element.append() method.\n\nThe Element.prepend() method\n\nYou can use the Element.prepend() method to insert one or more elements or strings at the beginning of a set elements inside a shared parent. Call the Element.prepend() method on the target node, and pass in one or more new elements or strings as arguments.\n<ul id=\"list\">\n\t<li>Item 1</li>\n\t<li>Item 2</li>\n\t<li>Item 3</li>\n</ul>// Create a new element\nlet li = document.createElement('li');\nli.textContent = 'I am new here.';\n\n// Create another new element\nlet liToo = document.createElement('li');\nliToo.textContent = `I'm new, too!`;\n\n// Get the parent node\nlet list = document.querySelector('#list');\n\n// Insert the new node before the first element in the parent node\n// <li>I am new here.</li><li>Item 1</li>...\nlist.prepend(li);\n\n// You can inject more than one item by passing in multiple arguments\n// <li>I am new here.</li><li>I'm new, too!</li><li>Item 1</li>...\nlist.prepend(li, liToo);\n\nHere’s a demo of the Element.prepend() method.\n\nThe Node.replaceWith() method\n\nThe Node.replaceWith() method replaces an element (and all of its HTML elements and content) with another. Call the Node.replaceWith() method on the target node, and pass in one or more elements or strings as arguments.\n<h1>Good evening</h1>// Get the target element\nlet h1 = document.querySelector('h1');\n\n// Create a new element\nlet p = document.createElement('p');\np.textContent = 'Good morning';\n\n// Replace the target with the new element\n// <p>Good morning</p>\nh1.replaceWith(p);\n\n// You can replace it with more than one item by passing in multiple arguments\n// <p>Good morning</p>How are you today?\nh1.replaceWith(p, 'How are you today?');\n\nHere’s a demo of the Node.replaceWith() method.",
      "date_published": "2022-02-04T15:30:00.000Z",
      "date_modified": "2022-02-04T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "1473308abd907b7c296c11c62a8993af4c632b04473e3d95f5cb748cd9e6ec22.html"
      }
    },
    {
      "id": "https://gomakethings.com/four-different-ways-to-inject-text-and-html-into-an-element-with-vanilla-javascript/",
      "url": "https://gomakethings.com/four-different-ways-to-inject-text-and-html-into-an-element-with-vanilla-javascript/",
      "title": "Four different ways to inject text and HTML into an element with vanilla JavaScript",
      "summary": "Today, we’re going to look at four different techniques you can use to get and set text and HTML in DOM elements.\nLet’s dig in!\nThe Element.innerHTML property You can use the Element.innerHTML property to get and set the HTML content inside an element as a string.\n<div class=\"greeting\"> <p>Hello world!</p> </div>let greeting = document.querySelector('.greeting'); // Get HTML content // returns \"<p>Hello world!</p>\" let html = greeting.innerHTML; // Set HTML content // This replaces what was in there already greeting.",
      "content_html": "<p>Today, we&rsquo;re going to look at four different techniques you can use to get and set text and HTML in DOM elements.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-element-innerhtml-property\">The <code>Element.innerHTML</code> property</h2>\n\n<p>You can use the <code>Element.innerHTML</code> property to get and set the HTML content inside an element as a string.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;greeting&#34;</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Hello world!<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;.greeting&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Get HTML content\n</span><span class=\"c1\">// returns &#34;&lt;p&gt;Hello world!&lt;/p&gt;&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">html</span> <span class=\"o\">=</span> <span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Set HTML content\n</span><span class=\"c1\">// This replaces what was in there already\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;We can dynamically change the HTML. We can even include HTML elements like &lt;a href=&#34;#&#34;&gt;this link&lt;/a&gt;.&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Add HTML to the end of an element&#39;s existing content\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; Add this after what is already there.&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Add HTML to the beginning of an element&#39;s existing content\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;We can add this to the beginning. &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// You can inject entire elements into other ones, too\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;&lt;p&gt;A new paragraph&lt;/p&gt;&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/BamzqaX?editors=1010\">Here&rsquo;s a demo of the <code>Element.innerHTML</code> property.</a></p>\n\n<h2 id=\"the-element-outerhtml-property\">The <code>Element.outerHTML</code> property</h2>\n\n<p>You can use the <code>Element.outerHTML</code> property to get and set the HTML content <em>including</em> an element. This works the same as <code>Element.innerHTML</code>, but includes the element itself when getting and updating HTML content.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;greeting&#34;</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Hello world!<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;.greeting&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Get HTML content\n</span><span class=\"c1\">// returns &#34;&lt;div class=&#34;greeting&#34;&gt;&lt;p&gt;Hello world!&lt;/p&gt;&lt;/div&gt;&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">html</span> <span class=\"o\">=</span> <span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">outerHTML</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Set HTML content\n</span><span class=\"c1\">// This completely replaces the &lt;div class=&#34;greeting&#34;&gt;&lt;/div&gt; element and all of its content\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">outerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;p class=&#34;outro&#34;&gt;Goodbye, friend! &lt;a href=&#34;exit.html&#34;&gt;Click here to leave.&lt;/a&gt;&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Add HTML after the element (and outside of it)\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">outerHTML</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; Add this after what is already there.&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Add HTML before the element (and outside of it)\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">outerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;We can add this to the beginning. &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/dyZXgPq?editors=1010\">Here&rsquo;s a demo of the <code>Element.outerHTML</code> property.</a></p>\n\n<h2 id=\"the-node-textcontent-property\">The <code>Node.textContent</code> property</h2>\n\n<p>You can use the <code>Node.textContent</code> property to get and set the text of an element (and omit the markup) as a string.</p>\n\n<p>In the example below, you may notice that the <code>Node.textContent</code> property gets <em>all</em> of the text content, including CSS properties inside of a <code>style</code> element and <code>hidden</code> UI elements.</p>\n\n<p>Any HTML elements included in a string when setting content with the <code>Node.textContent</code> property are automatically encoded and rendered as-is.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;greeting&#34;</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">style</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text/css&#34;</span><span class=\"p\">&gt;</span>\n\t\t<span class=\"nt\">p</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">rebeccapurple</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">hidden</span><span class=\"p\">&gt;</span>This is not rendered.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Hello world!<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;.greeting&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Get text content\n</span><span class=\"c1\">// returns &#34;p {color: rebeccapurple;} This is not rendered. Hello world!&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">textContent</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Set text content\n</span><span class=\"c1\">// This completely replaces whats there, including any HTML elements\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;We can dynamically change the content.&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Add text to the end of an element&#39;s existing content\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; Add this after what is already there.&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Add text to the beginning of an element&#39;s existing content\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;We can add this to the beginning. &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">textContent</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// HTML elements are automatically encoded and rendered as-is\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;p&gt;See you later!&lt;/p&gt;&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/abVZROE?editors=1010\">Here&rsquo;s a demo of the <code>Node.textContent</code> property.</a></p>\n\n<h2 id=\"the-element-innertext-property\">The <code>Element.innerText</code> property</h2>\n\n<p>The <code>Element.innerText</code> property gets and sets the <em>rendered text</em> of an element (and omits the markup).</p>\n\n<p>Unlike the <code>Node.textContent</code> property, the <code>Element.innerText</code> property returns only rendered text, similar to what a user would be able to select with their cursor or the keyboard when highlighting text.</p>\n\n<p>Like <code>Node.textContent</code>, any HTML elements included in a string when setting content are automatically encoded and rendered as-is.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;greeting&#34;</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">style</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text/css&#34;</span><span class=\"p\">&gt;</span>\n\t\t<span class=\"nt\">p</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">rebeccapurple</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">hidden</span><span class=\"p\">&gt;</span>This is not rendered.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Hello world!<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">elem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;.greeting&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Get text content\n</span><span class=\"c1\">// returns &#34;Hello world!&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">innerText</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Set text content\n</span><span class=\"c1\">// This completely replaces whats there, including any HTML elements\n</span><span class=\"c1\"></span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">innerText</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;We can dynamically change the content.&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Add text to the end of an element&#39;s existing content\n</span><span class=\"c1\"></span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">innerText</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; Add this after what is already there.&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Add text to the beginning of an element&#39;s existing content\n</span><span class=\"c1\"></span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">innerText</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;We can add this to the beginning. &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">innerText</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// HTML elements are automatically encoded and rendered as-is\n</span><span class=\"c1\"></span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">innerText</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;p&gt;See you later!&lt;/p&gt;&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/NWwrOGq?editors=1010\">Here&rsquo;s a demo of the <code>Element.innerText</code> property.</a></p>\n\n<h2 id=\"which-one-should-you-use\">Which one should you use?</h2>\n\n<p>Generally speaking, if you&rsquo;re only modifying text, using the <code>Node.textContent</code> property is your best, safest bet.</p>\n\n<p>For modifying HTML, the <code>Element.innerHTML</code> property is very useful, but does have some security concerns that we&rsquo;ll look at in another article.</p>",
      "content_text": "Today, we’re going to look at four different techniques you can use to get and set text and HTML in DOM elements.\n\nLet’s dig in!\n\nThe Element.innerHTML property\n\nYou can use the Element.innerHTML property to get and set the HTML content inside an element as a string.\n<div class=\"greeting\">\n\t<p>Hello world!</p>\n</div>let greeting = document.querySelector('.greeting');\n\n// Get HTML content\n// returns \"<p>Hello world!</p>\"\nlet html = greeting.innerHTML;\n\n// Set HTML content\n// This replaces what was in there already\ngreeting.innerHTML = 'We can dynamically change the HTML. We can even include HTML elements like <a href=\"#\">this link</a>.';\n\n// Add HTML to the end of an element's existing content\ngreeting.innerHTML += ' Add this after what is already there.';\n\n// Add HTML to the beginning of an element's existing content\ngreeting.innerHTML = 'We can add this to the beginning. ' + elem.innerHTML;\n\n// You can inject entire elements into other ones, too\ngreeting.innerHTML += '<p>A new paragraph</p>';\n\nHere’s a demo of the Element.innerHTML property.\n\nThe Element.outerHTML property\n\nYou can use the Element.outerHTML property to get and set the HTML content including an element. This works the same as Element.innerHTML, but includes the element itself when getting and updating HTML content.\n<div class=\"greeting\">\n\t<p>Hello world!</p>\n</div>let greeting = document.querySelector('.greeting');\n\n// Get HTML content\n// returns \"<div class=\"greeting\"><p>Hello world!</p></div>\"\nlet html = greeting.outerHTML;\n\n// Set HTML content\n// This completely replaces the <div class=\"greeting\"></div> element and all of its content\ngreeting.outerHTML = '<p class=\"outro\">Goodbye, friend! <a href=\"exit.html\">Click here to leave.</a>';\n\n// Add HTML after the element (and outside of it)\ngreeting.outerHTML += ' Add this after what is already there.';\n\n// Add HTML before the element (and outside of it)\ngreeting.outerHTML = 'We can add this to the beginning. ' + greeting.innerHTML;\n\nHere’s a demo of the Element.outerHTML property.\n\nThe Node.textContent property\n\nYou can use the Node.textContent property to get and set the text of an element (and omit the markup) as a string.\n\nIn the example below, you may notice that the Node.textContent property gets all of the text content, including CSS properties inside of a style element and hidden UI elements.\n\nAny HTML elements included in a string when setting content with the Node.textContent property are automatically encoded and rendered as-is.\n<div class=\"greeting\">\n\t<style type=\"text/css\">\n\t\tp {\n\t\t\tcolor: rebeccapurple;\n\t\t}\n\t</style>\n\t<p hidden>This is not rendered.</p>\n\t<p>Hello world!</p>\n</div>let greeting = document.querySelector('.greeting');\n\n// Get text content\n// returns \"p {color: rebeccapurple;} This is not rendered. Hello world!\"\nlet text = greeting.textContent;\n\n// Set text content\n// This completely replaces whats there, including any HTML elements\ngreeting.textContent = 'We can dynamically change the content.';\n\n// Add text to the end of an element's existing content\ngreeting.textContent += ' Add this after what is already there.';\n\n// Add text to the beginning of an element's existing content\ngreeting.textContent = 'We can add this to the beginning. ' + greeting.textContent;\n\n// HTML elements are automatically encoded and rendered as-is\ngreeting.textContent = '<p>See you later!</p>';\n\nHere’s a demo of the Node.textContent property.\n\nThe Element.innerText property\n\nThe Element.innerText property gets and sets the rendered text of an element (and omits the markup).\n\nUnlike the Node.textContent property, the Element.innerText property returns only rendered text, similar to what a user would be able to select with their cursor or the keyboard when highlighting text.\n\nLike Node.textContent, any HTML elements included in a string when setting content are automatically encoded and rendered as-is.\n<div class=\"greeting\">\n\t<style type=\"text/css\">\n\t\tp {\n\t\t\tcolor: rebeccapurple;\n\t\t}\n\t</style>\n\t<p hidden>This is not rendered.</p>\n\t<p>Hello world!</p>\n</div>let elem = document.querySelector('.greeting');\n\n// Get text content\n// returns \"Hello world!\"\nlet text = elem.innerText;\n\n// Set text content\n// This completely replaces whats there, including any HTML elements\nelem.innerText = 'We can dynamically change the content.';\n\n// Add text to the end of an element's existing content\nelem.innerText += ' Add this after what is already there.';\n\n// Add text to the beginning of an element's existing content\nelem.innerText = 'We can add this to the beginning. ' + elem.innerText;\n\n// HTML elements are automatically encoded and rendered as-is\nelem.innerText = '<p>See you later!</p>';\n\nHere’s a demo of the Element.innerText property.\n\nWhich one should you use?\n\nGenerally speaking, if you’re only modifying text, using the Node.textContent property is your best, safest bet.\n\nFor modifying HTML, the Element.innerHTML property is very useful, but does have some security concerns that we’ll look at in another article.",
      "date_published": "2022-02-03T15:30:00.000Z",
      "date_modified": "2022-02-03T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "6cb763c8c1a4fb9fbc0592c4f8eab555d20cb320c510d0092f89c01b62bd7b45.html"
      }
    },
    {
      "id": "https://gomakethings.com/bailey-the-lab-mix/",
      "url": "https://gomakethings.com/bailey-the-lab-mix/",
      "title": "Bailey the lab-mix",
      "summary": "Bailey\nDecember 1, 2009 - February 1, 2022   If you’ve been following me for a while, you may already be familiar Bailey, my black lab mix. Yesterday, she passed away at home after several years of liver issues.\nWhen we adopted Bailey 12 years ago, we were looking for a small dog. She was listed as a “chihuahua/rat terrier mix,” expected to be about 15 pounds. Then 20 pounds came and went.",
      "content_html": "<figure>\n    <img alt=\"A black lab mix, laying on the floor with a red bandana on\" height=\"684\" width=\"1140\" src=\"https://gomakethings.com/img/bailey-2.jpg\">\n    <figcaption>\n        <strong>Bailey</strong><br>December 1, 2009 - February 1, 2022\n    </figcaption>\n</figure>\n\n<p>If you&rsquo;ve been following me for a while, you may already be familiar Bailey, my black lab mix. Yesterday, she passed away at home after several years of liver issues.</p>\n\n<p>When we adopted Bailey 12 years ago, we were looking for a small dog. She was listed as a &ldquo;chihuahua/rat terrier mix,&rdquo; expected to be about 15 pounds. Then 20 pounds came and went. And then 30. And then 40. She eventually slowed down around 55 pounds.</p>\n\n<p>While she wasn&rsquo;t quite the lap-dog we expected, she was an amazing dog! She was incredibly loving, loyal, and well-behaved, even as a puppy.</p>\n\n<p>If you attended one of my workshops, you may remember her as a staple fixture during the weekly office hours. She loved to sleep in my office all day, snoring away in the background while I worked.</p>\n\n<p>Bailey in many ways kick-started my career as a web developer.</p>\n\n<p>When we adopted her from <a href=\"https://pawsnewengland.com\">PAWS New England</a>, their website didn&rsquo;t really reflect the awesome work they were doing. I was still an amateur developer at the time, and volunteered to build them a new one. They work I did with them became they key work experience I highlighted when I starting looking for professional developer jobs.</p>\n\n<p>When I started freelancing, <a href=\"https://gomakethings.com/jake-the-bichon/\">my other dog, Jake, had just passed away</a>. I made Bailey my honorary &ldquo;client relations manager.&rdquo;</p>\n\n<p>When I secured a gig working with Harvard Business School, they insisted that I bring Bailey to the meeting!</p>\n\n<p>Bailey was a labrador retriever to her core. If you ever tossed a ball, she couldn&rsquo;t help but bring it back. She&rsquo;s even woken up from a nap at the sound of a thrown toy, retrieved it, and then immediately gone back to sleep.</p>\n\n<p>In her later years, she wanted nothing more than to just sleep in the company of her humans. She had a favorite spot in every room in the house.</p>\n\n<p>My office has a lonely quiet today, without the sound of her snoring in the background. Thanks for a lifetime of love, Bailey&hellip;</p>",
      "content_text": "\n    \n    \n        BaileyDecember 1, 2009 - February 1, 2022\n    \n\n\nIf you’ve been following me for a while, you may already be familiar Bailey, my black lab mix. Yesterday, she passed away at home after several years of liver issues.\n\nWhen we adopted Bailey 12 years ago, we were looking for a small dog. She was listed as a “chihuahua/rat terrier mix,” expected to be about 15 pounds. Then 20 pounds came and went. And then 30. And then 40. She eventually slowed down around 55 pounds.\n\nWhile she wasn’t quite the lap-dog we expected, she was an amazing dog! She was incredibly loving, loyal, and well-behaved, even as a puppy.\n\nIf you attended one of my workshops, you may remember her as a staple fixture during the weekly office hours. She loved to sleep in my office all day, snoring away in the background while I worked.\n\nBailey in many ways kick-started my career as a web developer.\n\nWhen we adopted her from PAWS New England, their website didn’t really reflect the awesome work they were doing. I was still an amateur developer at the time, and volunteered to build them a new one. They work I did with them became they key work experience I highlighted when I starting looking for professional developer jobs.\n\nWhen I started freelancing, my other dog, Jake, had just passed away. I made Bailey my honorary “client relations manager.”\n\nWhen I secured a gig working with Harvard Business School, they insisted that I bring Bailey to the meeting!\n\nBailey was a labrador retriever to her core. If you ever tossed a ball, she couldn’t help but bring it back. She’s even woken up from a nap at the sound of a thrown toy, retrieved it, and then immediately gone back to sleep.\n\nIn her later years, she wanted nothing more than to just sleep in the company of her humans. She had a favorite spot in every room in the house.\n\nMy office has a lonely quiet today, without the sound of her snoring in the background. Thanks for a lifetime of love, Bailey…",
      "date_published": "2022-02-02T15:30:00.000Z",
      "date_modified": "2022-02-02T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "276798c64c879facbe54a7758c4f0f1c5b3cd3e5e692b1a2b6180343715532dc.html"
      }
    },
    {
      "id": "https://gomakethings.com/how-to-progressively-enhance-a-nav-menu/",
      "url": "https://gomakethings.com/how-to-progressively-enhance-a-nav-menu/",
      "title": "How to progressively enhance a nav menu",
      "summary": "In last week’s article on the ideal browser support strategy in 2022, I wrote:\n Things can fail if JS is unsupported if they’re “nice to have” features. Anything critical needs to work without JavaScript.\n In response, reader Caleb Stauffer asked how I would handle a flyout or drawer nav menu (“think mobile with a hamburger icon” - shared with permission).\nI’ve mostly moved away from that pattern in general, but if I did need to use it for something today, I would either…",
      "content_html": "<p>In last week&rsquo;s article on <a href=\"https://gomakethings.com/what-should-your-browser-support-strategy-be-in-2022/\">the ideal browser support strategy in 2022</a>, I wrote:</p>\n\n<blockquote>\n<p>Things can fail if JS is unsupported if they’re “nice to have” features. Anything critical needs to work without JavaScript.</p>\n</blockquote>\n\n<p>In response, <a href=\"https://develop.calebstauffer.com/\">reader Caleb Stauffer</a> asked how I would handle a flyout or drawer nav menu (&ldquo;think mobile with a hamburger icon&rdquo; - shared with permission).</p>\n\n<p>I&rsquo;ve mostly moved away from that pattern in general, but if I <em>did</em> need to use it for something today, I would either&hellip;</p>\n\n<ol>\n<li>Treat it as a fully expanded and visible navigation, and progressively enhance it into a flyout once the JS loads, or</li>\n<li>Have the nav in the footer by default, with the hamburger functioning as an anchor link. When the JS loads, I&rsquo;d progressively enhance it into a flyout.</li>\n</ol>\n\n<p>A lot of folks assume that progressive enhancement means having to write the same code twice, but often, it can be as simple as extending the pattern you already have once the JS loads.</p>",
      "content_text": "In last week’s article on the ideal browser support strategy in 2022, I wrote:\n\n\nThings can fail if JS is unsupported if they’re “nice to have” features. Anything critical needs to work without JavaScript.\n\n\nIn response, reader Caleb Stauffer asked how I would handle a flyout or drawer nav menu (“think mobile with a hamburger icon” - shared with permission).\n\nI’ve mostly moved away from that pattern in general, but if I did need to use it for something today, I would either…\n\n\nTreat it as a fully expanded and visible navigation, and progressively enhance it into a flyout once the JS loads, or\nHave the nav in the footer by default, with the hamburger functioning as an anchor link. When the JS loads, I’d progressively enhance it into a flyout.\n\n\nA lot of folks assume that progressive enhancement means having to write the same code twice, but often, it can be as simple as extending the pattern you already have once the JS loads.",
      "date_published": "2022-02-01T15:30:00.000Z",
      "date_modified": "2022-02-01T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "b19a003a0ccea76c5f39ce70e9a33108192cca385be71d42b9ac62062069c3b1.html"
      }
    },
    {
      "id": "https://gomakethings.com/a-more-easy-way-to-write-if...or-checks-with-vanilla-javascript/",
      "url": "https://gomakethings.com/a-more-easy-way-to-write-if...or-checks-with-vanilla-javascript/",
      "title": "A more easy way to write if...or checks with vanilla JavaScript",
      "summary": "A few days ago, my friend Nathan Smith reminded me of my favorite way to write if...or checks when you want to see if a variable is one of a handful of values: using Array.includes() instead.\nLet’s dig in!\nA traditional if...or check Let’s say you have a variable, wizard. You want to check if it has a value of Merlin or Gandalf.\nTraditionally, you might do something like this.",
      "content_html": "<p>A few days ago, my friend <a href=\"https://twitter.com/nathansmith/status/1487201768585023494\">Nathan Smith reminded me of my favorite way to write <code>if...or</code> checks</a> when you want to see if a variable is one of a handful of values: using <code>Array.includes()</code> instead.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"a-traditional-if-or-check\">A traditional <code>if...or</code> check</h2>\n\n<p>Let&rsquo;s say you have a variable, <code>wizard</code>. You want to check if it has a value of <code>Merlin</code> or <code>Gandalf</code>.</p>\n\n<p>Traditionally, you might do something like this.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizard</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">wizard</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;Merlin&#39;</span> <span class=\"o\">||</span> <span class=\"nx\">wizard</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;Gandalf&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`It&#39;s one of the good ones!`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;This wizard sucks...&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This example would log <code>It's one of the good ones!</code>. <a href=\"https://codepen.io/cferdinandi/pen/oNobwzB?editors=0011\">Here&rsquo;s a demo.</a></p>\n\n<p>It works, but if the values are long or you have a lot of them, you code can become pretty unruly. Fortunately, the <code>Array.includes()</code> method provides a simpler way.</p>\n\n<h2 id=\"using-the-array-includes-method\">Using the <code>Array.includes()</code> method</h2>\n\n<p>This this approach, you put all of the values you want to check for (in this example, <code>Merlin</code> and <code>Gandalf</code>) in an array (<code>[]</code>).</p>\n\n<p>Then, you call the <code>Array.includes()</code> method on it, and pass the value you want to check (in this case, the <code>wizard</code> variable) in as an argument.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Gandalf&#39;</span><span class=\"p\">].</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`It&#39;s one of the good ones!`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;This wizard sucks...&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>If the variable contains one of the values, the <code>Array.includes()</code> method returns <code>true</code>. Otherwise, it returns <code>false</code>.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/WNXrOpL?editors=0011\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"when-should-you-use-this\">When should you use this?</h2>\n\n<p>With just two short values, this approach doesn&rsquo;t really add much.</p>\n\n<p>But if your values are longer, or you have a lot of them, or you just generally find it more readable, it&rsquo;s a great alternative to a bunch of <code>if...or</code> checks.</p>",
      "content_text": "A few days ago, my friend Nathan Smith reminded me of my favorite way to write if...or checks when you want to see if a variable is one of a handful of values: using Array.includes() instead.\n\nLet’s dig in!\n\nA traditional if...or check\n\nLet’s say you have a variable, wizard. You want to check if it has a value of Merlin or Gandalf.\n\nTraditionally, you might do something like this.\nlet wizard = 'Merlin';\n\nif (wizard === 'Merlin' || wizard === 'Gandalf') {\n\tconsole.log(`It's one of the good ones!`);\n} else {\n\tconsole.log('This wizard sucks...');\n}\n\nThis example would log It's one of the good ones!. Here’s a demo.\n\nIt works, but if the values are long or you have a lot of them, you code can become pretty unruly. Fortunately, the Array.includes() method provides a simpler way.\n\nUsing the Array.includes() method\n\nThis this approach, you put all of the values you want to check for (in this example, Merlin and Gandalf) in an array ([]).\n\nThen, you call the Array.includes() method on it, and pass the value you want to check (in this case, the wizard variable) in as an argument.\nif (['Merlin', 'Gandalf'].includes(wizard)) {\n\tconsole.log(`It's one of the good ones!`);\n} else {\n\tconsole.log('This wizard sucks...');\n}\n\nIf the variable contains one of the values, the Array.includes() method returns true. Otherwise, it returns false.\n\nHere’s another demo.\n\nWhen should you use this?\n\nWith just two short values, this approach doesn’t really add much.\n\nBut if your values are longer, or you have a lot of them, or you just generally find it more readable, it’s a great alternative to a bunch of if...or checks.",
      "date_published": "2022-01-31T15:30:00.000Z",
      "date_modified": "2022-01-31T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "117fdfda49ac34b582136a2d015b5353c22c72c699876e0c9e97abfeb484a64b.html"
      }
    },
    {
      "id": "https://gomakethings.com/vanilla-javascript-and-old-school-ssgs-are-the-best-choices-for-web-performance/",
      "url": "https://gomakethings.com/vanilla-javascript-and-old-school-ssgs-are-the-best-choices-for-web-performance/",
      "title": "Vanilla JavaScript and old-school SSGs are the best choices for web performance",
      "summary": "Yesterday, we looked at a report by Alan Dávalos on the current browser usage landscape. One thing I didn’t dig into that much was the section on web performance.\nToday, let’s talk about it!\nFirst, a quick aside on 4g versus 3g Alan’s article notes:\n When using lab tools such as Lighthouse, the network is tethered to simulate 3G, but mobile networks worldwide have changed recently. According to a May 2020 report by Opensignal, the worldwide average availability for 4G is 86.",
      "content_html": "<p>Yesterday, we looked at <a href=\"https://gomakethings.com/what-should-your-browser-support-strategy-be-in-2022/\">a report by Alan Dávalos on the current browser usage landscape</a>. One thing I didn&rsquo;t dig into that much was the section on web performance.</p>\n\n<p>Today, let&rsquo;s talk about it!</p>\n\n<h2 id=\"first-a-quick-aside-on-4g-versus-3g\">First, a quick aside on 4g versus 3g</h2>\n\n<p>Alan&rsquo;s article notes:</p>\n\n<blockquote>\n<p>When using lab tools such as Lighthouse, the network is tethered to simulate 3G, but mobile networks worldwide have changed recently. According to <a href=\"https://www.opensignal.com/sites/opensignal-com/files/data/reports/pdf-only/data-2020-05/state_of_mobile_experience_may_2020_opensignal_3_0.pdf\">a May 2020 report by Opensignal</a>, the worldwide average availability for 4G is 86.8%.</p>\n</blockquote>\n\n<p>I had a handful of readers push back on the idea that 4g is the standard.</p>\n\n<p>I have students who live in places like Colombia and Kenya where 3g is <em>very much</em> the standard internet speed. Doing some quick math on the numbers Alan shared, more than 13% of the world <em>doesn&rsquo;t</em> have access to 4g.</p>\n\n<p>In other words, I think 3g should still be the web performance baseline we test against.</p>\n\n<h2 id=\"javascript-libraries-and-performance\">JavaScript libraries and performance</h2>\n\n<p>Alan also did some analysis of JavaScript libraries and frontend performance.</p>\n\n<p>In particular, while overall library size is one aspect of JavaScript performance, how they&rsquo;re written under-the-hood matters quite a bit more.</p>\n\n<blockquote>\n<p>The table above compares frameworks to a hand-optimized vanilla JS implementation in three main categories: DOM Manipulation, Startup, and Memory Allocation. In it we can observe the following:</p>\n\n<ul>\n<li>React and Angular perform twice as bad as Vanilla JS on average.</li>\n<li>In contrast, Vue actually stands closer to Preact and Stencil at an average of 1.5 times. The main reason for the difference between this result and what we saw reported in the Web Almanac might be due to the performance improvements Vue had when version 3.0 released.</li>\n<li>And finally, Solid, Lit, and Svelte are all at around 1.2 times. They all perform very close to the Vanilla JS version.</li>\n</ul>\n</blockquote>\n\n<p>As you might imagine, vanilla JS is hands-down the fastest choice. If you care about performance (and you should), using only browser-native JavaScript is the absolute fastest you can get.</p>\n\n<p>But, newer tools like Solid and Preact performed <em>really close</em> to vanilla JS. Shockingly, so did Vue v3.</p>\n\n<p>Why? They were all written fairly recently, and feature far fewer abstractions under-the-hood than older libraries like React and Angular do. In otherwords, they&rsquo;re a lot closer to vanilla JS than their peers.</p>\n\n<p>Similarly, while Svelte has a library-like authoring experience, the exported code is mostly HTML with a sprinkling of vanilla JS. New kid on the block Astro wasn&rsquo;t tested, but I&rsquo;d expect similar results as Svelte.</p>\n\n<h2 id=\"static-site-generators\">Static Site Generators</h2>\n\n<p>Static Site Generators (SSGs) take markdown files with content and template files with HTML, and mash them together to create a bunch of prerendered HTML files.</p>\n\n<p>They give you the authoring benefits of a tool like WordPress, with the performance benefits of hand-written HTML.</p>\n\n<p>A lot of JavaScript library proponents are quick to point out that you can now use React and Vue as SSGs, thanks to frameworks like Next.js (React), Nuxt.js (Vue), and Gatsby (also React).</p>\n\n<p>But, these tools still output client-side JS. A lot of it, in fact!</p>\n\n<blockquote>\n<ul>\n<li>The median JS size for React-based Gatsby and Next.js and Vue-based Nuxt.js all stand at around 700 KB. This number is similar to the median for React and Vue in general.</li>\n<li>Compared to that, Go-based Hugo and Ruby-based Jekyll stand at 177 KB and 129 KB respectively.</li>\n<li>JS framework-based SSGs serve a median of over 500 KB of JS more than those not based in JS.</li>\n</ul>\n</blockquote>\n\n<p>Old-school SSGs like <a href=\"https://gohugo.io/\">Hugo</a> (what my site is powered by) and <a href=\"https://jekyllrb.com/\">Jekyll</a> where orders of magnitude smaller, and also 3x as likely to have good mobile performance scores.</p>\n\n<p>The data didn&rsquo;t look at <a href=\"https://www.11ty.dev/\">11ty</a>, which is built on Node. But I would expect it have similar results as Hugo and Jekyll, as it&rsquo;s built more like the old-school SSGs and not like a JS library-turned-SSG.</p>\n\n<h2 id=\"more-key-takeaways\">More key takeaways</h2>\n\n<p>So, what should you take away from this?</p>\n\n<ul>\n<li>Test your site and app performance on 3g.</li>\n<li>Using vanilla JS whenever you can.</li>\n<li>If you <em>need</em> a JS library, Preact is a no-brainer choice over React.</li>\n<li>Multi-page apps with SSGs are a better choice than SPAs with JS libraries.</li>\n</ul>",
      "content_text": "Yesterday, we looked at a report by Alan Dávalos on the current browser usage landscape. One thing I didn’t dig into that much was the section on web performance.\n\nToday, let’s talk about it!\n\nFirst, a quick aside on 4g versus 3g\n\nAlan’s article notes:\n\n\nWhen using lab tools such as Lighthouse, the network is tethered to simulate 3G, but mobile networks worldwide have changed recently. According to a May 2020 report by Opensignal, the worldwide average availability for 4G is 86.8%.\n\n\nI had a handful of readers push back on the idea that 4g is the standard.\n\nI have students who live in places like Colombia and Kenya where 3g is very much the standard internet speed. Doing some quick math on the numbers Alan shared, more than 13% of the world doesn’t have access to 4g.\n\nIn other words, I think 3g should still be the web performance baseline we test against.\n\nJavaScript libraries and performance\n\nAlan also did some analysis of JavaScript libraries and frontend performance.\n\nIn particular, while overall library size is one aspect of JavaScript performance, how they’re written under-the-hood matters quite a bit more.\n\n\nThe table above compares frameworks to a hand-optimized vanilla JS implementation in three main categories: DOM Manipulation, Startup, and Memory Allocation. In it we can observe the following:\n\n\nReact and Angular perform twice as bad as Vanilla JS on average.\nIn contrast, Vue actually stands closer to Preact and Stencil at an average of 1.5 times. The main reason for the difference between this result and what we saw reported in the Web Almanac might be due to the performance improvements Vue had when version 3.0 released.\nAnd finally, Solid, Lit, and Svelte are all at around 1.2 times. They all perform very close to the Vanilla JS version.\n\n\n\nAs you might imagine, vanilla JS is hands-down the fastest choice. If you care about performance (and you should), using only browser-native JavaScript is the absolute fastest you can get.\n\nBut, newer tools like Solid and Preact performed really close to vanilla JS. Shockingly, so did Vue v3.\n\nWhy? They were all written fairly recently, and feature far fewer abstractions under-the-hood than older libraries like React and Angular do. In otherwords, they’re a lot closer to vanilla JS than their peers.\n\nSimilarly, while Svelte has a library-like authoring experience, the exported code is mostly HTML with a sprinkling of vanilla JS. New kid on the block Astro wasn’t tested, but I’d expect similar results as Svelte.\n\nStatic Site Generators\n\nStatic Site Generators (SSGs) take markdown files with content and template files with HTML, and mash them together to create a bunch of prerendered HTML files.\n\nThey give you the authoring benefits of a tool like WordPress, with the performance benefits of hand-written HTML.\n\nA lot of JavaScript library proponents are quick to point out that you can now use React and Vue as SSGs, thanks to frameworks like Next.js (React), Nuxt.js (Vue), and Gatsby (also React).\n\nBut, these tools still output client-side JS. A lot of it, in fact!\n\n\n\nThe median JS size for React-based Gatsby and Next.js and Vue-based Nuxt.js all stand at around 700 KB. This number is similar to the median for React and Vue in general.\nCompared to that, Go-based Hugo and Ruby-based Jekyll stand at 177 KB and 129 KB respectively.\nJS framework-based SSGs serve a median of over 500 KB of JS more than those not based in JS.\n\n\n\nOld-school SSGs like Hugo (what my site is powered by) and Jekyll where orders of magnitude smaller, and also 3x as likely to have good mobile performance scores.\n\nThe data didn’t look at 11ty, which is built on Node. But I would expect it have similar results as Hugo and Jekyll, as it’s built more like the old-school SSGs and not like a JS library-turned-SSG.\n\nMore key takeaways\n\nSo, what should you take away from this?\n\n\nTest your site and app performance on 3g.\nUsing vanilla JS whenever you can.\nIf you need a JS library, Preact is a no-brainer choice over React.\nMulti-page apps with SSGs are a better choice than SPAs with JS libraries.\n",
      "date_published": "2022-01-28T15:30:00.000Z",
      "date_modified": "2022-01-28T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "d6fd66a94b8c7285a7fdf7f57e0cfd82d87d12e4697762f43c4088631826326b.html"
      }
    },
    {
      "id": "https://gomakethings.com/what-should-your-browser-support-strategy-be-in-2022/",
      "url": "https://gomakethings.com/what-should-your-browser-support-strategy-be-in-2022/",
      "title": "What should your browser support strategy be in 2022?",
      "summary": "A year ago this month, I mentioned that it was time to drop support for Internet Explorer. Yesterday, Alan Dávalos published a report looking at the current browser usage landscape, and what that means for us as developers.\nToday, I wanted to highlight some key insights, and my takeaways from the report. Let’s dig in!\nThe High-Level Summary Alan notes that IE was the “baseline” level of support for a lot of folks for years.",
      "content_html": "<p>A year ago this month, I mentioned that <a href=\"https://gomakethings.com/its-time-to-drop-ie-support/\">it was time to drop support for Internet Explorer</a>. Yesterday, Alan Dávalos published <a href=\"https://engineering.linecorp.com/en/blog/the-baseline-for-web-development-in-2022/\">a report looking at the current browser usage landscape</a>, and what that means for us as developers.</p>\n\n<p>Today, I wanted to highlight some key insights, and my takeaways from the report. Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-high-level-summary\">The High-Level Summary</h2>\n\n<p>Alan notes that IE was the &ldquo;baseline&rdquo; level of support for a lot of folks for years. With it gone, what should replace it?</p>\n\n<p>He writes&hellip;</p>\n\n<blockquote>\n<p>Taking all the data above in consideration, the new baseline for web development would be:</p>\n\n<ol>\n<li><strong>Safari</strong> is the baseline in terms of web standards: The sites we develop must work in Safari versions at least 2 years old.</li>\n<li><strong>Low-tier Android devices</strong> are the baseline in terms of performance: Low-tier Android devices have advanced little in the past few years so we must make sure our sites are super performant.</li>\n<li><strong>4G</strong> is the baseline in terms of networks: Mobile networks have become a lot faster and stabler worldwide in recent years.</li>\n</ol>\n</blockquote>\n\n<p>This has some big implications for how we make things for the web, and that&rsquo;s what I want to talk about for the rest of this article.</p>\n\n<h2 id=\"safari-and-web-standards\">Safari and web standards</h2>\n\n<p>The good news is that a lot of the best modern JavaScript methods and browser APIs work in Safari.</p>\n\n<p>Template literals, array and object destructuring, modern DOM manipulation methods, the object property shorthand syntax, the spread syntax operator, ES classes, ES modules&hellip; they all work natively in the last few versions of Safari.</p>\n\n<p>The bad news is that Safari/webkit is <em>woefully behind</em> Chromium and Firefox/Gecko in terms of implementing browser spec features.</p>\n\n<blockquote>\n<p>One fact becomes evident here, the number of web standards only Safari hasn’t implemented is many times bigger than those of Firefox and Chrome. To be precise, 2.4 times as much as Firefox and 4.7 times as much as Chrome.</p>\n</blockquote>\n\n<p>This becomes more problematic because on iOS and iPadOS devices, users don&rsquo;t have a choice. All browsers on those devices use a webkit under-the-hood. They&rsquo;re essentially just reskinned versions of Safari.</p>\n\n<p><strong>What this means for you</strong> is that you need to verify that features work in Safari, and if not, <a href=\"https://gomakethings.com/whats-the-difference-between-polyfills-helper-functions-and-transpiling-in-javascript/\">polyfill them</a> or <a href=\"https://babeljs.io/\">compile them back into a syntax that does using Babel</a>.</p>\n\n<h2 id=\"performance-considerations\">Performance considerations</h2>\n\n<p>A lot of developers (but not all of them)&hellip;</p>\n\n<ul>\n<li>Have expensive, high-end computers</li>\n<li>Have expensive, modern smart phones</li>\n<li>Have really fast home internet and/or 5g cell service</li>\n</ul>\n\n<p>Most real world users do not.</p>\n\n<p>As a result, we build things that work perfectly fine for us, but fail the people who use the things we build in pretty serious ways.</p>\n\n<p>That 30kb of minified and gzipped React (and all the accompanying JS you ship to render the UI) doesn&rsquo;t seem like a big deal on a good machine with faster internet. It makes sites unusable on older devices and slower connections.</p>\n\n<p><strong>What this means for you</strong> is that web performance, specifically on older devices and slower networks, should be a key part of your support strategy.</p>\n\n<h2 id=\"practical-implications\">Practical implications</h2>\n\n<p>Here&rsquo;s what this all means for how I personally build things for the web&hellip;</p>\n\n<ol>\n<li>Ship as little JavaScript possible.</li>\n<li>Avoid the latest and greatest, cutting edge JS methods and APIs unless I plan to polyfill them.</li>\n<li><a href=\"https://vanillajsguides.com/service-workers/\">Make heavy use of service workers</a> to improve performance and reduce data usage.</li>\n</ol>\n\n<p>Adding polyfills (item 2) violates &ldquo;ship as little JS as possible&rdquo; (item 1). I reserve that for situations where new methods add dramatic improvements to what I&rsquo;m building over older approaches.</p>\n\n<p>Things can fail if JS is unsupported if they&rsquo;re &ldquo;nice to have&rdquo; features. Anything critical needs to work without JavaScript.</p>",
      "content_text": "A year ago this month, I mentioned that it was time to drop support for Internet Explorer. Yesterday, Alan Dávalos published a report looking at the current browser usage landscape, and what that means for us as developers.\n\nToday, I wanted to highlight some key insights, and my takeaways from the report. Let’s dig in!\n\nThe High-Level Summary\n\nAlan notes that IE was the “baseline” level of support for a lot of folks for years. With it gone, what should replace it?\n\nHe writes…\n\n\nTaking all the data above in consideration, the new baseline for web development would be:\n\n\nSafari is the baseline in terms of web standards: The sites we develop must work in Safari versions at least 2 years old.\nLow-tier Android devices are the baseline in terms of performance: Low-tier Android devices have advanced little in the past few years so we must make sure our sites are super performant.\n4G is the baseline in terms of networks: Mobile networks have become a lot faster and stabler worldwide in recent years.\n\n\n\nThis has some big implications for how we make things for the web, and that’s what I want to talk about for the rest of this article.\n\nSafari and web standards\n\nThe good news is that a lot of the best modern JavaScript methods and browser APIs work in Safari.\n\nTemplate literals, array and object destructuring, modern DOM manipulation methods, the object property shorthand syntax, the spread syntax operator, ES classes, ES modules… they all work natively in the last few versions of Safari.\n\nThe bad news is that Safari/webkit is woefully behind Chromium and Firefox/Gecko in terms of implementing browser spec features.\n\n\nOne fact becomes evident here, the number of web standards only Safari hasn’t implemented is many times bigger than those of Firefox and Chrome. To be precise, 2.4 times as much as Firefox and 4.7 times as much as Chrome.\n\n\nThis becomes more problematic because on iOS and iPadOS devices, users don’t have a choice. All browsers on those devices use a webkit under-the-hood. They’re essentially just reskinned versions of Safari.\n\nWhat this means for you is that you need to verify that features work in Safari, and if not, polyfill them or compile them back into a syntax that does using Babel.\n\nPerformance considerations\n\nA lot of developers (but not all of them)…\n\n\nHave expensive, high-end computers\nHave expensive, modern smart phones\nHave really fast home internet and/or 5g cell service\n\n\nMost real world users do not.\n\nAs a result, we build things that work perfectly fine for us, but fail the people who use the things we build in pretty serious ways.\n\nThat 30kb of minified and gzipped React (and all the accompanying JS you ship to render the UI) doesn’t seem like a big deal on a good machine with faster internet. It makes sites unusable on older devices and slower connections.\n\nWhat this means for you is that web performance, specifically on older devices and slower networks, should be a key part of your support strategy.\n\nPractical implications\n\nHere’s what this all means for how I personally build things for the web…\n\n\nShip as little JavaScript possible.\nAvoid the latest and greatest, cutting edge JS methods and APIs unless I plan to polyfill them.\nMake heavy use of service workers to improve performance and reduce data usage.\n\n\nAdding polyfills (item 2) violates “ship as little JS as possible” (item 1). I reserve that for situations where new methods add dramatic improvements to what I’m building over older approaches.\n\nThings can fail if JS is unsupported if they’re “nice to have” features. Anything critical needs to work without JavaScript.",
      "date_published": "2022-01-27T15:30:00.000Z",
      "date_modified": "2022-01-27T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "c6650b59acd9485194fdbbbbc5b4699d8006da2c5e804d5a3060340488855def.html"
      }
    },
    {
      "id": "https://gomakethings.com/converting-numbers-to-strings-with-vanilla-javascript/",
      "url": "https://gomakethings.com/converting-numbers-to-strings-with-vanilla-javascript/",
      "title": "Converting numbers to strings with vanilla JavaScript",
      "summary": "Yesterday, we looked at a few ways to convert strings to numbers. Today, we’re looking at how to convert numbers to strings with JavaScript.\nLet’s dig in!\nThe Number.toFixed() method You can use the Number.toFixed() method to format a number to a fixed number of decimal places. Pass in the number of decimal places as an argument.\nIt returns a string.\nlet pi = 3.14159; let eleven = 11; // returns 3.",
      "content_html": "<p>Yesterday, we looked at <a href=\"https://gomakethings.com/three-ways-to-convert-strings-to-numbers-and-modify-existing-numbers-with-vanilla-javascript/\">a few ways to convert strings to numbers</a>. Today, we&rsquo;re looking at how to convert numbers to strings with JavaScript.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-number-tofixed-method\">The <code>Number.toFixed()</code> method</h2>\n\n<p>You can use the <code>Number.toFixed()</code> method to format a number to a fixed number of decimal places. Pass in the number of decimal places as an argument.</p>\n\n<p>It returns a string.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.14159</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">eleven</span> <span class=\"o\">=</span> <span class=\"mi\">11</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// returns 3.14\n</span><span class=\"c1\"></span><span class=\"nx\">pi</span><span class=\"p\">.</span><span class=\"nx\">toFixed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// returns 11.000\n</span><span class=\"c1\"></span><span class=\"nx\">eleven</span><span class=\"p\">.</span><span class=\"nx\">toFixed</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>In yesterday&rsquo;s article, I noted:</p>\n\n<blockquote>\n<p>You can also pass existing numbers into the parseFloat() method, though it won’t add decimals to an integer. It gets returned out as-is.</p>\n</blockquote>\n\n<p>You can combine <code>parseFloat()</code> with <code>Number.toFixed()</code> to add decimals.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// returns 42.00\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">answer</span> <span class=\"o\">=</span> <span class=\"nb\">parseFloat</span><span class=\"p\">(</span><span class=\"s1\">&#39;42&#39;</span><span class=\"p\">).</span><span class=\"nx\">toFixed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/yLPyeoq?editors=0011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"the-number-tostring-method\">The <code>Number.toString()</code> method</h2>\n\n<p>Convert a number to a string.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.14</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">eleven</span> <span class=\"o\">=</span> <span class=\"mi\">11</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// returns &#34;3.14&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">pi</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// returns &#34;11&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">eleven</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">();</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/rNYaxzo?editors=0011\">Here&rsquo;s another demo.</a></p>",
      "content_text": "Yesterday, we looked at a few ways to convert strings to numbers. Today, we’re looking at how to convert numbers to strings with JavaScript.\n\nLet’s dig in!\n\nThe Number.toFixed() method\n\nYou can use the Number.toFixed() method to format a number to a fixed number of decimal places. Pass in the number of decimal places as an argument.\n\nIt returns a string.\nlet pi = 3.14159;\nlet eleven = 11;\n\n// returns 3.14\npi.toFixed(2);\n\n// returns 11.000\neleven.toFixed(3);\n\nIn yesterday’s article, I noted:\n\n\nYou can also pass existing numbers into the parseFloat() method, though it won’t add decimals to an integer. It gets returned out as-is.\n\n\nYou can combine parseFloat() with Number.toFixed() to add decimals.\n// returns 42.00\nlet answer = parseFloat('42').toFixed(2);\n\nHere’s a demo.\n\nThe Number.toString() method\n\nConvert a number to a string.\nlet pi = 3.14;\nlet eleven = 11;\n\n// returns \"3.14\"\npi.toString();\n\n// returns \"11\"\neleven.toString();\n\nHere’s another demo.",
      "date_published": "2022-01-26T15:30:00.000Z",
      "date_modified": "2022-01-26T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "b4d3ddf717f912828956e345d58ffbfac171464eec63a433c8e64159f9d9b1e1.html"
      }
    },
    {
      "id": "https://gomakethings.com/three-ways-to-convert-strings-to-numbers-and-modify-existing-numbers-with-vanilla-javascript/",
      "url": "https://gomakethings.com/three-ways-to-convert-strings-to-numbers-and-modify-existing-numbers-with-vanilla-javascript/",
      "title": "Three ways to convert strings to numbers (and modify existing numbers) with vanilla JavaScript",
      "summary": "Today, we’re going to look at three techniques you can use convert strings into numbers with JavaScript. These methods can also be used to modify existing numbers.\nLet’s dig in!\nThe parseInt() method You can use the parseInt() method to convert a string into an integer (a whole number). The second argument, 10, is called the radix. This is the base number used in mathematical systems. For our use, it should always be 10.",
      "content_html": "<p>Today, we&rsquo;re going to look at three techniques you can use convert strings into numbers with JavaScript. These methods can also be used to modify existing numbers.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-parseint-method\">The <code>parseInt()</code> method</h2>\n\n<p>You can use the <code>parseInt()</code> method to convert a string into an integer (a whole number). The second argument, <code>10</code>, is called the <code>radix</code>. This is the base number used in mathematical systems. For our use, it should always be <code>10</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// returns 42\n</span><span class=\"c1\"></span><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"s1\">&#39;42&#39;</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// also returns 42\n</span><span class=\"c1\"></span><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"s1\">&#39;42px&#39;</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/xxPxgam?editors=0011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"the-parsefloat-method\">The <code>parseFloat()</code> method</h2>\n\n<p>You can use the <code>parseFloat()</code> method to convert a string into a point number (a number with decimal points).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// returns 3.14\n</span><span class=\"c1\"></span><span class=\"nb\">parseFloat</span><span class=\"p\">(</span><span class=\"s1\">&#39;3.14&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// also returns 3.14\n</span><span class=\"c1\"></span><span class=\"nb\">parseFloat</span><span class=\"p\">(</span><span class=\"s1\">&#39;3.14someRandomStuff&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// returns 3\n</span><span class=\"c1\"></span><span class=\"nb\">parseFloat</span><span class=\"p\">(</span><span class=\"s1\">&#39;3&#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/gOXOgBP?editors=0011\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"the-number-object\">The <code>Number()</code> object</h2>\n\n<p>You can use the <code>Number()</code> object to convert a string to a number.</p>\n\n<p>Sometimes it returns integer. Other times it returns a float. And if you pass in a string with random text in it, you’ll get <code>NaN</code>, an acronym for <em>Not a Number</em>.</p>\n\n<p>As a result of this inconsistency, it’s generally safer to use <code>parseInt()</code> or <code>parseFloat()</code>. If you know the format of the number you’d like, use those instead. If you want the string to fail with <code>NaN</code> if it has other characters in it, though, <code>Number()</code> may actually be a better choice.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// returns 123\n</span><span class=\"c1\"></span><span class=\"nb\">Number</span><span class=\"p\">(</span><span class=\"s1\">&#39;123&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// returns 12.3\n</span><span class=\"c1\"></span><span class=\"nb\">Number</span><span class=\"p\">(</span><span class=\"s1\">&#39;12.3&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// returns NaN\n</span><span class=\"c1\"></span><span class=\"nb\">Number</span><span class=\"p\">(</span><span class=\"s1\">&#39;3.14someRandomStuff&#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/XWzWpoP?editors=0011\">Here&rsquo;s yet another demo.</a></p>\n\n<h2 id=\"modifying-existing-numbers\">Modifying existing numbers</h2>\n\n<p>The <code>parseInt()</code> method can <em>also</em> be used to modify existing numbers. If you have a float number that should be an integer, you can pass it into the <code>parseInt()</code> method.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// returns 3\n</span><span class=\"c1\"></span><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"mf\">3.14</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>You can also pass existing numbers into the <code>parseFloat()</code> method, though it won&rsquo;t add decimals to an integer. It gets returned out as-is.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// returns 42\n</span><span class=\"c1\"></span><span class=\"nb\">parseFloat</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/ZEaELZR?editors=0011\">Here&rsquo;s one last demo.</a></p>",
      "content_text": "Today, we’re going to look at three techniques you can use convert strings into numbers with JavaScript. These methods can also be used to modify existing numbers.\n\nLet’s dig in!\n\nThe parseInt() method\n\nYou can use the parseInt() method to convert a string into an integer (a whole number). The second argument, 10, is called the radix. This is the base number used in mathematical systems. For our use, it should always be 10.\n// returns 42\nparseInt('42', 10);\n\n// also returns 42\nparseInt('42px', 10);\n\nHere’s a demo.\n\nThe parseFloat() method\n\nYou can use the parseFloat() method to convert a string into a point number (a number with decimal points).\n// returns 3.14\nparseFloat('3.14');\n\n// also returns 3.14\nparseFloat('3.14someRandomStuff');\n\n// returns 3\nparseFloat('3');\n\nHere’s another demo.\n\nThe Number() object\n\nYou can use the Number() object to convert a string to a number.\n\nSometimes it returns integer. Other times it returns a float. And if you pass in a string with random text in it, you’ll get NaN, an acronym for Not a Number.\n\nAs a result of this inconsistency, it’s generally safer to use parseInt() or parseFloat(). If you know the format of the number you’d like, use those instead. If you want the string to fail with NaN if it has other characters in it, though, Number() may actually be a better choice.\n// returns 123\nNumber('123');\n\n// returns 12.3\nNumber('12.3');\n\n// returns NaN\nNumber('3.14someRandomStuff');\n\nHere’s yet another demo.\n\nModifying existing numbers\n\nThe parseInt() method can also be used to modify existing numbers. If you have a float number that should be an integer, you can pass it into the parseInt() method.\n// returns 3\nparseInt(3.14);\n\nYou can also pass existing numbers into the parseFloat() method, though it won’t add decimals to an integer. It gets returned out as-is.\n// returns 42\nparseFloat(42);\n\nHere’s one last demo.",
      "date_published": "2022-01-25T15:30:00.000Z",
      "date_modified": "2022-01-25T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "dcc500d6eadc54ee8e1107c6130d26328e7e22af1e56482168d576d7f9896d87.html"
      }
    },
    {
      "id": "https://gomakethings.com/i-quit-my-job/",
      "url": "https://gomakethings.com/i-quit-my-job/",
      "title": "I quit my job",
      "summary": "Last week, I quit my job to focus entirely on my JS education business.\nA few years ago, I realized that helping others have that “aha” moment, seeing them build cool stuff, sharing that excitement at landing their first developer job… that’s way more exciting to me than doing client work.\nSo now, I get to focus all of my energy on doing more of that! 🤗\nPlans for 2022 I’ve got a lot of exciting stuff planned for this year.",
      "content_html": "<p>Last week, I quit my job to focus entirely on my JS education business.</p>\n\n<p>A few years ago, I realized that helping others have that &ldquo;aha&rdquo; moment, seeing them build cool stuff, sharing that excitement at landing their first developer job&hellip; that&rsquo;s <em>way more</em> exciting to me than doing client work.</p>\n\n<p>So now, I get to focus all of my energy on doing more of that! 🤗</p>\n\n<h2 id=\"plans-for-2022\">Plans for 2022</h2>\n\n<p>I&rsquo;ve got a lot of exciting stuff planned for this year.</p>\n\n<ul>\n<li>A handful of new courses</li>\n<li>Live streaming events</li>\n<li>A new project series</li>\n<li>More focus on the Vanilla JS Podcast</li>\n<li>An expert Vanilla JS Academy program focused on web apps</li>\n</ul>\n\n<p>If there&rsquo;s something you&rsquo;re really interested in, <a href=\"https://gomakethings.com/about\">let me know</a>.</p>\n\n<h2 id=\"thank-you\">Thank you!</h2>\n\n<p>Whether you&rsquo;ve been reading for a while, or you just started reading my stuff recently, thank you for your support!</p>\n\n<p>The only reason I&rsquo;ve been able to do this is because so many amazing people have allowed me to help them on their JavaScript journey, spread the word about what I to do others, and given me invaluable feedback to help me grow.</p>\n\n<p>I&rsquo;d also like to thank some very specific people who&rsquo;ve helped me get here:</p>\n\n<ul>\n<li><a href=\"https://jonathanstark.com/\">Jonathan Stark</a>, my business coach who referred to me as &ldquo;Oh, the vanilla JS guy!&rdquo; the first time we met. He planted the seed that started this whole thing off.</li>\n<li><a href=\"https://philipmorganconsulting.com/\">Philip Morgan</a>, who has helped me refine my positioning and, along with Jonathan, pushed me to start writing emails every day (that literally transformed my business).</li>\n<li><a href=\"https://kaidavis.com/\">Kai Davis</a>, whose given me countless amounts of feedback on pricing, email automation, how to word things, and more.</li>\n<li><a href=\"https://usefathom.com/pjrvs\">Paul Jarvis</a>, who taught me that you can be your 100% authentic self, swear like a fucking sailor, and still have a thriving business-of-one.</li>\n<li><a href=\"https://bradfrost.com/\">Brad Frost</a>, who took an hour out of his business life a decade ago to talk with me on Skype when I was an HR guy trying to change careers.</li>\n<li><a href=\"https://css-tricks.com/\">Chris Coyier</a>, whose Digging into WordPress series kick-started whole career back when I was just an HR blogger.</li>\n<li>My old boss, Jon, who asked me, &ldquo;Can you learn how?&rdquo; when I told him I couldn&rsquo;t build a prototype of this HR learning app we had come up with. That one question changed my whole life.</li>\n<li><a href=\"https://learningwebdesign.com/\">Jen Robbins</a>, <a href=\"http://christopher.org/\">Christopher Schmidt</a>, and <a href=\"https://about.me/arianne\">Ari Stiles</a>, whose Artifact Conference has connected me with so many people that I still talk to today.</li>\n</ul>\n\n<p>I&rsquo;m sure there are many, <em>many</em> more people I should add to this list. If you&rsquo;re one of those people and I missed you, I&rsquo;m so sorry!</p>\n\n<p>There&rsquo;s no such thing as a self-made success. I&rsquo;m so grateful for all the help I&rsquo;ve gotten over the years. ❤️</p>\n\n<p>I&rsquo;m looking forward to helping you level-up your JavaScript skills this year!</p>",
      "content_text": "Last week, I quit my job to focus entirely on my JS education business.\n\nA few years ago, I realized that helping others have that “aha” moment, seeing them build cool stuff, sharing that excitement at landing their first developer job… that’s way more exciting to me than doing client work.\n\nSo now, I get to focus all of my energy on doing more of that! 🤗\n\nPlans for 2022\n\nI’ve got a lot of exciting stuff planned for this year.\n\n\nA handful of new courses\nLive streaming events\nA new project series\nMore focus on the Vanilla JS Podcast\nAn expert Vanilla JS Academy program focused on web apps\n\n\nIf there’s something you’re really interested in, let me know.\n\nThank you!\n\nWhether you’ve been reading for a while, or you just started reading my stuff recently, thank you for your support!\n\nThe only reason I’ve been able to do this is because so many amazing people have allowed me to help them on their JavaScript journey, spread the word about what I to do others, and given me invaluable feedback to help me grow.\n\nI’d also like to thank some very specific people who’ve helped me get here:\n\n\nJonathan Stark, my business coach who referred to me as “Oh, the vanilla JS guy!” the first time we met. He planted the seed that started this whole thing off.\nPhilip Morgan, who has helped me refine my positioning and, along with Jonathan, pushed me to start writing emails every day (that literally transformed my business).\nKai Davis, whose given me countless amounts of feedback on pricing, email automation, how to word things, and more.\nPaul Jarvis, who taught me that you can be your 100% authentic self, swear like a fucking sailor, and still have a thriving business-of-one.\nBrad Frost, who took an hour out of his business life a decade ago to talk with me on Skype when I was an HR guy trying to change careers.\nChris Coyier, whose Digging into WordPress series kick-started whole career back when I was just an HR blogger.\nMy old boss, Jon, who asked me, “Can you learn how?” when I told him I couldn’t build a prototype of this HR learning app we had come up with. That one question changed my whole life.\nJen Robbins, Christopher Schmidt, and Ari Stiles, whose Artifact Conference has connected me with so many people that I still talk to today.\n\n\nI’m sure there are many, many more people I should add to this list. If you’re one of those people and I missed you, I’m so sorry!\n\nThere’s no such thing as a self-made success. I’m so grateful for all the help I’ve gotten over the years. ❤️\n\nI’m looking forward to helping you level-up your JavaScript skills this year!",
      "date_published": "2022-01-24T15:30:00.000Z",
      "date_modified": "2022-01-24T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "6b17be685e85baf7b33187b06fedc39425a789e56dcc1639ad96b6bfc2891b40.html"
      }
    },
    {
      "id": "https://gomakethings.com/the-many-ways-to-modify-leading-and-trailing-characters-from-strings-with-javascript/",
      "url": "https://gomakethings.com/the-many-ways-to-modify-leading-and-trailing-characters-from-strings-with-javascript/",
      "title": "The many ways to modify leading and trailing characters from strings with JavaScript",
      "summary": "JavaScript provides a bunch of methods for adding and removing leading and trailing characters from strings. Today, we’re going to look a bunch of them.\nLet’s dig in!\nThe String.padStart() method The String.padStart() method adds characters to the beginning of a string if it’s less than a certain length. This is particularly useful for numbers that need leading 0’s (but can do so much more than that).\nThe String.padStart() method accepts two arguments: the length the string should be, and what characters to add if it’s not that length.",
      "content_html": "<p>JavaScript provides a bunch of methods for adding and removing leading and trailing characters from strings. Today, we&rsquo;re going to look a bunch of them.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-string-padstart-method\">The <code>String.padStart()</code> method</h2>\n\n<p>The <code>String.padStart()</code> method adds characters to the beginning of a string if it&rsquo;s less than a certain length. This is particularly useful for numbers that need leading <code>0</code>&rsquo;s (but can do so much more than that).</p>\n\n<p>The <code>String.padStart()</code> method accepts two arguments: the length the string should be, and what characters to add if it&rsquo;s not that length. The characters to use is option, and defaults to a space ().</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Add a leading zero for hours below 10\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">hour3</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">hour12</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// returns &#34;03&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">hour3</span><span class=\"p\">.</span><span class=\"nx\">padStart</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;0&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// returns &#34;12&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">hour12</span><span class=\"p\">.</span><span class=\"nx\">padStart</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;0&#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<h2 id=\"the-string-padend-method\">The <code>String.padEnd()</code> method</h2>\n\n<p>The <code>String.padEnd()</code> method adds characters to the end of a string if it&rsquo;s less than a certain length. This is particularly useful for numbers that need trailing <code>0</code>&rsquo;s.</p>\n\n<p>The <code>String.padEnd()</code> method accepts two arguments: the length the string should be, and what characters to add if it&rsquo;s not that length. The characters to use is option, and defaults to a space ().</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Add a leading zero for hours below 10\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">minutes0</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;0&#39;</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">minutes12</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;12&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// returns &#34;00&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">minutes0</span><span class=\"p\">.</span><span class=\"nx\">padEnd</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;0&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// returns &#34;12&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">minutes12</span><span class=\"p\">.</span><span class=\"nx\">padEnd</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;0&#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<h2 id=\"the-string-trim-method\">The <code>String.trim()</code> method</h2>\n\n<p>The <code>String.trim()</code> method removes leading and trailing whitespace from a string.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;   I love Cape Cod potato chips.   &#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Returns &#34;I love Cape Cod potato chips.&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">();</span>\n</code></pre></div>\n<h2 id=\"string-concatenation\">String concatenation</h2>\n\n<p>You can use <em>string concatenation</em> to combine two or more strings together. Combine strings using the addition operator (<code>+</code>).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Strings as variables\n</span><span class=\"cm\"> */</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">str1</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;I love Cape Cod potato chips.&#39;</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">str2</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;What about you?&#39;</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">concat</span> <span class=\"o\">=</span> <span class=\"nx\">str1</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">str2</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// logs &#34;I love Cape Cod potato chips. What about you?&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">concat</span><span class=\"p\">);</span>\n\n\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * Creating a new variable from two strings\n</span><span class=\"cm\"> */</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">concat2</span> <span class=\"o\">=</span>\n\t<span class=\"s1\">&#39;I love Cape Cod potato chips. &#39;</span> <span class=\"o\">+</span>\n\t<span class=\"s1\">&#39;What about you?&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// logs &#34;I love Cape Cod potato chips. What about you?&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">concat2</span><span class=\"p\">);</span>\n</code></pre></div>",
      "content_text": "JavaScript provides a bunch of methods for adding and removing leading and trailing characters from strings. Today, we’re going to look a bunch of them.\n\nLet’s dig in!\n\nThe String.padStart() method\n\nThe String.padStart() method adds characters to the beginning of a string if it’s less than a certain length. This is particularly useful for numbers that need leading 0’s (but can do so much more than that).\n\nThe String.padStart() method accepts two arguments: the length the string should be, and what characters to add if it’s not that length. The characters to use is option, and defaults to a space ().\n// Add a leading zero for hours below 10\nlet hour3 = '3';\nlet hour12 = '12';\n\n// returns \"03\"\nhour3.padStart(2, '0');\n\n// returns \"12\"\nhour12.padStart(2, '0');\n\nThe String.padEnd() method\n\nThe String.padEnd() method adds characters to the end of a string if it’s less than a certain length. This is particularly useful for numbers that need trailing 0’s.\n\nThe String.padEnd() method accepts two arguments: the length the string should be, and what characters to add if it’s not that length. The characters to use is option, and defaults to a space ().\n// Add a leading zero for hours below 10\nlet minutes0 = '0';\nlet minutes12 = '12';\n\n// returns \"00\"\nminutes0.padEnd(2, '0');\n\n// returns \"12\"\nminutes12.padEnd(2, '0');\n\nThe String.trim() method\n\nThe String.trim() method removes leading and trailing whitespace from a string.\nlet str = '   I love Cape Cod potato chips.   ';\n\n// Returns \"I love Cape Cod potato chips.\"\nstr.trim();\n\nString concatenation\n\nYou can use string concatenation to combine two or more strings together. Combine strings using the addition operator (+).\n/**\n * Strings as variables\n */\n\nlet str1 = 'I love Cape Cod potato chips.';\nlet str2 = 'What about you?';\nlet concat = str1 + ' ' + str2;\n\n// logs \"I love Cape Cod potato chips. What about you?\"\nconsole.log(concat);\n\n\n/**\n * Creating a new variable from two strings\n */\n\nlet concat2 =\n\t'I love Cape Cod potato chips. ' +\n\t'What about you?';\n\n// logs \"I love Cape Cod potato chips. What about you?\"\nconsole.log(concat2);\n",
      "date_published": "2022-01-21T15:30:00.000Z",
      "date_modified": "2022-01-21T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "2f8e1dfcdffe2c039634c02df119539263e67f53b30df44dda403dfa93843b26.html"
      }
    },
    {
      "id": "https://gomakethings.com/listening-for-events-on-multiple-elements-using-javascript-event-delegation/",
      "url": "https://gomakethings.com/listening-for-events-on-multiple-elements-using-javascript-event-delegation/",
      "title": "Listening for events on multiple elements using JavaScript event delegation",
      "summary": "In JavaScript, event listeners have to be attached to individual elements. You can’t attach them to an array or node list of matching elements like you might in jQuery.\nToday, we’re going to look at a technique that you can use listen for the same even on multiple elements without having to attach to each element individually: event delegation.\nLet’s dig in!\nThe EventTarget.addEventListener() method As a quick primer, you can use the EventTarget.",
      "content_html": "<p>In JavaScript, event listeners have to be attached to individual elements. You can&rsquo;t attach them to an array or node list of matching elements like you might in jQuery.</p>\n\n<p>Today, we&rsquo;re going to look at a technique that you can use listen for the same even on multiple elements <em>without</em> having to attach to each element individually: event delegation.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-eventtarget-addeventlistener-method\">The <code>EventTarget.addEventListener()</code> method</h2>\n\n<p>As a quick primer, you can use the <code>EventTarget.addEventListener()</code> method to listen for events on an element. <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">You can find a full list of available events on the Mozilla Developer Network.</a></p>\n\n<p>Attached the <code>EventTarget.addEventListener()</code> method to the element you want to listen for events on. It accepts two arguments: the event to listen for, and a callback function to run when the event happens.</p>\n\n<p>You can pass the <code>event</code> into the callback function as an argument. The <code>event.target</code> property is the element that triggered the event. The <code>event</code> object has other properties as well, many of them specific to the type of event that occurred.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#click-me&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span> <span class=\"c1\">// The event details\n</span><span class=\"c1\"></span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">);</span> <span class=\"c1\">// The clicked element\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/KKXjPdN?editors=0011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"listening-for-the-same-event-on-multiple-elements\">Listening for the same event on multiple elements</h2>\n\n<p>One trick to listen a specific event on bunch of elements at once is to attach your listener to a parent element that your elements are contained within, such as the <code>window</code> or <code>document</code>.</p>\n\n<p>Events that happens on elements inside that parent element <em>bubble up</em>.</p>\n\n<p>The <code>event.target</code> property is the element that triggered the event. We can use that property to check if the element that triggered the event has a matching selector.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// Listen for clicks on the entire window\n</span><span class=\"c1\"></span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// If the clicked element has the `.click-me` class, it&#39;s a match!\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">matches</span><span class=\"p\">(</span><span class=\"s1\">&#39;.click-me&#39;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\t\t<span class=\"c1\">// Do something...\n</span><span class=\"c1\"></span>\t<span class=\"p\">}</span>\n\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/poWXzNP?editors=1011\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"why-wouldn-t-you-just-loop-through-each-element-and-attach-an-event-listener\">Why wouldn&rsquo;t you just loop through each element and attach an event listener?</h2>\n\n<p>You <em>can</em> attach event listeners to individual elements by looping over each one, like this.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * This works, but it&#39;s bad for performance\n</span><span class=\"cm\"> * DON&#39;T DO IT!\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">let</span> <span class=\"nx\">btns</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">&#39;.click-me&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">btn</span> <span class=\"k\">of</span> <span class=\"nx\">btns</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span> <span class=\"c1\">// The event details\n</span><span class=\"c1\"></span>\t\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">);</span> <span class=\"c1\">// The clicked element\n</span><span class=\"c1\"></span>\t<span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But if you have a lot of elements, it can actually be worse for performance than event delegation.</p>\n\n<p>Every event listener you create uses memory in the browser. It’s “cheaper” for the browser to track one event and fire it on every click that it is to manage multiple events.</p>\n\n<p>If you’re only listening for events on a single element, feel free to attach directly to that element. But if you’re listening for events on multiple elements, I’d recommend using event delegation.</p>\n\n<h2 id=\"capturing-events-that-don-t-bubble\">Capturing events that don&rsquo;t bubble</h2>\n\n<p>Certain events, like <code>focus</code>, don&rsquo;t bubble. In order to use event delegation with events that don&rsquo;t bubble, you can set an optional third argument on the <code>EventTarget.addEventListener()</code> method, called <code>useCapture</code>, to <code>true</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// Listen for all focus events in the document\n</span><span class=\"c1\"></span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;focus&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"c1\">// Run functions whenever an element in the document comes into focus\n</span><span class=\"c1\"></span><span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>You can determine if <code>useCapture</code> should be set to <code>true</code> or <code>false</code> by looking at the event details page on the Mozilla Developer Network (<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event\">like this one for the <code>focus</code> event</a>).</p>\n\n<p>If <em>Bubbles</em> in the chart at the top of the page is &ldquo;No,&rdquo; you need to set <code>useCapture</code> to <code>true</code> to use event delegation.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/ExwBYZR?editors=1011\">Here&rsquo;s one last demo.</a></p>",
      "content_text": "In JavaScript, event listeners have to be attached to individual elements. You can’t attach them to an array or node list of matching elements like you might in jQuery.\n\nToday, we’re going to look at a technique that you can use listen for the same even on multiple elements without having to attach to each element individually: event delegation.\n\nLet’s dig in!\n\nThe EventTarget.addEventListener() method\n\nAs a quick primer, you can use the EventTarget.addEventListener() method to listen for events on an element. You can find a full list of available events on the Mozilla Developer Network.\n\nAttached the EventTarget.addEventListener() method to the element you want to listen for events on. It accepts two arguments: the event to listen for, and a callback function to run when the event happens.\n\nYou can pass the event into the callback function as an argument. The event.target property is the element that triggered the event. The event object has other properties as well, many of them specific to the type of event that occurred.\nlet btn = document.querySelector('#click-me');\n\nbtn.addEventListener('click', function (event) {\n\tconsole.log(event); // The event details\n\tconsole.log(event.target); // The clicked element\n});\n\nHere’s a demo.\n\nListening for the same event on multiple elements\n\nOne trick to listen a specific event on bunch of elements at once is to attach your listener to a parent element that your elements are contained within, such as the window or document.\n\nEvents that happens on elements inside that parent element bubble up.\n\nThe event.target property is the element that triggered the event. We can use that property to check if the element that triggered the event has a matching selector.\n// Listen for clicks on the entire window\ndocument.addEventListener('click', function (event) {\n\n\t// If the clicked element has the `.click-me` class, it's a match!\n\tif (event.target.matches('.click-me')) {\n\t\t// Do something...\n\t}\n\n});\n\nHere’s another demo.\n\nWhy wouldn’t you just loop through each element and attach an event listener?\n\nYou can attach event listeners to individual elements by looping over each one, like this.\n/**\n * This works, but it's bad for performance\n * DON'T DO IT!\n */\nlet btns = document.querySelectorAll('.click-me');\n\nfor (let btn of btns) {\n\tbtn.addEventListener('click', function (event) {\n\t\tconsole.log(event); // The event details\n\t\tconsole.log(event.target); // The clicked element\n\t});\n}\n\nBut if you have a lot of elements, it can actually be worse for performance than event delegation.\n\nEvery event listener you create uses memory in the browser. It’s “cheaper” for the browser to track one event and fire it on every click that it is to manage multiple events.\n\nIf you’re only listening for events on a single element, feel free to attach directly to that element. But if you’re listening for events on multiple elements, I’d recommend using event delegation.\n\nCapturing events that don’t bubble\n\nCertain events, like focus, don’t bubble. In order to use event delegation with events that don’t bubble, you can set an optional third argument on the EventTarget.addEventListener() method, called useCapture, to true.\n// Listen for all focus events in the document\ndocument.addEventListener('focus', function (event) {\n\t// Run functions whenever an element in the document comes into focus\n}, true);\n\nYou can determine if useCapture should be set to true or false by looking at the event details page on the Mozilla Developer Network (like this one for the focus event).\n\nIf Bubbles in the chart at the top of the page is “No,” you need to set useCapture to true to use event delegation.\n\nHere’s one last demo.",
      "date_published": "2022-01-20T15:30:00.000Z",
      "date_modified": "2022-01-20T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "ca284de929347c1bf42cd30eb1593df86011060dfc9ae3bd67e633460d6cc62b.html"
      }
    },
    {
      "id": "https://gomakethings.com/how-to-get-set-and-remove-attributes-and-properties-with-vanilla-javascript/",
      "url": "https://gomakethings.com/how-to-get-set-and-remove-attributes-and-properties-with-vanilla-javascript/",
      "title": "How to get, set, and remove attributes and properties with vanilla JavaScript",
      "summary": "Today, we’re going to look at how to get, set, and remove attributes and properties with vanilla JS. We’ll also learn the difference between attributes and properties, and some “gotchas” when working with them.\nLet’s dig in!\nThe Element.*Attribute() methods You can use the Element.getAttribute(), Element.setAttribute(), Element.removeAttribute(), and Element.hasAttribute() methods to get, set, remove, and check for the existence of attributes (including data attributes) on an element, respectively.\nIf an attribute does not exist on an element, the Element.",
      "content_html": "<p>Today, we&rsquo;re going to look at how to get, set, and remove attributes and properties with vanilla JS. We&rsquo;ll also learn the difference between attributes and properties, and some &ldquo;gotchas&rdquo; when working with them.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-element-attribute-methods\">The <code>Element.*Attribute()</code> methods</h2>\n\n<p>You can use the <code>Element.getAttribute()</code>, <code>Element.setAttribute()</code>, <code>Element.removeAttribute()</code>, and <code>Element.hasAttribute()</code> methods to get, set, remove, and check for the existence of attributes (including data attributes) on an element, respectively.</p>\n\n<p>If an attribute does not exist on an element, the <code>Element.getAttribute()</code> method returns <code>null</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">elem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#lunch&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Get the value of the [data-sandwich] attribute\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"o\">=</span> <span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;data-sandwich&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Set a value for the [data-sandwich] attribute\n</span><span class=\"c1\"></span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;data-sandwich&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;turkey&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Remove the [data-chips] attribute\n</span><span class=\"c1\"></span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">removeAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;data-chips&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Check if an element has the `[data-drink]` attribute\n</span><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">hasAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;data-drink&#39;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Add a drink!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/VwMOjGz?editors=1111\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"element-properties\">Element properties</h2>\n\n<p>HTML elements have dozens of properties that you can access directly.</p>\n\n<p>Some of them are <em>read only</em>, meaning you can get their value but not set it. Others can be used to both read and set values. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element\">You can find a full list on the Mozilla Developer Network.</a></p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">elem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#main&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Get the ID of the element\n</span><span class=\"c1\">// returns &#34;main&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Set the ID of the element\n</span><span class=\"c1\"></span><span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;secondary&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Get the parentNode of the element\n</span><span class=\"c1\">// This property is read-only\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">parent</span> <span class=\"o\">=</span> <span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">parentNode</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/ExwzydK?editors=1111\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"what-s-the-difference-between-attributes-and-properties\">What&rsquo;s the difference between attributes and properties?</h2>\n\n<p>In JavaScript, an element has attributes and properties. The terms are often used interchangeably, but they&rsquo;re actually two separate things.</p>\n\n<p>An <em>attribute</em> is the <em>initial state</em> when rendered in the DOM. A <em>property</em> is the <em>current state</em>.</p>\n\n<p>In most cases, attributes and properties are kept in-sync automatically. For example, when you use <code>Element.setAttribute()</code> to update an ID attribute, the <code>id</code> property is updated as well.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Hello<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Update the ID\n</span><span class=\"c1\"></span><span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;first-paragraph&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// These both return &#34;first-paragraph&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">id1</span> <span class=\"o\">=</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span> <span class=\"nx\">id2</span> <span class=\"o\">=</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>However, user-changeable form properties&mdash;noteably, <code>value</code>, <code>checked</code>, and <code>selected</code>&mdash;are <em>not</em> automatically synced.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">&#34;greeting&#34;</span><span class=\"p\">&gt;</span>Greeting<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;greeting&#34;</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#greeting&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Update the value\n</span><span class=\"c1\"></span><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;value&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Hello there!&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// If you haven&#39;t made any updates to the field, these both return &#34;Hello there!&#34;\n</span><span class=\"c1\">// If you HAVE updated the field, val1 returns whatever was typed in the field instead\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">val1</span> <span class=\"o\">=</span> <span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">val2</span> <span class=\"o\">=</span> <span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;value&#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>If you try to update the <code>value</code> property directly, that <em>will</em> update the UI.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Hello there!&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>This allows you to choose different approaches depending on whether you want to overwrite user updates or not.</p>\n\n<p>If you want to update a field, but <em>only if</em> the user hasn&rsquo;t made any changes, use <code>Element.setAttribute()</code>. If you want to overwrite anything they&rsquo;ve done, use the <code>value</code> property.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/abLrZPm?editors=1111\">Here&rsquo;s one last demo.</a></p>",
      "content_text": "Today, we’re going to look at how to get, set, and remove attributes and properties with vanilla JS. We’ll also learn the difference between attributes and properties, and some “gotchas” when working with them.\n\nLet’s dig in!\n\nThe Element.*Attribute() methods\n\nYou can use the Element.getAttribute(), Element.setAttribute(), Element.removeAttribute(), and Element.hasAttribute() methods to get, set, remove, and check for the existence of attributes (including data attributes) on an element, respectively.\n\nIf an attribute does not exist on an element, the Element.getAttribute() method returns null.\nlet elem = document.querySelector('#lunch');\n\n// Get the value of the [data-sandwich] attribute\nlet sandwich = elem.getAttribute('data-sandwich');\n\n// Set a value for the [data-sandwich] attribute\nelem.setAttribute('data-sandwich', 'turkey');\n\n// Remove the [data-chips] attribute\nelem.removeAttribute('data-chips');\n\n// Check if an element has the `[data-drink]` attribute\nif (elem.hasAttribute('data-drink')) {\n\tconsole.log('Add a drink!');\n}\n\nHere’s a demo.\n\nElement properties\n\nHTML elements have dozens of properties that you can access directly.\n\nSome of them are read only, meaning you can get their value but not set it. Others can be used to both read and set values. You can find a full list on the Mozilla Developer Network.\nlet elem = document.querySelector('#main');\n\n// Get the ID of the element\n// returns \"main\"\nlet id = elem.id;\n\n// Set the ID of the element\nelem.id = 'secondary';\n\n// Get the parentNode of the element\n// This property is read-only\nlet parent = elem.parentNode;\n\nHere’s another demo.\n\nWhat’s the difference between attributes and properties?\n\nIn JavaScript, an element has attributes and properties. The terms are often used interchangeably, but they’re actually two separate things.\n\nAn attribute is the initial state when rendered in the DOM. A property is the current state.\n\nIn most cases, attributes and properties are kept in-sync automatically. For example, when you use Element.setAttribute() to update an ID attribute, the id property is updated as well.\n<p>Hello</p>let p = document.querySelector('p');\n\n// Update the ID\np.setAttribute('id', 'first-paragraph');\n\n// These both return \"first-paragraph\"\nlet id1 = p.getAttribute('id');\nlet id2 = p.id;\n\nHowever, user-changeable form properties—noteably, value, checked, and selected—are not automatically synced.\n<label for=\"greeting\">Greeting</label>\n<input type=\"text\" id=\"greeting\">let greeting = document.querySelector('#greeting');\n\n// Update the value\ngreeting.setAttribute('value', 'Hello there!');\n\n// If you haven't made any updates to the field, these both return \"Hello there!\"\n// If you HAVE updated the field, val1 returns whatever was typed in the field instead\nlet val1 = greeting.value;\nlet val2 = greeting.getAttribute('value');\n\nIf you try to update the value property directly, that will update the UI.\ngreeting.value = 'Hello there!';\n\nThis allows you to choose different approaches depending on whether you want to overwrite user updates or not.\n\nIf you want to update a field, but only if the user hasn’t made any changes, use Element.setAttribute(). If you want to overwrite anything they’ve done, use the value property.\n\nHere’s one last demo.",
      "date_published": "2022-01-19T15:30:00.000Z",
      "date_modified": "2022-01-19T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "14c752c648597191ccf398a2bdb8bbd40f0f11c3aa69cf305abf936d1353061f.html"
      }
    },
    {
      "id": "https://gomakethings.com/three-simple-ways-to-get-and-set-css-properties-with-vanilla-javascript/",
      "url": "https://gomakethings.com/three-simple-ways-to-get-and-set-css-properties-with-vanilla-javascript/",
      "title": "Three simple ways to get and set CSS properties with vanilla JavaScript",
      "summary": "In today’s article, we’re going to look at three different techniques you can use to get and set CSS properties with vanilla JS.\nLet’s dig in!\nA quick note on case Vanilla JavaScript uses camelCased versions of the properties you would use in CSS.\nFor example, background-image in CSS is backgroundImage in JavaScript. The font-weight property in CSS is fontWeight in JavaScript.\nThe Mozilla Developer Network provides a comprehensive list of available attributes and their JavaScript counterparts.",
      "content_html": "<p>In today&rsquo;s article, we&rsquo;re going to look at three different techniques you can use to get and set CSS properties with vanilla JS.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"a-quick-note-on-case\">A quick note on case</h2>\n\n<p>Vanilla JavaScript uses camelCased versions of the properties you would use in CSS.</p>\n\n<p>For example, <code>background-image</code> in CSS is <code>backgroundImage</code> in JavaScript. The <code>font-weight</code> property in CSS is <code>fontWeight</code> in JavaScript.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference\">The Mozilla Developer Network provides a comprehensive list of available attributes and their JavaScript counterparts.</a></p>\n\n<h2 id=\"the-element-style-property\">The <code>Element.style</code> property</h2>\n\n<p>You can get and set inline styles for an element with the <code>Element.style</code> property.</p>\n\n<p>The <code>Element.style</code> property is a read-only object. You can get and set individual style properties on it using camelCase style names as properties on the <code>Element.style</code> object.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;sandwich&#34;</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"s\">&#34;background-color: green; color: white;&#34;</span><span class=\"p\">&gt;</span>\n\tSandwich\n<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span></code></pre></div><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#sandwich&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Get a style\n</span><span class=\"c1\">// If this style is not set as an inline style directly on the element, it returns an empty string\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">bgColor</span> <span class=\"o\">=</span> <span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundColor</span><span class=\"p\">;</span> <span class=\"c1\">// this will return &#34;green&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">fontWeight</span> <span class=\"o\">=</span> <span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">fontWeight</span><span class=\"p\">;</span> <span class=\"c1\">// this will return &#34;&#34;\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// Set the background-color style property\n</span><span class=\"c1\"></span><span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;purple&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>You can also <em>get and set</em> a string representation of the entire inline <code>style</code> property on the element itself with the <code>Element.style.cssText</code> property.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Get the styles on an element\n</span><span class=\"c1\">// returns &#34;background-color: green; color: white;&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">styles</span> <span class=\"o\">=</span> <span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">cssText</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Completely replace the inline styles on an element\n</span><span class=\"c1\"></span><span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">cssText</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;font-size: 2em; font-weight: bold;&#39;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Add additional styles\n</span><span class=\"c1\"></span><span class=\"nx\">sandwich</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">cssText</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;color: purple;&#39;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/OJxGPRK\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"the-window-getcomputedstyle-method\">The <code>window.getComputedStyle()</code> method</h2>\n\n<p>The <code>window.getComputedStyle()</code> method gets the actual computed style of an element. This factors in browser default styles as well as external stylesheets being used on the page.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#sandwich&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span> <span class=\"nx\">bgColor</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">getComputedStyle</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">).</span><span class=\"nx\">backgroundColor</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>This is <em>read only</em>, and can&rsquo;t be used to actually modify styles on an element.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/gOGybLJ?editors=1111\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"adding-a-styles-to-the-document\">Adding a styles to the document</h2>\n\n<p>The <code>Element.style</code> property is useful for adding inline styles to specific elements.</p>\n\n<p>But what if you want to add styles to <em>all elements</em> that match a specific selector? You <em>could</em> loop through each matching element and add styles using the <code>Element.style</code> property.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">&#39;.wizard&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">wizard</span> <span class=\"k\">of</span> <span class=\"nx\">wizards</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;rebeccapurple&#39;</span><span class=\"p\">;</span>\n\t<span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">color</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;white&#39;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Or, you can add CSS directly to the document by creating a <code>style</code> element and appending it into the DOM.</p>\n\n<p>First, create a <code>style</code> element using the <code>document.createElement()</code> method. Then, add your CSS to it using the <code>Element.textContent</code> property.</p>\n\n<p>Finally, you can inject it into the document using the <code>Element.append()</code> method. I like to append into the <code>document.head</code>, but <code>document.body</code> works, too.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">style</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;style&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span>\n\t<span class=\"sb\">`.wizard {\n</span><span class=\"sb\">\t\tbackground-color: rebeccapurple;\n</span><span class=\"sb\">\t\tcolor: white;\n</span><span class=\"sb\">\t}`</span><span class=\"p\">;</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">style</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/RwLONVd\">Here&rsquo;s one last demo.</a></p>",
      "content_text": "In today’s article, we’re going to look at three different techniques you can use to get and set CSS properties with vanilla JS.\n\nLet’s dig in!\n\nA quick note on case\n\nVanilla JavaScript uses camelCased versions of the properties you would use in CSS.\n\nFor example, background-image in CSS is backgroundImage in JavaScript. The font-weight property in CSS is fontWeight in JavaScript.\n\nThe Mozilla Developer Network provides a comprehensive list of available attributes and their JavaScript counterparts.\n\nThe Element.style property\n\nYou can get and set inline styles for an element with the Element.style property.\n\nThe Element.style property is a read-only object. You can get and set individual style properties on it using camelCase style names as properties on the Element.style object.\n<p id=\"sandwich\" style=\"background-color: green; color: white;\">\n\tSandwich\n</p>let sandwich = document.querySelector('#sandwich');\n\n// Get a style\n// If this style is not set as an inline style directly on the element, it returns an empty string\nlet bgColor = sandwich.style.backgroundColor; // this will return \"green\"\nlet fontWeight = sandwich.style.fontWeight; // this will return \"\"\n\n// Set the background-color style property\nsandwich.style.backgroundColor = 'purple';\n\nYou can also get and set a string representation of the entire inline style property on the element itself with the Element.style.cssText property.\n// Get the styles on an element\n// returns \"background-color: green; color: white;\"\nlet styles = sandwich.style.cssText;\n\n// Completely replace the inline styles on an element\nsandwich.style.cssText = 'font-size: 2em; font-weight: bold;';\n\n// Add additional styles\nsandwich.style.cssText += 'color: purple;';\n\nHere’s a demo.\n\nThe window.getComputedStyle() method\n\nThe window.getComputedStyle() method gets the actual computed style of an element. This factors in browser default styles as well as external stylesheets being used on the page.\nlet sandwich = document.querySelector('#sandwich');\nlet bgColor = window.getComputedStyle(sandwich).backgroundColor;\n\nThis is read only, and can’t be used to actually modify styles on an element.\n\nHere’s another demo.\n\nAdding a styles to the document\n\nThe Element.style property is useful for adding inline styles to specific elements.\n\nBut what if you want to add styles to all elements that match a specific selector? You could loop through each matching element and add styles using the Element.style property.\nlet wizards = document.querySelectorAll('.wizard');\n\nfor (let wizard of wizards) {\n\twizard.style.backgroundColor = 'rebeccapurple';\n\twizard.style.color = 'white';\n}\n\nOr, you can add CSS directly to the document by creating a style element and appending it into the DOM.\n\nFirst, create a style element using the document.createElement() method. Then, add your CSS to it using the Element.textContent property.\n\nFinally, you can inject it into the document using the Element.append() method. I like to append into the document.head, but document.body works, too.\nlet style = document.createElement('style');\nstyle.textContent =\n\t`.wizard {\n\t\tbackground-color: rebeccapurple;\n\t\tcolor: white;\n\t}`;\ndocument.head.append(style);\n\nHere’s one last demo.",
      "date_published": "2022-01-18T15:30:00.000Z",
      "date_modified": "2022-01-18T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "28ba81da80f2214598da9029a651b4b0e3c0bb6be3121c41f3c126fd446d2c56.html"
      }
    },
    {
      "id": "https://gomakethings.com/the-best-way-to-learn-javascript-in-2022/",
      "url": "https://gomakethings.com/the-best-way-to-learn-javascript-in-2022/",
      "title": "The best way to learn JavaScript in 2022",
      "summary": "Yesterday, I got an email from a newsletter subscriber asking:\n What’s the best way to practice JavaScript?\n There’s no one right way to learn JavaScript. But after teaching it for a handful of years now, I have found some trends and common approaches that make things easier for a lot of students.\nLet’s dig in!\nLean into your learning style Some folks learn best by reading, others from watching videos, and others from just diving in and trying a bunch of stuff until things click.",
      "content_html": "<p>Yesterday, I got an email from a newsletter subscriber asking:</p>\n\n<blockquote>\n<p>What&rsquo;s the best way to practice JavaScript?</p>\n</blockquote>\n\n<p>There&rsquo;s no one right way to learn JavaScript. But after teaching it for a handful of years now, I have found some trends and common approaches that make things easier for a lot of students.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"lean-into-your-learning-style\">Lean into your learning style</h2>\n\n<p>Some folks learn best by reading, others from watching videos, and others from just diving in and trying a bunch of stuff until things click.</p>\n\n<p>I personally find that I learn best from reading a little and trying a little, then reading some more. I know a lot of folks who prefer to watch videos initially, then read later to reinforce what they learned.</p>\n\n<p>When you can, try to find resources that fit your learning preferences.</p>\n\n<h2 id=\"put-what-you-learn-into-practice\">Put what you learn into practice</h2>\n\n<p>One of the biggest challenges I hear from folks who are learning is making that jump from &ldquo;I learned these methods and techniques&rdquo; to &ldquo;I know how to apply these techniques&rdquo; is <em>really hard</em>.</p>\n\n<p>The most effective way I&rsquo;ve found to bridge that gap is by working on real projects.</p>\n\n<h2 id=\"don-t-try-to-go-too-big-too-soon-with-your-projects\">Don&rsquo;t try to go too big, too soon with your projects</h2>\n\n<p>Where I see most students get stuck with project work is trying to do projects that are too big, too soon.</p>\n\n<p>Don&rsquo;t jump right into building a todo app or an ecommerce platform or anything like that. You want to start small. Like, really small. For example&hellip;</p>\n\n<ul>\n<li>write a script that shows a piece of hidden content when a button is clicked. When you click it again, hide the content again.</li>\n<li>Once you&rsquo;ve got that figured out, you can modify it to work like an accordion, where opening one piece of content closes all others in a group.</li>\n<li>Then you can add more features and details, like letting users pass in their own options or settings</li>\n</ul>\n\n<p>Start really small, and layer in more complexity as you learn.</p>\n\n<p>(<em>I&rsquo;m actually working on a new product that will provide this kind of thing in a more guided, structured way.</em>)</p>\n\n<h2 id=\"learning-inertia-is-more-important-than-picking-the-right-tools\">Learning inertia is more important than picking the right tools</h2>\n\n<p>I see a lot of learners get hung up on which tool to choose.</p>\n\n<blockquote>\n<p>Should I learn vanilla JS or React first? A framework or jQuery?</p>\n</blockquote>\n\n<p>Honestly, it doesn&rsquo;t matter. The most important thing is that you pick something that you find easiest to get started with, the thing that takes you from idea to &ldquo;I built a thing that works&rdquo; fastest.</p>\n\n<p><strong>Inertia is more important than perfect.</strong></p>\n\n<p>You can learn a framework or library more easily if you build a solid foundation of vanilla JS skills. If a library clicks more easily for you, you can back into vanilla JS later (I learned jQuery first, then backed into vanilla JS).</p>\n\n<p>Don&rsquo;t overthink it!</p>",
      "content_text": "Yesterday, I got an email from a newsletter subscriber asking:\n\n\nWhat’s the best way to practice JavaScript?\n\n\nThere’s no one right way to learn JavaScript. But after teaching it for a handful of years now, I have found some trends and common approaches that make things easier for a lot of students.\n\nLet’s dig in!\n\nLean into your learning style\n\nSome folks learn best by reading, others from watching videos, and others from just diving in and trying a bunch of stuff until things click.\n\nI personally find that I learn best from reading a little and trying a little, then reading some more. I know a lot of folks who prefer to watch videos initially, then read later to reinforce what they learned.\n\nWhen you can, try to find resources that fit your learning preferences.\n\nPut what you learn into practice\n\nOne of the biggest challenges I hear from folks who are learning is making that jump from “I learned these methods and techniques” to “I know how to apply these techniques” is really hard.\n\nThe most effective way I’ve found to bridge that gap is by working on real projects.\n\nDon’t try to go too big, too soon with your projects\n\nWhere I see most students get stuck with project work is trying to do projects that are too big, too soon.\n\nDon’t jump right into building a todo app or an ecommerce platform or anything like that. You want to start small. Like, really small. For example…\n\n\nwrite a script that shows a piece of hidden content when a button is clicked. When you click it again, hide the content again.\nOnce you’ve got that figured out, you can modify it to work like an accordion, where opening one piece of content closes all others in a group.\nThen you can add more features and details, like letting users pass in their own options or settings\n\n\nStart really small, and layer in more complexity as you learn.\n\n(I’m actually working on a new product that will provide this kind of thing in a more guided, structured way.)\n\nLearning inertia is more important than picking the right tools\n\nI see a lot of learners get hung up on which tool to choose.\n\n\nShould I learn vanilla JS or React first? A framework or jQuery?\n\n\nHonestly, it doesn’t matter. The most important thing is that you pick something that you find easiest to get started with, the thing that takes you from idea to “I built a thing that works” fastest.\n\nInertia is more important than perfect.\n\nYou can learn a framework or library more easily if you build a solid foundation of vanilla JS skills. If a library clicks more easily for you, you can back into vanilla JS later (I learned jQuery first, then backed into vanilla JS).\n\nDon’t overthink it!",
      "date_published": "2022-01-17T15:30:00.000Z",
      "date_modified": "2022-01-17T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "73a700a4548347bb3de83f7a9bcf765a506a857c8a1a2689e93be6d72d551520.html"
      }
    },
    {
      "id": "https://gomakethings.com/how-i-record-my-vanilla-js-video-courses/",
      "url": "https://gomakethings.com/how-i-record-my-vanilla-js-video-courses/",
      "title": "How I record my vanilla JS video courses",
      "summary": "Yesterday, one of my students asked me how I record my JavaScript video courses and workshop lessons.\nToday, I wanted to share both my technical setup and general approach to making videos. Let’s dig in!\nScreen recording I use Screenflow for screen recording.\nIt’s macOS only. If you’re feeling cheap, you can also just use QuickTime, but I found that makes my fans spin like crazy. Screenflow also has some great editing features, including easy cropping and zooming, noise isolation, and so on.",
      "content_html": "<p>Yesterday, one of my students asked me how I record <a href=\"https://vanillajsguides.com\">my JavaScript video courses</a> and <a href=\"https://vanillajsacademy.com\">workshop lessons</a>.</p>\n\n<p>Today, I wanted to share both my technical setup and general approach to making videos. Let&rsquo;s dig in!</p>\n\n<h2 id=\"screen-recording\">Screen recording</h2>\n\n<p>I use <a href=\"https://www.telestream.net/screenflow/\">Screenflow</a> for screen recording.</p>\n\n<p>It&rsquo;s macOS only. If you&rsquo;re feeling cheap, you can also just use QuickTime, but I found that makes my fans spin like crazy. Screenflow also has some great editing features, including easy cropping and zooming, noise isolation, and so on.</p>\n\n<p>If you&rsquo;re on Windows, you can alternative use <a href=\"https://www.techsmith.com/video-editor.html\">Camtasia</a>, which I haven&rsquo;t used in years but used to when I was on a Windows rig.</p>\n\n<h2 id=\"microphone\">Microphone</h2>\n\n<p>For microphones, I used a <a href=\"https://www.bluemic.com/en-us/products/yeti/\">Blue Yeti</a> for years.</p>\n\n<p>It&rsquo;s the most entry-level of &ldquo;nice microphones,&rdquo; with a price to match. The audio quality on it is actually <em>really</em> good, if you configure it and use it properly.</p>\n\n<p>However, it&rsquo;s what&rsquo;s known as a <em>condenser microphone</em>. It picks up a wide range of tones, but is also very sensitive to low volumes, and thus, picks up a lot of background noise.</p>\n\n<p>Now that everyone is remote, there&rsquo;s a lot more noise in my house, which was making recording very difficult. In a sound-treated space or dedicated studio, the Blue Yeti is amazing. But it&rsquo;s very unforgiving to background noise.</p>\n\n<p>I recently upgraded to the <a href=\"https://www.shure.com/en-US/products/microphones/mv7\">Shure MV7</a>.</p>\n\n<p>It&rsquo;s what&rsquo;s known as a <em>dynamic microphone</em>. You need to put your mouth much closer to microphone to pick up a good audio level, but it isolates almost all noise that&rsquo;s not directly in front of it, which is just what I needed!</p>\n\n<p>Shure makes some other microphones that are technically a bit better, but the MV7 is a USB mic, which lets me plug it directly into my computer. Most of their other mics are XLR microphones, which require a special interface to boost the audio before connecting to your computer.</p>\n\n<p>If you&rsquo;re on a budget, any headset with a built-in microphone is a great place to start. Just beware that the mic on Apple&rsquo;s old-school corded airbuds tend to drag across beards and clothing and pick up noise that way.</p>\n\n<h2 id=\"boom-arm\">Boom Arm</h2>\n\n<p>While upgrading my microphone, I also purchased a <a href=\"https://www.rode.com/accessories/stands/psa1\">RØDE PSA1 boom arm</a>.</p>\n\n<p>This lets me position the mic directly in front of my mouth, without interfering with my keyboard or notes as I record. Some folks recommend optional things like shock arms to absorb desk movement, but I&rsquo;ve found that&rsquo;s totally unnecessary with this mic.</p>\n\n<p>Instead of a boom arm, you can use a desk stand. I did for years. They do sometimes pick up typing noises, so you have to be a bit careful about how hard you hit the desk.</p>\n\n<h2 id=\"positioning-the-mic\">Positioning the Mic</h2>\n\n<p>The microphone has a built-in pop filter to minimize the popping noises that result from saying &ldquo;p words&rdquo; (called <em>plosives</em>).</p>\n\n<p>I found that all of my s words sounded slurred with the new mic. From research, this often happens when a mic is positioned closer to your mouth.</p>\n\n<p>After some trial and error, I found that positioning it below my mouth pointed up made that go away. But it&rsquo;s different for each person. Try positioning the microphone to the side, from the bottom, and from above until you find something that works best for you.</p>\n\n<h2 id=\"text-editor-settings\">Text Editor Settings</h2>\n\n<p>While I normally code in a dark theme, I use a light theme for my recordings, as many folks report that it&rsquo;s easier to see and read in well lit settings.</p>\n\n<p>I boost the size of my text up to 19 pixels to make it easier to read on smaller screens. It&rsquo;s a bit awkwardly large on my end, but much better for the people watching my videos.</p>\n\n<p>I use Monokai Light as my syntax highlighting theme. I&rsquo;ve found that it has good contrast for easier visibility.</p>\n\n<h2 id=\"approach\">Approach</h2>\n\n<p>I prefer talking over code to showing my face. Worrying about whether or not I&rsquo;m making stupid faces makes recording even harder than it already it is.</p>\n\n<p>I used to use a script, and restart my recordings every time I fucked up and said an &ldquo;ooh,&rdquo; &ldquo;um,&rdquo;, or &ldquo;ah.&rdquo;</p>\n\n<p>Then, I did a few live streaming things, and had folks tell me they preferred the more casual tone of those over my well scripted videos. Some research indicates that filler words (the &ldquo;ums&rdquo; and such) often go unnoticed consciously, but trigger brains to pay more attention to what&rsquo;s being said.</p>\n\n<p>Now, I tend to write out a few notes on a piece of paper and &ldquo;just wing it.&rdquo;</p>\n\n<p>I aim for a single take with no edits beyond cropping the frame to HD and adjusting the audio level. If the video is longer than a minute or two, I may copy/paste the text into an email and keep it positioned on my phone in front of me instead.</p>\n\n<p>But I always keep it conversational, and leave in the mess ups and debugging. Students have actively told me they like to see that stuff and how I work through it.</p>\n\n<h2 id=\"creating-the-content\">Creating the Content</h2>\n\n<p>Each video starts with me creating the source code.</p>\n\n<p>Next, I write up how it works. Then, I use that text version to help guide the talking points in the video. Some folks prefer to learn by reading, so I include text options as well.</p>\n\n<h2 id=\"hosting\">Hosting</h2>\n\n<p>I host all of my videos on <a href=\"https://vimeo.com/upgrade\">Vimeo Pro</a>.</p>\n\n<p>They handle compressing the video, and dynamically serve it at different rates based on the user&rsquo;s bandwidth and screen size. They also let me control the UI of the video player, and where it can be embedded. Finally, they have a &ldquo;download video&rdquo; link, which is also useful for my students.</p>\n\n<p>Vimeo Pro is money well spent!</p>\n\n<p><em><strong>Note:</strong> for business videos, you need at least Vimeo Pro. The Vimeo Plus plan does not allow business videos under its TOS.</em></p>\n\n<h2 id=\"captions\">Captions</h2>\n\n<p>I use <a href=\"https://www.rev.com/\">Rev</a> for video captioning.</p>\n\n<p>You can link your Vimeo account directly in Rev using the Vimeo API, and select the videos you want to caption directly from the Rev UI. Captions are uploaded directly to the video without you having to manually upload them.</p>\n\n<p>This saves me a <em>ton</em> of time.</p>\n\n<h2 id=\"anything-i-missed\">Anything I missed?</h2>\n\n<p>Hope that helps! Let me know if there&rsquo;s anything you want me to talk about that I missed.</p>",
      "content_text": "Yesterday, one of my students asked me how I record my JavaScript video courses and workshop lessons.\n\nToday, I wanted to share both my technical setup and general approach to making videos. Let’s dig in!\n\nScreen recording\n\nI use Screenflow for screen recording.\n\nIt’s macOS only. If you’re feeling cheap, you can also just use QuickTime, but I found that makes my fans spin like crazy. Screenflow also has some great editing features, including easy cropping and zooming, noise isolation, and so on.\n\nIf you’re on Windows, you can alternative use Camtasia, which I haven’t used in years but used to when I was on a Windows rig.\n\nMicrophone\n\nFor microphones, I used a Blue Yeti for years.\n\nIt’s the most entry-level of “nice microphones,” with a price to match. The audio quality on it is actually really good, if you configure it and use it properly.\n\nHowever, it’s what’s known as a condenser microphone. It picks up a wide range of tones, but is also very sensitive to low volumes, and thus, picks up a lot of background noise.\n\nNow that everyone is remote, there’s a lot more noise in my house, which was making recording very difficult. In a sound-treated space or dedicated studio, the Blue Yeti is amazing. But it’s very unforgiving to background noise.\n\nI recently upgraded to the Shure MV7.\n\nIt’s what’s known as a dynamic microphone. You need to put your mouth much closer to microphone to pick up a good audio level, but it isolates almost all noise that’s not directly in front of it, which is just what I needed!\n\nShure makes some other microphones that are technically a bit better, but the MV7 is a USB mic, which lets me plug it directly into my computer. Most of their other mics are XLR microphones, which require a special interface to boost the audio before connecting to your computer.\n\nIf you’re on a budget, any headset with a built-in microphone is a great place to start. Just beware that the mic on Apple’s old-school corded airbuds tend to drag across beards and clothing and pick up noise that way.\n\nBoom Arm\n\nWhile upgrading my microphone, I also purchased a RØDE PSA1 boom arm.\n\nThis lets me position the mic directly in front of my mouth, without interfering with my keyboard or notes as I record. Some folks recommend optional things like shock arms to absorb desk movement, but I’ve found that’s totally unnecessary with this mic.\n\nInstead of a boom arm, you can use a desk stand. I did for years. They do sometimes pick up typing noises, so you have to be a bit careful about how hard you hit the desk.\n\nPositioning the Mic\n\nThe microphone has a built-in pop filter to minimize the popping noises that result from saying “p words” (called plosives).\n\nI found that all of my s words sounded slurred with the new mic. From research, this often happens when a mic is positioned closer to your mouth.\n\nAfter some trial and error, I found that positioning it below my mouth pointed up made that go away. But it’s different for each person. Try positioning the microphone to the side, from the bottom, and from above until you find something that works best for you.\n\nText Editor Settings\n\nWhile I normally code in a dark theme, I use a light theme for my recordings, as many folks report that it’s easier to see and read in well lit settings.\n\nI boost the size of my text up to 19 pixels to make it easier to read on smaller screens. It’s a bit awkwardly large on my end, but much better for the people watching my videos.\n\nI use Monokai Light as my syntax highlighting theme. I’ve found that it has good contrast for easier visibility.\n\nApproach\n\nI prefer talking over code to showing my face. Worrying about whether or not I’m making stupid faces makes recording even harder than it already it is.\n\nI used to use a script, and restart my recordings every time I fucked up and said an “ooh,” “um,”, or “ah.”\n\nThen, I did a few live streaming things, and had folks tell me they preferred the more casual tone of those over my well scripted videos. Some research indicates that filler words (the “ums” and such) often go unnoticed consciously, but trigger brains to pay more attention to what’s being said.\n\nNow, I tend to write out a few notes on a piece of paper and “just wing it.”\n\nI aim for a single take with no edits beyond cropping the frame to HD and adjusting the audio level. If the video is longer than a minute or two, I may copy/paste the text into an email and keep it positioned on my phone in front of me instead.\n\nBut I always keep it conversational, and leave in the mess ups and debugging. Students have actively told me they like to see that stuff and how I work through it.\n\nCreating the Content\n\nEach video starts with me creating the source code.\n\nNext, I write up how it works. Then, I use that text version to help guide the talking points in the video. Some folks prefer to learn by reading, so I include text options as well.\n\nHosting\n\nI host all of my videos on Vimeo Pro.\n\nThey handle compressing the video, and dynamically serve it at different rates based on the user’s bandwidth and screen size. They also let me control the UI of the video player, and where it can be embedded. Finally, they have a “download video” link, which is also useful for my students.\n\nVimeo Pro is money well spent!\n\nNote: for business videos, you need at least Vimeo Pro. The Vimeo Plus plan does not allow business videos under its TOS.\n\nCaptions\n\nI use Rev for video captioning.\n\nYou can link your Vimeo account directly in Rev using the Vimeo API, and select the videos you want to caption directly from the Rev UI. Captions are uploaded directly to the video without you having to manually upload them.\n\nThis saves me a ton of time.\n\nAnything I missed?\n\nHope that helps! Let me know if there’s anything you want me to talk about that I missed.",
      "date_published": "2022-01-14T15:30:00.000Z",
      "date_modified": "2022-01-14T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "99aeccbd43b4de6ff522208a8b0431937a6654a76ea0064046b66f7685704064.html"
      }
    },
    {
      "id": "https://gomakethings.com/how-i-structure-my-javascript-projects-in-2022/",
      "url": "https://gomakethings.com/how-i-structure-my-javascript-projects-in-2022/",
      "title": "How I structure my JavaScript projects in 2022",
      "summary": "One of the things I get the most questions about from my students is about what the “best way” to structure code is.\nThe truth is, there is no best way. But I do have a series of conventions and rough guidelines that I follow. Today, I thought I’d share them with you.\nLet’s dig in!\nThe JavaScript patterns I use I have a small handful of JavaScript patterns I use, depending on the needs of the project.",
      "content_html": "<p>One of the things I get the most questions about from my students is about what the &ldquo;best way&rdquo; to structure code is.</p>\n\n<p>The truth is, there is no <em>best way</em>. But I do have a series of conventions and rough guidelines that I follow. Today, I thought I&rsquo;d share them with you.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"the-javascript-patterns-i-use\">The JavaScript patterns I use</h2>\n\n<p>I have a small handful of JavaScript patterns I use, depending on the needs of the project.</p>\n\n<ul>\n<li>For libraries, I typically use <a href=\"https://gomakethings.com/an-introduction-to-the-javascript-constructor-pattern/\">a Constructor pattern</a>.</li>\n<li>For simple scripts on personal projects, I typically use a small function as a wrapper. I generally want to explicitly invoke it rather than using <a href=\"https://gomakethings.com/the-many-ways-to-write-an-immediately-invoked-function-expression-iife-in-javascript/\">an Immediately Invoked Function Expression (or IIFE)</a>.</li>\n</ul>\n\n<p>I used to use <a href=\"https://vanillajstoolkit.com/boilerplates/revealing-module-pattern/\">revealing module patterns</a> a lot more often, but these days, I tend to <a href=\"https://vanillajsguides.com/es-modules/\">use ES modules</a> instead (more on that in a bit).</p>\n\n<h2 id=\"the-build-tools-i-use\">The build tools I use</h2>\n\n<p>I used to use <a href=\"https://gulpjs.com/\">Gulp.js</a>, and <a href=\"https://codekitapp.com/\">CodeKit</a> before that.</p>\n\n<p>Now, I&rsquo;m a big fan of running NPM scripts directly. It gives me more control than CodeKit, but a much smaller set of dependencies (and less things breaking all the time) than Gulp.</p>\n\n<p><strong>Every single one of my projects now uses my <a href=\"https://github.com/cferdinandi/build-tool-boilerplate\">Build Tool Boilerplate</a>.</strong></p>\n\n<p>It&rsquo;s setup to let me easily drop out the stuff I don&rsquo;t need, and customize the stuff I do through a configurations object. It includes <a href=\"https://www.rollupjs.org/guide/en/\">rollup.js</a> for JavaScript, <a href=\"https://sass-lang.com/\">Sass</a> for CSS, and a handful of SVG and image optimization tools.</p>\n\n<p>I <em>don&rsquo;t</em> use webpack, because it&rsquo;s confusing and complicated. I also don&rsquo;t use TypeScript, because it&rsquo;s an added layer of dependencies, and solves problems I don&rsquo;t personally have.</p>\n\n<h2 id=\"how-i-organize-code-within-a-file\">How I organize code within a file</h2>\n\n<p>I tend to maintain a specific structure to my files&hellip;</p>\n\n<ul>\n<li>Variables at the top of the page</li>\n<li>Functions and methods in the middle</li>\n<li>Initializations and event listeners at the end</li>\n</ul>\n\n<p>This makes it really easy for me to open any particular file and have a rough idea of how it&rsquo;s organized and how to find what I&rsquo;m looking for relatively easily.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// \n</span><span class=\"c1\">// Variables\n</span><span class=\"c1\">// \n</span><span class=\"c1\"></span>\n<span class=\"kd\">let</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">spells</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">teapots</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Dancing teapots&#39;</span><span class=\"p\">,</span> \n\t<span class=\"nx\">fish</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Turn into a fish&#39;</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"c1\">//\n</span><span class=\"c1\">// Methods\n</span><span class=\"c1\">// \n</span><span class=\"c1\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * Cast the spell\n</span><span class=\"cm\"> * @param  {String} spell The spell to cast\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">function</span> <span class=\"nx\">castSpell</span> <span class=\"p\">(</span><span class=\"nx\">spell</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">spell</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"c1\">// \n</span><span class=\"c1\">// Inits &amp; Event Listeners\n</span><span class=\"c1\">// \n</span><span class=\"c1\"></span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">castSpell</span><span class=\"p\">(</span><span class=\"nx\">spells</span><span class=\"p\">.</span><span class=\"nx\">fish</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>I use <a href=\"https://jsdoc.app/\">JSDoc</a> to document my code. Some text editors will use this to pull out information about functions when used in other places in your code, which is quite nice!</p>\n\n<p>I maintain a similar structure <em>within functions</em> as well.</p>\n\n<h2 id=\"how-i-modularize-and-organize-files\">How I modularize and organize files</h2>\n\n<p>I&rsquo;m <a href=\"https://vanillajsguides.com/es-modules/\">a big fan of ES modules</a>. They help me keep my code more structured and organized.</p>\n\n<p>But I&rsquo;ve also seen people go <em>too</em> modular for my liking, creating deeply nested file trees with each function in its own little file. This creates, in my opinion, a different kind of organizational challenge (that I&rsquo;ve been guilty of myself).</p>\n\n<p>To avoid doing this, I tend to start all of my projects as a single JavaScript file.</p>\n\n<p>At some point, it may start to feel too big. I&rsquo;m doing a lot of scrolling up-and-down, or I open the file a second time in another tab to easily reference different parts of it.</p>\n\n<p>That&rsquo;s usually my sign that it&rsquo;s time to break things up a bit.</p>\n\n<ul>\n<li><strong>For JavaScript libraries,</strong> I organize my functions and files by what they do: <code>event-listeners.js</code>, <code>dom.js</code>, <code>constructor.js</code>, and so on.</li>\n<li><strong>For websites and apps,</strong> I tend to keep each library or discrete piece of functionality in its own file, and <code>import</code> them into files specific to the pages they&rsquo;re needed on: <code>search.js</code>, <code>table-of-contents.js</code>, and so on.</li>\n</ul>\n\n<p>I keep all of my build files in a <code>src</code> directory, and compile them with rollup.js and my <a href=\"https://github.com/cferdinandi/build-tool-boilerplate\">Build Tools Boilerplate</a> into a <code>dist</code> directory.</p>\n\n<h2 id=\"what-did-i-miss\">What did I miss?</h2>\n\n<p>That&rsquo;s a rough overview of how I work, but I&rsquo;m sure I missed some details.</p>\n\n<p>Is there anything you&rsquo;d like me to dig into more about my work setup that I didn&rsquo;t cover in this article? Send me an email and let me know!</p>",
      "content_text": "One of the things I get the most questions about from my students is about what the “best way” to structure code is.\n\nThe truth is, there is no best way. But I do have a series of conventions and rough guidelines that I follow. Today, I thought I’d share them with you.\n\nLet’s dig in!\n\nThe JavaScript patterns I use\n\nI have a small handful of JavaScript patterns I use, depending on the needs of the project.\n\n\nFor libraries, I typically use a Constructor pattern.\nFor simple scripts on personal projects, I typically use a small function as a wrapper. I generally want to explicitly invoke it rather than using an Immediately Invoked Function Expression (or IIFE).\n\n\nI used to use revealing module patterns a lot more often, but these days, I tend to use ES modules instead (more on that in a bit).\n\nThe build tools I use\n\nI used to use Gulp.js, and CodeKit before that.\n\nNow, I’m a big fan of running NPM scripts directly. It gives me more control than CodeKit, but a much smaller set of dependencies (and less things breaking all the time) than Gulp.\n\nEvery single one of my projects now uses my Build Tool Boilerplate.\n\nIt’s setup to let me easily drop out the stuff I don’t need, and customize the stuff I do through a configurations object. It includes rollup.js for JavaScript, Sass for CSS, and a handful of SVG and image optimization tools.\n\nI don’t use webpack, because it’s confusing and complicated. I also don’t use TypeScript, because it’s an added layer of dependencies, and solves problems I don’t personally have.\n\nHow I organize code within a file\n\nI tend to maintain a specific structure to my files…\n\n\nVariables at the top of the page\nFunctions and methods in the middle\nInitializations and event listeners at the end\n\n\nThis makes it really easy for me to open any particular file and have a rough idea of how it’s organized and how to find what I’m looking for relatively easily.\n// \n// Variables\n// \n\nlet name = 'Merlin';\nlet spells = {\n\tteapots: 'Dancing teapots', \n\tfish: 'Turn into a fish'\n};\n\n\n//\n// Methods\n// \n\n/**\n * Cast the spell\n * @param  {String} spell The spell to cast\n */\nfunction castSpell (spell) {\n\talert(spell);\n}\n\n\n// \n// Inits & Event Listeners\n// \n\ndocument.addEventListener('click', function (event) {\n\tcastSpell(spells.fish);\n});\n\nI use JSDoc to document my code. Some text editors will use this to pull out information about functions when used in other places in your code, which is quite nice!\n\nI maintain a similar structure within functions as well.\n\nHow I modularize and organize files\n\nI’m a big fan of ES modules. They help me keep my code more structured and organized.\n\nBut I’ve also seen people go too modular for my liking, creating deeply nested file trees with each function in its own little file. This creates, in my opinion, a different kind of organizational challenge (that I’ve been guilty of myself).\n\nTo avoid doing this, I tend to start all of my projects as a single JavaScript file.\n\nAt some point, it may start to feel too big. I’m doing a lot of scrolling up-and-down, or I open the file a second time in another tab to easily reference different parts of it.\n\nThat’s usually my sign that it’s time to break things up a bit.\n\n\nFor JavaScript libraries, I organize my functions and files by what they do: event-listeners.js, dom.js, constructor.js, and so on.\nFor websites and apps, I tend to keep each library or discrete piece of functionality in its own file, and import them into files specific to the pages they’re needed on: search.js, table-of-contents.js, and so on.\n\n\nI keep all of my build files in a src directory, and compile them with rollup.js and my Build Tools Boilerplate into a dist directory.\n\nWhat did I miss?\n\nThat’s a rough overview of how I work, but I’m sure I missed some details.\n\nIs there anything you’d like me to dig into more about my work setup that I didn’t cover in this article? Send me an email and let me know!",
      "date_published": "2022-01-13T15:30:00.000Z",
      "date_modified": "2022-01-13T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "38fd1a6a2ee93857b49a51cf955250caf1ea23a4c22ea52f8367bfcc187f763f.html"
      }
    },
    {
      "id": "https://gomakethings.com/the-many-ways-to-mutate-arrays-with-javascript/",
      "url": "https://gomakethings.com/the-many-ways-to-mutate-arrays-with-javascript/",
      "title": "The many ways to mutate arrays (with JavaScript)",
      "summary": "This week, we’ve looked at various techniques for looping over arrays and objects.\nIn both articles I noted:\n in a real site or application, you might want to manipulate the data in some way.\n Today, we’re going to look at how to mutate and transform arrays. Let’s dig in!\nAn example array For today’s article, lets use an array of wizards as an example. Each item in the array is an object with the wizard’s name and signature spell.",
      "content_html": "<p>This week, we&rsquo;ve looked at various techniques for <a href=\"https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/\">looping over arrays</a> and <a href=\"https://gomakethings.com/whats-the-best-way-to-loop-over-an-object-with-javascript/\">objects</a>.</p>\n\n<p>In both articles I noted:</p>\n\n<blockquote>\n<p>in a real site or application, you might want to manipulate the data in some way.</p>\n</blockquote>\n\n<p>Today, we&rsquo;re going to look at how to mutate and transform arrays. Let&rsquo;s dig in!</p>\n\n<h2 id=\"an-example-array\">An example array</h2>\n\n<p>For today’s article, lets use an array of <code>wizards</code> as an example. Each item in the array is an object with the wizard&rsquo;s <code>name</code> and signature <code>spell</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">spell</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Dancing teacups&#39;</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Gandalf&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">spell</span><span class=\"o\">:</span> <span class=\"s1\">&#39;You shall not pass!&#39;</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Radagast&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"nx\">spell</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Talk to animals&#39;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">];</span>\n</code></pre></div>\n<p>We&rsquo;ll transform it in various ways to create a new array.</p>\n\n<h2 id=\"the-array-map-method\">The <code>Array.map()</code> method</h2>\n\n<p>You can use the <code>Array.map()</code> method to loop through each item in an array, transform it, and return a new array. Pass in a callback function that accepts three arguments: the current item in the loop, its index, and the array itself. All three are optional.</p>\n\n<p>Whatever you <code>return</code> inside the callback function becomes the new value at that index in the new array.</p>\n\n<p>In this example, we&rsquo;re creating a new array that contains just the wizard&rsquo;s names.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// returns [&#34;Merlin&#34;, &#34;Gandalf&#34;, &#34;Radagast&#34;]\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">names</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/pen/?editors=0011\">Here&rsquo;s a demo of the <code>Array.map()</code> method.</a></p>\n\n<h2 id=\"the-array-filter-method\">The <code>Array.filter()</code> method</h2>\n\n<p>You can use the <code>Array.filter()</code> method to create a new array with only elements that pass a test you include as a callback function. The callback accepts three arguments: the current item in the loop&rsquo;s value, its index, and the array itself. All three are optional.</p>\n\n<p>In this example, we&rsquo;re creating a new array that contains only wizards whose spell does not include an exclamation mark (<code>!</code>).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// includes Merlin and Radagast, but not Gandalf\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">quiet</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"o\">!</span><span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">spell</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">&#39;!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/eYGQZZN?editors=0011\">Here&rsquo;s a demo of the <code>Array.filter()</code> method.</a></p>\n\n<h2 id=\"the-array-reduce-method\">The <code>Array.reduce()</code> method</h2>\n\n<p>The <code>Array.reduce()</code> method takes the content of an array and returns a single value. That value can be anything: a string, number, object, or even another array.</p>\n\n<p>The <code>Array.reduce()</code> method accepts two arguments: a callback method to run against each item in the array, and a starting value. Both are required.</p>\n\n<p>The callback also accepts two arguments: the <code>accumulator</code>, which is the current combined value, and the <code>current</code> item in the loop. Whatever you return is used as the accumulator for the next item in the loop. On the very first loop, that starting value is used instead.</p>\n\n<p>In this example, we&rsquo;re going to group our <code>wizards</code> into an object, organized by the number of characters in their <code>spell</code>. We&rsquo;ll pass in an empty object (<code>{}</code>) as the starting value.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// returns {15: [&#34;Merlin&#34;, &#34;Radagast&#34;], 19: [&#34;Gandalf&#34;]}\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">spellLengths</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">wizard</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Get the spell length\n</span><span class=\"c1\"></span>\t<span class=\"kd\">let</span> <span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">spell</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n\n\t<span class=\"c1\">// if there&#39;s no property yet, create one\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">length</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">length</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"c1\">// Add the wizard to the object\n</span><span class=\"c1\"></span>\t<span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">length</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n\n<span class=\"p\">},</span> <span class=\"p\">{});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/OJxaNRB?editors=0011\">Here&rsquo;s a demo of the <code>Array.reduce()</code> method.</a></p>\n\n<p><em><strong>A quick note about the <code>Array.reduce()</code> method:</strong> using a more verbose method (or combination of methods) <a href=\"https://gomakethings.com/revisiting-array.reduce/\">typically results in more readable code</a>. I tend to avoid this one now.</em></p>\n\n<h2 id=\"the-array-reverse-method\">The <code>Array.reverse()</code> method</h2>\n\n<p>You can use the <code>Array.reverse()</code> method to reverse the order of items in an array.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// Now Radagast is first and Merlin is last\n</span><span class=\"c1\"></span><span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">reverse</span><span class=\"p\">();</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/xxXQVqq?editors=0011\">Here&rsquo;s a demo of the <code>Array.reverse()</code> method.</a></p>\n\n<h2 id=\"the-array-join-method\">The <code>Array.join()</code> method</h2>\n\n<p>You can use the <code>Array.join()</code> method to combine all items in an array into a string, separated by a delimiter that you can pass in as an argument. By default, it will use a comma (<code>,</code>) as the delimiter if one is not provided.</p>\n\n<p>In this example, we&rsquo;re using the <code>Array.map()</code> method to create an array of wizard names, and then joining them together, separated by a dash (<code>-</code>).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// returns &#34;Merlin - Gandalf - Radagast&#34;\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">wizardList</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39; - &#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/ExwOKmN?editors=0011\">Here&rsquo;s a demo of the <code>Array.join()</code> method.</a></p>\n\n<h2 id=\"using-a-loop\">Using a loop</h2>\n\n<p>You can replicate any of the features of the dedicated methods above using <a href=\"https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/\">an array loop</a>.</p>\n\n<p>For example, we can replicate the <code>Array.map()</code> method by first creating an empty array, and then looping through the <code>wizards</code> array and pushing items into the new one.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">names</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">wizard</span> <span class=\"k\">of</span> <span class=\"nx\">wizards</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">names</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">wizard</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/abLQNwJ?editors=0011\">Here&rsquo;s a demo of this technique.</a></p>\n\n<p>A lot of people who are learning JavaScript find this approach easier to read and understand because what you&rsquo;re doing is more explicit. Ultimately, it doesn&rsquo;t matter, so choose whatever approach you personally find most readable.</p>",
      "content_text": "This week, we’ve looked at various techniques for looping over arrays and objects.\n\nIn both articles I noted:\n\n\nin a real site or application, you might want to manipulate the data in some way.\n\n\nToday, we’re going to look at how to mutate and transform arrays. Let’s dig in!\n\nAn example array\n\nFor today’s article, lets use an array of wizards as an example. Each item in the array is an object with the wizard’s name and signature spell.\nlet wizards = [\n\t{\n\t\tname: 'Merlin',\n\t\tspell: 'Dancing teacups'\n\t},\n\t{\n\t\tname: 'Gandalf',\n\t\tspell: 'You shall not pass!'\n\t},\n\t{\n\t\tname: 'Radagast',\n\t\tspell: 'Talk to animals'\n\t}\n];\n\nWe’ll transform it in various ways to create a new array.\n\nThe Array.map() method\n\nYou can use the Array.map() method to loop through each item in an array, transform it, and return a new array. Pass in a callback function that accepts three arguments: the current item in the loop, its index, and the array itself. All three are optional.\n\nWhatever you return inside the callback function becomes the new value at that index in the new array.\n\nIn this example, we’re creating a new array that contains just the wizard’s names.\n// returns [\"Merlin\", \"Gandalf\", \"Radagast\"]\nlet names = wizards.map(function (wizard) {\n\treturn wizard.name;\n});\n\nHere’s a demo of the Array.map() method.\n\nThe Array.filter() method\n\nYou can use the Array.filter() method to create a new array with only elements that pass a test you include as a callback function. The callback accepts three arguments: the current item in the loop’s value, its index, and the array itself. All three are optional.\n\nIn this example, we’re creating a new array that contains only wizards whose spell does not include an exclamation mark (!).\n// includes Merlin and Radagast, but not Gandalf\nlet quiet = wizards.filter(function (wizard) {\n\treturn !wizard.spell.includes('!');\n});\n\nHere’s a demo of the Array.filter() method.\n\nThe Array.reduce() method\n\nThe Array.reduce() method takes the content of an array and returns a single value. That value can be anything: a string, number, object, or even another array.\n\nThe Array.reduce() method accepts two arguments: a callback method to run against each item in the array, and a starting value. Both are required.\n\nThe callback also accepts two arguments: the accumulator, which is the current combined value, and the current item in the loop. Whatever you return is used as the accumulator for the next item in the loop. On the very first loop, that starting value is used instead.\n\nIn this example, we’re going to group our wizards into an object, organized by the number of characters in their spell. We’ll pass in an empty object ({}) as the starting value.\n// returns {15: [\"Merlin\", \"Radagast\"], 19: [\"Gandalf\"]}\nlet spellLengths = wizards.reduce(function (obj, wizard) {\n\n\t// Get the spell length\n\tlet length = wizard.spell.length;\n\n\t// if there's no property yet, create one\n\tif (!obj[length]) {\n\t\tobj[length] = [];\n\t}\n\n\t// Add the wizard to the object\n\tobj[length].push(wizard.name);\n\n}, {});\n\nHere’s a demo of the Array.reduce() method.\n\nA quick note about the Array.reduce() method: using a more verbose method (or combination of methods) typically results in more readable code. I tend to avoid this one now.\n\nThe Array.reverse() method\n\nYou can use the Array.reverse() method to reverse the order of items in an array.\n// Now Radagast is first and Merlin is last\nwizards.reverse();\n\nHere’s a demo of the Array.reverse() method.\n\nThe Array.join() method\n\nYou can use the Array.join() method to combine all items in an array into a string, separated by a delimiter that you can pass in as an argument. By default, it will use a comma (,) as the delimiter if one is not provided.\n\nIn this example, we’re using the Array.map() method to create an array of wizard names, and then joining them together, separated by a dash (-).\n// returns \"Merlin - Gandalf - Radagast\"\nlet wizardList = wizards.map(function (wizard) {\n\treturn wizard.name;\n}).join(' - ');\n\nHere’s a demo of the Array.join() method.\n\nUsing a loop\n\nYou can replicate any of the features of the dedicated methods above using an array loop.\n\nFor example, we can replicate the Array.map() method by first creating an empty array, and then looping through the wizards array and pushing items into the new one.\nlet names = [];\n\nfor (let wizard of wizards) {\n\tnames.push(wizard.name);\n}\n\nHere’s a demo of this technique.\n\nA lot of people who are learning JavaScript find this approach easier to read and understand because what you’re doing is more explicit. Ultimately, it doesn’t matter, so choose whatever approach you personally find most readable.",
      "date_published": "2022-01-12T15:30:00.000Z",
      "date_modified": "2022-01-12T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "2e4dbe161d0bf8a89ce42761292e1d30f95470de83f7ac045aea03c3edc8d717.html"
      }
    },
    {
      "id": "https://gomakethings.com/whats-the-best-way-to-loop-over-an-object-with-javascript/",
      "url": "https://gomakethings.com/whats-the-best-way-to-loop-over-an-object-with-javascript/",
      "title": "What's the best way to loop over an object with JavaScript?",
      "summary": "Yesterday, we looked at different approach to looping over arrays and elements with JavaScript. Today, we’re going to look at a few methods for looping over objects.\nLet’s dig in!\nAn example object For today’s article, let’s use an object with the details of a lunch order as an example.\nlet lunch = { sandwich: 'turkey', chips: 'cape cod', drink: 'soda' };  We’ll loop over it and log each item to the console, but in a real site or application, you might want to manipulate the data in some way.",
      "content_html": "<p>Yesterday, we looked at <a href=\"https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/\">different approach to looping over arrays and elements with JavaScript</a>. Today, we&rsquo;re going to look at a few methods for looping over objects.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"an-example-object\">An example object</h2>\n\n<p>For today’s article, let&rsquo;s use an object with the details of a <code>lunch</code> order as an example.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">lunch</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">sandwich</span><span class=\"o\">:</span> <span class=\"s1\">&#39;turkey&#39;</span><span class=\"p\">,</span>\n\t<span class=\"nx\">chips</span><span class=\"o\">:</span> <span class=\"s1\">&#39;cape cod&#39;</span><span class=\"p\">,</span>\n\t<span class=\"nx\">drink</span><span class=\"o\">:</span> <span class=\"s1\">&#39;soda&#39;</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>We’ll loop over it and log each item to the console, but in a real site or application, you might want to manipulate the data in some way.</p>\n\n<h2 id=\"the-for-in-loop\">The <code>for...in</code> loop</h2>\n\n<p>A <code>for...in</code> loop is similar to <a href=\"https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/#the-for-of-loop\">the <code>for...of</code> loop we looked at yesterday</a>, but used to loop through objects.</p>\n\n<p>In a <code>for...in</code> loop, you define a variable to represent the <code>key</code> of the current item <code>in</code> the object that you’re looping over. Inside the block (the stuff between curly brackets), you can use that variable to reference the current item.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs &#34;sandwich&#34;, &#34;ham&#34;, &#34;snack&#34;, &#34;chips&#34;, &#34;drink&#34;, &#34;soda&#34;, &#34;desert&#34;, &#34;cookie&#34;, &#34;guests&#34;, 3, &#34;alcohol&#34;, false\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">lunch</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">);</span>        <span class=\"c1\">// key\n</span><span class=\"c1\"></span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span> <span class=\"c1\">// value\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/LYzgjNp?editors=0011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"skipping-and-ending-the-loop\">Skipping and ending the loop</h2>\n\n<p>Just like with a <code>for</code> and <code>for...of</code> loop, you can use the <code>continue</code> and <code>break</code> operators in a <code>for...in</code> loop.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">lunch</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">key</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;drink&#39;</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/MWEPvyZ?editors=0011\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"the-object-keys-method\">The <code>Object.keys()</code> method</h2>\n\n<p>The <code>Object.keys()</code> method returns an array of keys from an object. You pass in the object as an argument.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs [&#34;sandwich&#34;, &#34;chips&#34;, &#34;drink&#34;]\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">keys</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">keys</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>You can combine it with a <code>for...of</code> loop (or any of the other array techniques we looked at yesterday) to loop through the object.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">key</span> <span class=\"k\">of</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">);</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/oNGaezx?editors=0011\">Here&rsquo;s a demo of this technique in action.</a></p>\n\n<h2 id=\"the-object-entries-method\">The <code>Object.entries()</code> method</h2>\n\n<p>The <code>Object.entries()</code> method returns an array of key/value pairs from an object, also represented as arrays. Pass in the object as an argument.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs [[&#34;sandwich&#34;, &#34;turkey&#34;], [&#34;chips&#34;, &#34;cape cod&#34;], [&#34;drink&#34;, &#34;soda&#34;]]\n</span><span class=\"c1\"></span><span class=\"kd\">let</span> <span class=\"nx\">entries</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">entries</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">entries</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>You can combine this technique with a <code>for...of</code> loop and <a href=\"https://gomakethings.com/destructuring-in-javascript/#destructuring-arrays-with-vanilla-js\">array destructuring</a> to loop through the object.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">item</span><span class=\"p\">]</span> <span class=\"k\">of</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">entries</span><span class=\"p\">(</span><span class=\"nx\">lunch</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">);</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/QWqZMpV?editors=0011\">Here&rsquo;s one last demo for you.</a></p>\n\n<h2 id=\"which-method-should-you-use-and-why\">Which method should you use, and why?</h2>\n\n<p>This one is pretty straightforward for me: <code>Object.entries()</code> with <code>for...of</code>. Having a dedicated variable for the <code>item</code> in the loop is really nice.</p>",
      "content_text": "Yesterday, we looked at different approach to looping over arrays and elements with JavaScript. Today, we’re going to look at a few methods for looping over objects.\n\nLet’s dig in!\n\nAn example object\n\nFor today’s article, let’s use an object with the details of a lunch order as an example.\nlet lunch = {\n\tsandwich: 'turkey',\n\tchips: 'cape cod',\n\tdrink: 'soda'\n};\n\nWe’ll loop over it and log each item to the console, but in a real site or application, you might want to manipulate the data in some way.\n\nThe for...in loop\n\nA for...in loop is similar to the for...of loop we looked at yesterday, but used to loop through objects.\n\nIn a for...in loop, you define a variable to represent the key of the current item in the object that you’re looping over. Inside the block (the stuff between curly brackets), you can use that variable to reference the current item.\n// logs \"sandwich\", \"ham\", \"snack\", \"chips\", \"drink\", \"soda\", \"desert\", \"cookie\", \"guests\", 3, \"alcohol\", false\nfor (let key in lunch) {\n\tconsole.log(key);        // key\n\tconsole.log(lunch[key]); // value\n}\n\nHere’s a demo.\n\nSkipping and ending the loop\n\nJust like with a for and for...of loop, you can use the continue and break operators in a for...in loop.\nfor (let key in lunch) {\n\tif (key === 'drink') break;\n\tconsole.log(lunch[key]);\n}\n\nHere’s another demo.\n\nThe Object.keys() method\n\nThe Object.keys() method returns an array of keys from an object. You pass in the object as an argument.\n// logs [\"sandwich\", \"chips\", \"drink\"]\nlet keys = Object.keys(lunch);\nconsole.log(keys);\n\nYou can combine it with a for...of loop (or any of the other array techniques we looked at yesterday) to loop through the object.\nfor (let key of Object.keys(lunch)) {\n\tconsole.log(key);\n\tconsole.log(lunch[key]);\n}\n\nHere’s a demo of this technique in action.\n\nThe Object.entries() method\n\nThe Object.entries() method returns an array of key/value pairs from an object, also represented as arrays. Pass in the object as an argument.\n// logs [[\"sandwich\", \"turkey\"], [\"chips\", \"cape cod\"], [\"drink\", \"soda\"]]\nlet entries = Object.entries(lunch);\nconsole.log(entries);\n\nYou can combine this technique with a for...of loop and array destructuring to loop through the object.\nfor (let [key, item] of Object.entries(lunch)) {\n\tconsole.log(key);\n\tconsole.log(item);\n}\n\nHere’s one last demo for you.\n\nWhich method should you use, and why?\n\nThis one is pretty straightforward for me: Object.entries() with for...of. Having a dedicated variable for the item in the loop is really nice.",
      "date_published": "2022-01-11T15:30:00.000Z",
      "date_modified": "2022-01-11T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "da00ace68fcddfd09debe881485572283f90012304649a69c529e4e685d24dcb.html"
      }
    },
    {
      "id": "https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/",
      "url": "https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/",
      "title": "What's the best way to loop over arrays and elements in JavaScript?",
      "summary": "JavaScript provides a handful of methods and techniques for looping over arrays and elements and doing things with them. So… which approach should you use, and why?\nToday, we’re going to look at the different ways you can loop over things with vanilla JS, and when and why to choose one over the other.\nLet’s dig in!\nAn example array For today’s article, lets use an array of sandwiches as an example.",
      "content_html": "<p>JavaScript provides a handful of methods and techniques for looping over arrays and elements and doing things with them. So&hellip; which approach should you use, and why?</p>\n\n<p>Today, we&rsquo;re going to look at the different ways you can loop over things with vanilla JS, and when and why to choose one over the other.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"an-example-array\">An example array</h2>\n\n<p>For today&rsquo;s article, lets use an array of <code>sandwiches</code> as an example.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">sandwiches</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;turkey&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tuna&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pb&amp;j&#39;</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>We&rsquo;ll loop over it and log each item to the console, but in a real site or application, you might want to manipulate the data in some way.</p>\n\n<h2 id=\"the-for-loop\">The <code>for</code> loop</h2>\n\n<p>You can use a <code>for</code> loop to iterate over arrays, NodeLists, and other array-like objects. This is the old-school way to loop over things.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs 0, &#34;turkey&#34;, 1, &#34;tuna&#34;, 2, &#34;ham&#34;, 3, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">sandwiches</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">);</span> <span class=\"c1\">// index\n</span><span class=\"c1\"></span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwiches</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]);</span> <span class=\"c1\">// value\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>In the first part of the loop, before the first semicolon, we set a counter variable (typically <code>i</code>, but it can be anything) to <code>0</code>.</li>\n<li>The second part, between the two semicolons, is the test we check against after each iteration of the loop. In this case, we want to make sure the counter value is less than the total number of items in our array. We do this by checking the <code>.length</code> of our array.</li>\n<li>Finally, after the second semicolon, we specify what to run after each loop. In this case, we&rsquo;re adding <code>1</code> to the value of <code>i</code> with <code>i++</code>.</li>\n</ul>\n\n<p>We can then use <code>i</code> to grab the current item in the loop from our array.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/WNZabyL?editors=1011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"the-for-of-loop\">The <code>for...of</code> loop</h2>\n\n<p>A more modern approach, you can use <code>for...of</code> to loop through <em>iterable objects</em>. That includes strings, arrays, and other array-like objects such as NodeLists, HTMLCollections, and HTMLFormControlsCollection, but <em>not</em> plain objects (<code>{}</code>).</p>\n\n<p>In a <code>for...of</code> loop, you define a <em>variable</em> to represent the current item <code>of</code> the iterable that you&rsquo;re looping over. Inside the <em>block</em> (the stuff between curly brackets), you can use that variable to reference the current item.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs &#34;turkey&#34;, &#34;tuna&#34;, &#34;ham&#34;, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"k\">of</span> <span class=\"nx\">sandwiches</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/LYzgEJW?editors=0011\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"skipping-and-ending-loops\">Skipping and ending loops</h2>\n\n<p>You can skip to the next item in a <code>for</code> or <code>for...of</code> loop using <code>continue</code>, or end the loop altogether with <code>break</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs &#34;turkey&#34;, &#34;tuna&#34;, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"k\">of</span> <span class=\"nx\">sandwiches</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Skip to the next item in the loop\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Logs &#34;turkey&#34;, &#34;tuna&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"k\">of</span> <span class=\"nx\">sandwiches</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Skip to the next item in the loop\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/eYGPmQN?editors=0011\">Here&rsquo;s a demo of <code>continue</code> and <code>break</code>.</a></p>\n\n<h2 id=\"the-array-foreach-and-nodelist-foreach-methods\">The <code>Array.forEach()</code> and <code>NodeList.forEach()</code> methods</h2>\n\n<p>The <code>Array.forEach()</code> and <code>NodeList.forEach()</code> methods provide a simpler way to iterate over arrays and NodeLists while still having access to the index.</p>\n\n<p>You pass a callback function into the <code>forEach()</code> method. The callback itself accepts three arguments: the current item in the loop, the index of the current item in the loop, and the array itself. All three are optional, and you can name them anything you want.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs 0, &#34;turkey&#34;, 1, &#34;tuna&#34;, 2, &#34;ham&#34;, 3, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">sandwiches</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">);</span>    <span class=\"c1\">// index\n</span><span class=\"c1\"></span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span> <span class=\"c1\">// value\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/wvrYBOR?editors=0011\">Here&rsquo;s a demo of the <code>Array.forEach()</code> method.</a></p>\n\n<p>Unlike with <code>for</code> and <code>for...of</code> loops, you can&rsquo;t end a <code>forEach()</code> callback function before it&rsquo;s looped through all items. You can <code>return</code> to end the current loop (like you would with <code>continue</code>), but there&rsquo;s no way to <code>break</code> the loop.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Skip &#34;ham&#34;\n</span><span class=\"c1\">// logs &#34;turkey&#34;, &#34;tuna&#34;, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">sandwiches</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/ExwdaJg?editors=0011\">Here&rsquo;s a demo of skipping items in an <code>Array.forEach()</code> loop.</a></p>\n\n<h2 id=\"which-method-should-you-use-and-why\">Which method should you use, and why?</h2>\n\n<p>In most cases, most of the time, I use a <code>for...of</code> loop. It&rsquo;s simple and straightforward, and easy to type.</p>\n\n<p>There are a few situational exceptions to that, however&hellip;</p>\n\n<ol>\n<li>If I need the index of the item, I&rsquo;ll use the <code>Array.forEach()</code> or <code>NodeList.forEach()</code> method.</li>\n<li>If I need the index <em>and</em> want to end the loop early once a condition is met, I&rsquo;ll use a <code>for</code> loop.</li>\n</ol>\n\n<p>I try to avoid <code>for</code> loops unless there&rsquo;s a compelling reason to use them. They&rsquo;re hard to read. They&rsquo;re hard to write. They&rsquo;re just messy.</p>\n\n<p>The humble <code>for...of</code> loop is the real workhorse of my code bases!</p>",
      "content_text": "JavaScript provides a handful of methods and techniques for looping over arrays and elements and doing things with them. So… which approach should you use, and why?\n\nToday, we’re going to look at the different ways you can loop over things with vanilla JS, and when and why to choose one over the other.\n\nLet’s dig in!\n\nAn example array\n\nFor today’s article, lets use an array of sandwiches as an example.\nlet sandwiches = ['turkey', 'tuna', 'ham', 'pb&j'];\n\nWe’ll loop over it and log each item to the console, but in a real site or application, you might want to manipulate the data in some way.\n\nThe for loop\n\nYou can use a for loop to iterate over arrays, NodeLists, and other array-like objects. This is the old-school way to loop over things.\n// logs 0, \"turkey\", 1, \"tuna\", 2, \"ham\", 3, \"pb&j\"\nfor (let i = 0; i < sandwiches.length; i++) {\n\tconsole.log(i); // index\n\tconsole.log(sandwiches[i]); // value\n}\n\n\nIn the first part of the loop, before the first semicolon, we set a counter variable (typically i, but it can be anything) to 0.\nThe second part, between the two semicolons, is the test we check against after each iteration of the loop. In this case, we want to make sure the counter value is less than the total number of items in our array. We do this by checking the .length of our array.\nFinally, after the second semicolon, we specify what to run after each loop. In this case, we’re adding 1 to the value of i with i++.\n\n\nWe can then use i to grab the current item in the loop from our array.\n\nHere’s a demo.\n\nThe for...of loop\n\nA more modern approach, you can use for...of to loop through iterable objects. That includes strings, arrays, and other array-like objects such as NodeLists, HTMLCollections, and HTMLFormControlsCollection, but not plain objects ({}).\n\nIn a for...of loop, you define a variable to represent the current item of the iterable that you’re looping over. Inside the block (the stuff between curly brackets), you can use that variable to reference the current item.\n// logs \"turkey\", \"tuna\", \"ham\", \"pb&j\"\nfor (let sandwich of sandwiches) {\n\tconsole.log(sandwich);\n}\n\nHere’s another demo.\n\nSkipping and ending loops\n\nYou can skip to the next item in a for or for...of loop using continue, or end the loop altogether with break.\n// logs \"turkey\", \"tuna\", \"pb&j\"\nfor (let sandwich of sandwiches) {\n\n\t// Skip to the next item in the loop\n\tif (sandwich === 'ham') continue;\n\n\tconsole.log(sandwich);\n\n}\n\n// Logs \"turkey\", \"tuna\"\nfor (let sandwich of sandwiches) {\n\n\t// Skip to the next item in the loop\n\tif (sandwich === 'ham') break;\n\n\tconsole.log(sandwich);\n\n}\n\nHere’s a demo of continue and break.\n\nThe Array.forEach() and NodeList.forEach() methods\n\nThe Array.forEach() and NodeList.forEach() methods provide a simpler way to iterate over arrays and NodeLists while still having access to the index.\n\nYou pass a callback function into the forEach() method. The callback itself accepts three arguments: the current item in the loop, the index of the current item in the loop, and the array itself. All three are optional, and you can name them anything you want.\n// logs 0, \"turkey\", 1, \"tuna\", 2, \"ham\", 3, \"pb&j\"\nsandwiches.forEach(function (sandwich, index) {\n\tconsole.log(index);    // index\n\tconsole.log(sandwich); // value\n});\n\nHere’s a demo of the Array.forEach() method.\n\nUnlike with for and for...of loops, you can’t end a forEach() callback function before it’s looped through all items. You can return to end the current loop (like you would with continue), but there’s no way to break the loop.\n// Skip \"ham\"\n// logs \"turkey\", \"tuna\", \"pb&j\"\nsandwiches.forEach(function (sandwich, index) {\n\tif (sandwich === 'ham') return;\n\tconsole.log(sandwich);\n});\n\nHere’s a demo of skipping items in an Array.forEach() loop.\n\nWhich method should you use, and why?\n\nIn most cases, most of the time, I use a for...of loop. It’s simple and straightforward, and easy to type.\n\nThere are a few situational exceptions to that, however…\n\n\nIf I need the index of the item, I’ll use the Array.forEach() or NodeList.forEach() method.\nIf I need the index and want to end the loop early once a condition is met, I’ll use a for loop.\n\n\nI try to avoid for loops unless there’s a compelling reason to use them. They’re hard to read. They’re hard to write. They’re just messy.\n\nThe humble for...of loop is the real workhorse of my code bases!",
      "date_published": "2022-01-10T15:30:00.000Z",
      "date_modified": "2022-01-10T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "36ac8b2553095b5b2761b849fdebef7af3e45abc83c8413009090193181ed5f1.html"
      }
    },
    {
      "id": "https://gomakethings.com/two-ways-to-clear-an-array-with-vanilla-javascript/",
      "url": "https://gomakethings.com/two-ways-to-clear-an-array-with-vanilla-javascript/",
      "title": "Two ways to clear an array with vanilla JavaScript",
      "summary": "Today, we’re going to look at two different ways to empty an array with JavaScript. Let’s dig in!\nReassigning the variable Let’s say you have an array of wizards, like this.\nlet wizards = ['Gandalf', 'Radagast', 'Merlin'];  You want to completely wipe it out. The most common way to do this is to reassign the value of the wizards variable to an empty array ([]).\nwizards = [];  Here’s a demo.",
      "content_html": "<p>Today, we&rsquo;re going to look at two different ways to empty an array with JavaScript. Let&rsquo;s dig in!</p>\n\n<h2 id=\"reassigning-the-variable\">Reassigning the variable</h2>\n\n<p>Let&rsquo;s say you have an array of wizards, like this.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Gandalf&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Radagast&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>You want to completely wipe it out. The most common way to do this is to reassign the value of the <code>wizards</code> variable to an empty array (<code>[]</code>).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/NWaBMqE?editors=0011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"setting-the-length-to-0\">Setting the <code>length</code> to <code>0</code></h2>\n\n<p>Another way to clear an array is to set the array&rsquo;s <code>length</code> property to <code>0</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/PoJBeNa?editors=0011\">Here&rsquo;s another demo.</a></p>\n\n<p>(<em><a href=\"https://twitter.com/KittyGiraudel/status/1479393765844520960?s=20\">Thanks to Kitty Giraudel for this tip.</a></em>)</p>\n\n<h2 id=\"why-would-you-set-the-length-instead-of-reassigning-the-variable\">Why would you set the <code>length</code> instead of reassigning the variable?</h2>\n\n<p>In most situations, reassigning the variable to an empty array is the better choice. It&rsquo;s shorter and more explicit than adjusting the <code>length</code> property.</p>\n\n<p>But sometimes, you have an array that&rsquo;s <em>assigned by reference</em>, and you want to keep them linked.</p>\n\n<p>Here, I have my array of <code>wizards</code>. I also have an <code>alsoWizards</code> variable, and I set its value to the <code>wizards</code> array. The <code>alsoWizards</code> array is <em>not</em> a copy of <code>wizards</code>. It references the original array.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Gandalf&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Radagast&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">];</span>\n<span class=\"kd\">let</span> <span class=\"nx\">alsoWizards</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>If I reassign the value of <code>wizards</code>, the <code>alsoWizards</code> variable still points to the original array that was assigned to it.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Clear the array\n</span><span class=\"c1\"></span><span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\n<span class=\"c1\">// logs []\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wizards</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// logs [&#34;Gandalf&#34;, &#34;Radagast&#34;, &#34;Merlin&#34;]\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">alsoWizards</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/QWqBryY?editors=0011\">You can see it in action here.</a></p>\n\n<p>If I instead set the <code>length</code> of <code>wizards</code> to <code>0</code>, the <code>alsoWizards</code> variable is also an empty array, because the array that <code>wizards</code> points to has not changed.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Clear the array\n</span><span class=\"c1\"></span><span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// logs []\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wizards</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// logs []\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">alsoWizards</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/RwLBypQ?editors=0011\">Here&rsquo;s one last demo.</a></p>",
      "content_text": "Today, we’re going to look at two different ways to empty an array with JavaScript. Let’s dig in!\n\nReassigning the variable\n\nLet’s say you have an array of wizards, like this.\nlet wizards = ['Gandalf', 'Radagast', 'Merlin'];\n\nYou want to completely wipe it out. The most common way to do this is to reassign the value of the wizards variable to an empty array ([]).\nwizards = [];\n\nHere’s a demo.\n\nSetting the length to 0\n\nAnother way to clear an array is to set the array’s length property to 0.\nwizards.length = 0;\n\nHere’s another demo.\n\n(Thanks to Kitty Giraudel for this tip.)\n\nWhy would you set the length instead of reassigning the variable?\n\nIn most situations, reassigning the variable to an empty array is the better choice. It’s shorter and more explicit than adjusting the length property.\n\nBut sometimes, you have an array that’s assigned by reference, and you want to keep them linked.\n\nHere, I have my array of wizards. I also have an alsoWizards variable, and I set its value to the wizards array. The alsoWizards array is not a copy of wizards. It references the original array.\nlet wizards = ['Gandalf', 'Radagast', 'Merlin'];\nlet alsoWizards = wizards;\n\nIf I reassign the value of wizards, the alsoWizards variable still points to the original array that was assigned to it.\n// Clear the array\nwizards = [];\n\n// logs []\nconsole.log(wizards);\n\n// logs [\"Gandalf\", \"Radagast\", \"Merlin\"]\nconsole.log(alsoWizards);\n\nYou can see it in action here.\n\nIf I instead set the length of wizards to 0, the alsoWizards variable is also an empty array, because the array that wizards points to has not changed.\n// Clear the array\nwizards.length = 0;\n\n// logs []\nconsole.log(wizards);\n\n// logs []\nconsole.log(alsoWizards);\n\nHere’s one last demo.",
      "date_published": "2022-01-07T15:30:00.000Z",
      "date_modified": "2022-01-07T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "029707516301d8cf38ff3817e866bf3113d61ce236febfa32b4a7a9ab59fb222.html"
      }
    },
    {
      "id": "https://gomakethings.com/30-day-beginner-html-and-css-with-bree-hall/",
      "url": "https://gomakethings.com/30-day-beginner-html-and-css-with-bree-hall/",
      "title": "30 day beginner HTML and CSS with Bree Hall",
      "summary": "I focus a lot on JavaScript here, and I often get asked if I have any recommendations on where to learn HTML and CSS basics.\nToday, I wanted to share a cool new project from Bree Hall: 30 Day Beginner HTML & CSS Coding Calendar. Bree explains how it works in this video.\n  This 30 day calendar will take you on a journey of learning, understanding, and practicing the fundamentals of HTML and CSS through free videos, practice exercises, and games that can be found online.",
      "content_html": "<p>I focus a lot on JavaScript here, and I often get asked if I have any recommendations on where to learn HTML and CSS basics.</p>\n\n<p>Today, I wanted to share a cool new project from Bree Hall: <a href=\"https://github.com/breehall/30-Day-HTML-CSS-Coding-Calendar\">30 Day Beginner HTML &amp; CSS Coding Calendar</a>. Bree explains <a href=\"https://www.youtube.com/watch?v=HDssvUHgpYk\">how it works in this video</a>.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/HDssvUHgpYk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<blockquote>\n<p>This 30 day calendar will take you on a journey of learning, understanding, and practicing the fundamentals of HTML and CSS through free videos, practice exercises, and games that can be found online.</p>\n\n<p>I recommend this coding calendar to anyone who is interested in pursuing a career in development, and anyone who is on the fence and just wants to test the waters. The technical and coding resources on this calendar have been created by talented minds and are absolutely free to use! I do not own them, but they’re always my go to resources for new developers. Links to all resources can be found below.</p>\n</blockquote>\n\n<p>Bree is an amazing, supportive teacher. You can <a href=\"https://www.youtube.com/c/breehall\">subscribe to her YouTube channel</a> or <a href=\"https://twitter.com/bytesofbree\">follow her on Twitter</a> for lots of frontend goodness.</p>",
      "content_text": "I focus a lot on JavaScript here, and I often get asked if I have any recommendations on where to learn HTML and CSS basics.\n\nToday, I wanted to share a cool new project from Bree Hall: 30 Day Beginner HTML & CSS Coding Calendar. Bree explains how it works in this video.\n\n\n\n\nThis 30 day calendar will take you on a journey of learning, understanding, and practicing the fundamentals of HTML and CSS through free videos, practice exercises, and games that can be found online.\n\nI recommend this coding calendar to anyone who is interested in pursuing a career in development, and anyone who is on the fence and just wants to test the waters. The technical and coding resources on this calendar have been created by talented minds and are absolutely free to use! I do not own them, but they’re always my go to resources for new developers. Links to all resources can be found below.\n\n\nBree is an amazing, supportive teacher. You can subscribe to her YouTube channel or follow her on Twitter for lots of frontend goodness.",
      "date_published": "2022-01-06T15:30:00.000Z",
      "date_modified": "2022-01-06T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "55000cdd9eb348d122689b4323afe6a3c67bf65cb567e52086122a58547ceee2.html"
      }
    },
    {
      "id": "https://gomakethings.com/changing-the-default-text-editor-on-macos/",
      "url": "https://gomakethings.com/changing-the-default-text-editor-on-macos/",
      "title": "Changing the default text editor on macOS",
      "summary": "I’ve been using the same computer for almost a decade, but recently upgraded my computer.\nBy default, macOS uses Apple’s TextEdit app for any text file, and it’s pretty bad. Years ago, on my old machine, I setup Sublime to be my default editor for everything, but couldn’t remember how I did.\nI eventually stumbled onto a thread on StackExchange with a working solution. I wanted to document it here so I wouldn’t forget again next time.",
      "content_html": "<p>I&rsquo;ve been using the same computer for almost a decade, but recently upgraded my computer.</p>\n\n<p>By default, macOS uses Apple&rsquo;s TextEdit app for any text file, and it&rsquo;s pretty bad. Years ago, on my old machine, I setup Sublime to be my default editor for everything, but couldn&rsquo;t remember how I did.</p>\n\n<p>I eventually stumbled onto <a href=\"https://apple.stackexchange.com/questions/123833/replace-text-edit-as-the-default-text-editor/123834#123834\">a thread on StackExchange with a working solution</a>. I wanted to document it here so I wouldn&rsquo;t forget again next time.</p>\n\n<p><em><strong>Just a heads up:</strong> this requires using the command line.</em></p>\n\n<p>In terminal, copy-and-paste the command from below that matches the text editor you want to use as your default. Then, press <code>return</code> to run it, and restart your machine.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"c1\"># Sublime Text 3</span>\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add <span class=\"s1\">&#39;{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.3;}&#39;</span>\n\n<span class=\"c1\"># Sublime Text 4</span>\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add <span class=\"s1\">&#39;{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.4;}&#39;</span>\n\n<span class=\"c1\"># VS Code</span>\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add <span class=\"s1\">&#39;{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.microsoft.VSCode;}&#39;</span></code></pre></div>\n<p>A lot of places suggested right clicking the file, selecting &ldquo;Get Info,&rdquo; and changing the &ldquo;Open With&rdquo; setting for all files of that type.</p>\n\n<p>I tried that at first, but its time consuming when you work with lots of different file types. And it doesn&rsquo;t work at all for hidden files like <code>.htaccess</code> and <code>.gitignore</code>.</p>\n\n<p>The command line trick works for all text files across the whole system, including hidden files, and I never have to think about it again.</p>",
      "content_text": "I’ve been using the same computer for almost a decade, but recently upgraded my computer.\n\nBy default, macOS uses Apple’s TextEdit app for any text file, and it’s pretty bad. Years ago, on my old machine, I setup Sublime to be my default editor for everything, but couldn’t remember how I did.\n\nI eventually stumbled onto a thread on StackExchange with a working solution. I wanted to document it here so I wouldn’t forget again next time.\n\nJust a heads up: this requires using the command line.\n\nIn terminal, copy-and-paste the command from below that matches the text editor you want to use as your default. Then, press return to run it, and restart your machine.\n# Sublime Text 3\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add '{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.3;}'\n\n# Sublime Text 4\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add '{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.4;}'\n\n# VS Code\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add '{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.microsoft.VSCode;}'\nA lot of places suggested right clicking the file, selecting “Get Info,” and changing the “Open With” setting for all files of that type.\n\nI tried that at first, but its time consuming when you work with lots of different file types. And it doesn’t work at all for hidden files like .htaccess and .gitignore.\n\nThe command line trick works for all text files across the whole system, including hidden files, and I never have to think about it again.",
      "date_published": "2022-01-05T15:30:00.000Z",
      "date_modified": "2022-01-05T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "4d2c7d0cf04a432d8e239d06d788826628248fb942cc9bfe3559404f919c7edc.html"
      }
    },
    {
      "id": "https://gomakethings.com/add-a-service-worker-to-your-site-this-year/",
      "url": "https://gomakethings.com/add-a-service-worker-to-your-site-this-year/",
      "title": "Add a service worker to your site this year",
      "summary": "Last week, I wrote an article for CSS Tricks on the one thing I wish everyone would do to make the web better in 2022.\n One of the best things you can do for your website in 2022 is add a service worker, if you don’t have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.",
      "content_html": "<p>Last week, I wrote <a href=\"https://css-tricks.com/add-a-service-worker-to-your-site/\">an article for CSS Tricks on the one thing I wish everyone would do to make the web better in 2022</a>.</p>\n\n<blockquote>\n<p>One of the best things you can do for your website in 2022 is add a service worker, if you don’t have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.</p>\n</blockquote>\n\n<p>The article includes step-by-step instructions for getting a basic service worker setup, and links to additional resources if you want to dig deeper.</p>\n\n<p><a href=\"https://css-tricks.com/add-a-service-worker-to-your-site/\">Read the whole thing on CSS Tricks.</a></p>",
      "content_text": "Last week, I wrote an article for CSS Tricks on the one thing I wish everyone would do to make the web better in 2022.\n\n\nOne of the best things you can do for your website in 2022 is add a service worker, if you don’t have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.\n\n\nThe article includes step-by-step instructions for getting a basic service worker setup, and links to additional resources if you want to dig deeper.\n\nRead the whole thing on CSS Tricks.",
      "date_published": "2022-01-04T15:30:00.000Z",
      "date_modified": "2022-01-04T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "a040eff02fe94747d36f083f3284e4d220d4248158947c091a671385d217b613.html"
      }
    },
    {
      "id": "https://gomakethings.com/can-you-do-me-a-favor/",
      "url": "https://gomakethings.com/can-you-do-me-a-favor/",
      "title": "Can you do me a favor?",
      "summary": "A lot of folks don’t know this, but I have a day job.\nMy JavaScript education business is actually a side-hustle. It’s a pretty successful one, but not enough to be my full-time thing… yet.\nI’d like to make 2022 the year that changes, but I need your help.\nTo make my JS education work fully self-sustaining, I need to reach more people. If you’ve enjoyed learning from me, here are some specific ways you can help…",
      "content_html": "<p>A lot of folks don&rsquo;t know this, but I have a day job.</p>\n\n<p><a href=\"https://gomakethings.com/resources\">My JavaScript education business</a> is actually a side-hustle. It&rsquo;s a pretty successful one, but not enough to be my full-time thing&hellip; yet.</p>\n\n<p><strong>I&rsquo;d like to make 2022 the year that changes, but I need your help.</strong></p>\n\n<p>To make my JS education work fully self-sustaining, I need to reach more people. If you&rsquo;ve enjoyed learning from me, here are some specific ways you can help&hellip;</p>\n\n<ul>\n<li>Recommend <a href=\"https://gomakethings.com\">my newsletter</a> to anyone who you think might enjoy it.</li>\n<li>Ask your company to <a href=\"https://vanillajsacademy.com/teams/\">hire me to run a private workshop</a> or <a href=\"https://vanillajsguides.com/teams/\">purchase my courses for your team</a>.</li>\n<li>Suggest podcasts or live stream shows I should go on to reach new people.</li>\n</ul>\n\n<p>Thanks in advance, and Happy New Year!</p>",
      "content_text": "A lot of folks don’t know this, but I have a day job.\n\nMy JavaScript education business is actually a side-hustle. It’s a pretty successful one, but not enough to be my full-time thing… yet.\n\nI’d like to make 2022 the year that changes, but I need your help.\n\nTo make my JS education work fully self-sustaining, I need to reach more people. If you’ve enjoyed learning from me, here are some specific ways you can help…\n\n\nRecommend my newsletter to anyone who you think might enjoy it.\nAsk your company to hire me to run a private workshop or purchase my courses for your team.\nSuggest podcasts or live stream shows I should go on to reach new people.\n\n\nThanks in advance, and Happy New Year!",
      "date_published": "2022-01-03T15:30:00.000Z",
      "date_modified": "2022-01-03T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "aa3d8949fe703c1fbd011e659d67a9fd16d980487e804ee588e4fca828c7a611.html"
      }
    },
    {
      "id": "https://gomakethings.com/master-javascript-in-2022-and-save-a-bunch-of-money/",
      "url": "https://gomakethings.com/master-javascript-in-2022-and-save-a-bunch-of-money/",
      "title": "Master JavaScript in 2022 (and save a bunch of money)",
      "summary": "If you want to learn JavaScript in 2022 (or take your skills to the next level), all of my JavaScript learning resources are 40-percent off from now through New Year’s Day.\n If you prefer self-paced learning, my video courses and ebooks are a great choice. You’ll learn the ins-and-outs of a topic in about an hour. For a more deep and immersive experience, a new session of my workshop series starts in January.",
      "content_html": "<p>If you want to learn JavaScript in 2022 (or take your skills to the next level), <strong><a href=\"https://gomakethings.com/resources\">all of my JavaScript learning resources</a> are 40-percent off from now through New Year&rsquo;s Day.</strong></p>\n\n<ul>\n<li>If you prefer self-paced learning, my <strong><a href=\"https://vanillajsguides.com\">video courses and ebooks</a></strong> are a great choice. You&rsquo;ll learn the ins-and-outs of a topic in about an hour.</li>\n<li>For a more deep and immersive experience, <strong><a href=\"https://vanillajsacademy.com\">a new session of my workshop series</a></strong> starts in January. You&rsquo;ll work on a series of projects that build on each other, connect with other learners, and get to interact with me directly on Slack and during video office hours.</li>\n</ul>\n\n<p><strong>You’ll also get $436 in free bonuses if you register for Academy or purchase one of the pocket guide bundles (in ebook format, video series, or both).</strong></p>\n\n<ul>\n<li>Watch me live-code vanilla JS projects with the Vanilla JS Live-Code Series. Follow along, try it yourself first, or dig into the completed source code for over a dozen projects. <em>Valued at $239.</em></li>\n<li>Get hands-on learning with real projects with the Project Bundle. You get starter templates, helpful tips and resources, and step-by-step tutorials. <em>Valued at $119.</em></li>\n<li>Learn how to build insanely fast WordPress sites Wicked Fast Websites. You’ll learn how to measure performance, reduce page weight, and make simple server optimizations. <em>Valued at $39.</em></li>\n<li>Learn how to write resumes that get seen by an actual human, navigate the interview process, and more with my Web Developer Career Guide. <em>Valued at $39.</em></li>\n</ul>\n\n<p>Let&rsquo;s make 2022 the year you take your JS skills to the next level!</p>",
      "content_text": "If you want to learn JavaScript in 2022 (or take your skills to the next level), all of my JavaScript learning resources are 40-percent off from now through New Year’s Day.\n\n\nIf you prefer self-paced learning, my video courses and ebooks are a great choice. You’ll learn the ins-and-outs of a topic in about an hour.\nFor a more deep and immersive experience, a new session of my workshop series starts in January. You’ll work on a series of projects that build on each other, connect with other learners, and get to interact with me directly on Slack and during video office hours.\n\n\nYou’ll also get $436 in free bonuses if you register for Academy or purchase one of the pocket guide bundles (in ebook format, video series, or both).\n\n\nWatch me live-code vanilla JS projects with the Vanilla JS Live-Code Series. Follow along, try it yourself first, or dig into the completed source code for over a dozen projects. Valued at $239.\nGet hands-on learning with real projects with the Project Bundle. You get starter templates, helpful tips and resources, and step-by-step tutorials. Valued at $119.\nLearn how to build insanely fast WordPress sites Wicked Fast Websites. You’ll learn how to measure performance, reduce page weight, and make simple server optimizations. Valued at $39.\nLearn how to write resumes that get seen by an actual human, navigate the interview process, and more with my Web Developer Career Guide. Valued at $39.\n\n\nLet’s make 2022 the year you take your JS skills to the next level!",
      "date_published": "2021-12-28T14:30:00.000Z",
      "date_modified": "2021-12-28T14:30:00.000Z",
      "_plugin": {
        "pageFilename": "11b9474968b42ea2e3035ae8c763ff46cf640fd962dcd46ab194dd3a793e068f.html"
      }
    },
    {
      "id": "https://gomakethings.com/the-stack-overflow-podcast/",
      "url": "https://gomakethings.com/the-stack-overflow-podcast/",
      "title": "The Stack Overflow podcast",
      "summary": "The other day, I had the pleasure of chatting with the Stack Overflow team about the challenges of learning how to code, and why focusing on the fundamentals is often (but not always) a good place to start.\nWe talked about the difficulty with knowing where to start, “the experts dilemma,” and more!\nYou can listen to our conversation here.",
      "content_html": "<p>The other day, I had the pleasure of <a href=\"https://stackoverflow.blog/2021/12/21/podcast-402-teaching-developers-about-the-most-lightweight-web-framework-around-vanillajs/?utm_source=twitter&amp;utm_medium=social&amp;utm_campaign=so-podcast&amp;utm_content=pod402\">chatting with the Stack Overflow team</a> about the challenges of learning how to code, and why focusing on the fundamentals is often (but not always) a good place to start.</p>\n\n<p>We talked about the difficulty with knowing where to start, &ldquo;the experts dilemma,&rdquo; and more!</p>\n\n<p><a href=\"https://stackoverflow.blog/2021/12/21/podcast-402-teaching-developers-about-the-most-lightweight-web-framework-around-vanillajs/?utm_source=twitter&amp;utm_medium=social&amp;utm_campaign=so-podcast&amp;utm_content=pod402\">You can listen to our conversation here.</a></p>",
      "content_text": "The other day, I had the pleasure of chatting with the Stack Overflow team about the challenges of learning how to code, and why focusing on the fundamentals is often (but not always) a good place to start.\n\nWe talked about the difficulty with knowing where to start, “the experts dilemma,” and more!\n\nYou can listen to our conversation here.",
      "date_published": "2021-12-22T15:30:00.000Z",
      "date_modified": "2021-12-22T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "f206b3d34853a9f9bdc7ebf282d6eb3e11da5354a8e7b767764563c71cd079ac.html"
      }
    }
  ],
  "_plugin": {
    "rawFeed": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\"\n\txmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n\txmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n\txmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n\txmlns:atom=\"http://www.w3.org/2005/Atom\"\n\txmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n\txmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\"\n>\n\t<channel>\n\t\t<title>Go Make Things</title>\n\t\t<atom:link href=\"https://gomakethings.com/feed/\" rel=\"self\" type=\"application/rss+xml\" />\n\t\t<link>https://gomakethings.com</link>\n\t\t<description>A simpler, more resilient way to make things for the web.</description>\n\t\t<lastBuildDate>Sun, 14 Jan 2018 21:38:44 -0500</lastBuildDate>\n\t\t<language>en-us</language>\n\t\t<sy:updatePeriod>hourly</sy:updatePeriod>\n\t\t<sy:updateFrequency>1</sy:updateFrequency>\n\t\t<generator>Hugo -- gohugo.io</generator>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>JavaScript is weird</title>\n\t\t\t\t<link>https://gomakethings.com/javascript-is-weird/</link>\n\t\t\t\t<pubDate>Thu, 03 Mar 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/javascript-is-weird/</guid>\n\t\t\t\t<description><![CDATA[ Last week, Ryan Cavanaugh, the engineering lead for Typescript, tweeted about a weird JS performance quirk.\nImagine an array of objects. Each object has a val property, with a numeric value.\nlet arr = [ {val: 1}, {val: 42}, {val: 24} ];  As a test, Ryan created a function that adds the val property for each item in the array together to get the sum.\nfunction sum (arr) { let acc = 0; for (let i = 0; i &lt; arr.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ <p>Last week, <a href=\"https://twitter.com/SeaRyanC/status/1496273922714902528\">Ryan Cavanaugh, the engineering lead for Typescript, tweeted about a weird JS performance quirk</a>.</p>\n\n<p>Imagine an array of objects. Each object has a <code>val</code> property, with a numeric value.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">{</span><span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n\t<span class=\"p\">{</span><span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">42</span><span class=\"p\">},</span>\n\t<span class=\"p\">{</span><span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">24</span><span class=\"p\">}</span>\n<span class=\"p\">];</span>\n</code></pre></div>\n<p>As a test, Ryan created a function that adds the <code>val</code> property for each item in the array together to get the sum.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">sum</span> <span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">let</span> <span class=\"nx\">acc</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">arr</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"nx\">acc</span> <span class=\"o\">+=</span> <span class=\"nx\">arr</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">val</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">acc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Next, he created two arrays, each with 100 million identical objects (<code>[{val: 1}, ...]</code>). Then, he added some bonus items to each array.</p>\n\n<blockquote>\n<p><code>array1</code> gets uniform items, but <code>array2</code> elements get some other properties too</p>\n</blockquote>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">array1</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"p\">});</span>\n\n<span class=\"nx\">array2</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"nx\">d</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">});</span>\n</code></pre></div>\n<p>Finally, he ran some performance tests. He passed each one into the <code>sum()</code> function five times, and calculated how long in milliseconds it took to complete the operation.</p>\n\n<p>The results were&hellip; bonkers!</p>\n\n<ol>\n<li>With <code>array1</code>, the <code>sum()</code> function got faster each time it ran, ultimately running twice as fast on the fifth pass as on the first.</li>\n<li>With <code>array2</code>, the <code>sum()</code> function got <em>slower</em> each time it ran, ultimately running <em>six times slower (!!!)</em> on the fifth pass as on the first.</li>\n<li>When Ryan ran <code>sum()</code> with <code>array1</code> again <em>after</em> running it with <code>array2</code>, it ran just as slow as <code>array2</code> did.</li>\n</ol>\n\n<p>Ryan notes&hellip;</p>\n\n<blockquote>\n<p>When sum hit the different objects at the end of the array, they were not the same shape as the rest, so the property access became &ldquo;megamorphic&rdquo; - not suitable for optimization.\n&hellip;</p>\n\n<p>This is despite the fact that every object to ever enter &lsquo;sum&rsquo; had &lsquo;val&rsquo; as its first property with type number, and that sum ever only looked at that property. Doesn&rsquo;t matter; the extra properties are different types and this 100% matters to the engine.</p>\n</blockquote>\n\n<p><a href=\"https://twitter.com/SeaRyanC/status/1496273922714902528\">Ryan has a bunch more insights in his Twitter thread.</a> I&rsquo;d strongly encourage you to go give it a read!</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>Progressive Enhancement, the New Hotness™</title>\n\t\t\t\t<link>https://gomakethings.com/progressive-enhancement-the-new-hotness/</link>\n\t\t\t\t<pubDate>Wed, 02 Mar 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/progressive-enhancement-the-new-hotness/</guid>\n\t\t\t\t<description><![CDATA[ Yesterday, my web friend Sara Soueidan tweeted out a poll&hellip;\n Do you use Progressive Enhancement (PE) to build your Web products? If you don’t, do you mind sharing the reason(s) why?\n A shocking 36.8 percent of respondents said they didn&rsquo;t know what progressive enhancement was! Another 13.5 percent said they don&rsquo;t use it.\nSo today, we&rsquo;re going to talk about Progressive Enhancement, the New Hotness™.\nLet&rsquo;s dig in!]]></description>\n\t\t\t\t<content:encoded><![CDATA[ \n\n<p>Yesterday, <a href=\"https://twitter.com/SaraSoueidan/status/1498655196347604993\">my web friend Sara Soueidan tweeted out a poll</a>&hellip;</p>\n\n<blockquote>\n<p>Do you use Progressive Enhancement (PE) to build your Web products? If you <em>don’t</em>, do you mind sharing the reason(s) why?</p>\n</blockquote>\n\n<p>A shocking 36.8 percent of respondents said they didn&rsquo;t know what progressive enhancement was! Another 13.5 percent said they don&rsquo;t use it.</p>\n\n<p>So today, we&rsquo;re going to talk about Progressive Enhancement, the New Hotness™.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"what-is-progressive-enhancement\">What is progressive enhancement?</h2>\n\n<p>Progressive enhancement means that you add functionality to the things you build in layers.</p>\n\n<p>All users, when possible, should get a basic &ldquo;minimum functionality&rdquo; as part of the HTML file. Then, you can progressively layer in enhancements through your CSS and JavaScript.</p>\n\n<p>If the CSS or JS fail, the user still gets a usable, albeit less flashy, experience.</p>\n\n<p>Progressive enhancement stands in contrast to the &ldquo;all or nothing&rdquo; approach you often see with modern websites, where if something fails, the user gets no experience at all.</p>\n\n<h2 id=\"an-example-of-progressive-enhancement\">An example of progressive enhancement</h2>\n\n<p>A good, simple example of progressive is a &ldquo;slide in navigation&rdquo; component, where the site navigation <em>slides in</em> from the side of the page when a hamburger icon is clicked.</p>\n\n<p>Let&rsquo;s imagine that by default the nav menu is hidden with some CSS. When the hamburger icon is clicked, a CSS class is added that shows it (probably will some animation). Clicking the hamburger again removes the class and hides it.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-css\" data-lang=\"css\"><span class=\"p\">#</span><span class=\"nn\">nav</span> <span class=\"p\">{</span>\n\t<span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">fixed</span><span class=\"p\">;</span>\n\t<span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">right</span><span class=\"p\">:</span> <span class=\"mi\">-10</span><span class=\"kt\">em</span><span class=\"p\">;</span>\n\t<span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">nav</span><span class=\"p\">.</span><span class=\"nc\">slide-in</span> <span class=\"p\">{</span>\n\t<span class=\"k\">right</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div>\n<p>What happens if the JavaScript file that powers the nav menu fails? Now, the user can&rsquo;t navigate the site.</p>\n\n<p>As an alternative, you could place the nav in the footer, and use an anchor link for the hamburger.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;#nav&#34;</span><span class=\"p\">&gt;</span>Menu<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span></code></pre></div>\n<p>When your JavaScript loads, you can add some classes and attributes to <em>progressively enhance</em> the menu from a simple &ldquo;anchor to the footer&rdquo; experience into a slide-in navigation.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">hamburger</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;[href=&#34;#nav&#34;]&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span> <span class=\"nx\">nav</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#nav&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Add a11y attribute to link\n</span><span class=\"c1\"></span><span class=\"nx\">hamburger</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"s1\">&#39;role&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;button&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Add &#34;component ready&#34; class to nav menu\n</span><span class=\"c1\"></span><span class=\"nx\">nav</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s1\">&#39;slider&#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Then, you make your CSS conditional on the inclusion of the <code>.slider</code> class (you probably don&rsquo;t need or want that much specificity).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-css\" data-lang=\"css\"><span class=\"p\">#</span><span class=\"nn\">nav</span><span class=\"p\">.</span><span class=\"nc\">slider</span> <span class=\"p\">{</span>\n\t<span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">fixed</span><span class=\"p\">;</span>\n\t<span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">right</span><span class=\"p\">:</span> <span class=\"mi\">-10</span><span class=\"kt\">em</span><span class=\"p\">;</span>\n\t<span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"kt\">em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">#</span><span class=\"nn\">nav</span><span class=\"p\">.</span><span class=\"nc\">slider</span><span class=\"p\">.</span><span class=\"nc\">slide-in</span> <span class=\"p\">{</span>\n\t<span class=\"k\">right</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div>\n<p>This ensures a baseline experience for everyone, and a nicer experience for people when nothing goes wrong.</p>\n\n<h2 id=\"why-isn-t-progressive-enhancement-more-popular\">Why isn&rsquo;t progressive enhancement more popular</h2>\n\n<p>There are a lot of myths about progressive enhancement.</p>\n\n<p>Many of them were popularized by JS library &ldquo;thought leaders&rdquo; as a way to dismiss legitimate feedback about the tools they were building.</p>\n\n<dl>\n<dt>Myth: PE is only for people who disable JS on purpose, and you shouldn&rsquo;t do that.</dt>\n<dd>JavaScript fails about 1 percent of the time. Most of those failures are not people deliberately turning it off (though there are valid reasons to do so). File errors cause JS failures. CDNs go down. Ad blockers flag a file incorrectly. Overzealous corporate firewalls block your file.</dd>\n<dt>Myth: PE is only for older browsers.</dt>\n<dd>All of those file errors? They happen in new browsers, too!</dd>\n<dt>Myth: PE is only for JavaScript.</dt>\n<dd>CSS enhancements can be treated as progressive enhancement, too. CSS files also fail to load sometimes, and modern features don&rsquo;t always work everywhere. Grid-based layouts? Progressive enhancement! A single column layout is the base experience. Animations? Progressive enhancement! Any styles at all? Progressive enhancement!</dd>\n<dt>Myth: PE is inherently more work.</dt>\n<dd>In the comments on Sara&rsquo;s poll, there&rsquo;s a lot of, &ldquo;progressive enhancement is a lot more work and clients won&rsquo;t pay for that.&rdquo; But it doesn&rsquo;t have to be! It can be just a little more work, or none at all, depending on how you structure your code!</dd>\n</dl>\n\n<h2 id=\"some-low-hanging-fruit-progressive-enhancement\">Some low-hanging fruit progressive enhancement</h2>\n\n<p>Here are some simple ways you can start to implement progressive enhancement.</p>\n\n<h3 id=\"treat-css-as-an-enhancement\">Treat CSS as an enhancement</h3>\n\n<p>Disable it on your site, then look at it. Is the HTML well structured? Is there any &ldquo;hidden by CSS&rdquo; junk that completely ruins the experience or is confusing? Can you still navigate around?</p>\n\n<h3 id=\"use-css-and-html-elements-that-provide-progressive-enhancement-out-of-the-box\">Use CSS and HTML elements that provide progressive enhancement out-of-the-box</h3>\n\n<p><a href=\"https://gomakethings.com/how-to-build-a-progressively-enhanced-accordion-component-with-vanilla-js/\">The <code>details</code> and <code>summary</code> elements create a disclosure component.</a></p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">details</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">summary</span><span class=\"p\">&gt;</span>Click Me<span class=\"p\">&lt;/</span><span class=\"nt\">summary</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Oh, hello there!<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">details</span><span class=\"p\">&gt;</span></code></pre></div>\n<p><details>\n    <summary>Click Me</summary>\n    <p>Oh, hello there!</p>\n</details></p>\n\n<p>In older browsers, you get a heading and always-visible content. In modern browsers, you get an expand-and-collapse component. Progressive enhancement is baked right in.</p>\n\n<p><a href=\"https://gomakethings.com/smooth-scrolling-links-with-only-css/\">The CSS <code>scroll-behavior</code> property lets you animate scrolling to anchor links.</a></p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-css\" data-lang=\"css\"><span class=\"c\">/**\n</span><span class=\"c\"> * Smooth scrolling on the whole document\n</span><span class=\"c\"> */</span>\n<span class=\"nt\">html</span> <span class=\"p\">{</span>\n\t<span class=\"n\">scroll-behavior</span><span class=\"p\">:</span> <span class=\"kc\">smooth</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">prefers-reduced-motion</span><span class=\"o\">:</span> <span class=\"nt\">reduce</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nt\">html</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">scroll-behavior</span><span class=\"p\">:</span> <span class=\"kc\">auto</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div>\n<p>In older and unsupported browsers (I&rsquo;m looking at you, Safari!), anchor links jump to the location. In modern browsers, you can a nice animated scroll effect. Progressive enhancement is baked right in!</p>\n\n<p>And, if someone has <em>prefers reduced motion</em>, an accessibility setting, enabled in their operating system, you can also disable it with a single line of CSS.</p>\n\n<h3 id=\"provide-fallback-loading-content\">Provide fallback/loading content</h3>\n\n<p>If you&rsquo;re pulling data in from an API, you can provide alternative content while you&rsquo;re waiting for it to load.</p>\n\n<p>For example, if you&rsquo;re using the GitHub API to get and render a list of your top repositories on Github, you might include a link to your GitHub profile as the default HTML.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;github&#34;</span><span class=\"p\">&gt;</span>\n\t<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;https://github.com/cferdinandi&#34;</span><span class=\"p\">&gt;</span>🐙🐱 View my Profile on GitHub<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span></code></pre></div>\n<p>When the API returns data, you can wipe the content out and replace it with dynamically rendered HTML.</p>\n\n<p>This works for any API-driven content that also provides an alternative view elsewhere, and takes about 15 seconds worth of effort to implement.</p>\n\n<h2 id=\"progressive-enhancement-is-for-everyone\">Progressive enhancement is for everyone</h2>\n\n<p>If you work in tech, you know that eventually things break. Sometimes its your fault. Sometimes things just go wrong.</p>\n\n<p>Progressive enhancement adds <a href=\"https://adactio.com/\">what Jeremy Keith calls &ldquo;fault tolerance.&rdquo;</a></p>\n\n<p>If you care about quality engineering, you want as much fault tolerance in the things you build as possible.</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>How to write good comments</title>\n\t\t\t\t<link>https://gomakethings.com/how-to-write-good-comments/</link>\n\t\t\t\t<pubDate>Tue, 01 Mar 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/how-to-write-good-comments/</guid>\n\t\t\t\t<description><![CDATA[ Dr. Kate Compton shared this delightful little one-sentence gem about how to write good comments on Twitter last week&hellip;\n Programming pro tip: In your comments, write what you did and why, record your level of petulance (REALLY) and the StackOverflow link that made you realize something\n She also shared a sample comment, which I&rsquo;ve converted to JSDoc style.\n/** * Copy into the local scope * NOTE: this has issues with scope for eval&#39;ing list comprehensions, which sucks * {@link https://stackoverflow.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ <p>Dr. Kate Compton shared <a href=\"https://twitter.com/GalaxyKate/status/1497733203611852803\">this delightful little one-sentence gem about how to write good comments</a> on Twitter last week&hellip;</p>\n\n<blockquote>\n<p>Programming pro tip: In your comments, write what you did and why, record your level of petulance (REALLY) and the StackOverflow link that made you realize something</p>\n</blockquote>\n\n<p>She also shared a sample comment, which I&rsquo;ve <a href=\"https://gomakethings.com/documenting-javascript/\">converted to JSDoc style</a>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * Copy into the local scope\n</span><span class=\"cm\"> * NOTE: this has issues with scope for eval&#39;ing list comprehensions, which sucks\n</span><span class=\"cm\"> * {@link https://stackoverflow.com/questions/45194934/eval-fails-in-list-comprehension}\n</span><span class=\"cm\"> */</span>\n</code></pre></div>\n<p>I love it!</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>Vanilla JS Projects</title>\n\t\t\t\t<link>https://gomakethings.com/vanilla-js-projects/</link>\n\t\t\t\t<pubDate>Mon, 28 Feb 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/vanilla-js-projects/</guid>\n\t\t\t\t<description><![CDATA[ If you need a break from everything going on right now, I just released Vanilla JS Projects, a collection of free self-paced JavaScript projects.\nEach project is broken up into 3-4 smaller mini-projects that build on each other. Each part includes a few short lessons and a template to get you started.\nDepending on your comfort level, you can&hellip;\n Do It Yourself (DIY). You can try to complete the project on your own, then come back and watch me explain my approach.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ <p>If you need a break from everything going on right now, I just released <a href=\"https://vanillajsprojects.com\">Vanilla JS Projects</a>, a collection of free self-paced JavaScript projects.</p>\n\n<p>Each project is broken up into 3-4 smaller mini-projects that build on each other. Each part includes a few short lessons and a template to get you started.</p>\n\n<p>Depending on your comfort level, you can&hellip;</p>\n\n<ol>\n<li><strong>Do It Yourself (DIY).</strong> You can try to complete the project on your own, then come back and watch me explain my approach.</li>\n<li><strong>Code Along.</strong> If you&rsquo;d prefer, you can code along with me as I walk through my solution.</li>\n</ol>\n\n<p>You can also mix-and-match approaches depending on how you feel about any particular project.</p>\n\n<p><strong>Grab your free vanilla JS Projects starter bundle at <a href=\"https://vanillajsprojects.com\">vanillaJSprojects.com</a>.</strong> And if you like it, I&rsquo;d be delighted if you shared with others.</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>Interview with a senior JavaScript developer in 2022</title>\n\t\t\t\t<link>https://gomakethings.com/interview-with-a-senior-javascript-developer-in-2022/</link>\n\t\t\t\t<pubDate>Thu, 24 Feb 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/interview-with-a-senior-javascript-developer-in-2022/</guid>\n\t\t\t\t<description><![CDATA[ Everything is terrible right now. If you need a break, this satirical interview with a JS developer in 2022 is one of the most painfully accurate and funny things I&rsquo;ve seen in a while.\n Some of my favorite quotes&hellip;\n &ldquo;Yea, we use React! Well, we actually use Preact. We actually use Svelte. We actually went back to vanilla JavaScript&hellip;&rdquo; &ldquo;At least you know it&rsquo;s bad&hellip;&rdquo; &ldquo;jQuery? What are you, 5?]]></description>\n\t\t\t\t<content:encoded><![CDATA[ <p>Everything is terrible right now. If you need a break, <a href=\"https://www.youtube.com/watch?v=Uo3cL4nrGOk\">this satirical interview with a JS developer in 2022</a> is one of the most painfully accurate and funny things I&rsquo;ve seen in a while.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/Uo3cL4nrGOk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<p>Some of my favorite quotes&hellip;</p>\n\n<ul>\n<li>&ldquo;Yea, we use React! Well, we actually use Preact. We actually use Svelte. We actually went back to vanilla JavaScript&hellip;&rdquo;</li>\n<li>&ldquo;At least you know it&rsquo;s bad&hellip;&rdquo;</li>\n<li>&ldquo;jQuery? What are you, 5? We use JJQuery.&rdquo;</li>\n<li>&ldquo;It&rsquo;s such a messy language. We use it for our website, desktop app, mobile app, the fridge, the Tesla&hellip;&rdquo;</li>\n</ul>\n\n<p>If you need a laugh amid the sea of awful, <a href=\"https://www.youtube.com/watch?v=Uo3cL4nrGOk\">take a few minutes to watch the whole thing</a>.</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>How to make MPAs that are as fast as SPAs</title>\n\t\t\t\t<link>https://gomakethings.com/how-to-make-mpas-that-are-as-fast-as-spas/</link>\n\t\t\t\t<pubDate>Wed, 23 Feb 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/how-to-make-mpas-that-are-as-fast-as-spas/</guid>\n\t\t\t\t<description><![CDATA[ Yesterday, I wrote about how SPAs were a mistake. Today, I want to talk about how you can build multi-page apps (or, you know, regular websites) that are as fast as SPAs.\nLet&rsquo;s dig in!\nA quick summary The sites and apps I build are absurdly fast. They load nearly instantly.\nEven on spotty 3G connections on the other side of the world, where many of my students live, things still load really quickly (like, 3 seconds or less fast).]]></description>\n\t\t\t\t<content:encoded><![CDATA[ \n\n<p>Yesterday, I wrote about how <a href=\"https://gomakethings.com/spas-were-a-mistake/\">SPAs were a mistake</a>. Today, I want to talk about how you can build multi-page apps (or, you know, regular websites) that are as fast as SPAs.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"a-quick-summary\">A quick summary</h2>\n\n<p>The sites and apps I build are absurdly fast. They load nearly instantly.</p>\n\n<p>Even on spotty 3G connections on the other side of the world, where many of my students live, things still load really quickly (like, 3 seconds or less fast). And I do it from cheap, shared, $5 a month hosting.</p>\n\n<p>Here&rsquo;s a quick high-level summary of what I do&hellip;</p>\n\n<ol>\n<li>Serve pre-rendered, mostly static HTML.</li>\n<li>Inline everything, including CSS and JavaScript.</li>\n<li>Use mostly platform-native JavaScript, and as little of it as possible.</li>\n<li>Minify and gzip all the things.</li>\n<li>Lean heavily on service workers.</li>\n</ol>\n\n<p>Lets take a closer look at each of these.</p>\n\n<h2 id=\"serve-pre-rendered-mostly-static-html\">Serve pre-rendered, mostly static HTML</h2>\n\n<p>All of my sites are powered by <a href=\"https://gomakethings.com/series/hugo-and-static-site-generators/\">Hugo, a static-site generator</a>.</p>\n\n<p>When you request any page from any of my sites, or from the courses portal that students have access to, my cheap, shared, $5-a-month server grabs an already-rendered HTML file and immediately sends it back.</p>\n\n<p>With the exception of the course portal, all of the content is already there, hard-coded into the page and ready to get displayed by your browser. It reduces the server response time dramatically, because the server barely has to do any work.</p>\n\n<p>With dynamically generated sites (powered by WordPress, PHP, Node, and so on), content from a database gets mashed together with template files in real time.</p>\n\n<p>Caching can help a lot with this, but flat HTML files are just so absurdly fast.</p>\n\n<h2 id=\"inline-everything-including-css-and-javascript\">Inline everything, including CSS and JavaScript</h2>\n\n<p>Severs respond to HTTP requests in 14kb chunks.</p>\n\n<p>If you have, for example, a 250kb image, 18 small packets of data will be sent one-at-a-time for it: 17 packets 14kb in size, plus one not-quite-12kb one.</p>\n\n<p>Each HTTP request adds a bit of latency to the rendering process, as browsers and servers do a little handshake dance with each other.</p>\n\n<p>Because my HTML, CSS, and JavaScript are all so small (more on that shortly), their combined weight is often under 14kb. Inlining everything into a single HTML file instead of using external CSS and JavaScript files means that everything the browser needs to start rendering gets sent in a single HTTP request.</p>\n\n<p>This dramatically reduces the <em>time to first render</em> for my sites.</p>\n\n<p>You request a page, you get back a single HTTP request, and the browser goes off and does its thing. <a href=\"https://gomakethings.com/inlining-literally-everything-for-better-performance/\">Here&rsquo;s a bit more detail about how I implement this.</a></p>\n\n<h2 id=\"use-mostly-platform-native-javascript-and-as-little-of-it-as-possible\">Use mostly platform-native JavaScript, and as little of it as possible</h2>\n\n<p>One of the ways I keep my combined HTML + CSS + JavaScript size so damn small is by using mostly platform-native JavaScript.</p>\n\n<p>The lack of dependencies means less code to ship and load in the browser. Over time, as modern JS and CSS have gotten more powerful, that footprint has gotten even smaller.</p>\n\n<p>I used to use a JS plugin for animating scrolling to anchor links. <a href=\"https://gomakethings.com/smooth-scrolling-links-with-only-css/\">CSS handles that with one line of code now.</a> I used to use a library for responsive iframe embeds. <a href=\"https://gomakethings.com/responsive-iframes-with-the-css-aspect-ratio-property/\">Modern CSS does the same thing in just three lines of code.</a></p>\n\n<p><a href=\"https://vanillajsguides.com/es-modules/\">I use ES modules to create tiny bundles of JS</a> that I can load only on the pages that need them. Modules let me reuse shared snippets across pages <em>without</em> having to copy/paste/repeat, which would be an unmaintainable nightmare.</p>\n\n<h2 id=\"minify-and-gzip-all-the-things\">Minify and gzip all the things</h2>\n\n<p>I tend to be very generous with <a href=\"https://gomakethings.com/documenting-javascript/\">inline documentation in my code</a>.</p>\n\n<p>It&rsquo;s really helpful when I go back and look at some code I wrote a while ago to have a bunch of comments explaining what it does and why it does it. But all of those comments add a bunch of weight.</p>\n\n<p>I <a href=\"https://gomakethings.com/do-you-need-build-tools/\">minify all of the code</a> that gets shipped in production. A third-party tools removes all of the comments and white space, and converts my verbose, easy-to-understand variable names into short one-letter versions that only robots understand.</p>\n\n<p>This reduces file size by 30 percent or more!</p>\n\n<p>I also <a href=\"https://gomakethings.com/wtf-is-gzipping-and-how-is-it-different-from-minification/\">have my server configured to gzip all-the-things</a>. The <code>.gzip</code> format is a compressed file format, a lot like <code>.zip</code>. It reduces the size of your files by, on average, 70 percent.</p>\n\n<p>The combination of minification and gzipping is what results in all of my HTML files being under 14kb.</p>\n\n<h2 id=\"lean-heavily-on-service-workers\">Lean heavily on service workers</h2>\n\n<p><a href=\"https://vanillajsguides.com/service-workers/\">Service workers are like magic pixie dust</a> on the sites I build.</p>\n\n<p>For my static websites, they add resilience. I cache HTML pages as the user browses. If they ever lose their connection, the cached pages are sent from the service worker instead of the network, so they can still use and access the site.</p>\n\n<p>I also cache my custom fonts, and any images, and always load those from the service worker cache, removing a bunch of network calls in the process. These assets load instantly after they&rsquo;re cached.</p>\n\n<p>The student portal, where learners access their <a href=\"https://vanillajsguides.com\">courses</a> and <a href=\"https://vanillajsacademy.com\">workshops</a>, is dynamically rendered with JavaScript. I make an API call to get their purchases, and render the content they have access to into the UI.</p>\n\n<p>Service workers cache those API calls for a short period of time, and load API responses from cache instead of the network.</p>\n\n<p>After that initial API call, all subsequent page loads are instant, just like a SPA would be! No, seriously. <a href=\"https://vimeo.com/680472206/85dab4e10d\">Here&rsquo;s a video I took of me navigating through the portal.</a></p>\n\n<iframe src=\"https://player.vimeo.com/video/680472206?h=85dab4e10d\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n\n<p>And, if the user loses their connection, the API call is cached and they can continue to use the site while offline!</p>\n\n<h2 id=\"mpas-ftw\">MPAs FTW!</h2>\n\n<p>Using a traditional &ldquo;just load separate HTML files&rdquo; approach to web development instead of using SPAs has allowed me to dramatically reduce the complexity of my development process, and provide a better and more resilient experience to my users.</p>\n\n<p>It&rsquo;s a no-brainer win-win solution. I&rsquo;d love to see a shift back to MPAs become the norm in our industry again!</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>SPAs were a mistake</title>\n\t\t\t\t<link>https://gomakethings.com/spas-were-a-mistake/</link>\n\t\t\t\t<pubDate>Tue, 22 Feb 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/spas-were-a-mistake/</guid>\n\t\t\t\t<description><![CDATA[ For years, a trend in our industry has been to build single-page apps, or SPAs.\nWith an SPA, the entire site or app lives in a single HTML file. After the initial load, everything about the app is handled with JavaScript. This is, in theory, supposed to result in web apps that feel as fast and snappy as native apps.\nToday, I want to explore why that&rsquo;s nonsense. Let&rsquo;s dig in!]]></description>\n\t\t\t\t<content:encoded><![CDATA[ \n\n<p>For years, a trend in our industry has been to build single-page apps, or SPAs.</p>\n\n<p>With an SPA, the entire site or app lives in a single HTML file. After the initial load, everything about the app is handled with JavaScript. This is, in theory, supposed to result in web apps that feel as fast and snappy as native apps.</p>\n\n<p>Today, I want to explore why that&rsquo;s nonsense. Let&rsquo;s dig in!</p>\n\n<h2 id=\"when-spas-make-sense\">When SPAs make sense</h2>\n\n<p>First, let me get this out of the way: there are a few narrow examples of where SPAs make sense and are the right choice.</p>\n\n<p>YouTube is a great example. Being able to keep a video playing while you explore other videos is fantastic. Same goes for audio websites like SoundCloud, where you can keep a song playing as you navigate around and explore other artists. So&hellip; media sites, really.</p>\n\n<p>Generally speaking, though, SPAs as an industry trend or &ldquo;best practice&rdquo; were mistake.</p>\n\n<h2 id=\"we-keep-reinventing-the-wheel\">We keep reinventing the wheel</h2>\n\n<p>Browsers give you a ton of stuff for free, built right in, out-of-the-box. SPAs break all that, and force you to recreate it yourself with JavaScript. Most developers do it wrong, and for the ones who do it right, it results in a ton of extra code to recreate features the browser already gave you for free.</p>\n\n<p>With an SPA, when someone clicks a link you need to&hellip;</p>\n\n<ol>\n<li>Determine if the link points to the current site or an external location.</li>\n<li>If it&rsquo;s the current site, match the URL path to content.</li>\n<li>If the content is API-driven, get it via a <code>fetch()</code> request.</li>\n<li><a href=\"https://gomakethings.com/how-to-replace-the-current-url-in-the-browsers-history-with-the-vanilla-js-replacestate-method/\">Update the URL path and browser history</a>, without triggering a page reload.</li>\n<li>Render the content onto the page.</li>\n<li>If there&rsquo;s an anchor link in the URL, scroll to the anchored element.</li>\n<li>Shift focus to either the top of the document, or the anchored element (most SPAs get this wrong).</li>\n<li>Announce the page load/content change to screen reader users (many SPAs also get this wrong).</li>\n<li>If any scripts you&rsquo;re running rely on a specific DOM structure, or are attached to specific elements, reinitialize them.</li>\n</ol>\n\n<p>You also need to detect when the users clicks the browser&rsquo;s forward/backward buttons, and repeat most of the steps above in response.</p>\n\n<p>Pretty much all of this stuff is just done for you by the browser with a traditional MPA/website. Some of it is easy. Some of it is complicated and nuanced, or easy to get wrong, or easy to forget. All of it adds a lot of code to your site.</p>\n\n<p>And as a result, we build things that are fragile and easily broken. We get the &ldquo;improved user experience&rdquo; that led us down this path when all of the stars line up perfectly, and a bunch of edge case situations where the UX is much, much worse.</p>\n\n<p>SPAs were a mistake. Tomorrow, I&rsquo;ll show you how we can build MPAs that are just as performant as SPAs, with less complexity and fragility.</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t</channel>\n</rss>"
  },
  "description": "A simpler, more resilient way to make things for the web.",
  "home_page_url": "https://gomakethings.com",
  "_ext": {
    "date_published": "2022-03-03T15:30:00.000Z",
    "date_modified": "2018-01-15T02:38:44.000Z"
  }
}