{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Go Make Things",
  "feed_url": "https://gomakethings.com/feed/index.xml",
  "items": [
    {
      "id": "https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/",
      "url": "https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/",
      "title": "What's the best way to loop over arrays and elements in JavaScript?",
      "summary": "JavaScript provides a handful of methods and techniques for looping over arrays and elements and doing things with them. So… which approach should you use, and why?\nToday, we’re going to look at the different ways you can loop over things with vanilla JS, and when and why to choose one over the other.\nLet’s dig in!\nAn example array For today’s article, lets use an array of sandwiches as an example.",
      "content_html": "<p>JavaScript provides a handful of methods and techniques for looping over arrays and elements and doing things with them. So&hellip; which approach should you use, and why?</p>\n\n<p>Today, we&rsquo;re going to look at the different ways you can loop over things with vanilla JS, and when and why to choose one over the other.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"an-example-array\">An example array</h2>\n\n<p>For today&rsquo;s article, lets use an array of <code>sandwiches</code> as an example.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">sandwiches</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;turkey&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tuna&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pb&amp;j&#39;</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>We&rsquo;ll loop over it and log each item to the console, but in a real site or application, you might want to manipulate the data in some way.</p>\n\n<h2 id=\"the-for-loop\">The <code>for</code> loop</h2>\n\n<p>You can use a <code>for</code> loop to iterate over arrays, NodeLists, and other array-like objects. This is the old-school way to loop over things.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs 0, &#34;turkey&#34;, 1, &#34;tuna&#34;, 2, &#34;ham&#34;, 3, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">sandwiches</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">);</span> <span class=\"c1\">// index\n</span><span class=\"c1\"></span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwiches</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]);</span> <span class=\"c1\">// value\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>In the first part of the loop, before the first semicolon, we set a counter variable (typically <code>i</code>, but it can be anything) to <code>0</code>.</li>\n<li>The second part, between the two semicolons, is the test we check against after each iteration of the loop. In this case, we want to make sure the counter value is less than the total number of items in our array. We do this by checking the <code>.length</code> of our array.</li>\n<li>Finally, after the second semicolon, we specify what to run after each loop. In this case, we&rsquo;re adding <code>1</code> to the value of <code>i</code> with <code>i++</code>.</li>\n</ul>\n\n<p>We can then use <code>i</code> to grab the current item in the loop from our array.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/WNZabyL?editors=1011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"the-for-of-loop\">The <code>for...of</code> loop</h2>\n\n<p>A more modern approach, you can use <code>for...of</code> to loop through <em>iterable objects</em>. That includes strings, arrays, and other array-like objects such as NodeLists, HTMLCollections, and HTMLFormControlsCollection, but <em>not</em> plain objects (<code>{}</code>).</p>\n\n<p>In a <code>for...of</code> loop, you define a <em>variable</em> to represent the current item <code>of</code> the iterable that you&rsquo;re looping over. Inside the <em>block</em> (the stuff between curly brackets), you can use that variable to reference the current item.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs &#34;turkey&#34;, &#34;tuna&#34;, &#34;ham&#34;, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"k\">of</span> <span class=\"nx\">sandwiches</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/LYzgEJW?editors=0011\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"skipping-and-ending-loops\">Skipping and ending loops</h2>\n\n<p>You can skip to the next item in a <code>for</code> or <code>for...of</code> loop using <code>continue</code>, or end the loop altogether with <code>break</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs &#34;turkey&#34;, &#34;tuna&#34;, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"k\">of</span> <span class=\"nx\">sandwiches</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Skip to the next item in the loop\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Logs &#34;turkey&#34;, &#34;tuna&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"k\">of</span> <span class=\"nx\">sandwiches</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Skip to the next item in the loop\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/eYGPmQN?editors=0011\">Here&rsquo;s a demo of <code>continue</code> and <code>break</code>.</a></p>\n\n<h2 id=\"the-array-foreach-and-nodelist-foreach-methods\">The <code>Array.forEach()</code> and <code>NodeList.forEach()</code> methods</h2>\n\n<p>The <code>Array.forEach()</code> and <code>NodeList.forEach()</code> methods provide a simpler way to iterate over arrays and NodeLists while still having access to the index.</p>\n\n<p>You pass a callback function into the <code>forEach()</code> method. The callback itself accepts three arguments: the current item in the loop, the index of the current item in the loop, and the array itself. All three are optional, and you can name them anything you want.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs 0, &#34;turkey&#34;, 1, &#34;tuna&#34;, 2, &#34;ham&#34;, 3, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">sandwiches</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">);</span>    <span class=\"c1\">// index\n</span><span class=\"c1\"></span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span> <span class=\"c1\">// value\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/wvrYBOR?editors=0011\">Here&rsquo;s a demo of the <code>Array.forEach()</code> method.</a></p>\n\n<p>Unlike with <code>for</code> and <code>for...of</code> loops, you can&rsquo;t end a <code>forEach()</code> callback function before it&rsquo;s looped through all items. You can <code>return</code> to end the current loop (like you would with <code>continue</code>), but there&rsquo;s no way to <code>break</code> the loop.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Skip &#34;ham&#34;\n</span><span class=\"c1\">// logs &#34;turkey&#34;, &#34;tuna&#34;, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">sandwiches</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/ExwdaJg?editors=0011\">Here&rsquo;s a demo of skipping items in an <code>Array.forEach()</code> loop.</a></p>\n\n<h2 id=\"which-method-should-you-use-and-why\">Which method should you use, and why?</h2>\n\n<p>In most cases, most of the time, I use a <code>for...of</code> loop. It&rsquo;s simple and straightforward, and easy to type.</p>\n\n<p>There are a few situational exceptions to that, however&hellip;</p>\n\n<ol>\n<li>If I need the index of the item, I&rsquo;ll use the <code>Array.forEach()</code> or <code>NodeList.forEach()</code> method.</li>\n<li>If I need the index <em>and</em> want to end the loop early once a condition is met, I&rsquo;ll use a <code>for</code> loop.</li>\n</ol>\n\n<p>I try to avoid <code>for</code> loops unless there&rsquo;s a compelling reason to use them. They&rsquo;re hard to read. They&rsquo;re hard to write. They&rsquo;re just messy.</p>\n\n<p>The humble <code>for...of</code> loop is the real workhorse of my code bases!</p>",
      "content_text": "JavaScript provides a handful of methods and techniques for looping over arrays and elements and doing things with them. So… which approach should you use, and why?\n\nToday, we’re going to look at the different ways you can loop over things with vanilla JS, and when and why to choose one over the other.\n\nLet’s dig in!\n\nAn example array\n\nFor today’s article, lets use an array of sandwiches as an example.\nlet sandwiches = ['turkey', 'tuna', 'ham', 'pb&j'];\n\nWe’ll loop over it and log each item to the console, but in a real site or application, you might want to manipulate the data in some way.\n\nThe for loop\n\nYou can use a for loop to iterate over arrays, NodeLists, and other array-like objects. This is the old-school way to loop over things.\n// logs 0, \"turkey\", 1, \"tuna\", 2, \"ham\", 3, \"pb&j\"\nfor (let i = 0; i < sandwiches.length; i++) {\n\tconsole.log(i); // index\n\tconsole.log(sandwiches[i]); // value\n}\n\n\nIn the first part of the loop, before the first semicolon, we set a counter variable (typically i, but it can be anything) to 0.\nThe second part, between the two semicolons, is the test we check against after each iteration of the loop. In this case, we want to make sure the counter value is less than the total number of items in our array. We do this by checking the .length of our array.\nFinally, after the second semicolon, we specify what to run after each loop. In this case, we’re adding 1 to the value of i with i++.\n\n\nWe can then use i to grab the current item in the loop from our array.\n\nHere’s a demo.\n\nThe for...of loop\n\nA more modern approach, you can use for...of to loop through iterable objects. That includes strings, arrays, and other array-like objects such as NodeLists, HTMLCollections, and HTMLFormControlsCollection, but not plain objects ({}).\n\nIn a for...of loop, you define a variable to represent the current item of the iterable that you’re looping over. Inside the block (the stuff between curly brackets), you can use that variable to reference the current item.\n// logs \"turkey\", \"tuna\", \"ham\", \"pb&j\"\nfor (let sandwich of sandwiches) {\n\tconsole.log(sandwich);\n}\n\nHere’s another demo.\n\nSkipping and ending loops\n\nYou can skip to the next item in a for or for...of loop using continue, or end the loop altogether with break.\n// logs \"turkey\", \"tuna\", \"pb&j\"\nfor (let sandwich of sandwiches) {\n\n\t// Skip to the next item in the loop\n\tif (sandwich === 'ham') continue;\n\n\tconsole.log(sandwich);\n\n}\n\n// Logs \"turkey\", \"tuna\"\nfor (let sandwich of sandwiches) {\n\n\t// Skip to the next item in the loop\n\tif (sandwich === 'ham') break;\n\n\tconsole.log(sandwich);\n\n}\n\nHere’s a demo of continue and break.\n\nThe Array.forEach() and NodeList.forEach() methods\n\nThe Array.forEach() and NodeList.forEach() methods provide a simpler way to iterate over arrays and NodeLists while still having access to the index.\n\nYou pass a callback function into the forEach() method. The callback itself accepts three arguments: the current item in the loop, the index of the current item in the loop, and the array itself. All three are optional, and you can name them anything you want.\n// logs 0, \"turkey\", 1, \"tuna\", 2, \"ham\", 3, \"pb&j\"\nsandwiches.forEach(function (sandwich, index) {\n\tconsole.log(index);    // index\n\tconsole.log(sandwich); // value\n});\n\nHere’s a demo of the Array.forEach() method.\n\nUnlike with for and for...of loops, you can’t end a forEach() callback function before it’s looped through all items. You can return to end the current loop (like you would with continue), but there’s no way to break the loop.\n// Skip \"ham\"\n// logs \"turkey\", \"tuna\", \"pb&j\"\nsandwiches.forEach(function (sandwich, index) {\n\tif (sandwich === 'ham') return;\n\tconsole.log(sandwich);\n});\n\nHere’s a demo of skipping items in an Array.forEach() loop.\n\nWhich method should you use, and why?\n\nIn most cases, most of the time, I use a for...of loop. It’s simple and straightforward, and easy to type.\n\nThere are a few situational exceptions to that, however…\n\n\nIf I need the index of the item, I’ll use the Array.forEach() or NodeList.forEach() method.\nIf I need the index and want to end the loop early once a condition is met, I’ll use a for loop.\n\n\nI try to avoid for loops unless there’s a compelling reason to use them. They’re hard to read. They’re hard to write. They’re just messy.\n\nThe humble for...of loop is the real workhorse of my code bases!",
      "date_published": "2022-01-10T15:30:00.000Z",
      "date_modified": "2022-01-10T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "36ac8b2553095b5b2761b849fdebef7af3e45abc83c8413009090193181ed5f1.html"
      }
    },
    {
      "id": "https://gomakethings.com/two-ways-to-clear-an-array-with-vanilla-javascript/",
      "url": "https://gomakethings.com/two-ways-to-clear-an-array-with-vanilla-javascript/",
      "title": "Two ways to clear an array with vanilla JavaScript",
      "summary": "Today, we’re going to look at two different ways to empty an array with JavaScript. Let’s dig in!\nReassigning the variable Let’s say you have an array of wizards, like this.\nlet wizards = ['Gandalf', 'Radagast', 'Merlin'];  You want to completely wipe it out. The most common way to do this is to reassign the value of the wizards variable to an empty array ([]).\nwizards = [];  Here’s a demo.",
      "content_html": "<p>Today, we&rsquo;re going to look at two different ways to empty an array with JavaScript. Let&rsquo;s dig in!</p>\n\n<h2 id=\"reassigning-the-variable\">Reassigning the variable</h2>\n\n<p>Let&rsquo;s say you have an array of wizards, like this.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Gandalf&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Radagast&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>You want to completely wipe it out. The most common way to do this is to reassign the value of the <code>wizards</code> variable to an empty array (<code>[]</code>).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/NWaBMqE?editors=0011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"setting-the-length-to-0\">Setting the <code>length</code> to <code>0</code></h2>\n\n<p>Another way to clear an array is to set the array&rsquo;s <code>length</code> property to <code>0</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/PoJBeNa?editors=0011\">Here&rsquo;s another demo.</a></p>\n\n<p>(<em><a href=\"https://twitter.com/KittyGiraudel/status/1479393765844520960?s=20\">Thanks to Kitty Giraudel for this tip.</a></em>)</p>\n\n<h2 id=\"why-would-you-set-the-length-instead-of-reassigning-the-variable\">Why would you set the <code>length</code> instead of reassigning the variable?</h2>\n\n<p>In most situations, reassigning the variable to an empty array is the better choice. It&rsquo;s shorter and more explicit than adjusting the <code>length</code> property.</p>\n\n<p>But sometimes, you have an array that&rsquo;s <em>assigned by reference</em>, and you want to keep them linked.</p>\n\n<p>Here, I have my array of <code>wizards</code>. I also have an <code>alsoWizards</code> variable, and I set its value to the <code>wizards</code> array. The <code>alsoWizards</code> array is <em>not</em> a copy of <code>wizards</code>. It references the original array.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Gandalf&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Radagast&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">];</span>\n<span class=\"kd\">let</span> <span class=\"nx\">alsoWizards</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>If I reassign the value of <code>wizards</code>, the <code>alsoWizards</code> variable still points to the original array that was assigned to it.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Clear the array\n</span><span class=\"c1\"></span><span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\n<span class=\"c1\">// logs []\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wizards</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// logs [&#34;Gandalf&#34;, &#34;Radagast&#34;, &#34;Merlin&#34;]\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">alsoWizards</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/QWqBryY?editors=0011\">You can see it in action here.</a></p>\n\n<p>If I instead set the <code>length</code> of <code>wizards</code> to <code>0</code>, the <code>alsoWizards</code> variable is also an empty array, because the array that <code>wizards</code> points to has not changed.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Clear the array\n</span><span class=\"c1\"></span><span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// logs []\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wizards</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// logs []\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">alsoWizards</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/RwLBypQ?editors=0011\">Here&rsquo;s one last demo.</a></p>",
      "content_text": "Today, we’re going to look at two different ways to empty an array with JavaScript. Let’s dig in!\n\nReassigning the variable\n\nLet’s say you have an array of wizards, like this.\nlet wizards = ['Gandalf', 'Radagast', 'Merlin'];\n\nYou want to completely wipe it out. The most common way to do this is to reassign the value of the wizards variable to an empty array ([]).\nwizards = [];\n\nHere’s a demo.\n\nSetting the length to 0\n\nAnother way to clear an array is to set the array’s length property to 0.\nwizards.length = 0;\n\nHere’s another demo.\n\n(Thanks to Kitty Giraudel for this tip.)\n\nWhy would you set the length instead of reassigning the variable?\n\nIn most situations, reassigning the variable to an empty array is the better choice. It’s shorter and more explicit than adjusting the length property.\n\nBut sometimes, you have an array that’s assigned by reference, and you want to keep them linked.\n\nHere, I have my array of wizards. I also have an alsoWizards variable, and I set its value to the wizards array. The alsoWizards array is not a copy of wizards. It references the original array.\nlet wizards = ['Gandalf', 'Radagast', 'Merlin'];\nlet alsoWizards = wizards;\n\nIf I reassign the value of wizards, the alsoWizards variable still points to the original array that was assigned to it.\n// Clear the array\nwizards = [];\n\n// logs []\nconsole.log(wizards);\n\n// logs [\"Gandalf\", \"Radagast\", \"Merlin\"]\nconsole.log(alsoWizards);\n\nYou can see it in action here.\n\nIf I instead set the length of wizards to 0, the alsoWizards variable is also an empty array, because the array that wizards points to has not changed.\n// Clear the array\nwizards.length = 0;\n\n// logs []\nconsole.log(wizards);\n\n// logs []\nconsole.log(alsoWizards);\n\nHere’s one last demo.",
      "date_published": "2022-01-07T15:30:00.000Z",
      "date_modified": "2022-01-07T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "029707516301d8cf38ff3817e866bf3113d61ce236febfa32b4a7a9ab59fb222.html"
      }
    },
    {
      "id": "https://gomakethings.com/30-day-beginner-html-and-css-with-bree-hall/",
      "url": "https://gomakethings.com/30-day-beginner-html-and-css-with-bree-hall/",
      "title": "30 day beginner HTML and CSS with Bree Hall",
      "summary": "I focus a lot on JavaScript here, and I often get asked if I have any recommendations on where to learn HTML and CSS basics.\nToday, I wanted to share a cool new project from Bree Hall: 30 Day Beginner HTML & CSS Coding Calendar. Bree explains how it works in this video.\n  This 30 day calendar will take you on a journey of learning, understanding, and practicing the fundamentals of HTML and CSS through free videos, practice exercises, and games that can be found online.",
      "content_html": "<p>I focus a lot on JavaScript here, and I often get asked if I have any recommendations on where to learn HTML and CSS basics.</p>\n\n<p>Today, I wanted to share a cool new project from Bree Hall: <a href=\"https://github.com/breehall/30-Day-HTML-CSS-Coding-Calendar\">30 Day Beginner HTML &amp; CSS Coding Calendar</a>. Bree explains <a href=\"https://www.youtube.com/watch?v=HDssvUHgpYk\">how it works in this video</a>.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/HDssvUHgpYk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<blockquote>\n<p>This 30 day calendar will take you on a journey of learning, understanding, and practicing the fundamentals of HTML and CSS through free videos, practice exercises, and games that can be found online.</p>\n\n<p>I recommend this coding calendar to anyone who is interested in pursuing a career in development, and anyone who is on the fence and just wants to test the waters. The technical and coding resources on this calendar have been created by talented minds and are absolutely free to use! I do not own them, but they’re always my go to resources for new developers. Links to all resources can be found below.</p>\n</blockquote>\n\n<p>Bree is an amazing, supportive teacher. You can <a href=\"https://www.youtube.com/c/breehall\">subscribe to her YouTube channel</a> or <a href=\"https://twitter.com/bytesofbree\">follow her on Twitter</a> for lots of frontend goodness.</p>",
      "content_text": "I focus a lot on JavaScript here, and I often get asked if I have any recommendations on where to learn HTML and CSS basics.\n\nToday, I wanted to share a cool new project from Bree Hall: 30 Day Beginner HTML & CSS Coding Calendar. Bree explains how it works in this video.\n\n\n\n\nThis 30 day calendar will take you on a journey of learning, understanding, and practicing the fundamentals of HTML and CSS through free videos, practice exercises, and games that can be found online.\n\nI recommend this coding calendar to anyone who is interested in pursuing a career in development, and anyone who is on the fence and just wants to test the waters. The technical and coding resources on this calendar have been created by talented minds and are absolutely free to use! I do not own them, but they’re always my go to resources for new developers. Links to all resources can be found below.\n\n\nBree is an amazing, supportive teacher. You can subscribe to her YouTube channel or follow her on Twitter for lots of frontend goodness.",
      "date_published": "2022-01-06T15:30:00.000Z",
      "date_modified": "2022-01-06T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "55000cdd9eb348d122689b4323afe6a3c67bf65cb567e52086122a58547ceee2.html"
      }
    },
    {
      "id": "https://gomakethings.com/changing-the-default-text-editor-on-macos/",
      "url": "https://gomakethings.com/changing-the-default-text-editor-on-macos/",
      "title": "Changing the default text editor on macOS",
      "summary": "I’ve been using the same computer for almost a decade, but recently upgraded my computer.\nBy default, macOS uses Apple’s TextEdit app for any text file, and it’s pretty bad. Years ago, on my old machine, I setup Sublime to be my default editor for everything, but couldn’t remember how I did.\nI eventually stumbled onto a thread on StackExchange with a working solution. I wanted to document it here so I wouldn’t forget again next time.",
      "content_html": "<p>I&rsquo;ve been using the same computer for almost a decade, but recently upgraded my computer.</p>\n\n<p>By default, macOS uses Apple&rsquo;s TextEdit app for any text file, and it&rsquo;s pretty bad. Years ago, on my old machine, I setup Sublime to be my default editor for everything, but couldn&rsquo;t remember how I did.</p>\n\n<p>I eventually stumbled onto <a href=\"https://apple.stackexchange.com/questions/123833/replace-text-edit-as-the-default-text-editor/123834#123834\">a thread on StackExchange with a working solution</a>. I wanted to document it here so I wouldn&rsquo;t forget again next time.</p>\n\n<p><em><strong>Just a heads up:</strong> this requires using the command line.</em></p>\n\n<p>In terminal, copy-and-paste the command from below that matches the text editor you want to use as your default. Then, press <code>return</code> to run it, and restart your machine.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"c1\"># Sublime Text 3</span>\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add <span class=\"s1\">&#39;{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.3;}&#39;</span>\n\n<span class=\"c1\"># Sublime Text 4</span>\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add <span class=\"s1\">&#39;{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.4;}&#39;</span>\n\n<span class=\"c1\"># VS Code</span>\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add <span class=\"s1\">&#39;{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.microsoft.VSCode;}&#39;</span></code></pre></div>\n<p>A lot of places suggested right clicking the file, selecting &ldquo;Get Info,&rdquo; and changing the &ldquo;Open With&rdquo; setting for all files of that type.</p>\n\n<p>I tried that at first, but its time consuming when you work with lots of different file types. And it doesn&rsquo;t work at all for hidden files like <code>.htaccess</code> and <code>.gitignore</code>.</p>\n\n<p>The command line trick works for all text files across the whole system, including hidden files, and I never have to think about it again.</p>",
      "content_text": "I’ve been using the same computer for almost a decade, but recently upgraded my computer.\n\nBy default, macOS uses Apple’s TextEdit app for any text file, and it’s pretty bad. Years ago, on my old machine, I setup Sublime to be my default editor for everything, but couldn’t remember how I did.\n\nI eventually stumbled onto a thread on StackExchange with a working solution. I wanted to document it here so I wouldn’t forget again next time.\n\nJust a heads up: this requires using the command line.\n\nIn terminal, copy-and-paste the command from below that matches the text editor you want to use as your default. Then, press return to run it, and restart your machine.\n# Sublime Text 3\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add '{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.3;}'\n\n# Sublime Text 4\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add '{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.4;}'\n\n# VS Code\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add '{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.microsoft.VSCode;}'\nA lot of places suggested right clicking the file, selecting “Get Info,” and changing the “Open With” setting for all files of that type.\n\nI tried that at first, but its time consuming when you work with lots of different file types. And it doesn’t work at all for hidden files like .htaccess and .gitignore.\n\nThe command line trick works for all text files across the whole system, including hidden files, and I never have to think about it again.",
      "date_published": "2022-01-05T15:30:00.000Z",
      "date_modified": "2022-01-05T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "4d2c7d0cf04a432d8e239d06d788826628248fb942cc9bfe3559404f919c7edc.html"
      }
    },
    {
      "id": "https://gomakethings.com/add-a-service-worker-to-your-site-this-year/",
      "url": "https://gomakethings.com/add-a-service-worker-to-your-site-this-year/",
      "title": "Add a service worker to your site this year",
      "summary": "Last week, I wrote an article for CSS Tricks on the one thing I wish everyone would do to make the web better in 2022.\n One of the best things you can do for your website in 2022 is add a service worker, if you don’t have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.",
      "content_html": "<p>Last week, I wrote <a href=\"https://css-tricks.com/add-a-service-worker-to-your-site/\">an article for CSS Tricks on the one thing I wish everyone would do to make the web better in 2022</a>.</p>\n\n<blockquote>\n<p>One of the best things you can do for your website in 2022 is add a service worker, if you don’t have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.</p>\n</blockquote>\n\n<p>The article includes step-by-step instructions for getting a basic service worker setup, and links to additional resources if you want to dig deeper.</p>\n\n<p><a href=\"https://css-tricks.com/add-a-service-worker-to-your-site/\">Read the whole thing on CSS Tricks.</a></p>",
      "content_text": "Last week, I wrote an article for CSS Tricks on the one thing I wish everyone would do to make the web better in 2022.\n\n\nOne of the best things you can do for your website in 2022 is add a service worker, if you don’t have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.\n\n\nThe article includes step-by-step instructions for getting a basic service worker setup, and links to additional resources if you want to dig deeper.\n\nRead the whole thing on CSS Tricks.",
      "date_published": "2022-01-04T15:30:00.000Z",
      "date_modified": "2022-01-04T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "a040eff02fe94747d36f083f3284e4d220d4248158947c091a671385d217b613.html"
      }
    },
    {
      "id": "https://gomakethings.com/can-you-do-me-a-favor/",
      "url": "https://gomakethings.com/can-you-do-me-a-favor/",
      "title": "Can you do me a favor?",
      "summary": "A lot of folks don’t know this, but I have a day job.\nMy JavaScript education business is actually a side-hustle. It’s a pretty successful one, but not enough to be my full-time thing… yet.\nI’d like to make 2022 the year that changes, but I need your help.\nTo make my JS education work fully self-sustaining, I need to reach more people. If you’ve enjoyed learning from me, here are some specific ways you can help…",
      "content_html": "<p>A lot of folks don&rsquo;t know this, but I have a day job.</p>\n\n<p><a href=\"https://gomakethings.com/resources\">My JavaScript education business</a> is actually a side-hustle. It&rsquo;s a pretty successful one, but not enough to be my full-time thing&hellip; yet.</p>\n\n<p><strong>I&rsquo;d like to make 2022 the year that changes, but I need your help.</strong></p>\n\n<p>To make my JS education work fully self-sustaining, I need to reach more people. If you&rsquo;ve enjoyed learning from me, here are some specific ways you can help&hellip;</p>\n\n<ul>\n<li>Recommend <a href=\"https://gomakethings.com\">my newsletter</a> to anyone who you think might enjoy it.</li>\n<li>Ask your company to <a href=\"https://vanillajsacademy.com/teams/\">hire me to run a private workshop</a> or <a href=\"https://vanillajsguides.com/teams/\">purchase my courses for your team</a>.</li>\n<li>Suggest podcasts or live stream shows I should go on to reach new people.</li>\n</ul>\n\n<p>Thanks in advance, and Happy New Year!</p>",
      "content_text": "A lot of folks don’t know this, but I have a day job.\n\nMy JavaScript education business is actually a side-hustle. It’s a pretty successful one, but not enough to be my full-time thing… yet.\n\nI’d like to make 2022 the year that changes, but I need your help.\n\nTo make my JS education work fully self-sustaining, I need to reach more people. If you’ve enjoyed learning from me, here are some specific ways you can help…\n\n\nRecommend my newsletter to anyone who you think might enjoy it.\nAsk your company to hire me to run a private workshop or purchase my courses for your team.\nSuggest podcasts or live stream shows I should go on to reach new people.\n\n\nThanks in advance, and Happy New Year!",
      "date_published": "2022-01-03T15:30:00.000Z",
      "date_modified": "2022-01-03T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "aa3d8949fe703c1fbd011e659d67a9fd16d980487e804ee588e4fca828c7a611.html"
      }
    },
    {
      "id": "https://gomakethings.com/master-javascript-in-2022-and-save-a-bunch-of-money/",
      "url": "https://gomakethings.com/master-javascript-in-2022-and-save-a-bunch-of-money/",
      "title": "Master JavaScript in 2022 (and save a bunch of money)",
      "summary": "If you want to learn JavaScript in 2022 (or take your skills to the next level), all of my JavaScript learning resources are 40-percent off from now through New Year’s Day.\n If you prefer self-paced learning, my video courses and ebooks are a great choice. You’ll learn the ins-and-outs of a topic in about an hour. For a more deep and immersive experience, a new session of my workshop series starts in January.",
      "content_html": "<p>If you want to learn JavaScript in 2022 (or take your skills to the next level), <strong><a href=\"https://gomakethings.com/resources\">all of my JavaScript learning resources</a> are 40-percent off from now through New Year&rsquo;s Day.</strong></p>\n\n<ul>\n<li>If you prefer self-paced learning, my <strong><a href=\"https://vanillajsguides.com\">video courses and ebooks</a></strong> are a great choice. You&rsquo;ll learn the ins-and-outs of a topic in about an hour.</li>\n<li>For a more deep and immersive experience, <strong><a href=\"https://vanillajsacademy.com\">a new session of my workshop series</a></strong> starts in January. You&rsquo;ll work on a series of projects that build on each other, connect with other learners, and get to interact with me directly on Slack and during video office hours.</li>\n</ul>\n\n<p><strong>You’ll also get $436 in free bonuses if you register for Academy or purchase one of the pocket guide bundles (in ebook format, video series, or both).</strong></p>\n\n<ul>\n<li>Watch me live-code vanilla JS projects with the Vanilla JS Live-Code Series. Follow along, try it yourself first, or dig into the completed source code for over a dozen projects. <em>Valued at $239.</em></li>\n<li>Get hands-on learning with real projects with the Project Bundle. You get starter templates, helpful tips and resources, and step-by-step tutorials. <em>Valued at $119.</em></li>\n<li>Learn how to build insanely fast WordPress sites Wicked Fast Websites. You’ll learn how to measure performance, reduce page weight, and make simple server optimizations. <em>Valued at $39.</em></li>\n<li>Learn how to write resumes that get seen by an actual human, navigate the interview process, and more with my Web Developer Career Guide. <em>Valued at $39.</em></li>\n</ul>\n\n<p>Let&rsquo;s make 2022 the year you take your JS skills to the next level!</p>",
      "content_text": "If you want to learn JavaScript in 2022 (or take your skills to the next level), all of my JavaScript learning resources are 40-percent off from now through New Year’s Day.\n\n\nIf you prefer self-paced learning, my video courses and ebooks are a great choice. You’ll learn the ins-and-outs of a topic in about an hour.\nFor a more deep and immersive experience, a new session of my workshop series starts in January. You’ll work on a series of projects that build on each other, connect with other learners, and get to interact with me directly on Slack and during video office hours.\n\n\nYou’ll also get $436 in free bonuses if you register for Academy or purchase one of the pocket guide bundles (in ebook format, video series, or both).\n\n\nWatch me live-code vanilla JS projects with the Vanilla JS Live-Code Series. Follow along, try it yourself first, or dig into the completed source code for over a dozen projects. Valued at $239.\nGet hands-on learning with real projects with the Project Bundle. You get starter templates, helpful tips and resources, and step-by-step tutorials. Valued at $119.\nLearn how to build insanely fast WordPress sites Wicked Fast Websites. You’ll learn how to measure performance, reduce page weight, and make simple server optimizations. Valued at $39.\nLearn how to write resumes that get seen by an actual human, navigate the interview process, and more with my Web Developer Career Guide. Valued at $39.\n\n\nLet’s make 2022 the year you take your JS skills to the next level!",
      "date_published": "2021-12-28T14:30:00.000Z",
      "date_modified": "2021-12-28T14:30:00.000Z",
      "_plugin": {
        "pageFilename": "11b9474968b42ea2e3035ae8c763ff46cf640fd962dcd46ab194dd3a793e068f.html"
      }
    },
    {
      "id": "https://gomakethings.com/the-stack-overflow-podcast/",
      "url": "https://gomakethings.com/the-stack-overflow-podcast/",
      "title": "The Stack Overflow podcast",
      "summary": "The other day, I had the pleasure of chatting with the Stack Overflow team about the challenges of learning how to code, and why focusing on the fundamentals is often (but not always) a good place to start.\nWe talked about the difficulty with knowing where to start, “the experts dilemma,” and more!\nYou can listen to our conversation here.",
      "content_html": "<p>The other day, I had the pleasure of <a href=\"https://stackoverflow.blog/2021/12/21/podcast-402-teaching-developers-about-the-most-lightweight-web-framework-around-vanillajs/?utm_source=twitter&amp;utm_medium=social&amp;utm_campaign=so-podcast&amp;utm_content=pod402\">chatting with the Stack Overflow team</a> about the challenges of learning how to code, and why focusing on the fundamentals is often (but not always) a good place to start.</p>\n\n<p>We talked about the difficulty with knowing where to start, &ldquo;the experts dilemma,&rdquo; and more!</p>\n\n<p><a href=\"https://stackoverflow.blog/2021/12/21/podcast-402-teaching-developers-about-the-most-lightweight-web-framework-around-vanillajs/?utm_source=twitter&amp;utm_medium=social&amp;utm_campaign=so-podcast&amp;utm_content=pod402\">You can listen to our conversation here.</a></p>",
      "content_text": "The other day, I had the pleasure of chatting with the Stack Overflow team about the challenges of learning how to code, and why focusing on the fundamentals is often (but not always) a good place to start.\n\nWe talked about the difficulty with knowing where to start, “the experts dilemma,” and more!\n\nYou can listen to our conversation here.",
      "date_published": "2021-12-22T15:30:00.000Z",
      "date_modified": "2021-12-22T15:30:00.000Z",
      "_plugin": {
        "pageFilename": "f206b3d34853a9f9bdc7ebf282d6eb3e11da5354a8e7b767764563c71cd079ac.html"
      }
    }
  ],
  "_plugin": {
    "rawFeed": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\"\n\txmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n\txmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n\txmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n\txmlns:atom=\"http://www.w3.org/2005/Atom\"\n\txmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n\txmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\"\n>\n\t<channel>\n\t\t<title>Go Make Things</title>\n\t\t<atom:link href=\"https://gomakethings.com/feed/\" rel=\"self\" type=\"application/rss+xml\" />\n\t\t<link>https://gomakethings.com</link>\n\t\t<description>A simpler, more resilient way to make things for the web.</description>\n\t\t<lastBuildDate>Sun, 14 Jan 2018 21:38:44 -0500</lastBuildDate>\n\t\t<language>en-us</language>\n\t\t<sy:updatePeriod>hourly</sy:updatePeriod>\n\t\t<sy:updateFrequency>1</sy:updateFrequency>\n\t\t<generator>Hugo -- gohugo.io</generator>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>What&#39;s the best way to loop over arrays and elements in JavaScript?</title>\n\t\t\t\t<link>https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/</link>\n\t\t\t\t<pubDate>Mon, 10 Jan 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/whats-the-best-way-to-loop-over-arrays-and-elements-in-javascript/</guid>\n\t\t\t\t<description><![CDATA[ JavaScript provides a handful of methods and techniques for looping over arrays and elements and doing things with them. So&hellip; which approach should you use, and why?\nToday, we&rsquo;re going to look at the different ways you can loop over things with vanilla JS, and when and why to choose one over the other.\nLet&rsquo;s dig in!\nAn example array For today&rsquo;s article, lets use an array of sandwiches as an example.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ \n\n<p>JavaScript provides a handful of methods and techniques for looping over arrays and elements and doing things with them. So&hellip; which approach should you use, and why?</p>\n\n<p>Today, we&rsquo;re going to look at the different ways you can loop over things with vanilla JS, and when and why to choose one over the other.</p>\n\n<p>Let&rsquo;s dig in!</p>\n\n<h2 id=\"an-example-array\">An example array</h2>\n\n<p>For today&rsquo;s article, lets use an array of <code>sandwiches</code> as an example.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">sandwiches</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;turkey&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tuna&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pb&amp;j&#39;</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>We&rsquo;ll loop over it and log each item to the console, but in a real site or application, you might want to manipulate the data in some way.</p>\n\n<h2 id=\"the-for-loop\">The <code>for</code> loop</h2>\n\n<p>You can use a <code>for</code> loop to iterate over arrays, NodeLists, and other array-like objects. This is the old-school way to loop over things.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs 0, &#34;turkey&#34;, 1, &#34;tuna&#34;, 2, &#34;ham&#34;, 3, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">sandwiches</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">);</span> <span class=\"c1\">// index\n</span><span class=\"c1\"></span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwiches</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]);</span> <span class=\"c1\">// value\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>In the first part of the loop, before the first semicolon, we set a counter variable (typically <code>i</code>, but it can be anything) to <code>0</code>.</li>\n<li>The second part, between the two semicolons, is the test we check against after each iteration of the loop. In this case, we want to make sure the counter value is less than the total number of items in our array. We do this by checking the <code>.length</code> of our array.</li>\n<li>Finally, after the second semicolon, we specify what to run after each loop. In this case, we&rsquo;re adding <code>1</code> to the value of <code>i</code> with <code>i++</code>.</li>\n</ul>\n\n<p>We can then use <code>i</code> to grab the current item in the loop from our array.</p>\n\n<p><a href=\"https://codepen.io/cferdinandi/pen/WNZabyL?editors=1011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"the-for-of-loop\">The <code>for...of</code> loop</h2>\n\n<p>A more modern approach, you can use <code>for...of</code> to loop through <em>iterable objects</em>. That includes strings, arrays, and other array-like objects such as NodeLists, HTMLCollections, and HTMLFormControlsCollection, but <em>not</em> plain objects (<code>{}</code>).</p>\n\n<p>In a <code>for...of</code> loop, you define a <em>variable</em> to represent the current item <code>of</code> the iterable that you&rsquo;re looping over. Inside the <em>block</em> (the stuff between curly brackets), you can use that variable to reference the current item.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs &#34;turkey&#34;, &#34;tuna&#34;, &#34;ham&#34;, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"k\">of</span> <span class=\"nx\">sandwiches</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/LYzgEJW?editors=0011\">Here&rsquo;s another demo.</a></p>\n\n<h2 id=\"skipping-and-ending-loops\">Skipping and ending loops</h2>\n\n<p>You can skip to the next item in a <code>for</code> or <code>for...of</code> loop using <code>continue</code>, or end the loop altogether with <code>break</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs &#34;turkey&#34;, &#34;tuna&#34;, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"k\">of</span> <span class=\"nx\">sandwiches</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Skip to the next item in the loop\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Logs &#34;turkey&#34;, &#34;tuna&#34;\n</span><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">sandwich</span> <span class=\"k\">of</span> <span class=\"nx\">sandwiches</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n\t<span class=\"c1\">// Skip to the next item in the loop\n</span><span class=\"c1\"></span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/eYGPmQN?editors=0011\">Here&rsquo;s a demo of <code>continue</code> and <code>break</code>.</a></p>\n\n<h2 id=\"the-array-foreach-and-nodelist-foreach-methods\">The <code>Array.forEach()</code> and <code>NodeList.forEach()</code> methods</h2>\n\n<p>The <code>Array.forEach()</code> and <code>NodeList.forEach()</code> methods provide a simpler way to iterate over arrays and NodeLists while still having access to the index.</p>\n\n<p>You pass a callback function into the <code>forEach()</code> method. The callback itself accepts three arguments: the current item in the loop, the index of the current item in the loop, and the array itself. All three are optional, and you can name them anything you want.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// logs 0, &#34;turkey&#34;, 1, &#34;tuna&#34;, 2, &#34;ham&#34;, 3, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">sandwiches</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">);</span>    <span class=\"c1\">// index\n</span><span class=\"c1\"></span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span> <span class=\"c1\">// value\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/wvrYBOR?editors=0011\">Here&rsquo;s a demo of the <code>Array.forEach()</code> method.</a></p>\n\n<p>Unlike with <code>for</code> and <code>for...of</code> loops, you can&rsquo;t end a <code>forEach()</code> callback function before it&rsquo;s looped through all items. You can <code>return</code> to end the current loop (like you would with <code>continue</code>), but there&rsquo;s no way to <code>break</code> the loop.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Skip &#34;ham&#34;\n</span><span class=\"c1\">// logs &#34;turkey&#34;, &#34;tuna&#34;, &#34;pb&amp;j&#34;\n</span><span class=\"c1\"></span><span class=\"nx\">sandwiches</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sandwich</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;ham&#39;</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sandwich</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/ExwdaJg?editors=0011\">Here&rsquo;s a demo of skipping items in an <code>Array.forEach()</code> loop.</a></p>\n\n<h2 id=\"which-method-should-you-use-and-why\">Which method should you use, and why?</h2>\n\n<p>In most cases, most of the time, I use a <code>for...of</code> loop. It&rsquo;s simple and straightforward, and easy to type.</p>\n\n<p>There are a few situational exceptions to that, however&hellip;</p>\n\n<ol>\n<li>If I need the index of the item, I&rsquo;ll use the <code>Array.forEach()</code> or <code>NodeList.forEach()</code> method.</li>\n<li>If I need the index <em>and</em> want to end the loop early once a condition is met, I&rsquo;ll use a <code>for</code> loop.</li>\n</ol>\n\n<p>I try to avoid <code>for</code> loops unless there&rsquo;s a compelling reason to use them. They&rsquo;re hard to read. They&rsquo;re hard to write. They&rsquo;re just messy.</p>\n\n<p>The humble <code>for...of</code> loop is the real workhorse of my code bases!</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>Two ways to clear an array with vanilla JavaScript</title>\n\t\t\t\t<link>https://gomakethings.com/two-ways-to-clear-an-array-with-vanilla-javascript/</link>\n\t\t\t\t<pubDate>Fri, 07 Jan 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/two-ways-to-clear-an-array-with-vanilla-javascript/</guid>\n\t\t\t\t<description><![CDATA[ Today, we&rsquo;re going to look at two different ways to empty an array with JavaScript. Let&rsquo;s dig in!\nReassigning the variable Let&rsquo;s say you have an array of wizards, like this.\nlet wizards = [&#39;Gandalf&#39;, &#39;Radagast&#39;, &#39;Merlin&#39;];  You want to completely wipe it out. The most common way to do this is to reassign the value of the wizards variable to an empty array ([]).\nwizards = [];  Here&rsquo;s a demo.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ \n\n<p>Today, we&rsquo;re going to look at two different ways to empty an array with JavaScript. Let&rsquo;s dig in!</p>\n\n<h2 id=\"reassigning-the-variable\">Reassigning the variable</h2>\n\n<p>Let&rsquo;s say you have an array of wizards, like this.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Gandalf&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Radagast&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>You want to completely wipe it out. The most common way to do this is to reassign the value of the <code>wizards</code> variable to an empty array (<code>[]</code>).</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/NWaBMqE?editors=0011\">Here&rsquo;s a demo.</a></p>\n\n<h2 id=\"setting-the-length-to-0\">Setting the <code>length</code> to <code>0</code></h2>\n\n<p>Another way to clear an array is to set the array&rsquo;s <code>length</code> property to <code>0</code>.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/PoJBeNa?editors=0011\">Here&rsquo;s another demo.</a></p>\n\n<p>(<em><a href=\"https://twitter.com/KittyGiraudel/status/1479393765844520960?s=20\">Thanks to Kitty Giraudel for this tip.</a></em>)</p>\n\n<h2 id=\"why-would-you-set-the-length-instead-of-reassigning-the-variable\">Why would you set the <code>length</code> instead of reassigning the variable?</h2>\n\n<p>In most situations, reassigning the variable to an empty array is the better choice. It&rsquo;s shorter and more explicit than adjusting the <code>length</code> property.</p>\n\n<p>But sometimes, you have an array that&rsquo;s <em>assigned by reference</em>, and you want to keep them linked.</p>\n\n<p>Here, I have my array of <code>wizards</code>. I also have an <code>alsoWizards</code> variable, and I set its value to the <code>wizards</code> array. The <code>alsoWizards</code> array is <em>not</em> a copy of <code>wizards</code>. It references the original array.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">let</span> <span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Gandalf&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Radagast&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Merlin&#39;</span><span class=\"p\">];</span>\n<span class=\"kd\">let</span> <span class=\"nx\">alsoWizards</span> <span class=\"o\">=</span> <span class=\"nx\">wizards</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>If I reassign the value of <code>wizards</code>, the <code>alsoWizards</code> variable still points to the original array that was assigned to it.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Clear the array\n</span><span class=\"c1\"></span><span class=\"nx\">wizards</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\n<span class=\"c1\">// logs []\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wizards</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// logs [&#34;Gandalf&#34;, &#34;Radagast&#34;, &#34;Merlin&#34;]\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">alsoWizards</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/QWqBryY?editors=0011\">You can see it in action here.</a></p>\n\n<p>If I instead set the <code>length</code> of <code>wizards</code> to <code>0</code>, the <code>alsoWizards</code> variable is also an empty array, because the array that <code>wizards</code> points to has not changed.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// Clear the array\n</span><span class=\"c1\"></span><span class=\"nx\">wizards</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// logs []\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">wizards</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// logs []\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">alsoWizards</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><a href=\"https://codepen.io/cferdinandi/pen/RwLBypQ?editors=0011\">Here&rsquo;s one last demo.</a></p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>30 day beginner HTML and CSS with Bree Hall</title>\n\t\t\t\t<link>https://gomakethings.com/30-day-beginner-html-and-css-with-bree-hall/</link>\n\t\t\t\t<pubDate>Thu, 06 Jan 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/30-day-beginner-html-and-css-with-bree-hall/</guid>\n\t\t\t\t<description><![CDATA[ I focus a lot on JavaScript here, and I often get asked if I have any recommendations on where to learn HTML and CSS basics.\nToday, I wanted to share a cool new project from Bree Hall: 30 Day Beginner HTML &amp; CSS Coding Calendar. Bree explains how it works in this video.\n  This 30 day calendar will take you on a journey of learning, understanding, and practicing the fundamentals of HTML and CSS through free videos, practice exercises, and games that can be found online.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ <p>I focus a lot on JavaScript here, and I often get asked if I have any recommendations on where to learn HTML and CSS basics.</p>\n\n<p>Today, I wanted to share a cool new project from Bree Hall: <a href=\"https://github.com/breehall/30-Day-HTML-CSS-Coding-Calendar\">30 Day Beginner HTML &amp; CSS Coding Calendar</a>. Bree explains <a href=\"https://www.youtube.com/watch?v=HDssvUHgpYk\">how it works in this video</a>.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/HDssvUHgpYk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<blockquote>\n<p>This 30 day calendar will take you on a journey of learning, understanding, and practicing the fundamentals of HTML and CSS through free videos, practice exercises, and games that can be found online.</p>\n\n<p>I recommend this coding calendar to anyone who is interested in pursuing a career in development, and anyone who is on the fence and just wants to test the waters. The technical and coding resources on this calendar have been created by talented minds and are absolutely free to use! I do not own them, but they’re always my go to resources for new developers. Links to all resources can be found below.</p>\n</blockquote>\n\n<p>Bree is an amazing, supportive teacher. You can <a href=\"https://www.youtube.com/c/breehall\">subscribe to her YouTube channel</a> or <a href=\"https://twitter.com/bytesofbree\">follow her on Twitter</a> for lots of frontend goodness.</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>Changing the default text editor on macOS</title>\n\t\t\t\t<link>https://gomakethings.com/changing-the-default-text-editor-on-macos/</link>\n\t\t\t\t<pubDate>Wed, 05 Jan 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/changing-the-default-text-editor-on-macos/</guid>\n\t\t\t\t<description><![CDATA[ I&rsquo;ve been using the same computer for almost a decade, but recently upgraded my computer.\nBy default, macOS uses Apple&rsquo;s TextEdit app for any text file, and it&rsquo;s pretty bad. Years ago, on my old machine, I setup Sublime to be my default editor for everything, but couldn&rsquo;t remember how I did.\nI eventually stumbled onto a thread on StackExchange with a working solution. I wanted to document it here so I wouldn&rsquo;t forget again next time.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ <p>I&rsquo;ve been using the same computer for almost a decade, but recently upgraded my computer.</p>\n\n<p>By default, macOS uses Apple&rsquo;s TextEdit app for any text file, and it&rsquo;s pretty bad. Years ago, on my old machine, I setup Sublime to be my default editor for everything, but couldn&rsquo;t remember how I did.</p>\n\n<p>I eventually stumbled onto <a href=\"https://apple.stackexchange.com/questions/123833/replace-text-edit-as-the-default-text-editor/123834#123834\">a thread on StackExchange with a working solution</a>. I wanted to document it here so I wouldn&rsquo;t forget again next time.</p>\n\n<p><em><strong>Just a heads up:</strong> this requires using the command line.</em></p>\n\n<p>In terminal, copy-and-paste the command from below that matches the text editor you want to use as your default. Then, press <code>return</code> to run it, and restart your machine.</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"c1\"># Sublime Text 3</span>\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add <span class=\"s1\">&#39;{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.3;}&#39;</span>\n\n<span class=\"c1\"># Sublime Text 4</span>\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add <span class=\"s1\">&#39;{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.sublimetext.4;}&#39;</span>\n\n<span class=\"c1\"># VS Code</span>\ndefaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add <span class=\"s1\">&#39;{LSHandlerContentType=public.plain-text;LSHandlerRoleAll=com.microsoft.VSCode;}&#39;</span></code></pre></div>\n<p>A lot of places suggested right clicking the file, selecting &ldquo;Get Info,&rdquo; and changing the &ldquo;Open With&rdquo; setting for all files of that type.</p>\n\n<p>I tried that at first, but its time consuming when you work with lots of different file types. And it doesn&rsquo;t work at all for hidden files like <code>.htaccess</code> and <code>.gitignore</code>.</p>\n\n<p>The command line trick works for all text files across the whole system, including hidden files, and I never have to think about it again.</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>Add a service worker to your site this year</title>\n\t\t\t\t<link>https://gomakethings.com/add-a-service-worker-to-your-site-this-year/</link>\n\t\t\t\t<pubDate>Tue, 04 Jan 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/add-a-service-worker-to-your-site-this-year/</guid>\n\t\t\t\t<description><![CDATA[ Last week, I wrote an article for CSS Tricks on the one thing I wish everyone would do to make the web better in 2022.\n One of the best things you can do for your website in 2022 is add a service worker, if you don’t have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ <p>Last week, I wrote <a href=\"https://css-tricks.com/add-a-service-worker-to-your-site/\">an article for CSS Tricks on the one thing I wish everyone would do to make the web better in 2022</a>.</p>\n\n<blockquote>\n<p>One of the best things you can do for your website in 2022 is add a service worker, if you don’t have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.</p>\n</blockquote>\n\n<p>The article includes step-by-step instructions for getting a basic service worker setup, and links to additional resources if you want to dig deeper.</p>\n\n<p><a href=\"https://css-tricks.com/add-a-service-worker-to-your-site/\">Read the whole thing on CSS Tricks.</a></p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>Can you do me a favor?</title>\n\t\t\t\t<link>https://gomakethings.com/can-you-do-me-a-favor/</link>\n\t\t\t\t<pubDate>Mon, 03 Jan 2022 10:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/can-you-do-me-a-favor/</guid>\n\t\t\t\t<description><![CDATA[ A lot of folks don&rsquo;t know this, but I have a day job.\nMy JavaScript education business is actually a side-hustle. It&rsquo;s a pretty successful one, but not enough to be my full-time thing&hellip; yet.\nI&rsquo;d like to make 2022 the year that changes, but I need your help.\nTo make my JS education work fully self-sustaining, I need to reach more people. If you&rsquo;ve enjoyed learning from me, here are some specific ways you can help&hellip;]]></description>\n\t\t\t\t<content:encoded><![CDATA[ <p>A lot of folks don&rsquo;t know this, but I have a day job.</p>\n\n<p><a href=\"https://gomakethings.com/resources\">My JavaScript education business</a> is actually a side-hustle. It&rsquo;s a pretty successful one, but not enough to be my full-time thing&hellip; yet.</p>\n\n<p><strong>I&rsquo;d like to make 2022 the year that changes, but I need your help.</strong></p>\n\n<p>To make my JS education work fully self-sustaining, I need to reach more people. If you&rsquo;ve enjoyed learning from me, here are some specific ways you can help&hellip;</p>\n\n<ul>\n<li>Recommend <a href=\"https://gomakethings.com\">my newsletter</a> to anyone who you think might enjoy it.</li>\n<li>Ask your company to <a href=\"https://vanillajsacademy.com/teams/\">hire me to run a private workshop</a> or <a href=\"https://vanillajsguides.com/teams/\">purchase my courses for your team</a>.</li>\n<li>Suggest podcasts or live stream shows I should go on to reach new people.</li>\n</ul>\n\n<p>Thanks in advance, and Happy New Year!</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t\t\t<item>\n\t\t\t\t<title>Master JavaScript in 2022 (and save a bunch of money)</title>\n\t\t\t\t<link>https://gomakethings.com/master-javascript-in-2022-and-save-a-bunch-of-money/</link>\n\t\t\t\t<pubDate>Tue, 28 Dec 2021 09:30:00 -0500</pubDate>\n\t\t\t\t<guid>https://gomakethings.com/master-javascript-in-2022-and-save-a-bunch-of-money/</guid>\n\t\t\t\t<description><![CDATA[ If you want to learn JavaScript in 2022 (or take your skills to the next level), all of my JavaScript learning resources are 40-percent off from now through New Year&rsquo;s Day.\n If you prefer self-paced learning, my video courses and ebooks are a great choice. You&rsquo;ll learn the ins-and-outs of a topic in about an hour. For a more deep and immersive experience, a new session of my workshop series starts in January.]]></description>\n\t\t\t\t<content:encoded><![CDATA[ <p>If you want to learn JavaScript in 2022 (or take your skills to the next level), <strong><a href=\"https://gomakethings.com/resources\">all of my JavaScript learning resources</a> are 40-percent off from now through New Year&rsquo;s Day.</strong></p>\n\n<ul>\n<li>If you prefer self-paced learning, my <strong><a href=\"https://vanillajsguides.com\">video courses and ebooks</a></strong> are a great choice. You&rsquo;ll learn the ins-and-outs of a topic in about an hour.</li>\n<li>For a more deep and immersive experience, <strong><a href=\"https://vanillajsacademy.com\">a new session of my workshop series</a></strong> starts in January. You&rsquo;ll work on a series of projects that build on each other, connect with other learners, and get to interact with me directly on Slack and during video office hours.</li>\n</ul>\n\n<p><strong>You’ll also get $436 in free bonuses if you register for Academy or purchase one of the pocket guide bundles (in ebook format, video series, or both).</strong></p>\n\n<ul>\n<li>Watch me live-code vanilla JS projects with the Vanilla JS Live-Code Series. Follow along, try it yourself first, or dig into the completed source code for over a dozen projects. <em>Valued at $239.</em></li>\n<li>Get hands-on learning with real projects with the Project Bundle. You get starter templates, helpful tips and resources, and step-by-step tutorials. <em>Valued at $119.</em></li>\n<li>Learn how to build insanely fast WordPress sites Wicked Fast Websites. You’ll learn how to measure performance, reduce page weight, and make simple server optimizations. <em>Valued at $39.</em></li>\n<li>Learn how to write resumes that get seen by an actual human, navigate the interview process, and more with my Web Developer Career Guide. <em>Valued at $39.</em></li>\n</ul>\n\n<p>Let&rsquo;s make 2022 the year you take your JS skills to the next level!</p>\n]]></content:encoded>\n\t\t\t</item>\n\t\t\n\t</channel>\n</rss>"
  },
  "description": "A simpler, more resilient way to make things for the web.",
  "home_page_url": "https://gomakethings.com",
  "_ext": {
    "date_published": "2022-01-07T15:30:00.000Z",
    "date_modified": "2018-01-15T02:38:44.000Z"
  }
}